var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20909869385737653 ± 0.002096668877265152\n   G2(1) = 0.9196301000137316 ± 0.000874186640362814\n   G2(2) = 0.9815752648927066 ± 0.000610249326733562\n   G2(3) = 0.9884905763297482 ± 0.0008450182372075735\n   G2(4) = 0.9815752648927066 ± 0.000610249326733562\n   G2(5) = 0.9196301000137316 ± 0.000874186640362814\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.939701541311141 ± 0.11151977518015205\n   Replica 2: -3.9977590145439987 ± 0.1282106084689158\n   Replica 3: -4.005850248966161 ± 0.14159322075604303\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip250\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip251\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip252\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.1 2211.02,1003.1 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.366 2211.02,745.366 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.63 2211.02,487.63 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.894 2211.02,229.894 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.1 423.181,1003.1 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.366 423.181,745.366 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.63 423.181,487.63 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.894 423.181,229.894 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M290.043 1016.45 L306.363 1016.45 L306.363 1020.38 L284.418 1020.38 L284.418 1016.45 Q287.08 1013.69 291.664 1009.06 Q296.27 1004.41 297.451 1003.07 Q299.696 1000.54 300.576 998.808 Q301.478 997.049 301.478 995.359 Q301.478 992.604 299.534 990.868 Q297.613 989.132 294.511 989.132 Q292.312 989.132 289.858 989.896 Q287.427 990.66 284.65 992.211 L284.65 987.489 Q287.474 986.354 289.927 985.776 Q292.381 985.197 294.418 985.197 Q299.789 985.197 302.983 987.882 Q306.177 990.567 306.177 995.058 Q306.177 997.188 305.367 999.109 Q304.58 1001.01 302.474 1003.6 Q301.895 1004.27 298.793 1007.49 Q295.691 1010.68 290.043 1016.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M316.224 985.822 L334.58 985.822 L334.58 989.757 L320.506 989.757 L320.506 998.229 Q321.524 997.882 322.543 997.72 Q323.562 997.535 324.58 997.535 Q330.367 997.535 333.747 1000.71 Q337.126 1003.88 337.126 1009.29 Q337.126 1014.87 333.654 1017.97 Q330.182 1021.05 323.862 1021.05 Q321.687 1021.05 319.418 1020.68 Q317.173 1020.31 314.765 1019.57 L314.765 1014.87 Q316.849 1016.01 319.071 1016.56 Q321.293 1017.12 323.77 1017.12 Q327.774 1017.12 330.112 1015.01 Q332.45 1012.91 332.45 1009.29 Q332.45 1005.68 330.112 1003.58 Q327.774 1001.47 323.77 1001.47 Q321.895 1001.47 320.02 1001.89 Q318.168 1002.3 316.224 1003.18 L316.224 985.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 988.901 Q352.728 988.901 350.899 992.465 Q349.094 996.007 349.094 1003.14 Q349.094 1010.24 350.899 1013.81 Q352.728 1017.35 356.339 1017.35 Q359.973 1017.35 361.779 1013.81 Q363.608 1010.24 363.608 1003.14 Q363.608 996.007 361.779 992.465 Q359.973 988.901 356.339 988.901 M356.339 985.197 Q362.149 985.197 365.205 989.803 Q368.284 994.387 368.284 1003.14 Q368.284 1011.86 365.205 1016.47 Q362.149 1021.05 356.339 1021.05 Q350.529 1021.05 347.45 1016.47 Q344.395 1011.86 344.395 1003.14 Q344.395 994.387 347.45 989.803 Q350.529 985.197 356.339 985.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M286.062 728.086 L304.418 728.086 L304.418 732.021 L290.344 732.021 L290.344 740.493 Q291.363 740.146 292.381 739.984 Q293.4 739.799 294.418 739.799 Q300.205 739.799 303.585 742.97 Q306.964 746.141 306.964 751.558 Q306.964 757.137 303.492 760.239 Q300.02 763.317 293.701 763.317 Q291.525 763.317 289.256 762.947 Q287.011 762.577 284.603 761.836 L284.603 757.137 Q286.687 758.271 288.909 758.827 Q291.131 759.382 293.608 759.382 Q297.613 759.382 299.951 757.276 Q302.288 755.169 302.288 751.558 Q302.288 747.947 299.951 745.841 Q297.613 743.734 293.608 743.734 Q291.733 743.734 289.858 744.151 Q288.006 744.567 286.062 745.447 L286.062 728.086 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M326.177 731.165 Q322.566 731.165 320.737 734.729 Q318.932 738.271 318.932 745.401 Q318.932 752.507 320.737 756.072 Q322.566 759.614 326.177 759.614 Q329.811 759.614 331.617 756.072 Q333.446 752.507 333.446 745.401 Q333.446 738.271 331.617 734.729 Q329.811 731.165 326.177 731.165 M326.177 727.461 Q331.987 727.461 335.043 732.067 Q338.122 736.651 338.122 745.401 Q338.122 754.128 335.043 758.734 Q331.987 763.317 326.177 763.317 Q320.367 763.317 317.288 758.734 Q314.233 754.128 314.233 745.401 Q314.233 736.651 317.288 732.067 Q320.367 727.461 326.177 727.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 731.165 Q352.728 731.165 350.899 734.729 Q349.094 738.271 349.094 745.401 Q349.094 752.507 350.899 756.072 Q352.728 759.614 356.339 759.614 Q359.973 759.614 361.779 756.072 Q363.608 752.507 363.608 745.401 Q363.608 738.271 361.779 734.729 Q359.973 731.165 356.339 731.165 M356.339 727.461 Q362.149 727.461 365.205 732.067 Q368.284 736.651 368.284 745.401 Q368.284 754.128 365.205 758.734 Q362.149 763.317 356.339 763.317 Q350.529 763.317 347.45 758.734 Q344.395 754.128 344.395 745.401 Q344.395 736.651 347.45 732.067 Q350.529 727.461 356.339 727.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M284.835 470.35 L307.057 470.35 L307.057 472.341 L294.511 504.91 L289.627 504.91 L301.432 474.285 L284.835 474.285 L284.835 470.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M316.224 470.35 L334.58 470.35 L334.58 474.285 L320.506 474.285 L320.506 482.757 Q321.524 482.41 322.543 482.248 Q323.562 482.063 324.58 482.063 Q330.367 482.063 333.747 485.234 Q337.126 488.405 337.126 493.822 Q337.126 499.401 333.654 502.503 Q330.182 505.581 323.862 505.581 Q321.687 505.581 319.418 505.211 Q317.173 504.841 314.765 504.1 L314.765 499.401 Q316.849 500.535 319.071 501.091 Q321.293 501.646 323.77 501.646 Q327.774 501.646 330.112 499.54 Q332.45 497.433 332.45 493.822 Q332.45 490.211 330.112 488.105 Q327.774 485.998 323.77 485.998 Q321.895 485.998 320.02 486.415 Q318.168 486.831 316.224 487.711 L316.224 470.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 473.429 Q352.728 473.429 350.899 476.994 Q349.094 480.535 349.094 487.665 Q349.094 494.771 350.899 498.336 Q352.728 501.878 356.339 501.878 Q359.973 501.878 361.779 498.336 Q363.608 494.771 363.608 487.665 Q363.608 480.535 361.779 476.994 Q359.973 473.429 356.339 473.429 M356.339 469.725 Q362.149 469.725 365.205 474.331 Q368.284 478.915 368.284 487.665 Q368.284 496.392 365.205 500.998 Q362.149 505.581 356.339 505.581 Q350.529 505.581 347.45 500.998 Q344.395 496.392 344.395 487.665 Q344.395 478.915 347.45 474.331 Q350.529 469.725 356.339 469.725 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M256.664 243.239 L264.303 243.239 L264.303 216.873 L255.992 218.54 L255.992 214.281 L264.256 212.614 L268.932 212.614 L268.932 243.239 L276.571 243.239 L276.571 247.174 L256.664 247.174 L256.664 243.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M296.015 215.693 Q292.404 215.693 290.576 219.258 Q288.77 222.799 288.77 229.929 Q288.77 237.035 290.576 240.6 Q292.404 244.142 296.015 244.142 Q299.65 244.142 301.455 240.6 Q303.284 237.035 303.284 229.929 Q303.284 222.799 301.455 219.258 Q299.65 215.693 296.015 215.693 M296.015 211.989 Q301.826 211.989 304.881 216.595 Q307.96 221.179 307.96 229.929 Q307.96 238.656 304.881 243.262 Q301.826 247.845 296.015 247.845 Q290.205 247.845 287.127 243.262 Q284.071 238.656 284.071 229.929 Q284.071 221.179 287.127 216.595 Q290.205 211.989 296.015 211.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M326.177 215.693 Q322.566 215.693 320.737 219.258 Q318.932 222.799 318.932 229.929 Q318.932 237.035 320.737 240.6 Q322.566 244.142 326.177 244.142 Q329.811 244.142 331.617 240.6 Q333.446 237.035 333.446 229.929 Q333.446 222.799 331.617 219.258 Q329.811 215.693 326.177 215.693 M326.177 211.989 Q331.987 211.989 335.043 216.595 Q338.122 221.179 338.122 229.929 Q338.122 238.656 335.043 243.262 Q331.987 247.845 326.177 247.845 Q320.367 247.845 317.288 243.262 Q314.233 238.656 314.233 229.929 Q314.233 221.179 317.288 216.595 Q320.367 211.989 326.177 211.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 215.693 Q352.728 215.693 350.899 219.258 Q349.094 222.799 349.094 229.929 Q349.094 237.035 350.899 240.6 Q352.728 244.142 356.339 244.142 Q359.973 244.142 361.779 240.6 Q363.608 237.035 363.608 229.929 Q363.608 222.799 361.779 219.258 Q359.973 215.693 356.339 215.693 M356.339 211.989 Q362.149 211.989 365.205 216.595 Q368.284 221.179 368.284 229.929 Q368.284 238.656 365.205 243.262 Q362.149 247.845 356.339 247.845 Q350.529 247.845 347.45 243.262 Q344.395 238.656 344.395 229.929 Q344.395 221.179 347.45 216.595 Q350.529 211.989 356.339 211.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip252)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.894 4017.76,229.894 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.74 461.669,1245.98 462.238,1244.11 462.806,1243.2 463.375,1242.2 463.943,1240.07 464.511,1238.87 465.08,1236.52 465.648,1235.12 466.216,1233.6 466.785,1231.96 467.353,1230.19 467.921,1228.29 468.49,1226.22 469.058,1224.03 469.626,1221.68 470.195,1217.12 470.763,1211.36 471.331,1208.49 471.9,1204.46 472.468,1200.24 473.036,1195.84 473.605,1192.33 474.173,1188.71 474.741,1184.84 475.31,1178.66 475.878,1174.35 476.446,1168.73 477.015,1163.88 477.583,1158.84 478.152,1153.55 478.72,1148.02 479.288,1142.33 479.857,1136.32 480.425,1129.11 480.993,1121.58 481.562,1114.88 482.13,1107.94 482.698,1098.83 483.267,1090.44 483.835,1082.92 484.403,1075.14 484.972,1065.1 485.54,1057.07 486.108,1047.78 486.677,1039.33 487.245,1029.71 487.813,1019.96 488.382,1010.12 488.95,1000.13 489.518,987.991 490.087,976.848 490.655,966.762 491.224,957.513 491.792,946.1 492.36,936.589 492.929,927.096 493.497,917.543 494.065,905.788 494.634,894.157 495.202,880.158 495.77,870.412 496.339,858.589 496.907,847.927 497.475,837.182 498.044,825.411 498.612,815.804 499.18,805.22 499.749,793.767 500.317,781.247 500.885,768.87 501.454,758.702 502.022,745.534 502.59,733.522 503.159,724.912 503.727,715.226 504.295,702.53 504.864,693.193 505.432,682.943 506.001,672.867 506.569,663.977 507.137,655.932 507.706,646.039 508.274,636.4 508.842,625.69 509.411,617.127 509.979,609.826 510.547,601.314 511.116,594.169 511.684,583.999 512.252,575.045 512.821,567.153 513.389,559.429 513.957,551.938 514.526,543.534 515.094,534.349 515.662,527.235 516.231,520.336 516.799,511.473 517.367,504.893 517.936,496.385 518.504,490.043 519.072,482.058 519.641,477.353 520.209,471.788 520.778,465.065 521.346,460.839 521.914,454.48 522.483,448.177 523.051,443.096 523.619,437.096 524.188,432.355 524.756,427.627 525.324,424.081 525.893,421.417 526.461,415.544 527.029,413.36 527.598,409.767 528.166,405.416 528.734,400.861 529.303,396.508 529.871,393.554 530.439,389.422 531.008,385.338 531.576,382.318 532.144,377.361 532.713,373.658 533.281,367.849 533.85,364.273 534.418,358.975 534.986,352.667 535.555,349.806 536.123,348.158 536.691,346.119 537.26,344.399 537.828,341.658 538.396,338.918 538.965,336.22 539.533,334.841 540.101,333.282 540.67,332.857 541.238,329.03 541.806,326.271 542.375,322.625 542.943,320.032 543.511,317.846 544.08,315.608 544.648,315.362 545.216,313.992 545.785,313.909 546.353,311.443 546.921,307.045 547.49,302.936 548.058,304.106 548.627,303.164 549.195,303.22 549.763,302.067 550.332,298.9 550.9,298.956 551.468,300.105 552.037,298.724 552.605,297.626 553.173,294.423 553.742,293.411 554.31,292.471 554.878,292.599 555.447,289.501 556.015,286.285 556.583,287.701 557.152,285.967 557.72,284.091 558.288,284.174 558.857,283.269 559.425,280.487 559.993,278.516 560.562,278.009 561.13,276.471 561.698,275.869 562.267,275.383 562.835,274.75 563.404,274.227 563.972,272.519 564.54,273.11 565.109,271.514 565.677,268.673 566.245,267.293 566.814,266.914 567.382,265.461 567.95,266.32 568.519,264.981 569.087,263.75 569.655,263.478 570.224,263.217 570.792,262.887 571.36,261.506 571.929,261.404 572.497,261.168 573.065,261.101 573.634,260.903 574.202,261.875 574.77,260.502 575.339,259.08 575.907,258.951 576.476,257.773 577.044,257.755 577.612,258.397 578.181,257.18 578.749,255.95 579.317,252.722 579.886,252.642 580.454,251.53 581.022,250.697 581.591,251.689 582.159,252.773 582.727,251.805 583.296,251.739 583.864,249.762 584.432,249.964 585.001,250.018 585.569,250.146 586.137,250.079 586.706,249.022 587.274,249.011 587.842,249.127 588.411,249.293 588.979,248.065 589.547,245.87 590.116,247.204 590.684,247.434 591.253,247.034 591.821,246.146 592.389,247.015 592.958,248.098 593.526,247.934 594.094,246.684 594.663,246.634 595.231,245.757 595.799,241.814 596.368,242.333 596.936,244.774 597.504,244.049 598.073,244.186 598.641,244.112 599.209,244.188 599.778,246.272 600.346,247.037 600.914,246.938 601.483,245.791 602.051,244.75 602.619,242.743 603.188,241.862 603.756,241.869 604.325,242.077 604.893,240.021 605.461,244.43 606.03,243.476 606.598,243.56 607.166,240.572 607.735,242.846 608.303,241.798 608.871,241.054 609.44,240.025 610.008,241.306 610.576,240.315 611.145,240.244 611.713,241.396 612.281,241.476 612.85,241.664 613.418,240.699 613.986,238.857 614.555,234.969 615.123,235.448 615.691,234.133 616.26,235.746 616.828,237.288 617.396,236.714 617.965,236.994 618.533,237.299 619.102,240.702 619.67,240.002 620.238,238.874 620.807,238.074 621.375,236.383 621.943,237.711 622.512,238.823 623.08,237.72 623.648,236.958 624.217,238.085 624.785,238.24 625.353,238.333 625.922,237.483 626.49,235.52 627.058,235.907 627.627,235.016 628.195,235.33 628.763,235.673 629.332,238.178 629.9,235.18 630.468,236.55 631.037,235.809 631.605,236.131 632.173,234.555 632.742,234.312 633.31,235.655 633.879,235.03 634.447,235.279 635.015,232.4 635.584,232.887 636.152,233.497 636.72,234.047 637.289,232.401 637.857,232.771 638.425,235.457 638.994,235.841 639.562,236.197 640.13,235.405 640.699,239.866 641.267,240.768 641.835,240.844 642.404,239.697 642.972,240.513 643.54,239.525 644.109,240.383 644.677,238.02 645.245,235.132 645.814,236.371 646.382,234.58 646.951,234.015 647.519,236.263 648.087,233.585 648.656,235.032 649.224,235.44 649.792,239.806 650.361,238.628 650.929,240.612 651.497,237.527 652.066,236.606 652.634,236.55 653.202,236.524 653.771,235.753 654.339,236.874 654.907,236.934 655.476,237.048 656.044,236.098 656.612,234.273 657.181,234.399 657.749,235.737 658.317,234.663 658.886,234.916 659.454,236.023 660.022,236.257 660.591,234.53 661.159,232.655 661.728,232.04 662.296,234.727 662.864,234.86 663.433,236.013 664.001,235.022 664.569,235.267 665.138,235.33 665.706,237.266 666.274,236.382 666.843,237.708 667.411,237.784 667.979,239.114 668.548,240.959 669.116,238.495 669.684,239.187 670.253,235.898 670.821,235.871 671.389,236.895 671.958,234.622 672.526,237.78 673.094,237.629 673.663,237.649 674.231,233.403 674.799,234.67 675.368,234.925 675.936,235.967 676.505,236.969 677.073,236.629 677.641,234.45 678.21,235.525 678.778,235.458 679.346,235.451 679.915,238.685 680.483,238.282 681.051,237.169 681.62,236.972 682.188,236.809 682.756,236.698 683.325,235.605 683.893,234.509 684.461,233.641 685.03,233.651 685.598,230.617 686.166,231.802 686.735,232.033 687.303,231.115 687.871,230.386 688.44,231.709 689.008,233.052 689.577,235.068 690.145,235.914 690.713,234.637 691.282,237.528 691.85,236.383 692.418,234.172 692.987,233.163 693.555,233.18 694.123,232.116 694.692,230.056 695.26,230.423 695.828,230.891 696.397,232.217 696.965,232.362 697.533,229.44 698.102,229.852 698.67,231.074 699.238,231.189 699.807,230.235 700.375,231.577 700.943,231.848 701.512,230.903 702.08,231.296 702.648,231.804 703.217,228.762 703.785,228.204 704.354,227.757 704.922,227.075 705.49,226.521 706.059,225.197 706.627,227.817 707.195,229.237 707.764,229.697 708.332,231.168 708.9,230.254 709.469,233.622 710.037,233.73 710.605,232.831 711.174,233.104 711.742,232.321 712.31,234.569 712.879,233.662 713.447,233.632 714.015,232.963 714.584,234.205 715.152,235.51 715.72,235.589 716.289,235.522 716.857,235.355 717.425,235.271 717.994,235.205 718.562,235.211 719.131,235.276 719.699,235.28 720.267,232.127 720.836,234.398 721.404,232.556 721.972,231.706 722.541,231.773 723.109,231.837 723.677,229.902 724.246,228.278 724.814,225.643 725.382,225.573 725.951,227.954 726.519,229.6 727.087,233.008 727.656,232.306 728.224,233.395 728.792,235.414 729.361,235.359 729.929,234.326 730.497,232.345 731.066,232.443 731.634,232.56 732.203,233.515 732.771,231.588 733.339,231.884 733.908,234.123 734.476,233.04 735.044,233.992 735.613,235.974 736.181,236.898 736.749,236.509 737.318,235.436 737.886,237.394 738.454,238.117 739.023,238.669 739.591,238.339 740.159,236.98 740.728,238.707 741.296,240.443 741.864,241.831 742.433,239.073 743.001,238.612 743.569,236.976 744.138,236.626 744.706,235.281 745.274,233.983 745.843,232.766 746.411,231.797 746.98,230.834 747.548,229.77 748.116,227.837 748.685,228.07 749.253,229.559 749.821,229.692 750.39,230.931 750.958,231.043 751.526,231.037 752.095,231.179 752.663,232.21 753.231,233.291 753.8,232.114 754.368,231.973 754.936,234.091 755.505,233.73 756.073,230.54 756.641,231.629 757.21,232.705 757.778,231.495 758.346,231.318 758.915,229.349 759.483,230.528 760.052,230.772 760.62,230.718 761.188,232.806 761.757,231.674 762.325,230.732 762.893,230.719 763.462,229.619 764.03,228.795 764.598,228.969 765.167,232.205 765.735,231.902 766.303,231.939 766.872,231.88 767.44,230.022 768.008,229.983 768.577,230.107 769.145,232.303 769.713,231.242 770.282,234.419 770.85,234.15 771.418,236.049 771.987,236.522 772.555,236.449 773.123,235.098 773.692,234.589 774.26,233.284 774.829,234.112 775.397,233.854 775.965,233.731 776.534,234.64 777.102,233.454 777.67,234.336 778.239,234.924 778.807,233.611 779.375,233.399 779.944,232.182 780.512,232.133 781.08,231.997 781.649,232.892 782.217,234.043 782.785,232.757 783.354,229.796 783.922,232.063 784.49,228.96 785.059,230.185 785.627,232.124 786.195,232.168 786.764,227.012 787.332,224.147 787.9,225.557 788.469,226.922 789.037,229.213 789.606,227.265 790.174,226.484 790.742,227.673 791.311,228.756 791.879,227.8 792.447,230.08 793.016,231.197 793.584,229.214 794.152,229.322 794.721,230.257 795.289,227.449 795.857,227.452 796.426,227.719 796.994,226.975 797.562,230.288 798.131,229.37 798.699,229.6 799.267,229.735 799.836,230.014 800.404,227.188 800.972,227.85 801.541,228.023 802.109,228.128 802.678,228.518 803.246,227.805 803.814,228.165 804.383,228.292 804.951,229.481 805.519,226.51 806.088,227.863 806.656,224.922 807.224,226.469 807.793,226.79 808.361,225.053 808.929,223.598 809.498,225.172 810.066,224.56 810.634,226.235 811.203,228.684 811.771,231.198 812.339,229.362 812.908,229.457 813.476,230.532 814.044,230.759 814.613,230.071 815.181,230.305 815.749,230.403 816.318,228.381 816.886,226.623 817.455,228.083 818.023,229.583 818.591,229.611 819.16,228.845 819.728,229.112 820.296,229.502 820.865,227.538 821.433,227.928 822.001,228.21 822.57,228.541 823.138,227.516 823.706,229.943 824.275,231.163 824.843,230.246 825.411,229.449 825.98,229.474 826.548,230.784 827.116,229.972 827.685,230.028 828.253,231.608 828.821,232.891 829.39,232.017 829.958,233.165 830.526,233.339 831.095,231.095 831.663,232.182 832.232,231.355 832.8,232.491 833.368,234.531 833.937,233.423 834.505,234.392 835.073,235.318 835.642,235.087 836.21,235.874 836.778,235.569 837.347,235.464 837.915,237.163 838.483,235.789 839.052,233.517 839.62,233.555 840.188,232.539 840.757,234.582 841.325,235.335 841.893,237.266 842.462,237.897 843.03,237.326 843.598,236.912 844.167,237.338 844.735,236.006 845.304,235.65 845.872,236.202 846.44,233.731 847.009,236.584 847.577,239.051 848.145,239.322 848.714,238.721 849.282,237.988 849.85,233.341 850.419,231.17 850.987,229.862 851.555,230.809 852.124,229.817 852.692,230.106 853.26,230.109 853.829,228.073 854.397,227.139 854.965,231.344 855.534,231.031 856.102,230.922 856.67,229.723 857.239,229.775 857.807,228.844 858.375,227.109 858.944,227.24 859.512,227.262 860.081,226.486 860.649,226.774 861.217,227.033 861.786,226.165 862.354,226.298 862.922,226.607 863.491,224.96 864.059,222.556 864.627,223.176 865.196,222.579 865.764,224.204 866.332,224.625 866.901,226.001 867.469,227.297 868.037,226.458 868.606,227.848 869.174,227.124 869.742,227.366 870.311,227.793 870.879,228.008 871.447,228.122 872.016,229.352 872.584,230.376 873.152,229.388 873.721,227.215 874.289,228.322 874.858,229.654 875.426,227.77 875.994,227.928 876.563,229.356 877.131,229.638 877.699,228.748 878.268,228.94 878.836,232.523 879.404,230.719 879.973,228.833 880.541,229.157 881.109,229.371 881.678,231.61 882.246,231.653 882.814,232.784 883.383,233.653 883.951,233.493 884.519,231.385 885.088,231.422 885.656,232.578 886.224,231.767 886.793,230.775 887.361,230.807 887.93,230.812 888.498,228.745 889.066,227.795 889.635,231.25 890.203,232.163 890.771,234.142 891.34,232.027 891.908,230.988 892.476,230.096 893.045,228.222 893.613,229.482 894.181,229.671 894.75,229.917 895.318,232.223 895.886,230.94 896.455,231.04 897.023,230.013 897.591,230.187 898.16,233.493 898.728,233.276 899.296,231.981 899.865,231.841 900.433,232.848 901.001,233.662 901.57,232.469 902.138,230.353 902.707,231.361 903.275,232.345 903.843,235.313 904.412,233.771 904.98,232.477 905.548,229.174 906.117,229.299 906.685,230.364 907.253,231.344 907.822,232.405 908.39,232.244 908.958,232.08 909.527,231.001 910.095,231.067 910.663,231.001 911.232,231.878 911.8,233.708 912.368,232.632 912.937,232.581 913.505,234.418 914.073,234.291 914.642,233.821 915.21,233.688 915.779,235.343 916.347,234.116 916.915,233.875 917.484,232.515 918.052,233.431 918.62,232.226 919.189,235.377 919.757,236.899 920.325,232.327 920.894,232.066 921.462,232.953 922.03,233.041 922.599,233.063 923.167,232.844 923.735,234.783 924.304,235.485 924.872,237.089 925.44,235.577 926.009,233.844 926.577,233.657 927.145,233.216 927.714,233.106 928.282,231.967 928.85,231.784 929.419,231.707 929.987,230.45 930.556,232.687 931.124,233.393 931.692,233.28 932.261,235.255 932.829,234.769 933.397,234.195 933.966,232.531 934.534,233.206 935.102,232.841 935.671,231.332 936.239,231.27 936.807,232.144 937.376,232.877 937.944,232.773 938.512,233.505 939.081,232.968 939.649,229.579 940.217,228.388 940.786,228.399 941.354,229.65 941.922,229.347 942.491,229.183 943.059,227.01 943.627,227.907 944.196,227.007 944.764,228.294 945.333,228.021 945.901,229.201 946.469,229.309 947.038,230.439 947.606,230.329 948.174,229.079 948.743,230.122 949.311,230.965 949.879,229.616 950.448,229.36 951.016,229.11 951.584,227.043 952.153,225.01 952.721,223.142 953.289,225.442 953.858,226.665 954.426,228.878 954.994,229.192 955.563,228.298 956.131,229.273 956.699,228.203 957.268,228.225 957.836,230.191 958.405,230.206 958.973,233.284 959.541,233.012 960.11,230.717 960.678,231.584 961.246,231.454 961.815,230.455 962.383,230.482 962.951,231.254 963.52,231.148 964.088,231.585 964.656,227.226 965.225,227.255 965.793,228.391 966.361,227.379 966.93,227.371 967.498,226.421 968.066,228.715 968.635,227.638 969.203,226.71 969.771,224.887 970.34,224.149 970.908,224.435 971.476,225.829 972.045,226.977 972.613,227.264 973.182,227.239 973.75,229.392 974.318,227.412 974.887,229.639 975.455,228.654 976.023,228.881 976.592,227.938 977.16,229.169 977.728,230.26 978.297,231.162 978.865,232.127 979.433,230.1 980.002,229.903 980.57,230.12 981.138,231.284 981.707,233.085 982.275,231.694 982.843,232.713 983.412,233.521 983.98,233.443 984.548,230.009 985.117,231.975 985.685,231.682 986.253,231.466 986.822,232.369 987.39,231.147 987.959,231.1 988.527,231.935 989.095,230.877 989.664,230.724 990.232,229.703 990.8,226.678 991.369,228.16 991.937,226.163 992.505,225.301 993.074,225.725 993.642,225.781 994.21,224.864 994.779,229.317 995.347,229.56 995.915,229.825 996.484,229.885 997.052,229.994 997.62,233.202 998.189,234.025 998.757,231.682 999.325,229.363 999.894,227.319 1000.46,228.532 1001.03,230.62 1001.6,231.515 1002.17,230.426 1002.74,230.224 1003.3,232.083 1003.87,231.889 1004.44,230.731 1005.01,231.655 1005.58,231.802 1006.15,230.429 1006.71,229.349 1007.28,229.386 1007.85,229.687 1008.42,232.848 1008.99,232.639 1009.56,232.392 1010.12,231.082 1010.69,230.993 1011.26,230.876 1011.83,229.665 1012.4,228.466 1012.97,227.491 1013.53,229.862 1014.1,230.946 1014.67,229.864 1015.24,226.816 1015.81,222.653 1016.38,221.816 1016.94,221.437 1017.51,223.197 1018.08,221.755 1018.65,223.339 1019.22,223.946 1019.79,222.446 1020.35,223.175 1020.92,223.731 1021.49,223.196 1022.06,223.533 1022.63,224.045 1023.2,224.427 1023.76,225.993 1024.33,226.615 1024.9,226.965 1025.47,227.258 1026.04,222.617 1026.61,222.072 1027.17,224.704 1027.74,226.153 1028.31,227.572 1028.88,229.814 1029.45,229.895 1030.02,228.899 1030.58,227.979 1031.15,229.231 1031.72,230.416 1032.29,231.712 1032.86,235.709 1033.43,236.307 1033.99,234.862 1034.56,233.783 1035.13,233.727 1035.7,233.682 1036.27,233.685 1036.84,232.477 1037.4,231.182 1037.97,233.424 1038.54,232.105 1039.11,233.04 1039.68,233.042 1040.25,234.035 1040.81,233.939 1041.38,234.665 1041.95,233.322 1042.52,234.198 1043.09,233.861 1043.66,235.745 1044.22,236.464 1044.79,233.958 1045.36,233.6 1045.93,231.383 1046.5,231.287 1047.07,233.159 1047.63,234.027 1048.2,233.796 1048.77,234.691 1049.34,235.461 1049.91,233.833 1050.48,234.587 1051.05,234.438 1051.61,233.087 1052.18,232.788 1052.75,231.444 1053.32,233.321 1053.89,233.118 1054.46,232.802 1055.02,233.832 1055.59,231.576 1056.16,232.517 1056.73,234.484 1057.3,232.925 1057.87,232.593 1058.43,231.343 1059,231.155 1059.57,230.815 1060.14,230.735 1060.71,231.687 1061.28,229.57 1061.84,229.749 1062.41,228.768 1062.98,230.007 1063.55,231.12 1064.12,230.886 1064.69,229.963 1065.25,228.708 1065.82,228.774 1066.39,227.606 1066.96,229.672 1067.53,229.667 1068.1,228.46 1068.66,229.61 1069.23,231.684 1069.8,233.786 1070.37,233.575 1070.94,233.463 1071.51,231.943 1072.07,231.694 1072.64,229.403 1073.21,229.189 1073.78,229.253 1074.35,231.241 1074.92,231.174 1075.48,230.769 1076.05,230.643 1076.62,230.441 1077.19,228.298 1077.76,227.429 1078.33,227.719 1078.89,228.882 1079.46,228.846 1080.03,229.598 1080.6,228.519 1081.17,222.362 1081.74,223.937 1082.3,226.247 1082.87,225.428 1083.44,223.78 1084.01,223.294 1084.58,223.505 1085.15,222.787 1085.71,223.229 1086.28,220.512 1086.85,220.23 1087.42,221.908 1087.99,222.386 1088.56,223.846 1089.12,226.295 1089.69,228.752 1090.26,229.903 1090.83,229.863 1091.4,231.094 1091.97,233.189 1092.53,233.989 1093.1,235.017 1093.67,233.656 1094.24,233.334 1094.81,230.881 1095.38,229.738 1095.94,229.678 1096.51,229.605 1097.08,229.484 1097.65,228.727 1098.22,226.904 1098.79,226.329 1099.35,223.675 1099.92,225.559 1100.49,227.148 1101.06,229.334 1101.63,230.357 1102.2,230.36 1102.76,227.149 1103.33,227.348 1103.9,228.547 1104.47,225.827 1105.04,225.299 1105.61,227.84 1106.17,224.876 1106.74,222.274 1107.31,223.827 1107.88,225.45 1108.45,227.038 1109.02,227.326 1109.58,227.863 1110.15,230.228 1110.72,229.255 1111.29,229.244 1111.86,227.378 1112.43,229.929 1112.99,228.065 1113.56,229.477 1114.13,229.768 1114.7,230.066 1115.27,227.869 1115.84,227.167 1116.4,227.403 1116.97,228.698 1117.54,228.7 1118.11,230.1 1118.68,231.414 1119.25,229.558 1119.81,229.598 1120.38,231.935 1120.95,231.991 1121.52,234.241 1122.09,232.07 1122.66,238.115 1123.23,234.315 1123.79,234.114 1124.36,231.724 1124.93,229.697 1125.5,230.728 1126.07,230.884 1126.64,230.974 1127.2,229.061 1127.77,231.098 1128.34,230 1128.91,231.146 1129.48,231.082 1130.05,229.861 1130.61,229.135 1131.18,229.398 1131.75,225.499 1132.32,226.171 1132.89,227.477 1133.46,226.939 1134.02,225.337 1134.59,226.882 1135.16,227.268 1135.73,226.535 1136.3,225.175 1136.87,226.783 1137.43,228.242 1138,230.502 1138.57,231.576 1139.14,232.792 1139.71,233.813 1140.28,235.006 1140.84,234.696 1141.41,235.642 1141.98,236.396 1142.55,235.231 1143.12,237.063 1143.69,235.615 1144.25,236.302 1144.82,234.554 1145.39,232.94 1145.96,231.829 1146.53,230.806 1147.1,229.741 1147.66,228.579 1148.23,230.102 1148.8,229.01 1149.37,228.019 1149.94,228.444 1150.51,227.615 1151.07,226.732 1151.64,225.966 1152.21,225.172 1152.78,225.511 1153.35,225.91 1153.92,228.44 1154.48,228.783 1155.05,229.953 1155.62,228.331 1156.19,226.512 1156.76,227.734 1157.33,229.129 1157.89,230.26 1158.46,230.52 1159.03,226.47 1159.6,228.744 1160.17,226.833 1160.74,227.179 1161.3,227.596 1161.87,227.839 1162.44,228.071 1163.01,230.257 1163.58,233.441 1164.15,234.462 1164.71,235.43 1165.28,234.204 1165.85,233.912 1166.42,234.818 1166.99,235.757 1167.56,236.457 1168.12,235.967 1168.69,234.542 1169.26,235.237 1169.83,234.822 1170.4,237.478 1170.97,236.946 1171.53,238.552 1172.1,242.008 1172.67,239.999 1173.24,240.213 1173.81,239.58 1174.38,240.94 1174.94,240.265 1175.51,237.572 1176.08,236.942 1176.65,237.186 1177.22,235.566 1177.79,233.956 1178.35,234.481 1178.92,234.14 1179.49,233.633 1180.06,235.472 1180.63,233.95 1181.2,231.521 1181.76,232.375 1182.33,232.055 1182.9,228.538 1183.47,229.647 1184.04,229.532 1184.61,230.657 1185.17,232.417 1185.74,232.137 1186.31,229.67 1186.88,229.627 1187.45,228.497 1188.02,227.57 1188.58,228.63 1189.15,228.652 1189.72,228.522 1190.29,229.606 1190.86,229.474 1191.43,231.36 1192,230.123 1192.56,226.824 1193.13,227.926 1193.7,229.218 1194.27,227.965 1194.84,227.959 1195.41,227.917 1195.97,226.785 1196.54,225.831 1197.11,226.112 1197.68,226.549 1198.25,229.002 1198.82,227.145 1199.38,227.267 1199.95,226.579 1200.52,228.669 1201.09,229.566 1201.66,231.626 1202.23,231.737 1202.79,232.542 1203.36,235.497 1203.93,235.176 1204.5,233.624 1205.07,232.195 1205.64,232.082 1206.2,232.862 1206.77,233.409 1207.34,233.097 1207.91,231.763 1208.48,232.439 1209.05,232.161 1209.61,231.977 1210.18,229.813 1210.75,227.769 1211.32,225.554 1211.89,227.658 1212.46,229.782 1213.02,230.851 1213.59,230.564 1214.16,229.259 1214.73,229.261 1215.3,228.187 1215.87,228.304 1216.43,229.402 1217,228.214 1217.57,230.143 1218.14,229.002 1218.71,229.116 1219.28,226.951 1219.84,226.934 1220.41,228.062 1220.98,227.054 1221.55,230.173 1222.12,230.932 1222.69,230.582 1223.25,230.337 1223.82,231.356 1224.39,231.174 1224.96,232.235 1225.53,233.989 1226.1,232.488 1226.66,235.289 1227.23,234.693 1227.8,234.075 1228.37,232.673 1228.94,229.267 1229.51,228.225 1230.07,227.211 1230.64,227.302 1231.21,230.482 1231.78,230.158 1232.35,229.063 1232.92,226.102 1233.48,227.438 1234.05,226.57 1234.62,226.799 1235.19,226.976 1235.76,227.02 1236.33,227.014 1236.89,227.171 1237.46,227.249 1238.03,226.39 1238.6,227.343 1239.17,230.593 1239.74,230.425 1240.3,229.551 1240.87,230.695 1241.44,231.433 1242.01,231.402 1242.58,231.331 1243.15,230.037 1243.71,231.066 1244.28,230.875 1244.85,232.442 1245.42,232.119 1245.99,232.777 1246.56,232.378 1247.12,233.174 1247.69,231.707 1248.26,230.379 1248.83,231.363 1249.4,232.19 1249.97,232.076 1250.53,232.888 1251.1,232.73 1251.67,232.434 1252.24,230.965 1252.81,229.857 1253.38,228.67 1253.94,229.549 1254.51,230.421 1255.08,230.183 1255.65,230.142 1256.22,232.094 1256.79,231.694 1257.35,232.386 1257.92,231.992 1258.49,232.676 1259.06,230.286 1259.63,228.171 1260.2,227.359 1260.76,228.642 1261.33,227.564 1261.9,227.752 1262.47,227.759 1263.04,228.855 1263.61,227.925 1264.18,225.883 1264.74,226.074 1265.31,226.438 1265.88,224.711 1266.45,222.995 1267.02,223.493 1267.59,222.707 1268.15,223.237 1268.72,224.627 1269.29,225.046 1269.86,225.418 1270.43,224.582 1271,225.975 1271.56,229.369 1272.13,231.276 1272.7,230.358 1273.27,227.199 1273.84,226.182 1274.41,225.314 1274.97,226.635 1275.54,226.84 1276.11,229.121 1276.68,227.224 1277.25,227.354 1277.82,227.369 1278.38,228.459 1278.95,227.606 1279.52,227.812 1280.09,227.921 1280.66,228.199 1281.23,227.399 1281.79,228.671 1282.36,227.911 1282.93,230.102 1283.5,230.058 1284.07,228.199 1284.64,227.156 1285.2,227.408 1285.77,227.798 1286.34,229.041 1286.91,229.173 1287.48,230.32 1288.05,228.347 1288.61,228.255 1289.18,228.365 1289.75,228.677 1290.32,229.674 1290.89,228.418 1291.46,229.348 1292.02,229.135 1292.59,229.087 1293.16,230.329 1293.73,229.516 1294.3,230.569 1294.87,228.497 1295.43,228.512 1296,229.691 1296.57,230.84 1297.14,228.742 1297.71,228.777 1298.28,229.085 1298.84,227.16 1299.41,227.381 1299.98,227.537 1300.55,228.617 1301.12,230.956 1301.69,232.087 1302.25,229.966 1302.82,228.859 1303.39,227.905 1303.96,228.167 1304.53,228.248 1305.1,227.335 1305.66,228.74 1306.23,228.729 1306.8,228.751 1307.37,227.679 1307.94,228.848 1308.51,230.261 1309.07,232.409 1309.64,231.241 1310.21,230.236 1310.78,231.316 1311.35,228.225 1311.92,227.44 1312.48,226.665 1313.05,227.992 1313.62,226.983 1314.19,227.312 1314.76,225.801 1315.33,223.983 1315.89,223.594 1316.46,224.327 1317.03,224.95 1317.6,224.461 1318.17,225.112 1318.74,226.785 1319.3,227.05 1319.87,228.623 1320.44,227.863 1321.01,228.31 1321.58,229.469 1322.15,229.613 1322.71,230.899 1323.28,230.892 1323.85,231.073 1324.42,232.177 1324.99,231.25 1325.56,229.485 1326.12,228.469 1326.69,227.573 1327.26,227.888 1327.83,227.922 1328.4,228.212 1328.97,228.607 1329.53,229.159 1330.1,229.459 1330.67,229.572 1331.24,229.577 1331.81,229.537 1332.38,230.794 1332.94,231.05 1333.51,231.331 1334.08,231.37 1334.65,231.54 1335.22,233.359 1335.79,234.577 1336.36,233.285 1336.92,234.134 1337.49,233.962 1338.06,234.657 1338.63,235.589 1339.2,234.16 1339.77,234.956 1340.33,233.625 1340.9,235.531 1341.47,235.067 1342.04,235.855 1342.61,235.283 1343.18,233.133 1343.74,233.116 1344.31,236.14 1344.88,234.915 1345.45,234.631 1346.02,234.077 1346.59,231.858 1347.15,231.941 1347.72,231.746 1348.29,231.908 1348.86,232.92 1349.43,232.656 1350,230.43 1350.56,231.628 1351.13,230.595 1351.7,229.708 1352.27,229.707 1352.84,230.821 1353.41,231.99 1353.97,230.898 1354.54,228.908 1355.11,227.866 1355.68,230.207 1356.25,231.223 1356.82,231.006 1357.38,232.956 1357.95,231.932 1358.52,234.27 1359.09,235.017 1359.66,235.733 1360.23,234.35 1360.79,233.252 1361.36,232.048 1361.93,231.613 1362.5,230.547 1363.07,231.486 1363.64,233.583 1364.2,234.028 1364.77,233.613 1365.34,233.305 1365.91,235.062 1366.48,236.529 1367.05,235.945 1367.61,238.444 1368.18,237.563 1368.75,236.914 1369.32,236.033 1369.89,235.258 1370.46,234.776 1371.02,234.401 1371.59,231.856 1372.16,232.574 1372.73,231.049 1373.3,230.724 1373.87,229.49 1374.43,228.58 1375,228.604 1375.57,229.647 1376.14,229.562 1376.71,230.61 1377.28,229.402 1377.84,230.143 1378.41,226.92 1378.98,227.284 1379.55,225.199 1380.12,226.195 1380.69,226.373 1381.25,226.418 1381.82,223.491 1382.39,225.944 1382.96,225.387 1383.53,224.656 1384.1,224.911 1384.66,226.237 1385.23,227.473 1385.8,228.582 1386.37,231.745 1386.94,231.559 1387.51,232.428 1388.07,232.251 1388.64,231.063 1389.21,228.917 1389.78,227.81 1390.35,227.005 1390.92,225.388 1391.48,225.525 1392.05,224.723 1392.62,225.056 1393.19,225.312 1393.76,225.45 1394.33,224.466 1394.89,225.722 1395.46,226.013 1396.03,226.424 1396.6,227.79 1397.17,225.854 1397.74,224.196 1398.3,224.531 1398.87,225.006 1399.44,224.479 1400.01,225.96 1400.58,226.282 1401.15,227.511 1401.71,226.468 1402.28,226.904 1402.85,227.079 1403.42,227.308 1403.99,228.484 1404.56,226.616 1405.13,226.842 1405.69,226.195 1406.26,226.595 1406.83,225.729 1407.4,225.135 1407.97,226.603 1408.54,225.735 1409.1,223.291 1409.67,221.827 1410.24,223.612 1410.81,224.265 1411.38,225.866 1411.95,226.426 1412.51,228.867 1413.08,227.942 1413.65,227.193 1414.22,227.575 1414.79,227.682 1415.36,228.983 1415.92,229.034 1416.49,230.209 1417.06,231.353 1417.63,230.349 1418.2,232.317 1418.77,229.029 1419.33,230.186 1419.9,231.249 1420.47,231.442 1421.04,232.246 1421.61,233.04 1422.18,234.986 1422.74,233.773 1423.31,232.661 1423.88,231.618 1424.45,230.309 1425.02,231.274 1425.59,230.274 1426.15,231.495 1426.72,233.432 1427.29,235.267 1427.86,236.162 1428.43,236.689 1429,234.298 1429.56,234.919 1430.13,234.818 1430.7,233.255 1431.27,232.893 1431.84,232.694 1432.41,231.353 1432.97,229.047 1433.54,230.283 1434.11,230.535 1434.68,229.663 1435.25,230.615 1435.82,227.611 1436.38,227.792 1436.95,230.466 1437.52,231.664 1438.09,232.53 1438.66,233.629 1439.23,231.17 1439.79,232.118 1440.36,232.019 1440.93,234.091 1441.5,234.696 1442.07,235.527 1442.64,235.181 1443.2,233.858 1443.77,237.489 1444.34,234.986 1444.91,235.491 1445.48,232.986 1446.05,232.808 1446.61,234.65 1447.18,233.226 1447.75,232.702 1448.32,233.637 1448.89,233.164 1449.46,230.669 1450.02,227.353 1450.59,228.594 1451.16,228.558 1451.73,229.557 1452.3,230.577 1452.87,228.391 1453.43,226.386 1454,227.723 1454.57,230.95 1455.14,233.963 1455.71,234.509 1456.28,233.21 1456.84,231.761 1457.41,231.66 1457.98,231.507 1458.55,231.181 1459.12,229.872 1459.69,228.554 1460.25,227.625 1460.82,228.863 1461.39,230.312 1461.96,230.261 1462.53,228.054 1463.1,229.086 1463.66,228.17 1464.23,227.154 1464.8,228.254 1465.37,226.276 1465.94,227.469 1466.51,228.624 1467.07,230.699 1467.64,228.562 1468.21,230.537 1468.78,230.451 1469.35,230.43 1469.92,230.503 1470.48,231.359 1471.05,233.265 1471.62,233.118 1472.19,229.866 1472.76,228.828 1473.33,230.824 1473.89,231.663 1474.46,232.47 1475.03,230.428 1475.6,231.552 1476.17,233.592 1476.74,233.209 1477.31,232.053 1477.87,231.773 1478.44,230.732 1479.01,230.694 1479.58,227.645 1480.15,227.809 1480.72,226.637 1481.28,225.68 1481.85,225.742 1482.42,226.867 1482.99,225.797 1483.56,228.044 1484.13,228.091 1484.69,229.523 1485.26,226.54 1485.83,225.498 1486.4,224.658 1486.97,224.061 1487.54,224.499 1488.1,223.875 1488.67,225.173 1489.24,226.43 1489.81,225.614 1490.38,226.927 1490.95,229.241 1491.51,230.403 1492.08,233.752 1492.65,233.545 1493.22,232.328 1493.79,230.242 1494.36,230.321 1494.92,231.28 1495.49,230.203 1496.06,230.239 1496.63,230.306 1497.2,229.233 1497.77,230.245 1498.33,230.362 1498.9,230.568 1499.47,229.613 1500.04,228.495 1500.61,228.739 1501.18,229.886 1501.74,228.752 1502.31,227.01 1502.88,228.169 1503.45,228.279 1504.02,227.313 1504.59,228.666 1505.15,229.954 1505.72,231.078 1506.29,231.963 1506.86,233.077 1507.43,232.898 1508,233.487 1508.56,234.175 1509.13,235.024 1509.7,234.512 1510.27,235.303 1510.84,235.988 1511.41,235.339 1511.97,234.818 1512.54,234.695 1513.11,234.486 1513.68,236.13 1514.25,235.615 1514.82,235.201 1515.38,231.76 1515.95,228.302 1516.52,230.33 1517.09,229.359 1517.66,228.317 1518.23,228.654 1518.79,229.035 1519.36,228.123 1519.93,230.211 1520.5,229.013 1521.07,228.659 1521.64,229.659 1522.2,230.814 1522.77,228.554 1523.34,229.714 1523.91,228.617 1524.48,229.678 1525.05,228.67 1525.61,229.81 1526.18,229.848 1526.75,230.844 1527.32,231.645 1527.89,231.441 1528.46,230.318 1529.02,229.183 1529.59,230.37 1530.16,230.209 1530.73,229.275 1531.3,227.263 1531.87,226.218 1532.43,227.622 1533,226.773 1533.57,225.912 1534.14,225.166 1534.71,222.469 1535.28,223.084 1535.84,223.423 1536.41,220.694 1536.98,222.355 1537.55,224.095 1538.12,223.293 1538.69,224.872 1539.25,225.24 1539.82,227.734 1540.39,229.146 1540.96,228.4 1541.53,225.435 1542.1,226.944 1542.66,227.19 1543.23,225.157 1543.8,225.751 1544.37,227.364 1544.94,227.64 1545.51,230.003 1546.08,229.287 1546.64,229.312 1547.21,228.272 1547.78,228.427 1548.35,227.554 1548.92,228.031 1549.49,228.322 1550.05,227.534 1550.62,227.703 1551.19,229.123 1551.76,233.293 1552.33,233.139 1552.9,232.99 1553.46,232.945 1554.03,235.814 1554.6,236.416 1555.17,235.89 1555.74,234.664 1556.31,234.379 1556.87,234.23 1557.44,231.968 1558.01,232.778 1558.58,233.566 1559.15,232.173 1559.72,229.939 1560.28,232.036 1560.85,232.937 1561.42,231.848 1561.99,231.791 1562.56,231.827 1563.13,231.733 1563.69,232.327 1564.26,233.101 1564.83,232.908 1565.4,232.606 1565.97,232.468 1566.54,233.24 1567.1,234.219 1567.67,233.899 1568.24,234.503 1568.81,236.366 1569.38,233.831 1569.95,233.319 1570.51,234.026 1571.08,234.554 1571.65,234.137 1572.22,234.696 1572.79,233.1 1573.36,233.611 1573.92,233.13 1574.49,230.86 1575.06,231.763 1575.63,230.458 1576.2,231.393 1576.77,229.996 1577.33,229.992 1577.9,228.087 1578.47,227.869 1579.04,228.045 1579.61,228.23 1580.18,229.151 1580.74,229.151 1581.31,229.016 1581.88,227.984 1582.45,228.971 1583.02,228.73 1583.59,227.798 1584.15,227.778 1584.72,229.752 1585.29,231.565 1585.86,232.338 1586.43,231.932 1587,231.942 1587.56,233.673 1588.13,233.421 1588.7,232.983 1589.27,234.809 1589.84,232.011 1590.41,229.772 1590.97,229.763 1591.54,229.811 1592.11,229.602 1592.68,228.536 1593.25,227.864 1593.82,228.918 1594.38,227.932 1594.95,226.165 1595.52,221.968 1596.09,222.584 1596.66,223.018 1597.23,221.606 1597.79,223.129 1598.36,223.493 1598.93,225.08 1599.5,225.416 1600.07,225.692 1600.64,224.962 1601.2,224.369 1601.77,226.034 1602.34,226.242 1602.91,228.536 1603.48,229.789 1604.05,231.067 1604.61,231.069 1605.18,233.127 1605.75,230.68 1606.32,229.761 1606.89,232.956 1607.46,231.673 1608.02,232.459 1608.59,233.359 1609.16,233.185 1609.73,232.978 1610.3,233.711 1610.87,234.238 1611.43,235.739 1612,234.382 1612.57,234.795 1613.14,235.209 1613.71,236.107 1614.28,237.345 1614.84,236.618 1615.41,235.025 1615.98,234.458 1616.55,234.932 1617.12,233.316 1617.69,231.946 1618.26,231.877 1618.82,231.969 1619.39,231.562 1619.96,230.418 1620.53,228.057 1621.1,228.296 1621.67,226.272 1622.23,224.207 1622.8,222.423 1623.37,221.767 1623.94,224.279 1624.51,224.852 1625.08,227.036 1625.64,226.522 1626.21,227.839 1626.78,228.819 1627.35,229.94 1627.92,232.124 1628.49,230.73 1629.05,230.686 1629.62,230.725 1630.19,234.777 1630.76,233.256 1631.33,233.979 1631.9,230.506 1632.46,230.503 1633.03,230.57 1633.6,229.562 1634.17,230.367 1634.74,230.274 1635.31,228.118 1635.87,228.295 1636.44,228.513 1637.01,226.492 1637.58,224.844 1638.15,223.172 1638.72,222.684 1639.28,223.052 1639.85,222.488 1640.42,225.136 1640.99,224.458 1641.56,222.813 1642.13,226.402 1642.69,225.701 1643.26,226.162 1643.83,225.348 1644.4,225.667 1644.97,226.097 1645.54,225.407 1646.1,225.678 1646.67,226.947 1647.24,228.225 1647.81,230.411 1648.38,233.696 1648.95,233.517 1649.51,234.178 1650.08,230.996 1650.65,231.024 1651.22,228.977 1651.79,226.158 1652.36,226.65 1652.92,227.007 1653.49,230.34 1654.06,229.419 1654.63,228.553 1655.2,227.726 1655.77,227.854 1656.33,228.113 1656.9,226.357 1657.47,228.882 1658.04,233.152 1658.61,232.044 1659.18,234.132 1659.74,234.881 1660.31,235.594 1660.88,235.259 1661.45,235.727 1662.02,235.501 1662.59,234.245 1663.15,235.211 1663.72,233.978 1664.29,233.668 1664.86,233.131 1665.43,231.687 1666,230.622 1666.56,229.635 1667.13,228.724 1667.7,229.742 1668.27,229.696 1668.84,227.869 1669.41,225.858 1669.97,225.126 1670.54,224.363 1671.11,224.78 1671.68,223.943 1672.25,225.438 1672.82,224.865 1673.38,226.235 1673.95,225.757 1674.52,227.127 1675.09,226.129 1675.66,222.264 1676.23,225.152 1676.79,224.574 1677.36,224.067 1677.93,224.716 1678.5,226.178 1679.07,226.348 1679.64,229.034 1680.2,230.179 1680.77,232.238 1681.34,233.211 1681.91,233.055 1682.48,233.803 1683.05,234.433 1683.61,233.098 1684.18,229.574 1684.75,228.66 1685.32,230.528 1685.89,233.593 1686.46,235.431 1687.02,236.96 1687.59,237.611 1688.16,236.89 1688.73,238.294 1689.3,237.727 1689.87,237.18 1690.44,237.538 1691,238.923 1691.57,238.363 1692.14,236.526 1692.71,235.175 1693.28,238.196 1693.85,237.789 1694.41,237.33 1694.98,238.489 1695.55,237.736 1696.12,238.077 1696.69,238.407 1697.26,239.815 1697.82,239 1698.39,239.166 1698.96,238.293 1699.53,237.679 1700.1,236.998 1700.67,236.342 1701.23,233.742 1701.8,234.195 1702.37,232.546 1702.94,230.097 1703.51,230.012 1704.08,228.698 1704.64,228.427 1705.21,227.25 1705.78,225.277 1706.35,223.396 1706.92,224.607 1707.49,224.897 1708.05,225.005 1708.62,224.015 1709.19,224.049 1709.76,224.344 1710.33,223.768 1710.9,224.396 1711.46,224.755 1712.03,224.91 1712.6,225.938 1713.17,226.895 1713.74,227.136 1714.31,227.128 1714.87,230.4 1715.44,227.213 1716.01,227.498 1716.58,227.686 1717.15,227.806 1717.72,228.874 1718.28,228.877 1718.85,229.905 1719.42,228.605 1719.99,228.549 1720.56,227.625 1721.13,227.039 1721.69,223.924 1722.26,226.961 1722.83,224.967 1723.4,225.327 1723.97,225.671 1724.54,225.976 1725.1,227.371 1725.67,225.522 1726.24,225.924 1726.81,225.174 1727.38,227.715 1727.95,229.754 1728.51,229.689 1729.08,230.753 1729.65,230.632 1730.22,232.674 1730.79,232.601 1731.36,231.553 1731.92,228.299 1732.49,227.362 1733.06,228.668 1733.63,227.628 1734.2,228.909 1734.77,229.04 1735.33,227.938 1735.9,227.052 1736.47,226.137 1737.04,226.532 1737.61,227.815 1738.18,227.965 1738.74,230.015 1739.31,231.056 1739.88,230.115 1740.45,229.11 1741.02,229.241 1741.59,232.253 1742.15,234.368 1742.72,235.178 1743.29,234.748 1743.86,232.252 1744.43,232.052 1745,234.103 1745.56,233.755 1746.13,231.301 1746.7,229.177 1747.27,228.215 1747.84,229.303 1748.41,227.16 1748.97,229.477 1749.54,230.823 1750.11,229.785 1750.68,230.774 1751.25,231.664 1751.82,231.436 1752.38,232.38 1752.95,230.115 1753.52,230.286 1754.09,230.329 1754.66,231.377 1755.23,229.412 1755.79,227.537 1756.36,228.652 1756.93,229.695 1757.5,228.421 1758.07,226.487 1758.64,226.71 1759.21,226.833 1759.77,226.922 1760.34,226.157 1760.91,225.516 1761.48,224.684 1762.05,224.034 1762.62,224.481 1763.18,224.733 1763.75,226.125 1764.32,225.26 1764.89,226.616 1765.46,226.909 1766.03,224.822 1766.59,225.175 1767.16,224.546 1767.73,222.808 1768.3,222.303 1768.87,223.049 1769.44,226.746 1770,227.82 1770.57,227.011 1771.14,227.312 1771.71,226.517 1772.28,227.888 1772.85,228.223 1773.41,228.342 1773.98,228.408 1774.55,230.694 1775.12,230.854 1775.69,228.846 1776.26,228.011 1776.82,228.243 1777.39,228.496 1777.96,230.74 1778.53,229.776 1779.1,228.695 1779.67,229.995 1780.23,231.088 1780.8,232.258 1781.37,231.382 1781.94,232.546 1782.51,232.691 1783.08,232.616 1783.64,233.522 1784.21,232.29 1784.78,234.447 1785.35,234.283 1785.92,234.336 1786.49,234.215 1787.05,234.003 1787.62,231.668 1788.19,231.455 1788.76,230.294 1789.33,228.201 1789.9,229.123 1790.46,227.166 1791.03,226.284 1791.6,226.491 1792.17,228.983 1792.74,230.027 1793.31,230.09 1793.87,229.136 1794.44,229.394 1795.01,229.757 1795.58,231.704 1796.15,231.709 1796.72,233.669 1797.28,234.626 1797.85,231.191 1798.42,228.911 1798.99,230.201 1799.56,231.262 1800.13,231.285 1800.69,231.459 1801.26,231.327 1801.83,229.322 1802.4,229.37 1802.97,230.685 1803.54,232.818 1804.1,231.331 1804.67,231.297 1805.24,228.151 1805.81,225.21 1806.38,230.68 1806.95,229.702 1807.51,228.689 1808.08,229.826 1808.65,230.134 1809.22,230.191 1809.79,231.007 1810.36,234.147 1810.92,233.9 1811.49,233.552 1812.06,233.107 1812.63,234.838 1813.2,234.474 1813.77,235.113 1814.33,233.771 1814.9,232.518 1815.47,230.373 1816.04,228.252 1816.61,228.424 1817.18,230.643 1817.74,230.566 1818.31,231.512 1818.88,230.311 1819.45,229.5 1820.02,229.518 1820.59,228.52 1821.15,225.373 1821.72,225.86 1822.29,226.23 1822.86,225.632 1823.43,225.875 1824,226.347 1824.56,226.727 1825.13,229.123 1825.7,231.283 1826.27,232.184 1826.84,232.104 1827.41,232.976 1827.97,230.673 1828.54,231.889 1829.11,230.841 1829.68,233.895 1830.25,232.601 1830.82,230.301 1831.39,229.445 1831.95,228.547 1832.52,229.689 1833.09,230.485 1833.66,231.553 1834.23,230.136 1834.8,227.957 1835.36,229.982 1835.93,229.083 1836.5,230.313 1837.07,234.34 1837.64,232.909 1838.21,229.792 1838.77,227.845 1839.34,229.032 1839.91,228.073 1840.48,229.41 1841.05,234.81 1841.62,235.595 1842.18,232.911 1842.75,232.5 1843.32,233.204 1843.89,232.696 1844.46,232.564 1845.03,232.539 1845.59,233.448 1846.16,234.369 1846.73,233.977 1847.3,232.52 1847.87,233.431 1848.44,232.05 1849,228.712 1849.57,229.012 1850.14,227.086 1850.71,228.384 1851.28,230.324 1851.85,229.22 1852.41,229.21 1852.98,229.252 1853.55,227.137 1854.12,226.363 1854.69,225.489 1855.26,225.75 1855.82,225.975 1856.39,226.091 1856.96,226.443 1857.53,228.811 1858.1,229.9 1858.67,232.056 1859.23,231.737 1859.8,232.423 1860.37,235.422 1860.94,235.095 1861.51,231.487 1862.08,231.384 1862.64,233.25 1863.21,228.811 1863.78,230.159 1864.35,231.074 1864.92,232.012 1865.49,230.764 1866.05,230.715 1866.62,230.659 1867.19,231.578 1867.76,231.357 1868.33,231.172 1868.9,231.117 1869.46,229.978 1870.03,232.914 1870.6,233.617 1871.17,233.345 1871.74,231.176 1872.31,232.19 1872.87,231.055 1873.44,231.996 1874.01,233.944 1874.58,233.502 1875.15,232.079 1875.72,232.929 1876.28,231.439 1876.85,230.439 1877.42,230.317 1877.99,232.581 1878.56,233.372 1879.13,232.845 1879.69,233.656 1880.26,234.423 1880.83,232.955 1881.4,233.855 1881.97,232.433 1882.54,232.159 1883.1,231.989 1883.67,232.8 1884.24,230.546 1884.81,230.455 1885.38,230.212 1885.95,228.997 1886.51,226.816 1887.08,228.007 1887.65,228.032 1888.22,228.071 1888.79,228.158 1889.36,230.224 1889.92,229.987 1890.49,226.815 1891.06,226.839 1891.63,221.875 1892.2,222.465 1892.77,221.858 1893.33,225.585 1893.9,225.844 1894.47,227.113 1895.04,229.098 1895.61,229.133 1896.18,229.341 1896.74,229.155 1897.31,229.055 1897.88,230.222 1898.45,228.997 1899.02,232.111 1899.59,231.999 1900.16,232.968 1900.72,231.729 1901.29,231.563 1901.86,229.291 1902.43,229.09 1903,230.135 1903.57,229.996 1904.13,231.006 1904.7,231.858 1905.27,231.662 1905.84,231.448 1906.41,231.883 1906.98,230.634 1907.54,230.361 1908.11,228.068 1908.68,229.135 1909.25,228.049 1909.82,227.987 1910.39,226.978 1910.95,228.312 1911.52,229.465 1912.09,225.209 1912.66,226.431 1913.23,227.769 1913.8,226.719 1914.36,230.014 1914.93,230.795 1915.5,231.751 1916.07,233.591 1916.64,234.199 1917.21,232.955 1917.77,230.738 1918.34,230.587 1918.91,231.453 1919.48,231.356 1920.05,230.261 1920.62,229.107 1921.18,230.389 1921.75,233.288 1922.32,233.866 1922.89,234.439 1923.46,233.952 1924.03,233.786 1924.59,232.147 1925.16,230.922 1925.73,229.419 1926.3,227.194 1926.87,228.38 1927.44,228.439 1928,229.682 1928.57,227.507 1929.14,226.497 1929.71,227.665 1930.28,227.828 1930.85,228.906 1931.41,227.793 1931.98,229.955 1932.55,229.939 1933.12,225.682 1933.69,225.813 1934.26,223.853 1934.82,221.086 1935.39,220.52 1935.96,223.145 1936.53,223.621 1937.1,224.285 1937.67,225.787 1938.23,227.257 1938.8,225.275 1939.37,225.688 1939.94,226.102 1940.51,225.298 1941.08,226.504 1941.64,228.948 1942.21,226.964 1942.78,228.13 1943.35,227.318 1943.92,226.41 1944.49,227.795 1945.05,228.832 1945.62,227.916 1946.19,231.078 1946.76,231.085 1947.33,230.029 1947.9,231.101 1948.46,230.845 1949.03,232.89 1949.6,234.877 1950.17,232.4 1950.74,230.12 1951.31,231.135 1951.87,228.038 1952.44,227.109 1953.01,228.658 1953.58,225.418 1954.15,226.731 1954.72,227.02 1955.28,226.263 1955.85,225.377 1956.42,225.749 1956.99,226.853 1957.56,225.937 1958.13,226.378 1958.69,227.743 1959.26,226.812 1959.83,227.322 1960.4,229.538 1960.97,229.669 1961.54,228.766 1962.1,224.818 1962.67,225.222 1963.24,223.639 1963.81,225.005 1964.38,224.253 1964.95,225.747 1965.51,226.111 1966.08,224.405 1966.65,222.725 1967.22,222.265 1967.79,222.985 1968.36,221.745 1968.92,223.3 1969.49,222.981 1970.06,224.604 1970.63,224.962 1971.2,226.343 1971.77,226.756 1972.34,227.054 1972.9,226.426 1973.47,227.852 1974.04,229.275 1974.61,228.487 1975.18,226.811 1975.75,228.502 1976.31,228.833 1976.88,226.298 1977.45,229.115 1978.02,230.29 1978.59,228.341 1979.16,228.823 1979.72,229.097 1980.29,229.262 1980.86,231.375 1981.43,231.477 1982,233.472 1982.57,233.313 1983.13,233.172 1983.7,234.225 1984.27,234.224 1984.84,235.055 1985.41,233.547 1985.98,231.54 1986.54,230.587 1987.11,229.429 1987.68,231.907 1988.25,232.113 1988.82,231.194 1989.39,230.329 1989.95,229.412 1990.52,230.699 1991.09,230.792 1991.66,232.151 1992.23,233.165 1992.8,233.971 1993.36,233.758 1993.93,233.672 1994.5,233.692 1995.07,231.489 1995.64,231.531 1996.21,231.446 1996.77,233.558 1997.34,233.327 1997.91,231.307 1998.48,229.001 1999.05,230.243 1999.62,231.535 2000.18,231.514 2000.75,231.488 2001.32,231.605 2001.89,228.507 2002.46,229.637 2003.03,230.806 2003.59,229.974 2004.16,228.989 2004.73,232.229 2005.3,232.096 2005.87,232.061 2006.44,232.258 2007,233.135 2007.57,232.874 2008.14,230.847 2008.71,232.785 2009.28,233.882 2009.85,233.806 2010.41,232.58 2010.98,232.448 2011.55,234.187 2012.12,233.043 2012.69,232.986 2013.26,232.688 2013.82,232.575 2014.39,233.446 2014.96,233.248 2015.53,232.049 2016.1,231.841 2016.67,229.795 2017.23,229.766 2017.8,230.932 2018.37,228.953 2018.94,228.076 2019.51,228.219 2020.08,229.426 2020.64,230.416 2021.21,230.583 2021.78,232.576 2022.35,232.261 2022.92,234.224 2023.49,232.998 2024.05,233.875 2024.62,234.711 2025.19,234.54 2025.76,235.057 2026.33,234.936 2026.9,234.491 2027.46,235.11 2028.03,233.493 2028.6,234.236 2029.17,237.101 2029.74,235.491 2030.31,235.127 2030.87,236.028 2031.44,235.482 2032.01,234.8 2032.58,232.188 2033.15,231.915 2033.72,231.862 2034.28,230.55 2034.85,229.517 2035.42,231.503 2035.99,230.429 2036.56,230.363 2037.13,229.408 2037.69,230.307 2038.26,231.122 2038.83,228.635 2039.4,230.682 2039.97,233.502 2040.54,233.241 2041.11,234.188 2041.67,232.833 2042.24,232.485 2042.81,232.182 2043.38,233.005 2043.95,233.539 2044.52,233.097 2045.08,231.822 2045.65,231.559 2046.22,230.314 2046.79,230.993 2047.36,230.837 2047.93,228.659 2048.49,228.672 2049.06,227.66 2049.63,226.64 2050.2,228.978 2050.77,227.037 2051.34,227.148 2051.9,227.194 2052.47,229.268 2053.04,229.497 2053.61,228.358 2054.18,227.215 2054.75,226.22 2055.31,224.3 2055.88,224.535 2056.45,223.858 2057.02,223.392 2057.59,223.928 2058.16,225.431 2058.72,226.802 2059.29,227.34 2059.86,224.576 2060.43,226.108 2061,228.19 2061.57,228.306 2062.13,227.405 2062.7,228.819 2063.27,228.813 2063.84,230.87 2064.41,229.466 2064.98,227.297 2065.54,230.445 2066.11,230.47 2066.68,229.236 2067.25,229.292 2067.82,229.281 2068.39,229.339 2068.95,229.177 2069.52,229.233 2070.09,229.257 2070.66,230.311 2071.23,232.458 2071.8,232.516 2072.36,233.553 2072.93,233.33 2073.5,236.106 2074.07,234.743 2074.64,233.447 2075.21,233.26 2075.77,231.841 2076.34,233.808 2076.91,232.486 2077.48,231.331 2078.05,232.212 2078.62,231.068 2079.18,231.928 2079.75,233.531 2080.32,230.097 2080.89,228.03 2081.46,228.154 2082.03,230.212 2082.59,232.128 2083.16,232.675 2083.73,231.317 2084.3,232.135 2084.87,231.881 2085.44,228.704 2086,228.818 2086.57,226.725 2087.14,228.01 2087.71,230.108 2088.28,229.78 2088.85,228.476 2089.41,230.522 2089.98,230.49 2090.55,230.549 2091.12,230.562 2091.69,230.374 2092.26,230.384 2092.82,229.222 2093.39,230.132 2093.96,231.108 2094.53,230.063 2095.1,231.801 2095.67,230.683 2096.23,229.591 2096.8,227.711 2097.37,225.934 2097.94,224.969 2098.51,225.191 2099.08,222.421 2099.64,219.895 2100.21,220.694 2100.78,222.377 2101.35,221.908 2101.92,223.678 2102.49,225.229 2103.05,225.637 2103.62,224.786 2104.19,224.989 2104.76,225.241 2105.33,228.751 2105.9,227.977 2106.46,229.174 2107.03,228.027 2107.6,229.301 2108.17,230.515 2108.74,232.728 2109.31,230.314 2109.87,229.341 2110.44,228.16 2111.01,229.286 2111.58,229.254 2112.15,230.387 2112.72,231.51 2113.29,228.353 2113.85,227.492 2114.42,227.759 2114.99,227.044 2115.56,228.188 2116.13,227.288 2116.7,227.814 2117.26,227.959 2117.83,230.171 2118.4,230.258 2118.97,233.376 2119.54,232.124 2120.11,231.06 2120.67,231.3 2121.24,231.261 2121.81,230.301 2122.38,228.349 2122.95,228.498 2123.52,227.58 2124.08,230.606 2124.65,227.392 2125.22,229.706 2125.79,228.764 2126.36,229.147 2126.93,232.566 2127.49,232.453 2128.06,232.089 2128.63,232.976 2129.2,230.682 2129.77,230.607 2130.34,229.675 2130.9,230.741 2131.47,228.817 2132.04,227.063 2132.61,224.358 2133.18,226.926 2133.75,225.319 2134.31,224.475 2134.88,224.933 2135.45,224.142 2136.02,225.872 2136.59,230.437 2137.16,229.604 2137.72,228.832 2138.29,228.873 2138.86,230.829 2139.43,230.879 2140,233.869 2140.57,234.737 2141.13,233.462 2141.7,233.08 2142.27,231.717 2142.84,230.633 2143.41,230.824 2143.98,231.875 2144.54,231.63 2145.11,233.51 2145.68,232.292 2146.25,233.278 2146.82,232.828 2147.39,232.466 2147.95,230.243 2148.52,230.047 2149.09,230.997 2149.66,231.827 2150.23,231.667 2150.8,230.828 2151.36,231.98 2151.93,232.949 2152.5,233.51 2153.07,234.174 2153.64,234.809 2154.21,234.31 2154.77,234.226 2155.34,232.766 2155.91,230.482 2156.48,231.479 2157.05,230.209 2157.62,227.935 2158.18,226.78 2158.75,225.975 2159.32,227.258 2159.89,225.414 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.024\n  with uncertainty of ± 0.002144639458846263\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01502 ± (0.00192682, 0.00185371) (MC)\n  95% confidence interval: [-4.01876, -4.01114] (MC)\n  linear error propagation: -4.01511 ± 0.00190006\n  |δ_y| = |0.00185682| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015017004162724, val_l = 0.003739368427607026, val_u = 0.0038812822080478426)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip280\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip281\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip282\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1157.06 2211.02,1157.06 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1004.57 2211.02,1004.57 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,852.086 2211.02,852.086 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,699.599 2211.02,699.599 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,547.113 2211.02,547.113 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,394.626 2211.02,394.626 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,242.14 2211.02,242.14 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1157.06 365.751,1157.06 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1004.57 365.751,1004.57 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,852.086 365.751,852.086 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,699.599 365.751,699.599 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,547.113 365.751,547.113 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,394.626 365.751,394.626 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,242.14 365.751,242.14 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M298.909 1142.86 Q295.298 1142.86 293.469 1146.42 Q291.664 1149.96 291.664 1157.09 Q291.664 1164.2 293.469 1167.76 Q295.298 1171.31 298.909 1171.31 Q302.543 1171.31 304.349 1167.76 Q306.177 1164.2 306.177 1157.09 Q306.177 1149.96 304.349 1146.42 Q302.543 1142.86 298.909 1142.86 M298.909 1139.15 Q304.719 1139.15 307.775 1143.76 Q310.853 1148.34 310.853 1157.09 Q310.853 1165.82 307.775 1170.43 Q304.719 1175.01 298.909 1175.01 Q293.099 1175.01 290.02 1170.43 Q286.964 1165.82 286.964 1157.09 Q286.964 1148.34 290.02 1143.76 Q293.099 1139.15 298.909 1139.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M259.557 1017.92 L267.196 1017.92 L267.196 991.551 L258.886 993.218 L258.886 988.959 L267.15 987.292 L271.826 987.292 L271.826 1017.92 L279.465 1017.92 L279.465 1021.85 L259.557 1021.85 L259.557 1017.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 990.371 Q295.298 990.371 293.469 993.935 Q291.664 997.477 291.664 1004.61 Q291.664 1011.71 293.469 1015.28 Q295.298 1018.82 298.909 1018.82 Q302.543 1018.82 304.349 1015.28 Q306.177 1011.71 306.177 1004.61 Q306.177 997.477 304.349 993.935 Q302.543 990.371 298.909 990.371 M298.909 986.667 Q304.719 986.667 307.775 991.273 Q310.853 995.857 310.853 1004.61 Q310.853 1013.33 307.775 1017.94 Q304.719 1022.52 298.909 1022.52 Q293.099 1022.52 290.02 1017.94 Q286.964 1013.33 286.964 1004.61 Q286.964 995.857 290.02 991.273 Q293.099 986.667 298.909 986.667 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M262.775 865.43 L279.094 865.43 L279.094 869.366 L257.15 869.366 L257.15 865.43 Q259.812 862.676 264.395 858.046 Q269.002 853.393 270.182 852.051 Q272.428 849.528 273.307 847.792 Q274.21 846.032 274.21 844.343 Q274.21 841.588 272.266 839.852 Q270.344 838.116 267.242 838.116 Q265.043 838.116 262.59 838.88 Q260.159 839.643 257.381 841.194 L257.381 836.472 Q260.205 835.338 262.659 834.759 Q265.113 834.181 267.15 834.181 Q272.52 834.181 275.715 836.866 Q278.909 839.551 278.909 844.042 Q278.909 846.171 278.099 848.093 Q277.312 849.991 275.205 852.583 Q274.627 853.255 271.525 856.472 Q268.423 859.667 262.775 865.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 837.884 Q295.298 837.884 293.469 841.449 Q291.664 844.991 291.664 852.12 Q291.664 859.227 293.469 862.792 Q295.298 866.333 298.909 866.333 Q302.543 866.333 304.349 862.792 Q306.177 859.227 306.177 852.12 Q306.177 844.991 304.349 841.449 Q302.543 837.884 298.909 837.884 M298.909 834.181 Q304.719 834.181 307.775 838.787 Q310.853 843.37 310.853 852.12 Q310.853 860.847 307.775 865.454 Q304.719 870.037 298.909 870.037 Q293.099 870.037 290.02 865.454 Q286.964 860.847 286.964 852.12 Q286.964 843.37 290.02 838.787 Q293.099 834.181 298.909 834.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M272.914 698.245 Q276.27 698.963 278.145 701.231 Q280.043 703.5 280.043 706.833 Q280.043 711.949 276.525 714.75 Q273.006 717.55 266.525 717.55 Q264.349 717.55 262.034 717.111 Q259.742 716.694 257.289 715.837 L257.289 711.324 Q259.233 712.458 261.548 713.037 Q263.863 713.615 266.386 713.615 Q270.784 713.615 273.076 711.879 Q275.39 710.143 275.39 706.833 Q275.39 703.777 273.238 702.064 Q271.108 700.328 267.289 700.328 L263.261 700.328 L263.261 696.486 L267.474 696.486 Q270.923 696.486 272.752 695.12 Q274.58 693.731 274.58 691.139 Q274.58 688.477 272.682 687.064 Q270.807 685.629 267.289 685.629 Q265.367 685.629 263.168 686.046 Q260.969 686.463 258.33 687.342 L258.33 683.176 Q260.992 682.435 263.307 682.065 Q265.645 681.694 267.705 681.694 Q273.029 681.694 276.131 684.125 Q279.233 686.532 279.233 690.652 Q279.233 693.523 277.59 695.514 Q275.946 697.481 272.914 698.245 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 685.398 Q295.298 685.398 293.469 688.963 Q291.664 692.504 291.664 699.634 Q291.664 706.74 293.469 710.305 Q295.298 713.847 298.909 713.847 Q302.543 713.847 304.349 710.305 Q306.177 706.74 306.177 699.634 Q306.177 692.504 304.349 688.963 Q302.543 685.398 298.909 685.398 M298.909 681.694 Q304.719 681.694 307.775 686.301 Q310.853 690.884 310.853 699.634 Q310.853 708.361 307.775 712.967 Q304.719 717.55 298.909 717.55 Q293.099 717.55 290.02 712.967 Q286.964 708.361 286.964 699.634 Q286.964 690.884 290.02 686.301 Q293.099 681.694 298.909 681.694 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M271.594 533.907 L259.789 552.356 L271.594 552.356 L271.594 533.907 M270.367 529.833 L276.247 529.833 L276.247 552.356 L281.177 552.356 L281.177 556.245 L276.247 556.245 L276.247 564.393 L271.594 564.393 L271.594 556.245 L255.992 556.245 L255.992 551.731 L270.367 529.833 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 532.911 Q295.298 532.911 293.469 536.476 Q291.664 540.018 291.664 547.147 Q291.664 554.254 293.469 557.819 Q295.298 561.36 298.909 561.36 Q302.543 561.36 304.349 557.819 Q306.177 554.254 306.177 547.147 Q306.177 540.018 304.349 536.476 Q302.543 532.911 298.909 532.911 M298.909 529.208 Q304.719 529.208 307.775 533.814 Q310.853 538.398 310.853 547.147 Q310.853 555.874 307.775 560.481 Q304.719 565.064 298.909 565.064 Q293.099 565.064 290.02 560.481 Q286.964 555.874 286.964 547.147 Q286.964 538.398 290.02 533.814 Q293.099 529.208 298.909 529.208 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M258.793 377.346 L277.15 377.346 L277.15 381.281 L263.076 381.281 L263.076 389.754 Q264.094 389.406 265.113 389.244 Q266.131 389.059 267.15 389.059 Q272.937 389.059 276.316 392.231 Q279.696 395.402 279.696 400.818 Q279.696 406.397 276.224 409.499 Q272.752 412.578 266.432 412.578 Q264.256 412.578 261.988 412.207 Q259.742 411.837 257.335 411.096 L257.335 406.397 Q259.418 407.531 261.641 408.087 Q263.863 408.642 266.34 408.642 Q270.344 408.642 272.682 406.536 Q275.02 404.43 275.02 400.818 Q275.02 397.207 272.682 395.101 Q270.344 392.994 266.34 392.994 Q264.465 392.994 262.59 393.411 Q260.738 393.828 258.793 394.707 L258.793 377.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 380.425 Q295.298 380.425 293.469 383.99 Q291.664 387.531 291.664 394.661 Q291.664 401.768 293.469 405.332 Q295.298 408.874 298.909 408.874 Q302.543 408.874 304.349 405.332 Q306.177 401.768 306.177 394.661 Q306.177 387.531 304.349 383.99 Q302.543 380.425 298.909 380.425 M298.909 376.721 Q304.719 376.721 307.775 381.328 Q310.853 385.911 310.853 394.661 Q310.853 403.388 307.775 407.994 Q304.719 412.578 298.909 412.578 Q293.099 412.578 290.02 407.994 Q286.964 403.388 286.964 394.661 Q286.964 385.911 290.02 381.328 Q293.099 376.721 298.909 376.721 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M269.326 240.277 Q266.178 240.277 264.326 242.429 Q262.497 244.582 262.497 248.332 Q262.497 252.059 264.326 254.235 Q266.178 256.388 269.326 256.388 Q272.474 256.388 274.303 254.235 Q276.154 252.059 276.154 248.332 Q276.154 244.582 274.303 242.429 Q272.474 240.277 269.326 240.277 M278.608 225.624 L278.608 229.883 Q276.849 229.05 275.043 228.61 Q273.261 228.17 271.502 228.17 Q266.872 228.17 264.418 231.295 Q261.988 234.42 261.641 240.739 Q263.006 238.726 265.066 237.661 Q267.127 236.573 269.603 236.573 Q274.812 236.573 277.821 239.744 Q280.853 242.892 280.853 248.332 Q280.853 253.656 277.705 256.874 Q274.557 260.091 269.326 260.091 Q263.33 260.091 260.159 255.508 Q256.988 250.901 256.988 242.175 Q256.988 233.98 260.877 229.119 Q264.766 224.235 271.316 224.235 Q273.076 224.235 274.858 224.582 Q276.664 224.929 278.608 225.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 227.939 Q295.298 227.939 293.469 231.503 Q291.664 235.045 291.664 242.175 Q291.664 249.281 293.469 252.846 Q295.298 256.388 298.909 256.388 Q302.543 256.388 304.349 252.846 Q306.177 249.281 306.177 242.175 Q306.177 235.045 304.349 231.503 Q302.543 227.939 298.909 227.939 M298.909 224.235 Q304.719 224.235 307.775 228.841 Q310.853 233.425 310.853 242.175 Q310.853 250.901 307.775 255.508 Q304.719 260.091 298.909 260.091 Q293.099 260.091 290.02 255.508 Q286.964 250.901 286.964 242.175 Q286.964 233.425 290.02 228.841 Q293.099 224.235 298.909 224.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip282)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1044.7 400.199,941.481 400.786,846.772 401.372,760.002 401.958,680.644 402.545,608.209 403.131,542.243 403.718,482.324 404.304,428.061 404.891,379.087 405.477,335.061 406.063,295.662 406.65,339.765 407.236,305.306 407.823,274.799 408.409,311.352 408.995,286.438 409.582,318.544 410.168,296.902 410.755,278.271 411.341,262.449 411.927,249.247 412.514,238.487 413.1,230.764 413.687,224.347 414.273,219.895 414.86,277.377 415.446,354.16 416.032,350.118 416.619,369.741 417.205,388.807 417.792,406.82 418.378,404.859 418.964,402.701 419.551,402.897 420.137,436.575 420.724,438.468 421.31,456.313 421.896,461.253 422.483,466.554 423.069,473.082 423.656,480.378 424.242,487.672 424.829,496.425 425.415,514.871 426.001,533.859 426.588,543.455 427.174,553.574 427.761,579.007 428.347,596.71 428.933,606.543 429.52,616.915 430.106,640.615 430.693,650.121 431.279,666.012 431.865,675.954 432.452,691.356 433.038,706.282 433.625,720.64 434.211,734.739 434.798,757.826 435.384,775.196 435.97,787.168 436.557,795.094 437.143,811.202 437.73,819.301 438.316,826.983 438.902,834.582 439.489,849.647 440.075,863.748 440.662,885.145 441.248,892.294 441.835,905.724 442.421,915.313 443.007,924.956 443.594,937.36 444.18,943.485 444.767,952.234 445.353,963.202 445.939,976.801 446.526,989.833 447.112,997.239 447.699,1011.9 448.285,1023.65 448.871,1027.45 449.458,1033.77 450.044,1046.87 450.631,1052.54 451.217,1060.25 451.804,1067.64 452.39,1072.61 452.976,1075.93 453.563,1083.11 454.149,1089.86 454.736,1098.78 455.322,1103.63 455.908,1106.17 456.495,1111.12 457.081,1113.63 457.668,1121.83 458.254,1127.92 458.84,1132.21 459.427,1136.32 460.013,1140.14 460.6,1145.67 461.186,1152.65 461.773,1156.24 462.359,1159.58 462.945,1166.31 463.532,1169.41 464.118,1175.76 464.705,1178.75 465.291,1184.48 465.877,1185.13 466.464,1187.24 467.05,1191.27 467.637,1191.54 468.223,1195.21 468.809,1198.9 469.396,1200.85 469.982,1204.3 470.569,1205.96 471.155,1207.71 471.742,1207.8 472.328,1206.66 472.914,1210.32 473.501,1208.69 474.087,1209.17 474.674,1210.84 475.26,1212.9 475.846,1214.75 476.433,1214.7 477.019,1216.4 477.606,1218.11 478.192,1218.41 478.778,1221.51 479.365,1222.94 479.951,1227.4 480.538,1228.87 481.124,1232.79 481.711,1238.2 482.297,1239.02 482.883,1238.25 483.47,1238.06 484.056,1237.48 484.643,1238.32 485.229,1239.22 485.815,1240.13 486.402,1239.33 486.988,1238.81 487.575,1236.8 488.161,1239.35 488.748,1240.56 489.334,1243.01 489.92,1244.15 490.507,1244.8 491.093,1245.58 491.68,1243.78 492.266,1243.47 492.852,1241.51 493.439,1242.67 494.025,1246.41 494.612,1249.86 495.198,1246.55 495.784,1245.95 496.371,1244.08 496.957,1243.77 497.544,1246.11 498.13,1244.34 498.717,1241.17 499.303,1241.23 499.889,1240.97 500.476,1243.44 501.062,1243.16 501.649,1242.82 502.235,1241.13 502.821,1243.57 503.408,1246.23 503.994,1243.05 504.581,1243.86 505.167,1244.89 505.753,1243.46 506.34,1243.3 506.926,1245.53 507.513,1246.81 508.099,1246.27 508.686,1247.05 509.272,1246.68 509.858,1246.18 510.445,1245.88 511.031,1245.45 511.618,1246.53 512.204,1244.76 512.79,1245.72 513.377,1248.29 513.963,1249.08 514.55,1248.65 515.136,1249.58 515.722,1247.65 516.309,1248.44 516.895,1249.14 517.482,1248.66 518.068,1248.18 518.655,1247.79 519.241,1248.72 519.827,1248.08 520.414,1247.62 521,1246.95 521.587,1246.45 522.173,1244.49 522.759,1245.43 523.346,1246.47 523.932,1245.93 524.519,1246.69 525.105,1246.04 525.691,1244.58 526.278,1245.4 526.864,1246.27 527.451,1249.64 528.037,1249.19 528.624,1250.02 529.21,1250.53 529.796,1248.81 530.383,1246.95 530.969,1247.6 531.556,1247.15 532.142,1249.07 532.728,1248.34 533.315,1247.8 533.901,1247.16 534.488,1246.76 535.074,1247.57 535.661,1247.13 536.247,1246.53 536.833,1245.87 537.42,1246.91 538.006,1249.17 538.593,1247.16 539.179,1246.46 539.765,1246.53 540.352,1247.22 540.938,1245.76 541.525,1244.02 542.111,1243.79 542.697,1244.89 543.284,1244.55 543.87,1245.23 544.457,1249.68 545.043,1248.76 545.63,1245.48 546.216,1246.01 546.802,1245.5 547.389,1245.25 547.975,1244.82 548.562,1241.93 549.148,1240.6 549.734,1240.31 550.321,1241.31 550.907,1242.21 551.494,1244.31 552.08,1245.08 552.666,1244.79 553.253,1244.25 553.839,1246.46 554.426,1240.84 555.012,1241.66 555.599,1241.23 556.185,1244.56 556.771,1241.53 557.358,1242.5 557.944,1243.12 558.531,1244.11 559.117,1242.31 559.703,1243.25 560.29,1243.09 560.876,1241.43 561.463,1241.06 562.049,1240.56 562.635,1241.45 563.222,1243.44 563.808,1247.95 564.395,1247.25 564.981,1248.72 565.568,1246.66 566.154,1244.65 566.74,1245.17 567.327,1244.67 567.913,1244.13 568.5,1239.81 569.086,1240.4 569.672,1241.54 570.259,1242.3 570.845,1244.16 571.432,1242.39 572.018,1240.85 572.605,1241.98 573.191,1242.72 573.777,1241.18 574.364,1240.8 574.95,1240.49 575.537,1241.32 576.123,1243.53 576.709,1242.92 577.296,1243.86 577.882,1243.36 578.469,1242.81 579.055,1239.63 579.641,1243.08 580.228,1241.29 580.814,1242.03 581.401,1241.5 581.987,1243.26 582.574,1243.45 583.16,1241.72 583.746,1242.34 584.333,1241.91 584.919,1245.27 585.506,1244.62 586.092,1243.82 586.678,1243.06 587.265,1244.96 587.851,1244.45 588.438,1241.13 589.024,1240.53 589.61,1239.96 590.197,1240.77 590.783,1235.21 591.37,1233.88 591.956,1233.52 592.543,1234.66 593.129,1233.43 593.715,1234.39 594.302,1233.11 594.888,1235.74 595.475,1239.05 596.061,1237.43 596.647,1239.45 597.234,1240.02 597.82,1237.19 598.407,1240.29 598.993,1238.45 599.579,1237.83 600.166,1232.39 600.752,1233.59 601.339,1230.97 601.925,1234.47 602.512,1235.41 603.098,1235.32 603.684,1235.19 604.271,1235.97 604.857,1234.47 605.444,1234.23 606.03,1233.92 606.616,1234.91 607.203,1236.97 607.789,1236.72 608.376,1234.99 608.962,1236.15 609.548,1235.73 610.135,1234.27 610.721,1233.84 611.308,1235.78 611.894,1237.94 612.481,1238.62 613.067,1235.32 613.653,1235.04 614.24,1233.53 614.826,1234.58 615.413,1234.17 615.999,1233.96 616.585,1231.48 617.172,1232.38 617.758,1230.61 618.345,1230.34 618.931,1228.53 619.518,1226.06 620.104,1228.8 620.69,1227.75 621.277,1231.53 621.863,1231.42 622.45,1230.04 623.036,1232.63 623.622,1228.68 624.209,1228.68 624.795,1228.47 625.382,1233.44 625.968,1231.82 626.554,1231.4 627.141,1230.02 627.727,1228.65 628.314,1228.9 628.9,1231.38 629.487,1229.97 630.073,1229.92 630.659,1229.8 631.246,1225.73 631.832,1226.02 632.419,1227.17 633.005,1227.24 633.591,1227.27 634.178,1227.24 634.764,1228.4 635.351,1229.6 635.937,1230.54 636.523,1230.44 637.11,1234.02 637.696,1232.57 638.283,1232.24 638.869,1233.3 639.456,1234.16 640.042,1232.55 640.628,1230.88 641.215,1228.36 641.801,1227.21 642.388,1228.62 642.974,1224.99 643.56,1226.2 644.147,1228.73 644.733,1229.85 645.32,1229.75 645.906,1230.96 646.492,1233.4 647.079,1232.95 647.665,1232.38 648.252,1230.75 648.838,1230.52 649.425,1233.99 650.011,1233.5 650.597,1232.03 651.184,1231.86 651.77,1232.98 652.357,1231.36 652.943,1230.99 653.529,1232.08 654.116,1231.58 654.702,1230.94 655.289,1234.57 655.875,1235.26 656.462,1235.84 657.048,1236.71 657.634,1237.45 658.221,1239.12 658.807,1236.08 659.394,1234.42 659.98,1233.88 660.566,1232.1 661.153,1233.18 661.739,1229.1 662.326,1228.88 662.912,1229.87 663.498,1229.48 664.085,1230.35 664.671,1227.57 665.258,1228.55 665.844,1228.5 666.431,1229.22 667.017,1227.65 667.603,1225.96 668.19,1225.73 668.776,1225.68 669.363,1225.75 669.949,1225.72 670.535,1225.67 671.122,1225.54 671.708,1225.33 672.295,1225.2 672.881,1228.89 673.467,1226.09 674.054,1228.22 674.64,1229.18 675.227,1229.06 675.813,1228.93 676.4,1231.23 676.986,1233.18 677.572,1236.39 678.159,1236.58 678.745,1233.81 679.332,1231.88 679.918,1227.76 680.504,1228.54 681.091,1227.17 681.677,1224.63 682.264,1224.57 682.85,1225.69 683.436,1227.99 684.023,1227.81 684.609,1227.61 685.196,1226.39 685.782,1228.64 686.369,1228.24 686.955,1225.48 687.541,1226.69 688.128,1225.46 688.714,1222.96 689.301,1221.7 689.887,1222 690.473,1223.15 691.06,1220.64 691.646,1219.58 692.233,1218.71 692.819,1218.91 693.405,1220.36 693.992,1218.09 694.578,1215.77 695.165,1213.82 695.751,1216.9 696.338,1217.24 696.924,1219.03 697.51,1219.28 698.097,1220.75 698.683,1222.2 699.27,1223.58 699.856,1224.68 700.442,1225.8 701.029,1227.06 701.615,1229.4 702.202,1229.17 702.788,1227.41 703.375,1227.26 703.961,1225.77 704.547,1225.61 705.134,1225.59 705.72,1225.39 706.307,1224.11 706.893,1222.75 707.479,1224.09 708.066,1224.21 708.652,1221.6 709.239,1221.94 709.825,1225.7 710.411,1224.37 710.998,1223.03 711.584,1224.43 712.171,1224.6 712.757,1226.95 713.344,1225.54 713.93,1225.23 714.516,1225.27 715.103,1222.73 715.689,1224.03 716.276,1225.12 716.862,1225.12 717.448,1226.43 718.035,1227.43 718.621,1227.25 719.208,1223.36 719.794,1223.67 720.38,1223.58 720.967,1223.6 721.553,1225.8 722.14,1225.84 722.726,1225.69 723.313,1223.03 723.899,1224.26 724.485,1220.38 725.072,1220.6 725.658,1218.19 726.245,1217.47 726.831,1217.41 727.417,1218.89 728.004,1219.38 728.59,1220.85 729.177,1219.77 729.763,1219.98 730.349,1220.04 730.936,1218.85 731.522,1220.17 732.109,1219.02 732.695,1218.2 733.282,1219.67 733.868,1219.84 734.454,1221.23 735.041,1221.23 735.627,1221.35 736.214,1220.21 736.8,1218.75 737.386,1220.21 737.973,1223.72 738.559,1220.98 739.146,1224.68 739.732,1223.22 740.318,1220.87 740.905,1220.77 741.491,1226.93 742.078,1230.44 742.664,1228.89 743.251,1227.35 743.837,1224.66 744.423,1227.02 745.01,1228.02 745.596,1226.67 746.183,1225.42 746.769,1226.6 747.355,1223.9 747.942,1222.55 748.528,1224.91 749.115,1224.79 749.701,1223.68 750.288,1227.06 750.874,1227.11 751.46,1226.85 752.047,1227.79 752.633,1223.87 753.22,1224.97 753.806,1224.7 754.392,1224.55 754.979,1224.21 755.565,1227.62 756.152,1226.88 756.738,1226.72 757.324,1226.64 757.911,1226.21 758.497,1227.1 759.084,1226.72 759.67,1226.61 760.257,1225.21 760.843,1228.8 761.429,1227.25 762.016,1230.84 762.602,1229.1 763.189,1228.79 763.775,1230.95 764.361,1232.81 764.948,1231.07 765.534,1231.92 766.121,1230.03 766.707,1227.17 767.293,1224.17 767.88,1226.35 768.466,1226.25 769.053,1224.96 769.639,1224.67 770.226,1225.48 770.812,1225.2 771.398,1225.07 771.985,1227.5 772.571,1229.65 773.158,1227.97 773.744,1226.2 774.33,1226.18 774.917,1227.11 775.503,1226.81 776.09,1226.36 776.676,1228.73 777.262,1228.32 777.849,1228.03 778.435,1227.67 779.022,1228.93 779.608,1226.06 780.195,1224.59 780.781,1225.67 781.367,1226.62 781.954,1226.6 782.54,1225.03 783.127,1225.99 783.713,1225.92 784.299,1224.01 784.886,1222.41 785.472,1223.4 786.059,1221.96 786.645,1221.67 787.232,1224.31 787.818,1222.96 788.404,1223.91 788.991,1222.5 789.577,1219.97 790.164,1221.2 790.75,1219.94 791.336,1218.71 791.923,1218.86 792.509,1217.79 793.096,1218.02 793.682,1218.01 794.268,1215.81 794.855,1217.31 795.441,1219.92 796.028,1219.79 796.614,1220.94 797.201,1218.4 797.787,1217.37 798.373,1214.9 798.96,1213.96 799.546,1214.46 800.133,1214.79 800.719,1214.1 801.305,1215.54 801.892,1215.83 802.478,1215.02 803.065,1217.87 803.651,1214.32 804.237,1211.16 804.824,1210.61 805.41,1211.12 805.997,1211.8 806.583,1217.25 807.17,1219.8 807.756,1221.34 808.342,1220.2 808.929,1221.38 809.515,1221.03 810.102,1221.02 810.688,1223.47 811.274,1224.64 811.861,1219.63 812.447,1219.98 813.034,1220.08 813.62,1221.51 814.206,1221.45 814.793,1222.57 815.379,1224.69 815.966,1224.6 816.552,1224.63 817.139,1225.63 817.725,1225.36 818.311,1225.12 818.898,1226.24 819.484,1226.16 820.071,1225.88 820.657,1227.94 821.243,1230.94 821.83,1230.37 822.416,1231.24 823.003,1229.46 823.589,1229.09 824.175,1227.56 824.762,1226.1 825.348,1227.17 825.935,1225.58 826.521,1226.5 827.108,1226.27 827.694,1225.82 828.28,1225.61 828.867,1225.51 829.453,1224.07 830.04,1222.85 830.626,1224.03 831.212,1226.66 831.799,1225.39 832.385,1223.82 832.972,1226.1 833.558,1225.96 834.145,1224.28 834.731,1223.96 835.317,1225.04 835.904,1224.83 836.49,1220.53 837.077,1222.64 837.663,1224.9 838.249,1224.54 838.836,1224.29 839.422,1221.6 840.009,1221.51 840.595,1220.1 841.181,1218.98 841.768,1219.08 842.354,1221.55 842.941,1221.47 843.527,1220.04 844.114,1220.95 844.7,1222.11 845.286,1222.05 845.873,1222.02 846.459,1224.49 847.046,1225.66 847.632,1221.55 848.218,1220.41 848.805,1217.96 849.391,1220.42 849.978,1221.63 850.564,1222.68 851.15,1224.93 851.737,1223.45 852.323,1223.23 852.91,1222.94 853.496,1220.16 854.083,1221.65 854.669,1221.51 855.255,1222.72 855.842,1222.51 856.428,1218.5 857.015,1218.68 857.601,1220.17 858.187,1220.29 858.774,1219.02 859.36,1217.97 859.947,1219.32 860.533,1221.82 861.119,1220.59 861.706,1219.36 862.292,1215.71 862.879,1217.45 863.465,1218.93 864.052,1222.86 864.638,1222.72 865.224,1221.45 865.811,1220.25 866.397,1218.94 866.984,1219.07 867.57,1219.21 868.156,1220.47 868.743,1220.36 869.329,1220.41 869.916,1219.33 870.502,1217.07 871.089,1218.28 871.675,1218.28 872.261,1215.99 872.848,1216.03 873.434,1216.5 874.021,1216.57 874.607,1214.47 875.193,1215.83 875.78,1216.02 876.366,1217.57 876.953,1216.4 877.539,1217.78 878.125,1213.9 878.712,1211.93 879.298,1217.3 879.885,1217.56 880.471,1216.44 881.058,1216.26 881.644,1216.16 882.23,1216.35 882.817,1213.93 883.403,1212.96 883.99,1210.88 884.576,1212.54 885.162,1214.51 885.749,1214.64 886.335,1215.09 886.922,1215.14 887.508,1216.44 888.094,1216.62 888.681,1216.67 889.267,1218.14 889.854,1215.42 890.44,1214.5 891.027,1214.56 891.613,1212.08 892.199,1212.54 892.786,1213.13 893.372,1215.04 893.959,1214.16 894.545,1214.52 895.131,1216.28 895.718,1216.32 896.304,1215.23 896.891,1214.29 897.477,1214.34 898.063,1213.39 898.65,1213.95 899.236,1217.98 899.823,1219.42 900.409,1219.44 900.996,1217.97 901.582,1218.34 902.168,1218.55 902.755,1221.19 903.341,1220.17 903.928,1221.31 904.514,1219.82 905.1,1220.19 905.687,1218.81 906.273,1218.7 906.86,1217.35 907.446,1217.47 908.032,1218.97 908.619,1217.73 909.205,1216.7 909.792,1218.31 910.378,1218.62 910.965,1218.94 911.551,1221.45 912.137,1223.96 912.724,1226.31 913.31,1223.71 913.897,1222.35 914.483,1219.76 915.069,1219.4 915.656,1220.5 916.242,1219.36 916.829,1220.67 917.415,1220.68 918.002,1218.35 918.588,1218.32 919.174,1214.59 919.761,1214.84 920.347,1217.54 920.934,1216.48 921.52,1216.59 922.106,1217.76 922.693,1217.72 923.279,1216.77 923.866,1216.87 924.452,1216.31 925.038,1221.53 925.625,1221.56 926.211,1220.25 926.798,1221.5 927.384,1221.57 927.971,1222.78 928.557,1220.1 929.143,1221.42 929.73,1222.59 930.316,1224.86 930.903,1225.86 931.489,1225.66 932.075,1224.11 932.662,1222.82 933.248,1222.55 933.835,1222.64 934.421,1220.11 935.007,1222.51 935.594,1219.88 936.18,1221.07 936.767,1220.83 937.353,1221.99 937.94,1220.55 938.526,1219.25 939.112,1218.16 939.699,1216.96 940.285,1219.36 940.872,1219.59 941.458,1219.33 942.044,1217.91 942.631,1215.7 943.217,1217.31 943.804,1216.04 944.39,1214.99 944.976,1215 945.563,1219.07 946.149,1216.69 946.736,1216.99 947.322,1217.21 947.909,1216.08 948.495,1217.5 949.081,1217.53 949.668,1216.49 950.254,1217.72 950.841,1217.88 951.427,1219.1 952.013,1222.75 952.6,1221.04 953.186,1223.48 953.773,1224.61 954.359,1224.21 954.945,1224.24 955.532,1225.44 956.118,1220.19 956.705,1219.92 957.291,1219.6 957.878,1219.53 958.464,1219.4 959.05,1215.52 959.637,1214.45 960.223,1217.18 960.81,1219.94 961.396,1222.42 961.982,1221.02 962.569,1218.53 963.155,1217.43 963.742,1218.71 964.328,1218.94 964.915,1216.69 965.501,1216.87 966.087,1218.22 966.674,1217.08 967.26,1216.87 967.847,1218.48 968.433,1219.77 969.019,1219.74 969.606,1219.39 970.192,1215.57 970.779,1215.75 971.365,1215.99 971.951,1217.51 972.538,1217.59 973.124,1217.71 973.711,1219.15 974.297,1220.6 974.884,1221.81 975.47,1219 976.056,1217.7 976.643,1218.98 977.229,1222.65 977.816,1227.72 978.402,1228.9 978.988,1229.54 979.575,1227.63 980.161,1229.52 980.748,1227.81 981.334,1227.24 981.92,1229.18 982.507,1228.48 983.093,1227.97 983.68,1228.76 984.266,1228.51 984.853,1228.05 985.439,1227.73 986.025,1225.98 986.612,1225.32 987.198,1224.97 987.785,1224.69 988.371,1230.33 988.957,1231.15 989.544,1228.18 990.13,1226.56 990.717,1224.94 991.303,1222.29 991.889,1222.2 992.476,1223.4 993.062,1224.53 993.649,1223.07 994.235,1221.65 994.822,1220.08 995.408,1215.19 995.994,1214.33 996.581,1215.93 997.167,1217.12 997.754,1217.09 998.34,1217.06 998.926,1216.96 999.513,1218.34 1000.1,1219.84 1000.69,1217.1 1001.27,1218.61 1001.86,1217.43 1002.44,1217.35 1003.03,1216.07 1003.62,1216.09 1004.2,1215.11 1004.79,1216.63 1005.38,1215.49 1005.96,1215.79 1006.55,1213.42 1007.14,1212.4 1007.72,1215.29 1008.31,1215.62 1008.9,1218.22 1009.48,1218.3 1010.07,1216 1010.65,1214.87 1011.24,1215.06 1011.83,1213.88 1012.41,1212.83 1013,1214.67 1013.59,1213.66 1014.17,1213.73 1014.76,1215.26 1015.35,1215.55 1015.93,1217.11 1016.52,1214.8 1017.11,1214.96 1017.69,1215.27 1018.28,1213.95 1018.86,1216.59 1019.45,1215.41 1020.04,1212.97 1020.62,1214.75 1021.21,1215.08 1021.8,1216.53 1022.38,1216.72 1022.97,1217.1 1023.56,1217.17 1024.14,1216 1024.73,1218.52 1025.32,1218.31 1025.9,1219.5 1026.49,1218.03 1027.07,1216.68 1027.66,1216.94 1028.25,1218.03 1028.83,1219.54 1029.42,1219.49 1030.01,1220.92 1030.59,1218.48 1031.18,1218.5 1031.77,1219.96 1032.35,1218.6 1032.94,1216.11 1033.52,1213.52 1034.11,1213.68 1034.7,1213.73 1035.28,1215.49 1035.87,1215.74 1036.46,1218.46 1037.04,1218.73 1037.63,1218.67 1038.22,1216.29 1038.8,1216.34 1039.39,1216.79 1039.98,1216.93 1040.56,1217.15 1041.15,1219.72 1041.73,1220.81 1042.32,1220.52 1042.91,1219.17 1043.49,1219.24 1044.08,1218.35 1044.67,1219.66 1045.25,1227.09 1045.84,1225.38 1046.43,1222.75 1047.01,1223.82 1047.6,1225.9 1048.19,1226.63 1048.77,1226.53 1049.36,1227.54 1049.94,1227.18 1050.53,1230.59 1051.12,1231.15 1051.7,1229.37 1052.29,1228.99 1052.88,1227.41 1053.46,1224.61 1054.05,1221.74 1054.64,1220.38 1055.22,1220.43 1055.81,1218.94 1056.39,1216.38 1056.98,1215.33 1057.57,1213.99 1058.15,1215.52 1058.74,1215.82 1059.33,1218.7 1059.91,1220.06 1060.5,1220.14 1061.09,1220.23 1061.67,1220.38 1062.26,1221.3 1062.85,1223.53 1063.43,1224.29 1064.02,1227.56 1064.6,1225.45 1065.19,1223.64 1065.78,1221.07 1066.36,1219.85 1066.95,1219.83 1067.54,1223.69 1068.12,1223.52 1068.71,1222.13 1069.3,1225.44 1069.88,1226.17 1070.47,1223.22 1071.06,1226.84 1071.64,1230.08 1072.23,1228.39 1072.81,1226.59 1073.4,1224.78 1073.99,1224.5 1074.57,1223.92 1075.16,1221.11 1075.75,1222.28 1076.33,1222.31 1076.92,1224.57 1077.51,1221.56 1078.09,1223.8 1078.68,1222.14 1079.26,1221.8 1079.85,1221.45 1080.44,1224.09 1081.02,1224.98 1081.61,1224.76 1082.2,1223.26 1082.78,1223.29 1083.37,1221.63 1083.96,1220.04 1084.54,1222.24 1085.13,1222.2 1085.72,1219.39 1086.3,1219.27 1086.89,1216.5 1087.47,1219.02 1088.06,1211.64 1088.65,1216.06 1089.23,1216.19 1089.82,1218.99 1090.41,1221.39 1090.99,1220.15 1091.58,1219.94 1092.17,1219.81 1092.75,1222.1 1093.34,1219.66 1093.93,1220.95 1094.51,1219.57 1095.1,1219.62 1095.68,1221.06 1096.27,1221.94 1096.86,1221.64 1097.44,1226.35 1098.03,1225.64 1098.62,1224.16 1099.2,1224.86 1099.79,1226.86 1100.38,1225.11 1100.96,1224.72 1101.55,1225.66 1102.14,1227.37 1102.72,1225.55 1103.31,1223.87 1103.89,1221.18 1104.48,1219.87 1105.07,1218.36 1105.65,1217.05 1106.24,1215.51 1106.83,1215.77 1107.41,1214.51 1108,1213.46 1108.59,1214.72 1109.17,1212.36 1109.76,1213.95 1110.34,1212.98 1110.93,1214.95 1111.52,1216.8 1112.1,1218.07 1112.69,1219.26 1113.28,1220.52 1113.86,1221.93 1114.45,1220.12 1115.04,1221.44 1115.62,1222.65 1116.21,1222.18 1116.8,1223.22 1117.38,1224.33 1117.97,1225.33 1118.55,1226.38 1119.14,1226.08 1119.73,1225.7 1120.31,1222.75 1120.9,1222.37 1121.49,1220.99 1122.07,1222.94 1122.66,1225.17 1123.25,1223.78 1123.83,1222.15 1124.42,1220.8 1125.01,1220.48 1125.59,1225.35 1126.18,1222.69 1126.76,1225.02 1127.35,1224.67 1127.94,1224.24 1128.52,1224 1129.11,1223.77 1129.7,1221.17 1130.28,1217.31 1130.87,1215.99 1131.46,1214.71 1132.04,1216.07 1132.63,1216.32 1133.21,1215.12 1133.8,1213.87 1134.39,1212.88 1134.97,1213.32 1135.56,1214.9 1136.15,1213.95 1136.73,1214.33 1137.32,1210.98 1137.91,1211.45 1138.49,1209.33 1139.08,1204.91 1139.67,1207.07 1140.25,1206.57 1140.84,1207.1 1141.42,1205.21 1142.01,1205.77 1142.6,1208.8 1143.18,1209.39 1143.77,1208.92 1144.36,1210.72 1144.94,1212.53 1145.53,1211.8 1146.12,1212.11 1146.7,1212.62 1147.29,1210.3 1147.88,1212.02 1148.46,1214.86 1149.05,1213.79 1149.63,1214.12 1150.22,1218.31 1150.81,1217.01 1151.39,1217.15 1151.98,1215.8 1152.57,1213.65 1153.15,1213.93 1153.74,1216.86 1154.33,1216.92 1154.91,1218.29 1155.5,1219.44 1156.09,1218.22 1156.67,1218.22 1157.26,1218.4 1157.84,1217.13 1158.43,1217.3 1159.02,1215.03 1159.6,1216.49 1160.19,1220.46 1160.78,1219.2 1161.36,1217.69 1161.95,1219.22 1162.54,1219.27 1163.12,1219.37 1163.71,1220.78 1164.29,1222 1164.88,1221.76 1165.47,1221.32 1166.05,1218.45 1166.64,1220.7 1167.23,1220.62 1167.81,1221.51 1168.4,1219.07 1168.99,1218.02 1169.57,1215.54 1170.16,1215.37 1170.75,1214.35 1171.33,1210.7 1171.92,1210.96 1172.5,1212.72 1173.09,1214.36 1173.68,1214.44 1174.26,1213.44 1174.85,1212.71 1175.44,1213.01 1176.02,1214.54 1176.61,1213.68 1177.2,1213.96 1177.78,1214.13 1178.37,1216.69 1178.96,1219.16 1179.54,1221.87 1180.13,1219.45 1180.71,1216.94 1181.3,1215.65 1181.89,1215.97 1182.47,1217.53 1183.06,1217.55 1183.65,1218.86 1184.23,1218.75 1184.82,1217.47 1185.41,1218.91 1185.99,1216.63 1186.58,1218 1187.16,1217.88 1187.75,1220.51 1188.34,1220.6 1188.92,1219.31 1189.51,1220.56 1190.1,1216.87 1190.68,1215.95 1191.27,1216.35 1191.86,1216.63 1192.44,1215.39 1193.03,1215.57 1193.62,1214.26 1194.2,1212.08 1194.79,1213.8 1195.37,1210.34 1195.96,1210.94 1196.55,1211.57 1197.13,1213.17 1197.72,1217.22 1198.31,1218.49 1198.89,1219.75 1199.48,1219.71 1200.07,1215.93 1200.65,1216.31 1201.24,1217.63 1201.83,1221.21 1202.41,1219.69 1203,1220.8 1203.58,1220.6 1204.17,1220.46 1204.76,1220.48 1205.34,1220.55 1205.93,1220.43 1206.52,1220.4 1207.1,1221.5 1207.69,1220.43 1208.28,1216.57 1208.86,1216.76 1209.45,1217.8 1210.03,1216.43 1210.62,1215.52 1211.21,1215.52 1211.79,1215.57 1212.38,1217.1 1212.97,1215.85 1213.55,1216.06 1214.14,1214.14 1214.73,1214.47 1215.31,1213.62 1215.9,1214.03 1216.49,1213.01 1217.07,1214.71 1217.66,1216.27 1218.24,1215.07 1218.83,1214.04 1219.42,1214.12 1220,1213.09 1220.59,1213.21 1221.18,1213.5 1221.76,1215.21 1222.35,1216.53 1222.94,1217.96 1223.52,1216.93 1224.11,1215.88 1224.7,1216.16 1225.28,1216.2 1225.87,1213.84 1226.45,1214.27 1227.04,1213.39 1227.63,1213.81 1228.21,1212.93 1228.8,1215.75 1229.39,1218.29 1229.97,1219.31 1230.56,1217.83 1231.15,1219.15 1231.73,1218.98 1232.32,1219.02 1232.91,1217.76 1233.49,1218.9 1234.08,1221.4 1234.66,1221.27 1235.25,1220.92 1235.84,1223.08 1236.42,1225.26 1237.01,1224.83 1237.6,1225.92 1238.18,1225.45 1238.77,1223.94 1239.36,1223.56 1239.94,1223.23 1240.53,1224.34 1241.11,1222.79 1241.7,1218.8 1242.29,1216.51 1242.87,1217.58 1243.46,1221.38 1244.05,1222.67 1244.63,1223.8 1245.22,1222.32 1245.81,1222.15 1246.39,1219.47 1246.98,1221.78 1247.57,1221.69 1248.15,1221.73 1248.74,1220.47 1249.32,1221.54 1249.91,1221.34 1250.5,1221.26 1251.08,1220.97 1251.67,1221.97 1252.26,1220.5 1252.84,1221.45 1253.43,1218.85 1254.02,1218.9 1254.6,1221.14 1255.19,1222.43 1255.78,1222.19 1256.36,1221.78 1256.95,1220.34 1257.53,1220.2 1258.12,1218.83 1258.71,1221.2 1259.29,1221.35 1259.88,1221.25 1260.47,1220.91 1261.05,1219.74 1261.64,1221.26 1262.23,1220.17 1262.81,1220.44 1263.4,1220.52 1263.98,1219.04 1264.57,1220.01 1265.16,1218.75 1265.74,1221.23 1266.33,1221.25 1266.92,1219.86 1267.5,1218.47 1268.09,1220.98 1268.68,1220.97 1269.26,1220.62 1269.85,1222.96 1270.44,1222.76 1271.02,1222.63 1271.61,1221.39 1272.19,1218.59 1272.78,1217.2 1273.37,1219.71 1273.95,1221.05 1274.54,1222.22 1275.13,1221.95 1275.71,1221.89 1276.3,1223.03 1276.89,1221.4 1277.47,1221.44 1278.06,1221.44 1278.65,1222.76 1279.23,1221.41 1279.82,1219.73 1280.4,1217.12 1280.99,1218.47 1281.58,1219.66 1282.16,1218.34 1282.75,1222.04 1283.34,1223.03 1283.92,1224.02 1284.51,1222.49 1285.1,1223.75 1285.68,1223.43 1286.27,1225.31 1286.86,1227.59 1287.44,1228.19 1288.03,1227.46 1288.61,1226.84 1289.2,1227.55 1289.79,1226.89 1290.37,1225 1290.96,1224.75 1291.55,1222.92 1292.13,1223.87 1292.72,1223.38 1293.31,1222.02 1293.89,1221.85 1294.48,1220.31 1295.06,1220.29 1295.65,1220.05 1296.24,1218.69 1296.82,1219.75 1297.41,1221.85 1298,1223.09 1298.58,1224.2 1299.17,1223.88 1299.76,1223.88 1300.34,1223.58 1300.93,1223.15 1301.52,1222.51 1302.1,1222.17 1302.69,1222.04 1303.27,1222.04 1303.86,1222.1 1304.45,1220.59 1305.03,1220.26 1305.62,1219.89 1306.21,1219.81 1306.79,1219.57 1307.38,1217.33 1307.97,1215.77 1308.55,1217.23 1309.14,1216.12 1309.73,1216.22 1310.31,1215.29 1310.9,1214.04 1311.48,1215.64 1312.07,1214.57 1312.66,1216.07 1313.24,1213.67 1313.83,1214.1 1314.42,1213.02 1315,1213.57 1315.59,1216.05 1316.18,1215.99 1316.76,1212.25 1317.35,1213.59 1317.93,1213.81 1318.52,1214.37 1319.11,1216.96 1319.69,1216.81 1320.28,1217 1320.87,1216.76 1321.45,1215.49 1322.04,1215.74 1322.63,1218.36 1323.21,1216.9 1323.8,1218.11 1324.39,1219.16 1324.97,1219.17 1325.56,1217.83 1326.14,1216.39 1326.73,1217.66 1327.32,1220.04 1327.9,1221.32 1328.49,1218.54 1329.08,1217.31 1329.66,1217.54 1330.25,1215.16 1330.84,1216.32 1331.42,1213.44 1332.01,1212.43 1332.6,1211.44 1333.18,1212.98 1333.77,1214.21 1334.35,1215.58 1334.94,1216.06 1335.53,1217.31 1336.11,1216.16 1336.7,1213.58 1337.29,1212.95 1337.87,1213.36 1338.46,1213.64 1339.05,1211.43 1339.63,1209.53 1340.22,1210.08 1340.8,1206.9 1341.39,1207.77 1341.98,1208.38 1342.56,1209.28 1343.15,1210.07 1343.74,1210.53 1344.32,1210.87 1344.91,1213.85 1345.5,1212.93 1346.08,1214.71 1346.67,1215.08 1347.26,1216.55 1347.84,1217.65 1348.43,1217.66 1349.01,1216.43 1349.6,1216.54 1350.19,1215.28 1350.77,1216.72 1351.36,1215.84 1351.95,1219.72 1352.53,1219.35 1353.12,1221.92 1353.71,1220.83 1354.29,1220.71 1354.88,1220.73 1355.47,1224.33 1356.05,1221.54 1356.64,1222.3 1357.22,1223.29 1357.81,1223.1 1358.4,1221.63 1358.98,1220.22 1359.57,1218.95 1360.16,1215.16 1360.74,1215.34 1361.33,1214.25 1361.92,1214.4 1362.5,1215.78 1363.09,1218.35 1363.68,1219.7 1364.26,1220.72 1364.85,1222.74 1365.43,1222.68 1366.02,1223.74 1366.61,1223.47 1367.19,1223.27 1367.78,1223.22 1368.37,1224.5 1368.95,1223.12 1369.54,1222.87 1370.13,1222.47 1370.71,1220.91 1371.3,1223.28 1371.88,1225.37 1372.47,1225.1 1373.06,1224.66 1373.64,1225.41 1374.23,1223.76 1374.82,1223.46 1375.4,1222.07 1375.99,1223.38 1376.58,1222.94 1377.16,1222.8 1377.75,1222.59 1378.34,1221.23 1378.92,1223.52 1379.51,1223.32 1380.09,1224.17 1380.68,1223.78 1381.27,1224.9 1381.85,1225.71 1382.44,1224.06 1383.03,1225.18 1383.61,1228.21 1384.2,1230.12 1384.79,1228.17 1385.37,1227.54 1385.96,1225.75 1386.55,1225.17 1387.13,1222.31 1387.72,1223.45 1388.3,1224.4 1388.89,1224 1389.48,1223.93 1390.06,1222.41 1390.65,1222.37 1391.24,1220.97 1391.82,1219.58 1392.41,1220.76 1393,1218.37 1393.58,1222.29 1394.17,1220.91 1394.75,1219.62 1395.34,1219.36 1395.93,1218.35 1396.51,1217.33 1397.1,1214.9 1397.69,1216.25 1398.27,1217.5 1398.86,1218.7 1399.45,1220.24 1400.03,1219.06 1400.62,1220.24 1401.21,1218.75 1401.79,1216.37 1402.38,1214.06 1402.96,1212.85 1403.55,1212.06 1404.14,1214.8 1404.72,1213.94 1405.31,1213.95 1405.9,1215.72 1406.48,1216.08 1407.07,1216.25 1407.66,1217.81 1408.24,1220.56 1408.83,1219.09 1409.42,1218.77 1410,1219.81 1410.59,1218.67 1411.17,1222.27 1411.76,1222.11 1412.35,1218.93 1412.93,1217.47 1413.52,1216.38 1414.11,1214.99 1414.69,1217.88 1415.28,1216.7 1415.87,1216.77 1416.45,1214.21 1417.04,1213.37 1417.63,1212.25 1418.21,1212.54 1418.8,1214.02 1419.38,1209.52 1419.97,1212.38 1420.56,1211.64 1421.14,1214.55 1421.73,1214.69 1422.32,1212.39 1422.9,1214 1423.49,1214.56 1424.08,1213.36 1424.66,1213.84 1425.25,1216.78 1425.83,1220.76 1426.42,1219.33 1427.01,1219.4 1427.59,1218.23 1428.18,1217 1428.77,1219.63 1429.35,1222.07 1429.94,1220.55 1430.53,1216.71 1431.11,1213.04 1431.7,1212.28 1432.29,1213.74 1432.87,1215.42 1433.46,1215.49 1434.04,1215.64 1434.63,1215.99 1435.22,1217.54 1435.8,1219.13 1436.39,1220.29 1436.98,1218.85 1437.56,1217.12 1438.15,1217.18 1438.74,1219.83 1439.32,1218.63 1439.91,1219.75 1440.5,1221.02 1441.08,1219.76 1441.67,1222.18 1442.25,1220.83 1442.84,1219.49 1443.43,1217.02 1444.01,1219.58 1444.6,1217.23 1445.19,1217.31 1445.77,1217.33 1446.36,1217.23 1446.95,1216.18 1447.53,1213.84 1448.12,1213.93 1448.7,1217.79 1449.29,1219.04 1449.88,1216.66 1450.46,1215.62 1451.05,1214.6 1451.64,1217.01 1452.22,1215.64 1452.81,1213.13 1453.4,1213.51 1453.98,1214.83 1454.57,1215.12 1455.16,1216.33 1455.74,1216.36 1456.33,1220.01 1456.91,1219.87 1457.5,1221.33 1458.09,1222.56 1458.67,1222.58 1459.26,1221.33 1459.85,1222.69 1460.43,1220.08 1461.02,1220.07 1461.61,1218.38 1462.19,1221.98 1462.78,1223.32 1463.37,1224.43 1463.95,1225.27 1464.54,1224.88 1465.12,1225.76 1465.71,1224.34 1466.3,1222.94 1466.88,1224.01 1467.47,1222.53 1468.06,1219.81 1468.64,1218.42 1469.23,1214.36 1469.82,1214.52 1470.4,1215.91 1470.99,1218.37 1471.57,1218.27 1472.16,1217.1 1472.75,1218.37 1473.33,1218.31 1473.92,1218.23 1474.51,1219.51 1475.09,1218.31 1475.68,1218.16 1476.27,1217.9 1476.85,1219.03 1477.44,1220.39 1478.03,1220.13 1478.61,1218.77 1479.2,1220.14 1479.78,1222.26 1480.37,1220.94 1480.96,1220.85 1481.54,1222.05 1482.13,1220.48 1482.72,1218.95 1483.3,1217.59 1483.89,1216.5 1484.48,1215.1 1485.06,1215.24 1485.65,1214.46 1486.24,1213.54 1486.82,1212.41 1487.41,1212.91 1487.99,1211.84 1488.58,1210.88 1489.17,1211.52 1489.75,1212.02 1490.34,1212.06 1490.93,1212.19 1491.51,1210.09 1492.1,1210.57 1492.69,1210.94 1493.27,1214.98 1493.86,1219.11 1494.45,1216.7 1495.03,1217.86 1495.62,1219.13 1496.2,1218.76 1496.79,1218.33 1497.38,1219.45 1497.96,1216.97 1498.55,1218.41 1499.14,1218.86 1499.72,1217.68 1500.31,1216.29 1500.9,1219 1501.48,1217.63 1502.07,1218.96 1502.65,1217.71 1503.24,1218.93 1503.83,1217.58 1504.41,1217.54 1505,1216.34 1505.59,1215.35 1506.17,1215.55 1506.76,1216.87 1507.35,1218.23 1507.93,1216.82 1508.52,1217 1509.11,1218.12 1509.69,1220.56 1510.28,1221.88 1510.86,1220.27 1511.45,1221.35 1512.04,1222.46 1512.62,1223.45 1513.21,1226.8 1513.8,1226.24 1514.38,1225.99 1514.97,1229.41 1515.56,1227.64 1516.14,1225.73 1516.73,1226.83 1517.32,1225.09 1517.9,1224.77 1518.49,1221.88 1519.07,1220.23 1519.66,1221.14 1520.25,1224.75 1520.83,1223.04 1521.42,1222.81 1522.01,1225.32 1522.59,1224.72 1523.18,1222.88 1523.77,1222.6 1524.35,1219.81 1524.94,1220.67 1525.52,1220.65 1526.11,1221.92 1526.7,1221.77 1527.28,1222.86 1527.87,1222.34 1528.46,1222.03 1529.04,1223.02 1529.63,1222.87 1530.22,1221.21 1530.8,1216.19 1531.39,1216.3 1531.98,1216.4 1532.56,1216.38 1533.15,1212.83 1533.73,1211.96 1534.32,1212.44 1534.91,1213.79 1535.49,1214.02 1536.08,1214.09 1536.67,1216.73 1537.25,1215.7 1537.84,1214.68 1538.43,1216.28 1539.01,1218.92 1539.6,1216.39 1540.19,1215.25 1540.77,1216.49 1541.36,1216.52 1541.94,1216.43 1542.53,1216.5 1543.12,1215.73 1543.7,1214.74 1544.29,1214.9 1544.88,1215.19 1545.46,1215.29 1546.05,1214.3 1546.64,1213.03 1547.22,1213.32 1547.81,1212.49 1548.4,1210.12 1548.98,1213.04 1549.57,1213.57 1550.15,1212.63 1550.74,1211.89 1551.33,1212.29 1551.91,1211.51 1552.5,1213.33 1553.09,1212.64 1553.67,1213.13 1554.26,1215.8 1554.85,1214.68 1555.43,1216.22 1556.02,1215.07 1556.6,1216.73 1557.19,1216.73 1557.78,1219.02 1558.36,1219.33 1558.95,1219.16 1559.54,1218.99 1560.12,1217.91 1560.71,1217.93 1561.3,1218.11 1561.88,1219.38 1562.47,1218.23 1563.06,1218.55 1563.64,1219.7 1564.23,1219.77 1564.81,1217.44 1565.4,1215.25 1565.99,1214.28 1566.57,1214.71 1567.16,1214.65 1567.75,1212.51 1568.33,1212.72 1568.92,1213.17 1569.51,1210.88 1570.09,1214.16 1570.68,1216.81 1571.27,1216.83 1571.85,1216.77 1572.44,1217.02 1573.02,1218.32 1573.61,1219.16 1574.2,1217.94 1574.78,1219.15 1575.37,1221.32 1575.96,1226.45 1576.54,1225.89 1577.13,1225.55 1577.72,1227.4 1578.3,1225.77 1578.89,1225.49 1579.47,1223.74 1580.06,1223.45 1580.65,1223.22 1581.23,1224.2 1581.82,1225.03 1582.41,1223.16 1582.99,1223 1583.58,1220.32 1584.17,1218.85 1584.75,1217.3 1585.34,1217.27 1585.93,1214.76 1586.51,1217.64 1587.1,1218.73 1587.68,1214.87 1588.27,1216.35 1588.86,1215.36 1589.44,1214.21 1590.03,1214.34 1590.62,1214.51 1591.2,1213.55 1591.79,1212.82 1592.38,1210.9 1592.96,1212.4 1593.55,1211.8 1594.14,1211.18 1594.72,1209.96 1595.31,1208.31 1595.89,1209.02 1596.48,1210.79 1597.07,1211.36 1597.65,1210.67 1598.24,1212.51 1598.83,1214.09 1599.41,1214.13 1600,1213.97 1600.59,1214.41 1601.17,1215.75 1601.76,1218.59 1602.34,1218.34 1602.93,1220.82 1603.52,1223.38 1604.1,1225.66 1604.69,1226.62 1605.28,1223.8 1605.86,1223.24 1606.45,1220.74 1607.04,1221.42 1607.62,1219.92 1608.21,1218.79 1608.8,1217.46 1609.38,1214.82 1609.97,1216.45 1610.55,1216.48 1611.14,1216.42 1611.73,1211.49 1612.31,1213.22 1612.9,1212.27 1613.49,1216.37 1614.07,1216.36 1614.66,1216.27 1615.25,1217.46 1615.83,1216.5 1616.42,1216.6 1617.01,1219.19 1617.59,1219.02 1618.18,1218.8 1618.76,1221.26 1619.35,1223.33 1619.94,1225.45 1620.52,1226.19 1621.11,1225.92 1621.7,1226.76 1622.28,1223.76 1622.87,1224.69 1623.46,1226.79 1624.04,1222.64 1624.63,1223.57 1625.22,1223.11 1625.8,1224.18 1626.39,1223.91 1626.97,1223.49 1627.56,1224.41 1628.15,1224.19 1628.73,1222.76 1629.32,1221.29 1629.91,1218.69 1630.49,1214.71 1631.08,1214.83 1631.67,1213.95 1632.25,1217.7 1632.84,1217.64 1633.42,1220.08 1634.01,1223.5 1634.6,1222.99 1635.18,1222.64 1635.77,1218.69 1636.36,1219.79 1636.94,1220.85 1637.53,1221.88 1638.12,1221.77 1638.7,1221.51 1639.29,1223.67 1639.88,1220.71 1640.46,1215.57 1641.05,1216.84 1641.63,1214.26 1642.22,1213.25 1642.81,1212.27 1643.39,1212.54 1643.98,1211.84 1644.57,1211.98 1645.15,1213.37 1645.74,1212.09 1646.33,1213.46 1646.91,1213.74 1647.5,1214.3 1648.09,1215.97 1648.67,1217.22 1649.26,1218.39 1649.84,1219.5 1650.43,1218.3 1651.02,1218.36 1651.6,1220.56 1652.19,1223.03 1652.78,1224.01 1653.36,1225.03 1653.95,1224.66 1654.54,1225.79 1655.12,1224.13 1655.71,1224.93 1656.29,1223.4 1656.88,1224.06 1657.47,1222.51 1658.05,1223.78 1658.64,1228.51 1659.23,1225.22 1659.81,1226.03 1660.4,1226.76 1660.99,1226.12 1661.57,1224.49 1662.16,1224.37 1662.75,1221.22 1663.33,1219.85 1663.92,1217.36 1664.5,1216.13 1665.09,1216.24 1665.68,1215.26 1666.26,1214.4 1666.85,1215.91 1667.44,1220.09 1668.02,1221.2 1668.61,1218.98 1669.2,1215.26 1669.78,1212.94 1670.37,1210.95 1670.96,1209.99 1671.54,1210.69 1672.13,1208.81 1672.71,1209.3 1673.3,1209.78 1673.89,1209.17 1674.47,1207.31 1675.06,1207.77 1675.65,1209.81 1676.23,1211.29 1676.82,1207.49 1677.41,1207.79 1677.99,1208.16 1678.58,1206.58 1679.17,1207.29 1679.75,1206.69 1680.34,1206.09 1680.92,1204.17 1681.51,1204.93 1682.1,1204.51 1682.68,1205.35 1683.27,1205.9 1683.86,1206.54 1684.44,1207.17 1685.03,1210.17 1685.62,1209.53 1686.2,1211.43 1686.79,1214.32 1687.37,1214.42 1687.96,1216.01 1688.55,1216.36 1689.13,1217.81 1689.72,1220.25 1690.31,1222.61 1690.89,1221.32 1691.48,1221.09 1692.07,1221.08 1692.65,1222.38 1693.24,1222.48 1693.83,1222.27 1694.41,1223.09 1695,1222.48 1695.58,1222.18 1696.17,1222.11 1696.76,1221 1697.34,1219.94 1697.93,1219.72 1698.52,1219.79 1699.1,1215.91 1699.69,1219.74 1700.28,1219.46 1700.86,1219.29 1701.45,1219.2 1702.04,1217.96 1702.62,1217.98 1703.21,1216.77 1703.79,1218.34 1704.38,1218.43 1704.97,1219.58 1705.55,1220.34 1706.14,1224.15 1706.73,1220.64 1707.31,1223.11 1707.9,1222.79 1708.49,1222.49 1709.07,1222.22 1709.66,1220.63 1710.24,1222.92 1710.83,1222.54 1711.42,1223.53 1712,1220.59 1712.59,1218.18 1713.18,1218.26 1713.76,1216.98 1714.35,1217.11 1714.94,1214.62 1715.52,1214.64 1716.11,1215.85 1716.7,1219.74 1717.28,1220.9 1717.87,1219.39 1718.45,1220.67 1719.04,1219.18 1719.63,1219.05 1720.21,1220.39 1720.8,1221.51 1721.39,1222.68 1721.97,1222.29 1722.56,1220.82 1723.15,1220.69 1723.73,1218.27 1724.32,1217.01 1724.91,1218.12 1725.49,1219.32 1726.08,1219.18 1726.66,1215.56 1727.25,1212.94 1727.84,1211.85 1728.42,1212.25 1729.01,1215.16 1729.6,1215.35 1730.18,1212.81 1730.77,1213.13 1731.36,1216.01 1731.94,1218.54 1732.53,1219.72 1733.11,1218.45 1733.7,1221.04 1734.29,1218.32 1734.87,1216.7 1735.46,1217.93 1736.05,1216.74 1736.63,1215.64 1737.22,1215.88 1737.81,1214.7 1738.39,1217.38 1738.98,1217.17 1739.57,1217.1 1740.15,1215.83 1740.74,1218.17 1741.32,1220.44 1741.91,1219.15 1742.5,1217.92 1743.08,1219.46 1743.67,1221.83 1744.26,1221.64 1744.84,1221.56 1745.43,1221.53 1746.02,1222.52 1746.6,1223.38 1747.19,1224.48 1747.78,1225.39 1748.36,1224.99 1748.95,1224.81 1749.53,1223.26 1750.12,1224.39 1750.71,1222.87 1751.29,1222.59 1751.88,1225.17 1752.47,1224.87 1753.05,1225.74 1753.64,1227.95 1754.23,1228.72 1754.81,1228.01 1755.4,1223.73 1755.99,1222.51 1756.57,1223.53 1757.16,1223.24 1757.74,1224.25 1758.33,1222.68 1758.92,1222.33 1759.5,1222.22 1760.09,1222.18 1760.68,1219.46 1761.26,1219.25 1761.85,1221.65 1762.44,1222.68 1763.02,1222.44 1763.61,1222.18 1764.19,1219.5 1764.78,1220.65 1765.37,1221.95 1765.95,1220.41 1766.54,1219.09 1767.13,1217.65 1767.71,1218.65 1768.3,1217.21 1768.89,1216.97 1769.47,1216.99 1770.06,1215.83 1770.65,1217.24 1771.23,1214.57 1771.82,1214.66 1772.4,1214.49 1772.99,1214.53 1773.58,1214.69 1774.16,1217.42 1774.75,1217.63 1775.34,1219 1775.92,1221.51 1776.51,1220.44 1777.1,1222.82 1777.68,1223.94 1778.27,1223.78 1778.86,1220.86 1779.44,1219.62 1780.03,1219.54 1780.61,1220.69 1781.2,1220.39 1781.79,1219.97 1782.37,1217.62 1782.96,1217.57 1783.55,1215.16 1784.13,1213.91 1784.72,1217.95 1785.31,1220.67 1785.89,1219.14 1786.48,1217.85 1787.06,1217.79 1787.65,1217.55 1788.24,1217.67 1788.82,1220.06 1789.41,1220.01 1790,1218.44 1790.58,1215.84 1791.17,1217.57 1791.76,1217.58 1792.34,1221.34 1792.93,1224.92 1793.52,1218.44 1794.1,1219.6 1794.69,1220.83 1795.27,1219.49 1795.86,1219.12 1796.45,1219.04 1797.03,1218.05 1797.62,1214.22 1798.21,1214.42 1798.79,1214.75 1799.38,1215.2 1799.97,1213.03 1800.55,1213.35 1801.14,1212.47 1801.73,1213.97 1802.31,1215.4 1802.9,1217.93 1803.48,1220.47 1804.07,1220.3 1804.66,1217.66 1805.24,1217.74 1805.83,1216.58 1806.42,1217.99 1807,1218.96 1807.59,1218.95 1808.18,1220.16 1808.76,1223.98 1809.35,1223.5 1809.94,1223.15 1810.52,1223.96 1811.11,1223.77 1811.69,1223.29 1812.28,1222.92 1812.87,1220.11 1813.45,1217.52 1814.04,1216.4 1814.63,1216.44 1815.21,1215.33 1815.8,1218.04 1816.39,1216.55 1816.97,1217.77 1817.56,1214.06 1818.14,1215.53 1818.73,1218.25 1819.32,1219.27 1819.9,1220.36 1820.49,1219.02 1821.08,1218.06 1821.66,1216.76 1822.25,1218.43 1822.84,1221.05 1823.42,1218.65 1824.01,1219.74 1824.6,1218.27 1825.18,1213.39 1825.77,1215.02 1826.35,1218.71 1826.94,1221.06 1827.53,1219.68 1828.11,1220.86 1828.7,1219.29 1829.29,1212.77 1829.87,1211.7 1830.46,1214.82 1831.05,1215.24 1831.63,1214.33 1832.22,1214.87 1832.81,1214.96 1833.39,1214.93 1833.98,1213.76 1834.56,1212.56 1835.15,1212.93 1835.74,1214.6 1836.32,1213.44 1836.91,1215.02 1837.5,1219 1838.08,1218.67 1838.67,1221.01 1839.26,1219.51 1839.84,1217.21 1840.43,1218.53 1841.01,1218.56 1841.6,1218.52 1842.19,1221.09 1842.77,1222.08 1843.36,1223.22 1843.95,1223.01 1844.53,1222.84 1845.12,1222.79 1845.71,1222.46 1846.29,1219.69 1846.88,1218.4 1847.47,1215.79 1848.05,1216.13 1848.64,1215.25 1849.22,1211.56 1849.81,1211.83 1850.4,1216.07 1850.98,1216.16 1851.57,1213.87 1852.16,1219.15 1852.74,1217.55 1853.33,1216.44 1853.92,1215.27 1854.5,1216.73 1855.09,1216.77 1855.68,1216.82 1856.26,1215.69 1856.85,1215.92 1857.43,1216.11 1858.02,1216.14 1858.61,1217.49 1859.19,1213.94 1859.78,1213.02 1860.37,1213.26 1860.95,1215.8 1861.54,1214.54 1862.13,1215.86 1862.71,1214.7 1863.3,1212.29 1863.88,1212.73 1864.47,1214.36 1865.06,1213.28 1865.64,1215.02 1866.23,1216.19 1866.82,1216.32 1867.4,1213.57 1867.99,1212.55 1868.58,1213.11 1869.16,1212.06 1869.75,1211.04 1870.34,1212.71 1870.92,1211.55 1871.51,1213.17 1872.09,1213.45 1872.68,1213.6 1873.27,1212.57 1873.85,1215.22 1874.44,1215.32 1875.03,1215.6 1875.61,1217.06 1876.2,1219.71 1876.79,1218.34 1877.37,1218.36 1877.96,1218.36 1878.55,1218.29 1879.13,1215.84 1879.72,1216.12 1880.3,1219.94 1880.89,1219.98 1881.48,1226.02 1882.06,1225.5 1882.65,1226.4 1883.24,1222.12 1883.82,1221.91 1884.41,1220.48 1885,1218.15 1885.58,1218.13 1886.17,1217.9 1886.76,1218.13 1887.34,1218.27 1887.93,1216.88 1888.51,1218.35 1889.1,1214.61 1889.69,1214.7 1890.27,1213.48 1890.86,1214.9 1891.45,1215.06 1892.03,1217.76 1892.62,1218.02 1893.21,1216.78 1893.79,1216.94 1894.38,1215.72 1894.96,1214.66 1895.55,1214.85 1896.14,1215.07 1896.72,1214.51 1897.31,1215.97 1897.9,1216.28 1898.48,1219.04 1899.07,1217.79 1899.66,1219.12 1900.24,1219.24 1900.83,1220.5 1901.42,1218.96 1902,1217.61 1902.59,1222.74 1903.17,1221.38 1903.76,1219.85 1904.35,1221.17 1904.93,1217.27 1905.52,1216.33 1906.11,1215.15 1906.69,1212.88 1907.28,1212.05 1907.87,1213.46 1908.45,1216.07 1909.04,1216.23 1909.63,1215.17 1910.21,1215.25 1910.8,1216.54 1911.38,1217.92 1911.97,1216.39 1912.56,1212.87 1913.14,1212.09 1913.73,1211.31 1914.32,1211.79 1914.9,1211.89 1915.49,1213.78 1916.08,1215.21 1916.66,1217 1917.25,1219.69 1917.83,1218.33 1918.42,1218.29 1919.01,1216.83 1919.59,1219.46 1920.18,1220.73 1920.77,1219.4 1921.35,1219.26 1921.94,1218.01 1922.53,1219.37 1923.11,1216.82 1923.7,1216.83 1924.29,1221.96 1924.87,1221.9 1925.46,1224.35 1926.04,1227.81 1926.63,1228.7 1927.22,1225.77 1927.8,1225.36 1928.39,1224.71 1928.98,1223.04 1929.56,1221.37 1930.15,1223.82 1930.74,1223.43 1931.32,1223.03 1931.91,1224.09 1932.5,1222.74 1933.08,1219.88 1933.67,1222.29 1934.25,1220.96 1934.84,1221.98 1935.43,1223.13 1936.01,1221.55 1936.6,1220.35 1937.19,1221.48 1937.77,1217.71 1938.36,1217.67 1938.95,1218.92 1939.53,1217.62 1940.12,1217.9 1940.71,1215.41 1941.29,1212.93 1941.88,1215.81 1942.46,1218.51 1943.05,1217.27 1943.64,1220.98 1944.22,1222.14 1944.81,1220.34 1945.4,1224.27 1945.98,1222.8 1946.57,1222.53 1947.16,1223.51 1947.74,1224.66 1948.33,1224.32 1948.91,1223.09 1949.5,1224.26 1950.09,1223.82 1950.67,1222.26 1951.26,1223.44 1951.85,1222.89 1952.43,1220.28 1953.02,1220.13 1953.61,1221.23 1954.19,1226.01 1954.78,1225.64 1955.37,1227.65 1955.95,1226.16 1956.54,1227.18 1957.12,1225.52 1957.71,1225.18 1958.3,1227.32 1958.88,1229.46 1959.47,1230.18 1960.06,1229.5 1960.64,1231.15 1961.23,1229.47 1961.82,1230.01 1962.4,1228.23 1962.99,1227.92 1963.58,1226.38 1964.16,1225.97 1964.75,1225.68 1965.33,1226.5 1965.92,1224.87 1966.51,1223.2 1967.09,1224.17 1967.68,1226.22 1968.27,1224.26 1968.85,1223.89 1969.44,1226.97 1970.03,1223.66 1970.61,1222.26 1971.2,1224.6 1971.78,1224.06 1972.37,1223.75 1972.96,1223.57 1973.54,1221.04 1974.13,1220.88 1974.72,1218.43 1975.3,1218.54 1975.89,1218.62 1976.48,1217.27 1977.06,1217.17 1977.65,1216.06 1978.24,1217.76 1978.82,1220.11 1979.41,1221.22 1979.99,1222.6 1980.58,1219.62 1981.17,1219.32 1981.75,1220.38 1982.34,1221.39 1982.93,1222.49 1983.51,1220.95 1984.1,1220.82 1984.69,1219.15 1985.27,1217.87 1985.86,1216.82 1986.45,1216.98 1987.03,1216.99 1987.62,1216.88 1988.2,1219.45 1988.79,1219.37 1989.38,1219.43 1989.96,1216.84 1990.55,1217.03 1991.14,1219.39 1991.72,1222.14 1992.31,1220.67 1992.9,1219.1 1993.48,1219.08 1994.07,1219.08 1994.65,1218.9 1995.24,1222.6 1995.83,1221.27 1996.41,1219.86 1997,1220.84 1997.59,1222.03 1998.17,1218.14 1998.76,1218.25 1999.35,1218.24 1999.93,1217.95 2000.52,1216.83 2001.11,1217.07 2001.69,1219.45 2002.28,1217.08 2002.86,1215.69 2003.45,1215.68 2004.04,1217.07 2004.62,1217.17 2005.21,1215 2005.8,1216.29 2006.38,1216.28 2006.97,1216.57 2007.56,1216.64 2008.14,1215.52 2008.73,1215.68 2009.32,1217.05 2009.9,1217.25 2010.49,1219.68 2011.07,1219.71 2011.66,1218.31 2012.25,1220.67 2012.83,1221.75 2013.42,1221.62 2014.01,1220.21 2014.59,1219.02 2015.18,1218.81 2015.77,1216.38 2016.35,1216.7 2016.94,1214.27 2017.53,1215.65 2018.11,1214.51 2018.7,1213.41 2019.28,1213.5 2019.87,1212.76 2020.46,1212.79 2021.04,1213.21 2021.63,1212.35 2022.22,1214.18 2022.8,1213.2 2023.39,1209.62 2023.98,1211.4 2024.56,1211.71 2025.15,1210.49 2025.73,1211.01 2026.32,1211.7 2026.91,1214.75 2027.49,1215.03 2028.08,1215.04 2028.67,1216.58 2029.25,1217.81 2029.84,1215.42 2030.43,1216.68 2031.01,1216.75 2031.6,1217.89 2032.19,1216.82 2032.77,1215.82 2033.36,1218.8 2033.94,1216.36 2034.53,1212.93 2035.12,1213.16 2035.7,1211.93 2036.29,1213.47 2036.88,1213.82 2037.46,1214.13 2038.05,1213.08 2038.64,1212.36 2039.22,1212.81 2039.81,1214.27 2040.4,1214.54 2040.98,1216.01 2041.57,1215.18 2042.15,1215.34 2042.74,1217.95 2043.33,1217.96 2043.91,1219.21 2044.5,1220.49 2045.09,1217.75 2045.67,1220.11 2046.26,1220.04 2046.85,1220.05 2047.43,1217.62 2048.02,1217.36 2048.6,1218.74 2049.19,1220.15 2049.78,1221.41 2050.36,1223.81 2050.95,1223.66 2051.54,1224.6 2052.12,1225.3 2052.71,1224.81 2053.3,1223.14 2053.88,1221.6 2054.47,1221.03 2055.06,1224.41 2055.64,1222.7 2056.23,1220.28 2056.81,1220.18 2057.4,1221.3 2057.99,1219.66 2058.57,1219.69 2059.16,1217.23 2059.75,1218.9 2060.33,1221.53 2060.92,1217.79 2061.51,1217.75 2062.09,1219.23 2062.68,1219.17 2063.27,1219.2 2063.85,1219.15 2064.44,1219.36 2065.02,1219.3 2065.61,1219.29 2066.2,1218.03 2066.78,1215.43 2067.37,1215.3 2067.96,1213.98 2068.54,1214.16 2069.13,1210.72 2069.72,1212.22 2070.3,1213.68 2070.89,1213.82 2071.48,1215.46 2072.06,1213.03 2072.65,1214.54 2073.23,1215.87 2073.82,1214.77 2074.41,1216.1 2074.99,1215.04 2075.58,1213.05 2076.17,1217.11 2076.75,1219.6 2077.34,1219.5 2077.93,1217.06 2078.51,1214.73 2079.1,1214.02 2079.68,1215.59 2080.27,1214.57 2080.86,1214.83 2081.44,1218.61 2082.03,1218.5 2082.62,1221.05 2083.2,1219.58 2083.79,1217.09 2084.38,1217.49 2084.96,1219.06 2085.55,1216.63 2086.14,1216.65 2086.72,1216.56 2087.31,1216.53 2087.89,1216.74 2088.48,1216.72 2089.07,1218.11 2089.65,1217.03 2090.24,1215.84 2090.83,1217.08 2091.41,1214.97 2092,1216.28 2092.59,1217.58 2093.17,1219.85 2093.76,1222.04 2094.35,1223.3 2094.93,1223.15 2095.52,1226.58 2096.1,1229.78 2096.69,1229.06 2097.28,1227.26 2097.86,1228 2098.45,1226.07 2099.04,1224.35 2099.62,1223.97 2100.21,1225.1 2100.8,1224.97 2101.38,1224.78 2101.97,1220.67 2102.55,1221.63 2103.14,1220.23 2103.73,1221.63 2104.31,1220.14 2104.9,1218.69 2105.49,1216 2106.07,1218.85 2106.66,1220.01 2107.25,1221.45 2107.83,1220.13 2108.42,1220.19 2109.01,1218.84 2109.59,1217.47 2110.18,1221.24 2110.76,1222.31 2111.35,1222.05 2111.94,1222.96 2112.52,1221.65 2113.11,1222.77 2113.7,1222.2 2114.28,1222.08 2114.87,1219.45 2115.46,1219.34 2116.04,1215.56 2116.63,1217 2117.22,1218.23 2117.8,1217.91 2118.39,1217.93 2118.97,1219.05 2119.56,1221.4 2120.15,1221.26 2120.73,1222.39 2121.32,1218.8 2121.91,1222.66 2122.49,1219.93 2123.08,1221.07 2123.67,1220.63 2124.25,1216.52 2124.84,1216.59 2125.42,1216.97 2126.01,1215.85 2126.6,1218.55 2127.18,1218.62 2127.77,1219.73 2128.36,1218.45 2128.94,1220.75 2129.53,1222.89 2130.12,1226.21 2130.7,1223.25 2131.29,1225.25 2131.88,1226.38 2132.46,1225.95 2133.05,1227.02 2133.63,1225.08 2134.22,1219.67 2134.81,1220.67 2135.39,1221.6 2135.98,1221.58 2136.57,1219.24 2137.15,1219.16 2137.74,1215.52 2138.33,1214.37 2138.91,1215.8 2139.5,1216.18 2140.09,1217.75 2140.67,1219.02 2141.26,1218.77 2141.84,1217.48 2142.43,1217.73 2143.02,1215.41 2143.6,1216.8 2144.19,1215.55 2144.78,1216.02 2145.36,1216.39 2145.95,1219.01 2146.54,1219.24 2147.12,1218.09 2147.71,1217.06 2148.3,1217.21 2148.88,1218.18 2149.47,1216.76 2150.05,1215.54 2150.64,1214.79 2151.23,1213.9 2151.81,1213.03 2152.4,1213.52 2152.99,1213.52 2153.57,1215.18 2154.16,1217.87 2154.75,1216.66 2155.33,1218.15 2155.92,1220.89 2156.5,1222.32 2157.09,1223.37 2157.68,1221.91 2158.26,1224.19 \"/>\n<path clip-path=\"url(#clip282)\" d=\"M986.025 1218.99 L986.612 1218.99 L987.198 1218.99 L987.785 1218.99 L988.371 1218.99 L988.957 1218.99 L989.544 1218.99 L990.13 1218.99 L990.717 1218.99 L991.303 1218.99 L991.889 1218.99 L992.476 1218.99 L993.062 1218.99 L993.649 1218.99 L994.235 1218.99 L994.822 1218.99 L995.408 1218.99 L995.994 1218.99 L996.581 1218.99 L997.167 1218.99 L997.754 1218.99 L998.34 1218.99 L998.926 1218.99 L999.513 1218.99 L1000.1 1218.99 L1000.69 1218.99 L1001.27 1218.99 L1001.86 1218.99 L1002.44 1218.99 L1003.03 1218.99 L1003.62 1218.99 L1004.2 1218.99 L1004.79 1218.99 L1005.38 1218.99 L1005.96 1218.99 L1006.55 1218.99 L1007.14 1218.99 L1007.72 1218.99 L1008.31 1218.99 L1008.9 1218.99 L1009.48 1218.99 L1010.07 1218.99 L1010.65 1218.99 L1011.24 1218.99 L1011.83 1218.99 L1012.41 1218.99 L1013 1218.99 L1013.59 1218.99 L1014.17 1218.99 L1014.76 1218.99 L1015.35 1218.99 L1015.93 1218.99 L1016.52 1218.99 L1017.11 1218.99 L1017.69 1218.99 L1018.28 1218.99 L1018.86 1218.99 L1019.45 1218.99 L1020.04 1218.99 L1020.62 1218.99 L1021.21 1218.99 L1021.8 1218.99 L1022.38 1218.99 L1022.97 1218.99 L1023.56 1218.99 L1024.14 1218.99 L1024.73 1218.99 L1025.32 1218.99 L1025.9 1218.99 L1026.49 1218.99 L1027.07 1218.99 L1027.66 1218.99 L1028.25 1218.99 L1028.83 1218.99 L1029.42 1218.99 L1030.01 1218.99 L1030.59 1218.99 L1031.18 1218.99 L1031.77 1218.99 L1032.35 1218.99 L1032.94 1218.99 L1033.52 1218.99 L1034.11 1218.99 L1034.7 1218.99 L1035.28 1218.99 L1035.87 1218.99 L1036.46 1218.99 L1037.04 1218.99 L1037.63 1218.99 L1038.22 1218.99 L1038.8 1218.99 L1039.39 1218.99 L1039.98 1218.99 L1040.56 1218.99 L1041.15 1218.99 L1041.73 1218.99 L1042.32 1218.99 L1042.91 1218.99 L1043.49 1218.99 L1044.08 1218.99 L1044.67 1218.99 L1045.25 1218.99 L1045.84 1218.99 L1046.43 1218.99 L1047.01 1218.99 L1047.6 1218.99 L1048.19 1218.99 L1048.77 1218.99 L1049.36 1218.99 L1049.94 1218.99 L1050.53 1218.99 L1051.12 1218.99 L1051.7 1218.99 L1052.29 1218.99 L1052.88 1218.99 L1053.46 1218.99 L1054.05 1218.99 L1054.64 1218.99 L1055.22 1218.99 L1055.81 1218.99 L1056.39 1218.99 L1056.98 1218.99 L1057.57 1218.99 L1058.15 1218.99 L1058.74 1218.99 L1059.33 1218.99 L1059.91 1218.99 L1060.5 1218.99 L1061.09 1218.99 L1061.67 1218.99 L1062.26 1218.99 L1062.85 1218.99 L1063.43 1218.99 L1064.02 1218.99 L1064.6 1218.99 L1065.19 1218.99 L1065.78 1218.99 L1066.36 1218.99 L1066.95 1218.99 L1067.54 1218.99 L1068.12 1218.99 L1068.71 1218.99 L1069.3 1218.99 L1069.88 1218.99 L1070.47 1218.99 L1071.06 1218.99 L1071.64 1218.99 L1072.23 1218.99 L1072.81 1218.99 L1073.4 1218.99 L1073.99 1218.99 L1074.57 1218.99 L1075.16 1218.99 L1075.75 1218.99 L1076.33 1218.99 L1076.92 1218.99 L1077.51 1218.99 L1078.09 1218.99 L1078.68 1218.99 L1079.26 1218.99 L1079.85 1218.99 L1080.44 1218.99 L1081.02 1218.99 L1081.61 1218.99 L1082.2 1218.99 L1082.78 1218.99 L1083.37 1218.99 L1083.96 1218.99 L1084.54 1218.99 L1085.13 1218.99 L1085.72 1218.99 L1086.3 1218.99 L1086.89 1218.99 L1087.47 1218.99 L1088.06 1218.99 L1088.65 1218.99 L1089.23 1218.99 L1089.82 1218.99 L1090.41 1218.99 L1090.99 1218.99 L1091.58 1218.99 L1092.17 1218.99 L1092.75 1218.99 L1093.34 1218.99 L1093.93 1218.99 L1094.51 1218.99 L1095.1 1218.99 L1095.68 1218.99 L1096.27 1218.99 L1096.86 1218.99 L1097.44 1218.99 L1098.03 1218.99 L1098.62 1218.99 L1099.2 1218.99 L1099.79 1218.99 L1100.38 1218.99 L1100.96 1218.99 L1101.55 1218.99 L1102.14 1218.99 L1102.72 1218.99 L1103.31 1218.99 L1103.89 1218.99 L1104.48 1218.99 L1105.07 1218.99 L1105.65 1218.99 L1106.24 1218.99 L1106.83 1218.99 L1107.41 1218.99 L1108 1218.99 L1108.59 1218.99 L1109.17 1218.99 L1109.76 1218.99 L1110.34 1218.99 L1110.93 1218.99 L1111.52 1218.99 L1112.1 1218.99 L1112.69 1218.99 L1113.28 1218.99 L1113.86 1218.99 L1114.45 1218.99 L1115.04 1218.99 L1115.62 1218.99 L1116.21 1218.99 L1116.8 1218.99 L1117.38 1218.99 L1117.97 1218.99 L1118.55 1218.99 L1119.14 1218.99 L1119.73 1218.99 L1120.31 1218.99 L1120.9 1218.99 L1121.49 1218.99 L1122.07 1218.99 L1122.66 1218.99 L1123.25 1218.99 L1123.83 1218.99 L1124.42 1218.99 L1125.01 1218.99 L1125.59 1218.99 L1126.18 1218.99 L1126.76 1218.99 L1127.35 1218.99 L1127.94 1218.99 L1128.52 1218.99 L1129.11 1218.99 L1129.7 1218.99 L1130.28 1218.99 L1130.87 1218.99 L1131.46 1218.99 L1132.04 1218.99 L1132.63 1218.99 L1133.21 1218.99 L1133.8 1218.99 L1134.39 1218.99 L1134.97 1218.99 L1135.56 1218.99 L1136.15 1218.99 L1136.73 1218.99 L1137.32 1218.99 L1137.91 1218.99 L1138.49 1218.99 L1139.08 1218.99 L1139.67 1218.99 L1140.25 1218.99 L1140.84 1218.99 L1141.42 1218.99 L1142.01 1218.99 L1142.6 1218.99 L1143.18 1218.99 L1143.77 1218.99 L1144.36 1218.99 L1144.94 1218.99 L1145.53 1218.99 L1146.12 1218.99 L1146.7 1218.99 L1147.29 1218.99 L1147.88 1218.99 L1148.46 1218.99 L1149.05 1218.99 L1149.63 1218.99 L1150.22 1218.99 L1150.81 1218.99 L1151.39 1218.99 L1151.98 1218.99 L1152.57 1218.99 L1153.15 1218.99 L1153.74 1218.99 L1154.33 1218.99 L1154.91 1218.99 L1155.5 1218.99 L1156.09 1218.99 L1156.67 1218.99 L1157.26 1218.99 L1157.84 1218.99 L1158.43 1218.99 L1159.02 1218.99 L1159.6 1218.99 L1160.19 1218.99 L1160.78 1218.99 L1161.36 1218.99 L1161.95 1218.99 L1162.54 1218.99 L1163.12 1218.99 L1163.71 1218.99 L1164.29 1218.99 L1164.88 1218.99 L1165.47 1218.99 L1166.05 1218.99 L1166.64 1218.99 L1167.23 1218.99 L1167.81 1218.99 L1168.4 1218.99 L1168.99 1218.99 L1169.57 1218.99 L1170.16 1218.99 L1170.75 1218.99 L1171.33 1218.99 L1171.92 1218.99 L1172.5 1218.99 L1173.09 1218.99 L1173.68 1218.99 L1174.26 1218.99 L1174.85 1218.99 L1175.44 1218.99 L1176.02 1218.99 L1176.61 1218.99 L1177.2 1218.99 L1177.78 1218.99 L1178.37 1218.99 L1178.96 1218.99 L1179.54 1218.99 L1180.13 1218.99 L1180.71 1218.99 L1181.3 1218.99 L1181.89 1218.99 L1182.47 1218.99 L1183.06 1218.99 L1183.65 1218.99 L1184.23 1218.99 L1184.82 1218.99 L1185.41 1218.99 L1185.99 1218.99 L1186.58 1218.99 L1187.16 1218.99 L1187.75 1218.99 L1188.34 1218.99 L1188.92 1218.99 L1189.51 1218.99 L1190.1 1218.99 L1190.68 1218.99 L1191.27 1218.99 L1191.86 1218.99 L1192.44 1218.99 L1193.03 1218.99 L1193.62 1218.99 L1194.2 1218.99 L1194.79 1218.99 L1195.37 1218.99 L1195.96 1218.99 L1196.55 1218.99 L1197.13 1218.99 L1197.72 1218.99 L1198.31 1218.99 L1198.89 1218.99 L1199.48 1218.99 L1200.07 1218.99 L1200.65 1218.99 L1201.24 1218.99 L1201.83 1218.99 L1202.41 1218.99 L1203 1218.99 L1203.58 1218.99 L1204.17 1218.99 L1204.76 1218.99 L1205.34 1218.99 L1205.93 1218.99 L1206.52 1218.99 L1207.1 1218.99 L1207.69 1218.99 L1208.28 1218.99 L1208.86 1218.99 L1209.45 1218.99 L1210.03 1218.99 L1210.62 1218.99 L1211.21 1218.99 L1211.79 1218.99 L1212.38 1218.99 L1212.97 1218.99 L1213.55 1218.99 L1214.14 1218.99 L1214.73 1218.99 L1215.31 1218.99 L1215.9 1218.99 L1216.49 1218.99 L1217.07 1218.99 L1217.66 1218.99 L1218.24 1218.99 L1218.83 1218.99 L1219.42 1218.99 L1220 1218.99 L1220.59 1218.99 L1221.18 1218.99 L1221.76 1218.99 L1222.35 1218.99 L1222.94 1218.99 L1223.52 1218.99 L1224.11 1218.99 L1224.7 1218.99 L1225.28 1218.99 L1225.87 1218.99 L1226.45 1218.99 L1227.04 1218.99 L1227.63 1218.99 L1228.21 1218.99 L1228.8 1218.99 L1229.39 1218.99 L1229.97 1218.99 L1230.56 1218.99 L1231.15 1218.99 L1231.73 1218.99 L1232.32 1218.99 L1232.91 1218.99 L1233.49 1218.99 L1234.08 1218.99 L1234.66 1218.99 L1235.25 1218.99 L1235.84 1218.99 L1236.42 1218.99 L1237.01 1218.99 L1237.6 1218.99 L1238.18 1218.99 L1238.77 1218.99 L1239.36 1218.99 L1239.94 1218.99 L1240.53 1218.99 L1241.11 1218.99 L1241.7 1218.99 L1242.29 1218.99 L1242.87 1218.99 L1243.46 1218.99 L1244.05 1218.99 L1244.63 1218.99 L1245.22 1218.99 L1245.81 1218.99 L1246.39 1218.99 L1246.98 1218.99 L1247.57 1218.99 L1248.15 1218.99 L1248.74 1218.99 L1249.32 1218.99 L1249.91 1218.99 L1250.5 1218.99 L1251.08 1218.99 L1251.67 1218.99 L1252.26 1218.99 L1252.84 1218.99 L1253.43 1218.99 L1254.02 1218.99 L1254.6 1218.99 L1255.19 1218.99 L1255.78 1218.99 L1256.36 1218.99 L1256.95 1218.99 L1257.53 1218.99 L1258.12 1218.99 L1258.71 1218.99 L1259.29 1218.99 L1259.88 1218.99 L1260.47 1218.99 L1261.05 1218.99 L1261.64 1218.99 L1262.23 1218.99 L1262.81 1218.99 L1263.4 1218.99 L1263.98 1218.99 L1264.57 1218.99 L1265.16 1218.99 L1265.74 1218.99 L1266.33 1218.99 L1266.92 1218.99 L1267.5 1218.99 L1268.09 1218.99 L1268.68 1218.99 L1269.26 1218.99 L1269.85 1218.99 L1270.44 1218.99 L1271.02 1218.99 L1271.61 1218.99 L1272.19 1218.99 L1272.78 1218.99 L1273.37 1218.99 L1273.95 1218.99 L1274.54 1218.99 L1275.13 1218.99 L1275.71 1218.99 L1276.3 1218.99 L1276.89 1218.99 L1277.47 1218.99 L1278.06 1218.99 L1278.65 1218.99 L1279.23 1218.99 L1279.82 1218.99 L1280.4 1218.99 L1280.99 1218.99 L1281.58 1218.99 L1282.16 1218.99 L1282.75 1218.99 L1283.34 1218.99 L1283.92 1218.99 L1284.51 1218.99 L1285.1 1218.99 L1285.68 1218.99 L1286.27 1218.99 L1286.86 1218.99 L1287.44 1218.99 L1288.03 1218.99 L1288.61 1218.99 L1289.2 1218.99 L1289.79 1218.99 L1290.37 1218.99 L1290.96 1218.99 L1291.55 1218.99 L1292.13 1218.99 L1292.72 1218.99 L1293.31 1218.99 L1293.89 1218.99 L1294.48 1218.99 L1295.06 1218.99 L1295.65 1218.99 L1296.24 1218.99 L1296.82 1218.99 L1297.41 1218.99 L1298 1218.99 L1298.58 1218.99 L1299.17 1218.99 L1299.76 1218.99 L1300.34 1218.99 L1300.93 1218.99 L1301.52 1218.99 L1302.1 1218.99 L1302.69 1218.99 L1303.27 1218.99 L1303.86 1218.99 L1304.45 1218.99 L1305.03 1218.99 L1305.62 1218.99 L1306.21 1218.99 L1306.79 1218.99 L1307.38 1218.99 L1307.97 1218.99 L1308.55 1218.99 L1309.14 1218.99 L1309.73 1218.99 L1310.31 1218.99 L1310.9 1218.99 L1311.48 1218.99 L1312.07 1218.99 L1312.66 1218.99 L1313.24 1218.99 L1313.83 1218.99 L1314.42 1218.99 L1315 1218.99 L1315.59 1218.99 L1316.18 1218.99 L1316.76 1218.99 L1317.35 1218.99 L1317.93 1218.99 L1318.52 1218.99 L1319.11 1218.99 L1319.69 1218.99 L1320.28 1218.99 L1320.87 1218.99 L1321.45 1218.99 L1322.04 1218.99 L1322.63 1218.99 L1323.21 1218.99 L1323.8 1218.99 L1324.39 1218.99 L1324.97 1218.99 L1325.56 1218.99 L1326.14 1218.99 L1326.73 1218.99 L1327.32 1218.99 L1327.9 1218.99 L1328.49 1218.99 L1329.08 1218.99 L1329.66 1218.99 L1330.25 1218.99 L1330.84 1218.99 L1331.42 1218.99 L1332.01 1218.99 L1332.6 1218.99 L1333.18 1218.99 L1333.77 1218.99 L1334.35 1218.99 L1334.94 1218.99 L1335.53 1218.99 L1336.11 1218.99 L1336.7 1218.99 L1337.29 1218.99 L1337.87 1218.99 L1338.46 1218.99 L1339.05 1218.99 L1339.63 1218.99 L1340.22 1218.99 L1340.8 1218.99 L1341.39 1218.99 L1341.98 1218.99 L1342.56 1218.99 L1343.15 1218.99 L1343.74 1218.99 L1344.32 1218.99 L1344.91 1218.99 L1345.5 1218.99 L1346.08 1218.99 L1346.67 1218.99 L1347.26 1218.99 L1347.84 1218.99 L1348.43 1218.99 L1349.01 1218.99 L1349.6 1218.99 L1350.19 1218.99 L1350.77 1218.99 L1351.36 1218.99 L1351.95 1218.99 L1352.53 1218.99 L1353.12 1218.99 L1353.71 1218.99 L1354.29 1218.99 L1354.88 1218.99 L1355.47 1218.99 L1356.05 1218.99 L1356.64 1218.99 L1357.22 1218.99 L1357.81 1218.99 L1358.4 1218.99 L1358.98 1218.99 L1359.57 1218.99 L1360.16 1218.99 L1360.74 1218.99 L1361.33 1218.99 L1361.92 1218.99 L1362.5 1218.99 L1363.09 1218.99 L1363.68 1218.99 L1364.26 1218.99 L1364.85 1218.99 L1365.43 1218.99 L1366.02 1218.99 L1366.61 1218.99 L1367.19 1218.99 L1367.78 1218.99 L1368.37 1218.99 L1368.95 1218.99 L1369.54 1218.99 L1370.13 1218.99 L1370.71 1218.99 L1371.3 1218.99 L1371.88 1218.99 L1372.47 1218.99 L1373.06 1218.99 L1373.64 1218.99 L1374.23 1218.99 L1374.82 1218.99 L1375.4 1218.99 L1375.99 1218.99 L1376.58 1218.99 L1377.16 1218.99 L1377.75 1218.99 L1378.34 1218.99 L1378.92 1218.99 L1379.51 1218.99 L1380.09 1218.99 L1380.68 1218.99 L1381.27 1218.99 L1381.85 1218.99 L1382.44 1218.99 L1383.03 1218.99 L1383.61 1218.99 L1384.2 1218.99 L1384.79 1218.99 L1385.37 1218.99 L1385.96 1218.99 L1386.55 1218.99 L1387.13 1218.99 L1387.72 1218.99 L1388.3 1218.99 L1388.89 1218.99 L1389.48 1218.99 L1390.06 1218.99 L1390.65 1218.99 L1391.24 1218.99 L1391.82 1218.99 L1392.41 1218.99 L1393 1218.99 L1393.58 1218.99 L1394.17 1218.99 L1394.75 1218.99 L1395.34 1218.99 L1395.93 1218.99 L1396.51 1218.99 L1397.1 1218.99 L1397.69 1218.99 L1398.27 1218.99 L1398.86 1218.99 L1399.45 1218.99 L1400.03 1218.99 L1400.62 1218.99 L1401.21 1218.99 L1401.79 1218.99 L1402.38 1218.99 L1402.96 1218.99 L1403.55 1218.99 L1404.14 1218.99 L1404.72 1218.99 L1405.31 1218.99 L1405.9 1218.99 L1406.48 1218.99 L1407.07 1218.99 L1407.66 1218.99 L1408.24 1218.99 L1408.83 1218.99 L1409.42 1218.99 L1410 1218.99 L1410.59 1218.99 L1411.17 1218.99 L1411.76 1218.99 L1412.35 1218.99 L1412.93 1218.99 L1413.52 1218.99 L1414.11 1218.99 L1414.69 1218.99 L1415.28 1218.99 L1415.87 1218.99 L1416.45 1218.99 L1417.04 1218.99 L1417.63 1218.99 L1418.21 1218.99 L1418.8 1218.99 L1419.38 1218.99 L1419.97 1218.99 L1420.56 1218.99 L1421.14 1218.99 L1421.73 1218.99 L1422.32 1218.99 L1422.9 1218.99 L1423.49 1218.99 L1424.08 1218.99 L1424.66 1218.99 L1425.25 1218.99 L1425.83 1218.99 L1426.42 1218.99 L1427.01 1218.99 L1427.59 1218.99 L1428.18 1218.99 L1428.77 1218.99 L1429.35 1218.99 L1429.94 1218.99 L1430.53 1218.99 L1431.11 1218.99 L1431.7 1218.99 L1432.29 1218.99 L1432.87 1218.99 L1433.46 1218.99 L1434.04 1218.99 L1434.63 1218.99 L1435.22 1218.99 L1435.8 1218.99 L1436.39 1218.99 L1436.98 1218.99 L1437.56 1218.99 L1438.15 1218.99 L1438.74 1218.99 L1439.32 1218.99 L1439.91 1218.99 L1440.5 1218.99 L1441.08 1218.99 L1441.67 1218.99 L1442.25 1218.99 L1442.84 1218.99 L1443.43 1218.99 L1444.01 1218.99 L1444.6 1218.99 L1445.19 1218.99 L1445.77 1218.99 L1446.36 1218.99 L1446.95 1218.99 L1447.53 1218.99 L1448.12 1218.99 L1448.7 1218.99 L1449.29 1218.99 L1449.88 1218.99 L1450.46 1218.99 L1451.05 1218.99 L1451.64 1218.99 L1452.22 1218.99 L1452.81 1218.99 L1453.4 1218.99 L1453.98 1218.99 L1454.57 1218.99 L1455.16 1218.99 L1455.74 1218.99 L1456.33 1218.99 L1456.91 1218.99 L1457.5 1218.99 L1458.09 1218.99 L1458.67 1218.99 L1459.26 1218.99 L1459.85 1218.99 L1460.43 1218.99 L1461.02 1218.99 L1461.61 1218.99 L1462.19 1218.99 L1462.78 1218.99 L1463.37 1218.99 L1463.95 1218.99 L1464.54 1218.99 L1465.12 1218.99 L1465.71 1218.99 L1466.3 1218.99 L1466.88 1218.99 L1467.47 1218.99 L1468.06 1218.99 L1468.64 1218.99 L1469.23 1218.99 L1469.82 1218.99 L1470.4 1218.99 L1470.99 1218.99 L1471.57 1218.99 L1472.16 1218.99 L1472.75 1218.99 L1473.33 1218.99 L1473.92 1218.99 L1474.51 1218.99 L1475.09 1218.99 L1475.68 1218.99 L1476.27 1218.99 L1476.85 1218.99 L1477.44 1218.99 L1478.03 1218.99 L1478.61 1218.99 L1479.2 1218.99 L1479.78 1218.99 L1480.37 1218.99 L1480.96 1218.99 L1481.54 1218.99 L1482.13 1218.99 L1482.72 1218.99 L1483.3 1218.99 L1483.89 1218.99 L1484.48 1218.99 L1485.06 1218.99 L1485.65 1218.99 L1486.24 1218.99 L1486.82 1218.99 L1487.41 1218.99 L1487.99 1218.99 L1488.58 1218.99 L1489.17 1218.99 L1489.75 1218.99 L1490.34 1218.99 L1490.93 1218.99 L1491.51 1218.99 L1492.1 1218.99 L1492.69 1218.99 L1493.27 1218.99 L1493.86 1218.99 L1494.45 1218.99 L1495.03 1218.99 L1495.62 1218.99 L1496.2 1218.99 L1496.79 1218.99 L1497.38 1218.99 L1497.96 1218.99 L1498.55 1218.99 L1499.14 1218.99 L1499.72 1218.99 L1500.31 1218.99 L1500.9 1218.99 L1501.48 1218.99 L1502.07 1218.99 L1502.65 1218.99 L1503.24 1218.99 L1503.83 1218.99 L1504.41 1218.99 L1505 1218.99 L1505.59 1218.99 L1506.17 1218.99 L1506.76 1218.99 L1507.35 1218.99 L1507.93 1218.99 L1508.52 1218.99 L1509.11 1218.99 L1509.69 1218.99 L1510.28 1218.99 L1510.86 1218.99 L1511.45 1218.99 L1512.04 1218.99 L1512.62 1218.99 L1513.21 1218.99 L1513.8 1218.99 L1514.38 1218.99 L1514.97 1218.99 L1515.56 1218.99 L1516.14 1218.99 L1516.73 1218.99 L1517.32 1218.99 L1517.9 1218.99 L1518.49 1218.99 L1519.07 1218.99 L1519.66 1218.99 L1520.25 1218.99 L1520.83 1218.99 L1521.42 1218.99 L1522.01 1218.99 L1522.59 1218.99 L1523.18 1218.99 L1523.77 1218.99 L1524.35 1218.99 L1524.94 1218.99 L1525.52 1218.99 L1526.11 1218.99 L1526.7 1218.99 L1527.28 1218.99 L1527.87 1218.99 L1528.46 1218.99 L1529.04 1218.99 L1529.63 1218.99 L1530.22 1218.99 L1530.8 1218.99 L1531.39 1218.99 L1531.98 1218.99 L1532.56 1218.99 L1533.15 1218.99 L1533.73 1218.99 L1534.32 1218.99 L1534.91 1218.99 L1535.49 1218.99 L1536.08 1218.99 L1536.67 1218.99 L1537.25 1218.99 L1537.84 1218.99 L1538.43 1218.99 L1539.01 1218.99 L1539.6 1218.99 L1540.19 1218.99 L1540.77 1218.99 L1541.36 1218.99 L1541.94 1218.99 L1542.53 1218.99 L1543.12 1218.99 L1543.7 1218.99 L1544.29 1218.99 L1544.88 1218.99 L1545.46 1218.99 L1546.05 1218.99 L1546.64 1218.99 L1547.22 1218.99 L1547.81 1218.99 L1548.4 1218.99 L1548.98 1218.99 L1549.57 1218.99 L1550.15 1218.99 L1550.74 1218.99 L1551.33 1218.99 L1551.91 1218.99 L1552.5 1218.99 L1553.09 1218.99 L1553.67 1218.99 L1554.26 1218.99 L1554.85 1218.99 L1555.43 1218.99 L1556.02 1218.99 L1556.6 1218.99 L1557.19 1218.99 L1557.78 1218.99 L1558.36 1218.99 L1558.95 1218.99 L1559.54 1218.99 L1560.12 1218.99 L1560.71 1218.99 L1561.3 1218.99 L1561.88 1218.99 L1562.47 1218.99 L1563.06 1218.99 L1563.64 1218.99 L1564.23 1218.99 L1564.81 1218.99 L1565.4 1218.99 L1565.99 1218.99 L1566.57 1218.99 L1567.16 1218.99 L1567.75 1218.99 L1568.33 1218.99 L1568.92 1218.99 L1569.51 1218.99 L1570.09 1218.99 L1570.68 1218.99 L1571.27 1218.99 L1571.85 1218.99 L1572.44 1218.99 L1573.02 1218.99 L1573.61 1218.99 L1574.2 1218.99 L1574.78 1218.99 L1575.37 1218.99 L1575.96 1218.99 L1576.54 1218.99 L1577.13 1218.99 L1577.72 1218.99 L1578.3 1218.99 L1578.89 1218.99 L1579.47 1218.99 L1580.06 1218.99 L1580.65 1218.99 L1581.23 1218.99 L1581.82 1218.99 L1582.41 1218.99 L1582.99 1218.99 L1583.58 1218.99 L1584.17 1218.99 L1584.75 1218.99 L1585.34 1218.99 L1585.93 1218.99 L1586.51 1218.99 L1587.1 1218.99 L1587.68 1218.99 L1588.27 1218.99 L1588.86 1218.99 L1589.44 1218.99 L1590.03 1218.99 L1590.62 1218.99 L1591.2 1218.99 L1591.79 1218.99 L1592.38 1218.99 L1592.96 1218.99 L1593.55 1218.99 L1594.14 1218.99 L1594.72 1218.99 L1595.31 1218.99 L1595.89 1218.99 L1596.48 1218.99 L1597.07 1218.99 L1597.65 1218.99 L1598.24 1218.99 L1598.83 1218.99 L1599.41 1218.99 L1600 1218.99 L1600.59 1218.99 L1601.17 1218.99 L1601.76 1218.99 L1602.34 1218.99 L1602.93 1218.99 L1603.52 1218.99 L1604.1 1218.99 L1604.69 1218.99 L1605.28 1218.99 L1605.86 1218.99 L1606.45 1218.99 L1607.04 1218.99 L1607.62 1218.99 L1608.21 1218.99 L1608.8 1218.99 L1609.38 1218.99 L1609.97 1218.99 L1610.55 1218.99 L1611.14 1218.99 L1611.73 1218.99 L1612.31 1218.99 L1612.9 1218.99 L1613.49 1218.99 L1614.07 1218.99 L1614.66 1218.99 L1615.25 1218.99 L1615.83 1218.99 L1616.42 1218.99 L1617.01 1218.99 L1617.59 1218.99 L1618.18 1218.99 L1618.76 1218.99 L1619.35 1218.99 L1619.94 1218.99 L1620.52 1218.99 L1621.11 1218.99 L1621.7 1218.99 L1622.28 1218.99 L1622.87 1218.99 L1623.46 1218.99 L1624.04 1218.99 L1624.63 1218.99 L1625.22 1218.99 L1625.8 1218.99 L1626.39 1218.99 L1626.97 1218.99 L1627.56 1218.99 L1628.15 1218.99 L1628.73 1218.99 L1629.32 1218.99 L1629.91 1218.99 L1630.49 1218.99 L1631.08 1218.99 L1631.67 1218.99 L1632.25 1218.99 L1632.84 1218.99 L1633.42 1218.99 L1634.01 1218.99 L1634.6 1218.99 L1635.18 1218.99 L1635.77 1218.99 L1636.36 1218.99 L1636.94 1218.99 L1637.53 1218.99 L1638.12 1218.99 L1638.7 1218.99 L1639.29 1218.99 L1639.88 1218.99 L1640.46 1218.99 L1641.05 1218.99 L1641.63 1218.99 L1642.22 1218.99 L1642.81 1218.99 L1643.39 1218.99 L1643.98 1218.99 L1644.57 1218.99 L1645.15 1218.99 L1645.74 1218.99 L1646.33 1218.99 L1646.91 1218.99 L1647.5 1218.99 L1648.09 1218.99 L1648.67 1218.99 L1649.26 1218.99 L1649.84 1218.99 L1650.43 1218.99 L1651.02 1218.99 L1651.6 1218.99 L1652.19 1218.99 L1652.78 1218.99 L1653.36 1218.99 L1653.95 1218.99 L1654.54 1218.99 L1655.12 1218.99 L1655.71 1218.99 L1656.29 1218.99 L1656.88 1218.99 L1657.47 1218.99 L1658.05 1218.99 L1658.64 1218.99 L1659.23 1218.99 L1659.81 1218.99 L1660.4 1218.99 L1660.99 1218.99 L1661.57 1218.99 L1662.16 1218.99 L1662.75 1218.99 L1663.33 1218.99 L1663.92 1218.99 L1664.5 1218.99 L1665.09 1218.99 L1665.68 1218.99 L1666.26 1218.99 L1666.85 1218.99 L1667.44 1218.99 L1668.02 1218.99 L1668.61 1218.99 L1669.2 1218.99 L1669.78 1218.99 L1670.37 1218.99 L1670.96 1218.99 L1671.54 1218.99 L1672.13 1218.99 L1672.71 1218.99 L1673.3 1218.99 L1673.89 1218.99 L1674.47 1218.99 L1675.06 1218.99 L1675.65 1218.99 L1676.23 1218.99 L1676.82 1218.99 L1677.41 1218.99 L1677.99 1218.99 L1678.58 1218.99 L1679.17 1218.99 L1679.75 1218.99 L1680.34 1218.99 L1680.92 1218.99 L1681.51 1218.99 L1682.1 1218.99 L1682.68 1218.99 L1683.27 1218.99 L1683.86 1218.99 L1684.44 1218.99 L1685.03 1218.99 L1685.62 1218.99 L1686.2 1218.99 L1686.79 1218.99 L1687.37 1218.99 L1687.96 1218.99 L1688.55 1218.99 L1689.13 1218.99 L1689.72 1218.99 L1690.31 1218.99 L1690.89 1218.99 L1691.48 1218.99 L1692.07 1218.99 L1692.65 1218.99 L1693.24 1218.99 L1693.83 1218.99 L1694.41 1218.99 L1695 1218.99 L1695.58 1218.99 L1696.17 1218.99 L1696.76 1218.99 L1697.34 1218.99 L1697.93 1218.99 L1698.52 1218.99 L1699.1 1218.99 L1699.69 1218.99 L1700.28 1218.99 L1700.86 1218.99 L1701.45 1218.99 L1702.04 1218.99 L1702.62 1218.99 L1703.21 1218.99 L1703.79 1218.99 L1704.38 1218.99 L1704.97 1218.99 L1705.55 1218.99 L1706.14 1218.99 L1706.73 1218.99 L1707.31 1218.99 L1707.9 1218.99 L1708.49 1218.99 L1709.07 1218.99 L1709.66 1218.99 L1710.24 1218.99 L1710.83 1218.99 L1711.42 1218.99 L1712 1218.99 L1712.59 1218.99 L1713.18 1218.99 L1713.76 1218.99 L1714.35 1218.99 L1714.94 1218.99 L1715.52 1218.99 L1716.11 1218.99 L1716.7 1218.99 L1717.28 1218.99 L1717.87 1218.99 L1718.45 1218.99 L1719.04 1218.99 L1719.63 1218.99 L1720.21 1218.99 L1720.8 1218.99 L1721.39 1218.99 L1721.97 1218.99 L1722.56 1218.99 L1723.15 1218.99 L1723.73 1218.99 L1724.32 1218.99 L1724.91 1218.99 L1725.49 1218.99 L1726.08 1218.99 L1726.66 1218.99 L1727.25 1218.99 L1727.84 1218.99 L1728.42 1218.99 L1729.01 1218.99 L1729.6 1218.99 L1730.18 1218.99 L1730.77 1218.99 L1731.36 1218.99 L1731.94 1218.99 L1732.53 1218.99 L1733.11 1218.99 L1733.7 1218.99 L1734.29 1218.99 L1734.87 1218.99 L1735.46 1218.99 L1736.05 1218.99 L1736.63 1218.99 L1737.22 1218.99 L1737.81 1218.99 L1738.39 1218.99 L1738.98 1218.99 L1739.57 1218.99 L1740.15 1218.99 L1740.74 1218.99 L1741.32 1218.99 L1741.91 1218.99 L1742.5 1218.99 L1743.08 1218.99 L1743.67 1218.99 L1744.26 1218.99 L1744.84 1218.99 L1745.43 1218.99 L1746.02 1218.99 L1746.6 1218.99 L1747.19 1218.99 L1747.78 1218.99 L1748.36 1218.99 L1748.95 1218.99 L1749.53 1218.99 L1750.12 1218.99 L1750.71 1218.99 L1751.29 1218.99 L1751.88 1218.99 L1752.47 1218.99 L1753.05 1218.99 L1753.64 1218.99 L1754.23 1218.99 L1754.81 1218.99 L1755.4 1218.99 L1755.99 1218.99 L1756.57 1218.99 L1757.16 1218.99 L1757.74 1218.99 L1758.33 1218.99 L1758.92 1218.99 L1759.5 1218.99 L1760.09 1218.99 L1760.68 1218.99 L1761.26 1218.99 L1761.85 1218.99 L1762.44 1218.99 L1763.02 1218.99 L1763.61 1218.99 L1764.19 1218.99 L1764.78 1218.99 L1765.37 1218.99 L1765.95 1218.99 L1766.54 1218.99 L1767.13 1218.99 L1767.71 1218.99 L1768.3 1218.99 L1768.89 1218.99 L1769.47 1218.99 L1770.06 1218.99 L1770.65 1218.99 L1771.23 1218.99 L1771.82 1218.99 L1772.4 1218.99 L1772.99 1218.99 L1773.58 1218.99 L1774.16 1218.99 L1774.75 1218.99 L1775.34 1218.99 L1775.92 1218.99 L1776.51 1218.99 L1777.1 1218.99 L1777.68 1218.99 L1778.27 1218.99 L1778.86 1218.99 L1779.44 1218.99 L1780.03 1218.99 L1780.61 1218.99 L1781.2 1218.99 L1781.79 1218.99 L1782.37 1218.99 L1782.96 1218.99 L1783.55 1218.99 L1784.13 1218.99 L1784.72 1218.99 L1785.31 1218.99 L1785.89 1218.99 L1786.48 1218.99 L1787.06 1218.99 L1787.65 1218.99 L1788.24 1218.99 L1788.82 1218.99 L1789.41 1218.99 L1790 1218.99 L1790.58 1218.99 L1791.17 1218.99 L1791.76 1218.99 L1792.34 1218.99 L1792.93 1218.99 L1793.52 1218.99 L1794.1 1218.99 L1794.69 1218.99 L1795.27 1218.99 L1795.86 1218.99 L1796.45 1218.99 L1797.03 1218.99 L1797.62 1218.99 L1798.21 1218.99 L1798.79 1218.99 L1799.38 1218.99 L1799.97 1218.99 L1800.55 1218.99 L1801.14 1218.99 L1801.73 1218.99 L1802.31 1218.99 L1802.9 1218.99 L1803.48 1218.99 L1804.07 1218.99 L1804.66 1218.99 L1805.24 1218.99 L1805.83 1218.99 L1806.42 1218.99 L1807 1218.99 L1807.59 1218.99 L1808.18 1218.99 L1808.76 1218.99 L1809.35 1218.99 L1809.94 1218.99 L1810.52 1218.99 L1811.11 1218.99 L1811.69 1218.99 L1812.28 1218.99 L1812.87 1218.99 L1813.45 1218.99 L1814.04 1218.99 L1814.63 1218.99 L1815.21 1218.99 L1815.8 1218.99 L1816.39 1218.99 L1816.97 1218.99 L1817.56 1218.99 L1818.14 1218.99 L1818.73 1218.99 L1819.32 1218.99 L1819.9 1218.99 L1820.49 1218.99 L1821.08 1218.99 L1821.66 1218.99 L1822.25 1218.99 L1822.84 1218.99 L1823.42 1218.99 L1824.01 1218.99 L1824.6 1218.99 L1825.18 1218.99 L1825.77 1218.99 L1826.35 1218.99 L1826.94 1218.99 L1827.53 1218.99 L1828.11 1218.99 L1828.7 1218.99 L1829.29 1218.99 L1829.87 1218.99 L1830.46 1218.99 L1831.05 1218.99 L1831.63 1218.99 L1832.22 1218.99 L1832.81 1218.99 L1833.39 1218.99 L1833.98 1218.99 L1834.56 1218.99 L1835.15 1218.99 L1835.74 1218.99 L1836.32 1218.99 L1836.91 1218.99 L1837.5 1218.99 L1838.08 1218.99 L1838.67 1218.99 L1839.26 1218.99 L1839.84 1218.99 L1840.43 1218.99 L1841.01 1218.99 L1841.6 1218.99 L1842.19 1218.99 L1842.77 1218.99 L1843.36 1218.99 L1843.95 1218.99 L1844.53 1218.99 L1845.12 1218.99 L1845.71 1218.99 L1846.29 1218.99 L1846.88 1218.99 L1847.47 1218.99 L1848.05 1218.99 L1848.64 1218.99 L1849.22 1218.99 L1849.81 1218.99 L1850.4 1218.99 L1850.98 1218.99 L1851.57 1218.99 L1852.16 1218.99 L1852.74 1218.99 L1853.33 1218.99 L1853.92 1218.99 L1854.5 1218.99 L1855.09 1218.99 L1855.68 1218.99 L1856.26 1218.99 L1856.85 1218.99 L1857.43 1218.99 L1858.02 1218.99 L1858.61 1218.99 L1859.19 1218.99 L1859.78 1218.99 L1860.37 1218.99 L1860.95 1218.99 L1861.54 1218.99 L1862.13 1218.99 L1862.71 1218.99 L1863.3 1218.99 L1863.88 1218.99 L1864.47 1218.99 L1865.06 1218.99 L1865.64 1218.99 L1866.23 1218.99 L1866.82 1218.99 L1867.4 1218.99 L1867.99 1218.99 L1868.58 1218.99 L1869.16 1218.99 L1869.75 1218.99 L1870.34 1218.99 L1870.92 1218.99 L1871.51 1218.99 L1872.09 1218.99 L1872.68 1218.99 L1873.27 1218.99 L1873.85 1218.99 L1874.44 1218.99 L1875.03 1218.99 L1875.61 1218.99 L1876.2 1218.99 L1876.79 1218.99 L1877.37 1218.99 L1877.96 1218.99 L1878.55 1218.99 L1879.13 1218.99 L1879.72 1218.99 L1880.3 1218.99 L1880.89 1218.99 L1881.48 1218.99 L1882.06 1218.99 L1882.65 1218.99 L1883.24 1218.99 L1883.82 1218.99 L1884.41 1218.99 L1885 1218.99 L1885.58 1218.99 L1886.17 1218.99 L1886.76 1218.99 L1887.34 1218.99 L1887.93 1218.99 L1888.51 1218.99 L1889.1 1218.99 L1889.69 1218.99 L1890.27 1218.99 L1890.86 1218.99 L1891.45 1218.99 L1892.03 1218.99 L1892.62 1218.99 L1893.21 1218.99 L1893.79 1218.99 L1894.38 1218.99 L1894.96 1218.99 L1895.55 1218.99 L1896.14 1218.99 L1896.72 1218.99 L1897.31 1218.99 L1897.9 1218.99 L1898.48 1218.99 L1899.07 1218.99 L1899.66 1218.99 L1900.24 1218.99 L1900.83 1218.99 L1901.42 1218.99 L1902 1218.99 L1902.59 1218.99 L1903.17 1218.99 L1903.76 1218.99 L1904.35 1218.99 L1904.93 1218.99 L1905.52 1218.99 L1906.11 1218.99 L1906.69 1218.99 L1907.28 1218.99 L1907.87 1218.99 L1908.45 1218.99 L1909.04 1218.99 L1909.63 1218.99 L1910.21 1218.99 L1910.8 1218.99 L1911.38 1218.99 L1911.97 1218.99 L1912.56 1218.99 L1913.14 1218.99 L1913.73 1218.99 L1914.32 1218.99 L1914.9 1218.99 L1915.49 1218.99 L1916.08 1218.99 L1916.66 1218.99 L1917.25 1218.99 L1917.83 1218.99 L1918.42 1218.99 L1919.01 1218.99 L1919.59 1218.99 L1920.18 1218.99 L1920.77 1218.99 L1921.35 1218.99 L1921.94 1218.99 L1922.53 1218.99 L1923.11 1218.99 L1923.7 1218.99 L1924.29 1218.99 L1924.87 1218.99 L1925.46 1218.99 L1926.04 1218.99 L1926.63 1218.99 L1927.22 1218.99 L1927.8 1218.99 L1928.39 1218.99 L1928.98 1218.99 L1929.56 1218.99 L1930.15 1218.99 L1930.74 1218.99 L1931.32 1218.99 L1931.91 1218.99 L1932.5 1218.99 L1933.08 1218.99 L1933.67 1218.99 L1934.25 1218.99 L1934.84 1218.99 L1935.43 1218.99 L1936.01 1218.99 L1936.6 1218.99 L1937.19 1218.99 L1937.77 1218.99 L1938.36 1218.99 L1938.95 1218.99 L1939.53 1218.99 L1940.12 1218.99 L1940.71 1218.99 L1941.29 1218.99 L1941.88 1218.99 L1942.46 1218.99 L1943.05 1218.99 L1943.64 1218.99 L1944.22 1218.99 L1944.81 1218.99 L1945.4 1218.99 L1945.98 1218.99 L1946.57 1218.99 L1947.16 1218.99 L1947.74 1218.99 L1948.33 1218.99 L1948.91 1218.99 L1949.5 1218.99 L1950.09 1218.99 L1950.67 1218.99 L1951.26 1218.99 L1951.85 1218.99 L1952.43 1218.99 L1953.02 1218.99 L1953.61 1218.99 L1954.19 1218.99 L1954.78 1218.99 L1955.37 1218.99 L1955.95 1218.99 L1956.54 1218.99 L1957.12 1218.99 L1957.71 1218.99 L1958.3 1218.99 L1958.88 1218.99 L1959.47 1218.99 L1960.06 1218.99 L1960.64 1218.99 L1961.23 1218.99 L1961.82 1218.99 L1962.4 1218.99 L1962.99 1218.99 L1963.58 1218.99 L1964.16 1218.99 L1964.75 1218.99 L1965.33 1218.99 L1965.92 1218.99 L1966.51 1218.99 L1967.09 1218.99 L1967.68 1218.99 L1968.27 1218.99 L1968.85 1218.99 L1969.44 1218.99 L1970.03 1218.99 L1970.61 1218.99 L1971.2 1218.99 L1971.78 1218.99 L1972.37 1218.99 L1972.96 1218.99 L1973.54 1218.99 L1974.13 1218.99 L1974.72 1218.99 L1975.3 1218.99 L1975.89 1218.99 L1976.48 1218.99 L1977.06 1218.99 L1977.65 1218.99 L1978.24 1218.99 L1978.82 1218.99 L1979.41 1218.99 L1979.99 1218.99 L1980.58 1218.99 L1981.17 1218.99 L1981.75 1218.99 L1982.34 1218.99 L1982.93 1218.99 L1983.51 1218.99 L1984.1 1218.99 L1984.69 1218.99 L1985.27 1218.99 L1985.86 1218.99 L1986.45 1218.99 L1987.03 1218.99 L1987.62 1218.99 L1988.2 1218.99 L1988.79 1218.99 L1989.38 1218.99 L1989.96 1218.99 L1990.55 1218.99 L1991.14 1218.99 L1991.72 1218.99 L1992.31 1218.99 L1992.9 1218.99 L1993.48 1218.99 L1994.07 1218.99 L1994.65 1218.99 L1995.24 1218.99 L1995.83 1218.99 L1996.41 1218.99 L1997 1218.99 L1997.59 1218.99 L1998.17 1218.99 L1998.76 1218.99 L1999.35 1218.99 L1999.93 1218.99 L2000.52 1218.99 L2001.11 1218.99 L2001.69 1218.99 L2002.28 1218.99 L2002.86 1218.99 L2003.45 1218.99 L2004.04 1218.99 L2004.62 1218.99 L2005.21 1218.99 L2005.8 1218.99 L2006.38 1218.99 L2006.97 1218.99 L2007.56 1218.99 L2008.14 1218.99 L2008.73 1218.99 L2009.32 1218.99 L2009.9 1218.99 L2010.49 1218.99 L2011.07 1218.99 L2011.66 1218.99 L2012.25 1218.99 L2012.83 1218.99 L2013.42 1218.99 L2014.01 1218.99 L2014.59 1218.99 L2015.18 1218.99 L2015.77 1218.99 L2016.35 1218.99 L2016.94 1218.99 L2017.53 1218.99 L2018.11 1218.99 L2018.7 1218.99 L2019.28 1218.99 L2019.87 1218.99 L2020.46 1218.99 L2021.04 1218.99 L2021.63 1218.99 L2022.22 1218.99 L2022.8 1218.99 L2023.39 1218.99 L2023.98 1218.99 L2024.56 1218.99 L2025.15 1218.99 L2025.73 1218.99 L2026.32 1218.99 L2026.91 1218.99 L2027.49 1218.99 L2028.08 1218.99 L2028.67 1218.99 L2029.25 1218.99 L2029.84 1218.99 L2030.43 1218.99 L2031.01 1218.99 L2031.6 1218.99 L2032.19 1218.99 L2032.77 1218.99 L2033.36 1218.99 L2033.94 1218.99 L2034.53 1218.99 L2035.12 1218.99 L2035.7 1218.99 L2036.29 1218.99 L2036.88 1218.99 L2037.46 1218.99 L2038.05 1218.99 L2038.64 1218.99 L2039.22 1218.99 L2039.81 1218.99 L2040.4 1218.99 L2040.98 1218.99 L2041.57 1218.99 L2042.15 1218.99 L2042.74 1218.99 L2043.33 1218.99 L2043.91 1218.99 L2044.5 1218.99 L2045.09 1218.99 L2045.67 1218.99 L2046.26 1218.99 L2046.85 1218.99 L2047.43 1218.99 L2048.02 1218.99 L2048.6 1218.99 L2049.19 1218.99 L2049.78 1218.99 L2050.36 1218.99 L2050.95 1218.99 L2051.54 1218.99 L2052.12 1218.99 L2052.71 1218.99 L2053.3 1218.99 L2053.88 1218.99 L2054.47 1218.99 L2055.06 1218.99 L2055.64 1218.99 L2056.23 1218.99 L2056.81 1218.99 L2057.4 1218.99 L2057.99 1218.99 L2058.57 1218.99 L2059.16 1218.99 L2059.75 1218.99 L2060.33 1218.99 L2060.92 1218.99 L2061.51 1218.99 L2062.09 1218.99 L2062.68 1218.99 L2063.27 1218.99 L2063.85 1218.99 L2064.44 1218.99 L2065.02 1218.99 L2065.61 1218.99 L2066.2 1218.99 L2066.78 1218.99 L2067.37 1218.99 L2067.96 1218.99 L2068.54 1218.99 L2069.13 1218.99 L2069.72 1218.99 L2070.3 1218.99 L2070.89 1218.99 L2071.48 1218.99 L2072.06 1218.99 L2072.65 1218.99 L2073.23 1218.99 L2073.82 1218.99 L2074.41 1218.99 L2074.99 1218.99 L2075.58 1218.99 L2076.17 1218.99 L2076.75 1218.99 L2077.34 1218.99 L2077.93 1218.99 L2078.51 1218.99 L2079.1 1218.99 L2079.68 1218.99 L2080.27 1218.99 L2080.86 1218.99 L2081.44 1218.99 L2082.03 1218.99 L2082.62 1218.99 L2083.2 1218.99 L2083.79 1218.99 L2084.38 1218.99 L2084.96 1218.99 L2085.55 1218.99 L2086.14 1218.99 L2086.72 1218.99 L2087.31 1218.99 L2087.89 1218.99 L2088.48 1218.99 L2089.07 1218.99 L2089.65 1218.99 L2090.24 1218.99 L2090.83 1218.99 L2091.41 1218.99 L2092 1218.99 L2092.59 1218.99 L2093.17 1218.99 L2093.76 1218.99 L2094.35 1218.99 L2094.93 1218.99 L2095.52 1218.99 L2096.1 1218.99 L2096.69 1218.99 L2097.28 1218.99 L2097.86 1218.99 L2098.45 1218.99 L2099.04 1218.99 L2099.62 1218.99 L2100.21 1218.99 L2100.8 1218.99 L2101.38 1218.99 L2101.97 1218.99 L2102.55 1218.99 L2103.14 1218.99 L2103.73 1218.99 L2104.31 1218.99 L2104.9 1218.99 L2105.49 1218.99 L2106.07 1218.99 L2106.66 1218.99 L2107.25 1218.99 L2107.83 1218.99 L2108.42 1218.99 L2109.01 1218.99 L2109.59 1218.99 L2110.18 1218.99 L2110.76 1218.99 L2111.35 1218.99 L2111.94 1218.99 L2112.52 1218.99 L2113.11 1218.99 L2113.7 1218.99 L2114.28 1218.99 L2114.87 1218.99 L2115.46 1218.99 L2116.04 1218.99 L2116.63 1218.99 L2117.22 1218.99 L2117.8 1218.99 L2118.39 1218.99 L2118.97 1218.99 L2119.56 1218.99 L2120.15 1218.99 L2120.73 1218.99 L2121.32 1218.99 L2121.91 1218.99 L2122.49 1218.99 L2123.08 1218.99 L2123.67 1218.99 L2124.25 1218.99 L2124.84 1218.99 L2125.42 1218.99 L2126.01 1218.99 L2126.6 1218.99 L2127.18 1218.99 L2127.77 1218.99 L2128.36 1218.99 L2128.94 1218.99 L2129.53 1218.99 L2130.12 1218.99 L2130.7 1218.99 L2131.29 1218.99 L2131.88 1218.99 L2132.46 1218.99 L2133.05 1218.99 L2133.63 1218.99 L2134.22 1218.99 L2134.81 1218.99 L2135.39 1218.99 L2135.98 1218.99 L2136.57 1218.99 L2137.15 1218.99 L2137.74 1218.99 L2138.33 1218.99 L2138.91 1218.99 L2139.5 1218.99 L2140.09 1218.99 L2140.67 1218.99 L2141.26 1218.99 L2141.84 1218.99 L2142.43 1218.99 L2143.02 1218.99 L2143.6 1218.99 L2144.19 1218.99 L2144.78 1218.99 L2145.36 1218.99 L2145.95 1218.99 L2146.54 1218.99 L2147.12 1218.99 L2147.71 1218.99 L2148.3 1218.99 L2148.88 1218.99 L2149.47 1218.99 L2150.05 1218.99 L2150.64 1218.99 L2151.23 1218.99 L2151.81 1218.99 L2152.4 1218.99 L2152.99 1218.99 L2153.57 1218.99 L2154.16 1218.99 L2154.75 1218.99 L2155.33 1218.99 L2155.92 1218.99 L2156.5 1218.99 L2157.09 1218.99 L2157.68 1218.99 L2158.26 1218.99 L2158.26 1218.27 L2157.68 1218.27 L2157.09 1218.27 L2156.5 1218.27 L2155.92 1218.27 L2155.33 1218.27 L2154.75 1218.27 L2154.16 1218.27 L2153.57 1218.27 L2152.99 1218.27 L2152.4 1218.27 L2151.81 1218.27 L2151.23 1218.27 L2150.64 1218.27 L2150.05 1218.27 L2149.47 1218.27 L2148.88 1218.27 L2148.3 1218.27 L2147.71 1218.27 L2147.12 1218.27 L2146.54 1218.27 L2145.95 1218.27 L2145.36 1218.27 L2144.78 1218.27 L2144.19 1218.27 L2143.6 1218.27 L2143.02 1218.27 L2142.43 1218.27 L2141.84 1218.27 L2141.26 1218.27 L2140.67 1218.27 L2140.09 1218.27 L2139.5 1218.27 L2138.91 1218.27 L2138.33 1218.27 L2137.74 1218.27 L2137.15 1218.27 L2136.57 1218.27 L2135.98 1218.27 L2135.39 1218.27 L2134.81 1218.27 L2134.22 1218.27 L2133.63 1218.27 L2133.05 1218.27 L2132.46 1218.27 L2131.88 1218.27 L2131.29 1218.27 L2130.7 1218.27 L2130.12 1218.27 L2129.53 1218.27 L2128.94 1218.27 L2128.36 1218.27 L2127.77 1218.27 L2127.18 1218.27 L2126.6 1218.27 L2126.01 1218.27 L2125.42 1218.27 L2124.84 1218.27 L2124.25 1218.27 L2123.67 1218.27 L2123.08 1218.27 L2122.49 1218.27 L2121.91 1218.27 L2121.32 1218.27 L2120.73 1218.27 L2120.15 1218.27 L2119.56 1218.27 L2118.97 1218.27 L2118.39 1218.27 L2117.8 1218.27 L2117.22 1218.27 L2116.63 1218.27 L2116.04 1218.27 L2115.46 1218.27 L2114.87 1218.27 L2114.28 1218.27 L2113.7 1218.27 L2113.11 1218.27 L2112.52 1218.27 L2111.94 1218.27 L2111.35 1218.27 L2110.76 1218.27 L2110.18 1218.27 L2109.59 1218.27 L2109.01 1218.27 L2108.42 1218.27 L2107.83 1218.27 L2107.25 1218.27 L2106.66 1218.27 L2106.07 1218.27 L2105.49 1218.27 L2104.9 1218.27 L2104.31 1218.27 L2103.73 1218.27 L2103.14 1218.27 L2102.55 1218.27 L2101.97 1218.27 L2101.38 1218.27 L2100.8 1218.27 L2100.21 1218.27 L2099.62 1218.27 L2099.04 1218.27 L2098.45 1218.27 L2097.86 1218.27 L2097.28 1218.27 L2096.69 1218.27 L2096.1 1218.27 L2095.52 1218.27 L2094.93 1218.27 L2094.35 1218.27 L2093.76 1218.27 L2093.17 1218.27 L2092.59 1218.27 L2092 1218.27 L2091.41 1218.27 L2090.83 1218.27 L2090.24 1218.27 L2089.65 1218.27 L2089.07 1218.27 L2088.48 1218.27 L2087.89 1218.27 L2087.31 1218.27 L2086.72 1218.27 L2086.14 1218.27 L2085.55 1218.27 L2084.96 1218.27 L2084.38 1218.27 L2083.79 1218.27 L2083.2 1218.27 L2082.62 1218.27 L2082.03 1218.27 L2081.44 1218.27 L2080.86 1218.27 L2080.27 1218.27 L2079.68 1218.27 L2079.1 1218.27 L2078.51 1218.27 L2077.93 1218.27 L2077.34 1218.27 L2076.75 1218.27 L2076.17 1218.27 L2075.58 1218.27 L2074.99 1218.27 L2074.41 1218.27 L2073.82 1218.27 L2073.23 1218.27 L2072.65 1218.27 L2072.06 1218.27 L2071.48 1218.27 L2070.89 1218.27 L2070.3 1218.27 L2069.72 1218.27 L2069.13 1218.27 L2068.54 1218.27 L2067.96 1218.27 L2067.37 1218.27 L2066.78 1218.27 L2066.2 1218.27 L2065.61 1218.27 L2065.02 1218.27 L2064.44 1218.27 L2063.85 1218.27 L2063.27 1218.27 L2062.68 1218.27 L2062.09 1218.27 L2061.51 1218.27 L2060.92 1218.27 L2060.33 1218.27 L2059.75 1218.27 L2059.16 1218.27 L2058.57 1218.27 L2057.99 1218.27 L2057.4 1218.27 L2056.81 1218.27 L2056.23 1218.27 L2055.64 1218.27 L2055.06 1218.27 L2054.47 1218.27 L2053.88 1218.27 L2053.3 1218.27 L2052.71 1218.27 L2052.12 1218.27 L2051.54 1218.27 L2050.95 1218.27 L2050.36 1218.27 L2049.78 1218.27 L2049.19 1218.27 L2048.6 1218.27 L2048.02 1218.27 L2047.43 1218.27 L2046.85 1218.27 L2046.26 1218.27 L2045.67 1218.27 L2045.09 1218.27 L2044.5 1218.27 L2043.91 1218.27 L2043.33 1218.27 L2042.74 1218.27 L2042.15 1218.27 L2041.57 1218.27 L2040.98 1218.27 L2040.4 1218.27 L2039.81 1218.27 L2039.22 1218.27 L2038.64 1218.27 L2038.05 1218.27 L2037.46 1218.27 L2036.88 1218.27 L2036.29 1218.27 L2035.7 1218.27 L2035.12 1218.27 L2034.53 1218.27 L2033.94 1218.27 L2033.36 1218.27 L2032.77 1218.27 L2032.19 1218.27 L2031.6 1218.27 L2031.01 1218.27 L2030.43 1218.27 L2029.84 1218.27 L2029.25 1218.27 L2028.67 1218.27 L2028.08 1218.27 L2027.49 1218.27 L2026.91 1218.27 L2026.32 1218.27 L2025.73 1218.27 L2025.15 1218.27 L2024.56 1218.27 L2023.98 1218.27 L2023.39 1218.27 L2022.8 1218.27 L2022.22 1218.27 L2021.63 1218.27 L2021.04 1218.27 L2020.46 1218.27 L2019.87 1218.27 L2019.28 1218.27 L2018.7 1218.27 L2018.11 1218.27 L2017.53 1218.27 L2016.94 1218.27 L2016.35 1218.27 L2015.77 1218.27 L2015.18 1218.27 L2014.59 1218.27 L2014.01 1218.27 L2013.42 1218.27 L2012.83 1218.27 L2012.25 1218.27 L2011.66 1218.27 L2011.07 1218.27 L2010.49 1218.27 L2009.9 1218.27 L2009.32 1218.27 L2008.73 1218.27 L2008.14 1218.27 L2007.56 1218.27 L2006.97 1218.27 L2006.38 1218.27 L2005.8 1218.27 L2005.21 1218.27 L2004.62 1218.27 L2004.04 1218.27 L2003.45 1218.27 L2002.86 1218.27 L2002.28 1218.27 L2001.69 1218.27 L2001.11 1218.27 L2000.52 1218.27 L1999.93 1218.27 L1999.35 1218.27 L1998.76 1218.27 L1998.17 1218.27 L1997.59 1218.27 L1997 1218.27 L1996.41 1218.27 L1995.83 1218.27 L1995.24 1218.27 L1994.65 1218.27 L1994.07 1218.27 L1993.48 1218.27 L1992.9 1218.27 L1992.31 1218.27 L1991.72 1218.27 L1991.14 1218.27 L1990.55 1218.27 L1989.96 1218.27 L1989.38 1218.27 L1988.79 1218.27 L1988.2 1218.27 L1987.62 1218.27 L1987.03 1218.27 L1986.45 1218.27 L1985.86 1218.27 L1985.27 1218.27 L1984.69 1218.27 L1984.1 1218.27 L1983.51 1218.27 L1982.93 1218.27 L1982.34 1218.27 L1981.75 1218.27 L1981.17 1218.27 L1980.58 1218.27 L1979.99 1218.27 L1979.41 1218.27 L1978.82 1218.27 L1978.24 1218.27 L1977.65 1218.27 L1977.06 1218.27 L1976.48 1218.27 L1975.89 1218.27 L1975.3 1218.27 L1974.72 1218.27 L1974.13 1218.27 L1973.54 1218.27 L1972.96 1218.27 L1972.37 1218.27 L1971.78 1218.27 L1971.2 1218.27 L1970.61 1218.27 L1970.03 1218.27 L1969.44 1218.27 L1968.85 1218.27 L1968.27 1218.27 L1967.68 1218.27 L1967.09 1218.27 L1966.51 1218.27 L1965.92 1218.27 L1965.33 1218.27 L1964.75 1218.27 L1964.16 1218.27 L1963.58 1218.27 L1962.99 1218.27 L1962.4 1218.27 L1961.82 1218.27 L1961.23 1218.27 L1960.64 1218.27 L1960.06 1218.27 L1959.47 1218.27 L1958.88 1218.27 L1958.3 1218.27 L1957.71 1218.27 L1957.12 1218.27 L1956.54 1218.27 L1955.95 1218.27 L1955.37 1218.27 L1954.78 1218.27 L1954.19 1218.27 L1953.61 1218.27 L1953.02 1218.27 L1952.43 1218.27 L1951.85 1218.27 L1951.26 1218.27 L1950.67 1218.27 L1950.09 1218.27 L1949.5 1218.27 L1948.91 1218.27 L1948.33 1218.27 L1947.74 1218.27 L1947.16 1218.27 L1946.57 1218.27 L1945.98 1218.27 L1945.4 1218.27 L1944.81 1218.27 L1944.22 1218.27 L1943.64 1218.27 L1943.05 1218.27 L1942.46 1218.27 L1941.88 1218.27 L1941.29 1218.27 L1940.71 1218.27 L1940.12 1218.27 L1939.53 1218.27 L1938.95 1218.27 L1938.36 1218.27 L1937.77 1218.27 L1937.19 1218.27 L1936.6 1218.27 L1936.01 1218.27 L1935.43 1218.27 L1934.84 1218.27 L1934.25 1218.27 L1933.67 1218.27 L1933.08 1218.27 L1932.5 1218.27 L1931.91 1218.27 L1931.32 1218.27 L1930.74 1218.27 L1930.15 1218.27 L1929.56 1218.27 L1928.98 1218.27 L1928.39 1218.27 L1927.8 1218.27 L1927.22 1218.27 L1926.63 1218.27 L1926.04 1218.27 L1925.46 1218.27 L1924.87 1218.27 L1924.29 1218.27 L1923.7 1218.27 L1923.11 1218.27 L1922.53 1218.27 L1921.94 1218.27 L1921.35 1218.27 L1920.77 1218.27 L1920.18 1218.27 L1919.59 1218.27 L1919.01 1218.27 L1918.42 1218.27 L1917.83 1218.27 L1917.25 1218.27 L1916.66 1218.27 L1916.08 1218.27 L1915.49 1218.27 L1914.9 1218.27 L1914.32 1218.27 L1913.73 1218.27 L1913.14 1218.27 L1912.56 1218.27 L1911.97 1218.27 L1911.38 1218.27 L1910.8 1218.27 L1910.21 1218.27 L1909.63 1218.27 L1909.04 1218.27 L1908.45 1218.27 L1907.87 1218.27 L1907.28 1218.27 L1906.69 1218.27 L1906.11 1218.27 L1905.52 1218.27 L1904.93 1218.27 L1904.35 1218.27 L1903.76 1218.27 L1903.17 1218.27 L1902.59 1218.27 L1902 1218.27 L1901.42 1218.27 L1900.83 1218.27 L1900.24 1218.27 L1899.66 1218.27 L1899.07 1218.27 L1898.48 1218.27 L1897.9 1218.27 L1897.31 1218.27 L1896.72 1218.27 L1896.14 1218.27 L1895.55 1218.27 L1894.96 1218.27 L1894.38 1218.27 L1893.79 1218.27 L1893.21 1218.27 L1892.62 1218.27 L1892.03 1218.27 L1891.45 1218.27 L1890.86 1218.27 L1890.27 1218.27 L1889.69 1218.27 L1889.1 1218.27 L1888.51 1218.27 L1887.93 1218.27 L1887.34 1218.27 L1886.76 1218.27 L1886.17 1218.27 L1885.58 1218.27 L1885 1218.27 L1884.41 1218.27 L1883.82 1218.27 L1883.24 1218.27 L1882.65 1218.27 L1882.06 1218.27 L1881.48 1218.27 L1880.89 1218.27 L1880.3 1218.27 L1879.72 1218.27 L1879.13 1218.27 L1878.55 1218.27 L1877.96 1218.27 L1877.37 1218.27 L1876.79 1218.27 L1876.2 1218.27 L1875.61 1218.27 L1875.03 1218.27 L1874.44 1218.27 L1873.85 1218.27 L1873.27 1218.27 L1872.68 1218.27 L1872.09 1218.27 L1871.51 1218.27 L1870.92 1218.27 L1870.34 1218.27 L1869.75 1218.27 L1869.16 1218.27 L1868.58 1218.27 L1867.99 1218.27 L1867.4 1218.27 L1866.82 1218.27 L1866.23 1218.27 L1865.64 1218.27 L1865.06 1218.27 L1864.47 1218.27 L1863.88 1218.27 L1863.3 1218.27 L1862.71 1218.27 L1862.13 1218.27 L1861.54 1218.27 L1860.95 1218.27 L1860.37 1218.27 L1859.78 1218.27 L1859.19 1218.27 L1858.61 1218.27 L1858.02 1218.27 L1857.43 1218.27 L1856.85 1218.27 L1856.26 1218.27 L1855.68 1218.27 L1855.09 1218.27 L1854.5 1218.27 L1853.92 1218.27 L1853.33 1218.27 L1852.74 1218.27 L1852.16 1218.27 L1851.57 1218.27 L1850.98 1218.27 L1850.4 1218.27 L1849.81 1218.27 L1849.22 1218.27 L1848.64 1218.27 L1848.05 1218.27 L1847.47 1218.27 L1846.88 1218.27 L1846.29 1218.27 L1845.71 1218.27 L1845.12 1218.27 L1844.53 1218.27 L1843.95 1218.27 L1843.36 1218.27 L1842.77 1218.27 L1842.19 1218.27 L1841.6 1218.27 L1841.01 1218.27 L1840.43 1218.27 L1839.84 1218.27 L1839.26 1218.27 L1838.67 1218.27 L1838.08 1218.27 L1837.5 1218.27 L1836.91 1218.27 L1836.32 1218.27 L1835.74 1218.27 L1835.15 1218.27 L1834.56 1218.27 L1833.98 1218.27 L1833.39 1218.27 L1832.81 1218.27 L1832.22 1218.27 L1831.63 1218.27 L1831.05 1218.27 L1830.46 1218.27 L1829.87 1218.27 L1829.29 1218.27 L1828.7 1218.27 L1828.11 1218.27 L1827.53 1218.27 L1826.94 1218.27 L1826.35 1218.27 L1825.77 1218.27 L1825.18 1218.27 L1824.6 1218.27 L1824.01 1218.27 L1823.42 1218.27 L1822.84 1218.27 L1822.25 1218.27 L1821.66 1218.27 L1821.08 1218.27 L1820.49 1218.27 L1819.9 1218.27 L1819.32 1218.27 L1818.73 1218.27 L1818.14 1218.27 L1817.56 1218.27 L1816.97 1218.27 L1816.39 1218.27 L1815.8 1218.27 L1815.21 1218.27 L1814.63 1218.27 L1814.04 1218.27 L1813.45 1218.27 L1812.87 1218.27 L1812.28 1218.27 L1811.69 1218.27 L1811.11 1218.27 L1810.52 1218.27 L1809.94 1218.27 L1809.35 1218.27 L1808.76 1218.27 L1808.18 1218.27 L1807.59 1218.27 L1807 1218.27 L1806.42 1218.27 L1805.83 1218.27 L1805.24 1218.27 L1804.66 1218.27 L1804.07 1218.27 L1803.48 1218.27 L1802.9 1218.27 L1802.31 1218.27 L1801.73 1218.27 L1801.14 1218.27 L1800.55 1218.27 L1799.97 1218.27 L1799.38 1218.27 L1798.79 1218.27 L1798.21 1218.27 L1797.62 1218.27 L1797.03 1218.27 L1796.45 1218.27 L1795.86 1218.27 L1795.27 1218.27 L1794.69 1218.27 L1794.1 1218.27 L1793.52 1218.27 L1792.93 1218.27 L1792.34 1218.27 L1791.76 1218.27 L1791.17 1218.27 L1790.58 1218.27 L1790 1218.27 L1789.41 1218.27 L1788.82 1218.27 L1788.24 1218.27 L1787.65 1218.27 L1787.06 1218.27 L1786.48 1218.27 L1785.89 1218.27 L1785.31 1218.27 L1784.72 1218.27 L1784.13 1218.27 L1783.55 1218.27 L1782.96 1218.27 L1782.37 1218.27 L1781.79 1218.27 L1781.2 1218.27 L1780.61 1218.27 L1780.03 1218.27 L1779.44 1218.27 L1778.86 1218.27 L1778.27 1218.27 L1777.68 1218.27 L1777.1 1218.27 L1776.51 1218.27 L1775.92 1218.27 L1775.34 1218.27 L1774.75 1218.27 L1774.16 1218.27 L1773.58 1218.27 L1772.99 1218.27 L1772.4 1218.27 L1771.82 1218.27 L1771.23 1218.27 L1770.65 1218.27 L1770.06 1218.27 L1769.47 1218.27 L1768.89 1218.27 L1768.3 1218.27 L1767.71 1218.27 L1767.13 1218.27 L1766.54 1218.27 L1765.95 1218.27 L1765.37 1218.27 L1764.78 1218.27 L1764.19 1218.27 L1763.61 1218.27 L1763.02 1218.27 L1762.44 1218.27 L1761.85 1218.27 L1761.26 1218.27 L1760.68 1218.27 L1760.09 1218.27 L1759.5 1218.27 L1758.92 1218.27 L1758.33 1218.27 L1757.74 1218.27 L1757.16 1218.27 L1756.57 1218.27 L1755.99 1218.27 L1755.4 1218.27 L1754.81 1218.27 L1754.23 1218.27 L1753.64 1218.27 L1753.05 1218.27 L1752.47 1218.27 L1751.88 1218.27 L1751.29 1218.27 L1750.71 1218.27 L1750.12 1218.27 L1749.53 1218.27 L1748.95 1218.27 L1748.36 1218.27 L1747.78 1218.27 L1747.19 1218.27 L1746.6 1218.27 L1746.02 1218.27 L1745.43 1218.27 L1744.84 1218.27 L1744.26 1218.27 L1743.67 1218.27 L1743.08 1218.27 L1742.5 1218.27 L1741.91 1218.27 L1741.32 1218.27 L1740.74 1218.27 L1740.15 1218.27 L1739.57 1218.27 L1738.98 1218.27 L1738.39 1218.27 L1737.81 1218.27 L1737.22 1218.27 L1736.63 1218.27 L1736.05 1218.27 L1735.46 1218.27 L1734.87 1218.27 L1734.29 1218.27 L1733.7 1218.27 L1733.11 1218.27 L1732.53 1218.27 L1731.94 1218.27 L1731.36 1218.27 L1730.77 1218.27 L1730.18 1218.27 L1729.6 1218.27 L1729.01 1218.27 L1728.42 1218.27 L1727.84 1218.27 L1727.25 1218.27 L1726.66 1218.27 L1726.08 1218.27 L1725.49 1218.27 L1724.91 1218.27 L1724.32 1218.27 L1723.73 1218.27 L1723.15 1218.27 L1722.56 1218.27 L1721.97 1218.27 L1721.39 1218.27 L1720.8 1218.27 L1720.21 1218.27 L1719.63 1218.27 L1719.04 1218.27 L1718.45 1218.27 L1717.87 1218.27 L1717.28 1218.27 L1716.7 1218.27 L1716.11 1218.27 L1715.52 1218.27 L1714.94 1218.27 L1714.35 1218.27 L1713.76 1218.27 L1713.18 1218.27 L1712.59 1218.27 L1712 1218.27 L1711.42 1218.27 L1710.83 1218.27 L1710.24 1218.27 L1709.66 1218.27 L1709.07 1218.27 L1708.49 1218.27 L1707.9 1218.27 L1707.31 1218.27 L1706.73 1218.27 L1706.14 1218.27 L1705.55 1218.27 L1704.97 1218.27 L1704.38 1218.27 L1703.79 1218.27 L1703.21 1218.27 L1702.62 1218.27 L1702.04 1218.27 L1701.45 1218.27 L1700.86 1218.27 L1700.28 1218.27 L1699.69 1218.27 L1699.1 1218.27 L1698.52 1218.27 L1697.93 1218.27 L1697.34 1218.27 L1696.76 1218.27 L1696.17 1218.27 L1695.58 1218.27 L1695 1218.27 L1694.41 1218.27 L1693.83 1218.27 L1693.24 1218.27 L1692.65 1218.27 L1692.07 1218.27 L1691.48 1218.27 L1690.89 1218.27 L1690.31 1218.27 L1689.72 1218.27 L1689.13 1218.27 L1688.55 1218.27 L1687.96 1218.27 L1687.37 1218.27 L1686.79 1218.27 L1686.2 1218.27 L1685.62 1218.27 L1685.03 1218.27 L1684.44 1218.27 L1683.86 1218.27 L1683.27 1218.27 L1682.68 1218.27 L1682.1 1218.27 L1681.51 1218.27 L1680.92 1218.27 L1680.34 1218.27 L1679.75 1218.27 L1679.17 1218.27 L1678.58 1218.27 L1677.99 1218.27 L1677.41 1218.27 L1676.82 1218.27 L1676.23 1218.27 L1675.65 1218.27 L1675.06 1218.27 L1674.47 1218.27 L1673.89 1218.27 L1673.3 1218.27 L1672.71 1218.27 L1672.13 1218.27 L1671.54 1218.27 L1670.96 1218.27 L1670.37 1218.27 L1669.78 1218.27 L1669.2 1218.27 L1668.61 1218.27 L1668.02 1218.27 L1667.44 1218.27 L1666.85 1218.27 L1666.26 1218.27 L1665.68 1218.27 L1665.09 1218.27 L1664.5 1218.27 L1663.92 1218.27 L1663.33 1218.27 L1662.75 1218.27 L1662.16 1218.27 L1661.57 1218.27 L1660.99 1218.27 L1660.4 1218.27 L1659.81 1218.27 L1659.23 1218.27 L1658.64 1218.27 L1658.05 1218.27 L1657.47 1218.27 L1656.88 1218.27 L1656.29 1218.27 L1655.71 1218.27 L1655.12 1218.27 L1654.54 1218.27 L1653.95 1218.27 L1653.36 1218.27 L1652.78 1218.27 L1652.19 1218.27 L1651.6 1218.27 L1651.02 1218.27 L1650.43 1218.27 L1649.84 1218.27 L1649.26 1218.27 L1648.67 1218.27 L1648.09 1218.27 L1647.5 1218.27 L1646.91 1218.27 L1646.33 1218.27 L1645.74 1218.27 L1645.15 1218.27 L1644.57 1218.27 L1643.98 1218.27 L1643.39 1218.27 L1642.81 1218.27 L1642.22 1218.27 L1641.63 1218.27 L1641.05 1218.27 L1640.46 1218.27 L1639.88 1218.27 L1639.29 1218.27 L1638.7 1218.27 L1638.12 1218.27 L1637.53 1218.27 L1636.94 1218.27 L1636.36 1218.27 L1635.77 1218.27 L1635.18 1218.27 L1634.6 1218.27 L1634.01 1218.27 L1633.42 1218.27 L1632.84 1218.27 L1632.25 1218.27 L1631.67 1218.27 L1631.08 1218.27 L1630.49 1218.27 L1629.91 1218.27 L1629.32 1218.27 L1628.73 1218.27 L1628.15 1218.27 L1627.56 1218.27 L1626.97 1218.27 L1626.39 1218.27 L1625.8 1218.27 L1625.22 1218.27 L1624.63 1218.27 L1624.04 1218.27 L1623.46 1218.27 L1622.87 1218.27 L1622.28 1218.27 L1621.7 1218.27 L1621.11 1218.27 L1620.52 1218.27 L1619.94 1218.27 L1619.35 1218.27 L1618.76 1218.27 L1618.18 1218.27 L1617.59 1218.27 L1617.01 1218.27 L1616.42 1218.27 L1615.83 1218.27 L1615.25 1218.27 L1614.66 1218.27 L1614.07 1218.27 L1613.49 1218.27 L1612.9 1218.27 L1612.31 1218.27 L1611.73 1218.27 L1611.14 1218.27 L1610.55 1218.27 L1609.97 1218.27 L1609.38 1218.27 L1608.8 1218.27 L1608.21 1218.27 L1607.62 1218.27 L1607.04 1218.27 L1606.45 1218.27 L1605.86 1218.27 L1605.28 1218.27 L1604.69 1218.27 L1604.1 1218.27 L1603.52 1218.27 L1602.93 1218.27 L1602.34 1218.27 L1601.76 1218.27 L1601.17 1218.27 L1600.59 1218.27 L1600 1218.27 L1599.41 1218.27 L1598.83 1218.27 L1598.24 1218.27 L1597.65 1218.27 L1597.07 1218.27 L1596.48 1218.27 L1595.89 1218.27 L1595.31 1218.27 L1594.72 1218.27 L1594.14 1218.27 L1593.55 1218.27 L1592.96 1218.27 L1592.38 1218.27 L1591.79 1218.27 L1591.2 1218.27 L1590.62 1218.27 L1590.03 1218.27 L1589.44 1218.27 L1588.86 1218.27 L1588.27 1218.27 L1587.68 1218.27 L1587.1 1218.27 L1586.51 1218.27 L1585.93 1218.27 L1585.34 1218.27 L1584.75 1218.27 L1584.17 1218.27 L1583.58 1218.27 L1582.99 1218.27 L1582.41 1218.27 L1581.82 1218.27 L1581.23 1218.27 L1580.65 1218.27 L1580.06 1218.27 L1579.47 1218.27 L1578.89 1218.27 L1578.3 1218.27 L1577.72 1218.27 L1577.13 1218.27 L1576.54 1218.27 L1575.96 1218.27 L1575.37 1218.27 L1574.78 1218.27 L1574.2 1218.27 L1573.61 1218.27 L1573.02 1218.27 L1572.44 1218.27 L1571.85 1218.27 L1571.27 1218.27 L1570.68 1218.27 L1570.09 1218.27 L1569.51 1218.27 L1568.92 1218.27 L1568.33 1218.27 L1567.75 1218.27 L1567.16 1218.27 L1566.57 1218.27 L1565.99 1218.27 L1565.4 1218.27 L1564.81 1218.27 L1564.23 1218.27 L1563.64 1218.27 L1563.06 1218.27 L1562.47 1218.27 L1561.88 1218.27 L1561.3 1218.27 L1560.71 1218.27 L1560.12 1218.27 L1559.54 1218.27 L1558.95 1218.27 L1558.36 1218.27 L1557.78 1218.27 L1557.19 1218.27 L1556.6 1218.27 L1556.02 1218.27 L1555.43 1218.27 L1554.85 1218.27 L1554.26 1218.27 L1553.67 1218.27 L1553.09 1218.27 L1552.5 1218.27 L1551.91 1218.27 L1551.33 1218.27 L1550.74 1218.27 L1550.15 1218.27 L1549.57 1218.27 L1548.98 1218.27 L1548.4 1218.27 L1547.81 1218.27 L1547.22 1218.27 L1546.64 1218.27 L1546.05 1218.27 L1545.46 1218.27 L1544.88 1218.27 L1544.29 1218.27 L1543.7 1218.27 L1543.12 1218.27 L1542.53 1218.27 L1541.94 1218.27 L1541.36 1218.27 L1540.77 1218.27 L1540.19 1218.27 L1539.6 1218.27 L1539.01 1218.27 L1538.43 1218.27 L1537.84 1218.27 L1537.25 1218.27 L1536.67 1218.27 L1536.08 1218.27 L1535.49 1218.27 L1534.91 1218.27 L1534.32 1218.27 L1533.73 1218.27 L1533.15 1218.27 L1532.56 1218.27 L1531.98 1218.27 L1531.39 1218.27 L1530.8 1218.27 L1530.22 1218.27 L1529.63 1218.27 L1529.04 1218.27 L1528.46 1218.27 L1527.87 1218.27 L1527.28 1218.27 L1526.7 1218.27 L1526.11 1218.27 L1525.52 1218.27 L1524.94 1218.27 L1524.35 1218.27 L1523.77 1218.27 L1523.18 1218.27 L1522.59 1218.27 L1522.01 1218.27 L1521.42 1218.27 L1520.83 1218.27 L1520.25 1218.27 L1519.66 1218.27 L1519.07 1218.27 L1518.49 1218.27 L1517.9 1218.27 L1517.32 1218.27 L1516.73 1218.27 L1516.14 1218.27 L1515.56 1218.27 L1514.97 1218.27 L1514.38 1218.27 L1513.8 1218.27 L1513.21 1218.27 L1512.62 1218.27 L1512.04 1218.27 L1511.45 1218.27 L1510.86 1218.27 L1510.28 1218.27 L1509.69 1218.27 L1509.11 1218.27 L1508.52 1218.27 L1507.93 1218.27 L1507.35 1218.27 L1506.76 1218.27 L1506.17 1218.27 L1505.59 1218.27 L1505 1218.27 L1504.41 1218.27 L1503.83 1218.27 L1503.24 1218.27 L1502.65 1218.27 L1502.07 1218.27 L1501.48 1218.27 L1500.9 1218.27 L1500.31 1218.27 L1499.72 1218.27 L1499.14 1218.27 L1498.55 1218.27 L1497.96 1218.27 L1497.38 1218.27 L1496.79 1218.27 L1496.2 1218.27 L1495.62 1218.27 L1495.03 1218.27 L1494.45 1218.27 L1493.86 1218.27 L1493.27 1218.27 L1492.69 1218.27 L1492.1 1218.27 L1491.51 1218.27 L1490.93 1218.27 L1490.34 1218.27 L1489.75 1218.27 L1489.17 1218.27 L1488.58 1218.27 L1487.99 1218.27 L1487.41 1218.27 L1486.82 1218.27 L1486.24 1218.27 L1485.65 1218.27 L1485.06 1218.27 L1484.48 1218.27 L1483.89 1218.27 L1483.3 1218.27 L1482.72 1218.27 L1482.13 1218.27 L1481.54 1218.27 L1480.96 1218.27 L1480.37 1218.27 L1479.78 1218.27 L1479.2 1218.27 L1478.61 1218.27 L1478.03 1218.27 L1477.44 1218.27 L1476.85 1218.27 L1476.27 1218.27 L1475.68 1218.27 L1475.09 1218.27 L1474.51 1218.27 L1473.92 1218.27 L1473.33 1218.27 L1472.75 1218.27 L1472.16 1218.27 L1471.57 1218.27 L1470.99 1218.27 L1470.4 1218.27 L1469.82 1218.27 L1469.23 1218.27 L1468.64 1218.27 L1468.06 1218.27 L1467.47 1218.27 L1466.88 1218.27 L1466.3 1218.27 L1465.71 1218.27 L1465.12 1218.27 L1464.54 1218.27 L1463.95 1218.27 L1463.37 1218.27 L1462.78 1218.27 L1462.19 1218.27 L1461.61 1218.27 L1461.02 1218.27 L1460.43 1218.27 L1459.85 1218.27 L1459.26 1218.27 L1458.67 1218.27 L1458.09 1218.27 L1457.5 1218.27 L1456.91 1218.27 L1456.33 1218.27 L1455.74 1218.27 L1455.16 1218.27 L1454.57 1218.27 L1453.98 1218.27 L1453.4 1218.27 L1452.81 1218.27 L1452.22 1218.27 L1451.64 1218.27 L1451.05 1218.27 L1450.46 1218.27 L1449.88 1218.27 L1449.29 1218.27 L1448.7 1218.27 L1448.12 1218.27 L1447.53 1218.27 L1446.95 1218.27 L1446.36 1218.27 L1445.77 1218.27 L1445.19 1218.27 L1444.6 1218.27 L1444.01 1218.27 L1443.43 1218.27 L1442.84 1218.27 L1442.25 1218.27 L1441.67 1218.27 L1441.08 1218.27 L1440.5 1218.27 L1439.91 1218.27 L1439.32 1218.27 L1438.74 1218.27 L1438.15 1218.27 L1437.56 1218.27 L1436.98 1218.27 L1436.39 1218.27 L1435.8 1218.27 L1435.22 1218.27 L1434.63 1218.27 L1434.04 1218.27 L1433.46 1218.27 L1432.87 1218.27 L1432.29 1218.27 L1431.7 1218.27 L1431.11 1218.27 L1430.53 1218.27 L1429.94 1218.27 L1429.35 1218.27 L1428.77 1218.27 L1428.18 1218.27 L1427.59 1218.27 L1427.01 1218.27 L1426.42 1218.27 L1425.83 1218.27 L1425.25 1218.27 L1424.66 1218.27 L1424.08 1218.27 L1423.49 1218.27 L1422.9 1218.27 L1422.32 1218.27 L1421.73 1218.27 L1421.14 1218.27 L1420.56 1218.27 L1419.97 1218.27 L1419.38 1218.27 L1418.8 1218.27 L1418.21 1218.27 L1417.63 1218.27 L1417.04 1218.27 L1416.45 1218.27 L1415.87 1218.27 L1415.28 1218.27 L1414.69 1218.27 L1414.11 1218.27 L1413.52 1218.27 L1412.93 1218.27 L1412.35 1218.27 L1411.76 1218.27 L1411.17 1218.27 L1410.59 1218.27 L1410 1218.27 L1409.42 1218.27 L1408.83 1218.27 L1408.24 1218.27 L1407.66 1218.27 L1407.07 1218.27 L1406.48 1218.27 L1405.9 1218.27 L1405.31 1218.27 L1404.72 1218.27 L1404.14 1218.27 L1403.55 1218.27 L1402.96 1218.27 L1402.38 1218.27 L1401.79 1218.27 L1401.21 1218.27 L1400.62 1218.27 L1400.03 1218.27 L1399.45 1218.27 L1398.86 1218.27 L1398.27 1218.27 L1397.69 1218.27 L1397.1 1218.27 L1396.51 1218.27 L1395.93 1218.27 L1395.34 1218.27 L1394.75 1218.27 L1394.17 1218.27 L1393.58 1218.27 L1393 1218.27 L1392.41 1218.27 L1391.82 1218.27 L1391.24 1218.27 L1390.65 1218.27 L1390.06 1218.27 L1389.48 1218.27 L1388.89 1218.27 L1388.3 1218.27 L1387.72 1218.27 L1387.13 1218.27 L1386.55 1218.27 L1385.96 1218.27 L1385.37 1218.27 L1384.79 1218.27 L1384.2 1218.27 L1383.61 1218.27 L1383.03 1218.27 L1382.44 1218.27 L1381.85 1218.27 L1381.27 1218.27 L1380.68 1218.27 L1380.09 1218.27 L1379.51 1218.27 L1378.92 1218.27 L1378.34 1218.27 L1377.75 1218.27 L1377.16 1218.27 L1376.58 1218.27 L1375.99 1218.27 L1375.4 1218.27 L1374.82 1218.27 L1374.23 1218.27 L1373.64 1218.27 L1373.06 1218.27 L1372.47 1218.27 L1371.88 1218.27 L1371.3 1218.27 L1370.71 1218.27 L1370.13 1218.27 L1369.54 1218.27 L1368.95 1218.27 L1368.37 1218.27 L1367.78 1218.27 L1367.19 1218.27 L1366.61 1218.27 L1366.02 1218.27 L1365.43 1218.27 L1364.85 1218.27 L1364.26 1218.27 L1363.68 1218.27 L1363.09 1218.27 L1362.5 1218.27 L1361.92 1218.27 L1361.33 1218.27 L1360.74 1218.27 L1360.16 1218.27 L1359.57 1218.27 L1358.98 1218.27 L1358.4 1218.27 L1357.81 1218.27 L1357.22 1218.27 L1356.64 1218.27 L1356.05 1218.27 L1355.47 1218.27 L1354.88 1218.27 L1354.29 1218.27 L1353.71 1218.27 L1353.12 1218.27 L1352.53 1218.27 L1351.95 1218.27 L1351.36 1218.27 L1350.77 1218.27 L1350.19 1218.27 L1349.6 1218.27 L1349.01 1218.27 L1348.43 1218.27 L1347.84 1218.27 L1347.26 1218.27 L1346.67 1218.27 L1346.08 1218.27 L1345.5 1218.27 L1344.91 1218.27 L1344.32 1218.27 L1343.74 1218.27 L1343.15 1218.27 L1342.56 1218.27 L1341.98 1218.27 L1341.39 1218.27 L1340.8 1218.27 L1340.22 1218.27 L1339.63 1218.27 L1339.05 1218.27 L1338.46 1218.27 L1337.87 1218.27 L1337.29 1218.27 L1336.7 1218.27 L1336.11 1218.27 L1335.53 1218.27 L1334.94 1218.27 L1334.35 1218.27 L1333.77 1218.27 L1333.18 1218.27 L1332.6 1218.27 L1332.01 1218.27 L1331.42 1218.27 L1330.84 1218.27 L1330.25 1218.27 L1329.66 1218.27 L1329.08 1218.27 L1328.49 1218.27 L1327.9 1218.27 L1327.32 1218.27 L1326.73 1218.27 L1326.14 1218.27 L1325.56 1218.27 L1324.97 1218.27 L1324.39 1218.27 L1323.8 1218.27 L1323.21 1218.27 L1322.63 1218.27 L1322.04 1218.27 L1321.45 1218.27 L1320.87 1218.27 L1320.28 1218.27 L1319.69 1218.27 L1319.11 1218.27 L1318.52 1218.27 L1317.93 1218.27 L1317.35 1218.27 L1316.76 1218.27 L1316.18 1218.27 L1315.59 1218.27 L1315 1218.27 L1314.42 1218.27 L1313.83 1218.27 L1313.24 1218.27 L1312.66 1218.27 L1312.07 1218.27 L1311.48 1218.27 L1310.9 1218.27 L1310.31 1218.27 L1309.73 1218.27 L1309.14 1218.27 L1308.55 1218.27 L1307.97 1218.27 L1307.38 1218.27 L1306.79 1218.27 L1306.21 1218.27 L1305.62 1218.27 L1305.03 1218.27 L1304.45 1218.27 L1303.86 1218.27 L1303.27 1218.27 L1302.69 1218.27 L1302.1 1218.27 L1301.52 1218.27 L1300.93 1218.27 L1300.34 1218.27 L1299.76 1218.27 L1299.17 1218.27 L1298.58 1218.27 L1298 1218.27 L1297.41 1218.27 L1296.82 1218.27 L1296.24 1218.27 L1295.65 1218.27 L1295.06 1218.27 L1294.48 1218.27 L1293.89 1218.27 L1293.31 1218.27 L1292.72 1218.27 L1292.13 1218.27 L1291.55 1218.27 L1290.96 1218.27 L1290.37 1218.27 L1289.79 1218.27 L1289.2 1218.27 L1288.61 1218.27 L1288.03 1218.27 L1287.44 1218.27 L1286.86 1218.27 L1286.27 1218.27 L1285.68 1218.27 L1285.1 1218.27 L1284.51 1218.27 L1283.92 1218.27 L1283.34 1218.27 L1282.75 1218.27 L1282.16 1218.27 L1281.58 1218.27 L1280.99 1218.27 L1280.4 1218.27 L1279.82 1218.27 L1279.23 1218.27 L1278.65 1218.27 L1278.06 1218.27 L1277.47 1218.27 L1276.89 1218.27 L1276.3 1218.27 L1275.71 1218.27 L1275.13 1218.27 L1274.54 1218.27 L1273.95 1218.27 L1273.37 1218.27 L1272.78 1218.27 L1272.19 1218.27 L1271.61 1218.27 L1271.02 1218.27 L1270.44 1218.27 L1269.85 1218.27 L1269.26 1218.27 L1268.68 1218.27 L1268.09 1218.27 L1267.5 1218.27 L1266.92 1218.27 L1266.33 1218.27 L1265.74 1218.27 L1265.16 1218.27 L1264.57 1218.27 L1263.98 1218.27 L1263.4 1218.27 L1262.81 1218.27 L1262.23 1218.27 L1261.64 1218.27 L1261.05 1218.27 L1260.47 1218.27 L1259.88 1218.27 L1259.29 1218.27 L1258.71 1218.27 L1258.12 1218.27 L1257.53 1218.27 L1256.95 1218.27 L1256.36 1218.27 L1255.78 1218.27 L1255.19 1218.27 L1254.6 1218.27 L1254.02 1218.27 L1253.43 1218.27 L1252.84 1218.27 L1252.26 1218.27 L1251.67 1218.27 L1251.08 1218.27 L1250.5 1218.27 L1249.91 1218.27 L1249.32 1218.27 L1248.74 1218.27 L1248.15 1218.27 L1247.57 1218.27 L1246.98 1218.27 L1246.39 1218.27 L1245.81 1218.27 L1245.22 1218.27 L1244.63 1218.27 L1244.05 1218.27 L1243.46 1218.27 L1242.87 1218.27 L1242.29 1218.27 L1241.7 1218.27 L1241.11 1218.27 L1240.53 1218.27 L1239.94 1218.27 L1239.36 1218.27 L1238.77 1218.27 L1238.18 1218.27 L1237.6 1218.27 L1237.01 1218.27 L1236.42 1218.27 L1235.84 1218.27 L1235.25 1218.27 L1234.66 1218.27 L1234.08 1218.27 L1233.49 1218.27 L1232.91 1218.27 L1232.32 1218.27 L1231.73 1218.27 L1231.15 1218.27 L1230.56 1218.27 L1229.97 1218.27 L1229.39 1218.27 L1228.8 1218.27 L1228.21 1218.27 L1227.63 1218.27 L1227.04 1218.27 L1226.45 1218.27 L1225.87 1218.27 L1225.28 1218.27 L1224.7 1218.27 L1224.11 1218.27 L1223.52 1218.27 L1222.94 1218.27 L1222.35 1218.27 L1221.76 1218.27 L1221.18 1218.27 L1220.59 1218.27 L1220 1218.27 L1219.42 1218.27 L1218.83 1218.27 L1218.24 1218.27 L1217.66 1218.27 L1217.07 1218.27 L1216.49 1218.27 L1215.9 1218.27 L1215.31 1218.27 L1214.73 1218.27 L1214.14 1218.27 L1213.55 1218.27 L1212.97 1218.27 L1212.38 1218.27 L1211.79 1218.27 L1211.21 1218.27 L1210.62 1218.27 L1210.03 1218.27 L1209.45 1218.27 L1208.86 1218.27 L1208.28 1218.27 L1207.69 1218.27 L1207.1 1218.27 L1206.52 1218.27 L1205.93 1218.27 L1205.34 1218.27 L1204.76 1218.27 L1204.17 1218.27 L1203.58 1218.27 L1203 1218.27 L1202.41 1218.27 L1201.83 1218.27 L1201.24 1218.27 L1200.65 1218.27 L1200.07 1218.27 L1199.48 1218.27 L1198.89 1218.27 L1198.31 1218.27 L1197.72 1218.27 L1197.13 1218.27 L1196.55 1218.27 L1195.96 1218.27 L1195.37 1218.27 L1194.79 1218.27 L1194.2 1218.27 L1193.62 1218.27 L1193.03 1218.27 L1192.44 1218.27 L1191.86 1218.27 L1191.27 1218.27 L1190.68 1218.27 L1190.1 1218.27 L1189.51 1218.27 L1188.92 1218.27 L1188.34 1218.27 L1187.75 1218.27 L1187.16 1218.27 L1186.58 1218.27 L1185.99 1218.27 L1185.41 1218.27 L1184.82 1218.27 L1184.23 1218.27 L1183.65 1218.27 L1183.06 1218.27 L1182.47 1218.27 L1181.89 1218.27 L1181.3 1218.27 L1180.71 1218.27 L1180.13 1218.27 L1179.54 1218.27 L1178.96 1218.27 L1178.37 1218.27 L1177.78 1218.27 L1177.2 1218.27 L1176.61 1218.27 L1176.02 1218.27 L1175.44 1218.27 L1174.85 1218.27 L1174.26 1218.27 L1173.68 1218.27 L1173.09 1218.27 L1172.5 1218.27 L1171.92 1218.27 L1171.33 1218.27 L1170.75 1218.27 L1170.16 1218.27 L1169.57 1218.27 L1168.99 1218.27 L1168.4 1218.27 L1167.81 1218.27 L1167.23 1218.27 L1166.64 1218.27 L1166.05 1218.27 L1165.47 1218.27 L1164.88 1218.27 L1164.29 1218.27 L1163.71 1218.27 L1163.12 1218.27 L1162.54 1218.27 L1161.95 1218.27 L1161.36 1218.27 L1160.78 1218.27 L1160.19 1218.27 L1159.6 1218.27 L1159.02 1218.27 L1158.43 1218.27 L1157.84 1218.27 L1157.26 1218.27 L1156.67 1218.27 L1156.09 1218.27 L1155.5 1218.27 L1154.91 1218.27 L1154.33 1218.27 L1153.74 1218.27 L1153.15 1218.27 L1152.57 1218.27 L1151.98 1218.27 L1151.39 1218.27 L1150.81 1218.27 L1150.22 1218.27 L1149.63 1218.27 L1149.05 1218.27 L1148.46 1218.27 L1147.88 1218.27 L1147.29 1218.27 L1146.7 1218.27 L1146.12 1218.27 L1145.53 1218.27 L1144.94 1218.27 L1144.36 1218.27 L1143.77 1218.27 L1143.18 1218.27 L1142.6 1218.27 L1142.01 1218.27 L1141.42 1218.27 L1140.84 1218.27 L1140.25 1218.27 L1139.67 1218.27 L1139.08 1218.27 L1138.49 1218.27 L1137.91 1218.27 L1137.32 1218.27 L1136.73 1218.27 L1136.15 1218.27 L1135.56 1218.27 L1134.97 1218.27 L1134.39 1218.27 L1133.8 1218.27 L1133.21 1218.27 L1132.63 1218.27 L1132.04 1218.27 L1131.46 1218.27 L1130.87 1218.27 L1130.28 1218.27 L1129.7 1218.27 L1129.11 1218.27 L1128.52 1218.27 L1127.94 1218.27 L1127.35 1218.27 L1126.76 1218.27 L1126.18 1218.27 L1125.59 1218.27 L1125.01 1218.27 L1124.42 1218.27 L1123.83 1218.27 L1123.25 1218.27 L1122.66 1218.27 L1122.07 1218.27 L1121.49 1218.27 L1120.9 1218.27 L1120.31 1218.27 L1119.73 1218.27 L1119.14 1218.27 L1118.55 1218.27 L1117.97 1218.27 L1117.38 1218.27 L1116.8 1218.27 L1116.21 1218.27 L1115.62 1218.27 L1115.04 1218.27 L1114.45 1218.27 L1113.86 1218.27 L1113.28 1218.27 L1112.69 1218.27 L1112.1 1218.27 L1111.52 1218.27 L1110.93 1218.27 L1110.34 1218.27 L1109.76 1218.27 L1109.17 1218.27 L1108.59 1218.27 L1108 1218.27 L1107.41 1218.27 L1106.83 1218.27 L1106.24 1218.27 L1105.65 1218.27 L1105.07 1218.27 L1104.48 1218.27 L1103.89 1218.27 L1103.31 1218.27 L1102.72 1218.27 L1102.14 1218.27 L1101.55 1218.27 L1100.96 1218.27 L1100.38 1218.27 L1099.79 1218.27 L1099.2 1218.27 L1098.62 1218.27 L1098.03 1218.27 L1097.44 1218.27 L1096.86 1218.27 L1096.27 1218.27 L1095.68 1218.27 L1095.1 1218.27 L1094.51 1218.27 L1093.93 1218.27 L1093.34 1218.27 L1092.75 1218.27 L1092.17 1218.27 L1091.58 1218.27 L1090.99 1218.27 L1090.41 1218.27 L1089.82 1218.27 L1089.23 1218.27 L1088.65 1218.27 L1088.06 1218.27 L1087.47 1218.27 L1086.89 1218.27 L1086.3 1218.27 L1085.72 1218.27 L1085.13 1218.27 L1084.54 1218.27 L1083.96 1218.27 L1083.37 1218.27 L1082.78 1218.27 L1082.2 1218.27 L1081.61 1218.27 L1081.02 1218.27 L1080.44 1218.27 L1079.85 1218.27 L1079.26 1218.27 L1078.68 1218.27 L1078.09 1218.27 L1077.51 1218.27 L1076.92 1218.27 L1076.33 1218.27 L1075.75 1218.27 L1075.16 1218.27 L1074.57 1218.27 L1073.99 1218.27 L1073.4 1218.27 L1072.81 1218.27 L1072.23 1218.27 L1071.64 1218.27 L1071.06 1218.27 L1070.47 1218.27 L1069.88 1218.27 L1069.3 1218.27 L1068.71 1218.27 L1068.12 1218.27 L1067.54 1218.27 L1066.95 1218.27 L1066.36 1218.27 L1065.78 1218.27 L1065.19 1218.27 L1064.6 1218.27 L1064.02 1218.27 L1063.43 1218.27 L1062.85 1218.27 L1062.26 1218.27 L1061.67 1218.27 L1061.09 1218.27 L1060.5 1218.27 L1059.91 1218.27 L1059.33 1218.27 L1058.74 1218.27 L1058.15 1218.27 L1057.57 1218.27 L1056.98 1218.27 L1056.39 1218.27 L1055.81 1218.27 L1055.22 1218.27 L1054.64 1218.27 L1054.05 1218.27 L1053.46 1218.27 L1052.88 1218.27 L1052.29 1218.27 L1051.7 1218.27 L1051.12 1218.27 L1050.53 1218.27 L1049.94 1218.27 L1049.36 1218.27 L1048.77 1218.27 L1048.19 1218.27 L1047.6 1218.27 L1047.01 1218.27 L1046.43 1218.27 L1045.84 1218.27 L1045.25 1218.27 L1044.67 1218.27 L1044.08 1218.27 L1043.49 1218.27 L1042.91 1218.27 L1042.32 1218.27 L1041.73 1218.27 L1041.15 1218.27 L1040.56 1218.27 L1039.98 1218.27 L1039.39 1218.27 L1038.8 1218.27 L1038.22 1218.27 L1037.63 1218.27 L1037.04 1218.27 L1036.46 1218.27 L1035.87 1218.27 L1035.28 1218.27 L1034.7 1218.27 L1034.11 1218.27 L1033.52 1218.27 L1032.94 1218.27 L1032.35 1218.27 L1031.77 1218.27 L1031.18 1218.27 L1030.59 1218.27 L1030.01 1218.27 L1029.42 1218.27 L1028.83 1218.27 L1028.25 1218.27 L1027.66 1218.27 L1027.07 1218.27 L1026.49 1218.27 L1025.9 1218.27 L1025.32 1218.27 L1024.73 1218.27 L1024.14 1218.27 L1023.56 1218.27 L1022.97 1218.27 L1022.38 1218.27 L1021.8 1218.27 L1021.21 1218.27 L1020.62 1218.27 L1020.04 1218.27 L1019.45 1218.27 L1018.86 1218.27 L1018.28 1218.27 L1017.69 1218.27 L1017.11 1218.27 L1016.52 1218.27 L1015.93 1218.27 L1015.35 1218.27 L1014.76 1218.27 L1014.17 1218.27 L1013.59 1218.27 L1013 1218.27 L1012.41 1218.27 L1011.83 1218.27 L1011.24 1218.27 L1010.65 1218.27 L1010.07 1218.27 L1009.48 1218.27 L1008.9 1218.27 L1008.31 1218.27 L1007.72 1218.27 L1007.14 1218.27 L1006.55 1218.27 L1005.96 1218.27 L1005.38 1218.27 L1004.79 1218.27 L1004.2 1218.27 L1003.62 1218.27 L1003.03 1218.27 L1002.44 1218.27 L1001.86 1218.27 L1001.27 1218.27 L1000.69 1218.27 L1000.1 1218.27 L999.513 1218.27 L998.926 1218.27 L998.34 1218.27 L997.754 1218.27 L997.167 1218.27 L996.581 1218.27 L995.994 1218.27 L995.408 1218.27 L994.822 1218.27 L994.235 1218.27 L993.649 1218.27 L993.062 1218.27 L992.476 1218.27 L991.889 1218.27 L991.303 1218.27 L990.717 1218.27 L990.13 1218.27 L989.544 1218.27 L988.957 1218.27 L988.371 1218.27 L987.785 1218.27 L987.198 1218.27 L986.612 1218.27 L986.025 1218.27  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.63 986.612,1218.63 987.198,1218.63 987.785,1218.63 988.371,1218.63 988.957,1218.63 989.544,1218.63 990.13,1218.63 990.717,1218.63 991.303,1218.63 991.889,1218.63 992.476,1218.63 993.062,1218.63 993.649,1218.63 994.235,1218.63 994.822,1218.63 995.408,1218.63 995.994,1218.63 996.581,1218.63 997.167,1218.63 997.754,1218.63 998.34,1218.63 998.926,1218.63 999.513,1218.63 1000.1,1218.63 1000.69,1218.63 1001.27,1218.63 1001.86,1218.63 1002.44,1218.63 1003.03,1218.63 1003.62,1218.63 1004.2,1218.63 1004.79,1218.63 1005.38,1218.63 1005.96,1218.63 1006.55,1218.63 1007.14,1218.63 1007.72,1218.63 1008.31,1218.63 1008.9,1218.63 1009.48,1218.63 1010.07,1218.63 1010.65,1218.63 1011.24,1218.63 1011.83,1218.63 1012.41,1218.63 1013,1218.63 1013.59,1218.63 1014.17,1218.63 1014.76,1218.63 1015.35,1218.63 1015.93,1218.63 1016.52,1218.63 1017.11,1218.63 1017.69,1218.63 1018.28,1218.63 1018.86,1218.63 1019.45,1218.63 1020.04,1218.63 1020.62,1218.63 1021.21,1218.63 1021.8,1218.63 1022.38,1218.63 1022.97,1218.63 1023.56,1218.63 1024.14,1218.63 1024.73,1218.63 1025.32,1218.63 1025.9,1218.63 1026.49,1218.63 1027.07,1218.63 1027.66,1218.63 1028.25,1218.63 1028.83,1218.63 1029.42,1218.63 1030.01,1218.63 1030.59,1218.63 1031.18,1218.63 1031.77,1218.63 1032.35,1218.63 1032.94,1218.63 1033.52,1218.63 1034.11,1218.63 1034.7,1218.63 1035.28,1218.63 1035.87,1218.63 1036.46,1218.63 1037.04,1218.63 1037.63,1218.63 1038.22,1218.63 1038.8,1218.63 1039.39,1218.63 1039.98,1218.63 1040.56,1218.63 1041.15,1218.63 1041.73,1218.63 1042.32,1218.63 1042.91,1218.63 1043.49,1218.63 1044.08,1218.63 1044.67,1218.63 1045.25,1218.63 1045.84,1218.63 1046.43,1218.63 1047.01,1218.63 1047.6,1218.63 1048.19,1218.63 1048.77,1218.63 1049.36,1218.63 1049.94,1218.63 1050.53,1218.63 1051.12,1218.63 1051.7,1218.63 1052.29,1218.63 1052.88,1218.63 1053.46,1218.63 1054.05,1218.63 1054.64,1218.63 1055.22,1218.63 1055.81,1218.63 1056.39,1218.63 1056.98,1218.63 1057.57,1218.63 1058.15,1218.63 1058.74,1218.63 1059.33,1218.63 1059.91,1218.63 1060.5,1218.63 1061.09,1218.63 1061.67,1218.63 1062.26,1218.63 1062.85,1218.63 1063.43,1218.63 1064.02,1218.63 1064.6,1218.63 1065.19,1218.63 1065.78,1218.63 1066.36,1218.63 1066.95,1218.63 1067.54,1218.63 1068.12,1218.63 1068.71,1218.63 1069.3,1218.63 1069.88,1218.63 1070.47,1218.63 1071.06,1218.63 1071.64,1218.63 1072.23,1218.63 1072.81,1218.63 1073.4,1218.63 1073.99,1218.63 1074.57,1218.63 1075.16,1218.63 1075.75,1218.63 1076.33,1218.63 1076.92,1218.63 1077.51,1218.63 1078.09,1218.63 1078.68,1218.63 1079.26,1218.63 1079.85,1218.63 1080.44,1218.63 1081.02,1218.63 1081.61,1218.63 1082.2,1218.63 1082.78,1218.63 1083.37,1218.63 1083.96,1218.63 1084.54,1218.63 1085.13,1218.63 1085.72,1218.63 1086.3,1218.63 1086.89,1218.63 1087.47,1218.63 1088.06,1218.63 1088.65,1218.63 1089.23,1218.63 1089.82,1218.63 1090.41,1218.63 1090.99,1218.63 1091.58,1218.63 1092.17,1218.63 1092.75,1218.63 1093.34,1218.63 1093.93,1218.63 1094.51,1218.63 1095.1,1218.63 1095.68,1218.63 1096.27,1218.63 1096.86,1218.63 1097.44,1218.63 1098.03,1218.63 1098.62,1218.63 1099.2,1218.63 1099.79,1218.63 1100.38,1218.63 1100.96,1218.63 1101.55,1218.63 1102.14,1218.63 1102.72,1218.63 1103.31,1218.63 1103.89,1218.63 1104.48,1218.63 1105.07,1218.63 1105.65,1218.63 1106.24,1218.63 1106.83,1218.63 1107.41,1218.63 1108,1218.63 1108.59,1218.63 1109.17,1218.63 1109.76,1218.63 1110.34,1218.63 1110.93,1218.63 1111.52,1218.63 1112.1,1218.63 1112.69,1218.63 1113.28,1218.63 1113.86,1218.63 1114.45,1218.63 1115.04,1218.63 1115.62,1218.63 1116.21,1218.63 1116.8,1218.63 1117.38,1218.63 1117.97,1218.63 1118.55,1218.63 1119.14,1218.63 1119.73,1218.63 1120.31,1218.63 1120.9,1218.63 1121.49,1218.63 1122.07,1218.63 1122.66,1218.63 1123.25,1218.63 1123.83,1218.63 1124.42,1218.63 1125.01,1218.63 1125.59,1218.63 1126.18,1218.63 1126.76,1218.63 1127.35,1218.63 1127.94,1218.63 1128.52,1218.63 1129.11,1218.63 1129.7,1218.63 1130.28,1218.63 1130.87,1218.63 1131.46,1218.63 1132.04,1218.63 1132.63,1218.63 1133.21,1218.63 1133.8,1218.63 1134.39,1218.63 1134.97,1218.63 1135.56,1218.63 1136.15,1218.63 1136.73,1218.63 1137.32,1218.63 1137.91,1218.63 1138.49,1218.63 1139.08,1218.63 1139.67,1218.63 1140.25,1218.63 1140.84,1218.63 1141.42,1218.63 1142.01,1218.63 1142.6,1218.63 1143.18,1218.63 1143.77,1218.63 1144.36,1218.63 1144.94,1218.63 1145.53,1218.63 1146.12,1218.63 1146.7,1218.63 1147.29,1218.63 1147.88,1218.63 1148.46,1218.63 1149.05,1218.63 1149.63,1218.63 1150.22,1218.63 1150.81,1218.63 1151.39,1218.63 1151.98,1218.63 1152.57,1218.63 1153.15,1218.63 1153.74,1218.63 1154.33,1218.63 1154.91,1218.63 1155.5,1218.63 1156.09,1218.63 1156.67,1218.63 1157.26,1218.63 1157.84,1218.63 1158.43,1218.63 1159.02,1218.63 1159.6,1218.63 1160.19,1218.63 1160.78,1218.63 1161.36,1218.63 1161.95,1218.63 1162.54,1218.63 1163.12,1218.63 1163.71,1218.63 1164.29,1218.63 1164.88,1218.63 1165.47,1218.63 1166.05,1218.63 1166.64,1218.63 1167.23,1218.63 1167.81,1218.63 1168.4,1218.63 1168.99,1218.63 1169.57,1218.63 1170.16,1218.63 1170.75,1218.63 1171.33,1218.63 1171.92,1218.63 1172.5,1218.63 1173.09,1218.63 1173.68,1218.63 1174.26,1218.63 1174.85,1218.63 1175.44,1218.63 1176.02,1218.63 1176.61,1218.63 1177.2,1218.63 1177.78,1218.63 1178.37,1218.63 1178.96,1218.63 1179.54,1218.63 1180.13,1218.63 1180.71,1218.63 1181.3,1218.63 1181.89,1218.63 1182.47,1218.63 1183.06,1218.63 1183.65,1218.63 1184.23,1218.63 1184.82,1218.63 1185.41,1218.63 1185.99,1218.63 1186.58,1218.63 1187.16,1218.63 1187.75,1218.63 1188.34,1218.63 1188.92,1218.63 1189.51,1218.63 1190.1,1218.63 1190.68,1218.63 1191.27,1218.63 1191.86,1218.63 1192.44,1218.63 1193.03,1218.63 1193.62,1218.63 1194.2,1218.63 1194.79,1218.63 1195.37,1218.63 1195.96,1218.63 1196.55,1218.63 1197.13,1218.63 1197.72,1218.63 1198.31,1218.63 1198.89,1218.63 1199.48,1218.63 1200.07,1218.63 1200.65,1218.63 1201.24,1218.63 1201.83,1218.63 1202.41,1218.63 1203,1218.63 1203.58,1218.63 1204.17,1218.63 1204.76,1218.63 1205.34,1218.63 1205.93,1218.63 1206.52,1218.63 1207.1,1218.63 1207.69,1218.63 1208.28,1218.63 1208.86,1218.63 1209.45,1218.63 1210.03,1218.63 1210.62,1218.63 1211.21,1218.63 1211.79,1218.63 1212.38,1218.63 1212.97,1218.63 1213.55,1218.63 1214.14,1218.63 1214.73,1218.63 1215.31,1218.63 1215.9,1218.63 1216.49,1218.63 1217.07,1218.63 1217.66,1218.63 1218.24,1218.63 1218.83,1218.63 1219.42,1218.63 1220,1218.63 1220.59,1218.63 1221.18,1218.63 1221.76,1218.63 1222.35,1218.63 1222.94,1218.63 1223.52,1218.63 1224.11,1218.63 1224.7,1218.63 1225.28,1218.63 1225.87,1218.63 1226.45,1218.63 1227.04,1218.63 1227.63,1218.63 1228.21,1218.63 1228.8,1218.63 1229.39,1218.63 1229.97,1218.63 1230.56,1218.63 1231.15,1218.63 1231.73,1218.63 1232.32,1218.63 1232.91,1218.63 1233.49,1218.63 1234.08,1218.63 1234.66,1218.63 1235.25,1218.63 1235.84,1218.63 1236.42,1218.63 1237.01,1218.63 1237.6,1218.63 1238.18,1218.63 1238.77,1218.63 1239.36,1218.63 1239.94,1218.63 1240.53,1218.63 1241.11,1218.63 1241.7,1218.63 1242.29,1218.63 1242.87,1218.63 1243.46,1218.63 1244.05,1218.63 1244.63,1218.63 1245.22,1218.63 1245.81,1218.63 1246.39,1218.63 1246.98,1218.63 1247.57,1218.63 1248.15,1218.63 1248.74,1218.63 1249.32,1218.63 1249.91,1218.63 1250.5,1218.63 1251.08,1218.63 1251.67,1218.63 1252.26,1218.63 1252.84,1218.63 1253.43,1218.63 1254.02,1218.63 1254.6,1218.63 1255.19,1218.63 1255.78,1218.63 1256.36,1218.63 1256.95,1218.63 1257.53,1218.63 1258.12,1218.63 1258.71,1218.63 1259.29,1218.63 1259.88,1218.63 1260.47,1218.63 1261.05,1218.63 1261.64,1218.63 1262.23,1218.63 1262.81,1218.63 1263.4,1218.63 1263.98,1218.63 1264.57,1218.63 1265.16,1218.63 1265.74,1218.63 1266.33,1218.63 1266.92,1218.63 1267.5,1218.63 1268.09,1218.63 1268.68,1218.63 1269.26,1218.63 1269.85,1218.63 1270.44,1218.63 1271.02,1218.63 1271.61,1218.63 1272.19,1218.63 1272.78,1218.63 1273.37,1218.63 1273.95,1218.63 1274.54,1218.63 1275.13,1218.63 1275.71,1218.63 1276.3,1218.63 1276.89,1218.63 1277.47,1218.63 1278.06,1218.63 1278.65,1218.63 1279.23,1218.63 1279.82,1218.63 1280.4,1218.63 1280.99,1218.63 1281.58,1218.63 1282.16,1218.63 1282.75,1218.63 1283.34,1218.63 1283.92,1218.63 1284.51,1218.63 1285.1,1218.63 1285.68,1218.63 1286.27,1218.63 1286.86,1218.63 1287.44,1218.63 1288.03,1218.63 1288.61,1218.63 1289.2,1218.63 1289.79,1218.63 1290.37,1218.63 1290.96,1218.63 1291.55,1218.63 1292.13,1218.63 1292.72,1218.63 1293.31,1218.63 1293.89,1218.63 1294.48,1218.63 1295.06,1218.63 1295.65,1218.63 1296.24,1218.63 1296.82,1218.63 1297.41,1218.63 1298,1218.63 1298.58,1218.63 1299.17,1218.63 1299.76,1218.63 1300.34,1218.63 1300.93,1218.63 1301.52,1218.63 1302.1,1218.63 1302.69,1218.63 1303.27,1218.63 1303.86,1218.63 1304.45,1218.63 1305.03,1218.63 1305.62,1218.63 1306.21,1218.63 1306.79,1218.63 1307.38,1218.63 1307.97,1218.63 1308.55,1218.63 1309.14,1218.63 1309.73,1218.63 1310.31,1218.63 1310.9,1218.63 1311.48,1218.63 1312.07,1218.63 1312.66,1218.63 1313.24,1218.63 1313.83,1218.63 1314.42,1218.63 1315,1218.63 1315.59,1218.63 1316.18,1218.63 1316.76,1218.63 1317.35,1218.63 1317.93,1218.63 1318.52,1218.63 1319.11,1218.63 1319.69,1218.63 1320.28,1218.63 1320.87,1218.63 1321.45,1218.63 1322.04,1218.63 1322.63,1218.63 1323.21,1218.63 1323.8,1218.63 1324.39,1218.63 1324.97,1218.63 1325.56,1218.63 1326.14,1218.63 1326.73,1218.63 1327.32,1218.63 1327.9,1218.63 1328.49,1218.63 1329.08,1218.63 1329.66,1218.63 1330.25,1218.63 1330.84,1218.63 1331.42,1218.63 1332.01,1218.63 1332.6,1218.63 1333.18,1218.63 1333.77,1218.63 1334.35,1218.63 1334.94,1218.63 1335.53,1218.63 1336.11,1218.63 1336.7,1218.63 1337.29,1218.63 1337.87,1218.63 1338.46,1218.63 1339.05,1218.63 1339.63,1218.63 1340.22,1218.63 1340.8,1218.63 1341.39,1218.63 1341.98,1218.63 1342.56,1218.63 1343.15,1218.63 1343.74,1218.63 1344.32,1218.63 1344.91,1218.63 1345.5,1218.63 1346.08,1218.63 1346.67,1218.63 1347.26,1218.63 1347.84,1218.63 1348.43,1218.63 1349.01,1218.63 1349.6,1218.63 1350.19,1218.63 1350.77,1218.63 1351.36,1218.63 1351.95,1218.63 1352.53,1218.63 1353.12,1218.63 1353.71,1218.63 1354.29,1218.63 1354.88,1218.63 1355.47,1218.63 1356.05,1218.63 1356.64,1218.63 1357.22,1218.63 1357.81,1218.63 1358.4,1218.63 1358.98,1218.63 1359.57,1218.63 1360.16,1218.63 1360.74,1218.63 1361.33,1218.63 1361.92,1218.63 1362.5,1218.63 1363.09,1218.63 1363.68,1218.63 1364.26,1218.63 1364.85,1218.63 1365.43,1218.63 1366.02,1218.63 1366.61,1218.63 1367.19,1218.63 1367.78,1218.63 1368.37,1218.63 1368.95,1218.63 1369.54,1218.63 1370.13,1218.63 1370.71,1218.63 1371.3,1218.63 1371.88,1218.63 1372.47,1218.63 1373.06,1218.63 1373.64,1218.63 1374.23,1218.63 1374.82,1218.63 1375.4,1218.63 1375.99,1218.63 1376.58,1218.63 1377.16,1218.63 1377.75,1218.63 1378.34,1218.63 1378.92,1218.63 1379.51,1218.63 1380.09,1218.63 1380.68,1218.63 1381.27,1218.63 1381.85,1218.63 1382.44,1218.63 1383.03,1218.63 1383.61,1218.63 1384.2,1218.63 1384.79,1218.63 1385.37,1218.63 1385.96,1218.63 1386.55,1218.63 1387.13,1218.63 1387.72,1218.63 1388.3,1218.63 1388.89,1218.63 1389.48,1218.63 1390.06,1218.63 1390.65,1218.63 1391.24,1218.63 1391.82,1218.63 1392.41,1218.63 1393,1218.63 1393.58,1218.63 1394.17,1218.63 1394.75,1218.63 1395.34,1218.63 1395.93,1218.63 1396.51,1218.63 1397.1,1218.63 1397.69,1218.63 1398.27,1218.63 1398.86,1218.63 1399.45,1218.63 1400.03,1218.63 1400.62,1218.63 1401.21,1218.63 1401.79,1218.63 1402.38,1218.63 1402.96,1218.63 1403.55,1218.63 1404.14,1218.63 1404.72,1218.63 1405.31,1218.63 1405.9,1218.63 1406.48,1218.63 1407.07,1218.63 1407.66,1218.63 1408.24,1218.63 1408.83,1218.63 1409.42,1218.63 1410,1218.63 1410.59,1218.63 1411.17,1218.63 1411.76,1218.63 1412.35,1218.63 1412.93,1218.63 1413.52,1218.63 1414.11,1218.63 1414.69,1218.63 1415.28,1218.63 1415.87,1218.63 1416.45,1218.63 1417.04,1218.63 1417.63,1218.63 1418.21,1218.63 1418.8,1218.63 1419.38,1218.63 1419.97,1218.63 1420.56,1218.63 1421.14,1218.63 1421.73,1218.63 1422.32,1218.63 1422.9,1218.63 1423.49,1218.63 1424.08,1218.63 1424.66,1218.63 1425.25,1218.63 1425.83,1218.63 1426.42,1218.63 1427.01,1218.63 1427.59,1218.63 1428.18,1218.63 1428.77,1218.63 1429.35,1218.63 1429.94,1218.63 1430.53,1218.63 1431.11,1218.63 1431.7,1218.63 1432.29,1218.63 1432.87,1218.63 1433.46,1218.63 1434.04,1218.63 1434.63,1218.63 1435.22,1218.63 1435.8,1218.63 1436.39,1218.63 1436.98,1218.63 1437.56,1218.63 1438.15,1218.63 1438.74,1218.63 1439.32,1218.63 1439.91,1218.63 1440.5,1218.63 1441.08,1218.63 1441.67,1218.63 1442.25,1218.63 1442.84,1218.63 1443.43,1218.63 1444.01,1218.63 1444.6,1218.63 1445.19,1218.63 1445.77,1218.63 1446.36,1218.63 1446.95,1218.63 1447.53,1218.63 1448.12,1218.63 1448.7,1218.63 1449.29,1218.63 1449.88,1218.63 1450.46,1218.63 1451.05,1218.63 1451.64,1218.63 1452.22,1218.63 1452.81,1218.63 1453.4,1218.63 1453.98,1218.63 1454.57,1218.63 1455.16,1218.63 1455.74,1218.63 1456.33,1218.63 1456.91,1218.63 1457.5,1218.63 1458.09,1218.63 1458.67,1218.63 1459.26,1218.63 1459.85,1218.63 1460.43,1218.63 1461.02,1218.63 1461.61,1218.63 1462.19,1218.63 1462.78,1218.63 1463.37,1218.63 1463.95,1218.63 1464.54,1218.63 1465.12,1218.63 1465.71,1218.63 1466.3,1218.63 1466.88,1218.63 1467.47,1218.63 1468.06,1218.63 1468.64,1218.63 1469.23,1218.63 1469.82,1218.63 1470.4,1218.63 1470.99,1218.63 1471.57,1218.63 1472.16,1218.63 1472.75,1218.63 1473.33,1218.63 1473.92,1218.63 1474.51,1218.63 1475.09,1218.63 1475.68,1218.63 1476.27,1218.63 1476.85,1218.63 1477.44,1218.63 1478.03,1218.63 1478.61,1218.63 1479.2,1218.63 1479.78,1218.63 1480.37,1218.63 1480.96,1218.63 1481.54,1218.63 1482.13,1218.63 1482.72,1218.63 1483.3,1218.63 1483.89,1218.63 1484.48,1218.63 1485.06,1218.63 1485.65,1218.63 1486.24,1218.63 1486.82,1218.63 1487.41,1218.63 1487.99,1218.63 1488.58,1218.63 1489.17,1218.63 1489.75,1218.63 1490.34,1218.63 1490.93,1218.63 1491.51,1218.63 1492.1,1218.63 1492.69,1218.63 1493.27,1218.63 1493.86,1218.63 1494.45,1218.63 1495.03,1218.63 1495.62,1218.63 1496.2,1218.63 1496.79,1218.63 1497.38,1218.63 1497.96,1218.63 1498.55,1218.63 1499.14,1218.63 1499.72,1218.63 1500.31,1218.63 1500.9,1218.63 1501.48,1218.63 1502.07,1218.63 1502.65,1218.63 1503.24,1218.63 1503.83,1218.63 1504.41,1218.63 1505,1218.63 1505.59,1218.63 1506.17,1218.63 1506.76,1218.63 1507.35,1218.63 1507.93,1218.63 1508.52,1218.63 1509.11,1218.63 1509.69,1218.63 1510.28,1218.63 1510.86,1218.63 1511.45,1218.63 1512.04,1218.63 1512.62,1218.63 1513.21,1218.63 1513.8,1218.63 1514.38,1218.63 1514.97,1218.63 1515.56,1218.63 1516.14,1218.63 1516.73,1218.63 1517.32,1218.63 1517.9,1218.63 1518.49,1218.63 1519.07,1218.63 1519.66,1218.63 1520.25,1218.63 1520.83,1218.63 1521.42,1218.63 1522.01,1218.63 1522.59,1218.63 1523.18,1218.63 1523.77,1218.63 1524.35,1218.63 1524.94,1218.63 1525.52,1218.63 1526.11,1218.63 1526.7,1218.63 1527.28,1218.63 1527.87,1218.63 1528.46,1218.63 1529.04,1218.63 1529.63,1218.63 1530.22,1218.63 1530.8,1218.63 1531.39,1218.63 1531.98,1218.63 1532.56,1218.63 1533.15,1218.63 1533.73,1218.63 1534.32,1218.63 1534.91,1218.63 1535.49,1218.63 1536.08,1218.63 1536.67,1218.63 1537.25,1218.63 1537.84,1218.63 1538.43,1218.63 1539.01,1218.63 1539.6,1218.63 1540.19,1218.63 1540.77,1218.63 1541.36,1218.63 1541.94,1218.63 1542.53,1218.63 1543.12,1218.63 1543.7,1218.63 1544.29,1218.63 1544.88,1218.63 1545.46,1218.63 1546.05,1218.63 1546.64,1218.63 1547.22,1218.63 1547.81,1218.63 1548.4,1218.63 1548.98,1218.63 1549.57,1218.63 1550.15,1218.63 1550.74,1218.63 1551.33,1218.63 1551.91,1218.63 1552.5,1218.63 1553.09,1218.63 1553.67,1218.63 1554.26,1218.63 1554.85,1218.63 1555.43,1218.63 1556.02,1218.63 1556.6,1218.63 1557.19,1218.63 1557.78,1218.63 1558.36,1218.63 1558.95,1218.63 1559.54,1218.63 1560.12,1218.63 1560.71,1218.63 1561.3,1218.63 1561.88,1218.63 1562.47,1218.63 1563.06,1218.63 1563.64,1218.63 1564.23,1218.63 1564.81,1218.63 1565.4,1218.63 1565.99,1218.63 1566.57,1218.63 1567.16,1218.63 1567.75,1218.63 1568.33,1218.63 1568.92,1218.63 1569.51,1218.63 1570.09,1218.63 1570.68,1218.63 1571.27,1218.63 1571.85,1218.63 1572.44,1218.63 1573.02,1218.63 1573.61,1218.63 1574.2,1218.63 1574.78,1218.63 1575.37,1218.63 1575.96,1218.63 1576.54,1218.63 1577.13,1218.63 1577.72,1218.63 1578.3,1218.63 1578.89,1218.63 1579.47,1218.63 1580.06,1218.63 1580.65,1218.63 1581.23,1218.63 1581.82,1218.63 1582.41,1218.63 1582.99,1218.63 1583.58,1218.63 1584.17,1218.63 1584.75,1218.63 1585.34,1218.63 1585.93,1218.63 1586.51,1218.63 1587.1,1218.63 1587.68,1218.63 1588.27,1218.63 1588.86,1218.63 1589.44,1218.63 1590.03,1218.63 1590.62,1218.63 1591.2,1218.63 1591.79,1218.63 1592.38,1218.63 1592.96,1218.63 1593.55,1218.63 1594.14,1218.63 1594.72,1218.63 1595.31,1218.63 1595.89,1218.63 1596.48,1218.63 1597.07,1218.63 1597.65,1218.63 1598.24,1218.63 1598.83,1218.63 1599.41,1218.63 1600,1218.63 1600.59,1218.63 1601.17,1218.63 1601.76,1218.63 1602.34,1218.63 1602.93,1218.63 1603.52,1218.63 1604.1,1218.63 1604.69,1218.63 1605.28,1218.63 1605.86,1218.63 1606.45,1218.63 1607.04,1218.63 1607.62,1218.63 1608.21,1218.63 1608.8,1218.63 1609.38,1218.63 1609.97,1218.63 1610.55,1218.63 1611.14,1218.63 1611.73,1218.63 1612.31,1218.63 1612.9,1218.63 1613.49,1218.63 1614.07,1218.63 1614.66,1218.63 1615.25,1218.63 1615.83,1218.63 1616.42,1218.63 1617.01,1218.63 1617.59,1218.63 1618.18,1218.63 1618.76,1218.63 1619.35,1218.63 1619.94,1218.63 1620.52,1218.63 1621.11,1218.63 1621.7,1218.63 1622.28,1218.63 1622.87,1218.63 1623.46,1218.63 1624.04,1218.63 1624.63,1218.63 1625.22,1218.63 1625.8,1218.63 1626.39,1218.63 1626.97,1218.63 1627.56,1218.63 1628.15,1218.63 1628.73,1218.63 1629.32,1218.63 1629.91,1218.63 1630.49,1218.63 1631.08,1218.63 1631.67,1218.63 1632.25,1218.63 1632.84,1218.63 1633.42,1218.63 1634.01,1218.63 1634.6,1218.63 1635.18,1218.63 1635.77,1218.63 1636.36,1218.63 1636.94,1218.63 1637.53,1218.63 1638.12,1218.63 1638.7,1218.63 1639.29,1218.63 1639.88,1218.63 1640.46,1218.63 1641.05,1218.63 1641.63,1218.63 1642.22,1218.63 1642.81,1218.63 1643.39,1218.63 1643.98,1218.63 1644.57,1218.63 1645.15,1218.63 1645.74,1218.63 1646.33,1218.63 1646.91,1218.63 1647.5,1218.63 1648.09,1218.63 1648.67,1218.63 1649.26,1218.63 1649.84,1218.63 1650.43,1218.63 1651.02,1218.63 1651.6,1218.63 1652.19,1218.63 1652.78,1218.63 1653.36,1218.63 1653.95,1218.63 1654.54,1218.63 1655.12,1218.63 1655.71,1218.63 1656.29,1218.63 1656.88,1218.63 1657.47,1218.63 1658.05,1218.63 1658.64,1218.63 1659.23,1218.63 1659.81,1218.63 1660.4,1218.63 1660.99,1218.63 1661.57,1218.63 1662.16,1218.63 1662.75,1218.63 1663.33,1218.63 1663.92,1218.63 1664.5,1218.63 1665.09,1218.63 1665.68,1218.63 1666.26,1218.63 1666.85,1218.63 1667.44,1218.63 1668.02,1218.63 1668.61,1218.63 1669.2,1218.63 1669.78,1218.63 1670.37,1218.63 1670.96,1218.63 1671.54,1218.63 1672.13,1218.63 1672.71,1218.63 1673.3,1218.63 1673.89,1218.63 1674.47,1218.63 1675.06,1218.63 1675.65,1218.63 1676.23,1218.63 1676.82,1218.63 1677.41,1218.63 1677.99,1218.63 1678.58,1218.63 1679.17,1218.63 1679.75,1218.63 1680.34,1218.63 1680.92,1218.63 1681.51,1218.63 1682.1,1218.63 1682.68,1218.63 1683.27,1218.63 1683.86,1218.63 1684.44,1218.63 1685.03,1218.63 1685.62,1218.63 1686.2,1218.63 1686.79,1218.63 1687.37,1218.63 1687.96,1218.63 1688.55,1218.63 1689.13,1218.63 1689.72,1218.63 1690.31,1218.63 1690.89,1218.63 1691.48,1218.63 1692.07,1218.63 1692.65,1218.63 1693.24,1218.63 1693.83,1218.63 1694.41,1218.63 1695,1218.63 1695.58,1218.63 1696.17,1218.63 1696.76,1218.63 1697.34,1218.63 1697.93,1218.63 1698.52,1218.63 1699.1,1218.63 1699.69,1218.63 1700.28,1218.63 1700.86,1218.63 1701.45,1218.63 1702.04,1218.63 1702.62,1218.63 1703.21,1218.63 1703.79,1218.63 1704.38,1218.63 1704.97,1218.63 1705.55,1218.63 1706.14,1218.63 1706.73,1218.63 1707.31,1218.63 1707.9,1218.63 1708.49,1218.63 1709.07,1218.63 1709.66,1218.63 1710.24,1218.63 1710.83,1218.63 1711.42,1218.63 1712,1218.63 1712.59,1218.63 1713.18,1218.63 1713.76,1218.63 1714.35,1218.63 1714.94,1218.63 1715.52,1218.63 1716.11,1218.63 1716.7,1218.63 1717.28,1218.63 1717.87,1218.63 1718.45,1218.63 1719.04,1218.63 1719.63,1218.63 1720.21,1218.63 1720.8,1218.63 1721.39,1218.63 1721.97,1218.63 1722.56,1218.63 1723.15,1218.63 1723.73,1218.63 1724.32,1218.63 1724.91,1218.63 1725.49,1218.63 1726.08,1218.63 1726.66,1218.63 1727.25,1218.63 1727.84,1218.63 1728.42,1218.63 1729.01,1218.63 1729.6,1218.63 1730.18,1218.63 1730.77,1218.63 1731.36,1218.63 1731.94,1218.63 1732.53,1218.63 1733.11,1218.63 1733.7,1218.63 1734.29,1218.63 1734.87,1218.63 1735.46,1218.63 1736.05,1218.63 1736.63,1218.63 1737.22,1218.63 1737.81,1218.63 1738.39,1218.63 1738.98,1218.63 1739.57,1218.63 1740.15,1218.63 1740.74,1218.63 1741.32,1218.63 1741.91,1218.63 1742.5,1218.63 1743.08,1218.63 1743.67,1218.63 1744.26,1218.63 1744.84,1218.63 1745.43,1218.63 1746.02,1218.63 1746.6,1218.63 1747.19,1218.63 1747.78,1218.63 1748.36,1218.63 1748.95,1218.63 1749.53,1218.63 1750.12,1218.63 1750.71,1218.63 1751.29,1218.63 1751.88,1218.63 1752.47,1218.63 1753.05,1218.63 1753.64,1218.63 1754.23,1218.63 1754.81,1218.63 1755.4,1218.63 1755.99,1218.63 1756.57,1218.63 1757.16,1218.63 1757.74,1218.63 1758.33,1218.63 1758.92,1218.63 1759.5,1218.63 1760.09,1218.63 1760.68,1218.63 1761.26,1218.63 1761.85,1218.63 1762.44,1218.63 1763.02,1218.63 1763.61,1218.63 1764.19,1218.63 1764.78,1218.63 1765.37,1218.63 1765.95,1218.63 1766.54,1218.63 1767.13,1218.63 1767.71,1218.63 1768.3,1218.63 1768.89,1218.63 1769.47,1218.63 1770.06,1218.63 1770.65,1218.63 1771.23,1218.63 1771.82,1218.63 1772.4,1218.63 1772.99,1218.63 1773.58,1218.63 1774.16,1218.63 1774.75,1218.63 1775.34,1218.63 1775.92,1218.63 1776.51,1218.63 1777.1,1218.63 1777.68,1218.63 1778.27,1218.63 1778.86,1218.63 1779.44,1218.63 1780.03,1218.63 1780.61,1218.63 1781.2,1218.63 1781.79,1218.63 1782.37,1218.63 1782.96,1218.63 1783.55,1218.63 1784.13,1218.63 1784.72,1218.63 1785.31,1218.63 1785.89,1218.63 1786.48,1218.63 1787.06,1218.63 1787.65,1218.63 1788.24,1218.63 1788.82,1218.63 1789.41,1218.63 1790,1218.63 1790.58,1218.63 1791.17,1218.63 1791.76,1218.63 1792.34,1218.63 1792.93,1218.63 1793.52,1218.63 1794.1,1218.63 1794.69,1218.63 1795.27,1218.63 1795.86,1218.63 1796.45,1218.63 1797.03,1218.63 1797.62,1218.63 1798.21,1218.63 1798.79,1218.63 1799.38,1218.63 1799.97,1218.63 1800.55,1218.63 1801.14,1218.63 1801.73,1218.63 1802.31,1218.63 1802.9,1218.63 1803.48,1218.63 1804.07,1218.63 1804.66,1218.63 1805.24,1218.63 1805.83,1218.63 1806.42,1218.63 1807,1218.63 1807.59,1218.63 1808.18,1218.63 1808.76,1218.63 1809.35,1218.63 1809.94,1218.63 1810.52,1218.63 1811.11,1218.63 1811.69,1218.63 1812.28,1218.63 1812.87,1218.63 1813.45,1218.63 1814.04,1218.63 1814.63,1218.63 1815.21,1218.63 1815.8,1218.63 1816.39,1218.63 1816.97,1218.63 1817.56,1218.63 1818.14,1218.63 1818.73,1218.63 1819.32,1218.63 1819.9,1218.63 1820.49,1218.63 1821.08,1218.63 1821.66,1218.63 1822.25,1218.63 1822.84,1218.63 1823.42,1218.63 1824.01,1218.63 1824.6,1218.63 1825.18,1218.63 1825.77,1218.63 1826.35,1218.63 1826.94,1218.63 1827.53,1218.63 1828.11,1218.63 1828.7,1218.63 1829.29,1218.63 1829.87,1218.63 1830.46,1218.63 1831.05,1218.63 1831.63,1218.63 1832.22,1218.63 1832.81,1218.63 1833.39,1218.63 1833.98,1218.63 1834.56,1218.63 1835.15,1218.63 1835.74,1218.63 1836.32,1218.63 1836.91,1218.63 1837.5,1218.63 1838.08,1218.63 1838.67,1218.63 1839.26,1218.63 1839.84,1218.63 1840.43,1218.63 1841.01,1218.63 1841.6,1218.63 1842.19,1218.63 1842.77,1218.63 1843.36,1218.63 1843.95,1218.63 1844.53,1218.63 1845.12,1218.63 1845.71,1218.63 1846.29,1218.63 1846.88,1218.63 1847.47,1218.63 1848.05,1218.63 1848.64,1218.63 1849.22,1218.63 1849.81,1218.63 1850.4,1218.63 1850.98,1218.63 1851.57,1218.63 1852.16,1218.63 1852.74,1218.63 1853.33,1218.63 1853.92,1218.63 1854.5,1218.63 1855.09,1218.63 1855.68,1218.63 1856.26,1218.63 1856.85,1218.63 1857.43,1218.63 1858.02,1218.63 1858.61,1218.63 1859.19,1218.63 1859.78,1218.63 1860.37,1218.63 1860.95,1218.63 1861.54,1218.63 1862.13,1218.63 1862.71,1218.63 1863.3,1218.63 1863.88,1218.63 1864.47,1218.63 1865.06,1218.63 1865.64,1218.63 1866.23,1218.63 1866.82,1218.63 1867.4,1218.63 1867.99,1218.63 1868.58,1218.63 1869.16,1218.63 1869.75,1218.63 1870.34,1218.63 1870.92,1218.63 1871.51,1218.63 1872.09,1218.63 1872.68,1218.63 1873.27,1218.63 1873.85,1218.63 1874.44,1218.63 1875.03,1218.63 1875.61,1218.63 1876.2,1218.63 1876.79,1218.63 1877.37,1218.63 1877.96,1218.63 1878.55,1218.63 1879.13,1218.63 1879.72,1218.63 1880.3,1218.63 1880.89,1218.63 1881.48,1218.63 1882.06,1218.63 1882.65,1218.63 1883.24,1218.63 1883.82,1218.63 1884.41,1218.63 1885,1218.63 1885.58,1218.63 1886.17,1218.63 1886.76,1218.63 1887.34,1218.63 1887.93,1218.63 1888.51,1218.63 1889.1,1218.63 1889.69,1218.63 1890.27,1218.63 1890.86,1218.63 1891.45,1218.63 1892.03,1218.63 1892.62,1218.63 1893.21,1218.63 1893.79,1218.63 1894.38,1218.63 1894.96,1218.63 1895.55,1218.63 1896.14,1218.63 1896.72,1218.63 1897.31,1218.63 1897.9,1218.63 1898.48,1218.63 1899.07,1218.63 1899.66,1218.63 1900.24,1218.63 1900.83,1218.63 1901.42,1218.63 1902,1218.63 1902.59,1218.63 1903.17,1218.63 1903.76,1218.63 1904.35,1218.63 1904.93,1218.63 1905.52,1218.63 1906.11,1218.63 1906.69,1218.63 1907.28,1218.63 1907.87,1218.63 1908.45,1218.63 1909.04,1218.63 1909.63,1218.63 1910.21,1218.63 1910.8,1218.63 1911.38,1218.63 1911.97,1218.63 1912.56,1218.63 1913.14,1218.63 1913.73,1218.63 1914.32,1218.63 1914.9,1218.63 1915.49,1218.63 1916.08,1218.63 1916.66,1218.63 1917.25,1218.63 1917.83,1218.63 1918.42,1218.63 1919.01,1218.63 1919.59,1218.63 1920.18,1218.63 1920.77,1218.63 1921.35,1218.63 1921.94,1218.63 1922.53,1218.63 1923.11,1218.63 1923.7,1218.63 1924.29,1218.63 1924.87,1218.63 1925.46,1218.63 1926.04,1218.63 1926.63,1218.63 1927.22,1218.63 1927.8,1218.63 1928.39,1218.63 1928.98,1218.63 1929.56,1218.63 1930.15,1218.63 1930.74,1218.63 1931.32,1218.63 1931.91,1218.63 1932.5,1218.63 1933.08,1218.63 1933.67,1218.63 1934.25,1218.63 1934.84,1218.63 1935.43,1218.63 1936.01,1218.63 1936.6,1218.63 1937.19,1218.63 1937.77,1218.63 1938.36,1218.63 1938.95,1218.63 1939.53,1218.63 1940.12,1218.63 1940.71,1218.63 1941.29,1218.63 1941.88,1218.63 1942.46,1218.63 1943.05,1218.63 1943.64,1218.63 1944.22,1218.63 1944.81,1218.63 1945.4,1218.63 1945.98,1218.63 1946.57,1218.63 1947.16,1218.63 1947.74,1218.63 1948.33,1218.63 1948.91,1218.63 1949.5,1218.63 1950.09,1218.63 1950.67,1218.63 1951.26,1218.63 1951.85,1218.63 1952.43,1218.63 1953.02,1218.63 1953.61,1218.63 1954.19,1218.63 1954.78,1218.63 1955.37,1218.63 1955.95,1218.63 1956.54,1218.63 1957.12,1218.63 1957.71,1218.63 1958.3,1218.63 1958.88,1218.63 1959.47,1218.63 1960.06,1218.63 1960.64,1218.63 1961.23,1218.63 1961.82,1218.63 1962.4,1218.63 1962.99,1218.63 1963.58,1218.63 1964.16,1218.63 1964.75,1218.63 1965.33,1218.63 1965.92,1218.63 1966.51,1218.63 1967.09,1218.63 1967.68,1218.63 1968.27,1218.63 1968.85,1218.63 1969.44,1218.63 1970.03,1218.63 1970.61,1218.63 1971.2,1218.63 1971.78,1218.63 1972.37,1218.63 1972.96,1218.63 1973.54,1218.63 1974.13,1218.63 1974.72,1218.63 1975.3,1218.63 1975.89,1218.63 1976.48,1218.63 1977.06,1218.63 1977.65,1218.63 1978.24,1218.63 1978.82,1218.63 1979.41,1218.63 1979.99,1218.63 1980.58,1218.63 1981.17,1218.63 1981.75,1218.63 1982.34,1218.63 1982.93,1218.63 1983.51,1218.63 1984.1,1218.63 1984.69,1218.63 1985.27,1218.63 1985.86,1218.63 1986.45,1218.63 1987.03,1218.63 1987.62,1218.63 1988.2,1218.63 1988.79,1218.63 1989.38,1218.63 1989.96,1218.63 1990.55,1218.63 1991.14,1218.63 1991.72,1218.63 1992.31,1218.63 1992.9,1218.63 1993.48,1218.63 1994.07,1218.63 1994.65,1218.63 1995.24,1218.63 1995.83,1218.63 1996.41,1218.63 1997,1218.63 1997.59,1218.63 1998.17,1218.63 1998.76,1218.63 1999.35,1218.63 1999.93,1218.63 2000.52,1218.63 2001.11,1218.63 2001.69,1218.63 2002.28,1218.63 2002.86,1218.63 2003.45,1218.63 2004.04,1218.63 2004.62,1218.63 2005.21,1218.63 2005.8,1218.63 2006.38,1218.63 2006.97,1218.63 2007.56,1218.63 2008.14,1218.63 2008.73,1218.63 2009.32,1218.63 2009.9,1218.63 2010.49,1218.63 2011.07,1218.63 2011.66,1218.63 2012.25,1218.63 2012.83,1218.63 2013.42,1218.63 2014.01,1218.63 2014.59,1218.63 2015.18,1218.63 2015.77,1218.63 2016.35,1218.63 2016.94,1218.63 2017.53,1218.63 2018.11,1218.63 2018.7,1218.63 2019.28,1218.63 2019.87,1218.63 2020.46,1218.63 2021.04,1218.63 2021.63,1218.63 2022.22,1218.63 2022.8,1218.63 2023.39,1218.63 2023.98,1218.63 2024.56,1218.63 2025.15,1218.63 2025.73,1218.63 2026.32,1218.63 2026.91,1218.63 2027.49,1218.63 2028.08,1218.63 2028.67,1218.63 2029.25,1218.63 2029.84,1218.63 2030.43,1218.63 2031.01,1218.63 2031.6,1218.63 2032.19,1218.63 2032.77,1218.63 2033.36,1218.63 2033.94,1218.63 2034.53,1218.63 2035.12,1218.63 2035.7,1218.63 2036.29,1218.63 2036.88,1218.63 2037.46,1218.63 2038.05,1218.63 2038.64,1218.63 2039.22,1218.63 2039.81,1218.63 2040.4,1218.63 2040.98,1218.63 2041.57,1218.63 2042.15,1218.63 2042.74,1218.63 2043.33,1218.63 2043.91,1218.63 2044.5,1218.63 2045.09,1218.63 2045.67,1218.63 2046.26,1218.63 2046.85,1218.63 2047.43,1218.63 2048.02,1218.63 2048.6,1218.63 2049.19,1218.63 2049.78,1218.63 2050.36,1218.63 2050.95,1218.63 2051.54,1218.63 2052.12,1218.63 2052.71,1218.63 2053.3,1218.63 2053.88,1218.63 2054.47,1218.63 2055.06,1218.63 2055.64,1218.63 2056.23,1218.63 2056.81,1218.63 2057.4,1218.63 2057.99,1218.63 2058.57,1218.63 2059.16,1218.63 2059.75,1218.63 2060.33,1218.63 2060.92,1218.63 2061.51,1218.63 2062.09,1218.63 2062.68,1218.63 2063.27,1218.63 2063.85,1218.63 2064.44,1218.63 2065.02,1218.63 2065.61,1218.63 2066.2,1218.63 2066.78,1218.63 2067.37,1218.63 2067.96,1218.63 2068.54,1218.63 2069.13,1218.63 2069.72,1218.63 2070.3,1218.63 2070.89,1218.63 2071.48,1218.63 2072.06,1218.63 2072.65,1218.63 2073.23,1218.63 2073.82,1218.63 2074.41,1218.63 2074.99,1218.63 2075.58,1218.63 2076.17,1218.63 2076.75,1218.63 2077.34,1218.63 2077.93,1218.63 2078.51,1218.63 2079.1,1218.63 2079.68,1218.63 2080.27,1218.63 2080.86,1218.63 2081.44,1218.63 2082.03,1218.63 2082.62,1218.63 2083.2,1218.63 2083.79,1218.63 2084.38,1218.63 2084.96,1218.63 2085.55,1218.63 2086.14,1218.63 2086.72,1218.63 2087.31,1218.63 2087.89,1218.63 2088.48,1218.63 2089.07,1218.63 2089.65,1218.63 2090.24,1218.63 2090.83,1218.63 2091.41,1218.63 2092,1218.63 2092.59,1218.63 2093.17,1218.63 2093.76,1218.63 2094.35,1218.63 2094.93,1218.63 2095.52,1218.63 2096.1,1218.63 2096.69,1218.63 2097.28,1218.63 2097.86,1218.63 2098.45,1218.63 2099.04,1218.63 2099.62,1218.63 2100.21,1218.63 2100.8,1218.63 2101.38,1218.63 2101.97,1218.63 2102.55,1218.63 2103.14,1218.63 2103.73,1218.63 2104.31,1218.63 2104.9,1218.63 2105.49,1218.63 2106.07,1218.63 2106.66,1218.63 2107.25,1218.63 2107.83,1218.63 2108.42,1218.63 2109.01,1218.63 2109.59,1218.63 2110.18,1218.63 2110.76,1218.63 2111.35,1218.63 2111.94,1218.63 2112.52,1218.63 2113.11,1218.63 2113.7,1218.63 2114.28,1218.63 2114.87,1218.63 2115.46,1218.63 2116.04,1218.63 2116.63,1218.63 2117.22,1218.63 2117.8,1218.63 2118.39,1218.63 2118.97,1218.63 2119.56,1218.63 2120.15,1218.63 2120.73,1218.63 2121.32,1218.63 2121.91,1218.63 2122.49,1218.63 2123.08,1218.63 2123.67,1218.63 2124.25,1218.63 2124.84,1218.63 2125.42,1218.63 2126.01,1218.63 2126.6,1218.63 2127.18,1218.63 2127.77,1218.63 2128.36,1218.63 2128.94,1218.63 2129.53,1218.63 2130.12,1218.63 2130.7,1218.63 2131.29,1218.63 2131.88,1218.63 2132.46,1218.63 2133.05,1218.63 2133.63,1218.63 2134.22,1218.63 2134.81,1218.63 2135.39,1218.63 2135.98,1218.63 2136.57,1218.63 2137.15,1218.63 2137.74,1218.63 2138.33,1218.63 2138.91,1218.63 2139.5,1218.63 2140.09,1218.63 2140.67,1218.63 2141.26,1218.63 2141.84,1218.63 2142.43,1218.63 2143.02,1218.63 2143.6,1218.63 2144.19,1218.63 2144.78,1218.63 2145.36,1218.63 2145.95,1218.63 2146.54,1218.63 2147.12,1218.63 2147.71,1218.63 2148.3,1218.63 2148.88,1218.63 2149.47,1218.63 2150.05,1218.63 2150.64,1218.63 2151.23,1218.63 2151.81,1218.63 2152.4,1218.63 2152.99,1218.63 2153.57,1218.63 2154.16,1218.63 2154.75,1218.63 2155.33,1218.63 2155.92,1218.63 2156.5,1218.63 2157.09,1218.63 2157.68,1218.63 2158.26,1218.63 \"/>\n<path clip-path=\"url(#clip282)\" d=\"M986.025 1218.34 L986.612 1218.34 L987.198 1218.34 L987.785 1218.34 L988.371 1218.34 L988.957 1218.34 L989.544 1218.34 L990.13 1218.34 L990.717 1218.34 L991.303 1218.34 L991.889 1218.34 L992.476 1218.34 L993.062 1218.34 L993.649 1218.34 L994.235 1218.34 L994.822 1218.34 L995.408 1218.34 L995.994 1218.34 L996.581 1218.34 L997.167 1218.34 L997.754 1218.34 L998.34 1218.34 L998.926 1218.34 L999.513 1218.34 L1000.1 1218.34 L1000.69 1218.34 L1001.27 1218.34 L1001.86 1218.34 L1002.44 1218.34 L1003.03 1218.34 L1003.62 1218.34 L1004.2 1218.34 L1004.79 1218.34 L1005.38 1218.34 L1005.96 1218.34 L1006.55 1218.34 L1007.14 1218.34 L1007.72 1218.34 L1008.31 1218.34 L1008.9 1218.34 L1009.48 1218.34 L1010.07 1218.34 L1010.65 1218.34 L1011.24 1218.34 L1011.83 1218.34 L1012.41 1218.34 L1013 1218.34 L1013.59 1218.34 L1014.17 1218.34 L1014.76 1218.34 L1015.35 1218.34 L1015.93 1218.34 L1016.52 1218.34 L1017.11 1218.34 L1017.69 1218.34 L1018.28 1218.34 L1018.86 1218.34 L1019.45 1218.34 L1020.04 1218.34 L1020.62 1218.34 L1021.21 1218.34 L1021.8 1218.34 L1022.38 1218.34 L1022.97 1218.34 L1023.56 1218.34 L1024.14 1218.34 L1024.73 1218.34 L1025.32 1218.34 L1025.9 1218.34 L1026.49 1218.34 L1027.07 1218.34 L1027.66 1218.34 L1028.25 1218.34 L1028.83 1218.34 L1029.42 1218.34 L1030.01 1218.34 L1030.59 1218.34 L1031.18 1218.34 L1031.77 1218.34 L1032.35 1218.34 L1032.94 1218.34 L1033.52 1218.34 L1034.11 1218.34 L1034.7 1218.34 L1035.28 1218.34 L1035.87 1218.34 L1036.46 1218.34 L1037.04 1218.34 L1037.63 1218.34 L1038.22 1218.34 L1038.8 1218.34 L1039.39 1218.34 L1039.98 1218.34 L1040.56 1218.34 L1041.15 1218.34 L1041.73 1218.34 L1042.32 1218.34 L1042.91 1218.34 L1043.49 1218.34 L1044.08 1218.34 L1044.67 1218.34 L1045.25 1218.34 L1045.84 1218.34 L1046.43 1218.34 L1047.01 1218.34 L1047.6 1218.34 L1048.19 1218.34 L1048.77 1218.34 L1049.36 1218.34 L1049.94 1218.34 L1050.53 1218.34 L1051.12 1218.34 L1051.7 1218.34 L1052.29 1218.34 L1052.88 1218.34 L1053.46 1218.34 L1054.05 1218.34 L1054.64 1218.34 L1055.22 1218.34 L1055.81 1218.34 L1056.39 1218.34 L1056.98 1218.34 L1057.57 1218.34 L1058.15 1218.34 L1058.74 1218.34 L1059.33 1218.34 L1059.91 1218.34 L1060.5 1218.34 L1061.09 1218.34 L1061.67 1218.34 L1062.26 1218.34 L1062.85 1218.34 L1063.43 1218.34 L1064.02 1218.34 L1064.6 1218.34 L1065.19 1218.34 L1065.78 1218.34 L1066.36 1218.34 L1066.95 1218.34 L1067.54 1218.34 L1068.12 1218.34 L1068.71 1218.34 L1069.3 1218.34 L1069.88 1218.34 L1070.47 1218.34 L1071.06 1218.34 L1071.64 1218.34 L1072.23 1218.34 L1072.81 1218.34 L1073.4 1218.34 L1073.99 1218.34 L1074.57 1218.34 L1075.16 1218.34 L1075.75 1218.34 L1076.33 1218.34 L1076.92 1218.34 L1077.51 1218.34 L1078.09 1218.34 L1078.68 1218.34 L1079.26 1218.34 L1079.85 1218.34 L1080.44 1218.34 L1081.02 1218.34 L1081.61 1218.34 L1082.2 1218.34 L1082.78 1218.34 L1083.37 1218.34 L1083.96 1218.34 L1084.54 1218.34 L1085.13 1218.34 L1085.72 1218.34 L1086.3 1218.34 L1086.89 1218.34 L1087.47 1218.34 L1088.06 1218.34 L1088.65 1218.34 L1089.23 1218.34 L1089.82 1218.34 L1090.41 1218.34 L1090.99 1218.34 L1091.58 1218.34 L1092.17 1218.34 L1092.75 1218.34 L1093.34 1218.34 L1093.93 1218.34 L1094.51 1218.34 L1095.1 1218.34 L1095.68 1218.34 L1096.27 1218.34 L1096.86 1218.34 L1097.44 1218.34 L1098.03 1218.34 L1098.62 1218.34 L1099.2 1218.34 L1099.79 1218.34 L1100.38 1218.34 L1100.96 1218.34 L1101.55 1218.34 L1102.14 1218.34 L1102.72 1218.34 L1103.31 1218.34 L1103.89 1218.34 L1104.48 1218.34 L1105.07 1218.34 L1105.65 1218.34 L1106.24 1218.34 L1106.83 1218.34 L1107.41 1218.34 L1108 1218.34 L1108.59 1218.34 L1109.17 1218.34 L1109.76 1218.34 L1110.34 1218.34 L1110.93 1218.34 L1111.52 1218.34 L1112.1 1218.34 L1112.69 1218.34 L1113.28 1218.34 L1113.86 1218.34 L1114.45 1218.34 L1115.04 1218.34 L1115.62 1218.34 L1116.21 1218.34 L1116.8 1218.34 L1117.38 1218.34 L1117.97 1218.34 L1118.55 1218.34 L1119.14 1218.34 L1119.73 1218.34 L1120.31 1218.34 L1120.9 1218.34 L1121.49 1218.34 L1122.07 1218.34 L1122.66 1218.34 L1123.25 1218.34 L1123.83 1218.34 L1124.42 1218.34 L1125.01 1218.34 L1125.59 1218.34 L1126.18 1218.34 L1126.76 1218.34 L1127.35 1218.34 L1127.94 1218.34 L1128.52 1218.34 L1129.11 1218.34 L1129.7 1218.34 L1130.28 1218.34 L1130.87 1218.34 L1131.46 1218.34 L1132.04 1218.34 L1132.63 1218.34 L1133.21 1218.34 L1133.8 1218.34 L1134.39 1218.34 L1134.97 1218.34 L1135.56 1218.34 L1136.15 1218.34 L1136.73 1218.34 L1137.32 1218.34 L1137.91 1218.34 L1138.49 1218.34 L1139.08 1218.34 L1139.67 1218.34 L1140.25 1218.34 L1140.84 1218.34 L1141.42 1218.34 L1142.01 1218.34 L1142.6 1218.34 L1143.18 1218.34 L1143.77 1218.34 L1144.36 1218.34 L1144.94 1218.34 L1145.53 1218.34 L1146.12 1218.34 L1146.7 1218.34 L1147.29 1218.34 L1147.88 1218.34 L1148.46 1218.34 L1149.05 1218.34 L1149.63 1218.34 L1150.22 1218.34 L1150.81 1218.34 L1151.39 1218.34 L1151.98 1218.34 L1152.57 1218.34 L1153.15 1218.34 L1153.74 1218.34 L1154.33 1218.34 L1154.91 1218.34 L1155.5 1218.34 L1156.09 1218.34 L1156.67 1218.34 L1157.26 1218.34 L1157.84 1218.34 L1158.43 1218.34 L1159.02 1218.34 L1159.6 1218.34 L1160.19 1218.34 L1160.78 1218.34 L1161.36 1218.34 L1161.95 1218.34 L1162.54 1218.34 L1163.12 1218.34 L1163.71 1218.34 L1164.29 1218.34 L1164.88 1218.34 L1165.47 1218.34 L1166.05 1218.34 L1166.64 1218.34 L1167.23 1218.34 L1167.81 1218.34 L1168.4 1218.34 L1168.99 1218.34 L1169.57 1218.34 L1170.16 1218.34 L1170.75 1218.34 L1171.33 1218.34 L1171.92 1218.34 L1172.5 1218.34 L1173.09 1218.34 L1173.68 1218.34 L1174.26 1218.34 L1174.85 1218.34 L1175.44 1218.34 L1176.02 1218.34 L1176.61 1218.34 L1177.2 1218.34 L1177.78 1218.34 L1178.37 1218.34 L1178.96 1218.34 L1179.54 1218.34 L1180.13 1218.34 L1180.71 1218.34 L1181.3 1218.34 L1181.89 1218.34 L1182.47 1218.34 L1183.06 1218.34 L1183.65 1218.34 L1184.23 1218.34 L1184.82 1218.34 L1185.41 1218.34 L1185.99 1218.34 L1186.58 1218.34 L1187.16 1218.34 L1187.75 1218.34 L1188.34 1218.34 L1188.92 1218.34 L1189.51 1218.34 L1190.1 1218.34 L1190.68 1218.34 L1191.27 1218.34 L1191.86 1218.34 L1192.44 1218.34 L1193.03 1218.34 L1193.62 1218.34 L1194.2 1218.34 L1194.79 1218.34 L1195.37 1218.34 L1195.96 1218.34 L1196.55 1218.34 L1197.13 1218.34 L1197.72 1218.34 L1198.31 1218.34 L1198.89 1218.34 L1199.48 1218.34 L1200.07 1218.34 L1200.65 1218.34 L1201.24 1218.34 L1201.83 1218.34 L1202.41 1218.34 L1203 1218.34 L1203.58 1218.34 L1204.17 1218.34 L1204.76 1218.34 L1205.34 1218.34 L1205.93 1218.34 L1206.52 1218.34 L1207.1 1218.34 L1207.69 1218.34 L1208.28 1218.34 L1208.86 1218.34 L1209.45 1218.34 L1210.03 1218.34 L1210.62 1218.34 L1211.21 1218.34 L1211.79 1218.34 L1212.38 1218.34 L1212.97 1218.34 L1213.55 1218.34 L1214.14 1218.34 L1214.73 1218.34 L1215.31 1218.34 L1215.9 1218.34 L1216.49 1218.34 L1217.07 1218.34 L1217.66 1218.34 L1218.24 1218.34 L1218.83 1218.34 L1219.42 1218.34 L1220 1218.34 L1220.59 1218.34 L1221.18 1218.34 L1221.76 1218.34 L1222.35 1218.34 L1222.94 1218.34 L1223.52 1218.34 L1224.11 1218.34 L1224.7 1218.34 L1225.28 1218.34 L1225.87 1218.34 L1226.45 1218.34 L1227.04 1218.34 L1227.63 1218.34 L1228.21 1218.34 L1228.8 1218.34 L1229.39 1218.34 L1229.97 1218.34 L1230.56 1218.34 L1231.15 1218.34 L1231.73 1218.34 L1232.32 1218.34 L1232.91 1218.34 L1233.49 1218.34 L1234.08 1218.34 L1234.66 1218.34 L1235.25 1218.34 L1235.84 1218.34 L1236.42 1218.34 L1237.01 1218.34 L1237.6 1218.34 L1238.18 1218.34 L1238.77 1218.34 L1239.36 1218.34 L1239.94 1218.34 L1240.53 1218.34 L1241.11 1218.34 L1241.7 1218.34 L1242.29 1218.34 L1242.87 1218.34 L1243.46 1218.34 L1244.05 1218.34 L1244.63 1218.34 L1245.22 1218.34 L1245.81 1218.34 L1246.39 1218.34 L1246.98 1218.34 L1247.57 1218.34 L1248.15 1218.34 L1248.74 1218.34 L1249.32 1218.34 L1249.91 1218.34 L1250.5 1218.34 L1251.08 1218.34 L1251.67 1218.34 L1252.26 1218.34 L1252.84 1218.34 L1253.43 1218.34 L1254.02 1218.34 L1254.6 1218.34 L1255.19 1218.34 L1255.78 1218.34 L1256.36 1218.34 L1256.95 1218.34 L1257.53 1218.34 L1258.12 1218.34 L1258.71 1218.34 L1259.29 1218.34 L1259.88 1218.34 L1260.47 1218.34 L1261.05 1218.34 L1261.64 1218.34 L1262.23 1218.34 L1262.81 1218.34 L1263.4 1218.34 L1263.98 1218.34 L1264.57 1218.34 L1265.16 1218.34 L1265.74 1218.34 L1266.33 1218.34 L1266.92 1218.34 L1267.5 1218.34 L1268.09 1218.34 L1268.68 1218.34 L1269.26 1218.34 L1269.85 1218.34 L1270.44 1218.34 L1271.02 1218.34 L1271.61 1218.34 L1272.19 1218.34 L1272.78 1218.34 L1273.37 1218.34 L1273.95 1218.34 L1274.54 1218.34 L1275.13 1218.34 L1275.71 1218.34 L1276.3 1218.34 L1276.89 1218.34 L1277.47 1218.34 L1278.06 1218.34 L1278.65 1218.34 L1279.23 1218.34 L1279.82 1218.34 L1280.4 1218.34 L1280.99 1218.34 L1281.58 1218.34 L1282.16 1218.34 L1282.75 1218.34 L1283.34 1218.34 L1283.92 1218.34 L1284.51 1218.34 L1285.1 1218.34 L1285.68 1218.34 L1286.27 1218.34 L1286.86 1218.34 L1287.44 1218.34 L1288.03 1218.34 L1288.61 1218.34 L1289.2 1218.34 L1289.79 1218.34 L1290.37 1218.34 L1290.96 1218.34 L1291.55 1218.34 L1292.13 1218.34 L1292.72 1218.34 L1293.31 1218.34 L1293.89 1218.34 L1294.48 1218.34 L1295.06 1218.34 L1295.65 1218.34 L1296.24 1218.34 L1296.82 1218.34 L1297.41 1218.34 L1298 1218.34 L1298.58 1218.34 L1299.17 1218.34 L1299.76 1218.34 L1300.34 1218.34 L1300.93 1218.34 L1301.52 1218.34 L1302.1 1218.34 L1302.69 1218.34 L1303.27 1218.34 L1303.86 1218.34 L1304.45 1218.34 L1305.03 1218.34 L1305.62 1218.34 L1306.21 1218.34 L1306.79 1218.34 L1307.38 1218.34 L1307.97 1218.34 L1308.55 1218.34 L1309.14 1218.34 L1309.73 1218.34 L1310.31 1218.34 L1310.9 1218.34 L1311.48 1218.34 L1312.07 1218.34 L1312.66 1218.34 L1313.24 1218.34 L1313.83 1218.34 L1314.42 1218.34 L1315 1218.34 L1315.59 1218.34 L1316.18 1218.34 L1316.76 1218.34 L1317.35 1218.34 L1317.93 1218.34 L1318.52 1218.34 L1319.11 1218.34 L1319.69 1218.34 L1320.28 1218.34 L1320.87 1218.34 L1321.45 1218.34 L1322.04 1218.34 L1322.63 1218.34 L1323.21 1218.34 L1323.8 1218.34 L1324.39 1218.34 L1324.97 1218.34 L1325.56 1218.34 L1326.14 1218.34 L1326.73 1218.34 L1327.32 1218.34 L1327.9 1218.34 L1328.49 1218.34 L1329.08 1218.34 L1329.66 1218.34 L1330.25 1218.34 L1330.84 1218.34 L1331.42 1218.34 L1332.01 1218.34 L1332.6 1218.34 L1333.18 1218.34 L1333.77 1218.34 L1334.35 1218.34 L1334.94 1218.34 L1335.53 1218.34 L1336.11 1218.34 L1336.7 1218.34 L1337.29 1218.34 L1337.87 1218.34 L1338.46 1218.34 L1339.05 1218.34 L1339.63 1218.34 L1340.22 1218.34 L1340.8 1218.34 L1341.39 1218.34 L1341.98 1218.34 L1342.56 1218.34 L1343.15 1218.34 L1343.74 1218.34 L1344.32 1218.34 L1344.91 1218.34 L1345.5 1218.34 L1346.08 1218.34 L1346.67 1218.34 L1347.26 1218.34 L1347.84 1218.34 L1348.43 1218.34 L1349.01 1218.34 L1349.6 1218.34 L1350.19 1218.34 L1350.77 1218.34 L1351.36 1218.34 L1351.95 1218.34 L1352.53 1218.34 L1353.12 1218.34 L1353.71 1218.34 L1354.29 1218.34 L1354.88 1218.34 L1355.47 1218.34 L1356.05 1218.34 L1356.64 1218.34 L1357.22 1218.34 L1357.81 1218.34 L1358.4 1218.34 L1358.98 1218.34 L1359.57 1218.34 L1360.16 1218.34 L1360.74 1218.34 L1361.33 1218.34 L1361.92 1218.34 L1362.5 1218.34 L1363.09 1218.34 L1363.68 1218.34 L1364.26 1218.34 L1364.85 1218.34 L1365.43 1218.34 L1366.02 1218.34 L1366.61 1218.34 L1367.19 1218.34 L1367.78 1218.34 L1368.37 1218.34 L1368.95 1218.34 L1369.54 1218.34 L1370.13 1218.34 L1370.71 1218.34 L1371.3 1218.34 L1371.88 1218.34 L1372.47 1218.34 L1373.06 1218.34 L1373.64 1218.34 L1374.23 1218.34 L1374.82 1218.34 L1375.4 1218.34 L1375.99 1218.34 L1376.58 1218.34 L1377.16 1218.34 L1377.75 1218.34 L1378.34 1218.34 L1378.92 1218.34 L1379.51 1218.34 L1380.09 1218.34 L1380.68 1218.34 L1381.27 1218.34 L1381.85 1218.34 L1382.44 1218.34 L1383.03 1218.34 L1383.61 1218.34 L1384.2 1218.34 L1384.79 1218.34 L1385.37 1218.34 L1385.96 1218.34 L1386.55 1218.34 L1387.13 1218.34 L1387.72 1218.34 L1388.3 1218.34 L1388.89 1218.34 L1389.48 1218.34 L1390.06 1218.34 L1390.65 1218.34 L1391.24 1218.34 L1391.82 1218.34 L1392.41 1218.34 L1393 1218.34 L1393.58 1218.34 L1394.17 1218.34 L1394.75 1218.34 L1395.34 1218.34 L1395.93 1218.34 L1396.51 1218.34 L1397.1 1218.34 L1397.69 1218.34 L1398.27 1218.34 L1398.86 1218.34 L1399.45 1218.34 L1400.03 1218.34 L1400.62 1218.34 L1401.21 1218.34 L1401.79 1218.34 L1402.38 1218.34 L1402.96 1218.34 L1403.55 1218.34 L1404.14 1218.34 L1404.72 1218.34 L1405.31 1218.34 L1405.9 1218.34 L1406.48 1218.34 L1407.07 1218.34 L1407.66 1218.34 L1408.24 1218.34 L1408.83 1218.34 L1409.42 1218.34 L1410 1218.34 L1410.59 1218.34 L1411.17 1218.34 L1411.76 1218.34 L1412.35 1218.34 L1412.93 1218.34 L1413.52 1218.34 L1414.11 1218.34 L1414.69 1218.34 L1415.28 1218.34 L1415.87 1218.34 L1416.45 1218.34 L1417.04 1218.34 L1417.63 1218.34 L1418.21 1218.34 L1418.8 1218.34 L1419.38 1218.34 L1419.97 1218.34 L1420.56 1218.34 L1421.14 1218.34 L1421.73 1218.34 L1422.32 1218.34 L1422.9 1218.34 L1423.49 1218.34 L1424.08 1218.34 L1424.66 1218.34 L1425.25 1218.34 L1425.83 1218.34 L1426.42 1218.34 L1427.01 1218.34 L1427.59 1218.34 L1428.18 1218.34 L1428.77 1218.34 L1429.35 1218.34 L1429.94 1218.34 L1430.53 1218.34 L1431.11 1218.34 L1431.7 1218.34 L1432.29 1218.34 L1432.87 1218.34 L1433.46 1218.34 L1434.04 1218.34 L1434.63 1218.34 L1435.22 1218.34 L1435.8 1218.34 L1436.39 1218.34 L1436.98 1218.34 L1437.56 1218.34 L1438.15 1218.34 L1438.74 1218.34 L1439.32 1218.34 L1439.91 1218.34 L1440.5 1218.34 L1441.08 1218.34 L1441.67 1218.34 L1442.25 1218.34 L1442.84 1218.34 L1443.43 1218.34 L1444.01 1218.34 L1444.6 1218.34 L1445.19 1218.34 L1445.77 1218.34 L1446.36 1218.34 L1446.95 1218.34 L1447.53 1218.34 L1448.12 1218.34 L1448.7 1218.34 L1449.29 1218.34 L1449.88 1218.34 L1450.46 1218.34 L1451.05 1218.34 L1451.64 1218.34 L1452.22 1218.34 L1452.81 1218.34 L1453.4 1218.34 L1453.98 1218.34 L1454.57 1218.34 L1455.16 1218.34 L1455.74 1218.34 L1456.33 1218.34 L1456.91 1218.34 L1457.5 1218.34 L1458.09 1218.34 L1458.67 1218.34 L1459.26 1218.34 L1459.85 1218.34 L1460.43 1218.34 L1461.02 1218.34 L1461.61 1218.34 L1462.19 1218.34 L1462.78 1218.34 L1463.37 1218.34 L1463.95 1218.34 L1464.54 1218.34 L1465.12 1218.34 L1465.71 1218.34 L1466.3 1218.34 L1466.88 1218.34 L1467.47 1218.34 L1468.06 1218.34 L1468.64 1218.34 L1469.23 1218.34 L1469.82 1218.34 L1470.4 1218.34 L1470.99 1218.34 L1471.57 1218.34 L1472.16 1218.34 L1472.75 1218.34 L1473.33 1218.34 L1473.92 1218.34 L1474.51 1218.34 L1475.09 1218.34 L1475.68 1218.34 L1476.27 1218.34 L1476.85 1218.34 L1477.44 1218.34 L1478.03 1218.34 L1478.61 1218.34 L1479.2 1218.34 L1479.78 1218.34 L1480.37 1218.34 L1480.96 1218.34 L1481.54 1218.34 L1482.13 1218.34 L1482.72 1218.34 L1483.3 1218.34 L1483.89 1218.34 L1484.48 1218.34 L1485.06 1218.34 L1485.65 1218.34 L1486.24 1218.34 L1486.82 1218.34 L1487.41 1218.34 L1487.99 1218.34 L1488.58 1218.34 L1489.17 1218.34 L1489.75 1218.34 L1490.34 1218.34 L1490.93 1218.34 L1491.51 1218.34 L1492.1 1218.34 L1492.69 1218.34 L1493.27 1218.34 L1493.86 1218.34 L1494.45 1218.34 L1495.03 1218.34 L1495.62 1218.34 L1496.2 1218.34 L1496.79 1218.34 L1497.38 1218.34 L1497.96 1218.34 L1498.55 1218.34 L1499.14 1218.34 L1499.72 1218.34 L1500.31 1218.34 L1500.9 1218.34 L1501.48 1218.34 L1502.07 1218.34 L1502.65 1218.34 L1503.24 1218.34 L1503.83 1218.34 L1504.41 1218.34 L1505 1218.34 L1505.59 1218.34 L1506.17 1218.34 L1506.76 1218.34 L1507.35 1218.34 L1507.93 1218.34 L1508.52 1218.34 L1509.11 1218.34 L1509.69 1218.34 L1510.28 1218.34 L1510.86 1218.34 L1511.45 1218.34 L1512.04 1218.34 L1512.62 1218.34 L1513.21 1218.34 L1513.8 1218.34 L1514.38 1218.34 L1514.97 1218.34 L1515.56 1218.34 L1516.14 1218.34 L1516.73 1218.34 L1517.32 1218.34 L1517.9 1218.34 L1518.49 1218.34 L1519.07 1218.34 L1519.66 1218.34 L1520.25 1218.34 L1520.83 1218.34 L1521.42 1218.34 L1522.01 1218.34 L1522.59 1218.34 L1523.18 1218.34 L1523.77 1218.34 L1524.35 1218.34 L1524.94 1218.34 L1525.52 1218.34 L1526.11 1218.34 L1526.7 1218.34 L1527.28 1218.34 L1527.87 1218.34 L1528.46 1218.34 L1529.04 1218.34 L1529.63 1218.34 L1530.22 1218.34 L1530.8 1218.34 L1531.39 1218.34 L1531.98 1218.34 L1532.56 1218.34 L1533.15 1218.34 L1533.73 1218.34 L1534.32 1218.34 L1534.91 1218.34 L1535.49 1218.34 L1536.08 1218.34 L1536.67 1218.34 L1537.25 1218.34 L1537.84 1218.34 L1538.43 1218.34 L1539.01 1218.34 L1539.6 1218.34 L1540.19 1218.34 L1540.77 1218.34 L1541.36 1218.34 L1541.94 1218.34 L1542.53 1218.34 L1543.12 1218.34 L1543.7 1218.34 L1544.29 1218.34 L1544.88 1218.34 L1545.46 1218.34 L1546.05 1218.34 L1546.64 1218.34 L1547.22 1218.34 L1547.81 1218.34 L1548.4 1218.34 L1548.98 1218.34 L1549.57 1218.34 L1550.15 1218.34 L1550.74 1218.34 L1551.33 1218.34 L1551.91 1218.34 L1552.5 1218.34 L1553.09 1218.34 L1553.67 1218.34 L1554.26 1218.34 L1554.85 1218.34 L1555.43 1218.34 L1556.02 1218.34 L1556.6 1218.34 L1557.19 1218.34 L1557.78 1218.34 L1558.36 1218.34 L1558.95 1218.34 L1559.54 1218.34 L1560.12 1218.34 L1560.71 1218.34 L1561.3 1218.34 L1561.88 1218.34 L1562.47 1218.34 L1563.06 1218.34 L1563.64 1218.34 L1564.23 1218.34 L1564.81 1218.34 L1565.4 1218.34 L1565.99 1218.34 L1566.57 1218.34 L1567.16 1218.34 L1567.75 1218.34 L1568.33 1218.34 L1568.92 1218.34 L1569.51 1218.34 L1570.09 1218.34 L1570.68 1218.34 L1571.27 1218.34 L1571.85 1218.34 L1572.44 1218.34 L1573.02 1218.34 L1573.61 1218.34 L1574.2 1218.34 L1574.78 1218.34 L1575.37 1218.34 L1575.96 1218.34 L1576.54 1218.34 L1577.13 1218.34 L1577.72 1218.34 L1578.3 1218.34 L1578.89 1218.34 L1579.47 1218.34 L1580.06 1218.34 L1580.65 1218.34 L1581.23 1218.34 L1581.82 1218.34 L1582.41 1218.34 L1582.99 1218.34 L1583.58 1218.34 L1584.17 1218.34 L1584.75 1218.34 L1585.34 1218.34 L1585.93 1218.34 L1586.51 1218.34 L1587.1 1218.34 L1587.68 1218.34 L1588.27 1218.34 L1588.86 1218.34 L1589.44 1218.34 L1590.03 1218.34 L1590.62 1218.34 L1591.2 1218.34 L1591.79 1218.34 L1592.38 1218.34 L1592.96 1218.34 L1593.55 1218.34 L1594.14 1218.34 L1594.72 1218.34 L1595.31 1218.34 L1595.89 1218.34 L1596.48 1218.34 L1597.07 1218.34 L1597.65 1218.34 L1598.24 1218.34 L1598.83 1218.34 L1599.41 1218.34 L1600 1218.34 L1600.59 1218.34 L1601.17 1218.34 L1601.76 1218.34 L1602.34 1218.34 L1602.93 1218.34 L1603.52 1218.34 L1604.1 1218.34 L1604.69 1218.34 L1605.28 1218.34 L1605.86 1218.34 L1606.45 1218.34 L1607.04 1218.34 L1607.62 1218.34 L1608.21 1218.34 L1608.8 1218.34 L1609.38 1218.34 L1609.97 1218.34 L1610.55 1218.34 L1611.14 1218.34 L1611.73 1218.34 L1612.31 1218.34 L1612.9 1218.34 L1613.49 1218.34 L1614.07 1218.34 L1614.66 1218.34 L1615.25 1218.34 L1615.83 1218.34 L1616.42 1218.34 L1617.01 1218.34 L1617.59 1218.34 L1618.18 1218.34 L1618.76 1218.34 L1619.35 1218.34 L1619.94 1218.34 L1620.52 1218.34 L1621.11 1218.34 L1621.7 1218.34 L1622.28 1218.34 L1622.87 1218.34 L1623.46 1218.34 L1624.04 1218.34 L1624.63 1218.34 L1625.22 1218.34 L1625.8 1218.34 L1626.39 1218.34 L1626.97 1218.34 L1627.56 1218.34 L1628.15 1218.34 L1628.73 1218.34 L1629.32 1218.34 L1629.91 1218.34 L1630.49 1218.34 L1631.08 1218.34 L1631.67 1218.34 L1632.25 1218.34 L1632.84 1218.34 L1633.42 1218.34 L1634.01 1218.34 L1634.6 1218.34 L1635.18 1218.34 L1635.77 1218.34 L1636.36 1218.34 L1636.94 1218.34 L1637.53 1218.34 L1638.12 1218.34 L1638.7 1218.34 L1639.29 1218.34 L1639.88 1218.34 L1640.46 1218.34 L1641.05 1218.34 L1641.63 1218.34 L1642.22 1218.34 L1642.81 1218.34 L1643.39 1218.34 L1643.98 1218.34 L1644.57 1218.34 L1645.15 1218.34 L1645.74 1218.34 L1646.33 1218.34 L1646.91 1218.34 L1647.5 1218.34 L1648.09 1218.34 L1648.67 1218.34 L1649.26 1218.34 L1649.84 1218.34 L1650.43 1218.34 L1651.02 1218.34 L1651.6 1218.34 L1652.19 1218.34 L1652.78 1218.34 L1653.36 1218.34 L1653.95 1218.34 L1654.54 1218.34 L1655.12 1218.34 L1655.71 1218.34 L1656.29 1218.34 L1656.88 1218.34 L1657.47 1218.34 L1658.05 1218.34 L1658.64 1218.34 L1659.23 1218.34 L1659.81 1218.34 L1660.4 1218.34 L1660.99 1218.34 L1661.57 1218.34 L1662.16 1218.34 L1662.75 1218.34 L1663.33 1218.34 L1663.92 1218.34 L1664.5 1218.34 L1665.09 1218.34 L1665.68 1218.34 L1666.26 1218.34 L1666.85 1218.34 L1667.44 1218.34 L1668.02 1218.34 L1668.61 1218.34 L1669.2 1218.34 L1669.78 1218.34 L1670.37 1218.34 L1670.96 1218.34 L1671.54 1218.34 L1672.13 1218.34 L1672.71 1218.34 L1673.3 1218.34 L1673.89 1218.34 L1674.47 1218.34 L1675.06 1218.34 L1675.65 1218.34 L1676.23 1218.34 L1676.82 1218.34 L1677.41 1218.34 L1677.99 1218.34 L1678.58 1218.34 L1679.17 1218.34 L1679.75 1218.34 L1680.34 1218.34 L1680.92 1218.34 L1681.51 1218.34 L1682.1 1218.34 L1682.68 1218.34 L1683.27 1218.34 L1683.86 1218.34 L1684.44 1218.34 L1685.03 1218.34 L1685.62 1218.34 L1686.2 1218.34 L1686.79 1218.34 L1687.37 1218.34 L1687.96 1218.34 L1688.55 1218.34 L1689.13 1218.34 L1689.72 1218.34 L1690.31 1218.34 L1690.89 1218.34 L1691.48 1218.34 L1692.07 1218.34 L1692.65 1218.34 L1693.24 1218.34 L1693.83 1218.34 L1694.41 1218.34 L1695 1218.34 L1695.58 1218.34 L1696.17 1218.34 L1696.76 1218.34 L1697.34 1218.34 L1697.93 1218.34 L1698.52 1218.34 L1699.1 1218.34 L1699.69 1218.34 L1700.28 1218.34 L1700.86 1218.34 L1701.45 1218.34 L1702.04 1218.34 L1702.62 1218.34 L1703.21 1218.34 L1703.79 1218.34 L1704.38 1218.34 L1704.97 1218.34 L1705.55 1218.34 L1706.14 1218.34 L1706.73 1218.34 L1707.31 1218.34 L1707.9 1218.34 L1708.49 1218.34 L1709.07 1218.34 L1709.66 1218.34 L1710.24 1218.34 L1710.83 1218.34 L1711.42 1218.34 L1712 1218.34 L1712.59 1218.34 L1713.18 1218.34 L1713.76 1218.34 L1714.35 1218.34 L1714.94 1218.34 L1715.52 1218.34 L1716.11 1218.34 L1716.7 1218.34 L1717.28 1218.34 L1717.87 1218.34 L1718.45 1218.34 L1719.04 1218.34 L1719.63 1218.34 L1720.21 1218.34 L1720.8 1218.34 L1721.39 1218.34 L1721.97 1218.34 L1722.56 1218.34 L1723.15 1218.34 L1723.73 1218.34 L1724.32 1218.34 L1724.91 1218.34 L1725.49 1218.34 L1726.08 1218.34 L1726.66 1218.34 L1727.25 1218.34 L1727.84 1218.34 L1728.42 1218.34 L1729.01 1218.34 L1729.6 1218.34 L1730.18 1218.34 L1730.77 1218.34 L1731.36 1218.34 L1731.94 1218.34 L1732.53 1218.34 L1733.11 1218.34 L1733.7 1218.34 L1734.29 1218.34 L1734.87 1218.34 L1735.46 1218.34 L1736.05 1218.34 L1736.63 1218.34 L1737.22 1218.34 L1737.81 1218.34 L1738.39 1218.34 L1738.98 1218.34 L1739.57 1218.34 L1740.15 1218.34 L1740.74 1218.34 L1741.32 1218.34 L1741.91 1218.34 L1742.5 1218.34 L1743.08 1218.34 L1743.67 1218.34 L1744.26 1218.34 L1744.84 1218.34 L1745.43 1218.34 L1746.02 1218.34 L1746.6 1218.34 L1747.19 1218.34 L1747.78 1218.34 L1748.36 1218.34 L1748.95 1218.34 L1749.53 1218.34 L1750.12 1218.34 L1750.71 1218.34 L1751.29 1218.34 L1751.88 1218.34 L1752.47 1218.34 L1753.05 1218.34 L1753.64 1218.34 L1754.23 1218.34 L1754.81 1218.34 L1755.4 1218.34 L1755.99 1218.34 L1756.57 1218.34 L1757.16 1218.34 L1757.74 1218.34 L1758.33 1218.34 L1758.92 1218.34 L1759.5 1218.34 L1760.09 1218.34 L1760.68 1218.34 L1761.26 1218.34 L1761.85 1218.34 L1762.44 1218.34 L1763.02 1218.34 L1763.61 1218.34 L1764.19 1218.34 L1764.78 1218.34 L1765.37 1218.34 L1765.95 1218.34 L1766.54 1218.34 L1767.13 1218.34 L1767.71 1218.34 L1768.3 1218.34 L1768.89 1218.34 L1769.47 1218.34 L1770.06 1218.34 L1770.65 1218.34 L1771.23 1218.34 L1771.82 1218.34 L1772.4 1218.34 L1772.99 1218.34 L1773.58 1218.34 L1774.16 1218.34 L1774.75 1218.34 L1775.34 1218.34 L1775.92 1218.34 L1776.51 1218.34 L1777.1 1218.34 L1777.68 1218.34 L1778.27 1218.34 L1778.86 1218.34 L1779.44 1218.34 L1780.03 1218.34 L1780.61 1218.34 L1781.2 1218.34 L1781.79 1218.34 L1782.37 1218.34 L1782.96 1218.34 L1783.55 1218.34 L1784.13 1218.34 L1784.72 1218.34 L1785.31 1218.34 L1785.89 1218.34 L1786.48 1218.34 L1787.06 1218.34 L1787.65 1218.34 L1788.24 1218.34 L1788.82 1218.34 L1789.41 1218.34 L1790 1218.34 L1790.58 1218.34 L1791.17 1218.34 L1791.76 1218.34 L1792.34 1218.34 L1792.93 1218.34 L1793.52 1218.34 L1794.1 1218.34 L1794.69 1218.34 L1795.27 1218.34 L1795.86 1218.34 L1796.45 1218.34 L1797.03 1218.34 L1797.62 1218.34 L1798.21 1218.34 L1798.79 1218.34 L1799.38 1218.34 L1799.97 1218.34 L1800.55 1218.34 L1801.14 1218.34 L1801.73 1218.34 L1802.31 1218.34 L1802.9 1218.34 L1803.48 1218.34 L1804.07 1218.34 L1804.66 1218.34 L1805.24 1218.34 L1805.83 1218.34 L1806.42 1218.34 L1807 1218.34 L1807.59 1218.34 L1808.18 1218.34 L1808.76 1218.34 L1809.35 1218.34 L1809.94 1218.34 L1810.52 1218.34 L1811.11 1218.34 L1811.69 1218.34 L1812.28 1218.34 L1812.87 1218.34 L1813.45 1218.34 L1814.04 1218.34 L1814.63 1218.34 L1815.21 1218.34 L1815.8 1218.34 L1816.39 1218.34 L1816.97 1218.34 L1817.56 1218.34 L1818.14 1218.34 L1818.73 1218.34 L1819.32 1218.34 L1819.9 1218.34 L1820.49 1218.34 L1821.08 1218.34 L1821.66 1218.34 L1822.25 1218.34 L1822.84 1218.34 L1823.42 1218.34 L1824.01 1218.34 L1824.6 1218.34 L1825.18 1218.34 L1825.77 1218.34 L1826.35 1218.34 L1826.94 1218.34 L1827.53 1218.34 L1828.11 1218.34 L1828.7 1218.34 L1829.29 1218.34 L1829.87 1218.34 L1830.46 1218.34 L1831.05 1218.34 L1831.63 1218.34 L1832.22 1218.34 L1832.81 1218.34 L1833.39 1218.34 L1833.98 1218.34 L1834.56 1218.34 L1835.15 1218.34 L1835.74 1218.34 L1836.32 1218.34 L1836.91 1218.34 L1837.5 1218.34 L1838.08 1218.34 L1838.67 1218.34 L1839.26 1218.34 L1839.84 1218.34 L1840.43 1218.34 L1841.01 1218.34 L1841.6 1218.34 L1842.19 1218.34 L1842.77 1218.34 L1843.36 1218.34 L1843.95 1218.34 L1844.53 1218.34 L1845.12 1218.34 L1845.71 1218.34 L1846.29 1218.34 L1846.88 1218.34 L1847.47 1218.34 L1848.05 1218.34 L1848.64 1218.34 L1849.22 1218.34 L1849.81 1218.34 L1850.4 1218.34 L1850.98 1218.34 L1851.57 1218.34 L1852.16 1218.34 L1852.74 1218.34 L1853.33 1218.34 L1853.92 1218.34 L1854.5 1218.34 L1855.09 1218.34 L1855.68 1218.34 L1856.26 1218.34 L1856.85 1218.34 L1857.43 1218.34 L1858.02 1218.34 L1858.61 1218.34 L1859.19 1218.34 L1859.78 1218.34 L1860.37 1218.34 L1860.95 1218.34 L1861.54 1218.34 L1862.13 1218.34 L1862.71 1218.34 L1863.3 1218.34 L1863.88 1218.34 L1864.47 1218.34 L1865.06 1218.34 L1865.64 1218.34 L1866.23 1218.34 L1866.82 1218.34 L1867.4 1218.34 L1867.99 1218.34 L1868.58 1218.34 L1869.16 1218.34 L1869.75 1218.34 L1870.34 1218.34 L1870.92 1218.34 L1871.51 1218.34 L1872.09 1218.34 L1872.68 1218.34 L1873.27 1218.34 L1873.85 1218.34 L1874.44 1218.34 L1875.03 1218.34 L1875.61 1218.34 L1876.2 1218.34 L1876.79 1218.34 L1877.37 1218.34 L1877.96 1218.34 L1878.55 1218.34 L1879.13 1218.34 L1879.72 1218.34 L1880.3 1218.34 L1880.89 1218.34 L1881.48 1218.34 L1882.06 1218.34 L1882.65 1218.34 L1883.24 1218.34 L1883.82 1218.34 L1884.41 1218.34 L1885 1218.34 L1885.58 1218.34 L1886.17 1218.34 L1886.76 1218.34 L1887.34 1218.34 L1887.93 1218.34 L1888.51 1218.34 L1889.1 1218.34 L1889.69 1218.34 L1890.27 1218.34 L1890.86 1218.34 L1891.45 1218.34 L1892.03 1218.34 L1892.62 1218.34 L1893.21 1218.34 L1893.79 1218.34 L1894.38 1218.34 L1894.96 1218.34 L1895.55 1218.34 L1896.14 1218.34 L1896.72 1218.34 L1897.31 1218.34 L1897.9 1218.34 L1898.48 1218.34 L1899.07 1218.34 L1899.66 1218.34 L1900.24 1218.34 L1900.83 1218.34 L1901.42 1218.34 L1902 1218.34 L1902.59 1218.34 L1903.17 1218.34 L1903.76 1218.34 L1904.35 1218.34 L1904.93 1218.34 L1905.52 1218.34 L1906.11 1218.34 L1906.69 1218.34 L1907.28 1218.34 L1907.87 1218.34 L1908.45 1218.34 L1909.04 1218.34 L1909.63 1218.34 L1910.21 1218.34 L1910.8 1218.34 L1911.38 1218.34 L1911.97 1218.34 L1912.56 1218.34 L1913.14 1218.34 L1913.73 1218.34 L1914.32 1218.34 L1914.9 1218.34 L1915.49 1218.34 L1916.08 1218.34 L1916.66 1218.34 L1917.25 1218.34 L1917.83 1218.34 L1918.42 1218.34 L1919.01 1218.34 L1919.59 1218.34 L1920.18 1218.34 L1920.77 1218.34 L1921.35 1218.34 L1921.94 1218.34 L1922.53 1218.34 L1923.11 1218.34 L1923.7 1218.34 L1924.29 1218.34 L1924.87 1218.34 L1925.46 1218.34 L1926.04 1218.34 L1926.63 1218.34 L1927.22 1218.34 L1927.8 1218.34 L1928.39 1218.34 L1928.98 1218.34 L1929.56 1218.34 L1930.15 1218.34 L1930.74 1218.34 L1931.32 1218.34 L1931.91 1218.34 L1932.5 1218.34 L1933.08 1218.34 L1933.67 1218.34 L1934.25 1218.34 L1934.84 1218.34 L1935.43 1218.34 L1936.01 1218.34 L1936.6 1218.34 L1937.19 1218.34 L1937.77 1218.34 L1938.36 1218.34 L1938.95 1218.34 L1939.53 1218.34 L1940.12 1218.34 L1940.71 1218.34 L1941.29 1218.34 L1941.88 1218.34 L1942.46 1218.34 L1943.05 1218.34 L1943.64 1218.34 L1944.22 1218.34 L1944.81 1218.34 L1945.4 1218.34 L1945.98 1218.34 L1946.57 1218.34 L1947.16 1218.34 L1947.74 1218.34 L1948.33 1218.34 L1948.91 1218.34 L1949.5 1218.34 L1950.09 1218.34 L1950.67 1218.34 L1951.26 1218.34 L1951.85 1218.34 L1952.43 1218.34 L1953.02 1218.34 L1953.61 1218.34 L1954.19 1218.34 L1954.78 1218.34 L1955.37 1218.34 L1955.95 1218.34 L1956.54 1218.34 L1957.12 1218.34 L1957.71 1218.34 L1958.3 1218.34 L1958.88 1218.34 L1959.47 1218.34 L1960.06 1218.34 L1960.64 1218.34 L1961.23 1218.34 L1961.82 1218.34 L1962.4 1218.34 L1962.99 1218.34 L1963.58 1218.34 L1964.16 1218.34 L1964.75 1218.34 L1965.33 1218.34 L1965.92 1218.34 L1966.51 1218.34 L1967.09 1218.34 L1967.68 1218.34 L1968.27 1218.34 L1968.85 1218.34 L1969.44 1218.34 L1970.03 1218.34 L1970.61 1218.34 L1971.2 1218.34 L1971.78 1218.34 L1972.37 1218.34 L1972.96 1218.34 L1973.54 1218.34 L1974.13 1218.34 L1974.72 1218.34 L1975.3 1218.34 L1975.89 1218.34 L1976.48 1218.34 L1977.06 1218.34 L1977.65 1218.34 L1978.24 1218.34 L1978.82 1218.34 L1979.41 1218.34 L1979.99 1218.34 L1980.58 1218.34 L1981.17 1218.34 L1981.75 1218.34 L1982.34 1218.34 L1982.93 1218.34 L1983.51 1218.34 L1984.1 1218.34 L1984.69 1218.34 L1985.27 1218.34 L1985.86 1218.34 L1986.45 1218.34 L1987.03 1218.34 L1987.62 1218.34 L1988.2 1218.34 L1988.79 1218.34 L1989.38 1218.34 L1989.96 1218.34 L1990.55 1218.34 L1991.14 1218.34 L1991.72 1218.34 L1992.31 1218.34 L1992.9 1218.34 L1993.48 1218.34 L1994.07 1218.34 L1994.65 1218.34 L1995.24 1218.34 L1995.83 1218.34 L1996.41 1218.34 L1997 1218.34 L1997.59 1218.34 L1998.17 1218.34 L1998.76 1218.34 L1999.35 1218.34 L1999.93 1218.34 L2000.52 1218.34 L2001.11 1218.34 L2001.69 1218.34 L2002.28 1218.34 L2002.86 1218.34 L2003.45 1218.34 L2004.04 1218.34 L2004.62 1218.34 L2005.21 1218.34 L2005.8 1218.34 L2006.38 1218.34 L2006.97 1218.34 L2007.56 1218.34 L2008.14 1218.34 L2008.73 1218.34 L2009.32 1218.34 L2009.9 1218.34 L2010.49 1218.34 L2011.07 1218.34 L2011.66 1218.34 L2012.25 1218.34 L2012.83 1218.34 L2013.42 1218.34 L2014.01 1218.34 L2014.59 1218.34 L2015.18 1218.34 L2015.77 1218.34 L2016.35 1218.34 L2016.94 1218.34 L2017.53 1218.34 L2018.11 1218.34 L2018.7 1218.34 L2019.28 1218.34 L2019.87 1218.34 L2020.46 1218.34 L2021.04 1218.34 L2021.63 1218.34 L2022.22 1218.34 L2022.8 1218.34 L2023.39 1218.34 L2023.98 1218.34 L2024.56 1218.34 L2025.15 1218.34 L2025.73 1218.34 L2026.32 1218.34 L2026.91 1218.34 L2027.49 1218.34 L2028.08 1218.34 L2028.67 1218.34 L2029.25 1218.34 L2029.84 1218.34 L2030.43 1218.34 L2031.01 1218.34 L2031.6 1218.34 L2032.19 1218.34 L2032.77 1218.34 L2033.36 1218.34 L2033.94 1218.34 L2034.53 1218.34 L2035.12 1218.34 L2035.7 1218.34 L2036.29 1218.34 L2036.88 1218.34 L2037.46 1218.34 L2038.05 1218.34 L2038.64 1218.34 L2039.22 1218.34 L2039.81 1218.34 L2040.4 1218.34 L2040.98 1218.34 L2041.57 1218.34 L2042.15 1218.34 L2042.74 1218.34 L2043.33 1218.34 L2043.91 1218.34 L2044.5 1218.34 L2045.09 1218.34 L2045.67 1218.34 L2046.26 1218.34 L2046.85 1218.34 L2047.43 1218.34 L2048.02 1218.34 L2048.6 1218.34 L2049.19 1218.34 L2049.78 1218.34 L2050.36 1218.34 L2050.95 1218.34 L2051.54 1218.34 L2052.12 1218.34 L2052.71 1218.34 L2053.3 1218.34 L2053.88 1218.34 L2054.47 1218.34 L2055.06 1218.34 L2055.64 1218.34 L2056.23 1218.34 L2056.81 1218.34 L2057.4 1218.34 L2057.99 1218.34 L2058.57 1218.34 L2059.16 1218.34 L2059.75 1218.34 L2060.33 1218.34 L2060.92 1218.34 L2061.51 1218.34 L2062.09 1218.34 L2062.68 1218.34 L2063.27 1218.34 L2063.85 1218.34 L2064.44 1218.34 L2065.02 1218.34 L2065.61 1218.34 L2066.2 1218.34 L2066.78 1218.34 L2067.37 1218.34 L2067.96 1218.34 L2068.54 1218.34 L2069.13 1218.34 L2069.72 1218.34 L2070.3 1218.34 L2070.89 1218.34 L2071.48 1218.34 L2072.06 1218.34 L2072.65 1218.34 L2073.23 1218.34 L2073.82 1218.34 L2074.41 1218.34 L2074.99 1218.34 L2075.58 1218.34 L2076.17 1218.34 L2076.75 1218.34 L2077.34 1218.34 L2077.93 1218.34 L2078.51 1218.34 L2079.1 1218.34 L2079.68 1218.34 L2080.27 1218.34 L2080.86 1218.34 L2081.44 1218.34 L2082.03 1218.34 L2082.62 1218.34 L2083.2 1218.34 L2083.79 1218.34 L2084.38 1218.34 L2084.96 1218.34 L2085.55 1218.34 L2086.14 1218.34 L2086.72 1218.34 L2087.31 1218.34 L2087.89 1218.34 L2088.48 1218.34 L2089.07 1218.34 L2089.65 1218.34 L2090.24 1218.34 L2090.83 1218.34 L2091.41 1218.34 L2092 1218.34 L2092.59 1218.34 L2093.17 1218.34 L2093.76 1218.34 L2094.35 1218.34 L2094.93 1218.34 L2095.52 1218.34 L2096.1 1218.34 L2096.69 1218.34 L2097.28 1218.34 L2097.86 1218.34 L2098.45 1218.34 L2099.04 1218.34 L2099.62 1218.34 L2100.21 1218.34 L2100.8 1218.34 L2101.38 1218.34 L2101.97 1218.34 L2102.55 1218.34 L2103.14 1218.34 L2103.73 1218.34 L2104.31 1218.34 L2104.9 1218.34 L2105.49 1218.34 L2106.07 1218.34 L2106.66 1218.34 L2107.25 1218.34 L2107.83 1218.34 L2108.42 1218.34 L2109.01 1218.34 L2109.59 1218.34 L2110.18 1218.34 L2110.76 1218.34 L2111.35 1218.34 L2111.94 1218.34 L2112.52 1218.34 L2113.11 1218.34 L2113.7 1218.34 L2114.28 1218.34 L2114.87 1218.34 L2115.46 1218.34 L2116.04 1218.34 L2116.63 1218.34 L2117.22 1218.34 L2117.8 1218.34 L2118.39 1218.34 L2118.97 1218.34 L2119.56 1218.34 L2120.15 1218.34 L2120.73 1218.34 L2121.32 1218.34 L2121.91 1218.34 L2122.49 1218.34 L2123.08 1218.34 L2123.67 1218.34 L2124.25 1218.34 L2124.84 1218.34 L2125.42 1218.34 L2126.01 1218.34 L2126.6 1218.34 L2127.18 1218.34 L2127.77 1218.34 L2128.36 1218.34 L2128.94 1218.34 L2129.53 1218.34 L2130.12 1218.34 L2130.7 1218.34 L2131.29 1218.34 L2131.88 1218.34 L2132.46 1218.34 L2133.05 1218.34 L2133.63 1218.34 L2134.22 1218.34 L2134.81 1218.34 L2135.39 1218.34 L2135.98 1218.34 L2136.57 1218.34 L2137.15 1218.34 L2137.74 1218.34 L2138.33 1218.34 L2138.91 1218.34 L2139.5 1218.34 L2140.09 1218.34 L2140.67 1218.34 L2141.26 1218.34 L2141.84 1218.34 L2142.43 1218.34 L2143.02 1218.34 L2143.6 1218.34 L2144.19 1218.34 L2144.78 1218.34 L2145.36 1218.34 L2145.95 1218.34 L2146.54 1218.34 L2147.12 1218.34 L2147.71 1218.34 L2148.3 1218.34 L2148.88 1218.34 L2149.47 1218.34 L2150.05 1218.34 L2150.64 1218.34 L2151.23 1218.34 L2151.81 1218.34 L2152.4 1218.34 L2152.99 1218.34 L2153.57 1218.34 L2154.16 1218.34 L2154.75 1218.34 L2155.33 1218.34 L2155.92 1218.34 L2156.5 1218.34 L2157.09 1218.34 L2157.68 1218.34 L2158.26 1218.34 L2158.26 1218.22 L2157.68 1218.22 L2157.09 1218.22 L2156.5 1218.22 L2155.92 1218.22 L2155.33 1218.22 L2154.75 1218.22 L2154.16 1218.22 L2153.57 1218.22 L2152.99 1218.22 L2152.4 1218.22 L2151.81 1218.22 L2151.23 1218.22 L2150.64 1218.22 L2150.05 1218.22 L2149.47 1218.22 L2148.88 1218.22 L2148.3 1218.22 L2147.71 1218.22 L2147.12 1218.22 L2146.54 1218.22 L2145.95 1218.22 L2145.36 1218.22 L2144.78 1218.22 L2144.19 1218.22 L2143.6 1218.22 L2143.02 1218.22 L2142.43 1218.22 L2141.84 1218.22 L2141.26 1218.22 L2140.67 1218.22 L2140.09 1218.22 L2139.5 1218.22 L2138.91 1218.22 L2138.33 1218.22 L2137.74 1218.22 L2137.15 1218.22 L2136.57 1218.22 L2135.98 1218.22 L2135.39 1218.22 L2134.81 1218.22 L2134.22 1218.22 L2133.63 1218.22 L2133.05 1218.22 L2132.46 1218.22 L2131.88 1218.22 L2131.29 1218.22 L2130.7 1218.22 L2130.12 1218.22 L2129.53 1218.22 L2128.94 1218.22 L2128.36 1218.22 L2127.77 1218.22 L2127.18 1218.22 L2126.6 1218.22 L2126.01 1218.22 L2125.42 1218.22 L2124.84 1218.22 L2124.25 1218.22 L2123.67 1218.22 L2123.08 1218.22 L2122.49 1218.22 L2121.91 1218.22 L2121.32 1218.22 L2120.73 1218.22 L2120.15 1218.22 L2119.56 1218.22 L2118.97 1218.22 L2118.39 1218.22 L2117.8 1218.22 L2117.22 1218.22 L2116.63 1218.22 L2116.04 1218.22 L2115.46 1218.22 L2114.87 1218.22 L2114.28 1218.22 L2113.7 1218.22 L2113.11 1218.22 L2112.52 1218.22 L2111.94 1218.22 L2111.35 1218.22 L2110.76 1218.22 L2110.18 1218.22 L2109.59 1218.22 L2109.01 1218.22 L2108.42 1218.22 L2107.83 1218.22 L2107.25 1218.22 L2106.66 1218.22 L2106.07 1218.22 L2105.49 1218.22 L2104.9 1218.22 L2104.31 1218.22 L2103.73 1218.22 L2103.14 1218.22 L2102.55 1218.22 L2101.97 1218.22 L2101.38 1218.22 L2100.8 1218.22 L2100.21 1218.22 L2099.62 1218.22 L2099.04 1218.22 L2098.45 1218.22 L2097.86 1218.22 L2097.28 1218.22 L2096.69 1218.22 L2096.1 1218.22 L2095.52 1218.22 L2094.93 1218.22 L2094.35 1218.22 L2093.76 1218.22 L2093.17 1218.22 L2092.59 1218.22 L2092 1218.22 L2091.41 1218.22 L2090.83 1218.22 L2090.24 1218.22 L2089.65 1218.22 L2089.07 1218.22 L2088.48 1218.22 L2087.89 1218.22 L2087.31 1218.22 L2086.72 1218.22 L2086.14 1218.22 L2085.55 1218.22 L2084.96 1218.22 L2084.38 1218.22 L2083.79 1218.22 L2083.2 1218.22 L2082.62 1218.22 L2082.03 1218.22 L2081.44 1218.22 L2080.86 1218.22 L2080.27 1218.22 L2079.68 1218.22 L2079.1 1218.22 L2078.51 1218.22 L2077.93 1218.22 L2077.34 1218.22 L2076.75 1218.22 L2076.17 1218.22 L2075.58 1218.22 L2074.99 1218.22 L2074.41 1218.22 L2073.82 1218.22 L2073.23 1218.22 L2072.65 1218.22 L2072.06 1218.22 L2071.48 1218.22 L2070.89 1218.22 L2070.3 1218.22 L2069.72 1218.22 L2069.13 1218.22 L2068.54 1218.22 L2067.96 1218.22 L2067.37 1218.22 L2066.78 1218.22 L2066.2 1218.22 L2065.61 1218.22 L2065.02 1218.22 L2064.44 1218.22 L2063.85 1218.22 L2063.27 1218.22 L2062.68 1218.22 L2062.09 1218.22 L2061.51 1218.22 L2060.92 1218.22 L2060.33 1218.22 L2059.75 1218.22 L2059.16 1218.22 L2058.57 1218.22 L2057.99 1218.22 L2057.4 1218.22 L2056.81 1218.22 L2056.23 1218.22 L2055.64 1218.22 L2055.06 1218.22 L2054.47 1218.22 L2053.88 1218.22 L2053.3 1218.22 L2052.71 1218.22 L2052.12 1218.22 L2051.54 1218.22 L2050.95 1218.22 L2050.36 1218.22 L2049.78 1218.22 L2049.19 1218.22 L2048.6 1218.22 L2048.02 1218.22 L2047.43 1218.22 L2046.85 1218.22 L2046.26 1218.22 L2045.67 1218.22 L2045.09 1218.22 L2044.5 1218.22 L2043.91 1218.22 L2043.33 1218.22 L2042.74 1218.22 L2042.15 1218.22 L2041.57 1218.22 L2040.98 1218.22 L2040.4 1218.22 L2039.81 1218.22 L2039.22 1218.22 L2038.64 1218.22 L2038.05 1218.22 L2037.46 1218.22 L2036.88 1218.22 L2036.29 1218.22 L2035.7 1218.22 L2035.12 1218.22 L2034.53 1218.22 L2033.94 1218.22 L2033.36 1218.22 L2032.77 1218.22 L2032.19 1218.22 L2031.6 1218.22 L2031.01 1218.22 L2030.43 1218.22 L2029.84 1218.22 L2029.25 1218.22 L2028.67 1218.22 L2028.08 1218.22 L2027.49 1218.22 L2026.91 1218.22 L2026.32 1218.22 L2025.73 1218.22 L2025.15 1218.22 L2024.56 1218.22 L2023.98 1218.22 L2023.39 1218.22 L2022.8 1218.22 L2022.22 1218.22 L2021.63 1218.22 L2021.04 1218.22 L2020.46 1218.22 L2019.87 1218.22 L2019.28 1218.22 L2018.7 1218.22 L2018.11 1218.22 L2017.53 1218.22 L2016.94 1218.22 L2016.35 1218.22 L2015.77 1218.22 L2015.18 1218.22 L2014.59 1218.22 L2014.01 1218.22 L2013.42 1218.22 L2012.83 1218.22 L2012.25 1218.22 L2011.66 1218.22 L2011.07 1218.22 L2010.49 1218.22 L2009.9 1218.22 L2009.32 1218.22 L2008.73 1218.22 L2008.14 1218.22 L2007.56 1218.22 L2006.97 1218.22 L2006.38 1218.22 L2005.8 1218.22 L2005.21 1218.22 L2004.62 1218.22 L2004.04 1218.22 L2003.45 1218.22 L2002.86 1218.22 L2002.28 1218.22 L2001.69 1218.22 L2001.11 1218.22 L2000.52 1218.22 L1999.93 1218.22 L1999.35 1218.22 L1998.76 1218.22 L1998.17 1218.22 L1997.59 1218.22 L1997 1218.22 L1996.41 1218.22 L1995.83 1218.22 L1995.24 1218.22 L1994.65 1218.22 L1994.07 1218.22 L1993.48 1218.22 L1992.9 1218.22 L1992.31 1218.22 L1991.72 1218.22 L1991.14 1218.22 L1990.55 1218.22 L1989.96 1218.22 L1989.38 1218.22 L1988.79 1218.22 L1988.2 1218.22 L1987.62 1218.22 L1987.03 1218.22 L1986.45 1218.22 L1985.86 1218.22 L1985.27 1218.22 L1984.69 1218.22 L1984.1 1218.22 L1983.51 1218.22 L1982.93 1218.22 L1982.34 1218.22 L1981.75 1218.22 L1981.17 1218.22 L1980.58 1218.22 L1979.99 1218.22 L1979.41 1218.22 L1978.82 1218.22 L1978.24 1218.22 L1977.65 1218.22 L1977.06 1218.22 L1976.48 1218.22 L1975.89 1218.22 L1975.3 1218.22 L1974.72 1218.22 L1974.13 1218.22 L1973.54 1218.22 L1972.96 1218.22 L1972.37 1218.22 L1971.78 1218.22 L1971.2 1218.22 L1970.61 1218.22 L1970.03 1218.22 L1969.44 1218.22 L1968.85 1218.22 L1968.27 1218.22 L1967.68 1218.22 L1967.09 1218.22 L1966.51 1218.22 L1965.92 1218.22 L1965.33 1218.22 L1964.75 1218.22 L1964.16 1218.22 L1963.58 1218.22 L1962.99 1218.22 L1962.4 1218.22 L1961.82 1218.22 L1961.23 1218.22 L1960.64 1218.22 L1960.06 1218.22 L1959.47 1218.22 L1958.88 1218.22 L1958.3 1218.22 L1957.71 1218.22 L1957.12 1218.22 L1956.54 1218.22 L1955.95 1218.22 L1955.37 1218.22 L1954.78 1218.22 L1954.19 1218.22 L1953.61 1218.22 L1953.02 1218.22 L1952.43 1218.22 L1951.85 1218.22 L1951.26 1218.22 L1950.67 1218.22 L1950.09 1218.22 L1949.5 1218.22 L1948.91 1218.22 L1948.33 1218.22 L1947.74 1218.22 L1947.16 1218.22 L1946.57 1218.22 L1945.98 1218.22 L1945.4 1218.22 L1944.81 1218.22 L1944.22 1218.22 L1943.64 1218.22 L1943.05 1218.22 L1942.46 1218.22 L1941.88 1218.22 L1941.29 1218.22 L1940.71 1218.22 L1940.12 1218.22 L1939.53 1218.22 L1938.95 1218.22 L1938.36 1218.22 L1937.77 1218.22 L1937.19 1218.22 L1936.6 1218.22 L1936.01 1218.22 L1935.43 1218.22 L1934.84 1218.22 L1934.25 1218.22 L1933.67 1218.22 L1933.08 1218.22 L1932.5 1218.22 L1931.91 1218.22 L1931.32 1218.22 L1930.74 1218.22 L1930.15 1218.22 L1929.56 1218.22 L1928.98 1218.22 L1928.39 1218.22 L1927.8 1218.22 L1927.22 1218.22 L1926.63 1218.22 L1926.04 1218.22 L1925.46 1218.22 L1924.87 1218.22 L1924.29 1218.22 L1923.7 1218.22 L1923.11 1218.22 L1922.53 1218.22 L1921.94 1218.22 L1921.35 1218.22 L1920.77 1218.22 L1920.18 1218.22 L1919.59 1218.22 L1919.01 1218.22 L1918.42 1218.22 L1917.83 1218.22 L1917.25 1218.22 L1916.66 1218.22 L1916.08 1218.22 L1915.49 1218.22 L1914.9 1218.22 L1914.32 1218.22 L1913.73 1218.22 L1913.14 1218.22 L1912.56 1218.22 L1911.97 1218.22 L1911.38 1218.22 L1910.8 1218.22 L1910.21 1218.22 L1909.63 1218.22 L1909.04 1218.22 L1908.45 1218.22 L1907.87 1218.22 L1907.28 1218.22 L1906.69 1218.22 L1906.11 1218.22 L1905.52 1218.22 L1904.93 1218.22 L1904.35 1218.22 L1903.76 1218.22 L1903.17 1218.22 L1902.59 1218.22 L1902 1218.22 L1901.42 1218.22 L1900.83 1218.22 L1900.24 1218.22 L1899.66 1218.22 L1899.07 1218.22 L1898.48 1218.22 L1897.9 1218.22 L1897.31 1218.22 L1896.72 1218.22 L1896.14 1218.22 L1895.55 1218.22 L1894.96 1218.22 L1894.38 1218.22 L1893.79 1218.22 L1893.21 1218.22 L1892.62 1218.22 L1892.03 1218.22 L1891.45 1218.22 L1890.86 1218.22 L1890.27 1218.22 L1889.69 1218.22 L1889.1 1218.22 L1888.51 1218.22 L1887.93 1218.22 L1887.34 1218.22 L1886.76 1218.22 L1886.17 1218.22 L1885.58 1218.22 L1885 1218.22 L1884.41 1218.22 L1883.82 1218.22 L1883.24 1218.22 L1882.65 1218.22 L1882.06 1218.22 L1881.48 1218.22 L1880.89 1218.22 L1880.3 1218.22 L1879.72 1218.22 L1879.13 1218.22 L1878.55 1218.22 L1877.96 1218.22 L1877.37 1218.22 L1876.79 1218.22 L1876.2 1218.22 L1875.61 1218.22 L1875.03 1218.22 L1874.44 1218.22 L1873.85 1218.22 L1873.27 1218.22 L1872.68 1218.22 L1872.09 1218.22 L1871.51 1218.22 L1870.92 1218.22 L1870.34 1218.22 L1869.75 1218.22 L1869.16 1218.22 L1868.58 1218.22 L1867.99 1218.22 L1867.4 1218.22 L1866.82 1218.22 L1866.23 1218.22 L1865.64 1218.22 L1865.06 1218.22 L1864.47 1218.22 L1863.88 1218.22 L1863.3 1218.22 L1862.71 1218.22 L1862.13 1218.22 L1861.54 1218.22 L1860.95 1218.22 L1860.37 1218.22 L1859.78 1218.22 L1859.19 1218.22 L1858.61 1218.22 L1858.02 1218.22 L1857.43 1218.22 L1856.85 1218.22 L1856.26 1218.22 L1855.68 1218.22 L1855.09 1218.22 L1854.5 1218.22 L1853.92 1218.22 L1853.33 1218.22 L1852.74 1218.22 L1852.16 1218.22 L1851.57 1218.22 L1850.98 1218.22 L1850.4 1218.22 L1849.81 1218.22 L1849.22 1218.22 L1848.64 1218.22 L1848.05 1218.22 L1847.47 1218.22 L1846.88 1218.22 L1846.29 1218.22 L1845.71 1218.22 L1845.12 1218.22 L1844.53 1218.22 L1843.95 1218.22 L1843.36 1218.22 L1842.77 1218.22 L1842.19 1218.22 L1841.6 1218.22 L1841.01 1218.22 L1840.43 1218.22 L1839.84 1218.22 L1839.26 1218.22 L1838.67 1218.22 L1838.08 1218.22 L1837.5 1218.22 L1836.91 1218.22 L1836.32 1218.22 L1835.74 1218.22 L1835.15 1218.22 L1834.56 1218.22 L1833.98 1218.22 L1833.39 1218.22 L1832.81 1218.22 L1832.22 1218.22 L1831.63 1218.22 L1831.05 1218.22 L1830.46 1218.22 L1829.87 1218.22 L1829.29 1218.22 L1828.7 1218.22 L1828.11 1218.22 L1827.53 1218.22 L1826.94 1218.22 L1826.35 1218.22 L1825.77 1218.22 L1825.18 1218.22 L1824.6 1218.22 L1824.01 1218.22 L1823.42 1218.22 L1822.84 1218.22 L1822.25 1218.22 L1821.66 1218.22 L1821.08 1218.22 L1820.49 1218.22 L1819.9 1218.22 L1819.32 1218.22 L1818.73 1218.22 L1818.14 1218.22 L1817.56 1218.22 L1816.97 1218.22 L1816.39 1218.22 L1815.8 1218.22 L1815.21 1218.22 L1814.63 1218.22 L1814.04 1218.22 L1813.45 1218.22 L1812.87 1218.22 L1812.28 1218.22 L1811.69 1218.22 L1811.11 1218.22 L1810.52 1218.22 L1809.94 1218.22 L1809.35 1218.22 L1808.76 1218.22 L1808.18 1218.22 L1807.59 1218.22 L1807 1218.22 L1806.42 1218.22 L1805.83 1218.22 L1805.24 1218.22 L1804.66 1218.22 L1804.07 1218.22 L1803.48 1218.22 L1802.9 1218.22 L1802.31 1218.22 L1801.73 1218.22 L1801.14 1218.22 L1800.55 1218.22 L1799.97 1218.22 L1799.38 1218.22 L1798.79 1218.22 L1798.21 1218.22 L1797.62 1218.22 L1797.03 1218.22 L1796.45 1218.22 L1795.86 1218.22 L1795.27 1218.22 L1794.69 1218.22 L1794.1 1218.22 L1793.52 1218.22 L1792.93 1218.22 L1792.34 1218.22 L1791.76 1218.22 L1791.17 1218.22 L1790.58 1218.22 L1790 1218.22 L1789.41 1218.22 L1788.82 1218.22 L1788.24 1218.22 L1787.65 1218.22 L1787.06 1218.22 L1786.48 1218.22 L1785.89 1218.22 L1785.31 1218.22 L1784.72 1218.22 L1784.13 1218.22 L1783.55 1218.22 L1782.96 1218.22 L1782.37 1218.22 L1781.79 1218.22 L1781.2 1218.22 L1780.61 1218.22 L1780.03 1218.22 L1779.44 1218.22 L1778.86 1218.22 L1778.27 1218.22 L1777.68 1218.22 L1777.1 1218.22 L1776.51 1218.22 L1775.92 1218.22 L1775.34 1218.22 L1774.75 1218.22 L1774.16 1218.22 L1773.58 1218.22 L1772.99 1218.22 L1772.4 1218.22 L1771.82 1218.22 L1771.23 1218.22 L1770.65 1218.22 L1770.06 1218.22 L1769.47 1218.22 L1768.89 1218.22 L1768.3 1218.22 L1767.71 1218.22 L1767.13 1218.22 L1766.54 1218.22 L1765.95 1218.22 L1765.37 1218.22 L1764.78 1218.22 L1764.19 1218.22 L1763.61 1218.22 L1763.02 1218.22 L1762.44 1218.22 L1761.85 1218.22 L1761.26 1218.22 L1760.68 1218.22 L1760.09 1218.22 L1759.5 1218.22 L1758.92 1218.22 L1758.33 1218.22 L1757.74 1218.22 L1757.16 1218.22 L1756.57 1218.22 L1755.99 1218.22 L1755.4 1218.22 L1754.81 1218.22 L1754.23 1218.22 L1753.64 1218.22 L1753.05 1218.22 L1752.47 1218.22 L1751.88 1218.22 L1751.29 1218.22 L1750.71 1218.22 L1750.12 1218.22 L1749.53 1218.22 L1748.95 1218.22 L1748.36 1218.22 L1747.78 1218.22 L1747.19 1218.22 L1746.6 1218.22 L1746.02 1218.22 L1745.43 1218.22 L1744.84 1218.22 L1744.26 1218.22 L1743.67 1218.22 L1743.08 1218.22 L1742.5 1218.22 L1741.91 1218.22 L1741.32 1218.22 L1740.74 1218.22 L1740.15 1218.22 L1739.57 1218.22 L1738.98 1218.22 L1738.39 1218.22 L1737.81 1218.22 L1737.22 1218.22 L1736.63 1218.22 L1736.05 1218.22 L1735.46 1218.22 L1734.87 1218.22 L1734.29 1218.22 L1733.7 1218.22 L1733.11 1218.22 L1732.53 1218.22 L1731.94 1218.22 L1731.36 1218.22 L1730.77 1218.22 L1730.18 1218.22 L1729.6 1218.22 L1729.01 1218.22 L1728.42 1218.22 L1727.84 1218.22 L1727.25 1218.22 L1726.66 1218.22 L1726.08 1218.22 L1725.49 1218.22 L1724.91 1218.22 L1724.32 1218.22 L1723.73 1218.22 L1723.15 1218.22 L1722.56 1218.22 L1721.97 1218.22 L1721.39 1218.22 L1720.8 1218.22 L1720.21 1218.22 L1719.63 1218.22 L1719.04 1218.22 L1718.45 1218.22 L1717.87 1218.22 L1717.28 1218.22 L1716.7 1218.22 L1716.11 1218.22 L1715.52 1218.22 L1714.94 1218.22 L1714.35 1218.22 L1713.76 1218.22 L1713.18 1218.22 L1712.59 1218.22 L1712 1218.22 L1711.42 1218.22 L1710.83 1218.22 L1710.24 1218.22 L1709.66 1218.22 L1709.07 1218.22 L1708.49 1218.22 L1707.9 1218.22 L1707.31 1218.22 L1706.73 1218.22 L1706.14 1218.22 L1705.55 1218.22 L1704.97 1218.22 L1704.38 1218.22 L1703.79 1218.22 L1703.21 1218.22 L1702.62 1218.22 L1702.04 1218.22 L1701.45 1218.22 L1700.86 1218.22 L1700.28 1218.22 L1699.69 1218.22 L1699.1 1218.22 L1698.52 1218.22 L1697.93 1218.22 L1697.34 1218.22 L1696.76 1218.22 L1696.17 1218.22 L1695.58 1218.22 L1695 1218.22 L1694.41 1218.22 L1693.83 1218.22 L1693.24 1218.22 L1692.65 1218.22 L1692.07 1218.22 L1691.48 1218.22 L1690.89 1218.22 L1690.31 1218.22 L1689.72 1218.22 L1689.13 1218.22 L1688.55 1218.22 L1687.96 1218.22 L1687.37 1218.22 L1686.79 1218.22 L1686.2 1218.22 L1685.62 1218.22 L1685.03 1218.22 L1684.44 1218.22 L1683.86 1218.22 L1683.27 1218.22 L1682.68 1218.22 L1682.1 1218.22 L1681.51 1218.22 L1680.92 1218.22 L1680.34 1218.22 L1679.75 1218.22 L1679.17 1218.22 L1678.58 1218.22 L1677.99 1218.22 L1677.41 1218.22 L1676.82 1218.22 L1676.23 1218.22 L1675.65 1218.22 L1675.06 1218.22 L1674.47 1218.22 L1673.89 1218.22 L1673.3 1218.22 L1672.71 1218.22 L1672.13 1218.22 L1671.54 1218.22 L1670.96 1218.22 L1670.37 1218.22 L1669.78 1218.22 L1669.2 1218.22 L1668.61 1218.22 L1668.02 1218.22 L1667.44 1218.22 L1666.85 1218.22 L1666.26 1218.22 L1665.68 1218.22 L1665.09 1218.22 L1664.5 1218.22 L1663.92 1218.22 L1663.33 1218.22 L1662.75 1218.22 L1662.16 1218.22 L1661.57 1218.22 L1660.99 1218.22 L1660.4 1218.22 L1659.81 1218.22 L1659.23 1218.22 L1658.64 1218.22 L1658.05 1218.22 L1657.47 1218.22 L1656.88 1218.22 L1656.29 1218.22 L1655.71 1218.22 L1655.12 1218.22 L1654.54 1218.22 L1653.95 1218.22 L1653.36 1218.22 L1652.78 1218.22 L1652.19 1218.22 L1651.6 1218.22 L1651.02 1218.22 L1650.43 1218.22 L1649.84 1218.22 L1649.26 1218.22 L1648.67 1218.22 L1648.09 1218.22 L1647.5 1218.22 L1646.91 1218.22 L1646.33 1218.22 L1645.74 1218.22 L1645.15 1218.22 L1644.57 1218.22 L1643.98 1218.22 L1643.39 1218.22 L1642.81 1218.22 L1642.22 1218.22 L1641.63 1218.22 L1641.05 1218.22 L1640.46 1218.22 L1639.88 1218.22 L1639.29 1218.22 L1638.7 1218.22 L1638.12 1218.22 L1637.53 1218.22 L1636.94 1218.22 L1636.36 1218.22 L1635.77 1218.22 L1635.18 1218.22 L1634.6 1218.22 L1634.01 1218.22 L1633.42 1218.22 L1632.84 1218.22 L1632.25 1218.22 L1631.67 1218.22 L1631.08 1218.22 L1630.49 1218.22 L1629.91 1218.22 L1629.32 1218.22 L1628.73 1218.22 L1628.15 1218.22 L1627.56 1218.22 L1626.97 1218.22 L1626.39 1218.22 L1625.8 1218.22 L1625.22 1218.22 L1624.63 1218.22 L1624.04 1218.22 L1623.46 1218.22 L1622.87 1218.22 L1622.28 1218.22 L1621.7 1218.22 L1621.11 1218.22 L1620.52 1218.22 L1619.94 1218.22 L1619.35 1218.22 L1618.76 1218.22 L1618.18 1218.22 L1617.59 1218.22 L1617.01 1218.22 L1616.42 1218.22 L1615.83 1218.22 L1615.25 1218.22 L1614.66 1218.22 L1614.07 1218.22 L1613.49 1218.22 L1612.9 1218.22 L1612.31 1218.22 L1611.73 1218.22 L1611.14 1218.22 L1610.55 1218.22 L1609.97 1218.22 L1609.38 1218.22 L1608.8 1218.22 L1608.21 1218.22 L1607.62 1218.22 L1607.04 1218.22 L1606.45 1218.22 L1605.86 1218.22 L1605.28 1218.22 L1604.69 1218.22 L1604.1 1218.22 L1603.52 1218.22 L1602.93 1218.22 L1602.34 1218.22 L1601.76 1218.22 L1601.17 1218.22 L1600.59 1218.22 L1600 1218.22 L1599.41 1218.22 L1598.83 1218.22 L1598.24 1218.22 L1597.65 1218.22 L1597.07 1218.22 L1596.48 1218.22 L1595.89 1218.22 L1595.31 1218.22 L1594.72 1218.22 L1594.14 1218.22 L1593.55 1218.22 L1592.96 1218.22 L1592.38 1218.22 L1591.79 1218.22 L1591.2 1218.22 L1590.62 1218.22 L1590.03 1218.22 L1589.44 1218.22 L1588.86 1218.22 L1588.27 1218.22 L1587.68 1218.22 L1587.1 1218.22 L1586.51 1218.22 L1585.93 1218.22 L1585.34 1218.22 L1584.75 1218.22 L1584.17 1218.22 L1583.58 1218.22 L1582.99 1218.22 L1582.41 1218.22 L1581.82 1218.22 L1581.23 1218.22 L1580.65 1218.22 L1580.06 1218.22 L1579.47 1218.22 L1578.89 1218.22 L1578.3 1218.22 L1577.72 1218.22 L1577.13 1218.22 L1576.54 1218.22 L1575.96 1218.22 L1575.37 1218.22 L1574.78 1218.22 L1574.2 1218.22 L1573.61 1218.22 L1573.02 1218.22 L1572.44 1218.22 L1571.85 1218.22 L1571.27 1218.22 L1570.68 1218.22 L1570.09 1218.22 L1569.51 1218.22 L1568.92 1218.22 L1568.33 1218.22 L1567.75 1218.22 L1567.16 1218.22 L1566.57 1218.22 L1565.99 1218.22 L1565.4 1218.22 L1564.81 1218.22 L1564.23 1218.22 L1563.64 1218.22 L1563.06 1218.22 L1562.47 1218.22 L1561.88 1218.22 L1561.3 1218.22 L1560.71 1218.22 L1560.12 1218.22 L1559.54 1218.22 L1558.95 1218.22 L1558.36 1218.22 L1557.78 1218.22 L1557.19 1218.22 L1556.6 1218.22 L1556.02 1218.22 L1555.43 1218.22 L1554.85 1218.22 L1554.26 1218.22 L1553.67 1218.22 L1553.09 1218.22 L1552.5 1218.22 L1551.91 1218.22 L1551.33 1218.22 L1550.74 1218.22 L1550.15 1218.22 L1549.57 1218.22 L1548.98 1218.22 L1548.4 1218.22 L1547.81 1218.22 L1547.22 1218.22 L1546.64 1218.22 L1546.05 1218.22 L1545.46 1218.22 L1544.88 1218.22 L1544.29 1218.22 L1543.7 1218.22 L1543.12 1218.22 L1542.53 1218.22 L1541.94 1218.22 L1541.36 1218.22 L1540.77 1218.22 L1540.19 1218.22 L1539.6 1218.22 L1539.01 1218.22 L1538.43 1218.22 L1537.84 1218.22 L1537.25 1218.22 L1536.67 1218.22 L1536.08 1218.22 L1535.49 1218.22 L1534.91 1218.22 L1534.32 1218.22 L1533.73 1218.22 L1533.15 1218.22 L1532.56 1218.22 L1531.98 1218.22 L1531.39 1218.22 L1530.8 1218.22 L1530.22 1218.22 L1529.63 1218.22 L1529.04 1218.22 L1528.46 1218.22 L1527.87 1218.22 L1527.28 1218.22 L1526.7 1218.22 L1526.11 1218.22 L1525.52 1218.22 L1524.94 1218.22 L1524.35 1218.22 L1523.77 1218.22 L1523.18 1218.22 L1522.59 1218.22 L1522.01 1218.22 L1521.42 1218.22 L1520.83 1218.22 L1520.25 1218.22 L1519.66 1218.22 L1519.07 1218.22 L1518.49 1218.22 L1517.9 1218.22 L1517.32 1218.22 L1516.73 1218.22 L1516.14 1218.22 L1515.56 1218.22 L1514.97 1218.22 L1514.38 1218.22 L1513.8 1218.22 L1513.21 1218.22 L1512.62 1218.22 L1512.04 1218.22 L1511.45 1218.22 L1510.86 1218.22 L1510.28 1218.22 L1509.69 1218.22 L1509.11 1218.22 L1508.52 1218.22 L1507.93 1218.22 L1507.35 1218.22 L1506.76 1218.22 L1506.17 1218.22 L1505.59 1218.22 L1505 1218.22 L1504.41 1218.22 L1503.83 1218.22 L1503.24 1218.22 L1502.65 1218.22 L1502.07 1218.22 L1501.48 1218.22 L1500.9 1218.22 L1500.31 1218.22 L1499.72 1218.22 L1499.14 1218.22 L1498.55 1218.22 L1497.96 1218.22 L1497.38 1218.22 L1496.79 1218.22 L1496.2 1218.22 L1495.62 1218.22 L1495.03 1218.22 L1494.45 1218.22 L1493.86 1218.22 L1493.27 1218.22 L1492.69 1218.22 L1492.1 1218.22 L1491.51 1218.22 L1490.93 1218.22 L1490.34 1218.22 L1489.75 1218.22 L1489.17 1218.22 L1488.58 1218.22 L1487.99 1218.22 L1487.41 1218.22 L1486.82 1218.22 L1486.24 1218.22 L1485.65 1218.22 L1485.06 1218.22 L1484.48 1218.22 L1483.89 1218.22 L1483.3 1218.22 L1482.72 1218.22 L1482.13 1218.22 L1481.54 1218.22 L1480.96 1218.22 L1480.37 1218.22 L1479.78 1218.22 L1479.2 1218.22 L1478.61 1218.22 L1478.03 1218.22 L1477.44 1218.22 L1476.85 1218.22 L1476.27 1218.22 L1475.68 1218.22 L1475.09 1218.22 L1474.51 1218.22 L1473.92 1218.22 L1473.33 1218.22 L1472.75 1218.22 L1472.16 1218.22 L1471.57 1218.22 L1470.99 1218.22 L1470.4 1218.22 L1469.82 1218.22 L1469.23 1218.22 L1468.64 1218.22 L1468.06 1218.22 L1467.47 1218.22 L1466.88 1218.22 L1466.3 1218.22 L1465.71 1218.22 L1465.12 1218.22 L1464.54 1218.22 L1463.95 1218.22 L1463.37 1218.22 L1462.78 1218.22 L1462.19 1218.22 L1461.61 1218.22 L1461.02 1218.22 L1460.43 1218.22 L1459.85 1218.22 L1459.26 1218.22 L1458.67 1218.22 L1458.09 1218.22 L1457.5 1218.22 L1456.91 1218.22 L1456.33 1218.22 L1455.74 1218.22 L1455.16 1218.22 L1454.57 1218.22 L1453.98 1218.22 L1453.4 1218.22 L1452.81 1218.22 L1452.22 1218.22 L1451.64 1218.22 L1451.05 1218.22 L1450.46 1218.22 L1449.88 1218.22 L1449.29 1218.22 L1448.7 1218.22 L1448.12 1218.22 L1447.53 1218.22 L1446.95 1218.22 L1446.36 1218.22 L1445.77 1218.22 L1445.19 1218.22 L1444.6 1218.22 L1444.01 1218.22 L1443.43 1218.22 L1442.84 1218.22 L1442.25 1218.22 L1441.67 1218.22 L1441.08 1218.22 L1440.5 1218.22 L1439.91 1218.22 L1439.32 1218.22 L1438.74 1218.22 L1438.15 1218.22 L1437.56 1218.22 L1436.98 1218.22 L1436.39 1218.22 L1435.8 1218.22 L1435.22 1218.22 L1434.63 1218.22 L1434.04 1218.22 L1433.46 1218.22 L1432.87 1218.22 L1432.29 1218.22 L1431.7 1218.22 L1431.11 1218.22 L1430.53 1218.22 L1429.94 1218.22 L1429.35 1218.22 L1428.77 1218.22 L1428.18 1218.22 L1427.59 1218.22 L1427.01 1218.22 L1426.42 1218.22 L1425.83 1218.22 L1425.25 1218.22 L1424.66 1218.22 L1424.08 1218.22 L1423.49 1218.22 L1422.9 1218.22 L1422.32 1218.22 L1421.73 1218.22 L1421.14 1218.22 L1420.56 1218.22 L1419.97 1218.22 L1419.38 1218.22 L1418.8 1218.22 L1418.21 1218.22 L1417.63 1218.22 L1417.04 1218.22 L1416.45 1218.22 L1415.87 1218.22 L1415.28 1218.22 L1414.69 1218.22 L1414.11 1218.22 L1413.52 1218.22 L1412.93 1218.22 L1412.35 1218.22 L1411.76 1218.22 L1411.17 1218.22 L1410.59 1218.22 L1410 1218.22 L1409.42 1218.22 L1408.83 1218.22 L1408.24 1218.22 L1407.66 1218.22 L1407.07 1218.22 L1406.48 1218.22 L1405.9 1218.22 L1405.31 1218.22 L1404.72 1218.22 L1404.14 1218.22 L1403.55 1218.22 L1402.96 1218.22 L1402.38 1218.22 L1401.79 1218.22 L1401.21 1218.22 L1400.62 1218.22 L1400.03 1218.22 L1399.45 1218.22 L1398.86 1218.22 L1398.27 1218.22 L1397.69 1218.22 L1397.1 1218.22 L1396.51 1218.22 L1395.93 1218.22 L1395.34 1218.22 L1394.75 1218.22 L1394.17 1218.22 L1393.58 1218.22 L1393 1218.22 L1392.41 1218.22 L1391.82 1218.22 L1391.24 1218.22 L1390.65 1218.22 L1390.06 1218.22 L1389.48 1218.22 L1388.89 1218.22 L1388.3 1218.22 L1387.72 1218.22 L1387.13 1218.22 L1386.55 1218.22 L1385.96 1218.22 L1385.37 1218.22 L1384.79 1218.22 L1384.2 1218.22 L1383.61 1218.22 L1383.03 1218.22 L1382.44 1218.22 L1381.85 1218.22 L1381.27 1218.22 L1380.68 1218.22 L1380.09 1218.22 L1379.51 1218.22 L1378.92 1218.22 L1378.34 1218.22 L1377.75 1218.22 L1377.16 1218.22 L1376.58 1218.22 L1375.99 1218.22 L1375.4 1218.22 L1374.82 1218.22 L1374.23 1218.22 L1373.64 1218.22 L1373.06 1218.22 L1372.47 1218.22 L1371.88 1218.22 L1371.3 1218.22 L1370.71 1218.22 L1370.13 1218.22 L1369.54 1218.22 L1368.95 1218.22 L1368.37 1218.22 L1367.78 1218.22 L1367.19 1218.22 L1366.61 1218.22 L1366.02 1218.22 L1365.43 1218.22 L1364.85 1218.22 L1364.26 1218.22 L1363.68 1218.22 L1363.09 1218.22 L1362.5 1218.22 L1361.92 1218.22 L1361.33 1218.22 L1360.74 1218.22 L1360.16 1218.22 L1359.57 1218.22 L1358.98 1218.22 L1358.4 1218.22 L1357.81 1218.22 L1357.22 1218.22 L1356.64 1218.22 L1356.05 1218.22 L1355.47 1218.22 L1354.88 1218.22 L1354.29 1218.22 L1353.71 1218.22 L1353.12 1218.22 L1352.53 1218.22 L1351.95 1218.22 L1351.36 1218.22 L1350.77 1218.22 L1350.19 1218.22 L1349.6 1218.22 L1349.01 1218.22 L1348.43 1218.22 L1347.84 1218.22 L1347.26 1218.22 L1346.67 1218.22 L1346.08 1218.22 L1345.5 1218.22 L1344.91 1218.22 L1344.32 1218.22 L1343.74 1218.22 L1343.15 1218.22 L1342.56 1218.22 L1341.98 1218.22 L1341.39 1218.22 L1340.8 1218.22 L1340.22 1218.22 L1339.63 1218.22 L1339.05 1218.22 L1338.46 1218.22 L1337.87 1218.22 L1337.29 1218.22 L1336.7 1218.22 L1336.11 1218.22 L1335.53 1218.22 L1334.94 1218.22 L1334.35 1218.22 L1333.77 1218.22 L1333.18 1218.22 L1332.6 1218.22 L1332.01 1218.22 L1331.42 1218.22 L1330.84 1218.22 L1330.25 1218.22 L1329.66 1218.22 L1329.08 1218.22 L1328.49 1218.22 L1327.9 1218.22 L1327.32 1218.22 L1326.73 1218.22 L1326.14 1218.22 L1325.56 1218.22 L1324.97 1218.22 L1324.39 1218.22 L1323.8 1218.22 L1323.21 1218.22 L1322.63 1218.22 L1322.04 1218.22 L1321.45 1218.22 L1320.87 1218.22 L1320.28 1218.22 L1319.69 1218.22 L1319.11 1218.22 L1318.52 1218.22 L1317.93 1218.22 L1317.35 1218.22 L1316.76 1218.22 L1316.18 1218.22 L1315.59 1218.22 L1315 1218.22 L1314.42 1218.22 L1313.83 1218.22 L1313.24 1218.22 L1312.66 1218.22 L1312.07 1218.22 L1311.48 1218.22 L1310.9 1218.22 L1310.31 1218.22 L1309.73 1218.22 L1309.14 1218.22 L1308.55 1218.22 L1307.97 1218.22 L1307.38 1218.22 L1306.79 1218.22 L1306.21 1218.22 L1305.62 1218.22 L1305.03 1218.22 L1304.45 1218.22 L1303.86 1218.22 L1303.27 1218.22 L1302.69 1218.22 L1302.1 1218.22 L1301.52 1218.22 L1300.93 1218.22 L1300.34 1218.22 L1299.76 1218.22 L1299.17 1218.22 L1298.58 1218.22 L1298 1218.22 L1297.41 1218.22 L1296.82 1218.22 L1296.24 1218.22 L1295.65 1218.22 L1295.06 1218.22 L1294.48 1218.22 L1293.89 1218.22 L1293.31 1218.22 L1292.72 1218.22 L1292.13 1218.22 L1291.55 1218.22 L1290.96 1218.22 L1290.37 1218.22 L1289.79 1218.22 L1289.2 1218.22 L1288.61 1218.22 L1288.03 1218.22 L1287.44 1218.22 L1286.86 1218.22 L1286.27 1218.22 L1285.68 1218.22 L1285.1 1218.22 L1284.51 1218.22 L1283.92 1218.22 L1283.34 1218.22 L1282.75 1218.22 L1282.16 1218.22 L1281.58 1218.22 L1280.99 1218.22 L1280.4 1218.22 L1279.82 1218.22 L1279.23 1218.22 L1278.65 1218.22 L1278.06 1218.22 L1277.47 1218.22 L1276.89 1218.22 L1276.3 1218.22 L1275.71 1218.22 L1275.13 1218.22 L1274.54 1218.22 L1273.95 1218.22 L1273.37 1218.22 L1272.78 1218.22 L1272.19 1218.22 L1271.61 1218.22 L1271.02 1218.22 L1270.44 1218.22 L1269.85 1218.22 L1269.26 1218.22 L1268.68 1218.22 L1268.09 1218.22 L1267.5 1218.22 L1266.92 1218.22 L1266.33 1218.22 L1265.74 1218.22 L1265.16 1218.22 L1264.57 1218.22 L1263.98 1218.22 L1263.4 1218.22 L1262.81 1218.22 L1262.23 1218.22 L1261.64 1218.22 L1261.05 1218.22 L1260.47 1218.22 L1259.88 1218.22 L1259.29 1218.22 L1258.71 1218.22 L1258.12 1218.22 L1257.53 1218.22 L1256.95 1218.22 L1256.36 1218.22 L1255.78 1218.22 L1255.19 1218.22 L1254.6 1218.22 L1254.02 1218.22 L1253.43 1218.22 L1252.84 1218.22 L1252.26 1218.22 L1251.67 1218.22 L1251.08 1218.22 L1250.5 1218.22 L1249.91 1218.22 L1249.32 1218.22 L1248.74 1218.22 L1248.15 1218.22 L1247.57 1218.22 L1246.98 1218.22 L1246.39 1218.22 L1245.81 1218.22 L1245.22 1218.22 L1244.63 1218.22 L1244.05 1218.22 L1243.46 1218.22 L1242.87 1218.22 L1242.29 1218.22 L1241.7 1218.22 L1241.11 1218.22 L1240.53 1218.22 L1239.94 1218.22 L1239.36 1218.22 L1238.77 1218.22 L1238.18 1218.22 L1237.6 1218.22 L1237.01 1218.22 L1236.42 1218.22 L1235.84 1218.22 L1235.25 1218.22 L1234.66 1218.22 L1234.08 1218.22 L1233.49 1218.22 L1232.91 1218.22 L1232.32 1218.22 L1231.73 1218.22 L1231.15 1218.22 L1230.56 1218.22 L1229.97 1218.22 L1229.39 1218.22 L1228.8 1218.22 L1228.21 1218.22 L1227.63 1218.22 L1227.04 1218.22 L1226.45 1218.22 L1225.87 1218.22 L1225.28 1218.22 L1224.7 1218.22 L1224.11 1218.22 L1223.52 1218.22 L1222.94 1218.22 L1222.35 1218.22 L1221.76 1218.22 L1221.18 1218.22 L1220.59 1218.22 L1220 1218.22 L1219.42 1218.22 L1218.83 1218.22 L1218.24 1218.22 L1217.66 1218.22 L1217.07 1218.22 L1216.49 1218.22 L1215.9 1218.22 L1215.31 1218.22 L1214.73 1218.22 L1214.14 1218.22 L1213.55 1218.22 L1212.97 1218.22 L1212.38 1218.22 L1211.79 1218.22 L1211.21 1218.22 L1210.62 1218.22 L1210.03 1218.22 L1209.45 1218.22 L1208.86 1218.22 L1208.28 1218.22 L1207.69 1218.22 L1207.1 1218.22 L1206.52 1218.22 L1205.93 1218.22 L1205.34 1218.22 L1204.76 1218.22 L1204.17 1218.22 L1203.58 1218.22 L1203 1218.22 L1202.41 1218.22 L1201.83 1218.22 L1201.24 1218.22 L1200.65 1218.22 L1200.07 1218.22 L1199.48 1218.22 L1198.89 1218.22 L1198.31 1218.22 L1197.72 1218.22 L1197.13 1218.22 L1196.55 1218.22 L1195.96 1218.22 L1195.37 1218.22 L1194.79 1218.22 L1194.2 1218.22 L1193.62 1218.22 L1193.03 1218.22 L1192.44 1218.22 L1191.86 1218.22 L1191.27 1218.22 L1190.68 1218.22 L1190.1 1218.22 L1189.51 1218.22 L1188.92 1218.22 L1188.34 1218.22 L1187.75 1218.22 L1187.16 1218.22 L1186.58 1218.22 L1185.99 1218.22 L1185.41 1218.22 L1184.82 1218.22 L1184.23 1218.22 L1183.65 1218.22 L1183.06 1218.22 L1182.47 1218.22 L1181.89 1218.22 L1181.3 1218.22 L1180.71 1218.22 L1180.13 1218.22 L1179.54 1218.22 L1178.96 1218.22 L1178.37 1218.22 L1177.78 1218.22 L1177.2 1218.22 L1176.61 1218.22 L1176.02 1218.22 L1175.44 1218.22 L1174.85 1218.22 L1174.26 1218.22 L1173.68 1218.22 L1173.09 1218.22 L1172.5 1218.22 L1171.92 1218.22 L1171.33 1218.22 L1170.75 1218.22 L1170.16 1218.22 L1169.57 1218.22 L1168.99 1218.22 L1168.4 1218.22 L1167.81 1218.22 L1167.23 1218.22 L1166.64 1218.22 L1166.05 1218.22 L1165.47 1218.22 L1164.88 1218.22 L1164.29 1218.22 L1163.71 1218.22 L1163.12 1218.22 L1162.54 1218.22 L1161.95 1218.22 L1161.36 1218.22 L1160.78 1218.22 L1160.19 1218.22 L1159.6 1218.22 L1159.02 1218.22 L1158.43 1218.22 L1157.84 1218.22 L1157.26 1218.22 L1156.67 1218.22 L1156.09 1218.22 L1155.5 1218.22 L1154.91 1218.22 L1154.33 1218.22 L1153.74 1218.22 L1153.15 1218.22 L1152.57 1218.22 L1151.98 1218.22 L1151.39 1218.22 L1150.81 1218.22 L1150.22 1218.22 L1149.63 1218.22 L1149.05 1218.22 L1148.46 1218.22 L1147.88 1218.22 L1147.29 1218.22 L1146.7 1218.22 L1146.12 1218.22 L1145.53 1218.22 L1144.94 1218.22 L1144.36 1218.22 L1143.77 1218.22 L1143.18 1218.22 L1142.6 1218.22 L1142.01 1218.22 L1141.42 1218.22 L1140.84 1218.22 L1140.25 1218.22 L1139.67 1218.22 L1139.08 1218.22 L1138.49 1218.22 L1137.91 1218.22 L1137.32 1218.22 L1136.73 1218.22 L1136.15 1218.22 L1135.56 1218.22 L1134.97 1218.22 L1134.39 1218.22 L1133.8 1218.22 L1133.21 1218.22 L1132.63 1218.22 L1132.04 1218.22 L1131.46 1218.22 L1130.87 1218.22 L1130.28 1218.22 L1129.7 1218.22 L1129.11 1218.22 L1128.52 1218.22 L1127.94 1218.22 L1127.35 1218.22 L1126.76 1218.22 L1126.18 1218.22 L1125.59 1218.22 L1125.01 1218.22 L1124.42 1218.22 L1123.83 1218.22 L1123.25 1218.22 L1122.66 1218.22 L1122.07 1218.22 L1121.49 1218.22 L1120.9 1218.22 L1120.31 1218.22 L1119.73 1218.22 L1119.14 1218.22 L1118.55 1218.22 L1117.97 1218.22 L1117.38 1218.22 L1116.8 1218.22 L1116.21 1218.22 L1115.62 1218.22 L1115.04 1218.22 L1114.45 1218.22 L1113.86 1218.22 L1113.28 1218.22 L1112.69 1218.22 L1112.1 1218.22 L1111.52 1218.22 L1110.93 1218.22 L1110.34 1218.22 L1109.76 1218.22 L1109.17 1218.22 L1108.59 1218.22 L1108 1218.22 L1107.41 1218.22 L1106.83 1218.22 L1106.24 1218.22 L1105.65 1218.22 L1105.07 1218.22 L1104.48 1218.22 L1103.89 1218.22 L1103.31 1218.22 L1102.72 1218.22 L1102.14 1218.22 L1101.55 1218.22 L1100.96 1218.22 L1100.38 1218.22 L1099.79 1218.22 L1099.2 1218.22 L1098.62 1218.22 L1098.03 1218.22 L1097.44 1218.22 L1096.86 1218.22 L1096.27 1218.22 L1095.68 1218.22 L1095.1 1218.22 L1094.51 1218.22 L1093.93 1218.22 L1093.34 1218.22 L1092.75 1218.22 L1092.17 1218.22 L1091.58 1218.22 L1090.99 1218.22 L1090.41 1218.22 L1089.82 1218.22 L1089.23 1218.22 L1088.65 1218.22 L1088.06 1218.22 L1087.47 1218.22 L1086.89 1218.22 L1086.3 1218.22 L1085.72 1218.22 L1085.13 1218.22 L1084.54 1218.22 L1083.96 1218.22 L1083.37 1218.22 L1082.78 1218.22 L1082.2 1218.22 L1081.61 1218.22 L1081.02 1218.22 L1080.44 1218.22 L1079.85 1218.22 L1079.26 1218.22 L1078.68 1218.22 L1078.09 1218.22 L1077.51 1218.22 L1076.92 1218.22 L1076.33 1218.22 L1075.75 1218.22 L1075.16 1218.22 L1074.57 1218.22 L1073.99 1218.22 L1073.4 1218.22 L1072.81 1218.22 L1072.23 1218.22 L1071.64 1218.22 L1071.06 1218.22 L1070.47 1218.22 L1069.88 1218.22 L1069.3 1218.22 L1068.71 1218.22 L1068.12 1218.22 L1067.54 1218.22 L1066.95 1218.22 L1066.36 1218.22 L1065.78 1218.22 L1065.19 1218.22 L1064.6 1218.22 L1064.02 1218.22 L1063.43 1218.22 L1062.85 1218.22 L1062.26 1218.22 L1061.67 1218.22 L1061.09 1218.22 L1060.5 1218.22 L1059.91 1218.22 L1059.33 1218.22 L1058.74 1218.22 L1058.15 1218.22 L1057.57 1218.22 L1056.98 1218.22 L1056.39 1218.22 L1055.81 1218.22 L1055.22 1218.22 L1054.64 1218.22 L1054.05 1218.22 L1053.46 1218.22 L1052.88 1218.22 L1052.29 1218.22 L1051.7 1218.22 L1051.12 1218.22 L1050.53 1218.22 L1049.94 1218.22 L1049.36 1218.22 L1048.77 1218.22 L1048.19 1218.22 L1047.6 1218.22 L1047.01 1218.22 L1046.43 1218.22 L1045.84 1218.22 L1045.25 1218.22 L1044.67 1218.22 L1044.08 1218.22 L1043.49 1218.22 L1042.91 1218.22 L1042.32 1218.22 L1041.73 1218.22 L1041.15 1218.22 L1040.56 1218.22 L1039.98 1218.22 L1039.39 1218.22 L1038.8 1218.22 L1038.22 1218.22 L1037.63 1218.22 L1037.04 1218.22 L1036.46 1218.22 L1035.87 1218.22 L1035.28 1218.22 L1034.7 1218.22 L1034.11 1218.22 L1033.52 1218.22 L1032.94 1218.22 L1032.35 1218.22 L1031.77 1218.22 L1031.18 1218.22 L1030.59 1218.22 L1030.01 1218.22 L1029.42 1218.22 L1028.83 1218.22 L1028.25 1218.22 L1027.66 1218.22 L1027.07 1218.22 L1026.49 1218.22 L1025.9 1218.22 L1025.32 1218.22 L1024.73 1218.22 L1024.14 1218.22 L1023.56 1218.22 L1022.97 1218.22 L1022.38 1218.22 L1021.8 1218.22 L1021.21 1218.22 L1020.62 1218.22 L1020.04 1218.22 L1019.45 1218.22 L1018.86 1218.22 L1018.28 1218.22 L1017.69 1218.22 L1017.11 1218.22 L1016.52 1218.22 L1015.93 1218.22 L1015.35 1218.22 L1014.76 1218.22 L1014.17 1218.22 L1013.59 1218.22 L1013 1218.22 L1012.41 1218.22 L1011.83 1218.22 L1011.24 1218.22 L1010.65 1218.22 L1010.07 1218.22 L1009.48 1218.22 L1008.9 1218.22 L1008.31 1218.22 L1007.72 1218.22 L1007.14 1218.22 L1006.55 1218.22 L1005.96 1218.22 L1005.38 1218.22 L1004.79 1218.22 L1004.2 1218.22 L1003.62 1218.22 L1003.03 1218.22 L1002.44 1218.22 L1001.86 1218.22 L1001.27 1218.22 L1000.69 1218.22 L1000.1 1218.22 L999.513 1218.22 L998.926 1218.22 L998.34 1218.22 L997.754 1218.22 L997.167 1218.22 L996.581 1218.22 L995.994 1218.22 L995.408 1218.22 L994.822 1218.22 L994.235 1218.22 L993.649 1218.22 L993.062 1218.22 L992.476 1218.22 L991.889 1218.22 L991.303 1218.22 L990.717 1218.22 L990.13 1218.22 L989.544 1218.22 L988.957 1218.22 L988.371 1218.22 L987.785 1218.22 L987.198 1218.22 L986.612 1218.22 L986.025 1218.22  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.28 986.612,1218.28 987.198,1218.28 987.785,1218.28 988.371,1218.28 988.957,1218.28 989.544,1218.28 990.13,1218.28 990.717,1218.28 991.303,1218.28 991.889,1218.28 992.476,1218.28 993.062,1218.28 993.649,1218.28 994.235,1218.28 994.822,1218.28 995.408,1218.28 995.994,1218.28 996.581,1218.28 997.167,1218.28 997.754,1218.28 998.34,1218.28 998.926,1218.28 999.513,1218.28 1000.1,1218.28 1000.69,1218.28 1001.27,1218.28 1001.86,1218.28 1002.44,1218.28 1003.03,1218.28 1003.62,1218.28 1004.2,1218.28 1004.79,1218.28 1005.38,1218.28 1005.96,1218.28 1006.55,1218.28 1007.14,1218.28 1007.72,1218.28 1008.31,1218.28 1008.9,1218.28 1009.48,1218.28 1010.07,1218.28 1010.65,1218.28 1011.24,1218.28 1011.83,1218.28 1012.41,1218.28 1013,1218.28 1013.59,1218.28 1014.17,1218.28 1014.76,1218.28 1015.35,1218.28 1015.93,1218.28 1016.52,1218.28 1017.11,1218.28 1017.69,1218.28 1018.28,1218.28 1018.86,1218.28 1019.45,1218.28 1020.04,1218.28 1020.62,1218.28 1021.21,1218.28 1021.8,1218.28 1022.38,1218.28 1022.97,1218.28 1023.56,1218.28 1024.14,1218.28 1024.73,1218.28 1025.32,1218.28 1025.9,1218.28 1026.49,1218.28 1027.07,1218.28 1027.66,1218.28 1028.25,1218.28 1028.83,1218.28 1029.42,1218.28 1030.01,1218.28 1030.59,1218.28 1031.18,1218.28 1031.77,1218.28 1032.35,1218.28 1032.94,1218.28 1033.52,1218.28 1034.11,1218.28 1034.7,1218.28 1035.28,1218.28 1035.87,1218.28 1036.46,1218.28 1037.04,1218.28 1037.63,1218.28 1038.22,1218.28 1038.8,1218.28 1039.39,1218.28 1039.98,1218.28 1040.56,1218.28 1041.15,1218.28 1041.73,1218.28 1042.32,1218.28 1042.91,1218.28 1043.49,1218.28 1044.08,1218.28 1044.67,1218.28 1045.25,1218.28 1045.84,1218.28 1046.43,1218.28 1047.01,1218.28 1047.6,1218.28 1048.19,1218.28 1048.77,1218.28 1049.36,1218.28 1049.94,1218.28 1050.53,1218.28 1051.12,1218.28 1051.7,1218.28 1052.29,1218.28 1052.88,1218.28 1053.46,1218.28 1054.05,1218.28 1054.64,1218.28 1055.22,1218.28 1055.81,1218.28 1056.39,1218.28 1056.98,1218.28 1057.57,1218.28 1058.15,1218.28 1058.74,1218.28 1059.33,1218.28 1059.91,1218.28 1060.5,1218.28 1061.09,1218.28 1061.67,1218.28 1062.26,1218.28 1062.85,1218.28 1063.43,1218.28 1064.02,1218.28 1064.6,1218.28 1065.19,1218.28 1065.78,1218.28 1066.36,1218.28 1066.95,1218.28 1067.54,1218.28 1068.12,1218.28 1068.71,1218.28 1069.3,1218.28 1069.88,1218.28 1070.47,1218.28 1071.06,1218.28 1071.64,1218.28 1072.23,1218.28 1072.81,1218.28 1073.4,1218.28 1073.99,1218.28 1074.57,1218.28 1075.16,1218.28 1075.75,1218.28 1076.33,1218.28 1076.92,1218.28 1077.51,1218.28 1078.09,1218.28 1078.68,1218.28 1079.26,1218.28 1079.85,1218.28 1080.44,1218.28 1081.02,1218.28 1081.61,1218.28 1082.2,1218.28 1082.78,1218.28 1083.37,1218.28 1083.96,1218.28 1084.54,1218.28 1085.13,1218.28 1085.72,1218.28 1086.3,1218.28 1086.89,1218.28 1087.47,1218.28 1088.06,1218.28 1088.65,1218.28 1089.23,1218.28 1089.82,1218.28 1090.41,1218.28 1090.99,1218.28 1091.58,1218.28 1092.17,1218.28 1092.75,1218.28 1093.34,1218.28 1093.93,1218.28 1094.51,1218.28 1095.1,1218.28 1095.68,1218.28 1096.27,1218.28 1096.86,1218.28 1097.44,1218.28 1098.03,1218.28 1098.62,1218.28 1099.2,1218.28 1099.79,1218.28 1100.38,1218.28 1100.96,1218.28 1101.55,1218.28 1102.14,1218.28 1102.72,1218.28 1103.31,1218.28 1103.89,1218.28 1104.48,1218.28 1105.07,1218.28 1105.65,1218.28 1106.24,1218.28 1106.83,1218.28 1107.41,1218.28 1108,1218.28 1108.59,1218.28 1109.17,1218.28 1109.76,1218.28 1110.34,1218.28 1110.93,1218.28 1111.52,1218.28 1112.1,1218.28 1112.69,1218.28 1113.28,1218.28 1113.86,1218.28 1114.45,1218.28 1115.04,1218.28 1115.62,1218.28 1116.21,1218.28 1116.8,1218.28 1117.38,1218.28 1117.97,1218.28 1118.55,1218.28 1119.14,1218.28 1119.73,1218.28 1120.31,1218.28 1120.9,1218.28 1121.49,1218.28 1122.07,1218.28 1122.66,1218.28 1123.25,1218.28 1123.83,1218.28 1124.42,1218.28 1125.01,1218.28 1125.59,1218.28 1126.18,1218.28 1126.76,1218.28 1127.35,1218.28 1127.94,1218.28 1128.52,1218.28 1129.11,1218.28 1129.7,1218.28 1130.28,1218.28 1130.87,1218.28 1131.46,1218.28 1132.04,1218.28 1132.63,1218.28 1133.21,1218.28 1133.8,1218.28 1134.39,1218.28 1134.97,1218.28 1135.56,1218.28 1136.15,1218.28 1136.73,1218.28 1137.32,1218.28 1137.91,1218.28 1138.49,1218.28 1139.08,1218.28 1139.67,1218.28 1140.25,1218.28 1140.84,1218.28 1141.42,1218.28 1142.01,1218.28 1142.6,1218.28 1143.18,1218.28 1143.77,1218.28 1144.36,1218.28 1144.94,1218.28 1145.53,1218.28 1146.12,1218.28 1146.7,1218.28 1147.29,1218.28 1147.88,1218.28 1148.46,1218.28 1149.05,1218.28 1149.63,1218.28 1150.22,1218.28 1150.81,1218.28 1151.39,1218.28 1151.98,1218.28 1152.57,1218.28 1153.15,1218.28 1153.74,1218.28 1154.33,1218.28 1154.91,1218.28 1155.5,1218.28 1156.09,1218.28 1156.67,1218.28 1157.26,1218.28 1157.84,1218.28 1158.43,1218.28 1159.02,1218.28 1159.6,1218.28 1160.19,1218.28 1160.78,1218.28 1161.36,1218.28 1161.95,1218.28 1162.54,1218.28 1163.12,1218.28 1163.71,1218.28 1164.29,1218.28 1164.88,1218.28 1165.47,1218.28 1166.05,1218.28 1166.64,1218.28 1167.23,1218.28 1167.81,1218.28 1168.4,1218.28 1168.99,1218.28 1169.57,1218.28 1170.16,1218.28 1170.75,1218.28 1171.33,1218.28 1171.92,1218.28 1172.5,1218.28 1173.09,1218.28 1173.68,1218.28 1174.26,1218.28 1174.85,1218.28 1175.44,1218.28 1176.02,1218.28 1176.61,1218.28 1177.2,1218.28 1177.78,1218.28 1178.37,1218.28 1178.96,1218.28 1179.54,1218.28 1180.13,1218.28 1180.71,1218.28 1181.3,1218.28 1181.89,1218.28 1182.47,1218.28 1183.06,1218.28 1183.65,1218.28 1184.23,1218.28 1184.82,1218.28 1185.41,1218.28 1185.99,1218.28 1186.58,1218.28 1187.16,1218.28 1187.75,1218.28 1188.34,1218.28 1188.92,1218.28 1189.51,1218.28 1190.1,1218.28 1190.68,1218.28 1191.27,1218.28 1191.86,1218.28 1192.44,1218.28 1193.03,1218.28 1193.62,1218.28 1194.2,1218.28 1194.79,1218.28 1195.37,1218.28 1195.96,1218.28 1196.55,1218.28 1197.13,1218.28 1197.72,1218.28 1198.31,1218.28 1198.89,1218.28 1199.48,1218.28 1200.07,1218.28 1200.65,1218.28 1201.24,1218.28 1201.83,1218.28 1202.41,1218.28 1203,1218.28 1203.58,1218.28 1204.17,1218.28 1204.76,1218.28 1205.34,1218.28 1205.93,1218.28 1206.52,1218.28 1207.1,1218.28 1207.69,1218.28 1208.28,1218.28 1208.86,1218.28 1209.45,1218.28 1210.03,1218.28 1210.62,1218.28 1211.21,1218.28 1211.79,1218.28 1212.38,1218.28 1212.97,1218.28 1213.55,1218.28 1214.14,1218.28 1214.73,1218.28 1215.31,1218.28 1215.9,1218.28 1216.49,1218.28 1217.07,1218.28 1217.66,1218.28 1218.24,1218.28 1218.83,1218.28 1219.42,1218.28 1220,1218.28 1220.59,1218.28 1221.18,1218.28 1221.76,1218.28 1222.35,1218.28 1222.94,1218.28 1223.52,1218.28 1224.11,1218.28 1224.7,1218.28 1225.28,1218.28 1225.87,1218.28 1226.45,1218.28 1227.04,1218.28 1227.63,1218.28 1228.21,1218.28 1228.8,1218.28 1229.39,1218.28 1229.97,1218.28 1230.56,1218.28 1231.15,1218.28 1231.73,1218.28 1232.32,1218.28 1232.91,1218.28 1233.49,1218.28 1234.08,1218.28 1234.66,1218.28 1235.25,1218.28 1235.84,1218.28 1236.42,1218.28 1237.01,1218.28 1237.6,1218.28 1238.18,1218.28 1238.77,1218.28 1239.36,1218.28 1239.94,1218.28 1240.53,1218.28 1241.11,1218.28 1241.7,1218.28 1242.29,1218.28 1242.87,1218.28 1243.46,1218.28 1244.05,1218.28 1244.63,1218.28 1245.22,1218.28 1245.81,1218.28 1246.39,1218.28 1246.98,1218.28 1247.57,1218.28 1248.15,1218.28 1248.74,1218.28 1249.32,1218.28 1249.91,1218.28 1250.5,1218.28 1251.08,1218.28 1251.67,1218.28 1252.26,1218.28 1252.84,1218.28 1253.43,1218.28 1254.02,1218.28 1254.6,1218.28 1255.19,1218.28 1255.78,1218.28 1256.36,1218.28 1256.95,1218.28 1257.53,1218.28 1258.12,1218.28 1258.71,1218.28 1259.29,1218.28 1259.88,1218.28 1260.47,1218.28 1261.05,1218.28 1261.64,1218.28 1262.23,1218.28 1262.81,1218.28 1263.4,1218.28 1263.98,1218.28 1264.57,1218.28 1265.16,1218.28 1265.74,1218.28 1266.33,1218.28 1266.92,1218.28 1267.5,1218.28 1268.09,1218.28 1268.68,1218.28 1269.26,1218.28 1269.85,1218.28 1270.44,1218.28 1271.02,1218.28 1271.61,1218.28 1272.19,1218.28 1272.78,1218.28 1273.37,1218.28 1273.95,1218.28 1274.54,1218.28 1275.13,1218.28 1275.71,1218.28 1276.3,1218.28 1276.89,1218.28 1277.47,1218.28 1278.06,1218.28 1278.65,1218.28 1279.23,1218.28 1279.82,1218.28 1280.4,1218.28 1280.99,1218.28 1281.58,1218.28 1282.16,1218.28 1282.75,1218.28 1283.34,1218.28 1283.92,1218.28 1284.51,1218.28 1285.1,1218.28 1285.68,1218.28 1286.27,1218.28 1286.86,1218.28 1287.44,1218.28 1288.03,1218.28 1288.61,1218.28 1289.2,1218.28 1289.79,1218.28 1290.37,1218.28 1290.96,1218.28 1291.55,1218.28 1292.13,1218.28 1292.72,1218.28 1293.31,1218.28 1293.89,1218.28 1294.48,1218.28 1295.06,1218.28 1295.65,1218.28 1296.24,1218.28 1296.82,1218.28 1297.41,1218.28 1298,1218.28 1298.58,1218.28 1299.17,1218.28 1299.76,1218.28 1300.34,1218.28 1300.93,1218.28 1301.52,1218.28 1302.1,1218.28 1302.69,1218.28 1303.27,1218.28 1303.86,1218.28 1304.45,1218.28 1305.03,1218.28 1305.62,1218.28 1306.21,1218.28 1306.79,1218.28 1307.38,1218.28 1307.97,1218.28 1308.55,1218.28 1309.14,1218.28 1309.73,1218.28 1310.31,1218.28 1310.9,1218.28 1311.48,1218.28 1312.07,1218.28 1312.66,1218.28 1313.24,1218.28 1313.83,1218.28 1314.42,1218.28 1315,1218.28 1315.59,1218.28 1316.18,1218.28 1316.76,1218.28 1317.35,1218.28 1317.93,1218.28 1318.52,1218.28 1319.11,1218.28 1319.69,1218.28 1320.28,1218.28 1320.87,1218.28 1321.45,1218.28 1322.04,1218.28 1322.63,1218.28 1323.21,1218.28 1323.8,1218.28 1324.39,1218.28 1324.97,1218.28 1325.56,1218.28 1326.14,1218.28 1326.73,1218.28 1327.32,1218.28 1327.9,1218.28 1328.49,1218.28 1329.08,1218.28 1329.66,1218.28 1330.25,1218.28 1330.84,1218.28 1331.42,1218.28 1332.01,1218.28 1332.6,1218.28 1333.18,1218.28 1333.77,1218.28 1334.35,1218.28 1334.94,1218.28 1335.53,1218.28 1336.11,1218.28 1336.7,1218.28 1337.29,1218.28 1337.87,1218.28 1338.46,1218.28 1339.05,1218.28 1339.63,1218.28 1340.22,1218.28 1340.8,1218.28 1341.39,1218.28 1341.98,1218.28 1342.56,1218.28 1343.15,1218.28 1343.74,1218.28 1344.32,1218.28 1344.91,1218.28 1345.5,1218.28 1346.08,1218.28 1346.67,1218.28 1347.26,1218.28 1347.84,1218.28 1348.43,1218.28 1349.01,1218.28 1349.6,1218.28 1350.19,1218.28 1350.77,1218.28 1351.36,1218.28 1351.95,1218.28 1352.53,1218.28 1353.12,1218.28 1353.71,1218.28 1354.29,1218.28 1354.88,1218.28 1355.47,1218.28 1356.05,1218.28 1356.64,1218.28 1357.22,1218.28 1357.81,1218.28 1358.4,1218.28 1358.98,1218.28 1359.57,1218.28 1360.16,1218.28 1360.74,1218.28 1361.33,1218.28 1361.92,1218.28 1362.5,1218.28 1363.09,1218.28 1363.68,1218.28 1364.26,1218.28 1364.85,1218.28 1365.43,1218.28 1366.02,1218.28 1366.61,1218.28 1367.19,1218.28 1367.78,1218.28 1368.37,1218.28 1368.95,1218.28 1369.54,1218.28 1370.13,1218.28 1370.71,1218.28 1371.3,1218.28 1371.88,1218.28 1372.47,1218.28 1373.06,1218.28 1373.64,1218.28 1374.23,1218.28 1374.82,1218.28 1375.4,1218.28 1375.99,1218.28 1376.58,1218.28 1377.16,1218.28 1377.75,1218.28 1378.34,1218.28 1378.92,1218.28 1379.51,1218.28 1380.09,1218.28 1380.68,1218.28 1381.27,1218.28 1381.85,1218.28 1382.44,1218.28 1383.03,1218.28 1383.61,1218.28 1384.2,1218.28 1384.79,1218.28 1385.37,1218.28 1385.96,1218.28 1386.55,1218.28 1387.13,1218.28 1387.72,1218.28 1388.3,1218.28 1388.89,1218.28 1389.48,1218.28 1390.06,1218.28 1390.65,1218.28 1391.24,1218.28 1391.82,1218.28 1392.41,1218.28 1393,1218.28 1393.58,1218.28 1394.17,1218.28 1394.75,1218.28 1395.34,1218.28 1395.93,1218.28 1396.51,1218.28 1397.1,1218.28 1397.69,1218.28 1398.27,1218.28 1398.86,1218.28 1399.45,1218.28 1400.03,1218.28 1400.62,1218.28 1401.21,1218.28 1401.79,1218.28 1402.38,1218.28 1402.96,1218.28 1403.55,1218.28 1404.14,1218.28 1404.72,1218.28 1405.31,1218.28 1405.9,1218.28 1406.48,1218.28 1407.07,1218.28 1407.66,1218.28 1408.24,1218.28 1408.83,1218.28 1409.42,1218.28 1410,1218.28 1410.59,1218.28 1411.17,1218.28 1411.76,1218.28 1412.35,1218.28 1412.93,1218.28 1413.52,1218.28 1414.11,1218.28 1414.69,1218.28 1415.28,1218.28 1415.87,1218.28 1416.45,1218.28 1417.04,1218.28 1417.63,1218.28 1418.21,1218.28 1418.8,1218.28 1419.38,1218.28 1419.97,1218.28 1420.56,1218.28 1421.14,1218.28 1421.73,1218.28 1422.32,1218.28 1422.9,1218.28 1423.49,1218.28 1424.08,1218.28 1424.66,1218.28 1425.25,1218.28 1425.83,1218.28 1426.42,1218.28 1427.01,1218.28 1427.59,1218.28 1428.18,1218.28 1428.77,1218.28 1429.35,1218.28 1429.94,1218.28 1430.53,1218.28 1431.11,1218.28 1431.7,1218.28 1432.29,1218.28 1432.87,1218.28 1433.46,1218.28 1434.04,1218.28 1434.63,1218.28 1435.22,1218.28 1435.8,1218.28 1436.39,1218.28 1436.98,1218.28 1437.56,1218.28 1438.15,1218.28 1438.74,1218.28 1439.32,1218.28 1439.91,1218.28 1440.5,1218.28 1441.08,1218.28 1441.67,1218.28 1442.25,1218.28 1442.84,1218.28 1443.43,1218.28 1444.01,1218.28 1444.6,1218.28 1445.19,1218.28 1445.77,1218.28 1446.36,1218.28 1446.95,1218.28 1447.53,1218.28 1448.12,1218.28 1448.7,1218.28 1449.29,1218.28 1449.88,1218.28 1450.46,1218.28 1451.05,1218.28 1451.64,1218.28 1452.22,1218.28 1452.81,1218.28 1453.4,1218.28 1453.98,1218.28 1454.57,1218.28 1455.16,1218.28 1455.74,1218.28 1456.33,1218.28 1456.91,1218.28 1457.5,1218.28 1458.09,1218.28 1458.67,1218.28 1459.26,1218.28 1459.85,1218.28 1460.43,1218.28 1461.02,1218.28 1461.61,1218.28 1462.19,1218.28 1462.78,1218.28 1463.37,1218.28 1463.95,1218.28 1464.54,1218.28 1465.12,1218.28 1465.71,1218.28 1466.3,1218.28 1466.88,1218.28 1467.47,1218.28 1468.06,1218.28 1468.64,1218.28 1469.23,1218.28 1469.82,1218.28 1470.4,1218.28 1470.99,1218.28 1471.57,1218.28 1472.16,1218.28 1472.75,1218.28 1473.33,1218.28 1473.92,1218.28 1474.51,1218.28 1475.09,1218.28 1475.68,1218.28 1476.27,1218.28 1476.85,1218.28 1477.44,1218.28 1478.03,1218.28 1478.61,1218.28 1479.2,1218.28 1479.78,1218.28 1480.37,1218.28 1480.96,1218.28 1481.54,1218.28 1482.13,1218.28 1482.72,1218.28 1483.3,1218.28 1483.89,1218.28 1484.48,1218.28 1485.06,1218.28 1485.65,1218.28 1486.24,1218.28 1486.82,1218.28 1487.41,1218.28 1487.99,1218.28 1488.58,1218.28 1489.17,1218.28 1489.75,1218.28 1490.34,1218.28 1490.93,1218.28 1491.51,1218.28 1492.1,1218.28 1492.69,1218.28 1493.27,1218.28 1493.86,1218.28 1494.45,1218.28 1495.03,1218.28 1495.62,1218.28 1496.2,1218.28 1496.79,1218.28 1497.38,1218.28 1497.96,1218.28 1498.55,1218.28 1499.14,1218.28 1499.72,1218.28 1500.31,1218.28 1500.9,1218.28 1501.48,1218.28 1502.07,1218.28 1502.65,1218.28 1503.24,1218.28 1503.83,1218.28 1504.41,1218.28 1505,1218.28 1505.59,1218.28 1506.17,1218.28 1506.76,1218.28 1507.35,1218.28 1507.93,1218.28 1508.52,1218.28 1509.11,1218.28 1509.69,1218.28 1510.28,1218.28 1510.86,1218.28 1511.45,1218.28 1512.04,1218.28 1512.62,1218.28 1513.21,1218.28 1513.8,1218.28 1514.38,1218.28 1514.97,1218.28 1515.56,1218.28 1516.14,1218.28 1516.73,1218.28 1517.32,1218.28 1517.9,1218.28 1518.49,1218.28 1519.07,1218.28 1519.66,1218.28 1520.25,1218.28 1520.83,1218.28 1521.42,1218.28 1522.01,1218.28 1522.59,1218.28 1523.18,1218.28 1523.77,1218.28 1524.35,1218.28 1524.94,1218.28 1525.52,1218.28 1526.11,1218.28 1526.7,1218.28 1527.28,1218.28 1527.87,1218.28 1528.46,1218.28 1529.04,1218.28 1529.63,1218.28 1530.22,1218.28 1530.8,1218.28 1531.39,1218.28 1531.98,1218.28 1532.56,1218.28 1533.15,1218.28 1533.73,1218.28 1534.32,1218.28 1534.91,1218.28 1535.49,1218.28 1536.08,1218.28 1536.67,1218.28 1537.25,1218.28 1537.84,1218.28 1538.43,1218.28 1539.01,1218.28 1539.6,1218.28 1540.19,1218.28 1540.77,1218.28 1541.36,1218.28 1541.94,1218.28 1542.53,1218.28 1543.12,1218.28 1543.7,1218.28 1544.29,1218.28 1544.88,1218.28 1545.46,1218.28 1546.05,1218.28 1546.64,1218.28 1547.22,1218.28 1547.81,1218.28 1548.4,1218.28 1548.98,1218.28 1549.57,1218.28 1550.15,1218.28 1550.74,1218.28 1551.33,1218.28 1551.91,1218.28 1552.5,1218.28 1553.09,1218.28 1553.67,1218.28 1554.26,1218.28 1554.85,1218.28 1555.43,1218.28 1556.02,1218.28 1556.6,1218.28 1557.19,1218.28 1557.78,1218.28 1558.36,1218.28 1558.95,1218.28 1559.54,1218.28 1560.12,1218.28 1560.71,1218.28 1561.3,1218.28 1561.88,1218.28 1562.47,1218.28 1563.06,1218.28 1563.64,1218.28 1564.23,1218.28 1564.81,1218.28 1565.4,1218.28 1565.99,1218.28 1566.57,1218.28 1567.16,1218.28 1567.75,1218.28 1568.33,1218.28 1568.92,1218.28 1569.51,1218.28 1570.09,1218.28 1570.68,1218.28 1571.27,1218.28 1571.85,1218.28 1572.44,1218.28 1573.02,1218.28 1573.61,1218.28 1574.2,1218.28 1574.78,1218.28 1575.37,1218.28 1575.96,1218.28 1576.54,1218.28 1577.13,1218.28 1577.72,1218.28 1578.3,1218.28 1578.89,1218.28 1579.47,1218.28 1580.06,1218.28 1580.65,1218.28 1581.23,1218.28 1581.82,1218.28 1582.41,1218.28 1582.99,1218.28 1583.58,1218.28 1584.17,1218.28 1584.75,1218.28 1585.34,1218.28 1585.93,1218.28 1586.51,1218.28 1587.1,1218.28 1587.68,1218.28 1588.27,1218.28 1588.86,1218.28 1589.44,1218.28 1590.03,1218.28 1590.62,1218.28 1591.2,1218.28 1591.79,1218.28 1592.38,1218.28 1592.96,1218.28 1593.55,1218.28 1594.14,1218.28 1594.72,1218.28 1595.31,1218.28 1595.89,1218.28 1596.48,1218.28 1597.07,1218.28 1597.65,1218.28 1598.24,1218.28 1598.83,1218.28 1599.41,1218.28 1600,1218.28 1600.59,1218.28 1601.17,1218.28 1601.76,1218.28 1602.34,1218.28 1602.93,1218.28 1603.52,1218.28 1604.1,1218.28 1604.69,1218.28 1605.28,1218.28 1605.86,1218.28 1606.45,1218.28 1607.04,1218.28 1607.62,1218.28 1608.21,1218.28 1608.8,1218.28 1609.38,1218.28 1609.97,1218.28 1610.55,1218.28 1611.14,1218.28 1611.73,1218.28 1612.31,1218.28 1612.9,1218.28 1613.49,1218.28 1614.07,1218.28 1614.66,1218.28 1615.25,1218.28 1615.83,1218.28 1616.42,1218.28 1617.01,1218.28 1617.59,1218.28 1618.18,1218.28 1618.76,1218.28 1619.35,1218.28 1619.94,1218.28 1620.52,1218.28 1621.11,1218.28 1621.7,1218.28 1622.28,1218.28 1622.87,1218.28 1623.46,1218.28 1624.04,1218.28 1624.63,1218.28 1625.22,1218.28 1625.8,1218.28 1626.39,1218.28 1626.97,1218.28 1627.56,1218.28 1628.15,1218.28 1628.73,1218.28 1629.32,1218.28 1629.91,1218.28 1630.49,1218.28 1631.08,1218.28 1631.67,1218.28 1632.25,1218.28 1632.84,1218.28 1633.42,1218.28 1634.01,1218.28 1634.6,1218.28 1635.18,1218.28 1635.77,1218.28 1636.36,1218.28 1636.94,1218.28 1637.53,1218.28 1638.12,1218.28 1638.7,1218.28 1639.29,1218.28 1639.88,1218.28 1640.46,1218.28 1641.05,1218.28 1641.63,1218.28 1642.22,1218.28 1642.81,1218.28 1643.39,1218.28 1643.98,1218.28 1644.57,1218.28 1645.15,1218.28 1645.74,1218.28 1646.33,1218.28 1646.91,1218.28 1647.5,1218.28 1648.09,1218.28 1648.67,1218.28 1649.26,1218.28 1649.84,1218.28 1650.43,1218.28 1651.02,1218.28 1651.6,1218.28 1652.19,1218.28 1652.78,1218.28 1653.36,1218.28 1653.95,1218.28 1654.54,1218.28 1655.12,1218.28 1655.71,1218.28 1656.29,1218.28 1656.88,1218.28 1657.47,1218.28 1658.05,1218.28 1658.64,1218.28 1659.23,1218.28 1659.81,1218.28 1660.4,1218.28 1660.99,1218.28 1661.57,1218.28 1662.16,1218.28 1662.75,1218.28 1663.33,1218.28 1663.92,1218.28 1664.5,1218.28 1665.09,1218.28 1665.68,1218.28 1666.26,1218.28 1666.85,1218.28 1667.44,1218.28 1668.02,1218.28 1668.61,1218.28 1669.2,1218.28 1669.78,1218.28 1670.37,1218.28 1670.96,1218.28 1671.54,1218.28 1672.13,1218.28 1672.71,1218.28 1673.3,1218.28 1673.89,1218.28 1674.47,1218.28 1675.06,1218.28 1675.65,1218.28 1676.23,1218.28 1676.82,1218.28 1677.41,1218.28 1677.99,1218.28 1678.58,1218.28 1679.17,1218.28 1679.75,1218.28 1680.34,1218.28 1680.92,1218.28 1681.51,1218.28 1682.1,1218.28 1682.68,1218.28 1683.27,1218.28 1683.86,1218.28 1684.44,1218.28 1685.03,1218.28 1685.62,1218.28 1686.2,1218.28 1686.79,1218.28 1687.37,1218.28 1687.96,1218.28 1688.55,1218.28 1689.13,1218.28 1689.72,1218.28 1690.31,1218.28 1690.89,1218.28 1691.48,1218.28 1692.07,1218.28 1692.65,1218.28 1693.24,1218.28 1693.83,1218.28 1694.41,1218.28 1695,1218.28 1695.58,1218.28 1696.17,1218.28 1696.76,1218.28 1697.34,1218.28 1697.93,1218.28 1698.52,1218.28 1699.1,1218.28 1699.69,1218.28 1700.28,1218.28 1700.86,1218.28 1701.45,1218.28 1702.04,1218.28 1702.62,1218.28 1703.21,1218.28 1703.79,1218.28 1704.38,1218.28 1704.97,1218.28 1705.55,1218.28 1706.14,1218.28 1706.73,1218.28 1707.31,1218.28 1707.9,1218.28 1708.49,1218.28 1709.07,1218.28 1709.66,1218.28 1710.24,1218.28 1710.83,1218.28 1711.42,1218.28 1712,1218.28 1712.59,1218.28 1713.18,1218.28 1713.76,1218.28 1714.35,1218.28 1714.94,1218.28 1715.52,1218.28 1716.11,1218.28 1716.7,1218.28 1717.28,1218.28 1717.87,1218.28 1718.45,1218.28 1719.04,1218.28 1719.63,1218.28 1720.21,1218.28 1720.8,1218.28 1721.39,1218.28 1721.97,1218.28 1722.56,1218.28 1723.15,1218.28 1723.73,1218.28 1724.32,1218.28 1724.91,1218.28 1725.49,1218.28 1726.08,1218.28 1726.66,1218.28 1727.25,1218.28 1727.84,1218.28 1728.42,1218.28 1729.01,1218.28 1729.6,1218.28 1730.18,1218.28 1730.77,1218.28 1731.36,1218.28 1731.94,1218.28 1732.53,1218.28 1733.11,1218.28 1733.7,1218.28 1734.29,1218.28 1734.87,1218.28 1735.46,1218.28 1736.05,1218.28 1736.63,1218.28 1737.22,1218.28 1737.81,1218.28 1738.39,1218.28 1738.98,1218.28 1739.57,1218.28 1740.15,1218.28 1740.74,1218.28 1741.32,1218.28 1741.91,1218.28 1742.5,1218.28 1743.08,1218.28 1743.67,1218.28 1744.26,1218.28 1744.84,1218.28 1745.43,1218.28 1746.02,1218.28 1746.6,1218.28 1747.19,1218.28 1747.78,1218.28 1748.36,1218.28 1748.95,1218.28 1749.53,1218.28 1750.12,1218.28 1750.71,1218.28 1751.29,1218.28 1751.88,1218.28 1752.47,1218.28 1753.05,1218.28 1753.64,1218.28 1754.23,1218.28 1754.81,1218.28 1755.4,1218.28 1755.99,1218.28 1756.57,1218.28 1757.16,1218.28 1757.74,1218.28 1758.33,1218.28 1758.92,1218.28 1759.5,1218.28 1760.09,1218.28 1760.68,1218.28 1761.26,1218.28 1761.85,1218.28 1762.44,1218.28 1763.02,1218.28 1763.61,1218.28 1764.19,1218.28 1764.78,1218.28 1765.37,1218.28 1765.95,1218.28 1766.54,1218.28 1767.13,1218.28 1767.71,1218.28 1768.3,1218.28 1768.89,1218.28 1769.47,1218.28 1770.06,1218.28 1770.65,1218.28 1771.23,1218.28 1771.82,1218.28 1772.4,1218.28 1772.99,1218.28 1773.58,1218.28 1774.16,1218.28 1774.75,1218.28 1775.34,1218.28 1775.92,1218.28 1776.51,1218.28 1777.1,1218.28 1777.68,1218.28 1778.27,1218.28 1778.86,1218.28 1779.44,1218.28 1780.03,1218.28 1780.61,1218.28 1781.2,1218.28 1781.79,1218.28 1782.37,1218.28 1782.96,1218.28 1783.55,1218.28 1784.13,1218.28 1784.72,1218.28 1785.31,1218.28 1785.89,1218.28 1786.48,1218.28 1787.06,1218.28 1787.65,1218.28 1788.24,1218.28 1788.82,1218.28 1789.41,1218.28 1790,1218.28 1790.58,1218.28 1791.17,1218.28 1791.76,1218.28 1792.34,1218.28 1792.93,1218.28 1793.52,1218.28 1794.1,1218.28 1794.69,1218.28 1795.27,1218.28 1795.86,1218.28 1796.45,1218.28 1797.03,1218.28 1797.62,1218.28 1798.21,1218.28 1798.79,1218.28 1799.38,1218.28 1799.97,1218.28 1800.55,1218.28 1801.14,1218.28 1801.73,1218.28 1802.31,1218.28 1802.9,1218.28 1803.48,1218.28 1804.07,1218.28 1804.66,1218.28 1805.24,1218.28 1805.83,1218.28 1806.42,1218.28 1807,1218.28 1807.59,1218.28 1808.18,1218.28 1808.76,1218.28 1809.35,1218.28 1809.94,1218.28 1810.52,1218.28 1811.11,1218.28 1811.69,1218.28 1812.28,1218.28 1812.87,1218.28 1813.45,1218.28 1814.04,1218.28 1814.63,1218.28 1815.21,1218.28 1815.8,1218.28 1816.39,1218.28 1816.97,1218.28 1817.56,1218.28 1818.14,1218.28 1818.73,1218.28 1819.32,1218.28 1819.9,1218.28 1820.49,1218.28 1821.08,1218.28 1821.66,1218.28 1822.25,1218.28 1822.84,1218.28 1823.42,1218.28 1824.01,1218.28 1824.6,1218.28 1825.18,1218.28 1825.77,1218.28 1826.35,1218.28 1826.94,1218.28 1827.53,1218.28 1828.11,1218.28 1828.7,1218.28 1829.29,1218.28 1829.87,1218.28 1830.46,1218.28 1831.05,1218.28 1831.63,1218.28 1832.22,1218.28 1832.81,1218.28 1833.39,1218.28 1833.98,1218.28 1834.56,1218.28 1835.15,1218.28 1835.74,1218.28 1836.32,1218.28 1836.91,1218.28 1837.5,1218.28 1838.08,1218.28 1838.67,1218.28 1839.26,1218.28 1839.84,1218.28 1840.43,1218.28 1841.01,1218.28 1841.6,1218.28 1842.19,1218.28 1842.77,1218.28 1843.36,1218.28 1843.95,1218.28 1844.53,1218.28 1845.12,1218.28 1845.71,1218.28 1846.29,1218.28 1846.88,1218.28 1847.47,1218.28 1848.05,1218.28 1848.64,1218.28 1849.22,1218.28 1849.81,1218.28 1850.4,1218.28 1850.98,1218.28 1851.57,1218.28 1852.16,1218.28 1852.74,1218.28 1853.33,1218.28 1853.92,1218.28 1854.5,1218.28 1855.09,1218.28 1855.68,1218.28 1856.26,1218.28 1856.85,1218.28 1857.43,1218.28 1858.02,1218.28 1858.61,1218.28 1859.19,1218.28 1859.78,1218.28 1860.37,1218.28 1860.95,1218.28 1861.54,1218.28 1862.13,1218.28 1862.71,1218.28 1863.3,1218.28 1863.88,1218.28 1864.47,1218.28 1865.06,1218.28 1865.64,1218.28 1866.23,1218.28 1866.82,1218.28 1867.4,1218.28 1867.99,1218.28 1868.58,1218.28 1869.16,1218.28 1869.75,1218.28 1870.34,1218.28 1870.92,1218.28 1871.51,1218.28 1872.09,1218.28 1872.68,1218.28 1873.27,1218.28 1873.85,1218.28 1874.44,1218.28 1875.03,1218.28 1875.61,1218.28 1876.2,1218.28 1876.79,1218.28 1877.37,1218.28 1877.96,1218.28 1878.55,1218.28 1879.13,1218.28 1879.72,1218.28 1880.3,1218.28 1880.89,1218.28 1881.48,1218.28 1882.06,1218.28 1882.65,1218.28 1883.24,1218.28 1883.82,1218.28 1884.41,1218.28 1885,1218.28 1885.58,1218.28 1886.17,1218.28 1886.76,1218.28 1887.34,1218.28 1887.93,1218.28 1888.51,1218.28 1889.1,1218.28 1889.69,1218.28 1890.27,1218.28 1890.86,1218.28 1891.45,1218.28 1892.03,1218.28 1892.62,1218.28 1893.21,1218.28 1893.79,1218.28 1894.38,1218.28 1894.96,1218.28 1895.55,1218.28 1896.14,1218.28 1896.72,1218.28 1897.31,1218.28 1897.9,1218.28 1898.48,1218.28 1899.07,1218.28 1899.66,1218.28 1900.24,1218.28 1900.83,1218.28 1901.42,1218.28 1902,1218.28 1902.59,1218.28 1903.17,1218.28 1903.76,1218.28 1904.35,1218.28 1904.93,1218.28 1905.52,1218.28 1906.11,1218.28 1906.69,1218.28 1907.28,1218.28 1907.87,1218.28 1908.45,1218.28 1909.04,1218.28 1909.63,1218.28 1910.21,1218.28 1910.8,1218.28 1911.38,1218.28 1911.97,1218.28 1912.56,1218.28 1913.14,1218.28 1913.73,1218.28 1914.32,1218.28 1914.9,1218.28 1915.49,1218.28 1916.08,1218.28 1916.66,1218.28 1917.25,1218.28 1917.83,1218.28 1918.42,1218.28 1919.01,1218.28 1919.59,1218.28 1920.18,1218.28 1920.77,1218.28 1921.35,1218.28 1921.94,1218.28 1922.53,1218.28 1923.11,1218.28 1923.7,1218.28 1924.29,1218.28 1924.87,1218.28 1925.46,1218.28 1926.04,1218.28 1926.63,1218.28 1927.22,1218.28 1927.8,1218.28 1928.39,1218.28 1928.98,1218.28 1929.56,1218.28 1930.15,1218.28 1930.74,1218.28 1931.32,1218.28 1931.91,1218.28 1932.5,1218.28 1933.08,1218.28 1933.67,1218.28 1934.25,1218.28 1934.84,1218.28 1935.43,1218.28 1936.01,1218.28 1936.6,1218.28 1937.19,1218.28 1937.77,1218.28 1938.36,1218.28 1938.95,1218.28 1939.53,1218.28 1940.12,1218.28 1940.71,1218.28 1941.29,1218.28 1941.88,1218.28 1942.46,1218.28 1943.05,1218.28 1943.64,1218.28 1944.22,1218.28 1944.81,1218.28 1945.4,1218.28 1945.98,1218.28 1946.57,1218.28 1947.16,1218.28 1947.74,1218.28 1948.33,1218.28 1948.91,1218.28 1949.5,1218.28 1950.09,1218.28 1950.67,1218.28 1951.26,1218.28 1951.85,1218.28 1952.43,1218.28 1953.02,1218.28 1953.61,1218.28 1954.19,1218.28 1954.78,1218.28 1955.37,1218.28 1955.95,1218.28 1956.54,1218.28 1957.12,1218.28 1957.71,1218.28 1958.3,1218.28 1958.88,1218.28 1959.47,1218.28 1960.06,1218.28 1960.64,1218.28 1961.23,1218.28 1961.82,1218.28 1962.4,1218.28 1962.99,1218.28 1963.58,1218.28 1964.16,1218.28 1964.75,1218.28 1965.33,1218.28 1965.92,1218.28 1966.51,1218.28 1967.09,1218.28 1967.68,1218.28 1968.27,1218.28 1968.85,1218.28 1969.44,1218.28 1970.03,1218.28 1970.61,1218.28 1971.2,1218.28 1971.78,1218.28 1972.37,1218.28 1972.96,1218.28 1973.54,1218.28 1974.13,1218.28 1974.72,1218.28 1975.3,1218.28 1975.89,1218.28 1976.48,1218.28 1977.06,1218.28 1977.65,1218.28 1978.24,1218.28 1978.82,1218.28 1979.41,1218.28 1979.99,1218.28 1980.58,1218.28 1981.17,1218.28 1981.75,1218.28 1982.34,1218.28 1982.93,1218.28 1983.51,1218.28 1984.1,1218.28 1984.69,1218.28 1985.27,1218.28 1985.86,1218.28 1986.45,1218.28 1987.03,1218.28 1987.62,1218.28 1988.2,1218.28 1988.79,1218.28 1989.38,1218.28 1989.96,1218.28 1990.55,1218.28 1991.14,1218.28 1991.72,1218.28 1992.31,1218.28 1992.9,1218.28 1993.48,1218.28 1994.07,1218.28 1994.65,1218.28 1995.24,1218.28 1995.83,1218.28 1996.41,1218.28 1997,1218.28 1997.59,1218.28 1998.17,1218.28 1998.76,1218.28 1999.35,1218.28 1999.93,1218.28 2000.52,1218.28 2001.11,1218.28 2001.69,1218.28 2002.28,1218.28 2002.86,1218.28 2003.45,1218.28 2004.04,1218.28 2004.62,1218.28 2005.21,1218.28 2005.8,1218.28 2006.38,1218.28 2006.97,1218.28 2007.56,1218.28 2008.14,1218.28 2008.73,1218.28 2009.32,1218.28 2009.9,1218.28 2010.49,1218.28 2011.07,1218.28 2011.66,1218.28 2012.25,1218.28 2012.83,1218.28 2013.42,1218.28 2014.01,1218.28 2014.59,1218.28 2015.18,1218.28 2015.77,1218.28 2016.35,1218.28 2016.94,1218.28 2017.53,1218.28 2018.11,1218.28 2018.7,1218.28 2019.28,1218.28 2019.87,1218.28 2020.46,1218.28 2021.04,1218.28 2021.63,1218.28 2022.22,1218.28 2022.8,1218.28 2023.39,1218.28 2023.98,1218.28 2024.56,1218.28 2025.15,1218.28 2025.73,1218.28 2026.32,1218.28 2026.91,1218.28 2027.49,1218.28 2028.08,1218.28 2028.67,1218.28 2029.25,1218.28 2029.84,1218.28 2030.43,1218.28 2031.01,1218.28 2031.6,1218.28 2032.19,1218.28 2032.77,1218.28 2033.36,1218.28 2033.94,1218.28 2034.53,1218.28 2035.12,1218.28 2035.7,1218.28 2036.29,1218.28 2036.88,1218.28 2037.46,1218.28 2038.05,1218.28 2038.64,1218.28 2039.22,1218.28 2039.81,1218.28 2040.4,1218.28 2040.98,1218.28 2041.57,1218.28 2042.15,1218.28 2042.74,1218.28 2043.33,1218.28 2043.91,1218.28 2044.5,1218.28 2045.09,1218.28 2045.67,1218.28 2046.26,1218.28 2046.85,1218.28 2047.43,1218.28 2048.02,1218.28 2048.6,1218.28 2049.19,1218.28 2049.78,1218.28 2050.36,1218.28 2050.95,1218.28 2051.54,1218.28 2052.12,1218.28 2052.71,1218.28 2053.3,1218.28 2053.88,1218.28 2054.47,1218.28 2055.06,1218.28 2055.64,1218.28 2056.23,1218.28 2056.81,1218.28 2057.4,1218.28 2057.99,1218.28 2058.57,1218.28 2059.16,1218.28 2059.75,1218.28 2060.33,1218.28 2060.92,1218.28 2061.51,1218.28 2062.09,1218.28 2062.68,1218.28 2063.27,1218.28 2063.85,1218.28 2064.44,1218.28 2065.02,1218.28 2065.61,1218.28 2066.2,1218.28 2066.78,1218.28 2067.37,1218.28 2067.96,1218.28 2068.54,1218.28 2069.13,1218.28 2069.72,1218.28 2070.3,1218.28 2070.89,1218.28 2071.48,1218.28 2072.06,1218.28 2072.65,1218.28 2073.23,1218.28 2073.82,1218.28 2074.41,1218.28 2074.99,1218.28 2075.58,1218.28 2076.17,1218.28 2076.75,1218.28 2077.34,1218.28 2077.93,1218.28 2078.51,1218.28 2079.1,1218.28 2079.68,1218.28 2080.27,1218.28 2080.86,1218.28 2081.44,1218.28 2082.03,1218.28 2082.62,1218.28 2083.2,1218.28 2083.79,1218.28 2084.38,1218.28 2084.96,1218.28 2085.55,1218.28 2086.14,1218.28 2086.72,1218.28 2087.31,1218.28 2087.89,1218.28 2088.48,1218.28 2089.07,1218.28 2089.65,1218.28 2090.24,1218.28 2090.83,1218.28 2091.41,1218.28 2092,1218.28 2092.59,1218.28 2093.17,1218.28 2093.76,1218.28 2094.35,1218.28 2094.93,1218.28 2095.52,1218.28 2096.1,1218.28 2096.69,1218.28 2097.28,1218.28 2097.86,1218.28 2098.45,1218.28 2099.04,1218.28 2099.62,1218.28 2100.21,1218.28 2100.8,1218.28 2101.38,1218.28 2101.97,1218.28 2102.55,1218.28 2103.14,1218.28 2103.73,1218.28 2104.31,1218.28 2104.9,1218.28 2105.49,1218.28 2106.07,1218.28 2106.66,1218.28 2107.25,1218.28 2107.83,1218.28 2108.42,1218.28 2109.01,1218.28 2109.59,1218.28 2110.18,1218.28 2110.76,1218.28 2111.35,1218.28 2111.94,1218.28 2112.52,1218.28 2113.11,1218.28 2113.7,1218.28 2114.28,1218.28 2114.87,1218.28 2115.46,1218.28 2116.04,1218.28 2116.63,1218.28 2117.22,1218.28 2117.8,1218.28 2118.39,1218.28 2118.97,1218.28 2119.56,1218.28 2120.15,1218.28 2120.73,1218.28 2121.32,1218.28 2121.91,1218.28 2122.49,1218.28 2123.08,1218.28 2123.67,1218.28 2124.25,1218.28 2124.84,1218.28 2125.42,1218.28 2126.01,1218.28 2126.6,1218.28 2127.18,1218.28 2127.77,1218.28 2128.36,1218.28 2128.94,1218.28 2129.53,1218.28 2130.12,1218.28 2130.7,1218.28 2131.29,1218.28 2131.88,1218.28 2132.46,1218.28 2133.05,1218.28 2133.63,1218.28 2134.22,1218.28 2134.81,1218.28 2135.39,1218.28 2135.98,1218.28 2136.57,1218.28 2137.15,1218.28 2137.74,1218.28 2138.33,1218.28 2138.91,1218.28 2139.5,1218.28 2140.09,1218.28 2140.67,1218.28 2141.26,1218.28 2141.84,1218.28 2142.43,1218.28 2143.02,1218.28 2143.6,1218.28 2144.19,1218.28 2144.78,1218.28 2145.36,1218.28 2145.95,1218.28 2146.54,1218.28 2147.12,1218.28 2147.71,1218.28 2148.3,1218.28 2148.88,1218.28 2149.47,1218.28 2150.05,1218.28 2150.64,1218.28 2151.23,1218.28 2151.81,1218.28 2152.4,1218.28 2152.99,1218.28 2153.57,1218.28 2154.16,1218.28 2154.75,1218.28 2155.33,1218.28 2155.92,1218.28 2156.5,1218.28 2157.09,1218.28 2157.68,1218.28 2158.26,1218.28 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.71,1201.28 1398.02,899.083 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.83 985.439,1201.28 2158.26,1201.28 2158.26,1234.83 985.439,1234.83 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip283\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip283)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-10760.1 168.266,-11209 168.825,-11606.4 169.384,-11130.2 169.943,-11454.8 170.503,-11036.5 171.062,-11318.5 171.621,-11561.2 172.18,-11767.2 172.74,-11939.2 173.299,-12079.4 173.858,-12180 174.417,-12263.6 174.977,-12321.6 175.536,-11572.8 176.095,-10572.6 176.655,-10625.3 177.214,-10369.6 177.773,-10121.3 178.332,-9886.66 178.892,-9912.2 179.451,-9940.31 180.01,-9937.76 180.569,-9499.06 181.129,-9474.4 181.688,-9241.95 182.247,-9177.6 182.806,-9108.55 183.366,-9023.52 183.925,-8928.48 184.484,-8833.46 185.043,-8719.45 185.603,-8479.17 186.162,-8231.83 186.721,-8106.82 187.28,-7975.01 187.84,-7643.72 188.399,-7413.12 188.958,-7285.04 189.517,-7149.93 190.077,-6841.21 190.636,-6717.38 191.195,-6510.38 191.754,-6380.88 192.314,-6180.24 192.873,-5985.82 193.432,-5798.78 193.991,-5615.13 194.551,-5314.4 195.11,-5088.13 195.669,-4932.19 196.228,-4828.94 196.788,-4619.12 197.347,-4513.62 197.906,-4413.55 198.465,-4314.57 199.025,-4118.33 199.584,-3934.65 200.143,-3655.92 200.702,-3562.8 201.262,-3387.86 201.821,-3262.95 202.38,-3137.33 202.939,-2975.76 203.499,-2895.97 204.058,-2782.01 204.617,-2639.13 205.176,-2462 205.736,-2292.24 206.295,-2195.76 206.854,-2004.82 207.413,-1851.74 207.973,-1802.29 208.532,-1719.9 209.091,-1549.28 209.65,-1475.38 210.21,-1374.98 210.769,-1278.76 211.328,-1214 211.887,-1170.69 212.447,-1077.19 213.006,-989.329 213.565,-873.02 214.124,-809.915 214.684,-776.791 215.243,-712.337 215.802,-679.666 216.361,-572.82 216.921,-493.525 217.48,-437.641 218.039,-384.08 218.598,-334.277 219.158,-262.284 219.717,-171.337 220.276,-124.631 220.835,-81.0615 221.395,6.61709 221.954,46.9383 222.513,129.726 223.072,168.609 223.632,243.226 224.191,251.711 224.75,279.197 225.309,331.735 225.869,335.28 226.428,383.008 226.987,431.131 227.546,456.533 228.106,501.391 228.665,523.098 229.224,545.868 229.783,547.025 230.343,532.218 230.902,579.901 231.461,558.626 232.02,564.919 232.58,586.626 233.139,613.401 233.698,637.599 234.257,636.878 234.817,658.994 235.376,681.352 235.935,685.223 236.494,725.567 237.054,744.297 237.613,802.348 238.172,821.479 238.731,872.578 239.291,943.043 239.85,953.724 240.409,943.724 240.968,941.164 241.528,933.612 242.087,944.587 242.646,956.371 243.205,968.217 243.765,957.77 244.324,950.913 244.883,924.761 245.442,958.033 246.002,973.821 246.561,1005.73 247.12,1020.52 247.679,1029.06 248.239,1039.13 248.798,1015.77 249.357,1011.73 249.916,986.111 250.476,1001.24 251.035,1049.97 251.594,1094.92 252.153,1051.76 252.713,1043.96 253.272,1019.59 253.831,1015.64 254.39,1046.04 254.95,1023.07 255.509,981.668 256.068,982.532 256.627,979.049 257.187,1011.26 257.746,1007.68 258.305,1003.21 258.864,981.177 259.424,1013.01 259.983,1047.65 260.542,1006.22 261.101,1016.72 261.661,1030.12 262.22,1011.57 262.779,1009.4 263.338,1038.57 263.898,1055.12 264.457,1048.13 265.016,1058.28 265.575,1053.5 266.135,1047 266.694,1043.07 267.253,1037.53 267.812,1051.59 268.372,1028.48 268.931,1041.03 269.49,1074.42 270.049,1084.76 270.609,1079.21 271.168,1091.25 271.727,1066.11 272.286,1076.48 272.846,1085.49 273.405,1079.3 273.964,1073.02 274.523,1067.93 275.083,1080.02 275.642,1071.78 276.201,1065.73 276.76,1057.03 277.32,1050.47 277.879,1025 278.438,1037.24 278.997,1050.7 279.557,1043.66 280.116,1053.61 280.675,1045.19 281.234,1026.11 281.794,1036.86 282.353,1048.2 282.912,1092.05 283.471,1086.21 284.031,1096.99 284.59,1103.62 285.149,1081.22 285.708,1057.01 286.268,1065.43 286.827,1059.65 287.386,1084.58 287.945,1075.15 288.505,1068.04 289.064,1059.72 289.623,1054.49 290.182,1065.15 290.742,1059.37 291.301,1051.57 291.86,1042.91 292.419,1056.54 292.979,1085.98 293.538,1059.71 294.097,1050.64 294.656,1051.6 295.216,1060.46 295.775,1041.51 296.334,1018.87 296.893,1015.83 297.453,1030.22 298.012,1025.79 298.571,1034.61 299.13,1092.52 299.69,1080.56 300.249,1037.81 300.808,1044.74 301.368,1038.16 301.927,1034.92 302.486,1029.29 303.045,991.595 303.605,974.267 304.164,970.532 304.723,983.552 305.282,995.235 305.842,1022.61 306.401,1032.64 306.96,1028.82 307.519,1021.8 308.079,1050.68 308.638,977.401 309.197,988.091 309.756,982.537 310.316,1025.84 310.875,986.364 311.434,999.015 311.993,1007.16 312.553,1020.05 313.112,996.561 313.671,1008.77 314.23,1006.67 314.79,985.147 315.349,980.313 315.908,973.741 316.467,985.416 317.027,1011.31 317.586,1070.09 318.145,1060.95 318.704,1080 319.264,1053.22 319.823,1027 320.382,1033.8 320.941,1027.25 321.501,1020.24 322.06,963.957 322.619,971.726 323.178,986.493 323.738,996.405 324.297,1020.65 324.856,997.611 325.415,977.576 325.975,992.286 326.534,1001.94 327.093,981.905 327.652,976.915 328.212,972.846 328.771,983.711 329.33,1012.43 329.889,1004.57 330.449,1016.78 331.008,1010.24 331.567,1003.14 332.126,961.708 332.686,1006.59 333.245,983.283 333.804,992.944 334.363,986.027 334.923,1009 335.482,1011.4 336.041,988.825 336.6,996.919 337.16,991.401 337.719,1035.16 338.278,1026.71 338.837,1016.18 339.397,1006.37 339.956,1031.06 340.515,1024.45 341.074,981.156 341.634,973.375 342.193,965.903 342.752,976.475 343.311,904.114 343.871,886.694 344.43,882.117 344.989,896.944 345.548,880.95 346.108,893.347 346.667,876.738 347.226,910.976 347.785,954.158 348.345,932.951 348.904,959.256 349.463,966.731 350.022,929.935 350.582,970.282 351.141,946.295 351.7,938.26 352.259,867.385 352.819,883.005 353.378,848.814 353.937,894.422 354.496,906.64 355.056,905.449 355.615,903.803 356.174,913.944 356.733,894.397 357.293,891.296 357.852,887.309 358.411,900.128 358.97,927.057 359.53,923.717 360.089,901.182 360.648,916.351 361.207,910.881 361.767,891.83 362.326,886.224 362.885,911.562 363.444,939.703 364.004,948.546 364.563,905.494 365.122,901.911 365.681,882.15 366.241,895.914 366.8,890.467 367.359,887.811 367.918,855.498 368.478,867.212 369.037,844.208 369.596,840.595 370.155,817.068 370.715,784.913 371.274,820.598 371.833,806.955 372.392,856.173 372.952,854.742 373.511,836.69 374.07,870.466 374.629,819.058 375.189,819.001 375.748,816.3 376.307,881.024 376.866,859.93 377.426,854.436 377.985,836.41 378.544,818.675 379.103,821.873 379.663,854.225 380.222,835.844 380.781,835.157 381.34,833.552 381.9,780.634 382.459,784.304 383.018,799.326 383.577,800.203 384.137,800.591 384.696,800.215 385.255,815.395 385.814,830.95 386.374,843.216 386.933,841.912 387.492,888.556 388.051,869.669 388.611,865.445 389.17,879.242 389.729,890.342 390.288,869.367 390.848,847.642 391.407,814.832 391.966,799.87 392.525,818.192 393.085,770.992 393.644,786.758 394.203,819.694 394.762,834.303 395.322,833.012 395.881,848.775 396.44,880.512 396.999,874.692 397.559,867.168 398.118,845.973 398.677,842.982 399.236,888.192 399.796,881.857 400.355,862.652 400.914,860.472 401.473,875.093 402.033,853.865 402.592,849.079 403.151,863.347 403.71,856.85 404.27,848.422 404.829,895.68 405.388,904.782 405.947,912.326 406.507,923.683 407.066,933.236 407.625,955.003 408.184,915.39 408.744,893.736 409.303,886.704 409.862,863.624 410.421,877.611 410.981,824.449 411.54,821.594 412.099,834.584 412.658,829.383 413.218,840.73 413.777,804.519 414.336,817.387 414.895,816.7 415.455,826.095 416.014,805.554 416.573,783.606 417.132,780.63 417.692,779.927 418.251,780.82 418.81,780.468 419.369,779.843 419.929,778.113 420.488,775.442 421.047,773.712 421.606,821.803 422.166,785.29 422.725,812.963 423.284,825.522 423.843,823.917 424.403,822.32 424.962,852.183 425.521,877.683 426.08,919.501 426.64,921.902 427.199,885.902 427.758,860.661 428.318,807.096 428.877,817.194 429.436,799.285 429.995,766.319 430.555,765.491 431.114,780.11 431.673,810 432.232,807.688 432.792,805.059 433.351,789.186 433.91,818.441 434.469,813.249 435.029,777.332 435.588,793.11 436.147,777.125 436.706,744.545 437.266,728.044 437.825,732.022 438.384,746.949 438.943,714.264 439.503,700.479 440.062,689.196 440.621,691.705 441.18,710.625 441.74,681.061 442.299,650.786 442.858,625.454 443.417,665.56 443.977,670.033 444.536,693.251 445.095,696.593 445.654,715.786 446.214,734.631 446.773,752.557 447.332,766.939 447.891,781.513 448.451,797.965 449.01,828.351 449.569,825.339 450.128,802.507 450.688,800.526 451.247,781.099 451.806,779.012 452.365,778.752 452.925,776.17 453.484,759.538 454.043,741.777 454.602,759.284 455.162,760.823 455.721,726.781 456.28,731.183 456.839,780.257 457.399,762.924 457.958,745.427 458.517,763.629 459.076,765.914 459.636,796.454 460.195,778.074 460.754,774.043 461.313,774.622 461.873,741.479 462.432,758.421 462.991,772.693 463.55,772.649 464.11,789.684 464.669,802.726 465.228,800.331 465.787,749.704 466.347,753.764 466.906,752.56 467.465,752.855 468.024,781.491 468.584,782.063 469.143,780.076 469.702,745.451 470.261,761.423 470.821,710.912 471.38,713.76 471.939,682.432 472.498,673.056 473.058,672.153 473.617,691.488 474.176,697.919 474.735,717.077 475.295,702.958 475.854,705.734 476.413,706.453 476.972,690.914 477.532,708.173 478.091,693.145 478.65,682.489 479.209,701.669 479.769,703.856 480.328,721.969 480.887,722.029 481.446,723.486 482.006,708.734 482.565,689.64 483.124,708.645 483.683,754.385 484.243,718.733 484.802,766.877 485.361,747.916 485.92,717.3 486.48,715.921 487.039,796.25 487.598,841.997 488.157,821.707 488.717,801.657 489.276,766.607 489.835,797.406 490.394,810.447 490.954,792.862 491.513,776.546 492.072,791.898 492.631,756.729 493.191,739.11 493.75,769.886 494.309,768.408 494.868,753.877 495.428,797.876 495.987,798.581 496.546,795.133 497.105,807.477 497.665,756.359 498.224,770.667 498.783,767.206 499.342,765.18 499.902,760.847 500.461,805.181 501.02,795.623 501.579,793.543 502.139,792.471 502.698,786.899 503.257,798.501 503.816,793.505 504.376,792.04 504.935,773.853 505.494,820.61 506.053,800.429 506.613,847.142 507.172,824.452 507.731,820.479 508.29,848.632 508.85,872.878 509.409,850.189 509.968,861.223 510.527,836.639 511.087,799.346 511.646,760.208 512.205,788.673 512.764,787.346 513.324,770.584 513.883,766.815 514.442,777.357 515.001,773.637 515.561,771.963 516.12,803.583 516.679,831.618 517.238,809.737 517.798,786.722 518.357,786.39 518.916,798.515 519.475,794.639 520.035,788.744 520.594,819.706 521.153,814.309 521.712,810.492 522.272,805.822 522.831,822.325 523.39,784.936 523.949,765.723 524.509,779.767 525.068,792.18 525.627,791.937 526.186,771.454 526.746,783.958 527.305,783.048 527.864,758.147 528.423,737.405 528.983,750.253 529.542,731.497 530.101,727.744 530.66,762.044 531.22,744.555 531.779,756.874 532.338,738.522 532.897,705.546 533.457,721.6 534.016,705.219 534.575,689.192 535.134,691.163 535.694,677.117 536.253,680.098 536.812,679.997 537.371,651.399 537.931,670.888 538.49,704.952 539.049,703.231 539.608,718.132 540.168,685.072 540.727,671.732 541.286,639.51 541.845,627.232 542.405,633.801 542.964,638.046 543.523,629.129 544.082,647.908 544.642,651.656 545.201,641.144 545.76,678.235 546.319,631.968 546.879,590.802 547.438,583.681 547.997,590.284 548.556,599.167 549.116,670.143 549.675,703.289 550.234,723.466 550.793,708.577 551.353,723.906 551.912,719.385 552.471,719.27 553.031,751.185 553.59,766.407 554.149,701.185 554.708,705.659 555.268,707.027 555.827,725.574 556.386,724.808 556.945,739.461 557.505,767.02 558.064,765.826 558.623,766.298 559.182,779.269 559.742,775.804 560.301,772.707 560.86,787.187 561.419,786.254 561.979,782.515 562.538,809.316 563.097,848.402 563.656,840.986 564.216,852.372 564.775,829.233 565.334,824.388 565.893,804.477 566.453,785.36 567.012,799.313 567.571,778.581 568.13,790.559 568.69,787.624 569.249,781.699 569.808,778.977 570.367,777.761 570.927,759.001 571.486,743.068 572.045,758.449 572.604,792.719 573.164,776.168 573.723,755.725 574.282,785.385 574.841,783.56 575.401,761.753 575.96,757.486 576.519,771.548 577.078,768.878 577.638,712.796 578.197,740.391 578.756,769.792 579.315,765.031 579.875,761.89 580.434,726.826 580.993,725.63 581.552,707.261 582.112,692.67 582.671,694.021 583.23,726.143 583.789,725.099 584.349,706.42 584.908,718.357 585.467,733.405 586.026,732.627 586.586,732.267 587.145,764.483 587.704,779.739 588.263,726.086 588.823,711.295 589.382,679.378 589.941,711.424 590.5,727.121 591.06,740.813 591.619,770.207 592.178,750.93 592.737,748.081 593.297,744.279 593.856,707.974 594.415,727.461 594.974,725.574 595.534,741.379 596.093,738.594 596.652,686.432 597.211,688.749 597.771,708.115 598.33,709.674 598.889,693.204 599.448,679.45 600.008,697.11 600.567,729.622 601.126,713.618 601.685,697.676 602.245,650.069 602.804,672.754 603.363,691.966 603.922,743.142 604.482,741.405 605.041,724.833 605.6,709.27 606.159,692.113 606.719,693.874 607.278,695.726 607.837,712.052 608.396,710.672 608.956,711.349 609.515,697.189 610.074,667.726 610.633,683.527 611.193,683.49 611.752,653.68 612.311,654.284 612.87,660.335 613.43,661.222 613.989,633.92 614.548,651.621 615.107,654.109 615.667,674.34 616.226,659.087 616.785,676.991 617.344,626.548 617.904,600.766 618.463,670.817 619.022,674.175 619.581,659.533 620.141,657.196 620.7,655.872 621.259,658.347 621.818,626.834 622.378,614.241 622.937,587.127 623.496,608.825 624.055,634.439 624.615,636.168 625.174,641.968 625.733,642.681 626.292,659.636 626.852,661.885 627.411,662.513 627.97,681.738 628.529,646.335 629.089,634.339 629.648,635.041 630.207,602.815 630.766,608.836 631.326,616.405 631.885,641.314 632.444,629.865 633.003,634.596 633.563,657.468 634.122,657.991 634.681,643.798 635.24,631.55 635.8,632.275 636.359,619.841 636.918,627.191 637.477,679.597 638.037,698.41 638.596,698.7 639.155,679.504 639.714,684.337 640.274,687.091 640.833,721.409 641.392,708.225 641.951,722.961 642.511,703.654 643.07,708.441 643.629,690.478 644.188,689.005 644.748,671.413 645.307,672.978 645.866,692.496 646.425,676.351 646.985,663.02 647.544,683.909 648.103,688.011 648.662,692.101 649.222,724.792 649.781,757.514 650.34,788.21 650.899,754.327 651.459,736.535 652.018,702.812 652.577,698.187 653.136,712.438 653.696,697.629 654.255,714.616 654.814,714.79 655.373,684.414 655.933,684.098 656.492,635.512 657.051,638.765 657.61,673.95 658.17,660.051 658.729,661.572 659.288,676.807 659.847,676.214 660.407,663.885 660.966,665.131 661.525,657.865 662.084,725.838 662.644,726.21 663.203,709.199 663.762,725.538 664.321,726.446 664.881,742.106 665.44,707.2 665.999,724.467 666.558,739.717 667.118,769.235 667.677,782.316 668.236,779.616 668.795,759.472 669.355,742.745 669.914,739.141 670.473,740.334 671.032,707.357 671.592,738.594 672.151,704.394 672.71,719.954 673.269,716.774 673.829,731.876 674.388,713.159 674.947,696.228 675.506,681.927 676.066,666.332 676.625,697.557 677.184,700.587 677.743,697.172 678.303,678.785 678.862,649.979 679.421,670.913 679.981,654.303 680.54,640.697 681.099,640.807 681.658,693.792 682.218,662.814 682.777,666.796 683.336,669.631 683.895,654.937 684.455,673.412 685.014,673.769 685.573,660.238 686.132,676.27 686.692,678.374 687.251,694.185 687.81,741.715 688.369,719.471 688.929,751.312 689.488,765.95 690.047,760.73 690.606,761.143 691.166,776.759 691.725,708.487 692.284,704.845 692.843,700.773 693.403,699.856 693.962,698.152 694.521,647.6 695.08,633.591 695.64,669.255 696.199,705.191 696.758,737.44 697.317,719.195 697.877,686.792 698.436,672.492 698.995,689.123 699.554,692.136 700.114,662.777 700.673,665.159 701.232,682.763 701.791,667.96 702.351,665.116 702.91,686.125 703.469,702.95 704.028,702.531 704.588,697.954 705.147,648.259 705.706,650.647 706.265,653.683 706.825,673.552 707.384,674.581 707.943,676.08 708.502,694.828 709.062,713.731 709.621,729.468 710.18,692.981 710.739,675.942 711.299,692.634 711.858,740.497 712.417,806.573 712.976,821.859 713.536,830.239 714.095,805.371 714.654,829.931 715.213,807.709 715.773,800.237 716.332,825.501 716.891,816.406 717.45,809.786 718.01,820.036 718.569,816.833 719.128,810.783 719.687,806.604 720.247,783.783 720.806,775.239 721.365,770.751 721.924,767.062 722.484,840.496 723.043,851.23 723.602,812.516 724.161,791.429 724.721,770.327 725.28,735.841 725.839,734.588 726.398,750.241 726.958,765.001 727.517,745.925 728.076,727.505 728.635,706.94 729.195,643.31 729.754,632.056 730.313,652.905 730.872,668.417 731.432,668.101 731.991,667.629 732.55,666.41 733.109,684.291 733.669,703.889 734.228,668.166 734.787,687.859 735.346,672.444 735.906,671.433 736.465,654.804 737.024,655.043 737.583,642.318 738.143,662.053 738.702,647.17 739.261,651.152 739.82,620.177 740.38,606.996 740.939,644.565 741.498,648.952 742.057,682.757 742.617,683.803 743.176,653.884 743.735,639.176 744.294,641.547 744.854,626.212 745.413,612.566 745.972,636.546 746.531,623.429 747.091,624.329 747.65,644.246 748.209,647.98 748.768,668.261 749.328,638.203 749.887,640.352 750.446,644.333 751.005,627.184 751.565,661.537 752.124,646.196 752.683,614.345 753.242,637.535 753.802,641.83 754.361,660.693 754.92,663.207 755.479,668.162 756.039,669.148 756.598,653.894 757.157,686.641 757.716,683.934 758.276,699.387 758.835,680.273 759.394,662.73 759.953,666.037 760.513,680.238 761.072,699.935 761.631,699.268 762.19,717.942 762.75,686.213 763.309,686.357 763.868,705.394 764.427,687.769 764.987,655.219 765.546,621.536 766.105,623.653 766.664,624.283 767.224,647.156 767.783,650.444 768.342,685.92 768.901,689.44 769.461,688.653 770.02,657.58 770.579,658.226 771.138,664.201 771.698,665.907 772.257,668.86 772.816,702.364 773.375,716.496 773.935,712.705 774.494,695.116 775.053,696 775.612,684.502 776.172,701.544 776.731,798.345 777.29,776.065 777.849,741.739 778.409,755.695 778.968,782.845 779.527,792.324 780.086,791.043 780.646,804.227 781.205,799.501 781.764,843.942 782.323,851.211 782.883,828.018 783.442,823.009 784.001,802.514 784.56,766.055 785.12,728.626 785.679,710.882 786.238,711.511 786.797,692.15 787.357,658.771 787.916,645.135 788.475,627.631 789.034,647.55 789.594,651.469 790.153,689.05 790.712,706.727 791.271,707.716 791.831,708.93 792.39,710.921 792.949,722.935 793.508,751.906 794.068,761.832 794.627,804.453 795.186,776.894 795.745,753.331 796.305,719.87 796.864,703.958 797.423,703.769 797.982,754.058 798.542,751.779 799.101,733.74 799.66,776.806 800.219,786.336 800.779,747.928 801.338,794.989 801.897,837.2 802.456,815.278 803.016,791.754 803.575,768.248 804.134,764.619 804.693,756.983 805.253,720.454 805.812,735.644 806.371,736.01 806.931,765.501 807.49,726.22 808.049,755.498 808.608,733.875 809.168,729.441 809.727,724.791 810.286,759.248 810.845,770.877 811.405,768.014 811.964,748.47 812.523,748.799 813.082,727.168 813.642,706.428 814.201,735.165 814.76,734.63 815.319,697.953 815.879,696.439 816.438,660.306 816.997,693.211 817.556,597.012 818.116,654.575 818.675,656.38 819.234,692.776 819.793,724.104 820.353,707.941 820.912,705.229 821.471,703.512 822.03,733.256 822.59,701.479 823.149,718.381 823.708,700.316 824.267,700.947 824.827,719.784 825.386,731.205 825.945,727.305 826.504,788.62 827.064,779.449 827.623,760.11 828.182,769.303 828.741,795.306 829.301,772.501 829.86,767.373 830.419,779.668 830.978,802.011 831.538,778.278 832.097,756.339 832.656,721.343 833.215,704.256 833.775,684.57 834.334,667.574 834.893,647.525 835.452,650.843 836.012,634.409 836.571,620.705 837.13,637.115 837.689,606.487 838.249,627.184 838.808,614.54 839.367,640.191 839.926,664.221 840.486,680.787 841.045,696.294 841.604,712.767 842.163,731.071 842.723,707.543 843.282,724.651 843.841,740.478 844.4,734.38 844.96,747.841 845.519,762.381 846.078,775.358 846.637,789.005 847.197,785.142 847.756,780.252 848.315,741.799 848.874,736.871 849.434,718.816 849.993,744.293 850.552,773.293 851.111,755.182 851.671,733.935 852.23,716.395 852.789,712.201 853.348,775.586 853.908,740.965 854.467,771.303 855.026,766.83 855.585,761.13 856.145,758.016 856.704,755.015 857.263,721.224 857.822,670.966 858.382,653.754 858.941,637.05 859.5,654.711 860.059,657.979 860.619,642.433 861.178,626.078 861.737,613.188 862.296,618.904 862.856,639.548 863.415,627.133 863.974,632.044 864.533,588.515 865.093,594.581 865.652,566.962 866.211,509.39 866.77,537.564 867.33,531.037 867.889,537.897 868.448,513.298 869.007,520.591 869.567,560.096 870.126,567.688 870.685,561.65 871.244,585.018 871.804,608.704 872.363,599.158 872.922,603.127 873.481,609.818 874.041,579.615 874.6,601.939 875.159,638.971 875.718,625.023 876.278,629.295 876.837,683.949 877.396,666.938 877.955,668.82 878.515,651.246 879.074,623.29 879.633,626.934 880.192,665.054 880.752,665.81 881.311,683.645 881.87,698.619 882.429,682.704 882.989,682.743 883.548,685.163 884.107,668.555 884.666,670.719 885.226,641.192 885.785,660.192 886.344,711.927 886.903,695.59 887.463,675.9 888.022,695.782 888.581,696.472 889.14,697.729 889.7,716.089 890.259,731.993 890.818,728.84 891.377,723.164 891.937,685.702 892.496,715.125 893.055,714.06 893.614,725.654 894.174,693.879 894.733,680.169 895.292,647.857 895.851,645.581 896.411,632.331 896.97,584.866 897.529,588.211 898.088,611.086 898.648,632.46 899.207,633.535 899.766,620.564 900.325,611.021 900.885,614.861 901.444,634.893 902.003,623.671 902.562,627.264 903.122,629.456 903.681,662.871 904.24,694.991 904.799,730.359 905.359,698.723 905.918,666.063 906.477,649.279 907.036,653.504 907.596,673.811 908.155,673.979 908.714,691.044 909.273,689.732 909.833,672.966 910.392,691.775 910.951,661.997 911.51,679.844 912.07,678.327 912.629,712.545 913.188,713.723 913.747,696.943 914.307,713.311 914.866,665.22 915.425,653.195 915.984,658.382 916.544,662.021 917.103,645.849 917.662,648.267 918.221,631.153 918.781,602.768 919.34,625.175 919.899,580.175 920.458,587.914 921.018,596.199 921.577,617.014 922.136,669.771 922.695,686.321 923.255,702.75 923.814,702.147 924.373,652.991 924.932,657.918 925.492,675.04 926.051,721.745 926.61,701.976 927.169,716.337 927.729,713.774 928.288,711.951 928.847,712.157 929.406,713.142 929.966,711.557 930.525,711.173 931.084,725.454 931.644,711.588 932.203,661.328 932.762,663.752 933.321,677.338 933.881,659.459 934.44,647.594 934.999,647.608 935.558,648.254 936.118,668.175 936.677,651.937 937.236,654.578 937.795,629.599 938.355,633.908 938.914,622.856 939.473,628.249 940.032,614.925 940.592,637.035 941.151,657.376 941.71,641.747 942.269,628.272 942.829,629.353 943.388,615.881 943.947,617.453 944.506,621.236 945.066,643.598 945.625,660.692 946.184,679.346 946.743,665.922 947.303,652.318 947.862,655.902 948.421,656.458 948.98,625.654 949.54,631.277 950.099,619.811 950.658,625.263 951.217,613.834 951.777,650.611 952.336,683.714 952.895,696.979 953.454,677.63 954.014,694.937 954.573,692.706 955.132,693.247 955.691,676.709 956.251,691.63 956.81,724.236 957.369,722.492 957.928,717.959 958.488,746.058 959.047,774.469 959.606,768.817 960.165,783.057 960.725,776.985 961.284,757.309 961.843,752.374 962.402,748.044 962.962,762.5 963.521,742.327 964.08,690.297 964.639,660.46 965.199,674.478 965.758,723.947 966.317,740.722 966.876,755.445 967.436,736.164 967.995,733.962 968.554,699.107 969.113,729.111 969.673,727.904 970.232,728.447 970.791,712.128 971.35,725.949 971.91,723.424 972.469,722.355 973.028,718.602 973.587,731.664 974.147,712.471 974.706,724.778 975.265,690.97 975.824,691.602 976.384,720.763 976.943,737.651 977.502,734.531 978.061,729.181 978.621,710.317 979.18,708.509 979.739,690.694 980.298,721.563 980.858,723.491 981.417,722.259 981.976,717.843 982.535,702.549 983.095,722.342 983.654,708.19 984.213,711.709 984.772,712.697 985.332,693.42 985.891,706.076 986.45,689.626 987.009,721.993 987.569,722.176 988.128,704.092 988.687,686.081 989.246,718.761 989.806,718.575 990.365,714.084 990.924,744.542 991.483,741.909 992.043,740.244 992.602,724.017 993.161,687.645 993.72,669.505 994.28,702.209 994.839,719.581 995.398,734.879 995.957,731.375 996.517,730.635 997.076,745.473 997.635,724.212 998.194,724.737 998.754,724.747 999.313,741.936 999.872,724.265 1000.43,702.378 1000.99,668.452 1001.55,686.075 1002.11,701.47 1002.67,684.367 1003.23,732.526 1003.79,745.357 1004.35,758.255 1004.91,738.447 1005.46,754.851 1006.02,750.584 1006.58,775.057 1007.14,804.772 1007.7,812.663 1008.26,803.141 1008.82,795.114 1009.38,804.274 1009.94,795.761 1010.5,771.03 1011.06,767.84 1011.62,744.028 1012.18,756.346 1012.73,749.959 1013.29,732.238 1013.85,730.11 1014.41,709.981 1014.97,709.774 1015.53,706.612 1016.09,688.861 1016.65,702.758 1017.21,730.111 1017.77,746.193 1018.33,760.691 1018.89,756.469 1019.45,756.548 1020.01,752.609 1020.56,746.927 1021.12,738.656 1021.68,734.159 1022.24,732.526 1022.8,732.536 1023.36,733.269 1023.92,713.615 1024.48,709.309 1025.04,704.524 1025.6,703.467 1026.16,700.336 1026.72,671.158 1027.28,650.867 1027.83,669.814 1028.39,655.358 1028.95,656.765 1029.51,644.541 1030.07,628.337 1030.63,649.15 1031.19,635.259 1031.75,654.716 1032.31,623.468 1032.87,629.06 1033.43,615.004 1033.99,622.199 1034.55,654.475 1035.1,653.75 1035.66,604.982 1036.22,622.424 1036.78,625.352 1037.34,632.637 1037.9,666.34 1038.46,664.43 1039.02,666.866 1039.58,663.743 1040.14,647.164 1040.7,650.395 1041.26,684.599 1041.82,665.572 1042.38,681.3 1042.93,695.04 1043.49,695.11 1044.05,677.645 1044.61,658.955 1045.17,675.507 1045.73,706.472 1046.29,723.138 1046.85,686.993 1047.41,670.908 1047.97,673.921 1048.53,642.855 1049.09,658.043 1049.65,620.538 1050.2,607.394 1050.76,594.491 1051.32,614.543 1051.88,630.492 1052.44,648.44 1053,654.621 1053.56,670.868 1054.12,655.891 1054.68,622.348 1055.24,614.179 1055.8,619.456 1056.36,623.164 1056.92,594.369 1057.48,569.589 1058.03,576.775 1058.59,535.332 1059.15,546.639 1059.71,554.542 1060.27,566.311 1060.83,576.663 1061.39,582.627 1061.95,587.045 1062.51,625.787 1063.07,613.868 1063.63,637.067 1064.19,641.813 1064.75,660.961 1065.3,675.384 1065.86,675.415 1066.42,659.419 1066.98,660.836 1067.54,644.463 1068.1,663.234 1068.66,651.738 1069.22,702.263 1069.78,697.476 1070.34,730.936 1070.9,716.794 1071.46,715.146 1072.02,715.52 1072.57,762.388 1073.13,725.985 1073.69,735.92 1074.25,748.743 1074.81,746.367 1075.37,727.131 1075.93,708.879 1076.49,692.226 1077.05,642.885 1077.61,645.255 1078.17,631.038 1078.73,633.047 1079.29,651.029 1079.85,684.422 1080.4,702.102 1080.96,715.36 1081.52,741.591 1082.08,740.83 1082.64,754.714 1083.2,751.106 1083.76,748.577 1084.32,747.838 1084.88,764.593 1085.44,746.607 1086,743.328 1086.56,738.095 1087.12,717.742 1087.67,748.733 1088.23,775.925 1088.79,772.434 1089.35,766.652 1089.91,776.408 1090.47,754.881 1091.03,751.049 1091.59,732.904 1092.15,749.99 1092.71,744.201 1093.27,742.388 1093.83,739.658 1094.39,721.994 1094.94,751.74 1095.5,749.205 1096.06,760.283 1096.62,755.153 1097.18,769.738 1097.74,780.316 1098.3,758.787 1098.86,773.4 1099.42,812.898 1099.98,837.78 1100.54,812.388 1101.1,804.119 1101.66,780.8 1102.22,773.259 1102.77,736.031 1103.33,750.877 1103.89,763.221 1104.45,758.058 1105.01,757.102 1105.57,737.359 1106.13,736.836 1106.69,718.627 1107.25,700.531 1107.81,715.876 1108.37,684.767 1108.93,735.748 1109.49,717.828 1110.04,701.013 1110.6,697.55 1111.16,684.412 1111.72,671.168 1112.28,639.478 1112.84,657.064 1113.4,673.396 1113.96,688.988 1114.52,709.057 1115.08,693.746 1115.64,709.043 1116.2,689.713 1116.76,658.692 1117.31,628.622 1117.87,612.813 1118.43,602.531 1118.99,638.234 1119.55,627.062 1120.11,627.114 1120.67,650.263 1121.23,654.927 1121.79,657.144 1122.35,677.403 1122.91,713.215 1123.47,694.053 1124.03,689.966 1124.59,703.474 1125.14,688.574 1125.7,735.557 1126.26,733.41 1126.82,692.059 1127.38,673.025 1127.94,658.827 1128.5,640.691 1129.06,678.291 1129.62,662.968 1130.18,663.831 1130.74,630.504 1131.3,619.653 1131.86,605.041 1132.41,608.76 1132.97,628.031 1133.53,569.393 1134.09,606.646 1134.65,597.08 1135.21,634.912 1135.77,636.755 1136.33,606.794 1136.89,627.799 1137.45,635.029 1138.01,619.425 1138.57,625.719 1139.13,664.022 1139.68,715.864 1140.24,697.18 1140.8,698.141 1141.36,682.863 1141.92,666.92 1142.48,701.072 1143.04,732.976 1143.6,713.087 1144.16,663.06 1144.72,615.243 1145.28,605.366 1145.84,624.433 1146.4,646.26 1146.96,647.263 1147.51,649.131 1148.07,653.769 1148.63,673.957 1149.19,694.674 1149.75,709.669 1150.31,690.935 1150.87,668.477 1151.43,669.156 1151.99,703.708 1152.55,688.083 1153.11,702.704 1153.67,719.184 1154.23,702.773 1154.78,734.284 1155.34,716.7 1155.9,699.326 1156.46,667.095 1157.02,700.438 1157.58,669.816 1158.14,670.957 1158.7,671.118 1159.26,669.813 1159.82,656.147 1160.38,625.654 1160.94,626.94 1161.5,677.148 1162.05,693.471 1162.61,662.411 1163.17,648.926 1163.73,635.661 1164.29,667.013 1164.85,649.17 1165.41,616.498 1165.97,621.402 1166.53,638.593 1167.09,642.338 1167.65,658.143 1168.21,658.491 1168.77,706.142 1169.33,704.262 1169.88,723.278 1170.44,739.286 1171,739.602 1171.56,723.253 1172.12,740.957 1172.68,706.987 1173.24,706.819 1173.8,684.892 1174.36,731.806 1174.92,749.17 1175.48,763.664 1176.04,774.616 1176.6,769.552 1177.15,780.973 1177.71,762.525 1178.27,744.289 1178.83,758.131 1179.39,738.881 1179.95,703.474 1180.51,685.403 1181.07,632.488 1181.63,634.565 1182.19,652.627 1182.75,684.712 1183.31,683.357 1183.87,668.143 1184.43,684.657 1184.98,684 1185.54,682.844 1186.1,699.587 1186.66,683.884 1187.22,681.922 1187.78,678.548 1188.34,693.348 1188.9,710.995 1189.46,707.598 1190.02,689.937 1190.58,707.755 1191.14,735.44 1191.7,718.141 1192.25,716.96 1192.81,732.611 1193.37,712.168 1193.93,692.308 1194.49,674.605 1195.05,660.302 1195.61,642.11 1196.17,643.951 1196.73,633.728 1197.29,621.759 1197.85,607.035 1198.41,613.541 1198.97,599.611 1199.52,587.104 1200.08,595.48 1200.64,602.036 1201.2,602.462 1201.76,604.277 1202.32,576.881 1202.88,583.097 1203.44,587.872 1204,640.515 1204.56,694.316 1205.12,662.932 1205.68,678.062 1206.24,694.601 1206.8,689.795 1207.35,684.188 1207.91,698.769 1208.47,666.514 1209.03,685.251 1209.59,691.072 1210.15,675.746 1210.71,657.662 1211.27,692.903 1211.83,675.09 1212.39,692.371 1212.95,676.099 1213.51,691.997 1214.07,674.474 1214.62,673.892 1215.18,658.252 1215.74,645.344 1216.3,648.021 1216.86,665.214 1217.42,682.927 1217.98,664.482 1218.54,666.859 1219.1,681.453 1219.66,713.217 1220.22,730.407 1220.78,709.528 1221.34,723.554 1221.89,737.998 1222.45,750.9 1223.01,794.51 1223.57,787.19 1224.13,783.986 1224.69,828.561 1225.25,805.476 1225.81,780.603 1226.37,794.928 1226.93,772.271 1227.49,768.059 1228.05,730.405 1228.61,708.91 1229.17,720.853 1229.72,767.784 1230.28,745.529 1230.84,742.57 1231.4,775.251 1231.96,767.417 1232.52,743.413 1233.08,739.86 1233.64,703.443 1234.2,714.656 1234.76,714.45 1235.32,730.966 1235.88,729.032 1236.44,743.191 1236.99,736.427 1237.55,732.425 1238.11,745.285 1238.67,743.359 1239.23,721.729 1239.79,656.334 1240.35,657.713 1240.91,659.051 1241.47,658.806 1242.03,612.571 1242.59,601.218 1243.15,607.519 1243.71,625.042 1244.26,628.074 1244.82,629.026 1245.38,663.362 1245.94,649.961 1246.5,636.642 1247.06,657.478 1247.62,691.929 1248.18,658.92 1248.74,644.054 1249.3,660.278 1249.86,660.569 1250.42,659.414 1250.98,660.306 1251.54,650.378 1252.09,637.42 1252.65,639.477 1253.21,643.303 1253.77,644.65 1254.33,631.687 1254.89,615.193 1255.45,618.918 1256.01,608.135 1256.57,577.271 1257.13,615.329 1257.69,622.187 1258.25,609.966 1258.81,600.357 1259.36,605.504 1259.92,595.361 1260.48,619.064 1261.04,610.019 1261.6,616.453 1262.16,651.227 1262.72,636.716 1263.28,656.677 1263.84,641.778 1264.4,663.308 1264.96,663.336 1265.52,693.229 1266.08,697.212 1266.63,695.063 1267.19,692.731 1267.75,678.778 1268.31,679.011 1268.87,681.369 1269.43,697.838 1269.99,682.933 1270.55,687.005 1271.11,701.985 1271.67,702.939 1272.23,672.6 1272.79,644.115 1273.35,631.419 1273.91,637.064 1274.46,636.286 1275.02,608.361 1275.58,611.164 1276.14,616.981 1276.7,587.207 1277.26,629.832 1277.82,664.414 1278.38,664.6 1278.94,663.884 1279.5,667.183 1280.06,684.027 1280.62,694.998 1281.18,679.063 1281.73,694.85 1282.29,723.158 1282.85,789.916 1283.41,782.735 1283.97,778.213 1284.53,802.354 1285.09,781.127 1285.65,777.52 1286.21,754.679 1286.77,750.904 1287.33,747.958 1287.89,760.668 1288.45,771.463 1289,747.1 1289.56,745.039 1290.12,710.177 1290.68,690.917 1291.24,670.844 1291.8,670.448 1292.36,637.666 1292.92,675.211 1293.48,689.421 1294.04,639.16 1294.6,658.441 1295.16,645.5 1295.72,630.52 1296.28,632.195 1296.83,634.437 1297.39,621.933 1297.95,612.429 1298.51,587.375 1299.07,606.999 1299.63,599.096 1300.19,591.04 1300.75,575.208 1301.31,553.69 1301.87,562.891 1302.43,586.004 1302.99,593.374 1303.55,584.473 1304.1,608.435 1304.66,628.975 1305.22,629.429 1305.78,627.369 1306.34,633.139 1306.9,650.618 1307.46,687.549 1308.02,684.377 1308.58,716.602 1309.14,750.045 1309.7,779.652 1310.26,792.188 1310.82,755.453 1311.38,748.213 1311.93,715.561 1312.49,724.491 1313.05,704.889 1313.61,690.132 1314.17,672.84 1314.73,638.456 1315.29,659.713 1315.85,660.153 1316.41,659.292 1316.97,595.155 1317.53,617.661 1318.09,605.214 1318.65,658.684 1319.2,658.53 1319.76,657.299 1320.32,672.927 1320.88,660.386 1321.44,661.705 1322,695.461 1322.56,693.224 1323.12,690.299 1323.68,722.423 1324.24,749.275 1324.8,776.959 1325.36,786.645 1325.92,783.116 1326.47,794.021 1327.03,754.914 1327.59,766.987 1328.15,794.365 1328.71,740.392 1329.27,752.453 1329.83,746.525 1330.39,760.412 1330.95,756.828 1331.51,751.384 1332.07,763.356 1332.63,760.504 1333.19,741.913 1333.75,722.777 1334.3,688.945 1334.86,637.025 1335.42,638.669 1335.98,627.119 1336.54,675.962 1337.1,675.182 1337.66,707.012 1338.22,751.522 1338.78,744.962 1339.34,740.356 1339.9,688.909 1340.46,703.255 1341.02,716.997 1341.57,730.39 1342.13,729.051 1342.69,725.623 1343.25,753.698 1343.81,715.183 1344.37,648.281 1344.93,664.745 1345.49,631.154 1346.05,618.009 1346.61,605.209 1347.17,608.738 1347.73,599.686 1348.29,601.456 1348.84,619.569 1349.4,602.96 1349.96,620.787 1350.52,624.414 1351.08,631.722 1351.64,653.487 1352.2,669.693 1352.76,684.987 1353.32,699.386 1353.88,683.757 1354.44,684.524 1355,713.274 1355.56,745.429 1356.12,758.124 1356.67,771.527 1357.23,766.704 1357.79,781.365 1358.35,759.809 1358.91,770.148 1359.47,750.253 1360.03,758.861 1360.59,738.663 1361.15,755.158 1361.71,816.75 1362.27,773.951 1362.83,784.453 1363.39,794.027 1363.94,785.658 1364.5,764.375 1365.06,762.842 1365.62,721.808 1366.18,704.063 1366.74,671.565 1367.3,655.503 1367.86,656.95 1368.42,644.165 1368.98,633.01 1369.54,652.682 1370.1,707.176 1370.66,721.622 1371.21,692.655 1371.77,644.16 1372.33,614.001 1372.89,588.097 1373.45,575.599 1374.01,584.632 1374.57,560.236 1375.13,566.612 1375.69,572.851 1376.25,564.93 1376.81,540.62 1377.37,546.691 1377.93,573.165 1378.49,592.481 1379.04,543.033 1379.6,546.92 1380.16,551.744 1380.72,531.085 1381.28,540.357 1381.84,532.526 1382.4,524.759 1382.96,499.783 1383.52,509.644 1384.08,504.192 1384.64,515.161 1385.2,522.291 1385.76,530.678 1386.31,538.856 1386.87,577.95 1387.43,569.603 1387.99,594.289 1388.55,632.024 1389.11,633.298 1389.67,653.919 1390.23,658.544 1390.79,677.455 1391.35,709.181 1391.91,740.013 1392.47,723.09 1393.03,720.174 1393.58,720.024 1394.14,737.006 1394.7,738.274 1395.26,735.469 1395.82,746.184 1396.38,738.235 1396.94,734.323 1397.5,733.466 1398.06,718.915 1398.62,705.138 1399.18,702.272 1399.74,703.247 1400.3,652.718 1400.86,702.608 1401.41,698.975 1401.97,696.76 1402.53,695.556 1403.09,679.437 1403.65,679.696 1404.21,663.869 1404.77,684.281 1405.33,685.558 1405.89,700.475 1406.45,710.37 1407.01,760.004 1407.57,714.302 1408.13,746.435 1408.68,742.323 1409.24,738.332 1409.8,734.855 1410.36,714.201 1410.92,743.944 1411.48,738.993 1412.04,751.97 1412.6,713.593 1413.16,682.249 1413.72,683.314 1414.28,666.642 1414.84,668.285 1415.4,635.9 1415.95,636.188 1416.51,651.866 1417.07,702.515 1417.63,717.708 1418.19,697.984 1418.75,714.691 1419.31,695.283 1419.87,693.521 1420.43,711.093 1420.99,725.589 1421.55,740.809 1422.11,735.781 1422.67,716.694 1423.23,714.972 1423.78,683.366 1424.34,666.954 1424.9,681.402 1425.46,697.127 1426.02,695.32 1426.58,648.118 1427.14,614.037 1427.7,599.847 1428.26,605.016 1428.82,642.886 1429.38,645.32 1429.94,612.306 1430.5,616.504 1431.05,653.98 1431.61,686.957 1432.17,702.283 1432.73,685.716 1433.29,719.542 1433.85,684.003 1434.41,662.966 1434.97,679.01 1435.53,663.486 1436.09,649.2 1436.65,652.246 1437.21,636.905 1437.77,671.783 1438.33,669.027 1438.88,668.23 1439.44,651.606 1440,682.061 1440.56,711.647 1441.12,694.877 1441.68,678.874 1442.24,698.938 1442.8,729.731 1443.36,727.291 1443.92,726.333 1444.48,725.889 1445.04,738.793 1445.6,749.975 1446.15,764.347 1446.71,776.114 1447.27,770.917 1447.83,768.638 1448.39,748.444 1448.95,763.146 1449.51,743.328 1450.07,739.743 1450.63,773.358 1451.19,769.384 1451.75,780.676 1452.31,809.489 1452.87,819.552 1453.42,810.234 1453.98,754.493 1454.54,738.619 1455.1,751.946 1455.66,748.117 1456.22,761.37 1456.78,740.915 1457.34,736.27 1457.9,734.925 1458.46,734.359 1459.02,698.892 1459.58,696.131 1460.14,727.401 1460.7,740.827 1461.25,737.761 1461.81,734.312 1462.37,699.465 1462.93,714.358 1463.49,731.386 1464.05,711.32 1464.61,694.108 1465.17,675.307 1465.73,688.371 1466.29,669.583 1466.85,666.469 1467.41,666.792 1467.97,651.674 1468.52,669.971 1469.08,635.208 1469.64,636.39 1470.2,634.19 1470.76,634.738 1471.32,636.753 1471.88,672.293 1472.44,675.099 1473,692.894 1473.56,725.653 1474.12,711.701 1474.68,742.651 1475.24,757.312 1475.79,755.18 1476.35,717.132 1476.91,701.008 1477.47,699.978 1478.03,714.912 1478.59,711.079 1479.15,705.534 1479.71,674.948 1480.27,674.299 1480.83,642.85 1481.39,626.565 1481.95,679.273 1482.51,714.725 1483.07,694.756 1483.62,677.969 1484.18,677.186 1484.74,674.006 1485.3,675.612 1485.86,706.692 1486.42,706.127 1486.98,685.611 1487.54,651.77 1488.1,674.299 1488.66,674.382 1489.22,723.404 1489.78,770.029 1490.34,685.632 1490.89,700.778 1491.45,716.752 1492.01,699.257 1492.57,694.437 1493.13,693.47 1493.69,680.531 1494.25,630.693 1494.81,633.286 1495.37,637.53 1495.93,643.433 1496.49,615.109 1497.05,619.335 1497.61,607.822 1498.16,627.4 1498.72,645.97 1499.28,678.938 1499.84,712.107 1500.4,709.924 1500.96,675.503 1501.52,676.481 1502.08,661.381 1502.64,679.787 1503.2,692.409 1503.76,692.237 1504.32,708.032 1504.88,757.789 1505.44,751.563 1505.99,747.006 1506.55,757.495 1507.11,755.003 1507.67,748.853 1508.23,743.989 1508.79,707.363 1509.35,673.629 1509.91,659.017 1510.47,659.557 1511.03,645.141 1511.59,680.466 1512.15,661.073 1512.71,676.964 1513.26,628.537 1513.82,647.721 1514.38,683.091 1514.94,696.42 1515.5,710.672 1516.06,693.143 1516.62,680.687 1517.18,663.696 1517.74,685.488 1518.3,719.635 1518.86,688.426 1519.42,702.529 1519.98,683.45 1520.53,619.863 1521.09,641.065 1521.65,689.201 1522.21,719.821 1522.77,701.813 1523.33,717.138 1523.89,696.706 1524.45,611.762 1525.01,597.851 1525.57,638.465 1526.13,644.008 1526.69,632.107 1527.25,639.082 1527.81,640.306 1528.36,639.871 1528.92,624.729 1529.48,609.086 1530.04,613.89 1530.6,635.617 1531.16,620.44 1531.72,641.122 1532.28,692.967 1532.84,688.606 1533.4,719.109 1533.96,699.616 1534.52,669.592 1535.08,686.807 1535.63,687.179 1536.19,686.722 1536.75,720.126 1537.31,733.099 1537.87,747.882 1538.43,745.14 1538.99,742.892 1539.55,742.291 1540.11,737.944 1540.67,701.864 1541.23,685.073 1541.79,651.151 1542.35,655.508 1542.9,644.131 1543.46,596.017 1544.02,599.477 1544.58,654.777 1545.14,655.912 1545.7,626.039 1546.26,694.873 1546.82,674.02 1547.38,659.539 1547.94,644.4 1548.5,663.4 1549.06,663.899 1549.62,664.529 1550.18,649.84 1550.73,652.786 1551.29,655.255 1551.85,655.725 1552.41,673.268 1552.97,627.005 1553.53,614.987 1554.09,618.124 1554.65,651.244 1555.21,634.878 1555.77,652.043 1556.33,636.874 1556.89,605.504 1557.45,611.234 1558,632.545 1558.56,618.47 1559.12,641.02 1559.68,656.277 1560.24,658.025 1560.8,622.25 1561.36,608.942 1561.92,616.188 1562.48,602.48 1563.04,589.208 1563.6,610.983 1564.16,595.835 1564.72,617.034 1565.28,620.579 1565.83,622.546 1566.39,609.129 1566.95,643.722 1567.51,644.958 1568.07,648.605 1568.63,667.602 1569.19,702.11 1569.75,684.378 1570.31,684.553 1570.87,684.529 1571.43,683.722 1571.99,651.787 1572.55,655.417 1573.1,705.188 1573.66,705.753 1574.22,784.322 1574.78,777.581 1575.34,789.334 1575.9,733.561 1576.46,730.826 1577.02,712.193 1577.58,681.898 1578.14,681.591 1578.7,678.56 1579.26,681.642 1579.82,683.444 1580.37,665.367 1580.93,684.513 1581.49,635.797 1582.05,636.874 1582.61,620.964 1583.17,639.538 1583.73,641.58 1584.29,676.803 1584.85,680.15 1585.41,663.974 1585.97,666.078 1586.53,650.157 1587.09,636.407 1587.65,638.883 1588.2,641.715 1588.76,634.387 1589.32,653.43 1589.88,657.494 1590.44,693.387 1591,677.194 1591.56,694.473 1592.12,696.012 1592.68,712.431 1593.24,692.401 1593.8,674.774 1594.36,741.658 1594.92,723.961 1595.47,704.042 1596.03,721.169 1596.59,670.425 1597.15,658.102 1597.71,642.766 1598.27,613.191 1598.83,602.458 1599.39,620.754 1599.95,654.728 1600.51,656.841 1601.07,642.993 1601.63,644.043 1602.19,660.819 1602.74,678.845 1603.3,658.939 1603.86,613.119 1604.42,602.951 1604.98,592.69 1605.54,598.97 1606.1,600.334 1606.66,624.978 1607.22,643.571 1607.78,666.892 1608.34,701.97 1608.9,684.183 1609.46,683.724 1610.02,664.647 1610.57,698.872 1611.13,715.43 1611.69,698.176 1612.25,696.297 1612.81,680.005 1613.37,697.794 1613.93,664.483 1614.49,664.717 1615.05,731.487 1615.61,730.735 1616.17,762.657 1616.73,807.695 1617.29,819.229 1617.84,781.148 1618.4,775.798 1618.96,767.334 1619.52,745.564 1620.08,723.793 1620.64,755.652 1621.2,750.613 1621.76,745.423 1622.32,759.165 1622.88,741.696 1623.44,704.402 1624,735.822 1624.56,718.433 1625.11,731.717 1625.67,746.753 1626.23,726.098 1626.79,710.464 1627.35,725.171 1627.91,676.095 1628.47,675.615 1629.03,691.856 1629.59,674.949 1630.15,678.616 1630.71,646.1 1631.27,613.825 1631.83,651.371 1632.39,686.491 1632.94,670.44 1633.5,718.736 1634.06,733.88 1634.62,710.436 1635.18,761.62 1635.74,742.427 1636.3,738.865 1636.86,751.618 1637.42,766.615 1637.98,762.169 1638.54,746.151 1639.1,761.448 1639.66,755.744 1640.21,735.428 1640.77,750.701 1641.33,743.643 1641.89,709.652 1642.45,707.704 1643.01,721.951 1643.57,784.18 1644.13,779.425 1644.69,805.615 1645.25,786.175 1645.81,799.445 1646.37,777.809 1646.93,773.375 1647.48,801.24 1648.04,829.192 1648.6,838.563 1649.16,829.664 1649.72,851.15 1650.28,829.374 1650.84,836.388 1651.4,813.142 1651.96,809.169 1652.52,789.059 1653.08,783.688 1653.64,779.97 1654.2,790.686 1654.76,769.407 1655.31,747.693 1655.87,760.25 1656.43,786.976 1656.99,761.407 1657.55,756.628 1658.11,796.722 1658.67,753.639 1659.23,735.41 1659.79,765.902 1660.35,758.82 1660.91,754.841 1661.47,752.498 1662.03,719.463 1662.58,717.393 1663.14,685.472 1663.7,686.869 1664.26,688.035 1664.82,670.409 1665.38,669.088 1665.94,654.623 1666.5,676.832 1667.06,707.34 1667.62,721.835 1668.18,739.832 1668.74,700.988 1669.3,697.123 1669.85,710.914 1670.41,724.122 1670.97,738.404 1671.53,718.313 1672.09,716.607 1672.65,694.929 1673.21,678.24 1673.77,664.51 1674.33,666.614 1674.89,666.787 1675.45,665.293 1676.01,698.851 1676.57,697.7 1677.13,698.54 1677.68,664.771 1678.24,667.286 1678.8,698.053 1679.36,733.884 1679.92,714.628 1680.48,694.201 1681.04,694.023 1681.6,693.932 1682.16,691.597 1682.72,739.782 1683.28,722.463 1683.84,704.154 1684.4,716.957 1684.95,732.413 1685.51,681.708 1686.07,683.096 1686.63,682.961 1687.19,679.194 1687.75,664.631 1688.31,667.749 1688.87,698.758 1689.43,667.947 1689.99,649.75 1690.55,649.704 1691.11,667.846 1691.67,669.093 1692.23,640.864 1692.78,657.598 1693.34,657.518 1693.9,661.27 1694.46,662.189 1695.02,647.626 1695.58,649.652 1696.14,667.514 1696.7,670.119 1697.26,701.721 1697.82,702.207 1698.38,683.911 1698.94,714.698 1699.5,728.76 1700.05,727.083 1700.61,708.628 1701.17,693.217 1701.73,690.43 1702.29,658.831 1702.85,662.97 1703.41,631.27 1703.97,649.285 1704.53,634.492 1705.09,620.065 1705.65,621.277 1706.21,611.661 1706.77,611.983 1707.32,617.458 1707.88,606.252 1708.44,630.178 1709,617.337 1709.56,570.701 1710.12,593.94 1710.68,597.959 1711.24,582.099 1711.8,588.845 1712.36,597.894 1712.92,637.585 1713.48,641.168 1714.04,641.391 1714.6,661.427 1715.15,677.472 1715.71,646.346 1716.27,662.746 1716.83,663.627 1717.39,678.494 1717.95,664.508 1718.51,651.559 1719.07,690.288 1719.63,658.492 1720.19,613.816 1720.75,616.824 1721.31,600.855 1721.87,620.893 1722.42,625.478 1722.98,629.457 1723.54,615.777 1724.1,606.389 1724.66,612.235 1725.22,631.346 1725.78,634.885 1726.34,653.972 1726.9,643.157 1727.46,645.275 1728.02,679.218 1728.58,679.395 1729.14,695.65 1729.69,712.339 1730.25,676.658 1730.81,707.397 1731.37,706.532 1731.93,706.656 1732.49,674.938 1733.05,671.539 1733.61,689.554 1734.17,707.957 1734.73,724.373 1735.29,755.56 1735.85,753.606 1736.41,765.825 1736.97,774.972 1737.52,768.595 1738.08,746.914 1738.64,726.813 1739.2,719.335 1739.76,763.412 1740.32,741.063 1740.88,709.574 1741.44,708.288 1742,722.904 1742.56,701.485 1743.12,701.914 1743.68,669.898 1744.24,691.687 1744.79,725.87 1745.35,677.219 1745.91,676.651 1746.47,695.875 1747.03,695.201 1747.59,695.564 1748.15,694.836 1748.71,697.554 1749.27,696.896 1749.83,696.725 1750.39,680.352 1750.95,646.423 1751.51,644.714 1752.06,627.548 1752.62,629.94 1753.18,585.029 1753.74,604.645 1754.3,623.605 1754.86,625.463 1755.42,646.798 1755.98,615.186 1756.54,634.812 1757.1,652.214 1757.66,637.888 1758.22,655.199 1758.78,641.297 1759.34,615.393 1759.89,668.351 1760.45,700.771 1761.01,699.398 1761.57,667.602 1762.13,637.338 1762.69,628.035 1763.25,648.567 1763.81,635.247 1764.37,638.558 1764.93,687.902 1765.49,686.476 1766.05,719.66 1766.61,700.471 1767.16,668.098 1767.72,673.195 1768.28,693.716 1768.84,661.988 1769.4,662.306 1769.96,661.19 1770.52,660.782 1771.08,663.528 1771.64,663.227 1772.2,681.338 1772.76,667.252 1773.32,651.816 1773.88,667.881 1774.43,640.486 1774.99,657.491 1775.55,674.427 1776.11,704.035 1776.67,732.564 1777.23,748.883 1777.79,746.924 1778.35,791.675 1778.91,833.339 1779.47,823.969 1780.03,800.539 1780.59,810.167 1781.15,784.98 1781.71,762.645 1782.26,757.69 1782.82,772.322 1783.38,770.712 1783.94,768.271 1784.5,714.671 1785.06,727.173 1785.62,708.971 1786.18,727.209 1786.74,707.784 1787.3,688.879 1787.86,653.839 1788.42,690.97 1788.98,706.133 1789.53,724.86 1790.09,707.71 1790.65,708.401 1791.21,690.779 1791.77,672.95 1792.33,722.095 1792.89,736.077 1793.45,732.627 1794.01,744.493 1794.57,727.438 1795.13,742.07 1795.69,734.621 1796.25,732.991 1796.8,698.837 1797.36,697.383 1797.92,648.164 1798.48,666.827 1799.04,682.896 1799.6,678.754 1800.16,678.932 1800.72,693.627 1801.28,724.161 1801.84,722.302 1802.4,737.145 1802.96,690.323 1803.52,740.582 1804.08,705.021 1804.63,719.87 1805.19,714.213 1805.75,660.634 1806.31,661.594 1806.87,666.535 1807.43,651.887 1807.99,687.067 1808.55,688.006 1809.11,702.432 1809.67,685.745 1810.23,715.72 1810.79,743.576 1811.35,786.803 1811.9,748.305 1812.46,774.381 1813.02,789.007 1813.58,783.495 1814.14,797.404 1814.7,772.098 1815.26,701.691 1815.82,714.62 1816.38,726.831 1816.94,726.512 1817.5,696.089 1818.06,695.009 1818.62,647.582 1819.18,632.654 1819.73,651.282 1820.29,656.208 1820.85,676.697 1821.41,693.195 1821.97,689.976 1822.53,673.131 1823.09,676.38 1823.65,646.206 1824.21,664.3 1824.77,648.014 1825.33,654.068 1825.89,658.87 1826.45,693.078 1827,696.041 1827.56,681.058 1828.12,667.648 1828.68,669.576 1829.24,682.226 1829.8,663.8 1830.36,647.897 1830.92,638.093 1831.48,626.498 1832.04,615.156 1832.6,621.514 1833.16,621.482 1833.72,643.178 1834.27,678.256 1834.83,662.389 1835.39,681.885 1835.95,717.496 1836.51,736.218 1837.07,749.786 1837.63,730.89 1838.19,760.594 \"/>\n<path clip-path=\"url(#clip283)\" d=\"M720.247 692.769 L720.806 692.769 L721.365 692.769 L721.924 692.769 L722.484 692.769 L723.043 692.769 L723.602 692.769 L724.161 692.769 L724.721 692.769 L725.28 692.769 L725.839 692.769 L726.398 692.769 L726.958 692.769 L727.517 692.769 L728.076 692.769 L728.635 692.769 L729.195 692.769 L729.754 692.769 L730.313 692.769 L730.872 692.769 L731.432 692.769 L731.991 692.769 L732.55 692.769 L733.109 692.769 L733.669 692.769 L734.228 692.769 L734.787 692.769 L735.346 692.769 L735.906 692.769 L736.465 692.769 L737.024 692.769 L737.583 692.769 L738.143 692.769 L738.702 692.769 L739.261 692.769 L739.82 692.769 L740.38 692.769 L740.939 692.769 L741.498 692.769 L742.057 692.769 L742.617 692.769 L743.176 692.769 L743.735 692.769 L744.294 692.769 L744.854 692.769 L745.413 692.769 L745.972 692.769 L746.531 692.769 L747.091 692.769 L747.65 692.769 L748.209 692.769 L748.768 692.769 L749.328 692.769 L749.887 692.769 L750.446 692.769 L751.005 692.769 L751.565 692.769 L752.124 692.769 L752.683 692.769 L753.242 692.769 L753.802 692.769 L754.361 692.769 L754.92 692.769 L755.479 692.769 L756.039 692.769 L756.598 692.769 L757.157 692.769 L757.716 692.769 L758.276 692.769 L758.835 692.769 L759.394 692.769 L759.953 692.769 L760.513 692.769 L761.072 692.769 L761.631 692.769 L762.19 692.769 L762.75 692.769 L763.309 692.769 L763.868 692.769 L764.427 692.769 L764.987 692.769 L765.546 692.769 L766.105 692.769 L766.664 692.769 L767.224 692.769 L767.783 692.769 L768.342 692.769 L768.901 692.769 L769.461 692.769 L770.02 692.769 L770.579 692.769 L771.138 692.769 L771.698 692.769 L772.257 692.769 L772.816 692.769 L773.375 692.769 L773.935 692.769 L774.494 692.769 L775.053 692.769 L775.612 692.769 L776.172 692.769 L776.731 692.769 L777.29 692.769 L777.849 692.769 L778.409 692.769 L778.968 692.769 L779.527 692.769 L780.086 692.769 L780.646 692.769 L781.205 692.769 L781.764 692.769 L782.323 692.769 L782.883 692.769 L783.442 692.769 L784.001 692.769 L784.56 692.769 L785.12 692.769 L785.679 692.769 L786.238 692.769 L786.797 692.769 L787.357 692.769 L787.916 692.769 L788.475 692.769 L789.034 692.769 L789.594 692.769 L790.153 692.769 L790.712 692.769 L791.271 692.769 L791.831 692.769 L792.39 692.769 L792.949 692.769 L793.508 692.769 L794.068 692.769 L794.627 692.769 L795.186 692.769 L795.745 692.769 L796.305 692.769 L796.864 692.769 L797.423 692.769 L797.982 692.769 L798.542 692.769 L799.101 692.769 L799.66 692.769 L800.219 692.769 L800.779 692.769 L801.338 692.769 L801.897 692.769 L802.456 692.769 L803.016 692.769 L803.575 692.769 L804.134 692.769 L804.693 692.769 L805.253 692.769 L805.812 692.769 L806.371 692.769 L806.931 692.769 L807.49 692.769 L808.049 692.769 L808.608 692.769 L809.168 692.769 L809.727 692.769 L810.286 692.769 L810.845 692.769 L811.405 692.769 L811.964 692.769 L812.523 692.769 L813.082 692.769 L813.642 692.769 L814.201 692.769 L814.76 692.769 L815.319 692.769 L815.879 692.769 L816.438 692.769 L816.997 692.769 L817.556 692.769 L818.116 692.769 L818.675 692.769 L819.234 692.769 L819.793 692.769 L820.353 692.769 L820.912 692.769 L821.471 692.769 L822.03 692.769 L822.59 692.769 L823.149 692.769 L823.708 692.769 L824.267 692.769 L824.827 692.769 L825.386 692.769 L825.945 692.769 L826.504 692.769 L827.064 692.769 L827.623 692.769 L828.182 692.769 L828.741 692.769 L829.301 692.769 L829.86 692.769 L830.419 692.769 L830.978 692.769 L831.538 692.769 L832.097 692.769 L832.656 692.769 L833.215 692.769 L833.775 692.769 L834.334 692.769 L834.893 692.769 L835.452 692.769 L836.012 692.769 L836.571 692.769 L837.13 692.769 L837.689 692.769 L838.249 692.769 L838.808 692.769 L839.367 692.769 L839.926 692.769 L840.486 692.769 L841.045 692.769 L841.604 692.769 L842.163 692.769 L842.723 692.769 L843.282 692.769 L843.841 692.769 L844.4 692.769 L844.96 692.769 L845.519 692.769 L846.078 692.769 L846.637 692.769 L847.197 692.769 L847.756 692.769 L848.315 692.769 L848.874 692.769 L849.434 692.769 L849.993 692.769 L850.552 692.769 L851.111 692.769 L851.671 692.769 L852.23 692.769 L852.789 692.769 L853.348 692.769 L853.908 692.769 L854.467 692.769 L855.026 692.769 L855.585 692.769 L856.145 692.769 L856.704 692.769 L857.263 692.769 L857.822 692.769 L858.382 692.769 L858.941 692.769 L859.5 692.769 L860.059 692.769 L860.619 692.769 L861.178 692.769 L861.737 692.769 L862.296 692.769 L862.856 692.769 L863.415 692.769 L863.974 692.769 L864.533 692.769 L865.093 692.769 L865.652 692.769 L866.211 692.769 L866.77 692.769 L867.33 692.769 L867.889 692.769 L868.448 692.769 L869.007 692.769 L869.567 692.769 L870.126 692.769 L870.685 692.769 L871.244 692.769 L871.804 692.769 L872.363 692.769 L872.922 692.769 L873.481 692.769 L874.041 692.769 L874.6 692.769 L875.159 692.769 L875.718 692.769 L876.278 692.769 L876.837 692.769 L877.396 692.769 L877.955 692.769 L878.515 692.769 L879.074 692.769 L879.633 692.769 L880.192 692.769 L880.752 692.769 L881.311 692.769 L881.87 692.769 L882.429 692.769 L882.989 692.769 L883.548 692.769 L884.107 692.769 L884.666 692.769 L885.226 692.769 L885.785 692.769 L886.344 692.769 L886.903 692.769 L887.463 692.769 L888.022 692.769 L888.581 692.769 L889.14 692.769 L889.7 692.769 L890.259 692.769 L890.818 692.769 L891.377 692.769 L891.937 692.769 L892.496 692.769 L893.055 692.769 L893.614 692.769 L894.174 692.769 L894.733 692.769 L895.292 692.769 L895.851 692.769 L896.411 692.769 L896.97 692.769 L897.529 692.769 L898.088 692.769 L898.648 692.769 L899.207 692.769 L899.766 692.769 L900.325 692.769 L900.885 692.769 L901.444 692.769 L902.003 692.769 L902.562 692.769 L903.122 692.769 L903.681 692.769 L904.24 692.769 L904.799 692.769 L905.359 692.769 L905.918 692.769 L906.477 692.769 L907.036 692.769 L907.596 692.769 L908.155 692.769 L908.714 692.769 L909.273 692.769 L909.833 692.769 L910.392 692.769 L910.951 692.769 L911.51 692.769 L912.07 692.769 L912.629 692.769 L913.188 692.769 L913.747 692.769 L914.307 692.769 L914.866 692.769 L915.425 692.769 L915.984 692.769 L916.544 692.769 L917.103 692.769 L917.662 692.769 L918.221 692.769 L918.781 692.769 L919.34 692.769 L919.899 692.769 L920.458 692.769 L921.018 692.769 L921.577 692.769 L922.136 692.769 L922.695 692.769 L923.255 692.769 L923.814 692.769 L924.373 692.769 L924.932 692.769 L925.492 692.769 L926.051 692.769 L926.61 692.769 L927.169 692.769 L927.729 692.769 L928.288 692.769 L928.847 692.769 L929.406 692.769 L929.966 692.769 L930.525 692.769 L931.084 692.769 L931.644 692.769 L932.203 692.769 L932.762 692.769 L933.321 692.769 L933.881 692.769 L934.44 692.769 L934.999 692.769 L935.558 692.769 L936.118 692.769 L936.677 692.769 L937.236 692.769 L937.795 692.769 L938.355 692.769 L938.914 692.769 L939.473 692.769 L940.032 692.769 L940.592 692.769 L941.151 692.769 L941.71 692.769 L942.269 692.769 L942.829 692.769 L943.388 692.769 L943.947 692.769 L944.506 692.769 L945.066 692.769 L945.625 692.769 L946.184 692.769 L946.743 692.769 L947.303 692.769 L947.862 692.769 L948.421 692.769 L948.98 692.769 L949.54 692.769 L950.099 692.769 L950.658 692.769 L951.217 692.769 L951.777 692.769 L952.336 692.769 L952.895 692.769 L953.454 692.769 L954.014 692.769 L954.573 692.769 L955.132 692.769 L955.691 692.769 L956.251 692.769 L956.81 692.769 L957.369 692.769 L957.928 692.769 L958.488 692.769 L959.047 692.769 L959.606 692.769 L960.165 692.769 L960.725 692.769 L961.284 692.769 L961.843 692.769 L962.402 692.769 L962.962 692.769 L963.521 692.769 L964.08 692.769 L964.639 692.769 L965.199 692.769 L965.758 692.769 L966.317 692.769 L966.876 692.769 L967.436 692.769 L967.995 692.769 L968.554 692.769 L969.113 692.769 L969.673 692.769 L970.232 692.769 L970.791 692.769 L971.35 692.769 L971.91 692.769 L972.469 692.769 L973.028 692.769 L973.587 692.769 L974.147 692.769 L974.706 692.769 L975.265 692.769 L975.824 692.769 L976.384 692.769 L976.943 692.769 L977.502 692.769 L978.061 692.769 L978.621 692.769 L979.18 692.769 L979.739 692.769 L980.298 692.769 L980.858 692.769 L981.417 692.769 L981.976 692.769 L982.535 692.769 L983.095 692.769 L983.654 692.769 L984.213 692.769 L984.772 692.769 L985.332 692.769 L985.891 692.769 L986.45 692.769 L987.009 692.769 L987.569 692.769 L988.128 692.769 L988.687 692.769 L989.246 692.769 L989.806 692.769 L990.365 692.769 L990.924 692.769 L991.483 692.769 L992.043 692.769 L992.602 692.769 L993.161 692.769 L993.72 692.769 L994.28 692.769 L994.839 692.769 L995.398 692.769 L995.957 692.769 L996.517 692.769 L997.076 692.769 L997.635 692.769 L998.194 692.769 L998.754 692.769 L999.313 692.769 L999.872 692.769 L1000.43 692.769 L1000.99 692.769 L1001.55 692.769 L1002.11 692.769 L1002.67 692.769 L1003.23 692.769 L1003.79 692.769 L1004.35 692.769 L1004.91 692.769 L1005.46 692.769 L1006.02 692.769 L1006.58 692.769 L1007.14 692.769 L1007.7 692.769 L1008.26 692.769 L1008.82 692.769 L1009.38 692.769 L1009.94 692.769 L1010.5 692.769 L1011.06 692.769 L1011.62 692.769 L1012.18 692.769 L1012.73 692.769 L1013.29 692.769 L1013.85 692.769 L1014.41 692.769 L1014.97 692.769 L1015.53 692.769 L1016.09 692.769 L1016.65 692.769 L1017.21 692.769 L1017.77 692.769 L1018.33 692.769 L1018.89 692.769 L1019.45 692.769 L1020.01 692.769 L1020.56 692.769 L1021.12 692.769 L1021.68 692.769 L1022.24 692.769 L1022.8 692.769 L1023.36 692.769 L1023.92 692.769 L1024.48 692.769 L1025.04 692.769 L1025.6 692.769 L1026.16 692.769 L1026.72 692.769 L1027.28 692.769 L1027.83 692.769 L1028.39 692.769 L1028.95 692.769 L1029.51 692.769 L1030.07 692.769 L1030.63 692.769 L1031.19 692.769 L1031.75 692.769 L1032.31 692.769 L1032.87 692.769 L1033.43 692.769 L1033.99 692.769 L1034.55 692.769 L1035.1 692.769 L1035.66 692.769 L1036.22 692.769 L1036.78 692.769 L1037.34 692.769 L1037.9 692.769 L1038.46 692.769 L1039.02 692.769 L1039.58 692.769 L1040.14 692.769 L1040.7 692.769 L1041.26 692.769 L1041.82 692.769 L1042.38 692.769 L1042.93 692.769 L1043.49 692.769 L1044.05 692.769 L1044.61 692.769 L1045.17 692.769 L1045.73 692.769 L1046.29 692.769 L1046.85 692.769 L1047.41 692.769 L1047.97 692.769 L1048.53 692.769 L1049.09 692.769 L1049.65 692.769 L1050.2 692.769 L1050.76 692.769 L1051.32 692.769 L1051.88 692.769 L1052.44 692.769 L1053 692.769 L1053.56 692.769 L1054.12 692.769 L1054.68 692.769 L1055.24 692.769 L1055.8 692.769 L1056.36 692.769 L1056.92 692.769 L1057.48 692.769 L1058.03 692.769 L1058.59 692.769 L1059.15 692.769 L1059.71 692.769 L1060.27 692.769 L1060.83 692.769 L1061.39 692.769 L1061.95 692.769 L1062.51 692.769 L1063.07 692.769 L1063.63 692.769 L1064.19 692.769 L1064.75 692.769 L1065.3 692.769 L1065.86 692.769 L1066.42 692.769 L1066.98 692.769 L1067.54 692.769 L1068.1 692.769 L1068.66 692.769 L1069.22 692.769 L1069.78 692.769 L1070.34 692.769 L1070.9 692.769 L1071.46 692.769 L1072.02 692.769 L1072.57 692.769 L1073.13 692.769 L1073.69 692.769 L1074.25 692.769 L1074.81 692.769 L1075.37 692.769 L1075.93 692.769 L1076.49 692.769 L1077.05 692.769 L1077.61 692.769 L1078.17 692.769 L1078.73 692.769 L1079.29 692.769 L1079.85 692.769 L1080.4 692.769 L1080.96 692.769 L1081.52 692.769 L1082.08 692.769 L1082.64 692.769 L1083.2 692.769 L1083.76 692.769 L1084.32 692.769 L1084.88 692.769 L1085.44 692.769 L1086 692.769 L1086.56 692.769 L1087.12 692.769 L1087.67 692.769 L1088.23 692.769 L1088.79 692.769 L1089.35 692.769 L1089.91 692.769 L1090.47 692.769 L1091.03 692.769 L1091.59 692.769 L1092.15 692.769 L1092.71 692.769 L1093.27 692.769 L1093.83 692.769 L1094.39 692.769 L1094.94 692.769 L1095.5 692.769 L1096.06 692.769 L1096.62 692.769 L1097.18 692.769 L1097.74 692.769 L1098.3 692.769 L1098.86 692.769 L1099.42 692.769 L1099.98 692.769 L1100.54 692.769 L1101.1 692.769 L1101.66 692.769 L1102.22 692.769 L1102.77 692.769 L1103.33 692.769 L1103.89 692.769 L1104.45 692.769 L1105.01 692.769 L1105.57 692.769 L1106.13 692.769 L1106.69 692.769 L1107.25 692.769 L1107.81 692.769 L1108.37 692.769 L1108.93 692.769 L1109.49 692.769 L1110.04 692.769 L1110.6 692.769 L1111.16 692.769 L1111.72 692.769 L1112.28 692.769 L1112.84 692.769 L1113.4 692.769 L1113.96 692.769 L1114.52 692.769 L1115.08 692.769 L1115.64 692.769 L1116.2 692.769 L1116.76 692.769 L1117.31 692.769 L1117.87 692.769 L1118.43 692.769 L1118.99 692.769 L1119.55 692.769 L1120.11 692.769 L1120.67 692.769 L1121.23 692.769 L1121.79 692.769 L1122.35 692.769 L1122.91 692.769 L1123.47 692.769 L1124.03 692.769 L1124.59 692.769 L1125.14 692.769 L1125.7 692.769 L1126.26 692.769 L1126.82 692.769 L1127.38 692.769 L1127.94 692.769 L1128.5 692.769 L1129.06 692.769 L1129.62 692.769 L1130.18 692.769 L1130.74 692.769 L1131.3 692.769 L1131.86 692.769 L1132.41 692.769 L1132.97 692.769 L1133.53 692.769 L1134.09 692.769 L1134.65 692.769 L1135.21 692.769 L1135.77 692.769 L1136.33 692.769 L1136.89 692.769 L1137.45 692.769 L1138.01 692.769 L1138.57 692.769 L1139.13 692.769 L1139.68 692.769 L1140.24 692.769 L1140.8 692.769 L1141.36 692.769 L1141.92 692.769 L1142.48 692.769 L1143.04 692.769 L1143.6 692.769 L1144.16 692.769 L1144.72 692.769 L1145.28 692.769 L1145.84 692.769 L1146.4 692.769 L1146.96 692.769 L1147.51 692.769 L1148.07 692.769 L1148.63 692.769 L1149.19 692.769 L1149.75 692.769 L1150.31 692.769 L1150.87 692.769 L1151.43 692.769 L1151.99 692.769 L1152.55 692.769 L1153.11 692.769 L1153.67 692.769 L1154.23 692.769 L1154.78 692.769 L1155.34 692.769 L1155.9 692.769 L1156.46 692.769 L1157.02 692.769 L1157.58 692.769 L1158.14 692.769 L1158.7 692.769 L1159.26 692.769 L1159.82 692.769 L1160.38 692.769 L1160.94 692.769 L1161.5 692.769 L1162.05 692.769 L1162.61 692.769 L1163.17 692.769 L1163.73 692.769 L1164.29 692.769 L1164.85 692.769 L1165.41 692.769 L1165.97 692.769 L1166.53 692.769 L1167.09 692.769 L1167.65 692.769 L1168.21 692.769 L1168.77 692.769 L1169.33 692.769 L1169.88 692.769 L1170.44 692.769 L1171 692.769 L1171.56 692.769 L1172.12 692.769 L1172.68 692.769 L1173.24 692.769 L1173.8 692.769 L1174.36 692.769 L1174.92 692.769 L1175.48 692.769 L1176.04 692.769 L1176.6 692.769 L1177.15 692.769 L1177.71 692.769 L1178.27 692.769 L1178.83 692.769 L1179.39 692.769 L1179.95 692.769 L1180.51 692.769 L1181.07 692.769 L1181.63 692.769 L1182.19 692.769 L1182.75 692.769 L1183.31 692.769 L1183.87 692.769 L1184.43 692.769 L1184.98 692.769 L1185.54 692.769 L1186.1 692.769 L1186.66 692.769 L1187.22 692.769 L1187.78 692.769 L1188.34 692.769 L1188.9 692.769 L1189.46 692.769 L1190.02 692.769 L1190.58 692.769 L1191.14 692.769 L1191.7 692.769 L1192.25 692.769 L1192.81 692.769 L1193.37 692.769 L1193.93 692.769 L1194.49 692.769 L1195.05 692.769 L1195.61 692.769 L1196.17 692.769 L1196.73 692.769 L1197.29 692.769 L1197.85 692.769 L1198.41 692.769 L1198.97 692.769 L1199.52 692.769 L1200.08 692.769 L1200.64 692.769 L1201.2 692.769 L1201.76 692.769 L1202.32 692.769 L1202.88 692.769 L1203.44 692.769 L1204 692.769 L1204.56 692.769 L1205.12 692.769 L1205.68 692.769 L1206.24 692.769 L1206.8 692.769 L1207.35 692.769 L1207.91 692.769 L1208.47 692.769 L1209.03 692.769 L1209.59 692.769 L1210.15 692.769 L1210.71 692.769 L1211.27 692.769 L1211.83 692.769 L1212.39 692.769 L1212.95 692.769 L1213.51 692.769 L1214.07 692.769 L1214.62 692.769 L1215.18 692.769 L1215.74 692.769 L1216.3 692.769 L1216.86 692.769 L1217.42 692.769 L1217.98 692.769 L1218.54 692.769 L1219.1 692.769 L1219.66 692.769 L1220.22 692.769 L1220.78 692.769 L1221.34 692.769 L1221.89 692.769 L1222.45 692.769 L1223.01 692.769 L1223.57 692.769 L1224.13 692.769 L1224.69 692.769 L1225.25 692.769 L1225.81 692.769 L1226.37 692.769 L1226.93 692.769 L1227.49 692.769 L1228.05 692.769 L1228.61 692.769 L1229.17 692.769 L1229.72 692.769 L1230.28 692.769 L1230.84 692.769 L1231.4 692.769 L1231.96 692.769 L1232.52 692.769 L1233.08 692.769 L1233.64 692.769 L1234.2 692.769 L1234.76 692.769 L1235.32 692.769 L1235.88 692.769 L1236.44 692.769 L1236.99 692.769 L1237.55 692.769 L1238.11 692.769 L1238.67 692.769 L1239.23 692.769 L1239.79 692.769 L1240.35 692.769 L1240.91 692.769 L1241.47 692.769 L1242.03 692.769 L1242.59 692.769 L1243.15 692.769 L1243.71 692.769 L1244.26 692.769 L1244.82 692.769 L1245.38 692.769 L1245.94 692.769 L1246.5 692.769 L1247.06 692.769 L1247.62 692.769 L1248.18 692.769 L1248.74 692.769 L1249.3 692.769 L1249.86 692.769 L1250.42 692.769 L1250.98 692.769 L1251.54 692.769 L1252.09 692.769 L1252.65 692.769 L1253.21 692.769 L1253.77 692.769 L1254.33 692.769 L1254.89 692.769 L1255.45 692.769 L1256.01 692.769 L1256.57 692.769 L1257.13 692.769 L1257.69 692.769 L1258.25 692.769 L1258.81 692.769 L1259.36 692.769 L1259.92 692.769 L1260.48 692.769 L1261.04 692.769 L1261.6 692.769 L1262.16 692.769 L1262.72 692.769 L1263.28 692.769 L1263.84 692.769 L1264.4 692.769 L1264.96 692.769 L1265.52 692.769 L1266.08 692.769 L1266.63 692.769 L1267.19 692.769 L1267.75 692.769 L1268.31 692.769 L1268.87 692.769 L1269.43 692.769 L1269.99 692.769 L1270.55 692.769 L1271.11 692.769 L1271.67 692.769 L1272.23 692.769 L1272.79 692.769 L1273.35 692.769 L1273.91 692.769 L1274.46 692.769 L1275.02 692.769 L1275.58 692.769 L1276.14 692.769 L1276.7 692.769 L1277.26 692.769 L1277.82 692.769 L1278.38 692.769 L1278.94 692.769 L1279.5 692.769 L1280.06 692.769 L1280.62 692.769 L1281.18 692.769 L1281.73 692.769 L1282.29 692.769 L1282.85 692.769 L1283.41 692.769 L1283.97 692.769 L1284.53 692.769 L1285.09 692.769 L1285.65 692.769 L1286.21 692.769 L1286.77 692.769 L1287.33 692.769 L1287.89 692.769 L1288.45 692.769 L1289 692.769 L1289.56 692.769 L1290.12 692.769 L1290.68 692.769 L1291.24 692.769 L1291.8 692.769 L1292.36 692.769 L1292.92 692.769 L1293.48 692.769 L1294.04 692.769 L1294.6 692.769 L1295.16 692.769 L1295.72 692.769 L1296.28 692.769 L1296.83 692.769 L1297.39 692.769 L1297.95 692.769 L1298.51 692.769 L1299.07 692.769 L1299.63 692.769 L1300.19 692.769 L1300.75 692.769 L1301.31 692.769 L1301.87 692.769 L1302.43 692.769 L1302.99 692.769 L1303.55 692.769 L1304.1 692.769 L1304.66 692.769 L1305.22 692.769 L1305.78 692.769 L1306.34 692.769 L1306.9 692.769 L1307.46 692.769 L1308.02 692.769 L1308.58 692.769 L1309.14 692.769 L1309.7 692.769 L1310.26 692.769 L1310.82 692.769 L1311.38 692.769 L1311.93 692.769 L1312.49 692.769 L1313.05 692.769 L1313.61 692.769 L1314.17 692.769 L1314.73 692.769 L1315.29 692.769 L1315.85 692.769 L1316.41 692.769 L1316.97 692.769 L1317.53 692.769 L1318.09 692.769 L1318.65 692.769 L1319.2 692.769 L1319.76 692.769 L1320.32 692.769 L1320.88 692.769 L1321.44 692.769 L1322 692.769 L1322.56 692.769 L1323.12 692.769 L1323.68 692.769 L1324.24 692.769 L1324.8 692.769 L1325.36 692.769 L1325.92 692.769 L1326.47 692.769 L1327.03 692.769 L1327.59 692.769 L1328.15 692.769 L1328.71 692.769 L1329.27 692.769 L1329.83 692.769 L1330.39 692.769 L1330.95 692.769 L1331.51 692.769 L1332.07 692.769 L1332.63 692.769 L1333.19 692.769 L1333.75 692.769 L1334.3 692.769 L1334.86 692.769 L1335.42 692.769 L1335.98 692.769 L1336.54 692.769 L1337.1 692.769 L1337.66 692.769 L1338.22 692.769 L1338.78 692.769 L1339.34 692.769 L1339.9 692.769 L1340.46 692.769 L1341.02 692.769 L1341.57 692.769 L1342.13 692.769 L1342.69 692.769 L1343.25 692.769 L1343.81 692.769 L1344.37 692.769 L1344.93 692.769 L1345.49 692.769 L1346.05 692.769 L1346.61 692.769 L1347.17 692.769 L1347.73 692.769 L1348.29 692.769 L1348.84 692.769 L1349.4 692.769 L1349.96 692.769 L1350.52 692.769 L1351.08 692.769 L1351.64 692.769 L1352.2 692.769 L1352.76 692.769 L1353.32 692.769 L1353.88 692.769 L1354.44 692.769 L1355 692.769 L1355.56 692.769 L1356.12 692.769 L1356.67 692.769 L1357.23 692.769 L1357.79 692.769 L1358.35 692.769 L1358.91 692.769 L1359.47 692.769 L1360.03 692.769 L1360.59 692.769 L1361.15 692.769 L1361.71 692.769 L1362.27 692.769 L1362.83 692.769 L1363.39 692.769 L1363.94 692.769 L1364.5 692.769 L1365.06 692.769 L1365.62 692.769 L1366.18 692.769 L1366.74 692.769 L1367.3 692.769 L1367.86 692.769 L1368.42 692.769 L1368.98 692.769 L1369.54 692.769 L1370.1 692.769 L1370.66 692.769 L1371.21 692.769 L1371.77 692.769 L1372.33 692.769 L1372.89 692.769 L1373.45 692.769 L1374.01 692.769 L1374.57 692.769 L1375.13 692.769 L1375.69 692.769 L1376.25 692.769 L1376.81 692.769 L1377.37 692.769 L1377.93 692.769 L1378.49 692.769 L1379.04 692.769 L1379.6 692.769 L1380.16 692.769 L1380.72 692.769 L1381.28 692.769 L1381.84 692.769 L1382.4 692.769 L1382.96 692.769 L1383.52 692.769 L1384.08 692.769 L1384.64 692.769 L1385.2 692.769 L1385.76 692.769 L1386.31 692.769 L1386.87 692.769 L1387.43 692.769 L1387.99 692.769 L1388.55 692.769 L1389.11 692.769 L1389.67 692.769 L1390.23 692.769 L1390.79 692.769 L1391.35 692.769 L1391.91 692.769 L1392.47 692.769 L1393.03 692.769 L1393.58 692.769 L1394.14 692.769 L1394.7 692.769 L1395.26 692.769 L1395.82 692.769 L1396.38 692.769 L1396.94 692.769 L1397.5 692.769 L1398.06 692.769 L1398.62 692.769 L1399.18 692.769 L1399.74 692.769 L1400.3 692.769 L1400.86 692.769 L1401.41 692.769 L1401.97 692.769 L1402.53 692.769 L1403.09 692.769 L1403.65 692.769 L1404.21 692.769 L1404.77 692.769 L1405.33 692.769 L1405.89 692.769 L1406.45 692.769 L1407.01 692.769 L1407.57 692.769 L1408.13 692.769 L1408.68 692.769 L1409.24 692.769 L1409.8 692.769 L1410.36 692.769 L1410.92 692.769 L1411.48 692.769 L1412.04 692.769 L1412.6 692.769 L1413.16 692.769 L1413.72 692.769 L1414.28 692.769 L1414.84 692.769 L1415.4 692.769 L1415.95 692.769 L1416.51 692.769 L1417.07 692.769 L1417.63 692.769 L1418.19 692.769 L1418.75 692.769 L1419.31 692.769 L1419.87 692.769 L1420.43 692.769 L1420.99 692.769 L1421.55 692.769 L1422.11 692.769 L1422.67 692.769 L1423.23 692.769 L1423.78 692.769 L1424.34 692.769 L1424.9 692.769 L1425.46 692.769 L1426.02 692.769 L1426.58 692.769 L1427.14 692.769 L1427.7 692.769 L1428.26 692.769 L1428.82 692.769 L1429.38 692.769 L1429.94 692.769 L1430.5 692.769 L1431.05 692.769 L1431.61 692.769 L1432.17 692.769 L1432.73 692.769 L1433.29 692.769 L1433.85 692.769 L1434.41 692.769 L1434.97 692.769 L1435.53 692.769 L1436.09 692.769 L1436.65 692.769 L1437.21 692.769 L1437.77 692.769 L1438.33 692.769 L1438.88 692.769 L1439.44 692.769 L1440 692.769 L1440.56 692.769 L1441.12 692.769 L1441.68 692.769 L1442.24 692.769 L1442.8 692.769 L1443.36 692.769 L1443.92 692.769 L1444.48 692.769 L1445.04 692.769 L1445.6 692.769 L1446.15 692.769 L1446.71 692.769 L1447.27 692.769 L1447.83 692.769 L1448.39 692.769 L1448.95 692.769 L1449.51 692.769 L1450.07 692.769 L1450.63 692.769 L1451.19 692.769 L1451.75 692.769 L1452.31 692.769 L1452.87 692.769 L1453.42 692.769 L1453.98 692.769 L1454.54 692.769 L1455.1 692.769 L1455.66 692.769 L1456.22 692.769 L1456.78 692.769 L1457.34 692.769 L1457.9 692.769 L1458.46 692.769 L1459.02 692.769 L1459.58 692.769 L1460.14 692.769 L1460.7 692.769 L1461.25 692.769 L1461.81 692.769 L1462.37 692.769 L1462.93 692.769 L1463.49 692.769 L1464.05 692.769 L1464.61 692.769 L1465.17 692.769 L1465.73 692.769 L1466.29 692.769 L1466.85 692.769 L1467.41 692.769 L1467.97 692.769 L1468.52 692.769 L1469.08 692.769 L1469.64 692.769 L1470.2 692.769 L1470.76 692.769 L1471.32 692.769 L1471.88 692.769 L1472.44 692.769 L1473 692.769 L1473.56 692.769 L1474.12 692.769 L1474.68 692.769 L1475.24 692.769 L1475.79 692.769 L1476.35 692.769 L1476.91 692.769 L1477.47 692.769 L1478.03 692.769 L1478.59 692.769 L1479.15 692.769 L1479.71 692.769 L1480.27 692.769 L1480.83 692.769 L1481.39 692.769 L1481.95 692.769 L1482.51 692.769 L1483.07 692.769 L1483.62 692.769 L1484.18 692.769 L1484.74 692.769 L1485.3 692.769 L1485.86 692.769 L1486.42 692.769 L1486.98 692.769 L1487.54 692.769 L1488.1 692.769 L1488.66 692.769 L1489.22 692.769 L1489.78 692.769 L1490.34 692.769 L1490.89 692.769 L1491.45 692.769 L1492.01 692.769 L1492.57 692.769 L1493.13 692.769 L1493.69 692.769 L1494.25 692.769 L1494.81 692.769 L1495.37 692.769 L1495.93 692.769 L1496.49 692.769 L1497.05 692.769 L1497.61 692.769 L1498.16 692.769 L1498.72 692.769 L1499.28 692.769 L1499.84 692.769 L1500.4 692.769 L1500.96 692.769 L1501.52 692.769 L1502.08 692.769 L1502.64 692.769 L1503.2 692.769 L1503.76 692.769 L1504.32 692.769 L1504.88 692.769 L1505.44 692.769 L1505.99 692.769 L1506.55 692.769 L1507.11 692.769 L1507.67 692.769 L1508.23 692.769 L1508.79 692.769 L1509.35 692.769 L1509.91 692.769 L1510.47 692.769 L1511.03 692.769 L1511.59 692.769 L1512.15 692.769 L1512.71 692.769 L1513.26 692.769 L1513.82 692.769 L1514.38 692.769 L1514.94 692.769 L1515.5 692.769 L1516.06 692.769 L1516.62 692.769 L1517.18 692.769 L1517.74 692.769 L1518.3 692.769 L1518.86 692.769 L1519.42 692.769 L1519.98 692.769 L1520.53 692.769 L1521.09 692.769 L1521.65 692.769 L1522.21 692.769 L1522.77 692.769 L1523.33 692.769 L1523.89 692.769 L1524.45 692.769 L1525.01 692.769 L1525.57 692.769 L1526.13 692.769 L1526.69 692.769 L1527.25 692.769 L1527.81 692.769 L1528.36 692.769 L1528.92 692.769 L1529.48 692.769 L1530.04 692.769 L1530.6 692.769 L1531.16 692.769 L1531.72 692.769 L1532.28 692.769 L1532.84 692.769 L1533.4 692.769 L1533.96 692.769 L1534.52 692.769 L1535.08 692.769 L1535.63 692.769 L1536.19 692.769 L1536.75 692.769 L1537.31 692.769 L1537.87 692.769 L1538.43 692.769 L1538.99 692.769 L1539.55 692.769 L1540.11 692.769 L1540.67 692.769 L1541.23 692.769 L1541.79 692.769 L1542.35 692.769 L1542.9 692.769 L1543.46 692.769 L1544.02 692.769 L1544.58 692.769 L1545.14 692.769 L1545.7 692.769 L1546.26 692.769 L1546.82 692.769 L1547.38 692.769 L1547.94 692.769 L1548.5 692.769 L1549.06 692.769 L1549.62 692.769 L1550.18 692.769 L1550.73 692.769 L1551.29 692.769 L1551.85 692.769 L1552.41 692.769 L1552.97 692.769 L1553.53 692.769 L1554.09 692.769 L1554.65 692.769 L1555.21 692.769 L1555.77 692.769 L1556.33 692.769 L1556.89 692.769 L1557.45 692.769 L1558 692.769 L1558.56 692.769 L1559.12 692.769 L1559.68 692.769 L1560.24 692.769 L1560.8 692.769 L1561.36 692.769 L1561.92 692.769 L1562.48 692.769 L1563.04 692.769 L1563.6 692.769 L1564.16 692.769 L1564.72 692.769 L1565.28 692.769 L1565.83 692.769 L1566.39 692.769 L1566.95 692.769 L1567.51 692.769 L1568.07 692.769 L1568.63 692.769 L1569.19 692.769 L1569.75 692.769 L1570.31 692.769 L1570.87 692.769 L1571.43 692.769 L1571.99 692.769 L1572.55 692.769 L1573.1 692.769 L1573.66 692.769 L1574.22 692.769 L1574.78 692.769 L1575.34 692.769 L1575.9 692.769 L1576.46 692.769 L1577.02 692.769 L1577.58 692.769 L1578.14 692.769 L1578.7 692.769 L1579.26 692.769 L1579.82 692.769 L1580.37 692.769 L1580.93 692.769 L1581.49 692.769 L1582.05 692.769 L1582.61 692.769 L1583.17 692.769 L1583.73 692.769 L1584.29 692.769 L1584.85 692.769 L1585.41 692.769 L1585.97 692.769 L1586.53 692.769 L1587.09 692.769 L1587.65 692.769 L1588.2 692.769 L1588.76 692.769 L1589.32 692.769 L1589.88 692.769 L1590.44 692.769 L1591 692.769 L1591.56 692.769 L1592.12 692.769 L1592.68 692.769 L1593.24 692.769 L1593.8 692.769 L1594.36 692.769 L1594.92 692.769 L1595.47 692.769 L1596.03 692.769 L1596.59 692.769 L1597.15 692.769 L1597.71 692.769 L1598.27 692.769 L1598.83 692.769 L1599.39 692.769 L1599.95 692.769 L1600.51 692.769 L1601.07 692.769 L1601.63 692.769 L1602.19 692.769 L1602.74 692.769 L1603.3 692.769 L1603.86 692.769 L1604.42 692.769 L1604.98 692.769 L1605.54 692.769 L1606.1 692.769 L1606.66 692.769 L1607.22 692.769 L1607.78 692.769 L1608.34 692.769 L1608.9 692.769 L1609.46 692.769 L1610.02 692.769 L1610.57 692.769 L1611.13 692.769 L1611.69 692.769 L1612.25 692.769 L1612.81 692.769 L1613.37 692.769 L1613.93 692.769 L1614.49 692.769 L1615.05 692.769 L1615.61 692.769 L1616.17 692.769 L1616.73 692.769 L1617.29 692.769 L1617.84 692.769 L1618.4 692.769 L1618.96 692.769 L1619.52 692.769 L1620.08 692.769 L1620.64 692.769 L1621.2 692.769 L1621.76 692.769 L1622.32 692.769 L1622.88 692.769 L1623.44 692.769 L1624 692.769 L1624.56 692.769 L1625.11 692.769 L1625.67 692.769 L1626.23 692.769 L1626.79 692.769 L1627.35 692.769 L1627.91 692.769 L1628.47 692.769 L1629.03 692.769 L1629.59 692.769 L1630.15 692.769 L1630.71 692.769 L1631.27 692.769 L1631.83 692.769 L1632.39 692.769 L1632.94 692.769 L1633.5 692.769 L1634.06 692.769 L1634.62 692.769 L1635.18 692.769 L1635.74 692.769 L1636.3 692.769 L1636.86 692.769 L1637.42 692.769 L1637.98 692.769 L1638.54 692.769 L1639.1 692.769 L1639.66 692.769 L1640.21 692.769 L1640.77 692.769 L1641.33 692.769 L1641.89 692.769 L1642.45 692.769 L1643.01 692.769 L1643.57 692.769 L1644.13 692.769 L1644.69 692.769 L1645.25 692.769 L1645.81 692.769 L1646.37 692.769 L1646.93 692.769 L1647.48 692.769 L1648.04 692.769 L1648.6 692.769 L1649.16 692.769 L1649.72 692.769 L1650.28 692.769 L1650.84 692.769 L1651.4 692.769 L1651.96 692.769 L1652.52 692.769 L1653.08 692.769 L1653.64 692.769 L1654.2 692.769 L1654.76 692.769 L1655.31 692.769 L1655.87 692.769 L1656.43 692.769 L1656.99 692.769 L1657.55 692.769 L1658.11 692.769 L1658.67 692.769 L1659.23 692.769 L1659.79 692.769 L1660.35 692.769 L1660.91 692.769 L1661.47 692.769 L1662.03 692.769 L1662.58 692.769 L1663.14 692.769 L1663.7 692.769 L1664.26 692.769 L1664.82 692.769 L1665.38 692.769 L1665.94 692.769 L1666.5 692.769 L1667.06 692.769 L1667.62 692.769 L1668.18 692.769 L1668.74 692.769 L1669.3 692.769 L1669.85 692.769 L1670.41 692.769 L1670.97 692.769 L1671.53 692.769 L1672.09 692.769 L1672.65 692.769 L1673.21 692.769 L1673.77 692.769 L1674.33 692.769 L1674.89 692.769 L1675.45 692.769 L1676.01 692.769 L1676.57 692.769 L1677.13 692.769 L1677.68 692.769 L1678.24 692.769 L1678.8 692.769 L1679.36 692.769 L1679.92 692.769 L1680.48 692.769 L1681.04 692.769 L1681.6 692.769 L1682.16 692.769 L1682.72 692.769 L1683.28 692.769 L1683.84 692.769 L1684.4 692.769 L1684.95 692.769 L1685.51 692.769 L1686.07 692.769 L1686.63 692.769 L1687.19 692.769 L1687.75 692.769 L1688.31 692.769 L1688.87 692.769 L1689.43 692.769 L1689.99 692.769 L1690.55 692.769 L1691.11 692.769 L1691.67 692.769 L1692.23 692.769 L1692.78 692.769 L1693.34 692.769 L1693.9 692.769 L1694.46 692.769 L1695.02 692.769 L1695.58 692.769 L1696.14 692.769 L1696.7 692.769 L1697.26 692.769 L1697.82 692.769 L1698.38 692.769 L1698.94 692.769 L1699.5 692.769 L1700.05 692.769 L1700.61 692.769 L1701.17 692.769 L1701.73 692.769 L1702.29 692.769 L1702.85 692.769 L1703.41 692.769 L1703.97 692.769 L1704.53 692.769 L1705.09 692.769 L1705.65 692.769 L1706.21 692.769 L1706.77 692.769 L1707.32 692.769 L1707.88 692.769 L1708.44 692.769 L1709 692.769 L1709.56 692.769 L1710.12 692.769 L1710.68 692.769 L1711.24 692.769 L1711.8 692.769 L1712.36 692.769 L1712.92 692.769 L1713.48 692.769 L1714.04 692.769 L1714.6 692.769 L1715.15 692.769 L1715.71 692.769 L1716.27 692.769 L1716.83 692.769 L1717.39 692.769 L1717.95 692.769 L1718.51 692.769 L1719.07 692.769 L1719.63 692.769 L1720.19 692.769 L1720.75 692.769 L1721.31 692.769 L1721.87 692.769 L1722.42 692.769 L1722.98 692.769 L1723.54 692.769 L1724.1 692.769 L1724.66 692.769 L1725.22 692.769 L1725.78 692.769 L1726.34 692.769 L1726.9 692.769 L1727.46 692.769 L1728.02 692.769 L1728.58 692.769 L1729.14 692.769 L1729.69 692.769 L1730.25 692.769 L1730.81 692.769 L1731.37 692.769 L1731.93 692.769 L1732.49 692.769 L1733.05 692.769 L1733.61 692.769 L1734.17 692.769 L1734.73 692.769 L1735.29 692.769 L1735.85 692.769 L1736.41 692.769 L1736.97 692.769 L1737.52 692.769 L1738.08 692.769 L1738.64 692.769 L1739.2 692.769 L1739.76 692.769 L1740.32 692.769 L1740.88 692.769 L1741.44 692.769 L1742 692.769 L1742.56 692.769 L1743.12 692.769 L1743.68 692.769 L1744.24 692.769 L1744.79 692.769 L1745.35 692.769 L1745.91 692.769 L1746.47 692.769 L1747.03 692.769 L1747.59 692.769 L1748.15 692.769 L1748.71 692.769 L1749.27 692.769 L1749.83 692.769 L1750.39 692.769 L1750.95 692.769 L1751.51 692.769 L1752.06 692.769 L1752.62 692.769 L1753.18 692.769 L1753.74 692.769 L1754.3 692.769 L1754.86 692.769 L1755.42 692.769 L1755.98 692.769 L1756.54 692.769 L1757.1 692.769 L1757.66 692.769 L1758.22 692.769 L1758.78 692.769 L1759.34 692.769 L1759.89 692.769 L1760.45 692.769 L1761.01 692.769 L1761.57 692.769 L1762.13 692.769 L1762.69 692.769 L1763.25 692.769 L1763.81 692.769 L1764.37 692.769 L1764.93 692.769 L1765.49 692.769 L1766.05 692.769 L1766.61 692.769 L1767.16 692.769 L1767.72 692.769 L1768.28 692.769 L1768.84 692.769 L1769.4 692.769 L1769.96 692.769 L1770.52 692.769 L1771.08 692.769 L1771.64 692.769 L1772.2 692.769 L1772.76 692.769 L1773.32 692.769 L1773.88 692.769 L1774.43 692.769 L1774.99 692.769 L1775.55 692.769 L1776.11 692.769 L1776.67 692.769 L1777.23 692.769 L1777.79 692.769 L1778.35 692.769 L1778.91 692.769 L1779.47 692.769 L1780.03 692.769 L1780.59 692.769 L1781.15 692.769 L1781.71 692.769 L1782.26 692.769 L1782.82 692.769 L1783.38 692.769 L1783.94 692.769 L1784.5 692.769 L1785.06 692.769 L1785.62 692.769 L1786.18 692.769 L1786.74 692.769 L1787.3 692.769 L1787.86 692.769 L1788.42 692.769 L1788.98 692.769 L1789.53 692.769 L1790.09 692.769 L1790.65 692.769 L1791.21 692.769 L1791.77 692.769 L1792.33 692.769 L1792.89 692.769 L1793.45 692.769 L1794.01 692.769 L1794.57 692.769 L1795.13 692.769 L1795.69 692.769 L1796.25 692.769 L1796.8 692.769 L1797.36 692.769 L1797.92 692.769 L1798.48 692.769 L1799.04 692.769 L1799.6 692.769 L1800.16 692.769 L1800.72 692.769 L1801.28 692.769 L1801.84 692.769 L1802.4 692.769 L1802.96 692.769 L1803.52 692.769 L1804.08 692.769 L1804.63 692.769 L1805.19 692.769 L1805.75 692.769 L1806.31 692.769 L1806.87 692.769 L1807.43 692.769 L1807.99 692.769 L1808.55 692.769 L1809.11 692.769 L1809.67 692.769 L1810.23 692.769 L1810.79 692.769 L1811.35 692.769 L1811.9 692.769 L1812.46 692.769 L1813.02 692.769 L1813.58 692.769 L1814.14 692.769 L1814.7 692.769 L1815.26 692.769 L1815.82 692.769 L1816.38 692.769 L1816.94 692.769 L1817.5 692.769 L1818.06 692.769 L1818.62 692.769 L1819.18 692.769 L1819.73 692.769 L1820.29 692.769 L1820.85 692.769 L1821.41 692.769 L1821.97 692.769 L1822.53 692.769 L1823.09 692.769 L1823.65 692.769 L1824.21 692.769 L1824.77 692.769 L1825.33 692.769 L1825.89 692.769 L1826.45 692.769 L1827 692.769 L1827.56 692.769 L1828.12 692.769 L1828.68 692.769 L1829.24 692.769 L1829.8 692.769 L1830.36 692.769 L1830.92 692.769 L1831.48 692.769 L1832.04 692.769 L1832.6 692.769 L1833.16 692.769 L1833.72 692.769 L1834.27 692.769 L1834.83 692.769 L1835.39 692.769 L1835.95 692.769 L1836.51 692.769 L1837.07 692.769 L1837.63 692.769 L1838.19 692.769 L1838.19 683.358 L1837.63 683.358 L1837.07 683.358 L1836.51 683.358 L1835.95 683.358 L1835.39 683.358 L1834.83 683.358 L1834.27 683.358 L1833.72 683.358 L1833.16 683.358 L1832.6 683.358 L1832.04 683.358 L1831.48 683.358 L1830.92 683.358 L1830.36 683.358 L1829.8 683.358 L1829.24 683.358 L1828.68 683.358 L1828.12 683.358 L1827.56 683.358 L1827 683.358 L1826.45 683.358 L1825.89 683.358 L1825.33 683.358 L1824.77 683.358 L1824.21 683.358 L1823.65 683.358 L1823.09 683.358 L1822.53 683.358 L1821.97 683.358 L1821.41 683.358 L1820.85 683.358 L1820.29 683.358 L1819.73 683.358 L1819.18 683.358 L1818.62 683.358 L1818.06 683.358 L1817.5 683.358 L1816.94 683.358 L1816.38 683.358 L1815.82 683.358 L1815.26 683.358 L1814.7 683.358 L1814.14 683.358 L1813.58 683.358 L1813.02 683.358 L1812.46 683.358 L1811.9 683.358 L1811.35 683.358 L1810.79 683.358 L1810.23 683.358 L1809.67 683.358 L1809.11 683.358 L1808.55 683.358 L1807.99 683.358 L1807.43 683.358 L1806.87 683.358 L1806.31 683.358 L1805.75 683.358 L1805.19 683.358 L1804.63 683.358 L1804.08 683.358 L1803.52 683.358 L1802.96 683.358 L1802.4 683.358 L1801.84 683.358 L1801.28 683.358 L1800.72 683.358 L1800.16 683.358 L1799.6 683.358 L1799.04 683.358 L1798.48 683.358 L1797.92 683.358 L1797.36 683.358 L1796.8 683.358 L1796.25 683.358 L1795.69 683.358 L1795.13 683.358 L1794.57 683.358 L1794.01 683.358 L1793.45 683.358 L1792.89 683.358 L1792.33 683.358 L1791.77 683.358 L1791.21 683.358 L1790.65 683.358 L1790.09 683.358 L1789.53 683.358 L1788.98 683.358 L1788.42 683.358 L1787.86 683.358 L1787.3 683.358 L1786.74 683.358 L1786.18 683.358 L1785.62 683.358 L1785.06 683.358 L1784.5 683.358 L1783.94 683.358 L1783.38 683.358 L1782.82 683.358 L1782.26 683.358 L1781.71 683.358 L1781.15 683.358 L1780.59 683.358 L1780.03 683.358 L1779.47 683.358 L1778.91 683.358 L1778.35 683.358 L1777.79 683.358 L1777.23 683.358 L1776.67 683.358 L1776.11 683.358 L1775.55 683.358 L1774.99 683.358 L1774.43 683.358 L1773.88 683.358 L1773.32 683.358 L1772.76 683.358 L1772.2 683.358 L1771.64 683.358 L1771.08 683.358 L1770.52 683.358 L1769.96 683.358 L1769.4 683.358 L1768.84 683.358 L1768.28 683.358 L1767.72 683.358 L1767.16 683.358 L1766.61 683.358 L1766.05 683.358 L1765.49 683.358 L1764.93 683.358 L1764.37 683.358 L1763.81 683.358 L1763.25 683.358 L1762.69 683.358 L1762.13 683.358 L1761.57 683.358 L1761.01 683.358 L1760.45 683.358 L1759.89 683.358 L1759.34 683.358 L1758.78 683.358 L1758.22 683.358 L1757.66 683.358 L1757.1 683.358 L1756.54 683.358 L1755.98 683.358 L1755.42 683.358 L1754.86 683.358 L1754.3 683.358 L1753.74 683.358 L1753.18 683.358 L1752.62 683.358 L1752.06 683.358 L1751.51 683.358 L1750.95 683.358 L1750.39 683.358 L1749.83 683.358 L1749.27 683.358 L1748.71 683.358 L1748.15 683.358 L1747.59 683.358 L1747.03 683.358 L1746.47 683.358 L1745.91 683.358 L1745.35 683.358 L1744.79 683.358 L1744.24 683.358 L1743.68 683.358 L1743.12 683.358 L1742.56 683.358 L1742 683.358 L1741.44 683.358 L1740.88 683.358 L1740.32 683.358 L1739.76 683.358 L1739.2 683.358 L1738.64 683.358 L1738.08 683.358 L1737.52 683.358 L1736.97 683.358 L1736.41 683.358 L1735.85 683.358 L1735.29 683.358 L1734.73 683.358 L1734.17 683.358 L1733.61 683.358 L1733.05 683.358 L1732.49 683.358 L1731.93 683.358 L1731.37 683.358 L1730.81 683.358 L1730.25 683.358 L1729.69 683.358 L1729.14 683.358 L1728.58 683.358 L1728.02 683.358 L1727.46 683.358 L1726.9 683.358 L1726.34 683.358 L1725.78 683.358 L1725.22 683.358 L1724.66 683.358 L1724.1 683.358 L1723.54 683.358 L1722.98 683.358 L1722.42 683.358 L1721.87 683.358 L1721.31 683.358 L1720.75 683.358 L1720.19 683.358 L1719.63 683.358 L1719.07 683.358 L1718.51 683.358 L1717.95 683.358 L1717.39 683.358 L1716.83 683.358 L1716.27 683.358 L1715.71 683.358 L1715.15 683.358 L1714.6 683.358 L1714.04 683.358 L1713.48 683.358 L1712.92 683.358 L1712.36 683.358 L1711.8 683.358 L1711.24 683.358 L1710.68 683.358 L1710.12 683.358 L1709.56 683.358 L1709 683.358 L1708.44 683.358 L1707.88 683.358 L1707.32 683.358 L1706.77 683.358 L1706.21 683.358 L1705.65 683.358 L1705.09 683.358 L1704.53 683.358 L1703.97 683.358 L1703.41 683.358 L1702.85 683.358 L1702.29 683.358 L1701.73 683.358 L1701.17 683.358 L1700.61 683.358 L1700.05 683.358 L1699.5 683.358 L1698.94 683.358 L1698.38 683.358 L1697.82 683.358 L1697.26 683.358 L1696.7 683.358 L1696.14 683.358 L1695.58 683.358 L1695.02 683.358 L1694.46 683.358 L1693.9 683.358 L1693.34 683.358 L1692.78 683.358 L1692.23 683.358 L1691.67 683.358 L1691.11 683.358 L1690.55 683.358 L1689.99 683.358 L1689.43 683.358 L1688.87 683.358 L1688.31 683.358 L1687.75 683.358 L1687.19 683.358 L1686.63 683.358 L1686.07 683.358 L1685.51 683.358 L1684.95 683.358 L1684.4 683.358 L1683.84 683.358 L1683.28 683.358 L1682.72 683.358 L1682.16 683.358 L1681.6 683.358 L1681.04 683.358 L1680.48 683.358 L1679.92 683.358 L1679.36 683.358 L1678.8 683.358 L1678.24 683.358 L1677.68 683.358 L1677.13 683.358 L1676.57 683.358 L1676.01 683.358 L1675.45 683.358 L1674.89 683.358 L1674.33 683.358 L1673.77 683.358 L1673.21 683.358 L1672.65 683.358 L1672.09 683.358 L1671.53 683.358 L1670.97 683.358 L1670.41 683.358 L1669.85 683.358 L1669.3 683.358 L1668.74 683.358 L1668.18 683.358 L1667.62 683.358 L1667.06 683.358 L1666.5 683.358 L1665.94 683.358 L1665.38 683.358 L1664.82 683.358 L1664.26 683.358 L1663.7 683.358 L1663.14 683.358 L1662.58 683.358 L1662.03 683.358 L1661.47 683.358 L1660.91 683.358 L1660.35 683.358 L1659.79 683.358 L1659.23 683.358 L1658.67 683.358 L1658.11 683.358 L1657.55 683.358 L1656.99 683.358 L1656.43 683.358 L1655.87 683.358 L1655.31 683.358 L1654.76 683.358 L1654.2 683.358 L1653.64 683.358 L1653.08 683.358 L1652.52 683.358 L1651.96 683.358 L1651.4 683.358 L1650.84 683.358 L1650.28 683.358 L1649.72 683.358 L1649.16 683.358 L1648.6 683.358 L1648.04 683.358 L1647.48 683.358 L1646.93 683.358 L1646.37 683.358 L1645.81 683.358 L1645.25 683.358 L1644.69 683.358 L1644.13 683.358 L1643.57 683.358 L1643.01 683.358 L1642.45 683.358 L1641.89 683.358 L1641.33 683.358 L1640.77 683.358 L1640.21 683.358 L1639.66 683.358 L1639.1 683.358 L1638.54 683.358 L1637.98 683.358 L1637.42 683.358 L1636.86 683.358 L1636.3 683.358 L1635.74 683.358 L1635.18 683.358 L1634.62 683.358 L1634.06 683.358 L1633.5 683.358 L1632.94 683.358 L1632.39 683.358 L1631.83 683.358 L1631.27 683.358 L1630.71 683.358 L1630.15 683.358 L1629.59 683.358 L1629.03 683.358 L1628.47 683.358 L1627.91 683.358 L1627.35 683.358 L1626.79 683.358 L1626.23 683.358 L1625.67 683.358 L1625.11 683.358 L1624.56 683.358 L1624 683.358 L1623.44 683.358 L1622.88 683.358 L1622.32 683.358 L1621.76 683.358 L1621.2 683.358 L1620.64 683.358 L1620.08 683.358 L1619.52 683.358 L1618.96 683.358 L1618.4 683.358 L1617.84 683.358 L1617.29 683.358 L1616.73 683.358 L1616.17 683.358 L1615.61 683.358 L1615.05 683.358 L1614.49 683.358 L1613.93 683.358 L1613.37 683.358 L1612.81 683.358 L1612.25 683.358 L1611.69 683.358 L1611.13 683.358 L1610.57 683.358 L1610.02 683.358 L1609.46 683.358 L1608.9 683.358 L1608.34 683.358 L1607.78 683.358 L1607.22 683.358 L1606.66 683.358 L1606.1 683.358 L1605.54 683.358 L1604.98 683.358 L1604.42 683.358 L1603.86 683.358 L1603.3 683.358 L1602.74 683.358 L1602.19 683.358 L1601.63 683.358 L1601.07 683.358 L1600.51 683.358 L1599.95 683.358 L1599.39 683.358 L1598.83 683.358 L1598.27 683.358 L1597.71 683.358 L1597.15 683.358 L1596.59 683.358 L1596.03 683.358 L1595.47 683.358 L1594.92 683.358 L1594.36 683.358 L1593.8 683.358 L1593.24 683.358 L1592.68 683.358 L1592.12 683.358 L1591.56 683.358 L1591 683.358 L1590.44 683.358 L1589.88 683.358 L1589.32 683.358 L1588.76 683.358 L1588.2 683.358 L1587.65 683.358 L1587.09 683.358 L1586.53 683.358 L1585.97 683.358 L1585.41 683.358 L1584.85 683.358 L1584.29 683.358 L1583.73 683.358 L1583.17 683.358 L1582.61 683.358 L1582.05 683.358 L1581.49 683.358 L1580.93 683.358 L1580.37 683.358 L1579.82 683.358 L1579.26 683.358 L1578.7 683.358 L1578.14 683.358 L1577.58 683.358 L1577.02 683.358 L1576.46 683.358 L1575.9 683.358 L1575.34 683.358 L1574.78 683.358 L1574.22 683.358 L1573.66 683.358 L1573.1 683.358 L1572.55 683.358 L1571.99 683.358 L1571.43 683.358 L1570.87 683.358 L1570.31 683.358 L1569.75 683.358 L1569.19 683.358 L1568.63 683.358 L1568.07 683.358 L1567.51 683.358 L1566.95 683.358 L1566.39 683.358 L1565.83 683.358 L1565.28 683.358 L1564.72 683.358 L1564.16 683.358 L1563.6 683.358 L1563.04 683.358 L1562.48 683.358 L1561.92 683.358 L1561.36 683.358 L1560.8 683.358 L1560.24 683.358 L1559.68 683.358 L1559.12 683.358 L1558.56 683.358 L1558 683.358 L1557.45 683.358 L1556.89 683.358 L1556.33 683.358 L1555.77 683.358 L1555.21 683.358 L1554.65 683.358 L1554.09 683.358 L1553.53 683.358 L1552.97 683.358 L1552.41 683.358 L1551.85 683.358 L1551.29 683.358 L1550.73 683.358 L1550.18 683.358 L1549.62 683.358 L1549.06 683.358 L1548.5 683.358 L1547.94 683.358 L1547.38 683.358 L1546.82 683.358 L1546.26 683.358 L1545.7 683.358 L1545.14 683.358 L1544.58 683.358 L1544.02 683.358 L1543.46 683.358 L1542.9 683.358 L1542.35 683.358 L1541.79 683.358 L1541.23 683.358 L1540.67 683.358 L1540.11 683.358 L1539.55 683.358 L1538.99 683.358 L1538.43 683.358 L1537.87 683.358 L1537.31 683.358 L1536.75 683.358 L1536.19 683.358 L1535.63 683.358 L1535.08 683.358 L1534.52 683.358 L1533.96 683.358 L1533.4 683.358 L1532.84 683.358 L1532.28 683.358 L1531.72 683.358 L1531.16 683.358 L1530.6 683.358 L1530.04 683.358 L1529.48 683.358 L1528.92 683.358 L1528.36 683.358 L1527.81 683.358 L1527.25 683.358 L1526.69 683.358 L1526.13 683.358 L1525.57 683.358 L1525.01 683.358 L1524.45 683.358 L1523.89 683.358 L1523.33 683.358 L1522.77 683.358 L1522.21 683.358 L1521.65 683.358 L1521.09 683.358 L1520.53 683.358 L1519.98 683.358 L1519.42 683.358 L1518.86 683.358 L1518.3 683.358 L1517.74 683.358 L1517.18 683.358 L1516.62 683.358 L1516.06 683.358 L1515.5 683.358 L1514.94 683.358 L1514.38 683.358 L1513.82 683.358 L1513.26 683.358 L1512.71 683.358 L1512.15 683.358 L1511.59 683.358 L1511.03 683.358 L1510.47 683.358 L1509.91 683.358 L1509.35 683.358 L1508.79 683.358 L1508.23 683.358 L1507.67 683.358 L1507.11 683.358 L1506.55 683.358 L1505.99 683.358 L1505.44 683.358 L1504.88 683.358 L1504.32 683.358 L1503.76 683.358 L1503.2 683.358 L1502.64 683.358 L1502.08 683.358 L1501.52 683.358 L1500.96 683.358 L1500.4 683.358 L1499.84 683.358 L1499.28 683.358 L1498.72 683.358 L1498.16 683.358 L1497.61 683.358 L1497.05 683.358 L1496.49 683.358 L1495.93 683.358 L1495.37 683.358 L1494.81 683.358 L1494.25 683.358 L1493.69 683.358 L1493.13 683.358 L1492.57 683.358 L1492.01 683.358 L1491.45 683.358 L1490.89 683.358 L1490.34 683.358 L1489.78 683.358 L1489.22 683.358 L1488.66 683.358 L1488.1 683.358 L1487.54 683.358 L1486.98 683.358 L1486.42 683.358 L1485.86 683.358 L1485.3 683.358 L1484.74 683.358 L1484.18 683.358 L1483.62 683.358 L1483.07 683.358 L1482.51 683.358 L1481.95 683.358 L1481.39 683.358 L1480.83 683.358 L1480.27 683.358 L1479.71 683.358 L1479.15 683.358 L1478.59 683.358 L1478.03 683.358 L1477.47 683.358 L1476.91 683.358 L1476.35 683.358 L1475.79 683.358 L1475.24 683.358 L1474.68 683.358 L1474.12 683.358 L1473.56 683.358 L1473 683.358 L1472.44 683.358 L1471.88 683.358 L1471.32 683.358 L1470.76 683.358 L1470.2 683.358 L1469.64 683.358 L1469.08 683.358 L1468.52 683.358 L1467.97 683.358 L1467.41 683.358 L1466.85 683.358 L1466.29 683.358 L1465.73 683.358 L1465.17 683.358 L1464.61 683.358 L1464.05 683.358 L1463.49 683.358 L1462.93 683.358 L1462.37 683.358 L1461.81 683.358 L1461.25 683.358 L1460.7 683.358 L1460.14 683.358 L1459.58 683.358 L1459.02 683.358 L1458.46 683.358 L1457.9 683.358 L1457.34 683.358 L1456.78 683.358 L1456.22 683.358 L1455.66 683.358 L1455.1 683.358 L1454.54 683.358 L1453.98 683.358 L1453.42 683.358 L1452.87 683.358 L1452.31 683.358 L1451.75 683.358 L1451.19 683.358 L1450.63 683.358 L1450.07 683.358 L1449.51 683.358 L1448.95 683.358 L1448.39 683.358 L1447.83 683.358 L1447.27 683.358 L1446.71 683.358 L1446.15 683.358 L1445.6 683.358 L1445.04 683.358 L1444.48 683.358 L1443.92 683.358 L1443.36 683.358 L1442.8 683.358 L1442.24 683.358 L1441.68 683.358 L1441.12 683.358 L1440.56 683.358 L1440 683.358 L1439.44 683.358 L1438.88 683.358 L1438.33 683.358 L1437.77 683.358 L1437.21 683.358 L1436.65 683.358 L1436.09 683.358 L1435.53 683.358 L1434.97 683.358 L1434.41 683.358 L1433.85 683.358 L1433.29 683.358 L1432.73 683.358 L1432.17 683.358 L1431.61 683.358 L1431.05 683.358 L1430.5 683.358 L1429.94 683.358 L1429.38 683.358 L1428.82 683.358 L1428.26 683.358 L1427.7 683.358 L1427.14 683.358 L1426.58 683.358 L1426.02 683.358 L1425.46 683.358 L1424.9 683.358 L1424.34 683.358 L1423.78 683.358 L1423.23 683.358 L1422.67 683.358 L1422.11 683.358 L1421.55 683.358 L1420.99 683.358 L1420.43 683.358 L1419.87 683.358 L1419.31 683.358 L1418.75 683.358 L1418.19 683.358 L1417.63 683.358 L1417.07 683.358 L1416.51 683.358 L1415.95 683.358 L1415.4 683.358 L1414.84 683.358 L1414.28 683.358 L1413.72 683.358 L1413.16 683.358 L1412.6 683.358 L1412.04 683.358 L1411.48 683.358 L1410.92 683.358 L1410.36 683.358 L1409.8 683.358 L1409.24 683.358 L1408.68 683.358 L1408.13 683.358 L1407.57 683.358 L1407.01 683.358 L1406.45 683.358 L1405.89 683.358 L1405.33 683.358 L1404.77 683.358 L1404.21 683.358 L1403.65 683.358 L1403.09 683.358 L1402.53 683.358 L1401.97 683.358 L1401.41 683.358 L1400.86 683.358 L1400.3 683.358 L1399.74 683.358 L1399.18 683.358 L1398.62 683.358 L1398.06 683.358 L1397.5 683.358 L1396.94 683.358 L1396.38 683.358 L1395.82 683.358 L1395.26 683.358 L1394.7 683.358 L1394.14 683.358 L1393.58 683.358 L1393.03 683.358 L1392.47 683.358 L1391.91 683.358 L1391.35 683.358 L1390.79 683.358 L1390.23 683.358 L1389.67 683.358 L1389.11 683.358 L1388.55 683.358 L1387.99 683.358 L1387.43 683.358 L1386.87 683.358 L1386.31 683.358 L1385.76 683.358 L1385.2 683.358 L1384.64 683.358 L1384.08 683.358 L1383.52 683.358 L1382.96 683.358 L1382.4 683.358 L1381.84 683.358 L1381.28 683.358 L1380.72 683.358 L1380.16 683.358 L1379.6 683.358 L1379.04 683.358 L1378.49 683.358 L1377.93 683.358 L1377.37 683.358 L1376.81 683.358 L1376.25 683.358 L1375.69 683.358 L1375.13 683.358 L1374.57 683.358 L1374.01 683.358 L1373.45 683.358 L1372.89 683.358 L1372.33 683.358 L1371.77 683.358 L1371.21 683.358 L1370.66 683.358 L1370.1 683.358 L1369.54 683.358 L1368.98 683.358 L1368.42 683.358 L1367.86 683.358 L1367.3 683.358 L1366.74 683.358 L1366.18 683.358 L1365.62 683.358 L1365.06 683.358 L1364.5 683.358 L1363.94 683.358 L1363.39 683.358 L1362.83 683.358 L1362.27 683.358 L1361.71 683.358 L1361.15 683.358 L1360.59 683.358 L1360.03 683.358 L1359.47 683.358 L1358.91 683.358 L1358.35 683.358 L1357.79 683.358 L1357.23 683.358 L1356.67 683.358 L1356.12 683.358 L1355.56 683.358 L1355 683.358 L1354.44 683.358 L1353.88 683.358 L1353.32 683.358 L1352.76 683.358 L1352.2 683.358 L1351.64 683.358 L1351.08 683.358 L1350.52 683.358 L1349.96 683.358 L1349.4 683.358 L1348.84 683.358 L1348.29 683.358 L1347.73 683.358 L1347.17 683.358 L1346.61 683.358 L1346.05 683.358 L1345.49 683.358 L1344.93 683.358 L1344.37 683.358 L1343.81 683.358 L1343.25 683.358 L1342.69 683.358 L1342.13 683.358 L1341.57 683.358 L1341.02 683.358 L1340.46 683.358 L1339.9 683.358 L1339.34 683.358 L1338.78 683.358 L1338.22 683.358 L1337.66 683.358 L1337.1 683.358 L1336.54 683.358 L1335.98 683.358 L1335.42 683.358 L1334.86 683.358 L1334.3 683.358 L1333.75 683.358 L1333.19 683.358 L1332.63 683.358 L1332.07 683.358 L1331.51 683.358 L1330.95 683.358 L1330.39 683.358 L1329.83 683.358 L1329.27 683.358 L1328.71 683.358 L1328.15 683.358 L1327.59 683.358 L1327.03 683.358 L1326.47 683.358 L1325.92 683.358 L1325.36 683.358 L1324.8 683.358 L1324.24 683.358 L1323.68 683.358 L1323.12 683.358 L1322.56 683.358 L1322 683.358 L1321.44 683.358 L1320.88 683.358 L1320.32 683.358 L1319.76 683.358 L1319.2 683.358 L1318.65 683.358 L1318.09 683.358 L1317.53 683.358 L1316.97 683.358 L1316.41 683.358 L1315.85 683.358 L1315.29 683.358 L1314.73 683.358 L1314.17 683.358 L1313.61 683.358 L1313.05 683.358 L1312.49 683.358 L1311.93 683.358 L1311.38 683.358 L1310.82 683.358 L1310.26 683.358 L1309.7 683.358 L1309.14 683.358 L1308.58 683.358 L1308.02 683.358 L1307.46 683.358 L1306.9 683.358 L1306.34 683.358 L1305.78 683.358 L1305.22 683.358 L1304.66 683.358 L1304.1 683.358 L1303.55 683.358 L1302.99 683.358 L1302.43 683.358 L1301.87 683.358 L1301.31 683.358 L1300.75 683.358 L1300.19 683.358 L1299.63 683.358 L1299.07 683.358 L1298.51 683.358 L1297.95 683.358 L1297.39 683.358 L1296.83 683.358 L1296.28 683.358 L1295.72 683.358 L1295.16 683.358 L1294.6 683.358 L1294.04 683.358 L1293.48 683.358 L1292.92 683.358 L1292.36 683.358 L1291.8 683.358 L1291.24 683.358 L1290.68 683.358 L1290.12 683.358 L1289.56 683.358 L1289 683.358 L1288.45 683.358 L1287.89 683.358 L1287.33 683.358 L1286.77 683.358 L1286.21 683.358 L1285.65 683.358 L1285.09 683.358 L1284.53 683.358 L1283.97 683.358 L1283.41 683.358 L1282.85 683.358 L1282.29 683.358 L1281.73 683.358 L1281.18 683.358 L1280.62 683.358 L1280.06 683.358 L1279.5 683.358 L1278.94 683.358 L1278.38 683.358 L1277.82 683.358 L1277.26 683.358 L1276.7 683.358 L1276.14 683.358 L1275.58 683.358 L1275.02 683.358 L1274.46 683.358 L1273.91 683.358 L1273.35 683.358 L1272.79 683.358 L1272.23 683.358 L1271.67 683.358 L1271.11 683.358 L1270.55 683.358 L1269.99 683.358 L1269.43 683.358 L1268.87 683.358 L1268.31 683.358 L1267.75 683.358 L1267.19 683.358 L1266.63 683.358 L1266.08 683.358 L1265.52 683.358 L1264.96 683.358 L1264.4 683.358 L1263.84 683.358 L1263.28 683.358 L1262.72 683.358 L1262.16 683.358 L1261.6 683.358 L1261.04 683.358 L1260.48 683.358 L1259.92 683.358 L1259.36 683.358 L1258.81 683.358 L1258.25 683.358 L1257.69 683.358 L1257.13 683.358 L1256.57 683.358 L1256.01 683.358 L1255.45 683.358 L1254.89 683.358 L1254.33 683.358 L1253.77 683.358 L1253.21 683.358 L1252.65 683.358 L1252.09 683.358 L1251.54 683.358 L1250.98 683.358 L1250.42 683.358 L1249.86 683.358 L1249.3 683.358 L1248.74 683.358 L1248.18 683.358 L1247.62 683.358 L1247.06 683.358 L1246.5 683.358 L1245.94 683.358 L1245.38 683.358 L1244.82 683.358 L1244.26 683.358 L1243.71 683.358 L1243.15 683.358 L1242.59 683.358 L1242.03 683.358 L1241.47 683.358 L1240.91 683.358 L1240.35 683.358 L1239.79 683.358 L1239.23 683.358 L1238.67 683.358 L1238.11 683.358 L1237.55 683.358 L1236.99 683.358 L1236.44 683.358 L1235.88 683.358 L1235.32 683.358 L1234.76 683.358 L1234.2 683.358 L1233.64 683.358 L1233.08 683.358 L1232.52 683.358 L1231.96 683.358 L1231.4 683.358 L1230.84 683.358 L1230.28 683.358 L1229.72 683.358 L1229.17 683.358 L1228.61 683.358 L1228.05 683.358 L1227.49 683.358 L1226.93 683.358 L1226.37 683.358 L1225.81 683.358 L1225.25 683.358 L1224.69 683.358 L1224.13 683.358 L1223.57 683.358 L1223.01 683.358 L1222.45 683.358 L1221.89 683.358 L1221.34 683.358 L1220.78 683.358 L1220.22 683.358 L1219.66 683.358 L1219.1 683.358 L1218.54 683.358 L1217.98 683.358 L1217.42 683.358 L1216.86 683.358 L1216.3 683.358 L1215.74 683.358 L1215.18 683.358 L1214.62 683.358 L1214.07 683.358 L1213.51 683.358 L1212.95 683.358 L1212.39 683.358 L1211.83 683.358 L1211.27 683.358 L1210.71 683.358 L1210.15 683.358 L1209.59 683.358 L1209.03 683.358 L1208.47 683.358 L1207.91 683.358 L1207.35 683.358 L1206.8 683.358 L1206.24 683.358 L1205.68 683.358 L1205.12 683.358 L1204.56 683.358 L1204 683.358 L1203.44 683.358 L1202.88 683.358 L1202.32 683.358 L1201.76 683.358 L1201.2 683.358 L1200.64 683.358 L1200.08 683.358 L1199.52 683.358 L1198.97 683.358 L1198.41 683.358 L1197.85 683.358 L1197.29 683.358 L1196.73 683.358 L1196.17 683.358 L1195.61 683.358 L1195.05 683.358 L1194.49 683.358 L1193.93 683.358 L1193.37 683.358 L1192.81 683.358 L1192.25 683.358 L1191.7 683.358 L1191.14 683.358 L1190.58 683.358 L1190.02 683.358 L1189.46 683.358 L1188.9 683.358 L1188.34 683.358 L1187.78 683.358 L1187.22 683.358 L1186.66 683.358 L1186.1 683.358 L1185.54 683.358 L1184.98 683.358 L1184.43 683.358 L1183.87 683.358 L1183.31 683.358 L1182.75 683.358 L1182.19 683.358 L1181.63 683.358 L1181.07 683.358 L1180.51 683.358 L1179.95 683.358 L1179.39 683.358 L1178.83 683.358 L1178.27 683.358 L1177.71 683.358 L1177.15 683.358 L1176.6 683.358 L1176.04 683.358 L1175.48 683.358 L1174.92 683.358 L1174.36 683.358 L1173.8 683.358 L1173.24 683.358 L1172.68 683.358 L1172.12 683.358 L1171.56 683.358 L1171 683.358 L1170.44 683.358 L1169.88 683.358 L1169.33 683.358 L1168.77 683.358 L1168.21 683.358 L1167.65 683.358 L1167.09 683.358 L1166.53 683.358 L1165.97 683.358 L1165.41 683.358 L1164.85 683.358 L1164.29 683.358 L1163.73 683.358 L1163.17 683.358 L1162.61 683.358 L1162.05 683.358 L1161.5 683.358 L1160.94 683.358 L1160.38 683.358 L1159.82 683.358 L1159.26 683.358 L1158.7 683.358 L1158.14 683.358 L1157.58 683.358 L1157.02 683.358 L1156.46 683.358 L1155.9 683.358 L1155.34 683.358 L1154.78 683.358 L1154.23 683.358 L1153.67 683.358 L1153.11 683.358 L1152.55 683.358 L1151.99 683.358 L1151.43 683.358 L1150.87 683.358 L1150.31 683.358 L1149.75 683.358 L1149.19 683.358 L1148.63 683.358 L1148.07 683.358 L1147.51 683.358 L1146.96 683.358 L1146.4 683.358 L1145.84 683.358 L1145.28 683.358 L1144.72 683.358 L1144.16 683.358 L1143.6 683.358 L1143.04 683.358 L1142.48 683.358 L1141.92 683.358 L1141.36 683.358 L1140.8 683.358 L1140.24 683.358 L1139.68 683.358 L1139.13 683.358 L1138.57 683.358 L1138.01 683.358 L1137.45 683.358 L1136.89 683.358 L1136.33 683.358 L1135.77 683.358 L1135.21 683.358 L1134.65 683.358 L1134.09 683.358 L1133.53 683.358 L1132.97 683.358 L1132.41 683.358 L1131.86 683.358 L1131.3 683.358 L1130.74 683.358 L1130.18 683.358 L1129.62 683.358 L1129.06 683.358 L1128.5 683.358 L1127.94 683.358 L1127.38 683.358 L1126.82 683.358 L1126.26 683.358 L1125.7 683.358 L1125.14 683.358 L1124.59 683.358 L1124.03 683.358 L1123.47 683.358 L1122.91 683.358 L1122.35 683.358 L1121.79 683.358 L1121.23 683.358 L1120.67 683.358 L1120.11 683.358 L1119.55 683.358 L1118.99 683.358 L1118.43 683.358 L1117.87 683.358 L1117.31 683.358 L1116.76 683.358 L1116.2 683.358 L1115.64 683.358 L1115.08 683.358 L1114.52 683.358 L1113.96 683.358 L1113.4 683.358 L1112.84 683.358 L1112.28 683.358 L1111.72 683.358 L1111.16 683.358 L1110.6 683.358 L1110.04 683.358 L1109.49 683.358 L1108.93 683.358 L1108.37 683.358 L1107.81 683.358 L1107.25 683.358 L1106.69 683.358 L1106.13 683.358 L1105.57 683.358 L1105.01 683.358 L1104.45 683.358 L1103.89 683.358 L1103.33 683.358 L1102.77 683.358 L1102.22 683.358 L1101.66 683.358 L1101.1 683.358 L1100.54 683.358 L1099.98 683.358 L1099.42 683.358 L1098.86 683.358 L1098.3 683.358 L1097.74 683.358 L1097.18 683.358 L1096.62 683.358 L1096.06 683.358 L1095.5 683.358 L1094.94 683.358 L1094.39 683.358 L1093.83 683.358 L1093.27 683.358 L1092.71 683.358 L1092.15 683.358 L1091.59 683.358 L1091.03 683.358 L1090.47 683.358 L1089.91 683.358 L1089.35 683.358 L1088.79 683.358 L1088.23 683.358 L1087.67 683.358 L1087.12 683.358 L1086.56 683.358 L1086 683.358 L1085.44 683.358 L1084.88 683.358 L1084.32 683.358 L1083.76 683.358 L1083.2 683.358 L1082.64 683.358 L1082.08 683.358 L1081.52 683.358 L1080.96 683.358 L1080.4 683.358 L1079.85 683.358 L1079.29 683.358 L1078.73 683.358 L1078.17 683.358 L1077.61 683.358 L1077.05 683.358 L1076.49 683.358 L1075.93 683.358 L1075.37 683.358 L1074.81 683.358 L1074.25 683.358 L1073.69 683.358 L1073.13 683.358 L1072.57 683.358 L1072.02 683.358 L1071.46 683.358 L1070.9 683.358 L1070.34 683.358 L1069.78 683.358 L1069.22 683.358 L1068.66 683.358 L1068.1 683.358 L1067.54 683.358 L1066.98 683.358 L1066.42 683.358 L1065.86 683.358 L1065.3 683.358 L1064.75 683.358 L1064.19 683.358 L1063.63 683.358 L1063.07 683.358 L1062.51 683.358 L1061.95 683.358 L1061.39 683.358 L1060.83 683.358 L1060.27 683.358 L1059.71 683.358 L1059.15 683.358 L1058.59 683.358 L1058.03 683.358 L1057.48 683.358 L1056.92 683.358 L1056.36 683.358 L1055.8 683.358 L1055.24 683.358 L1054.68 683.358 L1054.12 683.358 L1053.56 683.358 L1053 683.358 L1052.44 683.358 L1051.88 683.358 L1051.32 683.358 L1050.76 683.358 L1050.2 683.358 L1049.65 683.358 L1049.09 683.358 L1048.53 683.358 L1047.97 683.358 L1047.41 683.358 L1046.85 683.358 L1046.29 683.358 L1045.73 683.358 L1045.17 683.358 L1044.61 683.358 L1044.05 683.358 L1043.49 683.358 L1042.93 683.358 L1042.38 683.358 L1041.82 683.358 L1041.26 683.358 L1040.7 683.358 L1040.14 683.358 L1039.58 683.358 L1039.02 683.358 L1038.46 683.358 L1037.9 683.358 L1037.34 683.358 L1036.78 683.358 L1036.22 683.358 L1035.66 683.358 L1035.1 683.358 L1034.55 683.358 L1033.99 683.358 L1033.43 683.358 L1032.87 683.358 L1032.31 683.358 L1031.75 683.358 L1031.19 683.358 L1030.63 683.358 L1030.07 683.358 L1029.51 683.358 L1028.95 683.358 L1028.39 683.358 L1027.83 683.358 L1027.28 683.358 L1026.72 683.358 L1026.16 683.358 L1025.6 683.358 L1025.04 683.358 L1024.48 683.358 L1023.92 683.358 L1023.36 683.358 L1022.8 683.358 L1022.24 683.358 L1021.68 683.358 L1021.12 683.358 L1020.56 683.358 L1020.01 683.358 L1019.45 683.358 L1018.89 683.358 L1018.33 683.358 L1017.77 683.358 L1017.21 683.358 L1016.65 683.358 L1016.09 683.358 L1015.53 683.358 L1014.97 683.358 L1014.41 683.358 L1013.85 683.358 L1013.29 683.358 L1012.73 683.358 L1012.18 683.358 L1011.62 683.358 L1011.06 683.358 L1010.5 683.358 L1009.94 683.358 L1009.38 683.358 L1008.82 683.358 L1008.26 683.358 L1007.7 683.358 L1007.14 683.358 L1006.58 683.358 L1006.02 683.358 L1005.46 683.358 L1004.91 683.358 L1004.35 683.358 L1003.79 683.358 L1003.23 683.358 L1002.67 683.358 L1002.11 683.358 L1001.55 683.358 L1000.99 683.358 L1000.43 683.358 L999.872 683.358 L999.313 683.358 L998.754 683.358 L998.194 683.358 L997.635 683.358 L997.076 683.358 L996.517 683.358 L995.957 683.358 L995.398 683.358 L994.839 683.358 L994.28 683.358 L993.72 683.358 L993.161 683.358 L992.602 683.358 L992.043 683.358 L991.483 683.358 L990.924 683.358 L990.365 683.358 L989.806 683.358 L989.246 683.358 L988.687 683.358 L988.128 683.358 L987.569 683.358 L987.009 683.358 L986.45 683.358 L985.891 683.358 L985.332 683.358 L984.772 683.358 L984.213 683.358 L983.654 683.358 L983.095 683.358 L982.535 683.358 L981.976 683.358 L981.417 683.358 L980.858 683.358 L980.298 683.358 L979.739 683.358 L979.18 683.358 L978.621 683.358 L978.061 683.358 L977.502 683.358 L976.943 683.358 L976.384 683.358 L975.824 683.358 L975.265 683.358 L974.706 683.358 L974.147 683.358 L973.587 683.358 L973.028 683.358 L972.469 683.358 L971.91 683.358 L971.35 683.358 L970.791 683.358 L970.232 683.358 L969.673 683.358 L969.113 683.358 L968.554 683.358 L967.995 683.358 L967.436 683.358 L966.876 683.358 L966.317 683.358 L965.758 683.358 L965.199 683.358 L964.639 683.358 L964.08 683.358 L963.521 683.358 L962.962 683.358 L962.402 683.358 L961.843 683.358 L961.284 683.358 L960.725 683.358 L960.165 683.358 L959.606 683.358 L959.047 683.358 L958.488 683.358 L957.928 683.358 L957.369 683.358 L956.81 683.358 L956.251 683.358 L955.691 683.358 L955.132 683.358 L954.573 683.358 L954.014 683.358 L953.454 683.358 L952.895 683.358 L952.336 683.358 L951.777 683.358 L951.217 683.358 L950.658 683.358 L950.099 683.358 L949.54 683.358 L948.98 683.358 L948.421 683.358 L947.862 683.358 L947.303 683.358 L946.743 683.358 L946.184 683.358 L945.625 683.358 L945.066 683.358 L944.506 683.358 L943.947 683.358 L943.388 683.358 L942.829 683.358 L942.269 683.358 L941.71 683.358 L941.151 683.358 L940.592 683.358 L940.032 683.358 L939.473 683.358 L938.914 683.358 L938.355 683.358 L937.795 683.358 L937.236 683.358 L936.677 683.358 L936.118 683.358 L935.558 683.358 L934.999 683.358 L934.44 683.358 L933.881 683.358 L933.321 683.358 L932.762 683.358 L932.203 683.358 L931.644 683.358 L931.084 683.358 L930.525 683.358 L929.966 683.358 L929.406 683.358 L928.847 683.358 L928.288 683.358 L927.729 683.358 L927.169 683.358 L926.61 683.358 L926.051 683.358 L925.492 683.358 L924.932 683.358 L924.373 683.358 L923.814 683.358 L923.255 683.358 L922.695 683.358 L922.136 683.358 L921.577 683.358 L921.018 683.358 L920.458 683.358 L919.899 683.358 L919.34 683.358 L918.781 683.358 L918.221 683.358 L917.662 683.358 L917.103 683.358 L916.544 683.358 L915.984 683.358 L915.425 683.358 L914.866 683.358 L914.307 683.358 L913.747 683.358 L913.188 683.358 L912.629 683.358 L912.07 683.358 L911.51 683.358 L910.951 683.358 L910.392 683.358 L909.833 683.358 L909.273 683.358 L908.714 683.358 L908.155 683.358 L907.596 683.358 L907.036 683.358 L906.477 683.358 L905.918 683.358 L905.359 683.358 L904.799 683.358 L904.24 683.358 L903.681 683.358 L903.122 683.358 L902.562 683.358 L902.003 683.358 L901.444 683.358 L900.885 683.358 L900.325 683.358 L899.766 683.358 L899.207 683.358 L898.648 683.358 L898.088 683.358 L897.529 683.358 L896.97 683.358 L896.411 683.358 L895.851 683.358 L895.292 683.358 L894.733 683.358 L894.174 683.358 L893.614 683.358 L893.055 683.358 L892.496 683.358 L891.937 683.358 L891.377 683.358 L890.818 683.358 L890.259 683.358 L889.7 683.358 L889.14 683.358 L888.581 683.358 L888.022 683.358 L887.463 683.358 L886.903 683.358 L886.344 683.358 L885.785 683.358 L885.226 683.358 L884.666 683.358 L884.107 683.358 L883.548 683.358 L882.989 683.358 L882.429 683.358 L881.87 683.358 L881.311 683.358 L880.752 683.358 L880.192 683.358 L879.633 683.358 L879.074 683.358 L878.515 683.358 L877.955 683.358 L877.396 683.358 L876.837 683.358 L876.278 683.358 L875.718 683.358 L875.159 683.358 L874.6 683.358 L874.041 683.358 L873.481 683.358 L872.922 683.358 L872.363 683.358 L871.804 683.358 L871.244 683.358 L870.685 683.358 L870.126 683.358 L869.567 683.358 L869.007 683.358 L868.448 683.358 L867.889 683.358 L867.33 683.358 L866.77 683.358 L866.211 683.358 L865.652 683.358 L865.093 683.358 L864.533 683.358 L863.974 683.358 L863.415 683.358 L862.856 683.358 L862.296 683.358 L861.737 683.358 L861.178 683.358 L860.619 683.358 L860.059 683.358 L859.5 683.358 L858.941 683.358 L858.382 683.358 L857.822 683.358 L857.263 683.358 L856.704 683.358 L856.145 683.358 L855.585 683.358 L855.026 683.358 L854.467 683.358 L853.908 683.358 L853.348 683.358 L852.789 683.358 L852.23 683.358 L851.671 683.358 L851.111 683.358 L850.552 683.358 L849.993 683.358 L849.434 683.358 L848.874 683.358 L848.315 683.358 L847.756 683.358 L847.197 683.358 L846.637 683.358 L846.078 683.358 L845.519 683.358 L844.96 683.358 L844.4 683.358 L843.841 683.358 L843.282 683.358 L842.723 683.358 L842.163 683.358 L841.604 683.358 L841.045 683.358 L840.486 683.358 L839.926 683.358 L839.367 683.358 L838.808 683.358 L838.249 683.358 L837.689 683.358 L837.13 683.358 L836.571 683.358 L836.012 683.358 L835.452 683.358 L834.893 683.358 L834.334 683.358 L833.775 683.358 L833.215 683.358 L832.656 683.358 L832.097 683.358 L831.538 683.358 L830.978 683.358 L830.419 683.358 L829.86 683.358 L829.301 683.358 L828.741 683.358 L828.182 683.358 L827.623 683.358 L827.064 683.358 L826.504 683.358 L825.945 683.358 L825.386 683.358 L824.827 683.358 L824.267 683.358 L823.708 683.358 L823.149 683.358 L822.59 683.358 L822.03 683.358 L821.471 683.358 L820.912 683.358 L820.353 683.358 L819.793 683.358 L819.234 683.358 L818.675 683.358 L818.116 683.358 L817.556 683.358 L816.997 683.358 L816.438 683.358 L815.879 683.358 L815.319 683.358 L814.76 683.358 L814.201 683.358 L813.642 683.358 L813.082 683.358 L812.523 683.358 L811.964 683.358 L811.405 683.358 L810.845 683.358 L810.286 683.358 L809.727 683.358 L809.168 683.358 L808.608 683.358 L808.049 683.358 L807.49 683.358 L806.931 683.358 L806.371 683.358 L805.812 683.358 L805.253 683.358 L804.693 683.358 L804.134 683.358 L803.575 683.358 L803.016 683.358 L802.456 683.358 L801.897 683.358 L801.338 683.358 L800.779 683.358 L800.219 683.358 L799.66 683.358 L799.101 683.358 L798.542 683.358 L797.982 683.358 L797.423 683.358 L796.864 683.358 L796.305 683.358 L795.745 683.358 L795.186 683.358 L794.627 683.358 L794.068 683.358 L793.508 683.358 L792.949 683.358 L792.39 683.358 L791.831 683.358 L791.271 683.358 L790.712 683.358 L790.153 683.358 L789.594 683.358 L789.034 683.358 L788.475 683.358 L787.916 683.358 L787.357 683.358 L786.797 683.358 L786.238 683.358 L785.679 683.358 L785.12 683.358 L784.56 683.358 L784.001 683.358 L783.442 683.358 L782.883 683.358 L782.323 683.358 L781.764 683.358 L781.205 683.358 L780.646 683.358 L780.086 683.358 L779.527 683.358 L778.968 683.358 L778.409 683.358 L777.849 683.358 L777.29 683.358 L776.731 683.358 L776.172 683.358 L775.612 683.358 L775.053 683.358 L774.494 683.358 L773.935 683.358 L773.375 683.358 L772.816 683.358 L772.257 683.358 L771.698 683.358 L771.138 683.358 L770.579 683.358 L770.02 683.358 L769.461 683.358 L768.901 683.358 L768.342 683.358 L767.783 683.358 L767.224 683.358 L766.664 683.358 L766.105 683.358 L765.546 683.358 L764.987 683.358 L764.427 683.358 L763.868 683.358 L763.309 683.358 L762.75 683.358 L762.19 683.358 L761.631 683.358 L761.072 683.358 L760.513 683.358 L759.953 683.358 L759.394 683.358 L758.835 683.358 L758.276 683.358 L757.716 683.358 L757.157 683.358 L756.598 683.358 L756.039 683.358 L755.479 683.358 L754.92 683.358 L754.361 683.358 L753.802 683.358 L753.242 683.358 L752.683 683.358 L752.124 683.358 L751.565 683.358 L751.005 683.358 L750.446 683.358 L749.887 683.358 L749.328 683.358 L748.768 683.358 L748.209 683.358 L747.65 683.358 L747.091 683.358 L746.531 683.358 L745.972 683.358 L745.413 683.358 L744.854 683.358 L744.294 683.358 L743.735 683.358 L743.176 683.358 L742.617 683.358 L742.057 683.358 L741.498 683.358 L740.939 683.358 L740.38 683.358 L739.82 683.358 L739.261 683.358 L738.702 683.358 L738.143 683.358 L737.583 683.358 L737.024 683.358 L736.465 683.358 L735.906 683.358 L735.346 683.358 L734.787 683.358 L734.228 683.358 L733.669 683.358 L733.109 683.358 L732.55 683.358 L731.991 683.358 L731.432 683.358 L730.872 683.358 L730.313 683.358 L729.754 683.358 L729.195 683.358 L728.635 683.358 L728.076 683.358 L727.517 683.358 L726.958 683.358 L726.398 683.358 L725.839 683.358 L725.28 683.358 L724.721 683.358 L724.161 683.358 L723.602 683.358 L723.043 683.358 L722.484 683.358 L721.924 683.358 L721.365 683.358 L720.806 683.358 L720.247 683.358  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.063 720.806,688.063 721.365,688.063 721.924,688.063 722.484,688.063 723.043,688.063 723.602,688.063 724.161,688.063 724.721,688.063 725.28,688.063 725.839,688.063 726.398,688.063 726.958,688.063 727.517,688.063 728.076,688.063 728.635,688.063 729.195,688.063 729.754,688.063 730.313,688.063 730.872,688.063 731.432,688.063 731.991,688.063 732.55,688.063 733.109,688.063 733.669,688.063 734.228,688.063 734.787,688.063 735.346,688.063 735.906,688.063 736.465,688.063 737.024,688.063 737.583,688.063 738.143,688.063 738.702,688.063 739.261,688.063 739.82,688.063 740.38,688.063 740.939,688.063 741.498,688.063 742.057,688.063 742.617,688.063 743.176,688.063 743.735,688.063 744.294,688.063 744.854,688.063 745.413,688.063 745.972,688.063 746.531,688.063 747.091,688.063 747.65,688.063 748.209,688.063 748.768,688.063 749.328,688.063 749.887,688.063 750.446,688.063 751.005,688.063 751.565,688.063 752.124,688.063 752.683,688.063 753.242,688.063 753.802,688.063 754.361,688.063 754.92,688.063 755.479,688.063 756.039,688.063 756.598,688.063 757.157,688.063 757.716,688.063 758.276,688.063 758.835,688.063 759.394,688.063 759.953,688.063 760.513,688.063 761.072,688.063 761.631,688.063 762.19,688.063 762.75,688.063 763.309,688.063 763.868,688.063 764.427,688.063 764.987,688.063 765.546,688.063 766.105,688.063 766.664,688.063 767.224,688.063 767.783,688.063 768.342,688.063 768.901,688.063 769.461,688.063 770.02,688.063 770.579,688.063 771.138,688.063 771.698,688.063 772.257,688.063 772.816,688.063 773.375,688.063 773.935,688.063 774.494,688.063 775.053,688.063 775.612,688.063 776.172,688.063 776.731,688.063 777.29,688.063 777.849,688.063 778.409,688.063 778.968,688.063 779.527,688.063 780.086,688.063 780.646,688.063 781.205,688.063 781.764,688.063 782.323,688.063 782.883,688.063 783.442,688.063 784.001,688.063 784.56,688.063 785.12,688.063 785.679,688.063 786.238,688.063 786.797,688.063 787.357,688.063 787.916,688.063 788.475,688.063 789.034,688.063 789.594,688.063 790.153,688.063 790.712,688.063 791.271,688.063 791.831,688.063 792.39,688.063 792.949,688.063 793.508,688.063 794.068,688.063 794.627,688.063 795.186,688.063 795.745,688.063 796.305,688.063 796.864,688.063 797.423,688.063 797.982,688.063 798.542,688.063 799.101,688.063 799.66,688.063 800.219,688.063 800.779,688.063 801.338,688.063 801.897,688.063 802.456,688.063 803.016,688.063 803.575,688.063 804.134,688.063 804.693,688.063 805.253,688.063 805.812,688.063 806.371,688.063 806.931,688.063 807.49,688.063 808.049,688.063 808.608,688.063 809.168,688.063 809.727,688.063 810.286,688.063 810.845,688.063 811.405,688.063 811.964,688.063 812.523,688.063 813.082,688.063 813.642,688.063 814.201,688.063 814.76,688.063 815.319,688.063 815.879,688.063 816.438,688.063 816.997,688.063 817.556,688.063 818.116,688.063 818.675,688.063 819.234,688.063 819.793,688.063 820.353,688.063 820.912,688.063 821.471,688.063 822.03,688.063 822.59,688.063 823.149,688.063 823.708,688.063 824.267,688.063 824.827,688.063 825.386,688.063 825.945,688.063 826.504,688.063 827.064,688.063 827.623,688.063 828.182,688.063 828.741,688.063 829.301,688.063 829.86,688.063 830.419,688.063 830.978,688.063 831.538,688.063 832.097,688.063 832.656,688.063 833.215,688.063 833.775,688.063 834.334,688.063 834.893,688.063 835.452,688.063 836.012,688.063 836.571,688.063 837.13,688.063 837.689,688.063 838.249,688.063 838.808,688.063 839.367,688.063 839.926,688.063 840.486,688.063 841.045,688.063 841.604,688.063 842.163,688.063 842.723,688.063 843.282,688.063 843.841,688.063 844.4,688.063 844.96,688.063 845.519,688.063 846.078,688.063 846.637,688.063 847.197,688.063 847.756,688.063 848.315,688.063 848.874,688.063 849.434,688.063 849.993,688.063 850.552,688.063 851.111,688.063 851.671,688.063 852.23,688.063 852.789,688.063 853.348,688.063 853.908,688.063 854.467,688.063 855.026,688.063 855.585,688.063 856.145,688.063 856.704,688.063 857.263,688.063 857.822,688.063 858.382,688.063 858.941,688.063 859.5,688.063 860.059,688.063 860.619,688.063 861.178,688.063 861.737,688.063 862.296,688.063 862.856,688.063 863.415,688.063 863.974,688.063 864.533,688.063 865.093,688.063 865.652,688.063 866.211,688.063 866.77,688.063 867.33,688.063 867.889,688.063 868.448,688.063 869.007,688.063 869.567,688.063 870.126,688.063 870.685,688.063 871.244,688.063 871.804,688.063 872.363,688.063 872.922,688.063 873.481,688.063 874.041,688.063 874.6,688.063 875.159,688.063 875.718,688.063 876.278,688.063 876.837,688.063 877.396,688.063 877.955,688.063 878.515,688.063 879.074,688.063 879.633,688.063 880.192,688.063 880.752,688.063 881.311,688.063 881.87,688.063 882.429,688.063 882.989,688.063 883.548,688.063 884.107,688.063 884.666,688.063 885.226,688.063 885.785,688.063 886.344,688.063 886.903,688.063 887.463,688.063 888.022,688.063 888.581,688.063 889.14,688.063 889.7,688.063 890.259,688.063 890.818,688.063 891.377,688.063 891.937,688.063 892.496,688.063 893.055,688.063 893.614,688.063 894.174,688.063 894.733,688.063 895.292,688.063 895.851,688.063 896.411,688.063 896.97,688.063 897.529,688.063 898.088,688.063 898.648,688.063 899.207,688.063 899.766,688.063 900.325,688.063 900.885,688.063 901.444,688.063 902.003,688.063 902.562,688.063 903.122,688.063 903.681,688.063 904.24,688.063 904.799,688.063 905.359,688.063 905.918,688.063 906.477,688.063 907.036,688.063 907.596,688.063 908.155,688.063 908.714,688.063 909.273,688.063 909.833,688.063 910.392,688.063 910.951,688.063 911.51,688.063 912.07,688.063 912.629,688.063 913.188,688.063 913.747,688.063 914.307,688.063 914.866,688.063 915.425,688.063 915.984,688.063 916.544,688.063 917.103,688.063 917.662,688.063 918.221,688.063 918.781,688.063 919.34,688.063 919.899,688.063 920.458,688.063 921.018,688.063 921.577,688.063 922.136,688.063 922.695,688.063 923.255,688.063 923.814,688.063 924.373,688.063 924.932,688.063 925.492,688.063 926.051,688.063 926.61,688.063 927.169,688.063 927.729,688.063 928.288,688.063 928.847,688.063 929.406,688.063 929.966,688.063 930.525,688.063 931.084,688.063 931.644,688.063 932.203,688.063 932.762,688.063 933.321,688.063 933.881,688.063 934.44,688.063 934.999,688.063 935.558,688.063 936.118,688.063 936.677,688.063 937.236,688.063 937.795,688.063 938.355,688.063 938.914,688.063 939.473,688.063 940.032,688.063 940.592,688.063 941.151,688.063 941.71,688.063 942.269,688.063 942.829,688.063 943.388,688.063 943.947,688.063 944.506,688.063 945.066,688.063 945.625,688.063 946.184,688.063 946.743,688.063 947.303,688.063 947.862,688.063 948.421,688.063 948.98,688.063 949.54,688.063 950.099,688.063 950.658,688.063 951.217,688.063 951.777,688.063 952.336,688.063 952.895,688.063 953.454,688.063 954.014,688.063 954.573,688.063 955.132,688.063 955.691,688.063 956.251,688.063 956.81,688.063 957.369,688.063 957.928,688.063 958.488,688.063 959.047,688.063 959.606,688.063 960.165,688.063 960.725,688.063 961.284,688.063 961.843,688.063 962.402,688.063 962.962,688.063 963.521,688.063 964.08,688.063 964.639,688.063 965.199,688.063 965.758,688.063 966.317,688.063 966.876,688.063 967.436,688.063 967.995,688.063 968.554,688.063 969.113,688.063 969.673,688.063 970.232,688.063 970.791,688.063 971.35,688.063 971.91,688.063 972.469,688.063 973.028,688.063 973.587,688.063 974.147,688.063 974.706,688.063 975.265,688.063 975.824,688.063 976.384,688.063 976.943,688.063 977.502,688.063 978.061,688.063 978.621,688.063 979.18,688.063 979.739,688.063 980.298,688.063 980.858,688.063 981.417,688.063 981.976,688.063 982.535,688.063 983.095,688.063 983.654,688.063 984.213,688.063 984.772,688.063 985.332,688.063 985.891,688.063 986.45,688.063 987.009,688.063 987.569,688.063 988.128,688.063 988.687,688.063 989.246,688.063 989.806,688.063 990.365,688.063 990.924,688.063 991.483,688.063 992.043,688.063 992.602,688.063 993.161,688.063 993.72,688.063 994.28,688.063 994.839,688.063 995.398,688.063 995.957,688.063 996.517,688.063 997.076,688.063 997.635,688.063 998.194,688.063 998.754,688.063 999.313,688.063 999.872,688.063 1000.43,688.063 1000.99,688.063 1001.55,688.063 1002.11,688.063 1002.67,688.063 1003.23,688.063 1003.79,688.063 1004.35,688.063 1004.91,688.063 1005.46,688.063 1006.02,688.063 1006.58,688.063 1007.14,688.063 1007.7,688.063 1008.26,688.063 1008.82,688.063 1009.38,688.063 1009.94,688.063 1010.5,688.063 1011.06,688.063 1011.62,688.063 1012.18,688.063 1012.73,688.063 1013.29,688.063 1013.85,688.063 1014.41,688.063 1014.97,688.063 1015.53,688.063 1016.09,688.063 1016.65,688.063 1017.21,688.063 1017.77,688.063 1018.33,688.063 1018.89,688.063 1019.45,688.063 1020.01,688.063 1020.56,688.063 1021.12,688.063 1021.68,688.063 1022.24,688.063 1022.8,688.063 1023.36,688.063 1023.92,688.063 1024.48,688.063 1025.04,688.063 1025.6,688.063 1026.16,688.063 1026.72,688.063 1027.28,688.063 1027.83,688.063 1028.39,688.063 1028.95,688.063 1029.51,688.063 1030.07,688.063 1030.63,688.063 1031.19,688.063 1031.75,688.063 1032.31,688.063 1032.87,688.063 1033.43,688.063 1033.99,688.063 1034.55,688.063 1035.1,688.063 1035.66,688.063 1036.22,688.063 1036.78,688.063 1037.34,688.063 1037.9,688.063 1038.46,688.063 1039.02,688.063 1039.58,688.063 1040.14,688.063 1040.7,688.063 1041.26,688.063 1041.82,688.063 1042.38,688.063 1042.93,688.063 1043.49,688.063 1044.05,688.063 1044.61,688.063 1045.17,688.063 1045.73,688.063 1046.29,688.063 1046.85,688.063 1047.41,688.063 1047.97,688.063 1048.53,688.063 1049.09,688.063 1049.65,688.063 1050.2,688.063 1050.76,688.063 1051.32,688.063 1051.88,688.063 1052.44,688.063 1053,688.063 1053.56,688.063 1054.12,688.063 1054.68,688.063 1055.24,688.063 1055.8,688.063 1056.36,688.063 1056.92,688.063 1057.48,688.063 1058.03,688.063 1058.59,688.063 1059.15,688.063 1059.71,688.063 1060.27,688.063 1060.83,688.063 1061.39,688.063 1061.95,688.063 1062.51,688.063 1063.07,688.063 1063.63,688.063 1064.19,688.063 1064.75,688.063 1065.3,688.063 1065.86,688.063 1066.42,688.063 1066.98,688.063 1067.54,688.063 1068.1,688.063 1068.66,688.063 1069.22,688.063 1069.78,688.063 1070.34,688.063 1070.9,688.063 1071.46,688.063 1072.02,688.063 1072.57,688.063 1073.13,688.063 1073.69,688.063 1074.25,688.063 1074.81,688.063 1075.37,688.063 1075.93,688.063 1076.49,688.063 1077.05,688.063 1077.61,688.063 1078.17,688.063 1078.73,688.063 1079.29,688.063 1079.85,688.063 1080.4,688.063 1080.96,688.063 1081.52,688.063 1082.08,688.063 1082.64,688.063 1083.2,688.063 1083.76,688.063 1084.32,688.063 1084.88,688.063 1085.44,688.063 1086,688.063 1086.56,688.063 1087.12,688.063 1087.67,688.063 1088.23,688.063 1088.79,688.063 1089.35,688.063 1089.91,688.063 1090.47,688.063 1091.03,688.063 1091.59,688.063 1092.15,688.063 1092.71,688.063 1093.27,688.063 1093.83,688.063 1094.39,688.063 1094.94,688.063 1095.5,688.063 1096.06,688.063 1096.62,688.063 1097.18,688.063 1097.74,688.063 1098.3,688.063 1098.86,688.063 1099.42,688.063 1099.98,688.063 1100.54,688.063 1101.1,688.063 1101.66,688.063 1102.22,688.063 1102.77,688.063 1103.33,688.063 1103.89,688.063 1104.45,688.063 1105.01,688.063 1105.57,688.063 1106.13,688.063 1106.69,688.063 1107.25,688.063 1107.81,688.063 1108.37,688.063 1108.93,688.063 1109.49,688.063 1110.04,688.063 1110.6,688.063 1111.16,688.063 1111.72,688.063 1112.28,688.063 1112.84,688.063 1113.4,688.063 1113.96,688.063 1114.52,688.063 1115.08,688.063 1115.64,688.063 1116.2,688.063 1116.76,688.063 1117.31,688.063 1117.87,688.063 1118.43,688.063 1118.99,688.063 1119.55,688.063 1120.11,688.063 1120.67,688.063 1121.23,688.063 1121.79,688.063 1122.35,688.063 1122.91,688.063 1123.47,688.063 1124.03,688.063 1124.59,688.063 1125.14,688.063 1125.7,688.063 1126.26,688.063 1126.82,688.063 1127.38,688.063 1127.94,688.063 1128.5,688.063 1129.06,688.063 1129.62,688.063 1130.18,688.063 1130.74,688.063 1131.3,688.063 1131.86,688.063 1132.41,688.063 1132.97,688.063 1133.53,688.063 1134.09,688.063 1134.65,688.063 1135.21,688.063 1135.77,688.063 1136.33,688.063 1136.89,688.063 1137.45,688.063 1138.01,688.063 1138.57,688.063 1139.13,688.063 1139.68,688.063 1140.24,688.063 1140.8,688.063 1141.36,688.063 1141.92,688.063 1142.48,688.063 1143.04,688.063 1143.6,688.063 1144.16,688.063 1144.72,688.063 1145.28,688.063 1145.84,688.063 1146.4,688.063 1146.96,688.063 1147.51,688.063 1148.07,688.063 1148.63,688.063 1149.19,688.063 1149.75,688.063 1150.31,688.063 1150.87,688.063 1151.43,688.063 1151.99,688.063 1152.55,688.063 1153.11,688.063 1153.67,688.063 1154.23,688.063 1154.78,688.063 1155.34,688.063 1155.9,688.063 1156.46,688.063 1157.02,688.063 1157.58,688.063 1158.14,688.063 1158.7,688.063 1159.26,688.063 1159.82,688.063 1160.38,688.063 1160.94,688.063 1161.5,688.063 1162.05,688.063 1162.61,688.063 1163.17,688.063 1163.73,688.063 1164.29,688.063 1164.85,688.063 1165.41,688.063 1165.97,688.063 1166.53,688.063 1167.09,688.063 1167.65,688.063 1168.21,688.063 1168.77,688.063 1169.33,688.063 1169.88,688.063 1170.44,688.063 1171,688.063 1171.56,688.063 1172.12,688.063 1172.68,688.063 1173.24,688.063 1173.8,688.063 1174.36,688.063 1174.92,688.063 1175.48,688.063 1176.04,688.063 1176.6,688.063 1177.15,688.063 1177.71,688.063 1178.27,688.063 1178.83,688.063 1179.39,688.063 1179.95,688.063 1180.51,688.063 1181.07,688.063 1181.63,688.063 1182.19,688.063 1182.75,688.063 1183.31,688.063 1183.87,688.063 1184.43,688.063 1184.98,688.063 1185.54,688.063 1186.1,688.063 1186.66,688.063 1187.22,688.063 1187.78,688.063 1188.34,688.063 1188.9,688.063 1189.46,688.063 1190.02,688.063 1190.58,688.063 1191.14,688.063 1191.7,688.063 1192.25,688.063 1192.81,688.063 1193.37,688.063 1193.93,688.063 1194.49,688.063 1195.05,688.063 1195.61,688.063 1196.17,688.063 1196.73,688.063 1197.29,688.063 1197.85,688.063 1198.41,688.063 1198.97,688.063 1199.52,688.063 1200.08,688.063 1200.64,688.063 1201.2,688.063 1201.76,688.063 1202.32,688.063 1202.88,688.063 1203.44,688.063 1204,688.063 1204.56,688.063 1205.12,688.063 1205.68,688.063 1206.24,688.063 1206.8,688.063 1207.35,688.063 1207.91,688.063 1208.47,688.063 1209.03,688.063 1209.59,688.063 1210.15,688.063 1210.71,688.063 1211.27,688.063 1211.83,688.063 1212.39,688.063 1212.95,688.063 1213.51,688.063 1214.07,688.063 1214.62,688.063 1215.18,688.063 1215.74,688.063 1216.3,688.063 1216.86,688.063 1217.42,688.063 1217.98,688.063 1218.54,688.063 1219.1,688.063 1219.66,688.063 1220.22,688.063 1220.78,688.063 1221.34,688.063 1221.89,688.063 1222.45,688.063 1223.01,688.063 1223.57,688.063 1224.13,688.063 1224.69,688.063 1225.25,688.063 1225.81,688.063 1226.37,688.063 1226.93,688.063 1227.49,688.063 1228.05,688.063 1228.61,688.063 1229.17,688.063 1229.72,688.063 1230.28,688.063 1230.84,688.063 1231.4,688.063 1231.96,688.063 1232.52,688.063 1233.08,688.063 1233.64,688.063 1234.2,688.063 1234.76,688.063 1235.32,688.063 1235.88,688.063 1236.44,688.063 1236.99,688.063 1237.55,688.063 1238.11,688.063 1238.67,688.063 1239.23,688.063 1239.79,688.063 1240.35,688.063 1240.91,688.063 1241.47,688.063 1242.03,688.063 1242.59,688.063 1243.15,688.063 1243.71,688.063 1244.26,688.063 1244.82,688.063 1245.38,688.063 1245.94,688.063 1246.5,688.063 1247.06,688.063 1247.62,688.063 1248.18,688.063 1248.74,688.063 1249.3,688.063 1249.86,688.063 1250.42,688.063 1250.98,688.063 1251.54,688.063 1252.09,688.063 1252.65,688.063 1253.21,688.063 1253.77,688.063 1254.33,688.063 1254.89,688.063 1255.45,688.063 1256.01,688.063 1256.57,688.063 1257.13,688.063 1257.69,688.063 1258.25,688.063 1258.81,688.063 1259.36,688.063 1259.92,688.063 1260.48,688.063 1261.04,688.063 1261.6,688.063 1262.16,688.063 1262.72,688.063 1263.28,688.063 1263.84,688.063 1264.4,688.063 1264.96,688.063 1265.52,688.063 1266.08,688.063 1266.63,688.063 1267.19,688.063 1267.75,688.063 1268.31,688.063 1268.87,688.063 1269.43,688.063 1269.99,688.063 1270.55,688.063 1271.11,688.063 1271.67,688.063 1272.23,688.063 1272.79,688.063 1273.35,688.063 1273.91,688.063 1274.46,688.063 1275.02,688.063 1275.58,688.063 1276.14,688.063 1276.7,688.063 1277.26,688.063 1277.82,688.063 1278.38,688.063 1278.94,688.063 1279.5,688.063 1280.06,688.063 1280.62,688.063 1281.18,688.063 1281.73,688.063 1282.29,688.063 1282.85,688.063 1283.41,688.063 1283.97,688.063 1284.53,688.063 1285.09,688.063 1285.65,688.063 1286.21,688.063 1286.77,688.063 1287.33,688.063 1287.89,688.063 1288.45,688.063 1289,688.063 1289.56,688.063 1290.12,688.063 1290.68,688.063 1291.24,688.063 1291.8,688.063 1292.36,688.063 1292.92,688.063 1293.48,688.063 1294.04,688.063 1294.6,688.063 1295.16,688.063 1295.72,688.063 1296.28,688.063 1296.83,688.063 1297.39,688.063 1297.95,688.063 1298.51,688.063 1299.07,688.063 1299.63,688.063 1300.19,688.063 1300.75,688.063 1301.31,688.063 1301.87,688.063 1302.43,688.063 1302.99,688.063 1303.55,688.063 1304.1,688.063 1304.66,688.063 1305.22,688.063 1305.78,688.063 1306.34,688.063 1306.9,688.063 1307.46,688.063 1308.02,688.063 1308.58,688.063 1309.14,688.063 1309.7,688.063 1310.26,688.063 1310.82,688.063 1311.38,688.063 1311.93,688.063 1312.49,688.063 1313.05,688.063 1313.61,688.063 1314.17,688.063 1314.73,688.063 1315.29,688.063 1315.85,688.063 1316.41,688.063 1316.97,688.063 1317.53,688.063 1318.09,688.063 1318.65,688.063 1319.2,688.063 1319.76,688.063 1320.32,688.063 1320.88,688.063 1321.44,688.063 1322,688.063 1322.56,688.063 1323.12,688.063 1323.68,688.063 1324.24,688.063 1324.8,688.063 1325.36,688.063 1325.92,688.063 1326.47,688.063 1327.03,688.063 1327.59,688.063 1328.15,688.063 1328.71,688.063 1329.27,688.063 1329.83,688.063 1330.39,688.063 1330.95,688.063 1331.51,688.063 1332.07,688.063 1332.63,688.063 1333.19,688.063 1333.75,688.063 1334.3,688.063 1334.86,688.063 1335.42,688.063 1335.98,688.063 1336.54,688.063 1337.1,688.063 1337.66,688.063 1338.22,688.063 1338.78,688.063 1339.34,688.063 1339.9,688.063 1340.46,688.063 1341.02,688.063 1341.57,688.063 1342.13,688.063 1342.69,688.063 1343.25,688.063 1343.81,688.063 1344.37,688.063 1344.93,688.063 1345.49,688.063 1346.05,688.063 1346.61,688.063 1347.17,688.063 1347.73,688.063 1348.29,688.063 1348.84,688.063 1349.4,688.063 1349.96,688.063 1350.52,688.063 1351.08,688.063 1351.64,688.063 1352.2,688.063 1352.76,688.063 1353.32,688.063 1353.88,688.063 1354.44,688.063 1355,688.063 1355.56,688.063 1356.12,688.063 1356.67,688.063 1357.23,688.063 1357.79,688.063 1358.35,688.063 1358.91,688.063 1359.47,688.063 1360.03,688.063 1360.59,688.063 1361.15,688.063 1361.71,688.063 1362.27,688.063 1362.83,688.063 1363.39,688.063 1363.94,688.063 1364.5,688.063 1365.06,688.063 1365.62,688.063 1366.18,688.063 1366.74,688.063 1367.3,688.063 1367.86,688.063 1368.42,688.063 1368.98,688.063 1369.54,688.063 1370.1,688.063 1370.66,688.063 1371.21,688.063 1371.77,688.063 1372.33,688.063 1372.89,688.063 1373.45,688.063 1374.01,688.063 1374.57,688.063 1375.13,688.063 1375.69,688.063 1376.25,688.063 1376.81,688.063 1377.37,688.063 1377.93,688.063 1378.49,688.063 1379.04,688.063 1379.6,688.063 1380.16,688.063 1380.72,688.063 1381.28,688.063 1381.84,688.063 1382.4,688.063 1382.96,688.063 1383.52,688.063 1384.08,688.063 1384.64,688.063 1385.2,688.063 1385.76,688.063 1386.31,688.063 1386.87,688.063 1387.43,688.063 1387.99,688.063 1388.55,688.063 1389.11,688.063 1389.67,688.063 1390.23,688.063 1390.79,688.063 1391.35,688.063 1391.91,688.063 1392.47,688.063 1393.03,688.063 1393.58,688.063 1394.14,688.063 1394.7,688.063 1395.26,688.063 1395.82,688.063 1396.38,688.063 1396.94,688.063 1397.5,688.063 1398.06,688.063 1398.62,688.063 1399.18,688.063 1399.74,688.063 1400.3,688.063 1400.86,688.063 1401.41,688.063 1401.97,688.063 1402.53,688.063 1403.09,688.063 1403.65,688.063 1404.21,688.063 1404.77,688.063 1405.33,688.063 1405.89,688.063 1406.45,688.063 1407.01,688.063 1407.57,688.063 1408.13,688.063 1408.68,688.063 1409.24,688.063 1409.8,688.063 1410.36,688.063 1410.92,688.063 1411.48,688.063 1412.04,688.063 1412.6,688.063 1413.16,688.063 1413.72,688.063 1414.28,688.063 1414.84,688.063 1415.4,688.063 1415.95,688.063 1416.51,688.063 1417.07,688.063 1417.63,688.063 1418.19,688.063 1418.75,688.063 1419.31,688.063 1419.87,688.063 1420.43,688.063 1420.99,688.063 1421.55,688.063 1422.11,688.063 1422.67,688.063 1423.23,688.063 1423.78,688.063 1424.34,688.063 1424.9,688.063 1425.46,688.063 1426.02,688.063 1426.58,688.063 1427.14,688.063 1427.7,688.063 1428.26,688.063 1428.82,688.063 1429.38,688.063 1429.94,688.063 1430.5,688.063 1431.05,688.063 1431.61,688.063 1432.17,688.063 1432.73,688.063 1433.29,688.063 1433.85,688.063 1434.41,688.063 1434.97,688.063 1435.53,688.063 1436.09,688.063 1436.65,688.063 1437.21,688.063 1437.77,688.063 1438.33,688.063 1438.88,688.063 1439.44,688.063 1440,688.063 1440.56,688.063 1441.12,688.063 1441.68,688.063 1442.24,688.063 1442.8,688.063 1443.36,688.063 1443.92,688.063 1444.48,688.063 1445.04,688.063 1445.6,688.063 1446.15,688.063 1446.71,688.063 1447.27,688.063 1447.83,688.063 1448.39,688.063 1448.95,688.063 1449.51,688.063 1450.07,688.063 1450.63,688.063 1451.19,688.063 1451.75,688.063 1452.31,688.063 1452.87,688.063 1453.42,688.063 1453.98,688.063 1454.54,688.063 1455.1,688.063 1455.66,688.063 1456.22,688.063 1456.78,688.063 1457.34,688.063 1457.9,688.063 1458.46,688.063 1459.02,688.063 1459.58,688.063 1460.14,688.063 1460.7,688.063 1461.25,688.063 1461.81,688.063 1462.37,688.063 1462.93,688.063 1463.49,688.063 1464.05,688.063 1464.61,688.063 1465.17,688.063 1465.73,688.063 1466.29,688.063 1466.85,688.063 1467.41,688.063 1467.97,688.063 1468.52,688.063 1469.08,688.063 1469.64,688.063 1470.2,688.063 1470.76,688.063 1471.32,688.063 1471.88,688.063 1472.44,688.063 1473,688.063 1473.56,688.063 1474.12,688.063 1474.68,688.063 1475.24,688.063 1475.79,688.063 1476.35,688.063 1476.91,688.063 1477.47,688.063 1478.03,688.063 1478.59,688.063 1479.15,688.063 1479.71,688.063 1480.27,688.063 1480.83,688.063 1481.39,688.063 1481.95,688.063 1482.51,688.063 1483.07,688.063 1483.62,688.063 1484.18,688.063 1484.74,688.063 1485.3,688.063 1485.86,688.063 1486.42,688.063 1486.98,688.063 1487.54,688.063 1488.1,688.063 1488.66,688.063 1489.22,688.063 1489.78,688.063 1490.34,688.063 1490.89,688.063 1491.45,688.063 1492.01,688.063 1492.57,688.063 1493.13,688.063 1493.69,688.063 1494.25,688.063 1494.81,688.063 1495.37,688.063 1495.93,688.063 1496.49,688.063 1497.05,688.063 1497.61,688.063 1498.16,688.063 1498.72,688.063 1499.28,688.063 1499.84,688.063 1500.4,688.063 1500.96,688.063 1501.52,688.063 1502.08,688.063 1502.64,688.063 1503.2,688.063 1503.76,688.063 1504.32,688.063 1504.88,688.063 1505.44,688.063 1505.99,688.063 1506.55,688.063 1507.11,688.063 1507.67,688.063 1508.23,688.063 1508.79,688.063 1509.35,688.063 1509.91,688.063 1510.47,688.063 1511.03,688.063 1511.59,688.063 1512.15,688.063 1512.71,688.063 1513.26,688.063 1513.82,688.063 1514.38,688.063 1514.94,688.063 1515.5,688.063 1516.06,688.063 1516.62,688.063 1517.18,688.063 1517.74,688.063 1518.3,688.063 1518.86,688.063 1519.42,688.063 1519.98,688.063 1520.53,688.063 1521.09,688.063 1521.65,688.063 1522.21,688.063 1522.77,688.063 1523.33,688.063 1523.89,688.063 1524.45,688.063 1525.01,688.063 1525.57,688.063 1526.13,688.063 1526.69,688.063 1527.25,688.063 1527.81,688.063 1528.36,688.063 1528.92,688.063 1529.48,688.063 1530.04,688.063 1530.6,688.063 1531.16,688.063 1531.72,688.063 1532.28,688.063 1532.84,688.063 1533.4,688.063 1533.96,688.063 1534.52,688.063 1535.08,688.063 1535.63,688.063 1536.19,688.063 1536.75,688.063 1537.31,688.063 1537.87,688.063 1538.43,688.063 1538.99,688.063 1539.55,688.063 1540.11,688.063 1540.67,688.063 1541.23,688.063 1541.79,688.063 1542.35,688.063 1542.9,688.063 1543.46,688.063 1544.02,688.063 1544.58,688.063 1545.14,688.063 1545.7,688.063 1546.26,688.063 1546.82,688.063 1547.38,688.063 1547.94,688.063 1548.5,688.063 1549.06,688.063 1549.62,688.063 1550.18,688.063 1550.73,688.063 1551.29,688.063 1551.85,688.063 1552.41,688.063 1552.97,688.063 1553.53,688.063 1554.09,688.063 1554.65,688.063 1555.21,688.063 1555.77,688.063 1556.33,688.063 1556.89,688.063 1557.45,688.063 1558,688.063 1558.56,688.063 1559.12,688.063 1559.68,688.063 1560.24,688.063 1560.8,688.063 1561.36,688.063 1561.92,688.063 1562.48,688.063 1563.04,688.063 1563.6,688.063 1564.16,688.063 1564.72,688.063 1565.28,688.063 1565.83,688.063 1566.39,688.063 1566.95,688.063 1567.51,688.063 1568.07,688.063 1568.63,688.063 1569.19,688.063 1569.75,688.063 1570.31,688.063 1570.87,688.063 1571.43,688.063 1571.99,688.063 1572.55,688.063 1573.1,688.063 1573.66,688.063 1574.22,688.063 1574.78,688.063 1575.34,688.063 1575.9,688.063 1576.46,688.063 1577.02,688.063 1577.58,688.063 1578.14,688.063 1578.7,688.063 1579.26,688.063 1579.82,688.063 1580.37,688.063 1580.93,688.063 1581.49,688.063 1582.05,688.063 1582.61,688.063 1583.17,688.063 1583.73,688.063 1584.29,688.063 1584.85,688.063 1585.41,688.063 1585.97,688.063 1586.53,688.063 1587.09,688.063 1587.65,688.063 1588.2,688.063 1588.76,688.063 1589.32,688.063 1589.88,688.063 1590.44,688.063 1591,688.063 1591.56,688.063 1592.12,688.063 1592.68,688.063 1593.24,688.063 1593.8,688.063 1594.36,688.063 1594.92,688.063 1595.47,688.063 1596.03,688.063 1596.59,688.063 1597.15,688.063 1597.71,688.063 1598.27,688.063 1598.83,688.063 1599.39,688.063 1599.95,688.063 1600.51,688.063 1601.07,688.063 1601.63,688.063 1602.19,688.063 1602.74,688.063 1603.3,688.063 1603.86,688.063 1604.42,688.063 1604.98,688.063 1605.54,688.063 1606.1,688.063 1606.66,688.063 1607.22,688.063 1607.78,688.063 1608.34,688.063 1608.9,688.063 1609.46,688.063 1610.02,688.063 1610.57,688.063 1611.13,688.063 1611.69,688.063 1612.25,688.063 1612.81,688.063 1613.37,688.063 1613.93,688.063 1614.49,688.063 1615.05,688.063 1615.61,688.063 1616.17,688.063 1616.73,688.063 1617.29,688.063 1617.84,688.063 1618.4,688.063 1618.96,688.063 1619.52,688.063 1620.08,688.063 1620.64,688.063 1621.2,688.063 1621.76,688.063 1622.32,688.063 1622.88,688.063 1623.44,688.063 1624,688.063 1624.56,688.063 1625.11,688.063 1625.67,688.063 1626.23,688.063 1626.79,688.063 1627.35,688.063 1627.91,688.063 1628.47,688.063 1629.03,688.063 1629.59,688.063 1630.15,688.063 1630.71,688.063 1631.27,688.063 1631.83,688.063 1632.39,688.063 1632.94,688.063 1633.5,688.063 1634.06,688.063 1634.62,688.063 1635.18,688.063 1635.74,688.063 1636.3,688.063 1636.86,688.063 1637.42,688.063 1637.98,688.063 1638.54,688.063 1639.1,688.063 1639.66,688.063 1640.21,688.063 1640.77,688.063 1641.33,688.063 1641.89,688.063 1642.45,688.063 1643.01,688.063 1643.57,688.063 1644.13,688.063 1644.69,688.063 1645.25,688.063 1645.81,688.063 1646.37,688.063 1646.93,688.063 1647.48,688.063 1648.04,688.063 1648.6,688.063 1649.16,688.063 1649.72,688.063 1650.28,688.063 1650.84,688.063 1651.4,688.063 1651.96,688.063 1652.52,688.063 1653.08,688.063 1653.64,688.063 1654.2,688.063 1654.76,688.063 1655.31,688.063 1655.87,688.063 1656.43,688.063 1656.99,688.063 1657.55,688.063 1658.11,688.063 1658.67,688.063 1659.23,688.063 1659.79,688.063 1660.35,688.063 1660.91,688.063 1661.47,688.063 1662.03,688.063 1662.58,688.063 1663.14,688.063 1663.7,688.063 1664.26,688.063 1664.82,688.063 1665.38,688.063 1665.94,688.063 1666.5,688.063 1667.06,688.063 1667.62,688.063 1668.18,688.063 1668.74,688.063 1669.3,688.063 1669.85,688.063 1670.41,688.063 1670.97,688.063 1671.53,688.063 1672.09,688.063 1672.65,688.063 1673.21,688.063 1673.77,688.063 1674.33,688.063 1674.89,688.063 1675.45,688.063 1676.01,688.063 1676.57,688.063 1677.13,688.063 1677.68,688.063 1678.24,688.063 1678.8,688.063 1679.36,688.063 1679.92,688.063 1680.48,688.063 1681.04,688.063 1681.6,688.063 1682.16,688.063 1682.72,688.063 1683.28,688.063 1683.84,688.063 1684.4,688.063 1684.95,688.063 1685.51,688.063 1686.07,688.063 1686.63,688.063 1687.19,688.063 1687.75,688.063 1688.31,688.063 1688.87,688.063 1689.43,688.063 1689.99,688.063 1690.55,688.063 1691.11,688.063 1691.67,688.063 1692.23,688.063 1692.78,688.063 1693.34,688.063 1693.9,688.063 1694.46,688.063 1695.02,688.063 1695.58,688.063 1696.14,688.063 1696.7,688.063 1697.26,688.063 1697.82,688.063 1698.38,688.063 1698.94,688.063 1699.5,688.063 1700.05,688.063 1700.61,688.063 1701.17,688.063 1701.73,688.063 1702.29,688.063 1702.85,688.063 1703.41,688.063 1703.97,688.063 1704.53,688.063 1705.09,688.063 1705.65,688.063 1706.21,688.063 1706.77,688.063 1707.32,688.063 1707.88,688.063 1708.44,688.063 1709,688.063 1709.56,688.063 1710.12,688.063 1710.68,688.063 1711.24,688.063 1711.8,688.063 1712.36,688.063 1712.92,688.063 1713.48,688.063 1714.04,688.063 1714.6,688.063 1715.15,688.063 1715.71,688.063 1716.27,688.063 1716.83,688.063 1717.39,688.063 1717.95,688.063 1718.51,688.063 1719.07,688.063 1719.63,688.063 1720.19,688.063 1720.75,688.063 1721.31,688.063 1721.87,688.063 1722.42,688.063 1722.98,688.063 1723.54,688.063 1724.1,688.063 1724.66,688.063 1725.22,688.063 1725.78,688.063 1726.34,688.063 1726.9,688.063 1727.46,688.063 1728.02,688.063 1728.58,688.063 1729.14,688.063 1729.69,688.063 1730.25,688.063 1730.81,688.063 1731.37,688.063 1731.93,688.063 1732.49,688.063 1733.05,688.063 1733.61,688.063 1734.17,688.063 1734.73,688.063 1735.29,688.063 1735.85,688.063 1736.41,688.063 1736.97,688.063 1737.52,688.063 1738.08,688.063 1738.64,688.063 1739.2,688.063 1739.76,688.063 1740.32,688.063 1740.88,688.063 1741.44,688.063 1742,688.063 1742.56,688.063 1743.12,688.063 1743.68,688.063 1744.24,688.063 1744.79,688.063 1745.35,688.063 1745.91,688.063 1746.47,688.063 1747.03,688.063 1747.59,688.063 1748.15,688.063 1748.71,688.063 1749.27,688.063 1749.83,688.063 1750.39,688.063 1750.95,688.063 1751.51,688.063 1752.06,688.063 1752.62,688.063 1753.18,688.063 1753.74,688.063 1754.3,688.063 1754.86,688.063 1755.42,688.063 1755.98,688.063 1756.54,688.063 1757.1,688.063 1757.66,688.063 1758.22,688.063 1758.78,688.063 1759.34,688.063 1759.89,688.063 1760.45,688.063 1761.01,688.063 1761.57,688.063 1762.13,688.063 1762.69,688.063 1763.25,688.063 1763.81,688.063 1764.37,688.063 1764.93,688.063 1765.49,688.063 1766.05,688.063 1766.61,688.063 1767.16,688.063 1767.72,688.063 1768.28,688.063 1768.84,688.063 1769.4,688.063 1769.96,688.063 1770.52,688.063 1771.08,688.063 1771.64,688.063 1772.2,688.063 1772.76,688.063 1773.32,688.063 1773.88,688.063 1774.43,688.063 1774.99,688.063 1775.55,688.063 1776.11,688.063 1776.67,688.063 1777.23,688.063 1777.79,688.063 1778.35,688.063 1778.91,688.063 1779.47,688.063 1780.03,688.063 1780.59,688.063 1781.15,688.063 1781.71,688.063 1782.26,688.063 1782.82,688.063 1783.38,688.063 1783.94,688.063 1784.5,688.063 1785.06,688.063 1785.62,688.063 1786.18,688.063 1786.74,688.063 1787.3,688.063 1787.86,688.063 1788.42,688.063 1788.98,688.063 1789.53,688.063 1790.09,688.063 1790.65,688.063 1791.21,688.063 1791.77,688.063 1792.33,688.063 1792.89,688.063 1793.45,688.063 1794.01,688.063 1794.57,688.063 1795.13,688.063 1795.69,688.063 1796.25,688.063 1796.8,688.063 1797.36,688.063 1797.92,688.063 1798.48,688.063 1799.04,688.063 1799.6,688.063 1800.16,688.063 1800.72,688.063 1801.28,688.063 1801.84,688.063 1802.4,688.063 1802.96,688.063 1803.52,688.063 1804.08,688.063 1804.63,688.063 1805.19,688.063 1805.75,688.063 1806.31,688.063 1806.87,688.063 1807.43,688.063 1807.99,688.063 1808.55,688.063 1809.11,688.063 1809.67,688.063 1810.23,688.063 1810.79,688.063 1811.35,688.063 1811.9,688.063 1812.46,688.063 1813.02,688.063 1813.58,688.063 1814.14,688.063 1814.7,688.063 1815.26,688.063 1815.82,688.063 1816.38,688.063 1816.94,688.063 1817.5,688.063 1818.06,688.063 1818.62,688.063 1819.18,688.063 1819.73,688.063 1820.29,688.063 1820.85,688.063 1821.41,688.063 1821.97,688.063 1822.53,688.063 1823.09,688.063 1823.65,688.063 1824.21,688.063 1824.77,688.063 1825.33,688.063 1825.89,688.063 1826.45,688.063 1827,688.063 1827.56,688.063 1828.12,688.063 1828.68,688.063 1829.24,688.063 1829.8,688.063 1830.36,688.063 1830.92,688.063 1831.48,688.063 1832.04,688.063 1832.6,688.063 1833.16,688.063 1833.72,688.063 1834.27,688.063 1834.83,688.063 1835.39,688.063 1835.95,688.063 1836.51,688.063 1837.07,688.063 1837.63,688.063 1838.19,688.063 \"/>\n<path clip-path=\"url(#clip283)\" d=\"M720.247 684.314 L720.806 684.314 L721.365 684.314 L721.924 684.314 L722.484 684.314 L723.043 684.314 L723.602 684.314 L724.161 684.314 L724.721 684.314 L725.28 684.314 L725.839 684.314 L726.398 684.314 L726.958 684.314 L727.517 684.314 L728.076 684.314 L728.635 684.314 L729.195 684.314 L729.754 684.314 L730.313 684.314 L730.872 684.314 L731.432 684.314 L731.991 684.314 L732.55 684.314 L733.109 684.314 L733.669 684.314 L734.228 684.314 L734.787 684.314 L735.346 684.314 L735.906 684.314 L736.465 684.314 L737.024 684.314 L737.583 684.314 L738.143 684.314 L738.702 684.314 L739.261 684.314 L739.82 684.314 L740.38 684.314 L740.939 684.314 L741.498 684.314 L742.057 684.314 L742.617 684.314 L743.176 684.314 L743.735 684.314 L744.294 684.314 L744.854 684.314 L745.413 684.314 L745.972 684.314 L746.531 684.314 L747.091 684.314 L747.65 684.314 L748.209 684.314 L748.768 684.314 L749.328 684.314 L749.887 684.314 L750.446 684.314 L751.005 684.314 L751.565 684.314 L752.124 684.314 L752.683 684.314 L753.242 684.314 L753.802 684.314 L754.361 684.314 L754.92 684.314 L755.479 684.314 L756.039 684.314 L756.598 684.314 L757.157 684.314 L757.716 684.314 L758.276 684.314 L758.835 684.314 L759.394 684.314 L759.953 684.314 L760.513 684.314 L761.072 684.314 L761.631 684.314 L762.19 684.314 L762.75 684.314 L763.309 684.314 L763.868 684.314 L764.427 684.314 L764.987 684.314 L765.546 684.314 L766.105 684.314 L766.664 684.314 L767.224 684.314 L767.783 684.314 L768.342 684.314 L768.901 684.314 L769.461 684.314 L770.02 684.314 L770.579 684.314 L771.138 684.314 L771.698 684.314 L772.257 684.314 L772.816 684.314 L773.375 684.314 L773.935 684.314 L774.494 684.314 L775.053 684.314 L775.612 684.314 L776.172 684.314 L776.731 684.314 L777.29 684.314 L777.849 684.314 L778.409 684.314 L778.968 684.314 L779.527 684.314 L780.086 684.314 L780.646 684.314 L781.205 684.314 L781.764 684.314 L782.323 684.314 L782.883 684.314 L783.442 684.314 L784.001 684.314 L784.56 684.314 L785.12 684.314 L785.679 684.314 L786.238 684.314 L786.797 684.314 L787.357 684.314 L787.916 684.314 L788.475 684.314 L789.034 684.314 L789.594 684.314 L790.153 684.314 L790.712 684.314 L791.271 684.314 L791.831 684.314 L792.39 684.314 L792.949 684.314 L793.508 684.314 L794.068 684.314 L794.627 684.314 L795.186 684.314 L795.745 684.314 L796.305 684.314 L796.864 684.314 L797.423 684.314 L797.982 684.314 L798.542 684.314 L799.101 684.314 L799.66 684.314 L800.219 684.314 L800.779 684.314 L801.338 684.314 L801.897 684.314 L802.456 684.314 L803.016 684.314 L803.575 684.314 L804.134 684.314 L804.693 684.314 L805.253 684.314 L805.812 684.314 L806.371 684.314 L806.931 684.314 L807.49 684.314 L808.049 684.314 L808.608 684.314 L809.168 684.314 L809.727 684.314 L810.286 684.314 L810.845 684.314 L811.405 684.314 L811.964 684.314 L812.523 684.314 L813.082 684.314 L813.642 684.314 L814.201 684.314 L814.76 684.314 L815.319 684.314 L815.879 684.314 L816.438 684.314 L816.997 684.314 L817.556 684.314 L818.116 684.314 L818.675 684.314 L819.234 684.314 L819.793 684.314 L820.353 684.314 L820.912 684.314 L821.471 684.314 L822.03 684.314 L822.59 684.314 L823.149 684.314 L823.708 684.314 L824.267 684.314 L824.827 684.314 L825.386 684.314 L825.945 684.314 L826.504 684.314 L827.064 684.314 L827.623 684.314 L828.182 684.314 L828.741 684.314 L829.301 684.314 L829.86 684.314 L830.419 684.314 L830.978 684.314 L831.538 684.314 L832.097 684.314 L832.656 684.314 L833.215 684.314 L833.775 684.314 L834.334 684.314 L834.893 684.314 L835.452 684.314 L836.012 684.314 L836.571 684.314 L837.13 684.314 L837.689 684.314 L838.249 684.314 L838.808 684.314 L839.367 684.314 L839.926 684.314 L840.486 684.314 L841.045 684.314 L841.604 684.314 L842.163 684.314 L842.723 684.314 L843.282 684.314 L843.841 684.314 L844.4 684.314 L844.96 684.314 L845.519 684.314 L846.078 684.314 L846.637 684.314 L847.197 684.314 L847.756 684.314 L848.315 684.314 L848.874 684.314 L849.434 684.314 L849.993 684.314 L850.552 684.314 L851.111 684.314 L851.671 684.314 L852.23 684.314 L852.789 684.314 L853.348 684.314 L853.908 684.314 L854.467 684.314 L855.026 684.314 L855.585 684.314 L856.145 684.314 L856.704 684.314 L857.263 684.314 L857.822 684.314 L858.382 684.314 L858.941 684.314 L859.5 684.314 L860.059 684.314 L860.619 684.314 L861.178 684.314 L861.737 684.314 L862.296 684.314 L862.856 684.314 L863.415 684.314 L863.974 684.314 L864.533 684.314 L865.093 684.314 L865.652 684.314 L866.211 684.314 L866.77 684.314 L867.33 684.314 L867.889 684.314 L868.448 684.314 L869.007 684.314 L869.567 684.314 L870.126 684.314 L870.685 684.314 L871.244 684.314 L871.804 684.314 L872.363 684.314 L872.922 684.314 L873.481 684.314 L874.041 684.314 L874.6 684.314 L875.159 684.314 L875.718 684.314 L876.278 684.314 L876.837 684.314 L877.396 684.314 L877.955 684.314 L878.515 684.314 L879.074 684.314 L879.633 684.314 L880.192 684.314 L880.752 684.314 L881.311 684.314 L881.87 684.314 L882.429 684.314 L882.989 684.314 L883.548 684.314 L884.107 684.314 L884.666 684.314 L885.226 684.314 L885.785 684.314 L886.344 684.314 L886.903 684.314 L887.463 684.314 L888.022 684.314 L888.581 684.314 L889.14 684.314 L889.7 684.314 L890.259 684.314 L890.818 684.314 L891.377 684.314 L891.937 684.314 L892.496 684.314 L893.055 684.314 L893.614 684.314 L894.174 684.314 L894.733 684.314 L895.292 684.314 L895.851 684.314 L896.411 684.314 L896.97 684.314 L897.529 684.314 L898.088 684.314 L898.648 684.314 L899.207 684.314 L899.766 684.314 L900.325 684.314 L900.885 684.314 L901.444 684.314 L902.003 684.314 L902.562 684.314 L903.122 684.314 L903.681 684.314 L904.24 684.314 L904.799 684.314 L905.359 684.314 L905.918 684.314 L906.477 684.314 L907.036 684.314 L907.596 684.314 L908.155 684.314 L908.714 684.314 L909.273 684.314 L909.833 684.314 L910.392 684.314 L910.951 684.314 L911.51 684.314 L912.07 684.314 L912.629 684.314 L913.188 684.314 L913.747 684.314 L914.307 684.314 L914.866 684.314 L915.425 684.314 L915.984 684.314 L916.544 684.314 L917.103 684.314 L917.662 684.314 L918.221 684.314 L918.781 684.314 L919.34 684.314 L919.899 684.314 L920.458 684.314 L921.018 684.314 L921.577 684.314 L922.136 684.314 L922.695 684.314 L923.255 684.314 L923.814 684.314 L924.373 684.314 L924.932 684.314 L925.492 684.314 L926.051 684.314 L926.61 684.314 L927.169 684.314 L927.729 684.314 L928.288 684.314 L928.847 684.314 L929.406 684.314 L929.966 684.314 L930.525 684.314 L931.084 684.314 L931.644 684.314 L932.203 684.314 L932.762 684.314 L933.321 684.314 L933.881 684.314 L934.44 684.314 L934.999 684.314 L935.558 684.314 L936.118 684.314 L936.677 684.314 L937.236 684.314 L937.795 684.314 L938.355 684.314 L938.914 684.314 L939.473 684.314 L940.032 684.314 L940.592 684.314 L941.151 684.314 L941.71 684.314 L942.269 684.314 L942.829 684.314 L943.388 684.314 L943.947 684.314 L944.506 684.314 L945.066 684.314 L945.625 684.314 L946.184 684.314 L946.743 684.314 L947.303 684.314 L947.862 684.314 L948.421 684.314 L948.98 684.314 L949.54 684.314 L950.099 684.314 L950.658 684.314 L951.217 684.314 L951.777 684.314 L952.336 684.314 L952.895 684.314 L953.454 684.314 L954.014 684.314 L954.573 684.314 L955.132 684.314 L955.691 684.314 L956.251 684.314 L956.81 684.314 L957.369 684.314 L957.928 684.314 L958.488 684.314 L959.047 684.314 L959.606 684.314 L960.165 684.314 L960.725 684.314 L961.284 684.314 L961.843 684.314 L962.402 684.314 L962.962 684.314 L963.521 684.314 L964.08 684.314 L964.639 684.314 L965.199 684.314 L965.758 684.314 L966.317 684.314 L966.876 684.314 L967.436 684.314 L967.995 684.314 L968.554 684.314 L969.113 684.314 L969.673 684.314 L970.232 684.314 L970.791 684.314 L971.35 684.314 L971.91 684.314 L972.469 684.314 L973.028 684.314 L973.587 684.314 L974.147 684.314 L974.706 684.314 L975.265 684.314 L975.824 684.314 L976.384 684.314 L976.943 684.314 L977.502 684.314 L978.061 684.314 L978.621 684.314 L979.18 684.314 L979.739 684.314 L980.298 684.314 L980.858 684.314 L981.417 684.314 L981.976 684.314 L982.535 684.314 L983.095 684.314 L983.654 684.314 L984.213 684.314 L984.772 684.314 L985.332 684.314 L985.891 684.314 L986.45 684.314 L987.009 684.314 L987.569 684.314 L988.128 684.314 L988.687 684.314 L989.246 684.314 L989.806 684.314 L990.365 684.314 L990.924 684.314 L991.483 684.314 L992.043 684.314 L992.602 684.314 L993.161 684.314 L993.72 684.314 L994.28 684.314 L994.839 684.314 L995.398 684.314 L995.957 684.314 L996.517 684.314 L997.076 684.314 L997.635 684.314 L998.194 684.314 L998.754 684.314 L999.313 684.314 L999.872 684.314 L1000.43 684.314 L1000.99 684.314 L1001.55 684.314 L1002.11 684.314 L1002.67 684.314 L1003.23 684.314 L1003.79 684.314 L1004.35 684.314 L1004.91 684.314 L1005.46 684.314 L1006.02 684.314 L1006.58 684.314 L1007.14 684.314 L1007.7 684.314 L1008.26 684.314 L1008.82 684.314 L1009.38 684.314 L1009.94 684.314 L1010.5 684.314 L1011.06 684.314 L1011.62 684.314 L1012.18 684.314 L1012.73 684.314 L1013.29 684.314 L1013.85 684.314 L1014.41 684.314 L1014.97 684.314 L1015.53 684.314 L1016.09 684.314 L1016.65 684.314 L1017.21 684.314 L1017.77 684.314 L1018.33 684.314 L1018.89 684.314 L1019.45 684.314 L1020.01 684.314 L1020.56 684.314 L1021.12 684.314 L1021.68 684.314 L1022.24 684.314 L1022.8 684.314 L1023.36 684.314 L1023.92 684.314 L1024.48 684.314 L1025.04 684.314 L1025.6 684.314 L1026.16 684.314 L1026.72 684.314 L1027.28 684.314 L1027.83 684.314 L1028.39 684.314 L1028.95 684.314 L1029.51 684.314 L1030.07 684.314 L1030.63 684.314 L1031.19 684.314 L1031.75 684.314 L1032.31 684.314 L1032.87 684.314 L1033.43 684.314 L1033.99 684.314 L1034.55 684.314 L1035.1 684.314 L1035.66 684.314 L1036.22 684.314 L1036.78 684.314 L1037.34 684.314 L1037.9 684.314 L1038.46 684.314 L1039.02 684.314 L1039.58 684.314 L1040.14 684.314 L1040.7 684.314 L1041.26 684.314 L1041.82 684.314 L1042.38 684.314 L1042.93 684.314 L1043.49 684.314 L1044.05 684.314 L1044.61 684.314 L1045.17 684.314 L1045.73 684.314 L1046.29 684.314 L1046.85 684.314 L1047.41 684.314 L1047.97 684.314 L1048.53 684.314 L1049.09 684.314 L1049.65 684.314 L1050.2 684.314 L1050.76 684.314 L1051.32 684.314 L1051.88 684.314 L1052.44 684.314 L1053 684.314 L1053.56 684.314 L1054.12 684.314 L1054.68 684.314 L1055.24 684.314 L1055.8 684.314 L1056.36 684.314 L1056.92 684.314 L1057.48 684.314 L1058.03 684.314 L1058.59 684.314 L1059.15 684.314 L1059.71 684.314 L1060.27 684.314 L1060.83 684.314 L1061.39 684.314 L1061.95 684.314 L1062.51 684.314 L1063.07 684.314 L1063.63 684.314 L1064.19 684.314 L1064.75 684.314 L1065.3 684.314 L1065.86 684.314 L1066.42 684.314 L1066.98 684.314 L1067.54 684.314 L1068.1 684.314 L1068.66 684.314 L1069.22 684.314 L1069.78 684.314 L1070.34 684.314 L1070.9 684.314 L1071.46 684.314 L1072.02 684.314 L1072.57 684.314 L1073.13 684.314 L1073.69 684.314 L1074.25 684.314 L1074.81 684.314 L1075.37 684.314 L1075.93 684.314 L1076.49 684.314 L1077.05 684.314 L1077.61 684.314 L1078.17 684.314 L1078.73 684.314 L1079.29 684.314 L1079.85 684.314 L1080.4 684.314 L1080.96 684.314 L1081.52 684.314 L1082.08 684.314 L1082.64 684.314 L1083.2 684.314 L1083.76 684.314 L1084.32 684.314 L1084.88 684.314 L1085.44 684.314 L1086 684.314 L1086.56 684.314 L1087.12 684.314 L1087.67 684.314 L1088.23 684.314 L1088.79 684.314 L1089.35 684.314 L1089.91 684.314 L1090.47 684.314 L1091.03 684.314 L1091.59 684.314 L1092.15 684.314 L1092.71 684.314 L1093.27 684.314 L1093.83 684.314 L1094.39 684.314 L1094.94 684.314 L1095.5 684.314 L1096.06 684.314 L1096.62 684.314 L1097.18 684.314 L1097.74 684.314 L1098.3 684.314 L1098.86 684.314 L1099.42 684.314 L1099.98 684.314 L1100.54 684.314 L1101.1 684.314 L1101.66 684.314 L1102.22 684.314 L1102.77 684.314 L1103.33 684.314 L1103.89 684.314 L1104.45 684.314 L1105.01 684.314 L1105.57 684.314 L1106.13 684.314 L1106.69 684.314 L1107.25 684.314 L1107.81 684.314 L1108.37 684.314 L1108.93 684.314 L1109.49 684.314 L1110.04 684.314 L1110.6 684.314 L1111.16 684.314 L1111.72 684.314 L1112.28 684.314 L1112.84 684.314 L1113.4 684.314 L1113.96 684.314 L1114.52 684.314 L1115.08 684.314 L1115.64 684.314 L1116.2 684.314 L1116.76 684.314 L1117.31 684.314 L1117.87 684.314 L1118.43 684.314 L1118.99 684.314 L1119.55 684.314 L1120.11 684.314 L1120.67 684.314 L1121.23 684.314 L1121.79 684.314 L1122.35 684.314 L1122.91 684.314 L1123.47 684.314 L1124.03 684.314 L1124.59 684.314 L1125.14 684.314 L1125.7 684.314 L1126.26 684.314 L1126.82 684.314 L1127.38 684.314 L1127.94 684.314 L1128.5 684.314 L1129.06 684.314 L1129.62 684.314 L1130.18 684.314 L1130.74 684.314 L1131.3 684.314 L1131.86 684.314 L1132.41 684.314 L1132.97 684.314 L1133.53 684.314 L1134.09 684.314 L1134.65 684.314 L1135.21 684.314 L1135.77 684.314 L1136.33 684.314 L1136.89 684.314 L1137.45 684.314 L1138.01 684.314 L1138.57 684.314 L1139.13 684.314 L1139.68 684.314 L1140.24 684.314 L1140.8 684.314 L1141.36 684.314 L1141.92 684.314 L1142.48 684.314 L1143.04 684.314 L1143.6 684.314 L1144.16 684.314 L1144.72 684.314 L1145.28 684.314 L1145.84 684.314 L1146.4 684.314 L1146.96 684.314 L1147.51 684.314 L1148.07 684.314 L1148.63 684.314 L1149.19 684.314 L1149.75 684.314 L1150.31 684.314 L1150.87 684.314 L1151.43 684.314 L1151.99 684.314 L1152.55 684.314 L1153.11 684.314 L1153.67 684.314 L1154.23 684.314 L1154.78 684.314 L1155.34 684.314 L1155.9 684.314 L1156.46 684.314 L1157.02 684.314 L1157.58 684.314 L1158.14 684.314 L1158.7 684.314 L1159.26 684.314 L1159.82 684.314 L1160.38 684.314 L1160.94 684.314 L1161.5 684.314 L1162.05 684.314 L1162.61 684.314 L1163.17 684.314 L1163.73 684.314 L1164.29 684.314 L1164.85 684.314 L1165.41 684.314 L1165.97 684.314 L1166.53 684.314 L1167.09 684.314 L1167.65 684.314 L1168.21 684.314 L1168.77 684.314 L1169.33 684.314 L1169.88 684.314 L1170.44 684.314 L1171 684.314 L1171.56 684.314 L1172.12 684.314 L1172.68 684.314 L1173.24 684.314 L1173.8 684.314 L1174.36 684.314 L1174.92 684.314 L1175.48 684.314 L1176.04 684.314 L1176.6 684.314 L1177.15 684.314 L1177.71 684.314 L1178.27 684.314 L1178.83 684.314 L1179.39 684.314 L1179.95 684.314 L1180.51 684.314 L1181.07 684.314 L1181.63 684.314 L1182.19 684.314 L1182.75 684.314 L1183.31 684.314 L1183.87 684.314 L1184.43 684.314 L1184.98 684.314 L1185.54 684.314 L1186.1 684.314 L1186.66 684.314 L1187.22 684.314 L1187.78 684.314 L1188.34 684.314 L1188.9 684.314 L1189.46 684.314 L1190.02 684.314 L1190.58 684.314 L1191.14 684.314 L1191.7 684.314 L1192.25 684.314 L1192.81 684.314 L1193.37 684.314 L1193.93 684.314 L1194.49 684.314 L1195.05 684.314 L1195.61 684.314 L1196.17 684.314 L1196.73 684.314 L1197.29 684.314 L1197.85 684.314 L1198.41 684.314 L1198.97 684.314 L1199.52 684.314 L1200.08 684.314 L1200.64 684.314 L1201.2 684.314 L1201.76 684.314 L1202.32 684.314 L1202.88 684.314 L1203.44 684.314 L1204 684.314 L1204.56 684.314 L1205.12 684.314 L1205.68 684.314 L1206.24 684.314 L1206.8 684.314 L1207.35 684.314 L1207.91 684.314 L1208.47 684.314 L1209.03 684.314 L1209.59 684.314 L1210.15 684.314 L1210.71 684.314 L1211.27 684.314 L1211.83 684.314 L1212.39 684.314 L1212.95 684.314 L1213.51 684.314 L1214.07 684.314 L1214.62 684.314 L1215.18 684.314 L1215.74 684.314 L1216.3 684.314 L1216.86 684.314 L1217.42 684.314 L1217.98 684.314 L1218.54 684.314 L1219.1 684.314 L1219.66 684.314 L1220.22 684.314 L1220.78 684.314 L1221.34 684.314 L1221.89 684.314 L1222.45 684.314 L1223.01 684.314 L1223.57 684.314 L1224.13 684.314 L1224.69 684.314 L1225.25 684.314 L1225.81 684.314 L1226.37 684.314 L1226.93 684.314 L1227.49 684.314 L1228.05 684.314 L1228.61 684.314 L1229.17 684.314 L1229.72 684.314 L1230.28 684.314 L1230.84 684.314 L1231.4 684.314 L1231.96 684.314 L1232.52 684.314 L1233.08 684.314 L1233.64 684.314 L1234.2 684.314 L1234.76 684.314 L1235.32 684.314 L1235.88 684.314 L1236.44 684.314 L1236.99 684.314 L1237.55 684.314 L1238.11 684.314 L1238.67 684.314 L1239.23 684.314 L1239.79 684.314 L1240.35 684.314 L1240.91 684.314 L1241.47 684.314 L1242.03 684.314 L1242.59 684.314 L1243.15 684.314 L1243.71 684.314 L1244.26 684.314 L1244.82 684.314 L1245.38 684.314 L1245.94 684.314 L1246.5 684.314 L1247.06 684.314 L1247.62 684.314 L1248.18 684.314 L1248.74 684.314 L1249.3 684.314 L1249.86 684.314 L1250.42 684.314 L1250.98 684.314 L1251.54 684.314 L1252.09 684.314 L1252.65 684.314 L1253.21 684.314 L1253.77 684.314 L1254.33 684.314 L1254.89 684.314 L1255.45 684.314 L1256.01 684.314 L1256.57 684.314 L1257.13 684.314 L1257.69 684.314 L1258.25 684.314 L1258.81 684.314 L1259.36 684.314 L1259.92 684.314 L1260.48 684.314 L1261.04 684.314 L1261.6 684.314 L1262.16 684.314 L1262.72 684.314 L1263.28 684.314 L1263.84 684.314 L1264.4 684.314 L1264.96 684.314 L1265.52 684.314 L1266.08 684.314 L1266.63 684.314 L1267.19 684.314 L1267.75 684.314 L1268.31 684.314 L1268.87 684.314 L1269.43 684.314 L1269.99 684.314 L1270.55 684.314 L1271.11 684.314 L1271.67 684.314 L1272.23 684.314 L1272.79 684.314 L1273.35 684.314 L1273.91 684.314 L1274.46 684.314 L1275.02 684.314 L1275.58 684.314 L1276.14 684.314 L1276.7 684.314 L1277.26 684.314 L1277.82 684.314 L1278.38 684.314 L1278.94 684.314 L1279.5 684.314 L1280.06 684.314 L1280.62 684.314 L1281.18 684.314 L1281.73 684.314 L1282.29 684.314 L1282.85 684.314 L1283.41 684.314 L1283.97 684.314 L1284.53 684.314 L1285.09 684.314 L1285.65 684.314 L1286.21 684.314 L1286.77 684.314 L1287.33 684.314 L1287.89 684.314 L1288.45 684.314 L1289 684.314 L1289.56 684.314 L1290.12 684.314 L1290.68 684.314 L1291.24 684.314 L1291.8 684.314 L1292.36 684.314 L1292.92 684.314 L1293.48 684.314 L1294.04 684.314 L1294.6 684.314 L1295.16 684.314 L1295.72 684.314 L1296.28 684.314 L1296.83 684.314 L1297.39 684.314 L1297.95 684.314 L1298.51 684.314 L1299.07 684.314 L1299.63 684.314 L1300.19 684.314 L1300.75 684.314 L1301.31 684.314 L1301.87 684.314 L1302.43 684.314 L1302.99 684.314 L1303.55 684.314 L1304.1 684.314 L1304.66 684.314 L1305.22 684.314 L1305.78 684.314 L1306.34 684.314 L1306.9 684.314 L1307.46 684.314 L1308.02 684.314 L1308.58 684.314 L1309.14 684.314 L1309.7 684.314 L1310.26 684.314 L1310.82 684.314 L1311.38 684.314 L1311.93 684.314 L1312.49 684.314 L1313.05 684.314 L1313.61 684.314 L1314.17 684.314 L1314.73 684.314 L1315.29 684.314 L1315.85 684.314 L1316.41 684.314 L1316.97 684.314 L1317.53 684.314 L1318.09 684.314 L1318.65 684.314 L1319.2 684.314 L1319.76 684.314 L1320.32 684.314 L1320.88 684.314 L1321.44 684.314 L1322 684.314 L1322.56 684.314 L1323.12 684.314 L1323.68 684.314 L1324.24 684.314 L1324.8 684.314 L1325.36 684.314 L1325.92 684.314 L1326.47 684.314 L1327.03 684.314 L1327.59 684.314 L1328.15 684.314 L1328.71 684.314 L1329.27 684.314 L1329.83 684.314 L1330.39 684.314 L1330.95 684.314 L1331.51 684.314 L1332.07 684.314 L1332.63 684.314 L1333.19 684.314 L1333.75 684.314 L1334.3 684.314 L1334.86 684.314 L1335.42 684.314 L1335.98 684.314 L1336.54 684.314 L1337.1 684.314 L1337.66 684.314 L1338.22 684.314 L1338.78 684.314 L1339.34 684.314 L1339.9 684.314 L1340.46 684.314 L1341.02 684.314 L1341.57 684.314 L1342.13 684.314 L1342.69 684.314 L1343.25 684.314 L1343.81 684.314 L1344.37 684.314 L1344.93 684.314 L1345.49 684.314 L1346.05 684.314 L1346.61 684.314 L1347.17 684.314 L1347.73 684.314 L1348.29 684.314 L1348.84 684.314 L1349.4 684.314 L1349.96 684.314 L1350.52 684.314 L1351.08 684.314 L1351.64 684.314 L1352.2 684.314 L1352.76 684.314 L1353.32 684.314 L1353.88 684.314 L1354.44 684.314 L1355 684.314 L1355.56 684.314 L1356.12 684.314 L1356.67 684.314 L1357.23 684.314 L1357.79 684.314 L1358.35 684.314 L1358.91 684.314 L1359.47 684.314 L1360.03 684.314 L1360.59 684.314 L1361.15 684.314 L1361.71 684.314 L1362.27 684.314 L1362.83 684.314 L1363.39 684.314 L1363.94 684.314 L1364.5 684.314 L1365.06 684.314 L1365.62 684.314 L1366.18 684.314 L1366.74 684.314 L1367.3 684.314 L1367.86 684.314 L1368.42 684.314 L1368.98 684.314 L1369.54 684.314 L1370.1 684.314 L1370.66 684.314 L1371.21 684.314 L1371.77 684.314 L1372.33 684.314 L1372.89 684.314 L1373.45 684.314 L1374.01 684.314 L1374.57 684.314 L1375.13 684.314 L1375.69 684.314 L1376.25 684.314 L1376.81 684.314 L1377.37 684.314 L1377.93 684.314 L1378.49 684.314 L1379.04 684.314 L1379.6 684.314 L1380.16 684.314 L1380.72 684.314 L1381.28 684.314 L1381.84 684.314 L1382.4 684.314 L1382.96 684.314 L1383.52 684.314 L1384.08 684.314 L1384.64 684.314 L1385.2 684.314 L1385.76 684.314 L1386.31 684.314 L1386.87 684.314 L1387.43 684.314 L1387.99 684.314 L1388.55 684.314 L1389.11 684.314 L1389.67 684.314 L1390.23 684.314 L1390.79 684.314 L1391.35 684.314 L1391.91 684.314 L1392.47 684.314 L1393.03 684.314 L1393.58 684.314 L1394.14 684.314 L1394.7 684.314 L1395.26 684.314 L1395.82 684.314 L1396.38 684.314 L1396.94 684.314 L1397.5 684.314 L1398.06 684.314 L1398.62 684.314 L1399.18 684.314 L1399.74 684.314 L1400.3 684.314 L1400.86 684.314 L1401.41 684.314 L1401.97 684.314 L1402.53 684.314 L1403.09 684.314 L1403.65 684.314 L1404.21 684.314 L1404.77 684.314 L1405.33 684.314 L1405.89 684.314 L1406.45 684.314 L1407.01 684.314 L1407.57 684.314 L1408.13 684.314 L1408.68 684.314 L1409.24 684.314 L1409.8 684.314 L1410.36 684.314 L1410.92 684.314 L1411.48 684.314 L1412.04 684.314 L1412.6 684.314 L1413.16 684.314 L1413.72 684.314 L1414.28 684.314 L1414.84 684.314 L1415.4 684.314 L1415.95 684.314 L1416.51 684.314 L1417.07 684.314 L1417.63 684.314 L1418.19 684.314 L1418.75 684.314 L1419.31 684.314 L1419.87 684.314 L1420.43 684.314 L1420.99 684.314 L1421.55 684.314 L1422.11 684.314 L1422.67 684.314 L1423.23 684.314 L1423.78 684.314 L1424.34 684.314 L1424.9 684.314 L1425.46 684.314 L1426.02 684.314 L1426.58 684.314 L1427.14 684.314 L1427.7 684.314 L1428.26 684.314 L1428.82 684.314 L1429.38 684.314 L1429.94 684.314 L1430.5 684.314 L1431.05 684.314 L1431.61 684.314 L1432.17 684.314 L1432.73 684.314 L1433.29 684.314 L1433.85 684.314 L1434.41 684.314 L1434.97 684.314 L1435.53 684.314 L1436.09 684.314 L1436.65 684.314 L1437.21 684.314 L1437.77 684.314 L1438.33 684.314 L1438.88 684.314 L1439.44 684.314 L1440 684.314 L1440.56 684.314 L1441.12 684.314 L1441.68 684.314 L1442.24 684.314 L1442.8 684.314 L1443.36 684.314 L1443.92 684.314 L1444.48 684.314 L1445.04 684.314 L1445.6 684.314 L1446.15 684.314 L1446.71 684.314 L1447.27 684.314 L1447.83 684.314 L1448.39 684.314 L1448.95 684.314 L1449.51 684.314 L1450.07 684.314 L1450.63 684.314 L1451.19 684.314 L1451.75 684.314 L1452.31 684.314 L1452.87 684.314 L1453.42 684.314 L1453.98 684.314 L1454.54 684.314 L1455.1 684.314 L1455.66 684.314 L1456.22 684.314 L1456.78 684.314 L1457.34 684.314 L1457.9 684.314 L1458.46 684.314 L1459.02 684.314 L1459.58 684.314 L1460.14 684.314 L1460.7 684.314 L1461.25 684.314 L1461.81 684.314 L1462.37 684.314 L1462.93 684.314 L1463.49 684.314 L1464.05 684.314 L1464.61 684.314 L1465.17 684.314 L1465.73 684.314 L1466.29 684.314 L1466.85 684.314 L1467.41 684.314 L1467.97 684.314 L1468.52 684.314 L1469.08 684.314 L1469.64 684.314 L1470.2 684.314 L1470.76 684.314 L1471.32 684.314 L1471.88 684.314 L1472.44 684.314 L1473 684.314 L1473.56 684.314 L1474.12 684.314 L1474.68 684.314 L1475.24 684.314 L1475.79 684.314 L1476.35 684.314 L1476.91 684.314 L1477.47 684.314 L1478.03 684.314 L1478.59 684.314 L1479.15 684.314 L1479.71 684.314 L1480.27 684.314 L1480.83 684.314 L1481.39 684.314 L1481.95 684.314 L1482.51 684.314 L1483.07 684.314 L1483.62 684.314 L1484.18 684.314 L1484.74 684.314 L1485.3 684.314 L1485.86 684.314 L1486.42 684.314 L1486.98 684.314 L1487.54 684.314 L1488.1 684.314 L1488.66 684.314 L1489.22 684.314 L1489.78 684.314 L1490.34 684.314 L1490.89 684.314 L1491.45 684.314 L1492.01 684.314 L1492.57 684.314 L1493.13 684.314 L1493.69 684.314 L1494.25 684.314 L1494.81 684.314 L1495.37 684.314 L1495.93 684.314 L1496.49 684.314 L1497.05 684.314 L1497.61 684.314 L1498.16 684.314 L1498.72 684.314 L1499.28 684.314 L1499.84 684.314 L1500.4 684.314 L1500.96 684.314 L1501.52 684.314 L1502.08 684.314 L1502.64 684.314 L1503.2 684.314 L1503.76 684.314 L1504.32 684.314 L1504.88 684.314 L1505.44 684.314 L1505.99 684.314 L1506.55 684.314 L1507.11 684.314 L1507.67 684.314 L1508.23 684.314 L1508.79 684.314 L1509.35 684.314 L1509.91 684.314 L1510.47 684.314 L1511.03 684.314 L1511.59 684.314 L1512.15 684.314 L1512.71 684.314 L1513.26 684.314 L1513.82 684.314 L1514.38 684.314 L1514.94 684.314 L1515.5 684.314 L1516.06 684.314 L1516.62 684.314 L1517.18 684.314 L1517.74 684.314 L1518.3 684.314 L1518.86 684.314 L1519.42 684.314 L1519.98 684.314 L1520.53 684.314 L1521.09 684.314 L1521.65 684.314 L1522.21 684.314 L1522.77 684.314 L1523.33 684.314 L1523.89 684.314 L1524.45 684.314 L1525.01 684.314 L1525.57 684.314 L1526.13 684.314 L1526.69 684.314 L1527.25 684.314 L1527.81 684.314 L1528.36 684.314 L1528.92 684.314 L1529.48 684.314 L1530.04 684.314 L1530.6 684.314 L1531.16 684.314 L1531.72 684.314 L1532.28 684.314 L1532.84 684.314 L1533.4 684.314 L1533.96 684.314 L1534.52 684.314 L1535.08 684.314 L1535.63 684.314 L1536.19 684.314 L1536.75 684.314 L1537.31 684.314 L1537.87 684.314 L1538.43 684.314 L1538.99 684.314 L1539.55 684.314 L1540.11 684.314 L1540.67 684.314 L1541.23 684.314 L1541.79 684.314 L1542.35 684.314 L1542.9 684.314 L1543.46 684.314 L1544.02 684.314 L1544.58 684.314 L1545.14 684.314 L1545.7 684.314 L1546.26 684.314 L1546.82 684.314 L1547.38 684.314 L1547.94 684.314 L1548.5 684.314 L1549.06 684.314 L1549.62 684.314 L1550.18 684.314 L1550.73 684.314 L1551.29 684.314 L1551.85 684.314 L1552.41 684.314 L1552.97 684.314 L1553.53 684.314 L1554.09 684.314 L1554.65 684.314 L1555.21 684.314 L1555.77 684.314 L1556.33 684.314 L1556.89 684.314 L1557.45 684.314 L1558 684.314 L1558.56 684.314 L1559.12 684.314 L1559.68 684.314 L1560.24 684.314 L1560.8 684.314 L1561.36 684.314 L1561.92 684.314 L1562.48 684.314 L1563.04 684.314 L1563.6 684.314 L1564.16 684.314 L1564.72 684.314 L1565.28 684.314 L1565.83 684.314 L1566.39 684.314 L1566.95 684.314 L1567.51 684.314 L1568.07 684.314 L1568.63 684.314 L1569.19 684.314 L1569.75 684.314 L1570.31 684.314 L1570.87 684.314 L1571.43 684.314 L1571.99 684.314 L1572.55 684.314 L1573.1 684.314 L1573.66 684.314 L1574.22 684.314 L1574.78 684.314 L1575.34 684.314 L1575.9 684.314 L1576.46 684.314 L1577.02 684.314 L1577.58 684.314 L1578.14 684.314 L1578.7 684.314 L1579.26 684.314 L1579.82 684.314 L1580.37 684.314 L1580.93 684.314 L1581.49 684.314 L1582.05 684.314 L1582.61 684.314 L1583.17 684.314 L1583.73 684.314 L1584.29 684.314 L1584.85 684.314 L1585.41 684.314 L1585.97 684.314 L1586.53 684.314 L1587.09 684.314 L1587.65 684.314 L1588.2 684.314 L1588.76 684.314 L1589.32 684.314 L1589.88 684.314 L1590.44 684.314 L1591 684.314 L1591.56 684.314 L1592.12 684.314 L1592.68 684.314 L1593.24 684.314 L1593.8 684.314 L1594.36 684.314 L1594.92 684.314 L1595.47 684.314 L1596.03 684.314 L1596.59 684.314 L1597.15 684.314 L1597.71 684.314 L1598.27 684.314 L1598.83 684.314 L1599.39 684.314 L1599.95 684.314 L1600.51 684.314 L1601.07 684.314 L1601.63 684.314 L1602.19 684.314 L1602.74 684.314 L1603.3 684.314 L1603.86 684.314 L1604.42 684.314 L1604.98 684.314 L1605.54 684.314 L1606.1 684.314 L1606.66 684.314 L1607.22 684.314 L1607.78 684.314 L1608.34 684.314 L1608.9 684.314 L1609.46 684.314 L1610.02 684.314 L1610.57 684.314 L1611.13 684.314 L1611.69 684.314 L1612.25 684.314 L1612.81 684.314 L1613.37 684.314 L1613.93 684.314 L1614.49 684.314 L1615.05 684.314 L1615.61 684.314 L1616.17 684.314 L1616.73 684.314 L1617.29 684.314 L1617.84 684.314 L1618.4 684.314 L1618.96 684.314 L1619.52 684.314 L1620.08 684.314 L1620.64 684.314 L1621.2 684.314 L1621.76 684.314 L1622.32 684.314 L1622.88 684.314 L1623.44 684.314 L1624 684.314 L1624.56 684.314 L1625.11 684.314 L1625.67 684.314 L1626.23 684.314 L1626.79 684.314 L1627.35 684.314 L1627.91 684.314 L1628.47 684.314 L1629.03 684.314 L1629.59 684.314 L1630.15 684.314 L1630.71 684.314 L1631.27 684.314 L1631.83 684.314 L1632.39 684.314 L1632.94 684.314 L1633.5 684.314 L1634.06 684.314 L1634.62 684.314 L1635.18 684.314 L1635.74 684.314 L1636.3 684.314 L1636.86 684.314 L1637.42 684.314 L1637.98 684.314 L1638.54 684.314 L1639.1 684.314 L1639.66 684.314 L1640.21 684.314 L1640.77 684.314 L1641.33 684.314 L1641.89 684.314 L1642.45 684.314 L1643.01 684.314 L1643.57 684.314 L1644.13 684.314 L1644.69 684.314 L1645.25 684.314 L1645.81 684.314 L1646.37 684.314 L1646.93 684.314 L1647.48 684.314 L1648.04 684.314 L1648.6 684.314 L1649.16 684.314 L1649.72 684.314 L1650.28 684.314 L1650.84 684.314 L1651.4 684.314 L1651.96 684.314 L1652.52 684.314 L1653.08 684.314 L1653.64 684.314 L1654.2 684.314 L1654.76 684.314 L1655.31 684.314 L1655.87 684.314 L1656.43 684.314 L1656.99 684.314 L1657.55 684.314 L1658.11 684.314 L1658.67 684.314 L1659.23 684.314 L1659.79 684.314 L1660.35 684.314 L1660.91 684.314 L1661.47 684.314 L1662.03 684.314 L1662.58 684.314 L1663.14 684.314 L1663.7 684.314 L1664.26 684.314 L1664.82 684.314 L1665.38 684.314 L1665.94 684.314 L1666.5 684.314 L1667.06 684.314 L1667.62 684.314 L1668.18 684.314 L1668.74 684.314 L1669.3 684.314 L1669.85 684.314 L1670.41 684.314 L1670.97 684.314 L1671.53 684.314 L1672.09 684.314 L1672.65 684.314 L1673.21 684.314 L1673.77 684.314 L1674.33 684.314 L1674.89 684.314 L1675.45 684.314 L1676.01 684.314 L1676.57 684.314 L1677.13 684.314 L1677.68 684.314 L1678.24 684.314 L1678.8 684.314 L1679.36 684.314 L1679.92 684.314 L1680.48 684.314 L1681.04 684.314 L1681.6 684.314 L1682.16 684.314 L1682.72 684.314 L1683.28 684.314 L1683.84 684.314 L1684.4 684.314 L1684.95 684.314 L1685.51 684.314 L1686.07 684.314 L1686.63 684.314 L1687.19 684.314 L1687.75 684.314 L1688.31 684.314 L1688.87 684.314 L1689.43 684.314 L1689.99 684.314 L1690.55 684.314 L1691.11 684.314 L1691.67 684.314 L1692.23 684.314 L1692.78 684.314 L1693.34 684.314 L1693.9 684.314 L1694.46 684.314 L1695.02 684.314 L1695.58 684.314 L1696.14 684.314 L1696.7 684.314 L1697.26 684.314 L1697.82 684.314 L1698.38 684.314 L1698.94 684.314 L1699.5 684.314 L1700.05 684.314 L1700.61 684.314 L1701.17 684.314 L1701.73 684.314 L1702.29 684.314 L1702.85 684.314 L1703.41 684.314 L1703.97 684.314 L1704.53 684.314 L1705.09 684.314 L1705.65 684.314 L1706.21 684.314 L1706.77 684.314 L1707.32 684.314 L1707.88 684.314 L1708.44 684.314 L1709 684.314 L1709.56 684.314 L1710.12 684.314 L1710.68 684.314 L1711.24 684.314 L1711.8 684.314 L1712.36 684.314 L1712.92 684.314 L1713.48 684.314 L1714.04 684.314 L1714.6 684.314 L1715.15 684.314 L1715.71 684.314 L1716.27 684.314 L1716.83 684.314 L1717.39 684.314 L1717.95 684.314 L1718.51 684.314 L1719.07 684.314 L1719.63 684.314 L1720.19 684.314 L1720.75 684.314 L1721.31 684.314 L1721.87 684.314 L1722.42 684.314 L1722.98 684.314 L1723.54 684.314 L1724.1 684.314 L1724.66 684.314 L1725.22 684.314 L1725.78 684.314 L1726.34 684.314 L1726.9 684.314 L1727.46 684.314 L1728.02 684.314 L1728.58 684.314 L1729.14 684.314 L1729.69 684.314 L1730.25 684.314 L1730.81 684.314 L1731.37 684.314 L1731.93 684.314 L1732.49 684.314 L1733.05 684.314 L1733.61 684.314 L1734.17 684.314 L1734.73 684.314 L1735.29 684.314 L1735.85 684.314 L1736.41 684.314 L1736.97 684.314 L1737.52 684.314 L1738.08 684.314 L1738.64 684.314 L1739.2 684.314 L1739.76 684.314 L1740.32 684.314 L1740.88 684.314 L1741.44 684.314 L1742 684.314 L1742.56 684.314 L1743.12 684.314 L1743.68 684.314 L1744.24 684.314 L1744.79 684.314 L1745.35 684.314 L1745.91 684.314 L1746.47 684.314 L1747.03 684.314 L1747.59 684.314 L1748.15 684.314 L1748.71 684.314 L1749.27 684.314 L1749.83 684.314 L1750.39 684.314 L1750.95 684.314 L1751.51 684.314 L1752.06 684.314 L1752.62 684.314 L1753.18 684.314 L1753.74 684.314 L1754.3 684.314 L1754.86 684.314 L1755.42 684.314 L1755.98 684.314 L1756.54 684.314 L1757.1 684.314 L1757.66 684.314 L1758.22 684.314 L1758.78 684.314 L1759.34 684.314 L1759.89 684.314 L1760.45 684.314 L1761.01 684.314 L1761.57 684.314 L1762.13 684.314 L1762.69 684.314 L1763.25 684.314 L1763.81 684.314 L1764.37 684.314 L1764.93 684.314 L1765.49 684.314 L1766.05 684.314 L1766.61 684.314 L1767.16 684.314 L1767.72 684.314 L1768.28 684.314 L1768.84 684.314 L1769.4 684.314 L1769.96 684.314 L1770.52 684.314 L1771.08 684.314 L1771.64 684.314 L1772.2 684.314 L1772.76 684.314 L1773.32 684.314 L1773.88 684.314 L1774.43 684.314 L1774.99 684.314 L1775.55 684.314 L1776.11 684.314 L1776.67 684.314 L1777.23 684.314 L1777.79 684.314 L1778.35 684.314 L1778.91 684.314 L1779.47 684.314 L1780.03 684.314 L1780.59 684.314 L1781.15 684.314 L1781.71 684.314 L1782.26 684.314 L1782.82 684.314 L1783.38 684.314 L1783.94 684.314 L1784.5 684.314 L1785.06 684.314 L1785.62 684.314 L1786.18 684.314 L1786.74 684.314 L1787.3 684.314 L1787.86 684.314 L1788.42 684.314 L1788.98 684.314 L1789.53 684.314 L1790.09 684.314 L1790.65 684.314 L1791.21 684.314 L1791.77 684.314 L1792.33 684.314 L1792.89 684.314 L1793.45 684.314 L1794.01 684.314 L1794.57 684.314 L1795.13 684.314 L1795.69 684.314 L1796.25 684.314 L1796.8 684.314 L1797.36 684.314 L1797.92 684.314 L1798.48 684.314 L1799.04 684.314 L1799.6 684.314 L1800.16 684.314 L1800.72 684.314 L1801.28 684.314 L1801.84 684.314 L1802.4 684.314 L1802.96 684.314 L1803.52 684.314 L1804.08 684.314 L1804.63 684.314 L1805.19 684.314 L1805.75 684.314 L1806.31 684.314 L1806.87 684.314 L1807.43 684.314 L1807.99 684.314 L1808.55 684.314 L1809.11 684.314 L1809.67 684.314 L1810.23 684.314 L1810.79 684.314 L1811.35 684.314 L1811.9 684.314 L1812.46 684.314 L1813.02 684.314 L1813.58 684.314 L1814.14 684.314 L1814.7 684.314 L1815.26 684.314 L1815.82 684.314 L1816.38 684.314 L1816.94 684.314 L1817.5 684.314 L1818.06 684.314 L1818.62 684.314 L1819.18 684.314 L1819.73 684.314 L1820.29 684.314 L1820.85 684.314 L1821.41 684.314 L1821.97 684.314 L1822.53 684.314 L1823.09 684.314 L1823.65 684.314 L1824.21 684.314 L1824.77 684.314 L1825.33 684.314 L1825.89 684.314 L1826.45 684.314 L1827 684.314 L1827.56 684.314 L1828.12 684.314 L1828.68 684.314 L1829.24 684.314 L1829.8 684.314 L1830.36 684.314 L1830.92 684.314 L1831.48 684.314 L1832.04 684.314 L1832.6 684.314 L1833.16 684.314 L1833.72 684.314 L1834.27 684.314 L1834.83 684.314 L1835.39 684.314 L1835.95 684.314 L1836.51 684.314 L1837.07 684.314 L1837.63 684.314 L1838.19 684.314 L1838.19 682.8 L1837.63 682.8 L1837.07 682.8 L1836.51 682.8 L1835.95 682.8 L1835.39 682.8 L1834.83 682.8 L1834.27 682.8 L1833.72 682.8 L1833.16 682.8 L1832.6 682.8 L1832.04 682.8 L1831.48 682.8 L1830.92 682.8 L1830.36 682.8 L1829.8 682.8 L1829.24 682.8 L1828.68 682.8 L1828.12 682.8 L1827.56 682.8 L1827 682.8 L1826.45 682.8 L1825.89 682.8 L1825.33 682.8 L1824.77 682.8 L1824.21 682.8 L1823.65 682.8 L1823.09 682.8 L1822.53 682.8 L1821.97 682.8 L1821.41 682.8 L1820.85 682.8 L1820.29 682.8 L1819.73 682.8 L1819.18 682.8 L1818.62 682.8 L1818.06 682.8 L1817.5 682.8 L1816.94 682.8 L1816.38 682.8 L1815.82 682.8 L1815.26 682.8 L1814.7 682.8 L1814.14 682.8 L1813.58 682.8 L1813.02 682.8 L1812.46 682.8 L1811.9 682.8 L1811.35 682.8 L1810.79 682.8 L1810.23 682.8 L1809.67 682.8 L1809.11 682.8 L1808.55 682.8 L1807.99 682.8 L1807.43 682.8 L1806.87 682.8 L1806.31 682.8 L1805.75 682.8 L1805.19 682.8 L1804.63 682.8 L1804.08 682.8 L1803.52 682.8 L1802.96 682.8 L1802.4 682.8 L1801.84 682.8 L1801.28 682.8 L1800.72 682.8 L1800.16 682.8 L1799.6 682.8 L1799.04 682.8 L1798.48 682.8 L1797.92 682.8 L1797.36 682.8 L1796.8 682.8 L1796.25 682.8 L1795.69 682.8 L1795.13 682.8 L1794.57 682.8 L1794.01 682.8 L1793.45 682.8 L1792.89 682.8 L1792.33 682.8 L1791.77 682.8 L1791.21 682.8 L1790.65 682.8 L1790.09 682.8 L1789.53 682.8 L1788.98 682.8 L1788.42 682.8 L1787.86 682.8 L1787.3 682.8 L1786.74 682.8 L1786.18 682.8 L1785.62 682.8 L1785.06 682.8 L1784.5 682.8 L1783.94 682.8 L1783.38 682.8 L1782.82 682.8 L1782.26 682.8 L1781.71 682.8 L1781.15 682.8 L1780.59 682.8 L1780.03 682.8 L1779.47 682.8 L1778.91 682.8 L1778.35 682.8 L1777.79 682.8 L1777.23 682.8 L1776.67 682.8 L1776.11 682.8 L1775.55 682.8 L1774.99 682.8 L1774.43 682.8 L1773.88 682.8 L1773.32 682.8 L1772.76 682.8 L1772.2 682.8 L1771.64 682.8 L1771.08 682.8 L1770.52 682.8 L1769.96 682.8 L1769.4 682.8 L1768.84 682.8 L1768.28 682.8 L1767.72 682.8 L1767.16 682.8 L1766.61 682.8 L1766.05 682.8 L1765.49 682.8 L1764.93 682.8 L1764.37 682.8 L1763.81 682.8 L1763.25 682.8 L1762.69 682.8 L1762.13 682.8 L1761.57 682.8 L1761.01 682.8 L1760.45 682.8 L1759.89 682.8 L1759.34 682.8 L1758.78 682.8 L1758.22 682.8 L1757.66 682.8 L1757.1 682.8 L1756.54 682.8 L1755.98 682.8 L1755.42 682.8 L1754.86 682.8 L1754.3 682.8 L1753.74 682.8 L1753.18 682.8 L1752.62 682.8 L1752.06 682.8 L1751.51 682.8 L1750.95 682.8 L1750.39 682.8 L1749.83 682.8 L1749.27 682.8 L1748.71 682.8 L1748.15 682.8 L1747.59 682.8 L1747.03 682.8 L1746.47 682.8 L1745.91 682.8 L1745.35 682.8 L1744.79 682.8 L1744.24 682.8 L1743.68 682.8 L1743.12 682.8 L1742.56 682.8 L1742 682.8 L1741.44 682.8 L1740.88 682.8 L1740.32 682.8 L1739.76 682.8 L1739.2 682.8 L1738.64 682.8 L1738.08 682.8 L1737.52 682.8 L1736.97 682.8 L1736.41 682.8 L1735.85 682.8 L1735.29 682.8 L1734.73 682.8 L1734.17 682.8 L1733.61 682.8 L1733.05 682.8 L1732.49 682.8 L1731.93 682.8 L1731.37 682.8 L1730.81 682.8 L1730.25 682.8 L1729.69 682.8 L1729.14 682.8 L1728.58 682.8 L1728.02 682.8 L1727.46 682.8 L1726.9 682.8 L1726.34 682.8 L1725.78 682.8 L1725.22 682.8 L1724.66 682.8 L1724.1 682.8 L1723.54 682.8 L1722.98 682.8 L1722.42 682.8 L1721.87 682.8 L1721.31 682.8 L1720.75 682.8 L1720.19 682.8 L1719.63 682.8 L1719.07 682.8 L1718.51 682.8 L1717.95 682.8 L1717.39 682.8 L1716.83 682.8 L1716.27 682.8 L1715.71 682.8 L1715.15 682.8 L1714.6 682.8 L1714.04 682.8 L1713.48 682.8 L1712.92 682.8 L1712.36 682.8 L1711.8 682.8 L1711.24 682.8 L1710.68 682.8 L1710.12 682.8 L1709.56 682.8 L1709 682.8 L1708.44 682.8 L1707.88 682.8 L1707.32 682.8 L1706.77 682.8 L1706.21 682.8 L1705.65 682.8 L1705.09 682.8 L1704.53 682.8 L1703.97 682.8 L1703.41 682.8 L1702.85 682.8 L1702.29 682.8 L1701.73 682.8 L1701.17 682.8 L1700.61 682.8 L1700.05 682.8 L1699.5 682.8 L1698.94 682.8 L1698.38 682.8 L1697.82 682.8 L1697.26 682.8 L1696.7 682.8 L1696.14 682.8 L1695.58 682.8 L1695.02 682.8 L1694.46 682.8 L1693.9 682.8 L1693.34 682.8 L1692.78 682.8 L1692.23 682.8 L1691.67 682.8 L1691.11 682.8 L1690.55 682.8 L1689.99 682.8 L1689.43 682.8 L1688.87 682.8 L1688.31 682.8 L1687.75 682.8 L1687.19 682.8 L1686.63 682.8 L1686.07 682.8 L1685.51 682.8 L1684.95 682.8 L1684.4 682.8 L1683.84 682.8 L1683.28 682.8 L1682.72 682.8 L1682.16 682.8 L1681.6 682.8 L1681.04 682.8 L1680.48 682.8 L1679.92 682.8 L1679.36 682.8 L1678.8 682.8 L1678.24 682.8 L1677.68 682.8 L1677.13 682.8 L1676.57 682.8 L1676.01 682.8 L1675.45 682.8 L1674.89 682.8 L1674.33 682.8 L1673.77 682.8 L1673.21 682.8 L1672.65 682.8 L1672.09 682.8 L1671.53 682.8 L1670.97 682.8 L1670.41 682.8 L1669.85 682.8 L1669.3 682.8 L1668.74 682.8 L1668.18 682.8 L1667.62 682.8 L1667.06 682.8 L1666.5 682.8 L1665.94 682.8 L1665.38 682.8 L1664.82 682.8 L1664.26 682.8 L1663.7 682.8 L1663.14 682.8 L1662.58 682.8 L1662.03 682.8 L1661.47 682.8 L1660.91 682.8 L1660.35 682.8 L1659.79 682.8 L1659.23 682.8 L1658.67 682.8 L1658.11 682.8 L1657.55 682.8 L1656.99 682.8 L1656.43 682.8 L1655.87 682.8 L1655.31 682.8 L1654.76 682.8 L1654.2 682.8 L1653.64 682.8 L1653.08 682.8 L1652.52 682.8 L1651.96 682.8 L1651.4 682.8 L1650.84 682.8 L1650.28 682.8 L1649.72 682.8 L1649.16 682.8 L1648.6 682.8 L1648.04 682.8 L1647.48 682.8 L1646.93 682.8 L1646.37 682.8 L1645.81 682.8 L1645.25 682.8 L1644.69 682.8 L1644.13 682.8 L1643.57 682.8 L1643.01 682.8 L1642.45 682.8 L1641.89 682.8 L1641.33 682.8 L1640.77 682.8 L1640.21 682.8 L1639.66 682.8 L1639.1 682.8 L1638.54 682.8 L1637.98 682.8 L1637.42 682.8 L1636.86 682.8 L1636.3 682.8 L1635.74 682.8 L1635.18 682.8 L1634.62 682.8 L1634.06 682.8 L1633.5 682.8 L1632.94 682.8 L1632.39 682.8 L1631.83 682.8 L1631.27 682.8 L1630.71 682.8 L1630.15 682.8 L1629.59 682.8 L1629.03 682.8 L1628.47 682.8 L1627.91 682.8 L1627.35 682.8 L1626.79 682.8 L1626.23 682.8 L1625.67 682.8 L1625.11 682.8 L1624.56 682.8 L1624 682.8 L1623.44 682.8 L1622.88 682.8 L1622.32 682.8 L1621.76 682.8 L1621.2 682.8 L1620.64 682.8 L1620.08 682.8 L1619.52 682.8 L1618.96 682.8 L1618.4 682.8 L1617.84 682.8 L1617.29 682.8 L1616.73 682.8 L1616.17 682.8 L1615.61 682.8 L1615.05 682.8 L1614.49 682.8 L1613.93 682.8 L1613.37 682.8 L1612.81 682.8 L1612.25 682.8 L1611.69 682.8 L1611.13 682.8 L1610.57 682.8 L1610.02 682.8 L1609.46 682.8 L1608.9 682.8 L1608.34 682.8 L1607.78 682.8 L1607.22 682.8 L1606.66 682.8 L1606.1 682.8 L1605.54 682.8 L1604.98 682.8 L1604.42 682.8 L1603.86 682.8 L1603.3 682.8 L1602.74 682.8 L1602.19 682.8 L1601.63 682.8 L1601.07 682.8 L1600.51 682.8 L1599.95 682.8 L1599.39 682.8 L1598.83 682.8 L1598.27 682.8 L1597.71 682.8 L1597.15 682.8 L1596.59 682.8 L1596.03 682.8 L1595.47 682.8 L1594.92 682.8 L1594.36 682.8 L1593.8 682.8 L1593.24 682.8 L1592.68 682.8 L1592.12 682.8 L1591.56 682.8 L1591 682.8 L1590.44 682.8 L1589.88 682.8 L1589.32 682.8 L1588.76 682.8 L1588.2 682.8 L1587.65 682.8 L1587.09 682.8 L1586.53 682.8 L1585.97 682.8 L1585.41 682.8 L1584.85 682.8 L1584.29 682.8 L1583.73 682.8 L1583.17 682.8 L1582.61 682.8 L1582.05 682.8 L1581.49 682.8 L1580.93 682.8 L1580.37 682.8 L1579.82 682.8 L1579.26 682.8 L1578.7 682.8 L1578.14 682.8 L1577.58 682.8 L1577.02 682.8 L1576.46 682.8 L1575.9 682.8 L1575.34 682.8 L1574.78 682.8 L1574.22 682.8 L1573.66 682.8 L1573.1 682.8 L1572.55 682.8 L1571.99 682.8 L1571.43 682.8 L1570.87 682.8 L1570.31 682.8 L1569.75 682.8 L1569.19 682.8 L1568.63 682.8 L1568.07 682.8 L1567.51 682.8 L1566.95 682.8 L1566.39 682.8 L1565.83 682.8 L1565.28 682.8 L1564.72 682.8 L1564.16 682.8 L1563.6 682.8 L1563.04 682.8 L1562.48 682.8 L1561.92 682.8 L1561.36 682.8 L1560.8 682.8 L1560.24 682.8 L1559.68 682.8 L1559.12 682.8 L1558.56 682.8 L1558 682.8 L1557.45 682.8 L1556.89 682.8 L1556.33 682.8 L1555.77 682.8 L1555.21 682.8 L1554.65 682.8 L1554.09 682.8 L1553.53 682.8 L1552.97 682.8 L1552.41 682.8 L1551.85 682.8 L1551.29 682.8 L1550.73 682.8 L1550.18 682.8 L1549.62 682.8 L1549.06 682.8 L1548.5 682.8 L1547.94 682.8 L1547.38 682.8 L1546.82 682.8 L1546.26 682.8 L1545.7 682.8 L1545.14 682.8 L1544.58 682.8 L1544.02 682.8 L1543.46 682.8 L1542.9 682.8 L1542.35 682.8 L1541.79 682.8 L1541.23 682.8 L1540.67 682.8 L1540.11 682.8 L1539.55 682.8 L1538.99 682.8 L1538.43 682.8 L1537.87 682.8 L1537.31 682.8 L1536.75 682.8 L1536.19 682.8 L1535.63 682.8 L1535.08 682.8 L1534.52 682.8 L1533.96 682.8 L1533.4 682.8 L1532.84 682.8 L1532.28 682.8 L1531.72 682.8 L1531.16 682.8 L1530.6 682.8 L1530.04 682.8 L1529.48 682.8 L1528.92 682.8 L1528.36 682.8 L1527.81 682.8 L1527.25 682.8 L1526.69 682.8 L1526.13 682.8 L1525.57 682.8 L1525.01 682.8 L1524.45 682.8 L1523.89 682.8 L1523.33 682.8 L1522.77 682.8 L1522.21 682.8 L1521.65 682.8 L1521.09 682.8 L1520.53 682.8 L1519.98 682.8 L1519.42 682.8 L1518.86 682.8 L1518.3 682.8 L1517.74 682.8 L1517.18 682.8 L1516.62 682.8 L1516.06 682.8 L1515.5 682.8 L1514.94 682.8 L1514.38 682.8 L1513.82 682.8 L1513.26 682.8 L1512.71 682.8 L1512.15 682.8 L1511.59 682.8 L1511.03 682.8 L1510.47 682.8 L1509.91 682.8 L1509.35 682.8 L1508.79 682.8 L1508.23 682.8 L1507.67 682.8 L1507.11 682.8 L1506.55 682.8 L1505.99 682.8 L1505.44 682.8 L1504.88 682.8 L1504.32 682.8 L1503.76 682.8 L1503.2 682.8 L1502.64 682.8 L1502.08 682.8 L1501.52 682.8 L1500.96 682.8 L1500.4 682.8 L1499.84 682.8 L1499.28 682.8 L1498.72 682.8 L1498.16 682.8 L1497.61 682.8 L1497.05 682.8 L1496.49 682.8 L1495.93 682.8 L1495.37 682.8 L1494.81 682.8 L1494.25 682.8 L1493.69 682.8 L1493.13 682.8 L1492.57 682.8 L1492.01 682.8 L1491.45 682.8 L1490.89 682.8 L1490.34 682.8 L1489.78 682.8 L1489.22 682.8 L1488.66 682.8 L1488.1 682.8 L1487.54 682.8 L1486.98 682.8 L1486.42 682.8 L1485.86 682.8 L1485.3 682.8 L1484.74 682.8 L1484.18 682.8 L1483.62 682.8 L1483.07 682.8 L1482.51 682.8 L1481.95 682.8 L1481.39 682.8 L1480.83 682.8 L1480.27 682.8 L1479.71 682.8 L1479.15 682.8 L1478.59 682.8 L1478.03 682.8 L1477.47 682.8 L1476.91 682.8 L1476.35 682.8 L1475.79 682.8 L1475.24 682.8 L1474.68 682.8 L1474.12 682.8 L1473.56 682.8 L1473 682.8 L1472.44 682.8 L1471.88 682.8 L1471.32 682.8 L1470.76 682.8 L1470.2 682.8 L1469.64 682.8 L1469.08 682.8 L1468.52 682.8 L1467.97 682.8 L1467.41 682.8 L1466.85 682.8 L1466.29 682.8 L1465.73 682.8 L1465.17 682.8 L1464.61 682.8 L1464.05 682.8 L1463.49 682.8 L1462.93 682.8 L1462.37 682.8 L1461.81 682.8 L1461.25 682.8 L1460.7 682.8 L1460.14 682.8 L1459.58 682.8 L1459.02 682.8 L1458.46 682.8 L1457.9 682.8 L1457.34 682.8 L1456.78 682.8 L1456.22 682.8 L1455.66 682.8 L1455.1 682.8 L1454.54 682.8 L1453.98 682.8 L1453.42 682.8 L1452.87 682.8 L1452.31 682.8 L1451.75 682.8 L1451.19 682.8 L1450.63 682.8 L1450.07 682.8 L1449.51 682.8 L1448.95 682.8 L1448.39 682.8 L1447.83 682.8 L1447.27 682.8 L1446.71 682.8 L1446.15 682.8 L1445.6 682.8 L1445.04 682.8 L1444.48 682.8 L1443.92 682.8 L1443.36 682.8 L1442.8 682.8 L1442.24 682.8 L1441.68 682.8 L1441.12 682.8 L1440.56 682.8 L1440 682.8 L1439.44 682.8 L1438.88 682.8 L1438.33 682.8 L1437.77 682.8 L1437.21 682.8 L1436.65 682.8 L1436.09 682.8 L1435.53 682.8 L1434.97 682.8 L1434.41 682.8 L1433.85 682.8 L1433.29 682.8 L1432.73 682.8 L1432.17 682.8 L1431.61 682.8 L1431.05 682.8 L1430.5 682.8 L1429.94 682.8 L1429.38 682.8 L1428.82 682.8 L1428.26 682.8 L1427.7 682.8 L1427.14 682.8 L1426.58 682.8 L1426.02 682.8 L1425.46 682.8 L1424.9 682.8 L1424.34 682.8 L1423.78 682.8 L1423.23 682.8 L1422.67 682.8 L1422.11 682.8 L1421.55 682.8 L1420.99 682.8 L1420.43 682.8 L1419.87 682.8 L1419.31 682.8 L1418.75 682.8 L1418.19 682.8 L1417.63 682.8 L1417.07 682.8 L1416.51 682.8 L1415.95 682.8 L1415.4 682.8 L1414.84 682.8 L1414.28 682.8 L1413.72 682.8 L1413.16 682.8 L1412.6 682.8 L1412.04 682.8 L1411.48 682.8 L1410.92 682.8 L1410.36 682.8 L1409.8 682.8 L1409.24 682.8 L1408.68 682.8 L1408.13 682.8 L1407.57 682.8 L1407.01 682.8 L1406.45 682.8 L1405.89 682.8 L1405.33 682.8 L1404.77 682.8 L1404.21 682.8 L1403.65 682.8 L1403.09 682.8 L1402.53 682.8 L1401.97 682.8 L1401.41 682.8 L1400.86 682.8 L1400.3 682.8 L1399.74 682.8 L1399.18 682.8 L1398.62 682.8 L1398.06 682.8 L1397.5 682.8 L1396.94 682.8 L1396.38 682.8 L1395.82 682.8 L1395.26 682.8 L1394.7 682.8 L1394.14 682.8 L1393.58 682.8 L1393.03 682.8 L1392.47 682.8 L1391.91 682.8 L1391.35 682.8 L1390.79 682.8 L1390.23 682.8 L1389.67 682.8 L1389.11 682.8 L1388.55 682.8 L1387.99 682.8 L1387.43 682.8 L1386.87 682.8 L1386.31 682.8 L1385.76 682.8 L1385.2 682.8 L1384.64 682.8 L1384.08 682.8 L1383.52 682.8 L1382.96 682.8 L1382.4 682.8 L1381.84 682.8 L1381.28 682.8 L1380.72 682.8 L1380.16 682.8 L1379.6 682.8 L1379.04 682.8 L1378.49 682.8 L1377.93 682.8 L1377.37 682.8 L1376.81 682.8 L1376.25 682.8 L1375.69 682.8 L1375.13 682.8 L1374.57 682.8 L1374.01 682.8 L1373.45 682.8 L1372.89 682.8 L1372.33 682.8 L1371.77 682.8 L1371.21 682.8 L1370.66 682.8 L1370.1 682.8 L1369.54 682.8 L1368.98 682.8 L1368.42 682.8 L1367.86 682.8 L1367.3 682.8 L1366.74 682.8 L1366.18 682.8 L1365.62 682.8 L1365.06 682.8 L1364.5 682.8 L1363.94 682.8 L1363.39 682.8 L1362.83 682.8 L1362.27 682.8 L1361.71 682.8 L1361.15 682.8 L1360.59 682.8 L1360.03 682.8 L1359.47 682.8 L1358.91 682.8 L1358.35 682.8 L1357.79 682.8 L1357.23 682.8 L1356.67 682.8 L1356.12 682.8 L1355.56 682.8 L1355 682.8 L1354.44 682.8 L1353.88 682.8 L1353.32 682.8 L1352.76 682.8 L1352.2 682.8 L1351.64 682.8 L1351.08 682.8 L1350.52 682.8 L1349.96 682.8 L1349.4 682.8 L1348.84 682.8 L1348.29 682.8 L1347.73 682.8 L1347.17 682.8 L1346.61 682.8 L1346.05 682.8 L1345.49 682.8 L1344.93 682.8 L1344.37 682.8 L1343.81 682.8 L1343.25 682.8 L1342.69 682.8 L1342.13 682.8 L1341.57 682.8 L1341.02 682.8 L1340.46 682.8 L1339.9 682.8 L1339.34 682.8 L1338.78 682.8 L1338.22 682.8 L1337.66 682.8 L1337.1 682.8 L1336.54 682.8 L1335.98 682.8 L1335.42 682.8 L1334.86 682.8 L1334.3 682.8 L1333.75 682.8 L1333.19 682.8 L1332.63 682.8 L1332.07 682.8 L1331.51 682.8 L1330.95 682.8 L1330.39 682.8 L1329.83 682.8 L1329.27 682.8 L1328.71 682.8 L1328.15 682.8 L1327.59 682.8 L1327.03 682.8 L1326.47 682.8 L1325.92 682.8 L1325.36 682.8 L1324.8 682.8 L1324.24 682.8 L1323.68 682.8 L1323.12 682.8 L1322.56 682.8 L1322 682.8 L1321.44 682.8 L1320.88 682.8 L1320.32 682.8 L1319.76 682.8 L1319.2 682.8 L1318.65 682.8 L1318.09 682.8 L1317.53 682.8 L1316.97 682.8 L1316.41 682.8 L1315.85 682.8 L1315.29 682.8 L1314.73 682.8 L1314.17 682.8 L1313.61 682.8 L1313.05 682.8 L1312.49 682.8 L1311.93 682.8 L1311.38 682.8 L1310.82 682.8 L1310.26 682.8 L1309.7 682.8 L1309.14 682.8 L1308.58 682.8 L1308.02 682.8 L1307.46 682.8 L1306.9 682.8 L1306.34 682.8 L1305.78 682.8 L1305.22 682.8 L1304.66 682.8 L1304.1 682.8 L1303.55 682.8 L1302.99 682.8 L1302.43 682.8 L1301.87 682.8 L1301.31 682.8 L1300.75 682.8 L1300.19 682.8 L1299.63 682.8 L1299.07 682.8 L1298.51 682.8 L1297.95 682.8 L1297.39 682.8 L1296.83 682.8 L1296.28 682.8 L1295.72 682.8 L1295.16 682.8 L1294.6 682.8 L1294.04 682.8 L1293.48 682.8 L1292.92 682.8 L1292.36 682.8 L1291.8 682.8 L1291.24 682.8 L1290.68 682.8 L1290.12 682.8 L1289.56 682.8 L1289 682.8 L1288.45 682.8 L1287.89 682.8 L1287.33 682.8 L1286.77 682.8 L1286.21 682.8 L1285.65 682.8 L1285.09 682.8 L1284.53 682.8 L1283.97 682.8 L1283.41 682.8 L1282.85 682.8 L1282.29 682.8 L1281.73 682.8 L1281.18 682.8 L1280.62 682.8 L1280.06 682.8 L1279.5 682.8 L1278.94 682.8 L1278.38 682.8 L1277.82 682.8 L1277.26 682.8 L1276.7 682.8 L1276.14 682.8 L1275.58 682.8 L1275.02 682.8 L1274.46 682.8 L1273.91 682.8 L1273.35 682.8 L1272.79 682.8 L1272.23 682.8 L1271.67 682.8 L1271.11 682.8 L1270.55 682.8 L1269.99 682.8 L1269.43 682.8 L1268.87 682.8 L1268.31 682.8 L1267.75 682.8 L1267.19 682.8 L1266.63 682.8 L1266.08 682.8 L1265.52 682.8 L1264.96 682.8 L1264.4 682.8 L1263.84 682.8 L1263.28 682.8 L1262.72 682.8 L1262.16 682.8 L1261.6 682.8 L1261.04 682.8 L1260.48 682.8 L1259.92 682.8 L1259.36 682.8 L1258.81 682.8 L1258.25 682.8 L1257.69 682.8 L1257.13 682.8 L1256.57 682.8 L1256.01 682.8 L1255.45 682.8 L1254.89 682.8 L1254.33 682.8 L1253.77 682.8 L1253.21 682.8 L1252.65 682.8 L1252.09 682.8 L1251.54 682.8 L1250.98 682.8 L1250.42 682.8 L1249.86 682.8 L1249.3 682.8 L1248.74 682.8 L1248.18 682.8 L1247.62 682.8 L1247.06 682.8 L1246.5 682.8 L1245.94 682.8 L1245.38 682.8 L1244.82 682.8 L1244.26 682.8 L1243.71 682.8 L1243.15 682.8 L1242.59 682.8 L1242.03 682.8 L1241.47 682.8 L1240.91 682.8 L1240.35 682.8 L1239.79 682.8 L1239.23 682.8 L1238.67 682.8 L1238.11 682.8 L1237.55 682.8 L1236.99 682.8 L1236.44 682.8 L1235.88 682.8 L1235.32 682.8 L1234.76 682.8 L1234.2 682.8 L1233.64 682.8 L1233.08 682.8 L1232.52 682.8 L1231.96 682.8 L1231.4 682.8 L1230.84 682.8 L1230.28 682.8 L1229.72 682.8 L1229.17 682.8 L1228.61 682.8 L1228.05 682.8 L1227.49 682.8 L1226.93 682.8 L1226.37 682.8 L1225.81 682.8 L1225.25 682.8 L1224.69 682.8 L1224.13 682.8 L1223.57 682.8 L1223.01 682.8 L1222.45 682.8 L1221.89 682.8 L1221.34 682.8 L1220.78 682.8 L1220.22 682.8 L1219.66 682.8 L1219.1 682.8 L1218.54 682.8 L1217.98 682.8 L1217.42 682.8 L1216.86 682.8 L1216.3 682.8 L1215.74 682.8 L1215.18 682.8 L1214.62 682.8 L1214.07 682.8 L1213.51 682.8 L1212.95 682.8 L1212.39 682.8 L1211.83 682.8 L1211.27 682.8 L1210.71 682.8 L1210.15 682.8 L1209.59 682.8 L1209.03 682.8 L1208.47 682.8 L1207.91 682.8 L1207.35 682.8 L1206.8 682.8 L1206.24 682.8 L1205.68 682.8 L1205.12 682.8 L1204.56 682.8 L1204 682.8 L1203.44 682.8 L1202.88 682.8 L1202.32 682.8 L1201.76 682.8 L1201.2 682.8 L1200.64 682.8 L1200.08 682.8 L1199.52 682.8 L1198.97 682.8 L1198.41 682.8 L1197.85 682.8 L1197.29 682.8 L1196.73 682.8 L1196.17 682.8 L1195.61 682.8 L1195.05 682.8 L1194.49 682.8 L1193.93 682.8 L1193.37 682.8 L1192.81 682.8 L1192.25 682.8 L1191.7 682.8 L1191.14 682.8 L1190.58 682.8 L1190.02 682.8 L1189.46 682.8 L1188.9 682.8 L1188.34 682.8 L1187.78 682.8 L1187.22 682.8 L1186.66 682.8 L1186.1 682.8 L1185.54 682.8 L1184.98 682.8 L1184.43 682.8 L1183.87 682.8 L1183.31 682.8 L1182.75 682.8 L1182.19 682.8 L1181.63 682.8 L1181.07 682.8 L1180.51 682.8 L1179.95 682.8 L1179.39 682.8 L1178.83 682.8 L1178.27 682.8 L1177.71 682.8 L1177.15 682.8 L1176.6 682.8 L1176.04 682.8 L1175.48 682.8 L1174.92 682.8 L1174.36 682.8 L1173.8 682.8 L1173.24 682.8 L1172.68 682.8 L1172.12 682.8 L1171.56 682.8 L1171 682.8 L1170.44 682.8 L1169.88 682.8 L1169.33 682.8 L1168.77 682.8 L1168.21 682.8 L1167.65 682.8 L1167.09 682.8 L1166.53 682.8 L1165.97 682.8 L1165.41 682.8 L1164.85 682.8 L1164.29 682.8 L1163.73 682.8 L1163.17 682.8 L1162.61 682.8 L1162.05 682.8 L1161.5 682.8 L1160.94 682.8 L1160.38 682.8 L1159.82 682.8 L1159.26 682.8 L1158.7 682.8 L1158.14 682.8 L1157.58 682.8 L1157.02 682.8 L1156.46 682.8 L1155.9 682.8 L1155.34 682.8 L1154.78 682.8 L1154.23 682.8 L1153.67 682.8 L1153.11 682.8 L1152.55 682.8 L1151.99 682.8 L1151.43 682.8 L1150.87 682.8 L1150.31 682.8 L1149.75 682.8 L1149.19 682.8 L1148.63 682.8 L1148.07 682.8 L1147.51 682.8 L1146.96 682.8 L1146.4 682.8 L1145.84 682.8 L1145.28 682.8 L1144.72 682.8 L1144.16 682.8 L1143.6 682.8 L1143.04 682.8 L1142.48 682.8 L1141.92 682.8 L1141.36 682.8 L1140.8 682.8 L1140.24 682.8 L1139.68 682.8 L1139.13 682.8 L1138.57 682.8 L1138.01 682.8 L1137.45 682.8 L1136.89 682.8 L1136.33 682.8 L1135.77 682.8 L1135.21 682.8 L1134.65 682.8 L1134.09 682.8 L1133.53 682.8 L1132.97 682.8 L1132.41 682.8 L1131.86 682.8 L1131.3 682.8 L1130.74 682.8 L1130.18 682.8 L1129.62 682.8 L1129.06 682.8 L1128.5 682.8 L1127.94 682.8 L1127.38 682.8 L1126.82 682.8 L1126.26 682.8 L1125.7 682.8 L1125.14 682.8 L1124.59 682.8 L1124.03 682.8 L1123.47 682.8 L1122.91 682.8 L1122.35 682.8 L1121.79 682.8 L1121.23 682.8 L1120.67 682.8 L1120.11 682.8 L1119.55 682.8 L1118.99 682.8 L1118.43 682.8 L1117.87 682.8 L1117.31 682.8 L1116.76 682.8 L1116.2 682.8 L1115.64 682.8 L1115.08 682.8 L1114.52 682.8 L1113.96 682.8 L1113.4 682.8 L1112.84 682.8 L1112.28 682.8 L1111.72 682.8 L1111.16 682.8 L1110.6 682.8 L1110.04 682.8 L1109.49 682.8 L1108.93 682.8 L1108.37 682.8 L1107.81 682.8 L1107.25 682.8 L1106.69 682.8 L1106.13 682.8 L1105.57 682.8 L1105.01 682.8 L1104.45 682.8 L1103.89 682.8 L1103.33 682.8 L1102.77 682.8 L1102.22 682.8 L1101.66 682.8 L1101.1 682.8 L1100.54 682.8 L1099.98 682.8 L1099.42 682.8 L1098.86 682.8 L1098.3 682.8 L1097.74 682.8 L1097.18 682.8 L1096.62 682.8 L1096.06 682.8 L1095.5 682.8 L1094.94 682.8 L1094.39 682.8 L1093.83 682.8 L1093.27 682.8 L1092.71 682.8 L1092.15 682.8 L1091.59 682.8 L1091.03 682.8 L1090.47 682.8 L1089.91 682.8 L1089.35 682.8 L1088.79 682.8 L1088.23 682.8 L1087.67 682.8 L1087.12 682.8 L1086.56 682.8 L1086 682.8 L1085.44 682.8 L1084.88 682.8 L1084.32 682.8 L1083.76 682.8 L1083.2 682.8 L1082.64 682.8 L1082.08 682.8 L1081.52 682.8 L1080.96 682.8 L1080.4 682.8 L1079.85 682.8 L1079.29 682.8 L1078.73 682.8 L1078.17 682.8 L1077.61 682.8 L1077.05 682.8 L1076.49 682.8 L1075.93 682.8 L1075.37 682.8 L1074.81 682.8 L1074.25 682.8 L1073.69 682.8 L1073.13 682.8 L1072.57 682.8 L1072.02 682.8 L1071.46 682.8 L1070.9 682.8 L1070.34 682.8 L1069.78 682.8 L1069.22 682.8 L1068.66 682.8 L1068.1 682.8 L1067.54 682.8 L1066.98 682.8 L1066.42 682.8 L1065.86 682.8 L1065.3 682.8 L1064.75 682.8 L1064.19 682.8 L1063.63 682.8 L1063.07 682.8 L1062.51 682.8 L1061.95 682.8 L1061.39 682.8 L1060.83 682.8 L1060.27 682.8 L1059.71 682.8 L1059.15 682.8 L1058.59 682.8 L1058.03 682.8 L1057.48 682.8 L1056.92 682.8 L1056.36 682.8 L1055.8 682.8 L1055.24 682.8 L1054.68 682.8 L1054.12 682.8 L1053.56 682.8 L1053 682.8 L1052.44 682.8 L1051.88 682.8 L1051.32 682.8 L1050.76 682.8 L1050.2 682.8 L1049.65 682.8 L1049.09 682.8 L1048.53 682.8 L1047.97 682.8 L1047.41 682.8 L1046.85 682.8 L1046.29 682.8 L1045.73 682.8 L1045.17 682.8 L1044.61 682.8 L1044.05 682.8 L1043.49 682.8 L1042.93 682.8 L1042.38 682.8 L1041.82 682.8 L1041.26 682.8 L1040.7 682.8 L1040.14 682.8 L1039.58 682.8 L1039.02 682.8 L1038.46 682.8 L1037.9 682.8 L1037.34 682.8 L1036.78 682.8 L1036.22 682.8 L1035.66 682.8 L1035.1 682.8 L1034.55 682.8 L1033.99 682.8 L1033.43 682.8 L1032.87 682.8 L1032.31 682.8 L1031.75 682.8 L1031.19 682.8 L1030.63 682.8 L1030.07 682.8 L1029.51 682.8 L1028.95 682.8 L1028.39 682.8 L1027.83 682.8 L1027.28 682.8 L1026.72 682.8 L1026.16 682.8 L1025.6 682.8 L1025.04 682.8 L1024.48 682.8 L1023.92 682.8 L1023.36 682.8 L1022.8 682.8 L1022.24 682.8 L1021.68 682.8 L1021.12 682.8 L1020.56 682.8 L1020.01 682.8 L1019.45 682.8 L1018.89 682.8 L1018.33 682.8 L1017.77 682.8 L1017.21 682.8 L1016.65 682.8 L1016.09 682.8 L1015.53 682.8 L1014.97 682.8 L1014.41 682.8 L1013.85 682.8 L1013.29 682.8 L1012.73 682.8 L1012.18 682.8 L1011.62 682.8 L1011.06 682.8 L1010.5 682.8 L1009.94 682.8 L1009.38 682.8 L1008.82 682.8 L1008.26 682.8 L1007.7 682.8 L1007.14 682.8 L1006.58 682.8 L1006.02 682.8 L1005.46 682.8 L1004.91 682.8 L1004.35 682.8 L1003.79 682.8 L1003.23 682.8 L1002.67 682.8 L1002.11 682.8 L1001.55 682.8 L1000.99 682.8 L1000.43 682.8 L999.872 682.8 L999.313 682.8 L998.754 682.8 L998.194 682.8 L997.635 682.8 L997.076 682.8 L996.517 682.8 L995.957 682.8 L995.398 682.8 L994.839 682.8 L994.28 682.8 L993.72 682.8 L993.161 682.8 L992.602 682.8 L992.043 682.8 L991.483 682.8 L990.924 682.8 L990.365 682.8 L989.806 682.8 L989.246 682.8 L988.687 682.8 L988.128 682.8 L987.569 682.8 L987.009 682.8 L986.45 682.8 L985.891 682.8 L985.332 682.8 L984.772 682.8 L984.213 682.8 L983.654 682.8 L983.095 682.8 L982.535 682.8 L981.976 682.8 L981.417 682.8 L980.858 682.8 L980.298 682.8 L979.739 682.8 L979.18 682.8 L978.621 682.8 L978.061 682.8 L977.502 682.8 L976.943 682.8 L976.384 682.8 L975.824 682.8 L975.265 682.8 L974.706 682.8 L974.147 682.8 L973.587 682.8 L973.028 682.8 L972.469 682.8 L971.91 682.8 L971.35 682.8 L970.791 682.8 L970.232 682.8 L969.673 682.8 L969.113 682.8 L968.554 682.8 L967.995 682.8 L967.436 682.8 L966.876 682.8 L966.317 682.8 L965.758 682.8 L965.199 682.8 L964.639 682.8 L964.08 682.8 L963.521 682.8 L962.962 682.8 L962.402 682.8 L961.843 682.8 L961.284 682.8 L960.725 682.8 L960.165 682.8 L959.606 682.8 L959.047 682.8 L958.488 682.8 L957.928 682.8 L957.369 682.8 L956.81 682.8 L956.251 682.8 L955.691 682.8 L955.132 682.8 L954.573 682.8 L954.014 682.8 L953.454 682.8 L952.895 682.8 L952.336 682.8 L951.777 682.8 L951.217 682.8 L950.658 682.8 L950.099 682.8 L949.54 682.8 L948.98 682.8 L948.421 682.8 L947.862 682.8 L947.303 682.8 L946.743 682.8 L946.184 682.8 L945.625 682.8 L945.066 682.8 L944.506 682.8 L943.947 682.8 L943.388 682.8 L942.829 682.8 L942.269 682.8 L941.71 682.8 L941.151 682.8 L940.592 682.8 L940.032 682.8 L939.473 682.8 L938.914 682.8 L938.355 682.8 L937.795 682.8 L937.236 682.8 L936.677 682.8 L936.118 682.8 L935.558 682.8 L934.999 682.8 L934.44 682.8 L933.881 682.8 L933.321 682.8 L932.762 682.8 L932.203 682.8 L931.644 682.8 L931.084 682.8 L930.525 682.8 L929.966 682.8 L929.406 682.8 L928.847 682.8 L928.288 682.8 L927.729 682.8 L927.169 682.8 L926.61 682.8 L926.051 682.8 L925.492 682.8 L924.932 682.8 L924.373 682.8 L923.814 682.8 L923.255 682.8 L922.695 682.8 L922.136 682.8 L921.577 682.8 L921.018 682.8 L920.458 682.8 L919.899 682.8 L919.34 682.8 L918.781 682.8 L918.221 682.8 L917.662 682.8 L917.103 682.8 L916.544 682.8 L915.984 682.8 L915.425 682.8 L914.866 682.8 L914.307 682.8 L913.747 682.8 L913.188 682.8 L912.629 682.8 L912.07 682.8 L911.51 682.8 L910.951 682.8 L910.392 682.8 L909.833 682.8 L909.273 682.8 L908.714 682.8 L908.155 682.8 L907.596 682.8 L907.036 682.8 L906.477 682.8 L905.918 682.8 L905.359 682.8 L904.799 682.8 L904.24 682.8 L903.681 682.8 L903.122 682.8 L902.562 682.8 L902.003 682.8 L901.444 682.8 L900.885 682.8 L900.325 682.8 L899.766 682.8 L899.207 682.8 L898.648 682.8 L898.088 682.8 L897.529 682.8 L896.97 682.8 L896.411 682.8 L895.851 682.8 L895.292 682.8 L894.733 682.8 L894.174 682.8 L893.614 682.8 L893.055 682.8 L892.496 682.8 L891.937 682.8 L891.377 682.8 L890.818 682.8 L890.259 682.8 L889.7 682.8 L889.14 682.8 L888.581 682.8 L888.022 682.8 L887.463 682.8 L886.903 682.8 L886.344 682.8 L885.785 682.8 L885.226 682.8 L884.666 682.8 L884.107 682.8 L883.548 682.8 L882.989 682.8 L882.429 682.8 L881.87 682.8 L881.311 682.8 L880.752 682.8 L880.192 682.8 L879.633 682.8 L879.074 682.8 L878.515 682.8 L877.955 682.8 L877.396 682.8 L876.837 682.8 L876.278 682.8 L875.718 682.8 L875.159 682.8 L874.6 682.8 L874.041 682.8 L873.481 682.8 L872.922 682.8 L872.363 682.8 L871.804 682.8 L871.244 682.8 L870.685 682.8 L870.126 682.8 L869.567 682.8 L869.007 682.8 L868.448 682.8 L867.889 682.8 L867.33 682.8 L866.77 682.8 L866.211 682.8 L865.652 682.8 L865.093 682.8 L864.533 682.8 L863.974 682.8 L863.415 682.8 L862.856 682.8 L862.296 682.8 L861.737 682.8 L861.178 682.8 L860.619 682.8 L860.059 682.8 L859.5 682.8 L858.941 682.8 L858.382 682.8 L857.822 682.8 L857.263 682.8 L856.704 682.8 L856.145 682.8 L855.585 682.8 L855.026 682.8 L854.467 682.8 L853.908 682.8 L853.348 682.8 L852.789 682.8 L852.23 682.8 L851.671 682.8 L851.111 682.8 L850.552 682.8 L849.993 682.8 L849.434 682.8 L848.874 682.8 L848.315 682.8 L847.756 682.8 L847.197 682.8 L846.637 682.8 L846.078 682.8 L845.519 682.8 L844.96 682.8 L844.4 682.8 L843.841 682.8 L843.282 682.8 L842.723 682.8 L842.163 682.8 L841.604 682.8 L841.045 682.8 L840.486 682.8 L839.926 682.8 L839.367 682.8 L838.808 682.8 L838.249 682.8 L837.689 682.8 L837.13 682.8 L836.571 682.8 L836.012 682.8 L835.452 682.8 L834.893 682.8 L834.334 682.8 L833.775 682.8 L833.215 682.8 L832.656 682.8 L832.097 682.8 L831.538 682.8 L830.978 682.8 L830.419 682.8 L829.86 682.8 L829.301 682.8 L828.741 682.8 L828.182 682.8 L827.623 682.8 L827.064 682.8 L826.504 682.8 L825.945 682.8 L825.386 682.8 L824.827 682.8 L824.267 682.8 L823.708 682.8 L823.149 682.8 L822.59 682.8 L822.03 682.8 L821.471 682.8 L820.912 682.8 L820.353 682.8 L819.793 682.8 L819.234 682.8 L818.675 682.8 L818.116 682.8 L817.556 682.8 L816.997 682.8 L816.438 682.8 L815.879 682.8 L815.319 682.8 L814.76 682.8 L814.201 682.8 L813.642 682.8 L813.082 682.8 L812.523 682.8 L811.964 682.8 L811.405 682.8 L810.845 682.8 L810.286 682.8 L809.727 682.8 L809.168 682.8 L808.608 682.8 L808.049 682.8 L807.49 682.8 L806.931 682.8 L806.371 682.8 L805.812 682.8 L805.253 682.8 L804.693 682.8 L804.134 682.8 L803.575 682.8 L803.016 682.8 L802.456 682.8 L801.897 682.8 L801.338 682.8 L800.779 682.8 L800.219 682.8 L799.66 682.8 L799.101 682.8 L798.542 682.8 L797.982 682.8 L797.423 682.8 L796.864 682.8 L796.305 682.8 L795.745 682.8 L795.186 682.8 L794.627 682.8 L794.068 682.8 L793.508 682.8 L792.949 682.8 L792.39 682.8 L791.831 682.8 L791.271 682.8 L790.712 682.8 L790.153 682.8 L789.594 682.8 L789.034 682.8 L788.475 682.8 L787.916 682.8 L787.357 682.8 L786.797 682.8 L786.238 682.8 L785.679 682.8 L785.12 682.8 L784.56 682.8 L784.001 682.8 L783.442 682.8 L782.883 682.8 L782.323 682.8 L781.764 682.8 L781.205 682.8 L780.646 682.8 L780.086 682.8 L779.527 682.8 L778.968 682.8 L778.409 682.8 L777.849 682.8 L777.29 682.8 L776.731 682.8 L776.172 682.8 L775.612 682.8 L775.053 682.8 L774.494 682.8 L773.935 682.8 L773.375 682.8 L772.816 682.8 L772.257 682.8 L771.698 682.8 L771.138 682.8 L770.579 682.8 L770.02 682.8 L769.461 682.8 L768.901 682.8 L768.342 682.8 L767.783 682.8 L767.224 682.8 L766.664 682.8 L766.105 682.8 L765.546 682.8 L764.987 682.8 L764.427 682.8 L763.868 682.8 L763.309 682.8 L762.75 682.8 L762.19 682.8 L761.631 682.8 L761.072 682.8 L760.513 682.8 L759.953 682.8 L759.394 682.8 L758.835 682.8 L758.276 682.8 L757.716 682.8 L757.157 682.8 L756.598 682.8 L756.039 682.8 L755.479 682.8 L754.92 682.8 L754.361 682.8 L753.802 682.8 L753.242 682.8 L752.683 682.8 L752.124 682.8 L751.565 682.8 L751.005 682.8 L750.446 682.8 L749.887 682.8 L749.328 682.8 L748.768 682.8 L748.209 682.8 L747.65 682.8 L747.091 682.8 L746.531 682.8 L745.972 682.8 L745.413 682.8 L744.854 682.8 L744.294 682.8 L743.735 682.8 L743.176 682.8 L742.617 682.8 L742.057 682.8 L741.498 682.8 L740.939 682.8 L740.38 682.8 L739.82 682.8 L739.261 682.8 L738.702 682.8 L738.143 682.8 L737.583 682.8 L737.024 682.8 L736.465 682.8 L735.906 682.8 L735.346 682.8 L734.787 682.8 L734.228 682.8 L733.669 682.8 L733.109 682.8 L732.55 682.8 L731.991 682.8 L731.432 682.8 L730.872 682.8 L730.313 682.8 L729.754 682.8 L729.195 682.8 L728.635 682.8 L728.076 682.8 L727.517 682.8 L726.958 682.8 L726.398 682.8 L725.839 682.8 L725.28 682.8 L724.721 682.8 L724.161 682.8 L723.602 682.8 L723.043 682.8 L722.484 682.8 L721.924 682.8 L721.365 682.8 L720.806 682.8 L720.247 682.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.571 720.806,683.571 721.365,683.571 721.924,683.571 722.484,683.571 723.043,683.571 723.602,683.571 724.161,683.571 724.721,683.571 725.28,683.571 725.839,683.571 726.398,683.571 726.958,683.571 727.517,683.571 728.076,683.571 728.635,683.571 729.195,683.571 729.754,683.571 730.313,683.571 730.872,683.571 731.432,683.571 731.991,683.571 732.55,683.571 733.109,683.571 733.669,683.571 734.228,683.571 734.787,683.571 735.346,683.571 735.906,683.571 736.465,683.571 737.024,683.571 737.583,683.571 738.143,683.571 738.702,683.571 739.261,683.571 739.82,683.571 740.38,683.571 740.939,683.571 741.498,683.571 742.057,683.571 742.617,683.571 743.176,683.571 743.735,683.571 744.294,683.571 744.854,683.571 745.413,683.571 745.972,683.571 746.531,683.571 747.091,683.571 747.65,683.571 748.209,683.571 748.768,683.571 749.328,683.571 749.887,683.571 750.446,683.571 751.005,683.571 751.565,683.571 752.124,683.571 752.683,683.571 753.242,683.571 753.802,683.571 754.361,683.571 754.92,683.571 755.479,683.571 756.039,683.571 756.598,683.571 757.157,683.571 757.716,683.571 758.276,683.571 758.835,683.571 759.394,683.571 759.953,683.571 760.513,683.571 761.072,683.571 761.631,683.571 762.19,683.571 762.75,683.571 763.309,683.571 763.868,683.571 764.427,683.571 764.987,683.571 765.546,683.571 766.105,683.571 766.664,683.571 767.224,683.571 767.783,683.571 768.342,683.571 768.901,683.571 769.461,683.571 770.02,683.571 770.579,683.571 771.138,683.571 771.698,683.571 772.257,683.571 772.816,683.571 773.375,683.571 773.935,683.571 774.494,683.571 775.053,683.571 775.612,683.571 776.172,683.571 776.731,683.571 777.29,683.571 777.849,683.571 778.409,683.571 778.968,683.571 779.527,683.571 780.086,683.571 780.646,683.571 781.205,683.571 781.764,683.571 782.323,683.571 782.883,683.571 783.442,683.571 784.001,683.571 784.56,683.571 785.12,683.571 785.679,683.571 786.238,683.571 786.797,683.571 787.357,683.571 787.916,683.571 788.475,683.571 789.034,683.571 789.594,683.571 790.153,683.571 790.712,683.571 791.271,683.571 791.831,683.571 792.39,683.571 792.949,683.571 793.508,683.571 794.068,683.571 794.627,683.571 795.186,683.571 795.745,683.571 796.305,683.571 796.864,683.571 797.423,683.571 797.982,683.571 798.542,683.571 799.101,683.571 799.66,683.571 800.219,683.571 800.779,683.571 801.338,683.571 801.897,683.571 802.456,683.571 803.016,683.571 803.575,683.571 804.134,683.571 804.693,683.571 805.253,683.571 805.812,683.571 806.371,683.571 806.931,683.571 807.49,683.571 808.049,683.571 808.608,683.571 809.168,683.571 809.727,683.571 810.286,683.571 810.845,683.571 811.405,683.571 811.964,683.571 812.523,683.571 813.082,683.571 813.642,683.571 814.201,683.571 814.76,683.571 815.319,683.571 815.879,683.571 816.438,683.571 816.997,683.571 817.556,683.571 818.116,683.571 818.675,683.571 819.234,683.571 819.793,683.571 820.353,683.571 820.912,683.571 821.471,683.571 822.03,683.571 822.59,683.571 823.149,683.571 823.708,683.571 824.267,683.571 824.827,683.571 825.386,683.571 825.945,683.571 826.504,683.571 827.064,683.571 827.623,683.571 828.182,683.571 828.741,683.571 829.301,683.571 829.86,683.571 830.419,683.571 830.978,683.571 831.538,683.571 832.097,683.571 832.656,683.571 833.215,683.571 833.775,683.571 834.334,683.571 834.893,683.571 835.452,683.571 836.012,683.571 836.571,683.571 837.13,683.571 837.689,683.571 838.249,683.571 838.808,683.571 839.367,683.571 839.926,683.571 840.486,683.571 841.045,683.571 841.604,683.571 842.163,683.571 842.723,683.571 843.282,683.571 843.841,683.571 844.4,683.571 844.96,683.571 845.519,683.571 846.078,683.571 846.637,683.571 847.197,683.571 847.756,683.571 848.315,683.571 848.874,683.571 849.434,683.571 849.993,683.571 850.552,683.571 851.111,683.571 851.671,683.571 852.23,683.571 852.789,683.571 853.348,683.571 853.908,683.571 854.467,683.571 855.026,683.571 855.585,683.571 856.145,683.571 856.704,683.571 857.263,683.571 857.822,683.571 858.382,683.571 858.941,683.571 859.5,683.571 860.059,683.571 860.619,683.571 861.178,683.571 861.737,683.571 862.296,683.571 862.856,683.571 863.415,683.571 863.974,683.571 864.533,683.571 865.093,683.571 865.652,683.571 866.211,683.571 866.77,683.571 867.33,683.571 867.889,683.571 868.448,683.571 869.007,683.571 869.567,683.571 870.126,683.571 870.685,683.571 871.244,683.571 871.804,683.571 872.363,683.571 872.922,683.571 873.481,683.571 874.041,683.571 874.6,683.571 875.159,683.571 875.718,683.571 876.278,683.571 876.837,683.571 877.396,683.571 877.955,683.571 878.515,683.571 879.074,683.571 879.633,683.571 880.192,683.571 880.752,683.571 881.311,683.571 881.87,683.571 882.429,683.571 882.989,683.571 883.548,683.571 884.107,683.571 884.666,683.571 885.226,683.571 885.785,683.571 886.344,683.571 886.903,683.571 887.463,683.571 888.022,683.571 888.581,683.571 889.14,683.571 889.7,683.571 890.259,683.571 890.818,683.571 891.377,683.571 891.937,683.571 892.496,683.571 893.055,683.571 893.614,683.571 894.174,683.571 894.733,683.571 895.292,683.571 895.851,683.571 896.411,683.571 896.97,683.571 897.529,683.571 898.088,683.571 898.648,683.571 899.207,683.571 899.766,683.571 900.325,683.571 900.885,683.571 901.444,683.571 902.003,683.571 902.562,683.571 903.122,683.571 903.681,683.571 904.24,683.571 904.799,683.571 905.359,683.571 905.918,683.571 906.477,683.571 907.036,683.571 907.596,683.571 908.155,683.571 908.714,683.571 909.273,683.571 909.833,683.571 910.392,683.571 910.951,683.571 911.51,683.571 912.07,683.571 912.629,683.571 913.188,683.571 913.747,683.571 914.307,683.571 914.866,683.571 915.425,683.571 915.984,683.571 916.544,683.571 917.103,683.571 917.662,683.571 918.221,683.571 918.781,683.571 919.34,683.571 919.899,683.571 920.458,683.571 921.018,683.571 921.577,683.571 922.136,683.571 922.695,683.571 923.255,683.571 923.814,683.571 924.373,683.571 924.932,683.571 925.492,683.571 926.051,683.571 926.61,683.571 927.169,683.571 927.729,683.571 928.288,683.571 928.847,683.571 929.406,683.571 929.966,683.571 930.525,683.571 931.084,683.571 931.644,683.571 932.203,683.571 932.762,683.571 933.321,683.571 933.881,683.571 934.44,683.571 934.999,683.571 935.558,683.571 936.118,683.571 936.677,683.571 937.236,683.571 937.795,683.571 938.355,683.571 938.914,683.571 939.473,683.571 940.032,683.571 940.592,683.571 941.151,683.571 941.71,683.571 942.269,683.571 942.829,683.571 943.388,683.571 943.947,683.571 944.506,683.571 945.066,683.571 945.625,683.571 946.184,683.571 946.743,683.571 947.303,683.571 947.862,683.571 948.421,683.571 948.98,683.571 949.54,683.571 950.099,683.571 950.658,683.571 951.217,683.571 951.777,683.571 952.336,683.571 952.895,683.571 953.454,683.571 954.014,683.571 954.573,683.571 955.132,683.571 955.691,683.571 956.251,683.571 956.81,683.571 957.369,683.571 957.928,683.571 958.488,683.571 959.047,683.571 959.606,683.571 960.165,683.571 960.725,683.571 961.284,683.571 961.843,683.571 962.402,683.571 962.962,683.571 963.521,683.571 964.08,683.571 964.639,683.571 965.199,683.571 965.758,683.571 966.317,683.571 966.876,683.571 967.436,683.571 967.995,683.571 968.554,683.571 969.113,683.571 969.673,683.571 970.232,683.571 970.791,683.571 971.35,683.571 971.91,683.571 972.469,683.571 973.028,683.571 973.587,683.571 974.147,683.571 974.706,683.571 975.265,683.571 975.824,683.571 976.384,683.571 976.943,683.571 977.502,683.571 978.061,683.571 978.621,683.571 979.18,683.571 979.739,683.571 980.298,683.571 980.858,683.571 981.417,683.571 981.976,683.571 982.535,683.571 983.095,683.571 983.654,683.571 984.213,683.571 984.772,683.571 985.332,683.571 985.891,683.571 986.45,683.571 987.009,683.571 987.569,683.571 988.128,683.571 988.687,683.571 989.246,683.571 989.806,683.571 990.365,683.571 990.924,683.571 991.483,683.571 992.043,683.571 992.602,683.571 993.161,683.571 993.72,683.571 994.28,683.571 994.839,683.571 995.398,683.571 995.957,683.571 996.517,683.571 997.076,683.571 997.635,683.571 998.194,683.571 998.754,683.571 999.313,683.571 999.872,683.571 1000.43,683.571 1000.99,683.571 1001.55,683.571 1002.11,683.571 1002.67,683.571 1003.23,683.571 1003.79,683.571 1004.35,683.571 1004.91,683.571 1005.46,683.571 1006.02,683.571 1006.58,683.571 1007.14,683.571 1007.7,683.571 1008.26,683.571 1008.82,683.571 1009.38,683.571 1009.94,683.571 1010.5,683.571 1011.06,683.571 1011.62,683.571 1012.18,683.571 1012.73,683.571 1013.29,683.571 1013.85,683.571 1014.41,683.571 1014.97,683.571 1015.53,683.571 1016.09,683.571 1016.65,683.571 1017.21,683.571 1017.77,683.571 1018.33,683.571 1018.89,683.571 1019.45,683.571 1020.01,683.571 1020.56,683.571 1021.12,683.571 1021.68,683.571 1022.24,683.571 1022.8,683.571 1023.36,683.571 1023.92,683.571 1024.48,683.571 1025.04,683.571 1025.6,683.571 1026.16,683.571 1026.72,683.571 1027.28,683.571 1027.83,683.571 1028.39,683.571 1028.95,683.571 1029.51,683.571 1030.07,683.571 1030.63,683.571 1031.19,683.571 1031.75,683.571 1032.31,683.571 1032.87,683.571 1033.43,683.571 1033.99,683.571 1034.55,683.571 1035.1,683.571 1035.66,683.571 1036.22,683.571 1036.78,683.571 1037.34,683.571 1037.9,683.571 1038.46,683.571 1039.02,683.571 1039.58,683.571 1040.14,683.571 1040.7,683.571 1041.26,683.571 1041.82,683.571 1042.38,683.571 1042.93,683.571 1043.49,683.571 1044.05,683.571 1044.61,683.571 1045.17,683.571 1045.73,683.571 1046.29,683.571 1046.85,683.571 1047.41,683.571 1047.97,683.571 1048.53,683.571 1049.09,683.571 1049.65,683.571 1050.2,683.571 1050.76,683.571 1051.32,683.571 1051.88,683.571 1052.44,683.571 1053,683.571 1053.56,683.571 1054.12,683.571 1054.68,683.571 1055.24,683.571 1055.8,683.571 1056.36,683.571 1056.92,683.571 1057.48,683.571 1058.03,683.571 1058.59,683.571 1059.15,683.571 1059.71,683.571 1060.27,683.571 1060.83,683.571 1061.39,683.571 1061.95,683.571 1062.51,683.571 1063.07,683.571 1063.63,683.571 1064.19,683.571 1064.75,683.571 1065.3,683.571 1065.86,683.571 1066.42,683.571 1066.98,683.571 1067.54,683.571 1068.1,683.571 1068.66,683.571 1069.22,683.571 1069.78,683.571 1070.34,683.571 1070.9,683.571 1071.46,683.571 1072.02,683.571 1072.57,683.571 1073.13,683.571 1073.69,683.571 1074.25,683.571 1074.81,683.571 1075.37,683.571 1075.93,683.571 1076.49,683.571 1077.05,683.571 1077.61,683.571 1078.17,683.571 1078.73,683.571 1079.29,683.571 1079.85,683.571 1080.4,683.571 1080.96,683.571 1081.52,683.571 1082.08,683.571 1082.64,683.571 1083.2,683.571 1083.76,683.571 1084.32,683.571 1084.88,683.571 1085.44,683.571 1086,683.571 1086.56,683.571 1087.12,683.571 1087.67,683.571 1088.23,683.571 1088.79,683.571 1089.35,683.571 1089.91,683.571 1090.47,683.571 1091.03,683.571 1091.59,683.571 1092.15,683.571 1092.71,683.571 1093.27,683.571 1093.83,683.571 1094.39,683.571 1094.94,683.571 1095.5,683.571 1096.06,683.571 1096.62,683.571 1097.18,683.571 1097.74,683.571 1098.3,683.571 1098.86,683.571 1099.42,683.571 1099.98,683.571 1100.54,683.571 1101.1,683.571 1101.66,683.571 1102.22,683.571 1102.77,683.571 1103.33,683.571 1103.89,683.571 1104.45,683.571 1105.01,683.571 1105.57,683.571 1106.13,683.571 1106.69,683.571 1107.25,683.571 1107.81,683.571 1108.37,683.571 1108.93,683.571 1109.49,683.571 1110.04,683.571 1110.6,683.571 1111.16,683.571 1111.72,683.571 1112.28,683.571 1112.84,683.571 1113.4,683.571 1113.96,683.571 1114.52,683.571 1115.08,683.571 1115.64,683.571 1116.2,683.571 1116.76,683.571 1117.31,683.571 1117.87,683.571 1118.43,683.571 1118.99,683.571 1119.55,683.571 1120.11,683.571 1120.67,683.571 1121.23,683.571 1121.79,683.571 1122.35,683.571 1122.91,683.571 1123.47,683.571 1124.03,683.571 1124.59,683.571 1125.14,683.571 1125.7,683.571 1126.26,683.571 1126.82,683.571 1127.38,683.571 1127.94,683.571 1128.5,683.571 1129.06,683.571 1129.62,683.571 1130.18,683.571 1130.74,683.571 1131.3,683.571 1131.86,683.571 1132.41,683.571 1132.97,683.571 1133.53,683.571 1134.09,683.571 1134.65,683.571 1135.21,683.571 1135.77,683.571 1136.33,683.571 1136.89,683.571 1137.45,683.571 1138.01,683.571 1138.57,683.571 1139.13,683.571 1139.68,683.571 1140.24,683.571 1140.8,683.571 1141.36,683.571 1141.92,683.571 1142.48,683.571 1143.04,683.571 1143.6,683.571 1144.16,683.571 1144.72,683.571 1145.28,683.571 1145.84,683.571 1146.4,683.571 1146.96,683.571 1147.51,683.571 1148.07,683.571 1148.63,683.571 1149.19,683.571 1149.75,683.571 1150.31,683.571 1150.87,683.571 1151.43,683.571 1151.99,683.571 1152.55,683.571 1153.11,683.571 1153.67,683.571 1154.23,683.571 1154.78,683.571 1155.34,683.571 1155.9,683.571 1156.46,683.571 1157.02,683.571 1157.58,683.571 1158.14,683.571 1158.7,683.571 1159.26,683.571 1159.82,683.571 1160.38,683.571 1160.94,683.571 1161.5,683.571 1162.05,683.571 1162.61,683.571 1163.17,683.571 1163.73,683.571 1164.29,683.571 1164.85,683.571 1165.41,683.571 1165.97,683.571 1166.53,683.571 1167.09,683.571 1167.65,683.571 1168.21,683.571 1168.77,683.571 1169.33,683.571 1169.88,683.571 1170.44,683.571 1171,683.571 1171.56,683.571 1172.12,683.571 1172.68,683.571 1173.24,683.571 1173.8,683.571 1174.36,683.571 1174.92,683.571 1175.48,683.571 1176.04,683.571 1176.6,683.571 1177.15,683.571 1177.71,683.571 1178.27,683.571 1178.83,683.571 1179.39,683.571 1179.95,683.571 1180.51,683.571 1181.07,683.571 1181.63,683.571 1182.19,683.571 1182.75,683.571 1183.31,683.571 1183.87,683.571 1184.43,683.571 1184.98,683.571 1185.54,683.571 1186.1,683.571 1186.66,683.571 1187.22,683.571 1187.78,683.571 1188.34,683.571 1188.9,683.571 1189.46,683.571 1190.02,683.571 1190.58,683.571 1191.14,683.571 1191.7,683.571 1192.25,683.571 1192.81,683.571 1193.37,683.571 1193.93,683.571 1194.49,683.571 1195.05,683.571 1195.61,683.571 1196.17,683.571 1196.73,683.571 1197.29,683.571 1197.85,683.571 1198.41,683.571 1198.97,683.571 1199.52,683.571 1200.08,683.571 1200.64,683.571 1201.2,683.571 1201.76,683.571 1202.32,683.571 1202.88,683.571 1203.44,683.571 1204,683.571 1204.56,683.571 1205.12,683.571 1205.68,683.571 1206.24,683.571 1206.8,683.571 1207.35,683.571 1207.91,683.571 1208.47,683.571 1209.03,683.571 1209.59,683.571 1210.15,683.571 1210.71,683.571 1211.27,683.571 1211.83,683.571 1212.39,683.571 1212.95,683.571 1213.51,683.571 1214.07,683.571 1214.62,683.571 1215.18,683.571 1215.74,683.571 1216.3,683.571 1216.86,683.571 1217.42,683.571 1217.98,683.571 1218.54,683.571 1219.1,683.571 1219.66,683.571 1220.22,683.571 1220.78,683.571 1221.34,683.571 1221.89,683.571 1222.45,683.571 1223.01,683.571 1223.57,683.571 1224.13,683.571 1224.69,683.571 1225.25,683.571 1225.81,683.571 1226.37,683.571 1226.93,683.571 1227.49,683.571 1228.05,683.571 1228.61,683.571 1229.17,683.571 1229.72,683.571 1230.28,683.571 1230.84,683.571 1231.4,683.571 1231.96,683.571 1232.52,683.571 1233.08,683.571 1233.64,683.571 1234.2,683.571 1234.76,683.571 1235.32,683.571 1235.88,683.571 1236.44,683.571 1236.99,683.571 1237.55,683.571 1238.11,683.571 1238.67,683.571 1239.23,683.571 1239.79,683.571 1240.35,683.571 1240.91,683.571 1241.47,683.571 1242.03,683.571 1242.59,683.571 1243.15,683.571 1243.71,683.571 1244.26,683.571 1244.82,683.571 1245.38,683.571 1245.94,683.571 1246.5,683.571 1247.06,683.571 1247.62,683.571 1248.18,683.571 1248.74,683.571 1249.3,683.571 1249.86,683.571 1250.42,683.571 1250.98,683.571 1251.54,683.571 1252.09,683.571 1252.65,683.571 1253.21,683.571 1253.77,683.571 1254.33,683.571 1254.89,683.571 1255.45,683.571 1256.01,683.571 1256.57,683.571 1257.13,683.571 1257.69,683.571 1258.25,683.571 1258.81,683.571 1259.36,683.571 1259.92,683.571 1260.48,683.571 1261.04,683.571 1261.6,683.571 1262.16,683.571 1262.72,683.571 1263.28,683.571 1263.84,683.571 1264.4,683.571 1264.96,683.571 1265.52,683.571 1266.08,683.571 1266.63,683.571 1267.19,683.571 1267.75,683.571 1268.31,683.571 1268.87,683.571 1269.43,683.571 1269.99,683.571 1270.55,683.571 1271.11,683.571 1271.67,683.571 1272.23,683.571 1272.79,683.571 1273.35,683.571 1273.91,683.571 1274.46,683.571 1275.02,683.571 1275.58,683.571 1276.14,683.571 1276.7,683.571 1277.26,683.571 1277.82,683.571 1278.38,683.571 1278.94,683.571 1279.5,683.571 1280.06,683.571 1280.62,683.571 1281.18,683.571 1281.73,683.571 1282.29,683.571 1282.85,683.571 1283.41,683.571 1283.97,683.571 1284.53,683.571 1285.09,683.571 1285.65,683.571 1286.21,683.571 1286.77,683.571 1287.33,683.571 1287.89,683.571 1288.45,683.571 1289,683.571 1289.56,683.571 1290.12,683.571 1290.68,683.571 1291.24,683.571 1291.8,683.571 1292.36,683.571 1292.92,683.571 1293.48,683.571 1294.04,683.571 1294.6,683.571 1295.16,683.571 1295.72,683.571 1296.28,683.571 1296.83,683.571 1297.39,683.571 1297.95,683.571 1298.51,683.571 1299.07,683.571 1299.63,683.571 1300.19,683.571 1300.75,683.571 1301.31,683.571 1301.87,683.571 1302.43,683.571 1302.99,683.571 1303.55,683.571 1304.1,683.571 1304.66,683.571 1305.22,683.571 1305.78,683.571 1306.34,683.571 1306.9,683.571 1307.46,683.571 1308.02,683.571 1308.58,683.571 1309.14,683.571 1309.7,683.571 1310.26,683.571 1310.82,683.571 1311.38,683.571 1311.93,683.571 1312.49,683.571 1313.05,683.571 1313.61,683.571 1314.17,683.571 1314.73,683.571 1315.29,683.571 1315.85,683.571 1316.41,683.571 1316.97,683.571 1317.53,683.571 1318.09,683.571 1318.65,683.571 1319.2,683.571 1319.76,683.571 1320.32,683.571 1320.88,683.571 1321.44,683.571 1322,683.571 1322.56,683.571 1323.12,683.571 1323.68,683.571 1324.24,683.571 1324.8,683.571 1325.36,683.571 1325.92,683.571 1326.47,683.571 1327.03,683.571 1327.59,683.571 1328.15,683.571 1328.71,683.571 1329.27,683.571 1329.83,683.571 1330.39,683.571 1330.95,683.571 1331.51,683.571 1332.07,683.571 1332.63,683.571 1333.19,683.571 1333.75,683.571 1334.3,683.571 1334.86,683.571 1335.42,683.571 1335.98,683.571 1336.54,683.571 1337.1,683.571 1337.66,683.571 1338.22,683.571 1338.78,683.571 1339.34,683.571 1339.9,683.571 1340.46,683.571 1341.02,683.571 1341.57,683.571 1342.13,683.571 1342.69,683.571 1343.25,683.571 1343.81,683.571 1344.37,683.571 1344.93,683.571 1345.49,683.571 1346.05,683.571 1346.61,683.571 1347.17,683.571 1347.73,683.571 1348.29,683.571 1348.84,683.571 1349.4,683.571 1349.96,683.571 1350.52,683.571 1351.08,683.571 1351.64,683.571 1352.2,683.571 1352.76,683.571 1353.32,683.571 1353.88,683.571 1354.44,683.571 1355,683.571 1355.56,683.571 1356.12,683.571 1356.67,683.571 1357.23,683.571 1357.79,683.571 1358.35,683.571 1358.91,683.571 1359.47,683.571 1360.03,683.571 1360.59,683.571 1361.15,683.571 1361.71,683.571 1362.27,683.571 1362.83,683.571 1363.39,683.571 1363.94,683.571 1364.5,683.571 1365.06,683.571 1365.62,683.571 1366.18,683.571 1366.74,683.571 1367.3,683.571 1367.86,683.571 1368.42,683.571 1368.98,683.571 1369.54,683.571 1370.1,683.571 1370.66,683.571 1371.21,683.571 1371.77,683.571 1372.33,683.571 1372.89,683.571 1373.45,683.571 1374.01,683.571 1374.57,683.571 1375.13,683.571 1375.69,683.571 1376.25,683.571 1376.81,683.571 1377.37,683.571 1377.93,683.571 1378.49,683.571 1379.04,683.571 1379.6,683.571 1380.16,683.571 1380.72,683.571 1381.28,683.571 1381.84,683.571 1382.4,683.571 1382.96,683.571 1383.52,683.571 1384.08,683.571 1384.64,683.571 1385.2,683.571 1385.76,683.571 1386.31,683.571 1386.87,683.571 1387.43,683.571 1387.99,683.571 1388.55,683.571 1389.11,683.571 1389.67,683.571 1390.23,683.571 1390.79,683.571 1391.35,683.571 1391.91,683.571 1392.47,683.571 1393.03,683.571 1393.58,683.571 1394.14,683.571 1394.7,683.571 1395.26,683.571 1395.82,683.571 1396.38,683.571 1396.94,683.571 1397.5,683.571 1398.06,683.571 1398.62,683.571 1399.18,683.571 1399.74,683.571 1400.3,683.571 1400.86,683.571 1401.41,683.571 1401.97,683.571 1402.53,683.571 1403.09,683.571 1403.65,683.571 1404.21,683.571 1404.77,683.571 1405.33,683.571 1405.89,683.571 1406.45,683.571 1407.01,683.571 1407.57,683.571 1408.13,683.571 1408.68,683.571 1409.24,683.571 1409.8,683.571 1410.36,683.571 1410.92,683.571 1411.48,683.571 1412.04,683.571 1412.6,683.571 1413.16,683.571 1413.72,683.571 1414.28,683.571 1414.84,683.571 1415.4,683.571 1415.95,683.571 1416.51,683.571 1417.07,683.571 1417.63,683.571 1418.19,683.571 1418.75,683.571 1419.31,683.571 1419.87,683.571 1420.43,683.571 1420.99,683.571 1421.55,683.571 1422.11,683.571 1422.67,683.571 1423.23,683.571 1423.78,683.571 1424.34,683.571 1424.9,683.571 1425.46,683.571 1426.02,683.571 1426.58,683.571 1427.14,683.571 1427.7,683.571 1428.26,683.571 1428.82,683.571 1429.38,683.571 1429.94,683.571 1430.5,683.571 1431.05,683.571 1431.61,683.571 1432.17,683.571 1432.73,683.571 1433.29,683.571 1433.85,683.571 1434.41,683.571 1434.97,683.571 1435.53,683.571 1436.09,683.571 1436.65,683.571 1437.21,683.571 1437.77,683.571 1438.33,683.571 1438.88,683.571 1439.44,683.571 1440,683.571 1440.56,683.571 1441.12,683.571 1441.68,683.571 1442.24,683.571 1442.8,683.571 1443.36,683.571 1443.92,683.571 1444.48,683.571 1445.04,683.571 1445.6,683.571 1446.15,683.571 1446.71,683.571 1447.27,683.571 1447.83,683.571 1448.39,683.571 1448.95,683.571 1449.51,683.571 1450.07,683.571 1450.63,683.571 1451.19,683.571 1451.75,683.571 1452.31,683.571 1452.87,683.571 1453.42,683.571 1453.98,683.571 1454.54,683.571 1455.1,683.571 1455.66,683.571 1456.22,683.571 1456.78,683.571 1457.34,683.571 1457.9,683.571 1458.46,683.571 1459.02,683.571 1459.58,683.571 1460.14,683.571 1460.7,683.571 1461.25,683.571 1461.81,683.571 1462.37,683.571 1462.93,683.571 1463.49,683.571 1464.05,683.571 1464.61,683.571 1465.17,683.571 1465.73,683.571 1466.29,683.571 1466.85,683.571 1467.41,683.571 1467.97,683.571 1468.52,683.571 1469.08,683.571 1469.64,683.571 1470.2,683.571 1470.76,683.571 1471.32,683.571 1471.88,683.571 1472.44,683.571 1473,683.571 1473.56,683.571 1474.12,683.571 1474.68,683.571 1475.24,683.571 1475.79,683.571 1476.35,683.571 1476.91,683.571 1477.47,683.571 1478.03,683.571 1478.59,683.571 1479.15,683.571 1479.71,683.571 1480.27,683.571 1480.83,683.571 1481.39,683.571 1481.95,683.571 1482.51,683.571 1483.07,683.571 1483.62,683.571 1484.18,683.571 1484.74,683.571 1485.3,683.571 1485.86,683.571 1486.42,683.571 1486.98,683.571 1487.54,683.571 1488.1,683.571 1488.66,683.571 1489.22,683.571 1489.78,683.571 1490.34,683.571 1490.89,683.571 1491.45,683.571 1492.01,683.571 1492.57,683.571 1493.13,683.571 1493.69,683.571 1494.25,683.571 1494.81,683.571 1495.37,683.571 1495.93,683.571 1496.49,683.571 1497.05,683.571 1497.61,683.571 1498.16,683.571 1498.72,683.571 1499.28,683.571 1499.84,683.571 1500.4,683.571 1500.96,683.571 1501.52,683.571 1502.08,683.571 1502.64,683.571 1503.2,683.571 1503.76,683.571 1504.32,683.571 1504.88,683.571 1505.44,683.571 1505.99,683.571 1506.55,683.571 1507.11,683.571 1507.67,683.571 1508.23,683.571 1508.79,683.571 1509.35,683.571 1509.91,683.571 1510.47,683.571 1511.03,683.571 1511.59,683.571 1512.15,683.571 1512.71,683.571 1513.26,683.571 1513.82,683.571 1514.38,683.571 1514.94,683.571 1515.5,683.571 1516.06,683.571 1516.62,683.571 1517.18,683.571 1517.74,683.571 1518.3,683.571 1518.86,683.571 1519.42,683.571 1519.98,683.571 1520.53,683.571 1521.09,683.571 1521.65,683.571 1522.21,683.571 1522.77,683.571 1523.33,683.571 1523.89,683.571 1524.45,683.571 1525.01,683.571 1525.57,683.571 1526.13,683.571 1526.69,683.571 1527.25,683.571 1527.81,683.571 1528.36,683.571 1528.92,683.571 1529.48,683.571 1530.04,683.571 1530.6,683.571 1531.16,683.571 1531.72,683.571 1532.28,683.571 1532.84,683.571 1533.4,683.571 1533.96,683.571 1534.52,683.571 1535.08,683.571 1535.63,683.571 1536.19,683.571 1536.75,683.571 1537.31,683.571 1537.87,683.571 1538.43,683.571 1538.99,683.571 1539.55,683.571 1540.11,683.571 1540.67,683.571 1541.23,683.571 1541.79,683.571 1542.35,683.571 1542.9,683.571 1543.46,683.571 1544.02,683.571 1544.58,683.571 1545.14,683.571 1545.7,683.571 1546.26,683.571 1546.82,683.571 1547.38,683.571 1547.94,683.571 1548.5,683.571 1549.06,683.571 1549.62,683.571 1550.18,683.571 1550.73,683.571 1551.29,683.571 1551.85,683.571 1552.41,683.571 1552.97,683.571 1553.53,683.571 1554.09,683.571 1554.65,683.571 1555.21,683.571 1555.77,683.571 1556.33,683.571 1556.89,683.571 1557.45,683.571 1558,683.571 1558.56,683.571 1559.12,683.571 1559.68,683.571 1560.24,683.571 1560.8,683.571 1561.36,683.571 1561.92,683.571 1562.48,683.571 1563.04,683.571 1563.6,683.571 1564.16,683.571 1564.72,683.571 1565.28,683.571 1565.83,683.571 1566.39,683.571 1566.95,683.571 1567.51,683.571 1568.07,683.571 1568.63,683.571 1569.19,683.571 1569.75,683.571 1570.31,683.571 1570.87,683.571 1571.43,683.571 1571.99,683.571 1572.55,683.571 1573.1,683.571 1573.66,683.571 1574.22,683.571 1574.78,683.571 1575.34,683.571 1575.9,683.571 1576.46,683.571 1577.02,683.571 1577.58,683.571 1578.14,683.571 1578.7,683.571 1579.26,683.571 1579.82,683.571 1580.37,683.571 1580.93,683.571 1581.49,683.571 1582.05,683.571 1582.61,683.571 1583.17,683.571 1583.73,683.571 1584.29,683.571 1584.85,683.571 1585.41,683.571 1585.97,683.571 1586.53,683.571 1587.09,683.571 1587.65,683.571 1588.2,683.571 1588.76,683.571 1589.32,683.571 1589.88,683.571 1590.44,683.571 1591,683.571 1591.56,683.571 1592.12,683.571 1592.68,683.571 1593.24,683.571 1593.8,683.571 1594.36,683.571 1594.92,683.571 1595.47,683.571 1596.03,683.571 1596.59,683.571 1597.15,683.571 1597.71,683.571 1598.27,683.571 1598.83,683.571 1599.39,683.571 1599.95,683.571 1600.51,683.571 1601.07,683.571 1601.63,683.571 1602.19,683.571 1602.74,683.571 1603.3,683.571 1603.86,683.571 1604.42,683.571 1604.98,683.571 1605.54,683.571 1606.1,683.571 1606.66,683.571 1607.22,683.571 1607.78,683.571 1608.34,683.571 1608.9,683.571 1609.46,683.571 1610.02,683.571 1610.57,683.571 1611.13,683.571 1611.69,683.571 1612.25,683.571 1612.81,683.571 1613.37,683.571 1613.93,683.571 1614.49,683.571 1615.05,683.571 1615.61,683.571 1616.17,683.571 1616.73,683.571 1617.29,683.571 1617.84,683.571 1618.4,683.571 1618.96,683.571 1619.52,683.571 1620.08,683.571 1620.64,683.571 1621.2,683.571 1621.76,683.571 1622.32,683.571 1622.88,683.571 1623.44,683.571 1624,683.571 1624.56,683.571 1625.11,683.571 1625.67,683.571 1626.23,683.571 1626.79,683.571 1627.35,683.571 1627.91,683.571 1628.47,683.571 1629.03,683.571 1629.59,683.571 1630.15,683.571 1630.71,683.571 1631.27,683.571 1631.83,683.571 1632.39,683.571 1632.94,683.571 1633.5,683.571 1634.06,683.571 1634.62,683.571 1635.18,683.571 1635.74,683.571 1636.3,683.571 1636.86,683.571 1637.42,683.571 1637.98,683.571 1638.54,683.571 1639.1,683.571 1639.66,683.571 1640.21,683.571 1640.77,683.571 1641.33,683.571 1641.89,683.571 1642.45,683.571 1643.01,683.571 1643.57,683.571 1644.13,683.571 1644.69,683.571 1645.25,683.571 1645.81,683.571 1646.37,683.571 1646.93,683.571 1647.48,683.571 1648.04,683.571 1648.6,683.571 1649.16,683.571 1649.72,683.571 1650.28,683.571 1650.84,683.571 1651.4,683.571 1651.96,683.571 1652.52,683.571 1653.08,683.571 1653.64,683.571 1654.2,683.571 1654.76,683.571 1655.31,683.571 1655.87,683.571 1656.43,683.571 1656.99,683.571 1657.55,683.571 1658.11,683.571 1658.67,683.571 1659.23,683.571 1659.79,683.571 1660.35,683.571 1660.91,683.571 1661.47,683.571 1662.03,683.571 1662.58,683.571 1663.14,683.571 1663.7,683.571 1664.26,683.571 1664.82,683.571 1665.38,683.571 1665.94,683.571 1666.5,683.571 1667.06,683.571 1667.62,683.571 1668.18,683.571 1668.74,683.571 1669.3,683.571 1669.85,683.571 1670.41,683.571 1670.97,683.571 1671.53,683.571 1672.09,683.571 1672.65,683.571 1673.21,683.571 1673.77,683.571 1674.33,683.571 1674.89,683.571 1675.45,683.571 1676.01,683.571 1676.57,683.571 1677.13,683.571 1677.68,683.571 1678.24,683.571 1678.8,683.571 1679.36,683.571 1679.92,683.571 1680.48,683.571 1681.04,683.571 1681.6,683.571 1682.16,683.571 1682.72,683.571 1683.28,683.571 1683.84,683.571 1684.4,683.571 1684.95,683.571 1685.51,683.571 1686.07,683.571 1686.63,683.571 1687.19,683.571 1687.75,683.571 1688.31,683.571 1688.87,683.571 1689.43,683.571 1689.99,683.571 1690.55,683.571 1691.11,683.571 1691.67,683.571 1692.23,683.571 1692.78,683.571 1693.34,683.571 1693.9,683.571 1694.46,683.571 1695.02,683.571 1695.58,683.571 1696.14,683.571 1696.7,683.571 1697.26,683.571 1697.82,683.571 1698.38,683.571 1698.94,683.571 1699.5,683.571 1700.05,683.571 1700.61,683.571 1701.17,683.571 1701.73,683.571 1702.29,683.571 1702.85,683.571 1703.41,683.571 1703.97,683.571 1704.53,683.571 1705.09,683.571 1705.65,683.571 1706.21,683.571 1706.77,683.571 1707.32,683.571 1707.88,683.571 1708.44,683.571 1709,683.571 1709.56,683.571 1710.12,683.571 1710.68,683.571 1711.24,683.571 1711.8,683.571 1712.36,683.571 1712.92,683.571 1713.48,683.571 1714.04,683.571 1714.6,683.571 1715.15,683.571 1715.71,683.571 1716.27,683.571 1716.83,683.571 1717.39,683.571 1717.95,683.571 1718.51,683.571 1719.07,683.571 1719.63,683.571 1720.19,683.571 1720.75,683.571 1721.31,683.571 1721.87,683.571 1722.42,683.571 1722.98,683.571 1723.54,683.571 1724.1,683.571 1724.66,683.571 1725.22,683.571 1725.78,683.571 1726.34,683.571 1726.9,683.571 1727.46,683.571 1728.02,683.571 1728.58,683.571 1729.14,683.571 1729.69,683.571 1730.25,683.571 1730.81,683.571 1731.37,683.571 1731.93,683.571 1732.49,683.571 1733.05,683.571 1733.61,683.571 1734.17,683.571 1734.73,683.571 1735.29,683.571 1735.85,683.571 1736.41,683.571 1736.97,683.571 1737.52,683.571 1738.08,683.571 1738.64,683.571 1739.2,683.571 1739.76,683.571 1740.32,683.571 1740.88,683.571 1741.44,683.571 1742,683.571 1742.56,683.571 1743.12,683.571 1743.68,683.571 1744.24,683.571 1744.79,683.571 1745.35,683.571 1745.91,683.571 1746.47,683.571 1747.03,683.571 1747.59,683.571 1748.15,683.571 1748.71,683.571 1749.27,683.571 1749.83,683.571 1750.39,683.571 1750.95,683.571 1751.51,683.571 1752.06,683.571 1752.62,683.571 1753.18,683.571 1753.74,683.571 1754.3,683.571 1754.86,683.571 1755.42,683.571 1755.98,683.571 1756.54,683.571 1757.1,683.571 1757.66,683.571 1758.22,683.571 1758.78,683.571 1759.34,683.571 1759.89,683.571 1760.45,683.571 1761.01,683.571 1761.57,683.571 1762.13,683.571 1762.69,683.571 1763.25,683.571 1763.81,683.571 1764.37,683.571 1764.93,683.571 1765.49,683.571 1766.05,683.571 1766.61,683.571 1767.16,683.571 1767.72,683.571 1768.28,683.571 1768.84,683.571 1769.4,683.571 1769.96,683.571 1770.52,683.571 1771.08,683.571 1771.64,683.571 1772.2,683.571 1772.76,683.571 1773.32,683.571 1773.88,683.571 1774.43,683.571 1774.99,683.571 1775.55,683.571 1776.11,683.571 1776.67,683.571 1777.23,683.571 1777.79,683.571 1778.35,683.571 1778.91,683.571 1779.47,683.571 1780.03,683.571 1780.59,683.571 1781.15,683.571 1781.71,683.571 1782.26,683.571 1782.82,683.571 1783.38,683.571 1783.94,683.571 1784.5,683.571 1785.06,683.571 1785.62,683.571 1786.18,683.571 1786.74,683.571 1787.3,683.571 1787.86,683.571 1788.42,683.571 1788.98,683.571 1789.53,683.571 1790.09,683.571 1790.65,683.571 1791.21,683.571 1791.77,683.571 1792.33,683.571 1792.89,683.571 1793.45,683.571 1794.01,683.571 1794.57,683.571 1795.13,683.571 1795.69,683.571 1796.25,683.571 1796.8,683.571 1797.36,683.571 1797.92,683.571 1798.48,683.571 1799.04,683.571 1799.6,683.571 1800.16,683.571 1800.72,683.571 1801.28,683.571 1801.84,683.571 1802.4,683.571 1802.96,683.571 1803.52,683.571 1804.08,683.571 1804.63,683.571 1805.19,683.571 1805.75,683.571 1806.31,683.571 1806.87,683.571 1807.43,683.571 1807.99,683.571 1808.55,683.571 1809.11,683.571 1809.67,683.571 1810.23,683.571 1810.79,683.571 1811.35,683.571 1811.9,683.571 1812.46,683.571 1813.02,683.571 1813.58,683.571 1814.14,683.571 1814.7,683.571 1815.26,683.571 1815.82,683.571 1816.38,683.571 1816.94,683.571 1817.5,683.571 1818.06,683.571 1818.62,683.571 1819.18,683.571 1819.73,683.571 1820.29,683.571 1820.85,683.571 1821.41,683.571 1821.97,683.571 1822.53,683.571 1823.09,683.571 1823.65,683.571 1824.21,683.571 1824.77,683.571 1825.33,683.571 1825.89,683.571 1826.45,683.571 1827,683.571 1827.56,683.571 1828.12,683.571 1828.68,683.571 1829.24,683.571 1829.8,683.571 1830.36,683.571 1830.92,683.571 1831.48,683.571 1832.04,683.571 1832.6,683.571 1833.16,683.571 1833.72,683.571 1834.27,683.571 1834.83,683.571 1835.39,683.571 1835.95,683.571 1836.51,683.571 1837.07,683.571 1837.63,683.571 1838.19,683.571 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037632557815657 ± 0.023688317074662096\nProjected Energy: -4.015017004162724 ± (0.003739368427607026, 0.0038812822080478426)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.512957</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5088e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3406e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0299e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.302e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.795e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.518e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613378\n -0.7590191922770835\n  0.13584182219621432\n  0.1578999869460862\n  0.8767114411781378\n  1.5305929970973375\n  1.5835732611867348\n  3.0728703303258698\n  3.1256726539518427\n  4.862107221562166\n  6.260694850380595\n  6.402671211183109\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(addr::SingleComponentFockAddress; n = 1) <: AbstractOperator\n\nRepresent the n-particle reduced density matrix:\n\nρ^(n)_j_1j_1k_1k_n =  prod_i^n a^_j_i prod_l^n a_k_n+1-l\n\nWhere j_i and k_i (all <: Int) specify the single particle sites on a lattice. Additionally, the indices run in the following manners:\n\nj_n   j_i+1  j_i    j_1 and k_n   k_i+1  k_i    k_1\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
