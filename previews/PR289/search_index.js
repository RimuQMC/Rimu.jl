var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20846324856006798 ± 0.0013180604262479018\n   G2(1) = 0.9178887650686235 ± 0.0005731915709416816\n   G2(2) = 0.982760782625554 ± 0.0005241068758266669\n   G2(3) = 0.990237656051578 ± 0.0007770375090427367\n   G2(4) = 0.982760782625554 ± 0.0005241068758266669\n   G2(5) = 0.9178887650686235 ± 0.0005731915709416816\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9795303285340284 ± 0.13848207957660474\n   Replica 2: -4.021213345014148 ± 0.12056511620285307\n   Replica 3: -4.020140961140368 ± 0.1625470955937841\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip900\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip901\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip902\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.98 2211.02,1003.98 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.079 2211.02,746.079 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.183 2211.02,488.183 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.287 2211.02,230.287 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.98 423.181,1003.98 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.079 423.181,746.079 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.183 423.181,488.183 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.287 423.181,230.287 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M290.043 1017.32 L306.363 1017.32 L306.363 1021.26 L284.418 1021.26 L284.418 1017.32 Q287.08 1014.57 291.664 1009.94 Q296.27 1005.28 297.451 1003.94 Q299.696 1001.42 300.576 999.682 Q301.478 997.922 301.478 996.233 Q301.478 993.478 299.534 991.742 Q297.613 990.006 294.511 990.006 Q292.312 990.006 289.858 990.77 Q287.427 991.534 284.65 993.084 L284.65 988.362 Q287.474 987.228 289.927 986.649 Q292.381 986.071 294.418 986.071 Q299.789 986.071 302.983 988.756 Q306.177 991.441 306.177 995.932 Q306.177 998.061 305.367 999.983 Q304.58 1001.88 302.474 1004.47 Q301.895 1005.14 298.793 1008.36 Q295.691 1011.56 290.043 1017.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M316.224 986.696 L334.58 986.696 L334.58 990.631 L320.506 990.631 L320.506 999.103 Q321.524 998.756 322.543 998.594 Q323.562 998.408 324.58 998.408 Q330.367 998.408 333.747 1001.58 Q337.126 1004.75 337.126 1010.17 Q337.126 1015.75 333.654 1018.85 Q330.182 1021.93 323.862 1021.93 Q321.687 1021.93 319.418 1021.56 Q317.173 1021.19 314.765 1020.45 L314.765 1015.75 Q316.849 1016.88 319.071 1017.44 Q321.293 1017.99 323.77 1017.99 Q327.774 1017.99 330.112 1015.89 Q332.45 1013.78 332.45 1010.17 Q332.45 1006.56 330.112 1004.45 Q327.774 1002.34 323.77 1002.34 Q321.895 1002.34 320.02 1002.76 Q318.168 1003.18 316.224 1004.06 L316.224 986.696 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 989.774 Q352.728 989.774 350.899 993.339 Q349.094 996.881 349.094 1004.01 Q349.094 1011.12 350.899 1014.68 Q352.728 1018.22 356.339 1018.22 Q359.973 1018.22 361.779 1014.68 Q363.608 1011.12 363.608 1004.01 Q363.608 996.881 361.779 993.339 Q359.973 989.774 356.339 989.774 M356.339 986.071 Q362.149 986.071 365.205 990.677 Q368.284 995.26 368.284 1004.01 Q368.284 1012.74 365.205 1017.34 Q362.149 1021.93 356.339 1021.93 Q350.529 1021.93 347.45 1017.34 Q344.395 1012.74 344.395 1004.01 Q344.395 995.26 347.45 990.677 Q350.529 986.071 356.339 986.071 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M286.062 728.799 L304.418 728.799 L304.418 732.735 L290.344 732.735 L290.344 741.207 Q291.363 740.86 292.381 740.697 Q293.4 740.512 294.418 740.512 Q300.205 740.512 303.585 743.684 Q306.964 746.855 306.964 752.271 Q306.964 757.85 303.492 760.952 Q300.02 764.031 293.701 764.031 Q291.525 764.031 289.256 763.66 Q287.011 763.29 284.603 762.549 L284.603 757.85 Q286.687 758.984 288.909 759.54 Q291.131 760.096 293.608 760.096 Q297.613 760.096 299.951 757.989 Q302.288 755.883 302.288 752.271 Q302.288 748.66 299.951 746.554 Q297.613 744.447 293.608 744.447 Q291.733 744.447 289.858 744.864 Q288.006 745.281 286.062 746.16 L286.062 728.799 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M326.177 731.878 Q322.566 731.878 320.737 735.443 Q318.932 738.985 318.932 746.114 Q318.932 753.221 320.737 756.785 Q322.566 760.327 326.177 760.327 Q329.811 760.327 331.617 756.785 Q333.446 753.221 333.446 746.114 Q333.446 738.985 331.617 735.443 Q329.811 731.878 326.177 731.878 M326.177 728.174 Q331.987 728.174 335.043 732.781 Q338.122 737.364 338.122 746.114 Q338.122 754.841 335.043 759.447 Q331.987 764.031 326.177 764.031 Q320.367 764.031 317.288 759.447 Q314.233 754.841 314.233 746.114 Q314.233 737.364 317.288 732.781 Q320.367 728.174 326.177 728.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 731.878 Q352.728 731.878 350.899 735.443 Q349.094 738.985 349.094 746.114 Q349.094 753.221 350.899 756.785 Q352.728 760.327 356.339 760.327 Q359.973 760.327 361.779 756.785 Q363.608 753.221 363.608 746.114 Q363.608 738.985 361.779 735.443 Q359.973 731.878 356.339 731.878 M356.339 728.174 Q362.149 728.174 365.205 732.781 Q368.284 737.364 368.284 746.114 Q368.284 754.841 365.205 759.447 Q362.149 764.031 356.339 764.031 Q350.529 764.031 347.45 759.447 Q344.395 754.841 344.395 746.114 Q344.395 737.364 347.45 732.781 Q350.529 728.174 356.339 728.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M284.835 470.903 L307.057 470.903 L307.057 472.894 L294.511 505.463 L289.627 505.463 L301.432 474.838 L284.835 474.838 L284.835 470.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M316.224 470.903 L334.58 470.903 L334.58 474.838 L320.506 474.838 L320.506 483.311 Q321.524 482.963 322.543 482.801 Q323.562 482.616 324.58 482.616 Q330.367 482.616 333.747 485.787 Q337.126 488.959 337.126 494.375 Q337.126 499.954 333.654 503.056 Q330.182 506.134 323.862 506.134 Q321.687 506.134 319.418 505.764 Q317.173 505.394 314.765 504.653 L314.765 499.954 Q316.849 501.088 319.071 501.644 Q321.293 502.199 323.77 502.199 Q327.774 502.199 330.112 500.093 Q332.45 497.986 332.45 494.375 Q332.45 490.764 330.112 488.658 Q327.774 486.551 323.77 486.551 Q321.895 486.551 320.02 486.968 Q318.168 487.385 316.224 488.264 L316.224 470.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 473.982 Q352.728 473.982 350.899 477.547 Q349.094 481.088 349.094 488.218 Q349.094 495.324 350.899 498.889 Q352.728 502.431 356.339 502.431 Q359.973 502.431 361.779 498.889 Q363.608 495.324 363.608 488.218 Q363.608 481.088 361.779 477.547 Q359.973 473.982 356.339 473.982 M356.339 470.278 Q362.149 470.278 365.205 474.885 Q368.284 479.468 368.284 488.218 Q368.284 496.945 365.205 501.551 Q362.149 506.134 356.339 506.134 Q350.529 506.134 347.45 501.551 Q344.395 496.945 344.395 488.218 Q344.395 479.468 347.45 474.885 Q350.529 470.278 356.339 470.278 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M256.664 243.632 L264.303 243.632 L264.303 217.266 L255.992 218.933 L255.992 214.674 L264.256 213.007 L268.932 213.007 L268.932 243.632 L276.571 243.632 L276.571 247.567 L256.664 247.567 L256.664 243.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M296.015 216.086 Q292.404 216.086 290.576 219.65 Q288.77 223.192 288.77 230.322 Q288.77 237.428 290.576 240.993 Q292.404 244.535 296.015 244.535 Q299.65 244.535 301.455 240.993 Q303.284 237.428 303.284 230.322 Q303.284 223.192 301.455 219.65 Q299.65 216.086 296.015 216.086 M296.015 212.382 Q301.826 212.382 304.881 216.988 Q307.96 221.572 307.96 230.322 Q307.96 239.049 304.881 243.655 Q301.826 248.238 296.015 248.238 Q290.205 248.238 287.127 243.655 Q284.071 239.049 284.071 230.322 Q284.071 221.572 287.127 216.988 Q290.205 212.382 296.015 212.382 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M326.177 216.086 Q322.566 216.086 320.737 219.65 Q318.932 223.192 318.932 230.322 Q318.932 237.428 320.737 240.993 Q322.566 244.535 326.177 244.535 Q329.811 244.535 331.617 240.993 Q333.446 237.428 333.446 230.322 Q333.446 223.192 331.617 219.65 Q329.811 216.086 326.177 216.086 M326.177 212.382 Q331.987 212.382 335.043 216.988 Q338.122 221.572 338.122 230.322 Q338.122 239.049 335.043 243.655 Q331.987 248.238 326.177 248.238 Q320.367 248.238 317.288 243.655 Q314.233 239.049 314.233 230.322 Q314.233 221.572 317.288 216.988 Q320.367 212.382 326.177 212.382 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 216.086 Q352.728 216.086 350.899 219.65 Q349.094 223.192 349.094 230.322 Q349.094 237.428 350.899 240.993 Q352.728 244.535 356.339 244.535 Q359.973 244.535 361.779 240.993 Q363.608 237.428 363.608 230.322 Q363.608 223.192 361.779 219.65 Q359.973 216.086 356.339 216.086 M356.339 212.382 Q362.149 212.382 365.205 216.988 Q368.284 221.572 368.284 230.322 Q368.284 239.049 365.205 243.655 Q362.149 248.238 356.339 248.238 Q350.529 248.238 347.45 243.655 Q344.395 239.049 344.395 230.322 Q344.395 221.572 347.45 216.988 Q350.529 212.382 356.339 212.382 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.287 4017.76,230.287 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1248.36 457.123,1247.32 457.691,1246.22 458.259,1246.14 458.828,1245.98 459.396,1245.71 459.964,1245.4 460.533,1245 461.101,1244.49 461.669,1243.92 462.238,1243.21 462.806,1242.44 463.375,1241.55 463.943,1240.56 464.511,1239.46 465.08,1238.27 465.648,1235.94 466.216,1234.55 466.785,1233.04 467.353,1231.4 467.921,1229.64 468.49,1227.72 469.058,1225.66 469.626,1223.48 470.195,1221.1 470.763,1216.54 471.331,1213.87 471.9,1211.01 472.468,1207.92 473.036,1204.73 473.605,1200.3 474.173,1194.61 474.741,1190.73 475.31,1185.67 475.878,1180.33 476.446,1174.77 477.015,1169.06 477.583,1164.17 478.152,1158.02 478.72,1152.77 479.288,1146.26 479.857,1139.56 480.425,1132.63 480.993,1125.56 481.562,1117.37 482.13,1109.96 482.698,1103.34 483.267,1095.46 483.835,1088.5 484.403,1077.09 484.972,1069.08 485.54,1061.71 486.108,1054.13 486.677,1044.3 487.245,1035.38 487.813,1027.27 488.382,1018.01 488.95,1008.55 489.518,999.121 490.087,988.528 490.655,977.731 491.224,967.935 491.792,958.948 492.36,945.797 492.929,934.7 493.497,925.757 494.065,915.541 494.634,906.379 495.202,893.036 495.77,880.854 496.339,870.629 496.907,859.502 497.475,849.236 498.044,837.056 498.612,826.901 499.18,817.862 499.749,807.587 500.317,796.482 500.885,785.333 501.454,773.256 502.022,760.233 502.59,750.623 503.159,740.921 503.727,729.326 504.295,720.942 504.864,711.658 505.432,703.506 506.001,694.204 506.569,684.957 507.137,673.748 507.706,665.864 508.274,657.936 508.842,648.847 509.411,637.911 509.979,629.263 510.547,620.789 511.116,613.444 511.684,604.876 512.252,596.573 512.821,587.278 513.389,580.211 513.957,569.273 514.526,559.801 515.094,551.31 515.662,542.055 516.231,536.256 516.799,530.494 517.367,521.589 517.936,516.052 518.504,509.496 519.072,502.989 519.641,496.456 520.209,491.203 520.778,486.109 521.346,478.193 521.914,474.441 522.483,469.585 523.051,464.757 523.619,461.108 524.188,454.28 524.756,448.489 525.324,441.655 525.893,436.262 526.461,432.155 527.029,426.848 527.598,419.613 528.166,413.977 528.734,408.225 529.303,404.786 529.871,400.321 530.439,396.954 531.008,393.695 531.576,388.535 532.144,385.355 532.713,380.239 533.281,378.163 533.85,374.135 534.418,367.226 534.986,362.788 535.555,359.445 536.123,356.117 536.691,353.859 537.26,352.557 537.828,349.333 538.396,343.027 538.965,337.046 539.533,335.475 540.101,334.916 540.67,333.123 541.238,329.288 541.806,326.593 542.375,324.987 542.943,321.607 543.511,318.244 544.08,318.142 544.648,316.716 545.216,313.287 545.785,312.297 546.353,308.876 546.921,306.806 547.49,305.633 548.058,304.552 548.627,303.471 549.195,300.418 549.763,301.557 550.332,301.48 550.9,298.382 551.468,296.316 552.037,292.32 552.605,291.55 553.173,289.689 553.742,288.018 554.31,286.427 554.878,284.75 555.447,284.139 556.015,283.583 556.583,280.955 557.152,278.559 557.72,277.19 558.288,276.01 558.857,274.597 559.425,275.253 559.993,274.893 560.562,275.82 561.13,275.36 561.698,273.927 562.267,274.386 562.835,276.01 563.404,277.527 563.972,276.568 564.54,274.488 565.109,272.674 565.677,268.959 566.245,268.41 566.814,268.859 567.382,269.628 567.95,266.098 568.519,267.725 569.087,267.094 569.655,264.51 570.224,261.998 570.792,262.725 571.36,264.656 571.929,263.156 572.497,261.614 573.065,261.053 573.634,258.582 574.202,262.331 574.77,262.657 575.339,258.911 575.907,258.728 576.476,258.263 577.044,256.527 577.612,256.139 578.181,252.627 578.749,252.467 579.317,250.319 579.886,250.089 580.454,249.051 581.022,249.996 581.591,249.851 582.159,247.457 582.727,247.604 583.296,246.662 583.864,244.523 584.432,245.686 585.001,245.868 585.569,246.001 586.137,248.216 586.706,248.167 587.274,245.951 587.842,243.728 588.411,243.97 588.979,242.943 589.547,243.022 590.116,244.138 590.684,244.135 591.253,243.362 591.821,242.755 592.389,239.929 592.958,241.219 593.526,240.725 594.094,240.841 594.663,241.046 595.231,242.274 595.799,241.342 596.368,241.507 596.936,241.901 597.504,243.051 598.073,243.232 598.641,245.585 599.209,247.629 599.778,246.3 600.346,246.933 600.914,244.701 601.483,242.536 602.051,241.644 602.619,240.787 603.188,242.126 603.756,240.012 604.325,243.25 604.893,243.219 605.461,240.08 606.03,240.127 606.598,240.435 607.166,239.494 607.735,238.594 608.303,239.961 608.871,237.109 609.44,234.367 610.008,236.752 610.576,236.964 611.145,236.077 611.713,238.427 612.281,237.678 612.85,235.946 613.418,236.028 613.986,238.632 614.555,238.696 615.123,239.972 615.691,239.182 616.26,242.399 616.828,242.425 617.396,241.346 617.965,240.248 618.533,238.215 619.102,237.321 619.67,236.619 620.238,238.061 620.807,236.374 621.375,236.652 621.943,235.835 622.512,236.968 623.08,236.114 623.648,235.276 624.217,234.588 624.785,233.81 625.353,232.234 625.922,232.826 626.49,232.387 627.058,234.959 627.627,234.201 628.195,235.664 628.763,238.165 629.332,237.254 629.9,239.297 630.468,239.435 631.037,237.352 631.605,237.491 632.173,239.834 632.742,240.006 633.31,239.014 633.879,236.737 634.447,234.974 635.015,235.38 635.584,233.777 636.152,234.055 636.72,234.503 637.289,232.883 637.857,234.421 638.425,234.802 638.994,235.109 639.562,236.376 640.13,236.56 640.699,236.729 641.267,233.576 641.835,234.996 642.404,236.401 642.972,235.506 643.54,236.769 644.109,238.003 644.677,237.124 645.245,235.271 645.814,235.536 646.382,234.791 646.951,233.08 647.519,232.337 648.087,231.861 648.656,230.225 649.224,230.866 649.792,231.541 650.361,230.875 650.929,230.372 651.497,228.892 652.066,229.538 652.634,230.326 653.202,228.793 653.771,230.436 654.339,230.042 654.907,230.622 655.476,231.248 656.044,231.732 656.612,234.363 657.181,234.715 657.749,236.864 658.317,235.674 658.886,235.749 659.454,235.914 660.022,235.205 660.591,235.513 661.159,237.743 661.728,238.868 662.296,239.029 662.864,236.865 663.433,235.939 664.001,234.166 664.569,233.573 665.138,233.959 665.706,234.349 666.274,231.407 666.843,232.883 667.411,231.159 667.979,231.539 668.548,231.863 669.116,232.319 669.684,231.843 670.253,231.511 670.821,232.691 671.389,234.365 671.958,233.488 672.526,233.674 673.094,230.689 673.663,231.083 674.231,234.562 674.799,236.746 675.368,236.92 675.936,238.186 676.505,239.264 677.073,240.069 677.641,238.657 678.21,238.696 678.778,239.886 679.346,239.642 679.915,238.507 680.483,238.252 681.051,240.069 681.62,236.428 682.188,237.576 682.756,239.736 683.325,239.56 683.893,238.406 684.461,240.168 685.03,240.835 685.598,241.473 686.166,240.142 686.735,239.817 687.303,239.529 687.871,242.316 688.44,240.678 689.008,240.334 689.577,239.812 690.145,237.249 690.713,235.873 691.282,236.791 691.85,236.592 692.418,235.5 692.987,236.382 693.555,239.376 694.123,238.047 694.692,237.814 695.26,236.427 695.828,237.091 696.397,236.975 696.965,235.703 697.533,235.567 698.102,235.383 698.67,236.238 699.238,236.997 699.807,237.659 700.375,234.249 700.943,236.346 701.512,236.968 702.08,236.472 702.648,237.419 703.217,234.849 703.785,234.707 704.354,234.799 704.922,236.504 705.49,235.163 706.059,232.928 706.627,232.976 707.195,232.761 707.764,231.591 708.332,230.441 708.9,232.703 709.469,231.778 710.037,231.799 710.605,231.866 711.174,229.72 711.742,230.054 712.31,230.349 712.879,230.367 713.447,228.579 714.015,230.824 714.584,232.176 715.152,232.227 715.72,232.276 716.289,233.145 716.857,233.094 717.425,233.872 717.994,232.689 718.562,233.606 719.131,233.476 719.699,233.402 720.267,233.423 720.836,233.198 721.404,233.96 721.972,232.846 722.541,233.901 723.109,236.738 723.677,236.375 724.246,235.875 724.814,233.684 725.382,232.503 725.951,234.156 726.519,235.057 727.087,235.972 727.656,236.787 728.224,235.249 728.792,234.802 729.361,233.425 729.929,233.07 730.497,233.23 731.066,232.872 731.634,232.56 732.203,231.312 732.771,231.253 733.339,231.371 733.908,229.048 734.476,231.216 735.044,229.318 735.613,228.548 736.181,228.617 736.749,229.889 737.318,227.974 737.886,230.152 738.454,228.033 739.023,229.536 739.591,229.681 740.159,229.779 740.728,228.981 741.296,229.33 741.864,227.301 742.433,228.64 743.001,226.735 743.569,228.002 744.138,228.363 744.706,227.263 745.274,227.563 745.843,225.752 746.411,225.06 746.98,223.374 747.548,224.651 748.116,227.269 748.685,228.674 749.253,231.089 749.821,232.116 750.39,233.137 750.958,231.001 751.526,229.952 752.095,230.103 752.663,230.443 753.231,230.623 753.8,229.704 754.368,225.902 754.936,228.707 755.505,229.984 756.073,228.919 756.641,229.396 757.21,228.561 757.778,230.798 758.346,234.983 758.915,232.7 759.483,231.567 760.052,228.644 760.62,230.006 761.188,231.353 761.757,229.319 762.325,232.78 762.893,232.864 763.462,234.985 764.03,236.931 764.598,235.515 765.167,235.335 765.735,236.165 766.303,234.734 766.872,233.619 767.44,235.674 768.008,235.317 768.577,233.02 769.145,231.959 769.713,229.821 770.282,231.164 770.85,229.082 771.418,230.378 771.987,230.519 772.555,230.747 773.123,229.762 773.692,226.991 774.26,226.331 774.829,225.803 775.397,226.339 775.965,227.787 776.534,228.979 777.102,230.349 777.67,231.512 778.239,231.329 778.807,230.463 779.375,230.772 779.944,229.755 780.512,226.897 781.08,228.16 781.649,230.571 782.217,230.776 782.785,231.919 783.354,234.033 783.922,234.771 784.49,235.614 785.059,235.124 785.627,235.946 786.195,235.825 786.764,234.474 787.332,234.526 787.9,233.314 788.469,233.323 789.037,233.209 789.606,234.107 790.174,234.048 790.742,235.243 791.311,233.218 791.879,235.255 792.447,234.877 793.016,235.467 793.584,235.16 794.152,235.025 794.721,234.728 795.289,236.567 795.857,235.276 796.426,232.861 796.994,231.58 797.562,230.316 798.131,229.432 798.699,228.615 799.267,228.743 799.836,228.967 800.404,230.116 800.972,231.396 801.541,234.588 802.109,234.377 802.678,234.052 803.246,234.01 803.814,234.931 804.383,233.488 804.951,232.968 805.519,231.872 806.088,230.821 806.656,229.857 807.224,229.85 807.793,229.734 808.361,231.052 808.929,231.963 809.498,231.633 810.066,231.694 810.634,230.734 811.203,231.841 811.771,230.649 812.339,230.592 812.908,230.608 813.476,231.633 814.044,232.521 814.613,231.488 815.181,229.448 815.749,231.772 816.318,231.975 816.886,230.775 817.455,229.829 818.023,230.063 818.591,232.343 819.16,230.445 819.728,230.439 820.296,231.501 820.865,232.752 821.433,232.694 822.001,230.588 822.57,230.624 823.138,227.47 823.706,224.745 824.275,225.437 824.843,225.998 825.411,227.524 825.98,228.806 826.548,228.887 827.116,230.059 827.685,230.001 828.253,228.003 828.821,227.448 829.39,228.962 829.958,228.198 830.526,226.566 831.095,226.906 831.663,227.002 832.232,226.49 832.8,226.808 833.368,227.062 833.937,230.482 834.505,230.575 835.073,231.994 835.642,232.038 836.21,229.108 836.778,228.388 837.347,229.734 837.915,231.185 838.483,231.271 839.052,233.475 839.62,231.935 840.188,232.077 840.757,234.176 841.325,235.284 841.893,237.01 842.462,236.89 843.03,235.589 843.598,233.083 844.167,232.698 844.735,231.685 845.304,232.739 845.872,232.466 846.44,231.457 847.009,232.374 847.577,232.492 848.145,230.32 848.714,229.595 849.282,229.554 849.85,231.806 850.419,231.804 850.987,231.756 851.555,230.774 852.124,231.948 852.692,233.108 853.26,232.801 853.829,234.7 854.397,234.357 854.965,235.19 855.534,236.004 856.102,233.488 856.67,233.223 857.239,232.055 857.807,231.141 858.375,228.117 858.944,225.363 859.512,227.807 860.081,229.155 860.649,229.456 861.217,229.715 861.786,229.856 862.354,227.708 862.922,226.874 863.491,228.207 864.059,228.395 864.627,227.562 865.196,226.814 865.764,223.939 866.332,223.565 866.901,223.093 867.469,226.067 868.037,225.476 868.606,228.034 869.174,228.267 869.742,228.485 870.311,229.906 870.879,229.31 871.447,229.53 872.016,226.619 872.584,227.067 873.152,229.616 873.721,230.904 874.289,233.043 874.858,235.232 875.426,235.901 875.994,234.579 876.563,236.455 877.131,238.114 877.699,239.801 878.268,239.183 878.836,239.442 879.404,239.795 879.973,240.186 880.541,240.594 881.109,236.84 881.678,237.535 882.246,238.059 882.814,237.496 883.383,235.107 883.951,233.802 884.519,233.796 885.088,231.39 885.656,231.419 886.224,230.174 886.793,230.393 887.361,230.557 887.93,229.429 888.498,230.707 889.066,230.535 889.635,230.374 890.203,227.562 890.771,227.579 891.34,225.805 891.908,228.159 892.476,227.266 893.045,229.627 893.613,230.619 894.181,231.64 894.75,229.359 895.318,230.496 895.886,228.593 896.455,228.647 897.023,228.833 897.591,229.979 898.16,230.872 898.728,228.666 899.296,226.744 899.865,225.723 900.433,224.882 901.001,227.577 901.57,229.93 902.138,229.828 902.707,229.989 903.275,230.778 903.843,229.645 904.412,228.473 904.98,229.578 905.548,228.659 906.117,229.995 906.685,231.996 907.253,230.902 907.822,230.951 908.39,229.831 908.958,228.655 909.527,230.807 910.095,229.825 910.663,229.674 911.232,228.736 911.8,227.842 912.368,227.998 912.937,228.218 913.505,230.449 914.073,228.448 914.642,229.023 915.21,229.313 915.779,229.72 916.347,228.624 916.915,228.726 917.484,229.793 918.052,227.738 918.62,229.067 919.189,227.075 919.757,227.566 920.325,229.081 920.894,230.313 921.462,230.404 922.03,230.481 922.599,229.574 923.167,229.534 923.735,227.416 924.304,227.746 924.872,227.877 925.44,230.296 926.009,232.398 926.577,231.387 927.145,230.27 927.714,228.127 928.282,231.625 928.85,232.844 929.419,236.813 929.987,234.541 930.556,235.377 931.124,234.128 931.692,234.778 932.261,232.503 932.829,231.397 933.397,230.342 933.966,231.25 934.534,229.189 935.102,229.41 935.671,229.393 936.239,227.211 936.807,225.462 937.376,225.128 937.944,225.562 938.512,225.052 939.081,224.546 939.649,226.379 940.217,227.821 940.786,228.098 941.354,231.285 941.922,232.425 942.491,234.536 943.059,233.282 943.627,233.21 944.196,232.107 944.764,231.349 945.333,231.42 945.901,232.468 946.469,232.383 947.038,234.333 947.606,233.229 948.174,232.986 948.743,231.837 949.311,231.793 949.879,234.813 950.448,235.721 951.016,234.386 951.584,233.028 952.153,232.041 952.721,231.209 953.289,230.259 953.858,230.27 954.426,230.141 954.994,231.26 955.563,232.204 956.131,233.036 956.699,227.772 957.268,227.146 957.836,228.479 958.405,230.647 958.973,230.808 959.541,230.925 960.11,231.011 960.678,233.023 961.246,231.935 961.815,229.822 962.383,229.863 962.951,230.043 963.52,230.949 964.088,229.773 964.656,229.776 965.225,228.871 965.793,228.936 966.361,229.081 966.93,229.264 967.498,228.345 968.066,229.82 968.635,230.959 969.203,230.98 969.771,230.105 970.34,232.279 970.908,234.303 971.476,234.109 972.045,232.926 972.613,234.896 973.182,234.734 973.75,234.68 974.318,234.433 974.887,234.162 975.455,230.697 976.023,232.82 976.592,233.563 977.16,233.391 977.728,232.138 978.297,232.019 978.865,231.773 979.433,231.622 980.002,232.479 980.57,232.392 981.138,231.211 981.707,232.252 982.275,231.164 982.843,229.926 983.412,231.073 983.98,228.065 984.548,227.212 985.117,228.411 985.685,228.647 986.253,228.825 986.822,230.016 987.39,229.212 987.959,229.324 988.527,228.305 989.095,228.794 989.664,227.954 990.232,227.098 990.8,228.253 991.369,230.598 991.937,231.672 992.505,232.501 993.074,232.29 993.642,233.217 994.21,231.844 994.779,230.902 995.347,228.731 995.915,230.039 996.484,228.987 997.052,228.297 997.62,227.453 998.189,227.813 998.757,227.219 999.325,228.473 999.894,226.52 1000.46,228.074 1001.03,229.251 1001.6,228.434 1002.17,227.453 1002.74,228.965 1003.3,228.054 1003.87,229.61 1004.44,229.767 1005.01,229.835 1005.58,231.77 1006.15,230.884 1006.71,230.046 1007.28,229.919 1007.85,231.041 1008.42,230.893 1008.99,233.061 1009.56,229.813 1010.12,230.108 1010.69,232.278 1011.26,231.271 1011.83,231.155 1012.4,231.116 1012.97,231.359 1013.53,229.018 1014.1,229.159 1014.67,229.105 1015.24,226.127 1015.81,226.328 1016.38,225.631 1016.94,226.103 1017.51,227.762 1018.08,227.193 1018.65,227.526 1019.22,226.851 1019.79,227.215 1020.35,227.569 1020.92,227.733 1021.49,228.766 1022.06,227.984 1022.63,228.297 1023.2,228.635 1023.76,230.743 1024.33,230.675 1024.9,232.966 1025.47,234.89 1026.04,237.753 1026.61,239.626 1027.17,240.065 1027.74,240.56 1028.31,241.794 1028.88,241.961 1029.45,240.007 1030.02,239.471 1030.58,237.788 1031.15,238.231 1031.72,237.58 1032.29,241.275 1032.86,242.668 1033.43,241.721 1033.99,239.898 1034.56,240.168 1035.13,238.428 1035.7,239.633 1036.27,237.936 1036.84,239.164 1037.4,238.544 1037.97,235.556 1038.54,232.117 1039.11,230.886 1039.68,231.657 1040.25,232.543 1040.81,231.199 1041.38,230.936 1041.95,232.961 1042.52,232.617 1043.09,232.308 1043.66,231.002 1044.22,230.988 1044.79,229.878 1045.36,230.632 1045.93,231.749 1046.5,232.613 1047.07,231.264 1047.63,231.082 1048.2,227.849 1048.77,224.789 1049.34,223.119 1049.91,225.303 1050.48,224.458 1051.05,226.858 1051.61,227.082 1052.18,228.238 1052.75,226.135 1053.32,227.511 1053.89,228.77 1054.46,228.645 1055.02,228.323 1055.59,227.449 1056.16,226.54 1056.73,225.631 1057.3,225.907 1057.87,225.939 1058.43,226.288 1059,226.658 1059.57,226.918 1060.14,227.038 1060.71,226.151 1061.28,227.382 1061.84,227.584 1062.41,228.899 1062.98,229.875 1063.55,229.718 1064.12,229.87 1064.69,231.997 1065.25,231.648 1065.82,231.556 1066.39,232.322 1066.96,232.19 1067.53,231.778 1068.1,229.455 1068.66,231.875 1069.23,230.388 1069.8,231.093 1070.37,233.076 1070.94,232.696 1071.51,233.412 1072.07,236.269 1072.64,234.789 1073.21,234.573 1073.78,234.245 1074.35,234.056 1074.92,230.71 1075.48,229.619 1076.05,229.361 1076.62,230.354 1077.19,229.363 1077.76,228.423 1078.33,227.358 1078.89,228.32 1079.46,228.428 1080.03,230.512 1080.6,231.538 1081.17,231.507 1081.74,229.181 1082.3,226.797 1082.87,229.019 1083.44,227.842 1084.01,229.95 1084.58,231.937 1085.15,231.491 1085.71,231.196 1086.28,230.909 1086.85,231.828 1087.42,231.717 1087.99,231.507 1088.56,230.409 1089.12,228.635 1089.69,229.69 1090.26,229.601 1090.83,229.595 1091.4,229.566 1091.97,229.366 1092.53,228.377 1093.1,228.489 1093.67,230.517 1094.24,230.291 1094.81,230.333 1095.38,231.425 1095.94,231.472 1096.51,231.376 1097.08,230.228 1097.65,232.136 1098.22,232.028 1098.79,232.031 1099.35,231.84 1099.92,231.551 1100.49,230.335 1101.06,228.145 1101.63,228.382 1102.2,229.512 1102.76,228.427 1103.33,226.483 1103.9,226.749 1104.47,228.918 1105.04,229.02 1105.61,228.035 1106.17,226.005 1106.74,226.258 1107.31,225.258 1107.88,224.74 1108.45,226.163 1109.02,224.381 1109.58,225.726 1110.15,226.06 1110.72,225.247 1111.29,226.645 1111.86,227.747 1112.43,226.999 1112.99,226.004 1113.56,225.197 1114.13,224.486 1114.7,226.34 1115.27,225.723 1115.84,225.152 1116.4,224.455 1116.97,224.821 1117.54,225.398 1118.11,225.623 1118.68,225.889 1119.25,224.431 1119.81,224.819 1120.38,225.374 1120.95,225.874 1121.52,226.238 1122.09,225.583 1122.66,225.118 1123.23,225.524 1123.79,226.254 1124.36,225.796 1124.93,228.362 1125.5,229.771 1126.07,229.02 1126.64,229.519 1127.2,229.571 1127.77,229.936 1128.34,228.778 1128.91,229.02 1129.48,228.252 1130.05,229.619 1130.61,230.932 1131.18,230.937 1131.75,231.033 1132.32,230.119 1132.89,230.22 1133.46,229.211 1134.02,229.407 1134.59,231.718 1135.16,229.872 1135.73,229.247 1136.3,230.476 1136.87,229.67 1137.43,229.871 1138,229.02 1138.57,228.436 1139.14,226.638 1139.71,227.118 1140.28,226.673 1140.84,227.242 1141.41,226.543 1141.98,228.09 1142.55,227.524 1143.12,228.059 1143.69,227.503 1144.25,231.018 1144.82,231.147 1145.39,231.17 1145.96,231.308 1146.53,230.376 1147.1,231.51 1147.66,230.386 1148.23,230.452 1148.8,231.603 1149.37,232.695 1149.94,229.749 1150.51,232.036 1151.07,233.003 1151.64,232.878 1152.21,232.06 1152.78,233.291 1153.35,236.329 1153.92,238.273 1154.48,240.724 1155.05,241.243 1155.62,239.524 1156.19,239.937 1156.76,238.396 1157.33,239.069 1157.89,239.533 1158.46,238.996 1159.03,237.638 1159.6,236.027 1160.17,235.717 1160.74,237.62 1161.3,237.08 1161.87,236.457 1162.44,236.17 1163.01,235.782 1163.58,237.343 1164.15,236.824 1164.71,236.299 1165.28,237.897 1165.85,241.25 1166.42,241.282 1166.99,240.507 1167.56,239.647 1168.12,243.056 1168.69,243.027 1169.26,241.943 1169.83,238.985 1170.4,238.363 1170.97,236.403 1171.53,235.915 1172.1,238.296 1172.67,235.453 1173.24,234.815 1173.81,234.171 1174.38,232.621 1174.94,232.27 1175.51,230.998 1176.08,229.769 1176.65,230.566 1177.22,230.442 1177.79,231.395 1178.35,229.171 1178.92,230.055 1179.49,229.059 1180.06,228.7 1180.63,227.675 1181.2,227.772 1181.76,227.733 1182.33,225.723 1182.9,226.653 1183.47,226.755 1184.04,226.947 1184.61,228.061 1185.17,229.101 1185.74,229.05 1186.31,227.742 1186.88,227.841 1187.45,226.891 1188.02,226.997 1188.58,226.052 1189.15,222.918 1189.72,223.235 1190.29,225.718 1190.86,226.035 1191.43,227.155 1192,228.429 1192.56,228.253 1193.13,225.015 1193.7,223.047 1194.27,223.454 1194.84,221.828 1195.41,223.483 1195.97,223.944 1196.54,223.296 1197.11,223.752 1197.68,227.169 1198.25,228.334 1198.82,229.452 1199.38,228.426 1199.95,230.49 1200.52,227.622 1201.09,228.642 1201.66,230.686 1202.23,227.546 1202.79,223.612 1203.36,225.169 1203.93,225.718 1204.5,226.037 1205.07,228.391 1205.64,227.62 1206.2,228.918 1206.77,229.148 1207.34,229.247 1207.91,230.118 1208.48,230.215 1209.05,229.328 1209.61,229.541 1210.18,229.164 1210.75,230.405 1211.32,228.596 1211.89,227.716 1212.46,228.966 1213.02,231.386 1213.59,231.284 1214.16,229.228 1214.73,229.525 1215.3,230.731 1215.87,230.593 1216.43,231.912 1217,233.792 1217.57,234.705 1218.14,235.497 1218.71,234.998 1219.28,236.708 1219.84,235.439 1220.41,233.985 1220.98,233.774 1221.55,231.366 1222.12,232.209 1222.69,229.983 1223.25,228.949 1223.82,229.819 1224.39,229.588 1224.96,228.543 1225.53,228.693 1226.1,228.948 1226.66,232.013 1227.23,231.959 1227.8,232.841 1228.37,233.561 1228.94,234.409 1229.51,234.21 1230.07,232.907 1230.64,230.317 1231.21,230.08 1231.78,232.063 1232.35,228.672 1232.92,227.867 1233.48,226.959 1234.05,226.223 1234.62,228.503 1235.19,227.645 1235.76,227.552 1236.33,229.773 1236.89,228.586 1237.46,229.964 1238.03,231.83 1238.6,231.73 1239.17,232.735 1239.74,230.568 1240.3,230.569 1240.87,228.374 1241.44,228.745 1242.01,227.9 1242.58,225.885 1243.15,226.248 1243.71,227.765 1244.28,226.826 1244.85,228.318 1245.42,228.443 1245.99,230.702 1246.56,233.569 1247.12,232.155 1247.69,230.881 1248.26,229.588 1248.83,229.536 1249.4,229.338 1249.97,227.331 1250.53,228.607 1251.1,227.757 1251.67,228.023 1252.24,229.285 1252.81,229.416 1253.38,230.294 1253.94,228.431 1254.51,227.657 1255.08,229.02 1255.65,230.061 1256.22,230.246 1256.79,229.094 1257.35,228.152 1257.92,227.45 1258.49,228.909 1259.06,230.735 1259.63,230.771 1260.2,229.714 1260.76,230.758 1261.33,232.855 1261.9,232.883 1262.47,232.86 1263.04,232.61 1263.61,233.498 1264.18,235.294 1264.74,235.946 1265.31,236.724 1265.88,237.324 1266.45,237.698 1267.02,237.493 1267.59,236.99 1268.15,235.683 1268.72,234.185 1269.29,232.763 1269.86,231.556 1270.43,229.439 1271,224.072 1271.56,223.541 1272.13,225.016 1272.7,227.343 1273.27,227.728 1273.84,227.202 1274.41,227.542 1274.97,228.795 1275.54,227.866 1276.11,230.062 1276.68,233.185 1277.25,231.843 1277.82,232.813 1278.38,232.433 1278.95,231.129 1279.52,231.138 1280.09,231.094 1280.66,232.144 1281.23,231.982 1281.79,232.936 1282.36,231.781 1282.93,229.781 1283.5,229.759 1284.07,229.703 1284.64,228.681 1285.2,227.786 1285.77,225.006 1286.34,225.397 1286.91,224.608 1287.48,222.95 1288.05,224.544 1288.61,226.895 1289.18,225.222 1289.75,224.371 1290.32,224.904 1290.89,225.374 1291.46,225.906 1292.02,228.512 1292.59,228.706 1293.16,227.791 1293.73,230.074 1294.3,233.177 1294.87,232.254 1295.43,231.181 1296,231.111 1296.57,231.223 1297.14,231.211 1297.71,230.479 1298.28,230.672 1298.84,229.608 1299.41,228.681 1299.98,228.69 1300.55,229.867 1301.12,230.039 1301.69,231.284 1302.25,234.248 1302.82,233.881 1303.39,235.577 1303.96,234.402 1304.53,235.135 1305.1,233.708 1305.66,234.336 1306.23,234.184 1306.8,234.093 1307.37,234.954 1307.94,232.481 1308.51,231.298 1309.07,229.332 1309.64,230.702 1310.21,232.685 1310.78,230.384 1311.35,229.124 1311.92,229.227 1312.48,232.355 1313.05,231.346 1313.62,231.241 1314.19,230.396 1314.76,231.441 1315.33,228.228 1315.89,226.555 1316.46,224.758 1317.03,226.023 1317.6,227.604 1318.17,227.883 1318.74,229.067 1319.3,225.992 1319.87,226.331 1320.44,227.616 1321.01,228.057 1321.58,229.253 1322.15,230.271 1322.71,231.473 1323.28,230.209 1323.85,230.153 1324.42,232.062 1324.99,232.05 1325.56,232.001 1326.12,232.115 1326.69,233.225 1327.26,235.143 1327.83,231.672 1328.4,230.793 1328.97,227.754 1329.53,229.013 1330.1,229.135 1330.67,230.205 1331.24,229.003 1331.81,229.114 1332.38,228.369 1332.94,228.601 1333.51,226.71 1334.08,226.895 1334.65,224.983 1335.22,226.104 1335.79,224.431 1336.36,224.723 1336.92,226.315 1337.49,225.932 1338.06,226.194 1338.63,225.483 1339.2,226.92 1339.77,228.224 1340.33,227.699 1340.9,228.121 1341.47,229.417 1342.04,231.75 1342.61,231.696 1343.18,233.783 1343.74,234.697 1344.31,234.363 1344.88,235.259 1345.45,236.071 1346.02,235.548 1346.59,234.151 1347.15,232.916 1347.72,234.872 1348.29,234.577 1348.86,233.354 1349.43,233.92 1350,234.585 1350.56,235.228 1351.13,232.873 1351.7,233.551 1352.27,234.243 1352.84,235.996 1353.41,233.318 1353.97,232.021 1354.54,228.752 1355.11,228.711 1355.68,227.687 1356.25,227.036 1356.82,227.209 1357.38,225.294 1357.95,226.769 1358.52,226.236 1359.09,228.633 1359.66,228.687 1360.23,228.947 1360.79,228.979 1361.36,229.976 1361.93,230.863 1362.5,230.71 1363.07,231.506 1363.64,232.47 1364.2,233.218 1364.77,232.961 1365.34,234.806 1365.91,234.587 1366.48,234.322 1367.05,234.133 1367.61,233.875 1368.18,232.8 1368.75,231.589 1369.32,232.457 1369.89,233.298 1370.46,229.878 1371.02,228.736 1371.59,229.936 1372.16,228.838 1372.73,232.698 1373.3,231.595 1373.87,230.357 1374.43,232.527 1375,232.308 1375.57,234.117 1376.14,233.847 1376.71,233.608 1377.28,233.219 1377.84,228.947 1378.41,229.187 1378.98,228.227 1379.55,225.291 1380.12,226.959 1380.69,230.41 1381.25,228.506 1381.82,227.525 1382.39,226.595 1382.96,225.866 1383.53,227.235 1384.1,230.572 1384.66,230.499 1385.23,230.382 1385.8,230.445 1386.37,230.236 1386.94,229.277 1387.51,229.165 1388.07,230.39 1388.64,230.529 1389.21,232.478 1389.78,232.398 1390.35,231.337 1390.92,230.048 1391.48,229.839 1392.05,230.887 1392.62,230.791 1393.19,231.682 1393.76,230.472 1394.33,230.532 1394.89,229.422 1395.46,230.381 1396.03,227.207 1396.6,227.286 1397.17,228.543 1397.74,228.71 1398.3,231.005 1398.87,229.841 1399.44,228.698 1400.01,230.969 1400.58,233.298 1401.15,232.932 1401.71,233.929 1402.28,234.529 1402.85,234.183 1403.42,232.918 1403.99,232.434 1404.56,233.211 1405.13,232.98 1405.69,234.689 1406.26,233.384 1406.83,234.278 1407.4,233.919 1407.97,232.589 1408.54,232.507 1409.1,232.388 1409.67,231.045 1410.24,230.79 1410.81,231.666 1411.38,231.525 1411.95,231.307 1412.51,231.057 1413.08,234.151 1413.65,232.777 1414.22,232.426 1414.79,232.032 1415.36,231.869 1415.92,228.62 1416.49,229.501 1417.06,227.578 1417.63,227.828 1418.2,225.89 1418.77,224.888 1419.33,226.179 1419.9,226.455 1420.47,225.714 1421.04,224.053 1421.61,221.294 1422.18,219.895 1422.74,222.617 1423.31,224.267 1423.88,225.615 1424.45,227.015 1425.02,228.385 1425.59,225.429 1426.15,225.878 1426.72,225.263 1427.29,224.782 1427.86,226.12 1428.43,226.565 1429,227.133 1429.56,227.291 1430.13,228.717 1430.7,227.979 1431.27,230.279 1431.84,229.348 1432.41,230.505 1432.97,233.64 1433.54,231.67 1434.11,231.547 1434.68,231.441 1435.25,232.531 1435.82,231.376 1436.38,230.435 1436.95,231.622 1437.52,231.355 1438.09,232.38 1438.66,231.304 1439.23,229.155 1439.79,229.603 1440.36,227.611 1440.93,230.982 1441.5,231.193 1442.07,231.354 1442.64,234.218 1443.2,233.94 1443.77,233.939 1444.34,234.718 1444.91,234.486 1445.48,233.31 1446.05,231.041 1446.61,231.986 1447.18,232.992 1447.75,233.844 1448.32,231.513 1448.89,230.589 1449.46,227.54 1450.02,228.739 1450.59,227.697 1451.16,227.977 1451.73,226.114 1452.3,228.305 1452.87,229.3 1453.43,230.522 1454,230.421 1454.57,231.534 1455.14,231.413 1455.71,230.372 1456.28,229.324 1456.84,226.419 1457.41,225.705 1457.98,224.879 1458.55,225.376 1459.12,226.851 1459.69,228.285 1460.25,227.489 1460.82,228.794 1461.39,231.012 1461.96,233.888 1462.53,237.689 1463.1,236.24 1463.66,234.978 1464.23,233.508 1464.8,231.286 1465.37,232.352 1465.94,233.378 1466.51,231.964 1467.07,229.86 1467.64,227.784 1468.21,225.873 1468.78,224.266 1469.35,223.71 1469.92,224.234 1470.48,224.687 1471.05,227.393 1471.62,226.455 1472.19,227.706 1472.76,226.843 1473.33,226.959 1473.89,227.077 1474.46,226.24 1475.03,226.365 1475.6,229.644 1476.17,229.034 1476.74,229.113 1477.31,229.269 1477.87,229.504 1478.44,227.581 1479.01,225.681 1479.58,225.075 1480.15,225.363 1480.72,225.834 1481.28,227.406 1481.85,228.51 1482.42,229.577 1482.99,230.75 1483.56,229.729 1484.13,232.036 1484.69,232.081 1485.26,234.09 1485.83,233.846 1486.4,231.671 1486.97,229.51 1487.54,229.414 1488.1,229.341 1488.67,228.445 1489.24,227.655 1489.81,229.128 1490.38,232.4 1490.95,233.48 1491.51,233.432 1492.08,232.267 1492.65,236.278 1493.22,236.979 1493.79,237.686 1494.36,237.295 1494.92,235.963 1495.49,233.6 1496.06,232.292 1496.63,229.94 1497.2,231.196 1497.77,232.17 1498.33,232.402 1498.9,230.151 1499.47,230.208 1500.04,234.274 1500.61,236.144 1501.18,237.717 1501.74,237.27 1502.31,236.643 1502.88,236.025 1503.45,235.48 1504.02,236.156 1504.59,233.687 1505.15,234.391 1505.72,234.302 1506.29,233.995 1506.86,232.439 1507.43,231.395 1508,229.416 1508.56,229.338 1509.13,229.228 1509.7,230.056 1510.27,225.977 1510.84,228.109 1511.41,224.93 1511.97,223.167 1512.54,222.667 1513.11,225.333 1513.68,227.576 1514.25,226.65 1514.82,227.077 1515.38,225.275 1515.95,224.745 1516.52,223.794 1517.09,224.417 1517.66,226.928 1518.23,229.255 1518.79,228.435 1519.36,227.739 1519.93,230.424 1520.5,230.517 1521.07,230.588 1521.64,234.043 1522.2,235.869 1522.77,237.621 1523.34,237.28 1523.91,236.75 1524.48,237.561 1525.05,237.999 1525.61,238.395 1526.18,238.782 1526.75,239.13 1527.32,237.288 1527.89,235.625 1528.46,234.18 1529.02,235.052 1529.59,233.541 1530.16,233.374 1530.73,233.04 1531.3,236.992 1531.87,238.469 1532.43,238.624 1533,236.842 1533.57,236.13 1534.14,233.509 1534.71,231.175 1535.28,230.866 1535.84,227.661 1536.41,228.717 1536.98,227.719 1537.55,227.66 1538.12,229.731 1538.69,228.866 1539.25,227.657 1539.82,227.83 1540.39,227.818 1540.96,226.831 1541.53,225.847 1542.1,228.121 1542.66,227.356 1543.23,227.613 1543.8,226.677 1544.37,225.691 1544.94,224.934 1545.51,226.222 1546.08,226.73 1546.64,226.85 1547.21,227.096 1547.78,227.566 1548.35,227.637 1548.92,226.721 1549.49,229.059 1550.05,230.294 1550.62,230.279 1551.19,230.432 1551.76,231.563 1552.33,232.392 1552.9,230.337 1553.46,229.392 1554.03,230.36 1554.6,231.492 1555.17,230.235 1555.74,230.155 1556.31,229.195 1556.87,229.23 1557.44,230.301 1558.01,232.336 1558.58,233.234 1559.15,231.069 1559.72,231.957 1560.28,231.564 1560.85,232.682 1561.42,230.492 1561.99,232.582 1562.56,232.264 1563.13,232.012 1563.69,232.957 1564.26,231.617 1564.83,231.413 1565.4,231.124 1565.97,231.067 1566.54,233.008 1567.1,231.603 1567.67,231.507 1568.24,231.519 1568.81,231.215 1569.38,231.226 1569.95,231.212 1570.51,227.787 1571.08,232.082 1571.65,232.968 1572.22,235.56 1572.79,235.249 1573.36,234.78 1573.92,234.453 1574.49,231.92 1575.06,231.799 1575.63,231.601 1576.2,231.508 1576.77,230.482 1577.33,230.494 1577.9,231.419 1578.47,231.157 1579.04,231 1579.61,230.766 1580.18,228.504 1580.74,228.368 1581.31,226.393 1581.88,226.452 1582.45,226.63 1583.02,226.921 1583.59,228.196 1584.15,229.27 1584.72,228.275 1585.29,228.412 1585.86,228.448 1586.43,229.83 1587,230.71 1587.56,229.51 1588.13,230.387 1588.7,230.37 1589.27,229.528 1589.84,229.678 1590.41,230.755 1590.97,231.643 1591.54,232.567 1592.11,231.197 1592.68,229.072 1593.25,229.327 1593.82,228.472 1594.38,229.587 1594.95,227.58 1595.52,231.941 1596.09,231.698 1596.66,231.543 1597.23,231.471 1597.79,233.575 1598.36,233.13 1598.93,229.838 1599.5,228.634 1600.07,227.53 1600.64,226.852 1601.2,227.046 1601.77,228.104 1602.34,227.236 1602.91,227.454 1603.48,226.555 1604.05,223.589 1604.61,223.953 1605.18,225.242 1605.75,226.485 1606.32,230.731 1606.89,227.687 1607.46,227.815 1608.02,227.046 1608.59,228.167 1609.16,229.303 1609.73,228.286 1610.3,228.5 1610.87,229.669 1611.43,228.882 1612,229.056 1612.57,230.118 1613.14,231.174 1613.71,231.174 1614.28,232.273 1614.84,229.883 1615.41,231.065 1615.98,230.043 1616.55,230.072 1617.12,231.128 1617.69,232.29 1618.26,231.44 1618.82,231.49 1619.39,231.355 1619.96,231.255 1620.53,228.885 1621.1,230.281 1621.67,230.358 1622.23,228.493 1622.8,228.582 1623.37,227.755 1623.94,228.103 1624.51,229.18 1625.08,229.056 1625.64,230.157 1626.21,229.112 1626.78,228.006 1627.35,228.377 1627.92,229.463 1628.49,227.522 1629.05,226.663 1629.62,229.725 1630.19,231.76 1630.76,230.877 1631.33,233.046 1631.9,232.151 1632.46,232.27 1633.03,231.957 1633.6,231.845 1634.17,231.507 1634.74,230.468 1635.31,229.459 1635.87,228.357 1636.44,230.669 1637.01,230.678 1637.58,231.633 1638.15,230.494 1638.72,229.496 1639.28,228.535 1639.85,229.58 1640.42,230.844 1640.99,226.923 1641.56,227.181 1642.13,227.657 1642.69,227.982 1643.26,228.214 1643.83,226.39 1644.4,226.862 1644.97,226.333 1645.54,226.77 1646.1,228.073 1646.67,228.277 1647.24,226.457 1647.81,228.83 1648.38,227.925 1648.95,225.307 1649.51,229.742 1650.08,229.849 1650.65,230.94 1651.22,231.955 1651.79,233.07 1652.36,233.741 1652.92,233.296 1653.49,232.064 1654.06,232.933 1654.63,234.826 1655.2,237.405 1655.77,234.931 1656.33,233.423 1656.9,234.398 1657.47,232.221 1658.04,232.119 1658.61,230.906 1659.18,229.809 1659.74,229.99 1660.31,226.932 1660.88,228.251 1661.45,228.426 1662.02,231.719 1662.59,230.578 1663.15,230.459 1663.72,230.387 1664.29,230.366 1664.86,229.386 1665.43,233.427 1666,233.306 1666.56,235.028 1667.13,235.769 1667.7,235.513 1668.27,234.247 1668.84,235.117 1669.41,234.043 1669.97,232.669 1670.54,230.334 1671.11,230.464 1671.68,231.503 1672.25,229.402 1672.82,228.368 1673.38,227.588 1673.95,229.806 1674.52,227.683 1675.09,229.878 1675.66,230.987 1676.23,229.932 1676.79,233.187 1677.36,233.041 1677.93,233.983 1678.5,231.85 1679.07,232.821 1679.64,232.692 1680.2,232.429 1680.77,232.151 1681.34,232.071 1681.91,231.118 1682.48,231.124 1683.05,228.782 1683.61,228.888 1684.18,230.883 1684.75,230.761 1685.32,229.634 1685.89,230.903 1686.46,232.804 1687.02,233.677 1687.59,233.645 1688.16,234.289 1688.73,233.977 1689.3,232.828 1689.87,231.59 1690.44,227.247 1691,226.467 1691.57,228.835 1692.14,225.881 1692.71,225.086 1693.28,226.319 1693.85,226.536 1694.41,223.774 1694.98,224.195 1695.55,226.651 1696.12,228.045 1696.69,229.023 1697.26,227.085 1697.82,226.142 1698.39,226.668 1698.96,226.95 1699.53,227.281 1700.1,227.699 1700.67,229.008 1701.23,231.246 1701.8,233.178 1702.37,231.955 1702.94,231.688 1703.51,231.51 1704.08,231.368 1704.64,232.364 1705.21,231.989 1705.78,231.856 1706.35,231.797 1706.92,231.434 1707.49,232.327 1708.05,232.139 1708.62,231.747 1709.19,232.647 1709.76,231.383 1710.33,229.298 1710.9,228.45 1711.46,228.847 1712.03,229.021 1712.6,229.198 1713.17,228.295 1713.74,227.501 1714.31,227.537 1714.87,226.76 1715.44,227.124 1716.01,227.348 1716.58,226.458 1717.15,225.641 1717.72,226.324 1718.28,226.078 1718.85,228.6 1719.42,228.687 1719.99,231.131 1720.56,232.174 1721.13,231.044 1721.69,231.013 1722.26,231.717 1722.83,230.6 1723.4,229.667 1723.97,230.778 1724.54,231.821 1725.1,230.741 1725.67,229.711 1726.24,231.858 1726.81,232.007 1727.38,233.377 1727.95,233.097 1728.51,234.011 1729.08,232.78 1729.65,233.643 1730.22,234.508 1730.79,233.123 1731.36,232.958 1731.92,231.637 1732.49,231.395 1733.06,231.34 1733.63,229.393 1734.2,229.59 1734.77,229.864 1735.33,228.944 1735.9,229.121 1736.47,231.21 1737.04,231.191 1737.61,231.002 1738.18,230.773 1738.74,229.844 1739.31,228.659 1739.88,228.782 1740.45,228.941 1741.02,227.909 1741.59,227.172 1742.15,227.197 1742.72,226.317 1743.29,225.788 1743.86,227.172 1744.43,226.325 1745,225.54 1745.56,225.04 1746.13,226.536 1746.7,226.652 1747.27,228.001 1747.84,226.176 1748.41,226.317 1748.97,227.51 1749.54,227.983 1750.11,231.282 1750.68,231.989 1751.25,231.884 1751.82,230.498 1752.38,230.574 1752.95,231.585 1753.52,232.544 1754.09,232.501 1754.66,230.239 1755.23,229.22 1755.79,229.47 1756.36,232.674 1756.93,234.653 1757.5,234.458 1758.07,233.114 1758.64,232.943 1759.21,231.821 1759.77,230.687 1760.34,233.758 1760.91,235.642 1761.48,234.144 1762.05,233.721 1762.62,233.308 1763.18,232.962 1763.75,234.903 1764.32,234.581 1764.89,234.214 1765.46,234.091 1766.03,234.678 1766.59,236.248 1767.16,237.791 1767.73,237.226 1768.3,238.693 1768.87,238.998 1769.44,236.319 1770,234.8 1770.57,235.517 1771.14,234.107 1771.71,234.676 1772.28,234.033 1772.85,232.621 1773.41,233.184 1773.98,234.913 1774.55,235.411 1775.12,233.936 1775.69,233.599 1776.26,232.877 1776.82,233.344 1777.39,233.023 1777.96,232.83 1778.53,231.475 1779.1,231.302 1779.67,230.121 1780.23,230.054 1780.8,229.993 1781.37,229.909 1781.94,230.894 1782.51,229.841 1783.08,229.71 1783.64,229.946 1784.21,229.929 1784.78,228.795 1785.35,227.567 1785.92,227.672 1786.49,227.77 1787.05,225.779 1787.62,224.915 1788.19,227.307 1788.76,227.321 1789.33,226.382 1789.9,226.375 1790.46,227.521 1791.03,227.719 1791.6,228.807 1792.17,228.815 1792.74,224.456 1793.31,224.98 1793.87,225.105 1794.44,223.548 1795.01,222.927 1795.58,224.144 1796.15,223.43 1796.72,223.816 1797.28,225.165 1797.85,225.656 1798.42,225.026 1798.99,226.435 1799.56,223.445 1800.13,224.95 1800.69,225.572 1801.26,226.033 1801.83,227.475 1802.4,224.605 1802.97,225.105 1803.54,225.375 1804.1,224.799 1804.67,224.292 1805.24,223.949 1805.81,223.353 1806.38,226.907 1806.95,227.346 1807.51,228.641 1808.08,227.836 1808.65,228.143 1809.22,228.505 1809.79,229.906 1810.36,230.078 1810.92,231.079 1811.49,229.778 1812.06,229.969 1812.63,231.128 1813.2,232.039 1813.77,233.253 1814.33,234.804 1814.9,234.95 1815.47,233.803 1816.04,233.349 1816.61,233.225 1817.18,233.078 1817.74,232.778 1818.31,231.585 1818.88,231.676 1819.45,231.537 1820.02,232.609 1820.59,234.495 1821.15,236.354 1821.72,236.002 1822.29,234.488 1822.86,233.277 1823.43,233.13 1824,232.026 1824.56,232.855 1825.13,236.732 1825.7,237.362 1826.27,238.831 1826.84,238.029 1827.41,236.557 1827.97,235.03 1828.54,235.792 1829.11,235.272 1829.68,234.819 1830.25,234.526 1830.82,233.183 1831.39,232.979 1831.95,233.869 1832.52,234.524 1833.09,237.111 1833.66,235.63 1834.23,235.234 1834.8,234.614 1835.36,233.914 1835.93,233.694 1836.5,234.288 1837.07,230.8 1837.64,230.687 1838.21,230.394 1838.77,230.152 1839.34,229.208 1839.91,228.173 1840.48,228.541 1841.05,230.544 1841.62,229.461 1842.18,229.474 1842.75,228.574 1843.32,229.732 1843.89,228.67 1844.46,228.936 1845.03,226.792 1845.59,229.013 1846.16,230.024 1846.73,229.893 1847.3,228.837 1847.87,228.604 1848.44,229.802 1849,227.818 1849.57,226.78 1850.14,228.087 1850.71,228.347 1851.28,226.275 1851.85,226.536 1852.41,226.8 1852.98,224.925 1853.55,223.241 1854.12,223.868 1854.69,225.334 1855.26,224.68 1855.82,224.915 1856.39,226.311 1856.96,225.676 1857.53,225.85 1858.1,226.111 1858.67,224.406 1859.23,227.88 1859.8,228.116 1860.37,228.336 1860.94,228.693 1861.51,227.026 1862.08,226.383 1862.64,230.856 1863.21,230.874 1863.78,232.875 1864.35,233.73 1864.92,232.598 1865.49,234.608 1866.05,236.595 1866.62,237.345 1867.19,235.644 1867.76,235.081 1868.33,233.467 1868.9,234.109 1869.46,233.864 1870.03,233.507 1870.6,231.971 1871.17,231.774 1871.74,234.626 1872.31,234.342 1872.87,232.949 1873.44,231.67 1874.01,232.52 1874.58,232.314 1875.15,233.115 1875.72,229.565 1876.28,231.438 1876.85,230.388 1877.42,228.158 1877.99,228.155 1878.56,227.388 1879.13,225.448 1879.69,225.837 1880.26,227.232 1880.83,225.107 1881.4,226.222 1881.97,225.595 1882.54,227.046 1883.1,225.978 1883.67,229.461 1884.24,229.622 1884.81,229.556 1885.38,230.564 1885.95,232.626 1886.51,230.603 1887.08,228.689 1887.65,228.695 1888.22,228.811 1888.79,229.95 1889.36,230 1889.92,230.181 1890.49,233.42 1891.06,232.084 1891.63,230.86 1892.2,230.944 1892.77,230.886 1893.33,230.708 1893.9,231.809 1894.47,231.825 1895.04,230.713 1895.61,227.587 1896.18,226.725 1896.74,225.821 1897.31,223.971 1897.88,226.409 1898.45,225.776 1899.02,224.074 1899.59,225.522 1900.16,225.877 1900.72,225.417 1901.29,223.687 1901.86,225.182 1902.43,224.6 1903,225.058 1903.57,225.731 1904.13,227.137 1904.7,227.24 1905.27,228.248 1905.84,229.29 1906.41,229.312 1906.98,228.598 1907.54,225.827 1908.11,224.079 1908.68,225.992 1909.25,225.361 1909.82,225.954 1910.39,225.474 1910.95,225.98 1911.52,227.489 1912.09,226.682 1912.66,229.322 1913.23,227.7 1913.8,226.295 1914.36,226.643 1914.93,227.939 1915.5,229.471 1916.07,230.772 1916.64,231.081 1917.21,229.112 1917.77,232.328 1918.34,230.176 1918.91,230.233 1919.48,230.306 1920.05,231.593 1920.62,230.633 1921.18,230.728 1921.75,230.822 1922.32,229.989 1922.89,230.055 1923.46,231.303 1924.03,230.248 1924.59,232.513 1925.16,232.157 1925.73,232.892 1926.3,231.806 1926.87,232.741 1927.44,228.53 1928,227.754 1928.57,227.912 1929.14,229.196 1929.71,230.39 1930.28,230.52 1930.85,231.605 1931.41,234.795 1931.98,235.68 1932.55,235.456 1933.12,236.097 1933.69,236.799 1934.26,239.718 1934.82,239.111 1935.39,241.685 1935.96,238.711 1936.53,237.085 1937.1,236.53 1937.67,236.045 1938.23,234.814 1938.8,236.582 1939.37,235.033 1939.94,235.539 1940.51,233.233 1941.08,233.025 1941.64,232.807 1942.21,233.677 1942.78,234.472 1943.35,235.922 1943.92,234.611 1944.49,234.334 1945.05,234.1 1945.62,235.954 1946.19,237.493 1946.76,236.914 1947.33,236.55 1947.9,237.001 1948.46,235.37 1949.03,235.822 1949.6,236.405 1950.17,235.044 1950.74,232.681 1951.31,233.427 1951.87,232.775 1952.44,233.307 1953.01,232.935 1953.58,234.736 1954.15,230.978 1954.72,229.912 1955.28,227.853 1955.85,229.034 1956.42,228.955 1956.99,228.849 1957.56,229.917 1958.13,232.003 1958.69,231.461 1959.26,229.326 1959.83,228.117 1960.4,230.239 1960.97,227.172 1961.54,227.453 1962.1,226.394 1962.67,225.394 1963.24,226.738 1963.81,227.918 1964.38,228.323 1964.95,227.5 1965.51,228.655 1966.08,228.752 1966.65,226.781 1967.22,225.072 1967.79,225.556 1968.36,225.533 1968.92,226.011 1969.49,225.242 1970.06,222.395 1970.63,223.124 1971.2,226.864 1971.77,226.079 1972.34,227.194 1972.9,228.557 1973.47,228.805 1974.04,229.981 1974.61,230.998 1975.18,229.812 1975.75,229.898 1976.31,229.63 1976.88,230.655 1977.45,231.786 1978.02,231.552 1978.59,231.375 1979.16,233.27 1979.72,230.128 1980.29,231.306 1980.86,230.083 1981.43,231.343 1982,231.316 1982.57,229.986 1983.13,229.887 1983.7,228.858 1984.27,229.005 1984.84,227.209 1985.41,228.23 1985.98,226.529 1986.54,224.629 1987.11,226.077 1987.68,227.441 1988.25,228.736 1988.82,231.103 1989.39,231.063 1989.95,230.873 1990.52,230.845 1991.09,230.998 1991.66,232.02 1992.23,232.797 1992.8,232.612 1993.36,232.447 1993.93,231.099 1994.5,232.98 1995.07,235.947 1995.64,236.687 1996.21,236.294 1996.77,234.622 1997.34,234.119 1997.91,232.844 1998.48,233.443 1999.05,235.217 1999.62,235.054 2000.18,235.996 2000.75,235.452 2001.32,236.959 2001.89,236.136 2002.46,237.656 2003.03,237.009 2003.59,234.473 2004.16,234.128 2004.73,233.661 2005.3,231.153 2005.87,231.989 2006.44,231.772 2007,229.521 2007.57,231.585 2008.14,231.443 2008.71,231.219 2009.28,230.945 2009.85,228.643 2010.41,226.545 2010.98,225.729 2011.55,225.836 2012.12,224.997 2012.69,226.531 2013.26,227.783 2013.82,225.934 2014.39,225.074 2014.96,224.478 2015.53,225.185 2016.1,227.552 2016.67,228.811 2017.23,230.92 2017.8,231.763 2018.37,230.621 2018.94,232.713 2019.51,231.499 2020.08,230.452 2020.64,230.411 2021.21,229.199 2021.78,229.21 2022.35,230.331 2022.92,229.299 2023.49,231.22 2024.05,231.221 2024.62,230.961 2025.19,230.817 2025.76,230.986 2026.33,228.758 2026.9,228.619 2027.46,227.614 2028.03,225.773 2028.6,226.941 2029.17,227.081 2029.74,226.136 2030.31,227.44 2030.87,228.816 2031.44,228.662 2032.01,230.775 2032.58,230.829 2033.15,228.879 2033.72,228.696 2034.28,228.811 2034.85,227.649 2035.42,227.698 2035.99,228.873 2036.56,228.992 2037.13,227.861 2037.69,227.072 2038.26,229.449 2038.83,230.675 2039.4,228.382 2039.97,229.46 2040.54,230.601 2041.11,228.401 2041.67,227.278 2042.24,226.425 2042.81,225.741 2043.38,222.954 2043.95,223.326 2044.52,223.864 2045.08,224.967 2045.65,226.518 2046.22,227.043 2046.79,225.975 2047.36,227.706 2047.93,228.022 2048.49,229.174 2049.06,230.378 2049.63,230.459 2050.2,229.491 2050.77,230.552 2051.34,231.614 2051.9,230.736 2052.47,230.652 2053.04,230.702 2053.61,228.503 2054.18,229.624 2054.75,231.895 2055.31,231.768 2055.88,232.554 2056.45,233.495 2057.02,233.234 2057.59,234.118 2058.16,232.098 2058.72,231.046 2059.29,229.992 2059.86,229.951 2060.43,229.7 2061,229.716 2061.57,229.872 2062.13,229.969 2062.7,229.013 2063.27,227.274 2063.84,227.31 2064.41,226.297 2064.98,225.627 2065.54,225.89 2066.11,224.385 2066.68,224.101 2067.25,223.318 2067.82,223.926 2068.39,224.467 2068.95,226.057 2069.52,226.346 2070.09,224.769 2070.66,225.184 2071.23,226.698 2071.8,229.028 2072.36,229.055 2072.93,229.358 2073.5,225.314 2074.07,225.859 2074.64,225.021 2075.21,227.393 2075.77,228.628 2076.34,229.901 2076.91,228.983 2077.48,230.19 2078.05,231.345 2078.62,234.486 2079.18,235.133 2079.75,235.859 2080.32,234.528 2080.89,234.437 2081.46,234.333 2082.03,232.881 2082.59,233.822 2083.16,234.842 2083.73,232.751 2084.3,232.542 2084.87,231.708 2085.44,232.489 2086,234.464 2086.57,232.187 2087.14,233.119 2087.71,235.034 2088.28,233.77 2088.85,234.534 2089.41,236.422 2089.98,235.966 2090.55,235.698 2091.12,238.414 2091.69,236.723 2092.26,236.196 2092.82,233.655 2093.39,232.388 2093.96,233.211 2094.53,231.82 2095.1,232.659 2095.67,232.541 2096.23,232.269 2096.8,230.946 2097.37,229.962 2097.94,229.787 2098.51,231.867 2099.08,230.875 2099.64,230.781 2100.21,229.902 2100.78,230.024 2101.35,230.225 2101.92,229.001 2102.49,229.26 2103.05,228.322 2103.62,229.382 2104.19,230.336 2104.76,231.263 2105.33,230.064 2105.9,230.22 2106.46,232.546 2107.03,232.258 2107.6,231.226 2108.17,231.18 2108.74,232.358 2109.31,231.165 2109.87,231.262 2110.44,231.207 2111.01,228.93 2111.58,229.107 2112.15,231.155 2112.72,231.097 2113.29,230.041 2113.85,231.089 2114.42,231.983 2114.99,232.085 2115.56,231.946 2116.13,231.868 2116.7,235.09 2117.26,235.867 2117.83,235.516 2118.4,234.938 2118.97,234.642 2119.54,235.504 2120.11,235.891 2120.67,234.487 2121.24,231.085 2121.81,231.013 2122.38,230.911 2122.95,228.92 2123.52,228.029 2124.08,226.12 2124.65,226.517 2125.22,225.717 2125.79,226.988 2126.36,226.138 2126.93,226.453 2127.49,227.776 2128.06,226.978 2128.63,225.31 2129.2,225.867 2129.77,226.333 2130.34,227.871 2130.9,227.102 2131.47,226.243 2132.04,227.691 2132.61,226.797 2133.18,226.992 2133.75,228.289 2134.31,227.295 2134.88,230.792 2135.45,231.871 2136.02,232.785 2136.59,233.652 2137.16,234.43 2137.72,234.231 2138.29,234.114 2138.86,232.677 2139.43,233.704 2140,233.509 2140.57,233.443 2141.13,234.532 2141.7,233.956 2142.27,233.889 2142.84,233.498 2143.41,232.051 2143.98,231.853 2144.54,231.83 2145.11,231.613 2145.68,232.503 2146.25,232.382 2146.82,231.054 2147.39,231.109 2147.95,230.067 2148.52,229.773 2149.09,228.769 2149.66,227.89 2150.23,227.79 2150.8,229.031 2151.36,228.891 2151.93,231.085 2152.5,230.955 2153.07,229.79 2153.64,228.932 2154.21,228.831 2154.77,227.687 2155.34,225.966 2155.91,226.147 2156.48,226.344 2157.05,226.255 2157.62,226.326 2158.18,226.74 2158.75,227.026 2159.32,227.179 2159.89,226.295 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.02 ± 0.025\n  with uncertainty of ± 0.002239803611433663\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0146 ± (0.00195713, 0.0020733) (MC)\n  95% confidence interval: [-4.01879, -4.01064] (MC)\n  linear error propagation: -4.01467 ± 0.00209844\n  |δ_y| = |0.00149836| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014597431587246, val_l = 0.004197283420288578, val_u = 0.003954320857324056)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip930\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip931\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip932\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.88 2211.02,1154.88 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,994.958 2211.02,994.958 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,835.04 2211.02,835.04 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,675.122 2211.02,675.122 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,515.203 2211.02,515.203 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,355.285 2211.02,355.285 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,195.367 2211.02,195.367 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.88 365.751,1154.88 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,994.958 365.751,994.958 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,835.04 365.751,835.04 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,675.122 365.751,675.122 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,515.203 365.751,515.203 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,355.285 365.751,355.285 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,195.367 365.751,195.367 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M298.909 1140.67 Q295.298 1140.67 293.469 1144.24 Q291.664 1147.78 291.664 1154.91 Q291.664 1162.02 293.469 1165.58 Q295.298 1169.12 298.909 1169.12 Q302.543 1169.12 304.349 1165.58 Q306.177 1162.02 306.177 1154.91 Q306.177 1147.78 304.349 1144.24 Q302.543 1140.67 298.909 1140.67 M298.909 1136.97 Q304.719 1136.97 307.775 1141.58 Q310.853 1146.16 310.853 1154.91 Q310.853 1163.64 307.775 1168.24 Q304.719 1172.83 298.909 1172.83 Q293.099 1172.83 290.02 1168.24 Q286.964 1163.64 286.964 1154.91 Q286.964 1146.16 290.02 1141.58 Q293.099 1136.97 298.909 1136.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M259.557 1008.3 L267.196 1008.3 L267.196 981.937 L258.886 983.604 L258.886 979.345 L267.15 977.678 L271.826 977.678 L271.826 1008.3 L279.465 1008.3 L279.465 1012.24 L259.557 1012.24 L259.557 1008.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 980.757 Q295.298 980.757 293.469 984.322 Q291.664 987.863 291.664 994.993 Q291.664 1002.1 293.469 1005.66 Q295.298 1009.21 298.909 1009.21 Q302.543 1009.21 304.349 1005.66 Q306.177 1002.1 306.177 994.993 Q306.177 987.863 304.349 984.322 Q302.543 980.757 298.909 980.757 M298.909 977.053 Q304.719 977.053 307.775 981.66 Q310.853 986.243 310.853 994.993 Q310.853 1003.72 307.775 1008.33 Q304.719 1012.91 298.909 1012.91 Q293.099 1012.91 290.02 1008.33 Q286.964 1003.72 286.964 994.993 Q286.964 986.243 290.02 981.66 Q293.099 977.053 298.909 977.053 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M262.775 848.385 L279.094 848.385 L279.094 852.32 L257.15 852.32 L257.15 848.385 Q259.812 845.63 264.395 841 Q269.002 836.348 270.182 835.005 Q272.428 832.482 273.307 830.746 Q274.21 828.987 274.21 827.297 Q274.21 824.542 272.266 822.806 Q270.344 821.07 267.242 821.07 Q265.043 821.07 262.59 821.834 Q260.159 822.598 257.381 824.149 L257.381 819.427 Q260.205 818.292 262.659 817.714 Q265.113 817.135 267.15 817.135 Q272.52 817.135 275.715 819.82 Q278.909 822.505 278.909 826.996 Q278.909 829.126 278.099 831.047 Q277.312 832.945 275.205 835.538 Q274.627 836.209 271.525 839.426 Q268.423 842.621 262.775 848.385 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 820.839 Q295.298 820.839 293.469 824.403 Q291.664 827.945 291.664 835.075 Q291.664 842.181 293.469 845.746 Q295.298 849.287 298.909 849.287 Q302.543 849.287 304.349 845.746 Q306.177 842.181 306.177 835.075 Q306.177 827.945 304.349 824.403 Q302.543 820.839 298.909 820.839 M298.909 817.135 Q304.719 817.135 307.775 821.741 Q310.853 826.325 310.853 835.075 Q310.853 843.801 307.775 848.408 Q304.719 852.991 298.909 852.991 Q293.099 852.991 290.02 848.408 Q286.964 843.801 286.964 835.075 Q286.964 826.325 290.02 821.741 Q293.099 817.135 298.909 817.135 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M272.914 673.767 Q276.27 674.485 278.145 676.754 Q280.043 679.022 280.043 682.355 Q280.043 687.471 276.525 690.272 Q273.006 693.073 266.525 693.073 Q264.349 693.073 262.034 692.633 Q259.742 692.216 257.289 691.36 L257.289 686.846 Q259.233 687.98 261.548 688.559 Q263.863 689.138 266.386 689.138 Q270.784 689.138 273.076 687.402 Q275.39 685.666 275.39 682.355 Q275.39 679.3 273.238 677.587 Q271.108 675.851 267.289 675.851 L263.261 675.851 L263.261 672.008 L267.474 672.008 Q270.923 672.008 272.752 670.642 Q274.58 669.254 274.58 666.661 Q274.58 663.999 272.682 662.587 Q270.807 661.152 267.289 661.152 Q265.367 661.152 263.168 661.568 Q260.969 661.985 258.33 662.865 L258.33 658.698 Q260.992 657.957 263.307 657.587 Q265.645 657.217 267.705 657.217 Q273.029 657.217 276.131 659.647 Q279.233 662.055 279.233 666.175 Q279.233 669.045 277.59 671.036 Q275.946 673.004 272.914 673.767 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 660.92 Q295.298 660.92 293.469 664.485 Q291.664 668.027 291.664 675.156 Q291.664 682.263 293.469 685.828 Q295.298 689.369 298.909 689.369 Q302.543 689.369 304.349 685.828 Q306.177 682.263 306.177 675.156 Q306.177 668.027 304.349 664.485 Q302.543 660.92 298.909 660.92 M298.909 657.217 Q304.719 657.217 307.775 661.823 Q310.853 666.406 310.853 675.156 Q310.853 683.883 307.775 688.49 Q304.719 693.073 298.909 693.073 Q293.099 693.073 290.02 688.49 Q286.964 683.883 286.964 675.156 Q286.964 666.406 290.02 661.823 Q293.099 657.217 298.909 657.217 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M271.594 501.997 L259.789 520.446 L271.594 520.446 L271.594 501.997 M270.367 497.923 L276.247 497.923 L276.247 520.446 L281.177 520.446 L281.177 524.335 L276.247 524.335 L276.247 532.483 L271.594 532.483 L271.594 524.335 L255.992 524.335 L255.992 519.821 L270.367 497.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 501.002 Q295.298 501.002 293.469 504.567 Q291.664 508.109 291.664 515.238 Q291.664 522.345 293.469 525.909 Q295.298 529.451 298.909 529.451 Q302.543 529.451 304.349 525.909 Q306.177 522.345 306.177 515.238 Q306.177 508.109 304.349 504.567 Q302.543 501.002 298.909 501.002 M298.909 497.298 Q304.719 497.298 307.775 501.905 Q310.853 506.488 310.853 515.238 Q310.853 523.965 307.775 528.571 Q304.719 533.155 298.909 533.155 Q293.099 533.155 290.02 528.571 Q286.964 523.965 286.964 515.238 Q286.964 506.488 290.02 501.905 Q293.099 497.298 298.909 497.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M258.793 338.005 L277.15 338.005 L277.15 341.94 L263.076 341.94 L263.076 350.413 Q264.094 350.065 265.113 349.903 Q266.131 349.718 267.15 349.718 Q272.937 349.718 276.316 352.889 Q279.696 356.061 279.696 361.477 Q279.696 367.056 276.224 370.158 Q272.752 373.236 266.432 373.236 Q264.256 373.236 261.988 372.866 Q259.742 372.496 257.335 371.755 L257.335 367.056 Q259.418 368.19 261.641 368.746 Q263.863 369.301 266.34 369.301 Q270.344 369.301 272.682 367.195 Q275.02 365.088 275.02 361.477 Q275.02 357.866 272.682 355.76 Q270.344 353.653 266.34 353.653 Q264.465 353.653 262.59 354.07 Q260.738 354.487 258.793 355.366 L258.793 338.005 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 341.084 Q295.298 341.084 293.469 344.649 Q291.664 348.19 291.664 355.32 Q291.664 362.426 293.469 365.991 Q295.298 369.533 298.909 369.533 Q302.543 369.533 304.349 365.991 Q306.177 362.426 306.177 355.32 Q306.177 348.19 304.349 344.649 Q302.543 341.084 298.909 341.084 M298.909 337.38 Q304.719 337.38 307.775 341.987 Q310.853 346.57 310.853 355.32 Q310.853 364.047 307.775 368.653 Q304.719 373.236 298.909 373.236 Q293.099 373.236 290.02 368.653 Q286.964 364.047 286.964 355.32 Q286.964 346.57 290.02 341.987 Q293.099 337.38 298.909 337.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M269.326 193.504 Q266.178 193.504 264.326 195.656 Q262.497 197.809 262.497 201.559 Q262.497 205.286 264.326 207.462 Q266.178 209.615 269.326 209.615 Q272.474 209.615 274.303 207.462 Q276.154 205.286 276.154 201.559 Q276.154 197.809 274.303 195.656 Q272.474 193.504 269.326 193.504 M278.608 178.851 L278.608 183.11 Q276.849 182.277 275.043 181.837 Q273.261 181.397 271.502 181.397 Q266.872 181.397 264.418 184.522 Q261.988 187.647 261.641 193.966 Q263.006 191.953 265.066 190.888 Q267.127 189.8 269.603 189.8 Q274.812 189.8 277.821 192.971 Q280.853 196.119 280.853 201.559 Q280.853 206.883 277.705 210.101 Q274.557 213.318 269.326 213.318 Q263.33 213.318 260.159 208.735 Q256.988 204.128 256.988 195.402 Q256.988 187.207 260.877 182.346 Q264.766 177.462 271.316 177.462 Q273.076 177.462 274.858 177.809 Q276.664 178.156 278.608 178.851 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 181.166 Q295.298 181.166 293.469 184.73 Q291.664 188.272 291.664 195.402 Q291.664 202.508 293.469 206.073 Q295.298 209.615 298.909 209.615 Q302.543 209.615 304.349 206.073 Q306.177 202.508 306.177 195.402 Q306.177 188.272 304.349 184.73 Q302.543 181.166 298.909 181.166 M298.909 177.462 Q304.719 177.462 307.775 182.068 Q310.853 186.652 310.853 195.402 Q310.853 204.128 307.775 208.735 Q304.719 213.318 298.909 213.318 Q293.099 213.318 290.02 208.735 Q286.964 204.128 286.964 195.402 Q286.964 186.652 290.02 182.068 Q293.099 177.462 298.909 177.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip932)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1161.42 400.199,1045.54 400.786,1158.89 401.372,1144.7 401.958,1130.05 402.545,1029.73 403.131,935.808 403.718,851.389 404.304,769.631 404.891,695.093 405.477,628.513 406.063,566.273 406.65,513.604 407.236,463.488 407.823,420.32 408.409,381.635 408.995,348.339 409.582,317.703 410.168,343.715 410.755,317.787 411.341,295.172 411.927,275.652 412.514,259.019 413.1,245.681 413.687,234.837 414.273,225.679 414.86,219.895 415.446,275.651 416.032,270.274 416.619,267.354 417.205,267.223 417.792,266.723 418.378,290.13 418.964,333.282 419.551,336.662 420.137,357.959 420.724,379.577 421.31,400.683 421.896,420.425 422.483,425.727 423.069,445.148 423.656,450.657 424.242,468.821 424.829,486.353 425.415,503.765 426.001,520.075 426.588,544.423 427.174,559.379 427.761,566.052 428.347,581.45 428.933,588.234 429.52,625.748 430.106,637.157 430.693,643.189 431.279,649.705 431.865,669.047 432.452,681.668 433.038,688.77 433.625,701.369 434.211,714.156 434.798,725.914 435.384,742.498 435.97,759.067 436.557,770.306 437.143,777.482 437.73,801.584 438.316,816.349 438.902,822.154 439.489,832.533 440.075,838.679 440.662,859.502 441.248,875.589 441.835,884.663 442.421,896.451 443.007,905.234 443.594,919.753 444.18,927.877 444.767,932.622 445.353,940.905 445.939,951.436 446.526,961.963 447.112,974.862 447.699,990.064 448.285,996.379 448.871,1002.95 449.458,1014.19 450.044,1017.66 450.631,1023.35 451.217,1026.46 451.804,1032.31 452.39,1038.11 452.976,1048.36 453.563,1051.36 454.149,1054.56 454.736,1060.35 455.322,1070.11 455.908,1075.21 456.495,1080.06 457.081,1082.76 457.668,1088.01 458.254,1092.85 458.84,1099.73 459.427,1102.46 460.013,1112.64 460.6,1120.17 461.186,1126.01 461.773,1133.36 462.359,1134.62 462.945,1135.94 463.532,1142.93 464.118,1144.17 464.705,1147.29 465.291,1150.45 465.877,1153.78 466.464,1155.07 467.05,1156.2 467.637,1162.16 468.223,1161.36 468.809,1162.47 469.396,1163.65 469.982,1163.01 470.569,1167.61 471.155,1170.67 471.742,1175.51 472.328,1178.19 472.914,1178.97 473.501,1181.72 474.087,1187.57 474.674,1191.08 475.26,1194.88 475.846,1195.29 476.433,1197.33 477.019,1197.81 477.606,1198.21 478.192,1201.53 478.778,1202.01 479.365,1205.43 479.951,1204.48 480.538,1206.46 481.124,1212.73 481.711,1215.55 482.297,1216.87 482.883,1218.25 483.47,1218.17 484.056,1216.78 484.643,1218.17 485.229,1224.02 485.815,1229.52 486.402,1228.94 486.988,1226.98 487.575,1226.76 488.161,1229.45 488.748,1230.64 489.334,1230.37 489.92,1232.6 490.507,1234.89 491.093,1232.75 491.68,1232.45 492.266,1234.93 492.852,1234.15 493.439,1236.72 494.025,1237.52 494.612,1237.15 495.198,1236.69 495.784,1236.25 496.371,1238.52 496.957,1235.17 497.544,1233.44 498.13,1235.81 498.717,1236.86 499.303,1240.56 499.889,1240.01 500.476,1240.94 501.062,1241.66 501.649,1242.32 502.235,1243.13 502.821,1242.56 503.408,1241.93 503.994,1244.07 504.581,1245.97 505.167,1246.56 505.753,1246.93 506.34,1247.64 506.926,1245.65 507.513,1244.98 508.099,1242.63 508.686,1242.08 509.272,1242.83 509.858,1241.12 510.445,1237.85 511.031,1234.68 511.618,1234.75 512.204,1236.33 512.79,1237.61 513.377,1241.42 513.963,1241.17 514.55,1239.61 515.136,1237.63 515.722,1241.27 516.309,1238.23 516.895,1238.11 517.482,1240.57 518.068,1242.99 518.655,1241.24 519.241,1237.9 519.827,1238.99 520.414,1240.18 521,1240.12 521.587,1242.56 522.173,1236.97 522.759,1235.73 523.346,1239.8 523.932,1239.32 524.519,1239.21 525.105,1240.76 525.691,1240.6 526.278,1244.5 526.864,1244.15 527.451,1246.37 528.037,1246.16 528.624,1247 529.21,1245.32 529.796,1245.01 530.383,1247.6 530.969,1246.98 531.556,1247.76 532.142,1250.1 532.728,1248.25 533.315,1247.63 533.901,1247.07 534.488,1243.83 535.074,1243.45 535.661,1245.85 536.247,1248.31 536.833,1247.66 537.42,1248.64 538.006,1248.22 538.593,1246.47 539.179,1246.13 539.765,1246.77 540.352,1247.23 540.938,1250.53 541.525,1248.64 542.111,1249 542.697,1248.59 543.284,1248.07 543.87,1246.23 544.457,1247.12 545.043,1246.63 545.63,1245.85 546.216,1244.09 546.802,1243.54 547.389,1240.2 547.975,1237.19 548.562,1238.46 549.148,1237.25 549.734,1239.7 550.321,1242.11 550.907,1242.95 551.494,1243.76 552.08,1241.79 552.666,1244.19 553.253,1239.81 553.839,1239.53 554.426,1243.22 555.012,1242.91 555.599,1242.27 556.185,1243.22 556.771,1244.14 557.358,1242.19 557.944,1245.59 558.531,1248.9 559.117,1245.77 559.703,1245.34 560.29,1246.3 560.876,1243.17 561.463,1243.92 562.049,1245.94 562.635,1245.69 563.222,1242.23 563.808,1241.94 564.395,1240.11 564.981,1240.87 565.568,1236.54 566.154,1236.21 566.74,1237.28 567.327,1238.41 567.913,1240.76 568.5,1241.7 569.086,1242.42 569.672,1240.42 570.259,1242.38 570.845,1241.87 571.432,1242.75 572.018,1241.17 572.605,1242.09 573.191,1243.01 573.777,1243.76 574.364,1244.65 574.95,1246.56 575.537,1245.76 576.123,1246.25 576.709,1242.94 577.296,1243.78 577.882,1241.83 578.469,1238.51 579.055,1239.47 579.641,1236.69 580.228,1236.29 580.814,1238.72 581.401,1238.37 581.987,1235.2 582.574,1234.74 583.16,1235.77 583.746,1238.45 584.333,1240.53 584.919,1239.9 585.506,1241.81 586.092,1241.37 586.678,1240.71 587.265,1242.66 587.851,1240.64 588.438,1240.06 589.024,1239.55 589.61,1237.82 590.197,1237.44 590.783,1237.07 591.37,1240.91 591.956,1239.03 592.543,1237.13 593.129,1238.11 593.715,1236.37 594.302,1234.64 594.888,1235.57 595.475,1237.76 596.061,1237.3 596.647,1238.11 597.234,1240.17 597.82,1241.05 598.407,1241.6 598.993,1243.63 599.579,1242.82 600.166,1241.95 600.752,1242.76 601.339,1243.39 601.925,1245.25 602.512,1244.47 603.098,1243.49 603.684,1245.43 604.271,1243.39 604.857,1243.89 605.444,1243.16 606.03,1242.36 606.616,1241.72 607.203,1238.35 607.789,1237.8 608.376,1234.96 608.962,1236.31 609.548,1236.08 610.135,1235.73 610.721,1236.49 611.308,1235.98 611.894,1233.01 612.481,1231.39 613.067,1230.97 613.653,1233.51 614.24,1234.53 614.826,1236.64 615.413,1237.3 615.999,1236.73 616.585,1236.14 617.172,1239.77 617.758,1237.87 618.345,1239.99 618.931,1239.49 619.518,1239.05 620.104,1238.43 620.69,1238.98 621.277,1239.36 621.863,1237.84 622.45,1235.65 623.036,1236.67 623.622,1236.35 624.209,1240.05 624.795,1239.54 625.382,1235.11 625.968,1232.23 626.554,1231.84 627.141,1230.07 627.727,1228.49 628.314,1227.24 628.9,1228.8 629.487,1228.54 630.073,1226.81 630.659,1226.89 631.246,1228.1 631.832,1228.22 632.419,1225.71 633.005,1230.1 633.591,1228.49 634.178,1225.55 634.764,1225.54 635.351,1226.78 635.937,1224.33 636.523,1223.23 637.11,1222.15 637.696,1223.58 638.283,1223.75 638.869,1223.88 639.456,1220.08 640.042,1221.88 640.628,1222.06 641.215,1222.48 641.801,1225.51 642.388,1227.08 642.974,1225.78 643.56,1225.87 644.147,1227.1 644.733,1225.85 645.32,1221.88 645.906,1223.35 646.492,1223.46 647.079,1225.03 647.665,1224.04 648.252,1224.01 648.838,1225.47 649.425,1225.5 650.011,1225.61 650.597,1224.39 651.184,1223.28 651.77,1222.27 652.357,1226.42 652.943,1223.66 653.529,1222.72 654.116,1223.18 654.702,1221.82 655.289,1224.91 655.875,1224.98 656.462,1224.75 657.048,1222.47 657.634,1224.02 658.221,1226.74 658.807,1226.61 659.394,1226.82 659.98,1228.24 660.566,1229.67 661.153,1226.8 661.739,1227.91 662.326,1227.84 662.912,1227.72 663.498,1230.4 664.085,1229.99 664.671,1229.62 665.258,1229.6 665.844,1231.86 666.431,1229.06 667.017,1227.34 667.603,1227.22 668.19,1227.11 668.776,1225.96 669.363,1225.96 669.949,1224.9 670.535,1226.31 671.122,1225.09 671.708,1225.17 672.295,1225.19 672.881,1225.08 673.467,1225.29 674.054,1224.25 674.64,1225.57 675.227,1224.17 675.813,1220.47 676.4,1220.78 676.986,1221.26 677.572,1223.91 678.159,1225.32 678.745,1223.17 679.332,1221.93 679.918,1220.64 680.504,1219.47 681.091,1221.26 681.677,1221.7 682.264,1223.34 682.85,1223.71 683.436,1223.44 684.023,1223.82 684.609,1224.15 685.196,1225.68 685.782,1225.73 686.369,1225.55 686.955,1228.47 687.541,1225.75 688.128,1228.13 688.714,1229.13 689.301,1229.09 689.887,1227.52 690.473,1229.95 691.06,1227.25 691.646,1229.93 692.233,1228.09 692.819,1227.93 693.405,1227.82 693.992,1228.84 694.578,1228.43 695.165,1231.02 695.751,1229.4 696.338,1231.84 696.924,1230.33 697.51,1229.94 698.097,1231.37 698.683,1231.07 699.27,1233.42 699.856,1234.4 700.442,1236.65 701.029,1235.22 701.615,1232.06 702.202,1230.36 702.788,1227.35 703.375,1226.02 703.961,1224.68 704.547,1227.32 705.134,1228.63 705.72,1228.45 706.307,1228.02 706.893,1227.79 707.479,1228.94 708.066,1233.76 708.652,1230.33 709.239,1228.75 709.825,1230.11 710.411,1229.54 710.998,1230.61 711.584,1227.83 712.171,1222.51 712.757,1225.29 713.344,1226.67 713.93,1230.33 714.516,1228.65 715.103,1226.95 715.689,1229.5 716.276,1225.14 716.862,1224.97 717.448,1222.22 718.035,1219.63 718.621,1221.26 719.208,1221.36 719.794,1220.18 720.38,1221.85 720.967,1223.16 721.553,1220.46 722.14,1220.78 722.726,1223.58 723.313,1224.85 723.899,1227.52 724.485,1225.83 725.072,1228.44 725.658,1226.83 726.245,1226.65 726.831,1226.36 727.417,1227.59 728.004,1231.1 728.59,1232.02 729.177,1232.78 729.763,1232.22 730.349,1230.49 730.936,1229.05 731.522,1227.35 732.109,1225.87 732.695,1226.07 733.282,1227.14 733.868,1226.75 734.454,1228.02 735.041,1231.64 735.627,1230.13 736.214,1227.14 736.8,1226.87 737.386,1225.41 737.973,1222.69 738.559,1221.66 739.146,1220.48 739.732,1220.97 740.318,1219.8 740.905,1219.82 741.491,1221.4 742.078,1221.23 742.664,1222.66 743.251,1222.57 743.837,1222.64 744.423,1221.43 745.01,1221.41 745.596,1219.8 746.183,1222.25 746.769,1219.59 747.355,1219.94 747.942,1219.08 748.528,1219.34 749.115,1219.39 749.701,1219.65 750.288,1217.2 750.874,1218.69 751.46,1221.63 752.047,1223.19 752.633,1224.76 753.22,1225.88 753.806,1226.93 754.392,1226.81 754.979,1226.56 755.565,1225.14 756.152,1223.53 756.738,1219.45 757.324,1219.61 757.911,1219.92 758.497,1219.89 759.084,1218.62 759.67,1220.34 760.257,1220.92 760.843,1222.24 761.429,1223.53 762.016,1224.74 762.602,1224.76 763.189,1224.92 763.775,1223.26 764.361,1222.09 764.948,1222.47 765.534,1222.36 766.121,1223.54 766.707,1222.12 767.293,1223.59 767.88,1223.66 768.466,1223.63 769.053,1222.32 769.639,1221.17 770.226,1222.42 770.812,1224.97 771.398,1222.05 771.985,1221.76 772.571,1223.23 773.158,1224.42 773.744,1224.13 774.33,1221.25 774.917,1223.61 775.503,1223.61 776.09,1222.26 776.676,1220.65 777.262,1220.66 777.849,1223.27 778.435,1223.21 779.022,1227.19 779.608,1230.69 780.195,1229.96 780.781,1229.37 781.367,1227.55 781.954,1226 782.54,1225.94 783.127,1224.49 783.713,1224.57 784.299,1227.1 784.886,1227.86 785.472,1226.02 786.059,1227.02 786.645,1229.13 787.232,1228.79 787.818,1228.75 788.404,1229.48 788.991,1229.17 789.577,1228.94 790.164,1224.7 790.75,1224.58 791.336,1222.77 791.923,1222.67 792.509,1226.34 793.096,1227.28 793.682,1225.62 794.268,1223.8 794.855,1223.67 795.441,1220.85 796.028,1222.72 796.614,1222.5 797.201,1219.8 797.787,1218.29 798.373,1215.97 798.96,1215.96 799.546,1217.45 800.133,1220.5 800.719,1220.92 801.305,1222.14 801.892,1220.77 802.478,1221.06 803.065,1222.28 803.651,1221.09 804.237,1220.89 804.824,1223.58 805.41,1224.5 805.997,1224.57 806.583,1221.74 807.17,1221.7 807.756,1221.73 808.342,1222.93 808.929,1221.43 809.515,1219.92 810.102,1220.24 810.688,1217.77 811.274,1218.1 811.861,1216.94 812.447,1215.78 813.034,1218.83 813.62,1219.09 814.206,1220.5 814.793,1221.61 815.379,1225.41 815.966,1228.94 816.552,1225.98 817.139,1224.34 817.725,1223.99 818.311,1223.68 818.898,1223.52 819.484,1226.24 820.071,1227.36 820.657,1225.76 821.243,1225.57 821.83,1226.67 822.416,1227.68 823.003,1231.39 823.589,1232.01 824.175,1232.77 824.762,1229.21 825.348,1230.06 825.935,1226.95 826.521,1226.72 827.108,1226.49 827.694,1224.74 828.28,1225.5 828.867,1225.25 829.453,1228.94 830.04,1228.47 830.626,1225.33 831.212,1223.72 831.799,1220.99 832.385,1218.14 832.972,1217.17 833.558,1218.71 834.145,1216.22 834.731,1213.95 835.317,1211.6 835.904,1212.16 836.49,1211.6 837.077,1210.93 837.663,1210.19 838.249,1209.42 838.836,1213.95 839.422,1212.9 840.009,1212.06 840.595,1212.58 841.181,1215.44 841.768,1216.98 842.354,1216.9 842.941,1219.86 843.527,1219.8 844.114,1221.35 844.7,1221.07 845.286,1220.86 845.873,1222.28 846.459,1220.68 847.046,1220.89 847.632,1221.09 848.218,1224.64 848.805,1224.69 849.391,1226.99 849.978,1224.13 850.564,1225.31 851.15,1222.41 851.737,1221.17 852.323,1219.87 852.91,1222.72 853.496,1221.3 854.083,1223.7 854.669,1223.68 855.255,1223.48 855.842,1222.07 856.428,1220.95 857.015,1223.72 857.601,1226.19 858.187,1227.56 858.774,1228.74 859.36,1225.47 859.947,1222.57 860.533,1222.71 861.119,1222.51 861.706,1221.52 862.292,1222.94 862.879,1224.44 863.465,1223.09 864.052,1224.27 864.638,1222.62 865.224,1220.09 865.811,1221.44 866.397,1221.36 866.984,1222.76 867.57,1224.26 868.156,1221.58 868.743,1222.81 869.329,1223.01 869.916,1224.21 870.502,1225.38 871.089,1225.24 871.675,1225.02 872.261,1222.25 872.848,1224.78 873.434,1224.1 874.021,1223.76 874.607,1223.27 875.193,1224.67 875.78,1224.58 876.366,1223.27 876.953,1225.88 877.539,1224.27 878.125,1226.81 878.712,1226.27 879.298,1224.43 879.885,1222.9 880.471,1222.78 881.058,1222.68 881.644,1223.82 882.23,1223.89 882.817,1226.59 883.403,1226.24 883.99,1226.14 884.576,1223.14 885.162,1220.48 885.749,1221.71 886.335,1223.09 886.922,1225.8 887.508,1221.43 888.094,1219.85 888.681,1214.75 889.267,1217.47 889.854,1216.31 890.44,1217.77 891.027,1216.85 891.613,1219.62 892.199,1220.97 892.786,1222.28 893.372,1221.13 893.959,1223.71 894.545,1223.46 895.131,1223.5 895.718,1226.28 896.304,1228.56 896.891,1229.1 897.477,1228.68 898.063,1229.44 898.65,1230.2 899.236,1228.04 899.823,1226.32 900.409,1226.03 900.996,1222.05 901.582,1220.58 902.168,1217.85 902.755,1219.34 903.341,1219.35 903.928,1220.68 904.514,1221.59 905.1,1221.48 905.687,1220.12 906.273,1220.18 906.86,1217.65 907.446,1218.95 908.032,1219.19 908.619,1220.58 909.205,1220.59 909.792,1216.72 910.378,1215.46 910.965,1217.02 911.551,1218.64 912.137,1219.82 912.724,1220.83 913.31,1222.01 913.897,1222 914.483,1222.16 915.069,1220.75 915.656,1219.53 916.242,1218.43 916.829,1225.02 917.415,1225.87 918.002,1224.27 918.588,1221.57 919.174,1221.36 919.761,1221.2 920.347,1221.07 920.934,1218.51 921.52,1219.82 922.106,1222.45 922.693,1222.41 923.279,1222.19 923.866,1221.05 924.452,1222.52 925.038,1222.53 925.625,1223.69 926.211,1223.64 926.798,1223.49 927.384,1223.29 927.971,1224.48 928.557,1222.66 929.143,1221.23 929.73,1221.19 930.316,1222.28 930.903,1219.53 931.489,1216.92 932.075,1217.06 932.662,1218.47 933.248,1215.9 933.835,1215.99 934.421,1215.95 935.007,1216.16 935.594,1216.4 936.18,1220.69 936.767,1217.99 937.353,1216.99 937.94,1217.12 938.526,1218.64 939.112,1218.74 939.699,1219.01 940.285,1219.16 940.872,1218.04 941.458,1218.1 942.044,1219.54 942.631,1218.2 943.217,1219.53 943.804,1221.08 944.39,1219.63 944.976,1223.42 945.563,1224.55 946.149,1223.11 946.736,1222.86 947.322,1222.68 947.909,1221.21 948.495,1222.23 949.081,1222.12 949.668,1223.43 950.254,1222.86 950.841,1223.96 951.427,1225.09 952.013,1223.72 952.6,1220.8 953.186,1219.43 953.773,1218.35 954.359,1218.56 954.945,1217.34 955.532,1219 956.118,1220.16 956.705,1222.89 957.291,1221.27 957.878,1222.61 958.464,1223.51 959.05,1224.63 959.637,1224.24 960.223,1225.05 960.81,1223.55 961.396,1226.06 961.982,1224.19 962.569,1222.76 963.155,1223.82 963.742,1225.1 964.328,1223.26 964.915,1224.44 965.501,1222.53 966.087,1222.35 966.674,1222.28 967.26,1219.84 967.847,1220.93 968.433,1221.97 969.019,1222.14 969.606,1220.73 970.192,1220.9 970.779,1218.13 971.365,1222.18 971.951,1221.82 972.538,1219.08 973.124,1220.3 973.711,1220.42 974.297,1220.45 974.884,1220.12 975.47,1223.06 976.056,1222.91 976.643,1223.01 977.229,1226.79 977.816,1226.64 978.402,1227.62 978.988,1227.14 979.575,1225.15 980.161,1225.93 980.748,1225.59 981.334,1226.51 981.92,1226.14 982.507,1225.76 983.093,1225.62 983.68,1224.38 984.266,1225.41 984.853,1225.07 985.439,1224.69 986.025,1222.07 986.612,1222.14 987.198,1219.23 987.785,1216.72 988.371,1212.97 988.957,1210.39 989.544,1209.6 990.13,1208.72 990.717,1206.89 991.303,1206.39 991.889,1208.59 992.476,1209.04 993.062,1210.95 993.649,1210.2 994.235,1210.83 994.822,1205.94 995.408,1203.88 995.994,1204.78 996.581,1206.83 997.167,1206.24 997.754,1208.22 998.34,1206.48 998.926,1208.41 999.513,1206.65 1000.1,1207.22 1000.69,1210.82 1001.27,1215.06 1001.86,1216.57 1002.44,1215.58 1003.03,1214.42 1003.62,1216.07 1004.2,1216.38 1004.79,1213.8 1005.38,1214.17 1005.96,1214.5 1006.55,1216.1 1007.14,1216.1 1007.72,1217.49 1008.31,1216.55 1008.9,1215.12 1009.48,1213.99 1010.07,1215.65 1010.65,1215.85 1011.24,1219.92 1011.83,1223.83 1012.41,1226.07 1013,1223.5 1013.59,1224.69 1014.17,1221.81 1014.76,1221.61 1015.35,1220.23 1015.93,1222.94 1016.52,1221.3 1017.11,1219.78 1017.69,1219.98 1018.28,1220.43 1018.86,1221.58 1019.45,1222.79 1020.04,1224.03 1020.62,1223.8 1021.21,1223.87 1021.8,1223.54 1022.38,1223.17 1022.97,1222.93 1023.56,1222.86 1024.14,1224.06 1024.73,1222.61 1025.32,1222.43 1025.9,1220.83 1026.49,1219.64 1027.07,1219.84 1027.66,1219.67 1028.25,1216.98 1028.83,1217.38 1029.42,1217.47 1030.01,1216.47 1030.59,1216.58 1031.18,1217.06 1031.77,1219.96 1032.35,1216.92 1032.94,1218.76 1033.52,1217.87 1034.11,1215.33 1034.7,1215.75 1035.28,1214.78 1035.87,1211.07 1036.46,1212.8 1037.04,1212.97 1037.63,1213.28 1038.22,1213.42 1038.8,1217.56 1039.39,1218.93 1039.98,1219.28 1040.56,1218.04 1041.15,1219.3 1041.73,1220.51 1042.32,1221.9 1042.91,1220.76 1043.49,1220.67 1044.08,1218.08 1044.67,1216.77 1045.25,1216.78 1045.84,1219.7 1046.43,1222.73 1047.01,1220.01 1047.6,1221.53 1048.19,1218.93 1048.77,1216.42 1049.36,1216.95 1049.94,1217.29 1050.53,1217.63 1051.12,1216.45 1051.7,1216.55 1052.29,1216.78 1052.88,1218.14 1053.46,1220.38 1054.05,1219.09 1054.64,1219.22 1055.22,1219.24 1055.81,1219.3 1056.39,1219.57 1056.98,1220.84 1057.57,1220.75 1058.15,1218.23 1058.74,1218.51 1059.33,1218.45 1059.91,1217.07 1060.5,1216.98 1061.09,1217.07 1061.67,1218.5 1062.26,1216.09 1062.85,1216.18 1063.43,1216.13 1064.02,1216.33 1064.6,1216.66 1065.19,1218.16 1065.78,1220.93 1066.36,1220.68 1066.95,1219.3 1067.54,1220.69 1068.12,1223.19 1068.71,1222.95 1069.3,1220.3 1069.88,1220.21 1070.47,1221.48 1071.06,1224.1 1071.64,1223.89 1072.23,1225.24 1072.81,1226.02 1073.4,1224.37 1073.99,1226.71 1074.57,1225.16 1075.16,1224.86 1075.75,1225.99 1076.33,1224.35 1076.92,1223.05 1077.51,1224.06 1078.09,1225.39 1078.68,1226.51 1079.26,1227.53 1079.85,1225.34 1080.44,1226.22 1081.02,1227.05 1081.61,1228.05 1082.2,1227.74 1082.78,1227.15 1083.37,1226.98 1083.96,1226.77 1084.54,1228.71 1085.13,1228.37 1085.72,1227.8 1086.3,1227.3 1086.89,1226.95 1087.47,1227.87 1088.06,1228.57 1088.65,1228.19 1089.23,1227.39 1089.82,1228.06 1090.41,1224.94 1090.99,1223.21 1091.58,1224.17 1092.17,1223.57 1092.75,1223.52 1093.34,1223.08 1093.93,1224.55 1094.51,1224.28 1095.1,1225.29 1095.68,1223.61 1096.27,1221.96 1096.86,1221.94 1097.44,1221.8 1098.03,1222.94 1098.62,1222.82 1099.2,1224.1 1099.79,1223.87 1100.38,1220.97 1100.96,1223.27 1101.55,1224.07 1102.14,1222.55 1102.72,1223.56 1103.31,1223.32 1103.89,1224.41 1104.48,1225.18 1105.07,1227.49 1105.65,1226.98 1106.24,1227.62 1106.83,1226.99 1107.41,1227.94 1108,1226.09 1108.59,1226.85 1109.17,1226.25 1109.76,1227 1110.34,1222.63 1110.93,1222.45 1111.52,1222.4 1112.1,1222.2 1112.69,1223.36 1113.28,1221.92 1113.86,1223.31 1114.45,1223.23 1115.04,1221.77 1115.62,1220.35 1116.21,1224.02 1116.8,1221.14 1117.38,1219.87 1117.97,1219.96 1118.55,1220.93 1119.14,1219.33 1119.73,1215.39 1120.31,1212.77 1120.9,1209.44 1121.49,1208.52 1122.07,1210.44 1122.66,1209.68 1123.25,1211.41 1123.83,1210.35 1124.42,1209.54 1125.01,1209.99 1125.59,1211.5 1126.18,1213.37 1126.76,1213.62 1127.35,1211.07 1127.94,1211.57 1128.52,1212.2 1129.11,1212.41 1129.7,1212.75 1130.28,1210.63 1130.87,1211.12 1131.46,1211.62 1132.04,1209.44 1132.63,1204.97 1133.21,1204.65 1133.8,1205.37 1134.39,1206.21 1134.97,1201.62 1135.56,1201.34 1136.15,1202.41 1136.73,1205.9 1137.32,1206.47 1137.91,1208.77 1138.49,1209.24 1139.08,1206.07 1139.67,1209.49 1140.25,1210.17 1140.84,1210.87 1141.42,1212.74 1142.01,1213.13 1142.6,1214.69 1143.18,1216.23 1143.77,1215.24 1144.36,1215.38 1144.94,1214.17 1145.53,1216.96 1146.12,1215.87 1146.7,1217.14 1147.29,1217.62 1147.88,1218.95 1148.46,1218.9 1149.05,1219.01 1149.63,1221.6 1150.22,1220.55 1150.81,1220.51 1151.39,1220.35 1151.98,1219.03 1152.57,1217.77 1153.15,1217.87 1153.74,1219.55 1154.33,1219.48 1154.91,1220.74 1155.5,1220.69 1156.09,1221.97 1156.67,1226.01 1157.26,1225.8 1157.84,1222.85 1158.43,1222.56 1159.02,1221.26 1159.6,1219.73 1160.19,1219.99 1160.78,1224.13 1161.36,1226.73 1161.95,1226.4 1162.54,1228.61 1163.12,1226.74 1163.71,1226.33 1164.29,1227.3 1164.88,1226.9 1165.47,1222.76 1166.05,1221.37 1166.64,1220 1167.23,1221.32 1167.81,1218.76 1168.4,1222.38 1168.99,1221.15 1169.57,1218.61 1170.16,1222.57 1170.75,1227.59 1171.33,1225.8 1171.92,1225.23 1172.5,1224.94 1173.09,1222.08 1173.68,1223.1 1174.26,1221.53 1174.85,1221.27 1175.44,1221.17 1176.02,1220.1 1176.61,1219.98 1177.2,1221.1 1177.78,1220.86 1178.37,1221.35 1178.96,1219.81 1179.54,1222.1 1180.13,1223.25 1180.71,1221.73 1181.3,1218.7 1181.89,1218.81 1182.47,1221.38 1183.06,1221.03 1183.65,1219.53 1184.23,1219.69 1184.82,1218.01 1185.41,1215.59 1185.99,1214.34 1186.58,1213.23 1187.16,1213.73 1187.75,1211.44 1188.34,1212.89 1188.92,1214.61 1189.51,1214.79 1190.1,1217.75 1190.68,1216.66 1191.27,1219.43 1191.86,1220.74 1192.44,1219.68 1193.03,1219.98 1193.62,1221.32 1194.2,1221.17 1194.79,1220.89 1195.37,1217.05 1195.96,1217.07 1196.55,1215.91 1197.13,1214.94 1197.72,1213.78 1198.31,1213.93 1198.89,1215.48 1199.48,1218.7 1200.07,1219 1200.65,1216.49 1201.24,1220.74 1201.83,1221.8 1202.41,1223 1203,1224.01 1203.58,1221.23 1204.17,1222.36 1204.76,1222.55 1205.34,1219.81 1205.93,1221.32 1206.52,1219.62 1207.1,1217.27 1207.69,1217.36 1208.28,1216.05 1208.86,1218.73 1209.45,1218.72 1210.03,1221.49 1210.62,1221.07 1211.21,1222.17 1211.79,1224.77 1212.38,1224.42 1212.97,1222.61 1213.55,1223.86 1214.14,1222.06 1214.73,1221.95 1215.31,1219.14 1215.9,1215.5 1216.49,1217.21 1217.07,1218.78 1217.66,1220.4 1218.24,1220.48 1218.83,1220.75 1219.42,1223.31 1220,1221.77 1220.59,1222.89 1221.18,1222.61 1221.76,1221.07 1222.35,1220.93 1222.94,1219.85 1223.52,1222.2 1224.11,1223.22 1224.7,1221.57 1225.28,1220.28 1225.87,1220.06 1226.45,1221.51 1227.04,1222.73 1227.63,1223.67 1228.21,1221.9 1228.8,1219.62 1229.39,1219.57 1229.97,1220.89 1230.56,1219.59 1231.15,1216.92 1231.73,1216.82 1232.32,1216.78 1232.91,1217.04 1233.49,1215.85 1234.08,1213.49 1234.66,1212.54 1235.25,1211.41 1235.84,1210.48 1236.42,1209.83 1237.01,1209.91 1237.6,1210.37 1238.18,1211.87 1238.77,1213.64 1239.36,1215.34 1239.94,1216.81 1240.53,1219.46 1241.11,1226.25 1241.7,1227.07 1242.29,1225.38 1242.87,1222.58 1243.46,1222.16 1244.05,1222.89 1244.63,1222.54 1245.22,1221.02 1245.81,1222.23 1246.39,1219.52 1246.98,1215.57 1247.57,1217.2 1248.15,1215.93 1248.74,1216.35 1249.32,1217.95 1249.91,1217.92 1250.5,1217.95 1251.08,1216.6 1251.67,1216.76 1252.26,1215.51 1252.84,1216.91 1253.43,1219.4 1254.02,1219.44 1254.6,1219.52 1255.19,1220.83 1255.78,1222 1256.36,1225.57 1256.95,1225.2 1257.53,1226.32 1258.12,1228.54 1258.71,1226.72 1259.29,1223.9 1259.88,1226.09 1260.47,1227.29 1261.05,1226.77 1261.64,1226.31 1262.23,1225.76 1262.81,1222.58 1263.4,1222.38 1263.98,1223.57 1264.57,1220.75 1265.16,1216.83 1265.74,1217.92 1266.33,1219.23 1266.92,1219.3 1267.5,1219.14 1268.09,1219.13 1268.68,1220.03 1269.26,1219.79 1269.85,1221.12 1270.44,1222.31 1271.02,1222.34 1271.61,1220.89 1272.19,1220.68 1272.78,1219.11 1273.37,1215.33 1273.95,1215.7 1274.54,1213.46 1275.13,1214.82 1275.71,1213.78 1276.3,1215.48 1276.89,1214.59 1277.47,1214.69 1278.06,1214.7 1278.65,1213.52 1279.23,1216.54 1279.82,1217.98 1280.4,1220.44 1280.99,1218.74 1281.58,1216.21 1282.16,1219.07 1282.75,1220.66 1283.34,1220.56 1283.92,1216.63 1284.51,1217.85 1285.1,1217.96 1285.68,1219 1286.27,1217.68 1286.86,1221.71 1287.44,1223.87 1288.03,1226.23 1288.61,1224.77 1289.2,1222.89 1289.79,1222.6 1290.37,1221.16 1290.96,1225.07 1291.55,1224.75 1292.13,1223.23 1292.72,1222.74 1293.31,1221.29 1293.89,1220.02 1294.48,1218.5 1295.06,1220.07 1295.65,1220.15 1296.24,1217.73 1296.82,1217.7 1297.41,1217.72 1298,1217.54 1298.58,1216.08 1299.17,1213.57 1299.76,1217.86 1300.34,1218.94 1300.93,1222.76 1301.52,1221.24 1302.1,1221.12 1302.69,1219.79 1303.27,1221.31 1303.86,1221.2 1304.45,1222.17 1305.03,1221.93 1305.62,1224.36 1306.21,1224.21 1306.79,1226.7 1307.38,1225.42 1307.97,1227.63 1308.55,1227.41 1309.14,1225.54 1309.73,1226.12 1310.31,1225.9 1310.9,1226.9 1311.48,1225.21 1312.07,1223.65 1312.66,1224.36 1313.24,1223.89 1313.83,1222.31 1314.42,1219.38 1315,1219.41 1315.59,1216.73 1316.18,1215.48 1316.76,1215.79 1317.35,1214.56 1317.93,1213.4 1318.52,1213.92 1319.11,1215.56 1319.69,1217.04 1320.28,1214.49 1320.87,1214.75 1321.45,1216.19 1322.04,1215.4 1322.63,1214.47 1323.21,1213.54 1323.8,1216.41 1324.39,1215.48 1324.97,1214.52 1325.56,1212.2 1326.14,1215.46 1326.73,1217.03 1327.32,1221.12 1327.9,1221.21 1328.49,1222.54 1329.08,1223.43 1329.66,1223.29 1330.25,1225.78 1330.84,1224.04 1331.42,1224.8 1332.01,1221.88 1332.6,1221.85 1333.18,1221.56 1333.77,1221.56 1334.35,1220.33 1334.94,1219.21 1335.53,1219.39 1336.11,1218.38 1336.7,1217.12 1337.29,1216.12 1337.87,1216.37 1338.46,1213.97 1339.05,1214.13 1339.63,1214.36 1340.22,1214.5 1340.8,1214.73 1341.39,1216.01 1341.98,1217.48 1342.56,1216.35 1343.15,1215.23 1343.74,1219.48 1344.32,1220.94 1344.91,1219.46 1345.5,1220.86 1346.08,1216.01 1346.67,1217.34 1347.26,1218.88 1347.84,1216.13 1348.43,1216.35 1349.01,1214.01 1349.6,1214.25 1350.19,1214.47 1350.77,1214.88 1351.36,1220.22 1351.95,1219.95 1352.53,1221.19 1353.12,1224.94 1353.71,1222.96 1354.29,1218.68 1354.88,1221.09 1355.47,1222.37 1356.05,1223.61 1356.64,1224.62 1357.22,1223 1357.81,1218.86 1358.4,1218.95 1358.98,1219.09 1359.57,1219.01 1360.16,1219.27 1360.74,1220.48 1361.33,1220.65 1361.92,1219.13 1362.5,1218.95 1363.09,1216.48 1363.68,1216.52 1364.26,1217.82 1364.85,1219.42 1365.43,1219.69 1366.02,1218.38 1366.61,1218.48 1367.19,1217.34 1367.78,1218.84 1368.37,1218.76 1368.95,1220.16 1369.54,1218.97 1370.13,1222.97 1370.71,1222.95 1371.3,1221.44 1371.88,1221.27 1372.47,1218.41 1373.06,1219.86 1373.64,1221.32 1374.23,1218.49 1374.82,1215.52 1375.4,1215.91 1375.99,1214.58 1376.58,1213.72 1377.16,1214.06 1377.75,1215.57 1378.34,1216.11 1378.92,1215.08 1379.51,1215.3 1380.09,1213.06 1380.68,1214.61 1381.27,1213.4 1381.85,1213.75 1382.44,1215.35 1383.03,1215.4 1383.61,1215.49 1384.2,1217.14 1384.79,1217.44 1385.37,1216.32 1385.96,1216.47 1386.55,1216.71 1387.13,1217 1387.72,1213.06 1388.3,1214.71 1388.89,1215.09 1389.48,1215.54 1390.06,1215.7 1390.65,1219.77 1391.24,1218.7 1391.82,1221.15 1392.41,1220.9 1393,1223.4 1393.58,1224.77 1394.17,1223.28 1394.75,1223.04 1395.34,1224.07 1395.93,1226.27 1396.51,1229.89 1397.1,1231.86 1397.69,1228.71 1398.27,1226.82 1398.86,1225.27 1399.45,1223.63 1400.03,1221.98 1400.62,1225.75 1401.21,1225.31 1401.79,1226.19 1402.38,1226.92 1402.96,1225.37 1403.55,1224.91 1404.14,1224.29 1404.72,1224.17 1405.31,1222.44 1405.9,1223.41 1406.48,1220.56 1407.07,1221.74 1407.66,1220.3 1408.24,1216.32 1408.83,1218.74 1409.42,1218.86 1410,1218.96 1410.59,1217.55 1411.17,1218.96 1411.76,1220.13 1412.35,1218.62 1412.93,1218.92 1413.52,1217.6 1414.11,1218.91 1414.69,1221.6 1415.28,1221.07 1415.87,1223.6 1416.45,1219.4 1417.04,1219.12 1417.63,1218.89 1418.21,1215.23 1418.8,1215.49 1419.38,1215.4 1419.97,1214.32 1420.56,1214.51 1421.14,1215.89 1421.73,1218.69 1422.32,1217.48 1422.9,1216.16 1423.49,1215.01 1424.08,1217.88 1424.66,1219.02 1425.25,1222.86 1425.83,1221.42 1426.42,1222.77 1427.01,1222.48 1427.59,1224.89 1428.18,1222.23 1428.77,1221.02 1429.35,1219.5 1429.94,1219.62 1430.53,1218.21 1431.11,1218.33 1431.7,1219.62 1432.29,1220.95 1432.87,1224.64 1433.46,1225.63 1434.04,1226.79 1434.63,1226.29 1435.22,1224.56 1435.8,1222.83 1436.39,1223.89 1436.98,1222.31 1437.56,1219.54 1438.15,1215.88 1438.74,1210.95 1439.32,1212.61 1439.91,1214.07 1440.5,1215.82 1441.08,1218.56 1441.67,1217.18 1442.25,1215.83 1442.84,1217.55 1443.43,1220.17 1444.01,1222.8 1444.6,1225.27 1445.19,1227.4 1445.77,1228.25 1446.36,1227.75 1446.95,1227.33 1447.53,1224.06 1448.12,1225.32 1448.7,1223.84 1449.29,1224.99 1449.88,1224.93 1450.46,1224.86 1451.05,1226 1451.64,1225.94 1452.22,1221.9 1452.81,1222.68 1453.4,1222.62 1453.98,1222.45 1454.57,1222.18 1455.16,1224.62 1455.74,1227.09 1456.33,1227.96 1456.91,1227.73 1457.5,1227.26 1458.09,1225.39 1458.67,1224.06 1459.26,1222.76 1459.85,1221.29 1460.43,1222.57 1461.02,1219.67 1461.61,1219.57 1462.19,1216.97 1462.78,1217.19 1463.37,1219.86 1463.95,1222.56 1464.54,1222.7 1465.12,1222.81 1465.71,1223.97 1466.3,1225.01 1466.88,1223.22 1467.47,1219.1 1468.06,1217.68 1468.64,1217.66 1469.23,1219.06 1469.82,1213.92 1470.4,1212.88 1470.99,1211.81 1471.57,1212.13 1472.16,1213.65 1472.75,1216.51 1473.33,1218.08 1473.92,1221.01 1474.51,1219.43 1475.09,1218.18 1475.68,1217.84 1476.27,1220.63 1476.85,1220.56 1477.44,1215.41 1478.03,1212.94 1478.61,1210.79 1479.2,1211.17 1479.78,1211.8 1480.37,1212.43 1480.96,1212.98 1481.54,1211.99 1482.13,1214.98 1482.72,1214 1483.3,1214.01 1483.89,1214.3 1484.48,1216.18 1485.06,1217.45 1485.65,1219.93 1486.24,1220.05 1486.82,1220.21 1487.41,1219.19 1487.99,1224.34 1488.58,1221.76 1489.17,1225.82 1489.75,1228.17 1490.34,1228.98 1490.93,1225.81 1491.51,1223.11 1492.1,1224.34 1492.69,1223.9 1493.27,1226.25 1493.86,1227.04 1494.45,1228.37 1495.03,1227.75 1495.62,1224.73 1496.2,1221.88 1496.79,1222.94 1497.38,1223.86 1497.96,1220.53 1498.55,1220.41 1499.14,1220.32 1499.72,1215.93 1500.31,1213.52 1500.9,1211.15 1501.48,1211.4 1502.07,1211.9 1502.65,1210.71 1503.24,1209.97 1503.83,1209.27 1504.41,1208.57 1505,1207.92 1505.59,1210.05 1506.17,1211.99 1506.76,1213.69 1507.35,1212.49 1507.93,1214.29 1508.52,1214.42 1509.11,1214.77 1509.69,1209.68 1510.28,1207.63 1510.86,1207.23 1511.45,1209.29 1512.04,1210.03 1512.62,1213.22 1513.21,1216.09 1513.8,1216.46 1514.38,1220.5 1514.97,1219.23 1515.56,1220.53 1516.14,1220.67 1516.73,1218.12 1517.32,1219.22 1517.9,1220.79 1518.49,1220.63 1519.07,1220.71 1519.66,1222.02 1520.25,1223.34 1520.83,1220.58 1521.42,1221.6 1522.01,1221.35 1522.59,1222.6 1523.18,1223.93 1523.77,1224.99 1524.35,1223.51 1524.94,1222.97 1525.52,1222.9 1526.11,1222.68 1526.7,1222.16 1527.28,1222.14 1527.87,1223.36 1528.46,1220.5 1529.04,1218.97 1529.63,1218.99 1530.22,1218.8 1530.8,1217.36 1531.39,1216.28 1531.98,1218.83 1532.56,1220.02 1533.15,1218.82 1533.73,1217.39 1534.32,1218.95 1534.91,1219.05 1535.49,1220.27 1536.08,1220.25 1536.67,1218.92 1537.25,1216.34 1537.84,1215.15 1538.43,1217.82 1539.01,1216.68 1539.6,1217.14 1540.19,1215.69 1540.77,1218.4 1541.36,1215.75 1541.94,1216.1 1542.53,1216.37 1543.12,1215.13 1543.7,1216.76 1544.29,1216.98 1544.88,1217.32 1545.46,1217.37 1546.05,1214.89 1546.64,1216.61 1547.22,1216.7 1547.81,1216.65 1548.4,1217 1548.98,1216.97 1549.57,1216.96 1550.15,1221.27 1550.74,1215.9 1551.33,1214.73 1551.91,1211.37 1552.5,1211.64 1553.09,1212.11 1553.67,1212.41 1554.26,1215.52 1554.85,1215.64 1555.43,1215.85 1556.02,1215.93 1556.6,1217.2 1557.19,1217.18 1557.78,1216.01 1558.36,1216.31 1558.95,1216.49 1559.54,1216.77 1560.12,1219.61 1560.71,1219.83 1561.3,1222.37 1561.88,1222.39 1562.47,1222.26 1563.06,1221.99 1563.64,1220.46 1564.23,1219.15 1564.81,1220.44 1565.4,1220.31 1565.99,1220.31 1566.57,1218.62 1567.16,1217.51 1567.75,1219.02 1568.33,1217.93 1568.92,1217.95 1569.51,1219.01 1570.09,1218.84 1570.68,1217.49 1571.27,1216.36 1571.85,1215.15 1572.44,1216.83 1573.02,1219.5 1573.61,1219.21 1574.2,1220.31 1574.78,1218.95 1575.37,1221.5 1575.96,1216.05 1576.54,1216.32 1577.13,1216.48 1577.72,1216.54 1578.3,1213.84 1578.89,1214.33 1579.47,1218.42 1580.06,1219.96 1580.65,1221.39 1581.23,1222.31 1581.82,1222.15 1582.41,1220.9 1582.99,1222.05 1583.58,1221.85 1584.17,1223.05 1584.75,1226.88 1585.34,1226.59 1585.93,1225.12 1586.51,1223.68 1587.1,1218.41 1587.68,1222.25 1588.27,1222.15 1588.86,1223.18 1589.44,1221.85 1590.03,1220.47 1590.62,1221.78 1591.2,1221.56 1591.79,1220.12 1592.38,1221.13 1592.96,1220.95 1593.55,1219.64 1594.14,1218.3 1594.72,1218.28 1595.31,1216.87 1595.89,1219.84 1596.48,1218.36 1597.07,1219.63 1597.65,1219.6 1598.24,1218.27 1598.83,1216.78 1599.41,1217.8 1600,1217.71 1600.59,1217.85 1601.17,1217.95 1601.76,1220.93 1602.34,1219.2 1602.93,1219.1 1603.52,1221.46 1604.1,1221.39 1604.69,1222.47 1605.28,1222.1 1605.86,1220.79 1606.45,1220.98 1607.04,1219.61 1607.62,1220.94 1608.21,1222.36 1608.8,1221.95 1609.38,1220.63 1609.97,1223.1 1610.55,1224.25 1611.14,1220.47 1611.73,1217.91 1612.31,1219 1612.9,1216.23 1613.49,1217.3 1614.07,1217.1 1614.66,1217.45 1615.25,1217.55 1615.83,1217.94 1616.42,1219.22 1617.01,1220.5 1617.59,1221.91 1618.18,1219.03 1618.76,1219.01 1619.35,1217.79 1619.94,1219.2 1620.52,1220.46 1621.11,1221.69 1621.7,1220.42 1622.28,1218.83 1622.87,1223.77 1623.46,1223.53 1624.04,1223.01 1624.63,1222.66 1625.22,1222.43 1625.8,1224.78 1626.39,1224.28 1626.97,1225.03 1627.56,1224.58 1628.15,1223.02 1628.73,1222.82 1629.32,1225.17 1629.91,1222.27 1630.49,1223.45 1631.08,1226.8 1631.67,1221.33 1632.25,1221.21 1632.84,1219.84 1633.42,1218.54 1634.01,1217.08 1634.6,1216.16 1635.18,1216.64 1635.77,1218.13 1636.36,1216.98 1636.94,1214.52 1637.53,1211.12 1638.12,1214.09 1638.7,1215.89 1639.29,1214.58 1639.88,1217.24 1640.46,1217.32 1641.05,1218.81 1641.63,1220.18 1642.22,1219.96 1642.81,1223.83 1643.39,1222.25 1643.98,1222.08 1644.57,1217.96 1645.15,1219.37 1645.74,1219.51 1646.33,1219.6 1646.91,1219.63 1647.5,1220.86 1648.09,1215.77 1648.67,1215.84 1649.26,1213.58 1649.84,1212.52 1650.43,1212.71 1651.02,1214.19 1651.6,1212.99 1652.19,1214.23 1652.78,1215.88 1653.36,1218.78 1653.95,1218.61 1654.54,1217.29 1655.12,1219.92 1655.71,1221.25 1656.29,1222.28 1656.88,1219.55 1657.47,1222.24 1658.05,1219.53 1658.64,1218.14 1659.23,1219.46 1659.81,1215.34 1660.4,1215.46 1660.99,1214.19 1661.57,1216.81 1662.16,1215.54 1662.75,1215.64 1663.33,1215.91 1663.92,1216.21 1664.5,1216.26 1665.09,1217.43 1665.68,1217.4 1666.26,1220.34 1666.85,1220.24 1667.44,1217.76 1668.02,1217.89 1668.61,1219.31 1669.2,1217.72 1669.78,1215.3 1670.37,1214.13 1670.96,1214.08 1671.54,1213.18 1672.13,1213.48 1672.71,1214.84 1673.3,1216.35 1673.89,1221.81 1674.47,1222.87 1675.06,1219.97 1675.65,1223.73 1676.23,1224.84 1676.82,1223.42 1677.41,1223.24 1677.99,1226.81 1678.58,1226.45 1679.17,1223.5 1679.75,1221.84 1680.34,1220.66 1680.92,1223.13 1681.51,1224.4 1682.1,1223.84 1682.68,1223.58 1683.27,1223.24 1683.86,1222.79 1684.44,1221.2 1685.03,1218.4 1685.62,1215.93 1686.2,1217.41 1686.79,1217.7 1687.37,1217.89 1687.96,1218.04 1688.55,1216.76 1689.13,1217.18 1689.72,1217.31 1690.31,1217.34 1690.89,1217.76 1691.48,1216.6 1692.07,1216.79 1692.65,1217.24 1693.24,1216.07 1693.83,1217.61 1694.41,1220.22 1695,1221.31 1695.58,1220.86 1696.17,1220.67 1696.76,1220.48 1697.34,1221.65 1697.93,1222.7 1698.52,1222.73 1699.1,1223.77 1699.69,1223.4 1700.28,1223.2 1700.86,1224.39 1701.45,1225.52 1702.04,1224.77 1702.62,1225.18 1703.21,1222.1 1703.79,1222.03 1704.38,1218.98 1704.97,1217.64 1705.55,1219.03 1706.14,1219.05 1706.73,1218.14 1707.31,1219.51 1707.9,1220.69 1708.49,1219.3 1709.07,1217.96 1709.66,1219.29 1710.24,1220.58 1710.83,1217.88 1711.42,1217.65 1712,1215.87 1712.59,1216.15 1713.18,1214.92 1713.76,1216.39 1714.35,1215.24 1714.94,1214.05 1715.52,1215.71 1716.11,1215.85 1716.7,1217.45 1717.28,1217.73 1717.87,1217.77 1718.45,1220.21 1719.04,1219.98 1719.63,1219.65 1720.21,1220.82 1720.8,1220.63 1721.39,1218.02 1721.97,1218.02 1722.56,1218.24 1723.15,1218.51 1723.73,1219.67 1724.32,1221.18 1724.91,1221.07 1725.49,1220.9 1726.08,1222.24 1726.66,1223.23 1727.25,1223.27 1727.84,1224.46 1728.42,1225.23 1729.01,1223.59 1729.6,1224.74 1730.18,1225.82 1730.77,1226.57 1731.36,1224.82 1731.94,1224.76 1732.53,1223.15 1733.11,1225.51 1733.7,1225.43 1734.29,1224.03 1734.87,1223.5 1735.46,1219.39 1736.05,1218.47 1736.63,1218.56 1737.22,1220.27 1737.81,1220.17 1738.39,1218.88 1738.98,1217.64 1739.57,1217.63 1740.15,1220.44 1740.74,1221.73 1741.32,1221.44 1741.91,1217.41 1742.5,1214.84 1743.08,1214.98 1743.67,1216.58 1744.26,1216.72 1744.84,1218.08 1745.43,1219.48 1746.02,1215.58 1746.6,1213.1 1747.19,1214.87 1747.78,1215.31 1748.36,1215.75 1748.95,1216.11 1749.53,1213.58 1750.12,1213.88 1750.71,1214.24 1751.29,1214.29 1751.88,1213.45 1752.47,1211.35 1753.05,1209.24 1753.64,1209.77 1754.23,1207.73 1754.81,1207.13 1755.4,1210.32 1755.99,1212.11 1756.57,1211.08 1757.16,1212.74 1757.74,1211.93 1758.33,1212.63 1758.92,1214.33 1759.5,1213.56 1760.09,1211.29 1760.68,1210.54 1761.26,1212.29 1761.85,1212.63 1762.44,1213.46 1763.02,1212.81 1763.61,1213.14 1764.19,1213.31 1764.78,1214.97 1765.37,1215.16 1765.95,1216.63 1766.54,1216.71 1767.13,1216.8 1767.71,1216.91 1768.3,1215.67 1768.89,1216.99 1769.47,1217.17 1770.06,1216.88 1770.65,1216.91 1771.23,1218.36 1771.82,1219.94 1772.4,1219.88 1772.99,1219.82 1773.58,1222.39 1774.16,1223.59 1774.75,1220.71 1775.34,1220.77 1775.92,1222.02 1776.51,1222.13 1777.1,1220.78 1777.68,1220.6 1778.27,1219.29 1778.86,1219.32 1779.44,1224.85 1780.03,1224.33 1780.61,1224.31 1781.2,1226.39 1781.79,1227.34 1782.37,1225.99 1782.96,1227.04 1783.55,1226.73 1784.13,1225.19 1784.72,1224.7 1785.31,1225.61 1785.89,1223.96 1786.48,1227.82 1787.06,1226.1 1787.65,1225.44 1788.24,1224.98 1788.82,1223.27 1789.41,1226.95 1790,1226.46 1790.58,1226.25 1791.17,1227.1 1791.76,1227.87 1792.34,1228.45 1792.93,1229.36 1793.52,1225.06 1794.1,1224.59 1794.69,1223.03 1795.27,1224.08 1795.86,1223.76 1796.45,1223.35 1797.03,1221.62 1797.62,1221.42 1798.21,1220.16 1798.79,1221.78 1799.38,1221.55 1799.97,1220.09 1800.55,1218.92 1801.14,1217.34 1801.73,1215.29 1802.31,1215 1802.9,1216.34 1803.48,1216.83 1804.07,1216.91 1804.66,1217.02 1805.24,1217.33 1805.83,1218.78 1806.42,1218.63 1807,1218.78 1807.59,1217.39 1808.18,1214.94 1808.76,1212.47 1809.35,1212.77 1809.94,1214.55 1810.52,1215.98 1811.11,1216.09 1811.69,1217.42 1812.28,1216.33 1812.87,1211.34 1813.45,1210.37 1814.04,1208.33 1814.63,1209.14 1815.21,1210.82 1815.8,1212.6 1816.39,1211.52 1816.97,1212.04 1817.56,1212.49 1818.14,1212.75 1818.73,1214.35 1819.32,1214.54 1819.9,1213.34 1820.49,1212.42 1821.08,1209.03 1821.66,1210.74 1822.25,1211.11 1822.84,1211.78 1823.42,1212.56 1824.01,1212.75 1824.6,1211.91 1825.18,1216.23 1825.77,1216.36 1826.35,1216.72 1826.94,1217.03 1827.53,1218.22 1828.11,1219.56 1828.7,1219.14 1829.29,1216.66 1829.87,1218.02 1830.46,1218.02 1831.05,1219.18 1831.63,1217.76 1832.22,1219.12 1832.81,1218.82 1833.39,1221.56 1833.98,1218.84 1834.56,1217.6 1835.15,1217.77 1835.74,1219.11 1836.32,1219.44 1836.91,1217.97 1837.5,1220.49 1838.08,1221.86 1838.67,1220.3 1839.26,1220.02 1839.84,1222.68 1840.43,1222.46 1841.01,1222.22 1841.6,1224.66 1842.19,1226.91 1842.77,1226.3 1843.36,1224.61 1843.95,1225.56 1844.53,1225.4 1845.12,1223.78 1845.71,1224.68 1846.29,1224.57 1846.88,1224.35 1847.47,1226.6 1848.05,1222.37 1848.64,1222.13 1849.22,1221.91 1849.81,1221.51 1850.4,1223.65 1850.98,1224.54 1851.57,1218.99 1852.16,1218.95 1852.74,1216.4 1853.33,1215.25 1853.92,1216.6 1854.5,1213.99 1855.09,1211.36 1855.68,1210.25 1856.26,1212.24 1856.85,1212.82 1857.43,1214.75 1858.02,1213.86 1858.61,1214.07 1859.19,1214.44 1859.78,1216.3 1860.37,1216.51 1860.95,1212.86 1861.54,1213.11 1862.13,1214.78 1862.71,1216.33 1863.3,1215.22 1863.88,1215.43 1864.47,1214.36 1865.06,1218.79 1865.64,1216.43 1866.23,1217.73 1866.82,1220.55 1867.4,1220.61 1867.99,1221.63 1868.58,1224.14 1869.16,1223.77 1869.75,1222.13 1870.34,1224.88 1870.92,1223.6 1871.51,1224.49 1872.09,1222.78 1872.68,1224.21 1873.27,1219.92 1873.85,1219.74 1874.44,1219.84 1875.03,1218.58 1875.61,1215.96 1876.2,1218.47 1876.79,1220.88 1877.37,1220.91 1877.96,1220.8 1878.55,1219.4 1879.13,1219.34 1879.72,1219.12 1880.3,1215.02 1880.89,1216.64 1881.48,1218.14 1882.06,1218.02 1882.65,1218.08 1883.24,1218.29 1883.82,1216.89 1884.41,1216.83 1885,1218.2 1885.58,1222.14 1886.17,1223.29 1886.76,1224.52 1887.34,1226.96 1887.93,1224.04 1888.51,1224.94 1889.1,1227.19 1889.69,1225.52 1890.27,1225.19 1890.86,1225.88 1891.45,1228.18 1892.03,1226.46 1892.62,1227.32 1893.21,1226.88 1893.79,1226.17 1894.38,1224.51 1894.96,1224.46 1895.55,1223.26 1896.14,1221.99 1896.72,1221.99 1897.31,1222.92 1897.9,1226.45 1898.48,1228.76 1899.07,1226.51 1899.66,1227.41 1900.24,1226.79 1900.83,1227.5 1901.42,1226.98 1902,1225.18 1902.59,1226.27 1903.17,1223.03 1903.76,1225.1 1904.35,1226.94 1904.93,1226.6 1905.52,1225.05 1906.11,1223.17 1906.69,1221.55 1907.28,1221.15 1907.87,1223.62 1908.45,1219.58 1909.04,1222.25 1909.63,1222.18 1910.21,1222.09 1910.8,1220.46 1911.38,1221.64 1911.97,1221.51 1912.56,1221.38 1913.14,1222.42 1913.73,1222.35 1914.32,1220.78 1914.9,1222.09 1915.49,1219.22 1916.08,1219.61 1916.66,1218.64 1917.25,1219.95 1917.83,1218.73 1918.42,1223.99 1919.01,1225.02 1919.59,1224.88 1920.18,1223.32 1920.77,1221.83 1921.35,1221.67 1921.94,1220.29 1922.53,1216.21 1923.11,1214.97 1923.7,1215.12 1924.29,1214.18 1924.87,1213.14 1925.46,1209.26 1926.04,1209.8 1926.63,1206.29 1927.22,1209.8 1927.8,1211.67 1928.39,1212.2 1928.98,1212.66 1929.56,1214.09 1930.15,1211.72 1930.74,1213.54 1931.32,1212.78 1931.91,1215.57 1932.5,1215.77 1933.08,1215.97 1933.67,1214.81 1934.25,1213.71 1934.84,1211.77 1935.43,1213.29 1936.01,1213.54 1936.6,1213.73 1937.19,1211.28 1937.77,1209.18 1938.36,1209.74 1938.95,1210.04 1939.53,1209.31 1940.12,1211.22 1940.71,1210.52 1941.29,1209.64 1941.88,1211.22 1942.46,1214.1 1943.05,1213.09 1943.64,1213.84 1944.22,1213.1 1944.81,1213.5 1945.4,1211.15 1945.98,1215.8 1946.57,1217.14 1947.16,1219.75 1947.74,1218.32 1948.33,1218.45 1948.91,1218.61 1949.5,1217.3 1950.09,1214.67 1950.67,1215.31 1951.26,1217.98 1951.85,1219.53 1952.43,1216.91 1953.02,1220.78 1953.61,1220.5 1954.19,1221.91 1954.78,1223.27 1955.37,1221.69 1955.95,1220.29 1956.54,1219.84 1957.12,1220.93 1957.71,1219.54 1958.3,1219.46 1958.88,1221.98 1959.47,1224.22 1960.06,1223.74 1960.64,1223.89 1961.23,1223.4 1961.82,1224.48 1962.4,1228.18 1962.99,1227.46 1963.58,1222.93 1964.16,1224 1964.75,1222.7 1965.33,1221.06 1965.92,1220.79 1966.51,1219.34 1967.09,1218.06 1967.68,1219.54 1968.27,1219.45 1968.85,1219.8 1969.44,1218.51 1970.03,1217.07 1970.61,1217.33 1971.2,1217.53 1971.78,1215.1 1972.37,1219 1972.96,1217.52 1973.54,1219.04 1974.13,1217.45 1974.72,1217.46 1975.3,1219.11 1975.89,1219.25 1976.48,1220.56 1977.06,1220.41 1977.65,1222.71 1978.24,1221.49 1978.82,1223.69 1979.41,1226.18 1979.99,1224.49 1980.58,1222.88 1981.17,1221.31 1981.75,1218.36 1982.34,1218.39 1982.93,1218.61 1983.51,1218.63 1984.1,1218.42 1984.69,1217.11 1985.27,1216.08 1985.86,1216.26 1986.45,1216.41 1987.03,1218.06 1987.62,1215.66 1988.2,1211.82 1988.79,1210.74 1989.38,1211.08 1989.96,1213.06 1990.55,1213.59 1991.14,1215.11 1991.72,1214.29 1992.31,1211.96 1992.9,1212.04 1993.48,1210.73 1994.07,1211.27 1994.65,1209.23 1995.24,1210.11 1995.83,1208.03 1996.41,1208.67 1997,1211.73 1997.59,1212.06 1998.17,1212.56 1998.76,1215.65 1999.35,1214.57 1999.93,1214.81 2000.52,1217.62 2001.11,1215.03 2001.69,1215.17 2002.28,1215.43 2002.86,1215.75 2003.45,1218.65 2004.04,1221.33 2004.62,1222.46 2005.21,1222.43 2005.8,1223.6 2006.38,1221.8 2006.97,1220.31 2007.56,1222.71 2008.14,1223.9 2008.73,1224.78 2009.32,1224.03 2009.9,1221.17 2010.49,1219.65 2011.07,1217.02 2011.66,1215.94 2012.25,1217.35 2012.83,1214.69 2013.42,1216.17 2014.01,1217.46 2014.59,1217.51 2015.18,1219.04 2015.77,1219.05 2016.35,1217.66 2016.94,1218.97 2017.53,1216.56 2018.11,1216.54 2018.7,1216.84 2019.28,1217.01 2019.87,1216.78 2020.46,1219.58 2021.04,1219.79 2021.63,1221.1 2022.22,1223.49 2022.8,1222.13 2023.39,1222.04 2023.98,1223.31 2024.56,1221.77 2025.15,1220.1 2025.73,1220.33 2026.32,1217.7 2026.91,1217.62 2027.49,1220.07 2028.08,1220.34 2028.67,1220.23 2029.25,1221.74 2029.84,1221.74 2030.43,1220.32 2031.01,1220.2 2031.6,1221.66 2032.19,1222.72 2032.77,1219.8 2033.36,1218.27 2033.94,1221.16 2034.53,1219.84 2035.12,1218.42 2035.7,1221.19 2036.29,1222.66 2036.88,1223.81 2037.46,1224.76 2038.05,1228.38 2038.64,1228.1 2039.22,1227.59 2039.81,1226.36 2040.4,1224.54 2040.98,1223.97 2041.57,1225.4 2042.15,1223.32 2042.74,1222.99 2043.33,1221.59 2043.91,1220.1 2044.5,1219.99 2045.09,1221.21 2045.67,1219.89 2046.26,1218.54 2046.85,1219.62 2047.43,1219.71 2048.02,1219.64 2048.6,1222.41 2049.19,1221.04 2049.78,1218.18 2050.36,1218.3 2050.95,1217.27 2051.54,1216.02 2052.12,1216.27 2052.71,1215.07 2053.3,1217.54 2053.88,1218.83 2054.47,1220.14 2055.06,1220.2 2055.64,1220.53 2056.23,1220.52 2056.81,1220.34 2057.4,1220.23 2057.99,1221.44 2058.57,1223.67 2059.16,1223.7 2059.75,1225.05 2060.33,1225.99 2060.92,1225.78 2061.51,1227.78 2062.09,1228.28 2062.68,1229.42 2063.27,1228.83 2063.85,1228.31 2064.44,1226.45 2065.02,1226.19 2065.61,1228.27 2066.2,1227.89 2066.78,1226.11 2067.37,1223.25 2067.96,1223.25 2068.54,1222.9 2069.13,1228.02 2069.72,1227.46 2070.3,1228.62 2070.89,1225.77 2071.48,1224.28 2072.06,1222.71 2072.65,1223.88 2073.23,1222.39 2073.82,1220.93 2074.41,1216.92 2074.99,1215.99 2075.58,1214.95 2076.17,1216.5 2076.75,1216.51 2077.34,1216.54 2077.93,1218.28 2078.51,1217.02 2079.1,1215.64 2079.68,1218.18 2080.27,1218.39 2080.86,1219.39 2081.44,1218.36 2082.03,1215.8 2082.62,1218.59 2083.2,1217.36 2083.79,1214.86 2084.38,1216.34 2084.96,1215.29 2085.55,1212.78 2086.14,1213.21 2086.72,1213.41 2087.31,1209.81 2087.89,1211.77 2088.48,1212.28 2089.07,1215.36 2089.65,1216.88 2090.24,1215.79 2090.83,1217.48 2091.41,1216.38 2092,1216.47 2092.59,1216.76 2093.17,1218.38 2093.76,1219.61 2094.35,1219.84 2094.93,1217.22 2095.52,1218.44 2096.1,1218.54 2096.69,1219.64 2097.28,1219.5 2097.86,1219.25 2098.45,1220.8 2099.04,1220.5 2099.62,1221.71 2100.21,1220.42 2100.8,1219.24 2101.38,1218.06 2101.97,1219.56 2102.55,1219.36 2103.14,1216.42 2103.73,1216.73 2104.31,1217.99 2104.9,1218.02 2105.49,1216.51 2106.07,1217.97 2106.66,1217.82 2107.25,1217.87 2107.83,1220.73 2108.42,1220.54 2109.01,1217.98 2109.59,1218.03 2110.18,1219.34 2110.76,1218.02 2111.35,1216.87 2111.94,1216.7 2112.52,1216.83 2113.11,1216.89 2113.7,1212.76 2114.28,1211.65 2114.87,1211.96 2115.46,1212.57 2116.04,1212.83 2116.63,1211.62 2117.22,1211 2117.8,1212.65 2118.39,1216.86 2118.97,1216.93 2119.56,1217.04 2120.15,1219.54 2120.73,1220.7 2121.32,1223.16 2121.91,1222.77 2122.49,1223.87 2123.08,1222.38 2123.67,1223.53 2124.25,1223.24 2124.84,1221.66 2125.42,1222.73 2126.01,1224.92 2126.6,1224.34 2127.18,1223.86 2127.77,1222.02 2128.36,1223.05 2128.94,1224.21 2129.53,1222.48 2130.12,1223.68 2130.7,1223.52 2131.29,1221.96 2131.88,1223.27 2132.46,1218.92 2133.05,1217.54 2133.63,1216.35 2134.22,1215.18 2134.81,1214.11 2135.39,1214.26 2135.98,1214.31 2136.57,1216.04 2137.15,1214.68 2137.74,1214.84 2138.33,1214.84 2138.91,1213.38 2139.5,1214.01 2140.09,1214 2140.67,1214.41 2141.26,1216.16 2141.84,1216.37 2142.43,1216.36 2143.02,1216.6 2143.6,1215.44 2144.19,1215.54 2144.78,1217.17 2145.36,1217.08 2145.95,1218.38 2146.54,1218.75 2147.12,1220.03 2147.71,1221.18 2148.3,1221.37 2148.88,1219.86 2149.47,1220.07 2150.05,1217.33 2150.64,1217.48 2151.23,1218.93 2151.81,1220.03 2152.4,1220.19 2152.99,1221.67 2153.57,1223.9 2154.16,1223.78 2154.75,1223.64 2155.33,1223.85 2155.92,1223.86 2156.5,1223.44 2157.09,1223.16 2157.68,1223.05 2158.26,1224.24 \"/>\n<path clip-path=\"url(#clip932)\" d=\"M986.025 1219.56 L986.612 1219.56 L987.198 1219.56 L987.785 1219.56 L988.371 1219.56 L988.957 1219.56 L989.544 1219.56 L990.13 1219.56 L990.717 1219.56 L991.303 1219.56 L991.889 1219.56 L992.476 1219.56 L993.062 1219.56 L993.649 1219.56 L994.235 1219.56 L994.822 1219.56 L995.408 1219.56 L995.994 1219.56 L996.581 1219.56 L997.167 1219.56 L997.754 1219.56 L998.34 1219.56 L998.926 1219.56 L999.513 1219.56 L1000.1 1219.56 L1000.69 1219.56 L1001.27 1219.56 L1001.86 1219.56 L1002.44 1219.56 L1003.03 1219.56 L1003.62 1219.56 L1004.2 1219.56 L1004.79 1219.56 L1005.38 1219.56 L1005.96 1219.56 L1006.55 1219.56 L1007.14 1219.56 L1007.72 1219.56 L1008.31 1219.56 L1008.9 1219.56 L1009.48 1219.56 L1010.07 1219.56 L1010.65 1219.56 L1011.24 1219.56 L1011.83 1219.56 L1012.41 1219.56 L1013 1219.56 L1013.59 1219.56 L1014.17 1219.56 L1014.76 1219.56 L1015.35 1219.56 L1015.93 1219.56 L1016.52 1219.56 L1017.11 1219.56 L1017.69 1219.56 L1018.28 1219.56 L1018.86 1219.56 L1019.45 1219.56 L1020.04 1219.56 L1020.62 1219.56 L1021.21 1219.56 L1021.8 1219.56 L1022.38 1219.56 L1022.97 1219.56 L1023.56 1219.56 L1024.14 1219.56 L1024.73 1219.56 L1025.32 1219.56 L1025.9 1219.56 L1026.49 1219.56 L1027.07 1219.56 L1027.66 1219.56 L1028.25 1219.56 L1028.83 1219.56 L1029.42 1219.56 L1030.01 1219.56 L1030.59 1219.56 L1031.18 1219.56 L1031.77 1219.56 L1032.35 1219.56 L1032.94 1219.56 L1033.52 1219.56 L1034.11 1219.56 L1034.7 1219.56 L1035.28 1219.56 L1035.87 1219.56 L1036.46 1219.56 L1037.04 1219.56 L1037.63 1219.56 L1038.22 1219.56 L1038.8 1219.56 L1039.39 1219.56 L1039.98 1219.56 L1040.56 1219.56 L1041.15 1219.56 L1041.73 1219.56 L1042.32 1219.56 L1042.91 1219.56 L1043.49 1219.56 L1044.08 1219.56 L1044.67 1219.56 L1045.25 1219.56 L1045.84 1219.56 L1046.43 1219.56 L1047.01 1219.56 L1047.6 1219.56 L1048.19 1219.56 L1048.77 1219.56 L1049.36 1219.56 L1049.94 1219.56 L1050.53 1219.56 L1051.12 1219.56 L1051.7 1219.56 L1052.29 1219.56 L1052.88 1219.56 L1053.46 1219.56 L1054.05 1219.56 L1054.64 1219.56 L1055.22 1219.56 L1055.81 1219.56 L1056.39 1219.56 L1056.98 1219.56 L1057.57 1219.56 L1058.15 1219.56 L1058.74 1219.56 L1059.33 1219.56 L1059.91 1219.56 L1060.5 1219.56 L1061.09 1219.56 L1061.67 1219.56 L1062.26 1219.56 L1062.85 1219.56 L1063.43 1219.56 L1064.02 1219.56 L1064.6 1219.56 L1065.19 1219.56 L1065.78 1219.56 L1066.36 1219.56 L1066.95 1219.56 L1067.54 1219.56 L1068.12 1219.56 L1068.71 1219.56 L1069.3 1219.56 L1069.88 1219.56 L1070.47 1219.56 L1071.06 1219.56 L1071.64 1219.56 L1072.23 1219.56 L1072.81 1219.56 L1073.4 1219.56 L1073.99 1219.56 L1074.57 1219.56 L1075.16 1219.56 L1075.75 1219.56 L1076.33 1219.56 L1076.92 1219.56 L1077.51 1219.56 L1078.09 1219.56 L1078.68 1219.56 L1079.26 1219.56 L1079.85 1219.56 L1080.44 1219.56 L1081.02 1219.56 L1081.61 1219.56 L1082.2 1219.56 L1082.78 1219.56 L1083.37 1219.56 L1083.96 1219.56 L1084.54 1219.56 L1085.13 1219.56 L1085.72 1219.56 L1086.3 1219.56 L1086.89 1219.56 L1087.47 1219.56 L1088.06 1219.56 L1088.65 1219.56 L1089.23 1219.56 L1089.82 1219.56 L1090.41 1219.56 L1090.99 1219.56 L1091.58 1219.56 L1092.17 1219.56 L1092.75 1219.56 L1093.34 1219.56 L1093.93 1219.56 L1094.51 1219.56 L1095.1 1219.56 L1095.68 1219.56 L1096.27 1219.56 L1096.86 1219.56 L1097.44 1219.56 L1098.03 1219.56 L1098.62 1219.56 L1099.2 1219.56 L1099.79 1219.56 L1100.38 1219.56 L1100.96 1219.56 L1101.55 1219.56 L1102.14 1219.56 L1102.72 1219.56 L1103.31 1219.56 L1103.89 1219.56 L1104.48 1219.56 L1105.07 1219.56 L1105.65 1219.56 L1106.24 1219.56 L1106.83 1219.56 L1107.41 1219.56 L1108 1219.56 L1108.59 1219.56 L1109.17 1219.56 L1109.76 1219.56 L1110.34 1219.56 L1110.93 1219.56 L1111.52 1219.56 L1112.1 1219.56 L1112.69 1219.56 L1113.28 1219.56 L1113.86 1219.56 L1114.45 1219.56 L1115.04 1219.56 L1115.62 1219.56 L1116.21 1219.56 L1116.8 1219.56 L1117.38 1219.56 L1117.97 1219.56 L1118.55 1219.56 L1119.14 1219.56 L1119.73 1219.56 L1120.31 1219.56 L1120.9 1219.56 L1121.49 1219.56 L1122.07 1219.56 L1122.66 1219.56 L1123.25 1219.56 L1123.83 1219.56 L1124.42 1219.56 L1125.01 1219.56 L1125.59 1219.56 L1126.18 1219.56 L1126.76 1219.56 L1127.35 1219.56 L1127.94 1219.56 L1128.52 1219.56 L1129.11 1219.56 L1129.7 1219.56 L1130.28 1219.56 L1130.87 1219.56 L1131.46 1219.56 L1132.04 1219.56 L1132.63 1219.56 L1133.21 1219.56 L1133.8 1219.56 L1134.39 1219.56 L1134.97 1219.56 L1135.56 1219.56 L1136.15 1219.56 L1136.73 1219.56 L1137.32 1219.56 L1137.91 1219.56 L1138.49 1219.56 L1139.08 1219.56 L1139.67 1219.56 L1140.25 1219.56 L1140.84 1219.56 L1141.42 1219.56 L1142.01 1219.56 L1142.6 1219.56 L1143.18 1219.56 L1143.77 1219.56 L1144.36 1219.56 L1144.94 1219.56 L1145.53 1219.56 L1146.12 1219.56 L1146.7 1219.56 L1147.29 1219.56 L1147.88 1219.56 L1148.46 1219.56 L1149.05 1219.56 L1149.63 1219.56 L1150.22 1219.56 L1150.81 1219.56 L1151.39 1219.56 L1151.98 1219.56 L1152.57 1219.56 L1153.15 1219.56 L1153.74 1219.56 L1154.33 1219.56 L1154.91 1219.56 L1155.5 1219.56 L1156.09 1219.56 L1156.67 1219.56 L1157.26 1219.56 L1157.84 1219.56 L1158.43 1219.56 L1159.02 1219.56 L1159.6 1219.56 L1160.19 1219.56 L1160.78 1219.56 L1161.36 1219.56 L1161.95 1219.56 L1162.54 1219.56 L1163.12 1219.56 L1163.71 1219.56 L1164.29 1219.56 L1164.88 1219.56 L1165.47 1219.56 L1166.05 1219.56 L1166.64 1219.56 L1167.23 1219.56 L1167.81 1219.56 L1168.4 1219.56 L1168.99 1219.56 L1169.57 1219.56 L1170.16 1219.56 L1170.75 1219.56 L1171.33 1219.56 L1171.92 1219.56 L1172.5 1219.56 L1173.09 1219.56 L1173.68 1219.56 L1174.26 1219.56 L1174.85 1219.56 L1175.44 1219.56 L1176.02 1219.56 L1176.61 1219.56 L1177.2 1219.56 L1177.78 1219.56 L1178.37 1219.56 L1178.96 1219.56 L1179.54 1219.56 L1180.13 1219.56 L1180.71 1219.56 L1181.3 1219.56 L1181.89 1219.56 L1182.47 1219.56 L1183.06 1219.56 L1183.65 1219.56 L1184.23 1219.56 L1184.82 1219.56 L1185.41 1219.56 L1185.99 1219.56 L1186.58 1219.56 L1187.16 1219.56 L1187.75 1219.56 L1188.34 1219.56 L1188.92 1219.56 L1189.51 1219.56 L1190.1 1219.56 L1190.68 1219.56 L1191.27 1219.56 L1191.86 1219.56 L1192.44 1219.56 L1193.03 1219.56 L1193.62 1219.56 L1194.2 1219.56 L1194.79 1219.56 L1195.37 1219.56 L1195.96 1219.56 L1196.55 1219.56 L1197.13 1219.56 L1197.72 1219.56 L1198.31 1219.56 L1198.89 1219.56 L1199.48 1219.56 L1200.07 1219.56 L1200.65 1219.56 L1201.24 1219.56 L1201.83 1219.56 L1202.41 1219.56 L1203 1219.56 L1203.58 1219.56 L1204.17 1219.56 L1204.76 1219.56 L1205.34 1219.56 L1205.93 1219.56 L1206.52 1219.56 L1207.1 1219.56 L1207.69 1219.56 L1208.28 1219.56 L1208.86 1219.56 L1209.45 1219.56 L1210.03 1219.56 L1210.62 1219.56 L1211.21 1219.56 L1211.79 1219.56 L1212.38 1219.56 L1212.97 1219.56 L1213.55 1219.56 L1214.14 1219.56 L1214.73 1219.56 L1215.31 1219.56 L1215.9 1219.56 L1216.49 1219.56 L1217.07 1219.56 L1217.66 1219.56 L1218.24 1219.56 L1218.83 1219.56 L1219.42 1219.56 L1220 1219.56 L1220.59 1219.56 L1221.18 1219.56 L1221.76 1219.56 L1222.35 1219.56 L1222.94 1219.56 L1223.52 1219.56 L1224.11 1219.56 L1224.7 1219.56 L1225.28 1219.56 L1225.87 1219.56 L1226.45 1219.56 L1227.04 1219.56 L1227.63 1219.56 L1228.21 1219.56 L1228.8 1219.56 L1229.39 1219.56 L1229.97 1219.56 L1230.56 1219.56 L1231.15 1219.56 L1231.73 1219.56 L1232.32 1219.56 L1232.91 1219.56 L1233.49 1219.56 L1234.08 1219.56 L1234.66 1219.56 L1235.25 1219.56 L1235.84 1219.56 L1236.42 1219.56 L1237.01 1219.56 L1237.6 1219.56 L1238.18 1219.56 L1238.77 1219.56 L1239.36 1219.56 L1239.94 1219.56 L1240.53 1219.56 L1241.11 1219.56 L1241.7 1219.56 L1242.29 1219.56 L1242.87 1219.56 L1243.46 1219.56 L1244.05 1219.56 L1244.63 1219.56 L1245.22 1219.56 L1245.81 1219.56 L1246.39 1219.56 L1246.98 1219.56 L1247.57 1219.56 L1248.15 1219.56 L1248.74 1219.56 L1249.32 1219.56 L1249.91 1219.56 L1250.5 1219.56 L1251.08 1219.56 L1251.67 1219.56 L1252.26 1219.56 L1252.84 1219.56 L1253.43 1219.56 L1254.02 1219.56 L1254.6 1219.56 L1255.19 1219.56 L1255.78 1219.56 L1256.36 1219.56 L1256.95 1219.56 L1257.53 1219.56 L1258.12 1219.56 L1258.71 1219.56 L1259.29 1219.56 L1259.88 1219.56 L1260.47 1219.56 L1261.05 1219.56 L1261.64 1219.56 L1262.23 1219.56 L1262.81 1219.56 L1263.4 1219.56 L1263.98 1219.56 L1264.57 1219.56 L1265.16 1219.56 L1265.74 1219.56 L1266.33 1219.56 L1266.92 1219.56 L1267.5 1219.56 L1268.09 1219.56 L1268.68 1219.56 L1269.26 1219.56 L1269.85 1219.56 L1270.44 1219.56 L1271.02 1219.56 L1271.61 1219.56 L1272.19 1219.56 L1272.78 1219.56 L1273.37 1219.56 L1273.95 1219.56 L1274.54 1219.56 L1275.13 1219.56 L1275.71 1219.56 L1276.3 1219.56 L1276.89 1219.56 L1277.47 1219.56 L1278.06 1219.56 L1278.65 1219.56 L1279.23 1219.56 L1279.82 1219.56 L1280.4 1219.56 L1280.99 1219.56 L1281.58 1219.56 L1282.16 1219.56 L1282.75 1219.56 L1283.34 1219.56 L1283.92 1219.56 L1284.51 1219.56 L1285.1 1219.56 L1285.68 1219.56 L1286.27 1219.56 L1286.86 1219.56 L1287.44 1219.56 L1288.03 1219.56 L1288.61 1219.56 L1289.2 1219.56 L1289.79 1219.56 L1290.37 1219.56 L1290.96 1219.56 L1291.55 1219.56 L1292.13 1219.56 L1292.72 1219.56 L1293.31 1219.56 L1293.89 1219.56 L1294.48 1219.56 L1295.06 1219.56 L1295.65 1219.56 L1296.24 1219.56 L1296.82 1219.56 L1297.41 1219.56 L1298 1219.56 L1298.58 1219.56 L1299.17 1219.56 L1299.76 1219.56 L1300.34 1219.56 L1300.93 1219.56 L1301.52 1219.56 L1302.1 1219.56 L1302.69 1219.56 L1303.27 1219.56 L1303.86 1219.56 L1304.45 1219.56 L1305.03 1219.56 L1305.62 1219.56 L1306.21 1219.56 L1306.79 1219.56 L1307.38 1219.56 L1307.97 1219.56 L1308.55 1219.56 L1309.14 1219.56 L1309.73 1219.56 L1310.31 1219.56 L1310.9 1219.56 L1311.48 1219.56 L1312.07 1219.56 L1312.66 1219.56 L1313.24 1219.56 L1313.83 1219.56 L1314.42 1219.56 L1315 1219.56 L1315.59 1219.56 L1316.18 1219.56 L1316.76 1219.56 L1317.35 1219.56 L1317.93 1219.56 L1318.52 1219.56 L1319.11 1219.56 L1319.69 1219.56 L1320.28 1219.56 L1320.87 1219.56 L1321.45 1219.56 L1322.04 1219.56 L1322.63 1219.56 L1323.21 1219.56 L1323.8 1219.56 L1324.39 1219.56 L1324.97 1219.56 L1325.56 1219.56 L1326.14 1219.56 L1326.73 1219.56 L1327.32 1219.56 L1327.9 1219.56 L1328.49 1219.56 L1329.08 1219.56 L1329.66 1219.56 L1330.25 1219.56 L1330.84 1219.56 L1331.42 1219.56 L1332.01 1219.56 L1332.6 1219.56 L1333.18 1219.56 L1333.77 1219.56 L1334.35 1219.56 L1334.94 1219.56 L1335.53 1219.56 L1336.11 1219.56 L1336.7 1219.56 L1337.29 1219.56 L1337.87 1219.56 L1338.46 1219.56 L1339.05 1219.56 L1339.63 1219.56 L1340.22 1219.56 L1340.8 1219.56 L1341.39 1219.56 L1341.98 1219.56 L1342.56 1219.56 L1343.15 1219.56 L1343.74 1219.56 L1344.32 1219.56 L1344.91 1219.56 L1345.5 1219.56 L1346.08 1219.56 L1346.67 1219.56 L1347.26 1219.56 L1347.84 1219.56 L1348.43 1219.56 L1349.01 1219.56 L1349.6 1219.56 L1350.19 1219.56 L1350.77 1219.56 L1351.36 1219.56 L1351.95 1219.56 L1352.53 1219.56 L1353.12 1219.56 L1353.71 1219.56 L1354.29 1219.56 L1354.88 1219.56 L1355.47 1219.56 L1356.05 1219.56 L1356.64 1219.56 L1357.22 1219.56 L1357.81 1219.56 L1358.4 1219.56 L1358.98 1219.56 L1359.57 1219.56 L1360.16 1219.56 L1360.74 1219.56 L1361.33 1219.56 L1361.92 1219.56 L1362.5 1219.56 L1363.09 1219.56 L1363.68 1219.56 L1364.26 1219.56 L1364.85 1219.56 L1365.43 1219.56 L1366.02 1219.56 L1366.61 1219.56 L1367.19 1219.56 L1367.78 1219.56 L1368.37 1219.56 L1368.95 1219.56 L1369.54 1219.56 L1370.13 1219.56 L1370.71 1219.56 L1371.3 1219.56 L1371.88 1219.56 L1372.47 1219.56 L1373.06 1219.56 L1373.64 1219.56 L1374.23 1219.56 L1374.82 1219.56 L1375.4 1219.56 L1375.99 1219.56 L1376.58 1219.56 L1377.16 1219.56 L1377.75 1219.56 L1378.34 1219.56 L1378.92 1219.56 L1379.51 1219.56 L1380.09 1219.56 L1380.68 1219.56 L1381.27 1219.56 L1381.85 1219.56 L1382.44 1219.56 L1383.03 1219.56 L1383.61 1219.56 L1384.2 1219.56 L1384.79 1219.56 L1385.37 1219.56 L1385.96 1219.56 L1386.55 1219.56 L1387.13 1219.56 L1387.72 1219.56 L1388.3 1219.56 L1388.89 1219.56 L1389.48 1219.56 L1390.06 1219.56 L1390.65 1219.56 L1391.24 1219.56 L1391.82 1219.56 L1392.41 1219.56 L1393 1219.56 L1393.58 1219.56 L1394.17 1219.56 L1394.75 1219.56 L1395.34 1219.56 L1395.93 1219.56 L1396.51 1219.56 L1397.1 1219.56 L1397.69 1219.56 L1398.27 1219.56 L1398.86 1219.56 L1399.45 1219.56 L1400.03 1219.56 L1400.62 1219.56 L1401.21 1219.56 L1401.79 1219.56 L1402.38 1219.56 L1402.96 1219.56 L1403.55 1219.56 L1404.14 1219.56 L1404.72 1219.56 L1405.31 1219.56 L1405.9 1219.56 L1406.48 1219.56 L1407.07 1219.56 L1407.66 1219.56 L1408.24 1219.56 L1408.83 1219.56 L1409.42 1219.56 L1410 1219.56 L1410.59 1219.56 L1411.17 1219.56 L1411.76 1219.56 L1412.35 1219.56 L1412.93 1219.56 L1413.52 1219.56 L1414.11 1219.56 L1414.69 1219.56 L1415.28 1219.56 L1415.87 1219.56 L1416.45 1219.56 L1417.04 1219.56 L1417.63 1219.56 L1418.21 1219.56 L1418.8 1219.56 L1419.38 1219.56 L1419.97 1219.56 L1420.56 1219.56 L1421.14 1219.56 L1421.73 1219.56 L1422.32 1219.56 L1422.9 1219.56 L1423.49 1219.56 L1424.08 1219.56 L1424.66 1219.56 L1425.25 1219.56 L1425.83 1219.56 L1426.42 1219.56 L1427.01 1219.56 L1427.59 1219.56 L1428.18 1219.56 L1428.77 1219.56 L1429.35 1219.56 L1429.94 1219.56 L1430.53 1219.56 L1431.11 1219.56 L1431.7 1219.56 L1432.29 1219.56 L1432.87 1219.56 L1433.46 1219.56 L1434.04 1219.56 L1434.63 1219.56 L1435.22 1219.56 L1435.8 1219.56 L1436.39 1219.56 L1436.98 1219.56 L1437.56 1219.56 L1438.15 1219.56 L1438.74 1219.56 L1439.32 1219.56 L1439.91 1219.56 L1440.5 1219.56 L1441.08 1219.56 L1441.67 1219.56 L1442.25 1219.56 L1442.84 1219.56 L1443.43 1219.56 L1444.01 1219.56 L1444.6 1219.56 L1445.19 1219.56 L1445.77 1219.56 L1446.36 1219.56 L1446.95 1219.56 L1447.53 1219.56 L1448.12 1219.56 L1448.7 1219.56 L1449.29 1219.56 L1449.88 1219.56 L1450.46 1219.56 L1451.05 1219.56 L1451.64 1219.56 L1452.22 1219.56 L1452.81 1219.56 L1453.4 1219.56 L1453.98 1219.56 L1454.57 1219.56 L1455.16 1219.56 L1455.74 1219.56 L1456.33 1219.56 L1456.91 1219.56 L1457.5 1219.56 L1458.09 1219.56 L1458.67 1219.56 L1459.26 1219.56 L1459.85 1219.56 L1460.43 1219.56 L1461.02 1219.56 L1461.61 1219.56 L1462.19 1219.56 L1462.78 1219.56 L1463.37 1219.56 L1463.95 1219.56 L1464.54 1219.56 L1465.12 1219.56 L1465.71 1219.56 L1466.3 1219.56 L1466.88 1219.56 L1467.47 1219.56 L1468.06 1219.56 L1468.64 1219.56 L1469.23 1219.56 L1469.82 1219.56 L1470.4 1219.56 L1470.99 1219.56 L1471.57 1219.56 L1472.16 1219.56 L1472.75 1219.56 L1473.33 1219.56 L1473.92 1219.56 L1474.51 1219.56 L1475.09 1219.56 L1475.68 1219.56 L1476.27 1219.56 L1476.85 1219.56 L1477.44 1219.56 L1478.03 1219.56 L1478.61 1219.56 L1479.2 1219.56 L1479.78 1219.56 L1480.37 1219.56 L1480.96 1219.56 L1481.54 1219.56 L1482.13 1219.56 L1482.72 1219.56 L1483.3 1219.56 L1483.89 1219.56 L1484.48 1219.56 L1485.06 1219.56 L1485.65 1219.56 L1486.24 1219.56 L1486.82 1219.56 L1487.41 1219.56 L1487.99 1219.56 L1488.58 1219.56 L1489.17 1219.56 L1489.75 1219.56 L1490.34 1219.56 L1490.93 1219.56 L1491.51 1219.56 L1492.1 1219.56 L1492.69 1219.56 L1493.27 1219.56 L1493.86 1219.56 L1494.45 1219.56 L1495.03 1219.56 L1495.62 1219.56 L1496.2 1219.56 L1496.79 1219.56 L1497.38 1219.56 L1497.96 1219.56 L1498.55 1219.56 L1499.14 1219.56 L1499.72 1219.56 L1500.31 1219.56 L1500.9 1219.56 L1501.48 1219.56 L1502.07 1219.56 L1502.65 1219.56 L1503.24 1219.56 L1503.83 1219.56 L1504.41 1219.56 L1505 1219.56 L1505.59 1219.56 L1506.17 1219.56 L1506.76 1219.56 L1507.35 1219.56 L1507.93 1219.56 L1508.52 1219.56 L1509.11 1219.56 L1509.69 1219.56 L1510.28 1219.56 L1510.86 1219.56 L1511.45 1219.56 L1512.04 1219.56 L1512.62 1219.56 L1513.21 1219.56 L1513.8 1219.56 L1514.38 1219.56 L1514.97 1219.56 L1515.56 1219.56 L1516.14 1219.56 L1516.73 1219.56 L1517.32 1219.56 L1517.9 1219.56 L1518.49 1219.56 L1519.07 1219.56 L1519.66 1219.56 L1520.25 1219.56 L1520.83 1219.56 L1521.42 1219.56 L1522.01 1219.56 L1522.59 1219.56 L1523.18 1219.56 L1523.77 1219.56 L1524.35 1219.56 L1524.94 1219.56 L1525.52 1219.56 L1526.11 1219.56 L1526.7 1219.56 L1527.28 1219.56 L1527.87 1219.56 L1528.46 1219.56 L1529.04 1219.56 L1529.63 1219.56 L1530.22 1219.56 L1530.8 1219.56 L1531.39 1219.56 L1531.98 1219.56 L1532.56 1219.56 L1533.15 1219.56 L1533.73 1219.56 L1534.32 1219.56 L1534.91 1219.56 L1535.49 1219.56 L1536.08 1219.56 L1536.67 1219.56 L1537.25 1219.56 L1537.84 1219.56 L1538.43 1219.56 L1539.01 1219.56 L1539.6 1219.56 L1540.19 1219.56 L1540.77 1219.56 L1541.36 1219.56 L1541.94 1219.56 L1542.53 1219.56 L1543.12 1219.56 L1543.7 1219.56 L1544.29 1219.56 L1544.88 1219.56 L1545.46 1219.56 L1546.05 1219.56 L1546.64 1219.56 L1547.22 1219.56 L1547.81 1219.56 L1548.4 1219.56 L1548.98 1219.56 L1549.57 1219.56 L1550.15 1219.56 L1550.74 1219.56 L1551.33 1219.56 L1551.91 1219.56 L1552.5 1219.56 L1553.09 1219.56 L1553.67 1219.56 L1554.26 1219.56 L1554.85 1219.56 L1555.43 1219.56 L1556.02 1219.56 L1556.6 1219.56 L1557.19 1219.56 L1557.78 1219.56 L1558.36 1219.56 L1558.95 1219.56 L1559.54 1219.56 L1560.12 1219.56 L1560.71 1219.56 L1561.3 1219.56 L1561.88 1219.56 L1562.47 1219.56 L1563.06 1219.56 L1563.64 1219.56 L1564.23 1219.56 L1564.81 1219.56 L1565.4 1219.56 L1565.99 1219.56 L1566.57 1219.56 L1567.16 1219.56 L1567.75 1219.56 L1568.33 1219.56 L1568.92 1219.56 L1569.51 1219.56 L1570.09 1219.56 L1570.68 1219.56 L1571.27 1219.56 L1571.85 1219.56 L1572.44 1219.56 L1573.02 1219.56 L1573.61 1219.56 L1574.2 1219.56 L1574.78 1219.56 L1575.37 1219.56 L1575.96 1219.56 L1576.54 1219.56 L1577.13 1219.56 L1577.72 1219.56 L1578.3 1219.56 L1578.89 1219.56 L1579.47 1219.56 L1580.06 1219.56 L1580.65 1219.56 L1581.23 1219.56 L1581.82 1219.56 L1582.41 1219.56 L1582.99 1219.56 L1583.58 1219.56 L1584.17 1219.56 L1584.75 1219.56 L1585.34 1219.56 L1585.93 1219.56 L1586.51 1219.56 L1587.1 1219.56 L1587.68 1219.56 L1588.27 1219.56 L1588.86 1219.56 L1589.44 1219.56 L1590.03 1219.56 L1590.62 1219.56 L1591.2 1219.56 L1591.79 1219.56 L1592.38 1219.56 L1592.96 1219.56 L1593.55 1219.56 L1594.14 1219.56 L1594.72 1219.56 L1595.31 1219.56 L1595.89 1219.56 L1596.48 1219.56 L1597.07 1219.56 L1597.65 1219.56 L1598.24 1219.56 L1598.83 1219.56 L1599.41 1219.56 L1600 1219.56 L1600.59 1219.56 L1601.17 1219.56 L1601.76 1219.56 L1602.34 1219.56 L1602.93 1219.56 L1603.52 1219.56 L1604.1 1219.56 L1604.69 1219.56 L1605.28 1219.56 L1605.86 1219.56 L1606.45 1219.56 L1607.04 1219.56 L1607.62 1219.56 L1608.21 1219.56 L1608.8 1219.56 L1609.38 1219.56 L1609.97 1219.56 L1610.55 1219.56 L1611.14 1219.56 L1611.73 1219.56 L1612.31 1219.56 L1612.9 1219.56 L1613.49 1219.56 L1614.07 1219.56 L1614.66 1219.56 L1615.25 1219.56 L1615.83 1219.56 L1616.42 1219.56 L1617.01 1219.56 L1617.59 1219.56 L1618.18 1219.56 L1618.76 1219.56 L1619.35 1219.56 L1619.94 1219.56 L1620.52 1219.56 L1621.11 1219.56 L1621.7 1219.56 L1622.28 1219.56 L1622.87 1219.56 L1623.46 1219.56 L1624.04 1219.56 L1624.63 1219.56 L1625.22 1219.56 L1625.8 1219.56 L1626.39 1219.56 L1626.97 1219.56 L1627.56 1219.56 L1628.15 1219.56 L1628.73 1219.56 L1629.32 1219.56 L1629.91 1219.56 L1630.49 1219.56 L1631.08 1219.56 L1631.67 1219.56 L1632.25 1219.56 L1632.84 1219.56 L1633.42 1219.56 L1634.01 1219.56 L1634.6 1219.56 L1635.18 1219.56 L1635.77 1219.56 L1636.36 1219.56 L1636.94 1219.56 L1637.53 1219.56 L1638.12 1219.56 L1638.7 1219.56 L1639.29 1219.56 L1639.88 1219.56 L1640.46 1219.56 L1641.05 1219.56 L1641.63 1219.56 L1642.22 1219.56 L1642.81 1219.56 L1643.39 1219.56 L1643.98 1219.56 L1644.57 1219.56 L1645.15 1219.56 L1645.74 1219.56 L1646.33 1219.56 L1646.91 1219.56 L1647.5 1219.56 L1648.09 1219.56 L1648.67 1219.56 L1649.26 1219.56 L1649.84 1219.56 L1650.43 1219.56 L1651.02 1219.56 L1651.6 1219.56 L1652.19 1219.56 L1652.78 1219.56 L1653.36 1219.56 L1653.95 1219.56 L1654.54 1219.56 L1655.12 1219.56 L1655.71 1219.56 L1656.29 1219.56 L1656.88 1219.56 L1657.47 1219.56 L1658.05 1219.56 L1658.64 1219.56 L1659.23 1219.56 L1659.81 1219.56 L1660.4 1219.56 L1660.99 1219.56 L1661.57 1219.56 L1662.16 1219.56 L1662.75 1219.56 L1663.33 1219.56 L1663.92 1219.56 L1664.5 1219.56 L1665.09 1219.56 L1665.68 1219.56 L1666.26 1219.56 L1666.85 1219.56 L1667.44 1219.56 L1668.02 1219.56 L1668.61 1219.56 L1669.2 1219.56 L1669.78 1219.56 L1670.37 1219.56 L1670.96 1219.56 L1671.54 1219.56 L1672.13 1219.56 L1672.71 1219.56 L1673.3 1219.56 L1673.89 1219.56 L1674.47 1219.56 L1675.06 1219.56 L1675.65 1219.56 L1676.23 1219.56 L1676.82 1219.56 L1677.41 1219.56 L1677.99 1219.56 L1678.58 1219.56 L1679.17 1219.56 L1679.75 1219.56 L1680.34 1219.56 L1680.92 1219.56 L1681.51 1219.56 L1682.1 1219.56 L1682.68 1219.56 L1683.27 1219.56 L1683.86 1219.56 L1684.44 1219.56 L1685.03 1219.56 L1685.62 1219.56 L1686.2 1219.56 L1686.79 1219.56 L1687.37 1219.56 L1687.96 1219.56 L1688.55 1219.56 L1689.13 1219.56 L1689.72 1219.56 L1690.31 1219.56 L1690.89 1219.56 L1691.48 1219.56 L1692.07 1219.56 L1692.65 1219.56 L1693.24 1219.56 L1693.83 1219.56 L1694.41 1219.56 L1695 1219.56 L1695.58 1219.56 L1696.17 1219.56 L1696.76 1219.56 L1697.34 1219.56 L1697.93 1219.56 L1698.52 1219.56 L1699.1 1219.56 L1699.69 1219.56 L1700.28 1219.56 L1700.86 1219.56 L1701.45 1219.56 L1702.04 1219.56 L1702.62 1219.56 L1703.21 1219.56 L1703.79 1219.56 L1704.38 1219.56 L1704.97 1219.56 L1705.55 1219.56 L1706.14 1219.56 L1706.73 1219.56 L1707.31 1219.56 L1707.9 1219.56 L1708.49 1219.56 L1709.07 1219.56 L1709.66 1219.56 L1710.24 1219.56 L1710.83 1219.56 L1711.42 1219.56 L1712 1219.56 L1712.59 1219.56 L1713.18 1219.56 L1713.76 1219.56 L1714.35 1219.56 L1714.94 1219.56 L1715.52 1219.56 L1716.11 1219.56 L1716.7 1219.56 L1717.28 1219.56 L1717.87 1219.56 L1718.45 1219.56 L1719.04 1219.56 L1719.63 1219.56 L1720.21 1219.56 L1720.8 1219.56 L1721.39 1219.56 L1721.97 1219.56 L1722.56 1219.56 L1723.15 1219.56 L1723.73 1219.56 L1724.32 1219.56 L1724.91 1219.56 L1725.49 1219.56 L1726.08 1219.56 L1726.66 1219.56 L1727.25 1219.56 L1727.84 1219.56 L1728.42 1219.56 L1729.01 1219.56 L1729.6 1219.56 L1730.18 1219.56 L1730.77 1219.56 L1731.36 1219.56 L1731.94 1219.56 L1732.53 1219.56 L1733.11 1219.56 L1733.7 1219.56 L1734.29 1219.56 L1734.87 1219.56 L1735.46 1219.56 L1736.05 1219.56 L1736.63 1219.56 L1737.22 1219.56 L1737.81 1219.56 L1738.39 1219.56 L1738.98 1219.56 L1739.57 1219.56 L1740.15 1219.56 L1740.74 1219.56 L1741.32 1219.56 L1741.91 1219.56 L1742.5 1219.56 L1743.08 1219.56 L1743.67 1219.56 L1744.26 1219.56 L1744.84 1219.56 L1745.43 1219.56 L1746.02 1219.56 L1746.6 1219.56 L1747.19 1219.56 L1747.78 1219.56 L1748.36 1219.56 L1748.95 1219.56 L1749.53 1219.56 L1750.12 1219.56 L1750.71 1219.56 L1751.29 1219.56 L1751.88 1219.56 L1752.47 1219.56 L1753.05 1219.56 L1753.64 1219.56 L1754.23 1219.56 L1754.81 1219.56 L1755.4 1219.56 L1755.99 1219.56 L1756.57 1219.56 L1757.16 1219.56 L1757.74 1219.56 L1758.33 1219.56 L1758.92 1219.56 L1759.5 1219.56 L1760.09 1219.56 L1760.68 1219.56 L1761.26 1219.56 L1761.85 1219.56 L1762.44 1219.56 L1763.02 1219.56 L1763.61 1219.56 L1764.19 1219.56 L1764.78 1219.56 L1765.37 1219.56 L1765.95 1219.56 L1766.54 1219.56 L1767.13 1219.56 L1767.71 1219.56 L1768.3 1219.56 L1768.89 1219.56 L1769.47 1219.56 L1770.06 1219.56 L1770.65 1219.56 L1771.23 1219.56 L1771.82 1219.56 L1772.4 1219.56 L1772.99 1219.56 L1773.58 1219.56 L1774.16 1219.56 L1774.75 1219.56 L1775.34 1219.56 L1775.92 1219.56 L1776.51 1219.56 L1777.1 1219.56 L1777.68 1219.56 L1778.27 1219.56 L1778.86 1219.56 L1779.44 1219.56 L1780.03 1219.56 L1780.61 1219.56 L1781.2 1219.56 L1781.79 1219.56 L1782.37 1219.56 L1782.96 1219.56 L1783.55 1219.56 L1784.13 1219.56 L1784.72 1219.56 L1785.31 1219.56 L1785.89 1219.56 L1786.48 1219.56 L1787.06 1219.56 L1787.65 1219.56 L1788.24 1219.56 L1788.82 1219.56 L1789.41 1219.56 L1790 1219.56 L1790.58 1219.56 L1791.17 1219.56 L1791.76 1219.56 L1792.34 1219.56 L1792.93 1219.56 L1793.52 1219.56 L1794.1 1219.56 L1794.69 1219.56 L1795.27 1219.56 L1795.86 1219.56 L1796.45 1219.56 L1797.03 1219.56 L1797.62 1219.56 L1798.21 1219.56 L1798.79 1219.56 L1799.38 1219.56 L1799.97 1219.56 L1800.55 1219.56 L1801.14 1219.56 L1801.73 1219.56 L1802.31 1219.56 L1802.9 1219.56 L1803.48 1219.56 L1804.07 1219.56 L1804.66 1219.56 L1805.24 1219.56 L1805.83 1219.56 L1806.42 1219.56 L1807 1219.56 L1807.59 1219.56 L1808.18 1219.56 L1808.76 1219.56 L1809.35 1219.56 L1809.94 1219.56 L1810.52 1219.56 L1811.11 1219.56 L1811.69 1219.56 L1812.28 1219.56 L1812.87 1219.56 L1813.45 1219.56 L1814.04 1219.56 L1814.63 1219.56 L1815.21 1219.56 L1815.8 1219.56 L1816.39 1219.56 L1816.97 1219.56 L1817.56 1219.56 L1818.14 1219.56 L1818.73 1219.56 L1819.32 1219.56 L1819.9 1219.56 L1820.49 1219.56 L1821.08 1219.56 L1821.66 1219.56 L1822.25 1219.56 L1822.84 1219.56 L1823.42 1219.56 L1824.01 1219.56 L1824.6 1219.56 L1825.18 1219.56 L1825.77 1219.56 L1826.35 1219.56 L1826.94 1219.56 L1827.53 1219.56 L1828.11 1219.56 L1828.7 1219.56 L1829.29 1219.56 L1829.87 1219.56 L1830.46 1219.56 L1831.05 1219.56 L1831.63 1219.56 L1832.22 1219.56 L1832.81 1219.56 L1833.39 1219.56 L1833.98 1219.56 L1834.56 1219.56 L1835.15 1219.56 L1835.74 1219.56 L1836.32 1219.56 L1836.91 1219.56 L1837.5 1219.56 L1838.08 1219.56 L1838.67 1219.56 L1839.26 1219.56 L1839.84 1219.56 L1840.43 1219.56 L1841.01 1219.56 L1841.6 1219.56 L1842.19 1219.56 L1842.77 1219.56 L1843.36 1219.56 L1843.95 1219.56 L1844.53 1219.56 L1845.12 1219.56 L1845.71 1219.56 L1846.29 1219.56 L1846.88 1219.56 L1847.47 1219.56 L1848.05 1219.56 L1848.64 1219.56 L1849.22 1219.56 L1849.81 1219.56 L1850.4 1219.56 L1850.98 1219.56 L1851.57 1219.56 L1852.16 1219.56 L1852.74 1219.56 L1853.33 1219.56 L1853.92 1219.56 L1854.5 1219.56 L1855.09 1219.56 L1855.68 1219.56 L1856.26 1219.56 L1856.85 1219.56 L1857.43 1219.56 L1858.02 1219.56 L1858.61 1219.56 L1859.19 1219.56 L1859.78 1219.56 L1860.37 1219.56 L1860.95 1219.56 L1861.54 1219.56 L1862.13 1219.56 L1862.71 1219.56 L1863.3 1219.56 L1863.88 1219.56 L1864.47 1219.56 L1865.06 1219.56 L1865.64 1219.56 L1866.23 1219.56 L1866.82 1219.56 L1867.4 1219.56 L1867.99 1219.56 L1868.58 1219.56 L1869.16 1219.56 L1869.75 1219.56 L1870.34 1219.56 L1870.92 1219.56 L1871.51 1219.56 L1872.09 1219.56 L1872.68 1219.56 L1873.27 1219.56 L1873.85 1219.56 L1874.44 1219.56 L1875.03 1219.56 L1875.61 1219.56 L1876.2 1219.56 L1876.79 1219.56 L1877.37 1219.56 L1877.96 1219.56 L1878.55 1219.56 L1879.13 1219.56 L1879.72 1219.56 L1880.3 1219.56 L1880.89 1219.56 L1881.48 1219.56 L1882.06 1219.56 L1882.65 1219.56 L1883.24 1219.56 L1883.82 1219.56 L1884.41 1219.56 L1885 1219.56 L1885.58 1219.56 L1886.17 1219.56 L1886.76 1219.56 L1887.34 1219.56 L1887.93 1219.56 L1888.51 1219.56 L1889.1 1219.56 L1889.69 1219.56 L1890.27 1219.56 L1890.86 1219.56 L1891.45 1219.56 L1892.03 1219.56 L1892.62 1219.56 L1893.21 1219.56 L1893.79 1219.56 L1894.38 1219.56 L1894.96 1219.56 L1895.55 1219.56 L1896.14 1219.56 L1896.72 1219.56 L1897.31 1219.56 L1897.9 1219.56 L1898.48 1219.56 L1899.07 1219.56 L1899.66 1219.56 L1900.24 1219.56 L1900.83 1219.56 L1901.42 1219.56 L1902 1219.56 L1902.59 1219.56 L1903.17 1219.56 L1903.76 1219.56 L1904.35 1219.56 L1904.93 1219.56 L1905.52 1219.56 L1906.11 1219.56 L1906.69 1219.56 L1907.28 1219.56 L1907.87 1219.56 L1908.45 1219.56 L1909.04 1219.56 L1909.63 1219.56 L1910.21 1219.56 L1910.8 1219.56 L1911.38 1219.56 L1911.97 1219.56 L1912.56 1219.56 L1913.14 1219.56 L1913.73 1219.56 L1914.32 1219.56 L1914.9 1219.56 L1915.49 1219.56 L1916.08 1219.56 L1916.66 1219.56 L1917.25 1219.56 L1917.83 1219.56 L1918.42 1219.56 L1919.01 1219.56 L1919.59 1219.56 L1920.18 1219.56 L1920.77 1219.56 L1921.35 1219.56 L1921.94 1219.56 L1922.53 1219.56 L1923.11 1219.56 L1923.7 1219.56 L1924.29 1219.56 L1924.87 1219.56 L1925.46 1219.56 L1926.04 1219.56 L1926.63 1219.56 L1927.22 1219.56 L1927.8 1219.56 L1928.39 1219.56 L1928.98 1219.56 L1929.56 1219.56 L1930.15 1219.56 L1930.74 1219.56 L1931.32 1219.56 L1931.91 1219.56 L1932.5 1219.56 L1933.08 1219.56 L1933.67 1219.56 L1934.25 1219.56 L1934.84 1219.56 L1935.43 1219.56 L1936.01 1219.56 L1936.6 1219.56 L1937.19 1219.56 L1937.77 1219.56 L1938.36 1219.56 L1938.95 1219.56 L1939.53 1219.56 L1940.12 1219.56 L1940.71 1219.56 L1941.29 1219.56 L1941.88 1219.56 L1942.46 1219.56 L1943.05 1219.56 L1943.64 1219.56 L1944.22 1219.56 L1944.81 1219.56 L1945.4 1219.56 L1945.98 1219.56 L1946.57 1219.56 L1947.16 1219.56 L1947.74 1219.56 L1948.33 1219.56 L1948.91 1219.56 L1949.5 1219.56 L1950.09 1219.56 L1950.67 1219.56 L1951.26 1219.56 L1951.85 1219.56 L1952.43 1219.56 L1953.02 1219.56 L1953.61 1219.56 L1954.19 1219.56 L1954.78 1219.56 L1955.37 1219.56 L1955.95 1219.56 L1956.54 1219.56 L1957.12 1219.56 L1957.71 1219.56 L1958.3 1219.56 L1958.88 1219.56 L1959.47 1219.56 L1960.06 1219.56 L1960.64 1219.56 L1961.23 1219.56 L1961.82 1219.56 L1962.4 1219.56 L1962.99 1219.56 L1963.58 1219.56 L1964.16 1219.56 L1964.75 1219.56 L1965.33 1219.56 L1965.92 1219.56 L1966.51 1219.56 L1967.09 1219.56 L1967.68 1219.56 L1968.27 1219.56 L1968.85 1219.56 L1969.44 1219.56 L1970.03 1219.56 L1970.61 1219.56 L1971.2 1219.56 L1971.78 1219.56 L1972.37 1219.56 L1972.96 1219.56 L1973.54 1219.56 L1974.13 1219.56 L1974.72 1219.56 L1975.3 1219.56 L1975.89 1219.56 L1976.48 1219.56 L1977.06 1219.56 L1977.65 1219.56 L1978.24 1219.56 L1978.82 1219.56 L1979.41 1219.56 L1979.99 1219.56 L1980.58 1219.56 L1981.17 1219.56 L1981.75 1219.56 L1982.34 1219.56 L1982.93 1219.56 L1983.51 1219.56 L1984.1 1219.56 L1984.69 1219.56 L1985.27 1219.56 L1985.86 1219.56 L1986.45 1219.56 L1987.03 1219.56 L1987.62 1219.56 L1988.2 1219.56 L1988.79 1219.56 L1989.38 1219.56 L1989.96 1219.56 L1990.55 1219.56 L1991.14 1219.56 L1991.72 1219.56 L1992.31 1219.56 L1992.9 1219.56 L1993.48 1219.56 L1994.07 1219.56 L1994.65 1219.56 L1995.24 1219.56 L1995.83 1219.56 L1996.41 1219.56 L1997 1219.56 L1997.59 1219.56 L1998.17 1219.56 L1998.76 1219.56 L1999.35 1219.56 L1999.93 1219.56 L2000.52 1219.56 L2001.11 1219.56 L2001.69 1219.56 L2002.28 1219.56 L2002.86 1219.56 L2003.45 1219.56 L2004.04 1219.56 L2004.62 1219.56 L2005.21 1219.56 L2005.8 1219.56 L2006.38 1219.56 L2006.97 1219.56 L2007.56 1219.56 L2008.14 1219.56 L2008.73 1219.56 L2009.32 1219.56 L2009.9 1219.56 L2010.49 1219.56 L2011.07 1219.56 L2011.66 1219.56 L2012.25 1219.56 L2012.83 1219.56 L2013.42 1219.56 L2014.01 1219.56 L2014.59 1219.56 L2015.18 1219.56 L2015.77 1219.56 L2016.35 1219.56 L2016.94 1219.56 L2017.53 1219.56 L2018.11 1219.56 L2018.7 1219.56 L2019.28 1219.56 L2019.87 1219.56 L2020.46 1219.56 L2021.04 1219.56 L2021.63 1219.56 L2022.22 1219.56 L2022.8 1219.56 L2023.39 1219.56 L2023.98 1219.56 L2024.56 1219.56 L2025.15 1219.56 L2025.73 1219.56 L2026.32 1219.56 L2026.91 1219.56 L2027.49 1219.56 L2028.08 1219.56 L2028.67 1219.56 L2029.25 1219.56 L2029.84 1219.56 L2030.43 1219.56 L2031.01 1219.56 L2031.6 1219.56 L2032.19 1219.56 L2032.77 1219.56 L2033.36 1219.56 L2033.94 1219.56 L2034.53 1219.56 L2035.12 1219.56 L2035.7 1219.56 L2036.29 1219.56 L2036.88 1219.56 L2037.46 1219.56 L2038.05 1219.56 L2038.64 1219.56 L2039.22 1219.56 L2039.81 1219.56 L2040.4 1219.56 L2040.98 1219.56 L2041.57 1219.56 L2042.15 1219.56 L2042.74 1219.56 L2043.33 1219.56 L2043.91 1219.56 L2044.5 1219.56 L2045.09 1219.56 L2045.67 1219.56 L2046.26 1219.56 L2046.85 1219.56 L2047.43 1219.56 L2048.02 1219.56 L2048.6 1219.56 L2049.19 1219.56 L2049.78 1219.56 L2050.36 1219.56 L2050.95 1219.56 L2051.54 1219.56 L2052.12 1219.56 L2052.71 1219.56 L2053.3 1219.56 L2053.88 1219.56 L2054.47 1219.56 L2055.06 1219.56 L2055.64 1219.56 L2056.23 1219.56 L2056.81 1219.56 L2057.4 1219.56 L2057.99 1219.56 L2058.57 1219.56 L2059.16 1219.56 L2059.75 1219.56 L2060.33 1219.56 L2060.92 1219.56 L2061.51 1219.56 L2062.09 1219.56 L2062.68 1219.56 L2063.27 1219.56 L2063.85 1219.56 L2064.44 1219.56 L2065.02 1219.56 L2065.61 1219.56 L2066.2 1219.56 L2066.78 1219.56 L2067.37 1219.56 L2067.96 1219.56 L2068.54 1219.56 L2069.13 1219.56 L2069.72 1219.56 L2070.3 1219.56 L2070.89 1219.56 L2071.48 1219.56 L2072.06 1219.56 L2072.65 1219.56 L2073.23 1219.56 L2073.82 1219.56 L2074.41 1219.56 L2074.99 1219.56 L2075.58 1219.56 L2076.17 1219.56 L2076.75 1219.56 L2077.34 1219.56 L2077.93 1219.56 L2078.51 1219.56 L2079.1 1219.56 L2079.68 1219.56 L2080.27 1219.56 L2080.86 1219.56 L2081.44 1219.56 L2082.03 1219.56 L2082.62 1219.56 L2083.2 1219.56 L2083.79 1219.56 L2084.38 1219.56 L2084.96 1219.56 L2085.55 1219.56 L2086.14 1219.56 L2086.72 1219.56 L2087.31 1219.56 L2087.89 1219.56 L2088.48 1219.56 L2089.07 1219.56 L2089.65 1219.56 L2090.24 1219.56 L2090.83 1219.56 L2091.41 1219.56 L2092 1219.56 L2092.59 1219.56 L2093.17 1219.56 L2093.76 1219.56 L2094.35 1219.56 L2094.93 1219.56 L2095.52 1219.56 L2096.1 1219.56 L2096.69 1219.56 L2097.28 1219.56 L2097.86 1219.56 L2098.45 1219.56 L2099.04 1219.56 L2099.62 1219.56 L2100.21 1219.56 L2100.8 1219.56 L2101.38 1219.56 L2101.97 1219.56 L2102.55 1219.56 L2103.14 1219.56 L2103.73 1219.56 L2104.31 1219.56 L2104.9 1219.56 L2105.49 1219.56 L2106.07 1219.56 L2106.66 1219.56 L2107.25 1219.56 L2107.83 1219.56 L2108.42 1219.56 L2109.01 1219.56 L2109.59 1219.56 L2110.18 1219.56 L2110.76 1219.56 L2111.35 1219.56 L2111.94 1219.56 L2112.52 1219.56 L2113.11 1219.56 L2113.7 1219.56 L2114.28 1219.56 L2114.87 1219.56 L2115.46 1219.56 L2116.04 1219.56 L2116.63 1219.56 L2117.22 1219.56 L2117.8 1219.56 L2118.39 1219.56 L2118.97 1219.56 L2119.56 1219.56 L2120.15 1219.56 L2120.73 1219.56 L2121.32 1219.56 L2121.91 1219.56 L2122.49 1219.56 L2123.08 1219.56 L2123.67 1219.56 L2124.25 1219.56 L2124.84 1219.56 L2125.42 1219.56 L2126.01 1219.56 L2126.6 1219.56 L2127.18 1219.56 L2127.77 1219.56 L2128.36 1219.56 L2128.94 1219.56 L2129.53 1219.56 L2130.12 1219.56 L2130.7 1219.56 L2131.29 1219.56 L2131.88 1219.56 L2132.46 1219.56 L2133.05 1219.56 L2133.63 1219.56 L2134.22 1219.56 L2134.81 1219.56 L2135.39 1219.56 L2135.98 1219.56 L2136.57 1219.56 L2137.15 1219.56 L2137.74 1219.56 L2138.33 1219.56 L2138.91 1219.56 L2139.5 1219.56 L2140.09 1219.56 L2140.67 1219.56 L2141.26 1219.56 L2141.84 1219.56 L2142.43 1219.56 L2143.02 1219.56 L2143.6 1219.56 L2144.19 1219.56 L2144.78 1219.56 L2145.36 1219.56 L2145.95 1219.56 L2146.54 1219.56 L2147.12 1219.56 L2147.71 1219.56 L2148.3 1219.56 L2148.88 1219.56 L2149.47 1219.56 L2150.05 1219.56 L2150.64 1219.56 L2151.23 1219.56 L2151.81 1219.56 L2152.4 1219.56 L2152.99 1219.56 L2153.57 1219.56 L2154.16 1219.56 L2154.75 1219.56 L2155.33 1219.56 L2155.92 1219.56 L2156.5 1219.56 L2157.09 1219.56 L2157.68 1219.56 L2158.26 1219.56 L2158.26 1218.77 L2157.68 1218.77 L2157.09 1218.77 L2156.5 1218.77 L2155.92 1218.77 L2155.33 1218.77 L2154.75 1218.77 L2154.16 1218.77 L2153.57 1218.77 L2152.99 1218.77 L2152.4 1218.77 L2151.81 1218.77 L2151.23 1218.77 L2150.64 1218.77 L2150.05 1218.77 L2149.47 1218.77 L2148.88 1218.77 L2148.3 1218.77 L2147.71 1218.77 L2147.12 1218.77 L2146.54 1218.77 L2145.95 1218.77 L2145.36 1218.77 L2144.78 1218.77 L2144.19 1218.77 L2143.6 1218.77 L2143.02 1218.77 L2142.43 1218.77 L2141.84 1218.77 L2141.26 1218.77 L2140.67 1218.77 L2140.09 1218.77 L2139.5 1218.77 L2138.91 1218.77 L2138.33 1218.77 L2137.74 1218.77 L2137.15 1218.77 L2136.57 1218.77 L2135.98 1218.77 L2135.39 1218.77 L2134.81 1218.77 L2134.22 1218.77 L2133.63 1218.77 L2133.05 1218.77 L2132.46 1218.77 L2131.88 1218.77 L2131.29 1218.77 L2130.7 1218.77 L2130.12 1218.77 L2129.53 1218.77 L2128.94 1218.77 L2128.36 1218.77 L2127.77 1218.77 L2127.18 1218.77 L2126.6 1218.77 L2126.01 1218.77 L2125.42 1218.77 L2124.84 1218.77 L2124.25 1218.77 L2123.67 1218.77 L2123.08 1218.77 L2122.49 1218.77 L2121.91 1218.77 L2121.32 1218.77 L2120.73 1218.77 L2120.15 1218.77 L2119.56 1218.77 L2118.97 1218.77 L2118.39 1218.77 L2117.8 1218.77 L2117.22 1218.77 L2116.63 1218.77 L2116.04 1218.77 L2115.46 1218.77 L2114.87 1218.77 L2114.28 1218.77 L2113.7 1218.77 L2113.11 1218.77 L2112.52 1218.77 L2111.94 1218.77 L2111.35 1218.77 L2110.76 1218.77 L2110.18 1218.77 L2109.59 1218.77 L2109.01 1218.77 L2108.42 1218.77 L2107.83 1218.77 L2107.25 1218.77 L2106.66 1218.77 L2106.07 1218.77 L2105.49 1218.77 L2104.9 1218.77 L2104.31 1218.77 L2103.73 1218.77 L2103.14 1218.77 L2102.55 1218.77 L2101.97 1218.77 L2101.38 1218.77 L2100.8 1218.77 L2100.21 1218.77 L2099.62 1218.77 L2099.04 1218.77 L2098.45 1218.77 L2097.86 1218.77 L2097.28 1218.77 L2096.69 1218.77 L2096.1 1218.77 L2095.52 1218.77 L2094.93 1218.77 L2094.35 1218.77 L2093.76 1218.77 L2093.17 1218.77 L2092.59 1218.77 L2092 1218.77 L2091.41 1218.77 L2090.83 1218.77 L2090.24 1218.77 L2089.65 1218.77 L2089.07 1218.77 L2088.48 1218.77 L2087.89 1218.77 L2087.31 1218.77 L2086.72 1218.77 L2086.14 1218.77 L2085.55 1218.77 L2084.96 1218.77 L2084.38 1218.77 L2083.79 1218.77 L2083.2 1218.77 L2082.62 1218.77 L2082.03 1218.77 L2081.44 1218.77 L2080.86 1218.77 L2080.27 1218.77 L2079.68 1218.77 L2079.1 1218.77 L2078.51 1218.77 L2077.93 1218.77 L2077.34 1218.77 L2076.75 1218.77 L2076.17 1218.77 L2075.58 1218.77 L2074.99 1218.77 L2074.41 1218.77 L2073.82 1218.77 L2073.23 1218.77 L2072.65 1218.77 L2072.06 1218.77 L2071.48 1218.77 L2070.89 1218.77 L2070.3 1218.77 L2069.72 1218.77 L2069.13 1218.77 L2068.54 1218.77 L2067.96 1218.77 L2067.37 1218.77 L2066.78 1218.77 L2066.2 1218.77 L2065.61 1218.77 L2065.02 1218.77 L2064.44 1218.77 L2063.85 1218.77 L2063.27 1218.77 L2062.68 1218.77 L2062.09 1218.77 L2061.51 1218.77 L2060.92 1218.77 L2060.33 1218.77 L2059.75 1218.77 L2059.16 1218.77 L2058.57 1218.77 L2057.99 1218.77 L2057.4 1218.77 L2056.81 1218.77 L2056.23 1218.77 L2055.64 1218.77 L2055.06 1218.77 L2054.47 1218.77 L2053.88 1218.77 L2053.3 1218.77 L2052.71 1218.77 L2052.12 1218.77 L2051.54 1218.77 L2050.95 1218.77 L2050.36 1218.77 L2049.78 1218.77 L2049.19 1218.77 L2048.6 1218.77 L2048.02 1218.77 L2047.43 1218.77 L2046.85 1218.77 L2046.26 1218.77 L2045.67 1218.77 L2045.09 1218.77 L2044.5 1218.77 L2043.91 1218.77 L2043.33 1218.77 L2042.74 1218.77 L2042.15 1218.77 L2041.57 1218.77 L2040.98 1218.77 L2040.4 1218.77 L2039.81 1218.77 L2039.22 1218.77 L2038.64 1218.77 L2038.05 1218.77 L2037.46 1218.77 L2036.88 1218.77 L2036.29 1218.77 L2035.7 1218.77 L2035.12 1218.77 L2034.53 1218.77 L2033.94 1218.77 L2033.36 1218.77 L2032.77 1218.77 L2032.19 1218.77 L2031.6 1218.77 L2031.01 1218.77 L2030.43 1218.77 L2029.84 1218.77 L2029.25 1218.77 L2028.67 1218.77 L2028.08 1218.77 L2027.49 1218.77 L2026.91 1218.77 L2026.32 1218.77 L2025.73 1218.77 L2025.15 1218.77 L2024.56 1218.77 L2023.98 1218.77 L2023.39 1218.77 L2022.8 1218.77 L2022.22 1218.77 L2021.63 1218.77 L2021.04 1218.77 L2020.46 1218.77 L2019.87 1218.77 L2019.28 1218.77 L2018.7 1218.77 L2018.11 1218.77 L2017.53 1218.77 L2016.94 1218.77 L2016.35 1218.77 L2015.77 1218.77 L2015.18 1218.77 L2014.59 1218.77 L2014.01 1218.77 L2013.42 1218.77 L2012.83 1218.77 L2012.25 1218.77 L2011.66 1218.77 L2011.07 1218.77 L2010.49 1218.77 L2009.9 1218.77 L2009.32 1218.77 L2008.73 1218.77 L2008.14 1218.77 L2007.56 1218.77 L2006.97 1218.77 L2006.38 1218.77 L2005.8 1218.77 L2005.21 1218.77 L2004.62 1218.77 L2004.04 1218.77 L2003.45 1218.77 L2002.86 1218.77 L2002.28 1218.77 L2001.69 1218.77 L2001.11 1218.77 L2000.52 1218.77 L1999.93 1218.77 L1999.35 1218.77 L1998.76 1218.77 L1998.17 1218.77 L1997.59 1218.77 L1997 1218.77 L1996.41 1218.77 L1995.83 1218.77 L1995.24 1218.77 L1994.65 1218.77 L1994.07 1218.77 L1993.48 1218.77 L1992.9 1218.77 L1992.31 1218.77 L1991.72 1218.77 L1991.14 1218.77 L1990.55 1218.77 L1989.96 1218.77 L1989.38 1218.77 L1988.79 1218.77 L1988.2 1218.77 L1987.62 1218.77 L1987.03 1218.77 L1986.45 1218.77 L1985.86 1218.77 L1985.27 1218.77 L1984.69 1218.77 L1984.1 1218.77 L1983.51 1218.77 L1982.93 1218.77 L1982.34 1218.77 L1981.75 1218.77 L1981.17 1218.77 L1980.58 1218.77 L1979.99 1218.77 L1979.41 1218.77 L1978.82 1218.77 L1978.24 1218.77 L1977.65 1218.77 L1977.06 1218.77 L1976.48 1218.77 L1975.89 1218.77 L1975.3 1218.77 L1974.72 1218.77 L1974.13 1218.77 L1973.54 1218.77 L1972.96 1218.77 L1972.37 1218.77 L1971.78 1218.77 L1971.2 1218.77 L1970.61 1218.77 L1970.03 1218.77 L1969.44 1218.77 L1968.85 1218.77 L1968.27 1218.77 L1967.68 1218.77 L1967.09 1218.77 L1966.51 1218.77 L1965.92 1218.77 L1965.33 1218.77 L1964.75 1218.77 L1964.16 1218.77 L1963.58 1218.77 L1962.99 1218.77 L1962.4 1218.77 L1961.82 1218.77 L1961.23 1218.77 L1960.64 1218.77 L1960.06 1218.77 L1959.47 1218.77 L1958.88 1218.77 L1958.3 1218.77 L1957.71 1218.77 L1957.12 1218.77 L1956.54 1218.77 L1955.95 1218.77 L1955.37 1218.77 L1954.78 1218.77 L1954.19 1218.77 L1953.61 1218.77 L1953.02 1218.77 L1952.43 1218.77 L1951.85 1218.77 L1951.26 1218.77 L1950.67 1218.77 L1950.09 1218.77 L1949.5 1218.77 L1948.91 1218.77 L1948.33 1218.77 L1947.74 1218.77 L1947.16 1218.77 L1946.57 1218.77 L1945.98 1218.77 L1945.4 1218.77 L1944.81 1218.77 L1944.22 1218.77 L1943.64 1218.77 L1943.05 1218.77 L1942.46 1218.77 L1941.88 1218.77 L1941.29 1218.77 L1940.71 1218.77 L1940.12 1218.77 L1939.53 1218.77 L1938.95 1218.77 L1938.36 1218.77 L1937.77 1218.77 L1937.19 1218.77 L1936.6 1218.77 L1936.01 1218.77 L1935.43 1218.77 L1934.84 1218.77 L1934.25 1218.77 L1933.67 1218.77 L1933.08 1218.77 L1932.5 1218.77 L1931.91 1218.77 L1931.32 1218.77 L1930.74 1218.77 L1930.15 1218.77 L1929.56 1218.77 L1928.98 1218.77 L1928.39 1218.77 L1927.8 1218.77 L1927.22 1218.77 L1926.63 1218.77 L1926.04 1218.77 L1925.46 1218.77 L1924.87 1218.77 L1924.29 1218.77 L1923.7 1218.77 L1923.11 1218.77 L1922.53 1218.77 L1921.94 1218.77 L1921.35 1218.77 L1920.77 1218.77 L1920.18 1218.77 L1919.59 1218.77 L1919.01 1218.77 L1918.42 1218.77 L1917.83 1218.77 L1917.25 1218.77 L1916.66 1218.77 L1916.08 1218.77 L1915.49 1218.77 L1914.9 1218.77 L1914.32 1218.77 L1913.73 1218.77 L1913.14 1218.77 L1912.56 1218.77 L1911.97 1218.77 L1911.38 1218.77 L1910.8 1218.77 L1910.21 1218.77 L1909.63 1218.77 L1909.04 1218.77 L1908.45 1218.77 L1907.87 1218.77 L1907.28 1218.77 L1906.69 1218.77 L1906.11 1218.77 L1905.52 1218.77 L1904.93 1218.77 L1904.35 1218.77 L1903.76 1218.77 L1903.17 1218.77 L1902.59 1218.77 L1902 1218.77 L1901.42 1218.77 L1900.83 1218.77 L1900.24 1218.77 L1899.66 1218.77 L1899.07 1218.77 L1898.48 1218.77 L1897.9 1218.77 L1897.31 1218.77 L1896.72 1218.77 L1896.14 1218.77 L1895.55 1218.77 L1894.96 1218.77 L1894.38 1218.77 L1893.79 1218.77 L1893.21 1218.77 L1892.62 1218.77 L1892.03 1218.77 L1891.45 1218.77 L1890.86 1218.77 L1890.27 1218.77 L1889.69 1218.77 L1889.1 1218.77 L1888.51 1218.77 L1887.93 1218.77 L1887.34 1218.77 L1886.76 1218.77 L1886.17 1218.77 L1885.58 1218.77 L1885 1218.77 L1884.41 1218.77 L1883.82 1218.77 L1883.24 1218.77 L1882.65 1218.77 L1882.06 1218.77 L1881.48 1218.77 L1880.89 1218.77 L1880.3 1218.77 L1879.72 1218.77 L1879.13 1218.77 L1878.55 1218.77 L1877.96 1218.77 L1877.37 1218.77 L1876.79 1218.77 L1876.2 1218.77 L1875.61 1218.77 L1875.03 1218.77 L1874.44 1218.77 L1873.85 1218.77 L1873.27 1218.77 L1872.68 1218.77 L1872.09 1218.77 L1871.51 1218.77 L1870.92 1218.77 L1870.34 1218.77 L1869.75 1218.77 L1869.16 1218.77 L1868.58 1218.77 L1867.99 1218.77 L1867.4 1218.77 L1866.82 1218.77 L1866.23 1218.77 L1865.64 1218.77 L1865.06 1218.77 L1864.47 1218.77 L1863.88 1218.77 L1863.3 1218.77 L1862.71 1218.77 L1862.13 1218.77 L1861.54 1218.77 L1860.95 1218.77 L1860.37 1218.77 L1859.78 1218.77 L1859.19 1218.77 L1858.61 1218.77 L1858.02 1218.77 L1857.43 1218.77 L1856.85 1218.77 L1856.26 1218.77 L1855.68 1218.77 L1855.09 1218.77 L1854.5 1218.77 L1853.92 1218.77 L1853.33 1218.77 L1852.74 1218.77 L1852.16 1218.77 L1851.57 1218.77 L1850.98 1218.77 L1850.4 1218.77 L1849.81 1218.77 L1849.22 1218.77 L1848.64 1218.77 L1848.05 1218.77 L1847.47 1218.77 L1846.88 1218.77 L1846.29 1218.77 L1845.71 1218.77 L1845.12 1218.77 L1844.53 1218.77 L1843.95 1218.77 L1843.36 1218.77 L1842.77 1218.77 L1842.19 1218.77 L1841.6 1218.77 L1841.01 1218.77 L1840.43 1218.77 L1839.84 1218.77 L1839.26 1218.77 L1838.67 1218.77 L1838.08 1218.77 L1837.5 1218.77 L1836.91 1218.77 L1836.32 1218.77 L1835.74 1218.77 L1835.15 1218.77 L1834.56 1218.77 L1833.98 1218.77 L1833.39 1218.77 L1832.81 1218.77 L1832.22 1218.77 L1831.63 1218.77 L1831.05 1218.77 L1830.46 1218.77 L1829.87 1218.77 L1829.29 1218.77 L1828.7 1218.77 L1828.11 1218.77 L1827.53 1218.77 L1826.94 1218.77 L1826.35 1218.77 L1825.77 1218.77 L1825.18 1218.77 L1824.6 1218.77 L1824.01 1218.77 L1823.42 1218.77 L1822.84 1218.77 L1822.25 1218.77 L1821.66 1218.77 L1821.08 1218.77 L1820.49 1218.77 L1819.9 1218.77 L1819.32 1218.77 L1818.73 1218.77 L1818.14 1218.77 L1817.56 1218.77 L1816.97 1218.77 L1816.39 1218.77 L1815.8 1218.77 L1815.21 1218.77 L1814.63 1218.77 L1814.04 1218.77 L1813.45 1218.77 L1812.87 1218.77 L1812.28 1218.77 L1811.69 1218.77 L1811.11 1218.77 L1810.52 1218.77 L1809.94 1218.77 L1809.35 1218.77 L1808.76 1218.77 L1808.18 1218.77 L1807.59 1218.77 L1807 1218.77 L1806.42 1218.77 L1805.83 1218.77 L1805.24 1218.77 L1804.66 1218.77 L1804.07 1218.77 L1803.48 1218.77 L1802.9 1218.77 L1802.31 1218.77 L1801.73 1218.77 L1801.14 1218.77 L1800.55 1218.77 L1799.97 1218.77 L1799.38 1218.77 L1798.79 1218.77 L1798.21 1218.77 L1797.62 1218.77 L1797.03 1218.77 L1796.45 1218.77 L1795.86 1218.77 L1795.27 1218.77 L1794.69 1218.77 L1794.1 1218.77 L1793.52 1218.77 L1792.93 1218.77 L1792.34 1218.77 L1791.76 1218.77 L1791.17 1218.77 L1790.58 1218.77 L1790 1218.77 L1789.41 1218.77 L1788.82 1218.77 L1788.24 1218.77 L1787.65 1218.77 L1787.06 1218.77 L1786.48 1218.77 L1785.89 1218.77 L1785.31 1218.77 L1784.72 1218.77 L1784.13 1218.77 L1783.55 1218.77 L1782.96 1218.77 L1782.37 1218.77 L1781.79 1218.77 L1781.2 1218.77 L1780.61 1218.77 L1780.03 1218.77 L1779.44 1218.77 L1778.86 1218.77 L1778.27 1218.77 L1777.68 1218.77 L1777.1 1218.77 L1776.51 1218.77 L1775.92 1218.77 L1775.34 1218.77 L1774.75 1218.77 L1774.16 1218.77 L1773.58 1218.77 L1772.99 1218.77 L1772.4 1218.77 L1771.82 1218.77 L1771.23 1218.77 L1770.65 1218.77 L1770.06 1218.77 L1769.47 1218.77 L1768.89 1218.77 L1768.3 1218.77 L1767.71 1218.77 L1767.13 1218.77 L1766.54 1218.77 L1765.95 1218.77 L1765.37 1218.77 L1764.78 1218.77 L1764.19 1218.77 L1763.61 1218.77 L1763.02 1218.77 L1762.44 1218.77 L1761.85 1218.77 L1761.26 1218.77 L1760.68 1218.77 L1760.09 1218.77 L1759.5 1218.77 L1758.92 1218.77 L1758.33 1218.77 L1757.74 1218.77 L1757.16 1218.77 L1756.57 1218.77 L1755.99 1218.77 L1755.4 1218.77 L1754.81 1218.77 L1754.23 1218.77 L1753.64 1218.77 L1753.05 1218.77 L1752.47 1218.77 L1751.88 1218.77 L1751.29 1218.77 L1750.71 1218.77 L1750.12 1218.77 L1749.53 1218.77 L1748.95 1218.77 L1748.36 1218.77 L1747.78 1218.77 L1747.19 1218.77 L1746.6 1218.77 L1746.02 1218.77 L1745.43 1218.77 L1744.84 1218.77 L1744.26 1218.77 L1743.67 1218.77 L1743.08 1218.77 L1742.5 1218.77 L1741.91 1218.77 L1741.32 1218.77 L1740.74 1218.77 L1740.15 1218.77 L1739.57 1218.77 L1738.98 1218.77 L1738.39 1218.77 L1737.81 1218.77 L1737.22 1218.77 L1736.63 1218.77 L1736.05 1218.77 L1735.46 1218.77 L1734.87 1218.77 L1734.29 1218.77 L1733.7 1218.77 L1733.11 1218.77 L1732.53 1218.77 L1731.94 1218.77 L1731.36 1218.77 L1730.77 1218.77 L1730.18 1218.77 L1729.6 1218.77 L1729.01 1218.77 L1728.42 1218.77 L1727.84 1218.77 L1727.25 1218.77 L1726.66 1218.77 L1726.08 1218.77 L1725.49 1218.77 L1724.91 1218.77 L1724.32 1218.77 L1723.73 1218.77 L1723.15 1218.77 L1722.56 1218.77 L1721.97 1218.77 L1721.39 1218.77 L1720.8 1218.77 L1720.21 1218.77 L1719.63 1218.77 L1719.04 1218.77 L1718.45 1218.77 L1717.87 1218.77 L1717.28 1218.77 L1716.7 1218.77 L1716.11 1218.77 L1715.52 1218.77 L1714.94 1218.77 L1714.35 1218.77 L1713.76 1218.77 L1713.18 1218.77 L1712.59 1218.77 L1712 1218.77 L1711.42 1218.77 L1710.83 1218.77 L1710.24 1218.77 L1709.66 1218.77 L1709.07 1218.77 L1708.49 1218.77 L1707.9 1218.77 L1707.31 1218.77 L1706.73 1218.77 L1706.14 1218.77 L1705.55 1218.77 L1704.97 1218.77 L1704.38 1218.77 L1703.79 1218.77 L1703.21 1218.77 L1702.62 1218.77 L1702.04 1218.77 L1701.45 1218.77 L1700.86 1218.77 L1700.28 1218.77 L1699.69 1218.77 L1699.1 1218.77 L1698.52 1218.77 L1697.93 1218.77 L1697.34 1218.77 L1696.76 1218.77 L1696.17 1218.77 L1695.58 1218.77 L1695 1218.77 L1694.41 1218.77 L1693.83 1218.77 L1693.24 1218.77 L1692.65 1218.77 L1692.07 1218.77 L1691.48 1218.77 L1690.89 1218.77 L1690.31 1218.77 L1689.72 1218.77 L1689.13 1218.77 L1688.55 1218.77 L1687.96 1218.77 L1687.37 1218.77 L1686.79 1218.77 L1686.2 1218.77 L1685.62 1218.77 L1685.03 1218.77 L1684.44 1218.77 L1683.86 1218.77 L1683.27 1218.77 L1682.68 1218.77 L1682.1 1218.77 L1681.51 1218.77 L1680.92 1218.77 L1680.34 1218.77 L1679.75 1218.77 L1679.17 1218.77 L1678.58 1218.77 L1677.99 1218.77 L1677.41 1218.77 L1676.82 1218.77 L1676.23 1218.77 L1675.65 1218.77 L1675.06 1218.77 L1674.47 1218.77 L1673.89 1218.77 L1673.3 1218.77 L1672.71 1218.77 L1672.13 1218.77 L1671.54 1218.77 L1670.96 1218.77 L1670.37 1218.77 L1669.78 1218.77 L1669.2 1218.77 L1668.61 1218.77 L1668.02 1218.77 L1667.44 1218.77 L1666.85 1218.77 L1666.26 1218.77 L1665.68 1218.77 L1665.09 1218.77 L1664.5 1218.77 L1663.92 1218.77 L1663.33 1218.77 L1662.75 1218.77 L1662.16 1218.77 L1661.57 1218.77 L1660.99 1218.77 L1660.4 1218.77 L1659.81 1218.77 L1659.23 1218.77 L1658.64 1218.77 L1658.05 1218.77 L1657.47 1218.77 L1656.88 1218.77 L1656.29 1218.77 L1655.71 1218.77 L1655.12 1218.77 L1654.54 1218.77 L1653.95 1218.77 L1653.36 1218.77 L1652.78 1218.77 L1652.19 1218.77 L1651.6 1218.77 L1651.02 1218.77 L1650.43 1218.77 L1649.84 1218.77 L1649.26 1218.77 L1648.67 1218.77 L1648.09 1218.77 L1647.5 1218.77 L1646.91 1218.77 L1646.33 1218.77 L1645.74 1218.77 L1645.15 1218.77 L1644.57 1218.77 L1643.98 1218.77 L1643.39 1218.77 L1642.81 1218.77 L1642.22 1218.77 L1641.63 1218.77 L1641.05 1218.77 L1640.46 1218.77 L1639.88 1218.77 L1639.29 1218.77 L1638.7 1218.77 L1638.12 1218.77 L1637.53 1218.77 L1636.94 1218.77 L1636.36 1218.77 L1635.77 1218.77 L1635.18 1218.77 L1634.6 1218.77 L1634.01 1218.77 L1633.42 1218.77 L1632.84 1218.77 L1632.25 1218.77 L1631.67 1218.77 L1631.08 1218.77 L1630.49 1218.77 L1629.91 1218.77 L1629.32 1218.77 L1628.73 1218.77 L1628.15 1218.77 L1627.56 1218.77 L1626.97 1218.77 L1626.39 1218.77 L1625.8 1218.77 L1625.22 1218.77 L1624.63 1218.77 L1624.04 1218.77 L1623.46 1218.77 L1622.87 1218.77 L1622.28 1218.77 L1621.7 1218.77 L1621.11 1218.77 L1620.52 1218.77 L1619.94 1218.77 L1619.35 1218.77 L1618.76 1218.77 L1618.18 1218.77 L1617.59 1218.77 L1617.01 1218.77 L1616.42 1218.77 L1615.83 1218.77 L1615.25 1218.77 L1614.66 1218.77 L1614.07 1218.77 L1613.49 1218.77 L1612.9 1218.77 L1612.31 1218.77 L1611.73 1218.77 L1611.14 1218.77 L1610.55 1218.77 L1609.97 1218.77 L1609.38 1218.77 L1608.8 1218.77 L1608.21 1218.77 L1607.62 1218.77 L1607.04 1218.77 L1606.45 1218.77 L1605.86 1218.77 L1605.28 1218.77 L1604.69 1218.77 L1604.1 1218.77 L1603.52 1218.77 L1602.93 1218.77 L1602.34 1218.77 L1601.76 1218.77 L1601.17 1218.77 L1600.59 1218.77 L1600 1218.77 L1599.41 1218.77 L1598.83 1218.77 L1598.24 1218.77 L1597.65 1218.77 L1597.07 1218.77 L1596.48 1218.77 L1595.89 1218.77 L1595.31 1218.77 L1594.72 1218.77 L1594.14 1218.77 L1593.55 1218.77 L1592.96 1218.77 L1592.38 1218.77 L1591.79 1218.77 L1591.2 1218.77 L1590.62 1218.77 L1590.03 1218.77 L1589.44 1218.77 L1588.86 1218.77 L1588.27 1218.77 L1587.68 1218.77 L1587.1 1218.77 L1586.51 1218.77 L1585.93 1218.77 L1585.34 1218.77 L1584.75 1218.77 L1584.17 1218.77 L1583.58 1218.77 L1582.99 1218.77 L1582.41 1218.77 L1581.82 1218.77 L1581.23 1218.77 L1580.65 1218.77 L1580.06 1218.77 L1579.47 1218.77 L1578.89 1218.77 L1578.3 1218.77 L1577.72 1218.77 L1577.13 1218.77 L1576.54 1218.77 L1575.96 1218.77 L1575.37 1218.77 L1574.78 1218.77 L1574.2 1218.77 L1573.61 1218.77 L1573.02 1218.77 L1572.44 1218.77 L1571.85 1218.77 L1571.27 1218.77 L1570.68 1218.77 L1570.09 1218.77 L1569.51 1218.77 L1568.92 1218.77 L1568.33 1218.77 L1567.75 1218.77 L1567.16 1218.77 L1566.57 1218.77 L1565.99 1218.77 L1565.4 1218.77 L1564.81 1218.77 L1564.23 1218.77 L1563.64 1218.77 L1563.06 1218.77 L1562.47 1218.77 L1561.88 1218.77 L1561.3 1218.77 L1560.71 1218.77 L1560.12 1218.77 L1559.54 1218.77 L1558.95 1218.77 L1558.36 1218.77 L1557.78 1218.77 L1557.19 1218.77 L1556.6 1218.77 L1556.02 1218.77 L1555.43 1218.77 L1554.85 1218.77 L1554.26 1218.77 L1553.67 1218.77 L1553.09 1218.77 L1552.5 1218.77 L1551.91 1218.77 L1551.33 1218.77 L1550.74 1218.77 L1550.15 1218.77 L1549.57 1218.77 L1548.98 1218.77 L1548.4 1218.77 L1547.81 1218.77 L1547.22 1218.77 L1546.64 1218.77 L1546.05 1218.77 L1545.46 1218.77 L1544.88 1218.77 L1544.29 1218.77 L1543.7 1218.77 L1543.12 1218.77 L1542.53 1218.77 L1541.94 1218.77 L1541.36 1218.77 L1540.77 1218.77 L1540.19 1218.77 L1539.6 1218.77 L1539.01 1218.77 L1538.43 1218.77 L1537.84 1218.77 L1537.25 1218.77 L1536.67 1218.77 L1536.08 1218.77 L1535.49 1218.77 L1534.91 1218.77 L1534.32 1218.77 L1533.73 1218.77 L1533.15 1218.77 L1532.56 1218.77 L1531.98 1218.77 L1531.39 1218.77 L1530.8 1218.77 L1530.22 1218.77 L1529.63 1218.77 L1529.04 1218.77 L1528.46 1218.77 L1527.87 1218.77 L1527.28 1218.77 L1526.7 1218.77 L1526.11 1218.77 L1525.52 1218.77 L1524.94 1218.77 L1524.35 1218.77 L1523.77 1218.77 L1523.18 1218.77 L1522.59 1218.77 L1522.01 1218.77 L1521.42 1218.77 L1520.83 1218.77 L1520.25 1218.77 L1519.66 1218.77 L1519.07 1218.77 L1518.49 1218.77 L1517.9 1218.77 L1517.32 1218.77 L1516.73 1218.77 L1516.14 1218.77 L1515.56 1218.77 L1514.97 1218.77 L1514.38 1218.77 L1513.8 1218.77 L1513.21 1218.77 L1512.62 1218.77 L1512.04 1218.77 L1511.45 1218.77 L1510.86 1218.77 L1510.28 1218.77 L1509.69 1218.77 L1509.11 1218.77 L1508.52 1218.77 L1507.93 1218.77 L1507.35 1218.77 L1506.76 1218.77 L1506.17 1218.77 L1505.59 1218.77 L1505 1218.77 L1504.41 1218.77 L1503.83 1218.77 L1503.24 1218.77 L1502.65 1218.77 L1502.07 1218.77 L1501.48 1218.77 L1500.9 1218.77 L1500.31 1218.77 L1499.72 1218.77 L1499.14 1218.77 L1498.55 1218.77 L1497.96 1218.77 L1497.38 1218.77 L1496.79 1218.77 L1496.2 1218.77 L1495.62 1218.77 L1495.03 1218.77 L1494.45 1218.77 L1493.86 1218.77 L1493.27 1218.77 L1492.69 1218.77 L1492.1 1218.77 L1491.51 1218.77 L1490.93 1218.77 L1490.34 1218.77 L1489.75 1218.77 L1489.17 1218.77 L1488.58 1218.77 L1487.99 1218.77 L1487.41 1218.77 L1486.82 1218.77 L1486.24 1218.77 L1485.65 1218.77 L1485.06 1218.77 L1484.48 1218.77 L1483.89 1218.77 L1483.3 1218.77 L1482.72 1218.77 L1482.13 1218.77 L1481.54 1218.77 L1480.96 1218.77 L1480.37 1218.77 L1479.78 1218.77 L1479.2 1218.77 L1478.61 1218.77 L1478.03 1218.77 L1477.44 1218.77 L1476.85 1218.77 L1476.27 1218.77 L1475.68 1218.77 L1475.09 1218.77 L1474.51 1218.77 L1473.92 1218.77 L1473.33 1218.77 L1472.75 1218.77 L1472.16 1218.77 L1471.57 1218.77 L1470.99 1218.77 L1470.4 1218.77 L1469.82 1218.77 L1469.23 1218.77 L1468.64 1218.77 L1468.06 1218.77 L1467.47 1218.77 L1466.88 1218.77 L1466.3 1218.77 L1465.71 1218.77 L1465.12 1218.77 L1464.54 1218.77 L1463.95 1218.77 L1463.37 1218.77 L1462.78 1218.77 L1462.19 1218.77 L1461.61 1218.77 L1461.02 1218.77 L1460.43 1218.77 L1459.85 1218.77 L1459.26 1218.77 L1458.67 1218.77 L1458.09 1218.77 L1457.5 1218.77 L1456.91 1218.77 L1456.33 1218.77 L1455.74 1218.77 L1455.16 1218.77 L1454.57 1218.77 L1453.98 1218.77 L1453.4 1218.77 L1452.81 1218.77 L1452.22 1218.77 L1451.64 1218.77 L1451.05 1218.77 L1450.46 1218.77 L1449.88 1218.77 L1449.29 1218.77 L1448.7 1218.77 L1448.12 1218.77 L1447.53 1218.77 L1446.95 1218.77 L1446.36 1218.77 L1445.77 1218.77 L1445.19 1218.77 L1444.6 1218.77 L1444.01 1218.77 L1443.43 1218.77 L1442.84 1218.77 L1442.25 1218.77 L1441.67 1218.77 L1441.08 1218.77 L1440.5 1218.77 L1439.91 1218.77 L1439.32 1218.77 L1438.74 1218.77 L1438.15 1218.77 L1437.56 1218.77 L1436.98 1218.77 L1436.39 1218.77 L1435.8 1218.77 L1435.22 1218.77 L1434.63 1218.77 L1434.04 1218.77 L1433.46 1218.77 L1432.87 1218.77 L1432.29 1218.77 L1431.7 1218.77 L1431.11 1218.77 L1430.53 1218.77 L1429.94 1218.77 L1429.35 1218.77 L1428.77 1218.77 L1428.18 1218.77 L1427.59 1218.77 L1427.01 1218.77 L1426.42 1218.77 L1425.83 1218.77 L1425.25 1218.77 L1424.66 1218.77 L1424.08 1218.77 L1423.49 1218.77 L1422.9 1218.77 L1422.32 1218.77 L1421.73 1218.77 L1421.14 1218.77 L1420.56 1218.77 L1419.97 1218.77 L1419.38 1218.77 L1418.8 1218.77 L1418.21 1218.77 L1417.63 1218.77 L1417.04 1218.77 L1416.45 1218.77 L1415.87 1218.77 L1415.28 1218.77 L1414.69 1218.77 L1414.11 1218.77 L1413.52 1218.77 L1412.93 1218.77 L1412.35 1218.77 L1411.76 1218.77 L1411.17 1218.77 L1410.59 1218.77 L1410 1218.77 L1409.42 1218.77 L1408.83 1218.77 L1408.24 1218.77 L1407.66 1218.77 L1407.07 1218.77 L1406.48 1218.77 L1405.9 1218.77 L1405.31 1218.77 L1404.72 1218.77 L1404.14 1218.77 L1403.55 1218.77 L1402.96 1218.77 L1402.38 1218.77 L1401.79 1218.77 L1401.21 1218.77 L1400.62 1218.77 L1400.03 1218.77 L1399.45 1218.77 L1398.86 1218.77 L1398.27 1218.77 L1397.69 1218.77 L1397.1 1218.77 L1396.51 1218.77 L1395.93 1218.77 L1395.34 1218.77 L1394.75 1218.77 L1394.17 1218.77 L1393.58 1218.77 L1393 1218.77 L1392.41 1218.77 L1391.82 1218.77 L1391.24 1218.77 L1390.65 1218.77 L1390.06 1218.77 L1389.48 1218.77 L1388.89 1218.77 L1388.3 1218.77 L1387.72 1218.77 L1387.13 1218.77 L1386.55 1218.77 L1385.96 1218.77 L1385.37 1218.77 L1384.79 1218.77 L1384.2 1218.77 L1383.61 1218.77 L1383.03 1218.77 L1382.44 1218.77 L1381.85 1218.77 L1381.27 1218.77 L1380.68 1218.77 L1380.09 1218.77 L1379.51 1218.77 L1378.92 1218.77 L1378.34 1218.77 L1377.75 1218.77 L1377.16 1218.77 L1376.58 1218.77 L1375.99 1218.77 L1375.4 1218.77 L1374.82 1218.77 L1374.23 1218.77 L1373.64 1218.77 L1373.06 1218.77 L1372.47 1218.77 L1371.88 1218.77 L1371.3 1218.77 L1370.71 1218.77 L1370.13 1218.77 L1369.54 1218.77 L1368.95 1218.77 L1368.37 1218.77 L1367.78 1218.77 L1367.19 1218.77 L1366.61 1218.77 L1366.02 1218.77 L1365.43 1218.77 L1364.85 1218.77 L1364.26 1218.77 L1363.68 1218.77 L1363.09 1218.77 L1362.5 1218.77 L1361.92 1218.77 L1361.33 1218.77 L1360.74 1218.77 L1360.16 1218.77 L1359.57 1218.77 L1358.98 1218.77 L1358.4 1218.77 L1357.81 1218.77 L1357.22 1218.77 L1356.64 1218.77 L1356.05 1218.77 L1355.47 1218.77 L1354.88 1218.77 L1354.29 1218.77 L1353.71 1218.77 L1353.12 1218.77 L1352.53 1218.77 L1351.95 1218.77 L1351.36 1218.77 L1350.77 1218.77 L1350.19 1218.77 L1349.6 1218.77 L1349.01 1218.77 L1348.43 1218.77 L1347.84 1218.77 L1347.26 1218.77 L1346.67 1218.77 L1346.08 1218.77 L1345.5 1218.77 L1344.91 1218.77 L1344.32 1218.77 L1343.74 1218.77 L1343.15 1218.77 L1342.56 1218.77 L1341.98 1218.77 L1341.39 1218.77 L1340.8 1218.77 L1340.22 1218.77 L1339.63 1218.77 L1339.05 1218.77 L1338.46 1218.77 L1337.87 1218.77 L1337.29 1218.77 L1336.7 1218.77 L1336.11 1218.77 L1335.53 1218.77 L1334.94 1218.77 L1334.35 1218.77 L1333.77 1218.77 L1333.18 1218.77 L1332.6 1218.77 L1332.01 1218.77 L1331.42 1218.77 L1330.84 1218.77 L1330.25 1218.77 L1329.66 1218.77 L1329.08 1218.77 L1328.49 1218.77 L1327.9 1218.77 L1327.32 1218.77 L1326.73 1218.77 L1326.14 1218.77 L1325.56 1218.77 L1324.97 1218.77 L1324.39 1218.77 L1323.8 1218.77 L1323.21 1218.77 L1322.63 1218.77 L1322.04 1218.77 L1321.45 1218.77 L1320.87 1218.77 L1320.28 1218.77 L1319.69 1218.77 L1319.11 1218.77 L1318.52 1218.77 L1317.93 1218.77 L1317.35 1218.77 L1316.76 1218.77 L1316.18 1218.77 L1315.59 1218.77 L1315 1218.77 L1314.42 1218.77 L1313.83 1218.77 L1313.24 1218.77 L1312.66 1218.77 L1312.07 1218.77 L1311.48 1218.77 L1310.9 1218.77 L1310.31 1218.77 L1309.73 1218.77 L1309.14 1218.77 L1308.55 1218.77 L1307.97 1218.77 L1307.38 1218.77 L1306.79 1218.77 L1306.21 1218.77 L1305.62 1218.77 L1305.03 1218.77 L1304.45 1218.77 L1303.86 1218.77 L1303.27 1218.77 L1302.69 1218.77 L1302.1 1218.77 L1301.52 1218.77 L1300.93 1218.77 L1300.34 1218.77 L1299.76 1218.77 L1299.17 1218.77 L1298.58 1218.77 L1298 1218.77 L1297.41 1218.77 L1296.82 1218.77 L1296.24 1218.77 L1295.65 1218.77 L1295.06 1218.77 L1294.48 1218.77 L1293.89 1218.77 L1293.31 1218.77 L1292.72 1218.77 L1292.13 1218.77 L1291.55 1218.77 L1290.96 1218.77 L1290.37 1218.77 L1289.79 1218.77 L1289.2 1218.77 L1288.61 1218.77 L1288.03 1218.77 L1287.44 1218.77 L1286.86 1218.77 L1286.27 1218.77 L1285.68 1218.77 L1285.1 1218.77 L1284.51 1218.77 L1283.92 1218.77 L1283.34 1218.77 L1282.75 1218.77 L1282.16 1218.77 L1281.58 1218.77 L1280.99 1218.77 L1280.4 1218.77 L1279.82 1218.77 L1279.23 1218.77 L1278.65 1218.77 L1278.06 1218.77 L1277.47 1218.77 L1276.89 1218.77 L1276.3 1218.77 L1275.71 1218.77 L1275.13 1218.77 L1274.54 1218.77 L1273.95 1218.77 L1273.37 1218.77 L1272.78 1218.77 L1272.19 1218.77 L1271.61 1218.77 L1271.02 1218.77 L1270.44 1218.77 L1269.85 1218.77 L1269.26 1218.77 L1268.68 1218.77 L1268.09 1218.77 L1267.5 1218.77 L1266.92 1218.77 L1266.33 1218.77 L1265.74 1218.77 L1265.16 1218.77 L1264.57 1218.77 L1263.98 1218.77 L1263.4 1218.77 L1262.81 1218.77 L1262.23 1218.77 L1261.64 1218.77 L1261.05 1218.77 L1260.47 1218.77 L1259.88 1218.77 L1259.29 1218.77 L1258.71 1218.77 L1258.12 1218.77 L1257.53 1218.77 L1256.95 1218.77 L1256.36 1218.77 L1255.78 1218.77 L1255.19 1218.77 L1254.6 1218.77 L1254.02 1218.77 L1253.43 1218.77 L1252.84 1218.77 L1252.26 1218.77 L1251.67 1218.77 L1251.08 1218.77 L1250.5 1218.77 L1249.91 1218.77 L1249.32 1218.77 L1248.74 1218.77 L1248.15 1218.77 L1247.57 1218.77 L1246.98 1218.77 L1246.39 1218.77 L1245.81 1218.77 L1245.22 1218.77 L1244.63 1218.77 L1244.05 1218.77 L1243.46 1218.77 L1242.87 1218.77 L1242.29 1218.77 L1241.7 1218.77 L1241.11 1218.77 L1240.53 1218.77 L1239.94 1218.77 L1239.36 1218.77 L1238.77 1218.77 L1238.18 1218.77 L1237.6 1218.77 L1237.01 1218.77 L1236.42 1218.77 L1235.84 1218.77 L1235.25 1218.77 L1234.66 1218.77 L1234.08 1218.77 L1233.49 1218.77 L1232.91 1218.77 L1232.32 1218.77 L1231.73 1218.77 L1231.15 1218.77 L1230.56 1218.77 L1229.97 1218.77 L1229.39 1218.77 L1228.8 1218.77 L1228.21 1218.77 L1227.63 1218.77 L1227.04 1218.77 L1226.45 1218.77 L1225.87 1218.77 L1225.28 1218.77 L1224.7 1218.77 L1224.11 1218.77 L1223.52 1218.77 L1222.94 1218.77 L1222.35 1218.77 L1221.76 1218.77 L1221.18 1218.77 L1220.59 1218.77 L1220 1218.77 L1219.42 1218.77 L1218.83 1218.77 L1218.24 1218.77 L1217.66 1218.77 L1217.07 1218.77 L1216.49 1218.77 L1215.9 1218.77 L1215.31 1218.77 L1214.73 1218.77 L1214.14 1218.77 L1213.55 1218.77 L1212.97 1218.77 L1212.38 1218.77 L1211.79 1218.77 L1211.21 1218.77 L1210.62 1218.77 L1210.03 1218.77 L1209.45 1218.77 L1208.86 1218.77 L1208.28 1218.77 L1207.69 1218.77 L1207.1 1218.77 L1206.52 1218.77 L1205.93 1218.77 L1205.34 1218.77 L1204.76 1218.77 L1204.17 1218.77 L1203.58 1218.77 L1203 1218.77 L1202.41 1218.77 L1201.83 1218.77 L1201.24 1218.77 L1200.65 1218.77 L1200.07 1218.77 L1199.48 1218.77 L1198.89 1218.77 L1198.31 1218.77 L1197.72 1218.77 L1197.13 1218.77 L1196.55 1218.77 L1195.96 1218.77 L1195.37 1218.77 L1194.79 1218.77 L1194.2 1218.77 L1193.62 1218.77 L1193.03 1218.77 L1192.44 1218.77 L1191.86 1218.77 L1191.27 1218.77 L1190.68 1218.77 L1190.1 1218.77 L1189.51 1218.77 L1188.92 1218.77 L1188.34 1218.77 L1187.75 1218.77 L1187.16 1218.77 L1186.58 1218.77 L1185.99 1218.77 L1185.41 1218.77 L1184.82 1218.77 L1184.23 1218.77 L1183.65 1218.77 L1183.06 1218.77 L1182.47 1218.77 L1181.89 1218.77 L1181.3 1218.77 L1180.71 1218.77 L1180.13 1218.77 L1179.54 1218.77 L1178.96 1218.77 L1178.37 1218.77 L1177.78 1218.77 L1177.2 1218.77 L1176.61 1218.77 L1176.02 1218.77 L1175.44 1218.77 L1174.85 1218.77 L1174.26 1218.77 L1173.68 1218.77 L1173.09 1218.77 L1172.5 1218.77 L1171.92 1218.77 L1171.33 1218.77 L1170.75 1218.77 L1170.16 1218.77 L1169.57 1218.77 L1168.99 1218.77 L1168.4 1218.77 L1167.81 1218.77 L1167.23 1218.77 L1166.64 1218.77 L1166.05 1218.77 L1165.47 1218.77 L1164.88 1218.77 L1164.29 1218.77 L1163.71 1218.77 L1163.12 1218.77 L1162.54 1218.77 L1161.95 1218.77 L1161.36 1218.77 L1160.78 1218.77 L1160.19 1218.77 L1159.6 1218.77 L1159.02 1218.77 L1158.43 1218.77 L1157.84 1218.77 L1157.26 1218.77 L1156.67 1218.77 L1156.09 1218.77 L1155.5 1218.77 L1154.91 1218.77 L1154.33 1218.77 L1153.74 1218.77 L1153.15 1218.77 L1152.57 1218.77 L1151.98 1218.77 L1151.39 1218.77 L1150.81 1218.77 L1150.22 1218.77 L1149.63 1218.77 L1149.05 1218.77 L1148.46 1218.77 L1147.88 1218.77 L1147.29 1218.77 L1146.7 1218.77 L1146.12 1218.77 L1145.53 1218.77 L1144.94 1218.77 L1144.36 1218.77 L1143.77 1218.77 L1143.18 1218.77 L1142.6 1218.77 L1142.01 1218.77 L1141.42 1218.77 L1140.84 1218.77 L1140.25 1218.77 L1139.67 1218.77 L1139.08 1218.77 L1138.49 1218.77 L1137.91 1218.77 L1137.32 1218.77 L1136.73 1218.77 L1136.15 1218.77 L1135.56 1218.77 L1134.97 1218.77 L1134.39 1218.77 L1133.8 1218.77 L1133.21 1218.77 L1132.63 1218.77 L1132.04 1218.77 L1131.46 1218.77 L1130.87 1218.77 L1130.28 1218.77 L1129.7 1218.77 L1129.11 1218.77 L1128.52 1218.77 L1127.94 1218.77 L1127.35 1218.77 L1126.76 1218.77 L1126.18 1218.77 L1125.59 1218.77 L1125.01 1218.77 L1124.42 1218.77 L1123.83 1218.77 L1123.25 1218.77 L1122.66 1218.77 L1122.07 1218.77 L1121.49 1218.77 L1120.9 1218.77 L1120.31 1218.77 L1119.73 1218.77 L1119.14 1218.77 L1118.55 1218.77 L1117.97 1218.77 L1117.38 1218.77 L1116.8 1218.77 L1116.21 1218.77 L1115.62 1218.77 L1115.04 1218.77 L1114.45 1218.77 L1113.86 1218.77 L1113.28 1218.77 L1112.69 1218.77 L1112.1 1218.77 L1111.52 1218.77 L1110.93 1218.77 L1110.34 1218.77 L1109.76 1218.77 L1109.17 1218.77 L1108.59 1218.77 L1108 1218.77 L1107.41 1218.77 L1106.83 1218.77 L1106.24 1218.77 L1105.65 1218.77 L1105.07 1218.77 L1104.48 1218.77 L1103.89 1218.77 L1103.31 1218.77 L1102.72 1218.77 L1102.14 1218.77 L1101.55 1218.77 L1100.96 1218.77 L1100.38 1218.77 L1099.79 1218.77 L1099.2 1218.77 L1098.62 1218.77 L1098.03 1218.77 L1097.44 1218.77 L1096.86 1218.77 L1096.27 1218.77 L1095.68 1218.77 L1095.1 1218.77 L1094.51 1218.77 L1093.93 1218.77 L1093.34 1218.77 L1092.75 1218.77 L1092.17 1218.77 L1091.58 1218.77 L1090.99 1218.77 L1090.41 1218.77 L1089.82 1218.77 L1089.23 1218.77 L1088.65 1218.77 L1088.06 1218.77 L1087.47 1218.77 L1086.89 1218.77 L1086.3 1218.77 L1085.72 1218.77 L1085.13 1218.77 L1084.54 1218.77 L1083.96 1218.77 L1083.37 1218.77 L1082.78 1218.77 L1082.2 1218.77 L1081.61 1218.77 L1081.02 1218.77 L1080.44 1218.77 L1079.85 1218.77 L1079.26 1218.77 L1078.68 1218.77 L1078.09 1218.77 L1077.51 1218.77 L1076.92 1218.77 L1076.33 1218.77 L1075.75 1218.77 L1075.16 1218.77 L1074.57 1218.77 L1073.99 1218.77 L1073.4 1218.77 L1072.81 1218.77 L1072.23 1218.77 L1071.64 1218.77 L1071.06 1218.77 L1070.47 1218.77 L1069.88 1218.77 L1069.3 1218.77 L1068.71 1218.77 L1068.12 1218.77 L1067.54 1218.77 L1066.95 1218.77 L1066.36 1218.77 L1065.78 1218.77 L1065.19 1218.77 L1064.6 1218.77 L1064.02 1218.77 L1063.43 1218.77 L1062.85 1218.77 L1062.26 1218.77 L1061.67 1218.77 L1061.09 1218.77 L1060.5 1218.77 L1059.91 1218.77 L1059.33 1218.77 L1058.74 1218.77 L1058.15 1218.77 L1057.57 1218.77 L1056.98 1218.77 L1056.39 1218.77 L1055.81 1218.77 L1055.22 1218.77 L1054.64 1218.77 L1054.05 1218.77 L1053.46 1218.77 L1052.88 1218.77 L1052.29 1218.77 L1051.7 1218.77 L1051.12 1218.77 L1050.53 1218.77 L1049.94 1218.77 L1049.36 1218.77 L1048.77 1218.77 L1048.19 1218.77 L1047.6 1218.77 L1047.01 1218.77 L1046.43 1218.77 L1045.84 1218.77 L1045.25 1218.77 L1044.67 1218.77 L1044.08 1218.77 L1043.49 1218.77 L1042.91 1218.77 L1042.32 1218.77 L1041.73 1218.77 L1041.15 1218.77 L1040.56 1218.77 L1039.98 1218.77 L1039.39 1218.77 L1038.8 1218.77 L1038.22 1218.77 L1037.63 1218.77 L1037.04 1218.77 L1036.46 1218.77 L1035.87 1218.77 L1035.28 1218.77 L1034.7 1218.77 L1034.11 1218.77 L1033.52 1218.77 L1032.94 1218.77 L1032.35 1218.77 L1031.77 1218.77 L1031.18 1218.77 L1030.59 1218.77 L1030.01 1218.77 L1029.42 1218.77 L1028.83 1218.77 L1028.25 1218.77 L1027.66 1218.77 L1027.07 1218.77 L1026.49 1218.77 L1025.9 1218.77 L1025.32 1218.77 L1024.73 1218.77 L1024.14 1218.77 L1023.56 1218.77 L1022.97 1218.77 L1022.38 1218.77 L1021.8 1218.77 L1021.21 1218.77 L1020.62 1218.77 L1020.04 1218.77 L1019.45 1218.77 L1018.86 1218.77 L1018.28 1218.77 L1017.69 1218.77 L1017.11 1218.77 L1016.52 1218.77 L1015.93 1218.77 L1015.35 1218.77 L1014.76 1218.77 L1014.17 1218.77 L1013.59 1218.77 L1013 1218.77 L1012.41 1218.77 L1011.83 1218.77 L1011.24 1218.77 L1010.65 1218.77 L1010.07 1218.77 L1009.48 1218.77 L1008.9 1218.77 L1008.31 1218.77 L1007.72 1218.77 L1007.14 1218.77 L1006.55 1218.77 L1005.96 1218.77 L1005.38 1218.77 L1004.79 1218.77 L1004.2 1218.77 L1003.62 1218.77 L1003.03 1218.77 L1002.44 1218.77 L1001.86 1218.77 L1001.27 1218.77 L1000.69 1218.77 L1000.1 1218.77 L999.513 1218.77 L998.926 1218.77 L998.34 1218.77 L997.754 1218.77 L997.167 1218.77 L996.581 1218.77 L995.994 1218.77 L995.408 1218.77 L994.822 1218.77 L994.235 1218.77 L993.649 1218.77 L993.062 1218.77 L992.476 1218.77 L991.889 1218.77 L991.303 1218.77 L990.717 1218.77 L990.13 1218.77 L989.544 1218.77 L988.957 1218.77 L988.371 1218.77 L987.785 1218.77 L987.198 1218.77 L986.612 1218.77 L986.025 1218.77  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1219.17 986.612,1219.17 987.198,1219.17 987.785,1219.17 988.371,1219.17 988.957,1219.17 989.544,1219.17 990.13,1219.17 990.717,1219.17 991.303,1219.17 991.889,1219.17 992.476,1219.17 993.062,1219.17 993.649,1219.17 994.235,1219.17 994.822,1219.17 995.408,1219.17 995.994,1219.17 996.581,1219.17 997.167,1219.17 997.754,1219.17 998.34,1219.17 998.926,1219.17 999.513,1219.17 1000.1,1219.17 1000.69,1219.17 1001.27,1219.17 1001.86,1219.17 1002.44,1219.17 1003.03,1219.17 1003.62,1219.17 1004.2,1219.17 1004.79,1219.17 1005.38,1219.17 1005.96,1219.17 1006.55,1219.17 1007.14,1219.17 1007.72,1219.17 1008.31,1219.17 1008.9,1219.17 1009.48,1219.17 1010.07,1219.17 1010.65,1219.17 1011.24,1219.17 1011.83,1219.17 1012.41,1219.17 1013,1219.17 1013.59,1219.17 1014.17,1219.17 1014.76,1219.17 1015.35,1219.17 1015.93,1219.17 1016.52,1219.17 1017.11,1219.17 1017.69,1219.17 1018.28,1219.17 1018.86,1219.17 1019.45,1219.17 1020.04,1219.17 1020.62,1219.17 1021.21,1219.17 1021.8,1219.17 1022.38,1219.17 1022.97,1219.17 1023.56,1219.17 1024.14,1219.17 1024.73,1219.17 1025.32,1219.17 1025.9,1219.17 1026.49,1219.17 1027.07,1219.17 1027.66,1219.17 1028.25,1219.17 1028.83,1219.17 1029.42,1219.17 1030.01,1219.17 1030.59,1219.17 1031.18,1219.17 1031.77,1219.17 1032.35,1219.17 1032.94,1219.17 1033.52,1219.17 1034.11,1219.17 1034.7,1219.17 1035.28,1219.17 1035.87,1219.17 1036.46,1219.17 1037.04,1219.17 1037.63,1219.17 1038.22,1219.17 1038.8,1219.17 1039.39,1219.17 1039.98,1219.17 1040.56,1219.17 1041.15,1219.17 1041.73,1219.17 1042.32,1219.17 1042.91,1219.17 1043.49,1219.17 1044.08,1219.17 1044.67,1219.17 1045.25,1219.17 1045.84,1219.17 1046.43,1219.17 1047.01,1219.17 1047.6,1219.17 1048.19,1219.17 1048.77,1219.17 1049.36,1219.17 1049.94,1219.17 1050.53,1219.17 1051.12,1219.17 1051.7,1219.17 1052.29,1219.17 1052.88,1219.17 1053.46,1219.17 1054.05,1219.17 1054.64,1219.17 1055.22,1219.17 1055.81,1219.17 1056.39,1219.17 1056.98,1219.17 1057.57,1219.17 1058.15,1219.17 1058.74,1219.17 1059.33,1219.17 1059.91,1219.17 1060.5,1219.17 1061.09,1219.17 1061.67,1219.17 1062.26,1219.17 1062.85,1219.17 1063.43,1219.17 1064.02,1219.17 1064.6,1219.17 1065.19,1219.17 1065.78,1219.17 1066.36,1219.17 1066.95,1219.17 1067.54,1219.17 1068.12,1219.17 1068.71,1219.17 1069.3,1219.17 1069.88,1219.17 1070.47,1219.17 1071.06,1219.17 1071.64,1219.17 1072.23,1219.17 1072.81,1219.17 1073.4,1219.17 1073.99,1219.17 1074.57,1219.17 1075.16,1219.17 1075.75,1219.17 1076.33,1219.17 1076.92,1219.17 1077.51,1219.17 1078.09,1219.17 1078.68,1219.17 1079.26,1219.17 1079.85,1219.17 1080.44,1219.17 1081.02,1219.17 1081.61,1219.17 1082.2,1219.17 1082.78,1219.17 1083.37,1219.17 1083.96,1219.17 1084.54,1219.17 1085.13,1219.17 1085.72,1219.17 1086.3,1219.17 1086.89,1219.17 1087.47,1219.17 1088.06,1219.17 1088.65,1219.17 1089.23,1219.17 1089.82,1219.17 1090.41,1219.17 1090.99,1219.17 1091.58,1219.17 1092.17,1219.17 1092.75,1219.17 1093.34,1219.17 1093.93,1219.17 1094.51,1219.17 1095.1,1219.17 1095.68,1219.17 1096.27,1219.17 1096.86,1219.17 1097.44,1219.17 1098.03,1219.17 1098.62,1219.17 1099.2,1219.17 1099.79,1219.17 1100.38,1219.17 1100.96,1219.17 1101.55,1219.17 1102.14,1219.17 1102.72,1219.17 1103.31,1219.17 1103.89,1219.17 1104.48,1219.17 1105.07,1219.17 1105.65,1219.17 1106.24,1219.17 1106.83,1219.17 1107.41,1219.17 1108,1219.17 1108.59,1219.17 1109.17,1219.17 1109.76,1219.17 1110.34,1219.17 1110.93,1219.17 1111.52,1219.17 1112.1,1219.17 1112.69,1219.17 1113.28,1219.17 1113.86,1219.17 1114.45,1219.17 1115.04,1219.17 1115.62,1219.17 1116.21,1219.17 1116.8,1219.17 1117.38,1219.17 1117.97,1219.17 1118.55,1219.17 1119.14,1219.17 1119.73,1219.17 1120.31,1219.17 1120.9,1219.17 1121.49,1219.17 1122.07,1219.17 1122.66,1219.17 1123.25,1219.17 1123.83,1219.17 1124.42,1219.17 1125.01,1219.17 1125.59,1219.17 1126.18,1219.17 1126.76,1219.17 1127.35,1219.17 1127.94,1219.17 1128.52,1219.17 1129.11,1219.17 1129.7,1219.17 1130.28,1219.17 1130.87,1219.17 1131.46,1219.17 1132.04,1219.17 1132.63,1219.17 1133.21,1219.17 1133.8,1219.17 1134.39,1219.17 1134.97,1219.17 1135.56,1219.17 1136.15,1219.17 1136.73,1219.17 1137.32,1219.17 1137.91,1219.17 1138.49,1219.17 1139.08,1219.17 1139.67,1219.17 1140.25,1219.17 1140.84,1219.17 1141.42,1219.17 1142.01,1219.17 1142.6,1219.17 1143.18,1219.17 1143.77,1219.17 1144.36,1219.17 1144.94,1219.17 1145.53,1219.17 1146.12,1219.17 1146.7,1219.17 1147.29,1219.17 1147.88,1219.17 1148.46,1219.17 1149.05,1219.17 1149.63,1219.17 1150.22,1219.17 1150.81,1219.17 1151.39,1219.17 1151.98,1219.17 1152.57,1219.17 1153.15,1219.17 1153.74,1219.17 1154.33,1219.17 1154.91,1219.17 1155.5,1219.17 1156.09,1219.17 1156.67,1219.17 1157.26,1219.17 1157.84,1219.17 1158.43,1219.17 1159.02,1219.17 1159.6,1219.17 1160.19,1219.17 1160.78,1219.17 1161.36,1219.17 1161.95,1219.17 1162.54,1219.17 1163.12,1219.17 1163.71,1219.17 1164.29,1219.17 1164.88,1219.17 1165.47,1219.17 1166.05,1219.17 1166.64,1219.17 1167.23,1219.17 1167.81,1219.17 1168.4,1219.17 1168.99,1219.17 1169.57,1219.17 1170.16,1219.17 1170.75,1219.17 1171.33,1219.17 1171.92,1219.17 1172.5,1219.17 1173.09,1219.17 1173.68,1219.17 1174.26,1219.17 1174.85,1219.17 1175.44,1219.17 1176.02,1219.17 1176.61,1219.17 1177.2,1219.17 1177.78,1219.17 1178.37,1219.17 1178.96,1219.17 1179.54,1219.17 1180.13,1219.17 1180.71,1219.17 1181.3,1219.17 1181.89,1219.17 1182.47,1219.17 1183.06,1219.17 1183.65,1219.17 1184.23,1219.17 1184.82,1219.17 1185.41,1219.17 1185.99,1219.17 1186.58,1219.17 1187.16,1219.17 1187.75,1219.17 1188.34,1219.17 1188.92,1219.17 1189.51,1219.17 1190.1,1219.17 1190.68,1219.17 1191.27,1219.17 1191.86,1219.17 1192.44,1219.17 1193.03,1219.17 1193.62,1219.17 1194.2,1219.17 1194.79,1219.17 1195.37,1219.17 1195.96,1219.17 1196.55,1219.17 1197.13,1219.17 1197.72,1219.17 1198.31,1219.17 1198.89,1219.17 1199.48,1219.17 1200.07,1219.17 1200.65,1219.17 1201.24,1219.17 1201.83,1219.17 1202.41,1219.17 1203,1219.17 1203.58,1219.17 1204.17,1219.17 1204.76,1219.17 1205.34,1219.17 1205.93,1219.17 1206.52,1219.17 1207.1,1219.17 1207.69,1219.17 1208.28,1219.17 1208.86,1219.17 1209.45,1219.17 1210.03,1219.17 1210.62,1219.17 1211.21,1219.17 1211.79,1219.17 1212.38,1219.17 1212.97,1219.17 1213.55,1219.17 1214.14,1219.17 1214.73,1219.17 1215.31,1219.17 1215.9,1219.17 1216.49,1219.17 1217.07,1219.17 1217.66,1219.17 1218.24,1219.17 1218.83,1219.17 1219.42,1219.17 1220,1219.17 1220.59,1219.17 1221.18,1219.17 1221.76,1219.17 1222.35,1219.17 1222.94,1219.17 1223.52,1219.17 1224.11,1219.17 1224.7,1219.17 1225.28,1219.17 1225.87,1219.17 1226.45,1219.17 1227.04,1219.17 1227.63,1219.17 1228.21,1219.17 1228.8,1219.17 1229.39,1219.17 1229.97,1219.17 1230.56,1219.17 1231.15,1219.17 1231.73,1219.17 1232.32,1219.17 1232.91,1219.17 1233.49,1219.17 1234.08,1219.17 1234.66,1219.17 1235.25,1219.17 1235.84,1219.17 1236.42,1219.17 1237.01,1219.17 1237.6,1219.17 1238.18,1219.17 1238.77,1219.17 1239.36,1219.17 1239.94,1219.17 1240.53,1219.17 1241.11,1219.17 1241.7,1219.17 1242.29,1219.17 1242.87,1219.17 1243.46,1219.17 1244.05,1219.17 1244.63,1219.17 1245.22,1219.17 1245.81,1219.17 1246.39,1219.17 1246.98,1219.17 1247.57,1219.17 1248.15,1219.17 1248.74,1219.17 1249.32,1219.17 1249.91,1219.17 1250.5,1219.17 1251.08,1219.17 1251.67,1219.17 1252.26,1219.17 1252.84,1219.17 1253.43,1219.17 1254.02,1219.17 1254.6,1219.17 1255.19,1219.17 1255.78,1219.17 1256.36,1219.17 1256.95,1219.17 1257.53,1219.17 1258.12,1219.17 1258.71,1219.17 1259.29,1219.17 1259.88,1219.17 1260.47,1219.17 1261.05,1219.17 1261.64,1219.17 1262.23,1219.17 1262.81,1219.17 1263.4,1219.17 1263.98,1219.17 1264.57,1219.17 1265.16,1219.17 1265.74,1219.17 1266.33,1219.17 1266.92,1219.17 1267.5,1219.17 1268.09,1219.17 1268.68,1219.17 1269.26,1219.17 1269.85,1219.17 1270.44,1219.17 1271.02,1219.17 1271.61,1219.17 1272.19,1219.17 1272.78,1219.17 1273.37,1219.17 1273.95,1219.17 1274.54,1219.17 1275.13,1219.17 1275.71,1219.17 1276.3,1219.17 1276.89,1219.17 1277.47,1219.17 1278.06,1219.17 1278.65,1219.17 1279.23,1219.17 1279.82,1219.17 1280.4,1219.17 1280.99,1219.17 1281.58,1219.17 1282.16,1219.17 1282.75,1219.17 1283.34,1219.17 1283.92,1219.17 1284.51,1219.17 1285.1,1219.17 1285.68,1219.17 1286.27,1219.17 1286.86,1219.17 1287.44,1219.17 1288.03,1219.17 1288.61,1219.17 1289.2,1219.17 1289.79,1219.17 1290.37,1219.17 1290.96,1219.17 1291.55,1219.17 1292.13,1219.17 1292.72,1219.17 1293.31,1219.17 1293.89,1219.17 1294.48,1219.17 1295.06,1219.17 1295.65,1219.17 1296.24,1219.17 1296.82,1219.17 1297.41,1219.17 1298,1219.17 1298.58,1219.17 1299.17,1219.17 1299.76,1219.17 1300.34,1219.17 1300.93,1219.17 1301.52,1219.17 1302.1,1219.17 1302.69,1219.17 1303.27,1219.17 1303.86,1219.17 1304.45,1219.17 1305.03,1219.17 1305.62,1219.17 1306.21,1219.17 1306.79,1219.17 1307.38,1219.17 1307.97,1219.17 1308.55,1219.17 1309.14,1219.17 1309.73,1219.17 1310.31,1219.17 1310.9,1219.17 1311.48,1219.17 1312.07,1219.17 1312.66,1219.17 1313.24,1219.17 1313.83,1219.17 1314.42,1219.17 1315,1219.17 1315.59,1219.17 1316.18,1219.17 1316.76,1219.17 1317.35,1219.17 1317.93,1219.17 1318.52,1219.17 1319.11,1219.17 1319.69,1219.17 1320.28,1219.17 1320.87,1219.17 1321.45,1219.17 1322.04,1219.17 1322.63,1219.17 1323.21,1219.17 1323.8,1219.17 1324.39,1219.17 1324.97,1219.17 1325.56,1219.17 1326.14,1219.17 1326.73,1219.17 1327.32,1219.17 1327.9,1219.17 1328.49,1219.17 1329.08,1219.17 1329.66,1219.17 1330.25,1219.17 1330.84,1219.17 1331.42,1219.17 1332.01,1219.17 1332.6,1219.17 1333.18,1219.17 1333.77,1219.17 1334.35,1219.17 1334.94,1219.17 1335.53,1219.17 1336.11,1219.17 1336.7,1219.17 1337.29,1219.17 1337.87,1219.17 1338.46,1219.17 1339.05,1219.17 1339.63,1219.17 1340.22,1219.17 1340.8,1219.17 1341.39,1219.17 1341.98,1219.17 1342.56,1219.17 1343.15,1219.17 1343.74,1219.17 1344.32,1219.17 1344.91,1219.17 1345.5,1219.17 1346.08,1219.17 1346.67,1219.17 1347.26,1219.17 1347.84,1219.17 1348.43,1219.17 1349.01,1219.17 1349.6,1219.17 1350.19,1219.17 1350.77,1219.17 1351.36,1219.17 1351.95,1219.17 1352.53,1219.17 1353.12,1219.17 1353.71,1219.17 1354.29,1219.17 1354.88,1219.17 1355.47,1219.17 1356.05,1219.17 1356.64,1219.17 1357.22,1219.17 1357.81,1219.17 1358.4,1219.17 1358.98,1219.17 1359.57,1219.17 1360.16,1219.17 1360.74,1219.17 1361.33,1219.17 1361.92,1219.17 1362.5,1219.17 1363.09,1219.17 1363.68,1219.17 1364.26,1219.17 1364.85,1219.17 1365.43,1219.17 1366.02,1219.17 1366.61,1219.17 1367.19,1219.17 1367.78,1219.17 1368.37,1219.17 1368.95,1219.17 1369.54,1219.17 1370.13,1219.17 1370.71,1219.17 1371.3,1219.17 1371.88,1219.17 1372.47,1219.17 1373.06,1219.17 1373.64,1219.17 1374.23,1219.17 1374.82,1219.17 1375.4,1219.17 1375.99,1219.17 1376.58,1219.17 1377.16,1219.17 1377.75,1219.17 1378.34,1219.17 1378.92,1219.17 1379.51,1219.17 1380.09,1219.17 1380.68,1219.17 1381.27,1219.17 1381.85,1219.17 1382.44,1219.17 1383.03,1219.17 1383.61,1219.17 1384.2,1219.17 1384.79,1219.17 1385.37,1219.17 1385.96,1219.17 1386.55,1219.17 1387.13,1219.17 1387.72,1219.17 1388.3,1219.17 1388.89,1219.17 1389.48,1219.17 1390.06,1219.17 1390.65,1219.17 1391.24,1219.17 1391.82,1219.17 1392.41,1219.17 1393,1219.17 1393.58,1219.17 1394.17,1219.17 1394.75,1219.17 1395.34,1219.17 1395.93,1219.17 1396.51,1219.17 1397.1,1219.17 1397.69,1219.17 1398.27,1219.17 1398.86,1219.17 1399.45,1219.17 1400.03,1219.17 1400.62,1219.17 1401.21,1219.17 1401.79,1219.17 1402.38,1219.17 1402.96,1219.17 1403.55,1219.17 1404.14,1219.17 1404.72,1219.17 1405.31,1219.17 1405.9,1219.17 1406.48,1219.17 1407.07,1219.17 1407.66,1219.17 1408.24,1219.17 1408.83,1219.17 1409.42,1219.17 1410,1219.17 1410.59,1219.17 1411.17,1219.17 1411.76,1219.17 1412.35,1219.17 1412.93,1219.17 1413.52,1219.17 1414.11,1219.17 1414.69,1219.17 1415.28,1219.17 1415.87,1219.17 1416.45,1219.17 1417.04,1219.17 1417.63,1219.17 1418.21,1219.17 1418.8,1219.17 1419.38,1219.17 1419.97,1219.17 1420.56,1219.17 1421.14,1219.17 1421.73,1219.17 1422.32,1219.17 1422.9,1219.17 1423.49,1219.17 1424.08,1219.17 1424.66,1219.17 1425.25,1219.17 1425.83,1219.17 1426.42,1219.17 1427.01,1219.17 1427.59,1219.17 1428.18,1219.17 1428.77,1219.17 1429.35,1219.17 1429.94,1219.17 1430.53,1219.17 1431.11,1219.17 1431.7,1219.17 1432.29,1219.17 1432.87,1219.17 1433.46,1219.17 1434.04,1219.17 1434.63,1219.17 1435.22,1219.17 1435.8,1219.17 1436.39,1219.17 1436.98,1219.17 1437.56,1219.17 1438.15,1219.17 1438.74,1219.17 1439.32,1219.17 1439.91,1219.17 1440.5,1219.17 1441.08,1219.17 1441.67,1219.17 1442.25,1219.17 1442.84,1219.17 1443.43,1219.17 1444.01,1219.17 1444.6,1219.17 1445.19,1219.17 1445.77,1219.17 1446.36,1219.17 1446.95,1219.17 1447.53,1219.17 1448.12,1219.17 1448.7,1219.17 1449.29,1219.17 1449.88,1219.17 1450.46,1219.17 1451.05,1219.17 1451.64,1219.17 1452.22,1219.17 1452.81,1219.17 1453.4,1219.17 1453.98,1219.17 1454.57,1219.17 1455.16,1219.17 1455.74,1219.17 1456.33,1219.17 1456.91,1219.17 1457.5,1219.17 1458.09,1219.17 1458.67,1219.17 1459.26,1219.17 1459.85,1219.17 1460.43,1219.17 1461.02,1219.17 1461.61,1219.17 1462.19,1219.17 1462.78,1219.17 1463.37,1219.17 1463.95,1219.17 1464.54,1219.17 1465.12,1219.17 1465.71,1219.17 1466.3,1219.17 1466.88,1219.17 1467.47,1219.17 1468.06,1219.17 1468.64,1219.17 1469.23,1219.17 1469.82,1219.17 1470.4,1219.17 1470.99,1219.17 1471.57,1219.17 1472.16,1219.17 1472.75,1219.17 1473.33,1219.17 1473.92,1219.17 1474.51,1219.17 1475.09,1219.17 1475.68,1219.17 1476.27,1219.17 1476.85,1219.17 1477.44,1219.17 1478.03,1219.17 1478.61,1219.17 1479.2,1219.17 1479.78,1219.17 1480.37,1219.17 1480.96,1219.17 1481.54,1219.17 1482.13,1219.17 1482.72,1219.17 1483.3,1219.17 1483.89,1219.17 1484.48,1219.17 1485.06,1219.17 1485.65,1219.17 1486.24,1219.17 1486.82,1219.17 1487.41,1219.17 1487.99,1219.17 1488.58,1219.17 1489.17,1219.17 1489.75,1219.17 1490.34,1219.17 1490.93,1219.17 1491.51,1219.17 1492.1,1219.17 1492.69,1219.17 1493.27,1219.17 1493.86,1219.17 1494.45,1219.17 1495.03,1219.17 1495.62,1219.17 1496.2,1219.17 1496.79,1219.17 1497.38,1219.17 1497.96,1219.17 1498.55,1219.17 1499.14,1219.17 1499.72,1219.17 1500.31,1219.17 1500.9,1219.17 1501.48,1219.17 1502.07,1219.17 1502.65,1219.17 1503.24,1219.17 1503.83,1219.17 1504.41,1219.17 1505,1219.17 1505.59,1219.17 1506.17,1219.17 1506.76,1219.17 1507.35,1219.17 1507.93,1219.17 1508.52,1219.17 1509.11,1219.17 1509.69,1219.17 1510.28,1219.17 1510.86,1219.17 1511.45,1219.17 1512.04,1219.17 1512.62,1219.17 1513.21,1219.17 1513.8,1219.17 1514.38,1219.17 1514.97,1219.17 1515.56,1219.17 1516.14,1219.17 1516.73,1219.17 1517.32,1219.17 1517.9,1219.17 1518.49,1219.17 1519.07,1219.17 1519.66,1219.17 1520.25,1219.17 1520.83,1219.17 1521.42,1219.17 1522.01,1219.17 1522.59,1219.17 1523.18,1219.17 1523.77,1219.17 1524.35,1219.17 1524.94,1219.17 1525.52,1219.17 1526.11,1219.17 1526.7,1219.17 1527.28,1219.17 1527.87,1219.17 1528.46,1219.17 1529.04,1219.17 1529.63,1219.17 1530.22,1219.17 1530.8,1219.17 1531.39,1219.17 1531.98,1219.17 1532.56,1219.17 1533.15,1219.17 1533.73,1219.17 1534.32,1219.17 1534.91,1219.17 1535.49,1219.17 1536.08,1219.17 1536.67,1219.17 1537.25,1219.17 1537.84,1219.17 1538.43,1219.17 1539.01,1219.17 1539.6,1219.17 1540.19,1219.17 1540.77,1219.17 1541.36,1219.17 1541.94,1219.17 1542.53,1219.17 1543.12,1219.17 1543.7,1219.17 1544.29,1219.17 1544.88,1219.17 1545.46,1219.17 1546.05,1219.17 1546.64,1219.17 1547.22,1219.17 1547.81,1219.17 1548.4,1219.17 1548.98,1219.17 1549.57,1219.17 1550.15,1219.17 1550.74,1219.17 1551.33,1219.17 1551.91,1219.17 1552.5,1219.17 1553.09,1219.17 1553.67,1219.17 1554.26,1219.17 1554.85,1219.17 1555.43,1219.17 1556.02,1219.17 1556.6,1219.17 1557.19,1219.17 1557.78,1219.17 1558.36,1219.17 1558.95,1219.17 1559.54,1219.17 1560.12,1219.17 1560.71,1219.17 1561.3,1219.17 1561.88,1219.17 1562.47,1219.17 1563.06,1219.17 1563.64,1219.17 1564.23,1219.17 1564.81,1219.17 1565.4,1219.17 1565.99,1219.17 1566.57,1219.17 1567.16,1219.17 1567.75,1219.17 1568.33,1219.17 1568.92,1219.17 1569.51,1219.17 1570.09,1219.17 1570.68,1219.17 1571.27,1219.17 1571.85,1219.17 1572.44,1219.17 1573.02,1219.17 1573.61,1219.17 1574.2,1219.17 1574.78,1219.17 1575.37,1219.17 1575.96,1219.17 1576.54,1219.17 1577.13,1219.17 1577.72,1219.17 1578.3,1219.17 1578.89,1219.17 1579.47,1219.17 1580.06,1219.17 1580.65,1219.17 1581.23,1219.17 1581.82,1219.17 1582.41,1219.17 1582.99,1219.17 1583.58,1219.17 1584.17,1219.17 1584.75,1219.17 1585.34,1219.17 1585.93,1219.17 1586.51,1219.17 1587.1,1219.17 1587.68,1219.17 1588.27,1219.17 1588.86,1219.17 1589.44,1219.17 1590.03,1219.17 1590.62,1219.17 1591.2,1219.17 1591.79,1219.17 1592.38,1219.17 1592.96,1219.17 1593.55,1219.17 1594.14,1219.17 1594.72,1219.17 1595.31,1219.17 1595.89,1219.17 1596.48,1219.17 1597.07,1219.17 1597.65,1219.17 1598.24,1219.17 1598.83,1219.17 1599.41,1219.17 1600,1219.17 1600.59,1219.17 1601.17,1219.17 1601.76,1219.17 1602.34,1219.17 1602.93,1219.17 1603.52,1219.17 1604.1,1219.17 1604.69,1219.17 1605.28,1219.17 1605.86,1219.17 1606.45,1219.17 1607.04,1219.17 1607.62,1219.17 1608.21,1219.17 1608.8,1219.17 1609.38,1219.17 1609.97,1219.17 1610.55,1219.17 1611.14,1219.17 1611.73,1219.17 1612.31,1219.17 1612.9,1219.17 1613.49,1219.17 1614.07,1219.17 1614.66,1219.17 1615.25,1219.17 1615.83,1219.17 1616.42,1219.17 1617.01,1219.17 1617.59,1219.17 1618.18,1219.17 1618.76,1219.17 1619.35,1219.17 1619.94,1219.17 1620.52,1219.17 1621.11,1219.17 1621.7,1219.17 1622.28,1219.17 1622.87,1219.17 1623.46,1219.17 1624.04,1219.17 1624.63,1219.17 1625.22,1219.17 1625.8,1219.17 1626.39,1219.17 1626.97,1219.17 1627.56,1219.17 1628.15,1219.17 1628.73,1219.17 1629.32,1219.17 1629.91,1219.17 1630.49,1219.17 1631.08,1219.17 1631.67,1219.17 1632.25,1219.17 1632.84,1219.17 1633.42,1219.17 1634.01,1219.17 1634.6,1219.17 1635.18,1219.17 1635.77,1219.17 1636.36,1219.17 1636.94,1219.17 1637.53,1219.17 1638.12,1219.17 1638.7,1219.17 1639.29,1219.17 1639.88,1219.17 1640.46,1219.17 1641.05,1219.17 1641.63,1219.17 1642.22,1219.17 1642.81,1219.17 1643.39,1219.17 1643.98,1219.17 1644.57,1219.17 1645.15,1219.17 1645.74,1219.17 1646.33,1219.17 1646.91,1219.17 1647.5,1219.17 1648.09,1219.17 1648.67,1219.17 1649.26,1219.17 1649.84,1219.17 1650.43,1219.17 1651.02,1219.17 1651.6,1219.17 1652.19,1219.17 1652.78,1219.17 1653.36,1219.17 1653.95,1219.17 1654.54,1219.17 1655.12,1219.17 1655.71,1219.17 1656.29,1219.17 1656.88,1219.17 1657.47,1219.17 1658.05,1219.17 1658.64,1219.17 1659.23,1219.17 1659.81,1219.17 1660.4,1219.17 1660.99,1219.17 1661.57,1219.17 1662.16,1219.17 1662.75,1219.17 1663.33,1219.17 1663.92,1219.17 1664.5,1219.17 1665.09,1219.17 1665.68,1219.17 1666.26,1219.17 1666.85,1219.17 1667.44,1219.17 1668.02,1219.17 1668.61,1219.17 1669.2,1219.17 1669.78,1219.17 1670.37,1219.17 1670.96,1219.17 1671.54,1219.17 1672.13,1219.17 1672.71,1219.17 1673.3,1219.17 1673.89,1219.17 1674.47,1219.17 1675.06,1219.17 1675.65,1219.17 1676.23,1219.17 1676.82,1219.17 1677.41,1219.17 1677.99,1219.17 1678.58,1219.17 1679.17,1219.17 1679.75,1219.17 1680.34,1219.17 1680.92,1219.17 1681.51,1219.17 1682.1,1219.17 1682.68,1219.17 1683.27,1219.17 1683.86,1219.17 1684.44,1219.17 1685.03,1219.17 1685.62,1219.17 1686.2,1219.17 1686.79,1219.17 1687.37,1219.17 1687.96,1219.17 1688.55,1219.17 1689.13,1219.17 1689.72,1219.17 1690.31,1219.17 1690.89,1219.17 1691.48,1219.17 1692.07,1219.17 1692.65,1219.17 1693.24,1219.17 1693.83,1219.17 1694.41,1219.17 1695,1219.17 1695.58,1219.17 1696.17,1219.17 1696.76,1219.17 1697.34,1219.17 1697.93,1219.17 1698.52,1219.17 1699.1,1219.17 1699.69,1219.17 1700.28,1219.17 1700.86,1219.17 1701.45,1219.17 1702.04,1219.17 1702.62,1219.17 1703.21,1219.17 1703.79,1219.17 1704.38,1219.17 1704.97,1219.17 1705.55,1219.17 1706.14,1219.17 1706.73,1219.17 1707.31,1219.17 1707.9,1219.17 1708.49,1219.17 1709.07,1219.17 1709.66,1219.17 1710.24,1219.17 1710.83,1219.17 1711.42,1219.17 1712,1219.17 1712.59,1219.17 1713.18,1219.17 1713.76,1219.17 1714.35,1219.17 1714.94,1219.17 1715.52,1219.17 1716.11,1219.17 1716.7,1219.17 1717.28,1219.17 1717.87,1219.17 1718.45,1219.17 1719.04,1219.17 1719.63,1219.17 1720.21,1219.17 1720.8,1219.17 1721.39,1219.17 1721.97,1219.17 1722.56,1219.17 1723.15,1219.17 1723.73,1219.17 1724.32,1219.17 1724.91,1219.17 1725.49,1219.17 1726.08,1219.17 1726.66,1219.17 1727.25,1219.17 1727.84,1219.17 1728.42,1219.17 1729.01,1219.17 1729.6,1219.17 1730.18,1219.17 1730.77,1219.17 1731.36,1219.17 1731.94,1219.17 1732.53,1219.17 1733.11,1219.17 1733.7,1219.17 1734.29,1219.17 1734.87,1219.17 1735.46,1219.17 1736.05,1219.17 1736.63,1219.17 1737.22,1219.17 1737.81,1219.17 1738.39,1219.17 1738.98,1219.17 1739.57,1219.17 1740.15,1219.17 1740.74,1219.17 1741.32,1219.17 1741.91,1219.17 1742.5,1219.17 1743.08,1219.17 1743.67,1219.17 1744.26,1219.17 1744.84,1219.17 1745.43,1219.17 1746.02,1219.17 1746.6,1219.17 1747.19,1219.17 1747.78,1219.17 1748.36,1219.17 1748.95,1219.17 1749.53,1219.17 1750.12,1219.17 1750.71,1219.17 1751.29,1219.17 1751.88,1219.17 1752.47,1219.17 1753.05,1219.17 1753.64,1219.17 1754.23,1219.17 1754.81,1219.17 1755.4,1219.17 1755.99,1219.17 1756.57,1219.17 1757.16,1219.17 1757.74,1219.17 1758.33,1219.17 1758.92,1219.17 1759.5,1219.17 1760.09,1219.17 1760.68,1219.17 1761.26,1219.17 1761.85,1219.17 1762.44,1219.17 1763.02,1219.17 1763.61,1219.17 1764.19,1219.17 1764.78,1219.17 1765.37,1219.17 1765.95,1219.17 1766.54,1219.17 1767.13,1219.17 1767.71,1219.17 1768.3,1219.17 1768.89,1219.17 1769.47,1219.17 1770.06,1219.17 1770.65,1219.17 1771.23,1219.17 1771.82,1219.17 1772.4,1219.17 1772.99,1219.17 1773.58,1219.17 1774.16,1219.17 1774.75,1219.17 1775.34,1219.17 1775.92,1219.17 1776.51,1219.17 1777.1,1219.17 1777.68,1219.17 1778.27,1219.17 1778.86,1219.17 1779.44,1219.17 1780.03,1219.17 1780.61,1219.17 1781.2,1219.17 1781.79,1219.17 1782.37,1219.17 1782.96,1219.17 1783.55,1219.17 1784.13,1219.17 1784.72,1219.17 1785.31,1219.17 1785.89,1219.17 1786.48,1219.17 1787.06,1219.17 1787.65,1219.17 1788.24,1219.17 1788.82,1219.17 1789.41,1219.17 1790,1219.17 1790.58,1219.17 1791.17,1219.17 1791.76,1219.17 1792.34,1219.17 1792.93,1219.17 1793.52,1219.17 1794.1,1219.17 1794.69,1219.17 1795.27,1219.17 1795.86,1219.17 1796.45,1219.17 1797.03,1219.17 1797.62,1219.17 1798.21,1219.17 1798.79,1219.17 1799.38,1219.17 1799.97,1219.17 1800.55,1219.17 1801.14,1219.17 1801.73,1219.17 1802.31,1219.17 1802.9,1219.17 1803.48,1219.17 1804.07,1219.17 1804.66,1219.17 1805.24,1219.17 1805.83,1219.17 1806.42,1219.17 1807,1219.17 1807.59,1219.17 1808.18,1219.17 1808.76,1219.17 1809.35,1219.17 1809.94,1219.17 1810.52,1219.17 1811.11,1219.17 1811.69,1219.17 1812.28,1219.17 1812.87,1219.17 1813.45,1219.17 1814.04,1219.17 1814.63,1219.17 1815.21,1219.17 1815.8,1219.17 1816.39,1219.17 1816.97,1219.17 1817.56,1219.17 1818.14,1219.17 1818.73,1219.17 1819.32,1219.17 1819.9,1219.17 1820.49,1219.17 1821.08,1219.17 1821.66,1219.17 1822.25,1219.17 1822.84,1219.17 1823.42,1219.17 1824.01,1219.17 1824.6,1219.17 1825.18,1219.17 1825.77,1219.17 1826.35,1219.17 1826.94,1219.17 1827.53,1219.17 1828.11,1219.17 1828.7,1219.17 1829.29,1219.17 1829.87,1219.17 1830.46,1219.17 1831.05,1219.17 1831.63,1219.17 1832.22,1219.17 1832.81,1219.17 1833.39,1219.17 1833.98,1219.17 1834.56,1219.17 1835.15,1219.17 1835.74,1219.17 1836.32,1219.17 1836.91,1219.17 1837.5,1219.17 1838.08,1219.17 1838.67,1219.17 1839.26,1219.17 1839.84,1219.17 1840.43,1219.17 1841.01,1219.17 1841.6,1219.17 1842.19,1219.17 1842.77,1219.17 1843.36,1219.17 1843.95,1219.17 1844.53,1219.17 1845.12,1219.17 1845.71,1219.17 1846.29,1219.17 1846.88,1219.17 1847.47,1219.17 1848.05,1219.17 1848.64,1219.17 1849.22,1219.17 1849.81,1219.17 1850.4,1219.17 1850.98,1219.17 1851.57,1219.17 1852.16,1219.17 1852.74,1219.17 1853.33,1219.17 1853.92,1219.17 1854.5,1219.17 1855.09,1219.17 1855.68,1219.17 1856.26,1219.17 1856.85,1219.17 1857.43,1219.17 1858.02,1219.17 1858.61,1219.17 1859.19,1219.17 1859.78,1219.17 1860.37,1219.17 1860.95,1219.17 1861.54,1219.17 1862.13,1219.17 1862.71,1219.17 1863.3,1219.17 1863.88,1219.17 1864.47,1219.17 1865.06,1219.17 1865.64,1219.17 1866.23,1219.17 1866.82,1219.17 1867.4,1219.17 1867.99,1219.17 1868.58,1219.17 1869.16,1219.17 1869.75,1219.17 1870.34,1219.17 1870.92,1219.17 1871.51,1219.17 1872.09,1219.17 1872.68,1219.17 1873.27,1219.17 1873.85,1219.17 1874.44,1219.17 1875.03,1219.17 1875.61,1219.17 1876.2,1219.17 1876.79,1219.17 1877.37,1219.17 1877.96,1219.17 1878.55,1219.17 1879.13,1219.17 1879.72,1219.17 1880.3,1219.17 1880.89,1219.17 1881.48,1219.17 1882.06,1219.17 1882.65,1219.17 1883.24,1219.17 1883.82,1219.17 1884.41,1219.17 1885,1219.17 1885.58,1219.17 1886.17,1219.17 1886.76,1219.17 1887.34,1219.17 1887.93,1219.17 1888.51,1219.17 1889.1,1219.17 1889.69,1219.17 1890.27,1219.17 1890.86,1219.17 1891.45,1219.17 1892.03,1219.17 1892.62,1219.17 1893.21,1219.17 1893.79,1219.17 1894.38,1219.17 1894.96,1219.17 1895.55,1219.17 1896.14,1219.17 1896.72,1219.17 1897.31,1219.17 1897.9,1219.17 1898.48,1219.17 1899.07,1219.17 1899.66,1219.17 1900.24,1219.17 1900.83,1219.17 1901.42,1219.17 1902,1219.17 1902.59,1219.17 1903.17,1219.17 1903.76,1219.17 1904.35,1219.17 1904.93,1219.17 1905.52,1219.17 1906.11,1219.17 1906.69,1219.17 1907.28,1219.17 1907.87,1219.17 1908.45,1219.17 1909.04,1219.17 1909.63,1219.17 1910.21,1219.17 1910.8,1219.17 1911.38,1219.17 1911.97,1219.17 1912.56,1219.17 1913.14,1219.17 1913.73,1219.17 1914.32,1219.17 1914.9,1219.17 1915.49,1219.17 1916.08,1219.17 1916.66,1219.17 1917.25,1219.17 1917.83,1219.17 1918.42,1219.17 1919.01,1219.17 1919.59,1219.17 1920.18,1219.17 1920.77,1219.17 1921.35,1219.17 1921.94,1219.17 1922.53,1219.17 1923.11,1219.17 1923.7,1219.17 1924.29,1219.17 1924.87,1219.17 1925.46,1219.17 1926.04,1219.17 1926.63,1219.17 1927.22,1219.17 1927.8,1219.17 1928.39,1219.17 1928.98,1219.17 1929.56,1219.17 1930.15,1219.17 1930.74,1219.17 1931.32,1219.17 1931.91,1219.17 1932.5,1219.17 1933.08,1219.17 1933.67,1219.17 1934.25,1219.17 1934.84,1219.17 1935.43,1219.17 1936.01,1219.17 1936.6,1219.17 1937.19,1219.17 1937.77,1219.17 1938.36,1219.17 1938.95,1219.17 1939.53,1219.17 1940.12,1219.17 1940.71,1219.17 1941.29,1219.17 1941.88,1219.17 1942.46,1219.17 1943.05,1219.17 1943.64,1219.17 1944.22,1219.17 1944.81,1219.17 1945.4,1219.17 1945.98,1219.17 1946.57,1219.17 1947.16,1219.17 1947.74,1219.17 1948.33,1219.17 1948.91,1219.17 1949.5,1219.17 1950.09,1219.17 1950.67,1219.17 1951.26,1219.17 1951.85,1219.17 1952.43,1219.17 1953.02,1219.17 1953.61,1219.17 1954.19,1219.17 1954.78,1219.17 1955.37,1219.17 1955.95,1219.17 1956.54,1219.17 1957.12,1219.17 1957.71,1219.17 1958.3,1219.17 1958.88,1219.17 1959.47,1219.17 1960.06,1219.17 1960.64,1219.17 1961.23,1219.17 1961.82,1219.17 1962.4,1219.17 1962.99,1219.17 1963.58,1219.17 1964.16,1219.17 1964.75,1219.17 1965.33,1219.17 1965.92,1219.17 1966.51,1219.17 1967.09,1219.17 1967.68,1219.17 1968.27,1219.17 1968.85,1219.17 1969.44,1219.17 1970.03,1219.17 1970.61,1219.17 1971.2,1219.17 1971.78,1219.17 1972.37,1219.17 1972.96,1219.17 1973.54,1219.17 1974.13,1219.17 1974.72,1219.17 1975.3,1219.17 1975.89,1219.17 1976.48,1219.17 1977.06,1219.17 1977.65,1219.17 1978.24,1219.17 1978.82,1219.17 1979.41,1219.17 1979.99,1219.17 1980.58,1219.17 1981.17,1219.17 1981.75,1219.17 1982.34,1219.17 1982.93,1219.17 1983.51,1219.17 1984.1,1219.17 1984.69,1219.17 1985.27,1219.17 1985.86,1219.17 1986.45,1219.17 1987.03,1219.17 1987.62,1219.17 1988.2,1219.17 1988.79,1219.17 1989.38,1219.17 1989.96,1219.17 1990.55,1219.17 1991.14,1219.17 1991.72,1219.17 1992.31,1219.17 1992.9,1219.17 1993.48,1219.17 1994.07,1219.17 1994.65,1219.17 1995.24,1219.17 1995.83,1219.17 1996.41,1219.17 1997,1219.17 1997.59,1219.17 1998.17,1219.17 1998.76,1219.17 1999.35,1219.17 1999.93,1219.17 2000.52,1219.17 2001.11,1219.17 2001.69,1219.17 2002.28,1219.17 2002.86,1219.17 2003.45,1219.17 2004.04,1219.17 2004.62,1219.17 2005.21,1219.17 2005.8,1219.17 2006.38,1219.17 2006.97,1219.17 2007.56,1219.17 2008.14,1219.17 2008.73,1219.17 2009.32,1219.17 2009.9,1219.17 2010.49,1219.17 2011.07,1219.17 2011.66,1219.17 2012.25,1219.17 2012.83,1219.17 2013.42,1219.17 2014.01,1219.17 2014.59,1219.17 2015.18,1219.17 2015.77,1219.17 2016.35,1219.17 2016.94,1219.17 2017.53,1219.17 2018.11,1219.17 2018.7,1219.17 2019.28,1219.17 2019.87,1219.17 2020.46,1219.17 2021.04,1219.17 2021.63,1219.17 2022.22,1219.17 2022.8,1219.17 2023.39,1219.17 2023.98,1219.17 2024.56,1219.17 2025.15,1219.17 2025.73,1219.17 2026.32,1219.17 2026.91,1219.17 2027.49,1219.17 2028.08,1219.17 2028.67,1219.17 2029.25,1219.17 2029.84,1219.17 2030.43,1219.17 2031.01,1219.17 2031.6,1219.17 2032.19,1219.17 2032.77,1219.17 2033.36,1219.17 2033.94,1219.17 2034.53,1219.17 2035.12,1219.17 2035.7,1219.17 2036.29,1219.17 2036.88,1219.17 2037.46,1219.17 2038.05,1219.17 2038.64,1219.17 2039.22,1219.17 2039.81,1219.17 2040.4,1219.17 2040.98,1219.17 2041.57,1219.17 2042.15,1219.17 2042.74,1219.17 2043.33,1219.17 2043.91,1219.17 2044.5,1219.17 2045.09,1219.17 2045.67,1219.17 2046.26,1219.17 2046.85,1219.17 2047.43,1219.17 2048.02,1219.17 2048.6,1219.17 2049.19,1219.17 2049.78,1219.17 2050.36,1219.17 2050.95,1219.17 2051.54,1219.17 2052.12,1219.17 2052.71,1219.17 2053.3,1219.17 2053.88,1219.17 2054.47,1219.17 2055.06,1219.17 2055.64,1219.17 2056.23,1219.17 2056.81,1219.17 2057.4,1219.17 2057.99,1219.17 2058.57,1219.17 2059.16,1219.17 2059.75,1219.17 2060.33,1219.17 2060.92,1219.17 2061.51,1219.17 2062.09,1219.17 2062.68,1219.17 2063.27,1219.17 2063.85,1219.17 2064.44,1219.17 2065.02,1219.17 2065.61,1219.17 2066.2,1219.17 2066.78,1219.17 2067.37,1219.17 2067.96,1219.17 2068.54,1219.17 2069.13,1219.17 2069.72,1219.17 2070.3,1219.17 2070.89,1219.17 2071.48,1219.17 2072.06,1219.17 2072.65,1219.17 2073.23,1219.17 2073.82,1219.17 2074.41,1219.17 2074.99,1219.17 2075.58,1219.17 2076.17,1219.17 2076.75,1219.17 2077.34,1219.17 2077.93,1219.17 2078.51,1219.17 2079.1,1219.17 2079.68,1219.17 2080.27,1219.17 2080.86,1219.17 2081.44,1219.17 2082.03,1219.17 2082.62,1219.17 2083.2,1219.17 2083.79,1219.17 2084.38,1219.17 2084.96,1219.17 2085.55,1219.17 2086.14,1219.17 2086.72,1219.17 2087.31,1219.17 2087.89,1219.17 2088.48,1219.17 2089.07,1219.17 2089.65,1219.17 2090.24,1219.17 2090.83,1219.17 2091.41,1219.17 2092,1219.17 2092.59,1219.17 2093.17,1219.17 2093.76,1219.17 2094.35,1219.17 2094.93,1219.17 2095.52,1219.17 2096.1,1219.17 2096.69,1219.17 2097.28,1219.17 2097.86,1219.17 2098.45,1219.17 2099.04,1219.17 2099.62,1219.17 2100.21,1219.17 2100.8,1219.17 2101.38,1219.17 2101.97,1219.17 2102.55,1219.17 2103.14,1219.17 2103.73,1219.17 2104.31,1219.17 2104.9,1219.17 2105.49,1219.17 2106.07,1219.17 2106.66,1219.17 2107.25,1219.17 2107.83,1219.17 2108.42,1219.17 2109.01,1219.17 2109.59,1219.17 2110.18,1219.17 2110.76,1219.17 2111.35,1219.17 2111.94,1219.17 2112.52,1219.17 2113.11,1219.17 2113.7,1219.17 2114.28,1219.17 2114.87,1219.17 2115.46,1219.17 2116.04,1219.17 2116.63,1219.17 2117.22,1219.17 2117.8,1219.17 2118.39,1219.17 2118.97,1219.17 2119.56,1219.17 2120.15,1219.17 2120.73,1219.17 2121.32,1219.17 2121.91,1219.17 2122.49,1219.17 2123.08,1219.17 2123.67,1219.17 2124.25,1219.17 2124.84,1219.17 2125.42,1219.17 2126.01,1219.17 2126.6,1219.17 2127.18,1219.17 2127.77,1219.17 2128.36,1219.17 2128.94,1219.17 2129.53,1219.17 2130.12,1219.17 2130.7,1219.17 2131.29,1219.17 2131.88,1219.17 2132.46,1219.17 2133.05,1219.17 2133.63,1219.17 2134.22,1219.17 2134.81,1219.17 2135.39,1219.17 2135.98,1219.17 2136.57,1219.17 2137.15,1219.17 2137.74,1219.17 2138.33,1219.17 2138.91,1219.17 2139.5,1219.17 2140.09,1219.17 2140.67,1219.17 2141.26,1219.17 2141.84,1219.17 2142.43,1219.17 2143.02,1219.17 2143.6,1219.17 2144.19,1219.17 2144.78,1219.17 2145.36,1219.17 2145.95,1219.17 2146.54,1219.17 2147.12,1219.17 2147.71,1219.17 2148.3,1219.17 2148.88,1219.17 2149.47,1219.17 2150.05,1219.17 2150.64,1219.17 2151.23,1219.17 2151.81,1219.17 2152.4,1219.17 2152.99,1219.17 2153.57,1219.17 2154.16,1219.17 2154.75,1219.17 2155.33,1219.17 2155.92,1219.17 2156.5,1219.17 2157.09,1219.17 2157.68,1219.17 2158.26,1219.17 \"/>\n<path clip-path=\"url(#clip932)\" d=\"M986.025 1219.14 L986.612 1219.14 L987.198 1219.14 L987.785 1219.14 L988.371 1219.14 L988.957 1219.14 L989.544 1219.14 L990.13 1219.14 L990.717 1219.14 L991.303 1219.14 L991.889 1219.14 L992.476 1219.14 L993.062 1219.14 L993.649 1219.14 L994.235 1219.14 L994.822 1219.14 L995.408 1219.14 L995.994 1219.14 L996.581 1219.14 L997.167 1219.14 L997.754 1219.14 L998.34 1219.14 L998.926 1219.14 L999.513 1219.14 L1000.1 1219.14 L1000.69 1219.14 L1001.27 1219.14 L1001.86 1219.14 L1002.44 1219.14 L1003.03 1219.14 L1003.62 1219.14 L1004.2 1219.14 L1004.79 1219.14 L1005.38 1219.14 L1005.96 1219.14 L1006.55 1219.14 L1007.14 1219.14 L1007.72 1219.14 L1008.31 1219.14 L1008.9 1219.14 L1009.48 1219.14 L1010.07 1219.14 L1010.65 1219.14 L1011.24 1219.14 L1011.83 1219.14 L1012.41 1219.14 L1013 1219.14 L1013.59 1219.14 L1014.17 1219.14 L1014.76 1219.14 L1015.35 1219.14 L1015.93 1219.14 L1016.52 1219.14 L1017.11 1219.14 L1017.69 1219.14 L1018.28 1219.14 L1018.86 1219.14 L1019.45 1219.14 L1020.04 1219.14 L1020.62 1219.14 L1021.21 1219.14 L1021.8 1219.14 L1022.38 1219.14 L1022.97 1219.14 L1023.56 1219.14 L1024.14 1219.14 L1024.73 1219.14 L1025.32 1219.14 L1025.9 1219.14 L1026.49 1219.14 L1027.07 1219.14 L1027.66 1219.14 L1028.25 1219.14 L1028.83 1219.14 L1029.42 1219.14 L1030.01 1219.14 L1030.59 1219.14 L1031.18 1219.14 L1031.77 1219.14 L1032.35 1219.14 L1032.94 1219.14 L1033.52 1219.14 L1034.11 1219.14 L1034.7 1219.14 L1035.28 1219.14 L1035.87 1219.14 L1036.46 1219.14 L1037.04 1219.14 L1037.63 1219.14 L1038.22 1219.14 L1038.8 1219.14 L1039.39 1219.14 L1039.98 1219.14 L1040.56 1219.14 L1041.15 1219.14 L1041.73 1219.14 L1042.32 1219.14 L1042.91 1219.14 L1043.49 1219.14 L1044.08 1219.14 L1044.67 1219.14 L1045.25 1219.14 L1045.84 1219.14 L1046.43 1219.14 L1047.01 1219.14 L1047.6 1219.14 L1048.19 1219.14 L1048.77 1219.14 L1049.36 1219.14 L1049.94 1219.14 L1050.53 1219.14 L1051.12 1219.14 L1051.7 1219.14 L1052.29 1219.14 L1052.88 1219.14 L1053.46 1219.14 L1054.05 1219.14 L1054.64 1219.14 L1055.22 1219.14 L1055.81 1219.14 L1056.39 1219.14 L1056.98 1219.14 L1057.57 1219.14 L1058.15 1219.14 L1058.74 1219.14 L1059.33 1219.14 L1059.91 1219.14 L1060.5 1219.14 L1061.09 1219.14 L1061.67 1219.14 L1062.26 1219.14 L1062.85 1219.14 L1063.43 1219.14 L1064.02 1219.14 L1064.6 1219.14 L1065.19 1219.14 L1065.78 1219.14 L1066.36 1219.14 L1066.95 1219.14 L1067.54 1219.14 L1068.12 1219.14 L1068.71 1219.14 L1069.3 1219.14 L1069.88 1219.14 L1070.47 1219.14 L1071.06 1219.14 L1071.64 1219.14 L1072.23 1219.14 L1072.81 1219.14 L1073.4 1219.14 L1073.99 1219.14 L1074.57 1219.14 L1075.16 1219.14 L1075.75 1219.14 L1076.33 1219.14 L1076.92 1219.14 L1077.51 1219.14 L1078.09 1219.14 L1078.68 1219.14 L1079.26 1219.14 L1079.85 1219.14 L1080.44 1219.14 L1081.02 1219.14 L1081.61 1219.14 L1082.2 1219.14 L1082.78 1219.14 L1083.37 1219.14 L1083.96 1219.14 L1084.54 1219.14 L1085.13 1219.14 L1085.72 1219.14 L1086.3 1219.14 L1086.89 1219.14 L1087.47 1219.14 L1088.06 1219.14 L1088.65 1219.14 L1089.23 1219.14 L1089.82 1219.14 L1090.41 1219.14 L1090.99 1219.14 L1091.58 1219.14 L1092.17 1219.14 L1092.75 1219.14 L1093.34 1219.14 L1093.93 1219.14 L1094.51 1219.14 L1095.1 1219.14 L1095.68 1219.14 L1096.27 1219.14 L1096.86 1219.14 L1097.44 1219.14 L1098.03 1219.14 L1098.62 1219.14 L1099.2 1219.14 L1099.79 1219.14 L1100.38 1219.14 L1100.96 1219.14 L1101.55 1219.14 L1102.14 1219.14 L1102.72 1219.14 L1103.31 1219.14 L1103.89 1219.14 L1104.48 1219.14 L1105.07 1219.14 L1105.65 1219.14 L1106.24 1219.14 L1106.83 1219.14 L1107.41 1219.14 L1108 1219.14 L1108.59 1219.14 L1109.17 1219.14 L1109.76 1219.14 L1110.34 1219.14 L1110.93 1219.14 L1111.52 1219.14 L1112.1 1219.14 L1112.69 1219.14 L1113.28 1219.14 L1113.86 1219.14 L1114.45 1219.14 L1115.04 1219.14 L1115.62 1219.14 L1116.21 1219.14 L1116.8 1219.14 L1117.38 1219.14 L1117.97 1219.14 L1118.55 1219.14 L1119.14 1219.14 L1119.73 1219.14 L1120.31 1219.14 L1120.9 1219.14 L1121.49 1219.14 L1122.07 1219.14 L1122.66 1219.14 L1123.25 1219.14 L1123.83 1219.14 L1124.42 1219.14 L1125.01 1219.14 L1125.59 1219.14 L1126.18 1219.14 L1126.76 1219.14 L1127.35 1219.14 L1127.94 1219.14 L1128.52 1219.14 L1129.11 1219.14 L1129.7 1219.14 L1130.28 1219.14 L1130.87 1219.14 L1131.46 1219.14 L1132.04 1219.14 L1132.63 1219.14 L1133.21 1219.14 L1133.8 1219.14 L1134.39 1219.14 L1134.97 1219.14 L1135.56 1219.14 L1136.15 1219.14 L1136.73 1219.14 L1137.32 1219.14 L1137.91 1219.14 L1138.49 1219.14 L1139.08 1219.14 L1139.67 1219.14 L1140.25 1219.14 L1140.84 1219.14 L1141.42 1219.14 L1142.01 1219.14 L1142.6 1219.14 L1143.18 1219.14 L1143.77 1219.14 L1144.36 1219.14 L1144.94 1219.14 L1145.53 1219.14 L1146.12 1219.14 L1146.7 1219.14 L1147.29 1219.14 L1147.88 1219.14 L1148.46 1219.14 L1149.05 1219.14 L1149.63 1219.14 L1150.22 1219.14 L1150.81 1219.14 L1151.39 1219.14 L1151.98 1219.14 L1152.57 1219.14 L1153.15 1219.14 L1153.74 1219.14 L1154.33 1219.14 L1154.91 1219.14 L1155.5 1219.14 L1156.09 1219.14 L1156.67 1219.14 L1157.26 1219.14 L1157.84 1219.14 L1158.43 1219.14 L1159.02 1219.14 L1159.6 1219.14 L1160.19 1219.14 L1160.78 1219.14 L1161.36 1219.14 L1161.95 1219.14 L1162.54 1219.14 L1163.12 1219.14 L1163.71 1219.14 L1164.29 1219.14 L1164.88 1219.14 L1165.47 1219.14 L1166.05 1219.14 L1166.64 1219.14 L1167.23 1219.14 L1167.81 1219.14 L1168.4 1219.14 L1168.99 1219.14 L1169.57 1219.14 L1170.16 1219.14 L1170.75 1219.14 L1171.33 1219.14 L1171.92 1219.14 L1172.5 1219.14 L1173.09 1219.14 L1173.68 1219.14 L1174.26 1219.14 L1174.85 1219.14 L1175.44 1219.14 L1176.02 1219.14 L1176.61 1219.14 L1177.2 1219.14 L1177.78 1219.14 L1178.37 1219.14 L1178.96 1219.14 L1179.54 1219.14 L1180.13 1219.14 L1180.71 1219.14 L1181.3 1219.14 L1181.89 1219.14 L1182.47 1219.14 L1183.06 1219.14 L1183.65 1219.14 L1184.23 1219.14 L1184.82 1219.14 L1185.41 1219.14 L1185.99 1219.14 L1186.58 1219.14 L1187.16 1219.14 L1187.75 1219.14 L1188.34 1219.14 L1188.92 1219.14 L1189.51 1219.14 L1190.1 1219.14 L1190.68 1219.14 L1191.27 1219.14 L1191.86 1219.14 L1192.44 1219.14 L1193.03 1219.14 L1193.62 1219.14 L1194.2 1219.14 L1194.79 1219.14 L1195.37 1219.14 L1195.96 1219.14 L1196.55 1219.14 L1197.13 1219.14 L1197.72 1219.14 L1198.31 1219.14 L1198.89 1219.14 L1199.48 1219.14 L1200.07 1219.14 L1200.65 1219.14 L1201.24 1219.14 L1201.83 1219.14 L1202.41 1219.14 L1203 1219.14 L1203.58 1219.14 L1204.17 1219.14 L1204.76 1219.14 L1205.34 1219.14 L1205.93 1219.14 L1206.52 1219.14 L1207.1 1219.14 L1207.69 1219.14 L1208.28 1219.14 L1208.86 1219.14 L1209.45 1219.14 L1210.03 1219.14 L1210.62 1219.14 L1211.21 1219.14 L1211.79 1219.14 L1212.38 1219.14 L1212.97 1219.14 L1213.55 1219.14 L1214.14 1219.14 L1214.73 1219.14 L1215.31 1219.14 L1215.9 1219.14 L1216.49 1219.14 L1217.07 1219.14 L1217.66 1219.14 L1218.24 1219.14 L1218.83 1219.14 L1219.42 1219.14 L1220 1219.14 L1220.59 1219.14 L1221.18 1219.14 L1221.76 1219.14 L1222.35 1219.14 L1222.94 1219.14 L1223.52 1219.14 L1224.11 1219.14 L1224.7 1219.14 L1225.28 1219.14 L1225.87 1219.14 L1226.45 1219.14 L1227.04 1219.14 L1227.63 1219.14 L1228.21 1219.14 L1228.8 1219.14 L1229.39 1219.14 L1229.97 1219.14 L1230.56 1219.14 L1231.15 1219.14 L1231.73 1219.14 L1232.32 1219.14 L1232.91 1219.14 L1233.49 1219.14 L1234.08 1219.14 L1234.66 1219.14 L1235.25 1219.14 L1235.84 1219.14 L1236.42 1219.14 L1237.01 1219.14 L1237.6 1219.14 L1238.18 1219.14 L1238.77 1219.14 L1239.36 1219.14 L1239.94 1219.14 L1240.53 1219.14 L1241.11 1219.14 L1241.7 1219.14 L1242.29 1219.14 L1242.87 1219.14 L1243.46 1219.14 L1244.05 1219.14 L1244.63 1219.14 L1245.22 1219.14 L1245.81 1219.14 L1246.39 1219.14 L1246.98 1219.14 L1247.57 1219.14 L1248.15 1219.14 L1248.74 1219.14 L1249.32 1219.14 L1249.91 1219.14 L1250.5 1219.14 L1251.08 1219.14 L1251.67 1219.14 L1252.26 1219.14 L1252.84 1219.14 L1253.43 1219.14 L1254.02 1219.14 L1254.6 1219.14 L1255.19 1219.14 L1255.78 1219.14 L1256.36 1219.14 L1256.95 1219.14 L1257.53 1219.14 L1258.12 1219.14 L1258.71 1219.14 L1259.29 1219.14 L1259.88 1219.14 L1260.47 1219.14 L1261.05 1219.14 L1261.64 1219.14 L1262.23 1219.14 L1262.81 1219.14 L1263.4 1219.14 L1263.98 1219.14 L1264.57 1219.14 L1265.16 1219.14 L1265.74 1219.14 L1266.33 1219.14 L1266.92 1219.14 L1267.5 1219.14 L1268.09 1219.14 L1268.68 1219.14 L1269.26 1219.14 L1269.85 1219.14 L1270.44 1219.14 L1271.02 1219.14 L1271.61 1219.14 L1272.19 1219.14 L1272.78 1219.14 L1273.37 1219.14 L1273.95 1219.14 L1274.54 1219.14 L1275.13 1219.14 L1275.71 1219.14 L1276.3 1219.14 L1276.89 1219.14 L1277.47 1219.14 L1278.06 1219.14 L1278.65 1219.14 L1279.23 1219.14 L1279.82 1219.14 L1280.4 1219.14 L1280.99 1219.14 L1281.58 1219.14 L1282.16 1219.14 L1282.75 1219.14 L1283.34 1219.14 L1283.92 1219.14 L1284.51 1219.14 L1285.1 1219.14 L1285.68 1219.14 L1286.27 1219.14 L1286.86 1219.14 L1287.44 1219.14 L1288.03 1219.14 L1288.61 1219.14 L1289.2 1219.14 L1289.79 1219.14 L1290.37 1219.14 L1290.96 1219.14 L1291.55 1219.14 L1292.13 1219.14 L1292.72 1219.14 L1293.31 1219.14 L1293.89 1219.14 L1294.48 1219.14 L1295.06 1219.14 L1295.65 1219.14 L1296.24 1219.14 L1296.82 1219.14 L1297.41 1219.14 L1298 1219.14 L1298.58 1219.14 L1299.17 1219.14 L1299.76 1219.14 L1300.34 1219.14 L1300.93 1219.14 L1301.52 1219.14 L1302.1 1219.14 L1302.69 1219.14 L1303.27 1219.14 L1303.86 1219.14 L1304.45 1219.14 L1305.03 1219.14 L1305.62 1219.14 L1306.21 1219.14 L1306.79 1219.14 L1307.38 1219.14 L1307.97 1219.14 L1308.55 1219.14 L1309.14 1219.14 L1309.73 1219.14 L1310.31 1219.14 L1310.9 1219.14 L1311.48 1219.14 L1312.07 1219.14 L1312.66 1219.14 L1313.24 1219.14 L1313.83 1219.14 L1314.42 1219.14 L1315 1219.14 L1315.59 1219.14 L1316.18 1219.14 L1316.76 1219.14 L1317.35 1219.14 L1317.93 1219.14 L1318.52 1219.14 L1319.11 1219.14 L1319.69 1219.14 L1320.28 1219.14 L1320.87 1219.14 L1321.45 1219.14 L1322.04 1219.14 L1322.63 1219.14 L1323.21 1219.14 L1323.8 1219.14 L1324.39 1219.14 L1324.97 1219.14 L1325.56 1219.14 L1326.14 1219.14 L1326.73 1219.14 L1327.32 1219.14 L1327.9 1219.14 L1328.49 1219.14 L1329.08 1219.14 L1329.66 1219.14 L1330.25 1219.14 L1330.84 1219.14 L1331.42 1219.14 L1332.01 1219.14 L1332.6 1219.14 L1333.18 1219.14 L1333.77 1219.14 L1334.35 1219.14 L1334.94 1219.14 L1335.53 1219.14 L1336.11 1219.14 L1336.7 1219.14 L1337.29 1219.14 L1337.87 1219.14 L1338.46 1219.14 L1339.05 1219.14 L1339.63 1219.14 L1340.22 1219.14 L1340.8 1219.14 L1341.39 1219.14 L1341.98 1219.14 L1342.56 1219.14 L1343.15 1219.14 L1343.74 1219.14 L1344.32 1219.14 L1344.91 1219.14 L1345.5 1219.14 L1346.08 1219.14 L1346.67 1219.14 L1347.26 1219.14 L1347.84 1219.14 L1348.43 1219.14 L1349.01 1219.14 L1349.6 1219.14 L1350.19 1219.14 L1350.77 1219.14 L1351.36 1219.14 L1351.95 1219.14 L1352.53 1219.14 L1353.12 1219.14 L1353.71 1219.14 L1354.29 1219.14 L1354.88 1219.14 L1355.47 1219.14 L1356.05 1219.14 L1356.64 1219.14 L1357.22 1219.14 L1357.81 1219.14 L1358.4 1219.14 L1358.98 1219.14 L1359.57 1219.14 L1360.16 1219.14 L1360.74 1219.14 L1361.33 1219.14 L1361.92 1219.14 L1362.5 1219.14 L1363.09 1219.14 L1363.68 1219.14 L1364.26 1219.14 L1364.85 1219.14 L1365.43 1219.14 L1366.02 1219.14 L1366.61 1219.14 L1367.19 1219.14 L1367.78 1219.14 L1368.37 1219.14 L1368.95 1219.14 L1369.54 1219.14 L1370.13 1219.14 L1370.71 1219.14 L1371.3 1219.14 L1371.88 1219.14 L1372.47 1219.14 L1373.06 1219.14 L1373.64 1219.14 L1374.23 1219.14 L1374.82 1219.14 L1375.4 1219.14 L1375.99 1219.14 L1376.58 1219.14 L1377.16 1219.14 L1377.75 1219.14 L1378.34 1219.14 L1378.92 1219.14 L1379.51 1219.14 L1380.09 1219.14 L1380.68 1219.14 L1381.27 1219.14 L1381.85 1219.14 L1382.44 1219.14 L1383.03 1219.14 L1383.61 1219.14 L1384.2 1219.14 L1384.79 1219.14 L1385.37 1219.14 L1385.96 1219.14 L1386.55 1219.14 L1387.13 1219.14 L1387.72 1219.14 L1388.3 1219.14 L1388.89 1219.14 L1389.48 1219.14 L1390.06 1219.14 L1390.65 1219.14 L1391.24 1219.14 L1391.82 1219.14 L1392.41 1219.14 L1393 1219.14 L1393.58 1219.14 L1394.17 1219.14 L1394.75 1219.14 L1395.34 1219.14 L1395.93 1219.14 L1396.51 1219.14 L1397.1 1219.14 L1397.69 1219.14 L1398.27 1219.14 L1398.86 1219.14 L1399.45 1219.14 L1400.03 1219.14 L1400.62 1219.14 L1401.21 1219.14 L1401.79 1219.14 L1402.38 1219.14 L1402.96 1219.14 L1403.55 1219.14 L1404.14 1219.14 L1404.72 1219.14 L1405.31 1219.14 L1405.9 1219.14 L1406.48 1219.14 L1407.07 1219.14 L1407.66 1219.14 L1408.24 1219.14 L1408.83 1219.14 L1409.42 1219.14 L1410 1219.14 L1410.59 1219.14 L1411.17 1219.14 L1411.76 1219.14 L1412.35 1219.14 L1412.93 1219.14 L1413.52 1219.14 L1414.11 1219.14 L1414.69 1219.14 L1415.28 1219.14 L1415.87 1219.14 L1416.45 1219.14 L1417.04 1219.14 L1417.63 1219.14 L1418.21 1219.14 L1418.8 1219.14 L1419.38 1219.14 L1419.97 1219.14 L1420.56 1219.14 L1421.14 1219.14 L1421.73 1219.14 L1422.32 1219.14 L1422.9 1219.14 L1423.49 1219.14 L1424.08 1219.14 L1424.66 1219.14 L1425.25 1219.14 L1425.83 1219.14 L1426.42 1219.14 L1427.01 1219.14 L1427.59 1219.14 L1428.18 1219.14 L1428.77 1219.14 L1429.35 1219.14 L1429.94 1219.14 L1430.53 1219.14 L1431.11 1219.14 L1431.7 1219.14 L1432.29 1219.14 L1432.87 1219.14 L1433.46 1219.14 L1434.04 1219.14 L1434.63 1219.14 L1435.22 1219.14 L1435.8 1219.14 L1436.39 1219.14 L1436.98 1219.14 L1437.56 1219.14 L1438.15 1219.14 L1438.74 1219.14 L1439.32 1219.14 L1439.91 1219.14 L1440.5 1219.14 L1441.08 1219.14 L1441.67 1219.14 L1442.25 1219.14 L1442.84 1219.14 L1443.43 1219.14 L1444.01 1219.14 L1444.6 1219.14 L1445.19 1219.14 L1445.77 1219.14 L1446.36 1219.14 L1446.95 1219.14 L1447.53 1219.14 L1448.12 1219.14 L1448.7 1219.14 L1449.29 1219.14 L1449.88 1219.14 L1450.46 1219.14 L1451.05 1219.14 L1451.64 1219.14 L1452.22 1219.14 L1452.81 1219.14 L1453.4 1219.14 L1453.98 1219.14 L1454.57 1219.14 L1455.16 1219.14 L1455.74 1219.14 L1456.33 1219.14 L1456.91 1219.14 L1457.5 1219.14 L1458.09 1219.14 L1458.67 1219.14 L1459.26 1219.14 L1459.85 1219.14 L1460.43 1219.14 L1461.02 1219.14 L1461.61 1219.14 L1462.19 1219.14 L1462.78 1219.14 L1463.37 1219.14 L1463.95 1219.14 L1464.54 1219.14 L1465.12 1219.14 L1465.71 1219.14 L1466.3 1219.14 L1466.88 1219.14 L1467.47 1219.14 L1468.06 1219.14 L1468.64 1219.14 L1469.23 1219.14 L1469.82 1219.14 L1470.4 1219.14 L1470.99 1219.14 L1471.57 1219.14 L1472.16 1219.14 L1472.75 1219.14 L1473.33 1219.14 L1473.92 1219.14 L1474.51 1219.14 L1475.09 1219.14 L1475.68 1219.14 L1476.27 1219.14 L1476.85 1219.14 L1477.44 1219.14 L1478.03 1219.14 L1478.61 1219.14 L1479.2 1219.14 L1479.78 1219.14 L1480.37 1219.14 L1480.96 1219.14 L1481.54 1219.14 L1482.13 1219.14 L1482.72 1219.14 L1483.3 1219.14 L1483.89 1219.14 L1484.48 1219.14 L1485.06 1219.14 L1485.65 1219.14 L1486.24 1219.14 L1486.82 1219.14 L1487.41 1219.14 L1487.99 1219.14 L1488.58 1219.14 L1489.17 1219.14 L1489.75 1219.14 L1490.34 1219.14 L1490.93 1219.14 L1491.51 1219.14 L1492.1 1219.14 L1492.69 1219.14 L1493.27 1219.14 L1493.86 1219.14 L1494.45 1219.14 L1495.03 1219.14 L1495.62 1219.14 L1496.2 1219.14 L1496.79 1219.14 L1497.38 1219.14 L1497.96 1219.14 L1498.55 1219.14 L1499.14 1219.14 L1499.72 1219.14 L1500.31 1219.14 L1500.9 1219.14 L1501.48 1219.14 L1502.07 1219.14 L1502.65 1219.14 L1503.24 1219.14 L1503.83 1219.14 L1504.41 1219.14 L1505 1219.14 L1505.59 1219.14 L1506.17 1219.14 L1506.76 1219.14 L1507.35 1219.14 L1507.93 1219.14 L1508.52 1219.14 L1509.11 1219.14 L1509.69 1219.14 L1510.28 1219.14 L1510.86 1219.14 L1511.45 1219.14 L1512.04 1219.14 L1512.62 1219.14 L1513.21 1219.14 L1513.8 1219.14 L1514.38 1219.14 L1514.97 1219.14 L1515.56 1219.14 L1516.14 1219.14 L1516.73 1219.14 L1517.32 1219.14 L1517.9 1219.14 L1518.49 1219.14 L1519.07 1219.14 L1519.66 1219.14 L1520.25 1219.14 L1520.83 1219.14 L1521.42 1219.14 L1522.01 1219.14 L1522.59 1219.14 L1523.18 1219.14 L1523.77 1219.14 L1524.35 1219.14 L1524.94 1219.14 L1525.52 1219.14 L1526.11 1219.14 L1526.7 1219.14 L1527.28 1219.14 L1527.87 1219.14 L1528.46 1219.14 L1529.04 1219.14 L1529.63 1219.14 L1530.22 1219.14 L1530.8 1219.14 L1531.39 1219.14 L1531.98 1219.14 L1532.56 1219.14 L1533.15 1219.14 L1533.73 1219.14 L1534.32 1219.14 L1534.91 1219.14 L1535.49 1219.14 L1536.08 1219.14 L1536.67 1219.14 L1537.25 1219.14 L1537.84 1219.14 L1538.43 1219.14 L1539.01 1219.14 L1539.6 1219.14 L1540.19 1219.14 L1540.77 1219.14 L1541.36 1219.14 L1541.94 1219.14 L1542.53 1219.14 L1543.12 1219.14 L1543.7 1219.14 L1544.29 1219.14 L1544.88 1219.14 L1545.46 1219.14 L1546.05 1219.14 L1546.64 1219.14 L1547.22 1219.14 L1547.81 1219.14 L1548.4 1219.14 L1548.98 1219.14 L1549.57 1219.14 L1550.15 1219.14 L1550.74 1219.14 L1551.33 1219.14 L1551.91 1219.14 L1552.5 1219.14 L1553.09 1219.14 L1553.67 1219.14 L1554.26 1219.14 L1554.85 1219.14 L1555.43 1219.14 L1556.02 1219.14 L1556.6 1219.14 L1557.19 1219.14 L1557.78 1219.14 L1558.36 1219.14 L1558.95 1219.14 L1559.54 1219.14 L1560.12 1219.14 L1560.71 1219.14 L1561.3 1219.14 L1561.88 1219.14 L1562.47 1219.14 L1563.06 1219.14 L1563.64 1219.14 L1564.23 1219.14 L1564.81 1219.14 L1565.4 1219.14 L1565.99 1219.14 L1566.57 1219.14 L1567.16 1219.14 L1567.75 1219.14 L1568.33 1219.14 L1568.92 1219.14 L1569.51 1219.14 L1570.09 1219.14 L1570.68 1219.14 L1571.27 1219.14 L1571.85 1219.14 L1572.44 1219.14 L1573.02 1219.14 L1573.61 1219.14 L1574.2 1219.14 L1574.78 1219.14 L1575.37 1219.14 L1575.96 1219.14 L1576.54 1219.14 L1577.13 1219.14 L1577.72 1219.14 L1578.3 1219.14 L1578.89 1219.14 L1579.47 1219.14 L1580.06 1219.14 L1580.65 1219.14 L1581.23 1219.14 L1581.82 1219.14 L1582.41 1219.14 L1582.99 1219.14 L1583.58 1219.14 L1584.17 1219.14 L1584.75 1219.14 L1585.34 1219.14 L1585.93 1219.14 L1586.51 1219.14 L1587.1 1219.14 L1587.68 1219.14 L1588.27 1219.14 L1588.86 1219.14 L1589.44 1219.14 L1590.03 1219.14 L1590.62 1219.14 L1591.2 1219.14 L1591.79 1219.14 L1592.38 1219.14 L1592.96 1219.14 L1593.55 1219.14 L1594.14 1219.14 L1594.72 1219.14 L1595.31 1219.14 L1595.89 1219.14 L1596.48 1219.14 L1597.07 1219.14 L1597.65 1219.14 L1598.24 1219.14 L1598.83 1219.14 L1599.41 1219.14 L1600 1219.14 L1600.59 1219.14 L1601.17 1219.14 L1601.76 1219.14 L1602.34 1219.14 L1602.93 1219.14 L1603.52 1219.14 L1604.1 1219.14 L1604.69 1219.14 L1605.28 1219.14 L1605.86 1219.14 L1606.45 1219.14 L1607.04 1219.14 L1607.62 1219.14 L1608.21 1219.14 L1608.8 1219.14 L1609.38 1219.14 L1609.97 1219.14 L1610.55 1219.14 L1611.14 1219.14 L1611.73 1219.14 L1612.31 1219.14 L1612.9 1219.14 L1613.49 1219.14 L1614.07 1219.14 L1614.66 1219.14 L1615.25 1219.14 L1615.83 1219.14 L1616.42 1219.14 L1617.01 1219.14 L1617.59 1219.14 L1618.18 1219.14 L1618.76 1219.14 L1619.35 1219.14 L1619.94 1219.14 L1620.52 1219.14 L1621.11 1219.14 L1621.7 1219.14 L1622.28 1219.14 L1622.87 1219.14 L1623.46 1219.14 L1624.04 1219.14 L1624.63 1219.14 L1625.22 1219.14 L1625.8 1219.14 L1626.39 1219.14 L1626.97 1219.14 L1627.56 1219.14 L1628.15 1219.14 L1628.73 1219.14 L1629.32 1219.14 L1629.91 1219.14 L1630.49 1219.14 L1631.08 1219.14 L1631.67 1219.14 L1632.25 1219.14 L1632.84 1219.14 L1633.42 1219.14 L1634.01 1219.14 L1634.6 1219.14 L1635.18 1219.14 L1635.77 1219.14 L1636.36 1219.14 L1636.94 1219.14 L1637.53 1219.14 L1638.12 1219.14 L1638.7 1219.14 L1639.29 1219.14 L1639.88 1219.14 L1640.46 1219.14 L1641.05 1219.14 L1641.63 1219.14 L1642.22 1219.14 L1642.81 1219.14 L1643.39 1219.14 L1643.98 1219.14 L1644.57 1219.14 L1645.15 1219.14 L1645.74 1219.14 L1646.33 1219.14 L1646.91 1219.14 L1647.5 1219.14 L1648.09 1219.14 L1648.67 1219.14 L1649.26 1219.14 L1649.84 1219.14 L1650.43 1219.14 L1651.02 1219.14 L1651.6 1219.14 L1652.19 1219.14 L1652.78 1219.14 L1653.36 1219.14 L1653.95 1219.14 L1654.54 1219.14 L1655.12 1219.14 L1655.71 1219.14 L1656.29 1219.14 L1656.88 1219.14 L1657.47 1219.14 L1658.05 1219.14 L1658.64 1219.14 L1659.23 1219.14 L1659.81 1219.14 L1660.4 1219.14 L1660.99 1219.14 L1661.57 1219.14 L1662.16 1219.14 L1662.75 1219.14 L1663.33 1219.14 L1663.92 1219.14 L1664.5 1219.14 L1665.09 1219.14 L1665.68 1219.14 L1666.26 1219.14 L1666.85 1219.14 L1667.44 1219.14 L1668.02 1219.14 L1668.61 1219.14 L1669.2 1219.14 L1669.78 1219.14 L1670.37 1219.14 L1670.96 1219.14 L1671.54 1219.14 L1672.13 1219.14 L1672.71 1219.14 L1673.3 1219.14 L1673.89 1219.14 L1674.47 1219.14 L1675.06 1219.14 L1675.65 1219.14 L1676.23 1219.14 L1676.82 1219.14 L1677.41 1219.14 L1677.99 1219.14 L1678.58 1219.14 L1679.17 1219.14 L1679.75 1219.14 L1680.34 1219.14 L1680.92 1219.14 L1681.51 1219.14 L1682.1 1219.14 L1682.68 1219.14 L1683.27 1219.14 L1683.86 1219.14 L1684.44 1219.14 L1685.03 1219.14 L1685.62 1219.14 L1686.2 1219.14 L1686.79 1219.14 L1687.37 1219.14 L1687.96 1219.14 L1688.55 1219.14 L1689.13 1219.14 L1689.72 1219.14 L1690.31 1219.14 L1690.89 1219.14 L1691.48 1219.14 L1692.07 1219.14 L1692.65 1219.14 L1693.24 1219.14 L1693.83 1219.14 L1694.41 1219.14 L1695 1219.14 L1695.58 1219.14 L1696.17 1219.14 L1696.76 1219.14 L1697.34 1219.14 L1697.93 1219.14 L1698.52 1219.14 L1699.1 1219.14 L1699.69 1219.14 L1700.28 1219.14 L1700.86 1219.14 L1701.45 1219.14 L1702.04 1219.14 L1702.62 1219.14 L1703.21 1219.14 L1703.79 1219.14 L1704.38 1219.14 L1704.97 1219.14 L1705.55 1219.14 L1706.14 1219.14 L1706.73 1219.14 L1707.31 1219.14 L1707.9 1219.14 L1708.49 1219.14 L1709.07 1219.14 L1709.66 1219.14 L1710.24 1219.14 L1710.83 1219.14 L1711.42 1219.14 L1712 1219.14 L1712.59 1219.14 L1713.18 1219.14 L1713.76 1219.14 L1714.35 1219.14 L1714.94 1219.14 L1715.52 1219.14 L1716.11 1219.14 L1716.7 1219.14 L1717.28 1219.14 L1717.87 1219.14 L1718.45 1219.14 L1719.04 1219.14 L1719.63 1219.14 L1720.21 1219.14 L1720.8 1219.14 L1721.39 1219.14 L1721.97 1219.14 L1722.56 1219.14 L1723.15 1219.14 L1723.73 1219.14 L1724.32 1219.14 L1724.91 1219.14 L1725.49 1219.14 L1726.08 1219.14 L1726.66 1219.14 L1727.25 1219.14 L1727.84 1219.14 L1728.42 1219.14 L1729.01 1219.14 L1729.6 1219.14 L1730.18 1219.14 L1730.77 1219.14 L1731.36 1219.14 L1731.94 1219.14 L1732.53 1219.14 L1733.11 1219.14 L1733.7 1219.14 L1734.29 1219.14 L1734.87 1219.14 L1735.46 1219.14 L1736.05 1219.14 L1736.63 1219.14 L1737.22 1219.14 L1737.81 1219.14 L1738.39 1219.14 L1738.98 1219.14 L1739.57 1219.14 L1740.15 1219.14 L1740.74 1219.14 L1741.32 1219.14 L1741.91 1219.14 L1742.5 1219.14 L1743.08 1219.14 L1743.67 1219.14 L1744.26 1219.14 L1744.84 1219.14 L1745.43 1219.14 L1746.02 1219.14 L1746.6 1219.14 L1747.19 1219.14 L1747.78 1219.14 L1748.36 1219.14 L1748.95 1219.14 L1749.53 1219.14 L1750.12 1219.14 L1750.71 1219.14 L1751.29 1219.14 L1751.88 1219.14 L1752.47 1219.14 L1753.05 1219.14 L1753.64 1219.14 L1754.23 1219.14 L1754.81 1219.14 L1755.4 1219.14 L1755.99 1219.14 L1756.57 1219.14 L1757.16 1219.14 L1757.74 1219.14 L1758.33 1219.14 L1758.92 1219.14 L1759.5 1219.14 L1760.09 1219.14 L1760.68 1219.14 L1761.26 1219.14 L1761.85 1219.14 L1762.44 1219.14 L1763.02 1219.14 L1763.61 1219.14 L1764.19 1219.14 L1764.78 1219.14 L1765.37 1219.14 L1765.95 1219.14 L1766.54 1219.14 L1767.13 1219.14 L1767.71 1219.14 L1768.3 1219.14 L1768.89 1219.14 L1769.47 1219.14 L1770.06 1219.14 L1770.65 1219.14 L1771.23 1219.14 L1771.82 1219.14 L1772.4 1219.14 L1772.99 1219.14 L1773.58 1219.14 L1774.16 1219.14 L1774.75 1219.14 L1775.34 1219.14 L1775.92 1219.14 L1776.51 1219.14 L1777.1 1219.14 L1777.68 1219.14 L1778.27 1219.14 L1778.86 1219.14 L1779.44 1219.14 L1780.03 1219.14 L1780.61 1219.14 L1781.2 1219.14 L1781.79 1219.14 L1782.37 1219.14 L1782.96 1219.14 L1783.55 1219.14 L1784.13 1219.14 L1784.72 1219.14 L1785.31 1219.14 L1785.89 1219.14 L1786.48 1219.14 L1787.06 1219.14 L1787.65 1219.14 L1788.24 1219.14 L1788.82 1219.14 L1789.41 1219.14 L1790 1219.14 L1790.58 1219.14 L1791.17 1219.14 L1791.76 1219.14 L1792.34 1219.14 L1792.93 1219.14 L1793.52 1219.14 L1794.1 1219.14 L1794.69 1219.14 L1795.27 1219.14 L1795.86 1219.14 L1796.45 1219.14 L1797.03 1219.14 L1797.62 1219.14 L1798.21 1219.14 L1798.79 1219.14 L1799.38 1219.14 L1799.97 1219.14 L1800.55 1219.14 L1801.14 1219.14 L1801.73 1219.14 L1802.31 1219.14 L1802.9 1219.14 L1803.48 1219.14 L1804.07 1219.14 L1804.66 1219.14 L1805.24 1219.14 L1805.83 1219.14 L1806.42 1219.14 L1807 1219.14 L1807.59 1219.14 L1808.18 1219.14 L1808.76 1219.14 L1809.35 1219.14 L1809.94 1219.14 L1810.52 1219.14 L1811.11 1219.14 L1811.69 1219.14 L1812.28 1219.14 L1812.87 1219.14 L1813.45 1219.14 L1814.04 1219.14 L1814.63 1219.14 L1815.21 1219.14 L1815.8 1219.14 L1816.39 1219.14 L1816.97 1219.14 L1817.56 1219.14 L1818.14 1219.14 L1818.73 1219.14 L1819.32 1219.14 L1819.9 1219.14 L1820.49 1219.14 L1821.08 1219.14 L1821.66 1219.14 L1822.25 1219.14 L1822.84 1219.14 L1823.42 1219.14 L1824.01 1219.14 L1824.6 1219.14 L1825.18 1219.14 L1825.77 1219.14 L1826.35 1219.14 L1826.94 1219.14 L1827.53 1219.14 L1828.11 1219.14 L1828.7 1219.14 L1829.29 1219.14 L1829.87 1219.14 L1830.46 1219.14 L1831.05 1219.14 L1831.63 1219.14 L1832.22 1219.14 L1832.81 1219.14 L1833.39 1219.14 L1833.98 1219.14 L1834.56 1219.14 L1835.15 1219.14 L1835.74 1219.14 L1836.32 1219.14 L1836.91 1219.14 L1837.5 1219.14 L1838.08 1219.14 L1838.67 1219.14 L1839.26 1219.14 L1839.84 1219.14 L1840.43 1219.14 L1841.01 1219.14 L1841.6 1219.14 L1842.19 1219.14 L1842.77 1219.14 L1843.36 1219.14 L1843.95 1219.14 L1844.53 1219.14 L1845.12 1219.14 L1845.71 1219.14 L1846.29 1219.14 L1846.88 1219.14 L1847.47 1219.14 L1848.05 1219.14 L1848.64 1219.14 L1849.22 1219.14 L1849.81 1219.14 L1850.4 1219.14 L1850.98 1219.14 L1851.57 1219.14 L1852.16 1219.14 L1852.74 1219.14 L1853.33 1219.14 L1853.92 1219.14 L1854.5 1219.14 L1855.09 1219.14 L1855.68 1219.14 L1856.26 1219.14 L1856.85 1219.14 L1857.43 1219.14 L1858.02 1219.14 L1858.61 1219.14 L1859.19 1219.14 L1859.78 1219.14 L1860.37 1219.14 L1860.95 1219.14 L1861.54 1219.14 L1862.13 1219.14 L1862.71 1219.14 L1863.3 1219.14 L1863.88 1219.14 L1864.47 1219.14 L1865.06 1219.14 L1865.64 1219.14 L1866.23 1219.14 L1866.82 1219.14 L1867.4 1219.14 L1867.99 1219.14 L1868.58 1219.14 L1869.16 1219.14 L1869.75 1219.14 L1870.34 1219.14 L1870.92 1219.14 L1871.51 1219.14 L1872.09 1219.14 L1872.68 1219.14 L1873.27 1219.14 L1873.85 1219.14 L1874.44 1219.14 L1875.03 1219.14 L1875.61 1219.14 L1876.2 1219.14 L1876.79 1219.14 L1877.37 1219.14 L1877.96 1219.14 L1878.55 1219.14 L1879.13 1219.14 L1879.72 1219.14 L1880.3 1219.14 L1880.89 1219.14 L1881.48 1219.14 L1882.06 1219.14 L1882.65 1219.14 L1883.24 1219.14 L1883.82 1219.14 L1884.41 1219.14 L1885 1219.14 L1885.58 1219.14 L1886.17 1219.14 L1886.76 1219.14 L1887.34 1219.14 L1887.93 1219.14 L1888.51 1219.14 L1889.1 1219.14 L1889.69 1219.14 L1890.27 1219.14 L1890.86 1219.14 L1891.45 1219.14 L1892.03 1219.14 L1892.62 1219.14 L1893.21 1219.14 L1893.79 1219.14 L1894.38 1219.14 L1894.96 1219.14 L1895.55 1219.14 L1896.14 1219.14 L1896.72 1219.14 L1897.31 1219.14 L1897.9 1219.14 L1898.48 1219.14 L1899.07 1219.14 L1899.66 1219.14 L1900.24 1219.14 L1900.83 1219.14 L1901.42 1219.14 L1902 1219.14 L1902.59 1219.14 L1903.17 1219.14 L1903.76 1219.14 L1904.35 1219.14 L1904.93 1219.14 L1905.52 1219.14 L1906.11 1219.14 L1906.69 1219.14 L1907.28 1219.14 L1907.87 1219.14 L1908.45 1219.14 L1909.04 1219.14 L1909.63 1219.14 L1910.21 1219.14 L1910.8 1219.14 L1911.38 1219.14 L1911.97 1219.14 L1912.56 1219.14 L1913.14 1219.14 L1913.73 1219.14 L1914.32 1219.14 L1914.9 1219.14 L1915.49 1219.14 L1916.08 1219.14 L1916.66 1219.14 L1917.25 1219.14 L1917.83 1219.14 L1918.42 1219.14 L1919.01 1219.14 L1919.59 1219.14 L1920.18 1219.14 L1920.77 1219.14 L1921.35 1219.14 L1921.94 1219.14 L1922.53 1219.14 L1923.11 1219.14 L1923.7 1219.14 L1924.29 1219.14 L1924.87 1219.14 L1925.46 1219.14 L1926.04 1219.14 L1926.63 1219.14 L1927.22 1219.14 L1927.8 1219.14 L1928.39 1219.14 L1928.98 1219.14 L1929.56 1219.14 L1930.15 1219.14 L1930.74 1219.14 L1931.32 1219.14 L1931.91 1219.14 L1932.5 1219.14 L1933.08 1219.14 L1933.67 1219.14 L1934.25 1219.14 L1934.84 1219.14 L1935.43 1219.14 L1936.01 1219.14 L1936.6 1219.14 L1937.19 1219.14 L1937.77 1219.14 L1938.36 1219.14 L1938.95 1219.14 L1939.53 1219.14 L1940.12 1219.14 L1940.71 1219.14 L1941.29 1219.14 L1941.88 1219.14 L1942.46 1219.14 L1943.05 1219.14 L1943.64 1219.14 L1944.22 1219.14 L1944.81 1219.14 L1945.4 1219.14 L1945.98 1219.14 L1946.57 1219.14 L1947.16 1219.14 L1947.74 1219.14 L1948.33 1219.14 L1948.91 1219.14 L1949.5 1219.14 L1950.09 1219.14 L1950.67 1219.14 L1951.26 1219.14 L1951.85 1219.14 L1952.43 1219.14 L1953.02 1219.14 L1953.61 1219.14 L1954.19 1219.14 L1954.78 1219.14 L1955.37 1219.14 L1955.95 1219.14 L1956.54 1219.14 L1957.12 1219.14 L1957.71 1219.14 L1958.3 1219.14 L1958.88 1219.14 L1959.47 1219.14 L1960.06 1219.14 L1960.64 1219.14 L1961.23 1219.14 L1961.82 1219.14 L1962.4 1219.14 L1962.99 1219.14 L1963.58 1219.14 L1964.16 1219.14 L1964.75 1219.14 L1965.33 1219.14 L1965.92 1219.14 L1966.51 1219.14 L1967.09 1219.14 L1967.68 1219.14 L1968.27 1219.14 L1968.85 1219.14 L1969.44 1219.14 L1970.03 1219.14 L1970.61 1219.14 L1971.2 1219.14 L1971.78 1219.14 L1972.37 1219.14 L1972.96 1219.14 L1973.54 1219.14 L1974.13 1219.14 L1974.72 1219.14 L1975.3 1219.14 L1975.89 1219.14 L1976.48 1219.14 L1977.06 1219.14 L1977.65 1219.14 L1978.24 1219.14 L1978.82 1219.14 L1979.41 1219.14 L1979.99 1219.14 L1980.58 1219.14 L1981.17 1219.14 L1981.75 1219.14 L1982.34 1219.14 L1982.93 1219.14 L1983.51 1219.14 L1984.1 1219.14 L1984.69 1219.14 L1985.27 1219.14 L1985.86 1219.14 L1986.45 1219.14 L1987.03 1219.14 L1987.62 1219.14 L1988.2 1219.14 L1988.79 1219.14 L1989.38 1219.14 L1989.96 1219.14 L1990.55 1219.14 L1991.14 1219.14 L1991.72 1219.14 L1992.31 1219.14 L1992.9 1219.14 L1993.48 1219.14 L1994.07 1219.14 L1994.65 1219.14 L1995.24 1219.14 L1995.83 1219.14 L1996.41 1219.14 L1997 1219.14 L1997.59 1219.14 L1998.17 1219.14 L1998.76 1219.14 L1999.35 1219.14 L1999.93 1219.14 L2000.52 1219.14 L2001.11 1219.14 L2001.69 1219.14 L2002.28 1219.14 L2002.86 1219.14 L2003.45 1219.14 L2004.04 1219.14 L2004.62 1219.14 L2005.21 1219.14 L2005.8 1219.14 L2006.38 1219.14 L2006.97 1219.14 L2007.56 1219.14 L2008.14 1219.14 L2008.73 1219.14 L2009.32 1219.14 L2009.9 1219.14 L2010.49 1219.14 L2011.07 1219.14 L2011.66 1219.14 L2012.25 1219.14 L2012.83 1219.14 L2013.42 1219.14 L2014.01 1219.14 L2014.59 1219.14 L2015.18 1219.14 L2015.77 1219.14 L2016.35 1219.14 L2016.94 1219.14 L2017.53 1219.14 L2018.11 1219.14 L2018.7 1219.14 L2019.28 1219.14 L2019.87 1219.14 L2020.46 1219.14 L2021.04 1219.14 L2021.63 1219.14 L2022.22 1219.14 L2022.8 1219.14 L2023.39 1219.14 L2023.98 1219.14 L2024.56 1219.14 L2025.15 1219.14 L2025.73 1219.14 L2026.32 1219.14 L2026.91 1219.14 L2027.49 1219.14 L2028.08 1219.14 L2028.67 1219.14 L2029.25 1219.14 L2029.84 1219.14 L2030.43 1219.14 L2031.01 1219.14 L2031.6 1219.14 L2032.19 1219.14 L2032.77 1219.14 L2033.36 1219.14 L2033.94 1219.14 L2034.53 1219.14 L2035.12 1219.14 L2035.7 1219.14 L2036.29 1219.14 L2036.88 1219.14 L2037.46 1219.14 L2038.05 1219.14 L2038.64 1219.14 L2039.22 1219.14 L2039.81 1219.14 L2040.4 1219.14 L2040.98 1219.14 L2041.57 1219.14 L2042.15 1219.14 L2042.74 1219.14 L2043.33 1219.14 L2043.91 1219.14 L2044.5 1219.14 L2045.09 1219.14 L2045.67 1219.14 L2046.26 1219.14 L2046.85 1219.14 L2047.43 1219.14 L2048.02 1219.14 L2048.6 1219.14 L2049.19 1219.14 L2049.78 1219.14 L2050.36 1219.14 L2050.95 1219.14 L2051.54 1219.14 L2052.12 1219.14 L2052.71 1219.14 L2053.3 1219.14 L2053.88 1219.14 L2054.47 1219.14 L2055.06 1219.14 L2055.64 1219.14 L2056.23 1219.14 L2056.81 1219.14 L2057.4 1219.14 L2057.99 1219.14 L2058.57 1219.14 L2059.16 1219.14 L2059.75 1219.14 L2060.33 1219.14 L2060.92 1219.14 L2061.51 1219.14 L2062.09 1219.14 L2062.68 1219.14 L2063.27 1219.14 L2063.85 1219.14 L2064.44 1219.14 L2065.02 1219.14 L2065.61 1219.14 L2066.2 1219.14 L2066.78 1219.14 L2067.37 1219.14 L2067.96 1219.14 L2068.54 1219.14 L2069.13 1219.14 L2069.72 1219.14 L2070.3 1219.14 L2070.89 1219.14 L2071.48 1219.14 L2072.06 1219.14 L2072.65 1219.14 L2073.23 1219.14 L2073.82 1219.14 L2074.41 1219.14 L2074.99 1219.14 L2075.58 1219.14 L2076.17 1219.14 L2076.75 1219.14 L2077.34 1219.14 L2077.93 1219.14 L2078.51 1219.14 L2079.1 1219.14 L2079.68 1219.14 L2080.27 1219.14 L2080.86 1219.14 L2081.44 1219.14 L2082.03 1219.14 L2082.62 1219.14 L2083.2 1219.14 L2083.79 1219.14 L2084.38 1219.14 L2084.96 1219.14 L2085.55 1219.14 L2086.14 1219.14 L2086.72 1219.14 L2087.31 1219.14 L2087.89 1219.14 L2088.48 1219.14 L2089.07 1219.14 L2089.65 1219.14 L2090.24 1219.14 L2090.83 1219.14 L2091.41 1219.14 L2092 1219.14 L2092.59 1219.14 L2093.17 1219.14 L2093.76 1219.14 L2094.35 1219.14 L2094.93 1219.14 L2095.52 1219.14 L2096.1 1219.14 L2096.69 1219.14 L2097.28 1219.14 L2097.86 1219.14 L2098.45 1219.14 L2099.04 1219.14 L2099.62 1219.14 L2100.21 1219.14 L2100.8 1219.14 L2101.38 1219.14 L2101.97 1219.14 L2102.55 1219.14 L2103.14 1219.14 L2103.73 1219.14 L2104.31 1219.14 L2104.9 1219.14 L2105.49 1219.14 L2106.07 1219.14 L2106.66 1219.14 L2107.25 1219.14 L2107.83 1219.14 L2108.42 1219.14 L2109.01 1219.14 L2109.59 1219.14 L2110.18 1219.14 L2110.76 1219.14 L2111.35 1219.14 L2111.94 1219.14 L2112.52 1219.14 L2113.11 1219.14 L2113.7 1219.14 L2114.28 1219.14 L2114.87 1219.14 L2115.46 1219.14 L2116.04 1219.14 L2116.63 1219.14 L2117.22 1219.14 L2117.8 1219.14 L2118.39 1219.14 L2118.97 1219.14 L2119.56 1219.14 L2120.15 1219.14 L2120.73 1219.14 L2121.32 1219.14 L2121.91 1219.14 L2122.49 1219.14 L2123.08 1219.14 L2123.67 1219.14 L2124.25 1219.14 L2124.84 1219.14 L2125.42 1219.14 L2126.01 1219.14 L2126.6 1219.14 L2127.18 1219.14 L2127.77 1219.14 L2128.36 1219.14 L2128.94 1219.14 L2129.53 1219.14 L2130.12 1219.14 L2130.7 1219.14 L2131.29 1219.14 L2131.88 1219.14 L2132.46 1219.14 L2133.05 1219.14 L2133.63 1219.14 L2134.22 1219.14 L2134.81 1219.14 L2135.39 1219.14 L2135.98 1219.14 L2136.57 1219.14 L2137.15 1219.14 L2137.74 1219.14 L2138.33 1219.14 L2138.91 1219.14 L2139.5 1219.14 L2140.09 1219.14 L2140.67 1219.14 L2141.26 1219.14 L2141.84 1219.14 L2142.43 1219.14 L2143.02 1219.14 L2143.6 1219.14 L2144.19 1219.14 L2144.78 1219.14 L2145.36 1219.14 L2145.95 1219.14 L2146.54 1219.14 L2147.12 1219.14 L2147.71 1219.14 L2148.3 1219.14 L2148.88 1219.14 L2149.47 1219.14 L2150.05 1219.14 L2150.64 1219.14 L2151.23 1219.14 L2151.81 1219.14 L2152.4 1219.14 L2152.99 1219.14 L2153.57 1219.14 L2154.16 1219.14 L2154.75 1219.14 L2155.33 1219.14 L2155.92 1219.14 L2156.5 1219.14 L2157.09 1219.14 L2157.68 1219.14 L2158.26 1219.14 L2158.26 1219.01 L2157.68 1219.01 L2157.09 1219.01 L2156.5 1219.01 L2155.92 1219.01 L2155.33 1219.01 L2154.75 1219.01 L2154.16 1219.01 L2153.57 1219.01 L2152.99 1219.01 L2152.4 1219.01 L2151.81 1219.01 L2151.23 1219.01 L2150.64 1219.01 L2150.05 1219.01 L2149.47 1219.01 L2148.88 1219.01 L2148.3 1219.01 L2147.71 1219.01 L2147.12 1219.01 L2146.54 1219.01 L2145.95 1219.01 L2145.36 1219.01 L2144.78 1219.01 L2144.19 1219.01 L2143.6 1219.01 L2143.02 1219.01 L2142.43 1219.01 L2141.84 1219.01 L2141.26 1219.01 L2140.67 1219.01 L2140.09 1219.01 L2139.5 1219.01 L2138.91 1219.01 L2138.33 1219.01 L2137.74 1219.01 L2137.15 1219.01 L2136.57 1219.01 L2135.98 1219.01 L2135.39 1219.01 L2134.81 1219.01 L2134.22 1219.01 L2133.63 1219.01 L2133.05 1219.01 L2132.46 1219.01 L2131.88 1219.01 L2131.29 1219.01 L2130.7 1219.01 L2130.12 1219.01 L2129.53 1219.01 L2128.94 1219.01 L2128.36 1219.01 L2127.77 1219.01 L2127.18 1219.01 L2126.6 1219.01 L2126.01 1219.01 L2125.42 1219.01 L2124.84 1219.01 L2124.25 1219.01 L2123.67 1219.01 L2123.08 1219.01 L2122.49 1219.01 L2121.91 1219.01 L2121.32 1219.01 L2120.73 1219.01 L2120.15 1219.01 L2119.56 1219.01 L2118.97 1219.01 L2118.39 1219.01 L2117.8 1219.01 L2117.22 1219.01 L2116.63 1219.01 L2116.04 1219.01 L2115.46 1219.01 L2114.87 1219.01 L2114.28 1219.01 L2113.7 1219.01 L2113.11 1219.01 L2112.52 1219.01 L2111.94 1219.01 L2111.35 1219.01 L2110.76 1219.01 L2110.18 1219.01 L2109.59 1219.01 L2109.01 1219.01 L2108.42 1219.01 L2107.83 1219.01 L2107.25 1219.01 L2106.66 1219.01 L2106.07 1219.01 L2105.49 1219.01 L2104.9 1219.01 L2104.31 1219.01 L2103.73 1219.01 L2103.14 1219.01 L2102.55 1219.01 L2101.97 1219.01 L2101.38 1219.01 L2100.8 1219.01 L2100.21 1219.01 L2099.62 1219.01 L2099.04 1219.01 L2098.45 1219.01 L2097.86 1219.01 L2097.28 1219.01 L2096.69 1219.01 L2096.1 1219.01 L2095.52 1219.01 L2094.93 1219.01 L2094.35 1219.01 L2093.76 1219.01 L2093.17 1219.01 L2092.59 1219.01 L2092 1219.01 L2091.41 1219.01 L2090.83 1219.01 L2090.24 1219.01 L2089.65 1219.01 L2089.07 1219.01 L2088.48 1219.01 L2087.89 1219.01 L2087.31 1219.01 L2086.72 1219.01 L2086.14 1219.01 L2085.55 1219.01 L2084.96 1219.01 L2084.38 1219.01 L2083.79 1219.01 L2083.2 1219.01 L2082.62 1219.01 L2082.03 1219.01 L2081.44 1219.01 L2080.86 1219.01 L2080.27 1219.01 L2079.68 1219.01 L2079.1 1219.01 L2078.51 1219.01 L2077.93 1219.01 L2077.34 1219.01 L2076.75 1219.01 L2076.17 1219.01 L2075.58 1219.01 L2074.99 1219.01 L2074.41 1219.01 L2073.82 1219.01 L2073.23 1219.01 L2072.65 1219.01 L2072.06 1219.01 L2071.48 1219.01 L2070.89 1219.01 L2070.3 1219.01 L2069.72 1219.01 L2069.13 1219.01 L2068.54 1219.01 L2067.96 1219.01 L2067.37 1219.01 L2066.78 1219.01 L2066.2 1219.01 L2065.61 1219.01 L2065.02 1219.01 L2064.44 1219.01 L2063.85 1219.01 L2063.27 1219.01 L2062.68 1219.01 L2062.09 1219.01 L2061.51 1219.01 L2060.92 1219.01 L2060.33 1219.01 L2059.75 1219.01 L2059.16 1219.01 L2058.57 1219.01 L2057.99 1219.01 L2057.4 1219.01 L2056.81 1219.01 L2056.23 1219.01 L2055.64 1219.01 L2055.06 1219.01 L2054.47 1219.01 L2053.88 1219.01 L2053.3 1219.01 L2052.71 1219.01 L2052.12 1219.01 L2051.54 1219.01 L2050.95 1219.01 L2050.36 1219.01 L2049.78 1219.01 L2049.19 1219.01 L2048.6 1219.01 L2048.02 1219.01 L2047.43 1219.01 L2046.85 1219.01 L2046.26 1219.01 L2045.67 1219.01 L2045.09 1219.01 L2044.5 1219.01 L2043.91 1219.01 L2043.33 1219.01 L2042.74 1219.01 L2042.15 1219.01 L2041.57 1219.01 L2040.98 1219.01 L2040.4 1219.01 L2039.81 1219.01 L2039.22 1219.01 L2038.64 1219.01 L2038.05 1219.01 L2037.46 1219.01 L2036.88 1219.01 L2036.29 1219.01 L2035.7 1219.01 L2035.12 1219.01 L2034.53 1219.01 L2033.94 1219.01 L2033.36 1219.01 L2032.77 1219.01 L2032.19 1219.01 L2031.6 1219.01 L2031.01 1219.01 L2030.43 1219.01 L2029.84 1219.01 L2029.25 1219.01 L2028.67 1219.01 L2028.08 1219.01 L2027.49 1219.01 L2026.91 1219.01 L2026.32 1219.01 L2025.73 1219.01 L2025.15 1219.01 L2024.56 1219.01 L2023.98 1219.01 L2023.39 1219.01 L2022.8 1219.01 L2022.22 1219.01 L2021.63 1219.01 L2021.04 1219.01 L2020.46 1219.01 L2019.87 1219.01 L2019.28 1219.01 L2018.7 1219.01 L2018.11 1219.01 L2017.53 1219.01 L2016.94 1219.01 L2016.35 1219.01 L2015.77 1219.01 L2015.18 1219.01 L2014.59 1219.01 L2014.01 1219.01 L2013.42 1219.01 L2012.83 1219.01 L2012.25 1219.01 L2011.66 1219.01 L2011.07 1219.01 L2010.49 1219.01 L2009.9 1219.01 L2009.32 1219.01 L2008.73 1219.01 L2008.14 1219.01 L2007.56 1219.01 L2006.97 1219.01 L2006.38 1219.01 L2005.8 1219.01 L2005.21 1219.01 L2004.62 1219.01 L2004.04 1219.01 L2003.45 1219.01 L2002.86 1219.01 L2002.28 1219.01 L2001.69 1219.01 L2001.11 1219.01 L2000.52 1219.01 L1999.93 1219.01 L1999.35 1219.01 L1998.76 1219.01 L1998.17 1219.01 L1997.59 1219.01 L1997 1219.01 L1996.41 1219.01 L1995.83 1219.01 L1995.24 1219.01 L1994.65 1219.01 L1994.07 1219.01 L1993.48 1219.01 L1992.9 1219.01 L1992.31 1219.01 L1991.72 1219.01 L1991.14 1219.01 L1990.55 1219.01 L1989.96 1219.01 L1989.38 1219.01 L1988.79 1219.01 L1988.2 1219.01 L1987.62 1219.01 L1987.03 1219.01 L1986.45 1219.01 L1985.86 1219.01 L1985.27 1219.01 L1984.69 1219.01 L1984.1 1219.01 L1983.51 1219.01 L1982.93 1219.01 L1982.34 1219.01 L1981.75 1219.01 L1981.17 1219.01 L1980.58 1219.01 L1979.99 1219.01 L1979.41 1219.01 L1978.82 1219.01 L1978.24 1219.01 L1977.65 1219.01 L1977.06 1219.01 L1976.48 1219.01 L1975.89 1219.01 L1975.3 1219.01 L1974.72 1219.01 L1974.13 1219.01 L1973.54 1219.01 L1972.96 1219.01 L1972.37 1219.01 L1971.78 1219.01 L1971.2 1219.01 L1970.61 1219.01 L1970.03 1219.01 L1969.44 1219.01 L1968.85 1219.01 L1968.27 1219.01 L1967.68 1219.01 L1967.09 1219.01 L1966.51 1219.01 L1965.92 1219.01 L1965.33 1219.01 L1964.75 1219.01 L1964.16 1219.01 L1963.58 1219.01 L1962.99 1219.01 L1962.4 1219.01 L1961.82 1219.01 L1961.23 1219.01 L1960.64 1219.01 L1960.06 1219.01 L1959.47 1219.01 L1958.88 1219.01 L1958.3 1219.01 L1957.71 1219.01 L1957.12 1219.01 L1956.54 1219.01 L1955.95 1219.01 L1955.37 1219.01 L1954.78 1219.01 L1954.19 1219.01 L1953.61 1219.01 L1953.02 1219.01 L1952.43 1219.01 L1951.85 1219.01 L1951.26 1219.01 L1950.67 1219.01 L1950.09 1219.01 L1949.5 1219.01 L1948.91 1219.01 L1948.33 1219.01 L1947.74 1219.01 L1947.16 1219.01 L1946.57 1219.01 L1945.98 1219.01 L1945.4 1219.01 L1944.81 1219.01 L1944.22 1219.01 L1943.64 1219.01 L1943.05 1219.01 L1942.46 1219.01 L1941.88 1219.01 L1941.29 1219.01 L1940.71 1219.01 L1940.12 1219.01 L1939.53 1219.01 L1938.95 1219.01 L1938.36 1219.01 L1937.77 1219.01 L1937.19 1219.01 L1936.6 1219.01 L1936.01 1219.01 L1935.43 1219.01 L1934.84 1219.01 L1934.25 1219.01 L1933.67 1219.01 L1933.08 1219.01 L1932.5 1219.01 L1931.91 1219.01 L1931.32 1219.01 L1930.74 1219.01 L1930.15 1219.01 L1929.56 1219.01 L1928.98 1219.01 L1928.39 1219.01 L1927.8 1219.01 L1927.22 1219.01 L1926.63 1219.01 L1926.04 1219.01 L1925.46 1219.01 L1924.87 1219.01 L1924.29 1219.01 L1923.7 1219.01 L1923.11 1219.01 L1922.53 1219.01 L1921.94 1219.01 L1921.35 1219.01 L1920.77 1219.01 L1920.18 1219.01 L1919.59 1219.01 L1919.01 1219.01 L1918.42 1219.01 L1917.83 1219.01 L1917.25 1219.01 L1916.66 1219.01 L1916.08 1219.01 L1915.49 1219.01 L1914.9 1219.01 L1914.32 1219.01 L1913.73 1219.01 L1913.14 1219.01 L1912.56 1219.01 L1911.97 1219.01 L1911.38 1219.01 L1910.8 1219.01 L1910.21 1219.01 L1909.63 1219.01 L1909.04 1219.01 L1908.45 1219.01 L1907.87 1219.01 L1907.28 1219.01 L1906.69 1219.01 L1906.11 1219.01 L1905.52 1219.01 L1904.93 1219.01 L1904.35 1219.01 L1903.76 1219.01 L1903.17 1219.01 L1902.59 1219.01 L1902 1219.01 L1901.42 1219.01 L1900.83 1219.01 L1900.24 1219.01 L1899.66 1219.01 L1899.07 1219.01 L1898.48 1219.01 L1897.9 1219.01 L1897.31 1219.01 L1896.72 1219.01 L1896.14 1219.01 L1895.55 1219.01 L1894.96 1219.01 L1894.38 1219.01 L1893.79 1219.01 L1893.21 1219.01 L1892.62 1219.01 L1892.03 1219.01 L1891.45 1219.01 L1890.86 1219.01 L1890.27 1219.01 L1889.69 1219.01 L1889.1 1219.01 L1888.51 1219.01 L1887.93 1219.01 L1887.34 1219.01 L1886.76 1219.01 L1886.17 1219.01 L1885.58 1219.01 L1885 1219.01 L1884.41 1219.01 L1883.82 1219.01 L1883.24 1219.01 L1882.65 1219.01 L1882.06 1219.01 L1881.48 1219.01 L1880.89 1219.01 L1880.3 1219.01 L1879.72 1219.01 L1879.13 1219.01 L1878.55 1219.01 L1877.96 1219.01 L1877.37 1219.01 L1876.79 1219.01 L1876.2 1219.01 L1875.61 1219.01 L1875.03 1219.01 L1874.44 1219.01 L1873.85 1219.01 L1873.27 1219.01 L1872.68 1219.01 L1872.09 1219.01 L1871.51 1219.01 L1870.92 1219.01 L1870.34 1219.01 L1869.75 1219.01 L1869.16 1219.01 L1868.58 1219.01 L1867.99 1219.01 L1867.4 1219.01 L1866.82 1219.01 L1866.23 1219.01 L1865.64 1219.01 L1865.06 1219.01 L1864.47 1219.01 L1863.88 1219.01 L1863.3 1219.01 L1862.71 1219.01 L1862.13 1219.01 L1861.54 1219.01 L1860.95 1219.01 L1860.37 1219.01 L1859.78 1219.01 L1859.19 1219.01 L1858.61 1219.01 L1858.02 1219.01 L1857.43 1219.01 L1856.85 1219.01 L1856.26 1219.01 L1855.68 1219.01 L1855.09 1219.01 L1854.5 1219.01 L1853.92 1219.01 L1853.33 1219.01 L1852.74 1219.01 L1852.16 1219.01 L1851.57 1219.01 L1850.98 1219.01 L1850.4 1219.01 L1849.81 1219.01 L1849.22 1219.01 L1848.64 1219.01 L1848.05 1219.01 L1847.47 1219.01 L1846.88 1219.01 L1846.29 1219.01 L1845.71 1219.01 L1845.12 1219.01 L1844.53 1219.01 L1843.95 1219.01 L1843.36 1219.01 L1842.77 1219.01 L1842.19 1219.01 L1841.6 1219.01 L1841.01 1219.01 L1840.43 1219.01 L1839.84 1219.01 L1839.26 1219.01 L1838.67 1219.01 L1838.08 1219.01 L1837.5 1219.01 L1836.91 1219.01 L1836.32 1219.01 L1835.74 1219.01 L1835.15 1219.01 L1834.56 1219.01 L1833.98 1219.01 L1833.39 1219.01 L1832.81 1219.01 L1832.22 1219.01 L1831.63 1219.01 L1831.05 1219.01 L1830.46 1219.01 L1829.87 1219.01 L1829.29 1219.01 L1828.7 1219.01 L1828.11 1219.01 L1827.53 1219.01 L1826.94 1219.01 L1826.35 1219.01 L1825.77 1219.01 L1825.18 1219.01 L1824.6 1219.01 L1824.01 1219.01 L1823.42 1219.01 L1822.84 1219.01 L1822.25 1219.01 L1821.66 1219.01 L1821.08 1219.01 L1820.49 1219.01 L1819.9 1219.01 L1819.32 1219.01 L1818.73 1219.01 L1818.14 1219.01 L1817.56 1219.01 L1816.97 1219.01 L1816.39 1219.01 L1815.8 1219.01 L1815.21 1219.01 L1814.63 1219.01 L1814.04 1219.01 L1813.45 1219.01 L1812.87 1219.01 L1812.28 1219.01 L1811.69 1219.01 L1811.11 1219.01 L1810.52 1219.01 L1809.94 1219.01 L1809.35 1219.01 L1808.76 1219.01 L1808.18 1219.01 L1807.59 1219.01 L1807 1219.01 L1806.42 1219.01 L1805.83 1219.01 L1805.24 1219.01 L1804.66 1219.01 L1804.07 1219.01 L1803.48 1219.01 L1802.9 1219.01 L1802.31 1219.01 L1801.73 1219.01 L1801.14 1219.01 L1800.55 1219.01 L1799.97 1219.01 L1799.38 1219.01 L1798.79 1219.01 L1798.21 1219.01 L1797.62 1219.01 L1797.03 1219.01 L1796.45 1219.01 L1795.86 1219.01 L1795.27 1219.01 L1794.69 1219.01 L1794.1 1219.01 L1793.52 1219.01 L1792.93 1219.01 L1792.34 1219.01 L1791.76 1219.01 L1791.17 1219.01 L1790.58 1219.01 L1790 1219.01 L1789.41 1219.01 L1788.82 1219.01 L1788.24 1219.01 L1787.65 1219.01 L1787.06 1219.01 L1786.48 1219.01 L1785.89 1219.01 L1785.31 1219.01 L1784.72 1219.01 L1784.13 1219.01 L1783.55 1219.01 L1782.96 1219.01 L1782.37 1219.01 L1781.79 1219.01 L1781.2 1219.01 L1780.61 1219.01 L1780.03 1219.01 L1779.44 1219.01 L1778.86 1219.01 L1778.27 1219.01 L1777.68 1219.01 L1777.1 1219.01 L1776.51 1219.01 L1775.92 1219.01 L1775.34 1219.01 L1774.75 1219.01 L1774.16 1219.01 L1773.58 1219.01 L1772.99 1219.01 L1772.4 1219.01 L1771.82 1219.01 L1771.23 1219.01 L1770.65 1219.01 L1770.06 1219.01 L1769.47 1219.01 L1768.89 1219.01 L1768.3 1219.01 L1767.71 1219.01 L1767.13 1219.01 L1766.54 1219.01 L1765.95 1219.01 L1765.37 1219.01 L1764.78 1219.01 L1764.19 1219.01 L1763.61 1219.01 L1763.02 1219.01 L1762.44 1219.01 L1761.85 1219.01 L1761.26 1219.01 L1760.68 1219.01 L1760.09 1219.01 L1759.5 1219.01 L1758.92 1219.01 L1758.33 1219.01 L1757.74 1219.01 L1757.16 1219.01 L1756.57 1219.01 L1755.99 1219.01 L1755.4 1219.01 L1754.81 1219.01 L1754.23 1219.01 L1753.64 1219.01 L1753.05 1219.01 L1752.47 1219.01 L1751.88 1219.01 L1751.29 1219.01 L1750.71 1219.01 L1750.12 1219.01 L1749.53 1219.01 L1748.95 1219.01 L1748.36 1219.01 L1747.78 1219.01 L1747.19 1219.01 L1746.6 1219.01 L1746.02 1219.01 L1745.43 1219.01 L1744.84 1219.01 L1744.26 1219.01 L1743.67 1219.01 L1743.08 1219.01 L1742.5 1219.01 L1741.91 1219.01 L1741.32 1219.01 L1740.74 1219.01 L1740.15 1219.01 L1739.57 1219.01 L1738.98 1219.01 L1738.39 1219.01 L1737.81 1219.01 L1737.22 1219.01 L1736.63 1219.01 L1736.05 1219.01 L1735.46 1219.01 L1734.87 1219.01 L1734.29 1219.01 L1733.7 1219.01 L1733.11 1219.01 L1732.53 1219.01 L1731.94 1219.01 L1731.36 1219.01 L1730.77 1219.01 L1730.18 1219.01 L1729.6 1219.01 L1729.01 1219.01 L1728.42 1219.01 L1727.84 1219.01 L1727.25 1219.01 L1726.66 1219.01 L1726.08 1219.01 L1725.49 1219.01 L1724.91 1219.01 L1724.32 1219.01 L1723.73 1219.01 L1723.15 1219.01 L1722.56 1219.01 L1721.97 1219.01 L1721.39 1219.01 L1720.8 1219.01 L1720.21 1219.01 L1719.63 1219.01 L1719.04 1219.01 L1718.45 1219.01 L1717.87 1219.01 L1717.28 1219.01 L1716.7 1219.01 L1716.11 1219.01 L1715.52 1219.01 L1714.94 1219.01 L1714.35 1219.01 L1713.76 1219.01 L1713.18 1219.01 L1712.59 1219.01 L1712 1219.01 L1711.42 1219.01 L1710.83 1219.01 L1710.24 1219.01 L1709.66 1219.01 L1709.07 1219.01 L1708.49 1219.01 L1707.9 1219.01 L1707.31 1219.01 L1706.73 1219.01 L1706.14 1219.01 L1705.55 1219.01 L1704.97 1219.01 L1704.38 1219.01 L1703.79 1219.01 L1703.21 1219.01 L1702.62 1219.01 L1702.04 1219.01 L1701.45 1219.01 L1700.86 1219.01 L1700.28 1219.01 L1699.69 1219.01 L1699.1 1219.01 L1698.52 1219.01 L1697.93 1219.01 L1697.34 1219.01 L1696.76 1219.01 L1696.17 1219.01 L1695.58 1219.01 L1695 1219.01 L1694.41 1219.01 L1693.83 1219.01 L1693.24 1219.01 L1692.65 1219.01 L1692.07 1219.01 L1691.48 1219.01 L1690.89 1219.01 L1690.31 1219.01 L1689.72 1219.01 L1689.13 1219.01 L1688.55 1219.01 L1687.96 1219.01 L1687.37 1219.01 L1686.79 1219.01 L1686.2 1219.01 L1685.62 1219.01 L1685.03 1219.01 L1684.44 1219.01 L1683.86 1219.01 L1683.27 1219.01 L1682.68 1219.01 L1682.1 1219.01 L1681.51 1219.01 L1680.92 1219.01 L1680.34 1219.01 L1679.75 1219.01 L1679.17 1219.01 L1678.58 1219.01 L1677.99 1219.01 L1677.41 1219.01 L1676.82 1219.01 L1676.23 1219.01 L1675.65 1219.01 L1675.06 1219.01 L1674.47 1219.01 L1673.89 1219.01 L1673.3 1219.01 L1672.71 1219.01 L1672.13 1219.01 L1671.54 1219.01 L1670.96 1219.01 L1670.37 1219.01 L1669.78 1219.01 L1669.2 1219.01 L1668.61 1219.01 L1668.02 1219.01 L1667.44 1219.01 L1666.85 1219.01 L1666.26 1219.01 L1665.68 1219.01 L1665.09 1219.01 L1664.5 1219.01 L1663.92 1219.01 L1663.33 1219.01 L1662.75 1219.01 L1662.16 1219.01 L1661.57 1219.01 L1660.99 1219.01 L1660.4 1219.01 L1659.81 1219.01 L1659.23 1219.01 L1658.64 1219.01 L1658.05 1219.01 L1657.47 1219.01 L1656.88 1219.01 L1656.29 1219.01 L1655.71 1219.01 L1655.12 1219.01 L1654.54 1219.01 L1653.95 1219.01 L1653.36 1219.01 L1652.78 1219.01 L1652.19 1219.01 L1651.6 1219.01 L1651.02 1219.01 L1650.43 1219.01 L1649.84 1219.01 L1649.26 1219.01 L1648.67 1219.01 L1648.09 1219.01 L1647.5 1219.01 L1646.91 1219.01 L1646.33 1219.01 L1645.74 1219.01 L1645.15 1219.01 L1644.57 1219.01 L1643.98 1219.01 L1643.39 1219.01 L1642.81 1219.01 L1642.22 1219.01 L1641.63 1219.01 L1641.05 1219.01 L1640.46 1219.01 L1639.88 1219.01 L1639.29 1219.01 L1638.7 1219.01 L1638.12 1219.01 L1637.53 1219.01 L1636.94 1219.01 L1636.36 1219.01 L1635.77 1219.01 L1635.18 1219.01 L1634.6 1219.01 L1634.01 1219.01 L1633.42 1219.01 L1632.84 1219.01 L1632.25 1219.01 L1631.67 1219.01 L1631.08 1219.01 L1630.49 1219.01 L1629.91 1219.01 L1629.32 1219.01 L1628.73 1219.01 L1628.15 1219.01 L1627.56 1219.01 L1626.97 1219.01 L1626.39 1219.01 L1625.8 1219.01 L1625.22 1219.01 L1624.63 1219.01 L1624.04 1219.01 L1623.46 1219.01 L1622.87 1219.01 L1622.28 1219.01 L1621.7 1219.01 L1621.11 1219.01 L1620.52 1219.01 L1619.94 1219.01 L1619.35 1219.01 L1618.76 1219.01 L1618.18 1219.01 L1617.59 1219.01 L1617.01 1219.01 L1616.42 1219.01 L1615.83 1219.01 L1615.25 1219.01 L1614.66 1219.01 L1614.07 1219.01 L1613.49 1219.01 L1612.9 1219.01 L1612.31 1219.01 L1611.73 1219.01 L1611.14 1219.01 L1610.55 1219.01 L1609.97 1219.01 L1609.38 1219.01 L1608.8 1219.01 L1608.21 1219.01 L1607.62 1219.01 L1607.04 1219.01 L1606.45 1219.01 L1605.86 1219.01 L1605.28 1219.01 L1604.69 1219.01 L1604.1 1219.01 L1603.52 1219.01 L1602.93 1219.01 L1602.34 1219.01 L1601.76 1219.01 L1601.17 1219.01 L1600.59 1219.01 L1600 1219.01 L1599.41 1219.01 L1598.83 1219.01 L1598.24 1219.01 L1597.65 1219.01 L1597.07 1219.01 L1596.48 1219.01 L1595.89 1219.01 L1595.31 1219.01 L1594.72 1219.01 L1594.14 1219.01 L1593.55 1219.01 L1592.96 1219.01 L1592.38 1219.01 L1591.79 1219.01 L1591.2 1219.01 L1590.62 1219.01 L1590.03 1219.01 L1589.44 1219.01 L1588.86 1219.01 L1588.27 1219.01 L1587.68 1219.01 L1587.1 1219.01 L1586.51 1219.01 L1585.93 1219.01 L1585.34 1219.01 L1584.75 1219.01 L1584.17 1219.01 L1583.58 1219.01 L1582.99 1219.01 L1582.41 1219.01 L1581.82 1219.01 L1581.23 1219.01 L1580.65 1219.01 L1580.06 1219.01 L1579.47 1219.01 L1578.89 1219.01 L1578.3 1219.01 L1577.72 1219.01 L1577.13 1219.01 L1576.54 1219.01 L1575.96 1219.01 L1575.37 1219.01 L1574.78 1219.01 L1574.2 1219.01 L1573.61 1219.01 L1573.02 1219.01 L1572.44 1219.01 L1571.85 1219.01 L1571.27 1219.01 L1570.68 1219.01 L1570.09 1219.01 L1569.51 1219.01 L1568.92 1219.01 L1568.33 1219.01 L1567.75 1219.01 L1567.16 1219.01 L1566.57 1219.01 L1565.99 1219.01 L1565.4 1219.01 L1564.81 1219.01 L1564.23 1219.01 L1563.64 1219.01 L1563.06 1219.01 L1562.47 1219.01 L1561.88 1219.01 L1561.3 1219.01 L1560.71 1219.01 L1560.12 1219.01 L1559.54 1219.01 L1558.95 1219.01 L1558.36 1219.01 L1557.78 1219.01 L1557.19 1219.01 L1556.6 1219.01 L1556.02 1219.01 L1555.43 1219.01 L1554.85 1219.01 L1554.26 1219.01 L1553.67 1219.01 L1553.09 1219.01 L1552.5 1219.01 L1551.91 1219.01 L1551.33 1219.01 L1550.74 1219.01 L1550.15 1219.01 L1549.57 1219.01 L1548.98 1219.01 L1548.4 1219.01 L1547.81 1219.01 L1547.22 1219.01 L1546.64 1219.01 L1546.05 1219.01 L1545.46 1219.01 L1544.88 1219.01 L1544.29 1219.01 L1543.7 1219.01 L1543.12 1219.01 L1542.53 1219.01 L1541.94 1219.01 L1541.36 1219.01 L1540.77 1219.01 L1540.19 1219.01 L1539.6 1219.01 L1539.01 1219.01 L1538.43 1219.01 L1537.84 1219.01 L1537.25 1219.01 L1536.67 1219.01 L1536.08 1219.01 L1535.49 1219.01 L1534.91 1219.01 L1534.32 1219.01 L1533.73 1219.01 L1533.15 1219.01 L1532.56 1219.01 L1531.98 1219.01 L1531.39 1219.01 L1530.8 1219.01 L1530.22 1219.01 L1529.63 1219.01 L1529.04 1219.01 L1528.46 1219.01 L1527.87 1219.01 L1527.28 1219.01 L1526.7 1219.01 L1526.11 1219.01 L1525.52 1219.01 L1524.94 1219.01 L1524.35 1219.01 L1523.77 1219.01 L1523.18 1219.01 L1522.59 1219.01 L1522.01 1219.01 L1521.42 1219.01 L1520.83 1219.01 L1520.25 1219.01 L1519.66 1219.01 L1519.07 1219.01 L1518.49 1219.01 L1517.9 1219.01 L1517.32 1219.01 L1516.73 1219.01 L1516.14 1219.01 L1515.56 1219.01 L1514.97 1219.01 L1514.38 1219.01 L1513.8 1219.01 L1513.21 1219.01 L1512.62 1219.01 L1512.04 1219.01 L1511.45 1219.01 L1510.86 1219.01 L1510.28 1219.01 L1509.69 1219.01 L1509.11 1219.01 L1508.52 1219.01 L1507.93 1219.01 L1507.35 1219.01 L1506.76 1219.01 L1506.17 1219.01 L1505.59 1219.01 L1505 1219.01 L1504.41 1219.01 L1503.83 1219.01 L1503.24 1219.01 L1502.65 1219.01 L1502.07 1219.01 L1501.48 1219.01 L1500.9 1219.01 L1500.31 1219.01 L1499.72 1219.01 L1499.14 1219.01 L1498.55 1219.01 L1497.96 1219.01 L1497.38 1219.01 L1496.79 1219.01 L1496.2 1219.01 L1495.62 1219.01 L1495.03 1219.01 L1494.45 1219.01 L1493.86 1219.01 L1493.27 1219.01 L1492.69 1219.01 L1492.1 1219.01 L1491.51 1219.01 L1490.93 1219.01 L1490.34 1219.01 L1489.75 1219.01 L1489.17 1219.01 L1488.58 1219.01 L1487.99 1219.01 L1487.41 1219.01 L1486.82 1219.01 L1486.24 1219.01 L1485.65 1219.01 L1485.06 1219.01 L1484.48 1219.01 L1483.89 1219.01 L1483.3 1219.01 L1482.72 1219.01 L1482.13 1219.01 L1481.54 1219.01 L1480.96 1219.01 L1480.37 1219.01 L1479.78 1219.01 L1479.2 1219.01 L1478.61 1219.01 L1478.03 1219.01 L1477.44 1219.01 L1476.85 1219.01 L1476.27 1219.01 L1475.68 1219.01 L1475.09 1219.01 L1474.51 1219.01 L1473.92 1219.01 L1473.33 1219.01 L1472.75 1219.01 L1472.16 1219.01 L1471.57 1219.01 L1470.99 1219.01 L1470.4 1219.01 L1469.82 1219.01 L1469.23 1219.01 L1468.64 1219.01 L1468.06 1219.01 L1467.47 1219.01 L1466.88 1219.01 L1466.3 1219.01 L1465.71 1219.01 L1465.12 1219.01 L1464.54 1219.01 L1463.95 1219.01 L1463.37 1219.01 L1462.78 1219.01 L1462.19 1219.01 L1461.61 1219.01 L1461.02 1219.01 L1460.43 1219.01 L1459.85 1219.01 L1459.26 1219.01 L1458.67 1219.01 L1458.09 1219.01 L1457.5 1219.01 L1456.91 1219.01 L1456.33 1219.01 L1455.74 1219.01 L1455.16 1219.01 L1454.57 1219.01 L1453.98 1219.01 L1453.4 1219.01 L1452.81 1219.01 L1452.22 1219.01 L1451.64 1219.01 L1451.05 1219.01 L1450.46 1219.01 L1449.88 1219.01 L1449.29 1219.01 L1448.7 1219.01 L1448.12 1219.01 L1447.53 1219.01 L1446.95 1219.01 L1446.36 1219.01 L1445.77 1219.01 L1445.19 1219.01 L1444.6 1219.01 L1444.01 1219.01 L1443.43 1219.01 L1442.84 1219.01 L1442.25 1219.01 L1441.67 1219.01 L1441.08 1219.01 L1440.5 1219.01 L1439.91 1219.01 L1439.32 1219.01 L1438.74 1219.01 L1438.15 1219.01 L1437.56 1219.01 L1436.98 1219.01 L1436.39 1219.01 L1435.8 1219.01 L1435.22 1219.01 L1434.63 1219.01 L1434.04 1219.01 L1433.46 1219.01 L1432.87 1219.01 L1432.29 1219.01 L1431.7 1219.01 L1431.11 1219.01 L1430.53 1219.01 L1429.94 1219.01 L1429.35 1219.01 L1428.77 1219.01 L1428.18 1219.01 L1427.59 1219.01 L1427.01 1219.01 L1426.42 1219.01 L1425.83 1219.01 L1425.25 1219.01 L1424.66 1219.01 L1424.08 1219.01 L1423.49 1219.01 L1422.9 1219.01 L1422.32 1219.01 L1421.73 1219.01 L1421.14 1219.01 L1420.56 1219.01 L1419.97 1219.01 L1419.38 1219.01 L1418.8 1219.01 L1418.21 1219.01 L1417.63 1219.01 L1417.04 1219.01 L1416.45 1219.01 L1415.87 1219.01 L1415.28 1219.01 L1414.69 1219.01 L1414.11 1219.01 L1413.52 1219.01 L1412.93 1219.01 L1412.35 1219.01 L1411.76 1219.01 L1411.17 1219.01 L1410.59 1219.01 L1410 1219.01 L1409.42 1219.01 L1408.83 1219.01 L1408.24 1219.01 L1407.66 1219.01 L1407.07 1219.01 L1406.48 1219.01 L1405.9 1219.01 L1405.31 1219.01 L1404.72 1219.01 L1404.14 1219.01 L1403.55 1219.01 L1402.96 1219.01 L1402.38 1219.01 L1401.79 1219.01 L1401.21 1219.01 L1400.62 1219.01 L1400.03 1219.01 L1399.45 1219.01 L1398.86 1219.01 L1398.27 1219.01 L1397.69 1219.01 L1397.1 1219.01 L1396.51 1219.01 L1395.93 1219.01 L1395.34 1219.01 L1394.75 1219.01 L1394.17 1219.01 L1393.58 1219.01 L1393 1219.01 L1392.41 1219.01 L1391.82 1219.01 L1391.24 1219.01 L1390.65 1219.01 L1390.06 1219.01 L1389.48 1219.01 L1388.89 1219.01 L1388.3 1219.01 L1387.72 1219.01 L1387.13 1219.01 L1386.55 1219.01 L1385.96 1219.01 L1385.37 1219.01 L1384.79 1219.01 L1384.2 1219.01 L1383.61 1219.01 L1383.03 1219.01 L1382.44 1219.01 L1381.85 1219.01 L1381.27 1219.01 L1380.68 1219.01 L1380.09 1219.01 L1379.51 1219.01 L1378.92 1219.01 L1378.34 1219.01 L1377.75 1219.01 L1377.16 1219.01 L1376.58 1219.01 L1375.99 1219.01 L1375.4 1219.01 L1374.82 1219.01 L1374.23 1219.01 L1373.64 1219.01 L1373.06 1219.01 L1372.47 1219.01 L1371.88 1219.01 L1371.3 1219.01 L1370.71 1219.01 L1370.13 1219.01 L1369.54 1219.01 L1368.95 1219.01 L1368.37 1219.01 L1367.78 1219.01 L1367.19 1219.01 L1366.61 1219.01 L1366.02 1219.01 L1365.43 1219.01 L1364.85 1219.01 L1364.26 1219.01 L1363.68 1219.01 L1363.09 1219.01 L1362.5 1219.01 L1361.92 1219.01 L1361.33 1219.01 L1360.74 1219.01 L1360.16 1219.01 L1359.57 1219.01 L1358.98 1219.01 L1358.4 1219.01 L1357.81 1219.01 L1357.22 1219.01 L1356.64 1219.01 L1356.05 1219.01 L1355.47 1219.01 L1354.88 1219.01 L1354.29 1219.01 L1353.71 1219.01 L1353.12 1219.01 L1352.53 1219.01 L1351.95 1219.01 L1351.36 1219.01 L1350.77 1219.01 L1350.19 1219.01 L1349.6 1219.01 L1349.01 1219.01 L1348.43 1219.01 L1347.84 1219.01 L1347.26 1219.01 L1346.67 1219.01 L1346.08 1219.01 L1345.5 1219.01 L1344.91 1219.01 L1344.32 1219.01 L1343.74 1219.01 L1343.15 1219.01 L1342.56 1219.01 L1341.98 1219.01 L1341.39 1219.01 L1340.8 1219.01 L1340.22 1219.01 L1339.63 1219.01 L1339.05 1219.01 L1338.46 1219.01 L1337.87 1219.01 L1337.29 1219.01 L1336.7 1219.01 L1336.11 1219.01 L1335.53 1219.01 L1334.94 1219.01 L1334.35 1219.01 L1333.77 1219.01 L1333.18 1219.01 L1332.6 1219.01 L1332.01 1219.01 L1331.42 1219.01 L1330.84 1219.01 L1330.25 1219.01 L1329.66 1219.01 L1329.08 1219.01 L1328.49 1219.01 L1327.9 1219.01 L1327.32 1219.01 L1326.73 1219.01 L1326.14 1219.01 L1325.56 1219.01 L1324.97 1219.01 L1324.39 1219.01 L1323.8 1219.01 L1323.21 1219.01 L1322.63 1219.01 L1322.04 1219.01 L1321.45 1219.01 L1320.87 1219.01 L1320.28 1219.01 L1319.69 1219.01 L1319.11 1219.01 L1318.52 1219.01 L1317.93 1219.01 L1317.35 1219.01 L1316.76 1219.01 L1316.18 1219.01 L1315.59 1219.01 L1315 1219.01 L1314.42 1219.01 L1313.83 1219.01 L1313.24 1219.01 L1312.66 1219.01 L1312.07 1219.01 L1311.48 1219.01 L1310.9 1219.01 L1310.31 1219.01 L1309.73 1219.01 L1309.14 1219.01 L1308.55 1219.01 L1307.97 1219.01 L1307.38 1219.01 L1306.79 1219.01 L1306.21 1219.01 L1305.62 1219.01 L1305.03 1219.01 L1304.45 1219.01 L1303.86 1219.01 L1303.27 1219.01 L1302.69 1219.01 L1302.1 1219.01 L1301.52 1219.01 L1300.93 1219.01 L1300.34 1219.01 L1299.76 1219.01 L1299.17 1219.01 L1298.58 1219.01 L1298 1219.01 L1297.41 1219.01 L1296.82 1219.01 L1296.24 1219.01 L1295.65 1219.01 L1295.06 1219.01 L1294.48 1219.01 L1293.89 1219.01 L1293.31 1219.01 L1292.72 1219.01 L1292.13 1219.01 L1291.55 1219.01 L1290.96 1219.01 L1290.37 1219.01 L1289.79 1219.01 L1289.2 1219.01 L1288.61 1219.01 L1288.03 1219.01 L1287.44 1219.01 L1286.86 1219.01 L1286.27 1219.01 L1285.68 1219.01 L1285.1 1219.01 L1284.51 1219.01 L1283.92 1219.01 L1283.34 1219.01 L1282.75 1219.01 L1282.16 1219.01 L1281.58 1219.01 L1280.99 1219.01 L1280.4 1219.01 L1279.82 1219.01 L1279.23 1219.01 L1278.65 1219.01 L1278.06 1219.01 L1277.47 1219.01 L1276.89 1219.01 L1276.3 1219.01 L1275.71 1219.01 L1275.13 1219.01 L1274.54 1219.01 L1273.95 1219.01 L1273.37 1219.01 L1272.78 1219.01 L1272.19 1219.01 L1271.61 1219.01 L1271.02 1219.01 L1270.44 1219.01 L1269.85 1219.01 L1269.26 1219.01 L1268.68 1219.01 L1268.09 1219.01 L1267.5 1219.01 L1266.92 1219.01 L1266.33 1219.01 L1265.74 1219.01 L1265.16 1219.01 L1264.57 1219.01 L1263.98 1219.01 L1263.4 1219.01 L1262.81 1219.01 L1262.23 1219.01 L1261.64 1219.01 L1261.05 1219.01 L1260.47 1219.01 L1259.88 1219.01 L1259.29 1219.01 L1258.71 1219.01 L1258.12 1219.01 L1257.53 1219.01 L1256.95 1219.01 L1256.36 1219.01 L1255.78 1219.01 L1255.19 1219.01 L1254.6 1219.01 L1254.02 1219.01 L1253.43 1219.01 L1252.84 1219.01 L1252.26 1219.01 L1251.67 1219.01 L1251.08 1219.01 L1250.5 1219.01 L1249.91 1219.01 L1249.32 1219.01 L1248.74 1219.01 L1248.15 1219.01 L1247.57 1219.01 L1246.98 1219.01 L1246.39 1219.01 L1245.81 1219.01 L1245.22 1219.01 L1244.63 1219.01 L1244.05 1219.01 L1243.46 1219.01 L1242.87 1219.01 L1242.29 1219.01 L1241.7 1219.01 L1241.11 1219.01 L1240.53 1219.01 L1239.94 1219.01 L1239.36 1219.01 L1238.77 1219.01 L1238.18 1219.01 L1237.6 1219.01 L1237.01 1219.01 L1236.42 1219.01 L1235.84 1219.01 L1235.25 1219.01 L1234.66 1219.01 L1234.08 1219.01 L1233.49 1219.01 L1232.91 1219.01 L1232.32 1219.01 L1231.73 1219.01 L1231.15 1219.01 L1230.56 1219.01 L1229.97 1219.01 L1229.39 1219.01 L1228.8 1219.01 L1228.21 1219.01 L1227.63 1219.01 L1227.04 1219.01 L1226.45 1219.01 L1225.87 1219.01 L1225.28 1219.01 L1224.7 1219.01 L1224.11 1219.01 L1223.52 1219.01 L1222.94 1219.01 L1222.35 1219.01 L1221.76 1219.01 L1221.18 1219.01 L1220.59 1219.01 L1220 1219.01 L1219.42 1219.01 L1218.83 1219.01 L1218.24 1219.01 L1217.66 1219.01 L1217.07 1219.01 L1216.49 1219.01 L1215.9 1219.01 L1215.31 1219.01 L1214.73 1219.01 L1214.14 1219.01 L1213.55 1219.01 L1212.97 1219.01 L1212.38 1219.01 L1211.79 1219.01 L1211.21 1219.01 L1210.62 1219.01 L1210.03 1219.01 L1209.45 1219.01 L1208.86 1219.01 L1208.28 1219.01 L1207.69 1219.01 L1207.1 1219.01 L1206.52 1219.01 L1205.93 1219.01 L1205.34 1219.01 L1204.76 1219.01 L1204.17 1219.01 L1203.58 1219.01 L1203 1219.01 L1202.41 1219.01 L1201.83 1219.01 L1201.24 1219.01 L1200.65 1219.01 L1200.07 1219.01 L1199.48 1219.01 L1198.89 1219.01 L1198.31 1219.01 L1197.72 1219.01 L1197.13 1219.01 L1196.55 1219.01 L1195.96 1219.01 L1195.37 1219.01 L1194.79 1219.01 L1194.2 1219.01 L1193.62 1219.01 L1193.03 1219.01 L1192.44 1219.01 L1191.86 1219.01 L1191.27 1219.01 L1190.68 1219.01 L1190.1 1219.01 L1189.51 1219.01 L1188.92 1219.01 L1188.34 1219.01 L1187.75 1219.01 L1187.16 1219.01 L1186.58 1219.01 L1185.99 1219.01 L1185.41 1219.01 L1184.82 1219.01 L1184.23 1219.01 L1183.65 1219.01 L1183.06 1219.01 L1182.47 1219.01 L1181.89 1219.01 L1181.3 1219.01 L1180.71 1219.01 L1180.13 1219.01 L1179.54 1219.01 L1178.96 1219.01 L1178.37 1219.01 L1177.78 1219.01 L1177.2 1219.01 L1176.61 1219.01 L1176.02 1219.01 L1175.44 1219.01 L1174.85 1219.01 L1174.26 1219.01 L1173.68 1219.01 L1173.09 1219.01 L1172.5 1219.01 L1171.92 1219.01 L1171.33 1219.01 L1170.75 1219.01 L1170.16 1219.01 L1169.57 1219.01 L1168.99 1219.01 L1168.4 1219.01 L1167.81 1219.01 L1167.23 1219.01 L1166.64 1219.01 L1166.05 1219.01 L1165.47 1219.01 L1164.88 1219.01 L1164.29 1219.01 L1163.71 1219.01 L1163.12 1219.01 L1162.54 1219.01 L1161.95 1219.01 L1161.36 1219.01 L1160.78 1219.01 L1160.19 1219.01 L1159.6 1219.01 L1159.02 1219.01 L1158.43 1219.01 L1157.84 1219.01 L1157.26 1219.01 L1156.67 1219.01 L1156.09 1219.01 L1155.5 1219.01 L1154.91 1219.01 L1154.33 1219.01 L1153.74 1219.01 L1153.15 1219.01 L1152.57 1219.01 L1151.98 1219.01 L1151.39 1219.01 L1150.81 1219.01 L1150.22 1219.01 L1149.63 1219.01 L1149.05 1219.01 L1148.46 1219.01 L1147.88 1219.01 L1147.29 1219.01 L1146.7 1219.01 L1146.12 1219.01 L1145.53 1219.01 L1144.94 1219.01 L1144.36 1219.01 L1143.77 1219.01 L1143.18 1219.01 L1142.6 1219.01 L1142.01 1219.01 L1141.42 1219.01 L1140.84 1219.01 L1140.25 1219.01 L1139.67 1219.01 L1139.08 1219.01 L1138.49 1219.01 L1137.91 1219.01 L1137.32 1219.01 L1136.73 1219.01 L1136.15 1219.01 L1135.56 1219.01 L1134.97 1219.01 L1134.39 1219.01 L1133.8 1219.01 L1133.21 1219.01 L1132.63 1219.01 L1132.04 1219.01 L1131.46 1219.01 L1130.87 1219.01 L1130.28 1219.01 L1129.7 1219.01 L1129.11 1219.01 L1128.52 1219.01 L1127.94 1219.01 L1127.35 1219.01 L1126.76 1219.01 L1126.18 1219.01 L1125.59 1219.01 L1125.01 1219.01 L1124.42 1219.01 L1123.83 1219.01 L1123.25 1219.01 L1122.66 1219.01 L1122.07 1219.01 L1121.49 1219.01 L1120.9 1219.01 L1120.31 1219.01 L1119.73 1219.01 L1119.14 1219.01 L1118.55 1219.01 L1117.97 1219.01 L1117.38 1219.01 L1116.8 1219.01 L1116.21 1219.01 L1115.62 1219.01 L1115.04 1219.01 L1114.45 1219.01 L1113.86 1219.01 L1113.28 1219.01 L1112.69 1219.01 L1112.1 1219.01 L1111.52 1219.01 L1110.93 1219.01 L1110.34 1219.01 L1109.76 1219.01 L1109.17 1219.01 L1108.59 1219.01 L1108 1219.01 L1107.41 1219.01 L1106.83 1219.01 L1106.24 1219.01 L1105.65 1219.01 L1105.07 1219.01 L1104.48 1219.01 L1103.89 1219.01 L1103.31 1219.01 L1102.72 1219.01 L1102.14 1219.01 L1101.55 1219.01 L1100.96 1219.01 L1100.38 1219.01 L1099.79 1219.01 L1099.2 1219.01 L1098.62 1219.01 L1098.03 1219.01 L1097.44 1219.01 L1096.86 1219.01 L1096.27 1219.01 L1095.68 1219.01 L1095.1 1219.01 L1094.51 1219.01 L1093.93 1219.01 L1093.34 1219.01 L1092.75 1219.01 L1092.17 1219.01 L1091.58 1219.01 L1090.99 1219.01 L1090.41 1219.01 L1089.82 1219.01 L1089.23 1219.01 L1088.65 1219.01 L1088.06 1219.01 L1087.47 1219.01 L1086.89 1219.01 L1086.3 1219.01 L1085.72 1219.01 L1085.13 1219.01 L1084.54 1219.01 L1083.96 1219.01 L1083.37 1219.01 L1082.78 1219.01 L1082.2 1219.01 L1081.61 1219.01 L1081.02 1219.01 L1080.44 1219.01 L1079.85 1219.01 L1079.26 1219.01 L1078.68 1219.01 L1078.09 1219.01 L1077.51 1219.01 L1076.92 1219.01 L1076.33 1219.01 L1075.75 1219.01 L1075.16 1219.01 L1074.57 1219.01 L1073.99 1219.01 L1073.4 1219.01 L1072.81 1219.01 L1072.23 1219.01 L1071.64 1219.01 L1071.06 1219.01 L1070.47 1219.01 L1069.88 1219.01 L1069.3 1219.01 L1068.71 1219.01 L1068.12 1219.01 L1067.54 1219.01 L1066.95 1219.01 L1066.36 1219.01 L1065.78 1219.01 L1065.19 1219.01 L1064.6 1219.01 L1064.02 1219.01 L1063.43 1219.01 L1062.85 1219.01 L1062.26 1219.01 L1061.67 1219.01 L1061.09 1219.01 L1060.5 1219.01 L1059.91 1219.01 L1059.33 1219.01 L1058.74 1219.01 L1058.15 1219.01 L1057.57 1219.01 L1056.98 1219.01 L1056.39 1219.01 L1055.81 1219.01 L1055.22 1219.01 L1054.64 1219.01 L1054.05 1219.01 L1053.46 1219.01 L1052.88 1219.01 L1052.29 1219.01 L1051.7 1219.01 L1051.12 1219.01 L1050.53 1219.01 L1049.94 1219.01 L1049.36 1219.01 L1048.77 1219.01 L1048.19 1219.01 L1047.6 1219.01 L1047.01 1219.01 L1046.43 1219.01 L1045.84 1219.01 L1045.25 1219.01 L1044.67 1219.01 L1044.08 1219.01 L1043.49 1219.01 L1042.91 1219.01 L1042.32 1219.01 L1041.73 1219.01 L1041.15 1219.01 L1040.56 1219.01 L1039.98 1219.01 L1039.39 1219.01 L1038.8 1219.01 L1038.22 1219.01 L1037.63 1219.01 L1037.04 1219.01 L1036.46 1219.01 L1035.87 1219.01 L1035.28 1219.01 L1034.7 1219.01 L1034.11 1219.01 L1033.52 1219.01 L1032.94 1219.01 L1032.35 1219.01 L1031.77 1219.01 L1031.18 1219.01 L1030.59 1219.01 L1030.01 1219.01 L1029.42 1219.01 L1028.83 1219.01 L1028.25 1219.01 L1027.66 1219.01 L1027.07 1219.01 L1026.49 1219.01 L1025.9 1219.01 L1025.32 1219.01 L1024.73 1219.01 L1024.14 1219.01 L1023.56 1219.01 L1022.97 1219.01 L1022.38 1219.01 L1021.8 1219.01 L1021.21 1219.01 L1020.62 1219.01 L1020.04 1219.01 L1019.45 1219.01 L1018.86 1219.01 L1018.28 1219.01 L1017.69 1219.01 L1017.11 1219.01 L1016.52 1219.01 L1015.93 1219.01 L1015.35 1219.01 L1014.76 1219.01 L1014.17 1219.01 L1013.59 1219.01 L1013 1219.01 L1012.41 1219.01 L1011.83 1219.01 L1011.24 1219.01 L1010.65 1219.01 L1010.07 1219.01 L1009.48 1219.01 L1008.9 1219.01 L1008.31 1219.01 L1007.72 1219.01 L1007.14 1219.01 L1006.55 1219.01 L1005.96 1219.01 L1005.38 1219.01 L1004.79 1219.01 L1004.2 1219.01 L1003.62 1219.01 L1003.03 1219.01 L1002.44 1219.01 L1001.86 1219.01 L1001.27 1219.01 L1000.69 1219.01 L1000.1 1219.01 L999.513 1219.01 L998.926 1219.01 L998.34 1219.01 L997.754 1219.01 L997.167 1219.01 L996.581 1219.01 L995.994 1219.01 L995.408 1219.01 L994.822 1219.01 L994.235 1219.01 L993.649 1219.01 L993.062 1219.01 L992.476 1219.01 L991.889 1219.01 L991.303 1219.01 L990.717 1219.01 L990.13 1219.01 L989.544 1219.01 L988.957 1219.01 L988.371 1219.01 L987.785 1219.01 L987.198 1219.01 L986.612 1219.01 L986.025 1219.01  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1219.08 986.612,1219.08 987.198,1219.08 987.785,1219.08 988.371,1219.08 988.957,1219.08 989.544,1219.08 990.13,1219.08 990.717,1219.08 991.303,1219.08 991.889,1219.08 992.476,1219.08 993.062,1219.08 993.649,1219.08 994.235,1219.08 994.822,1219.08 995.408,1219.08 995.994,1219.08 996.581,1219.08 997.167,1219.08 997.754,1219.08 998.34,1219.08 998.926,1219.08 999.513,1219.08 1000.1,1219.08 1000.69,1219.08 1001.27,1219.08 1001.86,1219.08 1002.44,1219.08 1003.03,1219.08 1003.62,1219.08 1004.2,1219.08 1004.79,1219.08 1005.38,1219.08 1005.96,1219.08 1006.55,1219.08 1007.14,1219.08 1007.72,1219.08 1008.31,1219.08 1008.9,1219.08 1009.48,1219.08 1010.07,1219.08 1010.65,1219.08 1011.24,1219.08 1011.83,1219.08 1012.41,1219.08 1013,1219.08 1013.59,1219.08 1014.17,1219.08 1014.76,1219.08 1015.35,1219.08 1015.93,1219.08 1016.52,1219.08 1017.11,1219.08 1017.69,1219.08 1018.28,1219.08 1018.86,1219.08 1019.45,1219.08 1020.04,1219.08 1020.62,1219.08 1021.21,1219.08 1021.8,1219.08 1022.38,1219.08 1022.97,1219.08 1023.56,1219.08 1024.14,1219.08 1024.73,1219.08 1025.32,1219.08 1025.9,1219.08 1026.49,1219.08 1027.07,1219.08 1027.66,1219.08 1028.25,1219.08 1028.83,1219.08 1029.42,1219.08 1030.01,1219.08 1030.59,1219.08 1031.18,1219.08 1031.77,1219.08 1032.35,1219.08 1032.94,1219.08 1033.52,1219.08 1034.11,1219.08 1034.7,1219.08 1035.28,1219.08 1035.87,1219.08 1036.46,1219.08 1037.04,1219.08 1037.63,1219.08 1038.22,1219.08 1038.8,1219.08 1039.39,1219.08 1039.98,1219.08 1040.56,1219.08 1041.15,1219.08 1041.73,1219.08 1042.32,1219.08 1042.91,1219.08 1043.49,1219.08 1044.08,1219.08 1044.67,1219.08 1045.25,1219.08 1045.84,1219.08 1046.43,1219.08 1047.01,1219.08 1047.6,1219.08 1048.19,1219.08 1048.77,1219.08 1049.36,1219.08 1049.94,1219.08 1050.53,1219.08 1051.12,1219.08 1051.7,1219.08 1052.29,1219.08 1052.88,1219.08 1053.46,1219.08 1054.05,1219.08 1054.64,1219.08 1055.22,1219.08 1055.81,1219.08 1056.39,1219.08 1056.98,1219.08 1057.57,1219.08 1058.15,1219.08 1058.74,1219.08 1059.33,1219.08 1059.91,1219.08 1060.5,1219.08 1061.09,1219.08 1061.67,1219.08 1062.26,1219.08 1062.85,1219.08 1063.43,1219.08 1064.02,1219.08 1064.6,1219.08 1065.19,1219.08 1065.78,1219.08 1066.36,1219.08 1066.95,1219.08 1067.54,1219.08 1068.12,1219.08 1068.71,1219.08 1069.3,1219.08 1069.88,1219.08 1070.47,1219.08 1071.06,1219.08 1071.64,1219.08 1072.23,1219.08 1072.81,1219.08 1073.4,1219.08 1073.99,1219.08 1074.57,1219.08 1075.16,1219.08 1075.75,1219.08 1076.33,1219.08 1076.92,1219.08 1077.51,1219.08 1078.09,1219.08 1078.68,1219.08 1079.26,1219.08 1079.85,1219.08 1080.44,1219.08 1081.02,1219.08 1081.61,1219.08 1082.2,1219.08 1082.78,1219.08 1083.37,1219.08 1083.96,1219.08 1084.54,1219.08 1085.13,1219.08 1085.72,1219.08 1086.3,1219.08 1086.89,1219.08 1087.47,1219.08 1088.06,1219.08 1088.65,1219.08 1089.23,1219.08 1089.82,1219.08 1090.41,1219.08 1090.99,1219.08 1091.58,1219.08 1092.17,1219.08 1092.75,1219.08 1093.34,1219.08 1093.93,1219.08 1094.51,1219.08 1095.1,1219.08 1095.68,1219.08 1096.27,1219.08 1096.86,1219.08 1097.44,1219.08 1098.03,1219.08 1098.62,1219.08 1099.2,1219.08 1099.79,1219.08 1100.38,1219.08 1100.96,1219.08 1101.55,1219.08 1102.14,1219.08 1102.72,1219.08 1103.31,1219.08 1103.89,1219.08 1104.48,1219.08 1105.07,1219.08 1105.65,1219.08 1106.24,1219.08 1106.83,1219.08 1107.41,1219.08 1108,1219.08 1108.59,1219.08 1109.17,1219.08 1109.76,1219.08 1110.34,1219.08 1110.93,1219.08 1111.52,1219.08 1112.1,1219.08 1112.69,1219.08 1113.28,1219.08 1113.86,1219.08 1114.45,1219.08 1115.04,1219.08 1115.62,1219.08 1116.21,1219.08 1116.8,1219.08 1117.38,1219.08 1117.97,1219.08 1118.55,1219.08 1119.14,1219.08 1119.73,1219.08 1120.31,1219.08 1120.9,1219.08 1121.49,1219.08 1122.07,1219.08 1122.66,1219.08 1123.25,1219.08 1123.83,1219.08 1124.42,1219.08 1125.01,1219.08 1125.59,1219.08 1126.18,1219.08 1126.76,1219.08 1127.35,1219.08 1127.94,1219.08 1128.52,1219.08 1129.11,1219.08 1129.7,1219.08 1130.28,1219.08 1130.87,1219.08 1131.46,1219.08 1132.04,1219.08 1132.63,1219.08 1133.21,1219.08 1133.8,1219.08 1134.39,1219.08 1134.97,1219.08 1135.56,1219.08 1136.15,1219.08 1136.73,1219.08 1137.32,1219.08 1137.91,1219.08 1138.49,1219.08 1139.08,1219.08 1139.67,1219.08 1140.25,1219.08 1140.84,1219.08 1141.42,1219.08 1142.01,1219.08 1142.6,1219.08 1143.18,1219.08 1143.77,1219.08 1144.36,1219.08 1144.94,1219.08 1145.53,1219.08 1146.12,1219.08 1146.7,1219.08 1147.29,1219.08 1147.88,1219.08 1148.46,1219.08 1149.05,1219.08 1149.63,1219.08 1150.22,1219.08 1150.81,1219.08 1151.39,1219.08 1151.98,1219.08 1152.57,1219.08 1153.15,1219.08 1153.74,1219.08 1154.33,1219.08 1154.91,1219.08 1155.5,1219.08 1156.09,1219.08 1156.67,1219.08 1157.26,1219.08 1157.84,1219.08 1158.43,1219.08 1159.02,1219.08 1159.6,1219.08 1160.19,1219.08 1160.78,1219.08 1161.36,1219.08 1161.95,1219.08 1162.54,1219.08 1163.12,1219.08 1163.71,1219.08 1164.29,1219.08 1164.88,1219.08 1165.47,1219.08 1166.05,1219.08 1166.64,1219.08 1167.23,1219.08 1167.81,1219.08 1168.4,1219.08 1168.99,1219.08 1169.57,1219.08 1170.16,1219.08 1170.75,1219.08 1171.33,1219.08 1171.92,1219.08 1172.5,1219.08 1173.09,1219.08 1173.68,1219.08 1174.26,1219.08 1174.85,1219.08 1175.44,1219.08 1176.02,1219.08 1176.61,1219.08 1177.2,1219.08 1177.78,1219.08 1178.37,1219.08 1178.96,1219.08 1179.54,1219.08 1180.13,1219.08 1180.71,1219.08 1181.3,1219.08 1181.89,1219.08 1182.47,1219.08 1183.06,1219.08 1183.65,1219.08 1184.23,1219.08 1184.82,1219.08 1185.41,1219.08 1185.99,1219.08 1186.58,1219.08 1187.16,1219.08 1187.75,1219.08 1188.34,1219.08 1188.92,1219.08 1189.51,1219.08 1190.1,1219.08 1190.68,1219.08 1191.27,1219.08 1191.86,1219.08 1192.44,1219.08 1193.03,1219.08 1193.62,1219.08 1194.2,1219.08 1194.79,1219.08 1195.37,1219.08 1195.96,1219.08 1196.55,1219.08 1197.13,1219.08 1197.72,1219.08 1198.31,1219.08 1198.89,1219.08 1199.48,1219.08 1200.07,1219.08 1200.65,1219.08 1201.24,1219.08 1201.83,1219.08 1202.41,1219.08 1203,1219.08 1203.58,1219.08 1204.17,1219.08 1204.76,1219.08 1205.34,1219.08 1205.93,1219.08 1206.52,1219.08 1207.1,1219.08 1207.69,1219.08 1208.28,1219.08 1208.86,1219.08 1209.45,1219.08 1210.03,1219.08 1210.62,1219.08 1211.21,1219.08 1211.79,1219.08 1212.38,1219.08 1212.97,1219.08 1213.55,1219.08 1214.14,1219.08 1214.73,1219.08 1215.31,1219.08 1215.9,1219.08 1216.49,1219.08 1217.07,1219.08 1217.66,1219.08 1218.24,1219.08 1218.83,1219.08 1219.42,1219.08 1220,1219.08 1220.59,1219.08 1221.18,1219.08 1221.76,1219.08 1222.35,1219.08 1222.94,1219.08 1223.52,1219.08 1224.11,1219.08 1224.7,1219.08 1225.28,1219.08 1225.87,1219.08 1226.45,1219.08 1227.04,1219.08 1227.63,1219.08 1228.21,1219.08 1228.8,1219.08 1229.39,1219.08 1229.97,1219.08 1230.56,1219.08 1231.15,1219.08 1231.73,1219.08 1232.32,1219.08 1232.91,1219.08 1233.49,1219.08 1234.08,1219.08 1234.66,1219.08 1235.25,1219.08 1235.84,1219.08 1236.42,1219.08 1237.01,1219.08 1237.6,1219.08 1238.18,1219.08 1238.77,1219.08 1239.36,1219.08 1239.94,1219.08 1240.53,1219.08 1241.11,1219.08 1241.7,1219.08 1242.29,1219.08 1242.87,1219.08 1243.46,1219.08 1244.05,1219.08 1244.63,1219.08 1245.22,1219.08 1245.81,1219.08 1246.39,1219.08 1246.98,1219.08 1247.57,1219.08 1248.15,1219.08 1248.74,1219.08 1249.32,1219.08 1249.91,1219.08 1250.5,1219.08 1251.08,1219.08 1251.67,1219.08 1252.26,1219.08 1252.84,1219.08 1253.43,1219.08 1254.02,1219.08 1254.6,1219.08 1255.19,1219.08 1255.78,1219.08 1256.36,1219.08 1256.95,1219.08 1257.53,1219.08 1258.12,1219.08 1258.71,1219.08 1259.29,1219.08 1259.88,1219.08 1260.47,1219.08 1261.05,1219.08 1261.64,1219.08 1262.23,1219.08 1262.81,1219.08 1263.4,1219.08 1263.98,1219.08 1264.57,1219.08 1265.16,1219.08 1265.74,1219.08 1266.33,1219.08 1266.92,1219.08 1267.5,1219.08 1268.09,1219.08 1268.68,1219.08 1269.26,1219.08 1269.85,1219.08 1270.44,1219.08 1271.02,1219.08 1271.61,1219.08 1272.19,1219.08 1272.78,1219.08 1273.37,1219.08 1273.95,1219.08 1274.54,1219.08 1275.13,1219.08 1275.71,1219.08 1276.3,1219.08 1276.89,1219.08 1277.47,1219.08 1278.06,1219.08 1278.65,1219.08 1279.23,1219.08 1279.82,1219.08 1280.4,1219.08 1280.99,1219.08 1281.58,1219.08 1282.16,1219.08 1282.75,1219.08 1283.34,1219.08 1283.92,1219.08 1284.51,1219.08 1285.1,1219.08 1285.68,1219.08 1286.27,1219.08 1286.86,1219.08 1287.44,1219.08 1288.03,1219.08 1288.61,1219.08 1289.2,1219.08 1289.79,1219.08 1290.37,1219.08 1290.96,1219.08 1291.55,1219.08 1292.13,1219.08 1292.72,1219.08 1293.31,1219.08 1293.89,1219.08 1294.48,1219.08 1295.06,1219.08 1295.65,1219.08 1296.24,1219.08 1296.82,1219.08 1297.41,1219.08 1298,1219.08 1298.58,1219.08 1299.17,1219.08 1299.76,1219.08 1300.34,1219.08 1300.93,1219.08 1301.52,1219.08 1302.1,1219.08 1302.69,1219.08 1303.27,1219.08 1303.86,1219.08 1304.45,1219.08 1305.03,1219.08 1305.62,1219.08 1306.21,1219.08 1306.79,1219.08 1307.38,1219.08 1307.97,1219.08 1308.55,1219.08 1309.14,1219.08 1309.73,1219.08 1310.31,1219.08 1310.9,1219.08 1311.48,1219.08 1312.07,1219.08 1312.66,1219.08 1313.24,1219.08 1313.83,1219.08 1314.42,1219.08 1315,1219.08 1315.59,1219.08 1316.18,1219.08 1316.76,1219.08 1317.35,1219.08 1317.93,1219.08 1318.52,1219.08 1319.11,1219.08 1319.69,1219.08 1320.28,1219.08 1320.87,1219.08 1321.45,1219.08 1322.04,1219.08 1322.63,1219.08 1323.21,1219.08 1323.8,1219.08 1324.39,1219.08 1324.97,1219.08 1325.56,1219.08 1326.14,1219.08 1326.73,1219.08 1327.32,1219.08 1327.9,1219.08 1328.49,1219.08 1329.08,1219.08 1329.66,1219.08 1330.25,1219.08 1330.84,1219.08 1331.42,1219.08 1332.01,1219.08 1332.6,1219.08 1333.18,1219.08 1333.77,1219.08 1334.35,1219.08 1334.94,1219.08 1335.53,1219.08 1336.11,1219.08 1336.7,1219.08 1337.29,1219.08 1337.87,1219.08 1338.46,1219.08 1339.05,1219.08 1339.63,1219.08 1340.22,1219.08 1340.8,1219.08 1341.39,1219.08 1341.98,1219.08 1342.56,1219.08 1343.15,1219.08 1343.74,1219.08 1344.32,1219.08 1344.91,1219.08 1345.5,1219.08 1346.08,1219.08 1346.67,1219.08 1347.26,1219.08 1347.84,1219.08 1348.43,1219.08 1349.01,1219.08 1349.6,1219.08 1350.19,1219.08 1350.77,1219.08 1351.36,1219.08 1351.95,1219.08 1352.53,1219.08 1353.12,1219.08 1353.71,1219.08 1354.29,1219.08 1354.88,1219.08 1355.47,1219.08 1356.05,1219.08 1356.64,1219.08 1357.22,1219.08 1357.81,1219.08 1358.4,1219.08 1358.98,1219.08 1359.57,1219.08 1360.16,1219.08 1360.74,1219.08 1361.33,1219.08 1361.92,1219.08 1362.5,1219.08 1363.09,1219.08 1363.68,1219.08 1364.26,1219.08 1364.85,1219.08 1365.43,1219.08 1366.02,1219.08 1366.61,1219.08 1367.19,1219.08 1367.78,1219.08 1368.37,1219.08 1368.95,1219.08 1369.54,1219.08 1370.13,1219.08 1370.71,1219.08 1371.3,1219.08 1371.88,1219.08 1372.47,1219.08 1373.06,1219.08 1373.64,1219.08 1374.23,1219.08 1374.82,1219.08 1375.4,1219.08 1375.99,1219.08 1376.58,1219.08 1377.16,1219.08 1377.75,1219.08 1378.34,1219.08 1378.92,1219.08 1379.51,1219.08 1380.09,1219.08 1380.68,1219.08 1381.27,1219.08 1381.85,1219.08 1382.44,1219.08 1383.03,1219.08 1383.61,1219.08 1384.2,1219.08 1384.79,1219.08 1385.37,1219.08 1385.96,1219.08 1386.55,1219.08 1387.13,1219.08 1387.72,1219.08 1388.3,1219.08 1388.89,1219.08 1389.48,1219.08 1390.06,1219.08 1390.65,1219.08 1391.24,1219.08 1391.82,1219.08 1392.41,1219.08 1393,1219.08 1393.58,1219.08 1394.17,1219.08 1394.75,1219.08 1395.34,1219.08 1395.93,1219.08 1396.51,1219.08 1397.1,1219.08 1397.69,1219.08 1398.27,1219.08 1398.86,1219.08 1399.45,1219.08 1400.03,1219.08 1400.62,1219.08 1401.21,1219.08 1401.79,1219.08 1402.38,1219.08 1402.96,1219.08 1403.55,1219.08 1404.14,1219.08 1404.72,1219.08 1405.31,1219.08 1405.9,1219.08 1406.48,1219.08 1407.07,1219.08 1407.66,1219.08 1408.24,1219.08 1408.83,1219.08 1409.42,1219.08 1410,1219.08 1410.59,1219.08 1411.17,1219.08 1411.76,1219.08 1412.35,1219.08 1412.93,1219.08 1413.52,1219.08 1414.11,1219.08 1414.69,1219.08 1415.28,1219.08 1415.87,1219.08 1416.45,1219.08 1417.04,1219.08 1417.63,1219.08 1418.21,1219.08 1418.8,1219.08 1419.38,1219.08 1419.97,1219.08 1420.56,1219.08 1421.14,1219.08 1421.73,1219.08 1422.32,1219.08 1422.9,1219.08 1423.49,1219.08 1424.08,1219.08 1424.66,1219.08 1425.25,1219.08 1425.83,1219.08 1426.42,1219.08 1427.01,1219.08 1427.59,1219.08 1428.18,1219.08 1428.77,1219.08 1429.35,1219.08 1429.94,1219.08 1430.53,1219.08 1431.11,1219.08 1431.7,1219.08 1432.29,1219.08 1432.87,1219.08 1433.46,1219.08 1434.04,1219.08 1434.63,1219.08 1435.22,1219.08 1435.8,1219.08 1436.39,1219.08 1436.98,1219.08 1437.56,1219.08 1438.15,1219.08 1438.74,1219.08 1439.32,1219.08 1439.91,1219.08 1440.5,1219.08 1441.08,1219.08 1441.67,1219.08 1442.25,1219.08 1442.84,1219.08 1443.43,1219.08 1444.01,1219.08 1444.6,1219.08 1445.19,1219.08 1445.77,1219.08 1446.36,1219.08 1446.95,1219.08 1447.53,1219.08 1448.12,1219.08 1448.7,1219.08 1449.29,1219.08 1449.88,1219.08 1450.46,1219.08 1451.05,1219.08 1451.64,1219.08 1452.22,1219.08 1452.81,1219.08 1453.4,1219.08 1453.98,1219.08 1454.57,1219.08 1455.16,1219.08 1455.74,1219.08 1456.33,1219.08 1456.91,1219.08 1457.5,1219.08 1458.09,1219.08 1458.67,1219.08 1459.26,1219.08 1459.85,1219.08 1460.43,1219.08 1461.02,1219.08 1461.61,1219.08 1462.19,1219.08 1462.78,1219.08 1463.37,1219.08 1463.95,1219.08 1464.54,1219.08 1465.12,1219.08 1465.71,1219.08 1466.3,1219.08 1466.88,1219.08 1467.47,1219.08 1468.06,1219.08 1468.64,1219.08 1469.23,1219.08 1469.82,1219.08 1470.4,1219.08 1470.99,1219.08 1471.57,1219.08 1472.16,1219.08 1472.75,1219.08 1473.33,1219.08 1473.92,1219.08 1474.51,1219.08 1475.09,1219.08 1475.68,1219.08 1476.27,1219.08 1476.85,1219.08 1477.44,1219.08 1478.03,1219.08 1478.61,1219.08 1479.2,1219.08 1479.78,1219.08 1480.37,1219.08 1480.96,1219.08 1481.54,1219.08 1482.13,1219.08 1482.72,1219.08 1483.3,1219.08 1483.89,1219.08 1484.48,1219.08 1485.06,1219.08 1485.65,1219.08 1486.24,1219.08 1486.82,1219.08 1487.41,1219.08 1487.99,1219.08 1488.58,1219.08 1489.17,1219.08 1489.75,1219.08 1490.34,1219.08 1490.93,1219.08 1491.51,1219.08 1492.1,1219.08 1492.69,1219.08 1493.27,1219.08 1493.86,1219.08 1494.45,1219.08 1495.03,1219.08 1495.62,1219.08 1496.2,1219.08 1496.79,1219.08 1497.38,1219.08 1497.96,1219.08 1498.55,1219.08 1499.14,1219.08 1499.72,1219.08 1500.31,1219.08 1500.9,1219.08 1501.48,1219.08 1502.07,1219.08 1502.65,1219.08 1503.24,1219.08 1503.83,1219.08 1504.41,1219.08 1505,1219.08 1505.59,1219.08 1506.17,1219.08 1506.76,1219.08 1507.35,1219.08 1507.93,1219.08 1508.52,1219.08 1509.11,1219.08 1509.69,1219.08 1510.28,1219.08 1510.86,1219.08 1511.45,1219.08 1512.04,1219.08 1512.62,1219.08 1513.21,1219.08 1513.8,1219.08 1514.38,1219.08 1514.97,1219.08 1515.56,1219.08 1516.14,1219.08 1516.73,1219.08 1517.32,1219.08 1517.9,1219.08 1518.49,1219.08 1519.07,1219.08 1519.66,1219.08 1520.25,1219.08 1520.83,1219.08 1521.42,1219.08 1522.01,1219.08 1522.59,1219.08 1523.18,1219.08 1523.77,1219.08 1524.35,1219.08 1524.94,1219.08 1525.52,1219.08 1526.11,1219.08 1526.7,1219.08 1527.28,1219.08 1527.87,1219.08 1528.46,1219.08 1529.04,1219.08 1529.63,1219.08 1530.22,1219.08 1530.8,1219.08 1531.39,1219.08 1531.98,1219.08 1532.56,1219.08 1533.15,1219.08 1533.73,1219.08 1534.32,1219.08 1534.91,1219.08 1535.49,1219.08 1536.08,1219.08 1536.67,1219.08 1537.25,1219.08 1537.84,1219.08 1538.43,1219.08 1539.01,1219.08 1539.6,1219.08 1540.19,1219.08 1540.77,1219.08 1541.36,1219.08 1541.94,1219.08 1542.53,1219.08 1543.12,1219.08 1543.7,1219.08 1544.29,1219.08 1544.88,1219.08 1545.46,1219.08 1546.05,1219.08 1546.64,1219.08 1547.22,1219.08 1547.81,1219.08 1548.4,1219.08 1548.98,1219.08 1549.57,1219.08 1550.15,1219.08 1550.74,1219.08 1551.33,1219.08 1551.91,1219.08 1552.5,1219.08 1553.09,1219.08 1553.67,1219.08 1554.26,1219.08 1554.85,1219.08 1555.43,1219.08 1556.02,1219.08 1556.6,1219.08 1557.19,1219.08 1557.78,1219.08 1558.36,1219.08 1558.95,1219.08 1559.54,1219.08 1560.12,1219.08 1560.71,1219.08 1561.3,1219.08 1561.88,1219.08 1562.47,1219.08 1563.06,1219.08 1563.64,1219.08 1564.23,1219.08 1564.81,1219.08 1565.4,1219.08 1565.99,1219.08 1566.57,1219.08 1567.16,1219.08 1567.75,1219.08 1568.33,1219.08 1568.92,1219.08 1569.51,1219.08 1570.09,1219.08 1570.68,1219.08 1571.27,1219.08 1571.85,1219.08 1572.44,1219.08 1573.02,1219.08 1573.61,1219.08 1574.2,1219.08 1574.78,1219.08 1575.37,1219.08 1575.96,1219.08 1576.54,1219.08 1577.13,1219.08 1577.72,1219.08 1578.3,1219.08 1578.89,1219.08 1579.47,1219.08 1580.06,1219.08 1580.65,1219.08 1581.23,1219.08 1581.82,1219.08 1582.41,1219.08 1582.99,1219.08 1583.58,1219.08 1584.17,1219.08 1584.75,1219.08 1585.34,1219.08 1585.93,1219.08 1586.51,1219.08 1587.1,1219.08 1587.68,1219.08 1588.27,1219.08 1588.86,1219.08 1589.44,1219.08 1590.03,1219.08 1590.62,1219.08 1591.2,1219.08 1591.79,1219.08 1592.38,1219.08 1592.96,1219.08 1593.55,1219.08 1594.14,1219.08 1594.72,1219.08 1595.31,1219.08 1595.89,1219.08 1596.48,1219.08 1597.07,1219.08 1597.65,1219.08 1598.24,1219.08 1598.83,1219.08 1599.41,1219.08 1600,1219.08 1600.59,1219.08 1601.17,1219.08 1601.76,1219.08 1602.34,1219.08 1602.93,1219.08 1603.52,1219.08 1604.1,1219.08 1604.69,1219.08 1605.28,1219.08 1605.86,1219.08 1606.45,1219.08 1607.04,1219.08 1607.62,1219.08 1608.21,1219.08 1608.8,1219.08 1609.38,1219.08 1609.97,1219.08 1610.55,1219.08 1611.14,1219.08 1611.73,1219.08 1612.31,1219.08 1612.9,1219.08 1613.49,1219.08 1614.07,1219.08 1614.66,1219.08 1615.25,1219.08 1615.83,1219.08 1616.42,1219.08 1617.01,1219.08 1617.59,1219.08 1618.18,1219.08 1618.76,1219.08 1619.35,1219.08 1619.94,1219.08 1620.52,1219.08 1621.11,1219.08 1621.7,1219.08 1622.28,1219.08 1622.87,1219.08 1623.46,1219.08 1624.04,1219.08 1624.63,1219.08 1625.22,1219.08 1625.8,1219.08 1626.39,1219.08 1626.97,1219.08 1627.56,1219.08 1628.15,1219.08 1628.73,1219.08 1629.32,1219.08 1629.91,1219.08 1630.49,1219.08 1631.08,1219.08 1631.67,1219.08 1632.25,1219.08 1632.84,1219.08 1633.42,1219.08 1634.01,1219.08 1634.6,1219.08 1635.18,1219.08 1635.77,1219.08 1636.36,1219.08 1636.94,1219.08 1637.53,1219.08 1638.12,1219.08 1638.7,1219.08 1639.29,1219.08 1639.88,1219.08 1640.46,1219.08 1641.05,1219.08 1641.63,1219.08 1642.22,1219.08 1642.81,1219.08 1643.39,1219.08 1643.98,1219.08 1644.57,1219.08 1645.15,1219.08 1645.74,1219.08 1646.33,1219.08 1646.91,1219.08 1647.5,1219.08 1648.09,1219.08 1648.67,1219.08 1649.26,1219.08 1649.84,1219.08 1650.43,1219.08 1651.02,1219.08 1651.6,1219.08 1652.19,1219.08 1652.78,1219.08 1653.36,1219.08 1653.95,1219.08 1654.54,1219.08 1655.12,1219.08 1655.71,1219.08 1656.29,1219.08 1656.88,1219.08 1657.47,1219.08 1658.05,1219.08 1658.64,1219.08 1659.23,1219.08 1659.81,1219.08 1660.4,1219.08 1660.99,1219.08 1661.57,1219.08 1662.16,1219.08 1662.75,1219.08 1663.33,1219.08 1663.92,1219.08 1664.5,1219.08 1665.09,1219.08 1665.68,1219.08 1666.26,1219.08 1666.85,1219.08 1667.44,1219.08 1668.02,1219.08 1668.61,1219.08 1669.2,1219.08 1669.78,1219.08 1670.37,1219.08 1670.96,1219.08 1671.54,1219.08 1672.13,1219.08 1672.71,1219.08 1673.3,1219.08 1673.89,1219.08 1674.47,1219.08 1675.06,1219.08 1675.65,1219.08 1676.23,1219.08 1676.82,1219.08 1677.41,1219.08 1677.99,1219.08 1678.58,1219.08 1679.17,1219.08 1679.75,1219.08 1680.34,1219.08 1680.92,1219.08 1681.51,1219.08 1682.1,1219.08 1682.68,1219.08 1683.27,1219.08 1683.86,1219.08 1684.44,1219.08 1685.03,1219.08 1685.62,1219.08 1686.2,1219.08 1686.79,1219.08 1687.37,1219.08 1687.96,1219.08 1688.55,1219.08 1689.13,1219.08 1689.72,1219.08 1690.31,1219.08 1690.89,1219.08 1691.48,1219.08 1692.07,1219.08 1692.65,1219.08 1693.24,1219.08 1693.83,1219.08 1694.41,1219.08 1695,1219.08 1695.58,1219.08 1696.17,1219.08 1696.76,1219.08 1697.34,1219.08 1697.93,1219.08 1698.52,1219.08 1699.1,1219.08 1699.69,1219.08 1700.28,1219.08 1700.86,1219.08 1701.45,1219.08 1702.04,1219.08 1702.62,1219.08 1703.21,1219.08 1703.79,1219.08 1704.38,1219.08 1704.97,1219.08 1705.55,1219.08 1706.14,1219.08 1706.73,1219.08 1707.31,1219.08 1707.9,1219.08 1708.49,1219.08 1709.07,1219.08 1709.66,1219.08 1710.24,1219.08 1710.83,1219.08 1711.42,1219.08 1712,1219.08 1712.59,1219.08 1713.18,1219.08 1713.76,1219.08 1714.35,1219.08 1714.94,1219.08 1715.52,1219.08 1716.11,1219.08 1716.7,1219.08 1717.28,1219.08 1717.87,1219.08 1718.45,1219.08 1719.04,1219.08 1719.63,1219.08 1720.21,1219.08 1720.8,1219.08 1721.39,1219.08 1721.97,1219.08 1722.56,1219.08 1723.15,1219.08 1723.73,1219.08 1724.32,1219.08 1724.91,1219.08 1725.49,1219.08 1726.08,1219.08 1726.66,1219.08 1727.25,1219.08 1727.84,1219.08 1728.42,1219.08 1729.01,1219.08 1729.6,1219.08 1730.18,1219.08 1730.77,1219.08 1731.36,1219.08 1731.94,1219.08 1732.53,1219.08 1733.11,1219.08 1733.7,1219.08 1734.29,1219.08 1734.87,1219.08 1735.46,1219.08 1736.05,1219.08 1736.63,1219.08 1737.22,1219.08 1737.81,1219.08 1738.39,1219.08 1738.98,1219.08 1739.57,1219.08 1740.15,1219.08 1740.74,1219.08 1741.32,1219.08 1741.91,1219.08 1742.5,1219.08 1743.08,1219.08 1743.67,1219.08 1744.26,1219.08 1744.84,1219.08 1745.43,1219.08 1746.02,1219.08 1746.6,1219.08 1747.19,1219.08 1747.78,1219.08 1748.36,1219.08 1748.95,1219.08 1749.53,1219.08 1750.12,1219.08 1750.71,1219.08 1751.29,1219.08 1751.88,1219.08 1752.47,1219.08 1753.05,1219.08 1753.64,1219.08 1754.23,1219.08 1754.81,1219.08 1755.4,1219.08 1755.99,1219.08 1756.57,1219.08 1757.16,1219.08 1757.74,1219.08 1758.33,1219.08 1758.92,1219.08 1759.5,1219.08 1760.09,1219.08 1760.68,1219.08 1761.26,1219.08 1761.85,1219.08 1762.44,1219.08 1763.02,1219.08 1763.61,1219.08 1764.19,1219.08 1764.78,1219.08 1765.37,1219.08 1765.95,1219.08 1766.54,1219.08 1767.13,1219.08 1767.71,1219.08 1768.3,1219.08 1768.89,1219.08 1769.47,1219.08 1770.06,1219.08 1770.65,1219.08 1771.23,1219.08 1771.82,1219.08 1772.4,1219.08 1772.99,1219.08 1773.58,1219.08 1774.16,1219.08 1774.75,1219.08 1775.34,1219.08 1775.92,1219.08 1776.51,1219.08 1777.1,1219.08 1777.68,1219.08 1778.27,1219.08 1778.86,1219.08 1779.44,1219.08 1780.03,1219.08 1780.61,1219.08 1781.2,1219.08 1781.79,1219.08 1782.37,1219.08 1782.96,1219.08 1783.55,1219.08 1784.13,1219.08 1784.72,1219.08 1785.31,1219.08 1785.89,1219.08 1786.48,1219.08 1787.06,1219.08 1787.65,1219.08 1788.24,1219.08 1788.82,1219.08 1789.41,1219.08 1790,1219.08 1790.58,1219.08 1791.17,1219.08 1791.76,1219.08 1792.34,1219.08 1792.93,1219.08 1793.52,1219.08 1794.1,1219.08 1794.69,1219.08 1795.27,1219.08 1795.86,1219.08 1796.45,1219.08 1797.03,1219.08 1797.62,1219.08 1798.21,1219.08 1798.79,1219.08 1799.38,1219.08 1799.97,1219.08 1800.55,1219.08 1801.14,1219.08 1801.73,1219.08 1802.31,1219.08 1802.9,1219.08 1803.48,1219.08 1804.07,1219.08 1804.66,1219.08 1805.24,1219.08 1805.83,1219.08 1806.42,1219.08 1807,1219.08 1807.59,1219.08 1808.18,1219.08 1808.76,1219.08 1809.35,1219.08 1809.94,1219.08 1810.52,1219.08 1811.11,1219.08 1811.69,1219.08 1812.28,1219.08 1812.87,1219.08 1813.45,1219.08 1814.04,1219.08 1814.63,1219.08 1815.21,1219.08 1815.8,1219.08 1816.39,1219.08 1816.97,1219.08 1817.56,1219.08 1818.14,1219.08 1818.73,1219.08 1819.32,1219.08 1819.9,1219.08 1820.49,1219.08 1821.08,1219.08 1821.66,1219.08 1822.25,1219.08 1822.84,1219.08 1823.42,1219.08 1824.01,1219.08 1824.6,1219.08 1825.18,1219.08 1825.77,1219.08 1826.35,1219.08 1826.94,1219.08 1827.53,1219.08 1828.11,1219.08 1828.7,1219.08 1829.29,1219.08 1829.87,1219.08 1830.46,1219.08 1831.05,1219.08 1831.63,1219.08 1832.22,1219.08 1832.81,1219.08 1833.39,1219.08 1833.98,1219.08 1834.56,1219.08 1835.15,1219.08 1835.74,1219.08 1836.32,1219.08 1836.91,1219.08 1837.5,1219.08 1838.08,1219.08 1838.67,1219.08 1839.26,1219.08 1839.84,1219.08 1840.43,1219.08 1841.01,1219.08 1841.6,1219.08 1842.19,1219.08 1842.77,1219.08 1843.36,1219.08 1843.95,1219.08 1844.53,1219.08 1845.12,1219.08 1845.71,1219.08 1846.29,1219.08 1846.88,1219.08 1847.47,1219.08 1848.05,1219.08 1848.64,1219.08 1849.22,1219.08 1849.81,1219.08 1850.4,1219.08 1850.98,1219.08 1851.57,1219.08 1852.16,1219.08 1852.74,1219.08 1853.33,1219.08 1853.92,1219.08 1854.5,1219.08 1855.09,1219.08 1855.68,1219.08 1856.26,1219.08 1856.85,1219.08 1857.43,1219.08 1858.02,1219.08 1858.61,1219.08 1859.19,1219.08 1859.78,1219.08 1860.37,1219.08 1860.95,1219.08 1861.54,1219.08 1862.13,1219.08 1862.71,1219.08 1863.3,1219.08 1863.88,1219.08 1864.47,1219.08 1865.06,1219.08 1865.64,1219.08 1866.23,1219.08 1866.82,1219.08 1867.4,1219.08 1867.99,1219.08 1868.58,1219.08 1869.16,1219.08 1869.75,1219.08 1870.34,1219.08 1870.92,1219.08 1871.51,1219.08 1872.09,1219.08 1872.68,1219.08 1873.27,1219.08 1873.85,1219.08 1874.44,1219.08 1875.03,1219.08 1875.61,1219.08 1876.2,1219.08 1876.79,1219.08 1877.37,1219.08 1877.96,1219.08 1878.55,1219.08 1879.13,1219.08 1879.72,1219.08 1880.3,1219.08 1880.89,1219.08 1881.48,1219.08 1882.06,1219.08 1882.65,1219.08 1883.24,1219.08 1883.82,1219.08 1884.41,1219.08 1885,1219.08 1885.58,1219.08 1886.17,1219.08 1886.76,1219.08 1887.34,1219.08 1887.93,1219.08 1888.51,1219.08 1889.1,1219.08 1889.69,1219.08 1890.27,1219.08 1890.86,1219.08 1891.45,1219.08 1892.03,1219.08 1892.62,1219.08 1893.21,1219.08 1893.79,1219.08 1894.38,1219.08 1894.96,1219.08 1895.55,1219.08 1896.14,1219.08 1896.72,1219.08 1897.31,1219.08 1897.9,1219.08 1898.48,1219.08 1899.07,1219.08 1899.66,1219.08 1900.24,1219.08 1900.83,1219.08 1901.42,1219.08 1902,1219.08 1902.59,1219.08 1903.17,1219.08 1903.76,1219.08 1904.35,1219.08 1904.93,1219.08 1905.52,1219.08 1906.11,1219.08 1906.69,1219.08 1907.28,1219.08 1907.87,1219.08 1908.45,1219.08 1909.04,1219.08 1909.63,1219.08 1910.21,1219.08 1910.8,1219.08 1911.38,1219.08 1911.97,1219.08 1912.56,1219.08 1913.14,1219.08 1913.73,1219.08 1914.32,1219.08 1914.9,1219.08 1915.49,1219.08 1916.08,1219.08 1916.66,1219.08 1917.25,1219.08 1917.83,1219.08 1918.42,1219.08 1919.01,1219.08 1919.59,1219.08 1920.18,1219.08 1920.77,1219.08 1921.35,1219.08 1921.94,1219.08 1922.53,1219.08 1923.11,1219.08 1923.7,1219.08 1924.29,1219.08 1924.87,1219.08 1925.46,1219.08 1926.04,1219.08 1926.63,1219.08 1927.22,1219.08 1927.8,1219.08 1928.39,1219.08 1928.98,1219.08 1929.56,1219.08 1930.15,1219.08 1930.74,1219.08 1931.32,1219.08 1931.91,1219.08 1932.5,1219.08 1933.08,1219.08 1933.67,1219.08 1934.25,1219.08 1934.84,1219.08 1935.43,1219.08 1936.01,1219.08 1936.6,1219.08 1937.19,1219.08 1937.77,1219.08 1938.36,1219.08 1938.95,1219.08 1939.53,1219.08 1940.12,1219.08 1940.71,1219.08 1941.29,1219.08 1941.88,1219.08 1942.46,1219.08 1943.05,1219.08 1943.64,1219.08 1944.22,1219.08 1944.81,1219.08 1945.4,1219.08 1945.98,1219.08 1946.57,1219.08 1947.16,1219.08 1947.74,1219.08 1948.33,1219.08 1948.91,1219.08 1949.5,1219.08 1950.09,1219.08 1950.67,1219.08 1951.26,1219.08 1951.85,1219.08 1952.43,1219.08 1953.02,1219.08 1953.61,1219.08 1954.19,1219.08 1954.78,1219.08 1955.37,1219.08 1955.95,1219.08 1956.54,1219.08 1957.12,1219.08 1957.71,1219.08 1958.3,1219.08 1958.88,1219.08 1959.47,1219.08 1960.06,1219.08 1960.64,1219.08 1961.23,1219.08 1961.82,1219.08 1962.4,1219.08 1962.99,1219.08 1963.58,1219.08 1964.16,1219.08 1964.75,1219.08 1965.33,1219.08 1965.92,1219.08 1966.51,1219.08 1967.09,1219.08 1967.68,1219.08 1968.27,1219.08 1968.85,1219.08 1969.44,1219.08 1970.03,1219.08 1970.61,1219.08 1971.2,1219.08 1971.78,1219.08 1972.37,1219.08 1972.96,1219.08 1973.54,1219.08 1974.13,1219.08 1974.72,1219.08 1975.3,1219.08 1975.89,1219.08 1976.48,1219.08 1977.06,1219.08 1977.65,1219.08 1978.24,1219.08 1978.82,1219.08 1979.41,1219.08 1979.99,1219.08 1980.58,1219.08 1981.17,1219.08 1981.75,1219.08 1982.34,1219.08 1982.93,1219.08 1983.51,1219.08 1984.1,1219.08 1984.69,1219.08 1985.27,1219.08 1985.86,1219.08 1986.45,1219.08 1987.03,1219.08 1987.62,1219.08 1988.2,1219.08 1988.79,1219.08 1989.38,1219.08 1989.96,1219.08 1990.55,1219.08 1991.14,1219.08 1991.72,1219.08 1992.31,1219.08 1992.9,1219.08 1993.48,1219.08 1994.07,1219.08 1994.65,1219.08 1995.24,1219.08 1995.83,1219.08 1996.41,1219.08 1997,1219.08 1997.59,1219.08 1998.17,1219.08 1998.76,1219.08 1999.35,1219.08 1999.93,1219.08 2000.52,1219.08 2001.11,1219.08 2001.69,1219.08 2002.28,1219.08 2002.86,1219.08 2003.45,1219.08 2004.04,1219.08 2004.62,1219.08 2005.21,1219.08 2005.8,1219.08 2006.38,1219.08 2006.97,1219.08 2007.56,1219.08 2008.14,1219.08 2008.73,1219.08 2009.32,1219.08 2009.9,1219.08 2010.49,1219.08 2011.07,1219.08 2011.66,1219.08 2012.25,1219.08 2012.83,1219.08 2013.42,1219.08 2014.01,1219.08 2014.59,1219.08 2015.18,1219.08 2015.77,1219.08 2016.35,1219.08 2016.94,1219.08 2017.53,1219.08 2018.11,1219.08 2018.7,1219.08 2019.28,1219.08 2019.87,1219.08 2020.46,1219.08 2021.04,1219.08 2021.63,1219.08 2022.22,1219.08 2022.8,1219.08 2023.39,1219.08 2023.98,1219.08 2024.56,1219.08 2025.15,1219.08 2025.73,1219.08 2026.32,1219.08 2026.91,1219.08 2027.49,1219.08 2028.08,1219.08 2028.67,1219.08 2029.25,1219.08 2029.84,1219.08 2030.43,1219.08 2031.01,1219.08 2031.6,1219.08 2032.19,1219.08 2032.77,1219.08 2033.36,1219.08 2033.94,1219.08 2034.53,1219.08 2035.12,1219.08 2035.7,1219.08 2036.29,1219.08 2036.88,1219.08 2037.46,1219.08 2038.05,1219.08 2038.64,1219.08 2039.22,1219.08 2039.81,1219.08 2040.4,1219.08 2040.98,1219.08 2041.57,1219.08 2042.15,1219.08 2042.74,1219.08 2043.33,1219.08 2043.91,1219.08 2044.5,1219.08 2045.09,1219.08 2045.67,1219.08 2046.26,1219.08 2046.85,1219.08 2047.43,1219.08 2048.02,1219.08 2048.6,1219.08 2049.19,1219.08 2049.78,1219.08 2050.36,1219.08 2050.95,1219.08 2051.54,1219.08 2052.12,1219.08 2052.71,1219.08 2053.3,1219.08 2053.88,1219.08 2054.47,1219.08 2055.06,1219.08 2055.64,1219.08 2056.23,1219.08 2056.81,1219.08 2057.4,1219.08 2057.99,1219.08 2058.57,1219.08 2059.16,1219.08 2059.75,1219.08 2060.33,1219.08 2060.92,1219.08 2061.51,1219.08 2062.09,1219.08 2062.68,1219.08 2063.27,1219.08 2063.85,1219.08 2064.44,1219.08 2065.02,1219.08 2065.61,1219.08 2066.2,1219.08 2066.78,1219.08 2067.37,1219.08 2067.96,1219.08 2068.54,1219.08 2069.13,1219.08 2069.72,1219.08 2070.3,1219.08 2070.89,1219.08 2071.48,1219.08 2072.06,1219.08 2072.65,1219.08 2073.23,1219.08 2073.82,1219.08 2074.41,1219.08 2074.99,1219.08 2075.58,1219.08 2076.17,1219.08 2076.75,1219.08 2077.34,1219.08 2077.93,1219.08 2078.51,1219.08 2079.1,1219.08 2079.68,1219.08 2080.27,1219.08 2080.86,1219.08 2081.44,1219.08 2082.03,1219.08 2082.62,1219.08 2083.2,1219.08 2083.79,1219.08 2084.38,1219.08 2084.96,1219.08 2085.55,1219.08 2086.14,1219.08 2086.72,1219.08 2087.31,1219.08 2087.89,1219.08 2088.48,1219.08 2089.07,1219.08 2089.65,1219.08 2090.24,1219.08 2090.83,1219.08 2091.41,1219.08 2092,1219.08 2092.59,1219.08 2093.17,1219.08 2093.76,1219.08 2094.35,1219.08 2094.93,1219.08 2095.52,1219.08 2096.1,1219.08 2096.69,1219.08 2097.28,1219.08 2097.86,1219.08 2098.45,1219.08 2099.04,1219.08 2099.62,1219.08 2100.21,1219.08 2100.8,1219.08 2101.38,1219.08 2101.97,1219.08 2102.55,1219.08 2103.14,1219.08 2103.73,1219.08 2104.31,1219.08 2104.9,1219.08 2105.49,1219.08 2106.07,1219.08 2106.66,1219.08 2107.25,1219.08 2107.83,1219.08 2108.42,1219.08 2109.01,1219.08 2109.59,1219.08 2110.18,1219.08 2110.76,1219.08 2111.35,1219.08 2111.94,1219.08 2112.52,1219.08 2113.11,1219.08 2113.7,1219.08 2114.28,1219.08 2114.87,1219.08 2115.46,1219.08 2116.04,1219.08 2116.63,1219.08 2117.22,1219.08 2117.8,1219.08 2118.39,1219.08 2118.97,1219.08 2119.56,1219.08 2120.15,1219.08 2120.73,1219.08 2121.32,1219.08 2121.91,1219.08 2122.49,1219.08 2123.08,1219.08 2123.67,1219.08 2124.25,1219.08 2124.84,1219.08 2125.42,1219.08 2126.01,1219.08 2126.6,1219.08 2127.18,1219.08 2127.77,1219.08 2128.36,1219.08 2128.94,1219.08 2129.53,1219.08 2130.12,1219.08 2130.7,1219.08 2131.29,1219.08 2131.88,1219.08 2132.46,1219.08 2133.05,1219.08 2133.63,1219.08 2134.22,1219.08 2134.81,1219.08 2135.39,1219.08 2135.98,1219.08 2136.57,1219.08 2137.15,1219.08 2137.74,1219.08 2138.33,1219.08 2138.91,1219.08 2139.5,1219.08 2140.09,1219.08 2140.67,1219.08 2141.26,1219.08 2141.84,1219.08 2142.43,1219.08 2143.02,1219.08 2143.6,1219.08 2144.19,1219.08 2144.78,1219.08 2145.36,1219.08 2145.95,1219.08 2146.54,1219.08 2147.12,1219.08 2147.71,1219.08 2148.3,1219.08 2148.88,1219.08 2149.47,1219.08 2150.05,1219.08 2150.64,1219.08 2151.23,1219.08 2151.81,1219.08 2152.4,1219.08 2152.99,1219.08 2153.57,1219.08 2154.16,1219.08 2154.75,1219.08 2155.33,1219.08 2155.92,1219.08 2156.5,1219.08 2157.09,1219.08 2157.68,1219.08 2158.26,1219.08 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.28,1201.25 1397.84,899.083 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1236.43 985.439,1201.25 2158.26,1201.25 2158.26,1236.43 985.439,1236.43 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip933\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip933)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-64.0498 162.673,-240.393 163.232,-422.283 163.792,-1668.3 164.351,-2834.94 164.91,-3883.49 165.469,-4898.99 166.029,-5824.81 166.588,-6651.79 167.147,-7424.86 167.706,-8079.05 168.266,-8701.53 168.825,-9237.71 169.384,-9718.21 169.943,-10131.8 170.503,-10512.3 171.062,-10189.2 171.621,-10511.2 172.18,-10792.1 172.74,-11034.6 173.299,-11241.2 173.858,-11406.9 174.417,-11541.6 174.977,-11655.3 175.536,-11727.1 176.095,-11034.6 176.655,-11101.4 177.214,-11137.7 177.773,-11139.3 178.332,-11145.5 178.892,-10854.8 179.451,-10318.8 180.01,-10276.8 180.569,-10012.3 181.129,-9743.77 181.688,-9481.62 182.247,-9236.41 182.806,-9170.55 183.366,-8929.32 183.925,-8860.89 184.484,-8635.28 185.043,-8417.52 185.603,-8201.25 186.162,-7998.67 186.721,-7696.25 187.28,-7510.49 187.84,-7427.6 188.399,-7236.34 188.958,-7152.09 189.517,-6686.13 190.077,-6544.42 190.636,-6469.49 191.195,-6388.56 191.754,-6148.32 192.314,-5991.56 192.873,-5903.34 193.432,-5746.85 193.991,-5588.04 194.551,-5441.99 195.11,-5236 195.669,-5030.2 196.228,-4890.6 196.788,-4801.47 197.347,-4502.1 197.906,-4318.72 198.465,-4246.62 199.025,-4117.69 199.584,-4041.36 200.143,-3782.73 200.702,-3582.9 201.262,-3470.2 201.821,-3323.79 202.38,-3214.69 202.939,-3034.35 203.499,-2933.45 204.058,-2874.52 204.617,-2771.63 205.176,-2640.82 205.736,-2510.07 206.295,-2349.86 206.854,-2161.04 207.413,-2082.6 207.973,-2000.98 208.532,-1861.32 209.091,-1818.26 209.65,-1747.59 210.21,-1708.97 210.769,-1636.26 211.328,-1564.21 211.887,-1436.99 212.447,-1399.74 213.006,-1359.93 213.565,-1287.98 214.124,-1166.78 214.684,-1103.44 215.243,-1043.17 215.802,-1009.72 216.361,-944.511 216.921,-884.342 217.48,-798.862 218.039,-764.941 218.598,-638.589 219.158,-545.034 219.717,-472.486 220.276,-381.213 220.835,-365.532 221.395,-349.141 221.954,-262.304 222.513,-246.967 223.072,-208.2 223.632,-168.944 224.191,-127.559 224.75,-111.554 225.309,-97.4428 225.869,-23.4779 226.428,-33.4115 226.987,-19.5883 227.546,-4.98966 228.106,-12.9275 228.665,44.1979 229.224,82.2183 229.783,142.31 230.343,175.648 230.902,185.3 231.461,219.424 232.02,292.085 232.58,335.74 233.139,382.995 233.698,387.995 234.257,413.318 234.817,419.288 235.376,424.245 235.935,465.483 236.494,471.48 237.054,514.037 237.613,502.23 238.172,526.764 238.731,604.703 239.291,639.631 239.85,656.111 240.409,673.258 240.968,672.276 241.528,654.94 242.087,672.222 242.646,744.871 243.205,813.243 243.765,806.037 244.324,781.625 244.883,778.965 245.442,812.374 246.002,827.083 246.561,823.752 247.12,851.513 247.679,879.929 248.239,853.35 248.798,849.547 249.357,880.429 249.916,870.668 250.476,902.631 251.035,912.622 251.594,908.019 252.153,902.227 252.713,896.782 253.272,924.944 253.831,883.35 254.39,861.905 254.95,891.378 255.509,904.387 256.068,950.308 256.627,943.468 257.187,955.066 257.746,964.044 258.305,972.203 258.864,982.268 259.424,975.149 259.983,967.338 260.542,993.954 261.101,1017.5 261.661,1024.81 262.22,1029.43 262.779,1038.24 263.338,1013.51 263.898,1005.27 264.457,975.986 265.016,969.196 265.575,978.526 266.135,957.249 266.694,916.701 267.253,877.32 267.812,878.205 268.372,897.806 268.931,913.634 269.49,961.056 270.049,957.874 270.609,938.576 271.168,913.918 271.727,959.111 272.286,921.387 272.846,919.915 273.405,950.424 273.964,980.467 274.523,958.759 275.083,917.255 275.642,930.842 276.201,945.548 276.76,944.835 277.32,975.186 277.879,905.673 278.438,890.348 278.997,940.872 279.557,934.885 280.116,933.51 280.675,952.79 281.234,950.858 281.794,999.291 282.353,994.905 282.912,1022.45 283.471,1019.89 284.031,1030.36 284.59,1009.4 285.149,1005.58 285.708,1037.79 286.268,1030.12 286.827,1039.78 287.386,1068.8 287.945,1045.85 288.505,1038.17 289.064,1031.21 289.623,990.949 290.182,986.174 290.742,1016 291.301,1046.57 291.86,1038.55 292.419,1050.64 292.979,1045.47 293.538,1023.76 294.097,1019.51 294.656,1027.51 295.216,1033.12 295.775,1074.14 296.334,1050.69 296.893,1055.14 297.453,1050.07 298.012,1043.55 298.571,1020.7 299.13,1031.79 299.69,1025.75 300.249,1016.02 300.808,994.135 301.368,987.291 301.927,945.799 302.486,908.422 303.045,924.257 303.605,909.175 304.164,939.615 304.723,969.608 305.282,979.988 305.842,990.082 306.401,965.558 306.96,995.455 307.519,940.995 308.079,937.469 308.638,983.342 309.197,979.555 309.756,971.62 310.316,983.405 310.875,994.83 311.434,970.594 311.993,1012.76 312.553,1053.97 313.112,1015.05 313.671,1009.7 314.23,1021.64 314.79,982.683 315.349,992.022 315.908,1017.12 316.467,1014.08 317.027,971.112 317.586,967.521 318.145,944.688 318.704,954.225 319.264,900.407 319.823,896.236 320.382,909.626 320.941,923.63 321.501,952.762 322.06,964.465 322.619,973.385 323.178,948.617 323.738,972.894 324.297,966.624 324.856,977.571 325.415,957.95 325.975,969.374 326.534,980.813 327.093,990.131 327.652,1001.07 328.212,1024.81 328.771,1014.89 329.33,1021.02 329.889,979.829 330.449,990.357 331.008,966.047 331.567,924.84 332.126,936.818 332.686,902.314 333.245,897.335 333.804,927.501 334.363,923.107 334.923,883.767 335.482,878.091 336.041,890.801 336.6,924.147 337.16,950.002 337.719,942.152 338.278,965.867 338.837,960.409 339.397,952.186 339.956,976.409 340.515,951.362 341.074,944.088 341.634,937.838 342.193,916.338 342.752,911.545 343.311,906.946 343.871,954.725 344.43,931.317 344.989,907.665 345.548,919.915 346.108,898.34 346.667,876.825 347.226,888.351 347.785,915.507 348.345,909.797 348.904,919.932 349.463,945.514 350.022,956.353 350.582,963.219 351.141,988.449 351.7,978.396 352.259,967.601 352.819,977.694 353.378,985.419 353.937,1008.64 354.496,998.921 355.056,986.768 355.615,1010.84 356.174,985.495 356.733,991.642 357.293,982.608 357.852,972.661 358.411,964.744 358.97,922.844 359.53,916.042 360.089,880.72 360.648,897.497 361.207,894.644 361.767,890.35 362.326,899.815 362.885,893.441 363.444,856.56 364.004,836.44 364.563,831.236 365.122,862.795 365.681,875.395 366.241,901.629 366.8,909.787 367.359,902.695 367.918,895.396 368.478,940.496 369.037,916.915 369.596,943.246 370.155,937.002 370.715,931.517 371.274,923.857 371.833,930.713 372.392,935.467 372.952,916.512 373.511,889.38 374.07,901.95 374.629,898.031 375.189,943.984 375.748,937.651 376.307,882.609 376.866,846.798 377.426,842.052 377.985,819.968 378.544,800.455 379.103,784.903 379.663,804.265 380.222,801.059 380.781,779.599 381.34,780.487 381.9,795.576 382.459,797.082 383.018,765.82 383.577,820.441 384.137,800.388 384.696,763.926 385.255,763.783 385.814,779.211 386.374,748.756 386.933,735.122 387.492,721.716 388.051,739.392 388.611,741.491 389.17,743.107 389.729,695.999 390.288,718.3 390.848,720.537 391.407,725.711 391.966,763.357 392.525,782.948 393.085,766.72 393.644,767.846 394.203,783.154 394.762,767.614 395.322,718.335 395.881,736.584 396.44,737.866 396.999,757.478 397.559,745.088 398.118,744.812 398.677,762.85 399.236,763.323 399.796,764.593 400.355,749.526 400.914,735.679 401.473,723.132 402.033,774.735 402.592,740.391 403.151,728.69 403.71,734.474 404.27,717.587 404.829,755.99 405.388,756.819 405.947,754.001 406.507,725.685 407.066,744.94 407.625,778.688 408.184,777.113 408.744,779.67 409.303,797.317 409.862,815.003 410.421,779.373 410.981,793.182 411.54,792.39 412.099,790.875 412.658,824.124 413.218,819.051 413.777,814.485 414.336,814.187 414.895,842.24 415.455,807.51 416.014,786.077 416.573,784.688 417.132,783.318 417.692,769.022 418.251,768.942 418.81,755.819 419.369,773.355 419.929,758.165 420.488,759.192 421.047,759.369 421.606,758.077 422.166,760.657 422.725,747.751 423.284,764.167 423.843,746.744 424.403,700.847 424.962,704.593 425.521,710.604 426.08,743.457 426.64,761.022 427.199,734.285 427.758,718.872 428.318,702.947 428.877,688.315 429.436,710.603 429.995,716.126 430.555,736.456 431.114,741.069 431.673,737.691 432.232,742.433 432.792,746.541 433.351,765.476 433.91,766.097 434.469,763.935 435.029,800.1 435.588,766.426 436.147,795.959 436.706,808.343 437.266,807.802 437.825,788.337 438.384,818.512 438.943,785.038 439.503,818.337 440.062,795.461 440.621,793.411 441.18,792.052 441.74,804.741 442.299,799.665 442.858,831.778 443.417,811.705 443.977,842.062 444.536,823.307 445.095,818.355 445.654,836.187 446.214,832.423 446.773,861.613 447.332,873.821 447.891,901.771 448.451,883.945 449.01,844.716 449.569,823.624 450.128,786.184 450.688,769.784 451.247,753.132 451.806,785.883 452.365,802.137 452.925,799.873 453.484,794.584 454.043,791.72 454.602,806.04 455.162,865.82 455.721,823.23 456.28,803.671 456.839,820.477 457.399,813.411 457.958,826.783 458.517,792.193 459.076,726.119 459.636,760.66 460.195,777.744 460.754,823.277 461.313,802.396 461.873,781.315 462.432,812.947 462.991,758.82 463.55,756.728 464.11,722.492 464.669,690.294 465.228,710.618 465.787,711.845 466.347,697.176 466.906,717.961 467.465,734.172 468.024,700.711 468.584,704.691 469.143,739.371 469.702,755.235 470.261,788.332 470.821,767.36 471.38,799.792 471.939,779.818 472.498,777.578 473.058,773.914 473.617,789.249 474.176,832.877 474.735,844.226 475.295,853.693 475.854,846.695 476.413,825.229 476.972,807.301 477.532,786.19 478.091,767.887 478.65,770.39 479.209,783.687 479.769,778.775 480.328,794.606 480.887,839.581 481.446,820.834 482.006,783.646 482.565,780.335 483.124,762.199 483.683,728.393 484.243,715.595 484.802,700.899 485.361,707.005 485.92,692.524 486.48,692.686 487.039,712.309 487.598,710.188 488.157,727.99 488.717,726.923 489.276,727.779 489.835,712.722 490.394,712.464 490.954,692.462 491.513,722.862 492.072,689.83 492.631,694.268 493.191,683.536 493.75,686.776 494.309,687.399 494.868,690.627 495.428,660.214 495.987,678.667 496.546,715.205 497.105,734.587 497.665,754.051 498.224,767.927 498.783,781.023 499.342,779.516 499.902,776.488 500.461,758.849 501.02,738.783 501.579,688.162 502.139,690.163 502.698,694.018 503.257,693.525 503.816,677.845 504.376,699.163 504.935,706.371 505.494,722.801 506.053,738.85 506.613,753.827 507.172,754.074 507.731,756.031 508.29,735.481 508.85,720.925 509.409,725.598 509.968,724.22 510.527,738.884 511.087,721.33 511.646,739.594 512.205,740.382 512.764,740.036 513.324,723.828 513.883,709.439 514.442,724.994 515.001,756.685 515.561,720.416 516.12,716.761 516.679,735.13 517.238,749.832 517.798,746.305 518.357,710.511 518.916,739.741 519.475,739.778 520.035,723.036 520.594,702.969 521.153,703.128 521.712,735.508 522.272,734.854 522.831,784.249 523.39,827.752 523.949,818.644 524.509,811.365 525.068,788.781 525.627,769.526 526.186,768.709 526.746,750.739 527.305,751.734 527.864,783.162 528.423,792.568 528.983,769.698 529.542,782.097 530.101,808.307 530.66,804.132 531.22,803.668 531.779,812.69 532.338,808.882 532.897,805.968 533.457,753.311 534.016,751.781 534.575,729.389 535.134,728.157 535.694,773.678 536.253,785.336 536.812,764.789 537.371,742.156 537.931,740.533 538.49,705.533 539.049,728.794 539.608,726.048 540.168,692.435 540.727,673.742 541.286,644.937 541.845,644.756 542.405,663.277 542.964,701.17 543.523,706.362 544.082,721.569 544.642,704.549 545.201,708.082 545.76,723.3 546.319,708.501 546.879,706.007 547.438,739.479 547.997,750.869 548.556,751.72 549.116,716.54 549.675,716.108 550.234,716.391 550.793,731.382 551.353,712.768 551.912,693.998 552.471,697.957 553.031,667.248 553.59,671.303 554.149,656.902 554.708,642.533 555.268,680.469 555.827,683.658 556.386,701.146 556.945,714.971 557.505,762.192 558.064,805.986 558.623,769.234 559.182,748.849 559.742,744.481 560.301,740.666 560.86,738.63 561.419,772.46 561.979,786.319 562.538,766.484 563.097,764.169 563.656,777.816 564.216,790.378 564.775,836.405 565.334,844.186 565.893,853.611 566.453,809.352 567.012,819.893 567.571,781.325 568.13,778.368 568.69,775.567 569.249,753.822 569.808,763.298 570.367,760.147 570.927,806.009 571.486,800.121 572.045,761.147 572.604,741.112 573.164,707.264 573.723,671.886 574.282,659.788 574.841,678.938 575.401,647.983 575.96,619.823 576.519,590.676 577.078,597.529 577.638,590.678 578.197,582.24 578.756,573.096 579.315,563.565 579.875,619.83 580.434,606.821 580.993,596.283 581.552,602.793 582.112,638.312 582.671,657.417 583.23,656.422 583.789,693.231 584.349,692.438 584.908,711.659 585.467,708.247 586.026,705.648 586.586,723.284 587.145,703.46 587.704,706.048 588.263,708.501 588.823,752.588 589.382,753.166 589.941,781.776 590.5,746.291 591.06,760.932 591.619,724.833 592.178,709.461 592.737,693.293 593.297,728.725 593.856,711.154 594.415,740.965 594.974,740.636 595.534,738.229 596.093,720.68 596.652,706.755 597.211,741.217 597.771,771.83 598.33,788.908 598.889,803.46 599.448,762.931 600.008,726.86 600.567,728.571 601.126,726.186 601.685,713.869 602.245,731.526 602.804,750.118 603.363,733.338 603.922,747.968 604.482,727.497 605.041,696.125 605.6,712.806 606.159,711.854 606.719,729.253 607.278,747.851 607.837,714.554 608.396,729.817 608.956,732.332 609.515,747.25 610.074,761.744 610.633,760.056 611.193,757.302 611.752,722.927 612.311,754.289 612.87,745.836 613.43,741.665 613.989,735.576 614.548,752.964 615.107,751.875 615.667,735.602 616.226,767.994 616.785,747.94 617.344,779.537 617.904,772.831 618.463,749.922 619.022,730.948 619.581,729.499 620.141,728.26 620.7,742.44 621.259,743.295 621.818,776.748 622.378,772.461 622.937,771.179 623.496,733.964 624.055,700.904 624.615,716.16 625.174,733.386 625.733,767.014 626.292,712.751 626.852,693.14 627.411,629.718 627.97,663.586 628.529,649.083 629.089,667.224 629.648,655.782 630.207,690.259 630.766,706.971 631.326,723.215 631.885,708.927 632.444,741.008 633.003,737.872 633.563,738.409 634.122,772.909 634.681,801.223 635.24,807.943 635.8,802.738 636.359,812.166 636.918,821.685 637.477,794.78 638.037,773.398 638.596,769.803 639.155,720.436 639.714,702.188 640.274,668.264 640.833,686.72 641.392,686.93 641.951,703.392 642.511,714.761 643.07,713.321 643.629,696.484 644.188,697.145 644.748,665.772 645.307,681.917 645.866,684.848 646.425,702.102 646.985,702.311 647.544,654.257 648.103,638.524 648.662,657.924 649.222,678.059 649.781,692.755 650.34,705.314 650.899,719.965 651.459,719.797 652.018,721.827 652.577,704.283 653.136,689.135 653.696,675.445 654.255,757.308 654.814,767.897 655.373,747.967 655.933,714.476 656.492,711.83 657.051,709.844 657.61,708.281 658.17,676.4 658.729,692.69 659.288,725.404 659.847,724.901 660.407,722.202 660.966,708.045 661.525,726.314 662.084,726.419 662.644,740.79 663.203,740.206 663.762,738.349 664.321,735.838 664.881,750.578 665.44,728.028 665.999,710.275 666.558,709.742 667.118,723.271 667.677,689.137 668.236,656.64 668.795,658.453 669.355,675.912 669.914,644.035 670.473,645.175 671.032,644.656 671.592,647.198 672.151,650.195 672.71,703.553 673.269,670.022 673.829,657.529 674.388,659.228 674.947,678.011 675.506,679.315 676.066,682.64 676.625,684.559 677.184,670.666 677.743,671.356 678.303,689.286 678.862,672.624 679.421,689.142 679.981,708.335 680.54,690.412 681.099,737.399 681.658,751.452 682.218,733.602 682.777,730.477 683.336,728.186 683.895,709.949 684.455,722.657 685.014,721.226 685.573,737.512 686.132,730.45 686.692,744.078 687.251,758.209 687.81,741.101 688.369,704.907 688.929,687.914 689.488,674.439 690.047,677.081 690.606,661.863 691.166,682.58 691.725,696.914 692.284,730.83 692.843,710.777 693.403,727.359 693.962,738.592 694.521,752.424 695.08,747.658 695.64,757.737 696.199,739.016 696.758,770.183 697.317,746.994 697.877,729.203 698.436,742.343 698.995,758.29 699.554,735.458 700.114,750.156 700.673,726.435 701.232,724.174 701.791,723.268 702.351,692.979 702.91,706.458 703.469,719.444 704.028,721.517 704.588,704.001 705.147,706.095 705.706,671.781 706.265,722.013 706.825,717.533 707.384,683.464 707.943,698.69 708.502,700.212 709.062,700.563 709.621,696.485 710.18,732.924 710.739,731.115 711.299,732.298 711.858,779.338 712.417,777.473 712.976,789.595 713.536,783.646 714.095,758.942 714.654,768.644 715.213,764.369 715.773,775.79 716.332,771.156 716.891,766.553 717.45,764.81 718.01,749.399 718.569,762.134 719.128,757.937 719.687,753.244 720.247,720.648 720.806,721.584 721.365,685.415 721.924,654.255 722.484,607.58 723.043,575.594 723.602,565.752 724.161,554.873 724.721,532.084 725.28,525.865 725.839,553.272 726.398,558.771 726.958,582.592 727.517,573.249 728.076,581.101 728.635,520.266 729.195,494.728 729.754,505.946 730.313,531.344 730.872,524.078 731.432,548.6 731.991,526.993 732.55,550.991 733.109,529.168 733.669,536.253 734.228,580.954 734.787,633.542 735.346,652.339 735.906,640.031 736.465,625.672 737.024,646.115 737.583,649.974 738.143,617.9 738.702,622.501 739.261,626.648 739.82,646.563 740.38,646.563 740.939,663.799 741.498,652.08 742.057,634.399 742.617,620.355 743.176,640.867 743.735,643.425 744.294,693.943 744.854,742.578 745.413,770.343 745.972,738.434 746.531,753.17 747.091,717.433 747.65,714.974 748.209,697.841 748.768,731.42 749.328,711.143 749.887,692.266 750.446,694.688 751.005,700.236 751.565,714.54 752.124,729.655 752.683,745.032 753.242,742.143 753.802,742.998 754.361,738.868 754.92,734.3 755.479,731.351 756.039,730.503 756.598,745.39 757.157,727.382 757.716,725.123 758.276,705.322 758.835,690.427 759.394,693.023 759.953,690.812 760.513,657.5 761.072,662.466 761.631,663.49 762.19,651.046 762.75,652.5 763.309,658.395 763.868,694.443 764.427,656.66 764.987,679.553 765.546,668.442 766.105,636.981 766.664,642.108 767.224,630.093 767.783,584.035 768.342,605.555 768.901,607.572 769.461,611.424 770.02,613.182 770.579,664.698 771.138,681.707 771.698,685.972 772.257,670.655 772.816,686.21 773.375,701.243 773.935,718.5 774.494,704.335 775.053,703.24 775.612,671.092 776.172,654.887 776.731,654.987 777.29,691.172 777.849,728.886 778.409,695.118 778.968,713.978 779.527,681.643 780.086,650.519 780.646,657.02 781.205,661.291 781.764,665.521 782.323,650.87 782.883,652.15 783.442,655.014 784.001,671.897 784.56,699.719 785.12,683.665 785.679,685.238 786.238,685.556 786.797,686.212 787.357,689.574 787.916,705.384 788.475,704.216 789.034,672.92 789.594,676.402 790.153,675.746 790.712,658.564 791.271,657.481 791.831,658.614 792.39,676.33 792.949,646.337 793.508,647.467 794.068,646.894 794.627,649.359 795.186,653.428 795.745,672.158 796.305,706.511 796.864,703.451 797.423,686.305 797.982,703.58 798.542,734.613 799.101,731.62 799.66,698.703 800.219,697.527 800.779,713.362 801.338,745.855 801.897,743.216 802.456,760.095 803.016,769.729 803.575,749.19 804.134,778.314 804.693,759.103 805.253,755.286 805.812,769.294 806.371,748.968 806.931,732.83 807.49,745.339 808.049,761.92 808.608,775.858 809.168,788.528 809.727,761.331 810.286,772.193 810.845,782.522 811.405,794.99 811.964,791.064 812.523,783.728 813.082,781.71 813.642,778.987 814.201,803.135 814.76,798.864 815.319,791.865 815.879,785.567 816.438,781.215 816.997,792.707 817.556,801.428 818.116,796.669 818.675,786.717 819.234,795.117 819.793,756.308 820.353,734.793 820.912,746.743 821.471,739.298 822.03,738.712 822.59,733.21 823.149,751.485 823.708,748.165 824.267,760.599 824.827,739.767 825.386,719.352 825.945,719.064 826.504,717.352 827.064,731.491 827.623,729.962 828.182,745.818 828.741,743.073 829.301,707.027 829.86,735.611 830.419,745.547 830.978,726.574 831.538,739.174 832.097,736.202 832.656,749.695 833.215,759.251 833.775,787.981 834.334,781.593 834.893,789.54 835.452,781.741 836.012,793.619 836.571,770.536 837.13,780.088 837.689,772.554 838.249,781.952 838.808,727.633 839.367,725.382 839.926,724.75 840.486,722.315 841.045,736.646 841.604,718.789 842.163,736.088 842.723,735.025 843.282,716.876 843.841,699.275 844.4,744.861 844.96,709.079 845.519,693.305 846.078,694.44 846.637,706.519 847.197,686.591 847.756,637.709 848.315,605.091 848.874,563.773 849.434,552.303 849.993,576.175 850.552,566.764 851.111,588.207 851.671,575.045 852.23,564.972 852.789,570.618 853.348,589.424 853.908,612.626 854.467,615.754 855.026,583.991 855.585,590.26 856.145,598.015 856.704,600.648 857.263,604.949 857.822,578.585 858.382,584.604 858.941,590.882 859.5,563.75 860.059,508.249 860.619,504.344 861.178,513.231 861.737,523.718 862.296,466.669 862.856,463.17 863.415,476.465 863.974,519.794 864.533,526.947 865.093,555.462 865.652,561.284 866.211,521.89 866.77,564.363 867.33,572.848 867.889,581.609 868.448,604.83 869.007,609.632 869.567,629.044 870.126,648.13 870.685,635.771 871.244,637.629 871.804,622.6 872.363,657.202 872.922,643.667 873.481,659.374 874.041,665.383 874.6,681.955 875.159,681.23 875.718,682.62 876.278,714.869 876.837,701.727 877.396,701.239 877.955,699.33 878.515,682.9 879.074,667.264 879.633,668.441 880.192,689.33 880.752,688.553 881.311,704.2 881.87,703.583 882.429,719.391 882.989,769.652 883.548,766.968 884.107,730.338 884.666,726.79 885.226,710.562 885.785,691.553 886.344,694.881 886.903,746.208 887.463,778.561 888.022,774.438 888.581,801.889 889.14,778.67 889.7,773.563 890.259,785.624 890.818,780.657 891.377,729.223 891.937,711.924 892.496,694.983 893.055,711.338 893.614,679.515 894.174,724.465 894.733,709.288 895.292,677.689 895.851,726.852 896.411,789.231 896.97,766.953 897.529,759.941 898.088,756.359 898.648,720.779 899.207,733.448 899.766,713.917 900.325,710.733 900.885,709.536 901.444,696.167 902.003,694.694 902.562,708.659 903.122,705.604 903.681,711.745 904.24,692.604 904.799,720.975 905.359,735.283 905.918,716.483 906.477,678.866 907.036,680.139 907.596,712.128 908.155,707.789 908.714,689.076 909.273,691.117 909.833,670.274 910.392,640.169 910.951,624.685 911.51,610.816 912.07,617.082 912.629,588.622 913.188,606.681 913.747,628.031 914.307,630.214 914.866,667.055 915.425,653.466 915.984,687.871 916.544,704.2 917.103,690.96 917.662,694.731 918.221,711.339 918.781,709.521 919.34,706.023 919.899,658.269 920.458,658.572 921.018,644.174 921.577,632.051 922.136,617.662 922.695,619.524 923.255,638.858 923.814,678.793 924.373,682.512 924.932,651.398 925.492,704.122 926.051,717.248 926.61,732.223 927.169,744.771 927.729,710.289 928.288,724.301 928.847,726.569 929.406,692.562 929.966,711.352 930.525,690.243 931.084,661.008 931.644,662.107 932.203,645.837 932.762,679.175 933.321,679.075 933.881,713.453 934.44,708.229 934.999,721.949 935.558,754.232 936.118,749.909 936.677,727.394 937.236,742.876 937.795,720.568 938.355,719.215 938.914,684.307 939.473,639.048 940.032,660.306 940.592,679.782 941.151,699.914 941.71,700.937 942.269,704.275 942.829,736.053 943.388,716.95 943.947,730.806 944.506,727.411 945.066,708.301 945.625,706.562 946.184,693.034 946.743,722.275 947.303,734.989 947.862,714.417 948.421,698.473 948.98,695.636 949.54,713.735 950.099,728.874 950.658,740.538 951.217,718.531 951.777,690.282 952.336,689.581 952.895,706.027 953.454,689.813 954.014,656.673 954.573,655.43 955.132,654.996 955.691,658.135 956.251,643.431 956.81,614.111 957.369,602.27 957.928,588.222 958.488,576.748 959.047,568.646 959.606,569.609 960.165,575.338 960.725,593.914 961.284,615.895 961.843,637.095 962.402,655.329 962.962,688.22 963.521,772.522 964.08,782.709 964.639,761.751 965.199,726.946 965.758,721.814 966.317,730.849 966.876,726.479 967.436,707.673 967.995,722.696 968.554,688.977 969.113,639.924 969.673,660.163 970.232,644.408 970.791,649.613 971.35,669.465 971.91,669.062 972.469,669.502 973.028,652.728 973.587,654.711 974.147,639.164 974.706,656.526 975.265,687.508 975.824,688.015 976.384,689.05 976.943,705.27 977.502,719.807 978.061,764.084 978.621,759.596 979.18,773.436 979.739,801.063 980.298,778.433 980.858,743.419 981.417,770.638 981.976,785.497 982.535,778.99 983.095,773.29 983.654,766.484 984.213,727.001 984.772,724.501 985.332,739.344 985.891,704.293 986.45,655.527 987.009,669.178 987.569,685.448 988.128,686.275 988.687,684.268 989.246,684.165 989.806,695.384 990.365,692.296 990.924,708.884 991.483,723.642 992.043,724.006 992.602,706.017 993.161,703.452 993.72,683.95 994.28,636.964 994.839,641.532 995.398,613.659 995.957,630.563 996.517,617.739 997.076,638.748 997.635,627.791 998.194,628.937 998.754,629.168 999.313,614.405 999.872,651.953 1000.43,669.898 1000.99,700.475 1001.55,679.25 1002.11,647.92 1002.67,683.378 1003.23,703.134 1003.79,701.868 1004.35,653.032 1004.91,668.275 1005.46,669.592 1006.02,682.587 1006.58,666.121 1007.14,716.231 1007.7,743.073 1008.26,772.334 1008.82,754.25 1009.38,730.807 1009.94,727.246 1010.5,709.416 1011.06,757.981 1011.62,754.006 1012.18,735.097 1012.73,728.997 1013.29,710.919 1013.85,695.26 1014.41,676.371 1014.97,695.875 1015.53,696.773 1016.09,666.802 1016.65,666.439 1017.21,666.666 1017.77,664.349 1018.33,646.295 1018.89,615.147 1019.45,668.343 1020.01,681.741 1020.56,729.293 1021.12,710.325 1021.68,708.802 1022.24,692.348 1022.8,711.255 1023.36,709.908 1023.92,721.952 1024.48,718.901 1025.04,749.053 1025.6,747.266 1026.16,778.22 1026.72,762.321 1027.28,789.761 1027.83,787.008 1028.39,763.808 1028.95,771.023 1029.51,768.26 1030.07,780.644 1030.63,759.633 1031.19,740.242 1031.75,749.103 1032.31,743.277 1032.87,723.611 1033.43,687.22 1033.99,687.622 1034.55,654.311 1035.1,638.822 1035.66,642.717 1036.22,627.33 1036.78,612.968 1037.34,619.441 1037.9,639.861 1038.46,658.133 1039.02,626.489 1039.58,629.729 1040.14,647.678 1040.7,637.817 1041.26,626.207 1041.82,614.723 1042.38,650.35 1042.93,638.856 1043.49,626.945 1044.05,598.055 1044.61,638.547 1045.17,658.033 1045.73,708.867 1046.29,709.977 1046.85,726.528 1047.41,737.526 1047.97,735.805 1048.53,766.724 1049.09,745.182 1049.65,754.608 1050.2,718.305 1050.76,717.958 1051.32,714.367 1051.88,714.283 1052.44,699.037 1053,685.196 1053.56,687.42 1054.12,674.777 1054.68,659.226 1055.24,646.766 1055.8,649.915 1056.36,620.002 1056.92,622.054 1057.48,624.916 1058.03,626.643 1058.59,629.523 1059.15,645.364 1059.71,663.657 1060.27,649.59 1060.83,635.669 1061.39,688.551 1061.95,706.591 1062.51,688.244 1063.07,705.586 1063.63,645.348 1064.19,661.973 1064.75,681.037 1065.3,646.876 1065.86,649.633 1066.42,620.511 1066.98,623.579 1067.54,626.247 1068.1,631.364 1068.66,697.63 1069.22,694.274 1069.78,709.678 1070.34,756.287 1070.9,731.717 1071.46,678.602 1072.02,708.454 1072.57,724.373 1073.13,739.798 1073.69,752.333 1074.25,732.264 1074.81,680.845 1075.37,681.9 1075.93,683.671 1076.49,682.653 1077.05,685.893 1077.61,700.975 1078.17,703.044 1078.73,684.152 1079.29,681.926 1079.85,651.194 1080.4,651.781 1080.96,667.827 1081.52,687.768 1082.08,691.125 1082.64,674.783 1083.2,676.117 1083.76,661.951 1084.32,680.547 1084.88,679.549 1085.44,696.907 1086,682.114 1086.56,731.882 1087.12,731.579 1087.67,712.812 1088.23,710.715 1088.79,675.156 1089.35,693.229 1089.91,711.315 1090.47,676.136 1091.03,639.267 1091.59,644.102 1092.15,627.574 1092.71,616.981 1093.27,621.135 1093.83,639.873 1094.39,646.674 1094.94,633.785 1095.5,636.513 1096.06,608.748 1096.62,627.965 1097.18,612.92 1097.74,617.34 1098.3,637.177 1098.86,637.76 1099.42,638.946 1099.98,659.427 1100.54,663.209 1101.1,649.277 1101.66,651.067 1102.22,654.11 1102.77,657.741 1103.33,608.779 1103.89,629.24 1104.45,633.994 1105.01,639.542 1105.57,641.571 1106.13,692.126 1106.69,678.811 1107.25,709.216 1107.81,706.134 1108.37,737.232 1108.93,754.255 1109.49,735.723 1110.04,732.669 1110.6,745.45 1111.16,772.806 1111.72,817.752 1112.28,842.286 1112.84,803.08 1113.4,779.675 1113.96,760.466 1114.52,739.988 1115.08,719.512 1115.64,766.404 1116.2,760.868 1116.76,771.842 1117.31,780.901 1117.87,761.664 1118.43,755.991 1118.99,748.23 1119.55,746.724 1120.11,725.295 1120.67,737.352 1121.23,701.96 1121.79,716.596 1122.35,698.708 1122.91,649.29 1123.47,679.292 1124.03,680.797 1124.59,682.069 1125.14,664.57 1125.7,682.045 1126.26,696.505 1126.82,677.806 1127.38,681.583 1127.94,665.124 1128.5,681.422 1129.06,714.868 1129.62,708.183 1130.18,739.642 1130.74,687.544 1131.3,684.022 1131.86,681.201 1132.41,635.761 1132.97,638.945 1133.53,637.826 1134.09,624.41 1134.65,626.703 1135.21,643.954 1135.77,678.729 1136.33,663.64 1136.89,647.272 1137.45,633.01 1138.01,668.621 1138.57,682.773 1139.13,730.522 1139.68,712.575 1140.24,729.384 1140.8,725.79 1141.36,755.692 1141.92,722.651 1142.48,707.649 1143.04,688.76 1143.6,690.277 1144.16,672.728 1144.72,674.251 1145.28,690.269 1145.84,706.705 1146.4,752.536 1146.96,764.903 1147.51,779.228 1148.07,773.112 1148.63,751.549 1149.19,730.125 1149.75,743.225 1150.31,723.624 1150.87,689.251 1151.43,643.737 1151.99,582.582 1152.55,603.21 1153.11,621.305 1153.67,643.033 1154.23,677.027 1154.78,659.942 1155.34,643.155 1155.9,664.469 1156.46,697.029 1157.02,729.722 1157.58,760.418 1158.14,786.898 1158.7,797.443 1159.26,791.27 1159.82,786.051 1160.38,745.436 1160.94,761.009 1161.5,742.602 1162.05,756.912 1162.61,756.152 1163.17,755.329 1163.73,769.425 1164.29,768.712 1164.85,718.506 1165.41,728.282 1165.97,727.436 1166.53,725.337 1167.09,721.971 1167.65,752.368 1168.21,782.953 1168.77,793.846 1169.33,790.945 1169.88,785.087 1170.44,761.841 1171,745.429 1171.56,729.228 1172.12,711.021 1172.68,726.922 1173.24,690.814 1173.8,689.578 1174.36,657.375 1174.92,660.037 1175.48,693.202 1176.04,726.732 1176.6,728.483 1177.15,729.897 1177.71,744.251 1178.27,757.205 1178.83,734.911 1179.39,683.834 1179.95,666.172 1180.51,665.943 1181.07,683.326 1181.63,619.436 1182.19,606.504 1182.75,593.261 1183.31,597.161 1183.87,616.054 1184.43,651.578 1184.98,671.164 1185.54,707.527 1186.1,687.896 1186.66,672.297 1187.22,668.069 1187.78,702.811 1188.34,701.955 1188.9,637.979 1189.46,607.218 1190.02,580.53 1190.58,585.313 1191.14,593.068 1191.7,600.871 1192.25,607.706 1192.81,595.429 1193.37,632.578 1193.93,620.426 1194.49,620.575 1195.05,624.169 1195.61,647.537 1196.17,663.305 1196.73,694.061 1197.29,695.553 1197.85,697.575 1198.41,684.906 1198.97,748.917 1199.52,716.856 1200.08,767.29 1200.64,796.465 1201.2,806.455 1201.76,767.157 1202.32,733.563 1202.88,748.911 1203.44,743.337 1204,772.526 1204.56,782.349 1205.12,798.92 1205.68,791.17 1206.24,753.701 1206.8,718.255 1207.35,731.443 1207.91,742.914 1208.47,701.571 1209.03,700.057 1209.59,698.873 1210.15,644.384 1210.71,614.412 1211.27,584.991 1211.83,588.105 1212.39,594.335 1212.95,579.506 1213.51,570.329 1214.07,561.67 1214.62,553.037 1215.18,544.886 1215.74,571.319 1216.3,595.441 1216.86,616.604 1217.42,601.645 1217.98,624.001 1218.54,625.635 1219.1,629.943 1219.66,566.708 1220.22,541.255 1220.78,536.277 1221.34,561.904 1221.89,571.137 1222.45,610.689 1223.01,646.434 1223.57,651.028 1224.13,701.151 1224.69,685.4 1225.25,701.526 1225.81,703.256 1226.37,671.575 1226.93,685.315 1227.49,704.716 1228.05,702.811 1228.61,703.749 1229.17,719.982 1229.72,736.436 1230.28,702.194 1230.84,714.849 1231.4,711.72 1231.96,727.201 1232.52,743.75 1233.08,756.993 1233.64,738.494 1234.2,731.795 1234.76,731.009 1235.32,728.21 1235.88,721.84 1236.44,721.555 1236.99,736.724 1237.55,701.166 1238.11,682.156 1238.67,682.384 1239.23,679.991 1239.79,662.158 1240.35,648.715 1240.91,680.397 1241.47,695.221 1242.03,680.284 1242.59,662.473 1243.15,681.865 1243.71,683.131 1244.26,698.251 1244.82,698.031 1245.38,681.546 1245.94,649.534 1246.5,634.75 1247.06,667.925 1247.62,653.714 1248.18,659.379 1248.74,641.396 1249.3,675.104 1249.86,642.172 1250.42,646.472 1250.98,649.823 1251.54,634.403 1252.09,654.686 1252.65,657.486 1253.21,661.676 1253.77,662.313 1254.33,631.531 1254.89,652.801 1255.45,653.913 1256.01,653.35 1256.57,657.743 1257.13,657.284 1257.69,657.214 1258.25,710.704 1258.81,644.009 1259.36,629.515 1259.92,587.798 1260.48,591.082 1261.04,596.947 1261.6,600.721 1262.16,639.344 1262.72,640.744 1263.28,643.393 1263.84,644.459 1264.4,660.21 1264.96,659.966 1265.52,645.355 1266.08,649.133 1266.63,651.331 1267.19,654.793 1267.75,690.155 1268.31,692.844 1268.87,724.374 1269.43,724.652 1269.99,723.044 1270.55,719.617 1271.11,700.668 1271.67,684.453 1272.23,700.38 1272.79,698.849 1273.35,698.861 1273.91,677.75 1274.46,664.064 1275.02,682.773 1275.58,669.242 1276.14,669.485 1276.7,682.678 1277.26,680.562 1277.82,663.817 1278.38,649.715 1278.94,634.748 1279.5,655.605 1280.06,688.717 1280.62,685.083 1281.18,698.803 1281.73,681.851 1282.29,713.56 1282.85,645.895 1283.41,649.21 1283.97,651.223 1284.53,651.972 1285.09,618.47 1285.65,624.473 1286.21,675.377 1286.77,694.415 1287.33,712.228 1287.89,723.697 1288.45,721.71 1289,706.132 1289.56,720.406 1290.12,717.932 1290.68,732.889 1291.24,780.396 1291.8,776.777 1292.36,758.581 1292.92,740.677 1293.48,675.243 1294.04,722.88 1294.6,721.679 1295.16,734.494 1295.72,717.918 1296.28,700.75 1296.83,717.014 1297.39,714.273 1297.95,696.47 1298.51,709.015 1299.07,706.718 1299.63,690.426 1300.19,673.874 1300.75,673.596 1301.31,656.038 1301.87,693.002 1302.43,674.55 1302.99,690.381 1303.55,690.004 1304.1,673.46 1304.66,654.925 1305.22,667.676 1305.78,666.545 1306.34,668.287 1306.9,669.532 1307.46,706.468 1308.02,684.979 1308.58,683.769 1309.14,713.036 1309.7,712.179 1310.26,725.67 1310.82,721.005 1311.38,704.781 1311.93,707.064 1312.49,690.153 1313.05,706.606 1313.61,724.32 1314.17,719.203 1314.73,702.748 1315.29,733.449 1315.85,747.757 1316.41,700.851 1316.97,669.039 1317.53,682.469 1318.09,648.156 1318.65,661.396 1319.2,658.951 1319.76,663.263 1320.32,664.517 1320.88,669.351 1321.44,685.305 1322,701.102 1322.56,718.656 1323.12,682.949 1323.68,682.683 1324.24,667.552 1324.8,685.037 1325.36,700.655 1325.92,715.971 1326.47,700.113 1327.03,680.479 1327.59,741.832 1328.15,738.825 1328.71,732.312 1329.27,728.03 1329.83,725.098 1330.39,754.326 1330.95,748.136 1331.51,757.471 1332.07,751.839 1332.63,732.503 1333.19,729.979 1333.75,759.122 1334.3,723.102 1334.86,737.749 1335.42,779.466 1335.98,711.498 1336.54,709.987 1337.1,692.973 1337.66,676.816 1338.22,658.734 1338.78,647.304 1339.34,653.249 1339.9,671.732 1340.46,657.49 1341.02,626.841 1341.57,584.684 1342.13,621.568 1342.69,643.925 1343.25,627.583 1343.81,660.628 1344.37,661.63 1344.93,680.143 1345.49,697.191 1346.05,694.5 1346.61,742.544 1347.17,722.912 1347.73,720.791 1348.29,669.646 1348.84,687.147 1349.4,688.916 1349.96,689.992 1350.52,690.301 1351.08,705.663 1351.64,642.387 1352.2,643.314 1352.76,615.23 1353.32,602.057 1353.88,604.42 1354.44,622.779 1355,607.837 1355.56,623.281 1356.12,643.771 1356.67,679.778 1357.23,677.718 1357.79,661.328 1358.35,693.971 1358.91,710.472 1359.47,723.291 1360.03,689.313 1360.59,722.778 1361.15,689.13 1361.71,671.84 1362.27,688.195 1362.83,637.105 1363.39,638.514 1363.94,622.812 1364.5,655.268 1365.06,639.495 1365.62,640.751 1366.18,644.146 1366.74,647.863 1367.3,648.55 1367.86,662.999 1368.42,662.649 1368.98,699.17 1369.54,697.964 1370.1,667.074 1370.66,668.802 1371.21,686.363 1371.77,666.625 1372.33,636.523 1372.89,621.992 1373.45,621.449 1374.01,610.25 1374.57,613.938 1375.13,630.909 1375.69,649.611 1376.25,717.395 1376.81,730.547 1377.37,694.606 1377.93,741.333 1378.49,755.119 1379.04,737.44 1379.6,735.254 1380.16,779.595 1380.72,775.026 1381.28,738.483 1381.84,717.754 1382.4,703.108 1382.96,733.88 1383.52,749.624 1384.08,742.674 1384.64,739.374 1385.2,735.21 1385.76,729.588 1386.31,709.853 1386.87,675.091 1387.43,644.383 1387.99,662.744 1388.55,666.43 1389.11,668.805 1389.67,670.653 1390.23,654.652 1390.79,659.92 1391.35,661.481 1391.91,661.933 1392.47,667.171 1393.03,652.773 1393.58,655.106 1394.14,660.696 1394.7,646.078 1395.26,665.238 1395.82,697.664 1396.38,711.284 1396.94,705.609 1397.5,703.329 1398.06,700.945 1398.62,715.446 1399.18,728.507 1399.74,728.803 1400.3,741.812 1400.86,737.191 1401.41,734.669 1401.97,749.507 1402.53,763.466 1403.09,754.209 1403.65,759.281 1404.21,721.057 1404.77,720.218 1405.33,682.311 1405.89,665.651 1406.45,682.846 1407.01,683.095 1407.57,671.807 1408.13,688.926 1408.68,703.487 1409.24,686.228 1409.8,669.661 1410.36,686.18 1410.92,702.216 1411.48,668.653 1412.04,665.816 1412.6,643.709 1413.16,647.173 1413.72,631.903 1414.28,650.148 1414.84,635.79 1415.4,621.1 1415.95,641.631 1416.51,643.361 1417.07,663.336 1417.63,666.727 1418.19,667.258 1418.75,697.512 1419.31,694.698 1419.87,690.609 1420.43,705.186 1420.99,702.821 1421.55,670.367 1422.11,670.373 1422.67,673.065 1423.23,676.445 1423.78,690.901 1424.34,709.635 1424.9,708.209 1425.46,706.172 1426.02,722.775 1426.58,735.049 1427.14,735.614 1427.7,750.353 1428.26,759.855 1428.82,739.571 1429.38,753.787 1429.94,767.282 1430.5,776.559 1431.05,754.781 1431.61,754.108 1432.17,734.093 1432.73,763.378 1433.29,762.438 1433.85,744.974 1434.41,738.419 1434.97,687.326 1435.53,675.896 1436.09,677.03 1436.65,698.336 1437.21,697.073 1437.77,681.082 1438.33,665.587 1438.88,665.574 1439.44,700.461 1440,716.488 1440.56,712.894 1441.12,662.751 1441.68,630.831 1442.24,632.553 1442.8,652.459 1443.36,654.271 1443.92,671.12 1444.48,688.492 1445.04,640.023 1445.6,609.218 1446.15,631.207 1446.71,636.686 1447.27,642.142 1447.83,646.653 1448.39,615.231 1448.95,618.888 1449.51,623.352 1450.07,624.069 1450.63,613.64 1451.19,587.491 1451.75,561.251 1452.31,567.87 1452.87,542.504 1453.42,535.068 1453.98,574.774 1454.54,596.896 1455.1,584.186 1455.66,604.82 1456.22,594.666 1456.78,603.451 1457.34,624.548 1457.9,614.958 1458.46,586.797 1459.02,577.503 1459.58,599.196 1460.14,603.378 1460.7,613.744 1461.25,605.588 1461.81,609.701 1462.37,611.887 1462.93,632.444 1463.49,634.787 1464.05,653.045 1464.61,654.147 1465.17,655.184 1465.73,656.582 1466.29,641.226 1466.85,657.589 1467.41,659.787 1467.97,656.247 1468.52,656.628 1469.08,674.534 1469.64,694.244 1470.2,693.446 1470.76,692.712 1471.32,724.656 1471.88,739.559 1472.44,703.779 1473,704.478 1473.56,720.093 1474.12,721.401 1474.68,704.657 1475.24,702.4 1475.79,686.127 1476.35,686.468 1476.91,755.155 1477.47,748.771 1478.03,748.445 1478.59,774.355 1479.15,786.114 1479.71,769.373 1480.27,782.411 1480.83,778.502 1481.39,759.41 1481.95,753.309 1482.51,764.575 1483.07,744.159 1483.62,792.076 1484.18,770.661 1484.74,762.583 1485.3,756.812 1485.86,735.549 1486.42,781.32 1486.98,775.248 1487.54,772.616 1488.1,783.139 1488.66,792.738 1489.22,799.936 1489.78,811.19 1490.34,757.754 1490.89,751.929 1491.45,732.528 1492.01,745.663 1492.57,741.602 1493.13,736.581 1493.69,715.135 1494.25,712.559 1494.81,696.895 1495.37,717.091 1495.93,714.245 1496.49,696.123 1497.05,681.541 1497.61,661.872 1498.16,636.504 1498.72,632.805 1499.28,649.466 1499.84,655.524 1500.4,656.533 1500.96,657.952 1501.52,661.816 1502.08,679.824 1502.64,677.987 1503.2,679.753 1503.76,662.495 1504.32,632.056 1504.88,601.398 1505.44,605.092 1505.99,627.218 1506.55,645.012 1507.11,646.419 1507.67,662.922 1508.23,649.331 1508.79,587.353 1509.35,575.397 1509.91,549.96 1510.47,560.02 1511.03,580.905 1511.59,603.097 1512.15,589.599 1512.71,596.106 1513.26,601.716 1513.82,604.938 1514.38,624.806 1514.94,627.131 1515.5,612.269 1516.06,600.837 1516.62,558.66 1517.18,579.963 1517.74,584.563 1518.3,592.822 1518.86,602.523 1519.42,604.881 1519.98,594.449 1520.53,648.15 1521.09,649.757 1521.65,654.25 1522.21,658.011 1522.77,672.872 1523.33,689.445 1523.89,684.327 1524.45,653.416 1525.01,670.348 1525.57,670.404 1526.13,684.765 1526.69,667.125 1527.25,683.97 1527.81,680.291 1528.36,714.305 1528.92,680.574 1529.48,665.094 1530.04,667.234 1530.6,683.933 1531.16,688.036 1531.72,669.747 1532.28,701.018 1532.84,718.04 1533.4,698.644 1533.96,695.244 1534.52,728.297 1535.08,725.456 1535.63,722.478 1536.19,752.87 1536.75,780.828 1537.31,773.209 1537.87,752.265 1538.43,764.017 1538.99,762.057 1539.55,741.884 1540.11,753.029 1540.67,751.73 1541.23,749.014 1541.79,776.961 1542.35,724.399 1542.9,721.437 1543.46,718.659 1544.02,713.657 1544.58,740.274 1545.14,751.348 1545.7,682.386 1546.26,681.92 1546.82,650.25 1547.38,635.984 1547.94,652.756 1548.5,620.362 1549.06,587.646 1549.62,573.838 1550.18,598.543 1550.73,605.774 1551.29,629.753 1551.85,618.655 1552.41,621.331 1552.97,625.865 1553.53,649.05 1554.09,651.633 1554.65,606.236 1555.21,609.377 1555.77,630.093 1556.33,649.401 1556.89,635.594 1557.45,638.149 1558,624.907 1558.56,679.881 1559.12,650.655 1559.68,666.812 1560.24,701.785 1560.8,702.486 1561.36,715.159 1561.92,746.429 1562.48,741.821 1563.04,721.352 1563.6,755.555 1564.16,739.698 1564.72,750.764 1565.28,729.487 1565.83,747.205 1566.39,693.943 1566.95,691.68 1567.51,692.907 1568.07,677.301 1568.63,644.784 1569.19,675.89 1569.75,705.847 1570.31,706.233 1570.87,704.903 1571.43,687.489 1571.99,686.81 1572.55,684.041 1573.1,633.118 1573.66,653.186 1574.22,671.882 1574.78,670.395 1575.34,671.093 1575.9,673.719 1576.46,656.269 1577.02,655.548 1577.58,672.564 1578.14,721.5 1578.7,735.82 1579.26,751.076 1579.82,781.366 1580.37,745.183 1580.93,756.281 1581.49,784.272 1582.05,763.554 1582.61,759.466 1583.17,768.011 1583.73,796.535 1584.29,775.201 1584.85,785.869 1585.41,780.46 1585.97,771.546 1586.53,750.942 1587.09,750.291 1587.65,735.425 1588.2,719.704 1588.76,719.679 1589.32,731.17 1589.88,775.11 1590.44,803.802 1591,775.808 1591.56,786.995 1592.12,779.237 1592.68,788.075 1593.24,781.637 1593.8,759.326 1594.36,772.83 1594.92,732.553 1595.47,758.292 1596.03,781.101 1596.59,776.876 1597.15,757.688 1597.71,734.385 1598.27,714.193 1598.83,709.186 1599.39,739.863 1599.95,689.674 1600.51,722.901 1601.07,722.03 1601.63,720.904 1602.19,700.657 1602.74,715.361 1603.3,713.752 1603.86,712.146 1604.42,725.065 1604.98,724.128 1605.54,704.58 1606.1,720.853 1606.66,685.232 1607.22,690.147 1607.78,678.011 1608.34,694.292 1608.9,679.118 1609.46,744.546 1610.02,757.252 1610.57,755.545 1611.13,736.141 1611.69,717.719 1612.25,715.653 1612.81,698.513 1613.37,647.855 1613.93,632.486 1614.49,634.354 1615.05,622.634 1615.61,609.746 1616.17,561.509 1616.73,568.218 1617.29,524.641 1617.84,568.284 1618.4,591.429 1618.96,598.104 1619.52,603.829 1620.08,621.498 1620.64,592.167 1621.2,614.69 1621.76,605.24 1622.32,639.988 1622.88,642.363 1623.44,644.951 1624,630.457 1624.56,616.878 1625.11,592.69 1625.67,611.652 1626.23,614.693 1626.79,617.128 1627.35,586.686 1627.91,560.606 1628.47,567.541 1629.03,571.25 1629.59,562.176 1630.15,585.876 1630.71,577.161 1631.27,566.248 1631.83,585.857 1632.39,621.638 1632.94,609.152 1633.5,618.447 1634.06,609.309 1634.62,614.235 1635.18,585.015 1635.74,642.84 1636.3,659.373 1636.86,691.797 1637.42,674.034 1637.98,675.648 1638.54,677.72 1639.1,661.399 1639.66,628.725 1640.21,636.713 1640.77,669.904 1641.33,689.175 1641.89,656.532 1642.45,704.668 1643.01,701.212 1643.57,718.68 1644.13,735.513 1644.69,715.99 1645.25,698.588 1645.81,692.979 1646.37,706.474 1646.93,689.226 1647.48,688.214 1648.04,719.571 1648.6,747.39 1649.16,741.433 1649.72,743.237 1650.28,737.22 1650.84,750.566 1651.4,796.57 1651.96,787.623 1652.52,731.354 1653.08,744.693 1653.64,728.537 1654.2,708.126 1654.76,704.762 1655.31,686.758 1655.87,670.868 1656.43,689.282 1656.99,688.09 1657.55,692.417 1658.11,676.504 1658.67,658.618 1659.23,661.829 1659.79,664.223 1660.35,634.064 1660.91,682.566 1661.47,664.111 1662.03,683.02 1662.58,663.273 1663.14,663.367 1663.7,683.955 1664.26,685.605 1664.82,701.883 1665.38,700.022 1665.94,728.565 1666.5,713.508 1667.06,740.804 1667.62,771.671 1668.18,750.764 1668.74,730.705 1669.3,711.27 1669.85,674.569 1670.41,674.959 1670.97,677.708 1671.53,677.964 1672.09,675.382 1672.65,659.086 1673.21,646.315 1673.77,648.455 1674.33,650.344 1674.89,670.891 1675.45,641.022 1676.01,593.394 1676.57,579.94 1677.13,584.187 1677.68,608.73 1678.24,615.325 1678.8,634.235 1679.36,624.006 1679.92,595.054 1680.48,596.104 1681.04,579.75 1681.6,586.578 1682.16,561.173 1682.72,572.13 1683.28,546.274 1683.84,554.237 1684.4,592.217 1684.95,596.366 1685.51,602.541 1686.07,640.982 1686.63,627.566 1687.19,630.461 1687.75,665.384 1688.31,633.179 1688.87,635.013 1689.43,638.176 1689.99,642.205 1690.55,678.159 1691.11,711.532 1691.67,725.462 1692.23,725.18 1692.78,739.679 1693.34,717.299 1693.9,698.848 1694.46,728.572 1695.02,743.359 1695.58,754.278 1696.14,745.002 1696.7,709.534 1697.26,690.626 1697.82,657.958 1698.38,644.513 1698.94,662.008 1699.5,628.99 1700.05,647.346 1700.61,663.434 1701.17,664.04 1701.73,683.033 1702.29,683.191 1702.85,665.915 1703.41,682.116 1703.97,652.231 1704.53,651.935 1705.09,655.725 1705.65,657.79 1706.21,654.965 1706.77,689.742 1707.32,692.402 1707.88,708.663 1708.44,738.32 1709,721.427 1709.56,720.263 1710.12,736.043 1710.68,716.893 1711.24,696.195 1711.8,699.068 1712.36,666.386 1712.92,665.382 1713.48,695.849 1714.04,699.152 1714.6,697.834 1715.15,716.512 1715.71,716.55 1716.27,698.931 1716.83,697.487 1717.39,715.631 1717.95,728.737 1718.51,692.447 1719.07,673.45 1719.63,709.339 1720.19,693.005 1720.75,675.338 1721.31,709.778 1721.87,727.958 1722.42,742.247 1722.98,754.133 1723.54,799.075 1724.1,795.52 1724.66,789.256 1725.22,774.007 1725.78,751.373 1726.34,744.313 1726.9,762.024 1727.46,736.24 1728.02,732.083 1728.58,714.707 1729.14,696.146 1729.69,694.855 1730.25,710.006 1730.81,693.578 1731.37,676.791 1731.93,690.192 1732.49,691.383 1733.05,690.477 1733.61,724.879 1734.17,707.831 1734.73,672.346 1735.29,673.845 1735.85,661.008 1736.41,645.486 1736.97,648.615 1737.52,633.765 1738.08,664.42 1738.64,680.403 1739.2,696.727 1739.76,697.477 1740.32,701.51 1740.88,701.441 1741.44,699.166 1742,697.767 1742.56,712.886 1743.12,740.545 1743.68,740.898 1744.24,757.682 1744.79,769.392 1745.35,766.717 1745.91,791.587 1746.47,797.841 1747.03,811.965 1747.59,804.61 1748.15,798.111 1748.71,775.044 1749.27,771.825 1749.83,797.697 1750.39,792.903 1750.95,770.782 1751.51,735.367 1752.06,735.335 1752.62,730.95 1753.18,794.595 1753.74,787.609 1754.3,802.076 1754.86,766.559 1755.42,748.096 1755.98,728.621 1756.54,743.156 1757.1,724.6 1757.66,706.48 1758.22,656.677 1758.78,645.166 1759.34,632.213 1759.89,651.496 1760.45,651.622 1761.01,651.977 1761.57,673.622 1762.13,657.992 1762.69,640.818 1763.25,672.378 1763.81,674.9 1764.37,687.335 1764.93,674.61 1765.49,642.796 1766.05,677.389 1766.61,662.128 1767.16,631.06 1767.72,649.521 1768.28,636.4 1768.84,605.28 1769.4,610.59 1769.96,613.069 1770.52,568.442 1771.08,592.689 1771.64,599.024 1772.2,637.306 1772.76,656.23 1773.32,642.614 1773.88,663.614 1774.43,649.943 1774.99,651.059 1775.55,654.656 1776.11,674.859 1776.67,690.112 1777.23,692.966 1777.79,660.423 1778.35,675.531 1778.91,676.827 1779.47,690.495 1780.03,688.685 1780.59,685.618 1781.15,704.86 1781.71,701.191 1782.26,716.209 1782.82,700.19 1783.38,685.485 1783.94,670.905 1784.5,689.44 1785.06,687.057 1785.62,650.489 1786.18,654.336 1786.74,669.966 1787.3,670.395 1787.86,651.586 1788.42,669.726 1788.98,667.931 1789.53,668.493 1790.09,703.979 1790.65,701.614 1791.21,669.806 1791.77,670.445 1792.33,686.795 1792.89,670.399 1793.45,656.096 1794.01,653.954 1794.57,655.596 1795.13,656.317 1795.69,605.049 1796.25,591.29 1796.8,595.109 1797.36,602.614 1797.92,605.858 1798.48,590.896 1799.04,583.174 1799.6,603.605 1800.16,655.901 1800.72,656.789 1801.28,658.168 1801.84,689.249 1802.4,703.647 1802.96,734.237 1803.52,729.299 1804.08,742.989 1804.63,724.496 1805.19,738.812 1805.75,735.157 1806.31,715.613 1806.87,728.891 1807.43,756.011 1807.99,748.831 1808.55,742.889 1809.11,720.024 1809.67,732.809 1810.23,747.239 1810.79,725.803 1811.35,740.616 1811.9,738.634 1812.46,719.312 1813.02,735.511 1813.58,681.561 1814.14,664.426 1814.7,649.556 1815.26,635.12 1815.82,621.814 1816.38,623.675 1816.94,624.303 1817.5,645.769 1818.06,628.854 1818.62,630.865 1819.18,630.909 1819.73,612.765 1820.29,620.537 1820.85,620.46 1821.41,625.515 1821.97,647.31 1822.53,649.882 1823.09,649.762 1823.65,652.706 1824.21,638.294 1824.77,639.513 1825.33,659.763 1825.89,658.654 1826.45,674.79 1827,679.465 1827.56,695.385 1828.12,709.631 1828.68,711.943 1829.24,693.246 1829.8,695.827 1830.36,661.805 1830.92,663.595 1831.48,681.694 1832.04,695.315 1832.6,697.322 1833.16,715.715 1833.72,743.452 1834.27,741.957 1834.83,740.15 1835.39,742.744 1835.95,742.883 1836.51,737.623 1837.07,734.234 1837.63,732.828 1838.19,747.636 \"/>\n<path clip-path=\"url(#clip933)\" d=\"M720.247 689.502 L720.806 689.502 L721.365 689.502 L721.924 689.502 L722.484 689.502 L723.043 689.502 L723.602 689.502 L724.161 689.502 L724.721 689.502 L725.28 689.502 L725.839 689.502 L726.398 689.502 L726.958 689.502 L727.517 689.502 L728.076 689.502 L728.635 689.502 L729.195 689.502 L729.754 689.502 L730.313 689.502 L730.872 689.502 L731.432 689.502 L731.991 689.502 L732.55 689.502 L733.109 689.502 L733.669 689.502 L734.228 689.502 L734.787 689.502 L735.346 689.502 L735.906 689.502 L736.465 689.502 L737.024 689.502 L737.583 689.502 L738.143 689.502 L738.702 689.502 L739.261 689.502 L739.82 689.502 L740.38 689.502 L740.939 689.502 L741.498 689.502 L742.057 689.502 L742.617 689.502 L743.176 689.502 L743.735 689.502 L744.294 689.502 L744.854 689.502 L745.413 689.502 L745.972 689.502 L746.531 689.502 L747.091 689.502 L747.65 689.502 L748.209 689.502 L748.768 689.502 L749.328 689.502 L749.887 689.502 L750.446 689.502 L751.005 689.502 L751.565 689.502 L752.124 689.502 L752.683 689.502 L753.242 689.502 L753.802 689.502 L754.361 689.502 L754.92 689.502 L755.479 689.502 L756.039 689.502 L756.598 689.502 L757.157 689.502 L757.716 689.502 L758.276 689.502 L758.835 689.502 L759.394 689.502 L759.953 689.502 L760.513 689.502 L761.072 689.502 L761.631 689.502 L762.19 689.502 L762.75 689.502 L763.309 689.502 L763.868 689.502 L764.427 689.502 L764.987 689.502 L765.546 689.502 L766.105 689.502 L766.664 689.502 L767.224 689.502 L767.783 689.502 L768.342 689.502 L768.901 689.502 L769.461 689.502 L770.02 689.502 L770.579 689.502 L771.138 689.502 L771.698 689.502 L772.257 689.502 L772.816 689.502 L773.375 689.502 L773.935 689.502 L774.494 689.502 L775.053 689.502 L775.612 689.502 L776.172 689.502 L776.731 689.502 L777.29 689.502 L777.849 689.502 L778.409 689.502 L778.968 689.502 L779.527 689.502 L780.086 689.502 L780.646 689.502 L781.205 689.502 L781.764 689.502 L782.323 689.502 L782.883 689.502 L783.442 689.502 L784.001 689.502 L784.56 689.502 L785.12 689.502 L785.679 689.502 L786.238 689.502 L786.797 689.502 L787.357 689.502 L787.916 689.502 L788.475 689.502 L789.034 689.502 L789.594 689.502 L790.153 689.502 L790.712 689.502 L791.271 689.502 L791.831 689.502 L792.39 689.502 L792.949 689.502 L793.508 689.502 L794.068 689.502 L794.627 689.502 L795.186 689.502 L795.745 689.502 L796.305 689.502 L796.864 689.502 L797.423 689.502 L797.982 689.502 L798.542 689.502 L799.101 689.502 L799.66 689.502 L800.219 689.502 L800.779 689.502 L801.338 689.502 L801.897 689.502 L802.456 689.502 L803.016 689.502 L803.575 689.502 L804.134 689.502 L804.693 689.502 L805.253 689.502 L805.812 689.502 L806.371 689.502 L806.931 689.502 L807.49 689.502 L808.049 689.502 L808.608 689.502 L809.168 689.502 L809.727 689.502 L810.286 689.502 L810.845 689.502 L811.405 689.502 L811.964 689.502 L812.523 689.502 L813.082 689.502 L813.642 689.502 L814.201 689.502 L814.76 689.502 L815.319 689.502 L815.879 689.502 L816.438 689.502 L816.997 689.502 L817.556 689.502 L818.116 689.502 L818.675 689.502 L819.234 689.502 L819.793 689.502 L820.353 689.502 L820.912 689.502 L821.471 689.502 L822.03 689.502 L822.59 689.502 L823.149 689.502 L823.708 689.502 L824.267 689.502 L824.827 689.502 L825.386 689.502 L825.945 689.502 L826.504 689.502 L827.064 689.502 L827.623 689.502 L828.182 689.502 L828.741 689.502 L829.301 689.502 L829.86 689.502 L830.419 689.502 L830.978 689.502 L831.538 689.502 L832.097 689.502 L832.656 689.502 L833.215 689.502 L833.775 689.502 L834.334 689.502 L834.893 689.502 L835.452 689.502 L836.012 689.502 L836.571 689.502 L837.13 689.502 L837.689 689.502 L838.249 689.502 L838.808 689.502 L839.367 689.502 L839.926 689.502 L840.486 689.502 L841.045 689.502 L841.604 689.502 L842.163 689.502 L842.723 689.502 L843.282 689.502 L843.841 689.502 L844.4 689.502 L844.96 689.502 L845.519 689.502 L846.078 689.502 L846.637 689.502 L847.197 689.502 L847.756 689.502 L848.315 689.502 L848.874 689.502 L849.434 689.502 L849.993 689.502 L850.552 689.502 L851.111 689.502 L851.671 689.502 L852.23 689.502 L852.789 689.502 L853.348 689.502 L853.908 689.502 L854.467 689.502 L855.026 689.502 L855.585 689.502 L856.145 689.502 L856.704 689.502 L857.263 689.502 L857.822 689.502 L858.382 689.502 L858.941 689.502 L859.5 689.502 L860.059 689.502 L860.619 689.502 L861.178 689.502 L861.737 689.502 L862.296 689.502 L862.856 689.502 L863.415 689.502 L863.974 689.502 L864.533 689.502 L865.093 689.502 L865.652 689.502 L866.211 689.502 L866.77 689.502 L867.33 689.502 L867.889 689.502 L868.448 689.502 L869.007 689.502 L869.567 689.502 L870.126 689.502 L870.685 689.502 L871.244 689.502 L871.804 689.502 L872.363 689.502 L872.922 689.502 L873.481 689.502 L874.041 689.502 L874.6 689.502 L875.159 689.502 L875.718 689.502 L876.278 689.502 L876.837 689.502 L877.396 689.502 L877.955 689.502 L878.515 689.502 L879.074 689.502 L879.633 689.502 L880.192 689.502 L880.752 689.502 L881.311 689.502 L881.87 689.502 L882.429 689.502 L882.989 689.502 L883.548 689.502 L884.107 689.502 L884.666 689.502 L885.226 689.502 L885.785 689.502 L886.344 689.502 L886.903 689.502 L887.463 689.502 L888.022 689.502 L888.581 689.502 L889.14 689.502 L889.7 689.502 L890.259 689.502 L890.818 689.502 L891.377 689.502 L891.937 689.502 L892.496 689.502 L893.055 689.502 L893.614 689.502 L894.174 689.502 L894.733 689.502 L895.292 689.502 L895.851 689.502 L896.411 689.502 L896.97 689.502 L897.529 689.502 L898.088 689.502 L898.648 689.502 L899.207 689.502 L899.766 689.502 L900.325 689.502 L900.885 689.502 L901.444 689.502 L902.003 689.502 L902.562 689.502 L903.122 689.502 L903.681 689.502 L904.24 689.502 L904.799 689.502 L905.359 689.502 L905.918 689.502 L906.477 689.502 L907.036 689.502 L907.596 689.502 L908.155 689.502 L908.714 689.502 L909.273 689.502 L909.833 689.502 L910.392 689.502 L910.951 689.502 L911.51 689.502 L912.07 689.502 L912.629 689.502 L913.188 689.502 L913.747 689.502 L914.307 689.502 L914.866 689.502 L915.425 689.502 L915.984 689.502 L916.544 689.502 L917.103 689.502 L917.662 689.502 L918.221 689.502 L918.781 689.502 L919.34 689.502 L919.899 689.502 L920.458 689.502 L921.018 689.502 L921.577 689.502 L922.136 689.502 L922.695 689.502 L923.255 689.502 L923.814 689.502 L924.373 689.502 L924.932 689.502 L925.492 689.502 L926.051 689.502 L926.61 689.502 L927.169 689.502 L927.729 689.502 L928.288 689.502 L928.847 689.502 L929.406 689.502 L929.966 689.502 L930.525 689.502 L931.084 689.502 L931.644 689.502 L932.203 689.502 L932.762 689.502 L933.321 689.502 L933.881 689.502 L934.44 689.502 L934.999 689.502 L935.558 689.502 L936.118 689.502 L936.677 689.502 L937.236 689.502 L937.795 689.502 L938.355 689.502 L938.914 689.502 L939.473 689.502 L940.032 689.502 L940.592 689.502 L941.151 689.502 L941.71 689.502 L942.269 689.502 L942.829 689.502 L943.388 689.502 L943.947 689.502 L944.506 689.502 L945.066 689.502 L945.625 689.502 L946.184 689.502 L946.743 689.502 L947.303 689.502 L947.862 689.502 L948.421 689.502 L948.98 689.502 L949.54 689.502 L950.099 689.502 L950.658 689.502 L951.217 689.502 L951.777 689.502 L952.336 689.502 L952.895 689.502 L953.454 689.502 L954.014 689.502 L954.573 689.502 L955.132 689.502 L955.691 689.502 L956.251 689.502 L956.81 689.502 L957.369 689.502 L957.928 689.502 L958.488 689.502 L959.047 689.502 L959.606 689.502 L960.165 689.502 L960.725 689.502 L961.284 689.502 L961.843 689.502 L962.402 689.502 L962.962 689.502 L963.521 689.502 L964.08 689.502 L964.639 689.502 L965.199 689.502 L965.758 689.502 L966.317 689.502 L966.876 689.502 L967.436 689.502 L967.995 689.502 L968.554 689.502 L969.113 689.502 L969.673 689.502 L970.232 689.502 L970.791 689.502 L971.35 689.502 L971.91 689.502 L972.469 689.502 L973.028 689.502 L973.587 689.502 L974.147 689.502 L974.706 689.502 L975.265 689.502 L975.824 689.502 L976.384 689.502 L976.943 689.502 L977.502 689.502 L978.061 689.502 L978.621 689.502 L979.18 689.502 L979.739 689.502 L980.298 689.502 L980.858 689.502 L981.417 689.502 L981.976 689.502 L982.535 689.502 L983.095 689.502 L983.654 689.502 L984.213 689.502 L984.772 689.502 L985.332 689.502 L985.891 689.502 L986.45 689.502 L987.009 689.502 L987.569 689.502 L988.128 689.502 L988.687 689.502 L989.246 689.502 L989.806 689.502 L990.365 689.502 L990.924 689.502 L991.483 689.502 L992.043 689.502 L992.602 689.502 L993.161 689.502 L993.72 689.502 L994.28 689.502 L994.839 689.502 L995.398 689.502 L995.957 689.502 L996.517 689.502 L997.076 689.502 L997.635 689.502 L998.194 689.502 L998.754 689.502 L999.313 689.502 L999.872 689.502 L1000.43 689.502 L1000.99 689.502 L1001.55 689.502 L1002.11 689.502 L1002.67 689.502 L1003.23 689.502 L1003.79 689.502 L1004.35 689.502 L1004.91 689.502 L1005.46 689.502 L1006.02 689.502 L1006.58 689.502 L1007.14 689.502 L1007.7 689.502 L1008.26 689.502 L1008.82 689.502 L1009.38 689.502 L1009.94 689.502 L1010.5 689.502 L1011.06 689.502 L1011.62 689.502 L1012.18 689.502 L1012.73 689.502 L1013.29 689.502 L1013.85 689.502 L1014.41 689.502 L1014.97 689.502 L1015.53 689.502 L1016.09 689.502 L1016.65 689.502 L1017.21 689.502 L1017.77 689.502 L1018.33 689.502 L1018.89 689.502 L1019.45 689.502 L1020.01 689.502 L1020.56 689.502 L1021.12 689.502 L1021.68 689.502 L1022.24 689.502 L1022.8 689.502 L1023.36 689.502 L1023.92 689.502 L1024.48 689.502 L1025.04 689.502 L1025.6 689.502 L1026.16 689.502 L1026.72 689.502 L1027.28 689.502 L1027.83 689.502 L1028.39 689.502 L1028.95 689.502 L1029.51 689.502 L1030.07 689.502 L1030.63 689.502 L1031.19 689.502 L1031.75 689.502 L1032.31 689.502 L1032.87 689.502 L1033.43 689.502 L1033.99 689.502 L1034.55 689.502 L1035.1 689.502 L1035.66 689.502 L1036.22 689.502 L1036.78 689.502 L1037.34 689.502 L1037.9 689.502 L1038.46 689.502 L1039.02 689.502 L1039.58 689.502 L1040.14 689.502 L1040.7 689.502 L1041.26 689.502 L1041.82 689.502 L1042.38 689.502 L1042.93 689.502 L1043.49 689.502 L1044.05 689.502 L1044.61 689.502 L1045.17 689.502 L1045.73 689.502 L1046.29 689.502 L1046.85 689.502 L1047.41 689.502 L1047.97 689.502 L1048.53 689.502 L1049.09 689.502 L1049.65 689.502 L1050.2 689.502 L1050.76 689.502 L1051.32 689.502 L1051.88 689.502 L1052.44 689.502 L1053 689.502 L1053.56 689.502 L1054.12 689.502 L1054.68 689.502 L1055.24 689.502 L1055.8 689.502 L1056.36 689.502 L1056.92 689.502 L1057.48 689.502 L1058.03 689.502 L1058.59 689.502 L1059.15 689.502 L1059.71 689.502 L1060.27 689.502 L1060.83 689.502 L1061.39 689.502 L1061.95 689.502 L1062.51 689.502 L1063.07 689.502 L1063.63 689.502 L1064.19 689.502 L1064.75 689.502 L1065.3 689.502 L1065.86 689.502 L1066.42 689.502 L1066.98 689.502 L1067.54 689.502 L1068.1 689.502 L1068.66 689.502 L1069.22 689.502 L1069.78 689.502 L1070.34 689.502 L1070.9 689.502 L1071.46 689.502 L1072.02 689.502 L1072.57 689.502 L1073.13 689.502 L1073.69 689.502 L1074.25 689.502 L1074.81 689.502 L1075.37 689.502 L1075.93 689.502 L1076.49 689.502 L1077.05 689.502 L1077.61 689.502 L1078.17 689.502 L1078.73 689.502 L1079.29 689.502 L1079.85 689.502 L1080.4 689.502 L1080.96 689.502 L1081.52 689.502 L1082.08 689.502 L1082.64 689.502 L1083.2 689.502 L1083.76 689.502 L1084.32 689.502 L1084.88 689.502 L1085.44 689.502 L1086 689.502 L1086.56 689.502 L1087.12 689.502 L1087.67 689.502 L1088.23 689.502 L1088.79 689.502 L1089.35 689.502 L1089.91 689.502 L1090.47 689.502 L1091.03 689.502 L1091.59 689.502 L1092.15 689.502 L1092.71 689.502 L1093.27 689.502 L1093.83 689.502 L1094.39 689.502 L1094.94 689.502 L1095.5 689.502 L1096.06 689.502 L1096.62 689.502 L1097.18 689.502 L1097.74 689.502 L1098.3 689.502 L1098.86 689.502 L1099.42 689.502 L1099.98 689.502 L1100.54 689.502 L1101.1 689.502 L1101.66 689.502 L1102.22 689.502 L1102.77 689.502 L1103.33 689.502 L1103.89 689.502 L1104.45 689.502 L1105.01 689.502 L1105.57 689.502 L1106.13 689.502 L1106.69 689.502 L1107.25 689.502 L1107.81 689.502 L1108.37 689.502 L1108.93 689.502 L1109.49 689.502 L1110.04 689.502 L1110.6 689.502 L1111.16 689.502 L1111.72 689.502 L1112.28 689.502 L1112.84 689.502 L1113.4 689.502 L1113.96 689.502 L1114.52 689.502 L1115.08 689.502 L1115.64 689.502 L1116.2 689.502 L1116.76 689.502 L1117.31 689.502 L1117.87 689.502 L1118.43 689.502 L1118.99 689.502 L1119.55 689.502 L1120.11 689.502 L1120.67 689.502 L1121.23 689.502 L1121.79 689.502 L1122.35 689.502 L1122.91 689.502 L1123.47 689.502 L1124.03 689.502 L1124.59 689.502 L1125.14 689.502 L1125.7 689.502 L1126.26 689.502 L1126.82 689.502 L1127.38 689.502 L1127.94 689.502 L1128.5 689.502 L1129.06 689.502 L1129.62 689.502 L1130.18 689.502 L1130.74 689.502 L1131.3 689.502 L1131.86 689.502 L1132.41 689.502 L1132.97 689.502 L1133.53 689.502 L1134.09 689.502 L1134.65 689.502 L1135.21 689.502 L1135.77 689.502 L1136.33 689.502 L1136.89 689.502 L1137.45 689.502 L1138.01 689.502 L1138.57 689.502 L1139.13 689.502 L1139.68 689.502 L1140.24 689.502 L1140.8 689.502 L1141.36 689.502 L1141.92 689.502 L1142.48 689.502 L1143.04 689.502 L1143.6 689.502 L1144.16 689.502 L1144.72 689.502 L1145.28 689.502 L1145.84 689.502 L1146.4 689.502 L1146.96 689.502 L1147.51 689.502 L1148.07 689.502 L1148.63 689.502 L1149.19 689.502 L1149.75 689.502 L1150.31 689.502 L1150.87 689.502 L1151.43 689.502 L1151.99 689.502 L1152.55 689.502 L1153.11 689.502 L1153.67 689.502 L1154.23 689.502 L1154.78 689.502 L1155.34 689.502 L1155.9 689.502 L1156.46 689.502 L1157.02 689.502 L1157.58 689.502 L1158.14 689.502 L1158.7 689.502 L1159.26 689.502 L1159.82 689.502 L1160.38 689.502 L1160.94 689.502 L1161.5 689.502 L1162.05 689.502 L1162.61 689.502 L1163.17 689.502 L1163.73 689.502 L1164.29 689.502 L1164.85 689.502 L1165.41 689.502 L1165.97 689.502 L1166.53 689.502 L1167.09 689.502 L1167.65 689.502 L1168.21 689.502 L1168.77 689.502 L1169.33 689.502 L1169.88 689.502 L1170.44 689.502 L1171 689.502 L1171.56 689.502 L1172.12 689.502 L1172.68 689.502 L1173.24 689.502 L1173.8 689.502 L1174.36 689.502 L1174.92 689.502 L1175.48 689.502 L1176.04 689.502 L1176.6 689.502 L1177.15 689.502 L1177.71 689.502 L1178.27 689.502 L1178.83 689.502 L1179.39 689.502 L1179.95 689.502 L1180.51 689.502 L1181.07 689.502 L1181.63 689.502 L1182.19 689.502 L1182.75 689.502 L1183.31 689.502 L1183.87 689.502 L1184.43 689.502 L1184.98 689.502 L1185.54 689.502 L1186.1 689.502 L1186.66 689.502 L1187.22 689.502 L1187.78 689.502 L1188.34 689.502 L1188.9 689.502 L1189.46 689.502 L1190.02 689.502 L1190.58 689.502 L1191.14 689.502 L1191.7 689.502 L1192.25 689.502 L1192.81 689.502 L1193.37 689.502 L1193.93 689.502 L1194.49 689.502 L1195.05 689.502 L1195.61 689.502 L1196.17 689.502 L1196.73 689.502 L1197.29 689.502 L1197.85 689.502 L1198.41 689.502 L1198.97 689.502 L1199.52 689.502 L1200.08 689.502 L1200.64 689.502 L1201.2 689.502 L1201.76 689.502 L1202.32 689.502 L1202.88 689.502 L1203.44 689.502 L1204 689.502 L1204.56 689.502 L1205.12 689.502 L1205.68 689.502 L1206.24 689.502 L1206.8 689.502 L1207.35 689.502 L1207.91 689.502 L1208.47 689.502 L1209.03 689.502 L1209.59 689.502 L1210.15 689.502 L1210.71 689.502 L1211.27 689.502 L1211.83 689.502 L1212.39 689.502 L1212.95 689.502 L1213.51 689.502 L1214.07 689.502 L1214.62 689.502 L1215.18 689.502 L1215.74 689.502 L1216.3 689.502 L1216.86 689.502 L1217.42 689.502 L1217.98 689.502 L1218.54 689.502 L1219.1 689.502 L1219.66 689.502 L1220.22 689.502 L1220.78 689.502 L1221.34 689.502 L1221.89 689.502 L1222.45 689.502 L1223.01 689.502 L1223.57 689.502 L1224.13 689.502 L1224.69 689.502 L1225.25 689.502 L1225.81 689.502 L1226.37 689.502 L1226.93 689.502 L1227.49 689.502 L1228.05 689.502 L1228.61 689.502 L1229.17 689.502 L1229.72 689.502 L1230.28 689.502 L1230.84 689.502 L1231.4 689.502 L1231.96 689.502 L1232.52 689.502 L1233.08 689.502 L1233.64 689.502 L1234.2 689.502 L1234.76 689.502 L1235.32 689.502 L1235.88 689.502 L1236.44 689.502 L1236.99 689.502 L1237.55 689.502 L1238.11 689.502 L1238.67 689.502 L1239.23 689.502 L1239.79 689.502 L1240.35 689.502 L1240.91 689.502 L1241.47 689.502 L1242.03 689.502 L1242.59 689.502 L1243.15 689.502 L1243.71 689.502 L1244.26 689.502 L1244.82 689.502 L1245.38 689.502 L1245.94 689.502 L1246.5 689.502 L1247.06 689.502 L1247.62 689.502 L1248.18 689.502 L1248.74 689.502 L1249.3 689.502 L1249.86 689.502 L1250.42 689.502 L1250.98 689.502 L1251.54 689.502 L1252.09 689.502 L1252.65 689.502 L1253.21 689.502 L1253.77 689.502 L1254.33 689.502 L1254.89 689.502 L1255.45 689.502 L1256.01 689.502 L1256.57 689.502 L1257.13 689.502 L1257.69 689.502 L1258.25 689.502 L1258.81 689.502 L1259.36 689.502 L1259.92 689.502 L1260.48 689.502 L1261.04 689.502 L1261.6 689.502 L1262.16 689.502 L1262.72 689.502 L1263.28 689.502 L1263.84 689.502 L1264.4 689.502 L1264.96 689.502 L1265.52 689.502 L1266.08 689.502 L1266.63 689.502 L1267.19 689.502 L1267.75 689.502 L1268.31 689.502 L1268.87 689.502 L1269.43 689.502 L1269.99 689.502 L1270.55 689.502 L1271.11 689.502 L1271.67 689.502 L1272.23 689.502 L1272.79 689.502 L1273.35 689.502 L1273.91 689.502 L1274.46 689.502 L1275.02 689.502 L1275.58 689.502 L1276.14 689.502 L1276.7 689.502 L1277.26 689.502 L1277.82 689.502 L1278.38 689.502 L1278.94 689.502 L1279.5 689.502 L1280.06 689.502 L1280.62 689.502 L1281.18 689.502 L1281.73 689.502 L1282.29 689.502 L1282.85 689.502 L1283.41 689.502 L1283.97 689.502 L1284.53 689.502 L1285.09 689.502 L1285.65 689.502 L1286.21 689.502 L1286.77 689.502 L1287.33 689.502 L1287.89 689.502 L1288.45 689.502 L1289 689.502 L1289.56 689.502 L1290.12 689.502 L1290.68 689.502 L1291.24 689.502 L1291.8 689.502 L1292.36 689.502 L1292.92 689.502 L1293.48 689.502 L1294.04 689.502 L1294.6 689.502 L1295.16 689.502 L1295.72 689.502 L1296.28 689.502 L1296.83 689.502 L1297.39 689.502 L1297.95 689.502 L1298.51 689.502 L1299.07 689.502 L1299.63 689.502 L1300.19 689.502 L1300.75 689.502 L1301.31 689.502 L1301.87 689.502 L1302.43 689.502 L1302.99 689.502 L1303.55 689.502 L1304.1 689.502 L1304.66 689.502 L1305.22 689.502 L1305.78 689.502 L1306.34 689.502 L1306.9 689.502 L1307.46 689.502 L1308.02 689.502 L1308.58 689.502 L1309.14 689.502 L1309.7 689.502 L1310.26 689.502 L1310.82 689.502 L1311.38 689.502 L1311.93 689.502 L1312.49 689.502 L1313.05 689.502 L1313.61 689.502 L1314.17 689.502 L1314.73 689.502 L1315.29 689.502 L1315.85 689.502 L1316.41 689.502 L1316.97 689.502 L1317.53 689.502 L1318.09 689.502 L1318.65 689.502 L1319.2 689.502 L1319.76 689.502 L1320.32 689.502 L1320.88 689.502 L1321.44 689.502 L1322 689.502 L1322.56 689.502 L1323.12 689.502 L1323.68 689.502 L1324.24 689.502 L1324.8 689.502 L1325.36 689.502 L1325.92 689.502 L1326.47 689.502 L1327.03 689.502 L1327.59 689.502 L1328.15 689.502 L1328.71 689.502 L1329.27 689.502 L1329.83 689.502 L1330.39 689.502 L1330.95 689.502 L1331.51 689.502 L1332.07 689.502 L1332.63 689.502 L1333.19 689.502 L1333.75 689.502 L1334.3 689.502 L1334.86 689.502 L1335.42 689.502 L1335.98 689.502 L1336.54 689.502 L1337.1 689.502 L1337.66 689.502 L1338.22 689.502 L1338.78 689.502 L1339.34 689.502 L1339.9 689.502 L1340.46 689.502 L1341.02 689.502 L1341.57 689.502 L1342.13 689.502 L1342.69 689.502 L1343.25 689.502 L1343.81 689.502 L1344.37 689.502 L1344.93 689.502 L1345.49 689.502 L1346.05 689.502 L1346.61 689.502 L1347.17 689.502 L1347.73 689.502 L1348.29 689.502 L1348.84 689.502 L1349.4 689.502 L1349.96 689.502 L1350.52 689.502 L1351.08 689.502 L1351.64 689.502 L1352.2 689.502 L1352.76 689.502 L1353.32 689.502 L1353.88 689.502 L1354.44 689.502 L1355 689.502 L1355.56 689.502 L1356.12 689.502 L1356.67 689.502 L1357.23 689.502 L1357.79 689.502 L1358.35 689.502 L1358.91 689.502 L1359.47 689.502 L1360.03 689.502 L1360.59 689.502 L1361.15 689.502 L1361.71 689.502 L1362.27 689.502 L1362.83 689.502 L1363.39 689.502 L1363.94 689.502 L1364.5 689.502 L1365.06 689.502 L1365.62 689.502 L1366.18 689.502 L1366.74 689.502 L1367.3 689.502 L1367.86 689.502 L1368.42 689.502 L1368.98 689.502 L1369.54 689.502 L1370.1 689.502 L1370.66 689.502 L1371.21 689.502 L1371.77 689.502 L1372.33 689.502 L1372.89 689.502 L1373.45 689.502 L1374.01 689.502 L1374.57 689.502 L1375.13 689.502 L1375.69 689.502 L1376.25 689.502 L1376.81 689.502 L1377.37 689.502 L1377.93 689.502 L1378.49 689.502 L1379.04 689.502 L1379.6 689.502 L1380.16 689.502 L1380.72 689.502 L1381.28 689.502 L1381.84 689.502 L1382.4 689.502 L1382.96 689.502 L1383.52 689.502 L1384.08 689.502 L1384.64 689.502 L1385.2 689.502 L1385.76 689.502 L1386.31 689.502 L1386.87 689.502 L1387.43 689.502 L1387.99 689.502 L1388.55 689.502 L1389.11 689.502 L1389.67 689.502 L1390.23 689.502 L1390.79 689.502 L1391.35 689.502 L1391.91 689.502 L1392.47 689.502 L1393.03 689.502 L1393.58 689.502 L1394.14 689.502 L1394.7 689.502 L1395.26 689.502 L1395.82 689.502 L1396.38 689.502 L1396.94 689.502 L1397.5 689.502 L1398.06 689.502 L1398.62 689.502 L1399.18 689.502 L1399.74 689.502 L1400.3 689.502 L1400.86 689.502 L1401.41 689.502 L1401.97 689.502 L1402.53 689.502 L1403.09 689.502 L1403.65 689.502 L1404.21 689.502 L1404.77 689.502 L1405.33 689.502 L1405.89 689.502 L1406.45 689.502 L1407.01 689.502 L1407.57 689.502 L1408.13 689.502 L1408.68 689.502 L1409.24 689.502 L1409.8 689.502 L1410.36 689.502 L1410.92 689.502 L1411.48 689.502 L1412.04 689.502 L1412.6 689.502 L1413.16 689.502 L1413.72 689.502 L1414.28 689.502 L1414.84 689.502 L1415.4 689.502 L1415.95 689.502 L1416.51 689.502 L1417.07 689.502 L1417.63 689.502 L1418.19 689.502 L1418.75 689.502 L1419.31 689.502 L1419.87 689.502 L1420.43 689.502 L1420.99 689.502 L1421.55 689.502 L1422.11 689.502 L1422.67 689.502 L1423.23 689.502 L1423.78 689.502 L1424.34 689.502 L1424.9 689.502 L1425.46 689.502 L1426.02 689.502 L1426.58 689.502 L1427.14 689.502 L1427.7 689.502 L1428.26 689.502 L1428.82 689.502 L1429.38 689.502 L1429.94 689.502 L1430.5 689.502 L1431.05 689.502 L1431.61 689.502 L1432.17 689.502 L1432.73 689.502 L1433.29 689.502 L1433.85 689.502 L1434.41 689.502 L1434.97 689.502 L1435.53 689.502 L1436.09 689.502 L1436.65 689.502 L1437.21 689.502 L1437.77 689.502 L1438.33 689.502 L1438.88 689.502 L1439.44 689.502 L1440 689.502 L1440.56 689.502 L1441.12 689.502 L1441.68 689.502 L1442.24 689.502 L1442.8 689.502 L1443.36 689.502 L1443.92 689.502 L1444.48 689.502 L1445.04 689.502 L1445.6 689.502 L1446.15 689.502 L1446.71 689.502 L1447.27 689.502 L1447.83 689.502 L1448.39 689.502 L1448.95 689.502 L1449.51 689.502 L1450.07 689.502 L1450.63 689.502 L1451.19 689.502 L1451.75 689.502 L1452.31 689.502 L1452.87 689.502 L1453.42 689.502 L1453.98 689.502 L1454.54 689.502 L1455.1 689.502 L1455.66 689.502 L1456.22 689.502 L1456.78 689.502 L1457.34 689.502 L1457.9 689.502 L1458.46 689.502 L1459.02 689.502 L1459.58 689.502 L1460.14 689.502 L1460.7 689.502 L1461.25 689.502 L1461.81 689.502 L1462.37 689.502 L1462.93 689.502 L1463.49 689.502 L1464.05 689.502 L1464.61 689.502 L1465.17 689.502 L1465.73 689.502 L1466.29 689.502 L1466.85 689.502 L1467.41 689.502 L1467.97 689.502 L1468.52 689.502 L1469.08 689.502 L1469.64 689.502 L1470.2 689.502 L1470.76 689.502 L1471.32 689.502 L1471.88 689.502 L1472.44 689.502 L1473 689.502 L1473.56 689.502 L1474.12 689.502 L1474.68 689.502 L1475.24 689.502 L1475.79 689.502 L1476.35 689.502 L1476.91 689.502 L1477.47 689.502 L1478.03 689.502 L1478.59 689.502 L1479.15 689.502 L1479.71 689.502 L1480.27 689.502 L1480.83 689.502 L1481.39 689.502 L1481.95 689.502 L1482.51 689.502 L1483.07 689.502 L1483.62 689.502 L1484.18 689.502 L1484.74 689.502 L1485.3 689.502 L1485.86 689.502 L1486.42 689.502 L1486.98 689.502 L1487.54 689.502 L1488.1 689.502 L1488.66 689.502 L1489.22 689.502 L1489.78 689.502 L1490.34 689.502 L1490.89 689.502 L1491.45 689.502 L1492.01 689.502 L1492.57 689.502 L1493.13 689.502 L1493.69 689.502 L1494.25 689.502 L1494.81 689.502 L1495.37 689.502 L1495.93 689.502 L1496.49 689.502 L1497.05 689.502 L1497.61 689.502 L1498.16 689.502 L1498.72 689.502 L1499.28 689.502 L1499.84 689.502 L1500.4 689.502 L1500.96 689.502 L1501.52 689.502 L1502.08 689.502 L1502.64 689.502 L1503.2 689.502 L1503.76 689.502 L1504.32 689.502 L1504.88 689.502 L1505.44 689.502 L1505.99 689.502 L1506.55 689.502 L1507.11 689.502 L1507.67 689.502 L1508.23 689.502 L1508.79 689.502 L1509.35 689.502 L1509.91 689.502 L1510.47 689.502 L1511.03 689.502 L1511.59 689.502 L1512.15 689.502 L1512.71 689.502 L1513.26 689.502 L1513.82 689.502 L1514.38 689.502 L1514.94 689.502 L1515.5 689.502 L1516.06 689.502 L1516.62 689.502 L1517.18 689.502 L1517.74 689.502 L1518.3 689.502 L1518.86 689.502 L1519.42 689.502 L1519.98 689.502 L1520.53 689.502 L1521.09 689.502 L1521.65 689.502 L1522.21 689.502 L1522.77 689.502 L1523.33 689.502 L1523.89 689.502 L1524.45 689.502 L1525.01 689.502 L1525.57 689.502 L1526.13 689.502 L1526.69 689.502 L1527.25 689.502 L1527.81 689.502 L1528.36 689.502 L1528.92 689.502 L1529.48 689.502 L1530.04 689.502 L1530.6 689.502 L1531.16 689.502 L1531.72 689.502 L1532.28 689.502 L1532.84 689.502 L1533.4 689.502 L1533.96 689.502 L1534.52 689.502 L1535.08 689.502 L1535.63 689.502 L1536.19 689.502 L1536.75 689.502 L1537.31 689.502 L1537.87 689.502 L1538.43 689.502 L1538.99 689.502 L1539.55 689.502 L1540.11 689.502 L1540.67 689.502 L1541.23 689.502 L1541.79 689.502 L1542.35 689.502 L1542.9 689.502 L1543.46 689.502 L1544.02 689.502 L1544.58 689.502 L1545.14 689.502 L1545.7 689.502 L1546.26 689.502 L1546.82 689.502 L1547.38 689.502 L1547.94 689.502 L1548.5 689.502 L1549.06 689.502 L1549.62 689.502 L1550.18 689.502 L1550.73 689.502 L1551.29 689.502 L1551.85 689.502 L1552.41 689.502 L1552.97 689.502 L1553.53 689.502 L1554.09 689.502 L1554.65 689.502 L1555.21 689.502 L1555.77 689.502 L1556.33 689.502 L1556.89 689.502 L1557.45 689.502 L1558 689.502 L1558.56 689.502 L1559.12 689.502 L1559.68 689.502 L1560.24 689.502 L1560.8 689.502 L1561.36 689.502 L1561.92 689.502 L1562.48 689.502 L1563.04 689.502 L1563.6 689.502 L1564.16 689.502 L1564.72 689.502 L1565.28 689.502 L1565.83 689.502 L1566.39 689.502 L1566.95 689.502 L1567.51 689.502 L1568.07 689.502 L1568.63 689.502 L1569.19 689.502 L1569.75 689.502 L1570.31 689.502 L1570.87 689.502 L1571.43 689.502 L1571.99 689.502 L1572.55 689.502 L1573.1 689.502 L1573.66 689.502 L1574.22 689.502 L1574.78 689.502 L1575.34 689.502 L1575.9 689.502 L1576.46 689.502 L1577.02 689.502 L1577.58 689.502 L1578.14 689.502 L1578.7 689.502 L1579.26 689.502 L1579.82 689.502 L1580.37 689.502 L1580.93 689.502 L1581.49 689.502 L1582.05 689.502 L1582.61 689.502 L1583.17 689.502 L1583.73 689.502 L1584.29 689.502 L1584.85 689.502 L1585.41 689.502 L1585.97 689.502 L1586.53 689.502 L1587.09 689.502 L1587.65 689.502 L1588.2 689.502 L1588.76 689.502 L1589.32 689.502 L1589.88 689.502 L1590.44 689.502 L1591 689.502 L1591.56 689.502 L1592.12 689.502 L1592.68 689.502 L1593.24 689.502 L1593.8 689.502 L1594.36 689.502 L1594.92 689.502 L1595.47 689.502 L1596.03 689.502 L1596.59 689.502 L1597.15 689.502 L1597.71 689.502 L1598.27 689.502 L1598.83 689.502 L1599.39 689.502 L1599.95 689.502 L1600.51 689.502 L1601.07 689.502 L1601.63 689.502 L1602.19 689.502 L1602.74 689.502 L1603.3 689.502 L1603.86 689.502 L1604.42 689.502 L1604.98 689.502 L1605.54 689.502 L1606.1 689.502 L1606.66 689.502 L1607.22 689.502 L1607.78 689.502 L1608.34 689.502 L1608.9 689.502 L1609.46 689.502 L1610.02 689.502 L1610.57 689.502 L1611.13 689.502 L1611.69 689.502 L1612.25 689.502 L1612.81 689.502 L1613.37 689.502 L1613.93 689.502 L1614.49 689.502 L1615.05 689.502 L1615.61 689.502 L1616.17 689.502 L1616.73 689.502 L1617.29 689.502 L1617.84 689.502 L1618.4 689.502 L1618.96 689.502 L1619.52 689.502 L1620.08 689.502 L1620.64 689.502 L1621.2 689.502 L1621.76 689.502 L1622.32 689.502 L1622.88 689.502 L1623.44 689.502 L1624 689.502 L1624.56 689.502 L1625.11 689.502 L1625.67 689.502 L1626.23 689.502 L1626.79 689.502 L1627.35 689.502 L1627.91 689.502 L1628.47 689.502 L1629.03 689.502 L1629.59 689.502 L1630.15 689.502 L1630.71 689.502 L1631.27 689.502 L1631.83 689.502 L1632.39 689.502 L1632.94 689.502 L1633.5 689.502 L1634.06 689.502 L1634.62 689.502 L1635.18 689.502 L1635.74 689.502 L1636.3 689.502 L1636.86 689.502 L1637.42 689.502 L1637.98 689.502 L1638.54 689.502 L1639.1 689.502 L1639.66 689.502 L1640.21 689.502 L1640.77 689.502 L1641.33 689.502 L1641.89 689.502 L1642.45 689.502 L1643.01 689.502 L1643.57 689.502 L1644.13 689.502 L1644.69 689.502 L1645.25 689.502 L1645.81 689.502 L1646.37 689.502 L1646.93 689.502 L1647.48 689.502 L1648.04 689.502 L1648.6 689.502 L1649.16 689.502 L1649.72 689.502 L1650.28 689.502 L1650.84 689.502 L1651.4 689.502 L1651.96 689.502 L1652.52 689.502 L1653.08 689.502 L1653.64 689.502 L1654.2 689.502 L1654.76 689.502 L1655.31 689.502 L1655.87 689.502 L1656.43 689.502 L1656.99 689.502 L1657.55 689.502 L1658.11 689.502 L1658.67 689.502 L1659.23 689.502 L1659.79 689.502 L1660.35 689.502 L1660.91 689.502 L1661.47 689.502 L1662.03 689.502 L1662.58 689.502 L1663.14 689.502 L1663.7 689.502 L1664.26 689.502 L1664.82 689.502 L1665.38 689.502 L1665.94 689.502 L1666.5 689.502 L1667.06 689.502 L1667.62 689.502 L1668.18 689.502 L1668.74 689.502 L1669.3 689.502 L1669.85 689.502 L1670.41 689.502 L1670.97 689.502 L1671.53 689.502 L1672.09 689.502 L1672.65 689.502 L1673.21 689.502 L1673.77 689.502 L1674.33 689.502 L1674.89 689.502 L1675.45 689.502 L1676.01 689.502 L1676.57 689.502 L1677.13 689.502 L1677.68 689.502 L1678.24 689.502 L1678.8 689.502 L1679.36 689.502 L1679.92 689.502 L1680.48 689.502 L1681.04 689.502 L1681.6 689.502 L1682.16 689.502 L1682.72 689.502 L1683.28 689.502 L1683.84 689.502 L1684.4 689.502 L1684.95 689.502 L1685.51 689.502 L1686.07 689.502 L1686.63 689.502 L1687.19 689.502 L1687.75 689.502 L1688.31 689.502 L1688.87 689.502 L1689.43 689.502 L1689.99 689.502 L1690.55 689.502 L1691.11 689.502 L1691.67 689.502 L1692.23 689.502 L1692.78 689.502 L1693.34 689.502 L1693.9 689.502 L1694.46 689.502 L1695.02 689.502 L1695.58 689.502 L1696.14 689.502 L1696.7 689.502 L1697.26 689.502 L1697.82 689.502 L1698.38 689.502 L1698.94 689.502 L1699.5 689.502 L1700.05 689.502 L1700.61 689.502 L1701.17 689.502 L1701.73 689.502 L1702.29 689.502 L1702.85 689.502 L1703.41 689.502 L1703.97 689.502 L1704.53 689.502 L1705.09 689.502 L1705.65 689.502 L1706.21 689.502 L1706.77 689.502 L1707.32 689.502 L1707.88 689.502 L1708.44 689.502 L1709 689.502 L1709.56 689.502 L1710.12 689.502 L1710.68 689.502 L1711.24 689.502 L1711.8 689.502 L1712.36 689.502 L1712.92 689.502 L1713.48 689.502 L1714.04 689.502 L1714.6 689.502 L1715.15 689.502 L1715.71 689.502 L1716.27 689.502 L1716.83 689.502 L1717.39 689.502 L1717.95 689.502 L1718.51 689.502 L1719.07 689.502 L1719.63 689.502 L1720.19 689.502 L1720.75 689.502 L1721.31 689.502 L1721.87 689.502 L1722.42 689.502 L1722.98 689.502 L1723.54 689.502 L1724.1 689.502 L1724.66 689.502 L1725.22 689.502 L1725.78 689.502 L1726.34 689.502 L1726.9 689.502 L1727.46 689.502 L1728.02 689.502 L1728.58 689.502 L1729.14 689.502 L1729.69 689.502 L1730.25 689.502 L1730.81 689.502 L1731.37 689.502 L1731.93 689.502 L1732.49 689.502 L1733.05 689.502 L1733.61 689.502 L1734.17 689.502 L1734.73 689.502 L1735.29 689.502 L1735.85 689.502 L1736.41 689.502 L1736.97 689.502 L1737.52 689.502 L1738.08 689.502 L1738.64 689.502 L1739.2 689.502 L1739.76 689.502 L1740.32 689.502 L1740.88 689.502 L1741.44 689.502 L1742 689.502 L1742.56 689.502 L1743.12 689.502 L1743.68 689.502 L1744.24 689.502 L1744.79 689.502 L1745.35 689.502 L1745.91 689.502 L1746.47 689.502 L1747.03 689.502 L1747.59 689.502 L1748.15 689.502 L1748.71 689.502 L1749.27 689.502 L1749.83 689.502 L1750.39 689.502 L1750.95 689.502 L1751.51 689.502 L1752.06 689.502 L1752.62 689.502 L1753.18 689.502 L1753.74 689.502 L1754.3 689.502 L1754.86 689.502 L1755.42 689.502 L1755.98 689.502 L1756.54 689.502 L1757.1 689.502 L1757.66 689.502 L1758.22 689.502 L1758.78 689.502 L1759.34 689.502 L1759.89 689.502 L1760.45 689.502 L1761.01 689.502 L1761.57 689.502 L1762.13 689.502 L1762.69 689.502 L1763.25 689.502 L1763.81 689.502 L1764.37 689.502 L1764.93 689.502 L1765.49 689.502 L1766.05 689.502 L1766.61 689.502 L1767.16 689.502 L1767.72 689.502 L1768.28 689.502 L1768.84 689.502 L1769.4 689.502 L1769.96 689.502 L1770.52 689.502 L1771.08 689.502 L1771.64 689.502 L1772.2 689.502 L1772.76 689.502 L1773.32 689.502 L1773.88 689.502 L1774.43 689.502 L1774.99 689.502 L1775.55 689.502 L1776.11 689.502 L1776.67 689.502 L1777.23 689.502 L1777.79 689.502 L1778.35 689.502 L1778.91 689.502 L1779.47 689.502 L1780.03 689.502 L1780.59 689.502 L1781.15 689.502 L1781.71 689.502 L1782.26 689.502 L1782.82 689.502 L1783.38 689.502 L1783.94 689.502 L1784.5 689.502 L1785.06 689.502 L1785.62 689.502 L1786.18 689.502 L1786.74 689.502 L1787.3 689.502 L1787.86 689.502 L1788.42 689.502 L1788.98 689.502 L1789.53 689.502 L1790.09 689.502 L1790.65 689.502 L1791.21 689.502 L1791.77 689.502 L1792.33 689.502 L1792.89 689.502 L1793.45 689.502 L1794.01 689.502 L1794.57 689.502 L1795.13 689.502 L1795.69 689.502 L1796.25 689.502 L1796.8 689.502 L1797.36 689.502 L1797.92 689.502 L1798.48 689.502 L1799.04 689.502 L1799.6 689.502 L1800.16 689.502 L1800.72 689.502 L1801.28 689.502 L1801.84 689.502 L1802.4 689.502 L1802.96 689.502 L1803.52 689.502 L1804.08 689.502 L1804.63 689.502 L1805.19 689.502 L1805.75 689.502 L1806.31 689.502 L1806.87 689.502 L1807.43 689.502 L1807.99 689.502 L1808.55 689.502 L1809.11 689.502 L1809.67 689.502 L1810.23 689.502 L1810.79 689.502 L1811.35 689.502 L1811.9 689.502 L1812.46 689.502 L1813.02 689.502 L1813.58 689.502 L1814.14 689.502 L1814.7 689.502 L1815.26 689.502 L1815.82 689.502 L1816.38 689.502 L1816.94 689.502 L1817.5 689.502 L1818.06 689.502 L1818.62 689.502 L1819.18 689.502 L1819.73 689.502 L1820.29 689.502 L1820.85 689.502 L1821.41 689.502 L1821.97 689.502 L1822.53 689.502 L1823.09 689.502 L1823.65 689.502 L1824.21 689.502 L1824.77 689.502 L1825.33 689.502 L1825.89 689.502 L1826.45 689.502 L1827 689.502 L1827.56 689.502 L1828.12 689.502 L1828.68 689.502 L1829.24 689.502 L1829.8 689.502 L1830.36 689.502 L1830.92 689.502 L1831.48 689.502 L1832.04 689.502 L1832.6 689.502 L1833.16 689.502 L1833.72 689.502 L1834.27 689.502 L1834.83 689.502 L1835.39 689.502 L1835.95 689.502 L1836.51 689.502 L1837.07 689.502 L1837.63 689.502 L1838.19 689.502 L1838.19 679.674 L1837.63 679.674 L1837.07 679.674 L1836.51 679.674 L1835.95 679.674 L1835.39 679.674 L1834.83 679.674 L1834.27 679.674 L1833.72 679.674 L1833.16 679.674 L1832.6 679.674 L1832.04 679.674 L1831.48 679.674 L1830.92 679.674 L1830.36 679.674 L1829.8 679.674 L1829.24 679.674 L1828.68 679.674 L1828.12 679.674 L1827.56 679.674 L1827 679.674 L1826.45 679.674 L1825.89 679.674 L1825.33 679.674 L1824.77 679.674 L1824.21 679.674 L1823.65 679.674 L1823.09 679.674 L1822.53 679.674 L1821.97 679.674 L1821.41 679.674 L1820.85 679.674 L1820.29 679.674 L1819.73 679.674 L1819.18 679.674 L1818.62 679.674 L1818.06 679.674 L1817.5 679.674 L1816.94 679.674 L1816.38 679.674 L1815.82 679.674 L1815.26 679.674 L1814.7 679.674 L1814.14 679.674 L1813.58 679.674 L1813.02 679.674 L1812.46 679.674 L1811.9 679.674 L1811.35 679.674 L1810.79 679.674 L1810.23 679.674 L1809.67 679.674 L1809.11 679.674 L1808.55 679.674 L1807.99 679.674 L1807.43 679.674 L1806.87 679.674 L1806.31 679.674 L1805.75 679.674 L1805.19 679.674 L1804.63 679.674 L1804.08 679.674 L1803.52 679.674 L1802.96 679.674 L1802.4 679.674 L1801.84 679.674 L1801.28 679.674 L1800.72 679.674 L1800.16 679.674 L1799.6 679.674 L1799.04 679.674 L1798.48 679.674 L1797.92 679.674 L1797.36 679.674 L1796.8 679.674 L1796.25 679.674 L1795.69 679.674 L1795.13 679.674 L1794.57 679.674 L1794.01 679.674 L1793.45 679.674 L1792.89 679.674 L1792.33 679.674 L1791.77 679.674 L1791.21 679.674 L1790.65 679.674 L1790.09 679.674 L1789.53 679.674 L1788.98 679.674 L1788.42 679.674 L1787.86 679.674 L1787.3 679.674 L1786.74 679.674 L1786.18 679.674 L1785.62 679.674 L1785.06 679.674 L1784.5 679.674 L1783.94 679.674 L1783.38 679.674 L1782.82 679.674 L1782.26 679.674 L1781.71 679.674 L1781.15 679.674 L1780.59 679.674 L1780.03 679.674 L1779.47 679.674 L1778.91 679.674 L1778.35 679.674 L1777.79 679.674 L1777.23 679.674 L1776.67 679.674 L1776.11 679.674 L1775.55 679.674 L1774.99 679.674 L1774.43 679.674 L1773.88 679.674 L1773.32 679.674 L1772.76 679.674 L1772.2 679.674 L1771.64 679.674 L1771.08 679.674 L1770.52 679.674 L1769.96 679.674 L1769.4 679.674 L1768.84 679.674 L1768.28 679.674 L1767.72 679.674 L1767.16 679.674 L1766.61 679.674 L1766.05 679.674 L1765.49 679.674 L1764.93 679.674 L1764.37 679.674 L1763.81 679.674 L1763.25 679.674 L1762.69 679.674 L1762.13 679.674 L1761.57 679.674 L1761.01 679.674 L1760.45 679.674 L1759.89 679.674 L1759.34 679.674 L1758.78 679.674 L1758.22 679.674 L1757.66 679.674 L1757.1 679.674 L1756.54 679.674 L1755.98 679.674 L1755.42 679.674 L1754.86 679.674 L1754.3 679.674 L1753.74 679.674 L1753.18 679.674 L1752.62 679.674 L1752.06 679.674 L1751.51 679.674 L1750.95 679.674 L1750.39 679.674 L1749.83 679.674 L1749.27 679.674 L1748.71 679.674 L1748.15 679.674 L1747.59 679.674 L1747.03 679.674 L1746.47 679.674 L1745.91 679.674 L1745.35 679.674 L1744.79 679.674 L1744.24 679.674 L1743.68 679.674 L1743.12 679.674 L1742.56 679.674 L1742 679.674 L1741.44 679.674 L1740.88 679.674 L1740.32 679.674 L1739.76 679.674 L1739.2 679.674 L1738.64 679.674 L1738.08 679.674 L1737.52 679.674 L1736.97 679.674 L1736.41 679.674 L1735.85 679.674 L1735.29 679.674 L1734.73 679.674 L1734.17 679.674 L1733.61 679.674 L1733.05 679.674 L1732.49 679.674 L1731.93 679.674 L1731.37 679.674 L1730.81 679.674 L1730.25 679.674 L1729.69 679.674 L1729.14 679.674 L1728.58 679.674 L1728.02 679.674 L1727.46 679.674 L1726.9 679.674 L1726.34 679.674 L1725.78 679.674 L1725.22 679.674 L1724.66 679.674 L1724.1 679.674 L1723.54 679.674 L1722.98 679.674 L1722.42 679.674 L1721.87 679.674 L1721.31 679.674 L1720.75 679.674 L1720.19 679.674 L1719.63 679.674 L1719.07 679.674 L1718.51 679.674 L1717.95 679.674 L1717.39 679.674 L1716.83 679.674 L1716.27 679.674 L1715.71 679.674 L1715.15 679.674 L1714.6 679.674 L1714.04 679.674 L1713.48 679.674 L1712.92 679.674 L1712.36 679.674 L1711.8 679.674 L1711.24 679.674 L1710.68 679.674 L1710.12 679.674 L1709.56 679.674 L1709 679.674 L1708.44 679.674 L1707.88 679.674 L1707.32 679.674 L1706.77 679.674 L1706.21 679.674 L1705.65 679.674 L1705.09 679.674 L1704.53 679.674 L1703.97 679.674 L1703.41 679.674 L1702.85 679.674 L1702.29 679.674 L1701.73 679.674 L1701.17 679.674 L1700.61 679.674 L1700.05 679.674 L1699.5 679.674 L1698.94 679.674 L1698.38 679.674 L1697.82 679.674 L1697.26 679.674 L1696.7 679.674 L1696.14 679.674 L1695.58 679.674 L1695.02 679.674 L1694.46 679.674 L1693.9 679.674 L1693.34 679.674 L1692.78 679.674 L1692.23 679.674 L1691.67 679.674 L1691.11 679.674 L1690.55 679.674 L1689.99 679.674 L1689.43 679.674 L1688.87 679.674 L1688.31 679.674 L1687.75 679.674 L1687.19 679.674 L1686.63 679.674 L1686.07 679.674 L1685.51 679.674 L1684.95 679.674 L1684.4 679.674 L1683.84 679.674 L1683.28 679.674 L1682.72 679.674 L1682.16 679.674 L1681.6 679.674 L1681.04 679.674 L1680.48 679.674 L1679.92 679.674 L1679.36 679.674 L1678.8 679.674 L1678.24 679.674 L1677.68 679.674 L1677.13 679.674 L1676.57 679.674 L1676.01 679.674 L1675.45 679.674 L1674.89 679.674 L1674.33 679.674 L1673.77 679.674 L1673.21 679.674 L1672.65 679.674 L1672.09 679.674 L1671.53 679.674 L1670.97 679.674 L1670.41 679.674 L1669.85 679.674 L1669.3 679.674 L1668.74 679.674 L1668.18 679.674 L1667.62 679.674 L1667.06 679.674 L1666.5 679.674 L1665.94 679.674 L1665.38 679.674 L1664.82 679.674 L1664.26 679.674 L1663.7 679.674 L1663.14 679.674 L1662.58 679.674 L1662.03 679.674 L1661.47 679.674 L1660.91 679.674 L1660.35 679.674 L1659.79 679.674 L1659.23 679.674 L1658.67 679.674 L1658.11 679.674 L1657.55 679.674 L1656.99 679.674 L1656.43 679.674 L1655.87 679.674 L1655.31 679.674 L1654.76 679.674 L1654.2 679.674 L1653.64 679.674 L1653.08 679.674 L1652.52 679.674 L1651.96 679.674 L1651.4 679.674 L1650.84 679.674 L1650.28 679.674 L1649.72 679.674 L1649.16 679.674 L1648.6 679.674 L1648.04 679.674 L1647.48 679.674 L1646.93 679.674 L1646.37 679.674 L1645.81 679.674 L1645.25 679.674 L1644.69 679.674 L1644.13 679.674 L1643.57 679.674 L1643.01 679.674 L1642.45 679.674 L1641.89 679.674 L1641.33 679.674 L1640.77 679.674 L1640.21 679.674 L1639.66 679.674 L1639.1 679.674 L1638.54 679.674 L1637.98 679.674 L1637.42 679.674 L1636.86 679.674 L1636.3 679.674 L1635.74 679.674 L1635.18 679.674 L1634.62 679.674 L1634.06 679.674 L1633.5 679.674 L1632.94 679.674 L1632.39 679.674 L1631.83 679.674 L1631.27 679.674 L1630.71 679.674 L1630.15 679.674 L1629.59 679.674 L1629.03 679.674 L1628.47 679.674 L1627.91 679.674 L1627.35 679.674 L1626.79 679.674 L1626.23 679.674 L1625.67 679.674 L1625.11 679.674 L1624.56 679.674 L1624 679.674 L1623.44 679.674 L1622.88 679.674 L1622.32 679.674 L1621.76 679.674 L1621.2 679.674 L1620.64 679.674 L1620.08 679.674 L1619.52 679.674 L1618.96 679.674 L1618.4 679.674 L1617.84 679.674 L1617.29 679.674 L1616.73 679.674 L1616.17 679.674 L1615.61 679.674 L1615.05 679.674 L1614.49 679.674 L1613.93 679.674 L1613.37 679.674 L1612.81 679.674 L1612.25 679.674 L1611.69 679.674 L1611.13 679.674 L1610.57 679.674 L1610.02 679.674 L1609.46 679.674 L1608.9 679.674 L1608.34 679.674 L1607.78 679.674 L1607.22 679.674 L1606.66 679.674 L1606.1 679.674 L1605.54 679.674 L1604.98 679.674 L1604.42 679.674 L1603.86 679.674 L1603.3 679.674 L1602.74 679.674 L1602.19 679.674 L1601.63 679.674 L1601.07 679.674 L1600.51 679.674 L1599.95 679.674 L1599.39 679.674 L1598.83 679.674 L1598.27 679.674 L1597.71 679.674 L1597.15 679.674 L1596.59 679.674 L1596.03 679.674 L1595.47 679.674 L1594.92 679.674 L1594.36 679.674 L1593.8 679.674 L1593.24 679.674 L1592.68 679.674 L1592.12 679.674 L1591.56 679.674 L1591 679.674 L1590.44 679.674 L1589.88 679.674 L1589.32 679.674 L1588.76 679.674 L1588.2 679.674 L1587.65 679.674 L1587.09 679.674 L1586.53 679.674 L1585.97 679.674 L1585.41 679.674 L1584.85 679.674 L1584.29 679.674 L1583.73 679.674 L1583.17 679.674 L1582.61 679.674 L1582.05 679.674 L1581.49 679.674 L1580.93 679.674 L1580.37 679.674 L1579.82 679.674 L1579.26 679.674 L1578.7 679.674 L1578.14 679.674 L1577.58 679.674 L1577.02 679.674 L1576.46 679.674 L1575.9 679.674 L1575.34 679.674 L1574.78 679.674 L1574.22 679.674 L1573.66 679.674 L1573.1 679.674 L1572.55 679.674 L1571.99 679.674 L1571.43 679.674 L1570.87 679.674 L1570.31 679.674 L1569.75 679.674 L1569.19 679.674 L1568.63 679.674 L1568.07 679.674 L1567.51 679.674 L1566.95 679.674 L1566.39 679.674 L1565.83 679.674 L1565.28 679.674 L1564.72 679.674 L1564.16 679.674 L1563.6 679.674 L1563.04 679.674 L1562.48 679.674 L1561.92 679.674 L1561.36 679.674 L1560.8 679.674 L1560.24 679.674 L1559.68 679.674 L1559.12 679.674 L1558.56 679.674 L1558 679.674 L1557.45 679.674 L1556.89 679.674 L1556.33 679.674 L1555.77 679.674 L1555.21 679.674 L1554.65 679.674 L1554.09 679.674 L1553.53 679.674 L1552.97 679.674 L1552.41 679.674 L1551.85 679.674 L1551.29 679.674 L1550.73 679.674 L1550.18 679.674 L1549.62 679.674 L1549.06 679.674 L1548.5 679.674 L1547.94 679.674 L1547.38 679.674 L1546.82 679.674 L1546.26 679.674 L1545.7 679.674 L1545.14 679.674 L1544.58 679.674 L1544.02 679.674 L1543.46 679.674 L1542.9 679.674 L1542.35 679.674 L1541.79 679.674 L1541.23 679.674 L1540.67 679.674 L1540.11 679.674 L1539.55 679.674 L1538.99 679.674 L1538.43 679.674 L1537.87 679.674 L1537.31 679.674 L1536.75 679.674 L1536.19 679.674 L1535.63 679.674 L1535.08 679.674 L1534.52 679.674 L1533.96 679.674 L1533.4 679.674 L1532.84 679.674 L1532.28 679.674 L1531.72 679.674 L1531.16 679.674 L1530.6 679.674 L1530.04 679.674 L1529.48 679.674 L1528.92 679.674 L1528.36 679.674 L1527.81 679.674 L1527.25 679.674 L1526.69 679.674 L1526.13 679.674 L1525.57 679.674 L1525.01 679.674 L1524.45 679.674 L1523.89 679.674 L1523.33 679.674 L1522.77 679.674 L1522.21 679.674 L1521.65 679.674 L1521.09 679.674 L1520.53 679.674 L1519.98 679.674 L1519.42 679.674 L1518.86 679.674 L1518.3 679.674 L1517.74 679.674 L1517.18 679.674 L1516.62 679.674 L1516.06 679.674 L1515.5 679.674 L1514.94 679.674 L1514.38 679.674 L1513.82 679.674 L1513.26 679.674 L1512.71 679.674 L1512.15 679.674 L1511.59 679.674 L1511.03 679.674 L1510.47 679.674 L1509.91 679.674 L1509.35 679.674 L1508.79 679.674 L1508.23 679.674 L1507.67 679.674 L1507.11 679.674 L1506.55 679.674 L1505.99 679.674 L1505.44 679.674 L1504.88 679.674 L1504.32 679.674 L1503.76 679.674 L1503.2 679.674 L1502.64 679.674 L1502.08 679.674 L1501.52 679.674 L1500.96 679.674 L1500.4 679.674 L1499.84 679.674 L1499.28 679.674 L1498.72 679.674 L1498.16 679.674 L1497.61 679.674 L1497.05 679.674 L1496.49 679.674 L1495.93 679.674 L1495.37 679.674 L1494.81 679.674 L1494.25 679.674 L1493.69 679.674 L1493.13 679.674 L1492.57 679.674 L1492.01 679.674 L1491.45 679.674 L1490.89 679.674 L1490.34 679.674 L1489.78 679.674 L1489.22 679.674 L1488.66 679.674 L1488.1 679.674 L1487.54 679.674 L1486.98 679.674 L1486.42 679.674 L1485.86 679.674 L1485.3 679.674 L1484.74 679.674 L1484.18 679.674 L1483.62 679.674 L1483.07 679.674 L1482.51 679.674 L1481.95 679.674 L1481.39 679.674 L1480.83 679.674 L1480.27 679.674 L1479.71 679.674 L1479.15 679.674 L1478.59 679.674 L1478.03 679.674 L1477.47 679.674 L1476.91 679.674 L1476.35 679.674 L1475.79 679.674 L1475.24 679.674 L1474.68 679.674 L1474.12 679.674 L1473.56 679.674 L1473 679.674 L1472.44 679.674 L1471.88 679.674 L1471.32 679.674 L1470.76 679.674 L1470.2 679.674 L1469.64 679.674 L1469.08 679.674 L1468.52 679.674 L1467.97 679.674 L1467.41 679.674 L1466.85 679.674 L1466.29 679.674 L1465.73 679.674 L1465.17 679.674 L1464.61 679.674 L1464.05 679.674 L1463.49 679.674 L1462.93 679.674 L1462.37 679.674 L1461.81 679.674 L1461.25 679.674 L1460.7 679.674 L1460.14 679.674 L1459.58 679.674 L1459.02 679.674 L1458.46 679.674 L1457.9 679.674 L1457.34 679.674 L1456.78 679.674 L1456.22 679.674 L1455.66 679.674 L1455.1 679.674 L1454.54 679.674 L1453.98 679.674 L1453.42 679.674 L1452.87 679.674 L1452.31 679.674 L1451.75 679.674 L1451.19 679.674 L1450.63 679.674 L1450.07 679.674 L1449.51 679.674 L1448.95 679.674 L1448.39 679.674 L1447.83 679.674 L1447.27 679.674 L1446.71 679.674 L1446.15 679.674 L1445.6 679.674 L1445.04 679.674 L1444.48 679.674 L1443.92 679.674 L1443.36 679.674 L1442.8 679.674 L1442.24 679.674 L1441.68 679.674 L1441.12 679.674 L1440.56 679.674 L1440 679.674 L1439.44 679.674 L1438.88 679.674 L1438.33 679.674 L1437.77 679.674 L1437.21 679.674 L1436.65 679.674 L1436.09 679.674 L1435.53 679.674 L1434.97 679.674 L1434.41 679.674 L1433.85 679.674 L1433.29 679.674 L1432.73 679.674 L1432.17 679.674 L1431.61 679.674 L1431.05 679.674 L1430.5 679.674 L1429.94 679.674 L1429.38 679.674 L1428.82 679.674 L1428.26 679.674 L1427.7 679.674 L1427.14 679.674 L1426.58 679.674 L1426.02 679.674 L1425.46 679.674 L1424.9 679.674 L1424.34 679.674 L1423.78 679.674 L1423.23 679.674 L1422.67 679.674 L1422.11 679.674 L1421.55 679.674 L1420.99 679.674 L1420.43 679.674 L1419.87 679.674 L1419.31 679.674 L1418.75 679.674 L1418.19 679.674 L1417.63 679.674 L1417.07 679.674 L1416.51 679.674 L1415.95 679.674 L1415.4 679.674 L1414.84 679.674 L1414.28 679.674 L1413.72 679.674 L1413.16 679.674 L1412.6 679.674 L1412.04 679.674 L1411.48 679.674 L1410.92 679.674 L1410.36 679.674 L1409.8 679.674 L1409.24 679.674 L1408.68 679.674 L1408.13 679.674 L1407.57 679.674 L1407.01 679.674 L1406.45 679.674 L1405.89 679.674 L1405.33 679.674 L1404.77 679.674 L1404.21 679.674 L1403.65 679.674 L1403.09 679.674 L1402.53 679.674 L1401.97 679.674 L1401.41 679.674 L1400.86 679.674 L1400.3 679.674 L1399.74 679.674 L1399.18 679.674 L1398.62 679.674 L1398.06 679.674 L1397.5 679.674 L1396.94 679.674 L1396.38 679.674 L1395.82 679.674 L1395.26 679.674 L1394.7 679.674 L1394.14 679.674 L1393.58 679.674 L1393.03 679.674 L1392.47 679.674 L1391.91 679.674 L1391.35 679.674 L1390.79 679.674 L1390.23 679.674 L1389.67 679.674 L1389.11 679.674 L1388.55 679.674 L1387.99 679.674 L1387.43 679.674 L1386.87 679.674 L1386.31 679.674 L1385.76 679.674 L1385.2 679.674 L1384.64 679.674 L1384.08 679.674 L1383.52 679.674 L1382.96 679.674 L1382.4 679.674 L1381.84 679.674 L1381.28 679.674 L1380.72 679.674 L1380.16 679.674 L1379.6 679.674 L1379.04 679.674 L1378.49 679.674 L1377.93 679.674 L1377.37 679.674 L1376.81 679.674 L1376.25 679.674 L1375.69 679.674 L1375.13 679.674 L1374.57 679.674 L1374.01 679.674 L1373.45 679.674 L1372.89 679.674 L1372.33 679.674 L1371.77 679.674 L1371.21 679.674 L1370.66 679.674 L1370.1 679.674 L1369.54 679.674 L1368.98 679.674 L1368.42 679.674 L1367.86 679.674 L1367.3 679.674 L1366.74 679.674 L1366.18 679.674 L1365.62 679.674 L1365.06 679.674 L1364.5 679.674 L1363.94 679.674 L1363.39 679.674 L1362.83 679.674 L1362.27 679.674 L1361.71 679.674 L1361.15 679.674 L1360.59 679.674 L1360.03 679.674 L1359.47 679.674 L1358.91 679.674 L1358.35 679.674 L1357.79 679.674 L1357.23 679.674 L1356.67 679.674 L1356.12 679.674 L1355.56 679.674 L1355 679.674 L1354.44 679.674 L1353.88 679.674 L1353.32 679.674 L1352.76 679.674 L1352.2 679.674 L1351.64 679.674 L1351.08 679.674 L1350.52 679.674 L1349.96 679.674 L1349.4 679.674 L1348.84 679.674 L1348.29 679.674 L1347.73 679.674 L1347.17 679.674 L1346.61 679.674 L1346.05 679.674 L1345.49 679.674 L1344.93 679.674 L1344.37 679.674 L1343.81 679.674 L1343.25 679.674 L1342.69 679.674 L1342.13 679.674 L1341.57 679.674 L1341.02 679.674 L1340.46 679.674 L1339.9 679.674 L1339.34 679.674 L1338.78 679.674 L1338.22 679.674 L1337.66 679.674 L1337.1 679.674 L1336.54 679.674 L1335.98 679.674 L1335.42 679.674 L1334.86 679.674 L1334.3 679.674 L1333.75 679.674 L1333.19 679.674 L1332.63 679.674 L1332.07 679.674 L1331.51 679.674 L1330.95 679.674 L1330.39 679.674 L1329.83 679.674 L1329.27 679.674 L1328.71 679.674 L1328.15 679.674 L1327.59 679.674 L1327.03 679.674 L1326.47 679.674 L1325.92 679.674 L1325.36 679.674 L1324.8 679.674 L1324.24 679.674 L1323.68 679.674 L1323.12 679.674 L1322.56 679.674 L1322 679.674 L1321.44 679.674 L1320.88 679.674 L1320.32 679.674 L1319.76 679.674 L1319.2 679.674 L1318.65 679.674 L1318.09 679.674 L1317.53 679.674 L1316.97 679.674 L1316.41 679.674 L1315.85 679.674 L1315.29 679.674 L1314.73 679.674 L1314.17 679.674 L1313.61 679.674 L1313.05 679.674 L1312.49 679.674 L1311.93 679.674 L1311.38 679.674 L1310.82 679.674 L1310.26 679.674 L1309.7 679.674 L1309.14 679.674 L1308.58 679.674 L1308.02 679.674 L1307.46 679.674 L1306.9 679.674 L1306.34 679.674 L1305.78 679.674 L1305.22 679.674 L1304.66 679.674 L1304.1 679.674 L1303.55 679.674 L1302.99 679.674 L1302.43 679.674 L1301.87 679.674 L1301.31 679.674 L1300.75 679.674 L1300.19 679.674 L1299.63 679.674 L1299.07 679.674 L1298.51 679.674 L1297.95 679.674 L1297.39 679.674 L1296.83 679.674 L1296.28 679.674 L1295.72 679.674 L1295.16 679.674 L1294.6 679.674 L1294.04 679.674 L1293.48 679.674 L1292.92 679.674 L1292.36 679.674 L1291.8 679.674 L1291.24 679.674 L1290.68 679.674 L1290.12 679.674 L1289.56 679.674 L1289 679.674 L1288.45 679.674 L1287.89 679.674 L1287.33 679.674 L1286.77 679.674 L1286.21 679.674 L1285.65 679.674 L1285.09 679.674 L1284.53 679.674 L1283.97 679.674 L1283.41 679.674 L1282.85 679.674 L1282.29 679.674 L1281.73 679.674 L1281.18 679.674 L1280.62 679.674 L1280.06 679.674 L1279.5 679.674 L1278.94 679.674 L1278.38 679.674 L1277.82 679.674 L1277.26 679.674 L1276.7 679.674 L1276.14 679.674 L1275.58 679.674 L1275.02 679.674 L1274.46 679.674 L1273.91 679.674 L1273.35 679.674 L1272.79 679.674 L1272.23 679.674 L1271.67 679.674 L1271.11 679.674 L1270.55 679.674 L1269.99 679.674 L1269.43 679.674 L1268.87 679.674 L1268.31 679.674 L1267.75 679.674 L1267.19 679.674 L1266.63 679.674 L1266.08 679.674 L1265.52 679.674 L1264.96 679.674 L1264.4 679.674 L1263.84 679.674 L1263.28 679.674 L1262.72 679.674 L1262.16 679.674 L1261.6 679.674 L1261.04 679.674 L1260.48 679.674 L1259.92 679.674 L1259.36 679.674 L1258.81 679.674 L1258.25 679.674 L1257.69 679.674 L1257.13 679.674 L1256.57 679.674 L1256.01 679.674 L1255.45 679.674 L1254.89 679.674 L1254.33 679.674 L1253.77 679.674 L1253.21 679.674 L1252.65 679.674 L1252.09 679.674 L1251.54 679.674 L1250.98 679.674 L1250.42 679.674 L1249.86 679.674 L1249.3 679.674 L1248.74 679.674 L1248.18 679.674 L1247.62 679.674 L1247.06 679.674 L1246.5 679.674 L1245.94 679.674 L1245.38 679.674 L1244.82 679.674 L1244.26 679.674 L1243.71 679.674 L1243.15 679.674 L1242.59 679.674 L1242.03 679.674 L1241.47 679.674 L1240.91 679.674 L1240.35 679.674 L1239.79 679.674 L1239.23 679.674 L1238.67 679.674 L1238.11 679.674 L1237.55 679.674 L1236.99 679.674 L1236.44 679.674 L1235.88 679.674 L1235.32 679.674 L1234.76 679.674 L1234.2 679.674 L1233.64 679.674 L1233.08 679.674 L1232.52 679.674 L1231.96 679.674 L1231.4 679.674 L1230.84 679.674 L1230.28 679.674 L1229.72 679.674 L1229.17 679.674 L1228.61 679.674 L1228.05 679.674 L1227.49 679.674 L1226.93 679.674 L1226.37 679.674 L1225.81 679.674 L1225.25 679.674 L1224.69 679.674 L1224.13 679.674 L1223.57 679.674 L1223.01 679.674 L1222.45 679.674 L1221.89 679.674 L1221.34 679.674 L1220.78 679.674 L1220.22 679.674 L1219.66 679.674 L1219.1 679.674 L1218.54 679.674 L1217.98 679.674 L1217.42 679.674 L1216.86 679.674 L1216.3 679.674 L1215.74 679.674 L1215.18 679.674 L1214.62 679.674 L1214.07 679.674 L1213.51 679.674 L1212.95 679.674 L1212.39 679.674 L1211.83 679.674 L1211.27 679.674 L1210.71 679.674 L1210.15 679.674 L1209.59 679.674 L1209.03 679.674 L1208.47 679.674 L1207.91 679.674 L1207.35 679.674 L1206.8 679.674 L1206.24 679.674 L1205.68 679.674 L1205.12 679.674 L1204.56 679.674 L1204 679.674 L1203.44 679.674 L1202.88 679.674 L1202.32 679.674 L1201.76 679.674 L1201.2 679.674 L1200.64 679.674 L1200.08 679.674 L1199.52 679.674 L1198.97 679.674 L1198.41 679.674 L1197.85 679.674 L1197.29 679.674 L1196.73 679.674 L1196.17 679.674 L1195.61 679.674 L1195.05 679.674 L1194.49 679.674 L1193.93 679.674 L1193.37 679.674 L1192.81 679.674 L1192.25 679.674 L1191.7 679.674 L1191.14 679.674 L1190.58 679.674 L1190.02 679.674 L1189.46 679.674 L1188.9 679.674 L1188.34 679.674 L1187.78 679.674 L1187.22 679.674 L1186.66 679.674 L1186.1 679.674 L1185.54 679.674 L1184.98 679.674 L1184.43 679.674 L1183.87 679.674 L1183.31 679.674 L1182.75 679.674 L1182.19 679.674 L1181.63 679.674 L1181.07 679.674 L1180.51 679.674 L1179.95 679.674 L1179.39 679.674 L1178.83 679.674 L1178.27 679.674 L1177.71 679.674 L1177.15 679.674 L1176.6 679.674 L1176.04 679.674 L1175.48 679.674 L1174.92 679.674 L1174.36 679.674 L1173.8 679.674 L1173.24 679.674 L1172.68 679.674 L1172.12 679.674 L1171.56 679.674 L1171 679.674 L1170.44 679.674 L1169.88 679.674 L1169.33 679.674 L1168.77 679.674 L1168.21 679.674 L1167.65 679.674 L1167.09 679.674 L1166.53 679.674 L1165.97 679.674 L1165.41 679.674 L1164.85 679.674 L1164.29 679.674 L1163.73 679.674 L1163.17 679.674 L1162.61 679.674 L1162.05 679.674 L1161.5 679.674 L1160.94 679.674 L1160.38 679.674 L1159.82 679.674 L1159.26 679.674 L1158.7 679.674 L1158.14 679.674 L1157.58 679.674 L1157.02 679.674 L1156.46 679.674 L1155.9 679.674 L1155.34 679.674 L1154.78 679.674 L1154.23 679.674 L1153.67 679.674 L1153.11 679.674 L1152.55 679.674 L1151.99 679.674 L1151.43 679.674 L1150.87 679.674 L1150.31 679.674 L1149.75 679.674 L1149.19 679.674 L1148.63 679.674 L1148.07 679.674 L1147.51 679.674 L1146.96 679.674 L1146.4 679.674 L1145.84 679.674 L1145.28 679.674 L1144.72 679.674 L1144.16 679.674 L1143.6 679.674 L1143.04 679.674 L1142.48 679.674 L1141.92 679.674 L1141.36 679.674 L1140.8 679.674 L1140.24 679.674 L1139.68 679.674 L1139.13 679.674 L1138.57 679.674 L1138.01 679.674 L1137.45 679.674 L1136.89 679.674 L1136.33 679.674 L1135.77 679.674 L1135.21 679.674 L1134.65 679.674 L1134.09 679.674 L1133.53 679.674 L1132.97 679.674 L1132.41 679.674 L1131.86 679.674 L1131.3 679.674 L1130.74 679.674 L1130.18 679.674 L1129.62 679.674 L1129.06 679.674 L1128.5 679.674 L1127.94 679.674 L1127.38 679.674 L1126.82 679.674 L1126.26 679.674 L1125.7 679.674 L1125.14 679.674 L1124.59 679.674 L1124.03 679.674 L1123.47 679.674 L1122.91 679.674 L1122.35 679.674 L1121.79 679.674 L1121.23 679.674 L1120.67 679.674 L1120.11 679.674 L1119.55 679.674 L1118.99 679.674 L1118.43 679.674 L1117.87 679.674 L1117.31 679.674 L1116.76 679.674 L1116.2 679.674 L1115.64 679.674 L1115.08 679.674 L1114.52 679.674 L1113.96 679.674 L1113.4 679.674 L1112.84 679.674 L1112.28 679.674 L1111.72 679.674 L1111.16 679.674 L1110.6 679.674 L1110.04 679.674 L1109.49 679.674 L1108.93 679.674 L1108.37 679.674 L1107.81 679.674 L1107.25 679.674 L1106.69 679.674 L1106.13 679.674 L1105.57 679.674 L1105.01 679.674 L1104.45 679.674 L1103.89 679.674 L1103.33 679.674 L1102.77 679.674 L1102.22 679.674 L1101.66 679.674 L1101.1 679.674 L1100.54 679.674 L1099.98 679.674 L1099.42 679.674 L1098.86 679.674 L1098.3 679.674 L1097.74 679.674 L1097.18 679.674 L1096.62 679.674 L1096.06 679.674 L1095.5 679.674 L1094.94 679.674 L1094.39 679.674 L1093.83 679.674 L1093.27 679.674 L1092.71 679.674 L1092.15 679.674 L1091.59 679.674 L1091.03 679.674 L1090.47 679.674 L1089.91 679.674 L1089.35 679.674 L1088.79 679.674 L1088.23 679.674 L1087.67 679.674 L1087.12 679.674 L1086.56 679.674 L1086 679.674 L1085.44 679.674 L1084.88 679.674 L1084.32 679.674 L1083.76 679.674 L1083.2 679.674 L1082.64 679.674 L1082.08 679.674 L1081.52 679.674 L1080.96 679.674 L1080.4 679.674 L1079.85 679.674 L1079.29 679.674 L1078.73 679.674 L1078.17 679.674 L1077.61 679.674 L1077.05 679.674 L1076.49 679.674 L1075.93 679.674 L1075.37 679.674 L1074.81 679.674 L1074.25 679.674 L1073.69 679.674 L1073.13 679.674 L1072.57 679.674 L1072.02 679.674 L1071.46 679.674 L1070.9 679.674 L1070.34 679.674 L1069.78 679.674 L1069.22 679.674 L1068.66 679.674 L1068.1 679.674 L1067.54 679.674 L1066.98 679.674 L1066.42 679.674 L1065.86 679.674 L1065.3 679.674 L1064.75 679.674 L1064.19 679.674 L1063.63 679.674 L1063.07 679.674 L1062.51 679.674 L1061.95 679.674 L1061.39 679.674 L1060.83 679.674 L1060.27 679.674 L1059.71 679.674 L1059.15 679.674 L1058.59 679.674 L1058.03 679.674 L1057.48 679.674 L1056.92 679.674 L1056.36 679.674 L1055.8 679.674 L1055.24 679.674 L1054.68 679.674 L1054.12 679.674 L1053.56 679.674 L1053 679.674 L1052.44 679.674 L1051.88 679.674 L1051.32 679.674 L1050.76 679.674 L1050.2 679.674 L1049.65 679.674 L1049.09 679.674 L1048.53 679.674 L1047.97 679.674 L1047.41 679.674 L1046.85 679.674 L1046.29 679.674 L1045.73 679.674 L1045.17 679.674 L1044.61 679.674 L1044.05 679.674 L1043.49 679.674 L1042.93 679.674 L1042.38 679.674 L1041.82 679.674 L1041.26 679.674 L1040.7 679.674 L1040.14 679.674 L1039.58 679.674 L1039.02 679.674 L1038.46 679.674 L1037.9 679.674 L1037.34 679.674 L1036.78 679.674 L1036.22 679.674 L1035.66 679.674 L1035.1 679.674 L1034.55 679.674 L1033.99 679.674 L1033.43 679.674 L1032.87 679.674 L1032.31 679.674 L1031.75 679.674 L1031.19 679.674 L1030.63 679.674 L1030.07 679.674 L1029.51 679.674 L1028.95 679.674 L1028.39 679.674 L1027.83 679.674 L1027.28 679.674 L1026.72 679.674 L1026.16 679.674 L1025.6 679.674 L1025.04 679.674 L1024.48 679.674 L1023.92 679.674 L1023.36 679.674 L1022.8 679.674 L1022.24 679.674 L1021.68 679.674 L1021.12 679.674 L1020.56 679.674 L1020.01 679.674 L1019.45 679.674 L1018.89 679.674 L1018.33 679.674 L1017.77 679.674 L1017.21 679.674 L1016.65 679.674 L1016.09 679.674 L1015.53 679.674 L1014.97 679.674 L1014.41 679.674 L1013.85 679.674 L1013.29 679.674 L1012.73 679.674 L1012.18 679.674 L1011.62 679.674 L1011.06 679.674 L1010.5 679.674 L1009.94 679.674 L1009.38 679.674 L1008.82 679.674 L1008.26 679.674 L1007.7 679.674 L1007.14 679.674 L1006.58 679.674 L1006.02 679.674 L1005.46 679.674 L1004.91 679.674 L1004.35 679.674 L1003.79 679.674 L1003.23 679.674 L1002.67 679.674 L1002.11 679.674 L1001.55 679.674 L1000.99 679.674 L1000.43 679.674 L999.872 679.674 L999.313 679.674 L998.754 679.674 L998.194 679.674 L997.635 679.674 L997.076 679.674 L996.517 679.674 L995.957 679.674 L995.398 679.674 L994.839 679.674 L994.28 679.674 L993.72 679.674 L993.161 679.674 L992.602 679.674 L992.043 679.674 L991.483 679.674 L990.924 679.674 L990.365 679.674 L989.806 679.674 L989.246 679.674 L988.687 679.674 L988.128 679.674 L987.569 679.674 L987.009 679.674 L986.45 679.674 L985.891 679.674 L985.332 679.674 L984.772 679.674 L984.213 679.674 L983.654 679.674 L983.095 679.674 L982.535 679.674 L981.976 679.674 L981.417 679.674 L980.858 679.674 L980.298 679.674 L979.739 679.674 L979.18 679.674 L978.621 679.674 L978.061 679.674 L977.502 679.674 L976.943 679.674 L976.384 679.674 L975.824 679.674 L975.265 679.674 L974.706 679.674 L974.147 679.674 L973.587 679.674 L973.028 679.674 L972.469 679.674 L971.91 679.674 L971.35 679.674 L970.791 679.674 L970.232 679.674 L969.673 679.674 L969.113 679.674 L968.554 679.674 L967.995 679.674 L967.436 679.674 L966.876 679.674 L966.317 679.674 L965.758 679.674 L965.199 679.674 L964.639 679.674 L964.08 679.674 L963.521 679.674 L962.962 679.674 L962.402 679.674 L961.843 679.674 L961.284 679.674 L960.725 679.674 L960.165 679.674 L959.606 679.674 L959.047 679.674 L958.488 679.674 L957.928 679.674 L957.369 679.674 L956.81 679.674 L956.251 679.674 L955.691 679.674 L955.132 679.674 L954.573 679.674 L954.014 679.674 L953.454 679.674 L952.895 679.674 L952.336 679.674 L951.777 679.674 L951.217 679.674 L950.658 679.674 L950.099 679.674 L949.54 679.674 L948.98 679.674 L948.421 679.674 L947.862 679.674 L947.303 679.674 L946.743 679.674 L946.184 679.674 L945.625 679.674 L945.066 679.674 L944.506 679.674 L943.947 679.674 L943.388 679.674 L942.829 679.674 L942.269 679.674 L941.71 679.674 L941.151 679.674 L940.592 679.674 L940.032 679.674 L939.473 679.674 L938.914 679.674 L938.355 679.674 L937.795 679.674 L937.236 679.674 L936.677 679.674 L936.118 679.674 L935.558 679.674 L934.999 679.674 L934.44 679.674 L933.881 679.674 L933.321 679.674 L932.762 679.674 L932.203 679.674 L931.644 679.674 L931.084 679.674 L930.525 679.674 L929.966 679.674 L929.406 679.674 L928.847 679.674 L928.288 679.674 L927.729 679.674 L927.169 679.674 L926.61 679.674 L926.051 679.674 L925.492 679.674 L924.932 679.674 L924.373 679.674 L923.814 679.674 L923.255 679.674 L922.695 679.674 L922.136 679.674 L921.577 679.674 L921.018 679.674 L920.458 679.674 L919.899 679.674 L919.34 679.674 L918.781 679.674 L918.221 679.674 L917.662 679.674 L917.103 679.674 L916.544 679.674 L915.984 679.674 L915.425 679.674 L914.866 679.674 L914.307 679.674 L913.747 679.674 L913.188 679.674 L912.629 679.674 L912.07 679.674 L911.51 679.674 L910.951 679.674 L910.392 679.674 L909.833 679.674 L909.273 679.674 L908.714 679.674 L908.155 679.674 L907.596 679.674 L907.036 679.674 L906.477 679.674 L905.918 679.674 L905.359 679.674 L904.799 679.674 L904.24 679.674 L903.681 679.674 L903.122 679.674 L902.562 679.674 L902.003 679.674 L901.444 679.674 L900.885 679.674 L900.325 679.674 L899.766 679.674 L899.207 679.674 L898.648 679.674 L898.088 679.674 L897.529 679.674 L896.97 679.674 L896.411 679.674 L895.851 679.674 L895.292 679.674 L894.733 679.674 L894.174 679.674 L893.614 679.674 L893.055 679.674 L892.496 679.674 L891.937 679.674 L891.377 679.674 L890.818 679.674 L890.259 679.674 L889.7 679.674 L889.14 679.674 L888.581 679.674 L888.022 679.674 L887.463 679.674 L886.903 679.674 L886.344 679.674 L885.785 679.674 L885.226 679.674 L884.666 679.674 L884.107 679.674 L883.548 679.674 L882.989 679.674 L882.429 679.674 L881.87 679.674 L881.311 679.674 L880.752 679.674 L880.192 679.674 L879.633 679.674 L879.074 679.674 L878.515 679.674 L877.955 679.674 L877.396 679.674 L876.837 679.674 L876.278 679.674 L875.718 679.674 L875.159 679.674 L874.6 679.674 L874.041 679.674 L873.481 679.674 L872.922 679.674 L872.363 679.674 L871.804 679.674 L871.244 679.674 L870.685 679.674 L870.126 679.674 L869.567 679.674 L869.007 679.674 L868.448 679.674 L867.889 679.674 L867.33 679.674 L866.77 679.674 L866.211 679.674 L865.652 679.674 L865.093 679.674 L864.533 679.674 L863.974 679.674 L863.415 679.674 L862.856 679.674 L862.296 679.674 L861.737 679.674 L861.178 679.674 L860.619 679.674 L860.059 679.674 L859.5 679.674 L858.941 679.674 L858.382 679.674 L857.822 679.674 L857.263 679.674 L856.704 679.674 L856.145 679.674 L855.585 679.674 L855.026 679.674 L854.467 679.674 L853.908 679.674 L853.348 679.674 L852.789 679.674 L852.23 679.674 L851.671 679.674 L851.111 679.674 L850.552 679.674 L849.993 679.674 L849.434 679.674 L848.874 679.674 L848.315 679.674 L847.756 679.674 L847.197 679.674 L846.637 679.674 L846.078 679.674 L845.519 679.674 L844.96 679.674 L844.4 679.674 L843.841 679.674 L843.282 679.674 L842.723 679.674 L842.163 679.674 L841.604 679.674 L841.045 679.674 L840.486 679.674 L839.926 679.674 L839.367 679.674 L838.808 679.674 L838.249 679.674 L837.689 679.674 L837.13 679.674 L836.571 679.674 L836.012 679.674 L835.452 679.674 L834.893 679.674 L834.334 679.674 L833.775 679.674 L833.215 679.674 L832.656 679.674 L832.097 679.674 L831.538 679.674 L830.978 679.674 L830.419 679.674 L829.86 679.674 L829.301 679.674 L828.741 679.674 L828.182 679.674 L827.623 679.674 L827.064 679.674 L826.504 679.674 L825.945 679.674 L825.386 679.674 L824.827 679.674 L824.267 679.674 L823.708 679.674 L823.149 679.674 L822.59 679.674 L822.03 679.674 L821.471 679.674 L820.912 679.674 L820.353 679.674 L819.793 679.674 L819.234 679.674 L818.675 679.674 L818.116 679.674 L817.556 679.674 L816.997 679.674 L816.438 679.674 L815.879 679.674 L815.319 679.674 L814.76 679.674 L814.201 679.674 L813.642 679.674 L813.082 679.674 L812.523 679.674 L811.964 679.674 L811.405 679.674 L810.845 679.674 L810.286 679.674 L809.727 679.674 L809.168 679.674 L808.608 679.674 L808.049 679.674 L807.49 679.674 L806.931 679.674 L806.371 679.674 L805.812 679.674 L805.253 679.674 L804.693 679.674 L804.134 679.674 L803.575 679.674 L803.016 679.674 L802.456 679.674 L801.897 679.674 L801.338 679.674 L800.779 679.674 L800.219 679.674 L799.66 679.674 L799.101 679.674 L798.542 679.674 L797.982 679.674 L797.423 679.674 L796.864 679.674 L796.305 679.674 L795.745 679.674 L795.186 679.674 L794.627 679.674 L794.068 679.674 L793.508 679.674 L792.949 679.674 L792.39 679.674 L791.831 679.674 L791.271 679.674 L790.712 679.674 L790.153 679.674 L789.594 679.674 L789.034 679.674 L788.475 679.674 L787.916 679.674 L787.357 679.674 L786.797 679.674 L786.238 679.674 L785.679 679.674 L785.12 679.674 L784.56 679.674 L784.001 679.674 L783.442 679.674 L782.883 679.674 L782.323 679.674 L781.764 679.674 L781.205 679.674 L780.646 679.674 L780.086 679.674 L779.527 679.674 L778.968 679.674 L778.409 679.674 L777.849 679.674 L777.29 679.674 L776.731 679.674 L776.172 679.674 L775.612 679.674 L775.053 679.674 L774.494 679.674 L773.935 679.674 L773.375 679.674 L772.816 679.674 L772.257 679.674 L771.698 679.674 L771.138 679.674 L770.579 679.674 L770.02 679.674 L769.461 679.674 L768.901 679.674 L768.342 679.674 L767.783 679.674 L767.224 679.674 L766.664 679.674 L766.105 679.674 L765.546 679.674 L764.987 679.674 L764.427 679.674 L763.868 679.674 L763.309 679.674 L762.75 679.674 L762.19 679.674 L761.631 679.674 L761.072 679.674 L760.513 679.674 L759.953 679.674 L759.394 679.674 L758.835 679.674 L758.276 679.674 L757.716 679.674 L757.157 679.674 L756.598 679.674 L756.039 679.674 L755.479 679.674 L754.92 679.674 L754.361 679.674 L753.802 679.674 L753.242 679.674 L752.683 679.674 L752.124 679.674 L751.565 679.674 L751.005 679.674 L750.446 679.674 L749.887 679.674 L749.328 679.674 L748.768 679.674 L748.209 679.674 L747.65 679.674 L747.091 679.674 L746.531 679.674 L745.972 679.674 L745.413 679.674 L744.854 679.674 L744.294 679.674 L743.735 679.674 L743.176 679.674 L742.617 679.674 L742.057 679.674 L741.498 679.674 L740.939 679.674 L740.38 679.674 L739.82 679.674 L739.261 679.674 L738.702 679.674 L738.143 679.674 L737.583 679.674 L737.024 679.674 L736.465 679.674 L735.906 679.674 L735.346 679.674 L734.787 679.674 L734.228 679.674 L733.669 679.674 L733.109 679.674 L732.55 679.674 L731.991 679.674 L731.432 679.674 L730.872 679.674 L730.313 679.674 L729.754 679.674 L729.195 679.674 L728.635 679.674 L728.076 679.674 L727.517 679.674 L726.958 679.674 L726.398 679.674 L725.839 679.674 L725.28 679.674 L724.721 679.674 L724.161 679.674 L723.602 679.674 L723.043 679.674 L722.484 679.674 L721.924 679.674 L721.365 679.674 L720.806 679.674 L720.247 679.674  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.588 720.806,684.588 721.365,684.588 721.924,684.588 722.484,684.588 723.043,684.588 723.602,684.588 724.161,684.588 724.721,684.588 725.28,684.588 725.839,684.588 726.398,684.588 726.958,684.588 727.517,684.588 728.076,684.588 728.635,684.588 729.195,684.588 729.754,684.588 730.313,684.588 730.872,684.588 731.432,684.588 731.991,684.588 732.55,684.588 733.109,684.588 733.669,684.588 734.228,684.588 734.787,684.588 735.346,684.588 735.906,684.588 736.465,684.588 737.024,684.588 737.583,684.588 738.143,684.588 738.702,684.588 739.261,684.588 739.82,684.588 740.38,684.588 740.939,684.588 741.498,684.588 742.057,684.588 742.617,684.588 743.176,684.588 743.735,684.588 744.294,684.588 744.854,684.588 745.413,684.588 745.972,684.588 746.531,684.588 747.091,684.588 747.65,684.588 748.209,684.588 748.768,684.588 749.328,684.588 749.887,684.588 750.446,684.588 751.005,684.588 751.565,684.588 752.124,684.588 752.683,684.588 753.242,684.588 753.802,684.588 754.361,684.588 754.92,684.588 755.479,684.588 756.039,684.588 756.598,684.588 757.157,684.588 757.716,684.588 758.276,684.588 758.835,684.588 759.394,684.588 759.953,684.588 760.513,684.588 761.072,684.588 761.631,684.588 762.19,684.588 762.75,684.588 763.309,684.588 763.868,684.588 764.427,684.588 764.987,684.588 765.546,684.588 766.105,684.588 766.664,684.588 767.224,684.588 767.783,684.588 768.342,684.588 768.901,684.588 769.461,684.588 770.02,684.588 770.579,684.588 771.138,684.588 771.698,684.588 772.257,684.588 772.816,684.588 773.375,684.588 773.935,684.588 774.494,684.588 775.053,684.588 775.612,684.588 776.172,684.588 776.731,684.588 777.29,684.588 777.849,684.588 778.409,684.588 778.968,684.588 779.527,684.588 780.086,684.588 780.646,684.588 781.205,684.588 781.764,684.588 782.323,684.588 782.883,684.588 783.442,684.588 784.001,684.588 784.56,684.588 785.12,684.588 785.679,684.588 786.238,684.588 786.797,684.588 787.357,684.588 787.916,684.588 788.475,684.588 789.034,684.588 789.594,684.588 790.153,684.588 790.712,684.588 791.271,684.588 791.831,684.588 792.39,684.588 792.949,684.588 793.508,684.588 794.068,684.588 794.627,684.588 795.186,684.588 795.745,684.588 796.305,684.588 796.864,684.588 797.423,684.588 797.982,684.588 798.542,684.588 799.101,684.588 799.66,684.588 800.219,684.588 800.779,684.588 801.338,684.588 801.897,684.588 802.456,684.588 803.016,684.588 803.575,684.588 804.134,684.588 804.693,684.588 805.253,684.588 805.812,684.588 806.371,684.588 806.931,684.588 807.49,684.588 808.049,684.588 808.608,684.588 809.168,684.588 809.727,684.588 810.286,684.588 810.845,684.588 811.405,684.588 811.964,684.588 812.523,684.588 813.082,684.588 813.642,684.588 814.201,684.588 814.76,684.588 815.319,684.588 815.879,684.588 816.438,684.588 816.997,684.588 817.556,684.588 818.116,684.588 818.675,684.588 819.234,684.588 819.793,684.588 820.353,684.588 820.912,684.588 821.471,684.588 822.03,684.588 822.59,684.588 823.149,684.588 823.708,684.588 824.267,684.588 824.827,684.588 825.386,684.588 825.945,684.588 826.504,684.588 827.064,684.588 827.623,684.588 828.182,684.588 828.741,684.588 829.301,684.588 829.86,684.588 830.419,684.588 830.978,684.588 831.538,684.588 832.097,684.588 832.656,684.588 833.215,684.588 833.775,684.588 834.334,684.588 834.893,684.588 835.452,684.588 836.012,684.588 836.571,684.588 837.13,684.588 837.689,684.588 838.249,684.588 838.808,684.588 839.367,684.588 839.926,684.588 840.486,684.588 841.045,684.588 841.604,684.588 842.163,684.588 842.723,684.588 843.282,684.588 843.841,684.588 844.4,684.588 844.96,684.588 845.519,684.588 846.078,684.588 846.637,684.588 847.197,684.588 847.756,684.588 848.315,684.588 848.874,684.588 849.434,684.588 849.993,684.588 850.552,684.588 851.111,684.588 851.671,684.588 852.23,684.588 852.789,684.588 853.348,684.588 853.908,684.588 854.467,684.588 855.026,684.588 855.585,684.588 856.145,684.588 856.704,684.588 857.263,684.588 857.822,684.588 858.382,684.588 858.941,684.588 859.5,684.588 860.059,684.588 860.619,684.588 861.178,684.588 861.737,684.588 862.296,684.588 862.856,684.588 863.415,684.588 863.974,684.588 864.533,684.588 865.093,684.588 865.652,684.588 866.211,684.588 866.77,684.588 867.33,684.588 867.889,684.588 868.448,684.588 869.007,684.588 869.567,684.588 870.126,684.588 870.685,684.588 871.244,684.588 871.804,684.588 872.363,684.588 872.922,684.588 873.481,684.588 874.041,684.588 874.6,684.588 875.159,684.588 875.718,684.588 876.278,684.588 876.837,684.588 877.396,684.588 877.955,684.588 878.515,684.588 879.074,684.588 879.633,684.588 880.192,684.588 880.752,684.588 881.311,684.588 881.87,684.588 882.429,684.588 882.989,684.588 883.548,684.588 884.107,684.588 884.666,684.588 885.226,684.588 885.785,684.588 886.344,684.588 886.903,684.588 887.463,684.588 888.022,684.588 888.581,684.588 889.14,684.588 889.7,684.588 890.259,684.588 890.818,684.588 891.377,684.588 891.937,684.588 892.496,684.588 893.055,684.588 893.614,684.588 894.174,684.588 894.733,684.588 895.292,684.588 895.851,684.588 896.411,684.588 896.97,684.588 897.529,684.588 898.088,684.588 898.648,684.588 899.207,684.588 899.766,684.588 900.325,684.588 900.885,684.588 901.444,684.588 902.003,684.588 902.562,684.588 903.122,684.588 903.681,684.588 904.24,684.588 904.799,684.588 905.359,684.588 905.918,684.588 906.477,684.588 907.036,684.588 907.596,684.588 908.155,684.588 908.714,684.588 909.273,684.588 909.833,684.588 910.392,684.588 910.951,684.588 911.51,684.588 912.07,684.588 912.629,684.588 913.188,684.588 913.747,684.588 914.307,684.588 914.866,684.588 915.425,684.588 915.984,684.588 916.544,684.588 917.103,684.588 917.662,684.588 918.221,684.588 918.781,684.588 919.34,684.588 919.899,684.588 920.458,684.588 921.018,684.588 921.577,684.588 922.136,684.588 922.695,684.588 923.255,684.588 923.814,684.588 924.373,684.588 924.932,684.588 925.492,684.588 926.051,684.588 926.61,684.588 927.169,684.588 927.729,684.588 928.288,684.588 928.847,684.588 929.406,684.588 929.966,684.588 930.525,684.588 931.084,684.588 931.644,684.588 932.203,684.588 932.762,684.588 933.321,684.588 933.881,684.588 934.44,684.588 934.999,684.588 935.558,684.588 936.118,684.588 936.677,684.588 937.236,684.588 937.795,684.588 938.355,684.588 938.914,684.588 939.473,684.588 940.032,684.588 940.592,684.588 941.151,684.588 941.71,684.588 942.269,684.588 942.829,684.588 943.388,684.588 943.947,684.588 944.506,684.588 945.066,684.588 945.625,684.588 946.184,684.588 946.743,684.588 947.303,684.588 947.862,684.588 948.421,684.588 948.98,684.588 949.54,684.588 950.099,684.588 950.658,684.588 951.217,684.588 951.777,684.588 952.336,684.588 952.895,684.588 953.454,684.588 954.014,684.588 954.573,684.588 955.132,684.588 955.691,684.588 956.251,684.588 956.81,684.588 957.369,684.588 957.928,684.588 958.488,684.588 959.047,684.588 959.606,684.588 960.165,684.588 960.725,684.588 961.284,684.588 961.843,684.588 962.402,684.588 962.962,684.588 963.521,684.588 964.08,684.588 964.639,684.588 965.199,684.588 965.758,684.588 966.317,684.588 966.876,684.588 967.436,684.588 967.995,684.588 968.554,684.588 969.113,684.588 969.673,684.588 970.232,684.588 970.791,684.588 971.35,684.588 971.91,684.588 972.469,684.588 973.028,684.588 973.587,684.588 974.147,684.588 974.706,684.588 975.265,684.588 975.824,684.588 976.384,684.588 976.943,684.588 977.502,684.588 978.061,684.588 978.621,684.588 979.18,684.588 979.739,684.588 980.298,684.588 980.858,684.588 981.417,684.588 981.976,684.588 982.535,684.588 983.095,684.588 983.654,684.588 984.213,684.588 984.772,684.588 985.332,684.588 985.891,684.588 986.45,684.588 987.009,684.588 987.569,684.588 988.128,684.588 988.687,684.588 989.246,684.588 989.806,684.588 990.365,684.588 990.924,684.588 991.483,684.588 992.043,684.588 992.602,684.588 993.161,684.588 993.72,684.588 994.28,684.588 994.839,684.588 995.398,684.588 995.957,684.588 996.517,684.588 997.076,684.588 997.635,684.588 998.194,684.588 998.754,684.588 999.313,684.588 999.872,684.588 1000.43,684.588 1000.99,684.588 1001.55,684.588 1002.11,684.588 1002.67,684.588 1003.23,684.588 1003.79,684.588 1004.35,684.588 1004.91,684.588 1005.46,684.588 1006.02,684.588 1006.58,684.588 1007.14,684.588 1007.7,684.588 1008.26,684.588 1008.82,684.588 1009.38,684.588 1009.94,684.588 1010.5,684.588 1011.06,684.588 1011.62,684.588 1012.18,684.588 1012.73,684.588 1013.29,684.588 1013.85,684.588 1014.41,684.588 1014.97,684.588 1015.53,684.588 1016.09,684.588 1016.65,684.588 1017.21,684.588 1017.77,684.588 1018.33,684.588 1018.89,684.588 1019.45,684.588 1020.01,684.588 1020.56,684.588 1021.12,684.588 1021.68,684.588 1022.24,684.588 1022.8,684.588 1023.36,684.588 1023.92,684.588 1024.48,684.588 1025.04,684.588 1025.6,684.588 1026.16,684.588 1026.72,684.588 1027.28,684.588 1027.83,684.588 1028.39,684.588 1028.95,684.588 1029.51,684.588 1030.07,684.588 1030.63,684.588 1031.19,684.588 1031.75,684.588 1032.31,684.588 1032.87,684.588 1033.43,684.588 1033.99,684.588 1034.55,684.588 1035.1,684.588 1035.66,684.588 1036.22,684.588 1036.78,684.588 1037.34,684.588 1037.9,684.588 1038.46,684.588 1039.02,684.588 1039.58,684.588 1040.14,684.588 1040.7,684.588 1041.26,684.588 1041.82,684.588 1042.38,684.588 1042.93,684.588 1043.49,684.588 1044.05,684.588 1044.61,684.588 1045.17,684.588 1045.73,684.588 1046.29,684.588 1046.85,684.588 1047.41,684.588 1047.97,684.588 1048.53,684.588 1049.09,684.588 1049.65,684.588 1050.2,684.588 1050.76,684.588 1051.32,684.588 1051.88,684.588 1052.44,684.588 1053,684.588 1053.56,684.588 1054.12,684.588 1054.68,684.588 1055.24,684.588 1055.8,684.588 1056.36,684.588 1056.92,684.588 1057.48,684.588 1058.03,684.588 1058.59,684.588 1059.15,684.588 1059.71,684.588 1060.27,684.588 1060.83,684.588 1061.39,684.588 1061.95,684.588 1062.51,684.588 1063.07,684.588 1063.63,684.588 1064.19,684.588 1064.75,684.588 1065.3,684.588 1065.86,684.588 1066.42,684.588 1066.98,684.588 1067.54,684.588 1068.1,684.588 1068.66,684.588 1069.22,684.588 1069.78,684.588 1070.34,684.588 1070.9,684.588 1071.46,684.588 1072.02,684.588 1072.57,684.588 1073.13,684.588 1073.69,684.588 1074.25,684.588 1074.81,684.588 1075.37,684.588 1075.93,684.588 1076.49,684.588 1077.05,684.588 1077.61,684.588 1078.17,684.588 1078.73,684.588 1079.29,684.588 1079.85,684.588 1080.4,684.588 1080.96,684.588 1081.52,684.588 1082.08,684.588 1082.64,684.588 1083.2,684.588 1083.76,684.588 1084.32,684.588 1084.88,684.588 1085.44,684.588 1086,684.588 1086.56,684.588 1087.12,684.588 1087.67,684.588 1088.23,684.588 1088.79,684.588 1089.35,684.588 1089.91,684.588 1090.47,684.588 1091.03,684.588 1091.59,684.588 1092.15,684.588 1092.71,684.588 1093.27,684.588 1093.83,684.588 1094.39,684.588 1094.94,684.588 1095.5,684.588 1096.06,684.588 1096.62,684.588 1097.18,684.588 1097.74,684.588 1098.3,684.588 1098.86,684.588 1099.42,684.588 1099.98,684.588 1100.54,684.588 1101.1,684.588 1101.66,684.588 1102.22,684.588 1102.77,684.588 1103.33,684.588 1103.89,684.588 1104.45,684.588 1105.01,684.588 1105.57,684.588 1106.13,684.588 1106.69,684.588 1107.25,684.588 1107.81,684.588 1108.37,684.588 1108.93,684.588 1109.49,684.588 1110.04,684.588 1110.6,684.588 1111.16,684.588 1111.72,684.588 1112.28,684.588 1112.84,684.588 1113.4,684.588 1113.96,684.588 1114.52,684.588 1115.08,684.588 1115.64,684.588 1116.2,684.588 1116.76,684.588 1117.31,684.588 1117.87,684.588 1118.43,684.588 1118.99,684.588 1119.55,684.588 1120.11,684.588 1120.67,684.588 1121.23,684.588 1121.79,684.588 1122.35,684.588 1122.91,684.588 1123.47,684.588 1124.03,684.588 1124.59,684.588 1125.14,684.588 1125.7,684.588 1126.26,684.588 1126.82,684.588 1127.38,684.588 1127.94,684.588 1128.5,684.588 1129.06,684.588 1129.62,684.588 1130.18,684.588 1130.74,684.588 1131.3,684.588 1131.86,684.588 1132.41,684.588 1132.97,684.588 1133.53,684.588 1134.09,684.588 1134.65,684.588 1135.21,684.588 1135.77,684.588 1136.33,684.588 1136.89,684.588 1137.45,684.588 1138.01,684.588 1138.57,684.588 1139.13,684.588 1139.68,684.588 1140.24,684.588 1140.8,684.588 1141.36,684.588 1141.92,684.588 1142.48,684.588 1143.04,684.588 1143.6,684.588 1144.16,684.588 1144.72,684.588 1145.28,684.588 1145.84,684.588 1146.4,684.588 1146.96,684.588 1147.51,684.588 1148.07,684.588 1148.63,684.588 1149.19,684.588 1149.75,684.588 1150.31,684.588 1150.87,684.588 1151.43,684.588 1151.99,684.588 1152.55,684.588 1153.11,684.588 1153.67,684.588 1154.23,684.588 1154.78,684.588 1155.34,684.588 1155.9,684.588 1156.46,684.588 1157.02,684.588 1157.58,684.588 1158.14,684.588 1158.7,684.588 1159.26,684.588 1159.82,684.588 1160.38,684.588 1160.94,684.588 1161.5,684.588 1162.05,684.588 1162.61,684.588 1163.17,684.588 1163.73,684.588 1164.29,684.588 1164.85,684.588 1165.41,684.588 1165.97,684.588 1166.53,684.588 1167.09,684.588 1167.65,684.588 1168.21,684.588 1168.77,684.588 1169.33,684.588 1169.88,684.588 1170.44,684.588 1171,684.588 1171.56,684.588 1172.12,684.588 1172.68,684.588 1173.24,684.588 1173.8,684.588 1174.36,684.588 1174.92,684.588 1175.48,684.588 1176.04,684.588 1176.6,684.588 1177.15,684.588 1177.71,684.588 1178.27,684.588 1178.83,684.588 1179.39,684.588 1179.95,684.588 1180.51,684.588 1181.07,684.588 1181.63,684.588 1182.19,684.588 1182.75,684.588 1183.31,684.588 1183.87,684.588 1184.43,684.588 1184.98,684.588 1185.54,684.588 1186.1,684.588 1186.66,684.588 1187.22,684.588 1187.78,684.588 1188.34,684.588 1188.9,684.588 1189.46,684.588 1190.02,684.588 1190.58,684.588 1191.14,684.588 1191.7,684.588 1192.25,684.588 1192.81,684.588 1193.37,684.588 1193.93,684.588 1194.49,684.588 1195.05,684.588 1195.61,684.588 1196.17,684.588 1196.73,684.588 1197.29,684.588 1197.85,684.588 1198.41,684.588 1198.97,684.588 1199.52,684.588 1200.08,684.588 1200.64,684.588 1201.2,684.588 1201.76,684.588 1202.32,684.588 1202.88,684.588 1203.44,684.588 1204,684.588 1204.56,684.588 1205.12,684.588 1205.68,684.588 1206.24,684.588 1206.8,684.588 1207.35,684.588 1207.91,684.588 1208.47,684.588 1209.03,684.588 1209.59,684.588 1210.15,684.588 1210.71,684.588 1211.27,684.588 1211.83,684.588 1212.39,684.588 1212.95,684.588 1213.51,684.588 1214.07,684.588 1214.62,684.588 1215.18,684.588 1215.74,684.588 1216.3,684.588 1216.86,684.588 1217.42,684.588 1217.98,684.588 1218.54,684.588 1219.1,684.588 1219.66,684.588 1220.22,684.588 1220.78,684.588 1221.34,684.588 1221.89,684.588 1222.45,684.588 1223.01,684.588 1223.57,684.588 1224.13,684.588 1224.69,684.588 1225.25,684.588 1225.81,684.588 1226.37,684.588 1226.93,684.588 1227.49,684.588 1228.05,684.588 1228.61,684.588 1229.17,684.588 1229.72,684.588 1230.28,684.588 1230.84,684.588 1231.4,684.588 1231.96,684.588 1232.52,684.588 1233.08,684.588 1233.64,684.588 1234.2,684.588 1234.76,684.588 1235.32,684.588 1235.88,684.588 1236.44,684.588 1236.99,684.588 1237.55,684.588 1238.11,684.588 1238.67,684.588 1239.23,684.588 1239.79,684.588 1240.35,684.588 1240.91,684.588 1241.47,684.588 1242.03,684.588 1242.59,684.588 1243.15,684.588 1243.71,684.588 1244.26,684.588 1244.82,684.588 1245.38,684.588 1245.94,684.588 1246.5,684.588 1247.06,684.588 1247.62,684.588 1248.18,684.588 1248.74,684.588 1249.3,684.588 1249.86,684.588 1250.42,684.588 1250.98,684.588 1251.54,684.588 1252.09,684.588 1252.65,684.588 1253.21,684.588 1253.77,684.588 1254.33,684.588 1254.89,684.588 1255.45,684.588 1256.01,684.588 1256.57,684.588 1257.13,684.588 1257.69,684.588 1258.25,684.588 1258.81,684.588 1259.36,684.588 1259.92,684.588 1260.48,684.588 1261.04,684.588 1261.6,684.588 1262.16,684.588 1262.72,684.588 1263.28,684.588 1263.84,684.588 1264.4,684.588 1264.96,684.588 1265.52,684.588 1266.08,684.588 1266.63,684.588 1267.19,684.588 1267.75,684.588 1268.31,684.588 1268.87,684.588 1269.43,684.588 1269.99,684.588 1270.55,684.588 1271.11,684.588 1271.67,684.588 1272.23,684.588 1272.79,684.588 1273.35,684.588 1273.91,684.588 1274.46,684.588 1275.02,684.588 1275.58,684.588 1276.14,684.588 1276.7,684.588 1277.26,684.588 1277.82,684.588 1278.38,684.588 1278.94,684.588 1279.5,684.588 1280.06,684.588 1280.62,684.588 1281.18,684.588 1281.73,684.588 1282.29,684.588 1282.85,684.588 1283.41,684.588 1283.97,684.588 1284.53,684.588 1285.09,684.588 1285.65,684.588 1286.21,684.588 1286.77,684.588 1287.33,684.588 1287.89,684.588 1288.45,684.588 1289,684.588 1289.56,684.588 1290.12,684.588 1290.68,684.588 1291.24,684.588 1291.8,684.588 1292.36,684.588 1292.92,684.588 1293.48,684.588 1294.04,684.588 1294.6,684.588 1295.16,684.588 1295.72,684.588 1296.28,684.588 1296.83,684.588 1297.39,684.588 1297.95,684.588 1298.51,684.588 1299.07,684.588 1299.63,684.588 1300.19,684.588 1300.75,684.588 1301.31,684.588 1301.87,684.588 1302.43,684.588 1302.99,684.588 1303.55,684.588 1304.1,684.588 1304.66,684.588 1305.22,684.588 1305.78,684.588 1306.34,684.588 1306.9,684.588 1307.46,684.588 1308.02,684.588 1308.58,684.588 1309.14,684.588 1309.7,684.588 1310.26,684.588 1310.82,684.588 1311.38,684.588 1311.93,684.588 1312.49,684.588 1313.05,684.588 1313.61,684.588 1314.17,684.588 1314.73,684.588 1315.29,684.588 1315.85,684.588 1316.41,684.588 1316.97,684.588 1317.53,684.588 1318.09,684.588 1318.65,684.588 1319.2,684.588 1319.76,684.588 1320.32,684.588 1320.88,684.588 1321.44,684.588 1322,684.588 1322.56,684.588 1323.12,684.588 1323.68,684.588 1324.24,684.588 1324.8,684.588 1325.36,684.588 1325.92,684.588 1326.47,684.588 1327.03,684.588 1327.59,684.588 1328.15,684.588 1328.71,684.588 1329.27,684.588 1329.83,684.588 1330.39,684.588 1330.95,684.588 1331.51,684.588 1332.07,684.588 1332.63,684.588 1333.19,684.588 1333.75,684.588 1334.3,684.588 1334.86,684.588 1335.42,684.588 1335.98,684.588 1336.54,684.588 1337.1,684.588 1337.66,684.588 1338.22,684.588 1338.78,684.588 1339.34,684.588 1339.9,684.588 1340.46,684.588 1341.02,684.588 1341.57,684.588 1342.13,684.588 1342.69,684.588 1343.25,684.588 1343.81,684.588 1344.37,684.588 1344.93,684.588 1345.49,684.588 1346.05,684.588 1346.61,684.588 1347.17,684.588 1347.73,684.588 1348.29,684.588 1348.84,684.588 1349.4,684.588 1349.96,684.588 1350.52,684.588 1351.08,684.588 1351.64,684.588 1352.2,684.588 1352.76,684.588 1353.32,684.588 1353.88,684.588 1354.44,684.588 1355,684.588 1355.56,684.588 1356.12,684.588 1356.67,684.588 1357.23,684.588 1357.79,684.588 1358.35,684.588 1358.91,684.588 1359.47,684.588 1360.03,684.588 1360.59,684.588 1361.15,684.588 1361.71,684.588 1362.27,684.588 1362.83,684.588 1363.39,684.588 1363.94,684.588 1364.5,684.588 1365.06,684.588 1365.62,684.588 1366.18,684.588 1366.74,684.588 1367.3,684.588 1367.86,684.588 1368.42,684.588 1368.98,684.588 1369.54,684.588 1370.1,684.588 1370.66,684.588 1371.21,684.588 1371.77,684.588 1372.33,684.588 1372.89,684.588 1373.45,684.588 1374.01,684.588 1374.57,684.588 1375.13,684.588 1375.69,684.588 1376.25,684.588 1376.81,684.588 1377.37,684.588 1377.93,684.588 1378.49,684.588 1379.04,684.588 1379.6,684.588 1380.16,684.588 1380.72,684.588 1381.28,684.588 1381.84,684.588 1382.4,684.588 1382.96,684.588 1383.52,684.588 1384.08,684.588 1384.64,684.588 1385.2,684.588 1385.76,684.588 1386.31,684.588 1386.87,684.588 1387.43,684.588 1387.99,684.588 1388.55,684.588 1389.11,684.588 1389.67,684.588 1390.23,684.588 1390.79,684.588 1391.35,684.588 1391.91,684.588 1392.47,684.588 1393.03,684.588 1393.58,684.588 1394.14,684.588 1394.7,684.588 1395.26,684.588 1395.82,684.588 1396.38,684.588 1396.94,684.588 1397.5,684.588 1398.06,684.588 1398.62,684.588 1399.18,684.588 1399.74,684.588 1400.3,684.588 1400.86,684.588 1401.41,684.588 1401.97,684.588 1402.53,684.588 1403.09,684.588 1403.65,684.588 1404.21,684.588 1404.77,684.588 1405.33,684.588 1405.89,684.588 1406.45,684.588 1407.01,684.588 1407.57,684.588 1408.13,684.588 1408.68,684.588 1409.24,684.588 1409.8,684.588 1410.36,684.588 1410.92,684.588 1411.48,684.588 1412.04,684.588 1412.6,684.588 1413.16,684.588 1413.72,684.588 1414.28,684.588 1414.84,684.588 1415.4,684.588 1415.95,684.588 1416.51,684.588 1417.07,684.588 1417.63,684.588 1418.19,684.588 1418.75,684.588 1419.31,684.588 1419.87,684.588 1420.43,684.588 1420.99,684.588 1421.55,684.588 1422.11,684.588 1422.67,684.588 1423.23,684.588 1423.78,684.588 1424.34,684.588 1424.9,684.588 1425.46,684.588 1426.02,684.588 1426.58,684.588 1427.14,684.588 1427.7,684.588 1428.26,684.588 1428.82,684.588 1429.38,684.588 1429.94,684.588 1430.5,684.588 1431.05,684.588 1431.61,684.588 1432.17,684.588 1432.73,684.588 1433.29,684.588 1433.85,684.588 1434.41,684.588 1434.97,684.588 1435.53,684.588 1436.09,684.588 1436.65,684.588 1437.21,684.588 1437.77,684.588 1438.33,684.588 1438.88,684.588 1439.44,684.588 1440,684.588 1440.56,684.588 1441.12,684.588 1441.68,684.588 1442.24,684.588 1442.8,684.588 1443.36,684.588 1443.92,684.588 1444.48,684.588 1445.04,684.588 1445.6,684.588 1446.15,684.588 1446.71,684.588 1447.27,684.588 1447.83,684.588 1448.39,684.588 1448.95,684.588 1449.51,684.588 1450.07,684.588 1450.63,684.588 1451.19,684.588 1451.75,684.588 1452.31,684.588 1452.87,684.588 1453.42,684.588 1453.98,684.588 1454.54,684.588 1455.1,684.588 1455.66,684.588 1456.22,684.588 1456.78,684.588 1457.34,684.588 1457.9,684.588 1458.46,684.588 1459.02,684.588 1459.58,684.588 1460.14,684.588 1460.7,684.588 1461.25,684.588 1461.81,684.588 1462.37,684.588 1462.93,684.588 1463.49,684.588 1464.05,684.588 1464.61,684.588 1465.17,684.588 1465.73,684.588 1466.29,684.588 1466.85,684.588 1467.41,684.588 1467.97,684.588 1468.52,684.588 1469.08,684.588 1469.64,684.588 1470.2,684.588 1470.76,684.588 1471.32,684.588 1471.88,684.588 1472.44,684.588 1473,684.588 1473.56,684.588 1474.12,684.588 1474.68,684.588 1475.24,684.588 1475.79,684.588 1476.35,684.588 1476.91,684.588 1477.47,684.588 1478.03,684.588 1478.59,684.588 1479.15,684.588 1479.71,684.588 1480.27,684.588 1480.83,684.588 1481.39,684.588 1481.95,684.588 1482.51,684.588 1483.07,684.588 1483.62,684.588 1484.18,684.588 1484.74,684.588 1485.3,684.588 1485.86,684.588 1486.42,684.588 1486.98,684.588 1487.54,684.588 1488.1,684.588 1488.66,684.588 1489.22,684.588 1489.78,684.588 1490.34,684.588 1490.89,684.588 1491.45,684.588 1492.01,684.588 1492.57,684.588 1493.13,684.588 1493.69,684.588 1494.25,684.588 1494.81,684.588 1495.37,684.588 1495.93,684.588 1496.49,684.588 1497.05,684.588 1497.61,684.588 1498.16,684.588 1498.72,684.588 1499.28,684.588 1499.84,684.588 1500.4,684.588 1500.96,684.588 1501.52,684.588 1502.08,684.588 1502.64,684.588 1503.2,684.588 1503.76,684.588 1504.32,684.588 1504.88,684.588 1505.44,684.588 1505.99,684.588 1506.55,684.588 1507.11,684.588 1507.67,684.588 1508.23,684.588 1508.79,684.588 1509.35,684.588 1509.91,684.588 1510.47,684.588 1511.03,684.588 1511.59,684.588 1512.15,684.588 1512.71,684.588 1513.26,684.588 1513.82,684.588 1514.38,684.588 1514.94,684.588 1515.5,684.588 1516.06,684.588 1516.62,684.588 1517.18,684.588 1517.74,684.588 1518.3,684.588 1518.86,684.588 1519.42,684.588 1519.98,684.588 1520.53,684.588 1521.09,684.588 1521.65,684.588 1522.21,684.588 1522.77,684.588 1523.33,684.588 1523.89,684.588 1524.45,684.588 1525.01,684.588 1525.57,684.588 1526.13,684.588 1526.69,684.588 1527.25,684.588 1527.81,684.588 1528.36,684.588 1528.92,684.588 1529.48,684.588 1530.04,684.588 1530.6,684.588 1531.16,684.588 1531.72,684.588 1532.28,684.588 1532.84,684.588 1533.4,684.588 1533.96,684.588 1534.52,684.588 1535.08,684.588 1535.63,684.588 1536.19,684.588 1536.75,684.588 1537.31,684.588 1537.87,684.588 1538.43,684.588 1538.99,684.588 1539.55,684.588 1540.11,684.588 1540.67,684.588 1541.23,684.588 1541.79,684.588 1542.35,684.588 1542.9,684.588 1543.46,684.588 1544.02,684.588 1544.58,684.588 1545.14,684.588 1545.7,684.588 1546.26,684.588 1546.82,684.588 1547.38,684.588 1547.94,684.588 1548.5,684.588 1549.06,684.588 1549.62,684.588 1550.18,684.588 1550.73,684.588 1551.29,684.588 1551.85,684.588 1552.41,684.588 1552.97,684.588 1553.53,684.588 1554.09,684.588 1554.65,684.588 1555.21,684.588 1555.77,684.588 1556.33,684.588 1556.89,684.588 1557.45,684.588 1558,684.588 1558.56,684.588 1559.12,684.588 1559.68,684.588 1560.24,684.588 1560.8,684.588 1561.36,684.588 1561.92,684.588 1562.48,684.588 1563.04,684.588 1563.6,684.588 1564.16,684.588 1564.72,684.588 1565.28,684.588 1565.83,684.588 1566.39,684.588 1566.95,684.588 1567.51,684.588 1568.07,684.588 1568.63,684.588 1569.19,684.588 1569.75,684.588 1570.31,684.588 1570.87,684.588 1571.43,684.588 1571.99,684.588 1572.55,684.588 1573.1,684.588 1573.66,684.588 1574.22,684.588 1574.78,684.588 1575.34,684.588 1575.9,684.588 1576.46,684.588 1577.02,684.588 1577.58,684.588 1578.14,684.588 1578.7,684.588 1579.26,684.588 1579.82,684.588 1580.37,684.588 1580.93,684.588 1581.49,684.588 1582.05,684.588 1582.61,684.588 1583.17,684.588 1583.73,684.588 1584.29,684.588 1584.85,684.588 1585.41,684.588 1585.97,684.588 1586.53,684.588 1587.09,684.588 1587.65,684.588 1588.2,684.588 1588.76,684.588 1589.32,684.588 1589.88,684.588 1590.44,684.588 1591,684.588 1591.56,684.588 1592.12,684.588 1592.68,684.588 1593.24,684.588 1593.8,684.588 1594.36,684.588 1594.92,684.588 1595.47,684.588 1596.03,684.588 1596.59,684.588 1597.15,684.588 1597.71,684.588 1598.27,684.588 1598.83,684.588 1599.39,684.588 1599.95,684.588 1600.51,684.588 1601.07,684.588 1601.63,684.588 1602.19,684.588 1602.74,684.588 1603.3,684.588 1603.86,684.588 1604.42,684.588 1604.98,684.588 1605.54,684.588 1606.1,684.588 1606.66,684.588 1607.22,684.588 1607.78,684.588 1608.34,684.588 1608.9,684.588 1609.46,684.588 1610.02,684.588 1610.57,684.588 1611.13,684.588 1611.69,684.588 1612.25,684.588 1612.81,684.588 1613.37,684.588 1613.93,684.588 1614.49,684.588 1615.05,684.588 1615.61,684.588 1616.17,684.588 1616.73,684.588 1617.29,684.588 1617.84,684.588 1618.4,684.588 1618.96,684.588 1619.52,684.588 1620.08,684.588 1620.64,684.588 1621.2,684.588 1621.76,684.588 1622.32,684.588 1622.88,684.588 1623.44,684.588 1624,684.588 1624.56,684.588 1625.11,684.588 1625.67,684.588 1626.23,684.588 1626.79,684.588 1627.35,684.588 1627.91,684.588 1628.47,684.588 1629.03,684.588 1629.59,684.588 1630.15,684.588 1630.71,684.588 1631.27,684.588 1631.83,684.588 1632.39,684.588 1632.94,684.588 1633.5,684.588 1634.06,684.588 1634.62,684.588 1635.18,684.588 1635.74,684.588 1636.3,684.588 1636.86,684.588 1637.42,684.588 1637.98,684.588 1638.54,684.588 1639.1,684.588 1639.66,684.588 1640.21,684.588 1640.77,684.588 1641.33,684.588 1641.89,684.588 1642.45,684.588 1643.01,684.588 1643.57,684.588 1644.13,684.588 1644.69,684.588 1645.25,684.588 1645.81,684.588 1646.37,684.588 1646.93,684.588 1647.48,684.588 1648.04,684.588 1648.6,684.588 1649.16,684.588 1649.72,684.588 1650.28,684.588 1650.84,684.588 1651.4,684.588 1651.96,684.588 1652.52,684.588 1653.08,684.588 1653.64,684.588 1654.2,684.588 1654.76,684.588 1655.31,684.588 1655.87,684.588 1656.43,684.588 1656.99,684.588 1657.55,684.588 1658.11,684.588 1658.67,684.588 1659.23,684.588 1659.79,684.588 1660.35,684.588 1660.91,684.588 1661.47,684.588 1662.03,684.588 1662.58,684.588 1663.14,684.588 1663.7,684.588 1664.26,684.588 1664.82,684.588 1665.38,684.588 1665.94,684.588 1666.5,684.588 1667.06,684.588 1667.62,684.588 1668.18,684.588 1668.74,684.588 1669.3,684.588 1669.85,684.588 1670.41,684.588 1670.97,684.588 1671.53,684.588 1672.09,684.588 1672.65,684.588 1673.21,684.588 1673.77,684.588 1674.33,684.588 1674.89,684.588 1675.45,684.588 1676.01,684.588 1676.57,684.588 1677.13,684.588 1677.68,684.588 1678.24,684.588 1678.8,684.588 1679.36,684.588 1679.92,684.588 1680.48,684.588 1681.04,684.588 1681.6,684.588 1682.16,684.588 1682.72,684.588 1683.28,684.588 1683.84,684.588 1684.4,684.588 1684.95,684.588 1685.51,684.588 1686.07,684.588 1686.63,684.588 1687.19,684.588 1687.75,684.588 1688.31,684.588 1688.87,684.588 1689.43,684.588 1689.99,684.588 1690.55,684.588 1691.11,684.588 1691.67,684.588 1692.23,684.588 1692.78,684.588 1693.34,684.588 1693.9,684.588 1694.46,684.588 1695.02,684.588 1695.58,684.588 1696.14,684.588 1696.7,684.588 1697.26,684.588 1697.82,684.588 1698.38,684.588 1698.94,684.588 1699.5,684.588 1700.05,684.588 1700.61,684.588 1701.17,684.588 1701.73,684.588 1702.29,684.588 1702.85,684.588 1703.41,684.588 1703.97,684.588 1704.53,684.588 1705.09,684.588 1705.65,684.588 1706.21,684.588 1706.77,684.588 1707.32,684.588 1707.88,684.588 1708.44,684.588 1709,684.588 1709.56,684.588 1710.12,684.588 1710.68,684.588 1711.24,684.588 1711.8,684.588 1712.36,684.588 1712.92,684.588 1713.48,684.588 1714.04,684.588 1714.6,684.588 1715.15,684.588 1715.71,684.588 1716.27,684.588 1716.83,684.588 1717.39,684.588 1717.95,684.588 1718.51,684.588 1719.07,684.588 1719.63,684.588 1720.19,684.588 1720.75,684.588 1721.31,684.588 1721.87,684.588 1722.42,684.588 1722.98,684.588 1723.54,684.588 1724.1,684.588 1724.66,684.588 1725.22,684.588 1725.78,684.588 1726.34,684.588 1726.9,684.588 1727.46,684.588 1728.02,684.588 1728.58,684.588 1729.14,684.588 1729.69,684.588 1730.25,684.588 1730.81,684.588 1731.37,684.588 1731.93,684.588 1732.49,684.588 1733.05,684.588 1733.61,684.588 1734.17,684.588 1734.73,684.588 1735.29,684.588 1735.85,684.588 1736.41,684.588 1736.97,684.588 1737.52,684.588 1738.08,684.588 1738.64,684.588 1739.2,684.588 1739.76,684.588 1740.32,684.588 1740.88,684.588 1741.44,684.588 1742,684.588 1742.56,684.588 1743.12,684.588 1743.68,684.588 1744.24,684.588 1744.79,684.588 1745.35,684.588 1745.91,684.588 1746.47,684.588 1747.03,684.588 1747.59,684.588 1748.15,684.588 1748.71,684.588 1749.27,684.588 1749.83,684.588 1750.39,684.588 1750.95,684.588 1751.51,684.588 1752.06,684.588 1752.62,684.588 1753.18,684.588 1753.74,684.588 1754.3,684.588 1754.86,684.588 1755.42,684.588 1755.98,684.588 1756.54,684.588 1757.1,684.588 1757.66,684.588 1758.22,684.588 1758.78,684.588 1759.34,684.588 1759.89,684.588 1760.45,684.588 1761.01,684.588 1761.57,684.588 1762.13,684.588 1762.69,684.588 1763.25,684.588 1763.81,684.588 1764.37,684.588 1764.93,684.588 1765.49,684.588 1766.05,684.588 1766.61,684.588 1767.16,684.588 1767.72,684.588 1768.28,684.588 1768.84,684.588 1769.4,684.588 1769.96,684.588 1770.52,684.588 1771.08,684.588 1771.64,684.588 1772.2,684.588 1772.76,684.588 1773.32,684.588 1773.88,684.588 1774.43,684.588 1774.99,684.588 1775.55,684.588 1776.11,684.588 1776.67,684.588 1777.23,684.588 1777.79,684.588 1778.35,684.588 1778.91,684.588 1779.47,684.588 1780.03,684.588 1780.59,684.588 1781.15,684.588 1781.71,684.588 1782.26,684.588 1782.82,684.588 1783.38,684.588 1783.94,684.588 1784.5,684.588 1785.06,684.588 1785.62,684.588 1786.18,684.588 1786.74,684.588 1787.3,684.588 1787.86,684.588 1788.42,684.588 1788.98,684.588 1789.53,684.588 1790.09,684.588 1790.65,684.588 1791.21,684.588 1791.77,684.588 1792.33,684.588 1792.89,684.588 1793.45,684.588 1794.01,684.588 1794.57,684.588 1795.13,684.588 1795.69,684.588 1796.25,684.588 1796.8,684.588 1797.36,684.588 1797.92,684.588 1798.48,684.588 1799.04,684.588 1799.6,684.588 1800.16,684.588 1800.72,684.588 1801.28,684.588 1801.84,684.588 1802.4,684.588 1802.96,684.588 1803.52,684.588 1804.08,684.588 1804.63,684.588 1805.19,684.588 1805.75,684.588 1806.31,684.588 1806.87,684.588 1807.43,684.588 1807.99,684.588 1808.55,684.588 1809.11,684.588 1809.67,684.588 1810.23,684.588 1810.79,684.588 1811.35,684.588 1811.9,684.588 1812.46,684.588 1813.02,684.588 1813.58,684.588 1814.14,684.588 1814.7,684.588 1815.26,684.588 1815.82,684.588 1816.38,684.588 1816.94,684.588 1817.5,684.588 1818.06,684.588 1818.62,684.588 1819.18,684.588 1819.73,684.588 1820.29,684.588 1820.85,684.588 1821.41,684.588 1821.97,684.588 1822.53,684.588 1823.09,684.588 1823.65,684.588 1824.21,684.588 1824.77,684.588 1825.33,684.588 1825.89,684.588 1826.45,684.588 1827,684.588 1827.56,684.588 1828.12,684.588 1828.68,684.588 1829.24,684.588 1829.8,684.588 1830.36,684.588 1830.92,684.588 1831.48,684.588 1832.04,684.588 1832.6,684.588 1833.16,684.588 1833.72,684.588 1834.27,684.588 1834.83,684.588 1835.39,684.588 1835.95,684.588 1836.51,684.588 1837.07,684.588 1837.63,684.588 1838.19,684.588 \"/>\n<path clip-path=\"url(#clip933)\" d=\"M720.247 684.322 L720.806 684.322 L721.365 684.322 L721.924 684.322 L722.484 684.322 L723.043 684.322 L723.602 684.322 L724.161 684.322 L724.721 684.322 L725.28 684.322 L725.839 684.322 L726.398 684.322 L726.958 684.322 L727.517 684.322 L728.076 684.322 L728.635 684.322 L729.195 684.322 L729.754 684.322 L730.313 684.322 L730.872 684.322 L731.432 684.322 L731.991 684.322 L732.55 684.322 L733.109 684.322 L733.669 684.322 L734.228 684.322 L734.787 684.322 L735.346 684.322 L735.906 684.322 L736.465 684.322 L737.024 684.322 L737.583 684.322 L738.143 684.322 L738.702 684.322 L739.261 684.322 L739.82 684.322 L740.38 684.322 L740.939 684.322 L741.498 684.322 L742.057 684.322 L742.617 684.322 L743.176 684.322 L743.735 684.322 L744.294 684.322 L744.854 684.322 L745.413 684.322 L745.972 684.322 L746.531 684.322 L747.091 684.322 L747.65 684.322 L748.209 684.322 L748.768 684.322 L749.328 684.322 L749.887 684.322 L750.446 684.322 L751.005 684.322 L751.565 684.322 L752.124 684.322 L752.683 684.322 L753.242 684.322 L753.802 684.322 L754.361 684.322 L754.92 684.322 L755.479 684.322 L756.039 684.322 L756.598 684.322 L757.157 684.322 L757.716 684.322 L758.276 684.322 L758.835 684.322 L759.394 684.322 L759.953 684.322 L760.513 684.322 L761.072 684.322 L761.631 684.322 L762.19 684.322 L762.75 684.322 L763.309 684.322 L763.868 684.322 L764.427 684.322 L764.987 684.322 L765.546 684.322 L766.105 684.322 L766.664 684.322 L767.224 684.322 L767.783 684.322 L768.342 684.322 L768.901 684.322 L769.461 684.322 L770.02 684.322 L770.579 684.322 L771.138 684.322 L771.698 684.322 L772.257 684.322 L772.816 684.322 L773.375 684.322 L773.935 684.322 L774.494 684.322 L775.053 684.322 L775.612 684.322 L776.172 684.322 L776.731 684.322 L777.29 684.322 L777.849 684.322 L778.409 684.322 L778.968 684.322 L779.527 684.322 L780.086 684.322 L780.646 684.322 L781.205 684.322 L781.764 684.322 L782.323 684.322 L782.883 684.322 L783.442 684.322 L784.001 684.322 L784.56 684.322 L785.12 684.322 L785.679 684.322 L786.238 684.322 L786.797 684.322 L787.357 684.322 L787.916 684.322 L788.475 684.322 L789.034 684.322 L789.594 684.322 L790.153 684.322 L790.712 684.322 L791.271 684.322 L791.831 684.322 L792.39 684.322 L792.949 684.322 L793.508 684.322 L794.068 684.322 L794.627 684.322 L795.186 684.322 L795.745 684.322 L796.305 684.322 L796.864 684.322 L797.423 684.322 L797.982 684.322 L798.542 684.322 L799.101 684.322 L799.66 684.322 L800.219 684.322 L800.779 684.322 L801.338 684.322 L801.897 684.322 L802.456 684.322 L803.016 684.322 L803.575 684.322 L804.134 684.322 L804.693 684.322 L805.253 684.322 L805.812 684.322 L806.371 684.322 L806.931 684.322 L807.49 684.322 L808.049 684.322 L808.608 684.322 L809.168 684.322 L809.727 684.322 L810.286 684.322 L810.845 684.322 L811.405 684.322 L811.964 684.322 L812.523 684.322 L813.082 684.322 L813.642 684.322 L814.201 684.322 L814.76 684.322 L815.319 684.322 L815.879 684.322 L816.438 684.322 L816.997 684.322 L817.556 684.322 L818.116 684.322 L818.675 684.322 L819.234 684.322 L819.793 684.322 L820.353 684.322 L820.912 684.322 L821.471 684.322 L822.03 684.322 L822.59 684.322 L823.149 684.322 L823.708 684.322 L824.267 684.322 L824.827 684.322 L825.386 684.322 L825.945 684.322 L826.504 684.322 L827.064 684.322 L827.623 684.322 L828.182 684.322 L828.741 684.322 L829.301 684.322 L829.86 684.322 L830.419 684.322 L830.978 684.322 L831.538 684.322 L832.097 684.322 L832.656 684.322 L833.215 684.322 L833.775 684.322 L834.334 684.322 L834.893 684.322 L835.452 684.322 L836.012 684.322 L836.571 684.322 L837.13 684.322 L837.689 684.322 L838.249 684.322 L838.808 684.322 L839.367 684.322 L839.926 684.322 L840.486 684.322 L841.045 684.322 L841.604 684.322 L842.163 684.322 L842.723 684.322 L843.282 684.322 L843.841 684.322 L844.4 684.322 L844.96 684.322 L845.519 684.322 L846.078 684.322 L846.637 684.322 L847.197 684.322 L847.756 684.322 L848.315 684.322 L848.874 684.322 L849.434 684.322 L849.993 684.322 L850.552 684.322 L851.111 684.322 L851.671 684.322 L852.23 684.322 L852.789 684.322 L853.348 684.322 L853.908 684.322 L854.467 684.322 L855.026 684.322 L855.585 684.322 L856.145 684.322 L856.704 684.322 L857.263 684.322 L857.822 684.322 L858.382 684.322 L858.941 684.322 L859.5 684.322 L860.059 684.322 L860.619 684.322 L861.178 684.322 L861.737 684.322 L862.296 684.322 L862.856 684.322 L863.415 684.322 L863.974 684.322 L864.533 684.322 L865.093 684.322 L865.652 684.322 L866.211 684.322 L866.77 684.322 L867.33 684.322 L867.889 684.322 L868.448 684.322 L869.007 684.322 L869.567 684.322 L870.126 684.322 L870.685 684.322 L871.244 684.322 L871.804 684.322 L872.363 684.322 L872.922 684.322 L873.481 684.322 L874.041 684.322 L874.6 684.322 L875.159 684.322 L875.718 684.322 L876.278 684.322 L876.837 684.322 L877.396 684.322 L877.955 684.322 L878.515 684.322 L879.074 684.322 L879.633 684.322 L880.192 684.322 L880.752 684.322 L881.311 684.322 L881.87 684.322 L882.429 684.322 L882.989 684.322 L883.548 684.322 L884.107 684.322 L884.666 684.322 L885.226 684.322 L885.785 684.322 L886.344 684.322 L886.903 684.322 L887.463 684.322 L888.022 684.322 L888.581 684.322 L889.14 684.322 L889.7 684.322 L890.259 684.322 L890.818 684.322 L891.377 684.322 L891.937 684.322 L892.496 684.322 L893.055 684.322 L893.614 684.322 L894.174 684.322 L894.733 684.322 L895.292 684.322 L895.851 684.322 L896.411 684.322 L896.97 684.322 L897.529 684.322 L898.088 684.322 L898.648 684.322 L899.207 684.322 L899.766 684.322 L900.325 684.322 L900.885 684.322 L901.444 684.322 L902.003 684.322 L902.562 684.322 L903.122 684.322 L903.681 684.322 L904.24 684.322 L904.799 684.322 L905.359 684.322 L905.918 684.322 L906.477 684.322 L907.036 684.322 L907.596 684.322 L908.155 684.322 L908.714 684.322 L909.273 684.322 L909.833 684.322 L910.392 684.322 L910.951 684.322 L911.51 684.322 L912.07 684.322 L912.629 684.322 L913.188 684.322 L913.747 684.322 L914.307 684.322 L914.866 684.322 L915.425 684.322 L915.984 684.322 L916.544 684.322 L917.103 684.322 L917.662 684.322 L918.221 684.322 L918.781 684.322 L919.34 684.322 L919.899 684.322 L920.458 684.322 L921.018 684.322 L921.577 684.322 L922.136 684.322 L922.695 684.322 L923.255 684.322 L923.814 684.322 L924.373 684.322 L924.932 684.322 L925.492 684.322 L926.051 684.322 L926.61 684.322 L927.169 684.322 L927.729 684.322 L928.288 684.322 L928.847 684.322 L929.406 684.322 L929.966 684.322 L930.525 684.322 L931.084 684.322 L931.644 684.322 L932.203 684.322 L932.762 684.322 L933.321 684.322 L933.881 684.322 L934.44 684.322 L934.999 684.322 L935.558 684.322 L936.118 684.322 L936.677 684.322 L937.236 684.322 L937.795 684.322 L938.355 684.322 L938.914 684.322 L939.473 684.322 L940.032 684.322 L940.592 684.322 L941.151 684.322 L941.71 684.322 L942.269 684.322 L942.829 684.322 L943.388 684.322 L943.947 684.322 L944.506 684.322 L945.066 684.322 L945.625 684.322 L946.184 684.322 L946.743 684.322 L947.303 684.322 L947.862 684.322 L948.421 684.322 L948.98 684.322 L949.54 684.322 L950.099 684.322 L950.658 684.322 L951.217 684.322 L951.777 684.322 L952.336 684.322 L952.895 684.322 L953.454 684.322 L954.014 684.322 L954.573 684.322 L955.132 684.322 L955.691 684.322 L956.251 684.322 L956.81 684.322 L957.369 684.322 L957.928 684.322 L958.488 684.322 L959.047 684.322 L959.606 684.322 L960.165 684.322 L960.725 684.322 L961.284 684.322 L961.843 684.322 L962.402 684.322 L962.962 684.322 L963.521 684.322 L964.08 684.322 L964.639 684.322 L965.199 684.322 L965.758 684.322 L966.317 684.322 L966.876 684.322 L967.436 684.322 L967.995 684.322 L968.554 684.322 L969.113 684.322 L969.673 684.322 L970.232 684.322 L970.791 684.322 L971.35 684.322 L971.91 684.322 L972.469 684.322 L973.028 684.322 L973.587 684.322 L974.147 684.322 L974.706 684.322 L975.265 684.322 L975.824 684.322 L976.384 684.322 L976.943 684.322 L977.502 684.322 L978.061 684.322 L978.621 684.322 L979.18 684.322 L979.739 684.322 L980.298 684.322 L980.858 684.322 L981.417 684.322 L981.976 684.322 L982.535 684.322 L983.095 684.322 L983.654 684.322 L984.213 684.322 L984.772 684.322 L985.332 684.322 L985.891 684.322 L986.45 684.322 L987.009 684.322 L987.569 684.322 L988.128 684.322 L988.687 684.322 L989.246 684.322 L989.806 684.322 L990.365 684.322 L990.924 684.322 L991.483 684.322 L992.043 684.322 L992.602 684.322 L993.161 684.322 L993.72 684.322 L994.28 684.322 L994.839 684.322 L995.398 684.322 L995.957 684.322 L996.517 684.322 L997.076 684.322 L997.635 684.322 L998.194 684.322 L998.754 684.322 L999.313 684.322 L999.872 684.322 L1000.43 684.322 L1000.99 684.322 L1001.55 684.322 L1002.11 684.322 L1002.67 684.322 L1003.23 684.322 L1003.79 684.322 L1004.35 684.322 L1004.91 684.322 L1005.46 684.322 L1006.02 684.322 L1006.58 684.322 L1007.14 684.322 L1007.7 684.322 L1008.26 684.322 L1008.82 684.322 L1009.38 684.322 L1009.94 684.322 L1010.5 684.322 L1011.06 684.322 L1011.62 684.322 L1012.18 684.322 L1012.73 684.322 L1013.29 684.322 L1013.85 684.322 L1014.41 684.322 L1014.97 684.322 L1015.53 684.322 L1016.09 684.322 L1016.65 684.322 L1017.21 684.322 L1017.77 684.322 L1018.33 684.322 L1018.89 684.322 L1019.45 684.322 L1020.01 684.322 L1020.56 684.322 L1021.12 684.322 L1021.68 684.322 L1022.24 684.322 L1022.8 684.322 L1023.36 684.322 L1023.92 684.322 L1024.48 684.322 L1025.04 684.322 L1025.6 684.322 L1026.16 684.322 L1026.72 684.322 L1027.28 684.322 L1027.83 684.322 L1028.39 684.322 L1028.95 684.322 L1029.51 684.322 L1030.07 684.322 L1030.63 684.322 L1031.19 684.322 L1031.75 684.322 L1032.31 684.322 L1032.87 684.322 L1033.43 684.322 L1033.99 684.322 L1034.55 684.322 L1035.1 684.322 L1035.66 684.322 L1036.22 684.322 L1036.78 684.322 L1037.34 684.322 L1037.9 684.322 L1038.46 684.322 L1039.02 684.322 L1039.58 684.322 L1040.14 684.322 L1040.7 684.322 L1041.26 684.322 L1041.82 684.322 L1042.38 684.322 L1042.93 684.322 L1043.49 684.322 L1044.05 684.322 L1044.61 684.322 L1045.17 684.322 L1045.73 684.322 L1046.29 684.322 L1046.85 684.322 L1047.41 684.322 L1047.97 684.322 L1048.53 684.322 L1049.09 684.322 L1049.65 684.322 L1050.2 684.322 L1050.76 684.322 L1051.32 684.322 L1051.88 684.322 L1052.44 684.322 L1053 684.322 L1053.56 684.322 L1054.12 684.322 L1054.68 684.322 L1055.24 684.322 L1055.8 684.322 L1056.36 684.322 L1056.92 684.322 L1057.48 684.322 L1058.03 684.322 L1058.59 684.322 L1059.15 684.322 L1059.71 684.322 L1060.27 684.322 L1060.83 684.322 L1061.39 684.322 L1061.95 684.322 L1062.51 684.322 L1063.07 684.322 L1063.63 684.322 L1064.19 684.322 L1064.75 684.322 L1065.3 684.322 L1065.86 684.322 L1066.42 684.322 L1066.98 684.322 L1067.54 684.322 L1068.1 684.322 L1068.66 684.322 L1069.22 684.322 L1069.78 684.322 L1070.34 684.322 L1070.9 684.322 L1071.46 684.322 L1072.02 684.322 L1072.57 684.322 L1073.13 684.322 L1073.69 684.322 L1074.25 684.322 L1074.81 684.322 L1075.37 684.322 L1075.93 684.322 L1076.49 684.322 L1077.05 684.322 L1077.61 684.322 L1078.17 684.322 L1078.73 684.322 L1079.29 684.322 L1079.85 684.322 L1080.4 684.322 L1080.96 684.322 L1081.52 684.322 L1082.08 684.322 L1082.64 684.322 L1083.2 684.322 L1083.76 684.322 L1084.32 684.322 L1084.88 684.322 L1085.44 684.322 L1086 684.322 L1086.56 684.322 L1087.12 684.322 L1087.67 684.322 L1088.23 684.322 L1088.79 684.322 L1089.35 684.322 L1089.91 684.322 L1090.47 684.322 L1091.03 684.322 L1091.59 684.322 L1092.15 684.322 L1092.71 684.322 L1093.27 684.322 L1093.83 684.322 L1094.39 684.322 L1094.94 684.322 L1095.5 684.322 L1096.06 684.322 L1096.62 684.322 L1097.18 684.322 L1097.74 684.322 L1098.3 684.322 L1098.86 684.322 L1099.42 684.322 L1099.98 684.322 L1100.54 684.322 L1101.1 684.322 L1101.66 684.322 L1102.22 684.322 L1102.77 684.322 L1103.33 684.322 L1103.89 684.322 L1104.45 684.322 L1105.01 684.322 L1105.57 684.322 L1106.13 684.322 L1106.69 684.322 L1107.25 684.322 L1107.81 684.322 L1108.37 684.322 L1108.93 684.322 L1109.49 684.322 L1110.04 684.322 L1110.6 684.322 L1111.16 684.322 L1111.72 684.322 L1112.28 684.322 L1112.84 684.322 L1113.4 684.322 L1113.96 684.322 L1114.52 684.322 L1115.08 684.322 L1115.64 684.322 L1116.2 684.322 L1116.76 684.322 L1117.31 684.322 L1117.87 684.322 L1118.43 684.322 L1118.99 684.322 L1119.55 684.322 L1120.11 684.322 L1120.67 684.322 L1121.23 684.322 L1121.79 684.322 L1122.35 684.322 L1122.91 684.322 L1123.47 684.322 L1124.03 684.322 L1124.59 684.322 L1125.14 684.322 L1125.7 684.322 L1126.26 684.322 L1126.82 684.322 L1127.38 684.322 L1127.94 684.322 L1128.5 684.322 L1129.06 684.322 L1129.62 684.322 L1130.18 684.322 L1130.74 684.322 L1131.3 684.322 L1131.86 684.322 L1132.41 684.322 L1132.97 684.322 L1133.53 684.322 L1134.09 684.322 L1134.65 684.322 L1135.21 684.322 L1135.77 684.322 L1136.33 684.322 L1136.89 684.322 L1137.45 684.322 L1138.01 684.322 L1138.57 684.322 L1139.13 684.322 L1139.68 684.322 L1140.24 684.322 L1140.8 684.322 L1141.36 684.322 L1141.92 684.322 L1142.48 684.322 L1143.04 684.322 L1143.6 684.322 L1144.16 684.322 L1144.72 684.322 L1145.28 684.322 L1145.84 684.322 L1146.4 684.322 L1146.96 684.322 L1147.51 684.322 L1148.07 684.322 L1148.63 684.322 L1149.19 684.322 L1149.75 684.322 L1150.31 684.322 L1150.87 684.322 L1151.43 684.322 L1151.99 684.322 L1152.55 684.322 L1153.11 684.322 L1153.67 684.322 L1154.23 684.322 L1154.78 684.322 L1155.34 684.322 L1155.9 684.322 L1156.46 684.322 L1157.02 684.322 L1157.58 684.322 L1158.14 684.322 L1158.7 684.322 L1159.26 684.322 L1159.82 684.322 L1160.38 684.322 L1160.94 684.322 L1161.5 684.322 L1162.05 684.322 L1162.61 684.322 L1163.17 684.322 L1163.73 684.322 L1164.29 684.322 L1164.85 684.322 L1165.41 684.322 L1165.97 684.322 L1166.53 684.322 L1167.09 684.322 L1167.65 684.322 L1168.21 684.322 L1168.77 684.322 L1169.33 684.322 L1169.88 684.322 L1170.44 684.322 L1171 684.322 L1171.56 684.322 L1172.12 684.322 L1172.68 684.322 L1173.24 684.322 L1173.8 684.322 L1174.36 684.322 L1174.92 684.322 L1175.48 684.322 L1176.04 684.322 L1176.6 684.322 L1177.15 684.322 L1177.71 684.322 L1178.27 684.322 L1178.83 684.322 L1179.39 684.322 L1179.95 684.322 L1180.51 684.322 L1181.07 684.322 L1181.63 684.322 L1182.19 684.322 L1182.75 684.322 L1183.31 684.322 L1183.87 684.322 L1184.43 684.322 L1184.98 684.322 L1185.54 684.322 L1186.1 684.322 L1186.66 684.322 L1187.22 684.322 L1187.78 684.322 L1188.34 684.322 L1188.9 684.322 L1189.46 684.322 L1190.02 684.322 L1190.58 684.322 L1191.14 684.322 L1191.7 684.322 L1192.25 684.322 L1192.81 684.322 L1193.37 684.322 L1193.93 684.322 L1194.49 684.322 L1195.05 684.322 L1195.61 684.322 L1196.17 684.322 L1196.73 684.322 L1197.29 684.322 L1197.85 684.322 L1198.41 684.322 L1198.97 684.322 L1199.52 684.322 L1200.08 684.322 L1200.64 684.322 L1201.2 684.322 L1201.76 684.322 L1202.32 684.322 L1202.88 684.322 L1203.44 684.322 L1204 684.322 L1204.56 684.322 L1205.12 684.322 L1205.68 684.322 L1206.24 684.322 L1206.8 684.322 L1207.35 684.322 L1207.91 684.322 L1208.47 684.322 L1209.03 684.322 L1209.59 684.322 L1210.15 684.322 L1210.71 684.322 L1211.27 684.322 L1211.83 684.322 L1212.39 684.322 L1212.95 684.322 L1213.51 684.322 L1214.07 684.322 L1214.62 684.322 L1215.18 684.322 L1215.74 684.322 L1216.3 684.322 L1216.86 684.322 L1217.42 684.322 L1217.98 684.322 L1218.54 684.322 L1219.1 684.322 L1219.66 684.322 L1220.22 684.322 L1220.78 684.322 L1221.34 684.322 L1221.89 684.322 L1222.45 684.322 L1223.01 684.322 L1223.57 684.322 L1224.13 684.322 L1224.69 684.322 L1225.25 684.322 L1225.81 684.322 L1226.37 684.322 L1226.93 684.322 L1227.49 684.322 L1228.05 684.322 L1228.61 684.322 L1229.17 684.322 L1229.72 684.322 L1230.28 684.322 L1230.84 684.322 L1231.4 684.322 L1231.96 684.322 L1232.52 684.322 L1233.08 684.322 L1233.64 684.322 L1234.2 684.322 L1234.76 684.322 L1235.32 684.322 L1235.88 684.322 L1236.44 684.322 L1236.99 684.322 L1237.55 684.322 L1238.11 684.322 L1238.67 684.322 L1239.23 684.322 L1239.79 684.322 L1240.35 684.322 L1240.91 684.322 L1241.47 684.322 L1242.03 684.322 L1242.59 684.322 L1243.15 684.322 L1243.71 684.322 L1244.26 684.322 L1244.82 684.322 L1245.38 684.322 L1245.94 684.322 L1246.5 684.322 L1247.06 684.322 L1247.62 684.322 L1248.18 684.322 L1248.74 684.322 L1249.3 684.322 L1249.86 684.322 L1250.42 684.322 L1250.98 684.322 L1251.54 684.322 L1252.09 684.322 L1252.65 684.322 L1253.21 684.322 L1253.77 684.322 L1254.33 684.322 L1254.89 684.322 L1255.45 684.322 L1256.01 684.322 L1256.57 684.322 L1257.13 684.322 L1257.69 684.322 L1258.25 684.322 L1258.81 684.322 L1259.36 684.322 L1259.92 684.322 L1260.48 684.322 L1261.04 684.322 L1261.6 684.322 L1262.16 684.322 L1262.72 684.322 L1263.28 684.322 L1263.84 684.322 L1264.4 684.322 L1264.96 684.322 L1265.52 684.322 L1266.08 684.322 L1266.63 684.322 L1267.19 684.322 L1267.75 684.322 L1268.31 684.322 L1268.87 684.322 L1269.43 684.322 L1269.99 684.322 L1270.55 684.322 L1271.11 684.322 L1271.67 684.322 L1272.23 684.322 L1272.79 684.322 L1273.35 684.322 L1273.91 684.322 L1274.46 684.322 L1275.02 684.322 L1275.58 684.322 L1276.14 684.322 L1276.7 684.322 L1277.26 684.322 L1277.82 684.322 L1278.38 684.322 L1278.94 684.322 L1279.5 684.322 L1280.06 684.322 L1280.62 684.322 L1281.18 684.322 L1281.73 684.322 L1282.29 684.322 L1282.85 684.322 L1283.41 684.322 L1283.97 684.322 L1284.53 684.322 L1285.09 684.322 L1285.65 684.322 L1286.21 684.322 L1286.77 684.322 L1287.33 684.322 L1287.89 684.322 L1288.45 684.322 L1289 684.322 L1289.56 684.322 L1290.12 684.322 L1290.68 684.322 L1291.24 684.322 L1291.8 684.322 L1292.36 684.322 L1292.92 684.322 L1293.48 684.322 L1294.04 684.322 L1294.6 684.322 L1295.16 684.322 L1295.72 684.322 L1296.28 684.322 L1296.83 684.322 L1297.39 684.322 L1297.95 684.322 L1298.51 684.322 L1299.07 684.322 L1299.63 684.322 L1300.19 684.322 L1300.75 684.322 L1301.31 684.322 L1301.87 684.322 L1302.43 684.322 L1302.99 684.322 L1303.55 684.322 L1304.1 684.322 L1304.66 684.322 L1305.22 684.322 L1305.78 684.322 L1306.34 684.322 L1306.9 684.322 L1307.46 684.322 L1308.02 684.322 L1308.58 684.322 L1309.14 684.322 L1309.7 684.322 L1310.26 684.322 L1310.82 684.322 L1311.38 684.322 L1311.93 684.322 L1312.49 684.322 L1313.05 684.322 L1313.61 684.322 L1314.17 684.322 L1314.73 684.322 L1315.29 684.322 L1315.85 684.322 L1316.41 684.322 L1316.97 684.322 L1317.53 684.322 L1318.09 684.322 L1318.65 684.322 L1319.2 684.322 L1319.76 684.322 L1320.32 684.322 L1320.88 684.322 L1321.44 684.322 L1322 684.322 L1322.56 684.322 L1323.12 684.322 L1323.68 684.322 L1324.24 684.322 L1324.8 684.322 L1325.36 684.322 L1325.92 684.322 L1326.47 684.322 L1327.03 684.322 L1327.59 684.322 L1328.15 684.322 L1328.71 684.322 L1329.27 684.322 L1329.83 684.322 L1330.39 684.322 L1330.95 684.322 L1331.51 684.322 L1332.07 684.322 L1332.63 684.322 L1333.19 684.322 L1333.75 684.322 L1334.3 684.322 L1334.86 684.322 L1335.42 684.322 L1335.98 684.322 L1336.54 684.322 L1337.1 684.322 L1337.66 684.322 L1338.22 684.322 L1338.78 684.322 L1339.34 684.322 L1339.9 684.322 L1340.46 684.322 L1341.02 684.322 L1341.57 684.322 L1342.13 684.322 L1342.69 684.322 L1343.25 684.322 L1343.81 684.322 L1344.37 684.322 L1344.93 684.322 L1345.49 684.322 L1346.05 684.322 L1346.61 684.322 L1347.17 684.322 L1347.73 684.322 L1348.29 684.322 L1348.84 684.322 L1349.4 684.322 L1349.96 684.322 L1350.52 684.322 L1351.08 684.322 L1351.64 684.322 L1352.2 684.322 L1352.76 684.322 L1353.32 684.322 L1353.88 684.322 L1354.44 684.322 L1355 684.322 L1355.56 684.322 L1356.12 684.322 L1356.67 684.322 L1357.23 684.322 L1357.79 684.322 L1358.35 684.322 L1358.91 684.322 L1359.47 684.322 L1360.03 684.322 L1360.59 684.322 L1361.15 684.322 L1361.71 684.322 L1362.27 684.322 L1362.83 684.322 L1363.39 684.322 L1363.94 684.322 L1364.5 684.322 L1365.06 684.322 L1365.62 684.322 L1366.18 684.322 L1366.74 684.322 L1367.3 684.322 L1367.86 684.322 L1368.42 684.322 L1368.98 684.322 L1369.54 684.322 L1370.1 684.322 L1370.66 684.322 L1371.21 684.322 L1371.77 684.322 L1372.33 684.322 L1372.89 684.322 L1373.45 684.322 L1374.01 684.322 L1374.57 684.322 L1375.13 684.322 L1375.69 684.322 L1376.25 684.322 L1376.81 684.322 L1377.37 684.322 L1377.93 684.322 L1378.49 684.322 L1379.04 684.322 L1379.6 684.322 L1380.16 684.322 L1380.72 684.322 L1381.28 684.322 L1381.84 684.322 L1382.4 684.322 L1382.96 684.322 L1383.52 684.322 L1384.08 684.322 L1384.64 684.322 L1385.2 684.322 L1385.76 684.322 L1386.31 684.322 L1386.87 684.322 L1387.43 684.322 L1387.99 684.322 L1388.55 684.322 L1389.11 684.322 L1389.67 684.322 L1390.23 684.322 L1390.79 684.322 L1391.35 684.322 L1391.91 684.322 L1392.47 684.322 L1393.03 684.322 L1393.58 684.322 L1394.14 684.322 L1394.7 684.322 L1395.26 684.322 L1395.82 684.322 L1396.38 684.322 L1396.94 684.322 L1397.5 684.322 L1398.06 684.322 L1398.62 684.322 L1399.18 684.322 L1399.74 684.322 L1400.3 684.322 L1400.86 684.322 L1401.41 684.322 L1401.97 684.322 L1402.53 684.322 L1403.09 684.322 L1403.65 684.322 L1404.21 684.322 L1404.77 684.322 L1405.33 684.322 L1405.89 684.322 L1406.45 684.322 L1407.01 684.322 L1407.57 684.322 L1408.13 684.322 L1408.68 684.322 L1409.24 684.322 L1409.8 684.322 L1410.36 684.322 L1410.92 684.322 L1411.48 684.322 L1412.04 684.322 L1412.6 684.322 L1413.16 684.322 L1413.72 684.322 L1414.28 684.322 L1414.84 684.322 L1415.4 684.322 L1415.95 684.322 L1416.51 684.322 L1417.07 684.322 L1417.63 684.322 L1418.19 684.322 L1418.75 684.322 L1419.31 684.322 L1419.87 684.322 L1420.43 684.322 L1420.99 684.322 L1421.55 684.322 L1422.11 684.322 L1422.67 684.322 L1423.23 684.322 L1423.78 684.322 L1424.34 684.322 L1424.9 684.322 L1425.46 684.322 L1426.02 684.322 L1426.58 684.322 L1427.14 684.322 L1427.7 684.322 L1428.26 684.322 L1428.82 684.322 L1429.38 684.322 L1429.94 684.322 L1430.5 684.322 L1431.05 684.322 L1431.61 684.322 L1432.17 684.322 L1432.73 684.322 L1433.29 684.322 L1433.85 684.322 L1434.41 684.322 L1434.97 684.322 L1435.53 684.322 L1436.09 684.322 L1436.65 684.322 L1437.21 684.322 L1437.77 684.322 L1438.33 684.322 L1438.88 684.322 L1439.44 684.322 L1440 684.322 L1440.56 684.322 L1441.12 684.322 L1441.68 684.322 L1442.24 684.322 L1442.8 684.322 L1443.36 684.322 L1443.92 684.322 L1444.48 684.322 L1445.04 684.322 L1445.6 684.322 L1446.15 684.322 L1446.71 684.322 L1447.27 684.322 L1447.83 684.322 L1448.39 684.322 L1448.95 684.322 L1449.51 684.322 L1450.07 684.322 L1450.63 684.322 L1451.19 684.322 L1451.75 684.322 L1452.31 684.322 L1452.87 684.322 L1453.42 684.322 L1453.98 684.322 L1454.54 684.322 L1455.1 684.322 L1455.66 684.322 L1456.22 684.322 L1456.78 684.322 L1457.34 684.322 L1457.9 684.322 L1458.46 684.322 L1459.02 684.322 L1459.58 684.322 L1460.14 684.322 L1460.7 684.322 L1461.25 684.322 L1461.81 684.322 L1462.37 684.322 L1462.93 684.322 L1463.49 684.322 L1464.05 684.322 L1464.61 684.322 L1465.17 684.322 L1465.73 684.322 L1466.29 684.322 L1466.85 684.322 L1467.41 684.322 L1467.97 684.322 L1468.52 684.322 L1469.08 684.322 L1469.64 684.322 L1470.2 684.322 L1470.76 684.322 L1471.32 684.322 L1471.88 684.322 L1472.44 684.322 L1473 684.322 L1473.56 684.322 L1474.12 684.322 L1474.68 684.322 L1475.24 684.322 L1475.79 684.322 L1476.35 684.322 L1476.91 684.322 L1477.47 684.322 L1478.03 684.322 L1478.59 684.322 L1479.15 684.322 L1479.71 684.322 L1480.27 684.322 L1480.83 684.322 L1481.39 684.322 L1481.95 684.322 L1482.51 684.322 L1483.07 684.322 L1483.62 684.322 L1484.18 684.322 L1484.74 684.322 L1485.3 684.322 L1485.86 684.322 L1486.42 684.322 L1486.98 684.322 L1487.54 684.322 L1488.1 684.322 L1488.66 684.322 L1489.22 684.322 L1489.78 684.322 L1490.34 684.322 L1490.89 684.322 L1491.45 684.322 L1492.01 684.322 L1492.57 684.322 L1493.13 684.322 L1493.69 684.322 L1494.25 684.322 L1494.81 684.322 L1495.37 684.322 L1495.93 684.322 L1496.49 684.322 L1497.05 684.322 L1497.61 684.322 L1498.16 684.322 L1498.72 684.322 L1499.28 684.322 L1499.84 684.322 L1500.4 684.322 L1500.96 684.322 L1501.52 684.322 L1502.08 684.322 L1502.64 684.322 L1503.2 684.322 L1503.76 684.322 L1504.32 684.322 L1504.88 684.322 L1505.44 684.322 L1505.99 684.322 L1506.55 684.322 L1507.11 684.322 L1507.67 684.322 L1508.23 684.322 L1508.79 684.322 L1509.35 684.322 L1509.91 684.322 L1510.47 684.322 L1511.03 684.322 L1511.59 684.322 L1512.15 684.322 L1512.71 684.322 L1513.26 684.322 L1513.82 684.322 L1514.38 684.322 L1514.94 684.322 L1515.5 684.322 L1516.06 684.322 L1516.62 684.322 L1517.18 684.322 L1517.74 684.322 L1518.3 684.322 L1518.86 684.322 L1519.42 684.322 L1519.98 684.322 L1520.53 684.322 L1521.09 684.322 L1521.65 684.322 L1522.21 684.322 L1522.77 684.322 L1523.33 684.322 L1523.89 684.322 L1524.45 684.322 L1525.01 684.322 L1525.57 684.322 L1526.13 684.322 L1526.69 684.322 L1527.25 684.322 L1527.81 684.322 L1528.36 684.322 L1528.92 684.322 L1529.48 684.322 L1530.04 684.322 L1530.6 684.322 L1531.16 684.322 L1531.72 684.322 L1532.28 684.322 L1532.84 684.322 L1533.4 684.322 L1533.96 684.322 L1534.52 684.322 L1535.08 684.322 L1535.63 684.322 L1536.19 684.322 L1536.75 684.322 L1537.31 684.322 L1537.87 684.322 L1538.43 684.322 L1538.99 684.322 L1539.55 684.322 L1540.11 684.322 L1540.67 684.322 L1541.23 684.322 L1541.79 684.322 L1542.35 684.322 L1542.9 684.322 L1543.46 684.322 L1544.02 684.322 L1544.58 684.322 L1545.14 684.322 L1545.7 684.322 L1546.26 684.322 L1546.82 684.322 L1547.38 684.322 L1547.94 684.322 L1548.5 684.322 L1549.06 684.322 L1549.62 684.322 L1550.18 684.322 L1550.73 684.322 L1551.29 684.322 L1551.85 684.322 L1552.41 684.322 L1552.97 684.322 L1553.53 684.322 L1554.09 684.322 L1554.65 684.322 L1555.21 684.322 L1555.77 684.322 L1556.33 684.322 L1556.89 684.322 L1557.45 684.322 L1558 684.322 L1558.56 684.322 L1559.12 684.322 L1559.68 684.322 L1560.24 684.322 L1560.8 684.322 L1561.36 684.322 L1561.92 684.322 L1562.48 684.322 L1563.04 684.322 L1563.6 684.322 L1564.16 684.322 L1564.72 684.322 L1565.28 684.322 L1565.83 684.322 L1566.39 684.322 L1566.95 684.322 L1567.51 684.322 L1568.07 684.322 L1568.63 684.322 L1569.19 684.322 L1569.75 684.322 L1570.31 684.322 L1570.87 684.322 L1571.43 684.322 L1571.99 684.322 L1572.55 684.322 L1573.1 684.322 L1573.66 684.322 L1574.22 684.322 L1574.78 684.322 L1575.34 684.322 L1575.9 684.322 L1576.46 684.322 L1577.02 684.322 L1577.58 684.322 L1578.14 684.322 L1578.7 684.322 L1579.26 684.322 L1579.82 684.322 L1580.37 684.322 L1580.93 684.322 L1581.49 684.322 L1582.05 684.322 L1582.61 684.322 L1583.17 684.322 L1583.73 684.322 L1584.29 684.322 L1584.85 684.322 L1585.41 684.322 L1585.97 684.322 L1586.53 684.322 L1587.09 684.322 L1587.65 684.322 L1588.2 684.322 L1588.76 684.322 L1589.32 684.322 L1589.88 684.322 L1590.44 684.322 L1591 684.322 L1591.56 684.322 L1592.12 684.322 L1592.68 684.322 L1593.24 684.322 L1593.8 684.322 L1594.36 684.322 L1594.92 684.322 L1595.47 684.322 L1596.03 684.322 L1596.59 684.322 L1597.15 684.322 L1597.71 684.322 L1598.27 684.322 L1598.83 684.322 L1599.39 684.322 L1599.95 684.322 L1600.51 684.322 L1601.07 684.322 L1601.63 684.322 L1602.19 684.322 L1602.74 684.322 L1603.3 684.322 L1603.86 684.322 L1604.42 684.322 L1604.98 684.322 L1605.54 684.322 L1606.1 684.322 L1606.66 684.322 L1607.22 684.322 L1607.78 684.322 L1608.34 684.322 L1608.9 684.322 L1609.46 684.322 L1610.02 684.322 L1610.57 684.322 L1611.13 684.322 L1611.69 684.322 L1612.25 684.322 L1612.81 684.322 L1613.37 684.322 L1613.93 684.322 L1614.49 684.322 L1615.05 684.322 L1615.61 684.322 L1616.17 684.322 L1616.73 684.322 L1617.29 684.322 L1617.84 684.322 L1618.4 684.322 L1618.96 684.322 L1619.52 684.322 L1620.08 684.322 L1620.64 684.322 L1621.2 684.322 L1621.76 684.322 L1622.32 684.322 L1622.88 684.322 L1623.44 684.322 L1624 684.322 L1624.56 684.322 L1625.11 684.322 L1625.67 684.322 L1626.23 684.322 L1626.79 684.322 L1627.35 684.322 L1627.91 684.322 L1628.47 684.322 L1629.03 684.322 L1629.59 684.322 L1630.15 684.322 L1630.71 684.322 L1631.27 684.322 L1631.83 684.322 L1632.39 684.322 L1632.94 684.322 L1633.5 684.322 L1634.06 684.322 L1634.62 684.322 L1635.18 684.322 L1635.74 684.322 L1636.3 684.322 L1636.86 684.322 L1637.42 684.322 L1637.98 684.322 L1638.54 684.322 L1639.1 684.322 L1639.66 684.322 L1640.21 684.322 L1640.77 684.322 L1641.33 684.322 L1641.89 684.322 L1642.45 684.322 L1643.01 684.322 L1643.57 684.322 L1644.13 684.322 L1644.69 684.322 L1645.25 684.322 L1645.81 684.322 L1646.37 684.322 L1646.93 684.322 L1647.48 684.322 L1648.04 684.322 L1648.6 684.322 L1649.16 684.322 L1649.72 684.322 L1650.28 684.322 L1650.84 684.322 L1651.4 684.322 L1651.96 684.322 L1652.52 684.322 L1653.08 684.322 L1653.64 684.322 L1654.2 684.322 L1654.76 684.322 L1655.31 684.322 L1655.87 684.322 L1656.43 684.322 L1656.99 684.322 L1657.55 684.322 L1658.11 684.322 L1658.67 684.322 L1659.23 684.322 L1659.79 684.322 L1660.35 684.322 L1660.91 684.322 L1661.47 684.322 L1662.03 684.322 L1662.58 684.322 L1663.14 684.322 L1663.7 684.322 L1664.26 684.322 L1664.82 684.322 L1665.38 684.322 L1665.94 684.322 L1666.5 684.322 L1667.06 684.322 L1667.62 684.322 L1668.18 684.322 L1668.74 684.322 L1669.3 684.322 L1669.85 684.322 L1670.41 684.322 L1670.97 684.322 L1671.53 684.322 L1672.09 684.322 L1672.65 684.322 L1673.21 684.322 L1673.77 684.322 L1674.33 684.322 L1674.89 684.322 L1675.45 684.322 L1676.01 684.322 L1676.57 684.322 L1677.13 684.322 L1677.68 684.322 L1678.24 684.322 L1678.8 684.322 L1679.36 684.322 L1679.92 684.322 L1680.48 684.322 L1681.04 684.322 L1681.6 684.322 L1682.16 684.322 L1682.72 684.322 L1683.28 684.322 L1683.84 684.322 L1684.4 684.322 L1684.95 684.322 L1685.51 684.322 L1686.07 684.322 L1686.63 684.322 L1687.19 684.322 L1687.75 684.322 L1688.31 684.322 L1688.87 684.322 L1689.43 684.322 L1689.99 684.322 L1690.55 684.322 L1691.11 684.322 L1691.67 684.322 L1692.23 684.322 L1692.78 684.322 L1693.34 684.322 L1693.9 684.322 L1694.46 684.322 L1695.02 684.322 L1695.58 684.322 L1696.14 684.322 L1696.7 684.322 L1697.26 684.322 L1697.82 684.322 L1698.38 684.322 L1698.94 684.322 L1699.5 684.322 L1700.05 684.322 L1700.61 684.322 L1701.17 684.322 L1701.73 684.322 L1702.29 684.322 L1702.85 684.322 L1703.41 684.322 L1703.97 684.322 L1704.53 684.322 L1705.09 684.322 L1705.65 684.322 L1706.21 684.322 L1706.77 684.322 L1707.32 684.322 L1707.88 684.322 L1708.44 684.322 L1709 684.322 L1709.56 684.322 L1710.12 684.322 L1710.68 684.322 L1711.24 684.322 L1711.8 684.322 L1712.36 684.322 L1712.92 684.322 L1713.48 684.322 L1714.04 684.322 L1714.6 684.322 L1715.15 684.322 L1715.71 684.322 L1716.27 684.322 L1716.83 684.322 L1717.39 684.322 L1717.95 684.322 L1718.51 684.322 L1719.07 684.322 L1719.63 684.322 L1720.19 684.322 L1720.75 684.322 L1721.31 684.322 L1721.87 684.322 L1722.42 684.322 L1722.98 684.322 L1723.54 684.322 L1724.1 684.322 L1724.66 684.322 L1725.22 684.322 L1725.78 684.322 L1726.34 684.322 L1726.9 684.322 L1727.46 684.322 L1728.02 684.322 L1728.58 684.322 L1729.14 684.322 L1729.69 684.322 L1730.25 684.322 L1730.81 684.322 L1731.37 684.322 L1731.93 684.322 L1732.49 684.322 L1733.05 684.322 L1733.61 684.322 L1734.17 684.322 L1734.73 684.322 L1735.29 684.322 L1735.85 684.322 L1736.41 684.322 L1736.97 684.322 L1737.52 684.322 L1738.08 684.322 L1738.64 684.322 L1739.2 684.322 L1739.76 684.322 L1740.32 684.322 L1740.88 684.322 L1741.44 684.322 L1742 684.322 L1742.56 684.322 L1743.12 684.322 L1743.68 684.322 L1744.24 684.322 L1744.79 684.322 L1745.35 684.322 L1745.91 684.322 L1746.47 684.322 L1747.03 684.322 L1747.59 684.322 L1748.15 684.322 L1748.71 684.322 L1749.27 684.322 L1749.83 684.322 L1750.39 684.322 L1750.95 684.322 L1751.51 684.322 L1752.06 684.322 L1752.62 684.322 L1753.18 684.322 L1753.74 684.322 L1754.3 684.322 L1754.86 684.322 L1755.42 684.322 L1755.98 684.322 L1756.54 684.322 L1757.1 684.322 L1757.66 684.322 L1758.22 684.322 L1758.78 684.322 L1759.34 684.322 L1759.89 684.322 L1760.45 684.322 L1761.01 684.322 L1761.57 684.322 L1762.13 684.322 L1762.69 684.322 L1763.25 684.322 L1763.81 684.322 L1764.37 684.322 L1764.93 684.322 L1765.49 684.322 L1766.05 684.322 L1766.61 684.322 L1767.16 684.322 L1767.72 684.322 L1768.28 684.322 L1768.84 684.322 L1769.4 684.322 L1769.96 684.322 L1770.52 684.322 L1771.08 684.322 L1771.64 684.322 L1772.2 684.322 L1772.76 684.322 L1773.32 684.322 L1773.88 684.322 L1774.43 684.322 L1774.99 684.322 L1775.55 684.322 L1776.11 684.322 L1776.67 684.322 L1777.23 684.322 L1777.79 684.322 L1778.35 684.322 L1778.91 684.322 L1779.47 684.322 L1780.03 684.322 L1780.59 684.322 L1781.15 684.322 L1781.71 684.322 L1782.26 684.322 L1782.82 684.322 L1783.38 684.322 L1783.94 684.322 L1784.5 684.322 L1785.06 684.322 L1785.62 684.322 L1786.18 684.322 L1786.74 684.322 L1787.3 684.322 L1787.86 684.322 L1788.42 684.322 L1788.98 684.322 L1789.53 684.322 L1790.09 684.322 L1790.65 684.322 L1791.21 684.322 L1791.77 684.322 L1792.33 684.322 L1792.89 684.322 L1793.45 684.322 L1794.01 684.322 L1794.57 684.322 L1795.13 684.322 L1795.69 684.322 L1796.25 684.322 L1796.8 684.322 L1797.36 684.322 L1797.92 684.322 L1798.48 684.322 L1799.04 684.322 L1799.6 684.322 L1800.16 684.322 L1800.72 684.322 L1801.28 684.322 L1801.84 684.322 L1802.4 684.322 L1802.96 684.322 L1803.52 684.322 L1804.08 684.322 L1804.63 684.322 L1805.19 684.322 L1805.75 684.322 L1806.31 684.322 L1806.87 684.322 L1807.43 684.322 L1807.99 684.322 L1808.55 684.322 L1809.11 684.322 L1809.67 684.322 L1810.23 684.322 L1810.79 684.322 L1811.35 684.322 L1811.9 684.322 L1812.46 684.322 L1813.02 684.322 L1813.58 684.322 L1814.14 684.322 L1814.7 684.322 L1815.26 684.322 L1815.82 684.322 L1816.38 684.322 L1816.94 684.322 L1817.5 684.322 L1818.06 684.322 L1818.62 684.322 L1819.18 684.322 L1819.73 684.322 L1820.29 684.322 L1820.85 684.322 L1821.41 684.322 L1821.97 684.322 L1822.53 684.322 L1823.09 684.322 L1823.65 684.322 L1824.21 684.322 L1824.77 684.322 L1825.33 684.322 L1825.89 684.322 L1826.45 684.322 L1827 684.322 L1827.56 684.322 L1828.12 684.322 L1828.68 684.322 L1829.24 684.322 L1829.8 684.322 L1830.36 684.322 L1830.92 684.322 L1831.48 684.322 L1832.04 684.322 L1832.6 684.322 L1833.16 684.322 L1833.72 684.322 L1834.27 684.322 L1834.83 684.322 L1835.39 684.322 L1835.95 684.322 L1836.51 684.322 L1837.07 684.322 L1837.63 684.322 L1838.19 684.322 L1838.19 682.702 L1837.63 682.702 L1837.07 682.702 L1836.51 682.702 L1835.95 682.702 L1835.39 682.702 L1834.83 682.702 L1834.27 682.702 L1833.72 682.702 L1833.16 682.702 L1832.6 682.702 L1832.04 682.702 L1831.48 682.702 L1830.92 682.702 L1830.36 682.702 L1829.8 682.702 L1829.24 682.702 L1828.68 682.702 L1828.12 682.702 L1827.56 682.702 L1827 682.702 L1826.45 682.702 L1825.89 682.702 L1825.33 682.702 L1824.77 682.702 L1824.21 682.702 L1823.65 682.702 L1823.09 682.702 L1822.53 682.702 L1821.97 682.702 L1821.41 682.702 L1820.85 682.702 L1820.29 682.702 L1819.73 682.702 L1819.18 682.702 L1818.62 682.702 L1818.06 682.702 L1817.5 682.702 L1816.94 682.702 L1816.38 682.702 L1815.82 682.702 L1815.26 682.702 L1814.7 682.702 L1814.14 682.702 L1813.58 682.702 L1813.02 682.702 L1812.46 682.702 L1811.9 682.702 L1811.35 682.702 L1810.79 682.702 L1810.23 682.702 L1809.67 682.702 L1809.11 682.702 L1808.55 682.702 L1807.99 682.702 L1807.43 682.702 L1806.87 682.702 L1806.31 682.702 L1805.75 682.702 L1805.19 682.702 L1804.63 682.702 L1804.08 682.702 L1803.52 682.702 L1802.96 682.702 L1802.4 682.702 L1801.84 682.702 L1801.28 682.702 L1800.72 682.702 L1800.16 682.702 L1799.6 682.702 L1799.04 682.702 L1798.48 682.702 L1797.92 682.702 L1797.36 682.702 L1796.8 682.702 L1796.25 682.702 L1795.69 682.702 L1795.13 682.702 L1794.57 682.702 L1794.01 682.702 L1793.45 682.702 L1792.89 682.702 L1792.33 682.702 L1791.77 682.702 L1791.21 682.702 L1790.65 682.702 L1790.09 682.702 L1789.53 682.702 L1788.98 682.702 L1788.42 682.702 L1787.86 682.702 L1787.3 682.702 L1786.74 682.702 L1786.18 682.702 L1785.62 682.702 L1785.06 682.702 L1784.5 682.702 L1783.94 682.702 L1783.38 682.702 L1782.82 682.702 L1782.26 682.702 L1781.71 682.702 L1781.15 682.702 L1780.59 682.702 L1780.03 682.702 L1779.47 682.702 L1778.91 682.702 L1778.35 682.702 L1777.79 682.702 L1777.23 682.702 L1776.67 682.702 L1776.11 682.702 L1775.55 682.702 L1774.99 682.702 L1774.43 682.702 L1773.88 682.702 L1773.32 682.702 L1772.76 682.702 L1772.2 682.702 L1771.64 682.702 L1771.08 682.702 L1770.52 682.702 L1769.96 682.702 L1769.4 682.702 L1768.84 682.702 L1768.28 682.702 L1767.72 682.702 L1767.16 682.702 L1766.61 682.702 L1766.05 682.702 L1765.49 682.702 L1764.93 682.702 L1764.37 682.702 L1763.81 682.702 L1763.25 682.702 L1762.69 682.702 L1762.13 682.702 L1761.57 682.702 L1761.01 682.702 L1760.45 682.702 L1759.89 682.702 L1759.34 682.702 L1758.78 682.702 L1758.22 682.702 L1757.66 682.702 L1757.1 682.702 L1756.54 682.702 L1755.98 682.702 L1755.42 682.702 L1754.86 682.702 L1754.3 682.702 L1753.74 682.702 L1753.18 682.702 L1752.62 682.702 L1752.06 682.702 L1751.51 682.702 L1750.95 682.702 L1750.39 682.702 L1749.83 682.702 L1749.27 682.702 L1748.71 682.702 L1748.15 682.702 L1747.59 682.702 L1747.03 682.702 L1746.47 682.702 L1745.91 682.702 L1745.35 682.702 L1744.79 682.702 L1744.24 682.702 L1743.68 682.702 L1743.12 682.702 L1742.56 682.702 L1742 682.702 L1741.44 682.702 L1740.88 682.702 L1740.32 682.702 L1739.76 682.702 L1739.2 682.702 L1738.64 682.702 L1738.08 682.702 L1737.52 682.702 L1736.97 682.702 L1736.41 682.702 L1735.85 682.702 L1735.29 682.702 L1734.73 682.702 L1734.17 682.702 L1733.61 682.702 L1733.05 682.702 L1732.49 682.702 L1731.93 682.702 L1731.37 682.702 L1730.81 682.702 L1730.25 682.702 L1729.69 682.702 L1729.14 682.702 L1728.58 682.702 L1728.02 682.702 L1727.46 682.702 L1726.9 682.702 L1726.34 682.702 L1725.78 682.702 L1725.22 682.702 L1724.66 682.702 L1724.1 682.702 L1723.54 682.702 L1722.98 682.702 L1722.42 682.702 L1721.87 682.702 L1721.31 682.702 L1720.75 682.702 L1720.19 682.702 L1719.63 682.702 L1719.07 682.702 L1718.51 682.702 L1717.95 682.702 L1717.39 682.702 L1716.83 682.702 L1716.27 682.702 L1715.71 682.702 L1715.15 682.702 L1714.6 682.702 L1714.04 682.702 L1713.48 682.702 L1712.92 682.702 L1712.36 682.702 L1711.8 682.702 L1711.24 682.702 L1710.68 682.702 L1710.12 682.702 L1709.56 682.702 L1709 682.702 L1708.44 682.702 L1707.88 682.702 L1707.32 682.702 L1706.77 682.702 L1706.21 682.702 L1705.65 682.702 L1705.09 682.702 L1704.53 682.702 L1703.97 682.702 L1703.41 682.702 L1702.85 682.702 L1702.29 682.702 L1701.73 682.702 L1701.17 682.702 L1700.61 682.702 L1700.05 682.702 L1699.5 682.702 L1698.94 682.702 L1698.38 682.702 L1697.82 682.702 L1697.26 682.702 L1696.7 682.702 L1696.14 682.702 L1695.58 682.702 L1695.02 682.702 L1694.46 682.702 L1693.9 682.702 L1693.34 682.702 L1692.78 682.702 L1692.23 682.702 L1691.67 682.702 L1691.11 682.702 L1690.55 682.702 L1689.99 682.702 L1689.43 682.702 L1688.87 682.702 L1688.31 682.702 L1687.75 682.702 L1687.19 682.702 L1686.63 682.702 L1686.07 682.702 L1685.51 682.702 L1684.95 682.702 L1684.4 682.702 L1683.84 682.702 L1683.28 682.702 L1682.72 682.702 L1682.16 682.702 L1681.6 682.702 L1681.04 682.702 L1680.48 682.702 L1679.92 682.702 L1679.36 682.702 L1678.8 682.702 L1678.24 682.702 L1677.68 682.702 L1677.13 682.702 L1676.57 682.702 L1676.01 682.702 L1675.45 682.702 L1674.89 682.702 L1674.33 682.702 L1673.77 682.702 L1673.21 682.702 L1672.65 682.702 L1672.09 682.702 L1671.53 682.702 L1670.97 682.702 L1670.41 682.702 L1669.85 682.702 L1669.3 682.702 L1668.74 682.702 L1668.18 682.702 L1667.62 682.702 L1667.06 682.702 L1666.5 682.702 L1665.94 682.702 L1665.38 682.702 L1664.82 682.702 L1664.26 682.702 L1663.7 682.702 L1663.14 682.702 L1662.58 682.702 L1662.03 682.702 L1661.47 682.702 L1660.91 682.702 L1660.35 682.702 L1659.79 682.702 L1659.23 682.702 L1658.67 682.702 L1658.11 682.702 L1657.55 682.702 L1656.99 682.702 L1656.43 682.702 L1655.87 682.702 L1655.31 682.702 L1654.76 682.702 L1654.2 682.702 L1653.64 682.702 L1653.08 682.702 L1652.52 682.702 L1651.96 682.702 L1651.4 682.702 L1650.84 682.702 L1650.28 682.702 L1649.72 682.702 L1649.16 682.702 L1648.6 682.702 L1648.04 682.702 L1647.48 682.702 L1646.93 682.702 L1646.37 682.702 L1645.81 682.702 L1645.25 682.702 L1644.69 682.702 L1644.13 682.702 L1643.57 682.702 L1643.01 682.702 L1642.45 682.702 L1641.89 682.702 L1641.33 682.702 L1640.77 682.702 L1640.21 682.702 L1639.66 682.702 L1639.1 682.702 L1638.54 682.702 L1637.98 682.702 L1637.42 682.702 L1636.86 682.702 L1636.3 682.702 L1635.74 682.702 L1635.18 682.702 L1634.62 682.702 L1634.06 682.702 L1633.5 682.702 L1632.94 682.702 L1632.39 682.702 L1631.83 682.702 L1631.27 682.702 L1630.71 682.702 L1630.15 682.702 L1629.59 682.702 L1629.03 682.702 L1628.47 682.702 L1627.91 682.702 L1627.35 682.702 L1626.79 682.702 L1626.23 682.702 L1625.67 682.702 L1625.11 682.702 L1624.56 682.702 L1624 682.702 L1623.44 682.702 L1622.88 682.702 L1622.32 682.702 L1621.76 682.702 L1621.2 682.702 L1620.64 682.702 L1620.08 682.702 L1619.52 682.702 L1618.96 682.702 L1618.4 682.702 L1617.84 682.702 L1617.29 682.702 L1616.73 682.702 L1616.17 682.702 L1615.61 682.702 L1615.05 682.702 L1614.49 682.702 L1613.93 682.702 L1613.37 682.702 L1612.81 682.702 L1612.25 682.702 L1611.69 682.702 L1611.13 682.702 L1610.57 682.702 L1610.02 682.702 L1609.46 682.702 L1608.9 682.702 L1608.34 682.702 L1607.78 682.702 L1607.22 682.702 L1606.66 682.702 L1606.1 682.702 L1605.54 682.702 L1604.98 682.702 L1604.42 682.702 L1603.86 682.702 L1603.3 682.702 L1602.74 682.702 L1602.19 682.702 L1601.63 682.702 L1601.07 682.702 L1600.51 682.702 L1599.95 682.702 L1599.39 682.702 L1598.83 682.702 L1598.27 682.702 L1597.71 682.702 L1597.15 682.702 L1596.59 682.702 L1596.03 682.702 L1595.47 682.702 L1594.92 682.702 L1594.36 682.702 L1593.8 682.702 L1593.24 682.702 L1592.68 682.702 L1592.12 682.702 L1591.56 682.702 L1591 682.702 L1590.44 682.702 L1589.88 682.702 L1589.32 682.702 L1588.76 682.702 L1588.2 682.702 L1587.65 682.702 L1587.09 682.702 L1586.53 682.702 L1585.97 682.702 L1585.41 682.702 L1584.85 682.702 L1584.29 682.702 L1583.73 682.702 L1583.17 682.702 L1582.61 682.702 L1582.05 682.702 L1581.49 682.702 L1580.93 682.702 L1580.37 682.702 L1579.82 682.702 L1579.26 682.702 L1578.7 682.702 L1578.14 682.702 L1577.58 682.702 L1577.02 682.702 L1576.46 682.702 L1575.9 682.702 L1575.34 682.702 L1574.78 682.702 L1574.22 682.702 L1573.66 682.702 L1573.1 682.702 L1572.55 682.702 L1571.99 682.702 L1571.43 682.702 L1570.87 682.702 L1570.31 682.702 L1569.75 682.702 L1569.19 682.702 L1568.63 682.702 L1568.07 682.702 L1567.51 682.702 L1566.95 682.702 L1566.39 682.702 L1565.83 682.702 L1565.28 682.702 L1564.72 682.702 L1564.16 682.702 L1563.6 682.702 L1563.04 682.702 L1562.48 682.702 L1561.92 682.702 L1561.36 682.702 L1560.8 682.702 L1560.24 682.702 L1559.68 682.702 L1559.12 682.702 L1558.56 682.702 L1558 682.702 L1557.45 682.702 L1556.89 682.702 L1556.33 682.702 L1555.77 682.702 L1555.21 682.702 L1554.65 682.702 L1554.09 682.702 L1553.53 682.702 L1552.97 682.702 L1552.41 682.702 L1551.85 682.702 L1551.29 682.702 L1550.73 682.702 L1550.18 682.702 L1549.62 682.702 L1549.06 682.702 L1548.5 682.702 L1547.94 682.702 L1547.38 682.702 L1546.82 682.702 L1546.26 682.702 L1545.7 682.702 L1545.14 682.702 L1544.58 682.702 L1544.02 682.702 L1543.46 682.702 L1542.9 682.702 L1542.35 682.702 L1541.79 682.702 L1541.23 682.702 L1540.67 682.702 L1540.11 682.702 L1539.55 682.702 L1538.99 682.702 L1538.43 682.702 L1537.87 682.702 L1537.31 682.702 L1536.75 682.702 L1536.19 682.702 L1535.63 682.702 L1535.08 682.702 L1534.52 682.702 L1533.96 682.702 L1533.4 682.702 L1532.84 682.702 L1532.28 682.702 L1531.72 682.702 L1531.16 682.702 L1530.6 682.702 L1530.04 682.702 L1529.48 682.702 L1528.92 682.702 L1528.36 682.702 L1527.81 682.702 L1527.25 682.702 L1526.69 682.702 L1526.13 682.702 L1525.57 682.702 L1525.01 682.702 L1524.45 682.702 L1523.89 682.702 L1523.33 682.702 L1522.77 682.702 L1522.21 682.702 L1521.65 682.702 L1521.09 682.702 L1520.53 682.702 L1519.98 682.702 L1519.42 682.702 L1518.86 682.702 L1518.3 682.702 L1517.74 682.702 L1517.18 682.702 L1516.62 682.702 L1516.06 682.702 L1515.5 682.702 L1514.94 682.702 L1514.38 682.702 L1513.82 682.702 L1513.26 682.702 L1512.71 682.702 L1512.15 682.702 L1511.59 682.702 L1511.03 682.702 L1510.47 682.702 L1509.91 682.702 L1509.35 682.702 L1508.79 682.702 L1508.23 682.702 L1507.67 682.702 L1507.11 682.702 L1506.55 682.702 L1505.99 682.702 L1505.44 682.702 L1504.88 682.702 L1504.32 682.702 L1503.76 682.702 L1503.2 682.702 L1502.64 682.702 L1502.08 682.702 L1501.52 682.702 L1500.96 682.702 L1500.4 682.702 L1499.84 682.702 L1499.28 682.702 L1498.72 682.702 L1498.16 682.702 L1497.61 682.702 L1497.05 682.702 L1496.49 682.702 L1495.93 682.702 L1495.37 682.702 L1494.81 682.702 L1494.25 682.702 L1493.69 682.702 L1493.13 682.702 L1492.57 682.702 L1492.01 682.702 L1491.45 682.702 L1490.89 682.702 L1490.34 682.702 L1489.78 682.702 L1489.22 682.702 L1488.66 682.702 L1488.1 682.702 L1487.54 682.702 L1486.98 682.702 L1486.42 682.702 L1485.86 682.702 L1485.3 682.702 L1484.74 682.702 L1484.18 682.702 L1483.62 682.702 L1483.07 682.702 L1482.51 682.702 L1481.95 682.702 L1481.39 682.702 L1480.83 682.702 L1480.27 682.702 L1479.71 682.702 L1479.15 682.702 L1478.59 682.702 L1478.03 682.702 L1477.47 682.702 L1476.91 682.702 L1476.35 682.702 L1475.79 682.702 L1475.24 682.702 L1474.68 682.702 L1474.12 682.702 L1473.56 682.702 L1473 682.702 L1472.44 682.702 L1471.88 682.702 L1471.32 682.702 L1470.76 682.702 L1470.2 682.702 L1469.64 682.702 L1469.08 682.702 L1468.52 682.702 L1467.97 682.702 L1467.41 682.702 L1466.85 682.702 L1466.29 682.702 L1465.73 682.702 L1465.17 682.702 L1464.61 682.702 L1464.05 682.702 L1463.49 682.702 L1462.93 682.702 L1462.37 682.702 L1461.81 682.702 L1461.25 682.702 L1460.7 682.702 L1460.14 682.702 L1459.58 682.702 L1459.02 682.702 L1458.46 682.702 L1457.9 682.702 L1457.34 682.702 L1456.78 682.702 L1456.22 682.702 L1455.66 682.702 L1455.1 682.702 L1454.54 682.702 L1453.98 682.702 L1453.42 682.702 L1452.87 682.702 L1452.31 682.702 L1451.75 682.702 L1451.19 682.702 L1450.63 682.702 L1450.07 682.702 L1449.51 682.702 L1448.95 682.702 L1448.39 682.702 L1447.83 682.702 L1447.27 682.702 L1446.71 682.702 L1446.15 682.702 L1445.6 682.702 L1445.04 682.702 L1444.48 682.702 L1443.92 682.702 L1443.36 682.702 L1442.8 682.702 L1442.24 682.702 L1441.68 682.702 L1441.12 682.702 L1440.56 682.702 L1440 682.702 L1439.44 682.702 L1438.88 682.702 L1438.33 682.702 L1437.77 682.702 L1437.21 682.702 L1436.65 682.702 L1436.09 682.702 L1435.53 682.702 L1434.97 682.702 L1434.41 682.702 L1433.85 682.702 L1433.29 682.702 L1432.73 682.702 L1432.17 682.702 L1431.61 682.702 L1431.05 682.702 L1430.5 682.702 L1429.94 682.702 L1429.38 682.702 L1428.82 682.702 L1428.26 682.702 L1427.7 682.702 L1427.14 682.702 L1426.58 682.702 L1426.02 682.702 L1425.46 682.702 L1424.9 682.702 L1424.34 682.702 L1423.78 682.702 L1423.23 682.702 L1422.67 682.702 L1422.11 682.702 L1421.55 682.702 L1420.99 682.702 L1420.43 682.702 L1419.87 682.702 L1419.31 682.702 L1418.75 682.702 L1418.19 682.702 L1417.63 682.702 L1417.07 682.702 L1416.51 682.702 L1415.95 682.702 L1415.4 682.702 L1414.84 682.702 L1414.28 682.702 L1413.72 682.702 L1413.16 682.702 L1412.6 682.702 L1412.04 682.702 L1411.48 682.702 L1410.92 682.702 L1410.36 682.702 L1409.8 682.702 L1409.24 682.702 L1408.68 682.702 L1408.13 682.702 L1407.57 682.702 L1407.01 682.702 L1406.45 682.702 L1405.89 682.702 L1405.33 682.702 L1404.77 682.702 L1404.21 682.702 L1403.65 682.702 L1403.09 682.702 L1402.53 682.702 L1401.97 682.702 L1401.41 682.702 L1400.86 682.702 L1400.3 682.702 L1399.74 682.702 L1399.18 682.702 L1398.62 682.702 L1398.06 682.702 L1397.5 682.702 L1396.94 682.702 L1396.38 682.702 L1395.82 682.702 L1395.26 682.702 L1394.7 682.702 L1394.14 682.702 L1393.58 682.702 L1393.03 682.702 L1392.47 682.702 L1391.91 682.702 L1391.35 682.702 L1390.79 682.702 L1390.23 682.702 L1389.67 682.702 L1389.11 682.702 L1388.55 682.702 L1387.99 682.702 L1387.43 682.702 L1386.87 682.702 L1386.31 682.702 L1385.76 682.702 L1385.2 682.702 L1384.64 682.702 L1384.08 682.702 L1383.52 682.702 L1382.96 682.702 L1382.4 682.702 L1381.84 682.702 L1381.28 682.702 L1380.72 682.702 L1380.16 682.702 L1379.6 682.702 L1379.04 682.702 L1378.49 682.702 L1377.93 682.702 L1377.37 682.702 L1376.81 682.702 L1376.25 682.702 L1375.69 682.702 L1375.13 682.702 L1374.57 682.702 L1374.01 682.702 L1373.45 682.702 L1372.89 682.702 L1372.33 682.702 L1371.77 682.702 L1371.21 682.702 L1370.66 682.702 L1370.1 682.702 L1369.54 682.702 L1368.98 682.702 L1368.42 682.702 L1367.86 682.702 L1367.3 682.702 L1366.74 682.702 L1366.18 682.702 L1365.62 682.702 L1365.06 682.702 L1364.5 682.702 L1363.94 682.702 L1363.39 682.702 L1362.83 682.702 L1362.27 682.702 L1361.71 682.702 L1361.15 682.702 L1360.59 682.702 L1360.03 682.702 L1359.47 682.702 L1358.91 682.702 L1358.35 682.702 L1357.79 682.702 L1357.23 682.702 L1356.67 682.702 L1356.12 682.702 L1355.56 682.702 L1355 682.702 L1354.44 682.702 L1353.88 682.702 L1353.32 682.702 L1352.76 682.702 L1352.2 682.702 L1351.64 682.702 L1351.08 682.702 L1350.52 682.702 L1349.96 682.702 L1349.4 682.702 L1348.84 682.702 L1348.29 682.702 L1347.73 682.702 L1347.17 682.702 L1346.61 682.702 L1346.05 682.702 L1345.49 682.702 L1344.93 682.702 L1344.37 682.702 L1343.81 682.702 L1343.25 682.702 L1342.69 682.702 L1342.13 682.702 L1341.57 682.702 L1341.02 682.702 L1340.46 682.702 L1339.9 682.702 L1339.34 682.702 L1338.78 682.702 L1338.22 682.702 L1337.66 682.702 L1337.1 682.702 L1336.54 682.702 L1335.98 682.702 L1335.42 682.702 L1334.86 682.702 L1334.3 682.702 L1333.75 682.702 L1333.19 682.702 L1332.63 682.702 L1332.07 682.702 L1331.51 682.702 L1330.95 682.702 L1330.39 682.702 L1329.83 682.702 L1329.27 682.702 L1328.71 682.702 L1328.15 682.702 L1327.59 682.702 L1327.03 682.702 L1326.47 682.702 L1325.92 682.702 L1325.36 682.702 L1324.8 682.702 L1324.24 682.702 L1323.68 682.702 L1323.12 682.702 L1322.56 682.702 L1322 682.702 L1321.44 682.702 L1320.88 682.702 L1320.32 682.702 L1319.76 682.702 L1319.2 682.702 L1318.65 682.702 L1318.09 682.702 L1317.53 682.702 L1316.97 682.702 L1316.41 682.702 L1315.85 682.702 L1315.29 682.702 L1314.73 682.702 L1314.17 682.702 L1313.61 682.702 L1313.05 682.702 L1312.49 682.702 L1311.93 682.702 L1311.38 682.702 L1310.82 682.702 L1310.26 682.702 L1309.7 682.702 L1309.14 682.702 L1308.58 682.702 L1308.02 682.702 L1307.46 682.702 L1306.9 682.702 L1306.34 682.702 L1305.78 682.702 L1305.22 682.702 L1304.66 682.702 L1304.1 682.702 L1303.55 682.702 L1302.99 682.702 L1302.43 682.702 L1301.87 682.702 L1301.31 682.702 L1300.75 682.702 L1300.19 682.702 L1299.63 682.702 L1299.07 682.702 L1298.51 682.702 L1297.95 682.702 L1297.39 682.702 L1296.83 682.702 L1296.28 682.702 L1295.72 682.702 L1295.16 682.702 L1294.6 682.702 L1294.04 682.702 L1293.48 682.702 L1292.92 682.702 L1292.36 682.702 L1291.8 682.702 L1291.24 682.702 L1290.68 682.702 L1290.12 682.702 L1289.56 682.702 L1289 682.702 L1288.45 682.702 L1287.89 682.702 L1287.33 682.702 L1286.77 682.702 L1286.21 682.702 L1285.65 682.702 L1285.09 682.702 L1284.53 682.702 L1283.97 682.702 L1283.41 682.702 L1282.85 682.702 L1282.29 682.702 L1281.73 682.702 L1281.18 682.702 L1280.62 682.702 L1280.06 682.702 L1279.5 682.702 L1278.94 682.702 L1278.38 682.702 L1277.82 682.702 L1277.26 682.702 L1276.7 682.702 L1276.14 682.702 L1275.58 682.702 L1275.02 682.702 L1274.46 682.702 L1273.91 682.702 L1273.35 682.702 L1272.79 682.702 L1272.23 682.702 L1271.67 682.702 L1271.11 682.702 L1270.55 682.702 L1269.99 682.702 L1269.43 682.702 L1268.87 682.702 L1268.31 682.702 L1267.75 682.702 L1267.19 682.702 L1266.63 682.702 L1266.08 682.702 L1265.52 682.702 L1264.96 682.702 L1264.4 682.702 L1263.84 682.702 L1263.28 682.702 L1262.72 682.702 L1262.16 682.702 L1261.6 682.702 L1261.04 682.702 L1260.48 682.702 L1259.92 682.702 L1259.36 682.702 L1258.81 682.702 L1258.25 682.702 L1257.69 682.702 L1257.13 682.702 L1256.57 682.702 L1256.01 682.702 L1255.45 682.702 L1254.89 682.702 L1254.33 682.702 L1253.77 682.702 L1253.21 682.702 L1252.65 682.702 L1252.09 682.702 L1251.54 682.702 L1250.98 682.702 L1250.42 682.702 L1249.86 682.702 L1249.3 682.702 L1248.74 682.702 L1248.18 682.702 L1247.62 682.702 L1247.06 682.702 L1246.5 682.702 L1245.94 682.702 L1245.38 682.702 L1244.82 682.702 L1244.26 682.702 L1243.71 682.702 L1243.15 682.702 L1242.59 682.702 L1242.03 682.702 L1241.47 682.702 L1240.91 682.702 L1240.35 682.702 L1239.79 682.702 L1239.23 682.702 L1238.67 682.702 L1238.11 682.702 L1237.55 682.702 L1236.99 682.702 L1236.44 682.702 L1235.88 682.702 L1235.32 682.702 L1234.76 682.702 L1234.2 682.702 L1233.64 682.702 L1233.08 682.702 L1232.52 682.702 L1231.96 682.702 L1231.4 682.702 L1230.84 682.702 L1230.28 682.702 L1229.72 682.702 L1229.17 682.702 L1228.61 682.702 L1228.05 682.702 L1227.49 682.702 L1226.93 682.702 L1226.37 682.702 L1225.81 682.702 L1225.25 682.702 L1224.69 682.702 L1224.13 682.702 L1223.57 682.702 L1223.01 682.702 L1222.45 682.702 L1221.89 682.702 L1221.34 682.702 L1220.78 682.702 L1220.22 682.702 L1219.66 682.702 L1219.1 682.702 L1218.54 682.702 L1217.98 682.702 L1217.42 682.702 L1216.86 682.702 L1216.3 682.702 L1215.74 682.702 L1215.18 682.702 L1214.62 682.702 L1214.07 682.702 L1213.51 682.702 L1212.95 682.702 L1212.39 682.702 L1211.83 682.702 L1211.27 682.702 L1210.71 682.702 L1210.15 682.702 L1209.59 682.702 L1209.03 682.702 L1208.47 682.702 L1207.91 682.702 L1207.35 682.702 L1206.8 682.702 L1206.24 682.702 L1205.68 682.702 L1205.12 682.702 L1204.56 682.702 L1204 682.702 L1203.44 682.702 L1202.88 682.702 L1202.32 682.702 L1201.76 682.702 L1201.2 682.702 L1200.64 682.702 L1200.08 682.702 L1199.52 682.702 L1198.97 682.702 L1198.41 682.702 L1197.85 682.702 L1197.29 682.702 L1196.73 682.702 L1196.17 682.702 L1195.61 682.702 L1195.05 682.702 L1194.49 682.702 L1193.93 682.702 L1193.37 682.702 L1192.81 682.702 L1192.25 682.702 L1191.7 682.702 L1191.14 682.702 L1190.58 682.702 L1190.02 682.702 L1189.46 682.702 L1188.9 682.702 L1188.34 682.702 L1187.78 682.702 L1187.22 682.702 L1186.66 682.702 L1186.1 682.702 L1185.54 682.702 L1184.98 682.702 L1184.43 682.702 L1183.87 682.702 L1183.31 682.702 L1182.75 682.702 L1182.19 682.702 L1181.63 682.702 L1181.07 682.702 L1180.51 682.702 L1179.95 682.702 L1179.39 682.702 L1178.83 682.702 L1178.27 682.702 L1177.71 682.702 L1177.15 682.702 L1176.6 682.702 L1176.04 682.702 L1175.48 682.702 L1174.92 682.702 L1174.36 682.702 L1173.8 682.702 L1173.24 682.702 L1172.68 682.702 L1172.12 682.702 L1171.56 682.702 L1171 682.702 L1170.44 682.702 L1169.88 682.702 L1169.33 682.702 L1168.77 682.702 L1168.21 682.702 L1167.65 682.702 L1167.09 682.702 L1166.53 682.702 L1165.97 682.702 L1165.41 682.702 L1164.85 682.702 L1164.29 682.702 L1163.73 682.702 L1163.17 682.702 L1162.61 682.702 L1162.05 682.702 L1161.5 682.702 L1160.94 682.702 L1160.38 682.702 L1159.82 682.702 L1159.26 682.702 L1158.7 682.702 L1158.14 682.702 L1157.58 682.702 L1157.02 682.702 L1156.46 682.702 L1155.9 682.702 L1155.34 682.702 L1154.78 682.702 L1154.23 682.702 L1153.67 682.702 L1153.11 682.702 L1152.55 682.702 L1151.99 682.702 L1151.43 682.702 L1150.87 682.702 L1150.31 682.702 L1149.75 682.702 L1149.19 682.702 L1148.63 682.702 L1148.07 682.702 L1147.51 682.702 L1146.96 682.702 L1146.4 682.702 L1145.84 682.702 L1145.28 682.702 L1144.72 682.702 L1144.16 682.702 L1143.6 682.702 L1143.04 682.702 L1142.48 682.702 L1141.92 682.702 L1141.36 682.702 L1140.8 682.702 L1140.24 682.702 L1139.68 682.702 L1139.13 682.702 L1138.57 682.702 L1138.01 682.702 L1137.45 682.702 L1136.89 682.702 L1136.33 682.702 L1135.77 682.702 L1135.21 682.702 L1134.65 682.702 L1134.09 682.702 L1133.53 682.702 L1132.97 682.702 L1132.41 682.702 L1131.86 682.702 L1131.3 682.702 L1130.74 682.702 L1130.18 682.702 L1129.62 682.702 L1129.06 682.702 L1128.5 682.702 L1127.94 682.702 L1127.38 682.702 L1126.82 682.702 L1126.26 682.702 L1125.7 682.702 L1125.14 682.702 L1124.59 682.702 L1124.03 682.702 L1123.47 682.702 L1122.91 682.702 L1122.35 682.702 L1121.79 682.702 L1121.23 682.702 L1120.67 682.702 L1120.11 682.702 L1119.55 682.702 L1118.99 682.702 L1118.43 682.702 L1117.87 682.702 L1117.31 682.702 L1116.76 682.702 L1116.2 682.702 L1115.64 682.702 L1115.08 682.702 L1114.52 682.702 L1113.96 682.702 L1113.4 682.702 L1112.84 682.702 L1112.28 682.702 L1111.72 682.702 L1111.16 682.702 L1110.6 682.702 L1110.04 682.702 L1109.49 682.702 L1108.93 682.702 L1108.37 682.702 L1107.81 682.702 L1107.25 682.702 L1106.69 682.702 L1106.13 682.702 L1105.57 682.702 L1105.01 682.702 L1104.45 682.702 L1103.89 682.702 L1103.33 682.702 L1102.77 682.702 L1102.22 682.702 L1101.66 682.702 L1101.1 682.702 L1100.54 682.702 L1099.98 682.702 L1099.42 682.702 L1098.86 682.702 L1098.3 682.702 L1097.74 682.702 L1097.18 682.702 L1096.62 682.702 L1096.06 682.702 L1095.5 682.702 L1094.94 682.702 L1094.39 682.702 L1093.83 682.702 L1093.27 682.702 L1092.71 682.702 L1092.15 682.702 L1091.59 682.702 L1091.03 682.702 L1090.47 682.702 L1089.91 682.702 L1089.35 682.702 L1088.79 682.702 L1088.23 682.702 L1087.67 682.702 L1087.12 682.702 L1086.56 682.702 L1086 682.702 L1085.44 682.702 L1084.88 682.702 L1084.32 682.702 L1083.76 682.702 L1083.2 682.702 L1082.64 682.702 L1082.08 682.702 L1081.52 682.702 L1080.96 682.702 L1080.4 682.702 L1079.85 682.702 L1079.29 682.702 L1078.73 682.702 L1078.17 682.702 L1077.61 682.702 L1077.05 682.702 L1076.49 682.702 L1075.93 682.702 L1075.37 682.702 L1074.81 682.702 L1074.25 682.702 L1073.69 682.702 L1073.13 682.702 L1072.57 682.702 L1072.02 682.702 L1071.46 682.702 L1070.9 682.702 L1070.34 682.702 L1069.78 682.702 L1069.22 682.702 L1068.66 682.702 L1068.1 682.702 L1067.54 682.702 L1066.98 682.702 L1066.42 682.702 L1065.86 682.702 L1065.3 682.702 L1064.75 682.702 L1064.19 682.702 L1063.63 682.702 L1063.07 682.702 L1062.51 682.702 L1061.95 682.702 L1061.39 682.702 L1060.83 682.702 L1060.27 682.702 L1059.71 682.702 L1059.15 682.702 L1058.59 682.702 L1058.03 682.702 L1057.48 682.702 L1056.92 682.702 L1056.36 682.702 L1055.8 682.702 L1055.24 682.702 L1054.68 682.702 L1054.12 682.702 L1053.56 682.702 L1053 682.702 L1052.44 682.702 L1051.88 682.702 L1051.32 682.702 L1050.76 682.702 L1050.2 682.702 L1049.65 682.702 L1049.09 682.702 L1048.53 682.702 L1047.97 682.702 L1047.41 682.702 L1046.85 682.702 L1046.29 682.702 L1045.73 682.702 L1045.17 682.702 L1044.61 682.702 L1044.05 682.702 L1043.49 682.702 L1042.93 682.702 L1042.38 682.702 L1041.82 682.702 L1041.26 682.702 L1040.7 682.702 L1040.14 682.702 L1039.58 682.702 L1039.02 682.702 L1038.46 682.702 L1037.9 682.702 L1037.34 682.702 L1036.78 682.702 L1036.22 682.702 L1035.66 682.702 L1035.1 682.702 L1034.55 682.702 L1033.99 682.702 L1033.43 682.702 L1032.87 682.702 L1032.31 682.702 L1031.75 682.702 L1031.19 682.702 L1030.63 682.702 L1030.07 682.702 L1029.51 682.702 L1028.95 682.702 L1028.39 682.702 L1027.83 682.702 L1027.28 682.702 L1026.72 682.702 L1026.16 682.702 L1025.6 682.702 L1025.04 682.702 L1024.48 682.702 L1023.92 682.702 L1023.36 682.702 L1022.8 682.702 L1022.24 682.702 L1021.68 682.702 L1021.12 682.702 L1020.56 682.702 L1020.01 682.702 L1019.45 682.702 L1018.89 682.702 L1018.33 682.702 L1017.77 682.702 L1017.21 682.702 L1016.65 682.702 L1016.09 682.702 L1015.53 682.702 L1014.97 682.702 L1014.41 682.702 L1013.85 682.702 L1013.29 682.702 L1012.73 682.702 L1012.18 682.702 L1011.62 682.702 L1011.06 682.702 L1010.5 682.702 L1009.94 682.702 L1009.38 682.702 L1008.82 682.702 L1008.26 682.702 L1007.7 682.702 L1007.14 682.702 L1006.58 682.702 L1006.02 682.702 L1005.46 682.702 L1004.91 682.702 L1004.35 682.702 L1003.79 682.702 L1003.23 682.702 L1002.67 682.702 L1002.11 682.702 L1001.55 682.702 L1000.99 682.702 L1000.43 682.702 L999.872 682.702 L999.313 682.702 L998.754 682.702 L998.194 682.702 L997.635 682.702 L997.076 682.702 L996.517 682.702 L995.957 682.702 L995.398 682.702 L994.839 682.702 L994.28 682.702 L993.72 682.702 L993.161 682.702 L992.602 682.702 L992.043 682.702 L991.483 682.702 L990.924 682.702 L990.365 682.702 L989.806 682.702 L989.246 682.702 L988.687 682.702 L988.128 682.702 L987.569 682.702 L987.009 682.702 L986.45 682.702 L985.891 682.702 L985.332 682.702 L984.772 682.702 L984.213 682.702 L983.654 682.702 L983.095 682.702 L982.535 682.702 L981.976 682.702 L981.417 682.702 L980.858 682.702 L980.298 682.702 L979.739 682.702 L979.18 682.702 L978.621 682.702 L978.061 682.702 L977.502 682.702 L976.943 682.702 L976.384 682.702 L975.824 682.702 L975.265 682.702 L974.706 682.702 L974.147 682.702 L973.587 682.702 L973.028 682.702 L972.469 682.702 L971.91 682.702 L971.35 682.702 L970.791 682.702 L970.232 682.702 L969.673 682.702 L969.113 682.702 L968.554 682.702 L967.995 682.702 L967.436 682.702 L966.876 682.702 L966.317 682.702 L965.758 682.702 L965.199 682.702 L964.639 682.702 L964.08 682.702 L963.521 682.702 L962.962 682.702 L962.402 682.702 L961.843 682.702 L961.284 682.702 L960.725 682.702 L960.165 682.702 L959.606 682.702 L959.047 682.702 L958.488 682.702 L957.928 682.702 L957.369 682.702 L956.81 682.702 L956.251 682.702 L955.691 682.702 L955.132 682.702 L954.573 682.702 L954.014 682.702 L953.454 682.702 L952.895 682.702 L952.336 682.702 L951.777 682.702 L951.217 682.702 L950.658 682.702 L950.099 682.702 L949.54 682.702 L948.98 682.702 L948.421 682.702 L947.862 682.702 L947.303 682.702 L946.743 682.702 L946.184 682.702 L945.625 682.702 L945.066 682.702 L944.506 682.702 L943.947 682.702 L943.388 682.702 L942.829 682.702 L942.269 682.702 L941.71 682.702 L941.151 682.702 L940.592 682.702 L940.032 682.702 L939.473 682.702 L938.914 682.702 L938.355 682.702 L937.795 682.702 L937.236 682.702 L936.677 682.702 L936.118 682.702 L935.558 682.702 L934.999 682.702 L934.44 682.702 L933.881 682.702 L933.321 682.702 L932.762 682.702 L932.203 682.702 L931.644 682.702 L931.084 682.702 L930.525 682.702 L929.966 682.702 L929.406 682.702 L928.847 682.702 L928.288 682.702 L927.729 682.702 L927.169 682.702 L926.61 682.702 L926.051 682.702 L925.492 682.702 L924.932 682.702 L924.373 682.702 L923.814 682.702 L923.255 682.702 L922.695 682.702 L922.136 682.702 L921.577 682.702 L921.018 682.702 L920.458 682.702 L919.899 682.702 L919.34 682.702 L918.781 682.702 L918.221 682.702 L917.662 682.702 L917.103 682.702 L916.544 682.702 L915.984 682.702 L915.425 682.702 L914.866 682.702 L914.307 682.702 L913.747 682.702 L913.188 682.702 L912.629 682.702 L912.07 682.702 L911.51 682.702 L910.951 682.702 L910.392 682.702 L909.833 682.702 L909.273 682.702 L908.714 682.702 L908.155 682.702 L907.596 682.702 L907.036 682.702 L906.477 682.702 L905.918 682.702 L905.359 682.702 L904.799 682.702 L904.24 682.702 L903.681 682.702 L903.122 682.702 L902.562 682.702 L902.003 682.702 L901.444 682.702 L900.885 682.702 L900.325 682.702 L899.766 682.702 L899.207 682.702 L898.648 682.702 L898.088 682.702 L897.529 682.702 L896.97 682.702 L896.411 682.702 L895.851 682.702 L895.292 682.702 L894.733 682.702 L894.174 682.702 L893.614 682.702 L893.055 682.702 L892.496 682.702 L891.937 682.702 L891.377 682.702 L890.818 682.702 L890.259 682.702 L889.7 682.702 L889.14 682.702 L888.581 682.702 L888.022 682.702 L887.463 682.702 L886.903 682.702 L886.344 682.702 L885.785 682.702 L885.226 682.702 L884.666 682.702 L884.107 682.702 L883.548 682.702 L882.989 682.702 L882.429 682.702 L881.87 682.702 L881.311 682.702 L880.752 682.702 L880.192 682.702 L879.633 682.702 L879.074 682.702 L878.515 682.702 L877.955 682.702 L877.396 682.702 L876.837 682.702 L876.278 682.702 L875.718 682.702 L875.159 682.702 L874.6 682.702 L874.041 682.702 L873.481 682.702 L872.922 682.702 L872.363 682.702 L871.804 682.702 L871.244 682.702 L870.685 682.702 L870.126 682.702 L869.567 682.702 L869.007 682.702 L868.448 682.702 L867.889 682.702 L867.33 682.702 L866.77 682.702 L866.211 682.702 L865.652 682.702 L865.093 682.702 L864.533 682.702 L863.974 682.702 L863.415 682.702 L862.856 682.702 L862.296 682.702 L861.737 682.702 L861.178 682.702 L860.619 682.702 L860.059 682.702 L859.5 682.702 L858.941 682.702 L858.382 682.702 L857.822 682.702 L857.263 682.702 L856.704 682.702 L856.145 682.702 L855.585 682.702 L855.026 682.702 L854.467 682.702 L853.908 682.702 L853.348 682.702 L852.789 682.702 L852.23 682.702 L851.671 682.702 L851.111 682.702 L850.552 682.702 L849.993 682.702 L849.434 682.702 L848.874 682.702 L848.315 682.702 L847.756 682.702 L847.197 682.702 L846.637 682.702 L846.078 682.702 L845.519 682.702 L844.96 682.702 L844.4 682.702 L843.841 682.702 L843.282 682.702 L842.723 682.702 L842.163 682.702 L841.604 682.702 L841.045 682.702 L840.486 682.702 L839.926 682.702 L839.367 682.702 L838.808 682.702 L838.249 682.702 L837.689 682.702 L837.13 682.702 L836.571 682.702 L836.012 682.702 L835.452 682.702 L834.893 682.702 L834.334 682.702 L833.775 682.702 L833.215 682.702 L832.656 682.702 L832.097 682.702 L831.538 682.702 L830.978 682.702 L830.419 682.702 L829.86 682.702 L829.301 682.702 L828.741 682.702 L828.182 682.702 L827.623 682.702 L827.064 682.702 L826.504 682.702 L825.945 682.702 L825.386 682.702 L824.827 682.702 L824.267 682.702 L823.708 682.702 L823.149 682.702 L822.59 682.702 L822.03 682.702 L821.471 682.702 L820.912 682.702 L820.353 682.702 L819.793 682.702 L819.234 682.702 L818.675 682.702 L818.116 682.702 L817.556 682.702 L816.997 682.702 L816.438 682.702 L815.879 682.702 L815.319 682.702 L814.76 682.702 L814.201 682.702 L813.642 682.702 L813.082 682.702 L812.523 682.702 L811.964 682.702 L811.405 682.702 L810.845 682.702 L810.286 682.702 L809.727 682.702 L809.168 682.702 L808.608 682.702 L808.049 682.702 L807.49 682.702 L806.931 682.702 L806.371 682.702 L805.812 682.702 L805.253 682.702 L804.693 682.702 L804.134 682.702 L803.575 682.702 L803.016 682.702 L802.456 682.702 L801.897 682.702 L801.338 682.702 L800.779 682.702 L800.219 682.702 L799.66 682.702 L799.101 682.702 L798.542 682.702 L797.982 682.702 L797.423 682.702 L796.864 682.702 L796.305 682.702 L795.745 682.702 L795.186 682.702 L794.627 682.702 L794.068 682.702 L793.508 682.702 L792.949 682.702 L792.39 682.702 L791.831 682.702 L791.271 682.702 L790.712 682.702 L790.153 682.702 L789.594 682.702 L789.034 682.702 L788.475 682.702 L787.916 682.702 L787.357 682.702 L786.797 682.702 L786.238 682.702 L785.679 682.702 L785.12 682.702 L784.56 682.702 L784.001 682.702 L783.442 682.702 L782.883 682.702 L782.323 682.702 L781.764 682.702 L781.205 682.702 L780.646 682.702 L780.086 682.702 L779.527 682.702 L778.968 682.702 L778.409 682.702 L777.849 682.702 L777.29 682.702 L776.731 682.702 L776.172 682.702 L775.612 682.702 L775.053 682.702 L774.494 682.702 L773.935 682.702 L773.375 682.702 L772.816 682.702 L772.257 682.702 L771.698 682.702 L771.138 682.702 L770.579 682.702 L770.02 682.702 L769.461 682.702 L768.901 682.702 L768.342 682.702 L767.783 682.702 L767.224 682.702 L766.664 682.702 L766.105 682.702 L765.546 682.702 L764.987 682.702 L764.427 682.702 L763.868 682.702 L763.309 682.702 L762.75 682.702 L762.19 682.702 L761.631 682.702 L761.072 682.702 L760.513 682.702 L759.953 682.702 L759.394 682.702 L758.835 682.702 L758.276 682.702 L757.716 682.702 L757.157 682.702 L756.598 682.702 L756.039 682.702 L755.479 682.702 L754.92 682.702 L754.361 682.702 L753.802 682.702 L753.242 682.702 L752.683 682.702 L752.124 682.702 L751.565 682.702 L751.005 682.702 L750.446 682.702 L749.887 682.702 L749.328 682.702 L748.768 682.702 L748.209 682.702 L747.65 682.702 L747.091 682.702 L746.531 682.702 L745.972 682.702 L745.413 682.702 L744.854 682.702 L744.294 682.702 L743.735 682.702 L743.176 682.702 L742.617 682.702 L742.057 682.702 L741.498 682.702 L740.939 682.702 L740.38 682.702 L739.82 682.702 L739.261 682.702 L738.702 682.702 L738.143 682.702 L737.583 682.702 L737.024 682.702 L736.465 682.702 L735.906 682.702 L735.346 682.702 L734.787 682.702 L734.228 682.702 L733.669 682.702 L733.109 682.702 L732.55 682.702 L731.991 682.702 L731.432 682.702 L730.872 682.702 L730.313 682.702 L729.754 682.702 L729.195 682.702 L728.635 682.702 L728.076 682.702 L727.517 682.702 L726.958 682.702 L726.398 682.702 L725.839 682.702 L725.28 682.702 L724.721 682.702 L724.161 682.702 L723.602 682.702 L723.043 682.702 L722.484 682.702 L721.924 682.702 L721.365 682.702 L720.806 682.702 L720.247 682.702  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.488 720.806,683.488 721.365,683.488 721.924,683.488 722.484,683.488 723.043,683.488 723.602,683.488 724.161,683.488 724.721,683.488 725.28,683.488 725.839,683.488 726.398,683.488 726.958,683.488 727.517,683.488 728.076,683.488 728.635,683.488 729.195,683.488 729.754,683.488 730.313,683.488 730.872,683.488 731.432,683.488 731.991,683.488 732.55,683.488 733.109,683.488 733.669,683.488 734.228,683.488 734.787,683.488 735.346,683.488 735.906,683.488 736.465,683.488 737.024,683.488 737.583,683.488 738.143,683.488 738.702,683.488 739.261,683.488 739.82,683.488 740.38,683.488 740.939,683.488 741.498,683.488 742.057,683.488 742.617,683.488 743.176,683.488 743.735,683.488 744.294,683.488 744.854,683.488 745.413,683.488 745.972,683.488 746.531,683.488 747.091,683.488 747.65,683.488 748.209,683.488 748.768,683.488 749.328,683.488 749.887,683.488 750.446,683.488 751.005,683.488 751.565,683.488 752.124,683.488 752.683,683.488 753.242,683.488 753.802,683.488 754.361,683.488 754.92,683.488 755.479,683.488 756.039,683.488 756.598,683.488 757.157,683.488 757.716,683.488 758.276,683.488 758.835,683.488 759.394,683.488 759.953,683.488 760.513,683.488 761.072,683.488 761.631,683.488 762.19,683.488 762.75,683.488 763.309,683.488 763.868,683.488 764.427,683.488 764.987,683.488 765.546,683.488 766.105,683.488 766.664,683.488 767.224,683.488 767.783,683.488 768.342,683.488 768.901,683.488 769.461,683.488 770.02,683.488 770.579,683.488 771.138,683.488 771.698,683.488 772.257,683.488 772.816,683.488 773.375,683.488 773.935,683.488 774.494,683.488 775.053,683.488 775.612,683.488 776.172,683.488 776.731,683.488 777.29,683.488 777.849,683.488 778.409,683.488 778.968,683.488 779.527,683.488 780.086,683.488 780.646,683.488 781.205,683.488 781.764,683.488 782.323,683.488 782.883,683.488 783.442,683.488 784.001,683.488 784.56,683.488 785.12,683.488 785.679,683.488 786.238,683.488 786.797,683.488 787.357,683.488 787.916,683.488 788.475,683.488 789.034,683.488 789.594,683.488 790.153,683.488 790.712,683.488 791.271,683.488 791.831,683.488 792.39,683.488 792.949,683.488 793.508,683.488 794.068,683.488 794.627,683.488 795.186,683.488 795.745,683.488 796.305,683.488 796.864,683.488 797.423,683.488 797.982,683.488 798.542,683.488 799.101,683.488 799.66,683.488 800.219,683.488 800.779,683.488 801.338,683.488 801.897,683.488 802.456,683.488 803.016,683.488 803.575,683.488 804.134,683.488 804.693,683.488 805.253,683.488 805.812,683.488 806.371,683.488 806.931,683.488 807.49,683.488 808.049,683.488 808.608,683.488 809.168,683.488 809.727,683.488 810.286,683.488 810.845,683.488 811.405,683.488 811.964,683.488 812.523,683.488 813.082,683.488 813.642,683.488 814.201,683.488 814.76,683.488 815.319,683.488 815.879,683.488 816.438,683.488 816.997,683.488 817.556,683.488 818.116,683.488 818.675,683.488 819.234,683.488 819.793,683.488 820.353,683.488 820.912,683.488 821.471,683.488 822.03,683.488 822.59,683.488 823.149,683.488 823.708,683.488 824.267,683.488 824.827,683.488 825.386,683.488 825.945,683.488 826.504,683.488 827.064,683.488 827.623,683.488 828.182,683.488 828.741,683.488 829.301,683.488 829.86,683.488 830.419,683.488 830.978,683.488 831.538,683.488 832.097,683.488 832.656,683.488 833.215,683.488 833.775,683.488 834.334,683.488 834.893,683.488 835.452,683.488 836.012,683.488 836.571,683.488 837.13,683.488 837.689,683.488 838.249,683.488 838.808,683.488 839.367,683.488 839.926,683.488 840.486,683.488 841.045,683.488 841.604,683.488 842.163,683.488 842.723,683.488 843.282,683.488 843.841,683.488 844.4,683.488 844.96,683.488 845.519,683.488 846.078,683.488 846.637,683.488 847.197,683.488 847.756,683.488 848.315,683.488 848.874,683.488 849.434,683.488 849.993,683.488 850.552,683.488 851.111,683.488 851.671,683.488 852.23,683.488 852.789,683.488 853.348,683.488 853.908,683.488 854.467,683.488 855.026,683.488 855.585,683.488 856.145,683.488 856.704,683.488 857.263,683.488 857.822,683.488 858.382,683.488 858.941,683.488 859.5,683.488 860.059,683.488 860.619,683.488 861.178,683.488 861.737,683.488 862.296,683.488 862.856,683.488 863.415,683.488 863.974,683.488 864.533,683.488 865.093,683.488 865.652,683.488 866.211,683.488 866.77,683.488 867.33,683.488 867.889,683.488 868.448,683.488 869.007,683.488 869.567,683.488 870.126,683.488 870.685,683.488 871.244,683.488 871.804,683.488 872.363,683.488 872.922,683.488 873.481,683.488 874.041,683.488 874.6,683.488 875.159,683.488 875.718,683.488 876.278,683.488 876.837,683.488 877.396,683.488 877.955,683.488 878.515,683.488 879.074,683.488 879.633,683.488 880.192,683.488 880.752,683.488 881.311,683.488 881.87,683.488 882.429,683.488 882.989,683.488 883.548,683.488 884.107,683.488 884.666,683.488 885.226,683.488 885.785,683.488 886.344,683.488 886.903,683.488 887.463,683.488 888.022,683.488 888.581,683.488 889.14,683.488 889.7,683.488 890.259,683.488 890.818,683.488 891.377,683.488 891.937,683.488 892.496,683.488 893.055,683.488 893.614,683.488 894.174,683.488 894.733,683.488 895.292,683.488 895.851,683.488 896.411,683.488 896.97,683.488 897.529,683.488 898.088,683.488 898.648,683.488 899.207,683.488 899.766,683.488 900.325,683.488 900.885,683.488 901.444,683.488 902.003,683.488 902.562,683.488 903.122,683.488 903.681,683.488 904.24,683.488 904.799,683.488 905.359,683.488 905.918,683.488 906.477,683.488 907.036,683.488 907.596,683.488 908.155,683.488 908.714,683.488 909.273,683.488 909.833,683.488 910.392,683.488 910.951,683.488 911.51,683.488 912.07,683.488 912.629,683.488 913.188,683.488 913.747,683.488 914.307,683.488 914.866,683.488 915.425,683.488 915.984,683.488 916.544,683.488 917.103,683.488 917.662,683.488 918.221,683.488 918.781,683.488 919.34,683.488 919.899,683.488 920.458,683.488 921.018,683.488 921.577,683.488 922.136,683.488 922.695,683.488 923.255,683.488 923.814,683.488 924.373,683.488 924.932,683.488 925.492,683.488 926.051,683.488 926.61,683.488 927.169,683.488 927.729,683.488 928.288,683.488 928.847,683.488 929.406,683.488 929.966,683.488 930.525,683.488 931.084,683.488 931.644,683.488 932.203,683.488 932.762,683.488 933.321,683.488 933.881,683.488 934.44,683.488 934.999,683.488 935.558,683.488 936.118,683.488 936.677,683.488 937.236,683.488 937.795,683.488 938.355,683.488 938.914,683.488 939.473,683.488 940.032,683.488 940.592,683.488 941.151,683.488 941.71,683.488 942.269,683.488 942.829,683.488 943.388,683.488 943.947,683.488 944.506,683.488 945.066,683.488 945.625,683.488 946.184,683.488 946.743,683.488 947.303,683.488 947.862,683.488 948.421,683.488 948.98,683.488 949.54,683.488 950.099,683.488 950.658,683.488 951.217,683.488 951.777,683.488 952.336,683.488 952.895,683.488 953.454,683.488 954.014,683.488 954.573,683.488 955.132,683.488 955.691,683.488 956.251,683.488 956.81,683.488 957.369,683.488 957.928,683.488 958.488,683.488 959.047,683.488 959.606,683.488 960.165,683.488 960.725,683.488 961.284,683.488 961.843,683.488 962.402,683.488 962.962,683.488 963.521,683.488 964.08,683.488 964.639,683.488 965.199,683.488 965.758,683.488 966.317,683.488 966.876,683.488 967.436,683.488 967.995,683.488 968.554,683.488 969.113,683.488 969.673,683.488 970.232,683.488 970.791,683.488 971.35,683.488 971.91,683.488 972.469,683.488 973.028,683.488 973.587,683.488 974.147,683.488 974.706,683.488 975.265,683.488 975.824,683.488 976.384,683.488 976.943,683.488 977.502,683.488 978.061,683.488 978.621,683.488 979.18,683.488 979.739,683.488 980.298,683.488 980.858,683.488 981.417,683.488 981.976,683.488 982.535,683.488 983.095,683.488 983.654,683.488 984.213,683.488 984.772,683.488 985.332,683.488 985.891,683.488 986.45,683.488 987.009,683.488 987.569,683.488 988.128,683.488 988.687,683.488 989.246,683.488 989.806,683.488 990.365,683.488 990.924,683.488 991.483,683.488 992.043,683.488 992.602,683.488 993.161,683.488 993.72,683.488 994.28,683.488 994.839,683.488 995.398,683.488 995.957,683.488 996.517,683.488 997.076,683.488 997.635,683.488 998.194,683.488 998.754,683.488 999.313,683.488 999.872,683.488 1000.43,683.488 1000.99,683.488 1001.55,683.488 1002.11,683.488 1002.67,683.488 1003.23,683.488 1003.79,683.488 1004.35,683.488 1004.91,683.488 1005.46,683.488 1006.02,683.488 1006.58,683.488 1007.14,683.488 1007.7,683.488 1008.26,683.488 1008.82,683.488 1009.38,683.488 1009.94,683.488 1010.5,683.488 1011.06,683.488 1011.62,683.488 1012.18,683.488 1012.73,683.488 1013.29,683.488 1013.85,683.488 1014.41,683.488 1014.97,683.488 1015.53,683.488 1016.09,683.488 1016.65,683.488 1017.21,683.488 1017.77,683.488 1018.33,683.488 1018.89,683.488 1019.45,683.488 1020.01,683.488 1020.56,683.488 1021.12,683.488 1021.68,683.488 1022.24,683.488 1022.8,683.488 1023.36,683.488 1023.92,683.488 1024.48,683.488 1025.04,683.488 1025.6,683.488 1026.16,683.488 1026.72,683.488 1027.28,683.488 1027.83,683.488 1028.39,683.488 1028.95,683.488 1029.51,683.488 1030.07,683.488 1030.63,683.488 1031.19,683.488 1031.75,683.488 1032.31,683.488 1032.87,683.488 1033.43,683.488 1033.99,683.488 1034.55,683.488 1035.1,683.488 1035.66,683.488 1036.22,683.488 1036.78,683.488 1037.34,683.488 1037.9,683.488 1038.46,683.488 1039.02,683.488 1039.58,683.488 1040.14,683.488 1040.7,683.488 1041.26,683.488 1041.82,683.488 1042.38,683.488 1042.93,683.488 1043.49,683.488 1044.05,683.488 1044.61,683.488 1045.17,683.488 1045.73,683.488 1046.29,683.488 1046.85,683.488 1047.41,683.488 1047.97,683.488 1048.53,683.488 1049.09,683.488 1049.65,683.488 1050.2,683.488 1050.76,683.488 1051.32,683.488 1051.88,683.488 1052.44,683.488 1053,683.488 1053.56,683.488 1054.12,683.488 1054.68,683.488 1055.24,683.488 1055.8,683.488 1056.36,683.488 1056.92,683.488 1057.48,683.488 1058.03,683.488 1058.59,683.488 1059.15,683.488 1059.71,683.488 1060.27,683.488 1060.83,683.488 1061.39,683.488 1061.95,683.488 1062.51,683.488 1063.07,683.488 1063.63,683.488 1064.19,683.488 1064.75,683.488 1065.3,683.488 1065.86,683.488 1066.42,683.488 1066.98,683.488 1067.54,683.488 1068.1,683.488 1068.66,683.488 1069.22,683.488 1069.78,683.488 1070.34,683.488 1070.9,683.488 1071.46,683.488 1072.02,683.488 1072.57,683.488 1073.13,683.488 1073.69,683.488 1074.25,683.488 1074.81,683.488 1075.37,683.488 1075.93,683.488 1076.49,683.488 1077.05,683.488 1077.61,683.488 1078.17,683.488 1078.73,683.488 1079.29,683.488 1079.85,683.488 1080.4,683.488 1080.96,683.488 1081.52,683.488 1082.08,683.488 1082.64,683.488 1083.2,683.488 1083.76,683.488 1084.32,683.488 1084.88,683.488 1085.44,683.488 1086,683.488 1086.56,683.488 1087.12,683.488 1087.67,683.488 1088.23,683.488 1088.79,683.488 1089.35,683.488 1089.91,683.488 1090.47,683.488 1091.03,683.488 1091.59,683.488 1092.15,683.488 1092.71,683.488 1093.27,683.488 1093.83,683.488 1094.39,683.488 1094.94,683.488 1095.5,683.488 1096.06,683.488 1096.62,683.488 1097.18,683.488 1097.74,683.488 1098.3,683.488 1098.86,683.488 1099.42,683.488 1099.98,683.488 1100.54,683.488 1101.1,683.488 1101.66,683.488 1102.22,683.488 1102.77,683.488 1103.33,683.488 1103.89,683.488 1104.45,683.488 1105.01,683.488 1105.57,683.488 1106.13,683.488 1106.69,683.488 1107.25,683.488 1107.81,683.488 1108.37,683.488 1108.93,683.488 1109.49,683.488 1110.04,683.488 1110.6,683.488 1111.16,683.488 1111.72,683.488 1112.28,683.488 1112.84,683.488 1113.4,683.488 1113.96,683.488 1114.52,683.488 1115.08,683.488 1115.64,683.488 1116.2,683.488 1116.76,683.488 1117.31,683.488 1117.87,683.488 1118.43,683.488 1118.99,683.488 1119.55,683.488 1120.11,683.488 1120.67,683.488 1121.23,683.488 1121.79,683.488 1122.35,683.488 1122.91,683.488 1123.47,683.488 1124.03,683.488 1124.59,683.488 1125.14,683.488 1125.7,683.488 1126.26,683.488 1126.82,683.488 1127.38,683.488 1127.94,683.488 1128.5,683.488 1129.06,683.488 1129.62,683.488 1130.18,683.488 1130.74,683.488 1131.3,683.488 1131.86,683.488 1132.41,683.488 1132.97,683.488 1133.53,683.488 1134.09,683.488 1134.65,683.488 1135.21,683.488 1135.77,683.488 1136.33,683.488 1136.89,683.488 1137.45,683.488 1138.01,683.488 1138.57,683.488 1139.13,683.488 1139.68,683.488 1140.24,683.488 1140.8,683.488 1141.36,683.488 1141.92,683.488 1142.48,683.488 1143.04,683.488 1143.6,683.488 1144.16,683.488 1144.72,683.488 1145.28,683.488 1145.84,683.488 1146.4,683.488 1146.96,683.488 1147.51,683.488 1148.07,683.488 1148.63,683.488 1149.19,683.488 1149.75,683.488 1150.31,683.488 1150.87,683.488 1151.43,683.488 1151.99,683.488 1152.55,683.488 1153.11,683.488 1153.67,683.488 1154.23,683.488 1154.78,683.488 1155.34,683.488 1155.9,683.488 1156.46,683.488 1157.02,683.488 1157.58,683.488 1158.14,683.488 1158.7,683.488 1159.26,683.488 1159.82,683.488 1160.38,683.488 1160.94,683.488 1161.5,683.488 1162.05,683.488 1162.61,683.488 1163.17,683.488 1163.73,683.488 1164.29,683.488 1164.85,683.488 1165.41,683.488 1165.97,683.488 1166.53,683.488 1167.09,683.488 1167.65,683.488 1168.21,683.488 1168.77,683.488 1169.33,683.488 1169.88,683.488 1170.44,683.488 1171,683.488 1171.56,683.488 1172.12,683.488 1172.68,683.488 1173.24,683.488 1173.8,683.488 1174.36,683.488 1174.92,683.488 1175.48,683.488 1176.04,683.488 1176.6,683.488 1177.15,683.488 1177.71,683.488 1178.27,683.488 1178.83,683.488 1179.39,683.488 1179.95,683.488 1180.51,683.488 1181.07,683.488 1181.63,683.488 1182.19,683.488 1182.75,683.488 1183.31,683.488 1183.87,683.488 1184.43,683.488 1184.98,683.488 1185.54,683.488 1186.1,683.488 1186.66,683.488 1187.22,683.488 1187.78,683.488 1188.34,683.488 1188.9,683.488 1189.46,683.488 1190.02,683.488 1190.58,683.488 1191.14,683.488 1191.7,683.488 1192.25,683.488 1192.81,683.488 1193.37,683.488 1193.93,683.488 1194.49,683.488 1195.05,683.488 1195.61,683.488 1196.17,683.488 1196.73,683.488 1197.29,683.488 1197.85,683.488 1198.41,683.488 1198.97,683.488 1199.52,683.488 1200.08,683.488 1200.64,683.488 1201.2,683.488 1201.76,683.488 1202.32,683.488 1202.88,683.488 1203.44,683.488 1204,683.488 1204.56,683.488 1205.12,683.488 1205.68,683.488 1206.24,683.488 1206.8,683.488 1207.35,683.488 1207.91,683.488 1208.47,683.488 1209.03,683.488 1209.59,683.488 1210.15,683.488 1210.71,683.488 1211.27,683.488 1211.83,683.488 1212.39,683.488 1212.95,683.488 1213.51,683.488 1214.07,683.488 1214.62,683.488 1215.18,683.488 1215.74,683.488 1216.3,683.488 1216.86,683.488 1217.42,683.488 1217.98,683.488 1218.54,683.488 1219.1,683.488 1219.66,683.488 1220.22,683.488 1220.78,683.488 1221.34,683.488 1221.89,683.488 1222.45,683.488 1223.01,683.488 1223.57,683.488 1224.13,683.488 1224.69,683.488 1225.25,683.488 1225.81,683.488 1226.37,683.488 1226.93,683.488 1227.49,683.488 1228.05,683.488 1228.61,683.488 1229.17,683.488 1229.72,683.488 1230.28,683.488 1230.84,683.488 1231.4,683.488 1231.96,683.488 1232.52,683.488 1233.08,683.488 1233.64,683.488 1234.2,683.488 1234.76,683.488 1235.32,683.488 1235.88,683.488 1236.44,683.488 1236.99,683.488 1237.55,683.488 1238.11,683.488 1238.67,683.488 1239.23,683.488 1239.79,683.488 1240.35,683.488 1240.91,683.488 1241.47,683.488 1242.03,683.488 1242.59,683.488 1243.15,683.488 1243.71,683.488 1244.26,683.488 1244.82,683.488 1245.38,683.488 1245.94,683.488 1246.5,683.488 1247.06,683.488 1247.62,683.488 1248.18,683.488 1248.74,683.488 1249.3,683.488 1249.86,683.488 1250.42,683.488 1250.98,683.488 1251.54,683.488 1252.09,683.488 1252.65,683.488 1253.21,683.488 1253.77,683.488 1254.33,683.488 1254.89,683.488 1255.45,683.488 1256.01,683.488 1256.57,683.488 1257.13,683.488 1257.69,683.488 1258.25,683.488 1258.81,683.488 1259.36,683.488 1259.92,683.488 1260.48,683.488 1261.04,683.488 1261.6,683.488 1262.16,683.488 1262.72,683.488 1263.28,683.488 1263.84,683.488 1264.4,683.488 1264.96,683.488 1265.52,683.488 1266.08,683.488 1266.63,683.488 1267.19,683.488 1267.75,683.488 1268.31,683.488 1268.87,683.488 1269.43,683.488 1269.99,683.488 1270.55,683.488 1271.11,683.488 1271.67,683.488 1272.23,683.488 1272.79,683.488 1273.35,683.488 1273.91,683.488 1274.46,683.488 1275.02,683.488 1275.58,683.488 1276.14,683.488 1276.7,683.488 1277.26,683.488 1277.82,683.488 1278.38,683.488 1278.94,683.488 1279.5,683.488 1280.06,683.488 1280.62,683.488 1281.18,683.488 1281.73,683.488 1282.29,683.488 1282.85,683.488 1283.41,683.488 1283.97,683.488 1284.53,683.488 1285.09,683.488 1285.65,683.488 1286.21,683.488 1286.77,683.488 1287.33,683.488 1287.89,683.488 1288.45,683.488 1289,683.488 1289.56,683.488 1290.12,683.488 1290.68,683.488 1291.24,683.488 1291.8,683.488 1292.36,683.488 1292.92,683.488 1293.48,683.488 1294.04,683.488 1294.6,683.488 1295.16,683.488 1295.72,683.488 1296.28,683.488 1296.83,683.488 1297.39,683.488 1297.95,683.488 1298.51,683.488 1299.07,683.488 1299.63,683.488 1300.19,683.488 1300.75,683.488 1301.31,683.488 1301.87,683.488 1302.43,683.488 1302.99,683.488 1303.55,683.488 1304.1,683.488 1304.66,683.488 1305.22,683.488 1305.78,683.488 1306.34,683.488 1306.9,683.488 1307.46,683.488 1308.02,683.488 1308.58,683.488 1309.14,683.488 1309.7,683.488 1310.26,683.488 1310.82,683.488 1311.38,683.488 1311.93,683.488 1312.49,683.488 1313.05,683.488 1313.61,683.488 1314.17,683.488 1314.73,683.488 1315.29,683.488 1315.85,683.488 1316.41,683.488 1316.97,683.488 1317.53,683.488 1318.09,683.488 1318.65,683.488 1319.2,683.488 1319.76,683.488 1320.32,683.488 1320.88,683.488 1321.44,683.488 1322,683.488 1322.56,683.488 1323.12,683.488 1323.68,683.488 1324.24,683.488 1324.8,683.488 1325.36,683.488 1325.92,683.488 1326.47,683.488 1327.03,683.488 1327.59,683.488 1328.15,683.488 1328.71,683.488 1329.27,683.488 1329.83,683.488 1330.39,683.488 1330.95,683.488 1331.51,683.488 1332.07,683.488 1332.63,683.488 1333.19,683.488 1333.75,683.488 1334.3,683.488 1334.86,683.488 1335.42,683.488 1335.98,683.488 1336.54,683.488 1337.1,683.488 1337.66,683.488 1338.22,683.488 1338.78,683.488 1339.34,683.488 1339.9,683.488 1340.46,683.488 1341.02,683.488 1341.57,683.488 1342.13,683.488 1342.69,683.488 1343.25,683.488 1343.81,683.488 1344.37,683.488 1344.93,683.488 1345.49,683.488 1346.05,683.488 1346.61,683.488 1347.17,683.488 1347.73,683.488 1348.29,683.488 1348.84,683.488 1349.4,683.488 1349.96,683.488 1350.52,683.488 1351.08,683.488 1351.64,683.488 1352.2,683.488 1352.76,683.488 1353.32,683.488 1353.88,683.488 1354.44,683.488 1355,683.488 1355.56,683.488 1356.12,683.488 1356.67,683.488 1357.23,683.488 1357.79,683.488 1358.35,683.488 1358.91,683.488 1359.47,683.488 1360.03,683.488 1360.59,683.488 1361.15,683.488 1361.71,683.488 1362.27,683.488 1362.83,683.488 1363.39,683.488 1363.94,683.488 1364.5,683.488 1365.06,683.488 1365.62,683.488 1366.18,683.488 1366.74,683.488 1367.3,683.488 1367.86,683.488 1368.42,683.488 1368.98,683.488 1369.54,683.488 1370.1,683.488 1370.66,683.488 1371.21,683.488 1371.77,683.488 1372.33,683.488 1372.89,683.488 1373.45,683.488 1374.01,683.488 1374.57,683.488 1375.13,683.488 1375.69,683.488 1376.25,683.488 1376.81,683.488 1377.37,683.488 1377.93,683.488 1378.49,683.488 1379.04,683.488 1379.6,683.488 1380.16,683.488 1380.72,683.488 1381.28,683.488 1381.84,683.488 1382.4,683.488 1382.96,683.488 1383.52,683.488 1384.08,683.488 1384.64,683.488 1385.2,683.488 1385.76,683.488 1386.31,683.488 1386.87,683.488 1387.43,683.488 1387.99,683.488 1388.55,683.488 1389.11,683.488 1389.67,683.488 1390.23,683.488 1390.79,683.488 1391.35,683.488 1391.91,683.488 1392.47,683.488 1393.03,683.488 1393.58,683.488 1394.14,683.488 1394.7,683.488 1395.26,683.488 1395.82,683.488 1396.38,683.488 1396.94,683.488 1397.5,683.488 1398.06,683.488 1398.62,683.488 1399.18,683.488 1399.74,683.488 1400.3,683.488 1400.86,683.488 1401.41,683.488 1401.97,683.488 1402.53,683.488 1403.09,683.488 1403.65,683.488 1404.21,683.488 1404.77,683.488 1405.33,683.488 1405.89,683.488 1406.45,683.488 1407.01,683.488 1407.57,683.488 1408.13,683.488 1408.68,683.488 1409.24,683.488 1409.8,683.488 1410.36,683.488 1410.92,683.488 1411.48,683.488 1412.04,683.488 1412.6,683.488 1413.16,683.488 1413.72,683.488 1414.28,683.488 1414.84,683.488 1415.4,683.488 1415.95,683.488 1416.51,683.488 1417.07,683.488 1417.63,683.488 1418.19,683.488 1418.75,683.488 1419.31,683.488 1419.87,683.488 1420.43,683.488 1420.99,683.488 1421.55,683.488 1422.11,683.488 1422.67,683.488 1423.23,683.488 1423.78,683.488 1424.34,683.488 1424.9,683.488 1425.46,683.488 1426.02,683.488 1426.58,683.488 1427.14,683.488 1427.7,683.488 1428.26,683.488 1428.82,683.488 1429.38,683.488 1429.94,683.488 1430.5,683.488 1431.05,683.488 1431.61,683.488 1432.17,683.488 1432.73,683.488 1433.29,683.488 1433.85,683.488 1434.41,683.488 1434.97,683.488 1435.53,683.488 1436.09,683.488 1436.65,683.488 1437.21,683.488 1437.77,683.488 1438.33,683.488 1438.88,683.488 1439.44,683.488 1440,683.488 1440.56,683.488 1441.12,683.488 1441.68,683.488 1442.24,683.488 1442.8,683.488 1443.36,683.488 1443.92,683.488 1444.48,683.488 1445.04,683.488 1445.6,683.488 1446.15,683.488 1446.71,683.488 1447.27,683.488 1447.83,683.488 1448.39,683.488 1448.95,683.488 1449.51,683.488 1450.07,683.488 1450.63,683.488 1451.19,683.488 1451.75,683.488 1452.31,683.488 1452.87,683.488 1453.42,683.488 1453.98,683.488 1454.54,683.488 1455.1,683.488 1455.66,683.488 1456.22,683.488 1456.78,683.488 1457.34,683.488 1457.9,683.488 1458.46,683.488 1459.02,683.488 1459.58,683.488 1460.14,683.488 1460.7,683.488 1461.25,683.488 1461.81,683.488 1462.37,683.488 1462.93,683.488 1463.49,683.488 1464.05,683.488 1464.61,683.488 1465.17,683.488 1465.73,683.488 1466.29,683.488 1466.85,683.488 1467.41,683.488 1467.97,683.488 1468.52,683.488 1469.08,683.488 1469.64,683.488 1470.2,683.488 1470.76,683.488 1471.32,683.488 1471.88,683.488 1472.44,683.488 1473,683.488 1473.56,683.488 1474.12,683.488 1474.68,683.488 1475.24,683.488 1475.79,683.488 1476.35,683.488 1476.91,683.488 1477.47,683.488 1478.03,683.488 1478.59,683.488 1479.15,683.488 1479.71,683.488 1480.27,683.488 1480.83,683.488 1481.39,683.488 1481.95,683.488 1482.51,683.488 1483.07,683.488 1483.62,683.488 1484.18,683.488 1484.74,683.488 1485.3,683.488 1485.86,683.488 1486.42,683.488 1486.98,683.488 1487.54,683.488 1488.1,683.488 1488.66,683.488 1489.22,683.488 1489.78,683.488 1490.34,683.488 1490.89,683.488 1491.45,683.488 1492.01,683.488 1492.57,683.488 1493.13,683.488 1493.69,683.488 1494.25,683.488 1494.81,683.488 1495.37,683.488 1495.93,683.488 1496.49,683.488 1497.05,683.488 1497.61,683.488 1498.16,683.488 1498.72,683.488 1499.28,683.488 1499.84,683.488 1500.4,683.488 1500.96,683.488 1501.52,683.488 1502.08,683.488 1502.64,683.488 1503.2,683.488 1503.76,683.488 1504.32,683.488 1504.88,683.488 1505.44,683.488 1505.99,683.488 1506.55,683.488 1507.11,683.488 1507.67,683.488 1508.23,683.488 1508.79,683.488 1509.35,683.488 1509.91,683.488 1510.47,683.488 1511.03,683.488 1511.59,683.488 1512.15,683.488 1512.71,683.488 1513.26,683.488 1513.82,683.488 1514.38,683.488 1514.94,683.488 1515.5,683.488 1516.06,683.488 1516.62,683.488 1517.18,683.488 1517.74,683.488 1518.3,683.488 1518.86,683.488 1519.42,683.488 1519.98,683.488 1520.53,683.488 1521.09,683.488 1521.65,683.488 1522.21,683.488 1522.77,683.488 1523.33,683.488 1523.89,683.488 1524.45,683.488 1525.01,683.488 1525.57,683.488 1526.13,683.488 1526.69,683.488 1527.25,683.488 1527.81,683.488 1528.36,683.488 1528.92,683.488 1529.48,683.488 1530.04,683.488 1530.6,683.488 1531.16,683.488 1531.72,683.488 1532.28,683.488 1532.84,683.488 1533.4,683.488 1533.96,683.488 1534.52,683.488 1535.08,683.488 1535.63,683.488 1536.19,683.488 1536.75,683.488 1537.31,683.488 1537.87,683.488 1538.43,683.488 1538.99,683.488 1539.55,683.488 1540.11,683.488 1540.67,683.488 1541.23,683.488 1541.79,683.488 1542.35,683.488 1542.9,683.488 1543.46,683.488 1544.02,683.488 1544.58,683.488 1545.14,683.488 1545.7,683.488 1546.26,683.488 1546.82,683.488 1547.38,683.488 1547.94,683.488 1548.5,683.488 1549.06,683.488 1549.62,683.488 1550.18,683.488 1550.73,683.488 1551.29,683.488 1551.85,683.488 1552.41,683.488 1552.97,683.488 1553.53,683.488 1554.09,683.488 1554.65,683.488 1555.21,683.488 1555.77,683.488 1556.33,683.488 1556.89,683.488 1557.45,683.488 1558,683.488 1558.56,683.488 1559.12,683.488 1559.68,683.488 1560.24,683.488 1560.8,683.488 1561.36,683.488 1561.92,683.488 1562.48,683.488 1563.04,683.488 1563.6,683.488 1564.16,683.488 1564.72,683.488 1565.28,683.488 1565.83,683.488 1566.39,683.488 1566.95,683.488 1567.51,683.488 1568.07,683.488 1568.63,683.488 1569.19,683.488 1569.75,683.488 1570.31,683.488 1570.87,683.488 1571.43,683.488 1571.99,683.488 1572.55,683.488 1573.1,683.488 1573.66,683.488 1574.22,683.488 1574.78,683.488 1575.34,683.488 1575.9,683.488 1576.46,683.488 1577.02,683.488 1577.58,683.488 1578.14,683.488 1578.7,683.488 1579.26,683.488 1579.82,683.488 1580.37,683.488 1580.93,683.488 1581.49,683.488 1582.05,683.488 1582.61,683.488 1583.17,683.488 1583.73,683.488 1584.29,683.488 1584.85,683.488 1585.41,683.488 1585.97,683.488 1586.53,683.488 1587.09,683.488 1587.65,683.488 1588.2,683.488 1588.76,683.488 1589.32,683.488 1589.88,683.488 1590.44,683.488 1591,683.488 1591.56,683.488 1592.12,683.488 1592.68,683.488 1593.24,683.488 1593.8,683.488 1594.36,683.488 1594.92,683.488 1595.47,683.488 1596.03,683.488 1596.59,683.488 1597.15,683.488 1597.71,683.488 1598.27,683.488 1598.83,683.488 1599.39,683.488 1599.95,683.488 1600.51,683.488 1601.07,683.488 1601.63,683.488 1602.19,683.488 1602.74,683.488 1603.3,683.488 1603.86,683.488 1604.42,683.488 1604.98,683.488 1605.54,683.488 1606.1,683.488 1606.66,683.488 1607.22,683.488 1607.78,683.488 1608.34,683.488 1608.9,683.488 1609.46,683.488 1610.02,683.488 1610.57,683.488 1611.13,683.488 1611.69,683.488 1612.25,683.488 1612.81,683.488 1613.37,683.488 1613.93,683.488 1614.49,683.488 1615.05,683.488 1615.61,683.488 1616.17,683.488 1616.73,683.488 1617.29,683.488 1617.84,683.488 1618.4,683.488 1618.96,683.488 1619.52,683.488 1620.08,683.488 1620.64,683.488 1621.2,683.488 1621.76,683.488 1622.32,683.488 1622.88,683.488 1623.44,683.488 1624,683.488 1624.56,683.488 1625.11,683.488 1625.67,683.488 1626.23,683.488 1626.79,683.488 1627.35,683.488 1627.91,683.488 1628.47,683.488 1629.03,683.488 1629.59,683.488 1630.15,683.488 1630.71,683.488 1631.27,683.488 1631.83,683.488 1632.39,683.488 1632.94,683.488 1633.5,683.488 1634.06,683.488 1634.62,683.488 1635.18,683.488 1635.74,683.488 1636.3,683.488 1636.86,683.488 1637.42,683.488 1637.98,683.488 1638.54,683.488 1639.1,683.488 1639.66,683.488 1640.21,683.488 1640.77,683.488 1641.33,683.488 1641.89,683.488 1642.45,683.488 1643.01,683.488 1643.57,683.488 1644.13,683.488 1644.69,683.488 1645.25,683.488 1645.81,683.488 1646.37,683.488 1646.93,683.488 1647.48,683.488 1648.04,683.488 1648.6,683.488 1649.16,683.488 1649.72,683.488 1650.28,683.488 1650.84,683.488 1651.4,683.488 1651.96,683.488 1652.52,683.488 1653.08,683.488 1653.64,683.488 1654.2,683.488 1654.76,683.488 1655.31,683.488 1655.87,683.488 1656.43,683.488 1656.99,683.488 1657.55,683.488 1658.11,683.488 1658.67,683.488 1659.23,683.488 1659.79,683.488 1660.35,683.488 1660.91,683.488 1661.47,683.488 1662.03,683.488 1662.58,683.488 1663.14,683.488 1663.7,683.488 1664.26,683.488 1664.82,683.488 1665.38,683.488 1665.94,683.488 1666.5,683.488 1667.06,683.488 1667.62,683.488 1668.18,683.488 1668.74,683.488 1669.3,683.488 1669.85,683.488 1670.41,683.488 1670.97,683.488 1671.53,683.488 1672.09,683.488 1672.65,683.488 1673.21,683.488 1673.77,683.488 1674.33,683.488 1674.89,683.488 1675.45,683.488 1676.01,683.488 1676.57,683.488 1677.13,683.488 1677.68,683.488 1678.24,683.488 1678.8,683.488 1679.36,683.488 1679.92,683.488 1680.48,683.488 1681.04,683.488 1681.6,683.488 1682.16,683.488 1682.72,683.488 1683.28,683.488 1683.84,683.488 1684.4,683.488 1684.95,683.488 1685.51,683.488 1686.07,683.488 1686.63,683.488 1687.19,683.488 1687.75,683.488 1688.31,683.488 1688.87,683.488 1689.43,683.488 1689.99,683.488 1690.55,683.488 1691.11,683.488 1691.67,683.488 1692.23,683.488 1692.78,683.488 1693.34,683.488 1693.9,683.488 1694.46,683.488 1695.02,683.488 1695.58,683.488 1696.14,683.488 1696.7,683.488 1697.26,683.488 1697.82,683.488 1698.38,683.488 1698.94,683.488 1699.5,683.488 1700.05,683.488 1700.61,683.488 1701.17,683.488 1701.73,683.488 1702.29,683.488 1702.85,683.488 1703.41,683.488 1703.97,683.488 1704.53,683.488 1705.09,683.488 1705.65,683.488 1706.21,683.488 1706.77,683.488 1707.32,683.488 1707.88,683.488 1708.44,683.488 1709,683.488 1709.56,683.488 1710.12,683.488 1710.68,683.488 1711.24,683.488 1711.8,683.488 1712.36,683.488 1712.92,683.488 1713.48,683.488 1714.04,683.488 1714.6,683.488 1715.15,683.488 1715.71,683.488 1716.27,683.488 1716.83,683.488 1717.39,683.488 1717.95,683.488 1718.51,683.488 1719.07,683.488 1719.63,683.488 1720.19,683.488 1720.75,683.488 1721.31,683.488 1721.87,683.488 1722.42,683.488 1722.98,683.488 1723.54,683.488 1724.1,683.488 1724.66,683.488 1725.22,683.488 1725.78,683.488 1726.34,683.488 1726.9,683.488 1727.46,683.488 1728.02,683.488 1728.58,683.488 1729.14,683.488 1729.69,683.488 1730.25,683.488 1730.81,683.488 1731.37,683.488 1731.93,683.488 1732.49,683.488 1733.05,683.488 1733.61,683.488 1734.17,683.488 1734.73,683.488 1735.29,683.488 1735.85,683.488 1736.41,683.488 1736.97,683.488 1737.52,683.488 1738.08,683.488 1738.64,683.488 1739.2,683.488 1739.76,683.488 1740.32,683.488 1740.88,683.488 1741.44,683.488 1742,683.488 1742.56,683.488 1743.12,683.488 1743.68,683.488 1744.24,683.488 1744.79,683.488 1745.35,683.488 1745.91,683.488 1746.47,683.488 1747.03,683.488 1747.59,683.488 1748.15,683.488 1748.71,683.488 1749.27,683.488 1749.83,683.488 1750.39,683.488 1750.95,683.488 1751.51,683.488 1752.06,683.488 1752.62,683.488 1753.18,683.488 1753.74,683.488 1754.3,683.488 1754.86,683.488 1755.42,683.488 1755.98,683.488 1756.54,683.488 1757.1,683.488 1757.66,683.488 1758.22,683.488 1758.78,683.488 1759.34,683.488 1759.89,683.488 1760.45,683.488 1761.01,683.488 1761.57,683.488 1762.13,683.488 1762.69,683.488 1763.25,683.488 1763.81,683.488 1764.37,683.488 1764.93,683.488 1765.49,683.488 1766.05,683.488 1766.61,683.488 1767.16,683.488 1767.72,683.488 1768.28,683.488 1768.84,683.488 1769.4,683.488 1769.96,683.488 1770.52,683.488 1771.08,683.488 1771.64,683.488 1772.2,683.488 1772.76,683.488 1773.32,683.488 1773.88,683.488 1774.43,683.488 1774.99,683.488 1775.55,683.488 1776.11,683.488 1776.67,683.488 1777.23,683.488 1777.79,683.488 1778.35,683.488 1778.91,683.488 1779.47,683.488 1780.03,683.488 1780.59,683.488 1781.15,683.488 1781.71,683.488 1782.26,683.488 1782.82,683.488 1783.38,683.488 1783.94,683.488 1784.5,683.488 1785.06,683.488 1785.62,683.488 1786.18,683.488 1786.74,683.488 1787.3,683.488 1787.86,683.488 1788.42,683.488 1788.98,683.488 1789.53,683.488 1790.09,683.488 1790.65,683.488 1791.21,683.488 1791.77,683.488 1792.33,683.488 1792.89,683.488 1793.45,683.488 1794.01,683.488 1794.57,683.488 1795.13,683.488 1795.69,683.488 1796.25,683.488 1796.8,683.488 1797.36,683.488 1797.92,683.488 1798.48,683.488 1799.04,683.488 1799.6,683.488 1800.16,683.488 1800.72,683.488 1801.28,683.488 1801.84,683.488 1802.4,683.488 1802.96,683.488 1803.52,683.488 1804.08,683.488 1804.63,683.488 1805.19,683.488 1805.75,683.488 1806.31,683.488 1806.87,683.488 1807.43,683.488 1807.99,683.488 1808.55,683.488 1809.11,683.488 1809.67,683.488 1810.23,683.488 1810.79,683.488 1811.35,683.488 1811.9,683.488 1812.46,683.488 1813.02,683.488 1813.58,683.488 1814.14,683.488 1814.7,683.488 1815.26,683.488 1815.82,683.488 1816.38,683.488 1816.94,683.488 1817.5,683.488 1818.06,683.488 1818.62,683.488 1819.18,683.488 1819.73,683.488 1820.29,683.488 1820.85,683.488 1821.41,683.488 1821.97,683.488 1822.53,683.488 1823.09,683.488 1823.65,683.488 1824.21,683.488 1824.77,683.488 1825.33,683.488 1825.89,683.488 1826.45,683.488 1827,683.488 1827.56,683.488 1828.12,683.488 1828.68,683.488 1829.24,683.488 1829.8,683.488 1830.36,683.488 1830.92,683.488 1831.48,683.488 1832.04,683.488 1832.6,683.488 1833.16,683.488 1833.72,683.488 1834.27,683.488 1834.83,683.488 1835.39,683.488 1835.95,683.488 1836.51,683.488 1837.07,683.488 1837.63,683.488 1838.19,683.488 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.020134379009288 ± 0.024739439495884627\nProjected Energy: -4.014597431587246 ± (0.004197283420288578, 0.003954320857324056)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.520591</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3535e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.587e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0069e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.342e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.855e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.447e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613376\n -0.7590191922770835\n  0.1358418221962232\n  0.15789998694607554\n  0.8767114411781343\n  1.5305929970973322\n  1.5835732611867428\n  3.0728703303258698\n  3.125672653951841\n  4.862107221562169\n  6.260694850380595\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Hermitian{ELTYPE, Matrix{ELTYPE}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1; ELTYPE=Float64)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2; ELTYPE=Float64)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
