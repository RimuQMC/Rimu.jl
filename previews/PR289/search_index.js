var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21213320344496006 ± 0.0016475032219053236\n   G2(1) = 0.9167221125952524 ± 0.0008785303865054249\n   G2(2) = 0.9829097714997291 ± 0.0005633396562071386\n   G2(3) = 0.9886030283650779 ± 0.0007784244521571431\n   G2(4) = 0.9829097714997291 ± 0.0005633396562071386\n   G2(5) = 0.9167221125952524 ± 0.0008785303865054249\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.06025496511713 ± 0.1430937045945139\n   Replica 2: -4.058701827852811 ± 0.13018681633424342\n   Replica 3: -4.038242163180474 ± 0.1292405952186882\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.26 2211.02,1003.26 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.69 2211.02,745.69 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.119 2211.02,488.119 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.549 2211.02,230.549 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.26 423.181,1003.26 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.69 423.181,745.69 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.119 423.181,488.119 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.549 423.181,230.549 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M290.043 1016.61 L306.363 1016.61 L306.363 1020.54 L284.418 1020.54 L284.418 1016.61 Q287.08 1013.85 291.664 1009.22 Q296.27 1004.57 297.451 1003.23 Q299.696 1000.7 300.576 998.967 Q301.478 997.208 301.478 995.518 Q301.478 992.763 299.534 991.027 Q297.613 989.291 294.511 989.291 Q292.312 989.291 289.858 990.055 Q287.427 990.819 284.65 992.37 L284.65 987.647 Q287.474 986.513 289.927 985.934 Q292.381 985.356 294.418 985.356 Q299.789 985.356 302.983 988.041 Q306.177 990.726 306.177 995.217 Q306.177 997.346 305.367 999.268 Q304.58 1001.17 302.474 1003.76 Q301.895 1004.43 298.793 1007.65 Q295.691 1010.84 290.043 1016.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M316.224 985.981 L334.58 985.981 L334.58 989.916 L320.506 989.916 L320.506 998.388 Q321.524 998.041 322.543 997.879 Q323.562 997.694 324.58 997.694 Q330.367 997.694 333.747 1000.86 Q337.126 1004.04 337.126 1009.45 Q337.126 1015.03 333.654 1018.13 Q330.182 1021.21 323.862 1021.21 Q321.687 1021.21 319.418 1020.84 Q317.173 1020.47 314.765 1019.73 L314.765 1015.03 Q316.849 1016.17 319.071 1016.72 Q321.293 1017.28 323.77 1017.28 Q327.774 1017.28 330.112 1015.17 Q332.45 1013.06 332.45 1009.45 Q332.45 1005.84 330.112 1003.74 Q327.774 1001.63 323.77 1001.63 Q321.895 1001.63 320.02 1002.05 Q318.168 1002.46 316.224 1003.34 L316.224 985.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 989.059 Q352.728 989.059 350.899 992.624 Q349.094 996.166 349.094 1003.3 Q349.094 1010.4 350.899 1013.97 Q352.728 1017.51 356.339 1017.51 Q359.973 1017.51 361.779 1013.97 Q363.608 1010.4 363.608 1003.3 Q363.608 996.166 361.779 992.624 Q359.973 989.059 356.339 989.059 M356.339 985.356 Q362.149 985.356 365.205 989.962 Q368.284 994.545 368.284 1003.3 Q368.284 1012.02 365.205 1016.63 Q362.149 1021.21 356.339 1021.21 Q350.529 1021.21 347.45 1016.63 Q344.395 1012.02 344.395 1003.3 Q344.395 994.545 347.45 989.962 Q350.529 985.356 356.339 985.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M286.062 728.41 L304.418 728.41 L304.418 732.345 L290.344 732.345 L290.344 740.817 Q291.363 740.47 292.381 740.308 Q293.4 740.123 294.418 740.123 Q300.205 740.123 303.585 743.294 Q306.964 746.466 306.964 751.882 Q306.964 757.461 303.492 760.563 Q300.02 763.641 293.701 763.641 Q291.525 763.641 289.256 763.271 Q287.011 762.901 284.603 762.16 L284.603 757.461 Q286.687 758.595 288.909 759.151 Q291.131 759.706 293.608 759.706 Q297.613 759.706 299.951 757.6 Q302.288 755.493 302.288 751.882 Q302.288 748.271 299.951 746.165 Q297.613 744.058 293.608 744.058 Q291.733 744.058 289.858 744.475 Q288.006 744.891 286.062 745.771 L286.062 728.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M326.177 731.489 Q322.566 731.489 320.737 735.054 Q318.932 738.595 318.932 745.725 Q318.932 752.831 320.737 756.396 Q322.566 759.938 326.177 759.938 Q329.811 759.938 331.617 756.396 Q333.446 752.831 333.446 745.725 Q333.446 738.595 331.617 735.054 Q329.811 731.489 326.177 731.489 M326.177 727.785 Q331.987 727.785 335.043 732.392 Q338.122 736.975 338.122 745.725 Q338.122 754.452 335.043 759.058 Q331.987 763.641 326.177 763.641 Q320.367 763.641 317.288 759.058 Q314.233 754.452 314.233 745.725 Q314.233 736.975 317.288 732.392 Q320.367 727.785 326.177 727.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 731.489 Q352.728 731.489 350.899 735.054 Q349.094 738.595 349.094 745.725 Q349.094 752.831 350.899 756.396 Q352.728 759.938 356.339 759.938 Q359.973 759.938 361.779 756.396 Q363.608 752.831 363.608 745.725 Q363.608 738.595 361.779 735.054 Q359.973 731.489 356.339 731.489 M356.339 727.785 Q362.149 727.785 365.205 732.392 Q368.284 736.975 368.284 745.725 Q368.284 754.452 365.205 759.058 Q362.149 763.641 356.339 763.641 Q350.529 763.641 347.45 759.058 Q344.395 754.452 344.395 745.725 Q344.395 736.975 347.45 732.392 Q350.529 727.785 356.339 727.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M284.835 470.839 L307.057 470.839 L307.057 472.83 L294.511 505.399 L289.627 505.399 L301.432 474.775 L284.835 474.775 L284.835 470.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M316.224 470.839 L334.58 470.839 L334.58 474.775 L320.506 474.775 L320.506 483.247 Q321.524 482.9 322.543 482.737 Q323.562 482.552 324.58 482.552 Q330.367 482.552 333.747 485.724 Q337.126 488.895 337.126 494.312 Q337.126 499.89 333.654 502.992 Q330.182 506.071 323.862 506.071 Q321.687 506.071 319.418 505.7 Q317.173 505.33 314.765 504.589 L314.765 499.89 Q316.849 501.024 319.071 501.58 Q321.293 502.136 323.77 502.136 Q327.774 502.136 330.112 500.029 Q332.45 497.923 332.45 494.312 Q332.45 490.7 330.112 488.594 Q327.774 486.487 323.77 486.487 Q321.895 486.487 320.02 486.904 Q318.168 487.321 316.224 488.2 L316.224 470.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 473.918 Q352.728 473.918 350.899 477.483 Q349.094 481.025 349.094 488.154 Q349.094 495.261 350.899 498.825 Q352.728 502.367 356.339 502.367 Q359.973 502.367 361.779 498.825 Q363.608 495.261 363.608 488.154 Q363.608 481.025 361.779 477.483 Q359.973 473.918 356.339 473.918 M356.339 470.214 Q362.149 470.214 365.205 474.821 Q368.284 479.404 368.284 488.154 Q368.284 496.881 365.205 501.487 Q362.149 506.071 356.339 506.071 Q350.529 506.071 347.45 501.487 Q344.395 496.881 344.395 488.154 Q344.395 479.404 347.45 474.821 Q350.529 470.214 356.339 470.214 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M256.664 243.894 L264.303 243.894 L264.303 217.528 L255.992 219.195 L255.992 214.935 L264.256 213.269 L268.932 213.269 L268.932 243.894 L276.571 243.894 L276.571 247.829 L256.664 247.829 L256.664 243.894 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M296.015 216.347 Q292.404 216.347 290.576 219.912 Q288.77 223.454 288.77 230.583 Q288.77 237.69 290.576 241.255 Q292.404 244.796 296.015 244.796 Q299.65 244.796 301.455 241.255 Q303.284 237.69 303.284 230.583 Q303.284 223.454 301.455 219.912 Q299.65 216.347 296.015 216.347 M296.015 212.644 Q301.826 212.644 304.881 217.25 Q307.96 221.834 307.96 230.583 Q307.96 239.31 304.881 243.917 Q301.826 248.5 296.015 248.5 Q290.205 248.5 287.127 243.917 Q284.071 239.31 284.071 230.583 Q284.071 221.834 287.127 217.25 Q290.205 212.644 296.015 212.644 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M326.177 216.347 Q322.566 216.347 320.737 219.912 Q318.932 223.454 318.932 230.583 Q318.932 237.69 320.737 241.255 Q322.566 244.796 326.177 244.796 Q329.811 244.796 331.617 241.255 Q333.446 237.69 333.446 230.583 Q333.446 223.454 331.617 219.912 Q329.811 216.347 326.177 216.347 M326.177 212.644 Q331.987 212.644 335.043 217.25 Q338.122 221.834 338.122 230.583 Q338.122 239.31 335.043 243.917 Q331.987 248.5 326.177 248.5 Q320.367 248.5 317.288 243.917 Q314.233 239.31 314.233 230.583 Q314.233 221.834 317.288 217.25 Q320.367 212.644 326.177 212.644 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 216.347 Q352.728 216.347 350.899 219.912 Q349.094 223.454 349.094 230.583 Q349.094 237.69 350.899 241.255 Q352.728 244.796 356.339 244.796 Q359.973 244.796 361.779 241.255 Q363.608 237.69 363.608 230.583 Q363.608 223.454 361.779 219.912 Q359.973 216.347 356.339 216.347 M356.339 212.644 Q362.149 212.644 365.205 217.25 Q368.284 221.834 368.284 230.583 Q368.284 239.31 365.205 243.917 Q362.149 248.5 356.339 248.5 Q350.529 248.5 347.45 243.917 Q344.395 239.31 344.395 230.583 Q344.395 221.834 347.45 217.25 Q350.529 212.644 356.339 212.644 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.549 4017.76,230.549 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1243.2 463.375,1242.19 463.943,1240.05 464.511,1237.81 465.08,1236.52 465.648,1235.12 466.216,1232.55 466.785,1230.91 467.353,1228.11 467.921,1226.2 468.49,1224.13 469.058,1221.92 469.626,1219.51 470.195,1217.01 470.763,1213.29 471.331,1209.4 471.9,1205.24 472.468,1201.95 473.036,1198.5 473.605,1194.85 474.173,1189.98 474.741,1184.9 475.31,1178.64 475.878,1174.14 476.446,1169.5 477.015,1164.56 477.583,1158.39 478.152,1153.1 478.72,1147.51 479.288,1141.69 479.857,1135.65 480.425,1128.44 480.993,1122.06 481.562,1115.37 482.13,1108.57 482.698,1100.28 483.267,1093.08 483.835,1084.62 484.403,1077.03 484.972,1068.16 485.54,1057.92 486.108,1048.66 486.677,1038.23 487.245,1029.82 487.813,1021.22 488.382,1011.3 488.95,1001.21 489.518,990.048 490.087,980.863 490.655,969.431 491.224,958.058 491.792,945.557 492.36,933.062 492.929,923.552 493.497,914.013 494.065,903.51 494.634,892.817 495.202,882.143 495.77,870.339 496.339,858.634 496.907,848.091 497.475,837.47 498.044,827.871 498.612,817.033 499.18,804.33 499.749,793.918 500.317,781.226 500.885,769.783 501.454,759.411 502.022,748.235 502.59,739.241 503.159,727.989 503.727,718.093 504.295,708.235 504.864,696.501 505.432,685.05 506.001,676.755 506.569,666.481 507.137,657.378 507.706,649.405 508.274,640.409 508.842,628.477 509.411,620.005 509.979,611.526 510.547,602.184 511.116,595.232 511.684,586.065 512.252,577.204 512.821,568.51 513.389,560.924 513.957,552.392 514.526,544.129 515.094,535.761 515.662,527.633 516.231,519.673 516.799,511.918 517.367,506.519 517.936,500.064 518.504,493.849 519.072,486.533 519.641,480.636 520.209,475.831 520.778,470.041 521.346,465.394 521.914,460.641 522.483,455.056 523.051,446.458 523.619,442.456 524.188,436.218 524.756,432.464 525.324,428.609 525.893,423.722 526.461,420.955 527.029,416.111 527.598,412.313 528.166,407.655 528.734,398.833 529.303,396.852 529.871,394.811 530.439,389.536 531.008,385.546 531.576,378.531 532.144,373.955 532.713,369.527 533.281,367.226 533.85,365.881 534.418,361.403 534.986,358.135 535.555,350.845 536.123,348.045 536.691,343.502 537.26,341.839 537.828,340.186 538.396,339.469 538.965,336.993 539.533,334.369 540.101,332.621 540.67,331.194 541.238,327.782 541.806,326.193 542.375,323.794 542.943,321.435 543.511,317.023 544.08,316.018 544.648,312.644 545.216,309.609 545.785,308.619 546.353,305.728 546.921,302.979 547.49,304.45 548.058,303.77 548.627,302.898 549.195,300.756 549.763,301.135 550.332,299.05 550.9,295.125 551.468,292.437 552.037,291.884 552.605,290.254 553.173,288.542 553.742,289.224 554.31,286.443 554.878,283.883 555.447,280.65 556.015,278.5 556.583,277.582 557.152,275.393 557.72,274.554 558.288,273.856 558.857,274.968 559.425,277.057 559.993,277.935 560.562,276.519 561.13,278.348 561.698,276.919 562.267,276.418 562.835,274.985 563.404,273.552 563.972,271.351 564.54,271.079 565.109,270.821 565.677,269.59 566.245,269.249 566.814,268.934 567.382,267.649 567.95,267.497 568.519,266.261 569.087,268.453 569.655,265.143 570.224,263.814 570.792,264.799 571.36,263.917 571.929,260.784 572.497,261.508 573.065,261.435 573.634,260.36 574.202,260.127 574.77,259.932 575.339,257.677 575.907,256.808 576.476,258.005 577.044,255.973 577.612,256.998 578.181,258.063 578.749,259.887 579.317,259.571 579.886,260.504 580.454,259.445 581.022,260.243 581.591,257.952 582.159,257.566 582.727,257.321 583.296,256.139 583.864,255.946 584.432,254.544 585.001,254.535 585.569,254.389 586.137,253.326 586.706,253.085 587.274,252.89 587.842,251.561 588.411,251.556 588.979,249.516 589.547,248.492 590.116,245.571 590.684,245.769 591.253,244.983 591.821,243.083 592.389,243.62 592.958,243.06 593.526,242.308 594.094,246 594.663,245.517 595.231,242.931 595.799,243.616 596.368,241.014 596.936,241.629 597.504,242.234 598.073,242.531 598.641,241.985 599.209,241.415 599.778,239.749 600.346,238.206 600.914,238.768 601.483,238.384 602.051,238.974 602.619,241.542 603.188,244.167 603.756,246.05 604.325,247.002 604.893,246.798 605.461,248.804 606.03,247.905 606.598,247.861 607.166,247.764 607.735,246.64 608.303,246.583 608.871,247.41 609.44,247.352 610.008,247.29 610.576,247.117 611.145,245.052 611.713,243.919 612.281,244.019 612.85,243.028 613.418,244.168 613.986,243.117 614.555,243.119 615.123,244.145 615.691,244.094 616.26,245.216 616.828,244.979 617.396,243.968 617.965,243.962 618.533,239.8 619.102,240.318 619.67,242.56 620.238,241.616 620.807,241.539 621.375,243.58 621.943,242.475 622.512,242.399 623.08,240.264 623.648,239.154 624.217,240.19 624.785,241.34 625.353,240.315 625.922,239.389 626.49,239.322 627.058,239.411 627.627,239.383 628.195,239.302 628.763,239.533 629.332,237.913 629.9,238.154 630.468,238.186 631.037,238.453 631.605,236.673 632.173,236.036 632.742,236.412 633.31,234.748 633.879,236.239 634.447,235.683 635.015,235.037 635.584,236.352 636.152,235.587 636.72,237.093 637.289,235.211 637.857,236.829 638.425,237.178 638.994,237.389 639.562,235.464 640.13,234.639 640.699,231.871 641.267,233.512 641.835,233.996 642.404,232.464 642.972,234.058 643.54,233.568 644.109,233.862 644.677,236.346 645.245,236.709 645.814,238.272 646.382,237.22 646.951,237.477 647.519,238.78 648.087,238.673 648.656,238.697 649.224,239.116 649.792,239.924 650.361,238.07 650.929,237.122 651.497,237.365 652.066,237.676 652.634,236.911 653.202,236.998 653.771,237.254 654.339,237.269 654.907,236.392 655.476,237.93 656.044,240.088 656.612,239.903 657.181,237.792 657.749,238.879 658.317,237.955 658.886,237.929 659.454,238.006 660.022,239.223 660.591,240.341 661.159,238.119 661.728,238.097 662.296,235.074 662.864,235.245 663.433,236.513 664.001,236.696 664.569,237.657 665.138,238.62 665.706,239.42 666.274,240.197 666.843,240.973 667.411,240.984 667.979,238.755 668.548,238.509 669.116,236.446 669.684,234.341 670.253,236.458 670.821,236.366 671.389,235.364 671.958,236.463 672.526,236.563 673.094,236.515 673.663,235.415 674.231,233.463 674.799,233.682 675.368,233.629 675.936,232.721 676.505,235.094 677.073,233.903 677.641,233.927 678.21,233.982 678.778,234.162 679.346,236.536 679.915,236.546 680.483,236.416 681.051,236.377 681.62,234.194 682.188,233.138 682.756,232.32 683.325,232.502 683.893,228.677 684.461,229.292 685.03,229.805 685.598,230.317 686.166,231.771 686.735,228.914 687.303,232.312 687.871,233.48 688.44,234.745 689.008,235.088 689.577,231.011 690.145,230.563 690.713,228.796 691.282,229.305 691.85,230.038 692.418,232.595 692.987,230.882 693.555,231.211 694.123,230.6 694.692,231.942 695.26,233.268 695.828,233.455 696.397,232.756 696.965,234.899 697.533,232.796 698.102,229.879 698.67,230.358 699.238,229.804 699.807,229.102 700.375,230.446 700.943,228.797 701.512,229.114 702.08,229.456 702.648,229.976 703.217,230.249 703.785,230.694 704.354,231.922 704.922,231.117 705.49,231.562 706.059,233.151 706.627,235.457 707.195,234.556 707.764,234.945 708.332,233.139 708.9,232.393 709.469,233.589 710.037,232.754 710.605,233.214 711.174,231.248 711.742,234.716 712.31,232.757 712.879,231.871 713.447,234.208 714.015,234.168 714.584,231.008 715.152,235.302 715.72,234.279 716.289,236.346 716.857,239.461 717.425,241.118 717.994,241.739 718.562,241.373 719.131,237.834 719.699,238.629 720.267,238.566 720.836,236.334 721.404,232.01 721.972,233.047 722.541,232.263 723.109,233.482 723.677,233.458 724.246,234.634 724.814,235.668 725.382,238.702 725.951,237.433 726.519,237.257 727.087,234.025 727.656,235.297 728.224,234.177 728.792,235.16 729.361,234.228 729.929,234.246 730.497,233.067 731.066,232.972 731.634,237.129 732.203,235.749 732.771,234.434 733.339,234.465 733.908,236.357 734.476,236.038 735.044,236.015 735.613,234.764 736.181,233.677 736.749,233.846 737.318,232.688 737.886,233.597 738.454,233.33 739.023,233.419 739.591,234.614 740.159,235.647 740.728,233.689 741.296,236.982 741.864,236.752 742.433,234.537 743.001,231.449 743.569,232.596 744.138,230.51 744.706,231.698 745.274,231.967 745.843,231.251 746.411,232.436 746.98,233.562 747.548,233.498 748.116,231.186 748.685,232.482 749.253,231.311 749.821,229.414 750.39,229.62 750.958,229.715 751.526,229.879 752.095,234.189 752.663,234.181 753.231,236.249 753.8,235.089 754.368,236.063 754.936,236.842 755.505,236.514 756.073,237.227 756.641,237.892 757.21,233.416 757.778,234.329 758.346,236.372 758.915,239.091 759.483,238.668 760.052,240.321 760.62,239.738 761.188,239.162 761.757,236.361 762.325,234.788 762.893,234.679 763.462,233.414 764.03,233.419 764.598,233.224 765.167,233.057 765.735,231.908 766.303,230.806 766.872,231.914 767.44,233.91 768.008,233.744 768.577,233.662 769.145,232.637 769.713,232.711 770.282,230.697 770.85,230.891 771.418,230.849 771.987,234.062 772.555,231.461 773.123,229.479 773.692,229.581 774.26,232.873 774.829,231.461 775.397,231.214 775.965,232.998 776.534,231.045 777.102,229.235 777.67,230.409 778.239,230.412 778.807,228.594 779.375,228.669 779.944,228.958 780.512,231.075 781.08,229.901 781.649,230.18 782.217,230.257 782.785,228.441 783.354,227.757 783.922,226.12 784.49,228.595 785.059,228.948 785.627,228.331 786.195,225.481 786.764,226.779 787.332,227.229 787.9,225.427 788.469,224.863 789.037,224.413 789.606,227.15 790.174,225.47 790.742,226.802 791.311,229.336 791.879,227.627 792.447,229.984 793.016,231.085 793.584,230.203 794.152,228.524 794.721,228.773 795.289,227.197 795.857,228.648 796.426,226.958 796.994,227.482 797.562,227.962 798.131,228.28 798.699,227.587 799.267,232.08 799.836,231.073 800.404,231.09 800.972,231.164 801.541,232.326 802.109,232.287 802.678,232.438 803.246,232.384 803.814,232.482 804.383,232.346 804.951,234.489 805.519,234.309 806.088,234.174 806.656,234.252 807.224,232.119 807.793,232.155 808.361,230.222 808.929,228.471 809.498,230.875 810.066,227.89 810.634,228.198 811.203,227.259 811.771,226.47 812.339,225.882 812.908,227.476 813.476,225.903 814.044,226.453 814.613,227.185 815.181,229.559 815.749,229.787 816.318,232.037 816.886,231.132 817.455,230.32 818.023,232.64 818.591,234.731 819.16,236.743 819.728,236.231 820.296,237.978 820.865,239.87 821.433,241.344 822.001,236.728 822.57,239.234 823.138,238.791 823.706,239.322 824.275,239.831 824.843,241.284 825.411,241.604 825.98,242.049 826.548,244.535 827.116,239.514 827.685,239.995 828.253,239.306 828.821,239.655 829.39,241.062 829.958,239.268 830.526,239.82 831.095,240.176 831.663,238.383 832.232,236.865 832.8,236.367 833.368,235.872 833.937,234.472 834.505,235.273 835.073,233.981 835.642,234.815 836.21,235.363 836.778,234.857 837.347,235.387 837.915,233.995 838.483,235.73 839.052,235.278 839.62,232.886 840.188,232.637 840.757,231.608 841.325,230.396 841.893,231.277 842.462,231.121 843.03,231.862 843.598,230.6 844.167,232.69 844.735,230.268 845.304,229.28 845.872,229.324 846.44,229.434 847.009,231.499 847.577,230.403 848.145,231.414 848.714,231.437 849.282,232.272 849.85,232.009 850.419,231.619 850.987,231.45 851.555,232.938 852.124,233.426 852.692,234.079 853.26,233.754 853.829,234.474 854.397,233.07 854.965,231.474 855.534,230.965 856.102,232.872 856.67,231.551 857.239,232.248 857.807,232.917 858.375,232.655 858.944,233.412 859.512,231.91 860.081,228.436 860.649,228.597 861.217,225.636 861.786,224.805 862.354,224.153 862.922,223.346 863.491,223.83 864.059,222.291 864.627,223.895 865.196,223.302 865.764,222.769 866.332,224.12 866.901,225.458 867.469,224.656 868.037,223.959 868.606,225.441 869.174,226.906 869.742,228.323 870.311,228.303 870.879,227.577 871.447,229.821 872.016,230.958 872.584,228.962 873.152,226.932 873.721,227.158 874.289,229.425 874.858,229.577 875.426,228.62 875.994,228.76 876.563,230.198 877.131,229.249 877.699,230.439 878.268,231.653 878.836,230.635 879.404,229.578 879.973,229.399 880.541,225.44 881.109,225.807 881.678,229.198 882.246,227.196 882.814,225.308 883.383,225.691 883.951,226.259 884.519,227.8 885.088,226.922 885.656,225.223 886.224,225.81 886.793,225.21 887.361,228.802 887.93,228.996 888.498,230.162 889.066,231.271 889.635,232.262 890.203,233.27 890.771,234.373 891.34,236.226 891.908,236.075 892.476,236.924 893.045,237.568 893.613,236.07 894.181,237.957 894.75,236.651 895.318,236.336 895.886,235.898 896.455,234.692 897.023,235.55 897.591,236.313 898.16,235.748 898.728,235.291 899.296,234.101 899.865,236.137 900.433,235.598 901.001,235.143 901.57,234.837 902.138,233.511 902.707,231.184 903.275,229.96 903.843,228.977 904.412,227.007 904.98,227.376 905.548,228.533 906.117,229.718 906.685,230.878 907.253,230.835 907.822,230.81 908.39,229.708 908.958,227.605 909.527,228.022 910.095,230.38 910.663,231.617 911.232,231.546 911.8,233.552 912.368,234.405 912.937,234.117 913.505,236.003 914.073,234.713 914.642,234.277 915.21,233.734 915.779,233.444 916.347,232.156 916.915,232.014 917.484,233.881 918.052,232.573 918.62,232.324 919.189,232.046 919.757,229.649 920.325,229.819 920.894,228.868 921.462,229.191 922.03,228.422 922.599,229.437 923.167,230.505 923.735,233.47 924.304,234.124 924.872,232.964 925.44,230.788 926.009,230.872 926.577,230.931 927.145,229.87 927.714,229.751 928.282,226.719 928.85,229.01 929.419,230.201 929.987,228.876 930.556,229.907 931.124,232.128 931.692,230.917 932.261,229.856 932.829,227.824 933.397,227.926 933.966,227.974 934.534,231.119 935.102,229.968 935.671,229.054 936.239,231.06 936.807,230.023 937.376,228.938 937.944,227.926 938.512,224.904 939.081,226.235 939.649,227.443 940.217,228.715 940.786,228.817 941.354,229.116 941.922,230.222 942.491,229.186 943.059,229.343 943.627,229.46 944.196,229.546 944.764,229.716 945.333,229.467 945.901,229.616 946.469,230.951 947.038,229.026 947.606,227.083 948.174,227.521 948.743,227.619 949.311,225.923 949.879,228.379 950.448,226.696 951.016,230.189 951.584,228.403 952.153,227.94 952.721,225.038 953.289,226.729 953.858,225.061 954.426,225.71 954.994,226.359 955.563,226.632 956.131,227.891 956.699,228.08 957.268,227.332 957.836,230.662 958.405,230.68 958.973,231.95 959.541,234.017 960.11,232.876 960.678,230.004 961.246,231.128 961.815,231.179 962.383,231.257 962.951,230.329 963.52,231.681 964.088,230.638 964.656,231.685 965.225,232.43 965.793,232.385 966.361,232.423 966.93,232.331 967.498,232.329 968.066,231.157 968.635,230.104 969.203,229.963 969.771,230.963 970.34,232.148 970.908,232.939 971.476,233.899 972.045,233.776 972.613,234.823 973.182,234.544 973.75,232.219 974.318,232.167 974.887,233.162 975.455,234.126 976.023,233.841 976.592,231.291 977.16,230.354 977.728,230.342 978.297,229.532 978.865,230.443 979.433,229.249 980.002,231.637 980.57,233.68 981.138,235.644 981.707,237.439 982.275,235.951 982.843,235.433 983.412,236.108 983.98,235.687 984.548,234.356 985.117,234.075 985.685,233.786 986.253,233.391 986.822,233.155 987.39,229.691 987.959,231.962 988.527,231.93 989.095,231.879 989.664,231.95 990.232,233.03 990.8,232.838 991.369,231.531 991.937,231.435 992.505,229.458 993.074,232.659 993.642,232.155 994.21,233.107 994.779,232.613 995.347,232.632 995.915,231.527 996.484,232.324 997.052,232.252 997.62,231.904 998.189,232.856 998.757,231.55 999.325,231.512 999.894,231.339 1000.46,233.368 1001.03,233.138 1001.6,231.812 1002.17,229.43 1002.74,226.413 1003.3,227.741 1003.87,226.828 1004.44,227.038 1005.01,228.098 1005.58,226.328 1006.15,225.466 1006.71,225.795 1007.28,225.091 1007.85,226.547 1008.42,225.854 1008.99,228.316 1009.56,227.478 1010.12,221.877 1010.69,221.749 1011.26,223.485 1011.83,224.156 1012.4,225.604 1012.97,229.126 1013.53,229.226 1014.1,231.387 1014.67,231.791 1015.24,231.814 1015.81,231.806 1016.38,235.703 1016.94,235.398 1017.51,235.221 1018.08,235.938 1018.65,235.66 1019.22,234.943 1019.79,234.696 1020.35,235.301 1020.92,234.944 1021.49,233.657 1022.06,231.186 1022.63,231.217 1023.2,231.109 1023.76,230.364 1024.33,230.538 1024.9,230.861 1025.47,231.632 1026.04,231.585 1026.61,228.321 1027.17,229.275 1027.74,230.445 1028.31,230.365 1028.88,228.328 1029.45,229.544 1030.02,228.52 1030.58,226.536 1031.15,224.926 1031.72,226.5 1032.29,227.996 1032.86,229.001 1033.43,229.967 1033.99,230.092 1034.56,230.1 1035.13,229.224 1035.7,230.527 1036.27,230.725 1036.84,231.743 1037.4,231.706 1037.97,229.77 1038.54,230.775 1039.11,230.688 1039.68,230.469 1040.25,231.451 1040.81,230.64 1041.38,231.668 1041.95,230.602 1042.52,231.662 1043.09,230.53 1043.66,231.524 1044.22,231.518 1044.79,230.425 1045.36,229.429 1045.93,228.597 1046.5,228.789 1047.07,225.939 1047.63,226.262 1048.2,226.748 1048.77,227.088 1049.34,229.474 1049.91,230.784 1050.48,231.888 1051.05,233.993 1051.61,233.695 1052.18,233.812 1052.75,234.576 1053.32,233.325 1053.89,235.064 1054.46,234.898 1055.02,234.758 1055.59,230.247 1056.16,230.398 1056.73,230.312 1057.3,231.12 1057.87,230.099 1058.43,230.437 1059,231.572 1059.57,230.589 1060.14,230.598 1060.71,230.739 1061.28,228.631 1061.84,226.752 1062.41,227.295 1062.98,229.34 1063.55,230.503 1064.12,231.701 1064.69,230.768 1065.25,229.883 1065.82,228.956 1066.39,231.229 1066.96,230.156 1067.53,230.119 1068.1,230.128 1068.66,229.461 1069.23,229.514 1069.8,228.691 1070.37,230.171 1070.94,230.479 1071.51,230.341 1072.07,231.468 1072.64,231.541 1073.21,231.483 1073.78,231.396 1074.35,231.714 1074.92,231.706 1075.48,232.643 1076.05,232.649 1076.62,231.544 1077.19,232.368 1077.76,232.409 1078.33,235.431 1078.89,234.118 1079.46,234.987 1080.03,234.705 1080.6,232.446 1081.17,233.522 1081.74,232.274 1082.3,232.087 1082.87,231.828 1083.44,228.647 1084.01,228.924 1084.58,233.002 1085.15,233.973 1085.71,231.636 1086.28,229.35 1086.85,229.503 1087.42,230.811 1087.99,230.777 1088.56,229.593 1089.12,228.642 1089.69,227.664 1090.26,226.801 1090.83,227 1091.4,230.426 1091.97,229.229 1092.53,229.439 1093.1,228.587 1093.67,228.561 1094.24,230.722 1094.81,230.688 1095.38,230.715 1095.94,232.754 1096.51,232.68 1097.08,231.492 1097.65,229.35 1098.22,230.336 1098.79,228.209 1099.35,228.343 1099.92,227.578 1100.49,230.703 1101.06,231.901 1101.63,235.169 1102.2,233.766 1102.76,234.804 1103.33,235.507 1103.9,232.953 1104.47,232.981 1105.04,233.051 1105.61,232.982 1106.17,230.868 1106.74,229.846 1107.31,228.933 1107.88,229.006 1108.45,228.444 1109.02,228.685 1109.58,228.948 1110.15,227.18 1110.72,226.391 1111.29,225.93 1111.86,225.167 1112.43,224.555 1112.99,223.08 1113.56,225.563 1114.13,227.003 1114.7,227.222 1115.27,229.745 1115.84,229.785 1116.4,229.792 1116.97,232.039 1117.54,231.971 1118.11,229.014 1118.68,230.061 1119.25,230.252 1119.81,230.492 1120.38,232.721 1120.95,230.778 1121.52,231.975 1122.09,231.903 1122.66,235.009 1123.23,235.665 1123.79,236.456 1124.36,236.224 1124.93,234.055 1125.5,233.869 1126.07,234.839 1126.64,234.67 1127.2,233.174 1127.77,232.99 1128.34,233.952 1128.91,232.54 1129.48,230.323 1130.05,229.316 1130.61,229.38 1131.18,228.495 1131.75,227.692 1132.32,227.068 1132.89,228.385 1133.46,231.819 1134.02,229.6 1134.59,227.589 1135.16,228.046 1135.73,228.187 1136.3,229.487 1136.87,227.599 1137.43,230.044 1138,232.194 1138.57,231.094 1139.14,231.01 1139.71,233.054 1140.28,230.933 1140.84,235.126 1141.41,236.801 1141.98,235.163 1142.55,233.662 1143.12,232.278 1143.69,233.182 1144.25,232.983 1144.82,233.863 1145.39,234.45 1145.96,234.959 1146.53,234.533 1147.1,234.152 1147.66,233.92 1148.23,231.548 1148.8,231.485 1149.37,233.441 1149.94,233.272 1150.51,234.045 1151.07,233.523 1151.64,232.178 1152.21,231.201 1152.78,226.82 1153.35,226.978 1153.92,229.309 1154.48,229.092 1155.05,227.937 1155.62,227.083 1156.19,230.298 1156.76,230.233 1157.33,230.154 1157.89,230.101 1158.46,231.078 1159.03,230.084 1159.6,231.031 1160.17,232.999 1160.74,230.943 1161.3,229.847 1161.87,231.86 1162.44,232.502 1163.01,232.229 1163.58,232.016 1164.15,229.85 1164.71,227.861 1165.28,228.138 1165.85,228.331 1166.42,228.469 1166.99,228.567 1167.56,229.831 1168.12,227.944 1168.69,229.362 1169.26,228.62 1169.83,229.925 1170.4,229.917 1170.97,229.092 1171.53,230.066 1172.1,231.173 1172.67,230.296 1173.24,229.142 1173.81,229.19 1174.38,229.17 1174.94,230.325 1175.51,230.587 1176.08,228.73 1176.65,229.841 1177.22,229.854 1177.79,231.158 1178.35,231.139 1178.92,229.242 1179.49,228.424 1180.06,229.501 1180.63,230.897 1181.2,232.004 1181.76,232.884 1182.33,232.721 1182.9,233.69 1183.47,233.319 1184.04,231.855 1184.61,231.498 1185.17,230.531 1185.74,229.522 1186.31,228.5 1186.88,230.771 1187.45,233.894 1188.02,232.558 1188.58,232.445 1189.15,232.167 1189.72,228.845 1190.29,231.091 1190.86,229.146 1191.43,230.443 1192,229.383 1192.56,229.703 1193.13,230.856 1193.7,231.94 1194.27,231.93 1194.84,233.659 1195.41,233.417 1195.97,235.266 1196.54,234.9 1197.11,233.361 1197.68,234.058 1198.25,235.01 1198.82,235.339 1199.38,235.947 1199.95,234.636 1200.52,235.418 1201.09,236.042 1201.66,234.79 1202.23,234.273 1202.79,234.901 1203.36,233.666 1203.93,232.542 1204.5,231.863 1205.07,230.569 1205.64,230.441 1206.2,232.163 1206.77,233.89 1207.34,232.375 1207.91,231.245 1208.48,230.097 1209.05,230.03 1209.61,230.94 1210.18,229.929 1210.75,229.86 1211.32,230.786 1211.89,230.761 1212.46,229.832 1213.02,232.116 1213.59,233.983 1214.16,235.74 1214.73,235.3 1215.3,232.73 1215.87,232.481 1216.43,232.27 1217,231.091 1217.57,231.779 1218.14,232.557 1218.71,233.14 1219.28,233.002 1219.84,230.77 1220.41,230.316 1220.98,230.309 1221.55,228.292 1222.12,230.492 1222.69,230.275 1223.25,232.224 1223.82,229.72 1224.39,228.508 1224.96,225.183 1225.53,227.534 1226.1,227.629 1226.66,226.567 1227.23,226.893 1227.8,227.185 1228.37,227.196 1228.94,228.197 1229.51,229.196 1230.07,229.24 1230.64,228.276 1231.21,228.505 1231.78,227.497 1232.35,225.441 1232.92,224.681 1233.48,224.857 1234.05,224.197 1234.62,224.384 1235.19,222.812 1235.76,225.362 1236.33,226.571 1236.89,224.82 1237.46,222.009 1238.03,225.784 1238.6,228.483 1239.17,228.606 1239.74,229.75 1240.3,229.478 1240.87,230.742 1241.44,230.765 1242.01,231.546 1242.58,232.365 1243.15,233.288 1243.71,233.322 1244.28,234.006 1244.85,232.775 1245.42,231.747 1245.99,229.411 1246.56,230.346 1247.12,227.38 1247.69,228.681 1248.26,227.837 1248.83,226.027 1249.4,225.478 1249.97,225.94 1250.53,228.341 1251.1,227.719 1251.67,228.82 1252.24,230.652 1252.81,231.693 1253.38,229.572 1253.94,229.84 1254.51,229.844 1255.08,231.789 1255.65,230.53 1256.22,228.566 1256.79,230.019 1257.35,231.136 1257.92,230.078 1258.49,231.122 1259.06,231.075 1259.63,232.107 1260.2,232.285 1260.76,230.061 1261.33,229.21 1261.9,232.386 1262.47,231.024 1263.04,231.082 1263.61,229.764 1264.18,229.855 1264.74,229.667 1265.31,229.094 1265.88,226.365 1266.45,227.5 1267.02,227.859 1267.59,226.786 1268.15,228.394 1268.72,229.653 1269.29,229.945 1269.86,230.1 1270.43,230.123 1271,230.399 1271.56,231.468 1272.13,229.248 1272.7,232.299 1273.27,229.972 1273.84,233.021 1274.41,231.866 1274.97,230.899 1275.54,228.959 1276.11,228.169 1276.68,228.501 1277.25,226.553 1277.82,227.056 1278.38,230.543 1278.95,232.504 1279.52,234.437 1280.09,234.152 1280.66,233.951 1281.23,232.777 1281.79,232.519 1282.36,230.514 1282.93,230.77 1283.5,229.854 1284.07,228.896 1284.64,229.23 1285.2,227.052 1285.77,228.975 1286.34,230.833 1286.91,230.818 1287.48,230.928 1288.05,228.975 1288.61,228.283 1289.18,229.748 1289.75,228.763 1290.32,227.958 1290.89,226.177 1291.46,226.594 1292.02,226.915 1292.59,227.388 1293.16,229.95 1293.73,231.14 1294.3,230.445 1294.87,230.539 1295.43,229.615 1296,230.125 1296.57,229.922 1297.14,231.018 1297.71,232.067 1298.28,230.98 1298.84,229.849 1299.41,229.141 1299.98,230.341 1300.55,231.34 1301.12,232.334 1301.69,234.375 1302.25,235.315 1302.82,235.165 1303.39,232.678 1303.96,232.401 1304.53,229.176 1305.1,229.388 1305.66,229.457 1306.23,231.522 1306.8,232.739 1307.37,235.801 1307.94,235.409 1308.51,234.128 1309.07,235.12 1309.64,232.669 1310.21,232.533 1310.78,233.435 1311.35,233.229 1311.92,233.081 1312.48,234.187 1313.05,233.027 1313.62,233.857 1314.19,233.697 1314.76,233.432 1315.33,233.152 1315.89,232.007 1316.46,232.826 1317.03,231.672 1317.6,229.684 1318.17,229.629 1318.74,228.515 1319.3,228.343 1319.87,228.423 1320.44,228.593 1321.01,228.86 1321.58,227.979 1322.15,227.071 1322.71,227.396 1323.28,228.612 1323.85,230.714 1324.42,230.824 1324.99,229.893 1325.56,226.792 1326.12,225.191 1326.69,228.587 1327.26,227.74 1327.83,228.967 1328.4,229.213 1328.97,230.501 1329.53,231.722 1330.1,233.607 1330.67,235.458 1331.24,238.065 1331.81,237.542 1332.38,236.872 1332.94,236.328 1333.51,234.759 1334.08,235.433 1334.65,234.154 1335.22,235.152 1335.79,234.646 1336.36,235.343 1336.92,236.964 1337.49,236.57 1338.06,236.059 1338.63,235.596 1339.2,234.333 1339.77,234.007 1340.33,233.81 1340.9,236.551 1341.47,235.023 1342.04,234.612 1342.61,235.174 1343.18,232.783 1343.74,232.775 1344.31,232.393 1344.88,231.102 1345.45,229.946 1346.02,229.756 1346.59,227.776 1347.15,227.979 1347.72,228.075 1348.29,228.24 1348.86,228.446 1349.43,228.446 1350,229.513 1350.56,229.528 1351.13,231.505 1351.7,229.293 1352.27,228.527 1352.84,228.861 1353.41,228.907 1353.97,228.966 1354.54,227.024 1355.11,225.217 1355.68,227.629 1356.25,229.939 1356.82,232.079 1357.38,230.022 1357.95,230.06 1358.52,229.04 1359.09,227.126 1359.66,227.49 1360.23,225.616 1360.79,225.932 1361.36,225.216 1361.93,225.542 1362.5,226.805 1363.07,229.059 1363.64,231.113 1364.2,230.295 1364.77,229.4 1365.34,228.456 1365.91,227.5 1366.48,229.564 1367.05,227.609 1367.61,227.751 1368.18,227.979 1368.75,229.448 1369.32,228.326 1369.89,228.525 1370.46,227.653 1371.02,228.863 1371.59,228.952 1372.16,229.061 1372.73,228.273 1373.3,226.486 1373.87,227.704 1374.43,230.268 1375,232.218 1375.57,231.021 1376.14,230.937 1376.71,230.987 1377.28,229.953 1377.84,229.923 1378.41,230.719 1378.98,227.607 1379.55,226.81 1380.12,229.135 1380.69,229.047 1381.25,228.108 1381.82,230.34 1382.39,230.76 1382.96,227.674 1383.53,228.253 1384.1,229.422 1384.66,229.574 1385.23,229.45 1385.8,232.873 1386.37,234.716 1386.94,235.308 1387.51,234.19 1388.07,235.105 1388.64,234.698 1389.21,234.411 1389.78,232.18 1390.35,230.907 1390.92,231.008 1391.48,230.761 1392.05,231.936 1392.62,230.703 1393.19,231.646 1393.76,232.573 1394.33,233.406 1394.89,234.033 1395.46,235.816 1396.03,235.302 1396.6,236.87 1397.17,234.286 1397.74,233.934 1398.3,232.56 1398.87,230.231 1399.44,229.101 1400.01,228.263 1400.58,228.483 1401.15,230.594 1401.71,232.604 1402.28,233.561 1402.85,235.319 1403.42,233.984 1403.99,232.661 1404.56,231.591 1405.13,229.344 1405.69,229.311 1406.26,231.33 1406.83,230.325 1407.4,233.334 1407.97,234.193 1408.54,234.726 1409.1,234.294 1409.67,233.892 1410.24,235.499 1410.81,236.053 1411.38,233.64 1411.95,233.179 1412.51,232.119 1413.08,229.927 1413.65,231.875 1414.22,231.741 1414.79,230.36 1415.36,228.215 1415.92,229.368 1416.49,227.231 1417.06,226.386 1417.63,228.671 1418.2,227.603 1418.77,225.853 1419.33,225.963 1419.9,224.487 1420.47,221.944 1421.04,224.52 1421.61,226.081 1422.18,226.275 1422.74,224.668 1423.31,223.949 1423.88,225.502 1424.45,224.788 1425.02,226.226 1425.59,226.58 1426.15,226.954 1426.72,229.184 1427.29,229.206 1427.86,229.245 1428.43,228.356 1429,227.468 1429.56,227.719 1430.13,228.1 1430.7,228.343 1431.27,227.464 1431.84,226.738 1432.41,227.092 1432.97,225.512 1433.54,226.899 1434.11,228.423 1434.68,227.714 1435.25,227.993 1435.82,227.324 1436.38,227.525 1436.95,229.841 1437.52,229.784 1438.09,230.871 1438.66,231.89 1439.23,231.767 1439.79,233.69 1440.36,233.588 1440.93,232.428 1441.5,233.282 1442.07,233.094 1442.64,232.935 1443.2,231.592 1443.77,230.296 1444.34,231.119 1444.91,227.898 1445.48,229.202 1446.05,229.38 1446.61,230.564 1447.18,230.552 1447.75,230.563 1448.32,231.493 1448.89,231.343 1449.46,232.264 1450.02,232.082 1450.59,229.08 1451.16,229.546 1451.73,230.583 1452.3,230.832 1452.87,229.857 1453.43,234.129 1454,237.11 1454.57,237.851 1455.14,235.236 1455.71,236.042 1456.28,234.563 1456.84,235.217 1457.41,233.804 1457.98,233.7 1458.55,232.275 1459.12,230.362 1459.69,230.307 1460.25,230.373 1460.82,231.358 1461.39,230.297 1461.96,229.235 1462.53,231.491 1463.1,230.225 1463.66,230.123 1464.23,229.064 1464.8,227.936 1465.37,229.044 1465.94,230.067 1466.51,231.185 1467.07,230.205 1467.64,230.179 1468.21,225.203 1468.78,226.629 1469.35,228.104 1469.92,229.13 1470.48,231.088 1471.05,233.184 1471.62,232.884 1472.19,232.718 1472.76,233.43 1473.33,233.105 1473.89,234.001 1474.46,233.758 1475.03,230.293 1475.6,231.356 1476.17,229.138 1476.74,229.168 1477.31,229.155 1477.87,229.411 1478.44,230.354 1479.01,231.265 1479.58,231.469 1480.15,231.423 1480.72,230.45 1481.28,231.613 1481.85,230.447 1482.42,231.341 1482.99,232.36 1483.56,233.011 1484.13,233.873 1484.69,232.631 1485.26,234.632 1485.83,236.335 1486.4,236.024 1486.97,236.615 1487.54,235.975 1488.1,234.672 1488.67,234.45 1489.24,234.99 1489.81,236.517 1490.38,237.203 1490.95,234.577 1491.51,234.295 1492.08,233.023 1492.65,230.83 1493.22,230.861 1493.79,231.584 1494.36,231.342 1494.92,230.185 1495.49,228.955 1496.06,227.71 1496.63,226.931 1497.2,227.053 1497.77,227.191 1498.33,229.39 1498.9,229.402 1499.47,228.543 1500.04,227.796 1500.61,229.912 1501.18,226.751 1501.74,227.077 1502.31,227.312 1502.88,228.535 1503.45,228.773 1504.02,229.021 1504.59,230.023 1505.15,230.034 1505.72,232.043 1506.29,231.899 1506.86,231.865 1507.43,232.757 1508,233.504 1508.56,230.159 1509.13,229.386 1509.7,226.238 1510.27,226.383 1510.84,226.753 1511.41,227.085 1511.97,228.159 1512.54,227.397 1513.11,227.699 1513.68,228.942 1514.25,227.075 1514.82,228.185 1515.38,226.473 1515.95,227.105 1516.52,226.249 1517.09,225.738 1517.66,225.18 1518.23,224.459 1518.79,225.031 1519.36,225.202 1519.93,225.606 1520.5,229.179 1521.07,228.319 1521.64,230.573 1522.2,230.534 1522.77,229.795 1523.34,229.895 1523.91,229.216 1524.48,231.52 1525.05,231.464 1525.61,231.179 1526.18,230.025 1526.75,230.131 1527.32,233.228 1527.89,234.256 1528.46,235.129 1529.02,235.917 1529.59,236.536 1530.16,237.169 1530.73,235.715 1531.3,232.292 1531.87,231.988 1532.43,229.935 1533,230.83 1533.57,229.743 1534.14,227.931 1534.71,226.227 1535.28,228.478 1535.84,229.612 1536.41,231.734 1536.98,232.835 1537.55,234.472 1538.12,235.253 1538.69,234.802 1539.25,233.669 1539.82,234.427 1540.39,235.12 1540.96,237.093 1541.53,235.495 1542.1,234.16 1542.66,233.907 1543.23,234.636 1543.8,233.436 1544.37,233.104 1544.94,232.733 1545.51,232.528 1546.08,232.309 1546.64,232.982 1547.21,230.543 1547.78,228.678 1548.35,227.706 1548.92,228.973 1549.49,229.174 1550.05,229.075 1550.62,228.106 1551.19,230.518 1551.76,231.443 1552.33,234.341 1552.9,233.046 1553.46,232.634 1554.03,232.391 1554.6,232.094 1555.17,231.983 1555.74,229.882 1556.31,228.917 1556.87,227.023 1557.44,226.245 1558.01,225.228 1558.58,224.313 1559.15,223.569 1559.72,224.026 1560.28,224.473 1560.85,223.896 1561.42,223.52 1561.99,222.885 1562.56,223.662 1563.13,221.956 1563.69,221.511 1564.26,224.275 1564.83,229.836 1565.4,227.808 1565.97,225.106 1566.54,227.668 1567.1,230.076 1567.67,229.092 1568.24,228.427 1568.81,228.56 1569.38,228.667 1569.95,227.732 1570.51,227.822 1571.08,231.213 1571.65,232.228 1572.22,232.066 1572.79,232.192 1573.36,230.869 1573.92,229.708 1574.49,230.751 1575.06,228.803 1575.63,230.966 1576.2,230.297 1576.77,230.22 1577.33,231.317 1577.9,229.358 1578.47,228.668 1579.04,228.751 1579.61,227.984 1580.18,225.115 1580.74,224.729 1581.31,224.266 1581.88,224.935 1582.45,227.65 1583.02,226.948 1583.59,227.033 1584.15,228.495 1584.72,228.789 1585.29,231.11 1585.86,233.345 1586.43,235.346 1587,238.235 1587.56,236.685 1588.13,238.321 1588.7,239 1589.27,236.38 1589.84,236.004 1590.41,233.753 1590.97,232.566 1591.54,234.597 1592.11,233.231 1592.68,232.879 1593.25,232.796 1593.82,233.715 1594.38,234.805 1594.95,233.241 1595.52,232.249 1596.09,232.107 1596.66,234.169 1597.23,233.915 1597.79,232.937 1598.36,233.905 1598.93,233.895 1599.5,234.61 1600.07,235.393 1600.64,231.832 1601.2,231.778 1601.77,229.728 1602.34,227.826 1602.91,228.089 1603.48,228.226 1604.05,228.377 1604.61,225.963 1605.18,226.488 1605.75,227.946 1606.32,226.071 1606.89,228.524 1607.46,230.809 1608.02,230.95 1608.59,230.193 1609.16,232.28 1609.73,231.111 1610.3,230.985 1610.87,231.031 1611.43,231.088 1612,231.187 1612.57,232.205 1613.14,233.106 1613.71,231.766 1614.28,231.909 1614.84,233.906 1615.41,234.909 1615.98,235.352 1616.55,232.902 1617.12,233.972 1617.69,232.668 1618.26,231.446 1618.82,229.499 1619.39,229.581 1619.96,229.797 1620.53,230.058 1621.1,230.152 1621.67,230.153 1622.23,231.244 1622.8,231.281 1623.37,230.373 1623.94,231.459 1624.51,231.146 1625.08,230.973 1625.64,233.011 1626.21,231.846 1626.78,231.646 1627.35,231.539 1627.92,233.397 1628.49,233.099 1629.05,234.053 1629.62,233.636 1630.19,232.321 1630.76,236.473 1631.33,235.918 1631.9,232.785 1632.46,232.414 1633.03,234.287 1633.6,233.94 1634.17,232.562 1634.74,235.343 1635.31,232.913 1635.87,233.413 1636.44,233.198 1637.01,233.057 1637.58,233.903 1638.15,231.537 1638.72,230.38 1639.28,232.371 1639.85,231.196 1640.42,231.114 1640.99,230.944 1641.56,228.831 1642.13,229.015 1642.69,226.919 1643.26,227.003 1643.83,226.895 1644.4,225.962 1644.97,225.115 1645.54,224.414 1646.1,224.82 1646.67,225.322 1647.24,226.715 1647.81,225.851 1648.38,227.173 1648.95,227.225 1649.51,227.432 1650.08,226.548 1650.65,227.655 1651.22,228.941 1651.79,229.047 1652.36,231.041 1652.92,232.238 1653.49,232.182 1654.06,231.068 1654.63,232.944 1655.2,235.796 1655.77,236.598 1656.33,236.217 1656.9,237.785 1657.47,235.963 1658.04,235.502 1658.61,234.229 1659.18,234.977 1659.74,233.688 1660.31,232.38 1660.88,234.319 1661.45,237.324 1662.02,237.889 1662.59,236.158 1663.15,234.633 1663.72,234.073 1664.29,233.636 1664.86,234.5 1665.43,233.195 1666,232.952 1666.56,230.683 1667.13,229.635 1667.7,229.415 1668.27,230.233 1668.84,229.3 1669.41,230.267 1669.97,229.217 1670.54,228.305 1671.11,229.634 1671.68,231.688 1672.25,231.599 1672.82,232.506 1673.38,232.418 1673.95,232.228 1674.52,231.958 1675.09,230.853 1675.66,232.675 1676.23,233.668 1676.79,229.343 1677.36,229.291 1677.93,229.14 1678.5,228.092 1679.07,228.147 1679.64,229.107 1680.2,228.818 1680.77,228.976 1681.34,228.003 1681.91,231.065 1682.48,232.044 1683.05,233.124 1683.61,229.715 1684.18,227.728 1684.75,228.639 1685.32,226.445 1685.89,226.674 1686.46,227.026 1687.02,228.253 1687.59,226.469 1688.16,225.836 1688.73,227.21 1689.3,228.484 1689.87,228.481 1690.44,227.584 1691,225.661 1691.57,226.084 1692.14,226.534 1692.71,225.719 1693.28,223.796 1693.85,223.231 1694.41,222.836 1694.98,224.287 1695.55,223.503 1696.12,223.996 1696.69,223.236 1697.26,221.538 1697.82,223.339 1698.39,224.509 1698.96,224.77 1699.53,225.414 1700.1,224.881 1700.67,226.333 1701.23,226.8 1701.8,227.128 1702.37,228.578 1702.94,228.586 1703.51,230.047 1704.08,230.133 1704.64,230.419 1705.21,231.893 1705.78,230.976 1706.35,230.844 1706.92,230.152 1707.49,231.271 1708.05,230.486 1708.62,230.318 1709.19,229.229 1709.76,227.221 1710.33,227.497 1710.9,226.739 1711.46,228.272 1712.03,227.55 1712.6,227.988 1713.17,227.12 1713.74,227.251 1714.31,228.894 1714.87,230.095 1715.44,230.26 1716.01,227.057 1716.58,228.497 1717.15,230.796 1717.72,229.9 1718.28,230.167 1718.85,231.341 1719.42,230.319 1719.99,231.637 1720.56,232.844 1721.13,232.851 1721.69,232.485 1722.26,233.726 1722.83,232.552 1723.4,231.689 1723.97,230.803 1724.54,228.805 1725.1,228.155 1725.67,228.41 1726.24,226.559 1726.81,226.975 1727.38,227.355 1727.95,226.832 1728.51,224.162 1729.08,223.577 1729.65,226.288 1730.22,225.716 1730.79,228.309 1731.36,229.738 1731.92,228.929 1732.49,229.433 1733.06,229.732 1733.63,232.09 1734.2,233.14 1734.77,233.763 1735.33,235.556 1735.9,235.182 1736.47,233.851 1737.04,231.703 1737.61,234.725 1738.18,234.327 1738.74,235.161 1739.31,235.81 1739.88,234.606 1740.45,233.57 1741.02,234.418 1741.59,234.266 1742.15,235.049 1742.72,234.601 1743.29,233.614 1743.86,234.526 1744.43,235.538 1745,235.421 1745.56,236.213 1746.13,234.578 1746.7,234.357 1747.27,232.1 1747.84,235.203 1748.41,234.967 1748.97,233.584 1749.54,232.602 1750.11,233.551 1750.68,233.431 1751.25,232.328 1751.82,232.196 1752.38,233.183 1752.95,232.153 1753.52,231.16 1754.09,230.025 1754.66,230.93 1755.23,231.054 1755.79,233.028 1756.36,231.756 1756.93,232.686 1757.5,232.639 1758.07,231.628 1758.64,234.528 1759.21,236.254 1759.77,236.829 1760.34,236.399 1760.91,235.864 1761.48,236.445 1762.05,239.187 1762.62,236.659 1763.18,236.008 1763.75,235.5 1764.32,234.437 1764.89,234.146 1765.46,232.725 1766.03,233.356 1766.59,234.234 1767.16,231.868 1767.73,229.571 1768.3,231.595 1768.87,231.19 1769.44,232.086 1770,230.852 1770.57,232.863 1771.14,231.772 1771.71,230.49 1772.28,229.386 1772.85,231.675 1773.41,231.48 1773.98,234.354 1774.55,233.976 1775.12,234.787 1775.69,234.326 1776.26,231.984 1776.82,232.774 1777.39,233.772 1777.96,231.433 1778.53,231.298 1779.1,231.108 1779.67,232.156 1780.23,231.79 1780.8,232.565 1781.37,232.167 1781.94,232.122 1782.51,233.023 1783.08,232.669 1783.64,233.725 1784.21,232.468 1784.78,232.207 1785.35,232.039 1785.92,230.798 1786.49,227.277 1787.05,226.373 1787.62,225.392 1788.19,225.691 1788.76,223.701 1789.33,223.253 1789.9,224.788 1790.46,226.031 1791.03,225.072 1791.6,224.257 1792.17,221.603 1792.74,223.237 1793.31,222.76 1793.87,223.501 1794.44,219.895 1795.01,221.77 1795.58,222.396 1796.15,222.712 1796.72,222.175 1797.28,222.878 1797.85,222.49 1798.42,223.144 1798.99,222.725 1799.56,222.434 1800.13,223.127 1800.69,226.852 1801.26,227.403 1801.83,228.673 1802.4,228.84 1802.97,228.052 1803.54,229.425 1804.1,232.594 1804.67,233.453 1805.24,232.028 1805.81,233.105 1806.38,234.133 1806.95,234.09 1807.51,231.856 1808.08,232.693 1808.65,235.78 1809.22,235.641 1809.79,235.155 1810.36,235.771 1810.92,237.346 1811.49,236.864 1812.06,236.371 1812.63,234.972 1813.2,236.693 1813.77,236.072 1814.33,235.601 1814.9,236.308 1815.47,235.768 1816.04,234.404 1816.61,232.11 1817.18,230.915 1817.74,228.888 1818.31,230.1 1818.88,229.993 1819.45,227.778 1820.02,226.11 1820.59,226.304 1821.15,228.278 1821.72,228.191 1822.29,228.259 1822.86,228.222 1823.43,228.339 1824,229.475 1824.56,228.793 1825.13,229.885 1825.7,230.8 1826.27,231.039 1826.84,228.877 1827.41,228.893 1827.97,228.931 1828.54,226.926 1829.11,227.329 1829.68,230.769 1830.25,229.471 1830.82,229.584 1831.39,227.517 1831.95,228.696 1832.52,225.823 1833.09,231.265 1833.66,228.207 1834.23,229.361 1834.8,228.466 1835.36,229.871 1835.93,231.028 1836.5,231.16 1837.07,232.942 1837.64,232.415 1838.21,234.504 1838.77,233.287 1839.34,233.198 1839.91,232.858 1840.48,233.717 1841.05,232.473 1841.62,232.374 1842.18,231.074 1842.75,232.185 1843.32,233.128 1843.89,232.177 1844.46,234.031 1845.03,234.811 1845.59,232.072 1846.16,229.936 1846.73,227.849 1847.3,225.9 1847.87,227.502 1848.44,227.851 1849,229.904 1849.57,228.923 1850.14,227.833 1850.71,226.784 1851.28,227.227 1851.85,227.58 1852.41,227.922 1852.98,229.328 1853.55,229.538 1854.12,229.671 1854.69,230.017 1855.26,228.183 1855.82,229.49 1856.39,229.492 1856.96,228.75 1857.53,227.805 1858.1,228.041 1858.67,227.472 1859.23,229.086 1859.8,226.039 1860.37,228.583 1860.94,230.824 1861.51,231.896 1862.08,230.677 1862.64,232.717 1863.21,233.777 1863.78,235.823 1864.35,235.628 1864.92,235.337 1865.49,234.814 1866.05,234.628 1866.62,236.245 1867.19,234.494 1867.76,232.508 1868.33,231.311 1868.9,231.093 1869.46,230.714 1870.03,230.668 1870.6,230.649 1871.17,229.559 1871.74,230.619 1872.31,230.737 1872.87,231.741 1873.44,231.838 1874.01,232.865 1874.58,233.758 1875.15,233.694 1875.72,233.134 1876.28,233.966 1876.85,234.833 1877.42,233.932 1877.99,233.623 1878.56,236.747 1879.13,235.247 1879.69,229.691 1880.26,228.527 1880.83,227.352 1881.4,228.869 1881.97,231.965 1882.54,231.98 1883.1,233.92 1883.67,233.381 1884.24,235.301 1884.81,234.815 1885.38,236.423 1885.95,233.929 1886.51,235.629 1887.08,234.035 1887.65,231.651 1888.22,231.262 1888.79,231.229 1889.36,232.18 1889.92,227.921 1890.49,226.926 1891.06,232.195 1891.63,232.119 1892.2,232.808 1892.77,233.466 1893.33,233.145 1893.9,231.714 1894.47,230.608 1895.04,231.469 1895.61,230.97 1896.18,230.866 1896.74,231.776 1897.31,231.632 1897.88,232.261 1898.45,232.108 1899.02,228.851 1899.59,228.979 1900.16,229.884 1900.72,230.955 1901.29,231.504 1901.86,231.373 1902.43,231.385 1903,229.227 1903.57,229.173 1904.13,231.331 1904.7,232.116 1905.27,230.79 1905.84,230.78 1906.41,230.767 1906.98,230.817 1907.54,228.622 1908.11,229.733 1908.68,229.849 1909.25,228.792 1909.82,228.824 1910.39,228.979 1910.95,229.045 1911.52,228.206 1912.09,229.272 1912.66,228.949 1913.23,226.989 1913.8,227.192 1914.36,229.366 1914.93,229.288 1915.5,229.413 1916.07,232.58 1916.64,231.44 1917.21,230.118 1917.77,229.14 1918.34,226.968 1918.91,228.413 1919.48,229.576 1920.05,226.483 1920.62,227.673 1921.18,226.643 1921.75,227.014 1922.32,227.168 1922.89,227.43 1923.46,226.66 1924.03,223.908 1924.59,224.404 1925.16,222.898 1925.73,223.258 1926.3,223.85 1926.87,223.344 1927.44,224.862 1928,224.098 1928.57,224.56 1929.14,225.926 1929.71,225.346 1930.28,226.948 1930.85,227.114 1931.41,227.143 1931.98,226.399 1932.55,226.633 1933.12,226.847 1933.69,227.129 1934.26,226.407 1934.82,226.94 1935.39,228.328 1935.96,228.599 1936.53,230.799 1937.1,233.042 1937.67,233.053 1938.23,231.965 1938.8,233.177 1939.37,235.171 1939.94,233.873 1940.51,234.589 1941.08,237.433 1941.64,238.285 1942.21,236.682 1942.78,237.33 1943.35,234.638 1943.92,234.462 1944.49,234.977 1945.05,234.857 1945.62,231.41 1946.19,232.442 1946.76,231.088 1947.33,230.076 1947.9,230.297 1948.46,231.619 1949.03,229.561 1949.6,228.645 1950.17,227.954 1950.74,228.107 1951.31,229.207 1951.87,228.39 1952.44,228.576 1953.01,228.921 1953.58,231.218 1954.15,230.212 1954.72,233.271 1955.28,235.191 1955.85,235.079 1956.42,233.979 1956.99,233.886 1957.56,233.501 1958.13,232.419 1958.69,232.161 1959.26,231.004 1959.83,230.303 1960.4,230.378 1960.97,231.376 1961.54,229.317 1962.1,226.387 1962.67,223.597 1963.24,226.281 1963.81,226.73 1964.38,227.943 1964.95,228.483 1965.51,230.783 1966.08,227.901 1966.65,227.171 1967.22,227.472 1967.79,227.806 1968.36,231.273 1968.92,231.215 1969.49,231.296 1970.06,232.523 1970.63,235.347 1971.2,233.875 1971.77,231.567 1972.34,232.431 1972.9,233.292 1973.47,231.996 1974.04,232.962 1974.61,233.829 1975.18,232.447 1975.75,233.347 1976.31,236.175 1976.88,235.981 1977.45,236.53 1978.02,233.901 1978.59,234.518 1979.16,233.074 1979.72,232.925 1980.29,232.794 1980.86,234.422 1981.43,233.943 1982,234.712 1982.57,235.504 1983.13,234.95 1983.7,233.564 1984.27,231.17 1984.84,231.065 1985.41,231.192 1985.98,228.984 1986.54,231.297 1987.11,229.271 1987.68,228.36 1988.25,225.426 1988.82,226.79 1989.39,229.005 1989.95,228.285 1990.52,229.394 1991.09,229.4 1991.66,230.744 1992.23,229.396 1992.8,229.588 1993.36,229.44 1993.93,226.688 1994.5,225.099 1995.07,227.343 1995.64,231.503 1996.21,232.352 1996.77,232.105 1997.34,234.892 1997.91,234.485 1998.48,236.227 1999.05,235.847 1999.62,235.416 2000.18,233.999 2000.75,234.75 2001.32,235.697 2001.89,233.093 2002.46,234.077 2003.03,233.644 2003.59,233.381 2004.16,236.238 2004.73,235.613 2005.3,235.153 2005.87,234.65 2006.44,233.151 2007,232.79 2007.57,232.712 2008.14,233.383 2008.71,233.145 2009.28,233.617 2009.85,232.1 2010.41,230.634 2010.98,230.362 2011.55,230.009 2012.12,230.006 2012.69,230.922 2013.26,229.548 2013.82,228.24 2014.39,226.124 2014.96,227.177 2015.53,227.513 2016.1,227.49 2016.67,226.485 2017.23,227.608 2017.8,227.568 2018.37,228.725 2018.94,228.697 2019.51,229.632 2020.08,230.875 2020.64,231.904 2021.21,231.873 2021.78,229.572 2022.35,229.563 2022.92,229.722 2023.49,231.71 2024.05,231.349 2024.62,232.417 2025.19,231.289 2025.76,234.018 2026.33,231.559 2026.9,231.514 2027.46,231.242 2028.03,231.079 2028.6,230.996 2029.17,230.854 2029.74,230.726 2030.31,230.64 2030.87,230.638 2031.44,230.543 2032.01,230.402 2032.58,230.272 2033.15,230.113 2033.72,228.063 2034.28,226.068 2034.85,226.187 2035.42,226.489 2035.99,225.773 2036.56,227.033 2037.13,226.072 2037.69,226.346 2038.26,225.673 2038.83,223.846 2039.4,225.585 2039.97,223.729 2040.54,226.314 2041.11,226.253 2041.67,227.531 2042.24,227.937 2042.81,226.019 2043.38,225.181 2043.95,224.446 2044.52,223.754 2045.08,223.028 2045.65,222.512 2046.22,222.114 2046.79,225.022 2047.36,227.591 2047.93,227.887 2048.49,226.109 2049.06,226.262 2049.63,228.514 2050.2,228.714 2050.77,228.731 2051.34,227.847 2051.9,229.057 2052.47,229.286 2053.04,227.319 2053.61,226.521 2054.18,226.976 2054.75,227.363 2055.31,226.45 2055.88,224.828 2056.45,227.281 2057.02,224.46 2057.59,226.128 2058.16,227.843 2058.72,229.188 2059.29,230.552 2059.86,229.601 2060.43,228.757 2061,232.37 2061.57,232.283 2062.13,232.427 2062.7,232.416 2063.27,232.635 2063.84,231.571 2064.41,231.704 2064.98,231.802 2065.54,231.771 2066.11,231.986 2066.68,232.349 2067.25,231.175 2067.82,230.265 2068.39,230.069 2068.95,230.042 2069.52,230.103 2070.09,229.162 2070.66,232.286 2071.23,232.249 2071.8,235.594 2072.36,234.326 2072.93,231.949 2073.5,229.778 2074.07,226.911 2074.64,227.305 2075.21,226.662 2075.77,224.944 2076.34,225.526 2076.91,225.768 2077.48,225.251 2078.05,226.875 2078.62,227.492 2079.18,228.822 2079.75,227.993 2080.32,227.548 2080.89,226.661 2081.46,229.096 2082.03,229.267 2082.59,229.719 2083.16,230.002 2083.73,233.324 2084.3,234.373 2084.87,233.292 2085.44,234.392 2086,233.399 2086.57,232.249 2087.14,232.278 2087.71,233.349 2088.28,233.379 2088.85,233.392 2089.41,234.335 2089.98,234.218 2090.55,233.228 2091.12,233.149 2091.69,235.102 2092.26,233.576 2092.82,233.784 2093.39,235.756 2093.96,236.344 2094.53,236.256 2095.1,235.87 2095.67,236.641 2096.23,239.441 2096.8,239.768 2097.37,236.946 2097.94,239.484 2098.51,240.091 2099.08,239.627 2099.64,237.872 2100.21,237.484 2100.78,238.056 2101.35,238.514 2101.92,237.937 2102.49,237.196 2103.05,237.526 2103.62,236.018 2104.19,236.356 2104.76,235.793 2105.33,235.53 2105.9,234.095 2106.46,234.834 2107.03,232.443 2107.6,230.188 2108.17,230.057 2108.74,228.972 2109.31,229.164 2109.87,228.349 2110.44,227.154 2111.01,226.261 2111.58,225.698 2112.15,226.916 2112.72,226.133 2113.29,225.358 2113.85,224.516 2114.42,225.622 2114.99,224.963 2115.56,226.425 2116.13,225.435 2116.7,223.687 2117.26,223.104 2117.83,224.751 2118.4,224.233 2118.97,224.7 2119.54,224.214 2120.11,223.468 2120.67,223.915 2121.24,223.393 2121.81,223.815 2122.38,223.312 2122.95,224.003 2123.52,226.598 2124.08,225.886 2124.65,226.306 2125.22,227.648 2125.79,228.931 2126.36,230.215 2126.93,231.502 2127.49,231.746 2128.06,232.977 2128.63,232.966 2129.2,233.886 2129.77,232.619 2130.34,231.731 2130.9,230.535 2131.47,230.694 2132.04,230.714 2132.61,232.811 2133.18,232.7 2133.75,232.785 2134.31,232.653 2134.88,232.615 2135.45,232.588 2136.02,229.379 2136.59,230.814 2137.16,230.769 2137.72,229.601 2138.29,228.729 2138.86,228.787 2139.43,230.033 2140,230.034 2140.57,229.328 2141.13,229.591 2141.7,231.652 2142.27,232.635 2142.84,231.593 2143.41,231.66 2143.98,231.93 2144.54,230.841 2145.11,231.967 2145.68,228.741 2146.25,228.965 2146.82,229.984 2147.39,232.131 2147.95,232.068 2148.52,229.898 2149.09,230.254 2149.66,232.279 2150.23,232.295 2150.8,232.228 2151.36,231.161 2151.93,232.265 2152.5,234.201 2153.07,234.097 2153.64,231.791 2154.21,233.713 2154.77,234.426 2155.34,234.374 2155.91,236.277 2156.48,237.032 2157.05,236.457 2157.62,236.042 2158.18,236.836 2158.75,232.498 2159.32,230.553 2159.89,232.684 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.022\n  with uncertainty of ± 0.002002768352945779\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01935 ± (0.00197301, 0.00195835) (MC)\n  95% confidence interval: [-4.02332, -4.01553] (MC)\n  linear error propagation: -4.01939 ± 0.00202675\n  |δ_y| = |0.00131861| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.019345677330586, val_l = 0.003974612066191874, val_u = 0.003818926755986496)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip200\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip201\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip202\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.98 2211.02,1143.98 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,986.796 2211.02,986.796 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,829.612 2211.02,829.612 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,672.428 2211.02,672.428 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,515.244 2211.02,515.244 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,358.06 2211.02,358.06 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,200.876 2211.02,200.876 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.98 365.751,1143.98 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,986.796 365.751,986.796 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,829.612 365.751,829.612 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,672.428 365.751,672.428 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,515.244 365.751,515.244 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,358.06 365.751,358.06 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,200.876 365.751,200.876 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M298.909 1129.78 Q295.298 1129.78 293.469 1133.34 Q291.664 1136.89 291.664 1144.02 Q291.664 1151.12 293.469 1154.69 Q295.298 1158.23 298.909 1158.23 Q302.543 1158.23 304.349 1154.69 Q306.177 1151.12 306.177 1144.02 Q306.177 1136.89 304.349 1133.34 Q302.543 1129.78 298.909 1129.78 M298.909 1126.08 Q304.719 1126.08 307.775 1130.68 Q310.853 1135.27 310.853 1144.02 Q310.853 1152.74 307.775 1157.35 Q304.719 1161.93 298.909 1161.93 Q293.099 1161.93 290.02 1157.35 Q286.964 1152.74 286.964 1144.02 Q286.964 1135.27 290.02 1130.68 Q293.099 1126.08 298.909 1126.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M259.557 1000.14 L267.196 1000.14 L267.196 973.776 L258.886 975.442 L258.886 971.183 L267.15 969.516 L271.826 969.516 L271.826 1000.14 L279.465 1000.14 L279.465 1004.08 L259.557 1004.08 L259.557 1000.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 972.595 Q295.298 972.595 293.469 976.16 Q291.664 979.702 291.664 986.831 Q291.664 993.938 293.469 997.502 Q295.298 1001.04 298.909 1001.04 Q302.543 1001.04 304.349 997.502 Q306.177 993.938 306.177 986.831 Q306.177 979.702 304.349 976.16 Q302.543 972.595 298.909 972.595 M298.909 968.891 Q304.719 968.891 307.775 973.498 Q310.853 978.081 310.853 986.831 Q310.853 995.558 307.775 1000.16 Q304.719 1004.75 298.909 1004.75 Q293.099 1004.75 290.02 1000.16 Q286.964 995.558 286.964 986.831 Q286.964 978.081 290.02 973.498 Q293.099 968.891 298.909 968.891 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M262.775 842.957 L279.094 842.957 L279.094 846.892 L257.15 846.892 L257.15 842.957 Q259.812 840.203 264.395 835.573 Q269.002 830.92 270.182 829.578 Q272.428 827.054 273.307 825.318 Q274.21 823.559 274.21 821.869 Q274.21 819.115 272.266 817.379 Q270.344 815.642 267.242 815.642 Q265.043 815.642 262.59 816.406 Q260.159 817.17 257.381 818.721 L257.381 813.999 Q260.205 812.865 262.659 812.286 Q265.113 811.707 267.15 811.707 Q272.52 811.707 275.715 814.393 Q278.909 817.078 278.909 821.568 Q278.909 823.698 278.099 825.619 Q277.312 827.517 275.205 830.11 Q274.627 830.781 271.525 833.999 Q268.423 837.193 262.775 842.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 815.411 Q295.298 815.411 293.469 818.976 Q291.664 822.517 291.664 829.647 Q291.664 836.753 293.469 840.318 Q295.298 843.86 298.909 843.86 Q302.543 843.86 304.349 840.318 Q306.177 836.753 306.177 829.647 Q306.177 822.517 304.349 818.976 Q302.543 815.411 298.909 815.411 M298.909 811.707 Q304.719 811.707 307.775 816.314 Q310.853 820.897 310.853 829.647 Q310.853 838.374 307.775 842.98 Q304.719 847.564 298.909 847.564 Q293.099 847.564 290.02 842.98 Q286.964 838.374 286.964 829.647 Q286.964 820.897 290.02 816.314 Q293.099 811.707 298.909 811.707 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M272.914 671.074 Q276.27 671.792 278.145 674.06 Q280.043 676.329 280.043 679.662 Q280.043 684.778 276.525 687.579 Q273.006 690.38 266.525 690.38 Q264.349 690.38 262.034 689.94 Q259.742 689.523 257.289 688.667 L257.289 684.153 Q259.233 685.287 261.548 685.866 Q263.863 686.444 266.386 686.444 Q270.784 686.444 273.076 684.708 Q275.39 682.972 275.39 679.662 Q275.39 676.606 273.238 674.894 Q271.108 673.157 267.289 673.157 L263.261 673.157 L263.261 669.315 L267.474 669.315 Q270.923 669.315 272.752 667.949 Q274.58 666.56 274.58 663.968 Q274.58 661.306 272.682 659.894 Q270.807 658.458 267.289 658.458 Q265.367 658.458 263.168 658.875 Q260.969 659.292 258.33 660.171 L258.33 656.005 Q260.992 655.264 263.307 654.894 Q265.645 654.523 267.705 654.523 Q273.029 654.523 276.131 656.954 Q279.233 659.361 279.233 663.482 Q279.233 666.352 277.59 668.343 Q275.946 670.31 272.914 671.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 658.227 Q295.298 658.227 293.469 661.792 Q291.664 665.333 291.664 672.463 Q291.664 679.569 293.469 683.134 Q295.298 686.676 298.909 686.676 Q302.543 686.676 304.349 683.134 Q306.177 679.569 306.177 672.463 Q306.177 665.333 304.349 661.792 Q302.543 658.227 298.909 658.227 M298.909 654.523 Q304.719 654.523 307.775 659.13 Q310.853 663.713 310.853 672.463 Q310.853 681.19 307.775 685.796 Q304.719 690.38 298.909 690.38 Q293.099 690.38 290.02 685.796 Q286.964 681.19 286.964 672.463 Q286.964 663.713 290.02 659.13 Q293.099 654.523 298.909 654.523 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M271.594 502.038 L259.789 520.487 L271.594 520.487 L271.594 502.038 M270.367 497.964 L276.247 497.964 L276.247 520.487 L281.177 520.487 L281.177 524.376 L276.247 524.376 L276.247 532.524 L271.594 532.524 L271.594 524.376 L255.992 524.376 L255.992 519.862 L270.367 497.964 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 501.043 Q295.298 501.043 293.469 504.608 Q291.664 508.149 291.664 515.279 Q291.664 522.385 293.469 525.95 Q295.298 529.492 298.909 529.492 Q302.543 529.492 304.349 525.95 Q306.177 522.385 306.177 515.279 Q306.177 508.149 304.349 504.608 Q302.543 501.043 298.909 501.043 M298.909 497.339 Q304.719 497.339 307.775 501.946 Q310.853 506.529 310.853 515.279 Q310.853 524.006 307.775 528.612 Q304.719 533.195 298.909 533.195 Q293.099 533.195 290.02 528.612 Q286.964 524.006 286.964 515.279 Q286.964 506.529 290.02 501.946 Q293.099 497.339 298.909 497.339 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M258.793 340.78 L277.15 340.78 L277.15 344.715 L263.076 344.715 L263.076 353.187 Q264.094 352.84 265.113 352.678 Q266.131 352.493 267.15 352.493 Q272.937 352.493 276.316 355.664 Q279.696 358.836 279.696 364.252 Q279.696 369.831 276.224 372.933 Q272.752 376.011 266.432 376.011 Q264.256 376.011 261.988 375.641 Q259.742 375.271 257.335 374.53 L257.335 369.831 Q259.418 370.965 261.641 371.521 Q263.863 372.076 266.34 372.076 Q270.344 372.076 272.682 369.97 Q275.02 367.863 275.02 364.252 Q275.02 360.641 272.682 358.535 Q270.344 356.428 266.34 356.428 Q264.465 356.428 262.59 356.845 Q260.738 357.261 258.793 358.141 L258.793 340.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 343.859 Q295.298 343.859 293.469 347.424 Q291.664 350.965 291.664 358.095 Q291.664 365.201 293.469 368.766 Q295.298 372.308 298.909 372.308 Q302.543 372.308 304.349 368.766 Q306.177 365.201 306.177 358.095 Q306.177 350.965 304.349 347.424 Q302.543 343.859 298.909 343.859 M298.909 340.155 Q304.719 340.155 307.775 344.762 Q310.853 349.345 310.853 358.095 Q310.853 366.822 307.775 371.428 Q304.719 376.011 298.909 376.011 Q293.099 376.011 290.02 371.428 Q286.964 366.822 286.964 358.095 Q286.964 349.345 290.02 344.762 Q293.099 340.155 298.909 340.155 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M269.326 199.013 Q266.178 199.013 264.326 201.165 Q262.497 203.318 262.497 207.068 Q262.497 210.795 264.326 212.971 Q266.178 215.124 269.326 215.124 Q272.474 215.124 274.303 212.971 Q276.154 210.795 276.154 207.068 Q276.154 203.318 274.303 201.165 Q272.474 199.013 269.326 199.013 M278.608 184.36 L278.608 188.619 Q276.849 187.786 275.043 187.346 Q273.261 186.906 271.502 186.906 Q266.872 186.906 264.418 190.031 Q261.988 193.156 261.641 199.476 Q263.006 197.462 265.066 196.397 Q267.127 195.309 269.603 195.309 Q274.812 195.309 277.821 198.48 Q280.853 201.628 280.853 207.068 Q280.853 212.392 277.705 215.61 Q274.557 218.827 269.326 218.827 Q263.33 218.827 260.159 214.244 Q256.988 209.638 256.988 200.911 Q256.988 192.716 260.877 187.855 Q264.766 182.971 271.316 182.971 Q273.076 182.971 274.858 183.318 Q276.664 183.665 278.608 184.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 186.675 Q295.298 186.675 293.469 190.239 Q291.664 193.781 291.664 200.911 Q291.664 208.017 293.469 211.582 Q295.298 215.124 298.909 215.124 Q302.543 215.124 304.349 211.582 Q306.177 208.017 306.177 200.911 Q306.177 193.781 304.349 190.239 Q302.543 186.675 298.909 186.675 M298.909 182.971 Q304.719 182.971 307.775 187.577 Q310.853 192.161 310.853 200.911 Q310.853 209.638 307.775 214.244 Q304.719 218.827 298.909 218.827 Q293.099 218.827 290.02 214.244 Q286.964 209.638 286.964 200.911 Q286.964 192.161 290.02 187.577 Q293.099 182.971 298.909 182.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip202)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.16 400.199,921.762 400.786,824.135 401.372,734.692 401.958,652.89 402.545,578.223 403.131,510.224 403.718,448.46 404.304,392.525 404.891,342.042 405.477,296.659 406.063,256.047 406.65,219.895 407.236,265.131 407.823,233.801 408.409,272.509 408.995,305.548 409.582,279.917 410.168,257.609 410.755,286.971 411.341,268.887 411.927,294.611 412.514,280.514 413.1,269.662 413.687,260.839 414.273,255.413 414.86,250.015 415.446,275.163 416.032,298.657 416.619,323.065 417.205,323.41 417.792,324.354 418.378,326.872 418.964,349.025 419.551,370.549 420.137,406.529 420.724,411.25 421.31,415.992 421.896,422.572 422.483,442.628 423.069,449.167 423.656,457.293 424.242,465.961 424.829,475.125 425.415,493.979 426.001,502.735 426.588,512.719 427.174,522.087 427.761,542.003 428.347,551.522 428.933,568.962 429.52,578.612 430.106,595.736 430.693,619.966 431.279,636.386 431.865,658.194 432.452,667.221 433.038,676.459 433.625,691.833 434.211,707.027 434.798,726.34 435.384,735.522 435.97,754.084 436.557,771.433 437.143,792.527 437.73,812.598 438.316,820.477 438.902,828.165 439.489,839.05 440.075,850.239 440.662,861.02 441.248,875.22 441.835,888.699 442.421,898.233 443.007,907.815 443.594,914.205 444.18,924.112 444.767,939.128 445.353,947.584 445.939,962.078 446.526,973.091 447.112,981.263 447.699,991.426 448.285,996.179 448.871,1006.43 449.458,1013.46 450.044,1020.42 450.631,1031.71 451.217,1042.33 451.804,1046.05 452.39,1054.14 452.976,1059.8 453.563,1063.18 454.149,1068.79 454.736,1080.47 455.322,1085.26 455.908,1090.18 456.495,1096.89 457.081,1099.11 457.668,1105.66 458.254,1111.75 458.84,1117.65 459.427,1121.63 460.013,1127.44 460.6,1132.9 461.186,1138.66 461.773,1144.12 462.359,1149.42 462.945,1154.48 463.532,1155.68 464.118,1158.76 464.705,1161.57 465.291,1166.33 465.877,1168.87 466.464,1169.76 467.05,1172.34 467.637,1173.21 468.223,1174.34 468.809,1176.91 469.396,1184.34 469.982,1184.71 470.569,1188.66 471.155,1188.89 471.742,1189.36 472.328,1191.5 472.914,1190.51 473.501,1192.74 474.087,1193.5 474.674,1195.64 475.26,1204.1 475.846,1202.56 476.433,1201.15 477.019,1204.57 477.606,1206.22 478.192,1212.36 478.778,1215.09 479.365,1217.71 479.951,1217.37 480.538,1215.72 481.124,1218.58 481.711,1219.82 482.297,1226.81 482.883,1227.63 483.47,1230.95 484.056,1230.36 484.643,1229.79 485.229,1227.95 485.815,1228.59 486.402,1229.48 486.988,1229.23 487.575,1228.57 488.161,1230.69 488.748,1230.38 489.334,1231.22 489.92,1232.06 490.507,1235.74 491.093,1234.9 491.68,1237.3 492.266,1239.31 492.852,1238.63 493.439,1240.54 494.025,1242.32 494.612,1238.52 495.198,1237.56 495.784,1236.87 496.371,1237.9 496.957,1235.62 497.544,1236.62 498.13,1240.11 498.717,1242.05 499.303,1241.23 499.889,1241.84 500.476,1242.6 501.062,1240.24 501.649,1242.43 502.235,1244.39 502.821,1247.29 503.408,1248.85 503.994,1248.85 504.581,1250.53 505.167,1250.5 505.753,1250.31 506.34,1247.78 506.926,1243.96 507.513,1241.65 508.099,1242.31 508.686,1238.78 509.272,1239.45 509.858,1238.94 510.445,1239.66 511.031,1240.42 511.618,1242.2 512.204,1241.54 512.79,1240.86 513.377,1241.45 513.963,1240.92 514.55,1240.37 515.136,1241.07 515.722,1240.35 516.309,1241.02 516.895,1237.31 517.482,1240.63 518.068,1241.49 518.655,1239.39 519.241,1239.68 519.827,1242.87 520.414,1241.2 521,1240.52 521.587,1241.13 522.173,1240.7 522.759,1240.21 523.346,1242.37 523.932,1242.81 524.519,1240.63 525.105,1242.55 525.691,1240.61 526.278,1238.6 526.864,1235.58 527.451,1235.26 528.037,1233.34 528.624,1233.96 529.21,1232.22 529.796,1234.42 530.383,1234.23 530.969,1233.88 531.556,1234.73 532.142,1234.34 532.728,1235.5 533.315,1234.92 533.901,1234.51 534.488,1235.28 535.074,1235.02 535.661,1234.72 536.247,1235.85 536.833,1235.34 537.42,1237.41 538.006,1238.25 538.593,1241.5 539.179,1240.88 539.765,1241.5 540.352,1243.54 540.938,1242.55 541.525,1242.94 542.111,1243.58 542.697,1238.63 543.284,1238.86 543.87,1241.76 544.457,1240.59 545.043,1243.55 545.63,1242.52 546.216,1241.48 546.802,1240.82 547.389,1241.21 547.975,1241.65 548.562,1243.48 549.148,1245.19 549.734,1244.3 550.321,1244.58 550.907,1243.65 551.494,1240.21 552.08,1236.64 552.666,1233.92 553.253,1232.34 553.839,1232.19 554.426,1229.25 555.012,1229.94 555.599,1229.57 556.185,1229.26 556.771,1230.26 557.358,1229.94 557.944,1228.5 558.531,1228.16 559.117,1227.82 559.703,1227.63 560.29,1229.83 560.876,1230.9 561.463,1230.45 562.049,1231.37 562.635,1229.62 563.222,1230.62 563.808,1230.3 564.395,1228.7 564.981,1228.43 565.568,1226.68 566.154,1226.62 566.74,1227.54 567.327,1227.22 567.913,1232.13 568.5,1231.25 569.086,1228.19 569.672,1229.09 570.259,1228.91 570.845,1226.07 571.432,1227.14 572.018,1226.95 572.605,1229.34 573.191,1230.5 573.777,1228.98 574.364,1227.3 574.95,1228.33 575.537,1229.25 576.123,1229.12 576.709,1228.79 577.296,1228.61 577.882,1228.49 578.469,1227.99 579.055,1229.8 579.641,1229.32 580.228,1229.09 580.814,1228.57 581.401,1230.61 581.987,1231.25 582.574,1230.65 583.16,1232.59 583.746,1230.62 584.333,1231.18 584.919,1231.86 585.506,1230.1 586.092,1230.92 586.678,1228.91 587.265,1231.11 587.851,1228.97 588.438,1228.38 589.024,1227.95 589.61,1230.19 590.197,1231.1 590.783,1234.46 591.37,1232.38 591.956,1231.7 592.543,1233.53 593.129,1231.49 593.715,1232.02 594.302,1231.58 594.888,1228.39 595.475,1227.8 596.061,1225.69 596.647,1226.82 597.234,1226.33 597.82,1224.53 598.407,1224.46 598.993,1224.23 599.579,1223.5 600.166,1222.28 600.752,1224.38 601.339,1225.38 601.925,1224.91 602.512,1224.36 603.098,1225.14 603.684,1224.88 604.271,1224.4 604.857,1224.22 605.444,1225.15 606.03,1223.08 606.616,1220.19 607.203,1220.19 607.789,1222.61 608.376,1221.07 608.962,1222.02 609.548,1221.87 610.135,1221.6 610.721,1219.89 611.308,1218.27 611.894,1220.82 612.481,1220.66 613.067,1224.26 613.653,1223.94 614.24,1222.24 614.826,1221.86 615.413,1220.51 615.999,1219.12 616.585,1217.92 617.172,1216.73 617.758,1215.52 618.345,1215.25 618.931,1217.79 619.518,1217.9 620.104,1220.29 620.69,1222.78 621.277,1220.04 621.863,1220.01 622.45,1221.12 623.036,1219.63 623.622,1219.36 624.209,1219.27 624.795,1220.5 625.382,1222.82 625.968,1222.47 626.554,1222.46 627.141,1223.52 627.727,1220.5 628.314,1221.88 628.9,1221.77 629.487,1221.62 630.073,1221.31 630.659,1218.25 631.246,1218.09 631.832,1218.11 632.419,1218.01 633.005,1220.6 633.591,1221.83 634.178,1222.79 634.764,1222.52 635.351,1227.23 635.937,1226.51 636.523,1225.91 637.11,1225.29 637.696,1223.48 638.283,1227.01 638.869,1222.82 639.456,1221.32 640.042,1219.67 640.628,1219.13 641.215,1224.11 641.801,1224.66 642.388,1226.85 642.974,1226.27 643.56,1225.38 644.147,1222.21 644.733,1224.29 645.32,1223.88 645.906,1224.62 646.492,1222.95 647.079,1221.26 647.665,1220.96 648.252,1221.76 648.838,1219.03 649.425,1221.55 650.011,1225.13 650.597,1224.55 651.184,1225.25 651.77,1226.14 652.357,1224.5 652.943,1226.55 653.529,1226.2 654.116,1225.81 654.702,1225.19 655.289,1224.87 655.875,1224.32 656.462,1222.79 657.048,1223.76 657.634,1223.19 658.221,1221.18 658.807,1218.24 659.394,1219.24 659.98,1218.66 660.566,1220.81 661.153,1221.67 661.739,1220.14 662.326,1221.1 662.912,1220.48 663.498,1222.86 664.085,1218.52 664.671,1220.86 665.258,1221.91 665.844,1218.97 666.431,1218.93 667.017,1222.78 667.603,1217.41 668.19,1218.57 668.776,1215.89 669.363,1211.85 669.949,1209.55 670.535,1208.51 671.122,1208.69 671.708,1212.87 672.295,1211.69 672.881,1211.58 673.467,1214.18 674.054,1219.44 674.64,1218.11 675.227,1219.02 675.813,1217.46 676.4,1217.42 676.986,1215.88 677.572,1214.49 678.159,1210.56 678.745,1211.95 679.332,1212 679.918,1215.88 680.504,1214.21 681.091,1215.49 681.677,1214.17 682.264,1215.23 682.85,1215.11 683.436,1216.5 684.023,1216.55 684.609,1211.3 685.196,1212.86 685.782,1214.38 686.369,1214.25 686.955,1211.78 687.541,1212.04 688.128,1211.93 688.714,1213.37 689.301,1214.62 689.887,1214.33 690.473,1215.7 691.06,1214.51 691.646,1214.77 692.233,1214.59 692.819,1213.03 693.405,1211.64 693.992,1213.96 694.578,1209.76 695.165,1209.89 695.751,1212.51 696.338,1216.27 696.924,1214.82 697.51,1217.37 698.097,1215.89 698.683,1215.53 699.27,1216.38 699.856,1214.89 700.442,1213.44 701.029,1213.44 701.615,1216.26 702.202,1214.62 702.788,1216.04 703.375,1218.38 703.961,1218.15 704.547,1218.05 705.134,1217.87 705.72,1212.51 706.307,1212.44 706.893,1209.76 707.479,1211.07 708.066,1209.74 708.652,1208.63 709.239,1208.89 709.825,1207.85 710.411,1206.85 710.998,1212.27 711.584,1211.06 712.171,1208.41 712.757,1204.86 713.344,1205.18 713.93,1202.91 714.516,1203.4 715.103,1203.9 715.689,1207.2 716.276,1209.03 716.862,1209.06 717.448,1210.54 718.035,1210.46 718.621,1210.64 719.208,1210.78 719.794,1212.15 720.38,1213.49 720.967,1212.1 721.553,1209.58 722.14,1209.71 722.726,1209.73 723.313,1210.93 723.899,1210.79 724.485,1213.25 725.072,1213 725.658,1213.04 726.245,1209.03 726.831,1212.19 727.417,1214.63 728.004,1214.53 728.59,1210.46 729.177,1212.16 729.763,1212.45 730.349,1210.21 730.936,1212.58 731.522,1214.82 732.109,1213.39 732.695,1213.39 733.282,1215.66 733.868,1215.61 734.454,1215.3 735.041,1212.7 735.627,1214.15 736.214,1213.82 736.8,1213.73 737.386,1216 737.973,1216.9 738.559,1219 739.146,1216.03 739.732,1215.64 740.318,1216.45 740.905,1220.04 741.491,1218.55 742.078,1218.09 742.664,1220.4 743.251,1221.22 743.837,1221.92 744.423,1218.68 745.01,1220.84 745.596,1219.32 746.183,1216.26 746.769,1218.41 747.355,1215.55 747.942,1214.2 748.528,1215.28 749.115,1217.38 749.701,1217.12 750.288,1219.12 750.874,1217.4 751.46,1219.54 752.047,1218.98 752.633,1218.46 753.22,1218.13 753.806,1219.04 754.392,1213.53 754.979,1214.74 755.565,1214.71 756.152,1214.6 756.738,1213.14 757.324,1213.15 757.911,1212.92 758.497,1212.94 759.084,1212.77 759.67,1212.89 760.257,1210.17 760.843,1210.3 761.429,1210.38 762.016,1210.19 762.602,1212.76 763.189,1212.68 763.775,1215.05 764.361,1217.23 764.948,1214.29 765.534,1218 766.121,1217.68 766.707,1218.9 767.293,1219.96 767.88,1220.79 768.466,1218.93 769.053,1220.95 769.639,1220.39 770.226,1219.58 770.812,1216.71 771.398,1216.45 771.985,1213.67 772.571,1214.76 773.158,1215.75 773.744,1212.87 774.33,1210.21 774.917,1207.59 775.503,1208.08 776.09,1205.75 776.676,1203.19 777.262,1201.11 777.849,1206.64 778.435,1203.35 779.022,1203.69 779.608,1202.82 780.195,1201.97 780.781,1199.91 781.367,1199.25 781.954,1198.42 782.54,1195 783.127,1200.98 783.713,1200.15 784.299,1200.79 784.886,1200.13 785.472,1198.14 786.059,1200.14 786.645,1199.23 787.232,1198.56 787.818,1200.57 788.404,1202.28 788.991,1202.75 789.577,1203.23 790.164,1204.85 790.75,1203.75 791.336,1205.25 791.923,1204.13 792.509,1203.34 793.096,1203.85 793.682,1203.08 794.268,1204.7 794.855,1202.45 795.441,1202.89 796.028,1205.76 796.614,1206.02 797.201,1207.25 797.787,1208.73 798.373,1207.64 798.96,1207.81 799.546,1206.88 800.133,1208.42 800.719,1205.81 801.305,1208.78 801.892,1210.01 802.478,1209.99 803.065,1209.88 803.651,1207.34 804.237,1208.68 804.824,1207.42 805.41,1207.38 805.997,1206.31 806.583,1206.6 807.17,1207.05 807.756,1207.23 808.342,1205.36 808.929,1204.69 809.515,1203.8 810.102,1204.12 810.688,1203.14 811.274,1204.8 811.861,1206.73 812.447,1207.34 813.034,1204.95 813.62,1206.54 814.206,1205.65 814.793,1204.78 815.379,1205.04 815.966,1204.05 816.552,1205.85 817.139,1210.14 817.725,1209.99 818.311,1213.72 818.898,1214.86 819.484,1215.81 820.071,1216.96 820.657,1216.54 821.243,1218.61 821.83,1216.82 822.416,1217.72 823.003,1218.56 823.589,1217.07 824.175,1215.57 824.762,1216.69 825.348,1217.7 825.935,1216.02 826.521,1214.33 827.108,1212.66 827.694,1212.74 828.28,1213.7 828.867,1210.98 829.453,1209.58 830.04,1212.06 830.626,1214.62 831.212,1214.42 831.799,1211.69 832.385,1211.53 832.972,1212.74 833.558,1212.61 834.145,1210.87 834.731,1212.06 835.317,1210.61 835.904,1209.1 836.49,1210.34 837.077,1211.65 837.663,1211.9 838.249,1216.84 838.836,1216.51 839.422,1212.42 840.009,1214.94 840.595,1217.36 841.181,1217.01 841.768,1216.43 842.354,1214.62 842.941,1215.78 843.527,1217.97 844.114,1217.37 844.7,1218.23 845.286,1213.91 845.873,1213.71 846.459,1212.3 847.046,1210.93 847.632,1209.67 848.218,1208.37 848.805,1206.93 849.391,1204.52 849.978,1204.57 850.564,1203.37 851.15,1202.41 851.737,1204.11 852.323,1201.61 852.91,1203.07 853.496,1203.31 854.083,1203.72 854.669,1205.1 855.255,1203.92 855.842,1202.84 856.428,1203.41 857.015,1203.85 857.601,1205.23 858.187,1202.59 858.774,1203.13 859.36,1203.58 859.947,1203.85 860.533,1205.4 861.119,1208.23 861.706,1209.74 862.292,1210.97 862.879,1213.46 863.465,1213.09 864.052,1211.73 864.638,1210.3 865.224,1208.88 865.811,1208.92 866.397,1208.95 866.984,1210.31 867.57,1212.95 868.156,1212.5 868.743,1209.63 869.329,1208.09 869.916,1208.16 870.502,1205.63 871.089,1204.49 871.675,1204.76 872.261,1202.31 872.848,1203.79 873.434,1204.23 874.021,1204.82 874.607,1205.11 875.193,1206.64 875.78,1206.78 876.366,1204.41 876.953,1205.97 877.539,1206.23 878.125,1206.53 878.712,1209.48 879.298,1209.29 879.885,1210.49 880.471,1210.13 881.058,1211.12 881.644,1209.91 882.23,1208.61 882.817,1204.91 883.403,1204.02 883.99,1205.38 884.576,1208.04 885.162,1207.93 885.749,1207.85 886.335,1209.16 886.922,1209.32 887.508,1213.11 888.094,1210.36 888.681,1208.91 889.267,1210.57 889.854,1209.33 890.44,1206.58 891.027,1208.05 891.613,1209.36 892.199,1211.9 892.786,1211.84 893.372,1211.85 893.959,1208 894.545,1209.42 895.131,1210.57 895.718,1208.11 896.304,1209.38 896.891,1210.75 897.477,1212.04 898.063,1215.85 898.65,1214.34 899.236,1212.95 899.823,1211.45 900.409,1211.36 900.996,1211.03 901.582,1209.69 902.168,1210.99 902.755,1210.83 903.341,1210.71 903.928,1210.63 904.514,1210.44 905.1,1210.77 905.687,1210.62 906.273,1208.98 906.86,1211.36 907.446,1213.81 908.032,1213.35 908.619,1213.31 909.205,1215.48 909.792,1212.55 910.378,1214.69 910.965,1210.44 911.551,1212.67 912.137,1213.3 912.724,1216.96 913.31,1215 913.897,1217.16 914.483,1216.49 915.069,1215.8 915.656,1215.57 916.242,1214.1 916.829,1213.93 917.415,1214.92 918.002,1210.86 918.588,1210.83 919.174,1209.25 919.761,1206.63 920.347,1207.97 920.934,1211.49 921.52,1210.11 922.106,1210.03 922.693,1209.92 923.279,1211.06 923.866,1209.38 924.452,1210.65 925.038,1209.34 925.625,1208.39 926.211,1208.4 926.798,1208.3 927.384,1208.37 927.971,1208.33 928.557,1209.75 929.143,1211.05 929.73,1211.23 930.316,1210 930.903,1208.51 931.489,1207.49 932.075,1206.23 932.662,1206.3 933.248,1204.92 933.835,1205.16 934.421,1207.97 935.007,1207.99 935.594,1206.71 936.18,1205.44 936.767,1205.71 937.353,1208.81 937.94,1209.96 938.526,1209.98 939.112,1210.99 939.699,1209.88 940.285,1211.37 940.872,1208.43 941.458,1205.85 942.044,1203.32 942.631,1200.95 943.217,1202.65 943.804,1203.16 944.39,1202.2 944.976,1202.59 945.563,1204.13 946.149,1204.38 946.736,1204.66 947.322,1205.07 947.909,1205.3 948.495,1209.55 949.081,1206.74 949.668,1206.75 950.254,1206.78 950.841,1206.66 951.427,1205.28 952.013,1205.46 952.6,1207.03 953.186,1207.13 953.773,1209.56 954.359,1205.6 954.945,1206.18 955.532,1204.95 956.118,1205.51 956.705,1205.43 957.291,1206.76 957.878,1205.74 958.464,1205.79 959.05,1206.18 959.637,1204.96 960.223,1206.53 960.81,1206.56 961.396,1206.75 961.982,1204.2 962.569,1204.42 963.155,1206.01 963.742,1208.94 964.328,1212.72 964.915,1211.17 965.501,1212.37 966.087,1212.2 966.674,1210.97 967.26,1213.23 967.847,1214.4 968.433,1214.11 969.019,1215.1 969.606,1213.43 970.192,1214.39 970.779,1211.45 971.365,1212.54 971.951,1219.55 972.538,1219.92 973.124,1217.99 973.711,1217.33 974.297,1215.69 974.884,1211.44 975.47,1211.35 976.056,1208.69 976.643,1208.17 977.229,1208.11 977.816,1208.09 978.402,1203.19 978.988,1203.45 979.575,1203.55 980.161,1202.54 980.748,1202.76 981.334,1203.53 981.92,1203.73 982.507,1202.87 983.093,1203.2 983.68,1204.7 984.266,1207.71 984.853,1207.65 985.439,1207.77 986.025,1208.69 986.612,1208.47 987.198,1208.07 987.785,1207.1 988.371,1207.14 988.957,1211.17 989.544,1210.04 990.13,1208.62 990.717,1208.72 991.303,1211.26 991.889,1209.8 992.476,1211.1 993.062,1213.61 993.649,1215.7 994.235,1213.89 994.822,1212.13 995.408,1210.94 995.994,1209.78 996.581,1209.64 997.167,1209.64 997.754,1210.74 998.34,1209.15 998.926,1208.9 999.513,1207.63 1000.1,1207.65 1000.69,1210.03 1001.27,1208.8 1001.86,1208.9 1002.44,1209.17 1003.03,1207.95 1003.62,1208.94 1004.2,1207.66 1004.79,1208.96 1005.38,1207.64 1005.96,1209.02 1006.55,1207.78 1007.14,1207.76 1007.72,1209.1 1008.31,1210.34 1008.9,1211.41 1009.48,1211.21 1010.07,1214.79 1010.65,1214.51 1011.24,1214.01 1011.83,1213.68 1012.41,1210.8 1013,1209.2 1013.59,1207.81 1014.17,1205.15 1014.76,1205.44 1015.35,1205.22 1015.93,1204.19 1016.52,1205.65 1017.11,1203.41 1017.69,1203.51 1018.28,1203.57 1018.86,1209.1 1019.45,1208.92 1020.04,1209.03 1020.62,1208.03 1021.21,1209.29 1021.8,1208.88 1022.38,1207.47 1022.97,1208.66 1023.56,1208.65 1024.14,1208.47 1024.73,1211.09 1025.32,1213.47 1025.9,1212.89 1026.49,1210.43 1027.07,1209.01 1027.66,1207.52 1028.25,1208.66 1028.83,1209.75 1029.42,1210.92 1030.01,1208.13 1030.59,1209.45 1031.18,1209.51 1031.77,1209.5 1032.35,1210.34 1032.94,1210.31 1033.52,1211.35 1034.11,1209.56 1034.7,1209.19 1035.28,1209.36 1035.87,1207.96 1036.46,1207.85 1037.04,1207.89 1037.63,1207.98 1038.22,1207.56 1038.8,1207.54 1039.39,1206.35 1039.98,1206.29 1040.56,1207.62 1041.15,1206.56 1041.73,1206.47 1042.32,1202.65 1042.91,1204.17 1043.49,1203 1044.08,1203.24 1044.67,1205.96 1045.25,1204.57 1045.84,1206.06 1046.43,1206.25 1047.01,1206.53 1047.6,1210.46 1048.19,1210.16 1048.77,1205.12 1049.36,1203.85 1049.94,1206.68 1050.53,1209.5 1051.12,1209.34 1051.7,1207.74 1052.29,1207.77 1052.88,1209.24 1053.46,1210.45 1054.05,1211.71 1054.64,1212.85 1055.22,1212.69 1055.81,1208.52 1056.39,1210.02 1056.98,1209.79 1057.57,1210.87 1058.15,1210.95 1058.74,1208.31 1059.33,1208.35 1059.91,1208.32 1060.5,1205.77 1061.09,1205.81 1061.67,1207.24 1062.26,1209.88 1062.85,1208.68 1063.43,1211.33 1064.02,1211.22 1064.6,1212.23 1065.19,1208.41 1065.78,1206.92 1066.36,1202.8 1066.95,1204.45 1067.54,1203.07 1068.12,1202.09 1068.71,1205.16 1069.3,1205.06 1069.88,1204.92 1070.47,1204.94 1071.06,1207.52 1071.64,1208.78 1072.23,1209.93 1072.81,1209.88 1073.4,1210.62 1073.99,1210.37 1074.57,1210.09 1075.16,1212.32 1075.75,1213.38 1076.33,1214.06 1076.92,1215.11 1077.51,1216 1078.09,1217.97 1078.68,1215.08 1079.26,1213.42 1079.85,1213.23 1080.44,1210.18 1081.02,1210.15 1081.61,1210.16 1082.2,1207.38 1082.78,1207.43 1083.37,1211.07 1083.96,1209.81 1084.54,1209.58 1085.13,1209.29 1085.72,1206.52 1086.3,1208.88 1086.89,1207.39 1087.47,1207.44 1088.06,1203.53 1088.65,1202.6 1089.23,1201.49 1089.82,1201.63 1090.41,1204.21 1090.99,1204.35 1091.58,1203.06 1092.17,1203.17 1092.75,1204.93 1093.34,1205.1 1093.93,1203.84 1094.51,1205.52 1095.1,1208.23 1095.68,1209.49 1096.27,1209.44 1096.86,1210.57 1097.44,1211.62 1098.03,1212.46 1098.62,1210.91 1099.2,1206.69 1099.79,1209.42 1100.38,1211.94 1100.96,1211.45 1101.55,1211.33 1102.14,1209.78 1102.72,1212.15 1103.31,1209.18 1103.89,1206.51 1104.48,1207.85 1105.07,1207.94 1105.65,1205.38 1106.24,1207.96 1106.83,1202.72 1107.41,1200.51 1108,1202.41 1108.59,1204.17 1109.17,1205.82 1109.76,1204.65 1110.34,1204.83 1110.93,1203.68 1111.52,1202.86 1112.1,1202.13 1112.69,1202.55 1113.28,1202.93 1113.86,1203.13 1114.45,1206.01 1115.04,1206.07 1115.62,1203.6 1116.21,1203.74 1116.8,1202.71 1117.38,1203.28 1117.97,1204.88 1118.55,1206.06 1119.14,1211.49 1119.73,1211.39 1120.31,1208.58 1120.9,1208.88 1121.49,1210.35 1122.07,1211.47 1122.66,1207.56 1123.25,1207.65 1123.83,1207.75 1124.42,1207.83 1125.01,1206.63 1125.59,1207.85 1126.18,1206.68 1126.76,1204.22 1127.35,1206.72 1127.94,1208.08 1128.52,1205.59 1129.11,1204.75 1129.7,1205.05 1130.28,1205.27 1130.87,1207.93 1131.46,1210.42 1132.04,1210.14 1132.63,1209.96 1133.21,1209.84 1133.8,1209.77 1134.39,1208.25 1134.97,1210.61 1135.56,1208.91 1136.15,1209.87 1136.73,1208.29 1137.32,1208.31 1137.91,1209.36 1138.49,1208.18 1139.08,1206.81 1139.67,1207.89 1140.25,1209.33 1140.84,1209.31 1141.42,1209.36 1142.01,1207.96 1142.6,1207.64 1143.18,1209.95 1143.77,1208.61 1144.36,1208.61 1144.94,1207.01 1145.53,1207.02 1146.12,1209.36 1146.7,1210.41 1147.29,1209.12 1147.88,1207.41 1148.46,1206.02 1149.05,1204.89 1149.63,1205.04 1150.22,1203.78 1150.81,1204.16 1151.39,1205.92 1151.98,1206.33 1152.57,1207.51 1153.15,1208.77 1153.74,1210.07 1154.33,1207.29 1154.91,1203.39 1155.5,1204.98 1156.09,1205.07 1156.67,1205.37 1157.26,1209.46 1157.84,1206.71 1158.43,1209.12 1159.02,1207.54 1159.6,1208.86 1160.19,1208.49 1160.78,1207.08 1161.36,1205.72 1161.95,1205.7 1162.54,1203.51 1163.12,1203.73 1163.71,1201.35 1164.29,1201.7 1164.88,1203.51 1165.47,1202.57 1166.05,1201.3 1166.64,1200.78 1167.23,1199.9 1167.81,1201.41 1168.4,1200.33 1168.99,1199.43 1169.57,1200.86 1170.16,1201.4 1170.75,1200.53 1171.33,1201.96 1171.92,1203.29 1172.5,1204.09 1173.09,1205.67 1173.68,1205.83 1174.26,1203.68 1174.85,1201.49 1175.44,1203.3 1176.02,1204.66 1176.61,1206.07 1177.2,1206.17 1177.78,1205.05 1178.37,1206.3 1178.96,1206.4 1179.54,1205.26 1180.13,1205.29 1180.71,1206.44 1181.3,1203.61 1181.89,1201.24 1182.47,1198.96 1183.06,1199.39 1183.65,1202.48 1184.23,1202.74 1184.82,1202.95 1185.41,1204.38 1185.99,1203.51 1186.58,1202.51 1187.16,1201.73 1187.75,1201.84 1188.34,1204.57 1188.92,1205.12 1189.51,1205.14 1190.1,1207.65 1190.68,1204.97 1191.27,1205.24 1191.86,1202.82 1192.44,1205.9 1193.03,1207.43 1193.62,1211.6 1194.2,1208.82 1194.79,1208.77 1195.37,1210.16 1195.96,1209.85 1196.55,1209.58 1197.13,1209.65 1197.72,1208.49 1198.31,1207.3 1198.89,1207.28 1199.48,1208.51 1200.07,1208.28 1200.65,1209.59 1201.24,1212.21 1201.83,1213.27 1202.41,1213.2 1203,1214.15 1203.58,1214.08 1204.17,1216.17 1204.76,1213.2 1205.34,1211.83 1205.93,1214.1 1206.52,1217.71 1207.1,1213.25 1207.69,1210.02 1208.28,1209.92 1208.86,1208.54 1209.45,1208.9 1210.03,1207.35 1210.62,1207.32 1211.21,1206.34 1211.79,1205.3 1212.38,1204.1 1212.97,1203.99 1213.55,1203.07 1214.14,1204.52 1214.73,1205.75 1215.31,1208.63 1215.9,1207.49 1216.49,1211.18 1217.07,1209.65 1217.66,1210.74 1218.24,1213.05 1218.83,1213.84 1219.42,1213.39 1220,1210.52 1220.59,1211.35 1221.18,1210.05 1221.76,1207.82 1222.35,1206.52 1222.94,1209.13 1223.52,1208.82 1224.11,1208.83 1224.7,1206.43 1225.28,1207.96 1225.87,1210.41 1226.45,1208.65 1227.04,1207.27 1227.63,1208.58 1228.21,1207.29 1228.8,1207.33 1229.39,1206.03 1229.97,1205.77 1230.56,1208.5 1231.15,1209.57 1231.73,1205.65 1232.32,1207.3 1232.91,1207.22 1233.49,1208.85 1234.08,1208.75 1234.66,1209 1235.25,1209.74 1235.84,1213.16 1236.42,1211.85 1237.01,1211.48 1237.6,1212.88 1238.18,1210.98 1238.77,1209.46 1239.36,1209.12 1239.94,1208.94 1240.53,1208.92 1241.11,1208.59 1241.7,1207.26 1242.29,1210.01 1242.87,1206.24 1243.46,1209.09 1244.05,1205.31 1244.63,1206.69 1245.22,1207.86 1245.81,1210.27 1246.39,1211.29 1246.98,1210.93 1247.57,1213.4 1248.15,1212.87 1248.74,1208.63 1249.32,1206.18 1249.91,1203.72 1250.5,1203.98 1251.08,1204.14 1251.67,1205.53 1252.26,1205.79 1252.84,1208.24 1253.43,1207.93 1254.02,1209.06 1254.6,1210.27 1255.19,1209.89 1255.78,1212.63 1256.36,1210.33 1256.95,1208.06 1257.53,1208.07 1258.12,1207.92 1258.71,1210.35 1259.29,1211.24 1259.88,1209.48 1260.47,1210.72 1261.05,1211.76 1261.64,1214.04 1262.23,1213.63 1262.81,1213.33 1263.4,1212.83 1263.98,1209.72 1264.57,1208.25 1265.16,1209.1 1265.74,1208.99 1266.33,1210.14 1266.92,1209.53 1267.5,1209.79 1268.09,1208.44 1268.68,1207.12 1269.26,1208.44 1269.85,1209.84 1270.44,1210.74 1271.02,1209.28 1271.61,1208.04 1272.19,1206.78 1272.78,1204.19 1273.37,1202.92 1273.95,1202.99 1274.54,1205.98 1275.13,1206.28 1275.71,1210.25 1276.3,1210.02 1276.89,1209.96 1277.47,1207.42 1278.06,1205.88 1278.65,1202 1279.23,1202.36 1279.82,1203.84 1280.4,1202.51 1280.99,1205.46 1281.58,1205.58 1282.16,1204.41 1282.75,1204.59 1283.34,1204.71 1283.92,1203.27 1284.51,1204.63 1285.1,1203.53 1285.68,1203.65 1286.27,1203.91 1286.86,1204.18 1287.44,1205.55 1288.03,1204.49 1288.61,1205.88 1289.2,1208.32 1289.79,1208.41 1290.37,1209.82 1290.96,1210.08 1291.55,1210.04 1292.13,1209.88 1292.72,1209.59 1293.31,1210.73 1293.89,1211.92 1294.48,1211.6 1295.06,1210.17 1295.65,1207.6 1296.24,1207.46 1296.82,1208.61 1297.41,1212.48 1298,1214.55 1298.58,1210.47 1299.17,1211.57 1299.76,1210.12 1300.34,1209.85 1300.93,1208.28 1301.52,1206.76 1302.1,1204.38 1302.69,1201.99 1303.27,1198.61 1303.86,1199.08 1304.45,1199.75 1305.03,1200.27 1305.62,1202.09 1306.21,1201.15 1306.79,1202.63 1307.38,1201.29 1307.97,1201.81 1308.55,1200.84 1309.14,1198.69 1309.73,1199.03 1310.31,1199.52 1310.9,1199.97 1311.48,1201.42 1312.07,1201.74 1312.66,1201.9 1313.24,1198.39 1313.83,1200.16 1314.42,1200.56 1315,1199.76 1315.59,1202.63 1316.18,1202.59 1316.76,1203.01 1317.35,1204.57 1317.93,1206 1318.52,1206.25 1319.11,1208.73 1319.69,1208.55 1320.28,1208.49 1320.87,1208.35 1321.45,1208.15 1322.04,1208.2 1322.63,1206.92 1323.21,1206.93 1323.8,1204.49 1324.39,1207.22 1324.97,1208.2 1325.56,1207.84 1326.14,1207.82 1326.73,1207.79 1327.32,1210.24 1327.9,1212.57 1328.49,1209.7 1329.08,1206.91 1329.66,1204.26 1330.25,1206.78 1330.84,1206.75 1331.42,1208.02 1332.01,1210.44 1332.6,1210.07 1333.18,1212.47 1333.77,1212.2 1334.35,1213.2 1334.94,1212.92 1335.53,1211.48 1336.11,1208.77 1336.7,1206.25 1337.29,1207.26 1337.87,1208.38 1338.46,1209.58 1339.05,1210.82 1339.63,1208.33 1340.22,1210.78 1340.8,1210.67 1341.39,1210.46 1341.98,1208.7 1342.56,1210.12 1343.15,1209.93 1343.74,1211.06 1344.32,1209.63 1344.91,1209.56 1345.5,1209.46 1346.08,1210.47 1346.67,1212.75 1347.26,1211.34 1347.84,1208.22 1348.43,1205.8 1349.01,1207.25 1349.6,1207.34 1350.19,1207.27 1350.77,1208.54 1351.36,1208.6 1351.95,1207.62 1352.53,1211.49 1353.12,1212.55 1353.71,1209.75 1354.29,1209.89 1354.88,1211.1 1355.47,1208.38 1356.05,1207.86 1356.64,1211.7 1357.22,1211.05 1357.81,1209.65 1358.4,1209.49 1358.98,1209.67 1359.57,1205.43 1360.16,1203.07 1360.74,1202.23 1361.33,1203.51 1361.92,1202.28 1362.5,1202.67 1363.09,1202.93 1363.68,1205.62 1364.26,1207.17 1364.85,1207.03 1365.43,1207.33 1366.02,1205.86 1366.61,1207.36 1367.19,1206.19 1367.78,1205 1368.37,1203.91 1368.95,1203.06 1369.54,1200.75 1370.13,1201.26 1370.71,1199.18 1371.3,1202.26 1371.88,1202.61 1372.47,1204.24 1373.06,1207.09 1373.64,1208.51 1374.23,1209.58 1374.82,1209.37 1375.4,1206.79 1375.99,1204.28 1376.58,1203.04 1377.16,1200.77 1377.75,1202.32 1378.34,1203.89 1378.92,1205.17 1379.51,1207.94 1380.09,1208.01 1380.68,1205.53 1381.27,1206.76 1381.85,1203.02 1382.44,1201.88 1383.03,1201.12 1383.61,1201.56 1384.2,1201.97 1384.79,1199.88 1385.37,1199.07 1385.96,1201.95 1386.55,1202.45 1387.13,1203.7 1387.72,1206.4 1388.3,1203.99 1388.89,1204.12 1389.48,1205.81 1390.06,1208.48 1390.65,1207.11 1391.24,1209.79 1391.82,1210.92 1392.41,1208.18 1393,1209.56 1393.58,1211.8 1394.17,1211.78 1394.75,1213.72 1395.34,1217.01 1395.93,1214.03 1396.51,1212.25 1397.1,1212.11 1397.69,1214.21 1398.27,1215.24 1398.86,1213.48 1399.45,1214.49 1400.03,1212.85 1400.62,1212.51 1401.21,1212.15 1401.79,1209.46 1402.38,1209.47 1402.96,1209.45 1403.55,1210.59 1404.14,1211.75 1404.72,1211.51 1405.31,1211.11 1405.9,1210.86 1406.48,1212.01 1407.07,1212.99 1407.66,1212.64 1408.24,1214.68 1408.83,1213.09 1409.42,1211.28 1410,1212.21 1410.59,1211.94 1411.17,1212.83 1411.76,1212.66 1412.35,1209.85 1412.93,1209.94 1413.52,1208.61 1414.11,1207.33 1414.69,1207.45 1415.28,1205.02 1415.87,1205.07 1416.45,1206.45 1417.04,1205.34 1417.63,1205.5 1418.21,1205.64 1418.8,1207.26 1419.38,1208.84 1419.97,1207.83 1420.56,1211.82 1421.14,1210.26 1421.73,1210.07 1422.32,1208.63 1422.9,1208.64 1423.49,1208.63 1424.08,1207.47 1424.66,1207.63 1425.25,1206.47 1425.83,1206.65 1426.42,1210.35 1427.01,1209.81 1427.59,1208.54 1428.18,1208.23 1428.77,1209.44 1429.35,1204.13 1429.94,1200.31 1430.53,1199.22 1431.11,1202.32 1431.7,1201.2 1432.29,1202.91 1432.87,1202 1433.46,1203.65 1434.04,1203.7 1434.63,1205.4 1435.22,1207.74 1435.8,1207.81 1436.39,1207.74 1436.98,1206.51 1437.56,1207.82 1438.15,1209.14 1438.74,1206.37 1439.32,1207.92 1439.91,1208.05 1440.5,1209.38 1441.08,1210.82 1441.67,1209.51 1442.25,1208.27 1442.84,1206.89 1443.43,1208.1 1444.01,1208.14 1444.6,1214.32 1445.19,1212.69 1445.77,1210.95 1446.36,1209.74 1446.95,1207.33 1447.53,1204.71 1448.12,1205.02 1448.7,1205.17 1449.29,1204.23 1449.88,1204.56 1450.46,1203.38 1451.05,1203.6 1451.64,1207.84 1452.22,1206.52 1452.81,1209.26 1453.4,1209.26 1453.98,1209.31 1454.57,1209.03 1455.16,1207.88 1455.74,1206.75 1456.33,1206.48 1456.91,1206.51 1457.5,1207.7 1458.09,1206.26 1458.67,1207.69 1459.26,1206.57 1459.85,1205.28 1460.43,1204.43 1461.02,1203.29 1461.61,1204.76 1462.19,1202.21 1462.78,1199.98 1463.37,1200.23 1463.95,1199.36 1464.54,1200.01 1465.12,1201.5 1465.71,1201.68 1466.3,1200.91 1466.88,1198.89 1467.47,1197.89 1468.06,1201.01 1468.64,1201.26 1469.23,1202.76 1469.82,1205.43 1470.4,1205.39 1470.99,1204.48 1471.57,1204.76 1472.16,1206.18 1472.75,1207.72 1473.33,1209.3 1473.92,1210.34 1474.51,1210.27 1475.09,1210.19 1475.68,1207.54 1476.27,1207.55 1476.85,1208.65 1477.44,1209.62 1478.03,1207.06 1478.61,1211 1479.2,1210.69 1479.78,1210.48 1480.37,1209.05 1480.96,1208.8 1481.54,1208.53 1482.13,1207.32 1482.72,1207.32 1483.3,1204.83 1483.89,1204.98 1484.48,1204.99 1485.06,1203.84 1485.65,1202.86 1486.24,1206.95 1486.82,1207.92 1487.41,1211.86 1487.99,1211.79 1488.58,1211.43 1489.17,1211.11 1489.75,1209.86 1490.34,1210.86 1490.93,1210.57 1491.51,1209.09 1492.1,1211.45 1492.69,1210.16 1493.27,1212.34 1493.86,1211.65 1494.45,1212.8 1495.03,1213.54 1495.62,1214.35 1496.2,1215.37 1496.79,1214.81 1497.38,1214.73 1497.96,1214.36 1498.55,1210.05 1499.14,1211.15 1499.72,1208.4 1500.31,1208.45 1500.9,1209.37 1501.48,1209.26 1502.07,1210.12 1502.65,1207.29 1503.24,1207.34 1503.83,1207.67 1504.41,1209.09 1505,1208.97 1505.59,1205.12 1506.17,1203.77 1506.76,1202.59 1507.35,1201.49 1507.93,1200.58 1508.52,1199.65 1509.11,1201.3 1509.69,1205.45 1510.28,1205.79 1510.86,1208.31 1511.45,1207.21 1512.04,1208.56 1512.62,1210.83 1513.21,1213.01 1513.8,1210.32 1514.38,1208.96 1514.97,1206.34 1515.56,1204.94 1516.14,1202.84 1516.73,1201.77 1517.32,1202.22 1517.9,1203.53 1518.49,1202.5 1519.07,1201.54 1519.66,1198.96 1520.25,1200.8 1520.83,1202.35 1521.42,1202.58 1522.01,1201.58 1522.59,1202.98 1523.18,1203.33 1523.77,1203.73 1524.35,1203.93 1524.94,1204.15 1525.52,1203.27 1526.11,1206.25 1526.7,1208.57 1527.28,1209.83 1527.87,1208.32 1528.46,1208.11 1529.04,1208.27 1529.63,1209.51 1530.22,1206.57 1530.8,1205.42 1531.39,1201.78 1531.98,1203.3 1532.56,1203.75 1533.15,1204.01 1533.73,1204.33 1534.32,1204.43 1534.91,1207.01 1535.49,1208.23 1536.08,1210.62 1536.67,1211.67 1537.25,1213.04 1537.84,1214.3 1538.43,1215.37 1539.01,1214.98 1539.6,1214.58 1540.19,1215.44 1540.77,1216.07 1541.36,1217.03 1541.94,1216.25 1542.53,1218.53 1543.12,1219.29 1543.7,1216.09 1544.29,1209.34 1544.88,1211.88 1545.46,1215.3 1546.05,1212.26 1546.64,1209.33 1547.22,1210.57 1547.81,1211.43 1548.4,1211.32 1548.98,1211.23 1549.57,1212.44 1550.15,1212.4 1550.74,1208.24 1551.33,1206.96 1551.91,1207.13 1552.5,1206.93 1553.09,1208.54 1553.67,1209.98 1554.26,1208.7 1554.85,1211.12 1555.43,1208.47 1556.02,1209.29 1556.6,1209.39 1557.19,1208.04 1557.78,1210.46 1558.36,1211.34 1558.95,1211.29 1559.54,1212.28 1560.12,1215.9 1560.71,1216.51 1561.3,1217.23 1561.88,1216.55 1562.47,1213.32 1563.06,1214.26 1563.64,1214.25 1564.23,1212.52 1564.81,1212.2 1565.4,1209.36 1565.99,1206.56 1566.57,1203.99 1567.16,1200.25 1567.75,1202.01 1568.33,1199.81 1568.92,1198.76 1569.51,1201.84 1570.09,1202.17 1570.68,1204.85 1571.27,1206.25 1571.85,1203.67 1572.44,1205.27 1573.02,1205.65 1573.61,1205.69 1574.2,1204.49 1574.78,1203.05 1575.37,1204.9 1575.96,1206.07 1576.54,1206.21 1577.13,1203.6 1577.72,1203.83 1578.3,1204.97 1578.89,1203.7 1579.47,1203.63 1580.06,1202.65 1580.65,1201.58 1581.23,1205.9 1581.82,1205.94 1582.41,1208.46 1582.99,1210.85 1583.58,1210.59 1584.17,1210.48 1584.75,1210.34 1585.34,1213.39 1585.93,1212.85 1586.51,1211.14 1587.1,1213.53 1587.68,1210.6 1588.27,1207.8 1588.86,1207.62 1589.44,1208.56 1590.03,1205.96 1590.62,1207.38 1591.2,1207.52 1591.79,1207.45 1592.38,1207.37 1592.96,1207.23 1593.55,1205.95 1594.14,1204.79 1594.72,1206.4 1595.31,1206.19 1595.89,1203.66 1596.48,1202.33 1597.07,1201.67 1597.65,1204.61 1598.24,1203.22 1598.83,1204.76 1599.41,1206.23 1600,1208.63 1600.59,1208.56 1601.17,1208.31 1601.76,1208.01 1602.34,1207.9 1602.93,1207.91 1603.52,1206.56 1604.1,1206.5 1604.69,1207.61 1605.28,1206.26 1605.86,1206.63 1606.45,1206.83 1607.04,1204.28 1607.62,1205.67 1608.21,1205.89 1608.8,1206 1609.38,1203.65 1609.97,1203.96 1610.55,1202.7 1611.14,1203.14 1611.73,1204.7 1612.31,1199.47 1612.9,1200.02 1613.49,1203.81 1614.07,1204.21 1614.66,1201.83 1615.25,1202.17 1615.83,1203.81 1616.42,1200.29 1617.01,1203.2 1617.59,1202.52 1618.18,1202.72 1618.76,1202.83 1619.35,1201.72 1619.94,1204.59 1620.52,1206 1621.11,1203.52 1621.7,1204.95 1622.28,1205.03 1622.87,1205.23 1623.46,1207.85 1624.04,1207.66 1624.63,1210.3 1625.22,1210.29 1625.8,1210.51 1626.39,1211.75 1626.97,1212.91 1627.56,1213.91 1628.15,1213.56 1628.73,1213.08 1629.32,1211.48 1629.91,1212.64 1630.49,1211.12 1631.08,1211.14 1631.67,1210.96 1632.25,1212.13 1632.84,1210.86 1633.42,1209.33 1634.01,1209.24 1634.6,1206.79 1635.18,1205.29 1635.77,1205.32 1636.36,1206.67 1636.94,1204.31 1637.53,1200.69 1638.12,1199.56 1638.7,1199.89 1639.29,1197.79 1639.88,1199.89 1640.46,1200.33 1641.05,1201.81 1641.63,1200.78 1642.22,1202.28 1642.81,1203.84 1643.39,1201.37 1643.98,1197.52 1644.57,1196.65 1645.15,1198.64 1645.74,1200.41 1646.33,1201.01 1646.91,1201.47 1647.5,1200.31 1648.09,1201.84 1648.67,1202.08 1649.26,1204.85 1649.84,1206.15 1650.43,1206.45 1651.02,1205.46 1651.6,1206.63 1652.19,1205.45 1652.78,1206.77 1653.36,1207.93 1653.95,1206.34 1654.54,1203.8 1655.12,1203.88 1655.71,1202.73 1656.29,1202.79 1656.88,1202.98 1657.47,1203.28 1658.05,1204.62 1658.64,1202.34 1659.23,1201.05 1659.81,1206.36 1660.4,1206.46 1660.99,1206.68 1661.57,1208.01 1662.16,1208 1662.75,1206.87 1663.33,1207.26 1663.92,1207.11 1664.5,1208.36 1665.09,1204.61 1665.68,1203.38 1666.26,1201.99 1666.85,1206.18 1667.44,1208.67 1668.02,1207.61 1668.61,1210.38 1669.2,1210.19 1669.78,1209.85 1670.37,1208.41 1670.96,1210.68 1671.54,1211.57 1672.13,1209.98 1672.71,1208.48 1673.3,1208.53 1673.89,1209.69 1674.47,1212.15 1675.06,1211.75 1675.65,1211.3 1676.23,1212.41 1676.82,1214.9 1677.41,1215.77 1677.99,1216.43 1678.58,1214.83 1679.17,1215.95 1679.75,1215.51 1680.34,1216.61 1680.92,1218.88 1681.51,1216.88 1682.1,1215.61 1682.68,1215.43 1683.27,1214.77 1683.86,1215.56 1684.44,1213.9 1685.03,1213.42 1685.62,1213.11 1686.2,1211.39 1686.79,1211.43 1687.37,1209.66 1687.96,1209.56 1688.55,1209.22 1689.13,1207.39 1689.72,1208.49 1690.31,1208.65 1690.89,1209.5 1691.48,1208.12 1692.07,1209.08 1692.65,1209.29 1693.24,1210.65 1693.83,1213.18 1694.41,1212.91 1695,1213.93 1695.58,1212.12 1696.17,1213.07 1696.76,1212.6 1697.34,1213.74 1697.93,1213.66 1698.52,1211.7 1699.1,1210.25 1699.69,1210.05 1700.28,1214.04 1700.86,1212.34 1701.45,1209.53 1702.04,1210.64 1702.62,1210.32 1703.21,1208.87 1703.79,1210.12 1704.38,1208.49 1704.97,1206.96 1705.55,1206.89 1706.14,1207.29 1706.73,1205.69 1707.31,1207.08 1707.9,1208.11 1708.49,1209.19 1709.07,1211.67 1709.66,1212.51 1710.24,1212.26 1710.83,1214.61 1711.42,1214.19 1712,1213.8 1712.59,1214.53 1713.18,1217.93 1713.76,1218.81 1714.35,1215.62 1714.94,1216.43 1715.52,1213.33 1716.11,1211.61 1716.7,1212.64 1717.28,1212.05 1717.87,1211.71 1718.45,1208.79 1719.04,1207.44 1719.63,1206.6 1720.21,1204.28 1720.8,1204.63 1721.39,1206.18 1721.97,1208.77 1722.56,1204.97 1723.15,1205.37 1723.73,1204.24 1724.32,1203.31 1724.91,1204.69 1725.49,1205.88 1726.08,1204.75 1726.66,1204.84 1727.25,1203.78 1727.84,1204.23 1728.42,1205.36 1729.01,1204.15 1729.6,1202.78 1730.18,1202.81 1730.77,1201.7 1731.36,1203.6 1731.94,1203.78 1732.53,1206.5 1733.11,1202.59 1733.7,1202.77 1734.29,1204.39 1734.87,1205.54 1735.46,1204.31 1736.05,1204.39 1736.63,1205.69 1737.22,1205.81 1737.81,1204.54 1738.39,1205.76 1738.98,1206.96 1739.57,1208.36 1740.15,1207.25 1740.74,1207.08 1741.32,1204.61 1741.91,1206.13 1742.5,1204.94 1743.08,1204.95 1743.67,1206.16 1744.26,1202.51 1744.84,1200.26 1745.43,1199.4 1746.02,1199.78 1746.6,1200.31 1747.19,1199.45 1747.78,1195.87 1748.36,1198.83 1748.95,1199.49 1749.53,1200 1750.12,1201.2 1750.71,1201.47 1751.29,1203.16 1751.88,1202.32 1752.47,1201.15 1753.05,1204.01 1753.64,1206.84 1754.23,1204.35 1754.81,1204.83 1755.4,1203.69 1755.99,1205.19 1756.57,1202.68 1757.16,1203.98 1757.74,1205.55 1758.33,1206.93 1758.92,1204.1 1759.5,1204.32 1760.09,1200.71 1760.68,1201.09 1761.26,1199.99 1761.85,1200.47 1762.44,1203.3 1763.02,1202.28 1763.61,1200.98 1764.19,1203.82 1764.78,1203.96 1765.37,1204.18 1765.95,1202.86 1766.54,1203.28 1767.13,1202.28 1767.71,1202.73 1768.3,1202.74 1768.89,1201.58 1769.47,1201.96 1770.06,1200.59 1770.65,1202.08 1771.23,1202.36 1771.82,1202.53 1772.4,1204.04 1772.99,1208.41 1773.58,1209.61 1774.16,1210.93 1774.75,1210.69 1775.34,1213.27 1775.92,1213.99 1776.51,1212.27 1777.1,1210.87 1777.68,1212.17 1778.27,1213.31 1778.86,1216.74 1779.44,1214.94 1780.03,1215.71 1780.61,1214.98 1781.2,1219.6 1781.79,1217.55 1782.37,1216.99 1782.96,1216.8 1783.55,1217.65 1784.13,1216.99 1784.72,1217.65 1785.31,1217.04 1785.89,1217.74 1786.48,1218.29 1787.06,1217.63 1787.65,1213.2 1788.24,1212.6 1788.82,1211.1 1789.41,1210.94 1790,1211.96 1790.58,1210.32 1791.17,1206.4 1791.76,1205.28 1792.34,1206.98 1792.93,1205.6 1793.52,1204.26 1794.1,1204.22 1794.69,1206.92 1795.27,1205.85 1795.86,1201.94 1796.45,1201.98 1797.03,1202.47 1797.62,1201.58 1798.21,1199.48 1798.79,1199.92 1799.38,1200.38 1799.97,1201.99 1800.55,1199.73 1801.14,1200.36 1801.73,1200.81 1802.31,1199.8 1802.9,1200.34 1803.48,1201.92 1804.07,1204.69 1804.66,1206.14 1805.24,1208.65 1805.83,1207.18 1806.42,1207.33 1807,1210.09 1807.59,1212.23 1808.18,1212.1 1808.76,1209.75 1809.35,1209.91 1809.94,1209.89 1810.52,1209.99 1811.11,1209.9 1811.69,1208.54 1812.28,1209.42 1812.87,1208.1 1813.45,1206.98 1814.04,1206.68 1814.63,1209.35 1815.21,1209.37 1815.8,1209.37 1816.39,1211.9 1816.97,1211.48 1817.56,1207.29 1818.14,1208.9 1818.73,1208.78 1819.32,1211.37 1819.9,1209.98 1820.49,1213.59 1821.08,1206.95 1821.66,1210.73 1822.25,1209.36 1822.84,1210.5 1823.42,1208.8 1824.01,1207.38 1824.6,1207.2 1825.18,1204.97 1825.77,1205.56 1826.35,1202.91 1826.94,1204.33 1827.53,1204.38 1828.11,1204.74 1828.7,1203.61 1829.29,1205.09 1829.87,1205.16 1830.46,1206.74 1831.05,1205.34 1831.63,1204.12 1832.22,1205.25 1832.81,1202.89 1833.39,1201.83 1833.98,1205.15 1834.56,1207.77 1835.15,1210.38 1835.74,1212.86 1836.32,1210.99 1836.91,1210.63 1837.5,1208.14 1838.08,1209.38 1838.67,1210.77 1839.26,1212.14 1839.84,1211.68 1840.43,1211.33 1841.01,1210.97 1841.6,1209.29 1842.19,1209.06 1842.77,1208.92 1843.36,1208.51 1843.95,1210.8 1844.53,1209.24 1845.12,1209.26 1845.71,1210.21 1846.29,1211.43 1846.88,1211.2 1847.47,1211.97 1848.05,1210.04 1848.64,1213.86 1849.22,1210.81 1849.81,1208.07 1850.4,1206.73 1850.98,1208.21 1851.57,1205.67 1852.16,1204.29 1852.74,1201.65 1853.33,1201.77 1853.92,1202.01 1854.5,1202.55 1855.09,1202.67 1855.68,1200.55 1856.26,1202.6 1856.85,1204.98 1857.43,1206.43 1858.02,1206.68 1858.61,1207.14 1859.19,1207.19 1859.78,1207.22 1860.37,1208.57 1860.95,1207.27 1861.54,1207.13 1862.13,1205.87 1862.71,1205.72 1863.3,1204.41 1863.88,1203.24 1864.47,1203.24 1865.06,1203.86 1865.64,1202.76 1866.23,1201.59 1866.82,1202.61 1867.4,1202.92 1867.99,1198.93 1868.58,1200.66 1869.16,1207.47 1869.75,1208.94 1870.34,1210.45 1870.92,1208.64 1871.51,1204.83 1872.09,1204.78 1872.68,1202.32 1873.27,1202.91 1873.85,1200.44 1874.44,1200.94 1875.03,1198.82 1875.61,1201.8 1876.2,1199.59 1876.79,1201.46 1877.37,1204.34 1877.96,1204.8 1878.55,1204.83 1879.13,1203.62 1879.72,1208.88 1880.3,1210.18 1880.89,1203.72 1881.48,1203.77 1882.06,1202.87 1882.65,1202 1883.24,1202.33 1883.82,1204.05 1884.41,1205.4 1885,1204.32 1885.58,1204.92 1886.17,1205.04 1886.76,1203.9 1887.34,1204.05 1887.93,1203.24 1888.51,1203.39 1889.1,1207.41 1889.69,1207.29 1890.27,1206.2 1890.86,1204.88 1891.45,1204.19 1892.03,1204.33 1892.62,1204.29 1893.21,1206.96 1893.79,1207.06 1894.38,1204.41 1894.96,1203.41 1895.55,1205.02 1896.14,1205.03 1896.72,1205.04 1897.31,1204.97 1897.9,1207.7 1898.48,1206.36 1899.07,1206.24 1899.66,1207.57 1900.24,1207.57 1900.83,1207.42 1901.42,1207.38 1902,1208.46 1902.59,1207.19 1903.17,1207.62 1903.76,1210.1 1904.35,1209.93 1904.93,1207.31 1905.52,1207.44 1906.11,1207.31 1906.69,1203.4 1907.28,1204.77 1907.87,1206.39 1908.45,1207.62 1909.04,1210.35 1909.63,1208.65 1910.21,1207.25 1910.8,1211.12 1911.38,1209.74 1911.97,1211.09 1912.56,1210.72 1913.14,1210.62 1913.73,1210.37 1914.32,1211.41 1914.9,1214.91 1915.49,1214.46 1916.08,1216.47 1916.66,1216.21 1917.25,1215.66 1917.83,1216.44 1918.42,1214.74 1919.01,1215.83 1919.59,1215.41 1920.18,1213.86 1920.77,1214.7 1921.35,1212.84 1921.94,1212.72 1922.53,1212.77 1923.11,1213.77 1923.7,1213.58 1924.29,1213.41 1924.87,1213.15 1925.46,1214.13 1926.04,1213.57 1926.63,1211.94 1927.22,1211.65 1927.8,1208.96 1928.39,1206.16 1928.98,1206.09 1929.56,1207.38 1930.15,1205.84 1930.74,1203.28 1931.32,1204.79 1931.91,1203.82 1932.5,1200.16 1933.08,1198.92 1933.67,1200.74 1934.25,1199.78 1934.84,1202.98 1935.43,1203.1 1936.01,1202.36 1936.6,1202.4 1937.19,1206.6 1937.77,1205.29 1938.36,1206.93 1938.95,1208.18 1939.53,1207.92 1940.12,1206.28 1940.71,1208.81 1941.29,1209.98 1941.88,1210.88 1942.46,1210.75 1943.05,1209.45 1943.64,1210.49 1944.22,1210.32 1944.81,1209.93 1945.4,1207.12 1945.98,1208.35 1946.57,1204.55 1947.16,1202.08 1947.74,1202.11 1948.33,1203.37 1948.91,1203.41 1949.5,1203.81 1950.09,1205.08 1950.67,1205.36 1951.26,1206.76 1951.85,1207.62 1952.43,1207.54 1953.02,1206.3 1953.61,1208.84 1954.19,1212.51 1954.78,1216.06 1955.37,1212.91 1955.95,1212.46 1956.54,1211.04 1957.12,1210.44 1957.71,1207.63 1958.3,1211.21 1958.88,1212.18 1959.47,1211.88 1960.06,1211.54 1960.64,1207.3 1961.23,1207.35 1961.82,1207.24 1962.4,1205.69 1962.99,1202.11 1963.58,1203.84 1964.16,1206.63 1964.75,1205.53 1965.33,1204.41 1965.92,1205.96 1966.51,1204.72 1967.09,1203.58 1967.68,1205.23 1968.27,1204.06 1968.85,1200.45 1969.44,1200.56 1970.03,1199.74 1970.61,1202.88 1971.2,1202.02 1971.78,1203.73 1972.37,1203.86 1972.96,1203.96 1973.54,1201.87 1974.13,1202.38 1974.72,1201.33 1975.3,1200.24 1975.89,1200.81 1976.48,1202.44 1977.06,1205.35 1977.65,1205.46 1978.24,1205.29 1978.82,1208.02 1979.41,1205.18 1979.99,1207.69 1980.58,1208.85 1981.17,1212.55 1981.75,1210.98 1982.34,1208.32 1982.93,1209.25 1983.51,1207.93 1984.1,1207.95 1984.69,1206.31 1985.27,1207.98 1985.86,1207.77 1986.45,1207.97 1987.03,1211.42 1987.62,1213.48 1988.2,1210.83 1988.79,1205.74 1989.38,1204.66 1989.96,1204.92 1990.55,1201.4 1991.14,1201.81 1991.72,1199.53 1992.31,1199.87 1992.9,1200.28 1993.48,1201.93 1994.07,1200.91 1994.65,1199.62 1995.24,1202.75 1995.83,1201.46 1996.41,1201.91 1997,1202.16 1997.59,1198.52 1998.17,1199.17 1998.76,1199.62 1999.35,1200.13 1999.93,1201.91 2000.52,1202.29 2001.11,1202.34 2001.69,1201.44 2002.28,1201.67 2002.86,1201.02 2003.45,1202.84 2004.04,1204.63 2004.62,1204.96 2005.21,1205.41 2005.8,1205.42 2006.38,1204.3 2006.97,1206 2007.56,1207.65 2008.14,1210.33 2008.73,1209.13 2009.32,1208.8 2009.9,1208.9 2010.49,1210.22 2011.07,1208.93 2011.66,1209.05 2012.25,1207.68 2012.83,1207.76 2013.42,1206.65 2014.01,1205.12 2014.59,1203.83 2015.18,1203.84 2015.77,1206.67 2016.35,1206.7 2016.94,1206.53 2017.53,1204.07 2018.11,1204.5 2018.7,1203.14 2019.28,1204.51 2019.87,1201.08 2020.46,1204.07 2021.04,1204.1 2021.63,1204.41 2022.22,1204.6 2022.8,1204.69 2023.39,1204.86 2023.98,1205.01 2024.56,1205.11 2025.15,1205.11 2025.73,1205.23 2026.32,1205.4 2026.91,1205.57 2027.49,1205.77 2028.08,1208.33 2028.67,1210.87 2029.25,1210.83 2029.84,1210.56 2030.43,1211.55 2031.01,1210.1 2031.6,1211.38 2032.19,1211.15 2032.77,1212.08 2033.36,1214.47 2033.94,1212.48 2034.53,1214.89 2035.12,1211.86 2035.7,1212.04 2036.29,1210.56 2036.88,1210.13 2037.46,1212.57 2038.05,1213.72 2038.64,1214.76 2039.22,1215.76 2039.81,1216.83 2040.4,1217.65 2040.98,1218.33 2041.57,1214.94 2042.15,1211.89 2042.74,1211.6 2043.33,1213.87 2043.91,1213.79 2044.5,1211.09 2045.09,1210.9 2045.67,1210.92 2046.26,1212.06 2046.85,1210.62 2047.43,1210.38 2048.02,1212.85 2048.6,1213.92 2049.19,1213.45 2049.78,1213.06 2050.36,1214.27 2050.95,1216.38 2051.54,1213.48 2052.12,1217.06 2052.71,1215.14 2053.3,1213.12 2053.88,1211.51 2054.47,1209.85 2055.06,1211.03 2055.64,1212.1 2056.23,1207.65 2056.81,1207.71 2057.4,1207.49 2057.99,1207.46 2058.57,1207.14 2059.16,1208.42 2059.75,1208.23 2060.33,1208.08 2060.92,1208.08 2061.51,1207.79 2062.09,1207.3 2062.68,1208.72 2063.27,1209.83 2063.85,1210.09 2064.44,1210.13 2065.02,1210.07 2065.61,1211.25 2066.2,1207.39 2066.78,1207.4 2067.37,1203.18 2067.96,1204.64 2068.54,1207.51 2069.13,1210.18 2069.72,1213.76 2070.3,1213.36 2070.89,1214.24 2071.48,1216.46 2072.06,1215.88 2072.65,1215.7 2073.23,1216.46 2073.82,1214.57 2074.41,1213.9 2074.99,1212.32 2075.58,1213.39 2076.17,1214.01 2076.75,1215.18 2077.34,1212.25 2077.93,1212.08 2078.51,1211.54 2079.1,1211.21 2079.68,1207.09 2080.27,1205.71 2080.86,1206.96 2081.44,1205.52 2082.03,1206.67 2082.62,1208.03 2083.2,1207.96 2083.79,1206.58 2084.38,1206.47 2084.96,1206.39 2085.55,1205.14 2086.14,1205.19 2086.72,1206.34 2087.31,1206.37 2087.89,1203.87 2088.48,1205.67 2089.07,1205.33 2089.65,1202.79 2090.24,1201.92 2090.83,1201.89 2091.41,1202.24 2092,1201.14 2092.59,1197.48 2093.17,1196.85 2093.76,1200.17 2094.35,1196.83 2094.93,1195.84 2095.52,1196.19 2096.1,1198.17 2096.69,1198.48 2097.28,1197.59 2097.86,1196.83 2098.45,1197.36 2099.04,1198.11 2099.62,1197.53 2100.21,1199.25 2100.8,1198.69 2101.38,1199.26 2101.97,1199.46 2102.55,1201.13 2103.14,1200.12 2103.73,1203 2104.31,1205.76 2104.9,1205.93 2105.49,1207.3 2106.07,1207.1 2106.66,1208.14 2107.25,1209.68 2107.83,1210.87 2108.42,1211.67 2109.01,1210.28 2109.59,1211.34 2110.18,1212.41 2110.76,1213.58 2111.35,1212.35 2111.94,1213.29 2112.52,1211.61 2113.11,1212.94 2113.7,1215.23 2114.28,1216.12 2114.87,1214.26 2115.46,1215.04 2116.04,1214.62 2116.63,1215.36 2117.22,1216.44 2117.8,1216.06 2118.39,1216.87 2118.97,1216.52 2119.56,1217.3 2120.15,1216.63 2120.73,1213.57 2121.32,1214.55 2121.91,1214.14 2122.49,1212.58 2123.08,1211.06 2123.67,1209.5 2124.25,1207.91 2124.84,1207.58 2125.42,1206.01 2126.01,1205.97 2126.6,1204.76 2127.18,1206.26 2127.77,1207.32 2128.36,1208.78 2128.94,1208.58 2129.53,1208.55 2130.12,1205.94 2130.7,1206.02 2131.29,1205.86 2131.88,1205.97 2132.46,1205.97 2133.05,1205.95 2133.63,1209.9 2134.22,1208.14 2134.81,1208.19 2135.39,1209.64 2135.98,1210.74 2136.57,1210.72 2137.15,1209.21 2137.74,1209.22 2138.33,1210.11 2138.91,1209.81 2139.5,1207.27 2140.09,1206.02 2140.67,1207.27 2141.26,1207.16 2141.84,1206.8 2142.43,1208.12 2143.02,1206.71 2143.6,1210.69 2144.19,1210.45 2144.78,1209.23 2145.36,1206.56 2145.95,1206.61 2146.54,1209.27 2147.12,1208.84 2147.71,1206.33 2148.3,1206.27 2148.88,1206.31 2149.47,1207.6 2150.05,1206.21 2150.64,1203.75 2151.23,1203.79 2151.81,1206.58 2152.4,1204.15 2152.99,1203.18 2153.57,1203.15 2154.16,1200.68 2154.75,1199.59 2155.33,1200.15 2155.92,1200.53 2156.5,1199.4 2157.09,1204.67 2157.68,1207.04 2158.26,1204.39 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M986.025 1207.8 L986.612 1207.8 L987.198 1207.8 L987.785 1207.8 L988.371 1207.8 L988.957 1207.8 L989.544 1207.8 L990.13 1207.8 L990.717 1207.8 L991.303 1207.8 L991.889 1207.8 L992.476 1207.8 L993.062 1207.8 L993.649 1207.8 L994.235 1207.8 L994.822 1207.8 L995.408 1207.8 L995.994 1207.8 L996.581 1207.8 L997.167 1207.8 L997.754 1207.8 L998.34 1207.8 L998.926 1207.8 L999.513 1207.8 L1000.1 1207.8 L1000.69 1207.8 L1001.27 1207.8 L1001.86 1207.8 L1002.44 1207.8 L1003.03 1207.8 L1003.62 1207.8 L1004.2 1207.8 L1004.79 1207.8 L1005.38 1207.8 L1005.96 1207.8 L1006.55 1207.8 L1007.14 1207.8 L1007.72 1207.8 L1008.31 1207.8 L1008.9 1207.8 L1009.48 1207.8 L1010.07 1207.8 L1010.65 1207.8 L1011.24 1207.8 L1011.83 1207.8 L1012.41 1207.8 L1013 1207.8 L1013.59 1207.8 L1014.17 1207.8 L1014.76 1207.8 L1015.35 1207.8 L1015.93 1207.8 L1016.52 1207.8 L1017.11 1207.8 L1017.69 1207.8 L1018.28 1207.8 L1018.86 1207.8 L1019.45 1207.8 L1020.04 1207.8 L1020.62 1207.8 L1021.21 1207.8 L1021.8 1207.8 L1022.38 1207.8 L1022.97 1207.8 L1023.56 1207.8 L1024.14 1207.8 L1024.73 1207.8 L1025.32 1207.8 L1025.9 1207.8 L1026.49 1207.8 L1027.07 1207.8 L1027.66 1207.8 L1028.25 1207.8 L1028.83 1207.8 L1029.42 1207.8 L1030.01 1207.8 L1030.59 1207.8 L1031.18 1207.8 L1031.77 1207.8 L1032.35 1207.8 L1032.94 1207.8 L1033.52 1207.8 L1034.11 1207.8 L1034.7 1207.8 L1035.28 1207.8 L1035.87 1207.8 L1036.46 1207.8 L1037.04 1207.8 L1037.63 1207.8 L1038.22 1207.8 L1038.8 1207.8 L1039.39 1207.8 L1039.98 1207.8 L1040.56 1207.8 L1041.15 1207.8 L1041.73 1207.8 L1042.32 1207.8 L1042.91 1207.8 L1043.49 1207.8 L1044.08 1207.8 L1044.67 1207.8 L1045.25 1207.8 L1045.84 1207.8 L1046.43 1207.8 L1047.01 1207.8 L1047.6 1207.8 L1048.19 1207.8 L1048.77 1207.8 L1049.36 1207.8 L1049.94 1207.8 L1050.53 1207.8 L1051.12 1207.8 L1051.7 1207.8 L1052.29 1207.8 L1052.88 1207.8 L1053.46 1207.8 L1054.05 1207.8 L1054.64 1207.8 L1055.22 1207.8 L1055.81 1207.8 L1056.39 1207.8 L1056.98 1207.8 L1057.57 1207.8 L1058.15 1207.8 L1058.74 1207.8 L1059.33 1207.8 L1059.91 1207.8 L1060.5 1207.8 L1061.09 1207.8 L1061.67 1207.8 L1062.26 1207.8 L1062.85 1207.8 L1063.43 1207.8 L1064.02 1207.8 L1064.6 1207.8 L1065.19 1207.8 L1065.78 1207.8 L1066.36 1207.8 L1066.95 1207.8 L1067.54 1207.8 L1068.12 1207.8 L1068.71 1207.8 L1069.3 1207.8 L1069.88 1207.8 L1070.47 1207.8 L1071.06 1207.8 L1071.64 1207.8 L1072.23 1207.8 L1072.81 1207.8 L1073.4 1207.8 L1073.99 1207.8 L1074.57 1207.8 L1075.16 1207.8 L1075.75 1207.8 L1076.33 1207.8 L1076.92 1207.8 L1077.51 1207.8 L1078.09 1207.8 L1078.68 1207.8 L1079.26 1207.8 L1079.85 1207.8 L1080.44 1207.8 L1081.02 1207.8 L1081.61 1207.8 L1082.2 1207.8 L1082.78 1207.8 L1083.37 1207.8 L1083.96 1207.8 L1084.54 1207.8 L1085.13 1207.8 L1085.72 1207.8 L1086.3 1207.8 L1086.89 1207.8 L1087.47 1207.8 L1088.06 1207.8 L1088.65 1207.8 L1089.23 1207.8 L1089.82 1207.8 L1090.41 1207.8 L1090.99 1207.8 L1091.58 1207.8 L1092.17 1207.8 L1092.75 1207.8 L1093.34 1207.8 L1093.93 1207.8 L1094.51 1207.8 L1095.1 1207.8 L1095.68 1207.8 L1096.27 1207.8 L1096.86 1207.8 L1097.44 1207.8 L1098.03 1207.8 L1098.62 1207.8 L1099.2 1207.8 L1099.79 1207.8 L1100.38 1207.8 L1100.96 1207.8 L1101.55 1207.8 L1102.14 1207.8 L1102.72 1207.8 L1103.31 1207.8 L1103.89 1207.8 L1104.48 1207.8 L1105.07 1207.8 L1105.65 1207.8 L1106.24 1207.8 L1106.83 1207.8 L1107.41 1207.8 L1108 1207.8 L1108.59 1207.8 L1109.17 1207.8 L1109.76 1207.8 L1110.34 1207.8 L1110.93 1207.8 L1111.52 1207.8 L1112.1 1207.8 L1112.69 1207.8 L1113.28 1207.8 L1113.86 1207.8 L1114.45 1207.8 L1115.04 1207.8 L1115.62 1207.8 L1116.21 1207.8 L1116.8 1207.8 L1117.38 1207.8 L1117.97 1207.8 L1118.55 1207.8 L1119.14 1207.8 L1119.73 1207.8 L1120.31 1207.8 L1120.9 1207.8 L1121.49 1207.8 L1122.07 1207.8 L1122.66 1207.8 L1123.25 1207.8 L1123.83 1207.8 L1124.42 1207.8 L1125.01 1207.8 L1125.59 1207.8 L1126.18 1207.8 L1126.76 1207.8 L1127.35 1207.8 L1127.94 1207.8 L1128.52 1207.8 L1129.11 1207.8 L1129.7 1207.8 L1130.28 1207.8 L1130.87 1207.8 L1131.46 1207.8 L1132.04 1207.8 L1132.63 1207.8 L1133.21 1207.8 L1133.8 1207.8 L1134.39 1207.8 L1134.97 1207.8 L1135.56 1207.8 L1136.15 1207.8 L1136.73 1207.8 L1137.32 1207.8 L1137.91 1207.8 L1138.49 1207.8 L1139.08 1207.8 L1139.67 1207.8 L1140.25 1207.8 L1140.84 1207.8 L1141.42 1207.8 L1142.01 1207.8 L1142.6 1207.8 L1143.18 1207.8 L1143.77 1207.8 L1144.36 1207.8 L1144.94 1207.8 L1145.53 1207.8 L1146.12 1207.8 L1146.7 1207.8 L1147.29 1207.8 L1147.88 1207.8 L1148.46 1207.8 L1149.05 1207.8 L1149.63 1207.8 L1150.22 1207.8 L1150.81 1207.8 L1151.39 1207.8 L1151.98 1207.8 L1152.57 1207.8 L1153.15 1207.8 L1153.74 1207.8 L1154.33 1207.8 L1154.91 1207.8 L1155.5 1207.8 L1156.09 1207.8 L1156.67 1207.8 L1157.26 1207.8 L1157.84 1207.8 L1158.43 1207.8 L1159.02 1207.8 L1159.6 1207.8 L1160.19 1207.8 L1160.78 1207.8 L1161.36 1207.8 L1161.95 1207.8 L1162.54 1207.8 L1163.12 1207.8 L1163.71 1207.8 L1164.29 1207.8 L1164.88 1207.8 L1165.47 1207.8 L1166.05 1207.8 L1166.64 1207.8 L1167.23 1207.8 L1167.81 1207.8 L1168.4 1207.8 L1168.99 1207.8 L1169.57 1207.8 L1170.16 1207.8 L1170.75 1207.8 L1171.33 1207.8 L1171.92 1207.8 L1172.5 1207.8 L1173.09 1207.8 L1173.68 1207.8 L1174.26 1207.8 L1174.85 1207.8 L1175.44 1207.8 L1176.02 1207.8 L1176.61 1207.8 L1177.2 1207.8 L1177.78 1207.8 L1178.37 1207.8 L1178.96 1207.8 L1179.54 1207.8 L1180.13 1207.8 L1180.71 1207.8 L1181.3 1207.8 L1181.89 1207.8 L1182.47 1207.8 L1183.06 1207.8 L1183.65 1207.8 L1184.23 1207.8 L1184.82 1207.8 L1185.41 1207.8 L1185.99 1207.8 L1186.58 1207.8 L1187.16 1207.8 L1187.75 1207.8 L1188.34 1207.8 L1188.92 1207.8 L1189.51 1207.8 L1190.1 1207.8 L1190.68 1207.8 L1191.27 1207.8 L1191.86 1207.8 L1192.44 1207.8 L1193.03 1207.8 L1193.62 1207.8 L1194.2 1207.8 L1194.79 1207.8 L1195.37 1207.8 L1195.96 1207.8 L1196.55 1207.8 L1197.13 1207.8 L1197.72 1207.8 L1198.31 1207.8 L1198.89 1207.8 L1199.48 1207.8 L1200.07 1207.8 L1200.65 1207.8 L1201.24 1207.8 L1201.83 1207.8 L1202.41 1207.8 L1203 1207.8 L1203.58 1207.8 L1204.17 1207.8 L1204.76 1207.8 L1205.34 1207.8 L1205.93 1207.8 L1206.52 1207.8 L1207.1 1207.8 L1207.69 1207.8 L1208.28 1207.8 L1208.86 1207.8 L1209.45 1207.8 L1210.03 1207.8 L1210.62 1207.8 L1211.21 1207.8 L1211.79 1207.8 L1212.38 1207.8 L1212.97 1207.8 L1213.55 1207.8 L1214.14 1207.8 L1214.73 1207.8 L1215.31 1207.8 L1215.9 1207.8 L1216.49 1207.8 L1217.07 1207.8 L1217.66 1207.8 L1218.24 1207.8 L1218.83 1207.8 L1219.42 1207.8 L1220 1207.8 L1220.59 1207.8 L1221.18 1207.8 L1221.76 1207.8 L1222.35 1207.8 L1222.94 1207.8 L1223.52 1207.8 L1224.11 1207.8 L1224.7 1207.8 L1225.28 1207.8 L1225.87 1207.8 L1226.45 1207.8 L1227.04 1207.8 L1227.63 1207.8 L1228.21 1207.8 L1228.8 1207.8 L1229.39 1207.8 L1229.97 1207.8 L1230.56 1207.8 L1231.15 1207.8 L1231.73 1207.8 L1232.32 1207.8 L1232.91 1207.8 L1233.49 1207.8 L1234.08 1207.8 L1234.66 1207.8 L1235.25 1207.8 L1235.84 1207.8 L1236.42 1207.8 L1237.01 1207.8 L1237.6 1207.8 L1238.18 1207.8 L1238.77 1207.8 L1239.36 1207.8 L1239.94 1207.8 L1240.53 1207.8 L1241.11 1207.8 L1241.7 1207.8 L1242.29 1207.8 L1242.87 1207.8 L1243.46 1207.8 L1244.05 1207.8 L1244.63 1207.8 L1245.22 1207.8 L1245.81 1207.8 L1246.39 1207.8 L1246.98 1207.8 L1247.57 1207.8 L1248.15 1207.8 L1248.74 1207.8 L1249.32 1207.8 L1249.91 1207.8 L1250.5 1207.8 L1251.08 1207.8 L1251.67 1207.8 L1252.26 1207.8 L1252.84 1207.8 L1253.43 1207.8 L1254.02 1207.8 L1254.6 1207.8 L1255.19 1207.8 L1255.78 1207.8 L1256.36 1207.8 L1256.95 1207.8 L1257.53 1207.8 L1258.12 1207.8 L1258.71 1207.8 L1259.29 1207.8 L1259.88 1207.8 L1260.47 1207.8 L1261.05 1207.8 L1261.64 1207.8 L1262.23 1207.8 L1262.81 1207.8 L1263.4 1207.8 L1263.98 1207.8 L1264.57 1207.8 L1265.16 1207.8 L1265.74 1207.8 L1266.33 1207.8 L1266.92 1207.8 L1267.5 1207.8 L1268.09 1207.8 L1268.68 1207.8 L1269.26 1207.8 L1269.85 1207.8 L1270.44 1207.8 L1271.02 1207.8 L1271.61 1207.8 L1272.19 1207.8 L1272.78 1207.8 L1273.37 1207.8 L1273.95 1207.8 L1274.54 1207.8 L1275.13 1207.8 L1275.71 1207.8 L1276.3 1207.8 L1276.89 1207.8 L1277.47 1207.8 L1278.06 1207.8 L1278.65 1207.8 L1279.23 1207.8 L1279.82 1207.8 L1280.4 1207.8 L1280.99 1207.8 L1281.58 1207.8 L1282.16 1207.8 L1282.75 1207.8 L1283.34 1207.8 L1283.92 1207.8 L1284.51 1207.8 L1285.1 1207.8 L1285.68 1207.8 L1286.27 1207.8 L1286.86 1207.8 L1287.44 1207.8 L1288.03 1207.8 L1288.61 1207.8 L1289.2 1207.8 L1289.79 1207.8 L1290.37 1207.8 L1290.96 1207.8 L1291.55 1207.8 L1292.13 1207.8 L1292.72 1207.8 L1293.31 1207.8 L1293.89 1207.8 L1294.48 1207.8 L1295.06 1207.8 L1295.65 1207.8 L1296.24 1207.8 L1296.82 1207.8 L1297.41 1207.8 L1298 1207.8 L1298.58 1207.8 L1299.17 1207.8 L1299.76 1207.8 L1300.34 1207.8 L1300.93 1207.8 L1301.52 1207.8 L1302.1 1207.8 L1302.69 1207.8 L1303.27 1207.8 L1303.86 1207.8 L1304.45 1207.8 L1305.03 1207.8 L1305.62 1207.8 L1306.21 1207.8 L1306.79 1207.8 L1307.38 1207.8 L1307.97 1207.8 L1308.55 1207.8 L1309.14 1207.8 L1309.73 1207.8 L1310.31 1207.8 L1310.9 1207.8 L1311.48 1207.8 L1312.07 1207.8 L1312.66 1207.8 L1313.24 1207.8 L1313.83 1207.8 L1314.42 1207.8 L1315 1207.8 L1315.59 1207.8 L1316.18 1207.8 L1316.76 1207.8 L1317.35 1207.8 L1317.93 1207.8 L1318.52 1207.8 L1319.11 1207.8 L1319.69 1207.8 L1320.28 1207.8 L1320.87 1207.8 L1321.45 1207.8 L1322.04 1207.8 L1322.63 1207.8 L1323.21 1207.8 L1323.8 1207.8 L1324.39 1207.8 L1324.97 1207.8 L1325.56 1207.8 L1326.14 1207.8 L1326.73 1207.8 L1327.32 1207.8 L1327.9 1207.8 L1328.49 1207.8 L1329.08 1207.8 L1329.66 1207.8 L1330.25 1207.8 L1330.84 1207.8 L1331.42 1207.8 L1332.01 1207.8 L1332.6 1207.8 L1333.18 1207.8 L1333.77 1207.8 L1334.35 1207.8 L1334.94 1207.8 L1335.53 1207.8 L1336.11 1207.8 L1336.7 1207.8 L1337.29 1207.8 L1337.87 1207.8 L1338.46 1207.8 L1339.05 1207.8 L1339.63 1207.8 L1340.22 1207.8 L1340.8 1207.8 L1341.39 1207.8 L1341.98 1207.8 L1342.56 1207.8 L1343.15 1207.8 L1343.74 1207.8 L1344.32 1207.8 L1344.91 1207.8 L1345.5 1207.8 L1346.08 1207.8 L1346.67 1207.8 L1347.26 1207.8 L1347.84 1207.8 L1348.43 1207.8 L1349.01 1207.8 L1349.6 1207.8 L1350.19 1207.8 L1350.77 1207.8 L1351.36 1207.8 L1351.95 1207.8 L1352.53 1207.8 L1353.12 1207.8 L1353.71 1207.8 L1354.29 1207.8 L1354.88 1207.8 L1355.47 1207.8 L1356.05 1207.8 L1356.64 1207.8 L1357.22 1207.8 L1357.81 1207.8 L1358.4 1207.8 L1358.98 1207.8 L1359.57 1207.8 L1360.16 1207.8 L1360.74 1207.8 L1361.33 1207.8 L1361.92 1207.8 L1362.5 1207.8 L1363.09 1207.8 L1363.68 1207.8 L1364.26 1207.8 L1364.85 1207.8 L1365.43 1207.8 L1366.02 1207.8 L1366.61 1207.8 L1367.19 1207.8 L1367.78 1207.8 L1368.37 1207.8 L1368.95 1207.8 L1369.54 1207.8 L1370.13 1207.8 L1370.71 1207.8 L1371.3 1207.8 L1371.88 1207.8 L1372.47 1207.8 L1373.06 1207.8 L1373.64 1207.8 L1374.23 1207.8 L1374.82 1207.8 L1375.4 1207.8 L1375.99 1207.8 L1376.58 1207.8 L1377.16 1207.8 L1377.75 1207.8 L1378.34 1207.8 L1378.92 1207.8 L1379.51 1207.8 L1380.09 1207.8 L1380.68 1207.8 L1381.27 1207.8 L1381.85 1207.8 L1382.44 1207.8 L1383.03 1207.8 L1383.61 1207.8 L1384.2 1207.8 L1384.79 1207.8 L1385.37 1207.8 L1385.96 1207.8 L1386.55 1207.8 L1387.13 1207.8 L1387.72 1207.8 L1388.3 1207.8 L1388.89 1207.8 L1389.48 1207.8 L1390.06 1207.8 L1390.65 1207.8 L1391.24 1207.8 L1391.82 1207.8 L1392.41 1207.8 L1393 1207.8 L1393.58 1207.8 L1394.17 1207.8 L1394.75 1207.8 L1395.34 1207.8 L1395.93 1207.8 L1396.51 1207.8 L1397.1 1207.8 L1397.69 1207.8 L1398.27 1207.8 L1398.86 1207.8 L1399.45 1207.8 L1400.03 1207.8 L1400.62 1207.8 L1401.21 1207.8 L1401.79 1207.8 L1402.38 1207.8 L1402.96 1207.8 L1403.55 1207.8 L1404.14 1207.8 L1404.72 1207.8 L1405.31 1207.8 L1405.9 1207.8 L1406.48 1207.8 L1407.07 1207.8 L1407.66 1207.8 L1408.24 1207.8 L1408.83 1207.8 L1409.42 1207.8 L1410 1207.8 L1410.59 1207.8 L1411.17 1207.8 L1411.76 1207.8 L1412.35 1207.8 L1412.93 1207.8 L1413.52 1207.8 L1414.11 1207.8 L1414.69 1207.8 L1415.28 1207.8 L1415.87 1207.8 L1416.45 1207.8 L1417.04 1207.8 L1417.63 1207.8 L1418.21 1207.8 L1418.8 1207.8 L1419.38 1207.8 L1419.97 1207.8 L1420.56 1207.8 L1421.14 1207.8 L1421.73 1207.8 L1422.32 1207.8 L1422.9 1207.8 L1423.49 1207.8 L1424.08 1207.8 L1424.66 1207.8 L1425.25 1207.8 L1425.83 1207.8 L1426.42 1207.8 L1427.01 1207.8 L1427.59 1207.8 L1428.18 1207.8 L1428.77 1207.8 L1429.35 1207.8 L1429.94 1207.8 L1430.53 1207.8 L1431.11 1207.8 L1431.7 1207.8 L1432.29 1207.8 L1432.87 1207.8 L1433.46 1207.8 L1434.04 1207.8 L1434.63 1207.8 L1435.22 1207.8 L1435.8 1207.8 L1436.39 1207.8 L1436.98 1207.8 L1437.56 1207.8 L1438.15 1207.8 L1438.74 1207.8 L1439.32 1207.8 L1439.91 1207.8 L1440.5 1207.8 L1441.08 1207.8 L1441.67 1207.8 L1442.25 1207.8 L1442.84 1207.8 L1443.43 1207.8 L1444.01 1207.8 L1444.6 1207.8 L1445.19 1207.8 L1445.77 1207.8 L1446.36 1207.8 L1446.95 1207.8 L1447.53 1207.8 L1448.12 1207.8 L1448.7 1207.8 L1449.29 1207.8 L1449.88 1207.8 L1450.46 1207.8 L1451.05 1207.8 L1451.64 1207.8 L1452.22 1207.8 L1452.81 1207.8 L1453.4 1207.8 L1453.98 1207.8 L1454.57 1207.8 L1455.16 1207.8 L1455.74 1207.8 L1456.33 1207.8 L1456.91 1207.8 L1457.5 1207.8 L1458.09 1207.8 L1458.67 1207.8 L1459.26 1207.8 L1459.85 1207.8 L1460.43 1207.8 L1461.02 1207.8 L1461.61 1207.8 L1462.19 1207.8 L1462.78 1207.8 L1463.37 1207.8 L1463.95 1207.8 L1464.54 1207.8 L1465.12 1207.8 L1465.71 1207.8 L1466.3 1207.8 L1466.88 1207.8 L1467.47 1207.8 L1468.06 1207.8 L1468.64 1207.8 L1469.23 1207.8 L1469.82 1207.8 L1470.4 1207.8 L1470.99 1207.8 L1471.57 1207.8 L1472.16 1207.8 L1472.75 1207.8 L1473.33 1207.8 L1473.92 1207.8 L1474.51 1207.8 L1475.09 1207.8 L1475.68 1207.8 L1476.27 1207.8 L1476.85 1207.8 L1477.44 1207.8 L1478.03 1207.8 L1478.61 1207.8 L1479.2 1207.8 L1479.78 1207.8 L1480.37 1207.8 L1480.96 1207.8 L1481.54 1207.8 L1482.13 1207.8 L1482.72 1207.8 L1483.3 1207.8 L1483.89 1207.8 L1484.48 1207.8 L1485.06 1207.8 L1485.65 1207.8 L1486.24 1207.8 L1486.82 1207.8 L1487.41 1207.8 L1487.99 1207.8 L1488.58 1207.8 L1489.17 1207.8 L1489.75 1207.8 L1490.34 1207.8 L1490.93 1207.8 L1491.51 1207.8 L1492.1 1207.8 L1492.69 1207.8 L1493.27 1207.8 L1493.86 1207.8 L1494.45 1207.8 L1495.03 1207.8 L1495.62 1207.8 L1496.2 1207.8 L1496.79 1207.8 L1497.38 1207.8 L1497.96 1207.8 L1498.55 1207.8 L1499.14 1207.8 L1499.72 1207.8 L1500.31 1207.8 L1500.9 1207.8 L1501.48 1207.8 L1502.07 1207.8 L1502.65 1207.8 L1503.24 1207.8 L1503.83 1207.8 L1504.41 1207.8 L1505 1207.8 L1505.59 1207.8 L1506.17 1207.8 L1506.76 1207.8 L1507.35 1207.8 L1507.93 1207.8 L1508.52 1207.8 L1509.11 1207.8 L1509.69 1207.8 L1510.28 1207.8 L1510.86 1207.8 L1511.45 1207.8 L1512.04 1207.8 L1512.62 1207.8 L1513.21 1207.8 L1513.8 1207.8 L1514.38 1207.8 L1514.97 1207.8 L1515.56 1207.8 L1516.14 1207.8 L1516.73 1207.8 L1517.32 1207.8 L1517.9 1207.8 L1518.49 1207.8 L1519.07 1207.8 L1519.66 1207.8 L1520.25 1207.8 L1520.83 1207.8 L1521.42 1207.8 L1522.01 1207.8 L1522.59 1207.8 L1523.18 1207.8 L1523.77 1207.8 L1524.35 1207.8 L1524.94 1207.8 L1525.52 1207.8 L1526.11 1207.8 L1526.7 1207.8 L1527.28 1207.8 L1527.87 1207.8 L1528.46 1207.8 L1529.04 1207.8 L1529.63 1207.8 L1530.22 1207.8 L1530.8 1207.8 L1531.39 1207.8 L1531.98 1207.8 L1532.56 1207.8 L1533.15 1207.8 L1533.73 1207.8 L1534.32 1207.8 L1534.91 1207.8 L1535.49 1207.8 L1536.08 1207.8 L1536.67 1207.8 L1537.25 1207.8 L1537.84 1207.8 L1538.43 1207.8 L1539.01 1207.8 L1539.6 1207.8 L1540.19 1207.8 L1540.77 1207.8 L1541.36 1207.8 L1541.94 1207.8 L1542.53 1207.8 L1543.12 1207.8 L1543.7 1207.8 L1544.29 1207.8 L1544.88 1207.8 L1545.46 1207.8 L1546.05 1207.8 L1546.64 1207.8 L1547.22 1207.8 L1547.81 1207.8 L1548.4 1207.8 L1548.98 1207.8 L1549.57 1207.8 L1550.15 1207.8 L1550.74 1207.8 L1551.33 1207.8 L1551.91 1207.8 L1552.5 1207.8 L1553.09 1207.8 L1553.67 1207.8 L1554.26 1207.8 L1554.85 1207.8 L1555.43 1207.8 L1556.02 1207.8 L1556.6 1207.8 L1557.19 1207.8 L1557.78 1207.8 L1558.36 1207.8 L1558.95 1207.8 L1559.54 1207.8 L1560.12 1207.8 L1560.71 1207.8 L1561.3 1207.8 L1561.88 1207.8 L1562.47 1207.8 L1563.06 1207.8 L1563.64 1207.8 L1564.23 1207.8 L1564.81 1207.8 L1565.4 1207.8 L1565.99 1207.8 L1566.57 1207.8 L1567.16 1207.8 L1567.75 1207.8 L1568.33 1207.8 L1568.92 1207.8 L1569.51 1207.8 L1570.09 1207.8 L1570.68 1207.8 L1571.27 1207.8 L1571.85 1207.8 L1572.44 1207.8 L1573.02 1207.8 L1573.61 1207.8 L1574.2 1207.8 L1574.78 1207.8 L1575.37 1207.8 L1575.96 1207.8 L1576.54 1207.8 L1577.13 1207.8 L1577.72 1207.8 L1578.3 1207.8 L1578.89 1207.8 L1579.47 1207.8 L1580.06 1207.8 L1580.65 1207.8 L1581.23 1207.8 L1581.82 1207.8 L1582.41 1207.8 L1582.99 1207.8 L1583.58 1207.8 L1584.17 1207.8 L1584.75 1207.8 L1585.34 1207.8 L1585.93 1207.8 L1586.51 1207.8 L1587.1 1207.8 L1587.68 1207.8 L1588.27 1207.8 L1588.86 1207.8 L1589.44 1207.8 L1590.03 1207.8 L1590.62 1207.8 L1591.2 1207.8 L1591.79 1207.8 L1592.38 1207.8 L1592.96 1207.8 L1593.55 1207.8 L1594.14 1207.8 L1594.72 1207.8 L1595.31 1207.8 L1595.89 1207.8 L1596.48 1207.8 L1597.07 1207.8 L1597.65 1207.8 L1598.24 1207.8 L1598.83 1207.8 L1599.41 1207.8 L1600 1207.8 L1600.59 1207.8 L1601.17 1207.8 L1601.76 1207.8 L1602.34 1207.8 L1602.93 1207.8 L1603.52 1207.8 L1604.1 1207.8 L1604.69 1207.8 L1605.28 1207.8 L1605.86 1207.8 L1606.45 1207.8 L1607.04 1207.8 L1607.62 1207.8 L1608.21 1207.8 L1608.8 1207.8 L1609.38 1207.8 L1609.97 1207.8 L1610.55 1207.8 L1611.14 1207.8 L1611.73 1207.8 L1612.31 1207.8 L1612.9 1207.8 L1613.49 1207.8 L1614.07 1207.8 L1614.66 1207.8 L1615.25 1207.8 L1615.83 1207.8 L1616.42 1207.8 L1617.01 1207.8 L1617.59 1207.8 L1618.18 1207.8 L1618.76 1207.8 L1619.35 1207.8 L1619.94 1207.8 L1620.52 1207.8 L1621.11 1207.8 L1621.7 1207.8 L1622.28 1207.8 L1622.87 1207.8 L1623.46 1207.8 L1624.04 1207.8 L1624.63 1207.8 L1625.22 1207.8 L1625.8 1207.8 L1626.39 1207.8 L1626.97 1207.8 L1627.56 1207.8 L1628.15 1207.8 L1628.73 1207.8 L1629.32 1207.8 L1629.91 1207.8 L1630.49 1207.8 L1631.08 1207.8 L1631.67 1207.8 L1632.25 1207.8 L1632.84 1207.8 L1633.42 1207.8 L1634.01 1207.8 L1634.6 1207.8 L1635.18 1207.8 L1635.77 1207.8 L1636.36 1207.8 L1636.94 1207.8 L1637.53 1207.8 L1638.12 1207.8 L1638.7 1207.8 L1639.29 1207.8 L1639.88 1207.8 L1640.46 1207.8 L1641.05 1207.8 L1641.63 1207.8 L1642.22 1207.8 L1642.81 1207.8 L1643.39 1207.8 L1643.98 1207.8 L1644.57 1207.8 L1645.15 1207.8 L1645.74 1207.8 L1646.33 1207.8 L1646.91 1207.8 L1647.5 1207.8 L1648.09 1207.8 L1648.67 1207.8 L1649.26 1207.8 L1649.84 1207.8 L1650.43 1207.8 L1651.02 1207.8 L1651.6 1207.8 L1652.19 1207.8 L1652.78 1207.8 L1653.36 1207.8 L1653.95 1207.8 L1654.54 1207.8 L1655.12 1207.8 L1655.71 1207.8 L1656.29 1207.8 L1656.88 1207.8 L1657.47 1207.8 L1658.05 1207.8 L1658.64 1207.8 L1659.23 1207.8 L1659.81 1207.8 L1660.4 1207.8 L1660.99 1207.8 L1661.57 1207.8 L1662.16 1207.8 L1662.75 1207.8 L1663.33 1207.8 L1663.92 1207.8 L1664.5 1207.8 L1665.09 1207.8 L1665.68 1207.8 L1666.26 1207.8 L1666.85 1207.8 L1667.44 1207.8 L1668.02 1207.8 L1668.61 1207.8 L1669.2 1207.8 L1669.78 1207.8 L1670.37 1207.8 L1670.96 1207.8 L1671.54 1207.8 L1672.13 1207.8 L1672.71 1207.8 L1673.3 1207.8 L1673.89 1207.8 L1674.47 1207.8 L1675.06 1207.8 L1675.65 1207.8 L1676.23 1207.8 L1676.82 1207.8 L1677.41 1207.8 L1677.99 1207.8 L1678.58 1207.8 L1679.17 1207.8 L1679.75 1207.8 L1680.34 1207.8 L1680.92 1207.8 L1681.51 1207.8 L1682.1 1207.8 L1682.68 1207.8 L1683.27 1207.8 L1683.86 1207.8 L1684.44 1207.8 L1685.03 1207.8 L1685.62 1207.8 L1686.2 1207.8 L1686.79 1207.8 L1687.37 1207.8 L1687.96 1207.8 L1688.55 1207.8 L1689.13 1207.8 L1689.72 1207.8 L1690.31 1207.8 L1690.89 1207.8 L1691.48 1207.8 L1692.07 1207.8 L1692.65 1207.8 L1693.24 1207.8 L1693.83 1207.8 L1694.41 1207.8 L1695 1207.8 L1695.58 1207.8 L1696.17 1207.8 L1696.76 1207.8 L1697.34 1207.8 L1697.93 1207.8 L1698.52 1207.8 L1699.1 1207.8 L1699.69 1207.8 L1700.28 1207.8 L1700.86 1207.8 L1701.45 1207.8 L1702.04 1207.8 L1702.62 1207.8 L1703.21 1207.8 L1703.79 1207.8 L1704.38 1207.8 L1704.97 1207.8 L1705.55 1207.8 L1706.14 1207.8 L1706.73 1207.8 L1707.31 1207.8 L1707.9 1207.8 L1708.49 1207.8 L1709.07 1207.8 L1709.66 1207.8 L1710.24 1207.8 L1710.83 1207.8 L1711.42 1207.8 L1712 1207.8 L1712.59 1207.8 L1713.18 1207.8 L1713.76 1207.8 L1714.35 1207.8 L1714.94 1207.8 L1715.52 1207.8 L1716.11 1207.8 L1716.7 1207.8 L1717.28 1207.8 L1717.87 1207.8 L1718.45 1207.8 L1719.04 1207.8 L1719.63 1207.8 L1720.21 1207.8 L1720.8 1207.8 L1721.39 1207.8 L1721.97 1207.8 L1722.56 1207.8 L1723.15 1207.8 L1723.73 1207.8 L1724.32 1207.8 L1724.91 1207.8 L1725.49 1207.8 L1726.08 1207.8 L1726.66 1207.8 L1727.25 1207.8 L1727.84 1207.8 L1728.42 1207.8 L1729.01 1207.8 L1729.6 1207.8 L1730.18 1207.8 L1730.77 1207.8 L1731.36 1207.8 L1731.94 1207.8 L1732.53 1207.8 L1733.11 1207.8 L1733.7 1207.8 L1734.29 1207.8 L1734.87 1207.8 L1735.46 1207.8 L1736.05 1207.8 L1736.63 1207.8 L1737.22 1207.8 L1737.81 1207.8 L1738.39 1207.8 L1738.98 1207.8 L1739.57 1207.8 L1740.15 1207.8 L1740.74 1207.8 L1741.32 1207.8 L1741.91 1207.8 L1742.5 1207.8 L1743.08 1207.8 L1743.67 1207.8 L1744.26 1207.8 L1744.84 1207.8 L1745.43 1207.8 L1746.02 1207.8 L1746.6 1207.8 L1747.19 1207.8 L1747.78 1207.8 L1748.36 1207.8 L1748.95 1207.8 L1749.53 1207.8 L1750.12 1207.8 L1750.71 1207.8 L1751.29 1207.8 L1751.88 1207.8 L1752.47 1207.8 L1753.05 1207.8 L1753.64 1207.8 L1754.23 1207.8 L1754.81 1207.8 L1755.4 1207.8 L1755.99 1207.8 L1756.57 1207.8 L1757.16 1207.8 L1757.74 1207.8 L1758.33 1207.8 L1758.92 1207.8 L1759.5 1207.8 L1760.09 1207.8 L1760.68 1207.8 L1761.26 1207.8 L1761.85 1207.8 L1762.44 1207.8 L1763.02 1207.8 L1763.61 1207.8 L1764.19 1207.8 L1764.78 1207.8 L1765.37 1207.8 L1765.95 1207.8 L1766.54 1207.8 L1767.13 1207.8 L1767.71 1207.8 L1768.3 1207.8 L1768.89 1207.8 L1769.47 1207.8 L1770.06 1207.8 L1770.65 1207.8 L1771.23 1207.8 L1771.82 1207.8 L1772.4 1207.8 L1772.99 1207.8 L1773.58 1207.8 L1774.16 1207.8 L1774.75 1207.8 L1775.34 1207.8 L1775.92 1207.8 L1776.51 1207.8 L1777.1 1207.8 L1777.68 1207.8 L1778.27 1207.8 L1778.86 1207.8 L1779.44 1207.8 L1780.03 1207.8 L1780.61 1207.8 L1781.2 1207.8 L1781.79 1207.8 L1782.37 1207.8 L1782.96 1207.8 L1783.55 1207.8 L1784.13 1207.8 L1784.72 1207.8 L1785.31 1207.8 L1785.89 1207.8 L1786.48 1207.8 L1787.06 1207.8 L1787.65 1207.8 L1788.24 1207.8 L1788.82 1207.8 L1789.41 1207.8 L1790 1207.8 L1790.58 1207.8 L1791.17 1207.8 L1791.76 1207.8 L1792.34 1207.8 L1792.93 1207.8 L1793.52 1207.8 L1794.1 1207.8 L1794.69 1207.8 L1795.27 1207.8 L1795.86 1207.8 L1796.45 1207.8 L1797.03 1207.8 L1797.62 1207.8 L1798.21 1207.8 L1798.79 1207.8 L1799.38 1207.8 L1799.97 1207.8 L1800.55 1207.8 L1801.14 1207.8 L1801.73 1207.8 L1802.31 1207.8 L1802.9 1207.8 L1803.48 1207.8 L1804.07 1207.8 L1804.66 1207.8 L1805.24 1207.8 L1805.83 1207.8 L1806.42 1207.8 L1807 1207.8 L1807.59 1207.8 L1808.18 1207.8 L1808.76 1207.8 L1809.35 1207.8 L1809.94 1207.8 L1810.52 1207.8 L1811.11 1207.8 L1811.69 1207.8 L1812.28 1207.8 L1812.87 1207.8 L1813.45 1207.8 L1814.04 1207.8 L1814.63 1207.8 L1815.21 1207.8 L1815.8 1207.8 L1816.39 1207.8 L1816.97 1207.8 L1817.56 1207.8 L1818.14 1207.8 L1818.73 1207.8 L1819.32 1207.8 L1819.9 1207.8 L1820.49 1207.8 L1821.08 1207.8 L1821.66 1207.8 L1822.25 1207.8 L1822.84 1207.8 L1823.42 1207.8 L1824.01 1207.8 L1824.6 1207.8 L1825.18 1207.8 L1825.77 1207.8 L1826.35 1207.8 L1826.94 1207.8 L1827.53 1207.8 L1828.11 1207.8 L1828.7 1207.8 L1829.29 1207.8 L1829.87 1207.8 L1830.46 1207.8 L1831.05 1207.8 L1831.63 1207.8 L1832.22 1207.8 L1832.81 1207.8 L1833.39 1207.8 L1833.98 1207.8 L1834.56 1207.8 L1835.15 1207.8 L1835.74 1207.8 L1836.32 1207.8 L1836.91 1207.8 L1837.5 1207.8 L1838.08 1207.8 L1838.67 1207.8 L1839.26 1207.8 L1839.84 1207.8 L1840.43 1207.8 L1841.01 1207.8 L1841.6 1207.8 L1842.19 1207.8 L1842.77 1207.8 L1843.36 1207.8 L1843.95 1207.8 L1844.53 1207.8 L1845.12 1207.8 L1845.71 1207.8 L1846.29 1207.8 L1846.88 1207.8 L1847.47 1207.8 L1848.05 1207.8 L1848.64 1207.8 L1849.22 1207.8 L1849.81 1207.8 L1850.4 1207.8 L1850.98 1207.8 L1851.57 1207.8 L1852.16 1207.8 L1852.74 1207.8 L1853.33 1207.8 L1853.92 1207.8 L1854.5 1207.8 L1855.09 1207.8 L1855.68 1207.8 L1856.26 1207.8 L1856.85 1207.8 L1857.43 1207.8 L1858.02 1207.8 L1858.61 1207.8 L1859.19 1207.8 L1859.78 1207.8 L1860.37 1207.8 L1860.95 1207.8 L1861.54 1207.8 L1862.13 1207.8 L1862.71 1207.8 L1863.3 1207.8 L1863.88 1207.8 L1864.47 1207.8 L1865.06 1207.8 L1865.64 1207.8 L1866.23 1207.8 L1866.82 1207.8 L1867.4 1207.8 L1867.99 1207.8 L1868.58 1207.8 L1869.16 1207.8 L1869.75 1207.8 L1870.34 1207.8 L1870.92 1207.8 L1871.51 1207.8 L1872.09 1207.8 L1872.68 1207.8 L1873.27 1207.8 L1873.85 1207.8 L1874.44 1207.8 L1875.03 1207.8 L1875.61 1207.8 L1876.2 1207.8 L1876.79 1207.8 L1877.37 1207.8 L1877.96 1207.8 L1878.55 1207.8 L1879.13 1207.8 L1879.72 1207.8 L1880.3 1207.8 L1880.89 1207.8 L1881.48 1207.8 L1882.06 1207.8 L1882.65 1207.8 L1883.24 1207.8 L1883.82 1207.8 L1884.41 1207.8 L1885 1207.8 L1885.58 1207.8 L1886.17 1207.8 L1886.76 1207.8 L1887.34 1207.8 L1887.93 1207.8 L1888.51 1207.8 L1889.1 1207.8 L1889.69 1207.8 L1890.27 1207.8 L1890.86 1207.8 L1891.45 1207.8 L1892.03 1207.8 L1892.62 1207.8 L1893.21 1207.8 L1893.79 1207.8 L1894.38 1207.8 L1894.96 1207.8 L1895.55 1207.8 L1896.14 1207.8 L1896.72 1207.8 L1897.31 1207.8 L1897.9 1207.8 L1898.48 1207.8 L1899.07 1207.8 L1899.66 1207.8 L1900.24 1207.8 L1900.83 1207.8 L1901.42 1207.8 L1902 1207.8 L1902.59 1207.8 L1903.17 1207.8 L1903.76 1207.8 L1904.35 1207.8 L1904.93 1207.8 L1905.52 1207.8 L1906.11 1207.8 L1906.69 1207.8 L1907.28 1207.8 L1907.87 1207.8 L1908.45 1207.8 L1909.04 1207.8 L1909.63 1207.8 L1910.21 1207.8 L1910.8 1207.8 L1911.38 1207.8 L1911.97 1207.8 L1912.56 1207.8 L1913.14 1207.8 L1913.73 1207.8 L1914.32 1207.8 L1914.9 1207.8 L1915.49 1207.8 L1916.08 1207.8 L1916.66 1207.8 L1917.25 1207.8 L1917.83 1207.8 L1918.42 1207.8 L1919.01 1207.8 L1919.59 1207.8 L1920.18 1207.8 L1920.77 1207.8 L1921.35 1207.8 L1921.94 1207.8 L1922.53 1207.8 L1923.11 1207.8 L1923.7 1207.8 L1924.29 1207.8 L1924.87 1207.8 L1925.46 1207.8 L1926.04 1207.8 L1926.63 1207.8 L1927.22 1207.8 L1927.8 1207.8 L1928.39 1207.8 L1928.98 1207.8 L1929.56 1207.8 L1930.15 1207.8 L1930.74 1207.8 L1931.32 1207.8 L1931.91 1207.8 L1932.5 1207.8 L1933.08 1207.8 L1933.67 1207.8 L1934.25 1207.8 L1934.84 1207.8 L1935.43 1207.8 L1936.01 1207.8 L1936.6 1207.8 L1937.19 1207.8 L1937.77 1207.8 L1938.36 1207.8 L1938.95 1207.8 L1939.53 1207.8 L1940.12 1207.8 L1940.71 1207.8 L1941.29 1207.8 L1941.88 1207.8 L1942.46 1207.8 L1943.05 1207.8 L1943.64 1207.8 L1944.22 1207.8 L1944.81 1207.8 L1945.4 1207.8 L1945.98 1207.8 L1946.57 1207.8 L1947.16 1207.8 L1947.74 1207.8 L1948.33 1207.8 L1948.91 1207.8 L1949.5 1207.8 L1950.09 1207.8 L1950.67 1207.8 L1951.26 1207.8 L1951.85 1207.8 L1952.43 1207.8 L1953.02 1207.8 L1953.61 1207.8 L1954.19 1207.8 L1954.78 1207.8 L1955.37 1207.8 L1955.95 1207.8 L1956.54 1207.8 L1957.12 1207.8 L1957.71 1207.8 L1958.3 1207.8 L1958.88 1207.8 L1959.47 1207.8 L1960.06 1207.8 L1960.64 1207.8 L1961.23 1207.8 L1961.82 1207.8 L1962.4 1207.8 L1962.99 1207.8 L1963.58 1207.8 L1964.16 1207.8 L1964.75 1207.8 L1965.33 1207.8 L1965.92 1207.8 L1966.51 1207.8 L1967.09 1207.8 L1967.68 1207.8 L1968.27 1207.8 L1968.85 1207.8 L1969.44 1207.8 L1970.03 1207.8 L1970.61 1207.8 L1971.2 1207.8 L1971.78 1207.8 L1972.37 1207.8 L1972.96 1207.8 L1973.54 1207.8 L1974.13 1207.8 L1974.72 1207.8 L1975.3 1207.8 L1975.89 1207.8 L1976.48 1207.8 L1977.06 1207.8 L1977.65 1207.8 L1978.24 1207.8 L1978.82 1207.8 L1979.41 1207.8 L1979.99 1207.8 L1980.58 1207.8 L1981.17 1207.8 L1981.75 1207.8 L1982.34 1207.8 L1982.93 1207.8 L1983.51 1207.8 L1984.1 1207.8 L1984.69 1207.8 L1985.27 1207.8 L1985.86 1207.8 L1986.45 1207.8 L1987.03 1207.8 L1987.62 1207.8 L1988.2 1207.8 L1988.79 1207.8 L1989.38 1207.8 L1989.96 1207.8 L1990.55 1207.8 L1991.14 1207.8 L1991.72 1207.8 L1992.31 1207.8 L1992.9 1207.8 L1993.48 1207.8 L1994.07 1207.8 L1994.65 1207.8 L1995.24 1207.8 L1995.83 1207.8 L1996.41 1207.8 L1997 1207.8 L1997.59 1207.8 L1998.17 1207.8 L1998.76 1207.8 L1999.35 1207.8 L1999.93 1207.8 L2000.52 1207.8 L2001.11 1207.8 L2001.69 1207.8 L2002.28 1207.8 L2002.86 1207.8 L2003.45 1207.8 L2004.04 1207.8 L2004.62 1207.8 L2005.21 1207.8 L2005.8 1207.8 L2006.38 1207.8 L2006.97 1207.8 L2007.56 1207.8 L2008.14 1207.8 L2008.73 1207.8 L2009.32 1207.8 L2009.9 1207.8 L2010.49 1207.8 L2011.07 1207.8 L2011.66 1207.8 L2012.25 1207.8 L2012.83 1207.8 L2013.42 1207.8 L2014.01 1207.8 L2014.59 1207.8 L2015.18 1207.8 L2015.77 1207.8 L2016.35 1207.8 L2016.94 1207.8 L2017.53 1207.8 L2018.11 1207.8 L2018.7 1207.8 L2019.28 1207.8 L2019.87 1207.8 L2020.46 1207.8 L2021.04 1207.8 L2021.63 1207.8 L2022.22 1207.8 L2022.8 1207.8 L2023.39 1207.8 L2023.98 1207.8 L2024.56 1207.8 L2025.15 1207.8 L2025.73 1207.8 L2026.32 1207.8 L2026.91 1207.8 L2027.49 1207.8 L2028.08 1207.8 L2028.67 1207.8 L2029.25 1207.8 L2029.84 1207.8 L2030.43 1207.8 L2031.01 1207.8 L2031.6 1207.8 L2032.19 1207.8 L2032.77 1207.8 L2033.36 1207.8 L2033.94 1207.8 L2034.53 1207.8 L2035.12 1207.8 L2035.7 1207.8 L2036.29 1207.8 L2036.88 1207.8 L2037.46 1207.8 L2038.05 1207.8 L2038.64 1207.8 L2039.22 1207.8 L2039.81 1207.8 L2040.4 1207.8 L2040.98 1207.8 L2041.57 1207.8 L2042.15 1207.8 L2042.74 1207.8 L2043.33 1207.8 L2043.91 1207.8 L2044.5 1207.8 L2045.09 1207.8 L2045.67 1207.8 L2046.26 1207.8 L2046.85 1207.8 L2047.43 1207.8 L2048.02 1207.8 L2048.6 1207.8 L2049.19 1207.8 L2049.78 1207.8 L2050.36 1207.8 L2050.95 1207.8 L2051.54 1207.8 L2052.12 1207.8 L2052.71 1207.8 L2053.3 1207.8 L2053.88 1207.8 L2054.47 1207.8 L2055.06 1207.8 L2055.64 1207.8 L2056.23 1207.8 L2056.81 1207.8 L2057.4 1207.8 L2057.99 1207.8 L2058.57 1207.8 L2059.16 1207.8 L2059.75 1207.8 L2060.33 1207.8 L2060.92 1207.8 L2061.51 1207.8 L2062.09 1207.8 L2062.68 1207.8 L2063.27 1207.8 L2063.85 1207.8 L2064.44 1207.8 L2065.02 1207.8 L2065.61 1207.8 L2066.2 1207.8 L2066.78 1207.8 L2067.37 1207.8 L2067.96 1207.8 L2068.54 1207.8 L2069.13 1207.8 L2069.72 1207.8 L2070.3 1207.8 L2070.89 1207.8 L2071.48 1207.8 L2072.06 1207.8 L2072.65 1207.8 L2073.23 1207.8 L2073.82 1207.8 L2074.41 1207.8 L2074.99 1207.8 L2075.58 1207.8 L2076.17 1207.8 L2076.75 1207.8 L2077.34 1207.8 L2077.93 1207.8 L2078.51 1207.8 L2079.1 1207.8 L2079.68 1207.8 L2080.27 1207.8 L2080.86 1207.8 L2081.44 1207.8 L2082.03 1207.8 L2082.62 1207.8 L2083.2 1207.8 L2083.79 1207.8 L2084.38 1207.8 L2084.96 1207.8 L2085.55 1207.8 L2086.14 1207.8 L2086.72 1207.8 L2087.31 1207.8 L2087.89 1207.8 L2088.48 1207.8 L2089.07 1207.8 L2089.65 1207.8 L2090.24 1207.8 L2090.83 1207.8 L2091.41 1207.8 L2092 1207.8 L2092.59 1207.8 L2093.17 1207.8 L2093.76 1207.8 L2094.35 1207.8 L2094.93 1207.8 L2095.52 1207.8 L2096.1 1207.8 L2096.69 1207.8 L2097.28 1207.8 L2097.86 1207.8 L2098.45 1207.8 L2099.04 1207.8 L2099.62 1207.8 L2100.21 1207.8 L2100.8 1207.8 L2101.38 1207.8 L2101.97 1207.8 L2102.55 1207.8 L2103.14 1207.8 L2103.73 1207.8 L2104.31 1207.8 L2104.9 1207.8 L2105.49 1207.8 L2106.07 1207.8 L2106.66 1207.8 L2107.25 1207.8 L2107.83 1207.8 L2108.42 1207.8 L2109.01 1207.8 L2109.59 1207.8 L2110.18 1207.8 L2110.76 1207.8 L2111.35 1207.8 L2111.94 1207.8 L2112.52 1207.8 L2113.11 1207.8 L2113.7 1207.8 L2114.28 1207.8 L2114.87 1207.8 L2115.46 1207.8 L2116.04 1207.8 L2116.63 1207.8 L2117.22 1207.8 L2117.8 1207.8 L2118.39 1207.8 L2118.97 1207.8 L2119.56 1207.8 L2120.15 1207.8 L2120.73 1207.8 L2121.32 1207.8 L2121.91 1207.8 L2122.49 1207.8 L2123.08 1207.8 L2123.67 1207.8 L2124.25 1207.8 L2124.84 1207.8 L2125.42 1207.8 L2126.01 1207.8 L2126.6 1207.8 L2127.18 1207.8 L2127.77 1207.8 L2128.36 1207.8 L2128.94 1207.8 L2129.53 1207.8 L2130.12 1207.8 L2130.7 1207.8 L2131.29 1207.8 L2131.88 1207.8 L2132.46 1207.8 L2133.05 1207.8 L2133.63 1207.8 L2134.22 1207.8 L2134.81 1207.8 L2135.39 1207.8 L2135.98 1207.8 L2136.57 1207.8 L2137.15 1207.8 L2137.74 1207.8 L2138.33 1207.8 L2138.91 1207.8 L2139.5 1207.8 L2140.09 1207.8 L2140.67 1207.8 L2141.26 1207.8 L2141.84 1207.8 L2142.43 1207.8 L2143.02 1207.8 L2143.6 1207.8 L2144.19 1207.8 L2144.78 1207.8 L2145.36 1207.8 L2145.95 1207.8 L2146.54 1207.8 L2147.12 1207.8 L2147.71 1207.8 L2148.3 1207.8 L2148.88 1207.8 L2149.47 1207.8 L2150.05 1207.8 L2150.64 1207.8 L2151.23 1207.8 L2151.81 1207.8 L2152.4 1207.8 L2152.99 1207.8 L2153.57 1207.8 L2154.16 1207.8 L2154.75 1207.8 L2155.33 1207.8 L2155.92 1207.8 L2156.5 1207.8 L2157.09 1207.8 L2157.68 1207.8 L2158.26 1207.8 L2158.26 1207.1 L2157.68 1207.1 L2157.09 1207.1 L2156.5 1207.1 L2155.92 1207.1 L2155.33 1207.1 L2154.75 1207.1 L2154.16 1207.1 L2153.57 1207.1 L2152.99 1207.1 L2152.4 1207.1 L2151.81 1207.1 L2151.23 1207.1 L2150.64 1207.1 L2150.05 1207.1 L2149.47 1207.1 L2148.88 1207.1 L2148.3 1207.1 L2147.71 1207.1 L2147.12 1207.1 L2146.54 1207.1 L2145.95 1207.1 L2145.36 1207.1 L2144.78 1207.1 L2144.19 1207.1 L2143.6 1207.1 L2143.02 1207.1 L2142.43 1207.1 L2141.84 1207.1 L2141.26 1207.1 L2140.67 1207.1 L2140.09 1207.1 L2139.5 1207.1 L2138.91 1207.1 L2138.33 1207.1 L2137.74 1207.1 L2137.15 1207.1 L2136.57 1207.1 L2135.98 1207.1 L2135.39 1207.1 L2134.81 1207.1 L2134.22 1207.1 L2133.63 1207.1 L2133.05 1207.1 L2132.46 1207.1 L2131.88 1207.1 L2131.29 1207.1 L2130.7 1207.1 L2130.12 1207.1 L2129.53 1207.1 L2128.94 1207.1 L2128.36 1207.1 L2127.77 1207.1 L2127.18 1207.1 L2126.6 1207.1 L2126.01 1207.1 L2125.42 1207.1 L2124.84 1207.1 L2124.25 1207.1 L2123.67 1207.1 L2123.08 1207.1 L2122.49 1207.1 L2121.91 1207.1 L2121.32 1207.1 L2120.73 1207.1 L2120.15 1207.1 L2119.56 1207.1 L2118.97 1207.1 L2118.39 1207.1 L2117.8 1207.1 L2117.22 1207.1 L2116.63 1207.1 L2116.04 1207.1 L2115.46 1207.1 L2114.87 1207.1 L2114.28 1207.1 L2113.7 1207.1 L2113.11 1207.1 L2112.52 1207.1 L2111.94 1207.1 L2111.35 1207.1 L2110.76 1207.1 L2110.18 1207.1 L2109.59 1207.1 L2109.01 1207.1 L2108.42 1207.1 L2107.83 1207.1 L2107.25 1207.1 L2106.66 1207.1 L2106.07 1207.1 L2105.49 1207.1 L2104.9 1207.1 L2104.31 1207.1 L2103.73 1207.1 L2103.14 1207.1 L2102.55 1207.1 L2101.97 1207.1 L2101.38 1207.1 L2100.8 1207.1 L2100.21 1207.1 L2099.62 1207.1 L2099.04 1207.1 L2098.45 1207.1 L2097.86 1207.1 L2097.28 1207.1 L2096.69 1207.1 L2096.1 1207.1 L2095.52 1207.1 L2094.93 1207.1 L2094.35 1207.1 L2093.76 1207.1 L2093.17 1207.1 L2092.59 1207.1 L2092 1207.1 L2091.41 1207.1 L2090.83 1207.1 L2090.24 1207.1 L2089.65 1207.1 L2089.07 1207.1 L2088.48 1207.1 L2087.89 1207.1 L2087.31 1207.1 L2086.72 1207.1 L2086.14 1207.1 L2085.55 1207.1 L2084.96 1207.1 L2084.38 1207.1 L2083.79 1207.1 L2083.2 1207.1 L2082.62 1207.1 L2082.03 1207.1 L2081.44 1207.1 L2080.86 1207.1 L2080.27 1207.1 L2079.68 1207.1 L2079.1 1207.1 L2078.51 1207.1 L2077.93 1207.1 L2077.34 1207.1 L2076.75 1207.1 L2076.17 1207.1 L2075.58 1207.1 L2074.99 1207.1 L2074.41 1207.1 L2073.82 1207.1 L2073.23 1207.1 L2072.65 1207.1 L2072.06 1207.1 L2071.48 1207.1 L2070.89 1207.1 L2070.3 1207.1 L2069.72 1207.1 L2069.13 1207.1 L2068.54 1207.1 L2067.96 1207.1 L2067.37 1207.1 L2066.78 1207.1 L2066.2 1207.1 L2065.61 1207.1 L2065.02 1207.1 L2064.44 1207.1 L2063.85 1207.1 L2063.27 1207.1 L2062.68 1207.1 L2062.09 1207.1 L2061.51 1207.1 L2060.92 1207.1 L2060.33 1207.1 L2059.75 1207.1 L2059.16 1207.1 L2058.57 1207.1 L2057.99 1207.1 L2057.4 1207.1 L2056.81 1207.1 L2056.23 1207.1 L2055.64 1207.1 L2055.06 1207.1 L2054.47 1207.1 L2053.88 1207.1 L2053.3 1207.1 L2052.71 1207.1 L2052.12 1207.1 L2051.54 1207.1 L2050.95 1207.1 L2050.36 1207.1 L2049.78 1207.1 L2049.19 1207.1 L2048.6 1207.1 L2048.02 1207.1 L2047.43 1207.1 L2046.85 1207.1 L2046.26 1207.1 L2045.67 1207.1 L2045.09 1207.1 L2044.5 1207.1 L2043.91 1207.1 L2043.33 1207.1 L2042.74 1207.1 L2042.15 1207.1 L2041.57 1207.1 L2040.98 1207.1 L2040.4 1207.1 L2039.81 1207.1 L2039.22 1207.1 L2038.64 1207.1 L2038.05 1207.1 L2037.46 1207.1 L2036.88 1207.1 L2036.29 1207.1 L2035.7 1207.1 L2035.12 1207.1 L2034.53 1207.1 L2033.94 1207.1 L2033.36 1207.1 L2032.77 1207.1 L2032.19 1207.1 L2031.6 1207.1 L2031.01 1207.1 L2030.43 1207.1 L2029.84 1207.1 L2029.25 1207.1 L2028.67 1207.1 L2028.08 1207.1 L2027.49 1207.1 L2026.91 1207.1 L2026.32 1207.1 L2025.73 1207.1 L2025.15 1207.1 L2024.56 1207.1 L2023.98 1207.1 L2023.39 1207.1 L2022.8 1207.1 L2022.22 1207.1 L2021.63 1207.1 L2021.04 1207.1 L2020.46 1207.1 L2019.87 1207.1 L2019.28 1207.1 L2018.7 1207.1 L2018.11 1207.1 L2017.53 1207.1 L2016.94 1207.1 L2016.35 1207.1 L2015.77 1207.1 L2015.18 1207.1 L2014.59 1207.1 L2014.01 1207.1 L2013.42 1207.1 L2012.83 1207.1 L2012.25 1207.1 L2011.66 1207.1 L2011.07 1207.1 L2010.49 1207.1 L2009.9 1207.1 L2009.32 1207.1 L2008.73 1207.1 L2008.14 1207.1 L2007.56 1207.1 L2006.97 1207.1 L2006.38 1207.1 L2005.8 1207.1 L2005.21 1207.1 L2004.62 1207.1 L2004.04 1207.1 L2003.45 1207.1 L2002.86 1207.1 L2002.28 1207.1 L2001.69 1207.1 L2001.11 1207.1 L2000.52 1207.1 L1999.93 1207.1 L1999.35 1207.1 L1998.76 1207.1 L1998.17 1207.1 L1997.59 1207.1 L1997 1207.1 L1996.41 1207.1 L1995.83 1207.1 L1995.24 1207.1 L1994.65 1207.1 L1994.07 1207.1 L1993.48 1207.1 L1992.9 1207.1 L1992.31 1207.1 L1991.72 1207.1 L1991.14 1207.1 L1990.55 1207.1 L1989.96 1207.1 L1989.38 1207.1 L1988.79 1207.1 L1988.2 1207.1 L1987.62 1207.1 L1987.03 1207.1 L1986.45 1207.1 L1985.86 1207.1 L1985.27 1207.1 L1984.69 1207.1 L1984.1 1207.1 L1983.51 1207.1 L1982.93 1207.1 L1982.34 1207.1 L1981.75 1207.1 L1981.17 1207.1 L1980.58 1207.1 L1979.99 1207.1 L1979.41 1207.1 L1978.82 1207.1 L1978.24 1207.1 L1977.65 1207.1 L1977.06 1207.1 L1976.48 1207.1 L1975.89 1207.1 L1975.3 1207.1 L1974.72 1207.1 L1974.13 1207.1 L1973.54 1207.1 L1972.96 1207.1 L1972.37 1207.1 L1971.78 1207.1 L1971.2 1207.1 L1970.61 1207.1 L1970.03 1207.1 L1969.44 1207.1 L1968.85 1207.1 L1968.27 1207.1 L1967.68 1207.1 L1967.09 1207.1 L1966.51 1207.1 L1965.92 1207.1 L1965.33 1207.1 L1964.75 1207.1 L1964.16 1207.1 L1963.58 1207.1 L1962.99 1207.1 L1962.4 1207.1 L1961.82 1207.1 L1961.23 1207.1 L1960.64 1207.1 L1960.06 1207.1 L1959.47 1207.1 L1958.88 1207.1 L1958.3 1207.1 L1957.71 1207.1 L1957.12 1207.1 L1956.54 1207.1 L1955.95 1207.1 L1955.37 1207.1 L1954.78 1207.1 L1954.19 1207.1 L1953.61 1207.1 L1953.02 1207.1 L1952.43 1207.1 L1951.85 1207.1 L1951.26 1207.1 L1950.67 1207.1 L1950.09 1207.1 L1949.5 1207.1 L1948.91 1207.1 L1948.33 1207.1 L1947.74 1207.1 L1947.16 1207.1 L1946.57 1207.1 L1945.98 1207.1 L1945.4 1207.1 L1944.81 1207.1 L1944.22 1207.1 L1943.64 1207.1 L1943.05 1207.1 L1942.46 1207.1 L1941.88 1207.1 L1941.29 1207.1 L1940.71 1207.1 L1940.12 1207.1 L1939.53 1207.1 L1938.95 1207.1 L1938.36 1207.1 L1937.77 1207.1 L1937.19 1207.1 L1936.6 1207.1 L1936.01 1207.1 L1935.43 1207.1 L1934.84 1207.1 L1934.25 1207.1 L1933.67 1207.1 L1933.08 1207.1 L1932.5 1207.1 L1931.91 1207.1 L1931.32 1207.1 L1930.74 1207.1 L1930.15 1207.1 L1929.56 1207.1 L1928.98 1207.1 L1928.39 1207.1 L1927.8 1207.1 L1927.22 1207.1 L1926.63 1207.1 L1926.04 1207.1 L1925.46 1207.1 L1924.87 1207.1 L1924.29 1207.1 L1923.7 1207.1 L1923.11 1207.1 L1922.53 1207.1 L1921.94 1207.1 L1921.35 1207.1 L1920.77 1207.1 L1920.18 1207.1 L1919.59 1207.1 L1919.01 1207.1 L1918.42 1207.1 L1917.83 1207.1 L1917.25 1207.1 L1916.66 1207.1 L1916.08 1207.1 L1915.49 1207.1 L1914.9 1207.1 L1914.32 1207.1 L1913.73 1207.1 L1913.14 1207.1 L1912.56 1207.1 L1911.97 1207.1 L1911.38 1207.1 L1910.8 1207.1 L1910.21 1207.1 L1909.63 1207.1 L1909.04 1207.1 L1908.45 1207.1 L1907.87 1207.1 L1907.28 1207.1 L1906.69 1207.1 L1906.11 1207.1 L1905.52 1207.1 L1904.93 1207.1 L1904.35 1207.1 L1903.76 1207.1 L1903.17 1207.1 L1902.59 1207.1 L1902 1207.1 L1901.42 1207.1 L1900.83 1207.1 L1900.24 1207.1 L1899.66 1207.1 L1899.07 1207.1 L1898.48 1207.1 L1897.9 1207.1 L1897.31 1207.1 L1896.72 1207.1 L1896.14 1207.1 L1895.55 1207.1 L1894.96 1207.1 L1894.38 1207.1 L1893.79 1207.1 L1893.21 1207.1 L1892.62 1207.1 L1892.03 1207.1 L1891.45 1207.1 L1890.86 1207.1 L1890.27 1207.1 L1889.69 1207.1 L1889.1 1207.1 L1888.51 1207.1 L1887.93 1207.1 L1887.34 1207.1 L1886.76 1207.1 L1886.17 1207.1 L1885.58 1207.1 L1885 1207.1 L1884.41 1207.1 L1883.82 1207.1 L1883.24 1207.1 L1882.65 1207.1 L1882.06 1207.1 L1881.48 1207.1 L1880.89 1207.1 L1880.3 1207.1 L1879.72 1207.1 L1879.13 1207.1 L1878.55 1207.1 L1877.96 1207.1 L1877.37 1207.1 L1876.79 1207.1 L1876.2 1207.1 L1875.61 1207.1 L1875.03 1207.1 L1874.44 1207.1 L1873.85 1207.1 L1873.27 1207.1 L1872.68 1207.1 L1872.09 1207.1 L1871.51 1207.1 L1870.92 1207.1 L1870.34 1207.1 L1869.75 1207.1 L1869.16 1207.1 L1868.58 1207.1 L1867.99 1207.1 L1867.4 1207.1 L1866.82 1207.1 L1866.23 1207.1 L1865.64 1207.1 L1865.06 1207.1 L1864.47 1207.1 L1863.88 1207.1 L1863.3 1207.1 L1862.71 1207.1 L1862.13 1207.1 L1861.54 1207.1 L1860.95 1207.1 L1860.37 1207.1 L1859.78 1207.1 L1859.19 1207.1 L1858.61 1207.1 L1858.02 1207.1 L1857.43 1207.1 L1856.85 1207.1 L1856.26 1207.1 L1855.68 1207.1 L1855.09 1207.1 L1854.5 1207.1 L1853.92 1207.1 L1853.33 1207.1 L1852.74 1207.1 L1852.16 1207.1 L1851.57 1207.1 L1850.98 1207.1 L1850.4 1207.1 L1849.81 1207.1 L1849.22 1207.1 L1848.64 1207.1 L1848.05 1207.1 L1847.47 1207.1 L1846.88 1207.1 L1846.29 1207.1 L1845.71 1207.1 L1845.12 1207.1 L1844.53 1207.1 L1843.95 1207.1 L1843.36 1207.1 L1842.77 1207.1 L1842.19 1207.1 L1841.6 1207.1 L1841.01 1207.1 L1840.43 1207.1 L1839.84 1207.1 L1839.26 1207.1 L1838.67 1207.1 L1838.08 1207.1 L1837.5 1207.1 L1836.91 1207.1 L1836.32 1207.1 L1835.74 1207.1 L1835.15 1207.1 L1834.56 1207.1 L1833.98 1207.1 L1833.39 1207.1 L1832.81 1207.1 L1832.22 1207.1 L1831.63 1207.1 L1831.05 1207.1 L1830.46 1207.1 L1829.87 1207.1 L1829.29 1207.1 L1828.7 1207.1 L1828.11 1207.1 L1827.53 1207.1 L1826.94 1207.1 L1826.35 1207.1 L1825.77 1207.1 L1825.18 1207.1 L1824.6 1207.1 L1824.01 1207.1 L1823.42 1207.1 L1822.84 1207.1 L1822.25 1207.1 L1821.66 1207.1 L1821.08 1207.1 L1820.49 1207.1 L1819.9 1207.1 L1819.32 1207.1 L1818.73 1207.1 L1818.14 1207.1 L1817.56 1207.1 L1816.97 1207.1 L1816.39 1207.1 L1815.8 1207.1 L1815.21 1207.1 L1814.63 1207.1 L1814.04 1207.1 L1813.45 1207.1 L1812.87 1207.1 L1812.28 1207.1 L1811.69 1207.1 L1811.11 1207.1 L1810.52 1207.1 L1809.94 1207.1 L1809.35 1207.1 L1808.76 1207.1 L1808.18 1207.1 L1807.59 1207.1 L1807 1207.1 L1806.42 1207.1 L1805.83 1207.1 L1805.24 1207.1 L1804.66 1207.1 L1804.07 1207.1 L1803.48 1207.1 L1802.9 1207.1 L1802.31 1207.1 L1801.73 1207.1 L1801.14 1207.1 L1800.55 1207.1 L1799.97 1207.1 L1799.38 1207.1 L1798.79 1207.1 L1798.21 1207.1 L1797.62 1207.1 L1797.03 1207.1 L1796.45 1207.1 L1795.86 1207.1 L1795.27 1207.1 L1794.69 1207.1 L1794.1 1207.1 L1793.52 1207.1 L1792.93 1207.1 L1792.34 1207.1 L1791.76 1207.1 L1791.17 1207.1 L1790.58 1207.1 L1790 1207.1 L1789.41 1207.1 L1788.82 1207.1 L1788.24 1207.1 L1787.65 1207.1 L1787.06 1207.1 L1786.48 1207.1 L1785.89 1207.1 L1785.31 1207.1 L1784.72 1207.1 L1784.13 1207.1 L1783.55 1207.1 L1782.96 1207.1 L1782.37 1207.1 L1781.79 1207.1 L1781.2 1207.1 L1780.61 1207.1 L1780.03 1207.1 L1779.44 1207.1 L1778.86 1207.1 L1778.27 1207.1 L1777.68 1207.1 L1777.1 1207.1 L1776.51 1207.1 L1775.92 1207.1 L1775.34 1207.1 L1774.75 1207.1 L1774.16 1207.1 L1773.58 1207.1 L1772.99 1207.1 L1772.4 1207.1 L1771.82 1207.1 L1771.23 1207.1 L1770.65 1207.1 L1770.06 1207.1 L1769.47 1207.1 L1768.89 1207.1 L1768.3 1207.1 L1767.71 1207.1 L1767.13 1207.1 L1766.54 1207.1 L1765.95 1207.1 L1765.37 1207.1 L1764.78 1207.1 L1764.19 1207.1 L1763.61 1207.1 L1763.02 1207.1 L1762.44 1207.1 L1761.85 1207.1 L1761.26 1207.1 L1760.68 1207.1 L1760.09 1207.1 L1759.5 1207.1 L1758.92 1207.1 L1758.33 1207.1 L1757.74 1207.1 L1757.16 1207.1 L1756.57 1207.1 L1755.99 1207.1 L1755.4 1207.1 L1754.81 1207.1 L1754.23 1207.1 L1753.64 1207.1 L1753.05 1207.1 L1752.47 1207.1 L1751.88 1207.1 L1751.29 1207.1 L1750.71 1207.1 L1750.12 1207.1 L1749.53 1207.1 L1748.95 1207.1 L1748.36 1207.1 L1747.78 1207.1 L1747.19 1207.1 L1746.6 1207.1 L1746.02 1207.1 L1745.43 1207.1 L1744.84 1207.1 L1744.26 1207.1 L1743.67 1207.1 L1743.08 1207.1 L1742.5 1207.1 L1741.91 1207.1 L1741.32 1207.1 L1740.74 1207.1 L1740.15 1207.1 L1739.57 1207.1 L1738.98 1207.1 L1738.39 1207.1 L1737.81 1207.1 L1737.22 1207.1 L1736.63 1207.1 L1736.05 1207.1 L1735.46 1207.1 L1734.87 1207.1 L1734.29 1207.1 L1733.7 1207.1 L1733.11 1207.1 L1732.53 1207.1 L1731.94 1207.1 L1731.36 1207.1 L1730.77 1207.1 L1730.18 1207.1 L1729.6 1207.1 L1729.01 1207.1 L1728.42 1207.1 L1727.84 1207.1 L1727.25 1207.1 L1726.66 1207.1 L1726.08 1207.1 L1725.49 1207.1 L1724.91 1207.1 L1724.32 1207.1 L1723.73 1207.1 L1723.15 1207.1 L1722.56 1207.1 L1721.97 1207.1 L1721.39 1207.1 L1720.8 1207.1 L1720.21 1207.1 L1719.63 1207.1 L1719.04 1207.1 L1718.45 1207.1 L1717.87 1207.1 L1717.28 1207.1 L1716.7 1207.1 L1716.11 1207.1 L1715.52 1207.1 L1714.94 1207.1 L1714.35 1207.1 L1713.76 1207.1 L1713.18 1207.1 L1712.59 1207.1 L1712 1207.1 L1711.42 1207.1 L1710.83 1207.1 L1710.24 1207.1 L1709.66 1207.1 L1709.07 1207.1 L1708.49 1207.1 L1707.9 1207.1 L1707.31 1207.1 L1706.73 1207.1 L1706.14 1207.1 L1705.55 1207.1 L1704.97 1207.1 L1704.38 1207.1 L1703.79 1207.1 L1703.21 1207.1 L1702.62 1207.1 L1702.04 1207.1 L1701.45 1207.1 L1700.86 1207.1 L1700.28 1207.1 L1699.69 1207.1 L1699.1 1207.1 L1698.52 1207.1 L1697.93 1207.1 L1697.34 1207.1 L1696.76 1207.1 L1696.17 1207.1 L1695.58 1207.1 L1695 1207.1 L1694.41 1207.1 L1693.83 1207.1 L1693.24 1207.1 L1692.65 1207.1 L1692.07 1207.1 L1691.48 1207.1 L1690.89 1207.1 L1690.31 1207.1 L1689.72 1207.1 L1689.13 1207.1 L1688.55 1207.1 L1687.96 1207.1 L1687.37 1207.1 L1686.79 1207.1 L1686.2 1207.1 L1685.62 1207.1 L1685.03 1207.1 L1684.44 1207.1 L1683.86 1207.1 L1683.27 1207.1 L1682.68 1207.1 L1682.1 1207.1 L1681.51 1207.1 L1680.92 1207.1 L1680.34 1207.1 L1679.75 1207.1 L1679.17 1207.1 L1678.58 1207.1 L1677.99 1207.1 L1677.41 1207.1 L1676.82 1207.1 L1676.23 1207.1 L1675.65 1207.1 L1675.06 1207.1 L1674.47 1207.1 L1673.89 1207.1 L1673.3 1207.1 L1672.71 1207.1 L1672.13 1207.1 L1671.54 1207.1 L1670.96 1207.1 L1670.37 1207.1 L1669.78 1207.1 L1669.2 1207.1 L1668.61 1207.1 L1668.02 1207.1 L1667.44 1207.1 L1666.85 1207.1 L1666.26 1207.1 L1665.68 1207.1 L1665.09 1207.1 L1664.5 1207.1 L1663.92 1207.1 L1663.33 1207.1 L1662.75 1207.1 L1662.16 1207.1 L1661.57 1207.1 L1660.99 1207.1 L1660.4 1207.1 L1659.81 1207.1 L1659.23 1207.1 L1658.64 1207.1 L1658.05 1207.1 L1657.47 1207.1 L1656.88 1207.1 L1656.29 1207.1 L1655.71 1207.1 L1655.12 1207.1 L1654.54 1207.1 L1653.95 1207.1 L1653.36 1207.1 L1652.78 1207.1 L1652.19 1207.1 L1651.6 1207.1 L1651.02 1207.1 L1650.43 1207.1 L1649.84 1207.1 L1649.26 1207.1 L1648.67 1207.1 L1648.09 1207.1 L1647.5 1207.1 L1646.91 1207.1 L1646.33 1207.1 L1645.74 1207.1 L1645.15 1207.1 L1644.57 1207.1 L1643.98 1207.1 L1643.39 1207.1 L1642.81 1207.1 L1642.22 1207.1 L1641.63 1207.1 L1641.05 1207.1 L1640.46 1207.1 L1639.88 1207.1 L1639.29 1207.1 L1638.7 1207.1 L1638.12 1207.1 L1637.53 1207.1 L1636.94 1207.1 L1636.36 1207.1 L1635.77 1207.1 L1635.18 1207.1 L1634.6 1207.1 L1634.01 1207.1 L1633.42 1207.1 L1632.84 1207.1 L1632.25 1207.1 L1631.67 1207.1 L1631.08 1207.1 L1630.49 1207.1 L1629.91 1207.1 L1629.32 1207.1 L1628.73 1207.1 L1628.15 1207.1 L1627.56 1207.1 L1626.97 1207.1 L1626.39 1207.1 L1625.8 1207.1 L1625.22 1207.1 L1624.63 1207.1 L1624.04 1207.1 L1623.46 1207.1 L1622.87 1207.1 L1622.28 1207.1 L1621.7 1207.1 L1621.11 1207.1 L1620.52 1207.1 L1619.94 1207.1 L1619.35 1207.1 L1618.76 1207.1 L1618.18 1207.1 L1617.59 1207.1 L1617.01 1207.1 L1616.42 1207.1 L1615.83 1207.1 L1615.25 1207.1 L1614.66 1207.1 L1614.07 1207.1 L1613.49 1207.1 L1612.9 1207.1 L1612.31 1207.1 L1611.73 1207.1 L1611.14 1207.1 L1610.55 1207.1 L1609.97 1207.1 L1609.38 1207.1 L1608.8 1207.1 L1608.21 1207.1 L1607.62 1207.1 L1607.04 1207.1 L1606.45 1207.1 L1605.86 1207.1 L1605.28 1207.1 L1604.69 1207.1 L1604.1 1207.1 L1603.52 1207.1 L1602.93 1207.1 L1602.34 1207.1 L1601.76 1207.1 L1601.17 1207.1 L1600.59 1207.1 L1600 1207.1 L1599.41 1207.1 L1598.83 1207.1 L1598.24 1207.1 L1597.65 1207.1 L1597.07 1207.1 L1596.48 1207.1 L1595.89 1207.1 L1595.31 1207.1 L1594.72 1207.1 L1594.14 1207.1 L1593.55 1207.1 L1592.96 1207.1 L1592.38 1207.1 L1591.79 1207.1 L1591.2 1207.1 L1590.62 1207.1 L1590.03 1207.1 L1589.44 1207.1 L1588.86 1207.1 L1588.27 1207.1 L1587.68 1207.1 L1587.1 1207.1 L1586.51 1207.1 L1585.93 1207.1 L1585.34 1207.1 L1584.75 1207.1 L1584.17 1207.1 L1583.58 1207.1 L1582.99 1207.1 L1582.41 1207.1 L1581.82 1207.1 L1581.23 1207.1 L1580.65 1207.1 L1580.06 1207.1 L1579.47 1207.1 L1578.89 1207.1 L1578.3 1207.1 L1577.72 1207.1 L1577.13 1207.1 L1576.54 1207.1 L1575.96 1207.1 L1575.37 1207.1 L1574.78 1207.1 L1574.2 1207.1 L1573.61 1207.1 L1573.02 1207.1 L1572.44 1207.1 L1571.85 1207.1 L1571.27 1207.1 L1570.68 1207.1 L1570.09 1207.1 L1569.51 1207.1 L1568.92 1207.1 L1568.33 1207.1 L1567.75 1207.1 L1567.16 1207.1 L1566.57 1207.1 L1565.99 1207.1 L1565.4 1207.1 L1564.81 1207.1 L1564.23 1207.1 L1563.64 1207.1 L1563.06 1207.1 L1562.47 1207.1 L1561.88 1207.1 L1561.3 1207.1 L1560.71 1207.1 L1560.12 1207.1 L1559.54 1207.1 L1558.95 1207.1 L1558.36 1207.1 L1557.78 1207.1 L1557.19 1207.1 L1556.6 1207.1 L1556.02 1207.1 L1555.43 1207.1 L1554.85 1207.1 L1554.26 1207.1 L1553.67 1207.1 L1553.09 1207.1 L1552.5 1207.1 L1551.91 1207.1 L1551.33 1207.1 L1550.74 1207.1 L1550.15 1207.1 L1549.57 1207.1 L1548.98 1207.1 L1548.4 1207.1 L1547.81 1207.1 L1547.22 1207.1 L1546.64 1207.1 L1546.05 1207.1 L1545.46 1207.1 L1544.88 1207.1 L1544.29 1207.1 L1543.7 1207.1 L1543.12 1207.1 L1542.53 1207.1 L1541.94 1207.1 L1541.36 1207.1 L1540.77 1207.1 L1540.19 1207.1 L1539.6 1207.1 L1539.01 1207.1 L1538.43 1207.1 L1537.84 1207.1 L1537.25 1207.1 L1536.67 1207.1 L1536.08 1207.1 L1535.49 1207.1 L1534.91 1207.1 L1534.32 1207.1 L1533.73 1207.1 L1533.15 1207.1 L1532.56 1207.1 L1531.98 1207.1 L1531.39 1207.1 L1530.8 1207.1 L1530.22 1207.1 L1529.63 1207.1 L1529.04 1207.1 L1528.46 1207.1 L1527.87 1207.1 L1527.28 1207.1 L1526.7 1207.1 L1526.11 1207.1 L1525.52 1207.1 L1524.94 1207.1 L1524.35 1207.1 L1523.77 1207.1 L1523.18 1207.1 L1522.59 1207.1 L1522.01 1207.1 L1521.42 1207.1 L1520.83 1207.1 L1520.25 1207.1 L1519.66 1207.1 L1519.07 1207.1 L1518.49 1207.1 L1517.9 1207.1 L1517.32 1207.1 L1516.73 1207.1 L1516.14 1207.1 L1515.56 1207.1 L1514.97 1207.1 L1514.38 1207.1 L1513.8 1207.1 L1513.21 1207.1 L1512.62 1207.1 L1512.04 1207.1 L1511.45 1207.1 L1510.86 1207.1 L1510.28 1207.1 L1509.69 1207.1 L1509.11 1207.1 L1508.52 1207.1 L1507.93 1207.1 L1507.35 1207.1 L1506.76 1207.1 L1506.17 1207.1 L1505.59 1207.1 L1505 1207.1 L1504.41 1207.1 L1503.83 1207.1 L1503.24 1207.1 L1502.65 1207.1 L1502.07 1207.1 L1501.48 1207.1 L1500.9 1207.1 L1500.31 1207.1 L1499.72 1207.1 L1499.14 1207.1 L1498.55 1207.1 L1497.96 1207.1 L1497.38 1207.1 L1496.79 1207.1 L1496.2 1207.1 L1495.62 1207.1 L1495.03 1207.1 L1494.45 1207.1 L1493.86 1207.1 L1493.27 1207.1 L1492.69 1207.1 L1492.1 1207.1 L1491.51 1207.1 L1490.93 1207.1 L1490.34 1207.1 L1489.75 1207.1 L1489.17 1207.1 L1488.58 1207.1 L1487.99 1207.1 L1487.41 1207.1 L1486.82 1207.1 L1486.24 1207.1 L1485.65 1207.1 L1485.06 1207.1 L1484.48 1207.1 L1483.89 1207.1 L1483.3 1207.1 L1482.72 1207.1 L1482.13 1207.1 L1481.54 1207.1 L1480.96 1207.1 L1480.37 1207.1 L1479.78 1207.1 L1479.2 1207.1 L1478.61 1207.1 L1478.03 1207.1 L1477.44 1207.1 L1476.85 1207.1 L1476.27 1207.1 L1475.68 1207.1 L1475.09 1207.1 L1474.51 1207.1 L1473.92 1207.1 L1473.33 1207.1 L1472.75 1207.1 L1472.16 1207.1 L1471.57 1207.1 L1470.99 1207.1 L1470.4 1207.1 L1469.82 1207.1 L1469.23 1207.1 L1468.64 1207.1 L1468.06 1207.1 L1467.47 1207.1 L1466.88 1207.1 L1466.3 1207.1 L1465.71 1207.1 L1465.12 1207.1 L1464.54 1207.1 L1463.95 1207.1 L1463.37 1207.1 L1462.78 1207.1 L1462.19 1207.1 L1461.61 1207.1 L1461.02 1207.1 L1460.43 1207.1 L1459.85 1207.1 L1459.26 1207.1 L1458.67 1207.1 L1458.09 1207.1 L1457.5 1207.1 L1456.91 1207.1 L1456.33 1207.1 L1455.74 1207.1 L1455.16 1207.1 L1454.57 1207.1 L1453.98 1207.1 L1453.4 1207.1 L1452.81 1207.1 L1452.22 1207.1 L1451.64 1207.1 L1451.05 1207.1 L1450.46 1207.1 L1449.88 1207.1 L1449.29 1207.1 L1448.7 1207.1 L1448.12 1207.1 L1447.53 1207.1 L1446.95 1207.1 L1446.36 1207.1 L1445.77 1207.1 L1445.19 1207.1 L1444.6 1207.1 L1444.01 1207.1 L1443.43 1207.1 L1442.84 1207.1 L1442.25 1207.1 L1441.67 1207.1 L1441.08 1207.1 L1440.5 1207.1 L1439.91 1207.1 L1439.32 1207.1 L1438.74 1207.1 L1438.15 1207.1 L1437.56 1207.1 L1436.98 1207.1 L1436.39 1207.1 L1435.8 1207.1 L1435.22 1207.1 L1434.63 1207.1 L1434.04 1207.1 L1433.46 1207.1 L1432.87 1207.1 L1432.29 1207.1 L1431.7 1207.1 L1431.11 1207.1 L1430.53 1207.1 L1429.94 1207.1 L1429.35 1207.1 L1428.77 1207.1 L1428.18 1207.1 L1427.59 1207.1 L1427.01 1207.1 L1426.42 1207.1 L1425.83 1207.1 L1425.25 1207.1 L1424.66 1207.1 L1424.08 1207.1 L1423.49 1207.1 L1422.9 1207.1 L1422.32 1207.1 L1421.73 1207.1 L1421.14 1207.1 L1420.56 1207.1 L1419.97 1207.1 L1419.38 1207.1 L1418.8 1207.1 L1418.21 1207.1 L1417.63 1207.1 L1417.04 1207.1 L1416.45 1207.1 L1415.87 1207.1 L1415.28 1207.1 L1414.69 1207.1 L1414.11 1207.1 L1413.52 1207.1 L1412.93 1207.1 L1412.35 1207.1 L1411.76 1207.1 L1411.17 1207.1 L1410.59 1207.1 L1410 1207.1 L1409.42 1207.1 L1408.83 1207.1 L1408.24 1207.1 L1407.66 1207.1 L1407.07 1207.1 L1406.48 1207.1 L1405.9 1207.1 L1405.31 1207.1 L1404.72 1207.1 L1404.14 1207.1 L1403.55 1207.1 L1402.96 1207.1 L1402.38 1207.1 L1401.79 1207.1 L1401.21 1207.1 L1400.62 1207.1 L1400.03 1207.1 L1399.45 1207.1 L1398.86 1207.1 L1398.27 1207.1 L1397.69 1207.1 L1397.1 1207.1 L1396.51 1207.1 L1395.93 1207.1 L1395.34 1207.1 L1394.75 1207.1 L1394.17 1207.1 L1393.58 1207.1 L1393 1207.1 L1392.41 1207.1 L1391.82 1207.1 L1391.24 1207.1 L1390.65 1207.1 L1390.06 1207.1 L1389.48 1207.1 L1388.89 1207.1 L1388.3 1207.1 L1387.72 1207.1 L1387.13 1207.1 L1386.55 1207.1 L1385.96 1207.1 L1385.37 1207.1 L1384.79 1207.1 L1384.2 1207.1 L1383.61 1207.1 L1383.03 1207.1 L1382.44 1207.1 L1381.85 1207.1 L1381.27 1207.1 L1380.68 1207.1 L1380.09 1207.1 L1379.51 1207.1 L1378.92 1207.1 L1378.34 1207.1 L1377.75 1207.1 L1377.16 1207.1 L1376.58 1207.1 L1375.99 1207.1 L1375.4 1207.1 L1374.82 1207.1 L1374.23 1207.1 L1373.64 1207.1 L1373.06 1207.1 L1372.47 1207.1 L1371.88 1207.1 L1371.3 1207.1 L1370.71 1207.1 L1370.13 1207.1 L1369.54 1207.1 L1368.95 1207.1 L1368.37 1207.1 L1367.78 1207.1 L1367.19 1207.1 L1366.61 1207.1 L1366.02 1207.1 L1365.43 1207.1 L1364.85 1207.1 L1364.26 1207.1 L1363.68 1207.1 L1363.09 1207.1 L1362.5 1207.1 L1361.92 1207.1 L1361.33 1207.1 L1360.74 1207.1 L1360.16 1207.1 L1359.57 1207.1 L1358.98 1207.1 L1358.4 1207.1 L1357.81 1207.1 L1357.22 1207.1 L1356.64 1207.1 L1356.05 1207.1 L1355.47 1207.1 L1354.88 1207.1 L1354.29 1207.1 L1353.71 1207.1 L1353.12 1207.1 L1352.53 1207.1 L1351.95 1207.1 L1351.36 1207.1 L1350.77 1207.1 L1350.19 1207.1 L1349.6 1207.1 L1349.01 1207.1 L1348.43 1207.1 L1347.84 1207.1 L1347.26 1207.1 L1346.67 1207.1 L1346.08 1207.1 L1345.5 1207.1 L1344.91 1207.1 L1344.32 1207.1 L1343.74 1207.1 L1343.15 1207.1 L1342.56 1207.1 L1341.98 1207.1 L1341.39 1207.1 L1340.8 1207.1 L1340.22 1207.1 L1339.63 1207.1 L1339.05 1207.1 L1338.46 1207.1 L1337.87 1207.1 L1337.29 1207.1 L1336.7 1207.1 L1336.11 1207.1 L1335.53 1207.1 L1334.94 1207.1 L1334.35 1207.1 L1333.77 1207.1 L1333.18 1207.1 L1332.6 1207.1 L1332.01 1207.1 L1331.42 1207.1 L1330.84 1207.1 L1330.25 1207.1 L1329.66 1207.1 L1329.08 1207.1 L1328.49 1207.1 L1327.9 1207.1 L1327.32 1207.1 L1326.73 1207.1 L1326.14 1207.1 L1325.56 1207.1 L1324.97 1207.1 L1324.39 1207.1 L1323.8 1207.1 L1323.21 1207.1 L1322.63 1207.1 L1322.04 1207.1 L1321.45 1207.1 L1320.87 1207.1 L1320.28 1207.1 L1319.69 1207.1 L1319.11 1207.1 L1318.52 1207.1 L1317.93 1207.1 L1317.35 1207.1 L1316.76 1207.1 L1316.18 1207.1 L1315.59 1207.1 L1315 1207.1 L1314.42 1207.1 L1313.83 1207.1 L1313.24 1207.1 L1312.66 1207.1 L1312.07 1207.1 L1311.48 1207.1 L1310.9 1207.1 L1310.31 1207.1 L1309.73 1207.1 L1309.14 1207.1 L1308.55 1207.1 L1307.97 1207.1 L1307.38 1207.1 L1306.79 1207.1 L1306.21 1207.1 L1305.62 1207.1 L1305.03 1207.1 L1304.45 1207.1 L1303.86 1207.1 L1303.27 1207.1 L1302.69 1207.1 L1302.1 1207.1 L1301.52 1207.1 L1300.93 1207.1 L1300.34 1207.1 L1299.76 1207.1 L1299.17 1207.1 L1298.58 1207.1 L1298 1207.1 L1297.41 1207.1 L1296.82 1207.1 L1296.24 1207.1 L1295.65 1207.1 L1295.06 1207.1 L1294.48 1207.1 L1293.89 1207.1 L1293.31 1207.1 L1292.72 1207.1 L1292.13 1207.1 L1291.55 1207.1 L1290.96 1207.1 L1290.37 1207.1 L1289.79 1207.1 L1289.2 1207.1 L1288.61 1207.1 L1288.03 1207.1 L1287.44 1207.1 L1286.86 1207.1 L1286.27 1207.1 L1285.68 1207.1 L1285.1 1207.1 L1284.51 1207.1 L1283.92 1207.1 L1283.34 1207.1 L1282.75 1207.1 L1282.16 1207.1 L1281.58 1207.1 L1280.99 1207.1 L1280.4 1207.1 L1279.82 1207.1 L1279.23 1207.1 L1278.65 1207.1 L1278.06 1207.1 L1277.47 1207.1 L1276.89 1207.1 L1276.3 1207.1 L1275.71 1207.1 L1275.13 1207.1 L1274.54 1207.1 L1273.95 1207.1 L1273.37 1207.1 L1272.78 1207.1 L1272.19 1207.1 L1271.61 1207.1 L1271.02 1207.1 L1270.44 1207.1 L1269.85 1207.1 L1269.26 1207.1 L1268.68 1207.1 L1268.09 1207.1 L1267.5 1207.1 L1266.92 1207.1 L1266.33 1207.1 L1265.74 1207.1 L1265.16 1207.1 L1264.57 1207.1 L1263.98 1207.1 L1263.4 1207.1 L1262.81 1207.1 L1262.23 1207.1 L1261.64 1207.1 L1261.05 1207.1 L1260.47 1207.1 L1259.88 1207.1 L1259.29 1207.1 L1258.71 1207.1 L1258.12 1207.1 L1257.53 1207.1 L1256.95 1207.1 L1256.36 1207.1 L1255.78 1207.1 L1255.19 1207.1 L1254.6 1207.1 L1254.02 1207.1 L1253.43 1207.1 L1252.84 1207.1 L1252.26 1207.1 L1251.67 1207.1 L1251.08 1207.1 L1250.5 1207.1 L1249.91 1207.1 L1249.32 1207.1 L1248.74 1207.1 L1248.15 1207.1 L1247.57 1207.1 L1246.98 1207.1 L1246.39 1207.1 L1245.81 1207.1 L1245.22 1207.1 L1244.63 1207.1 L1244.05 1207.1 L1243.46 1207.1 L1242.87 1207.1 L1242.29 1207.1 L1241.7 1207.1 L1241.11 1207.1 L1240.53 1207.1 L1239.94 1207.1 L1239.36 1207.1 L1238.77 1207.1 L1238.18 1207.1 L1237.6 1207.1 L1237.01 1207.1 L1236.42 1207.1 L1235.84 1207.1 L1235.25 1207.1 L1234.66 1207.1 L1234.08 1207.1 L1233.49 1207.1 L1232.91 1207.1 L1232.32 1207.1 L1231.73 1207.1 L1231.15 1207.1 L1230.56 1207.1 L1229.97 1207.1 L1229.39 1207.1 L1228.8 1207.1 L1228.21 1207.1 L1227.63 1207.1 L1227.04 1207.1 L1226.45 1207.1 L1225.87 1207.1 L1225.28 1207.1 L1224.7 1207.1 L1224.11 1207.1 L1223.52 1207.1 L1222.94 1207.1 L1222.35 1207.1 L1221.76 1207.1 L1221.18 1207.1 L1220.59 1207.1 L1220 1207.1 L1219.42 1207.1 L1218.83 1207.1 L1218.24 1207.1 L1217.66 1207.1 L1217.07 1207.1 L1216.49 1207.1 L1215.9 1207.1 L1215.31 1207.1 L1214.73 1207.1 L1214.14 1207.1 L1213.55 1207.1 L1212.97 1207.1 L1212.38 1207.1 L1211.79 1207.1 L1211.21 1207.1 L1210.62 1207.1 L1210.03 1207.1 L1209.45 1207.1 L1208.86 1207.1 L1208.28 1207.1 L1207.69 1207.1 L1207.1 1207.1 L1206.52 1207.1 L1205.93 1207.1 L1205.34 1207.1 L1204.76 1207.1 L1204.17 1207.1 L1203.58 1207.1 L1203 1207.1 L1202.41 1207.1 L1201.83 1207.1 L1201.24 1207.1 L1200.65 1207.1 L1200.07 1207.1 L1199.48 1207.1 L1198.89 1207.1 L1198.31 1207.1 L1197.72 1207.1 L1197.13 1207.1 L1196.55 1207.1 L1195.96 1207.1 L1195.37 1207.1 L1194.79 1207.1 L1194.2 1207.1 L1193.62 1207.1 L1193.03 1207.1 L1192.44 1207.1 L1191.86 1207.1 L1191.27 1207.1 L1190.68 1207.1 L1190.1 1207.1 L1189.51 1207.1 L1188.92 1207.1 L1188.34 1207.1 L1187.75 1207.1 L1187.16 1207.1 L1186.58 1207.1 L1185.99 1207.1 L1185.41 1207.1 L1184.82 1207.1 L1184.23 1207.1 L1183.65 1207.1 L1183.06 1207.1 L1182.47 1207.1 L1181.89 1207.1 L1181.3 1207.1 L1180.71 1207.1 L1180.13 1207.1 L1179.54 1207.1 L1178.96 1207.1 L1178.37 1207.1 L1177.78 1207.1 L1177.2 1207.1 L1176.61 1207.1 L1176.02 1207.1 L1175.44 1207.1 L1174.85 1207.1 L1174.26 1207.1 L1173.68 1207.1 L1173.09 1207.1 L1172.5 1207.1 L1171.92 1207.1 L1171.33 1207.1 L1170.75 1207.1 L1170.16 1207.1 L1169.57 1207.1 L1168.99 1207.1 L1168.4 1207.1 L1167.81 1207.1 L1167.23 1207.1 L1166.64 1207.1 L1166.05 1207.1 L1165.47 1207.1 L1164.88 1207.1 L1164.29 1207.1 L1163.71 1207.1 L1163.12 1207.1 L1162.54 1207.1 L1161.95 1207.1 L1161.36 1207.1 L1160.78 1207.1 L1160.19 1207.1 L1159.6 1207.1 L1159.02 1207.1 L1158.43 1207.1 L1157.84 1207.1 L1157.26 1207.1 L1156.67 1207.1 L1156.09 1207.1 L1155.5 1207.1 L1154.91 1207.1 L1154.33 1207.1 L1153.74 1207.1 L1153.15 1207.1 L1152.57 1207.1 L1151.98 1207.1 L1151.39 1207.1 L1150.81 1207.1 L1150.22 1207.1 L1149.63 1207.1 L1149.05 1207.1 L1148.46 1207.1 L1147.88 1207.1 L1147.29 1207.1 L1146.7 1207.1 L1146.12 1207.1 L1145.53 1207.1 L1144.94 1207.1 L1144.36 1207.1 L1143.77 1207.1 L1143.18 1207.1 L1142.6 1207.1 L1142.01 1207.1 L1141.42 1207.1 L1140.84 1207.1 L1140.25 1207.1 L1139.67 1207.1 L1139.08 1207.1 L1138.49 1207.1 L1137.91 1207.1 L1137.32 1207.1 L1136.73 1207.1 L1136.15 1207.1 L1135.56 1207.1 L1134.97 1207.1 L1134.39 1207.1 L1133.8 1207.1 L1133.21 1207.1 L1132.63 1207.1 L1132.04 1207.1 L1131.46 1207.1 L1130.87 1207.1 L1130.28 1207.1 L1129.7 1207.1 L1129.11 1207.1 L1128.52 1207.1 L1127.94 1207.1 L1127.35 1207.1 L1126.76 1207.1 L1126.18 1207.1 L1125.59 1207.1 L1125.01 1207.1 L1124.42 1207.1 L1123.83 1207.1 L1123.25 1207.1 L1122.66 1207.1 L1122.07 1207.1 L1121.49 1207.1 L1120.9 1207.1 L1120.31 1207.1 L1119.73 1207.1 L1119.14 1207.1 L1118.55 1207.1 L1117.97 1207.1 L1117.38 1207.1 L1116.8 1207.1 L1116.21 1207.1 L1115.62 1207.1 L1115.04 1207.1 L1114.45 1207.1 L1113.86 1207.1 L1113.28 1207.1 L1112.69 1207.1 L1112.1 1207.1 L1111.52 1207.1 L1110.93 1207.1 L1110.34 1207.1 L1109.76 1207.1 L1109.17 1207.1 L1108.59 1207.1 L1108 1207.1 L1107.41 1207.1 L1106.83 1207.1 L1106.24 1207.1 L1105.65 1207.1 L1105.07 1207.1 L1104.48 1207.1 L1103.89 1207.1 L1103.31 1207.1 L1102.72 1207.1 L1102.14 1207.1 L1101.55 1207.1 L1100.96 1207.1 L1100.38 1207.1 L1099.79 1207.1 L1099.2 1207.1 L1098.62 1207.1 L1098.03 1207.1 L1097.44 1207.1 L1096.86 1207.1 L1096.27 1207.1 L1095.68 1207.1 L1095.1 1207.1 L1094.51 1207.1 L1093.93 1207.1 L1093.34 1207.1 L1092.75 1207.1 L1092.17 1207.1 L1091.58 1207.1 L1090.99 1207.1 L1090.41 1207.1 L1089.82 1207.1 L1089.23 1207.1 L1088.65 1207.1 L1088.06 1207.1 L1087.47 1207.1 L1086.89 1207.1 L1086.3 1207.1 L1085.72 1207.1 L1085.13 1207.1 L1084.54 1207.1 L1083.96 1207.1 L1083.37 1207.1 L1082.78 1207.1 L1082.2 1207.1 L1081.61 1207.1 L1081.02 1207.1 L1080.44 1207.1 L1079.85 1207.1 L1079.26 1207.1 L1078.68 1207.1 L1078.09 1207.1 L1077.51 1207.1 L1076.92 1207.1 L1076.33 1207.1 L1075.75 1207.1 L1075.16 1207.1 L1074.57 1207.1 L1073.99 1207.1 L1073.4 1207.1 L1072.81 1207.1 L1072.23 1207.1 L1071.64 1207.1 L1071.06 1207.1 L1070.47 1207.1 L1069.88 1207.1 L1069.3 1207.1 L1068.71 1207.1 L1068.12 1207.1 L1067.54 1207.1 L1066.95 1207.1 L1066.36 1207.1 L1065.78 1207.1 L1065.19 1207.1 L1064.6 1207.1 L1064.02 1207.1 L1063.43 1207.1 L1062.85 1207.1 L1062.26 1207.1 L1061.67 1207.1 L1061.09 1207.1 L1060.5 1207.1 L1059.91 1207.1 L1059.33 1207.1 L1058.74 1207.1 L1058.15 1207.1 L1057.57 1207.1 L1056.98 1207.1 L1056.39 1207.1 L1055.81 1207.1 L1055.22 1207.1 L1054.64 1207.1 L1054.05 1207.1 L1053.46 1207.1 L1052.88 1207.1 L1052.29 1207.1 L1051.7 1207.1 L1051.12 1207.1 L1050.53 1207.1 L1049.94 1207.1 L1049.36 1207.1 L1048.77 1207.1 L1048.19 1207.1 L1047.6 1207.1 L1047.01 1207.1 L1046.43 1207.1 L1045.84 1207.1 L1045.25 1207.1 L1044.67 1207.1 L1044.08 1207.1 L1043.49 1207.1 L1042.91 1207.1 L1042.32 1207.1 L1041.73 1207.1 L1041.15 1207.1 L1040.56 1207.1 L1039.98 1207.1 L1039.39 1207.1 L1038.8 1207.1 L1038.22 1207.1 L1037.63 1207.1 L1037.04 1207.1 L1036.46 1207.1 L1035.87 1207.1 L1035.28 1207.1 L1034.7 1207.1 L1034.11 1207.1 L1033.52 1207.1 L1032.94 1207.1 L1032.35 1207.1 L1031.77 1207.1 L1031.18 1207.1 L1030.59 1207.1 L1030.01 1207.1 L1029.42 1207.1 L1028.83 1207.1 L1028.25 1207.1 L1027.66 1207.1 L1027.07 1207.1 L1026.49 1207.1 L1025.9 1207.1 L1025.32 1207.1 L1024.73 1207.1 L1024.14 1207.1 L1023.56 1207.1 L1022.97 1207.1 L1022.38 1207.1 L1021.8 1207.1 L1021.21 1207.1 L1020.62 1207.1 L1020.04 1207.1 L1019.45 1207.1 L1018.86 1207.1 L1018.28 1207.1 L1017.69 1207.1 L1017.11 1207.1 L1016.52 1207.1 L1015.93 1207.1 L1015.35 1207.1 L1014.76 1207.1 L1014.17 1207.1 L1013.59 1207.1 L1013 1207.1 L1012.41 1207.1 L1011.83 1207.1 L1011.24 1207.1 L1010.65 1207.1 L1010.07 1207.1 L1009.48 1207.1 L1008.9 1207.1 L1008.31 1207.1 L1007.72 1207.1 L1007.14 1207.1 L1006.55 1207.1 L1005.96 1207.1 L1005.38 1207.1 L1004.79 1207.1 L1004.2 1207.1 L1003.62 1207.1 L1003.03 1207.1 L1002.44 1207.1 L1001.86 1207.1 L1001.27 1207.1 L1000.69 1207.1 L1000.1 1207.1 L999.513 1207.1 L998.926 1207.1 L998.34 1207.1 L997.754 1207.1 L997.167 1207.1 L996.581 1207.1 L995.994 1207.1 L995.408 1207.1 L994.822 1207.1 L994.235 1207.1 L993.649 1207.1 L993.062 1207.1 L992.476 1207.1 L991.889 1207.1 L991.303 1207.1 L990.717 1207.1 L990.13 1207.1 L989.544 1207.1 L988.957 1207.1 L988.371 1207.1 L987.785 1207.1 L987.198 1207.1 L986.612 1207.1 L986.025 1207.1  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.45 986.612,1207.45 987.198,1207.45 987.785,1207.45 988.371,1207.45 988.957,1207.45 989.544,1207.45 990.13,1207.45 990.717,1207.45 991.303,1207.45 991.889,1207.45 992.476,1207.45 993.062,1207.45 993.649,1207.45 994.235,1207.45 994.822,1207.45 995.408,1207.45 995.994,1207.45 996.581,1207.45 997.167,1207.45 997.754,1207.45 998.34,1207.45 998.926,1207.45 999.513,1207.45 1000.1,1207.45 1000.69,1207.45 1001.27,1207.45 1001.86,1207.45 1002.44,1207.45 1003.03,1207.45 1003.62,1207.45 1004.2,1207.45 1004.79,1207.45 1005.38,1207.45 1005.96,1207.45 1006.55,1207.45 1007.14,1207.45 1007.72,1207.45 1008.31,1207.45 1008.9,1207.45 1009.48,1207.45 1010.07,1207.45 1010.65,1207.45 1011.24,1207.45 1011.83,1207.45 1012.41,1207.45 1013,1207.45 1013.59,1207.45 1014.17,1207.45 1014.76,1207.45 1015.35,1207.45 1015.93,1207.45 1016.52,1207.45 1017.11,1207.45 1017.69,1207.45 1018.28,1207.45 1018.86,1207.45 1019.45,1207.45 1020.04,1207.45 1020.62,1207.45 1021.21,1207.45 1021.8,1207.45 1022.38,1207.45 1022.97,1207.45 1023.56,1207.45 1024.14,1207.45 1024.73,1207.45 1025.32,1207.45 1025.9,1207.45 1026.49,1207.45 1027.07,1207.45 1027.66,1207.45 1028.25,1207.45 1028.83,1207.45 1029.42,1207.45 1030.01,1207.45 1030.59,1207.45 1031.18,1207.45 1031.77,1207.45 1032.35,1207.45 1032.94,1207.45 1033.52,1207.45 1034.11,1207.45 1034.7,1207.45 1035.28,1207.45 1035.87,1207.45 1036.46,1207.45 1037.04,1207.45 1037.63,1207.45 1038.22,1207.45 1038.8,1207.45 1039.39,1207.45 1039.98,1207.45 1040.56,1207.45 1041.15,1207.45 1041.73,1207.45 1042.32,1207.45 1042.91,1207.45 1043.49,1207.45 1044.08,1207.45 1044.67,1207.45 1045.25,1207.45 1045.84,1207.45 1046.43,1207.45 1047.01,1207.45 1047.6,1207.45 1048.19,1207.45 1048.77,1207.45 1049.36,1207.45 1049.94,1207.45 1050.53,1207.45 1051.12,1207.45 1051.7,1207.45 1052.29,1207.45 1052.88,1207.45 1053.46,1207.45 1054.05,1207.45 1054.64,1207.45 1055.22,1207.45 1055.81,1207.45 1056.39,1207.45 1056.98,1207.45 1057.57,1207.45 1058.15,1207.45 1058.74,1207.45 1059.33,1207.45 1059.91,1207.45 1060.5,1207.45 1061.09,1207.45 1061.67,1207.45 1062.26,1207.45 1062.85,1207.45 1063.43,1207.45 1064.02,1207.45 1064.6,1207.45 1065.19,1207.45 1065.78,1207.45 1066.36,1207.45 1066.95,1207.45 1067.54,1207.45 1068.12,1207.45 1068.71,1207.45 1069.3,1207.45 1069.88,1207.45 1070.47,1207.45 1071.06,1207.45 1071.64,1207.45 1072.23,1207.45 1072.81,1207.45 1073.4,1207.45 1073.99,1207.45 1074.57,1207.45 1075.16,1207.45 1075.75,1207.45 1076.33,1207.45 1076.92,1207.45 1077.51,1207.45 1078.09,1207.45 1078.68,1207.45 1079.26,1207.45 1079.85,1207.45 1080.44,1207.45 1081.02,1207.45 1081.61,1207.45 1082.2,1207.45 1082.78,1207.45 1083.37,1207.45 1083.96,1207.45 1084.54,1207.45 1085.13,1207.45 1085.72,1207.45 1086.3,1207.45 1086.89,1207.45 1087.47,1207.45 1088.06,1207.45 1088.65,1207.45 1089.23,1207.45 1089.82,1207.45 1090.41,1207.45 1090.99,1207.45 1091.58,1207.45 1092.17,1207.45 1092.75,1207.45 1093.34,1207.45 1093.93,1207.45 1094.51,1207.45 1095.1,1207.45 1095.68,1207.45 1096.27,1207.45 1096.86,1207.45 1097.44,1207.45 1098.03,1207.45 1098.62,1207.45 1099.2,1207.45 1099.79,1207.45 1100.38,1207.45 1100.96,1207.45 1101.55,1207.45 1102.14,1207.45 1102.72,1207.45 1103.31,1207.45 1103.89,1207.45 1104.48,1207.45 1105.07,1207.45 1105.65,1207.45 1106.24,1207.45 1106.83,1207.45 1107.41,1207.45 1108,1207.45 1108.59,1207.45 1109.17,1207.45 1109.76,1207.45 1110.34,1207.45 1110.93,1207.45 1111.52,1207.45 1112.1,1207.45 1112.69,1207.45 1113.28,1207.45 1113.86,1207.45 1114.45,1207.45 1115.04,1207.45 1115.62,1207.45 1116.21,1207.45 1116.8,1207.45 1117.38,1207.45 1117.97,1207.45 1118.55,1207.45 1119.14,1207.45 1119.73,1207.45 1120.31,1207.45 1120.9,1207.45 1121.49,1207.45 1122.07,1207.45 1122.66,1207.45 1123.25,1207.45 1123.83,1207.45 1124.42,1207.45 1125.01,1207.45 1125.59,1207.45 1126.18,1207.45 1126.76,1207.45 1127.35,1207.45 1127.94,1207.45 1128.52,1207.45 1129.11,1207.45 1129.7,1207.45 1130.28,1207.45 1130.87,1207.45 1131.46,1207.45 1132.04,1207.45 1132.63,1207.45 1133.21,1207.45 1133.8,1207.45 1134.39,1207.45 1134.97,1207.45 1135.56,1207.45 1136.15,1207.45 1136.73,1207.45 1137.32,1207.45 1137.91,1207.45 1138.49,1207.45 1139.08,1207.45 1139.67,1207.45 1140.25,1207.45 1140.84,1207.45 1141.42,1207.45 1142.01,1207.45 1142.6,1207.45 1143.18,1207.45 1143.77,1207.45 1144.36,1207.45 1144.94,1207.45 1145.53,1207.45 1146.12,1207.45 1146.7,1207.45 1147.29,1207.45 1147.88,1207.45 1148.46,1207.45 1149.05,1207.45 1149.63,1207.45 1150.22,1207.45 1150.81,1207.45 1151.39,1207.45 1151.98,1207.45 1152.57,1207.45 1153.15,1207.45 1153.74,1207.45 1154.33,1207.45 1154.91,1207.45 1155.5,1207.45 1156.09,1207.45 1156.67,1207.45 1157.26,1207.45 1157.84,1207.45 1158.43,1207.45 1159.02,1207.45 1159.6,1207.45 1160.19,1207.45 1160.78,1207.45 1161.36,1207.45 1161.95,1207.45 1162.54,1207.45 1163.12,1207.45 1163.71,1207.45 1164.29,1207.45 1164.88,1207.45 1165.47,1207.45 1166.05,1207.45 1166.64,1207.45 1167.23,1207.45 1167.81,1207.45 1168.4,1207.45 1168.99,1207.45 1169.57,1207.45 1170.16,1207.45 1170.75,1207.45 1171.33,1207.45 1171.92,1207.45 1172.5,1207.45 1173.09,1207.45 1173.68,1207.45 1174.26,1207.45 1174.85,1207.45 1175.44,1207.45 1176.02,1207.45 1176.61,1207.45 1177.2,1207.45 1177.78,1207.45 1178.37,1207.45 1178.96,1207.45 1179.54,1207.45 1180.13,1207.45 1180.71,1207.45 1181.3,1207.45 1181.89,1207.45 1182.47,1207.45 1183.06,1207.45 1183.65,1207.45 1184.23,1207.45 1184.82,1207.45 1185.41,1207.45 1185.99,1207.45 1186.58,1207.45 1187.16,1207.45 1187.75,1207.45 1188.34,1207.45 1188.92,1207.45 1189.51,1207.45 1190.1,1207.45 1190.68,1207.45 1191.27,1207.45 1191.86,1207.45 1192.44,1207.45 1193.03,1207.45 1193.62,1207.45 1194.2,1207.45 1194.79,1207.45 1195.37,1207.45 1195.96,1207.45 1196.55,1207.45 1197.13,1207.45 1197.72,1207.45 1198.31,1207.45 1198.89,1207.45 1199.48,1207.45 1200.07,1207.45 1200.65,1207.45 1201.24,1207.45 1201.83,1207.45 1202.41,1207.45 1203,1207.45 1203.58,1207.45 1204.17,1207.45 1204.76,1207.45 1205.34,1207.45 1205.93,1207.45 1206.52,1207.45 1207.1,1207.45 1207.69,1207.45 1208.28,1207.45 1208.86,1207.45 1209.45,1207.45 1210.03,1207.45 1210.62,1207.45 1211.21,1207.45 1211.79,1207.45 1212.38,1207.45 1212.97,1207.45 1213.55,1207.45 1214.14,1207.45 1214.73,1207.45 1215.31,1207.45 1215.9,1207.45 1216.49,1207.45 1217.07,1207.45 1217.66,1207.45 1218.24,1207.45 1218.83,1207.45 1219.42,1207.45 1220,1207.45 1220.59,1207.45 1221.18,1207.45 1221.76,1207.45 1222.35,1207.45 1222.94,1207.45 1223.52,1207.45 1224.11,1207.45 1224.7,1207.45 1225.28,1207.45 1225.87,1207.45 1226.45,1207.45 1227.04,1207.45 1227.63,1207.45 1228.21,1207.45 1228.8,1207.45 1229.39,1207.45 1229.97,1207.45 1230.56,1207.45 1231.15,1207.45 1231.73,1207.45 1232.32,1207.45 1232.91,1207.45 1233.49,1207.45 1234.08,1207.45 1234.66,1207.45 1235.25,1207.45 1235.84,1207.45 1236.42,1207.45 1237.01,1207.45 1237.6,1207.45 1238.18,1207.45 1238.77,1207.45 1239.36,1207.45 1239.94,1207.45 1240.53,1207.45 1241.11,1207.45 1241.7,1207.45 1242.29,1207.45 1242.87,1207.45 1243.46,1207.45 1244.05,1207.45 1244.63,1207.45 1245.22,1207.45 1245.81,1207.45 1246.39,1207.45 1246.98,1207.45 1247.57,1207.45 1248.15,1207.45 1248.74,1207.45 1249.32,1207.45 1249.91,1207.45 1250.5,1207.45 1251.08,1207.45 1251.67,1207.45 1252.26,1207.45 1252.84,1207.45 1253.43,1207.45 1254.02,1207.45 1254.6,1207.45 1255.19,1207.45 1255.78,1207.45 1256.36,1207.45 1256.95,1207.45 1257.53,1207.45 1258.12,1207.45 1258.71,1207.45 1259.29,1207.45 1259.88,1207.45 1260.47,1207.45 1261.05,1207.45 1261.64,1207.45 1262.23,1207.45 1262.81,1207.45 1263.4,1207.45 1263.98,1207.45 1264.57,1207.45 1265.16,1207.45 1265.74,1207.45 1266.33,1207.45 1266.92,1207.45 1267.5,1207.45 1268.09,1207.45 1268.68,1207.45 1269.26,1207.45 1269.85,1207.45 1270.44,1207.45 1271.02,1207.45 1271.61,1207.45 1272.19,1207.45 1272.78,1207.45 1273.37,1207.45 1273.95,1207.45 1274.54,1207.45 1275.13,1207.45 1275.71,1207.45 1276.3,1207.45 1276.89,1207.45 1277.47,1207.45 1278.06,1207.45 1278.65,1207.45 1279.23,1207.45 1279.82,1207.45 1280.4,1207.45 1280.99,1207.45 1281.58,1207.45 1282.16,1207.45 1282.75,1207.45 1283.34,1207.45 1283.92,1207.45 1284.51,1207.45 1285.1,1207.45 1285.68,1207.45 1286.27,1207.45 1286.86,1207.45 1287.44,1207.45 1288.03,1207.45 1288.61,1207.45 1289.2,1207.45 1289.79,1207.45 1290.37,1207.45 1290.96,1207.45 1291.55,1207.45 1292.13,1207.45 1292.72,1207.45 1293.31,1207.45 1293.89,1207.45 1294.48,1207.45 1295.06,1207.45 1295.65,1207.45 1296.24,1207.45 1296.82,1207.45 1297.41,1207.45 1298,1207.45 1298.58,1207.45 1299.17,1207.45 1299.76,1207.45 1300.34,1207.45 1300.93,1207.45 1301.52,1207.45 1302.1,1207.45 1302.69,1207.45 1303.27,1207.45 1303.86,1207.45 1304.45,1207.45 1305.03,1207.45 1305.62,1207.45 1306.21,1207.45 1306.79,1207.45 1307.38,1207.45 1307.97,1207.45 1308.55,1207.45 1309.14,1207.45 1309.73,1207.45 1310.31,1207.45 1310.9,1207.45 1311.48,1207.45 1312.07,1207.45 1312.66,1207.45 1313.24,1207.45 1313.83,1207.45 1314.42,1207.45 1315,1207.45 1315.59,1207.45 1316.18,1207.45 1316.76,1207.45 1317.35,1207.45 1317.93,1207.45 1318.52,1207.45 1319.11,1207.45 1319.69,1207.45 1320.28,1207.45 1320.87,1207.45 1321.45,1207.45 1322.04,1207.45 1322.63,1207.45 1323.21,1207.45 1323.8,1207.45 1324.39,1207.45 1324.97,1207.45 1325.56,1207.45 1326.14,1207.45 1326.73,1207.45 1327.32,1207.45 1327.9,1207.45 1328.49,1207.45 1329.08,1207.45 1329.66,1207.45 1330.25,1207.45 1330.84,1207.45 1331.42,1207.45 1332.01,1207.45 1332.6,1207.45 1333.18,1207.45 1333.77,1207.45 1334.35,1207.45 1334.94,1207.45 1335.53,1207.45 1336.11,1207.45 1336.7,1207.45 1337.29,1207.45 1337.87,1207.45 1338.46,1207.45 1339.05,1207.45 1339.63,1207.45 1340.22,1207.45 1340.8,1207.45 1341.39,1207.45 1341.98,1207.45 1342.56,1207.45 1343.15,1207.45 1343.74,1207.45 1344.32,1207.45 1344.91,1207.45 1345.5,1207.45 1346.08,1207.45 1346.67,1207.45 1347.26,1207.45 1347.84,1207.45 1348.43,1207.45 1349.01,1207.45 1349.6,1207.45 1350.19,1207.45 1350.77,1207.45 1351.36,1207.45 1351.95,1207.45 1352.53,1207.45 1353.12,1207.45 1353.71,1207.45 1354.29,1207.45 1354.88,1207.45 1355.47,1207.45 1356.05,1207.45 1356.64,1207.45 1357.22,1207.45 1357.81,1207.45 1358.4,1207.45 1358.98,1207.45 1359.57,1207.45 1360.16,1207.45 1360.74,1207.45 1361.33,1207.45 1361.92,1207.45 1362.5,1207.45 1363.09,1207.45 1363.68,1207.45 1364.26,1207.45 1364.85,1207.45 1365.43,1207.45 1366.02,1207.45 1366.61,1207.45 1367.19,1207.45 1367.78,1207.45 1368.37,1207.45 1368.95,1207.45 1369.54,1207.45 1370.13,1207.45 1370.71,1207.45 1371.3,1207.45 1371.88,1207.45 1372.47,1207.45 1373.06,1207.45 1373.64,1207.45 1374.23,1207.45 1374.82,1207.45 1375.4,1207.45 1375.99,1207.45 1376.58,1207.45 1377.16,1207.45 1377.75,1207.45 1378.34,1207.45 1378.92,1207.45 1379.51,1207.45 1380.09,1207.45 1380.68,1207.45 1381.27,1207.45 1381.85,1207.45 1382.44,1207.45 1383.03,1207.45 1383.61,1207.45 1384.2,1207.45 1384.79,1207.45 1385.37,1207.45 1385.96,1207.45 1386.55,1207.45 1387.13,1207.45 1387.72,1207.45 1388.3,1207.45 1388.89,1207.45 1389.48,1207.45 1390.06,1207.45 1390.65,1207.45 1391.24,1207.45 1391.82,1207.45 1392.41,1207.45 1393,1207.45 1393.58,1207.45 1394.17,1207.45 1394.75,1207.45 1395.34,1207.45 1395.93,1207.45 1396.51,1207.45 1397.1,1207.45 1397.69,1207.45 1398.27,1207.45 1398.86,1207.45 1399.45,1207.45 1400.03,1207.45 1400.62,1207.45 1401.21,1207.45 1401.79,1207.45 1402.38,1207.45 1402.96,1207.45 1403.55,1207.45 1404.14,1207.45 1404.72,1207.45 1405.31,1207.45 1405.9,1207.45 1406.48,1207.45 1407.07,1207.45 1407.66,1207.45 1408.24,1207.45 1408.83,1207.45 1409.42,1207.45 1410,1207.45 1410.59,1207.45 1411.17,1207.45 1411.76,1207.45 1412.35,1207.45 1412.93,1207.45 1413.52,1207.45 1414.11,1207.45 1414.69,1207.45 1415.28,1207.45 1415.87,1207.45 1416.45,1207.45 1417.04,1207.45 1417.63,1207.45 1418.21,1207.45 1418.8,1207.45 1419.38,1207.45 1419.97,1207.45 1420.56,1207.45 1421.14,1207.45 1421.73,1207.45 1422.32,1207.45 1422.9,1207.45 1423.49,1207.45 1424.08,1207.45 1424.66,1207.45 1425.25,1207.45 1425.83,1207.45 1426.42,1207.45 1427.01,1207.45 1427.59,1207.45 1428.18,1207.45 1428.77,1207.45 1429.35,1207.45 1429.94,1207.45 1430.53,1207.45 1431.11,1207.45 1431.7,1207.45 1432.29,1207.45 1432.87,1207.45 1433.46,1207.45 1434.04,1207.45 1434.63,1207.45 1435.22,1207.45 1435.8,1207.45 1436.39,1207.45 1436.98,1207.45 1437.56,1207.45 1438.15,1207.45 1438.74,1207.45 1439.32,1207.45 1439.91,1207.45 1440.5,1207.45 1441.08,1207.45 1441.67,1207.45 1442.25,1207.45 1442.84,1207.45 1443.43,1207.45 1444.01,1207.45 1444.6,1207.45 1445.19,1207.45 1445.77,1207.45 1446.36,1207.45 1446.95,1207.45 1447.53,1207.45 1448.12,1207.45 1448.7,1207.45 1449.29,1207.45 1449.88,1207.45 1450.46,1207.45 1451.05,1207.45 1451.64,1207.45 1452.22,1207.45 1452.81,1207.45 1453.4,1207.45 1453.98,1207.45 1454.57,1207.45 1455.16,1207.45 1455.74,1207.45 1456.33,1207.45 1456.91,1207.45 1457.5,1207.45 1458.09,1207.45 1458.67,1207.45 1459.26,1207.45 1459.85,1207.45 1460.43,1207.45 1461.02,1207.45 1461.61,1207.45 1462.19,1207.45 1462.78,1207.45 1463.37,1207.45 1463.95,1207.45 1464.54,1207.45 1465.12,1207.45 1465.71,1207.45 1466.3,1207.45 1466.88,1207.45 1467.47,1207.45 1468.06,1207.45 1468.64,1207.45 1469.23,1207.45 1469.82,1207.45 1470.4,1207.45 1470.99,1207.45 1471.57,1207.45 1472.16,1207.45 1472.75,1207.45 1473.33,1207.45 1473.92,1207.45 1474.51,1207.45 1475.09,1207.45 1475.68,1207.45 1476.27,1207.45 1476.85,1207.45 1477.44,1207.45 1478.03,1207.45 1478.61,1207.45 1479.2,1207.45 1479.78,1207.45 1480.37,1207.45 1480.96,1207.45 1481.54,1207.45 1482.13,1207.45 1482.72,1207.45 1483.3,1207.45 1483.89,1207.45 1484.48,1207.45 1485.06,1207.45 1485.65,1207.45 1486.24,1207.45 1486.82,1207.45 1487.41,1207.45 1487.99,1207.45 1488.58,1207.45 1489.17,1207.45 1489.75,1207.45 1490.34,1207.45 1490.93,1207.45 1491.51,1207.45 1492.1,1207.45 1492.69,1207.45 1493.27,1207.45 1493.86,1207.45 1494.45,1207.45 1495.03,1207.45 1495.62,1207.45 1496.2,1207.45 1496.79,1207.45 1497.38,1207.45 1497.96,1207.45 1498.55,1207.45 1499.14,1207.45 1499.72,1207.45 1500.31,1207.45 1500.9,1207.45 1501.48,1207.45 1502.07,1207.45 1502.65,1207.45 1503.24,1207.45 1503.83,1207.45 1504.41,1207.45 1505,1207.45 1505.59,1207.45 1506.17,1207.45 1506.76,1207.45 1507.35,1207.45 1507.93,1207.45 1508.52,1207.45 1509.11,1207.45 1509.69,1207.45 1510.28,1207.45 1510.86,1207.45 1511.45,1207.45 1512.04,1207.45 1512.62,1207.45 1513.21,1207.45 1513.8,1207.45 1514.38,1207.45 1514.97,1207.45 1515.56,1207.45 1516.14,1207.45 1516.73,1207.45 1517.32,1207.45 1517.9,1207.45 1518.49,1207.45 1519.07,1207.45 1519.66,1207.45 1520.25,1207.45 1520.83,1207.45 1521.42,1207.45 1522.01,1207.45 1522.59,1207.45 1523.18,1207.45 1523.77,1207.45 1524.35,1207.45 1524.94,1207.45 1525.52,1207.45 1526.11,1207.45 1526.7,1207.45 1527.28,1207.45 1527.87,1207.45 1528.46,1207.45 1529.04,1207.45 1529.63,1207.45 1530.22,1207.45 1530.8,1207.45 1531.39,1207.45 1531.98,1207.45 1532.56,1207.45 1533.15,1207.45 1533.73,1207.45 1534.32,1207.45 1534.91,1207.45 1535.49,1207.45 1536.08,1207.45 1536.67,1207.45 1537.25,1207.45 1537.84,1207.45 1538.43,1207.45 1539.01,1207.45 1539.6,1207.45 1540.19,1207.45 1540.77,1207.45 1541.36,1207.45 1541.94,1207.45 1542.53,1207.45 1543.12,1207.45 1543.7,1207.45 1544.29,1207.45 1544.88,1207.45 1545.46,1207.45 1546.05,1207.45 1546.64,1207.45 1547.22,1207.45 1547.81,1207.45 1548.4,1207.45 1548.98,1207.45 1549.57,1207.45 1550.15,1207.45 1550.74,1207.45 1551.33,1207.45 1551.91,1207.45 1552.5,1207.45 1553.09,1207.45 1553.67,1207.45 1554.26,1207.45 1554.85,1207.45 1555.43,1207.45 1556.02,1207.45 1556.6,1207.45 1557.19,1207.45 1557.78,1207.45 1558.36,1207.45 1558.95,1207.45 1559.54,1207.45 1560.12,1207.45 1560.71,1207.45 1561.3,1207.45 1561.88,1207.45 1562.47,1207.45 1563.06,1207.45 1563.64,1207.45 1564.23,1207.45 1564.81,1207.45 1565.4,1207.45 1565.99,1207.45 1566.57,1207.45 1567.16,1207.45 1567.75,1207.45 1568.33,1207.45 1568.92,1207.45 1569.51,1207.45 1570.09,1207.45 1570.68,1207.45 1571.27,1207.45 1571.85,1207.45 1572.44,1207.45 1573.02,1207.45 1573.61,1207.45 1574.2,1207.45 1574.78,1207.45 1575.37,1207.45 1575.96,1207.45 1576.54,1207.45 1577.13,1207.45 1577.72,1207.45 1578.3,1207.45 1578.89,1207.45 1579.47,1207.45 1580.06,1207.45 1580.65,1207.45 1581.23,1207.45 1581.82,1207.45 1582.41,1207.45 1582.99,1207.45 1583.58,1207.45 1584.17,1207.45 1584.75,1207.45 1585.34,1207.45 1585.93,1207.45 1586.51,1207.45 1587.1,1207.45 1587.68,1207.45 1588.27,1207.45 1588.86,1207.45 1589.44,1207.45 1590.03,1207.45 1590.62,1207.45 1591.2,1207.45 1591.79,1207.45 1592.38,1207.45 1592.96,1207.45 1593.55,1207.45 1594.14,1207.45 1594.72,1207.45 1595.31,1207.45 1595.89,1207.45 1596.48,1207.45 1597.07,1207.45 1597.65,1207.45 1598.24,1207.45 1598.83,1207.45 1599.41,1207.45 1600,1207.45 1600.59,1207.45 1601.17,1207.45 1601.76,1207.45 1602.34,1207.45 1602.93,1207.45 1603.52,1207.45 1604.1,1207.45 1604.69,1207.45 1605.28,1207.45 1605.86,1207.45 1606.45,1207.45 1607.04,1207.45 1607.62,1207.45 1608.21,1207.45 1608.8,1207.45 1609.38,1207.45 1609.97,1207.45 1610.55,1207.45 1611.14,1207.45 1611.73,1207.45 1612.31,1207.45 1612.9,1207.45 1613.49,1207.45 1614.07,1207.45 1614.66,1207.45 1615.25,1207.45 1615.83,1207.45 1616.42,1207.45 1617.01,1207.45 1617.59,1207.45 1618.18,1207.45 1618.76,1207.45 1619.35,1207.45 1619.94,1207.45 1620.52,1207.45 1621.11,1207.45 1621.7,1207.45 1622.28,1207.45 1622.87,1207.45 1623.46,1207.45 1624.04,1207.45 1624.63,1207.45 1625.22,1207.45 1625.8,1207.45 1626.39,1207.45 1626.97,1207.45 1627.56,1207.45 1628.15,1207.45 1628.73,1207.45 1629.32,1207.45 1629.91,1207.45 1630.49,1207.45 1631.08,1207.45 1631.67,1207.45 1632.25,1207.45 1632.84,1207.45 1633.42,1207.45 1634.01,1207.45 1634.6,1207.45 1635.18,1207.45 1635.77,1207.45 1636.36,1207.45 1636.94,1207.45 1637.53,1207.45 1638.12,1207.45 1638.7,1207.45 1639.29,1207.45 1639.88,1207.45 1640.46,1207.45 1641.05,1207.45 1641.63,1207.45 1642.22,1207.45 1642.81,1207.45 1643.39,1207.45 1643.98,1207.45 1644.57,1207.45 1645.15,1207.45 1645.74,1207.45 1646.33,1207.45 1646.91,1207.45 1647.5,1207.45 1648.09,1207.45 1648.67,1207.45 1649.26,1207.45 1649.84,1207.45 1650.43,1207.45 1651.02,1207.45 1651.6,1207.45 1652.19,1207.45 1652.78,1207.45 1653.36,1207.45 1653.95,1207.45 1654.54,1207.45 1655.12,1207.45 1655.71,1207.45 1656.29,1207.45 1656.88,1207.45 1657.47,1207.45 1658.05,1207.45 1658.64,1207.45 1659.23,1207.45 1659.81,1207.45 1660.4,1207.45 1660.99,1207.45 1661.57,1207.45 1662.16,1207.45 1662.75,1207.45 1663.33,1207.45 1663.92,1207.45 1664.5,1207.45 1665.09,1207.45 1665.68,1207.45 1666.26,1207.45 1666.85,1207.45 1667.44,1207.45 1668.02,1207.45 1668.61,1207.45 1669.2,1207.45 1669.78,1207.45 1670.37,1207.45 1670.96,1207.45 1671.54,1207.45 1672.13,1207.45 1672.71,1207.45 1673.3,1207.45 1673.89,1207.45 1674.47,1207.45 1675.06,1207.45 1675.65,1207.45 1676.23,1207.45 1676.82,1207.45 1677.41,1207.45 1677.99,1207.45 1678.58,1207.45 1679.17,1207.45 1679.75,1207.45 1680.34,1207.45 1680.92,1207.45 1681.51,1207.45 1682.1,1207.45 1682.68,1207.45 1683.27,1207.45 1683.86,1207.45 1684.44,1207.45 1685.03,1207.45 1685.62,1207.45 1686.2,1207.45 1686.79,1207.45 1687.37,1207.45 1687.96,1207.45 1688.55,1207.45 1689.13,1207.45 1689.72,1207.45 1690.31,1207.45 1690.89,1207.45 1691.48,1207.45 1692.07,1207.45 1692.65,1207.45 1693.24,1207.45 1693.83,1207.45 1694.41,1207.45 1695,1207.45 1695.58,1207.45 1696.17,1207.45 1696.76,1207.45 1697.34,1207.45 1697.93,1207.45 1698.52,1207.45 1699.1,1207.45 1699.69,1207.45 1700.28,1207.45 1700.86,1207.45 1701.45,1207.45 1702.04,1207.45 1702.62,1207.45 1703.21,1207.45 1703.79,1207.45 1704.38,1207.45 1704.97,1207.45 1705.55,1207.45 1706.14,1207.45 1706.73,1207.45 1707.31,1207.45 1707.9,1207.45 1708.49,1207.45 1709.07,1207.45 1709.66,1207.45 1710.24,1207.45 1710.83,1207.45 1711.42,1207.45 1712,1207.45 1712.59,1207.45 1713.18,1207.45 1713.76,1207.45 1714.35,1207.45 1714.94,1207.45 1715.52,1207.45 1716.11,1207.45 1716.7,1207.45 1717.28,1207.45 1717.87,1207.45 1718.45,1207.45 1719.04,1207.45 1719.63,1207.45 1720.21,1207.45 1720.8,1207.45 1721.39,1207.45 1721.97,1207.45 1722.56,1207.45 1723.15,1207.45 1723.73,1207.45 1724.32,1207.45 1724.91,1207.45 1725.49,1207.45 1726.08,1207.45 1726.66,1207.45 1727.25,1207.45 1727.84,1207.45 1728.42,1207.45 1729.01,1207.45 1729.6,1207.45 1730.18,1207.45 1730.77,1207.45 1731.36,1207.45 1731.94,1207.45 1732.53,1207.45 1733.11,1207.45 1733.7,1207.45 1734.29,1207.45 1734.87,1207.45 1735.46,1207.45 1736.05,1207.45 1736.63,1207.45 1737.22,1207.45 1737.81,1207.45 1738.39,1207.45 1738.98,1207.45 1739.57,1207.45 1740.15,1207.45 1740.74,1207.45 1741.32,1207.45 1741.91,1207.45 1742.5,1207.45 1743.08,1207.45 1743.67,1207.45 1744.26,1207.45 1744.84,1207.45 1745.43,1207.45 1746.02,1207.45 1746.6,1207.45 1747.19,1207.45 1747.78,1207.45 1748.36,1207.45 1748.95,1207.45 1749.53,1207.45 1750.12,1207.45 1750.71,1207.45 1751.29,1207.45 1751.88,1207.45 1752.47,1207.45 1753.05,1207.45 1753.64,1207.45 1754.23,1207.45 1754.81,1207.45 1755.4,1207.45 1755.99,1207.45 1756.57,1207.45 1757.16,1207.45 1757.74,1207.45 1758.33,1207.45 1758.92,1207.45 1759.5,1207.45 1760.09,1207.45 1760.68,1207.45 1761.26,1207.45 1761.85,1207.45 1762.44,1207.45 1763.02,1207.45 1763.61,1207.45 1764.19,1207.45 1764.78,1207.45 1765.37,1207.45 1765.95,1207.45 1766.54,1207.45 1767.13,1207.45 1767.71,1207.45 1768.3,1207.45 1768.89,1207.45 1769.47,1207.45 1770.06,1207.45 1770.65,1207.45 1771.23,1207.45 1771.82,1207.45 1772.4,1207.45 1772.99,1207.45 1773.58,1207.45 1774.16,1207.45 1774.75,1207.45 1775.34,1207.45 1775.92,1207.45 1776.51,1207.45 1777.1,1207.45 1777.68,1207.45 1778.27,1207.45 1778.86,1207.45 1779.44,1207.45 1780.03,1207.45 1780.61,1207.45 1781.2,1207.45 1781.79,1207.45 1782.37,1207.45 1782.96,1207.45 1783.55,1207.45 1784.13,1207.45 1784.72,1207.45 1785.31,1207.45 1785.89,1207.45 1786.48,1207.45 1787.06,1207.45 1787.65,1207.45 1788.24,1207.45 1788.82,1207.45 1789.41,1207.45 1790,1207.45 1790.58,1207.45 1791.17,1207.45 1791.76,1207.45 1792.34,1207.45 1792.93,1207.45 1793.52,1207.45 1794.1,1207.45 1794.69,1207.45 1795.27,1207.45 1795.86,1207.45 1796.45,1207.45 1797.03,1207.45 1797.62,1207.45 1798.21,1207.45 1798.79,1207.45 1799.38,1207.45 1799.97,1207.45 1800.55,1207.45 1801.14,1207.45 1801.73,1207.45 1802.31,1207.45 1802.9,1207.45 1803.48,1207.45 1804.07,1207.45 1804.66,1207.45 1805.24,1207.45 1805.83,1207.45 1806.42,1207.45 1807,1207.45 1807.59,1207.45 1808.18,1207.45 1808.76,1207.45 1809.35,1207.45 1809.94,1207.45 1810.52,1207.45 1811.11,1207.45 1811.69,1207.45 1812.28,1207.45 1812.87,1207.45 1813.45,1207.45 1814.04,1207.45 1814.63,1207.45 1815.21,1207.45 1815.8,1207.45 1816.39,1207.45 1816.97,1207.45 1817.56,1207.45 1818.14,1207.45 1818.73,1207.45 1819.32,1207.45 1819.9,1207.45 1820.49,1207.45 1821.08,1207.45 1821.66,1207.45 1822.25,1207.45 1822.84,1207.45 1823.42,1207.45 1824.01,1207.45 1824.6,1207.45 1825.18,1207.45 1825.77,1207.45 1826.35,1207.45 1826.94,1207.45 1827.53,1207.45 1828.11,1207.45 1828.7,1207.45 1829.29,1207.45 1829.87,1207.45 1830.46,1207.45 1831.05,1207.45 1831.63,1207.45 1832.22,1207.45 1832.81,1207.45 1833.39,1207.45 1833.98,1207.45 1834.56,1207.45 1835.15,1207.45 1835.74,1207.45 1836.32,1207.45 1836.91,1207.45 1837.5,1207.45 1838.08,1207.45 1838.67,1207.45 1839.26,1207.45 1839.84,1207.45 1840.43,1207.45 1841.01,1207.45 1841.6,1207.45 1842.19,1207.45 1842.77,1207.45 1843.36,1207.45 1843.95,1207.45 1844.53,1207.45 1845.12,1207.45 1845.71,1207.45 1846.29,1207.45 1846.88,1207.45 1847.47,1207.45 1848.05,1207.45 1848.64,1207.45 1849.22,1207.45 1849.81,1207.45 1850.4,1207.45 1850.98,1207.45 1851.57,1207.45 1852.16,1207.45 1852.74,1207.45 1853.33,1207.45 1853.92,1207.45 1854.5,1207.45 1855.09,1207.45 1855.68,1207.45 1856.26,1207.45 1856.85,1207.45 1857.43,1207.45 1858.02,1207.45 1858.61,1207.45 1859.19,1207.45 1859.78,1207.45 1860.37,1207.45 1860.95,1207.45 1861.54,1207.45 1862.13,1207.45 1862.71,1207.45 1863.3,1207.45 1863.88,1207.45 1864.47,1207.45 1865.06,1207.45 1865.64,1207.45 1866.23,1207.45 1866.82,1207.45 1867.4,1207.45 1867.99,1207.45 1868.58,1207.45 1869.16,1207.45 1869.75,1207.45 1870.34,1207.45 1870.92,1207.45 1871.51,1207.45 1872.09,1207.45 1872.68,1207.45 1873.27,1207.45 1873.85,1207.45 1874.44,1207.45 1875.03,1207.45 1875.61,1207.45 1876.2,1207.45 1876.79,1207.45 1877.37,1207.45 1877.96,1207.45 1878.55,1207.45 1879.13,1207.45 1879.72,1207.45 1880.3,1207.45 1880.89,1207.45 1881.48,1207.45 1882.06,1207.45 1882.65,1207.45 1883.24,1207.45 1883.82,1207.45 1884.41,1207.45 1885,1207.45 1885.58,1207.45 1886.17,1207.45 1886.76,1207.45 1887.34,1207.45 1887.93,1207.45 1888.51,1207.45 1889.1,1207.45 1889.69,1207.45 1890.27,1207.45 1890.86,1207.45 1891.45,1207.45 1892.03,1207.45 1892.62,1207.45 1893.21,1207.45 1893.79,1207.45 1894.38,1207.45 1894.96,1207.45 1895.55,1207.45 1896.14,1207.45 1896.72,1207.45 1897.31,1207.45 1897.9,1207.45 1898.48,1207.45 1899.07,1207.45 1899.66,1207.45 1900.24,1207.45 1900.83,1207.45 1901.42,1207.45 1902,1207.45 1902.59,1207.45 1903.17,1207.45 1903.76,1207.45 1904.35,1207.45 1904.93,1207.45 1905.52,1207.45 1906.11,1207.45 1906.69,1207.45 1907.28,1207.45 1907.87,1207.45 1908.45,1207.45 1909.04,1207.45 1909.63,1207.45 1910.21,1207.45 1910.8,1207.45 1911.38,1207.45 1911.97,1207.45 1912.56,1207.45 1913.14,1207.45 1913.73,1207.45 1914.32,1207.45 1914.9,1207.45 1915.49,1207.45 1916.08,1207.45 1916.66,1207.45 1917.25,1207.45 1917.83,1207.45 1918.42,1207.45 1919.01,1207.45 1919.59,1207.45 1920.18,1207.45 1920.77,1207.45 1921.35,1207.45 1921.94,1207.45 1922.53,1207.45 1923.11,1207.45 1923.7,1207.45 1924.29,1207.45 1924.87,1207.45 1925.46,1207.45 1926.04,1207.45 1926.63,1207.45 1927.22,1207.45 1927.8,1207.45 1928.39,1207.45 1928.98,1207.45 1929.56,1207.45 1930.15,1207.45 1930.74,1207.45 1931.32,1207.45 1931.91,1207.45 1932.5,1207.45 1933.08,1207.45 1933.67,1207.45 1934.25,1207.45 1934.84,1207.45 1935.43,1207.45 1936.01,1207.45 1936.6,1207.45 1937.19,1207.45 1937.77,1207.45 1938.36,1207.45 1938.95,1207.45 1939.53,1207.45 1940.12,1207.45 1940.71,1207.45 1941.29,1207.45 1941.88,1207.45 1942.46,1207.45 1943.05,1207.45 1943.64,1207.45 1944.22,1207.45 1944.81,1207.45 1945.4,1207.45 1945.98,1207.45 1946.57,1207.45 1947.16,1207.45 1947.74,1207.45 1948.33,1207.45 1948.91,1207.45 1949.5,1207.45 1950.09,1207.45 1950.67,1207.45 1951.26,1207.45 1951.85,1207.45 1952.43,1207.45 1953.02,1207.45 1953.61,1207.45 1954.19,1207.45 1954.78,1207.45 1955.37,1207.45 1955.95,1207.45 1956.54,1207.45 1957.12,1207.45 1957.71,1207.45 1958.3,1207.45 1958.88,1207.45 1959.47,1207.45 1960.06,1207.45 1960.64,1207.45 1961.23,1207.45 1961.82,1207.45 1962.4,1207.45 1962.99,1207.45 1963.58,1207.45 1964.16,1207.45 1964.75,1207.45 1965.33,1207.45 1965.92,1207.45 1966.51,1207.45 1967.09,1207.45 1967.68,1207.45 1968.27,1207.45 1968.85,1207.45 1969.44,1207.45 1970.03,1207.45 1970.61,1207.45 1971.2,1207.45 1971.78,1207.45 1972.37,1207.45 1972.96,1207.45 1973.54,1207.45 1974.13,1207.45 1974.72,1207.45 1975.3,1207.45 1975.89,1207.45 1976.48,1207.45 1977.06,1207.45 1977.65,1207.45 1978.24,1207.45 1978.82,1207.45 1979.41,1207.45 1979.99,1207.45 1980.58,1207.45 1981.17,1207.45 1981.75,1207.45 1982.34,1207.45 1982.93,1207.45 1983.51,1207.45 1984.1,1207.45 1984.69,1207.45 1985.27,1207.45 1985.86,1207.45 1986.45,1207.45 1987.03,1207.45 1987.62,1207.45 1988.2,1207.45 1988.79,1207.45 1989.38,1207.45 1989.96,1207.45 1990.55,1207.45 1991.14,1207.45 1991.72,1207.45 1992.31,1207.45 1992.9,1207.45 1993.48,1207.45 1994.07,1207.45 1994.65,1207.45 1995.24,1207.45 1995.83,1207.45 1996.41,1207.45 1997,1207.45 1997.59,1207.45 1998.17,1207.45 1998.76,1207.45 1999.35,1207.45 1999.93,1207.45 2000.52,1207.45 2001.11,1207.45 2001.69,1207.45 2002.28,1207.45 2002.86,1207.45 2003.45,1207.45 2004.04,1207.45 2004.62,1207.45 2005.21,1207.45 2005.8,1207.45 2006.38,1207.45 2006.97,1207.45 2007.56,1207.45 2008.14,1207.45 2008.73,1207.45 2009.32,1207.45 2009.9,1207.45 2010.49,1207.45 2011.07,1207.45 2011.66,1207.45 2012.25,1207.45 2012.83,1207.45 2013.42,1207.45 2014.01,1207.45 2014.59,1207.45 2015.18,1207.45 2015.77,1207.45 2016.35,1207.45 2016.94,1207.45 2017.53,1207.45 2018.11,1207.45 2018.7,1207.45 2019.28,1207.45 2019.87,1207.45 2020.46,1207.45 2021.04,1207.45 2021.63,1207.45 2022.22,1207.45 2022.8,1207.45 2023.39,1207.45 2023.98,1207.45 2024.56,1207.45 2025.15,1207.45 2025.73,1207.45 2026.32,1207.45 2026.91,1207.45 2027.49,1207.45 2028.08,1207.45 2028.67,1207.45 2029.25,1207.45 2029.84,1207.45 2030.43,1207.45 2031.01,1207.45 2031.6,1207.45 2032.19,1207.45 2032.77,1207.45 2033.36,1207.45 2033.94,1207.45 2034.53,1207.45 2035.12,1207.45 2035.7,1207.45 2036.29,1207.45 2036.88,1207.45 2037.46,1207.45 2038.05,1207.45 2038.64,1207.45 2039.22,1207.45 2039.81,1207.45 2040.4,1207.45 2040.98,1207.45 2041.57,1207.45 2042.15,1207.45 2042.74,1207.45 2043.33,1207.45 2043.91,1207.45 2044.5,1207.45 2045.09,1207.45 2045.67,1207.45 2046.26,1207.45 2046.85,1207.45 2047.43,1207.45 2048.02,1207.45 2048.6,1207.45 2049.19,1207.45 2049.78,1207.45 2050.36,1207.45 2050.95,1207.45 2051.54,1207.45 2052.12,1207.45 2052.71,1207.45 2053.3,1207.45 2053.88,1207.45 2054.47,1207.45 2055.06,1207.45 2055.64,1207.45 2056.23,1207.45 2056.81,1207.45 2057.4,1207.45 2057.99,1207.45 2058.57,1207.45 2059.16,1207.45 2059.75,1207.45 2060.33,1207.45 2060.92,1207.45 2061.51,1207.45 2062.09,1207.45 2062.68,1207.45 2063.27,1207.45 2063.85,1207.45 2064.44,1207.45 2065.02,1207.45 2065.61,1207.45 2066.2,1207.45 2066.78,1207.45 2067.37,1207.45 2067.96,1207.45 2068.54,1207.45 2069.13,1207.45 2069.72,1207.45 2070.3,1207.45 2070.89,1207.45 2071.48,1207.45 2072.06,1207.45 2072.65,1207.45 2073.23,1207.45 2073.82,1207.45 2074.41,1207.45 2074.99,1207.45 2075.58,1207.45 2076.17,1207.45 2076.75,1207.45 2077.34,1207.45 2077.93,1207.45 2078.51,1207.45 2079.1,1207.45 2079.68,1207.45 2080.27,1207.45 2080.86,1207.45 2081.44,1207.45 2082.03,1207.45 2082.62,1207.45 2083.2,1207.45 2083.79,1207.45 2084.38,1207.45 2084.96,1207.45 2085.55,1207.45 2086.14,1207.45 2086.72,1207.45 2087.31,1207.45 2087.89,1207.45 2088.48,1207.45 2089.07,1207.45 2089.65,1207.45 2090.24,1207.45 2090.83,1207.45 2091.41,1207.45 2092,1207.45 2092.59,1207.45 2093.17,1207.45 2093.76,1207.45 2094.35,1207.45 2094.93,1207.45 2095.52,1207.45 2096.1,1207.45 2096.69,1207.45 2097.28,1207.45 2097.86,1207.45 2098.45,1207.45 2099.04,1207.45 2099.62,1207.45 2100.21,1207.45 2100.8,1207.45 2101.38,1207.45 2101.97,1207.45 2102.55,1207.45 2103.14,1207.45 2103.73,1207.45 2104.31,1207.45 2104.9,1207.45 2105.49,1207.45 2106.07,1207.45 2106.66,1207.45 2107.25,1207.45 2107.83,1207.45 2108.42,1207.45 2109.01,1207.45 2109.59,1207.45 2110.18,1207.45 2110.76,1207.45 2111.35,1207.45 2111.94,1207.45 2112.52,1207.45 2113.11,1207.45 2113.7,1207.45 2114.28,1207.45 2114.87,1207.45 2115.46,1207.45 2116.04,1207.45 2116.63,1207.45 2117.22,1207.45 2117.8,1207.45 2118.39,1207.45 2118.97,1207.45 2119.56,1207.45 2120.15,1207.45 2120.73,1207.45 2121.32,1207.45 2121.91,1207.45 2122.49,1207.45 2123.08,1207.45 2123.67,1207.45 2124.25,1207.45 2124.84,1207.45 2125.42,1207.45 2126.01,1207.45 2126.6,1207.45 2127.18,1207.45 2127.77,1207.45 2128.36,1207.45 2128.94,1207.45 2129.53,1207.45 2130.12,1207.45 2130.7,1207.45 2131.29,1207.45 2131.88,1207.45 2132.46,1207.45 2133.05,1207.45 2133.63,1207.45 2134.22,1207.45 2134.81,1207.45 2135.39,1207.45 2135.98,1207.45 2136.57,1207.45 2137.15,1207.45 2137.74,1207.45 2138.33,1207.45 2138.91,1207.45 2139.5,1207.45 2140.09,1207.45 2140.67,1207.45 2141.26,1207.45 2141.84,1207.45 2142.43,1207.45 2143.02,1207.45 2143.6,1207.45 2144.19,1207.45 2144.78,1207.45 2145.36,1207.45 2145.95,1207.45 2146.54,1207.45 2147.12,1207.45 2147.71,1207.45 2148.3,1207.45 2148.88,1207.45 2149.47,1207.45 2150.05,1207.45 2150.64,1207.45 2151.23,1207.45 2151.81,1207.45 2152.4,1207.45 2152.99,1207.45 2153.57,1207.45 2154.16,1207.45 2154.75,1207.45 2155.33,1207.45 2155.92,1207.45 2156.5,1207.45 2157.09,1207.45 2157.68,1207.45 2158.26,1207.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M986.025 1207.22 L986.612 1207.22 L987.198 1207.22 L987.785 1207.22 L988.371 1207.22 L988.957 1207.22 L989.544 1207.22 L990.13 1207.22 L990.717 1207.22 L991.303 1207.22 L991.889 1207.22 L992.476 1207.22 L993.062 1207.22 L993.649 1207.22 L994.235 1207.22 L994.822 1207.22 L995.408 1207.22 L995.994 1207.22 L996.581 1207.22 L997.167 1207.22 L997.754 1207.22 L998.34 1207.22 L998.926 1207.22 L999.513 1207.22 L1000.1 1207.22 L1000.69 1207.22 L1001.27 1207.22 L1001.86 1207.22 L1002.44 1207.22 L1003.03 1207.22 L1003.62 1207.22 L1004.2 1207.22 L1004.79 1207.22 L1005.38 1207.22 L1005.96 1207.22 L1006.55 1207.22 L1007.14 1207.22 L1007.72 1207.22 L1008.31 1207.22 L1008.9 1207.22 L1009.48 1207.22 L1010.07 1207.22 L1010.65 1207.22 L1011.24 1207.22 L1011.83 1207.22 L1012.41 1207.22 L1013 1207.22 L1013.59 1207.22 L1014.17 1207.22 L1014.76 1207.22 L1015.35 1207.22 L1015.93 1207.22 L1016.52 1207.22 L1017.11 1207.22 L1017.69 1207.22 L1018.28 1207.22 L1018.86 1207.22 L1019.45 1207.22 L1020.04 1207.22 L1020.62 1207.22 L1021.21 1207.22 L1021.8 1207.22 L1022.38 1207.22 L1022.97 1207.22 L1023.56 1207.22 L1024.14 1207.22 L1024.73 1207.22 L1025.32 1207.22 L1025.9 1207.22 L1026.49 1207.22 L1027.07 1207.22 L1027.66 1207.22 L1028.25 1207.22 L1028.83 1207.22 L1029.42 1207.22 L1030.01 1207.22 L1030.59 1207.22 L1031.18 1207.22 L1031.77 1207.22 L1032.35 1207.22 L1032.94 1207.22 L1033.52 1207.22 L1034.11 1207.22 L1034.7 1207.22 L1035.28 1207.22 L1035.87 1207.22 L1036.46 1207.22 L1037.04 1207.22 L1037.63 1207.22 L1038.22 1207.22 L1038.8 1207.22 L1039.39 1207.22 L1039.98 1207.22 L1040.56 1207.22 L1041.15 1207.22 L1041.73 1207.22 L1042.32 1207.22 L1042.91 1207.22 L1043.49 1207.22 L1044.08 1207.22 L1044.67 1207.22 L1045.25 1207.22 L1045.84 1207.22 L1046.43 1207.22 L1047.01 1207.22 L1047.6 1207.22 L1048.19 1207.22 L1048.77 1207.22 L1049.36 1207.22 L1049.94 1207.22 L1050.53 1207.22 L1051.12 1207.22 L1051.7 1207.22 L1052.29 1207.22 L1052.88 1207.22 L1053.46 1207.22 L1054.05 1207.22 L1054.64 1207.22 L1055.22 1207.22 L1055.81 1207.22 L1056.39 1207.22 L1056.98 1207.22 L1057.57 1207.22 L1058.15 1207.22 L1058.74 1207.22 L1059.33 1207.22 L1059.91 1207.22 L1060.5 1207.22 L1061.09 1207.22 L1061.67 1207.22 L1062.26 1207.22 L1062.85 1207.22 L1063.43 1207.22 L1064.02 1207.22 L1064.6 1207.22 L1065.19 1207.22 L1065.78 1207.22 L1066.36 1207.22 L1066.95 1207.22 L1067.54 1207.22 L1068.12 1207.22 L1068.71 1207.22 L1069.3 1207.22 L1069.88 1207.22 L1070.47 1207.22 L1071.06 1207.22 L1071.64 1207.22 L1072.23 1207.22 L1072.81 1207.22 L1073.4 1207.22 L1073.99 1207.22 L1074.57 1207.22 L1075.16 1207.22 L1075.75 1207.22 L1076.33 1207.22 L1076.92 1207.22 L1077.51 1207.22 L1078.09 1207.22 L1078.68 1207.22 L1079.26 1207.22 L1079.85 1207.22 L1080.44 1207.22 L1081.02 1207.22 L1081.61 1207.22 L1082.2 1207.22 L1082.78 1207.22 L1083.37 1207.22 L1083.96 1207.22 L1084.54 1207.22 L1085.13 1207.22 L1085.72 1207.22 L1086.3 1207.22 L1086.89 1207.22 L1087.47 1207.22 L1088.06 1207.22 L1088.65 1207.22 L1089.23 1207.22 L1089.82 1207.22 L1090.41 1207.22 L1090.99 1207.22 L1091.58 1207.22 L1092.17 1207.22 L1092.75 1207.22 L1093.34 1207.22 L1093.93 1207.22 L1094.51 1207.22 L1095.1 1207.22 L1095.68 1207.22 L1096.27 1207.22 L1096.86 1207.22 L1097.44 1207.22 L1098.03 1207.22 L1098.62 1207.22 L1099.2 1207.22 L1099.79 1207.22 L1100.38 1207.22 L1100.96 1207.22 L1101.55 1207.22 L1102.14 1207.22 L1102.72 1207.22 L1103.31 1207.22 L1103.89 1207.22 L1104.48 1207.22 L1105.07 1207.22 L1105.65 1207.22 L1106.24 1207.22 L1106.83 1207.22 L1107.41 1207.22 L1108 1207.22 L1108.59 1207.22 L1109.17 1207.22 L1109.76 1207.22 L1110.34 1207.22 L1110.93 1207.22 L1111.52 1207.22 L1112.1 1207.22 L1112.69 1207.22 L1113.28 1207.22 L1113.86 1207.22 L1114.45 1207.22 L1115.04 1207.22 L1115.62 1207.22 L1116.21 1207.22 L1116.8 1207.22 L1117.38 1207.22 L1117.97 1207.22 L1118.55 1207.22 L1119.14 1207.22 L1119.73 1207.22 L1120.31 1207.22 L1120.9 1207.22 L1121.49 1207.22 L1122.07 1207.22 L1122.66 1207.22 L1123.25 1207.22 L1123.83 1207.22 L1124.42 1207.22 L1125.01 1207.22 L1125.59 1207.22 L1126.18 1207.22 L1126.76 1207.22 L1127.35 1207.22 L1127.94 1207.22 L1128.52 1207.22 L1129.11 1207.22 L1129.7 1207.22 L1130.28 1207.22 L1130.87 1207.22 L1131.46 1207.22 L1132.04 1207.22 L1132.63 1207.22 L1133.21 1207.22 L1133.8 1207.22 L1134.39 1207.22 L1134.97 1207.22 L1135.56 1207.22 L1136.15 1207.22 L1136.73 1207.22 L1137.32 1207.22 L1137.91 1207.22 L1138.49 1207.22 L1139.08 1207.22 L1139.67 1207.22 L1140.25 1207.22 L1140.84 1207.22 L1141.42 1207.22 L1142.01 1207.22 L1142.6 1207.22 L1143.18 1207.22 L1143.77 1207.22 L1144.36 1207.22 L1144.94 1207.22 L1145.53 1207.22 L1146.12 1207.22 L1146.7 1207.22 L1147.29 1207.22 L1147.88 1207.22 L1148.46 1207.22 L1149.05 1207.22 L1149.63 1207.22 L1150.22 1207.22 L1150.81 1207.22 L1151.39 1207.22 L1151.98 1207.22 L1152.57 1207.22 L1153.15 1207.22 L1153.74 1207.22 L1154.33 1207.22 L1154.91 1207.22 L1155.5 1207.22 L1156.09 1207.22 L1156.67 1207.22 L1157.26 1207.22 L1157.84 1207.22 L1158.43 1207.22 L1159.02 1207.22 L1159.6 1207.22 L1160.19 1207.22 L1160.78 1207.22 L1161.36 1207.22 L1161.95 1207.22 L1162.54 1207.22 L1163.12 1207.22 L1163.71 1207.22 L1164.29 1207.22 L1164.88 1207.22 L1165.47 1207.22 L1166.05 1207.22 L1166.64 1207.22 L1167.23 1207.22 L1167.81 1207.22 L1168.4 1207.22 L1168.99 1207.22 L1169.57 1207.22 L1170.16 1207.22 L1170.75 1207.22 L1171.33 1207.22 L1171.92 1207.22 L1172.5 1207.22 L1173.09 1207.22 L1173.68 1207.22 L1174.26 1207.22 L1174.85 1207.22 L1175.44 1207.22 L1176.02 1207.22 L1176.61 1207.22 L1177.2 1207.22 L1177.78 1207.22 L1178.37 1207.22 L1178.96 1207.22 L1179.54 1207.22 L1180.13 1207.22 L1180.71 1207.22 L1181.3 1207.22 L1181.89 1207.22 L1182.47 1207.22 L1183.06 1207.22 L1183.65 1207.22 L1184.23 1207.22 L1184.82 1207.22 L1185.41 1207.22 L1185.99 1207.22 L1186.58 1207.22 L1187.16 1207.22 L1187.75 1207.22 L1188.34 1207.22 L1188.92 1207.22 L1189.51 1207.22 L1190.1 1207.22 L1190.68 1207.22 L1191.27 1207.22 L1191.86 1207.22 L1192.44 1207.22 L1193.03 1207.22 L1193.62 1207.22 L1194.2 1207.22 L1194.79 1207.22 L1195.37 1207.22 L1195.96 1207.22 L1196.55 1207.22 L1197.13 1207.22 L1197.72 1207.22 L1198.31 1207.22 L1198.89 1207.22 L1199.48 1207.22 L1200.07 1207.22 L1200.65 1207.22 L1201.24 1207.22 L1201.83 1207.22 L1202.41 1207.22 L1203 1207.22 L1203.58 1207.22 L1204.17 1207.22 L1204.76 1207.22 L1205.34 1207.22 L1205.93 1207.22 L1206.52 1207.22 L1207.1 1207.22 L1207.69 1207.22 L1208.28 1207.22 L1208.86 1207.22 L1209.45 1207.22 L1210.03 1207.22 L1210.62 1207.22 L1211.21 1207.22 L1211.79 1207.22 L1212.38 1207.22 L1212.97 1207.22 L1213.55 1207.22 L1214.14 1207.22 L1214.73 1207.22 L1215.31 1207.22 L1215.9 1207.22 L1216.49 1207.22 L1217.07 1207.22 L1217.66 1207.22 L1218.24 1207.22 L1218.83 1207.22 L1219.42 1207.22 L1220 1207.22 L1220.59 1207.22 L1221.18 1207.22 L1221.76 1207.22 L1222.35 1207.22 L1222.94 1207.22 L1223.52 1207.22 L1224.11 1207.22 L1224.7 1207.22 L1225.28 1207.22 L1225.87 1207.22 L1226.45 1207.22 L1227.04 1207.22 L1227.63 1207.22 L1228.21 1207.22 L1228.8 1207.22 L1229.39 1207.22 L1229.97 1207.22 L1230.56 1207.22 L1231.15 1207.22 L1231.73 1207.22 L1232.32 1207.22 L1232.91 1207.22 L1233.49 1207.22 L1234.08 1207.22 L1234.66 1207.22 L1235.25 1207.22 L1235.84 1207.22 L1236.42 1207.22 L1237.01 1207.22 L1237.6 1207.22 L1238.18 1207.22 L1238.77 1207.22 L1239.36 1207.22 L1239.94 1207.22 L1240.53 1207.22 L1241.11 1207.22 L1241.7 1207.22 L1242.29 1207.22 L1242.87 1207.22 L1243.46 1207.22 L1244.05 1207.22 L1244.63 1207.22 L1245.22 1207.22 L1245.81 1207.22 L1246.39 1207.22 L1246.98 1207.22 L1247.57 1207.22 L1248.15 1207.22 L1248.74 1207.22 L1249.32 1207.22 L1249.91 1207.22 L1250.5 1207.22 L1251.08 1207.22 L1251.67 1207.22 L1252.26 1207.22 L1252.84 1207.22 L1253.43 1207.22 L1254.02 1207.22 L1254.6 1207.22 L1255.19 1207.22 L1255.78 1207.22 L1256.36 1207.22 L1256.95 1207.22 L1257.53 1207.22 L1258.12 1207.22 L1258.71 1207.22 L1259.29 1207.22 L1259.88 1207.22 L1260.47 1207.22 L1261.05 1207.22 L1261.64 1207.22 L1262.23 1207.22 L1262.81 1207.22 L1263.4 1207.22 L1263.98 1207.22 L1264.57 1207.22 L1265.16 1207.22 L1265.74 1207.22 L1266.33 1207.22 L1266.92 1207.22 L1267.5 1207.22 L1268.09 1207.22 L1268.68 1207.22 L1269.26 1207.22 L1269.85 1207.22 L1270.44 1207.22 L1271.02 1207.22 L1271.61 1207.22 L1272.19 1207.22 L1272.78 1207.22 L1273.37 1207.22 L1273.95 1207.22 L1274.54 1207.22 L1275.13 1207.22 L1275.71 1207.22 L1276.3 1207.22 L1276.89 1207.22 L1277.47 1207.22 L1278.06 1207.22 L1278.65 1207.22 L1279.23 1207.22 L1279.82 1207.22 L1280.4 1207.22 L1280.99 1207.22 L1281.58 1207.22 L1282.16 1207.22 L1282.75 1207.22 L1283.34 1207.22 L1283.92 1207.22 L1284.51 1207.22 L1285.1 1207.22 L1285.68 1207.22 L1286.27 1207.22 L1286.86 1207.22 L1287.44 1207.22 L1288.03 1207.22 L1288.61 1207.22 L1289.2 1207.22 L1289.79 1207.22 L1290.37 1207.22 L1290.96 1207.22 L1291.55 1207.22 L1292.13 1207.22 L1292.72 1207.22 L1293.31 1207.22 L1293.89 1207.22 L1294.48 1207.22 L1295.06 1207.22 L1295.65 1207.22 L1296.24 1207.22 L1296.82 1207.22 L1297.41 1207.22 L1298 1207.22 L1298.58 1207.22 L1299.17 1207.22 L1299.76 1207.22 L1300.34 1207.22 L1300.93 1207.22 L1301.52 1207.22 L1302.1 1207.22 L1302.69 1207.22 L1303.27 1207.22 L1303.86 1207.22 L1304.45 1207.22 L1305.03 1207.22 L1305.62 1207.22 L1306.21 1207.22 L1306.79 1207.22 L1307.38 1207.22 L1307.97 1207.22 L1308.55 1207.22 L1309.14 1207.22 L1309.73 1207.22 L1310.31 1207.22 L1310.9 1207.22 L1311.48 1207.22 L1312.07 1207.22 L1312.66 1207.22 L1313.24 1207.22 L1313.83 1207.22 L1314.42 1207.22 L1315 1207.22 L1315.59 1207.22 L1316.18 1207.22 L1316.76 1207.22 L1317.35 1207.22 L1317.93 1207.22 L1318.52 1207.22 L1319.11 1207.22 L1319.69 1207.22 L1320.28 1207.22 L1320.87 1207.22 L1321.45 1207.22 L1322.04 1207.22 L1322.63 1207.22 L1323.21 1207.22 L1323.8 1207.22 L1324.39 1207.22 L1324.97 1207.22 L1325.56 1207.22 L1326.14 1207.22 L1326.73 1207.22 L1327.32 1207.22 L1327.9 1207.22 L1328.49 1207.22 L1329.08 1207.22 L1329.66 1207.22 L1330.25 1207.22 L1330.84 1207.22 L1331.42 1207.22 L1332.01 1207.22 L1332.6 1207.22 L1333.18 1207.22 L1333.77 1207.22 L1334.35 1207.22 L1334.94 1207.22 L1335.53 1207.22 L1336.11 1207.22 L1336.7 1207.22 L1337.29 1207.22 L1337.87 1207.22 L1338.46 1207.22 L1339.05 1207.22 L1339.63 1207.22 L1340.22 1207.22 L1340.8 1207.22 L1341.39 1207.22 L1341.98 1207.22 L1342.56 1207.22 L1343.15 1207.22 L1343.74 1207.22 L1344.32 1207.22 L1344.91 1207.22 L1345.5 1207.22 L1346.08 1207.22 L1346.67 1207.22 L1347.26 1207.22 L1347.84 1207.22 L1348.43 1207.22 L1349.01 1207.22 L1349.6 1207.22 L1350.19 1207.22 L1350.77 1207.22 L1351.36 1207.22 L1351.95 1207.22 L1352.53 1207.22 L1353.12 1207.22 L1353.71 1207.22 L1354.29 1207.22 L1354.88 1207.22 L1355.47 1207.22 L1356.05 1207.22 L1356.64 1207.22 L1357.22 1207.22 L1357.81 1207.22 L1358.4 1207.22 L1358.98 1207.22 L1359.57 1207.22 L1360.16 1207.22 L1360.74 1207.22 L1361.33 1207.22 L1361.92 1207.22 L1362.5 1207.22 L1363.09 1207.22 L1363.68 1207.22 L1364.26 1207.22 L1364.85 1207.22 L1365.43 1207.22 L1366.02 1207.22 L1366.61 1207.22 L1367.19 1207.22 L1367.78 1207.22 L1368.37 1207.22 L1368.95 1207.22 L1369.54 1207.22 L1370.13 1207.22 L1370.71 1207.22 L1371.3 1207.22 L1371.88 1207.22 L1372.47 1207.22 L1373.06 1207.22 L1373.64 1207.22 L1374.23 1207.22 L1374.82 1207.22 L1375.4 1207.22 L1375.99 1207.22 L1376.58 1207.22 L1377.16 1207.22 L1377.75 1207.22 L1378.34 1207.22 L1378.92 1207.22 L1379.51 1207.22 L1380.09 1207.22 L1380.68 1207.22 L1381.27 1207.22 L1381.85 1207.22 L1382.44 1207.22 L1383.03 1207.22 L1383.61 1207.22 L1384.2 1207.22 L1384.79 1207.22 L1385.37 1207.22 L1385.96 1207.22 L1386.55 1207.22 L1387.13 1207.22 L1387.72 1207.22 L1388.3 1207.22 L1388.89 1207.22 L1389.48 1207.22 L1390.06 1207.22 L1390.65 1207.22 L1391.24 1207.22 L1391.82 1207.22 L1392.41 1207.22 L1393 1207.22 L1393.58 1207.22 L1394.17 1207.22 L1394.75 1207.22 L1395.34 1207.22 L1395.93 1207.22 L1396.51 1207.22 L1397.1 1207.22 L1397.69 1207.22 L1398.27 1207.22 L1398.86 1207.22 L1399.45 1207.22 L1400.03 1207.22 L1400.62 1207.22 L1401.21 1207.22 L1401.79 1207.22 L1402.38 1207.22 L1402.96 1207.22 L1403.55 1207.22 L1404.14 1207.22 L1404.72 1207.22 L1405.31 1207.22 L1405.9 1207.22 L1406.48 1207.22 L1407.07 1207.22 L1407.66 1207.22 L1408.24 1207.22 L1408.83 1207.22 L1409.42 1207.22 L1410 1207.22 L1410.59 1207.22 L1411.17 1207.22 L1411.76 1207.22 L1412.35 1207.22 L1412.93 1207.22 L1413.52 1207.22 L1414.11 1207.22 L1414.69 1207.22 L1415.28 1207.22 L1415.87 1207.22 L1416.45 1207.22 L1417.04 1207.22 L1417.63 1207.22 L1418.21 1207.22 L1418.8 1207.22 L1419.38 1207.22 L1419.97 1207.22 L1420.56 1207.22 L1421.14 1207.22 L1421.73 1207.22 L1422.32 1207.22 L1422.9 1207.22 L1423.49 1207.22 L1424.08 1207.22 L1424.66 1207.22 L1425.25 1207.22 L1425.83 1207.22 L1426.42 1207.22 L1427.01 1207.22 L1427.59 1207.22 L1428.18 1207.22 L1428.77 1207.22 L1429.35 1207.22 L1429.94 1207.22 L1430.53 1207.22 L1431.11 1207.22 L1431.7 1207.22 L1432.29 1207.22 L1432.87 1207.22 L1433.46 1207.22 L1434.04 1207.22 L1434.63 1207.22 L1435.22 1207.22 L1435.8 1207.22 L1436.39 1207.22 L1436.98 1207.22 L1437.56 1207.22 L1438.15 1207.22 L1438.74 1207.22 L1439.32 1207.22 L1439.91 1207.22 L1440.5 1207.22 L1441.08 1207.22 L1441.67 1207.22 L1442.25 1207.22 L1442.84 1207.22 L1443.43 1207.22 L1444.01 1207.22 L1444.6 1207.22 L1445.19 1207.22 L1445.77 1207.22 L1446.36 1207.22 L1446.95 1207.22 L1447.53 1207.22 L1448.12 1207.22 L1448.7 1207.22 L1449.29 1207.22 L1449.88 1207.22 L1450.46 1207.22 L1451.05 1207.22 L1451.64 1207.22 L1452.22 1207.22 L1452.81 1207.22 L1453.4 1207.22 L1453.98 1207.22 L1454.57 1207.22 L1455.16 1207.22 L1455.74 1207.22 L1456.33 1207.22 L1456.91 1207.22 L1457.5 1207.22 L1458.09 1207.22 L1458.67 1207.22 L1459.26 1207.22 L1459.85 1207.22 L1460.43 1207.22 L1461.02 1207.22 L1461.61 1207.22 L1462.19 1207.22 L1462.78 1207.22 L1463.37 1207.22 L1463.95 1207.22 L1464.54 1207.22 L1465.12 1207.22 L1465.71 1207.22 L1466.3 1207.22 L1466.88 1207.22 L1467.47 1207.22 L1468.06 1207.22 L1468.64 1207.22 L1469.23 1207.22 L1469.82 1207.22 L1470.4 1207.22 L1470.99 1207.22 L1471.57 1207.22 L1472.16 1207.22 L1472.75 1207.22 L1473.33 1207.22 L1473.92 1207.22 L1474.51 1207.22 L1475.09 1207.22 L1475.68 1207.22 L1476.27 1207.22 L1476.85 1207.22 L1477.44 1207.22 L1478.03 1207.22 L1478.61 1207.22 L1479.2 1207.22 L1479.78 1207.22 L1480.37 1207.22 L1480.96 1207.22 L1481.54 1207.22 L1482.13 1207.22 L1482.72 1207.22 L1483.3 1207.22 L1483.89 1207.22 L1484.48 1207.22 L1485.06 1207.22 L1485.65 1207.22 L1486.24 1207.22 L1486.82 1207.22 L1487.41 1207.22 L1487.99 1207.22 L1488.58 1207.22 L1489.17 1207.22 L1489.75 1207.22 L1490.34 1207.22 L1490.93 1207.22 L1491.51 1207.22 L1492.1 1207.22 L1492.69 1207.22 L1493.27 1207.22 L1493.86 1207.22 L1494.45 1207.22 L1495.03 1207.22 L1495.62 1207.22 L1496.2 1207.22 L1496.79 1207.22 L1497.38 1207.22 L1497.96 1207.22 L1498.55 1207.22 L1499.14 1207.22 L1499.72 1207.22 L1500.31 1207.22 L1500.9 1207.22 L1501.48 1207.22 L1502.07 1207.22 L1502.65 1207.22 L1503.24 1207.22 L1503.83 1207.22 L1504.41 1207.22 L1505 1207.22 L1505.59 1207.22 L1506.17 1207.22 L1506.76 1207.22 L1507.35 1207.22 L1507.93 1207.22 L1508.52 1207.22 L1509.11 1207.22 L1509.69 1207.22 L1510.28 1207.22 L1510.86 1207.22 L1511.45 1207.22 L1512.04 1207.22 L1512.62 1207.22 L1513.21 1207.22 L1513.8 1207.22 L1514.38 1207.22 L1514.97 1207.22 L1515.56 1207.22 L1516.14 1207.22 L1516.73 1207.22 L1517.32 1207.22 L1517.9 1207.22 L1518.49 1207.22 L1519.07 1207.22 L1519.66 1207.22 L1520.25 1207.22 L1520.83 1207.22 L1521.42 1207.22 L1522.01 1207.22 L1522.59 1207.22 L1523.18 1207.22 L1523.77 1207.22 L1524.35 1207.22 L1524.94 1207.22 L1525.52 1207.22 L1526.11 1207.22 L1526.7 1207.22 L1527.28 1207.22 L1527.87 1207.22 L1528.46 1207.22 L1529.04 1207.22 L1529.63 1207.22 L1530.22 1207.22 L1530.8 1207.22 L1531.39 1207.22 L1531.98 1207.22 L1532.56 1207.22 L1533.15 1207.22 L1533.73 1207.22 L1534.32 1207.22 L1534.91 1207.22 L1535.49 1207.22 L1536.08 1207.22 L1536.67 1207.22 L1537.25 1207.22 L1537.84 1207.22 L1538.43 1207.22 L1539.01 1207.22 L1539.6 1207.22 L1540.19 1207.22 L1540.77 1207.22 L1541.36 1207.22 L1541.94 1207.22 L1542.53 1207.22 L1543.12 1207.22 L1543.7 1207.22 L1544.29 1207.22 L1544.88 1207.22 L1545.46 1207.22 L1546.05 1207.22 L1546.64 1207.22 L1547.22 1207.22 L1547.81 1207.22 L1548.4 1207.22 L1548.98 1207.22 L1549.57 1207.22 L1550.15 1207.22 L1550.74 1207.22 L1551.33 1207.22 L1551.91 1207.22 L1552.5 1207.22 L1553.09 1207.22 L1553.67 1207.22 L1554.26 1207.22 L1554.85 1207.22 L1555.43 1207.22 L1556.02 1207.22 L1556.6 1207.22 L1557.19 1207.22 L1557.78 1207.22 L1558.36 1207.22 L1558.95 1207.22 L1559.54 1207.22 L1560.12 1207.22 L1560.71 1207.22 L1561.3 1207.22 L1561.88 1207.22 L1562.47 1207.22 L1563.06 1207.22 L1563.64 1207.22 L1564.23 1207.22 L1564.81 1207.22 L1565.4 1207.22 L1565.99 1207.22 L1566.57 1207.22 L1567.16 1207.22 L1567.75 1207.22 L1568.33 1207.22 L1568.92 1207.22 L1569.51 1207.22 L1570.09 1207.22 L1570.68 1207.22 L1571.27 1207.22 L1571.85 1207.22 L1572.44 1207.22 L1573.02 1207.22 L1573.61 1207.22 L1574.2 1207.22 L1574.78 1207.22 L1575.37 1207.22 L1575.96 1207.22 L1576.54 1207.22 L1577.13 1207.22 L1577.72 1207.22 L1578.3 1207.22 L1578.89 1207.22 L1579.47 1207.22 L1580.06 1207.22 L1580.65 1207.22 L1581.23 1207.22 L1581.82 1207.22 L1582.41 1207.22 L1582.99 1207.22 L1583.58 1207.22 L1584.17 1207.22 L1584.75 1207.22 L1585.34 1207.22 L1585.93 1207.22 L1586.51 1207.22 L1587.1 1207.22 L1587.68 1207.22 L1588.27 1207.22 L1588.86 1207.22 L1589.44 1207.22 L1590.03 1207.22 L1590.62 1207.22 L1591.2 1207.22 L1591.79 1207.22 L1592.38 1207.22 L1592.96 1207.22 L1593.55 1207.22 L1594.14 1207.22 L1594.72 1207.22 L1595.31 1207.22 L1595.89 1207.22 L1596.48 1207.22 L1597.07 1207.22 L1597.65 1207.22 L1598.24 1207.22 L1598.83 1207.22 L1599.41 1207.22 L1600 1207.22 L1600.59 1207.22 L1601.17 1207.22 L1601.76 1207.22 L1602.34 1207.22 L1602.93 1207.22 L1603.52 1207.22 L1604.1 1207.22 L1604.69 1207.22 L1605.28 1207.22 L1605.86 1207.22 L1606.45 1207.22 L1607.04 1207.22 L1607.62 1207.22 L1608.21 1207.22 L1608.8 1207.22 L1609.38 1207.22 L1609.97 1207.22 L1610.55 1207.22 L1611.14 1207.22 L1611.73 1207.22 L1612.31 1207.22 L1612.9 1207.22 L1613.49 1207.22 L1614.07 1207.22 L1614.66 1207.22 L1615.25 1207.22 L1615.83 1207.22 L1616.42 1207.22 L1617.01 1207.22 L1617.59 1207.22 L1618.18 1207.22 L1618.76 1207.22 L1619.35 1207.22 L1619.94 1207.22 L1620.52 1207.22 L1621.11 1207.22 L1621.7 1207.22 L1622.28 1207.22 L1622.87 1207.22 L1623.46 1207.22 L1624.04 1207.22 L1624.63 1207.22 L1625.22 1207.22 L1625.8 1207.22 L1626.39 1207.22 L1626.97 1207.22 L1627.56 1207.22 L1628.15 1207.22 L1628.73 1207.22 L1629.32 1207.22 L1629.91 1207.22 L1630.49 1207.22 L1631.08 1207.22 L1631.67 1207.22 L1632.25 1207.22 L1632.84 1207.22 L1633.42 1207.22 L1634.01 1207.22 L1634.6 1207.22 L1635.18 1207.22 L1635.77 1207.22 L1636.36 1207.22 L1636.94 1207.22 L1637.53 1207.22 L1638.12 1207.22 L1638.7 1207.22 L1639.29 1207.22 L1639.88 1207.22 L1640.46 1207.22 L1641.05 1207.22 L1641.63 1207.22 L1642.22 1207.22 L1642.81 1207.22 L1643.39 1207.22 L1643.98 1207.22 L1644.57 1207.22 L1645.15 1207.22 L1645.74 1207.22 L1646.33 1207.22 L1646.91 1207.22 L1647.5 1207.22 L1648.09 1207.22 L1648.67 1207.22 L1649.26 1207.22 L1649.84 1207.22 L1650.43 1207.22 L1651.02 1207.22 L1651.6 1207.22 L1652.19 1207.22 L1652.78 1207.22 L1653.36 1207.22 L1653.95 1207.22 L1654.54 1207.22 L1655.12 1207.22 L1655.71 1207.22 L1656.29 1207.22 L1656.88 1207.22 L1657.47 1207.22 L1658.05 1207.22 L1658.64 1207.22 L1659.23 1207.22 L1659.81 1207.22 L1660.4 1207.22 L1660.99 1207.22 L1661.57 1207.22 L1662.16 1207.22 L1662.75 1207.22 L1663.33 1207.22 L1663.92 1207.22 L1664.5 1207.22 L1665.09 1207.22 L1665.68 1207.22 L1666.26 1207.22 L1666.85 1207.22 L1667.44 1207.22 L1668.02 1207.22 L1668.61 1207.22 L1669.2 1207.22 L1669.78 1207.22 L1670.37 1207.22 L1670.96 1207.22 L1671.54 1207.22 L1672.13 1207.22 L1672.71 1207.22 L1673.3 1207.22 L1673.89 1207.22 L1674.47 1207.22 L1675.06 1207.22 L1675.65 1207.22 L1676.23 1207.22 L1676.82 1207.22 L1677.41 1207.22 L1677.99 1207.22 L1678.58 1207.22 L1679.17 1207.22 L1679.75 1207.22 L1680.34 1207.22 L1680.92 1207.22 L1681.51 1207.22 L1682.1 1207.22 L1682.68 1207.22 L1683.27 1207.22 L1683.86 1207.22 L1684.44 1207.22 L1685.03 1207.22 L1685.62 1207.22 L1686.2 1207.22 L1686.79 1207.22 L1687.37 1207.22 L1687.96 1207.22 L1688.55 1207.22 L1689.13 1207.22 L1689.72 1207.22 L1690.31 1207.22 L1690.89 1207.22 L1691.48 1207.22 L1692.07 1207.22 L1692.65 1207.22 L1693.24 1207.22 L1693.83 1207.22 L1694.41 1207.22 L1695 1207.22 L1695.58 1207.22 L1696.17 1207.22 L1696.76 1207.22 L1697.34 1207.22 L1697.93 1207.22 L1698.52 1207.22 L1699.1 1207.22 L1699.69 1207.22 L1700.28 1207.22 L1700.86 1207.22 L1701.45 1207.22 L1702.04 1207.22 L1702.62 1207.22 L1703.21 1207.22 L1703.79 1207.22 L1704.38 1207.22 L1704.97 1207.22 L1705.55 1207.22 L1706.14 1207.22 L1706.73 1207.22 L1707.31 1207.22 L1707.9 1207.22 L1708.49 1207.22 L1709.07 1207.22 L1709.66 1207.22 L1710.24 1207.22 L1710.83 1207.22 L1711.42 1207.22 L1712 1207.22 L1712.59 1207.22 L1713.18 1207.22 L1713.76 1207.22 L1714.35 1207.22 L1714.94 1207.22 L1715.52 1207.22 L1716.11 1207.22 L1716.7 1207.22 L1717.28 1207.22 L1717.87 1207.22 L1718.45 1207.22 L1719.04 1207.22 L1719.63 1207.22 L1720.21 1207.22 L1720.8 1207.22 L1721.39 1207.22 L1721.97 1207.22 L1722.56 1207.22 L1723.15 1207.22 L1723.73 1207.22 L1724.32 1207.22 L1724.91 1207.22 L1725.49 1207.22 L1726.08 1207.22 L1726.66 1207.22 L1727.25 1207.22 L1727.84 1207.22 L1728.42 1207.22 L1729.01 1207.22 L1729.6 1207.22 L1730.18 1207.22 L1730.77 1207.22 L1731.36 1207.22 L1731.94 1207.22 L1732.53 1207.22 L1733.11 1207.22 L1733.7 1207.22 L1734.29 1207.22 L1734.87 1207.22 L1735.46 1207.22 L1736.05 1207.22 L1736.63 1207.22 L1737.22 1207.22 L1737.81 1207.22 L1738.39 1207.22 L1738.98 1207.22 L1739.57 1207.22 L1740.15 1207.22 L1740.74 1207.22 L1741.32 1207.22 L1741.91 1207.22 L1742.5 1207.22 L1743.08 1207.22 L1743.67 1207.22 L1744.26 1207.22 L1744.84 1207.22 L1745.43 1207.22 L1746.02 1207.22 L1746.6 1207.22 L1747.19 1207.22 L1747.78 1207.22 L1748.36 1207.22 L1748.95 1207.22 L1749.53 1207.22 L1750.12 1207.22 L1750.71 1207.22 L1751.29 1207.22 L1751.88 1207.22 L1752.47 1207.22 L1753.05 1207.22 L1753.64 1207.22 L1754.23 1207.22 L1754.81 1207.22 L1755.4 1207.22 L1755.99 1207.22 L1756.57 1207.22 L1757.16 1207.22 L1757.74 1207.22 L1758.33 1207.22 L1758.92 1207.22 L1759.5 1207.22 L1760.09 1207.22 L1760.68 1207.22 L1761.26 1207.22 L1761.85 1207.22 L1762.44 1207.22 L1763.02 1207.22 L1763.61 1207.22 L1764.19 1207.22 L1764.78 1207.22 L1765.37 1207.22 L1765.95 1207.22 L1766.54 1207.22 L1767.13 1207.22 L1767.71 1207.22 L1768.3 1207.22 L1768.89 1207.22 L1769.47 1207.22 L1770.06 1207.22 L1770.65 1207.22 L1771.23 1207.22 L1771.82 1207.22 L1772.4 1207.22 L1772.99 1207.22 L1773.58 1207.22 L1774.16 1207.22 L1774.75 1207.22 L1775.34 1207.22 L1775.92 1207.22 L1776.51 1207.22 L1777.1 1207.22 L1777.68 1207.22 L1778.27 1207.22 L1778.86 1207.22 L1779.44 1207.22 L1780.03 1207.22 L1780.61 1207.22 L1781.2 1207.22 L1781.79 1207.22 L1782.37 1207.22 L1782.96 1207.22 L1783.55 1207.22 L1784.13 1207.22 L1784.72 1207.22 L1785.31 1207.22 L1785.89 1207.22 L1786.48 1207.22 L1787.06 1207.22 L1787.65 1207.22 L1788.24 1207.22 L1788.82 1207.22 L1789.41 1207.22 L1790 1207.22 L1790.58 1207.22 L1791.17 1207.22 L1791.76 1207.22 L1792.34 1207.22 L1792.93 1207.22 L1793.52 1207.22 L1794.1 1207.22 L1794.69 1207.22 L1795.27 1207.22 L1795.86 1207.22 L1796.45 1207.22 L1797.03 1207.22 L1797.62 1207.22 L1798.21 1207.22 L1798.79 1207.22 L1799.38 1207.22 L1799.97 1207.22 L1800.55 1207.22 L1801.14 1207.22 L1801.73 1207.22 L1802.31 1207.22 L1802.9 1207.22 L1803.48 1207.22 L1804.07 1207.22 L1804.66 1207.22 L1805.24 1207.22 L1805.83 1207.22 L1806.42 1207.22 L1807 1207.22 L1807.59 1207.22 L1808.18 1207.22 L1808.76 1207.22 L1809.35 1207.22 L1809.94 1207.22 L1810.52 1207.22 L1811.11 1207.22 L1811.69 1207.22 L1812.28 1207.22 L1812.87 1207.22 L1813.45 1207.22 L1814.04 1207.22 L1814.63 1207.22 L1815.21 1207.22 L1815.8 1207.22 L1816.39 1207.22 L1816.97 1207.22 L1817.56 1207.22 L1818.14 1207.22 L1818.73 1207.22 L1819.32 1207.22 L1819.9 1207.22 L1820.49 1207.22 L1821.08 1207.22 L1821.66 1207.22 L1822.25 1207.22 L1822.84 1207.22 L1823.42 1207.22 L1824.01 1207.22 L1824.6 1207.22 L1825.18 1207.22 L1825.77 1207.22 L1826.35 1207.22 L1826.94 1207.22 L1827.53 1207.22 L1828.11 1207.22 L1828.7 1207.22 L1829.29 1207.22 L1829.87 1207.22 L1830.46 1207.22 L1831.05 1207.22 L1831.63 1207.22 L1832.22 1207.22 L1832.81 1207.22 L1833.39 1207.22 L1833.98 1207.22 L1834.56 1207.22 L1835.15 1207.22 L1835.74 1207.22 L1836.32 1207.22 L1836.91 1207.22 L1837.5 1207.22 L1838.08 1207.22 L1838.67 1207.22 L1839.26 1207.22 L1839.84 1207.22 L1840.43 1207.22 L1841.01 1207.22 L1841.6 1207.22 L1842.19 1207.22 L1842.77 1207.22 L1843.36 1207.22 L1843.95 1207.22 L1844.53 1207.22 L1845.12 1207.22 L1845.71 1207.22 L1846.29 1207.22 L1846.88 1207.22 L1847.47 1207.22 L1848.05 1207.22 L1848.64 1207.22 L1849.22 1207.22 L1849.81 1207.22 L1850.4 1207.22 L1850.98 1207.22 L1851.57 1207.22 L1852.16 1207.22 L1852.74 1207.22 L1853.33 1207.22 L1853.92 1207.22 L1854.5 1207.22 L1855.09 1207.22 L1855.68 1207.22 L1856.26 1207.22 L1856.85 1207.22 L1857.43 1207.22 L1858.02 1207.22 L1858.61 1207.22 L1859.19 1207.22 L1859.78 1207.22 L1860.37 1207.22 L1860.95 1207.22 L1861.54 1207.22 L1862.13 1207.22 L1862.71 1207.22 L1863.3 1207.22 L1863.88 1207.22 L1864.47 1207.22 L1865.06 1207.22 L1865.64 1207.22 L1866.23 1207.22 L1866.82 1207.22 L1867.4 1207.22 L1867.99 1207.22 L1868.58 1207.22 L1869.16 1207.22 L1869.75 1207.22 L1870.34 1207.22 L1870.92 1207.22 L1871.51 1207.22 L1872.09 1207.22 L1872.68 1207.22 L1873.27 1207.22 L1873.85 1207.22 L1874.44 1207.22 L1875.03 1207.22 L1875.61 1207.22 L1876.2 1207.22 L1876.79 1207.22 L1877.37 1207.22 L1877.96 1207.22 L1878.55 1207.22 L1879.13 1207.22 L1879.72 1207.22 L1880.3 1207.22 L1880.89 1207.22 L1881.48 1207.22 L1882.06 1207.22 L1882.65 1207.22 L1883.24 1207.22 L1883.82 1207.22 L1884.41 1207.22 L1885 1207.22 L1885.58 1207.22 L1886.17 1207.22 L1886.76 1207.22 L1887.34 1207.22 L1887.93 1207.22 L1888.51 1207.22 L1889.1 1207.22 L1889.69 1207.22 L1890.27 1207.22 L1890.86 1207.22 L1891.45 1207.22 L1892.03 1207.22 L1892.62 1207.22 L1893.21 1207.22 L1893.79 1207.22 L1894.38 1207.22 L1894.96 1207.22 L1895.55 1207.22 L1896.14 1207.22 L1896.72 1207.22 L1897.31 1207.22 L1897.9 1207.22 L1898.48 1207.22 L1899.07 1207.22 L1899.66 1207.22 L1900.24 1207.22 L1900.83 1207.22 L1901.42 1207.22 L1902 1207.22 L1902.59 1207.22 L1903.17 1207.22 L1903.76 1207.22 L1904.35 1207.22 L1904.93 1207.22 L1905.52 1207.22 L1906.11 1207.22 L1906.69 1207.22 L1907.28 1207.22 L1907.87 1207.22 L1908.45 1207.22 L1909.04 1207.22 L1909.63 1207.22 L1910.21 1207.22 L1910.8 1207.22 L1911.38 1207.22 L1911.97 1207.22 L1912.56 1207.22 L1913.14 1207.22 L1913.73 1207.22 L1914.32 1207.22 L1914.9 1207.22 L1915.49 1207.22 L1916.08 1207.22 L1916.66 1207.22 L1917.25 1207.22 L1917.83 1207.22 L1918.42 1207.22 L1919.01 1207.22 L1919.59 1207.22 L1920.18 1207.22 L1920.77 1207.22 L1921.35 1207.22 L1921.94 1207.22 L1922.53 1207.22 L1923.11 1207.22 L1923.7 1207.22 L1924.29 1207.22 L1924.87 1207.22 L1925.46 1207.22 L1926.04 1207.22 L1926.63 1207.22 L1927.22 1207.22 L1927.8 1207.22 L1928.39 1207.22 L1928.98 1207.22 L1929.56 1207.22 L1930.15 1207.22 L1930.74 1207.22 L1931.32 1207.22 L1931.91 1207.22 L1932.5 1207.22 L1933.08 1207.22 L1933.67 1207.22 L1934.25 1207.22 L1934.84 1207.22 L1935.43 1207.22 L1936.01 1207.22 L1936.6 1207.22 L1937.19 1207.22 L1937.77 1207.22 L1938.36 1207.22 L1938.95 1207.22 L1939.53 1207.22 L1940.12 1207.22 L1940.71 1207.22 L1941.29 1207.22 L1941.88 1207.22 L1942.46 1207.22 L1943.05 1207.22 L1943.64 1207.22 L1944.22 1207.22 L1944.81 1207.22 L1945.4 1207.22 L1945.98 1207.22 L1946.57 1207.22 L1947.16 1207.22 L1947.74 1207.22 L1948.33 1207.22 L1948.91 1207.22 L1949.5 1207.22 L1950.09 1207.22 L1950.67 1207.22 L1951.26 1207.22 L1951.85 1207.22 L1952.43 1207.22 L1953.02 1207.22 L1953.61 1207.22 L1954.19 1207.22 L1954.78 1207.22 L1955.37 1207.22 L1955.95 1207.22 L1956.54 1207.22 L1957.12 1207.22 L1957.71 1207.22 L1958.3 1207.22 L1958.88 1207.22 L1959.47 1207.22 L1960.06 1207.22 L1960.64 1207.22 L1961.23 1207.22 L1961.82 1207.22 L1962.4 1207.22 L1962.99 1207.22 L1963.58 1207.22 L1964.16 1207.22 L1964.75 1207.22 L1965.33 1207.22 L1965.92 1207.22 L1966.51 1207.22 L1967.09 1207.22 L1967.68 1207.22 L1968.27 1207.22 L1968.85 1207.22 L1969.44 1207.22 L1970.03 1207.22 L1970.61 1207.22 L1971.2 1207.22 L1971.78 1207.22 L1972.37 1207.22 L1972.96 1207.22 L1973.54 1207.22 L1974.13 1207.22 L1974.72 1207.22 L1975.3 1207.22 L1975.89 1207.22 L1976.48 1207.22 L1977.06 1207.22 L1977.65 1207.22 L1978.24 1207.22 L1978.82 1207.22 L1979.41 1207.22 L1979.99 1207.22 L1980.58 1207.22 L1981.17 1207.22 L1981.75 1207.22 L1982.34 1207.22 L1982.93 1207.22 L1983.51 1207.22 L1984.1 1207.22 L1984.69 1207.22 L1985.27 1207.22 L1985.86 1207.22 L1986.45 1207.22 L1987.03 1207.22 L1987.62 1207.22 L1988.2 1207.22 L1988.79 1207.22 L1989.38 1207.22 L1989.96 1207.22 L1990.55 1207.22 L1991.14 1207.22 L1991.72 1207.22 L1992.31 1207.22 L1992.9 1207.22 L1993.48 1207.22 L1994.07 1207.22 L1994.65 1207.22 L1995.24 1207.22 L1995.83 1207.22 L1996.41 1207.22 L1997 1207.22 L1997.59 1207.22 L1998.17 1207.22 L1998.76 1207.22 L1999.35 1207.22 L1999.93 1207.22 L2000.52 1207.22 L2001.11 1207.22 L2001.69 1207.22 L2002.28 1207.22 L2002.86 1207.22 L2003.45 1207.22 L2004.04 1207.22 L2004.62 1207.22 L2005.21 1207.22 L2005.8 1207.22 L2006.38 1207.22 L2006.97 1207.22 L2007.56 1207.22 L2008.14 1207.22 L2008.73 1207.22 L2009.32 1207.22 L2009.9 1207.22 L2010.49 1207.22 L2011.07 1207.22 L2011.66 1207.22 L2012.25 1207.22 L2012.83 1207.22 L2013.42 1207.22 L2014.01 1207.22 L2014.59 1207.22 L2015.18 1207.22 L2015.77 1207.22 L2016.35 1207.22 L2016.94 1207.22 L2017.53 1207.22 L2018.11 1207.22 L2018.7 1207.22 L2019.28 1207.22 L2019.87 1207.22 L2020.46 1207.22 L2021.04 1207.22 L2021.63 1207.22 L2022.22 1207.22 L2022.8 1207.22 L2023.39 1207.22 L2023.98 1207.22 L2024.56 1207.22 L2025.15 1207.22 L2025.73 1207.22 L2026.32 1207.22 L2026.91 1207.22 L2027.49 1207.22 L2028.08 1207.22 L2028.67 1207.22 L2029.25 1207.22 L2029.84 1207.22 L2030.43 1207.22 L2031.01 1207.22 L2031.6 1207.22 L2032.19 1207.22 L2032.77 1207.22 L2033.36 1207.22 L2033.94 1207.22 L2034.53 1207.22 L2035.12 1207.22 L2035.7 1207.22 L2036.29 1207.22 L2036.88 1207.22 L2037.46 1207.22 L2038.05 1207.22 L2038.64 1207.22 L2039.22 1207.22 L2039.81 1207.22 L2040.4 1207.22 L2040.98 1207.22 L2041.57 1207.22 L2042.15 1207.22 L2042.74 1207.22 L2043.33 1207.22 L2043.91 1207.22 L2044.5 1207.22 L2045.09 1207.22 L2045.67 1207.22 L2046.26 1207.22 L2046.85 1207.22 L2047.43 1207.22 L2048.02 1207.22 L2048.6 1207.22 L2049.19 1207.22 L2049.78 1207.22 L2050.36 1207.22 L2050.95 1207.22 L2051.54 1207.22 L2052.12 1207.22 L2052.71 1207.22 L2053.3 1207.22 L2053.88 1207.22 L2054.47 1207.22 L2055.06 1207.22 L2055.64 1207.22 L2056.23 1207.22 L2056.81 1207.22 L2057.4 1207.22 L2057.99 1207.22 L2058.57 1207.22 L2059.16 1207.22 L2059.75 1207.22 L2060.33 1207.22 L2060.92 1207.22 L2061.51 1207.22 L2062.09 1207.22 L2062.68 1207.22 L2063.27 1207.22 L2063.85 1207.22 L2064.44 1207.22 L2065.02 1207.22 L2065.61 1207.22 L2066.2 1207.22 L2066.78 1207.22 L2067.37 1207.22 L2067.96 1207.22 L2068.54 1207.22 L2069.13 1207.22 L2069.72 1207.22 L2070.3 1207.22 L2070.89 1207.22 L2071.48 1207.22 L2072.06 1207.22 L2072.65 1207.22 L2073.23 1207.22 L2073.82 1207.22 L2074.41 1207.22 L2074.99 1207.22 L2075.58 1207.22 L2076.17 1207.22 L2076.75 1207.22 L2077.34 1207.22 L2077.93 1207.22 L2078.51 1207.22 L2079.1 1207.22 L2079.68 1207.22 L2080.27 1207.22 L2080.86 1207.22 L2081.44 1207.22 L2082.03 1207.22 L2082.62 1207.22 L2083.2 1207.22 L2083.79 1207.22 L2084.38 1207.22 L2084.96 1207.22 L2085.55 1207.22 L2086.14 1207.22 L2086.72 1207.22 L2087.31 1207.22 L2087.89 1207.22 L2088.48 1207.22 L2089.07 1207.22 L2089.65 1207.22 L2090.24 1207.22 L2090.83 1207.22 L2091.41 1207.22 L2092 1207.22 L2092.59 1207.22 L2093.17 1207.22 L2093.76 1207.22 L2094.35 1207.22 L2094.93 1207.22 L2095.52 1207.22 L2096.1 1207.22 L2096.69 1207.22 L2097.28 1207.22 L2097.86 1207.22 L2098.45 1207.22 L2099.04 1207.22 L2099.62 1207.22 L2100.21 1207.22 L2100.8 1207.22 L2101.38 1207.22 L2101.97 1207.22 L2102.55 1207.22 L2103.14 1207.22 L2103.73 1207.22 L2104.31 1207.22 L2104.9 1207.22 L2105.49 1207.22 L2106.07 1207.22 L2106.66 1207.22 L2107.25 1207.22 L2107.83 1207.22 L2108.42 1207.22 L2109.01 1207.22 L2109.59 1207.22 L2110.18 1207.22 L2110.76 1207.22 L2111.35 1207.22 L2111.94 1207.22 L2112.52 1207.22 L2113.11 1207.22 L2113.7 1207.22 L2114.28 1207.22 L2114.87 1207.22 L2115.46 1207.22 L2116.04 1207.22 L2116.63 1207.22 L2117.22 1207.22 L2117.8 1207.22 L2118.39 1207.22 L2118.97 1207.22 L2119.56 1207.22 L2120.15 1207.22 L2120.73 1207.22 L2121.32 1207.22 L2121.91 1207.22 L2122.49 1207.22 L2123.08 1207.22 L2123.67 1207.22 L2124.25 1207.22 L2124.84 1207.22 L2125.42 1207.22 L2126.01 1207.22 L2126.6 1207.22 L2127.18 1207.22 L2127.77 1207.22 L2128.36 1207.22 L2128.94 1207.22 L2129.53 1207.22 L2130.12 1207.22 L2130.7 1207.22 L2131.29 1207.22 L2131.88 1207.22 L2132.46 1207.22 L2133.05 1207.22 L2133.63 1207.22 L2134.22 1207.22 L2134.81 1207.22 L2135.39 1207.22 L2135.98 1207.22 L2136.57 1207.22 L2137.15 1207.22 L2137.74 1207.22 L2138.33 1207.22 L2138.91 1207.22 L2139.5 1207.22 L2140.09 1207.22 L2140.67 1207.22 L2141.26 1207.22 L2141.84 1207.22 L2142.43 1207.22 L2143.02 1207.22 L2143.6 1207.22 L2144.19 1207.22 L2144.78 1207.22 L2145.36 1207.22 L2145.95 1207.22 L2146.54 1207.22 L2147.12 1207.22 L2147.71 1207.22 L2148.3 1207.22 L2148.88 1207.22 L2149.47 1207.22 L2150.05 1207.22 L2150.64 1207.22 L2151.23 1207.22 L2151.81 1207.22 L2152.4 1207.22 L2152.99 1207.22 L2153.57 1207.22 L2154.16 1207.22 L2154.75 1207.22 L2155.33 1207.22 L2155.92 1207.22 L2156.5 1207.22 L2157.09 1207.22 L2157.68 1207.22 L2158.26 1207.22 L2158.26 1207.1 L2157.68 1207.1 L2157.09 1207.1 L2156.5 1207.1 L2155.92 1207.1 L2155.33 1207.1 L2154.75 1207.1 L2154.16 1207.1 L2153.57 1207.1 L2152.99 1207.1 L2152.4 1207.1 L2151.81 1207.1 L2151.23 1207.1 L2150.64 1207.1 L2150.05 1207.1 L2149.47 1207.1 L2148.88 1207.1 L2148.3 1207.1 L2147.71 1207.1 L2147.12 1207.1 L2146.54 1207.1 L2145.95 1207.1 L2145.36 1207.1 L2144.78 1207.1 L2144.19 1207.1 L2143.6 1207.1 L2143.02 1207.1 L2142.43 1207.1 L2141.84 1207.1 L2141.26 1207.1 L2140.67 1207.1 L2140.09 1207.1 L2139.5 1207.1 L2138.91 1207.1 L2138.33 1207.1 L2137.74 1207.1 L2137.15 1207.1 L2136.57 1207.1 L2135.98 1207.1 L2135.39 1207.1 L2134.81 1207.1 L2134.22 1207.1 L2133.63 1207.1 L2133.05 1207.1 L2132.46 1207.1 L2131.88 1207.1 L2131.29 1207.1 L2130.7 1207.1 L2130.12 1207.1 L2129.53 1207.1 L2128.94 1207.1 L2128.36 1207.1 L2127.77 1207.1 L2127.18 1207.1 L2126.6 1207.1 L2126.01 1207.1 L2125.42 1207.1 L2124.84 1207.1 L2124.25 1207.1 L2123.67 1207.1 L2123.08 1207.1 L2122.49 1207.1 L2121.91 1207.1 L2121.32 1207.1 L2120.73 1207.1 L2120.15 1207.1 L2119.56 1207.1 L2118.97 1207.1 L2118.39 1207.1 L2117.8 1207.1 L2117.22 1207.1 L2116.63 1207.1 L2116.04 1207.1 L2115.46 1207.1 L2114.87 1207.1 L2114.28 1207.1 L2113.7 1207.1 L2113.11 1207.1 L2112.52 1207.1 L2111.94 1207.1 L2111.35 1207.1 L2110.76 1207.1 L2110.18 1207.1 L2109.59 1207.1 L2109.01 1207.1 L2108.42 1207.1 L2107.83 1207.1 L2107.25 1207.1 L2106.66 1207.1 L2106.07 1207.1 L2105.49 1207.1 L2104.9 1207.1 L2104.31 1207.1 L2103.73 1207.1 L2103.14 1207.1 L2102.55 1207.1 L2101.97 1207.1 L2101.38 1207.1 L2100.8 1207.1 L2100.21 1207.1 L2099.62 1207.1 L2099.04 1207.1 L2098.45 1207.1 L2097.86 1207.1 L2097.28 1207.1 L2096.69 1207.1 L2096.1 1207.1 L2095.52 1207.1 L2094.93 1207.1 L2094.35 1207.1 L2093.76 1207.1 L2093.17 1207.1 L2092.59 1207.1 L2092 1207.1 L2091.41 1207.1 L2090.83 1207.1 L2090.24 1207.1 L2089.65 1207.1 L2089.07 1207.1 L2088.48 1207.1 L2087.89 1207.1 L2087.31 1207.1 L2086.72 1207.1 L2086.14 1207.1 L2085.55 1207.1 L2084.96 1207.1 L2084.38 1207.1 L2083.79 1207.1 L2083.2 1207.1 L2082.62 1207.1 L2082.03 1207.1 L2081.44 1207.1 L2080.86 1207.1 L2080.27 1207.1 L2079.68 1207.1 L2079.1 1207.1 L2078.51 1207.1 L2077.93 1207.1 L2077.34 1207.1 L2076.75 1207.1 L2076.17 1207.1 L2075.58 1207.1 L2074.99 1207.1 L2074.41 1207.1 L2073.82 1207.1 L2073.23 1207.1 L2072.65 1207.1 L2072.06 1207.1 L2071.48 1207.1 L2070.89 1207.1 L2070.3 1207.1 L2069.72 1207.1 L2069.13 1207.1 L2068.54 1207.1 L2067.96 1207.1 L2067.37 1207.1 L2066.78 1207.1 L2066.2 1207.1 L2065.61 1207.1 L2065.02 1207.1 L2064.44 1207.1 L2063.85 1207.1 L2063.27 1207.1 L2062.68 1207.1 L2062.09 1207.1 L2061.51 1207.1 L2060.92 1207.1 L2060.33 1207.1 L2059.75 1207.1 L2059.16 1207.1 L2058.57 1207.1 L2057.99 1207.1 L2057.4 1207.1 L2056.81 1207.1 L2056.23 1207.1 L2055.64 1207.1 L2055.06 1207.1 L2054.47 1207.1 L2053.88 1207.1 L2053.3 1207.1 L2052.71 1207.1 L2052.12 1207.1 L2051.54 1207.1 L2050.95 1207.1 L2050.36 1207.1 L2049.78 1207.1 L2049.19 1207.1 L2048.6 1207.1 L2048.02 1207.1 L2047.43 1207.1 L2046.85 1207.1 L2046.26 1207.1 L2045.67 1207.1 L2045.09 1207.1 L2044.5 1207.1 L2043.91 1207.1 L2043.33 1207.1 L2042.74 1207.1 L2042.15 1207.1 L2041.57 1207.1 L2040.98 1207.1 L2040.4 1207.1 L2039.81 1207.1 L2039.22 1207.1 L2038.64 1207.1 L2038.05 1207.1 L2037.46 1207.1 L2036.88 1207.1 L2036.29 1207.1 L2035.7 1207.1 L2035.12 1207.1 L2034.53 1207.1 L2033.94 1207.1 L2033.36 1207.1 L2032.77 1207.1 L2032.19 1207.1 L2031.6 1207.1 L2031.01 1207.1 L2030.43 1207.1 L2029.84 1207.1 L2029.25 1207.1 L2028.67 1207.1 L2028.08 1207.1 L2027.49 1207.1 L2026.91 1207.1 L2026.32 1207.1 L2025.73 1207.1 L2025.15 1207.1 L2024.56 1207.1 L2023.98 1207.1 L2023.39 1207.1 L2022.8 1207.1 L2022.22 1207.1 L2021.63 1207.1 L2021.04 1207.1 L2020.46 1207.1 L2019.87 1207.1 L2019.28 1207.1 L2018.7 1207.1 L2018.11 1207.1 L2017.53 1207.1 L2016.94 1207.1 L2016.35 1207.1 L2015.77 1207.1 L2015.18 1207.1 L2014.59 1207.1 L2014.01 1207.1 L2013.42 1207.1 L2012.83 1207.1 L2012.25 1207.1 L2011.66 1207.1 L2011.07 1207.1 L2010.49 1207.1 L2009.9 1207.1 L2009.32 1207.1 L2008.73 1207.1 L2008.14 1207.1 L2007.56 1207.1 L2006.97 1207.1 L2006.38 1207.1 L2005.8 1207.1 L2005.21 1207.1 L2004.62 1207.1 L2004.04 1207.1 L2003.45 1207.1 L2002.86 1207.1 L2002.28 1207.1 L2001.69 1207.1 L2001.11 1207.1 L2000.52 1207.1 L1999.93 1207.1 L1999.35 1207.1 L1998.76 1207.1 L1998.17 1207.1 L1997.59 1207.1 L1997 1207.1 L1996.41 1207.1 L1995.83 1207.1 L1995.24 1207.1 L1994.65 1207.1 L1994.07 1207.1 L1993.48 1207.1 L1992.9 1207.1 L1992.31 1207.1 L1991.72 1207.1 L1991.14 1207.1 L1990.55 1207.1 L1989.96 1207.1 L1989.38 1207.1 L1988.79 1207.1 L1988.2 1207.1 L1987.62 1207.1 L1987.03 1207.1 L1986.45 1207.1 L1985.86 1207.1 L1985.27 1207.1 L1984.69 1207.1 L1984.1 1207.1 L1983.51 1207.1 L1982.93 1207.1 L1982.34 1207.1 L1981.75 1207.1 L1981.17 1207.1 L1980.58 1207.1 L1979.99 1207.1 L1979.41 1207.1 L1978.82 1207.1 L1978.24 1207.1 L1977.65 1207.1 L1977.06 1207.1 L1976.48 1207.1 L1975.89 1207.1 L1975.3 1207.1 L1974.72 1207.1 L1974.13 1207.1 L1973.54 1207.1 L1972.96 1207.1 L1972.37 1207.1 L1971.78 1207.1 L1971.2 1207.1 L1970.61 1207.1 L1970.03 1207.1 L1969.44 1207.1 L1968.85 1207.1 L1968.27 1207.1 L1967.68 1207.1 L1967.09 1207.1 L1966.51 1207.1 L1965.92 1207.1 L1965.33 1207.1 L1964.75 1207.1 L1964.16 1207.1 L1963.58 1207.1 L1962.99 1207.1 L1962.4 1207.1 L1961.82 1207.1 L1961.23 1207.1 L1960.64 1207.1 L1960.06 1207.1 L1959.47 1207.1 L1958.88 1207.1 L1958.3 1207.1 L1957.71 1207.1 L1957.12 1207.1 L1956.54 1207.1 L1955.95 1207.1 L1955.37 1207.1 L1954.78 1207.1 L1954.19 1207.1 L1953.61 1207.1 L1953.02 1207.1 L1952.43 1207.1 L1951.85 1207.1 L1951.26 1207.1 L1950.67 1207.1 L1950.09 1207.1 L1949.5 1207.1 L1948.91 1207.1 L1948.33 1207.1 L1947.74 1207.1 L1947.16 1207.1 L1946.57 1207.1 L1945.98 1207.1 L1945.4 1207.1 L1944.81 1207.1 L1944.22 1207.1 L1943.64 1207.1 L1943.05 1207.1 L1942.46 1207.1 L1941.88 1207.1 L1941.29 1207.1 L1940.71 1207.1 L1940.12 1207.1 L1939.53 1207.1 L1938.95 1207.1 L1938.36 1207.1 L1937.77 1207.1 L1937.19 1207.1 L1936.6 1207.1 L1936.01 1207.1 L1935.43 1207.1 L1934.84 1207.1 L1934.25 1207.1 L1933.67 1207.1 L1933.08 1207.1 L1932.5 1207.1 L1931.91 1207.1 L1931.32 1207.1 L1930.74 1207.1 L1930.15 1207.1 L1929.56 1207.1 L1928.98 1207.1 L1928.39 1207.1 L1927.8 1207.1 L1927.22 1207.1 L1926.63 1207.1 L1926.04 1207.1 L1925.46 1207.1 L1924.87 1207.1 L1924.29 1207.1 L1923.7 1207.1 L1923.11 1207.1 L1922.53 1207.1 L1921.94 1207.1 L1921.35 1207.1 L1920.77 1207.1 L1920.18 1207.1 L1919.59 1207.1 L1919.01 1207.1 L1918.42 1207.1 L1917.83 1207.1 L1917.25 1207.1 L1916.66 1207.1 L1916.08 1207.1 L1915.49 1207.1 L1914.9 1207.1 L1914.32 1207.1 L1913.73 1207.1 L1913.14 1207.1 L1912.56 1207.1 L1911.97 1207.1 L1911.38 1207.1 L1910.8 1207.1 L1910.21 1207.1 L1909.63 1207.1 L1909.04 1207.1 L1908.45 1207.1 L1907.87 1207.1 L1907.28 1207.1 L1906.69 1207.1 L1906.11 1207.1 L1905.52 1207.1 L1904.93 1207.1 L1904.35 1207.1 L1903.76 1207.1 L1903.17 1207.1 L1902.59 1207.1 L1902 1207.1 L1901.42 1207.1 L1900.83 1207.1 L1900.24 1207.1 L1899.66 1207.1 L1899.07 1207.1 L1898.48 1207.1 L1897.9 1207.1 L1897.31 1207.1 L1896.72 1207.1 L1896.14 1207.1 L1895.55 1207.1 L1894.96 1207.1 L1894.38 1207.1 L1893.79 1207.1 L1893.21 1207.1 L1892.62 1207.1 L1892.03 1207.1 L1891.45 1207.1 L1890.86 1207.1 L1890.27 1207.1 L1889.69 1207.1 L1889.1 1207.1 L1888.51 1207.1 L1887.93 1207.1 L1887.34 1207.1 L1886.76 1207.1 L1886.17 1207.1 L1885.58 1207.1 L1885 1207.1 L1884.41 1207.1 L1883.82 1207.1 L1883.24 1207.1 L1882.65 1207.1 L1882.06 1207.1 L1881.48 1207.1 L1880.89 1207.1 L1880.3 1207.1 L1879.72 1207.1 L1879.13 1207.1 L1878.55 1207.1 L1877.96 1207.1 L1877.37 1207.1 L1876.79 1207.1 L1876.2 1207.1 L1875.61 1207.1 L1875.03 1207.1 L1874.44 1207.1 L1873.85 1207.1 L1873.27 1207.1 L1872.68 1207.1 L1872.09 1207.1 L1871.51 1207.1 L1870.92 1207.1 L1870.34 1207.1 L1869.75 1207.1 L1869.16 1207.1 L1868.58 1207.1 L1867.99 1207.1 L1867.4 1207.1 L1866.82 1207.1 L1866.23 1207.1 L1865.64 1207.1 L1865.06 1207.1 L1864.47 1207.1 L1863.88 1207.1 L1863.3 1207.1 L1862.71 1207.1 L1862.13 1207.1 L1861.54 1207.1 L1860.95 1207.1 L1860.37 1207.1 L1859.78 1207.1 L1859.19 1207.1 L1858.61 1207.1 L1858.02 1207.1 L1857.43 1207.1 L1856.85 1207.1 L1856.26 1207.1 L1855.68 1207.1 L1855.09 1207.1 L1854.5 1207.1 L1853.92 1207.1 L1853.33 1207.1 L1852.74 1207.1 L1852.16 1207.1 L1851.57 1207.1 L1850.98 1207.1 L1850.4 1207.1 L1849.81 1207.1 L1849.22 1207.1 L1848.64 1207.1 L1848.05 1207.1 L1847.47 1207.1 L1846.88 1207.1 L1846.29 1207.1 L1845.71 1207.1 L1845.12 1207.1 L1844.53 1207.1 L1843.95 1207.1 L1843.36 1207.1 L1842.77 1207.1 L1842.19 1207.1 L1841.6 1207.1 L1841.01 1207.1 L1840.43 1207.1 L1839.84 1207.1 L1839.26 1207.1 L1838.67 1207.1 L1838.08 1207.1 L1837.5 1207.1 L1836.91 1207.1 L1836.32 1207.1 L1835.74 1207.1 L1835.15 1207.1 L1834.56 1207.1 L1833.98 1207.1 L1833.39 1207.1 L1832.81 1207.1 L1832.22 1207.1 L1831.63 1207.1 L1831.05 1207.1 L1830.46 1207.1 L1829.87 1207.1 L1829.29 1207.1 L1828.7 1207.1 L1828.11 1207.1 L1827.53 1207.1 L1826.94 1207.1 L1826.35 1207.1 L1825.77 1207.1 L1825.18 1207.1 L1824.6 1207.1 L1824.01 1207.1 L1823.42 1207.1 L1822.84 1207.1 L1822.25 1207.1 L1821.66 1207.1 L1821.08 1207.1 L1820.49 1207.1 L1819.9 1207.1 L1819.32 1207.1 L1818.73 1207.1 L1818.14 1207.1 L1817.56 1207.1 L1816.97 1207.1 L1816.39 1207.1 L1815.8 1207.1 L1815.21 1207.1 L1814.63 1207.1 L1814.04 1207.1 L1813.45 1207.1 L1812.87 1207.1 L1812.28 1207.1 L1811.69 1207.1 L1811.11 1207.1 L1810.52 1207.1 L1809.94 1207.1 L1809.35 1207.1 L1808.76 1207.1 L1808.18 1207.1 L1807.59 1207.1 L1807 1207.1 L1806.42 1207.1 L1805.83 1207.1 L1805.24 1207.1 L1804.66 1207.1 L1804.07 1207.1 L1803.48 1207.1 L1802.9 1207.1 L1802.31 1207.1 L1801.73 1207.1 L1801.14 1207.1 L1800.55 1207.1 L1799.97 1207.1 L1799.38 1207.1 L1798.79 1207.1 L1798.21 1207.1 L1797.62 1207.1 L1797.03 1207.1 L1796.45 1207.1 L1795.86 1207.1 L1795.27 1207.1 L1794.69 1207.1 L1794.1 1207.1 L1793.52 1207.1 L1792.93 1207.1 L1792.34 1207.1 L1791.76 1207.1 L1791.17 1207.1 L1790.58 1207.1 L1790 1207.1 L1789.41 1207.1 L1788.82 1207.1 L1788.24 1207.1 L1787.65 1207.1 L1787.06 1207.1 L1786.48 1207.1 L1785.89 1207.1 L1785.31 1207.1 L1784.72 1207.1 L1784.13 1207.1 L1783.55 1207.1 L1782.96 1207.1 L1782.37 1207.1 L1781.79 1207.1 L1781.2 1207.1 L1780.61 1207.1 L1780.03 1207.1 L1779.44 1207.1 L1778.86 1207.1 L1778.27 1207.1 L1777.68 1207.1 L1777.1 1207.1 L1776.51 1207.1 L1775.92 1207.1 L1775.34 1207.1 L1774.75 1207.1 L1774.16 1207.1 L1773.58 1207.1 L1772.99 1207.1 L1772.4 1207.1 L1771.82 1207.1 L1771.23 1207.1 L1770.65 1207.1 L1770.06 1207.1 L1769.47 1207.1 L1768.89 1207.1 L1768.3 1207.1 L1767.71 1207.1 L1767.13 1207.1 L1766.54 1207.1 L1765.95 1207.1 L1765.37 1207.1 L1764.78 1207.1 L1764.19 1207.1 L1763.61 1207.1 L1763.02 1207.1 L1762.44 1207.1 L1761.85 1207.1 L1761.26 1207.1 L1760.68 1207.1 L1760.09 1207.1 L1759.5 1207.1 L1758.92 1207.1 L1758.33 1207.1 L1757.74 1207.1 L1757.16 1207.1 L1756.57 1207.1 L1755.99 1207.1 L1755.4 1207.1 L1754.81 1207.1 L1754.23 1207.1 L1753.64 1207.1 L1753.05 1207.1 L1752.47 1207.1 L1751.88 1207.1 L1751.29 1207.1 L1750.71 1207.1 L1750.12 1207.1 L1749.53 1207.1 L1748.95 1207.1 L1748.36 1207.1 L1747.78 1207.1 L1747.19 1207.1 L1746.6 1207.1 L1746.02 1207.1 L1745.43 1207.1 L1744.84 1207.1 L1744.26 1207.1 L1743.67 1207.1 L1743.08 1207.1 L1742.5 1207.1 L1741.91 1207.1 L1741.32 1207.1 L1740.74 1207.1 L1740.15 1207.1 L1739.57 1207.1 L1738.98 1207.1 L1738.39 1207.1 L1737.81 1207.1 L1737.22 1207.1 L1736.63 1207.1 L1736.05 1207.1 L1735.46 1207.1 L1734.87 1207.1 L1734.29 1207.1 L1733.7 1207.1 L1733.11 1207.1 L1732.53 1207.1 L1731.94 1207.1 L1731.36 1207.1 L1730.77 1207.1 L1730.18 1207.1 L1729.6 1207.1 L1729.01 1207.1 L1728.42 1207.1 L1727.84 1207.1 L1727.25 1207.1 L1726.66 1207.1 L1726.08 1207.1 L1725.49 1207.1 L1724.91 1207.1 L1724.32 1207.1 L1723.73 1207.1 L1723.15 1207.1 L1722.56 1207.1 L1721.97 1207.1 L1721.39 1207.1 L1720.8 1207.1 L1720.21 1207.1 L1719.63 1207.1 L1719.04 1207.1 L1718.45 1207.1 L1717.87 1207.1 L1717.28 1207.1 L1716.7 1207.1 L1716.11 1207.1 L1715.52 1207.1 L1714.94 1207.1 L1714.35 1207.1 L1713.76 1207.1 L1713.18 1207.1 L1712.59 1207.1 L1712 1207.1 L1711.42 1207.1 L1710.83 1207.1 L1710.24 1207.1 L1709.66 1207.1 L1709.07 1207.1 L1708.49 1207.1 L1707.9 1207.1 L1707.31 1207.1 L1706.73 1207.1 L1706.14 1207.1 L1705.55 1207.1 L1704.97 1207.1 L1704.38 1207.1 L1703.79 1207.1 L1703.21 1207.1 L1702.62 1207.1 L1702.04 1207.1 L1701.45 1207.1 L1700.86 1207.1 L1700.28 1207.1 L1699.69 1207.1 L1699.1 1207.1 L1698.52 1207.1 L1697.93 1207.1 L1697.34 1207.1 L1696.76 1207.1 L1696.17 1207.1 L1695.58 1207.1 L1695 1207.1 L1694.41 1207.1 L1693.83 1207.1 L1693.24 1207.1 L1692.65 1207.1 L1692.07 1207.1 L1691.48 1207.1 L1690.89 1207.1 L1690.31 1207.1 L1689.72 1207.1 L1689.13 1207.1 L1688.55 1207.1 L1687.96 1207.1 L1687.37 1207.1 L1686.79 1207.1 L1686.2 1207.1 L1685.62 1207.1 L1685.03 1207.1 L1684.44 1207.1 L1683.86 1207.1 L1683.27 1207.1 L1682.68 1207.1 L1682.1 1207.1 L1681.51 1207.1 L1680.92 1207.1 L1680.34 1207.1 L1679.75 1207.1 L1679.17 1207.1 L1678.58 1207.1 L1677.99 1207.1 L1677.41 1207.1 L1676.82 1207.1 L1676.23 1207.1 L1675.65 1207.1 L1675.06 1207.1 L1674.47 1207.1 L1673.89 1207.1 L1673.3 1207.1 L1672.71 1207.1 L1672.13 1207.1 L1671.54 1207.1 L1670.96 1207.1 L1670.37 1207.1 L1669.78 1207.1 L1669.2 1207.1 L1668.61 1207.1 L1668.02 1207.1 L1667.44 1207.1 L1666.85 1207.1 L1666.26 1207.1 L1665.68 1207.1 L1665.09 1207.1 L1664.5 1207.1 L1663.92 1207.1 L1663.33 1207.1 L1662.75 1207.1 L1662.16 1207.1 L1661.57 1207.1 L1660.99 1207.1 L1660.4 1207.1 L1659.81 1207.1 L1659.23 1207.1 L1658.64 1207.1 L1658.05 1207.1 L1657.47 1207.1 L1656.88 1207.1 L1656.29 1207.1 L1655.71 1207.1 L1655.12 1207.1 L1654.54 1207.1 L1653.95 1207.1 L1653.36 1207.1 L1652.78 1207.1 L1652.19 1207.1 L1651.6 1207.1 L1651.02 1207.1 L1650.43 1207.1 L1649.84 1207.1 L1649.26 1207.1 L1648.67 1207.1 L1648.09 1207.1 L1647.5 1207.1 L1646.91 1207.1 L1646.33 1207.1 L1645.74 1207.1 L1645.15 1207.1 L1644.57 1207.1 L1643.98 1207.1 L1643.39 1207.1 L1642.81 1207.1 L1642.22 1207.1 L1641.63 1207.1 L1641.05 1207.1 L1640.46 1207.1 L1639.88 1207.1 L1639.29 1207.1 L1638.7 1207.1 L1638.12 1207.1 L1637.53 1207.1 L1636.94 1207.1 L1636.36 1207.1 L1635.77 1207.1 L1635.18 1207.1 L1634.6 1207.1 L1634.01 1207.1 L1633.42 1207.1 L1632.84 1207.1 L1632.25 1207.1 L1631.67 1207.1 L1631.08 1207.1 L1630.49 1207.1 L1629.91 1207.1 L1629.32 1207.1 L1628.73 1207.1 L1628.15 1207.1 L1627.56 1207.1 L1626.97 1207.1 L1626.39 1207.1 L1625.8 1207.1 L1625.22 1207.1 L1624.63 1207.1 L1624.04 1207.1 L1623.46 1207.1 L1622.87 1207.1 L1622.28 1207.1 L1621.7 1207.1 L1621.11 1207.1 L1620.52 1207.1 L1619.94 1207.1 L1619.35 1207.1 L1618.76 1207.1 L1618.18 1207.1 L1617.59 1207.1 L1617.01 1207.1 L1616.42 1207.1 L1615.83 1207.1 L1615.25 1207.1 L1614.66 1207.1 L1614.07 1207.1 L1613.49 1207.1 L1612.9 1207.1 L1612.31 1207.1 L1611.73 1207.1 L1611.14 1207.1 L1610.55 1207.1 L1609.97 1207.1 L1609.38 1207.1 L1608.8 1207.1 L1608.21 1207.1 L1607.62 1207.1 L1607.04 1207.1 L1606.45 1207.1 L1605.86 1207.1 L1605.28 1207.1 L1604.69 1207.1 L1604.1 1207.1 L1603.52 1207.1 L1602.93 1207.1 L1602.34 1207.1 L1601.76 1207.1 L1601.17 1207.1 L1600.59 1207.1 L1600 1207.1 L1599.41 1207.1 L1598.83 1207.1 L1598.24 1207.1 L1597.65 1207.1 L1597.07 1207.1 L1596.48 1207.1 L1595.89 1207.1 L1595.31 1207.1 L1594.72 1207.1 L1594.14 1207.1 L1593.55 1207.1 L1592.96 1207.1 L1592.38 1207.1 L1591.79 1207.1 L1591.2 1207.1 L1590.62 1207.1 L1590.03 1207.1 L1589.44 1207.1 L1588.86 1207.1 L1588.27 1207.1 L1587.68 1207.1 L1587.1 1207.1 L1586.51 1207.1 L1585.93 1207.1 L1585.34 1207.1 L1584.75 1207.1 L1584.17 1207.1 L1583.58 1207.1 L1582.99 1207.1 L1582.41 1207.1 L1581.82 1207.1 L1581.23 1207.1 L1580.65 1207.1 L1580.06 1207.1 L1579.47 1207.1 L1578.89 1207.1 L1578.3 1207.1 L1577.72 1207.1 L1577.13 1207.1 L1576.54 1207.1 L1575.96 1207.1 L1575.37 1207.1 L1574.78 1207.1 L1574.2 1207.1 L1573.61 1207.1 L1573.02 1207.1 L1572.44 1207.1 L1571.85 1207.1 L1571.27 1207.1 L1570.68 1207.1 L1570.09 1207.1 L1569.51 1207.1 L1568.92 1207.1 L1568.33 1207.1 L1567.75 1207.1 L1567.16 1207.1 L1566.57 1207.1 L1565.99 1207.1 L1565.4 1207.1 L1564.81 1207.1 L1564.23 1207.1 L1563.64 1207.1 L1563.06 1207.1 L1562.47 1207.1 L1561.88 1207.1 L1561.3 1207.1 L1560.71 1207.1 L1560.12 1207.1 L1559.54 1207.1 L1558.95 1207.1 L1558.36 1207.1 L1557.78 1207.1 L1557.19 1207.1 L1556.6 1207.1 L1556.02 1207.1 L1555.43 1207.1 L1554.85 1207.1 L1554.26 1207.1 L1553.67 1207.1 L1553.09 1207.1 L1552.5 1207.1 L1551.91 1207.1 L1551.33 1207.1 L1550.74 1207.1 L1550.15 1207.1 L1549.57 1207.1 L1548.98 1207.1 L1548.4 1207.1 L1547.81 1207.1 L1547.22 1207.1 L1546.64 1207.1 L1546.05 1207.1 L1545.46 1207.1 L1544.88 1207.1 L1544.29 1207.1 L1543.7 1207.1 L1543.12 1207.1 L1542.53 1207.1 L1541.94 1207.1 L1541.36 1207.1 L1540.77 1207.1 L1540.19 1207.1 L1539.6 1207.1 L1539.01 1207.1 L1538.43 1207.1 L1537.84 1207.1 L1537.25 1207.1 L1536.67 1207.1 L1536.08 1207.1 L1535.49 1207.1 L1534.91 1207.1 L1534.32 1207.1 L1533.73 1207.1 L1533.15 1207.1 L1532.56 1207.1 L1531.98 1207.1 L1531.39 1207.1 L1530.8 1207.1 L1530.22 1207.1 L1529.63 1207.1 L1529.04 1207.1 L1528.46 1207.1 L1527.87 1207.1 L1527.28 1207.1 L1526.7 1207.1 L1526.11 1207.1 L1525.52 1207.1 L1524.94 1207.1 L1524.35 1207.1 L1523.77 1207.1 L1523.18 1207.1 L1522.59 1207.1 L1522.01 1207.1 L1521.42 1207.1 L1520.83 1207.1 L1520.25 1207.1 L1519.66 1207.1 L1519.07 1207.1 L1518.49 1207.1 L1517.9 1207.1 L1517.32 1207.1 L1516.73 1207.1 L1516.14 1207.1 L1515.56 1207.1 L1514.97 1207.1 L1514.38 1207.1 L1513.8 1207.1 L1513.21 1207.1 L1512.62 1207.1 L1512.04 1207.1 L1511.45 1207.1 L1510.86 1207.1 L1510.28 1207.1 L1509.69 1207.1 L1509.11 1207.1 L1508.52 1207.1 L1507.93 1207.1 L1507.35 1207.1 L1506.76 1207.1 L1506.17 1207.1 L1505.59 1207.1 L1505 1207.1 L1504.41 1207.1 L1503.83 1207.1 L1503.24 1207.1 L1502.65 1207.1 L1502.07 1207.1 L1501.48 1207.1 L1500.9 1207.1 L1500.31 1207.1 L1499.72 1207.1 L1499.14 1207.1 L1498.55 1207.1 L1497.96 1207.1 L1497.38 1207.1 L1496.79 1207.1 L1496.2 1207.1 L1495.62 1207.1 L1495.03 1207.1 L1494.45 1207.1 L1493.86 1207.1 L1493.27 1207.1 L1492.69 1207.1 L1492.1 1207.1 L1491.51 1207.1 L1490.93 1207.1 L1490.34 1207.1 L1489.75 1207.1 L1489.17 1207.1 L1488.58 1207.1 L1487.99 1207.1 L1487.41 1207.1 L1486.82 1207.1 L1486.24 1207.1 L1485.65 1207.1 L1485.06 1207.1 L1484.48 1207.1 L1483.89 1207.1 L1483.3 1207.1 L1482.72 1207.1 L1482.13 1207.1 L1481.54 1207.1 L1480.96 1207.1 L1480.37 1207.1 L1479.78 1207.1 L1479.2 1207.1 L1478.61 1207.1 L1478.03 1207.1 L1477.44 1207.1 L1476.85 1207.1 L1476.27 1207.1 L1475.68 1207.1 L1475.09 1207.1 L1474.51 1207.1 L1473.92 1207.1 L1473.33 1207.1 L1472.75 1207.1 L1472.16 1207.1 L1471.57 1207.1 L1470.99 1207.1 L1470.4 1207.1 L1469.82 1207.1 L1469.23 1207.1 L1468.64 1207.1 L1468.06 1207.1 L1467.47 1207.1 L1466.88 1207.1 L1466.3 1207.1 L1465.71 1207.1 L1465.12 1207.1 L1464.54 1207.1 L1463.95 1207.1 L1463.37 1207.1 L1462.78 1207.1 L1462.19 1207.1 L1461.61 1207.1 L1461.02 1207.1 L1460.43 1207.1 L1459.85 1207.1 L1459.26 1207.1 L1458.67 1207.1 L1458.09 1207.1 L1457.5 1207.1 L1456.91 1207.1 L1456.33 1207.1 L1455.74 1207.1 L1455.16 1207.1 L1454.57 1207.1 L1453.98 1207.1 L1453.4 1207.1 L1452.81 1207.1 L1452.22 1207.1 L1451.64 1207.1 L1451.05 1207.1 L1450.46 1207.1 L1449.88 1207.1 L1449.29 1207.1 L1448.7 1207.1 L1448.12 1207.1 L1447.53 1207.1 L1446.95 1207.1 L1446.36 1207.1 L1445.77 1207.1 L1445.19 1207.1 L1444.6 1207.1 L1444.01 1207.1 L1443.43 1207.1 L1442.84 1207.1 L1442.25 1207.1 L1441.67 1207.1 L1441.08 1207.1 L1440.5 1207.1 L1439.91 1207.1 L1439.32 1207.1 L1438.74 1207.1 L1438.15 1207.1 L1437.56 1207.1 L1436.98 1207.1 L1436.39 1207.1 L1435.8 1207.1 L1435.22 1207.1 L1434.63 1207.1 L1434.04 1207.1 L1433.46 1207.1 L1432.87 1207.1 L1432.29 1207.1 L1431.7 1207.1 L1431.11 1207.1 L1430.53 1207.1 L1429.94 1207.1 L1429.35 1207.1 L1428.77 1207.1 L1428.18 1207.1 L1427.59 1207.1 L1427.01 1207.1 L1426.42 1207.1 L1425.83 1207.1 L1425.25 1207.1 L1424.66 1207.1 L1424.08 1207.1 L1423.49 1207.1 L1422.9 1207.1 L1422.32 1207.1 L1421.73 1207.1 L1421.14 1207.1 L1420.56 1207.1 L1419.97 1207.1 L1419.38 1207.1 L1418.8 1207.1 L1418.21 1207.1 L1417.63 1207.1 L1417.04 1207.1 L1416.45 1207.1 L1415.87 1207.1 L1415.28 1207.1 L1414.69 1207.1 L1414.11 1207.1 L1413.52 1207.1 L1412.93 1207.1 L1412.35 1207.1 L1411.76 1207.1 L1411.17 1207.1 L1410.59 1207.1 L1410 1207.1 L1409.42 1207.1 L1408.83 1207.1 L1408.24 1207.1 L1407.66 1207.1 L1407.07 1207.1 L1406.48 1207.1 L1405.9 1207.1 L1405.31 1207.1 L1404.72 1207.1 L1404.14 1207.1 L1403.55 1207.1 L1402.96 1207.1 L1402.38 1207.1 L1401.79 1207.1 L1401.21 1207.1 L1400.62 1207.1 L1400.03 1207.1 L1399.45 1207.1 L1398.86 1207.1 L1398.27 1207.1 L1397.69 1207.1 L1397.1 1207.1 L1396.51 1207.1 L1395.93 1207.1 L1395.34 1207.1 L1394.75 1207.1 L1394.17 1207.1 L1393.58 1207.1 L1393 1207.1 L1392.41 1207.1 L1391.82 1207.1 L1391.24 1207.1 L1390.65 1207.1 L1390.06 1207.1 L1389.48 1207.1 L1388.89 1207.1 L1388.3 1207.1 L1387.72 1207.1 L1387.13 1207.1 L1386.55 1207.1 L1385.96 1207.1 L1385.37 1207.1 L1384.79 1207.1 L1384.2 1207.1 L1383.61 1207.1 L1383.03 1207.1 L1382.44 1207.1 L1381.85 1207.1 L1381.27 1207.1 L1380.68 1207.1 L1380.09 1207.1 L1379.51 1207.1 L1378.92 1207.1 L1378.34 1207.1 L1377.75 1207.1 L1377.16 1207.1 L1376.58 1207.1 L1375.99 1207.1 L1375.4 1207.1 L1374.82 1207.1 L1374.23 1207.1 L1373.64 1207.1 L1373.06 1207.1 L1372.47 1207.1 L1371.88 1207.1 L1371.3 1207.1 L1370.71 1207.1 L1370.13 1207.1 L1369.54 1207.1 L1368.95 1207.1 L1368.37 1207.1 L1367.78 1207.1 L1367.19 1207.1 L1366.61 1207.1 L1366.02 1207.1 L1365.43 1207.1 L1364.85 1207.1 L1364.26 1207.1 L1363.68 1207.1 L1363.09 1207.1 L1362.5 1207.1 L1361.92 1207.1 L1361.33 1207.1 L1360.74 1207.1 L1360.16 1207.1 L1359.57 1207.1 L1358.98 1207.1 L1358.4 1207.1 L1357.81 1207.1 L1357.22 1207.1 L1356.64 1207.1 L1356.05 1207.1 L1355.47 1207.1 L1354.88 1207.1 L1354.29 1207.1 L1353.71 1207.1 L1353.12 1207.1 L1352.53 1207.1 L1351.95 1207.1 L1351.36 1207.1 L1350.77 1207.1 L1350.19 1207.1 L1349.6 1207.1 L1349.01 1207.1 L1348.43 1207.1 L1347.84 1207.1 L1347.26 1207.1 L1346.67 1207.1 L1346.08 1207.1 L1345.5 1207.1 L1344.91 1207.1 L1344.32 1207.1 L1343.74 1207.1 L1343.15 1207.1 L1342.56 1207.1 L1341.98 1207.1 L1341.39 1207.1 L1340.8 1207.1 L1340.22 1207.1 L1339.63 1207.1 L1339.05 1207.1 L1338.46 1207.1 L1337.87 1207.1 L1337.29 1207.1 L1336.7 1207.1 L1336.11 1207.1 L1335.53 1207.1 L1334.94 1207.1 L1334.35 1207.1 L1333.77 1207.1 L1333.18 1207.1 L1332.6 1207.1 L1332.01 1207.1 L1331.42 1207.1 L1330.84 1207.1 L1330.25 1207.1 L1329.66 1207.1 L1329.08 1207.1 L1328.49 1207.1 L1327.9 1207.1 L1327.32 1207.1 L1326.73 1207.1 L1326.14 1207.1 L1325.56 1207.1 L1324.97 1207.1 L1324.39 1207.1 L1323.8 1207.1 L1323.21 1207.1 L1322.63 1207.1 L1322.04 1207.1 L1321.45 1207.1 L1320.87 1207.1 L1320.28 1207.1 L1319.69 1207.1 L1319.11 1207.1 L1318.52 1207.1 L1317.93 1207.1 L1317.35 1207.1 L1316.76 1207.1 L1316.18 1207.1 L1315.59 1207.1 L1315 1207.1 L1314.42 1207.1 L1313.83 1207.1 L1313.24 1207.1 L1312.66 1207.1 L1312.07 1207.1 L1311.48 1207.1 L1310.9 1207.1 L1310.31 1207.1 L1309.73 1207.1 L1309.14 1207.1 L1308.55 1207.1 L1307.97 1207.1 L1307.38 1207.1 L1306.79 1207.1 L1306.21 1207.1 L1305.62 1207.1 L1305.03 1207.1 L1304.45 1207.1 L1303.86 1207.1 L1303.27 1207.1 L1302.69 1207.1 L1302.1 1207.1 L1301.52 1207.1 L1300.93 1207.1 L1300.34 1207.1 L1299.76 1207.1 L1299.17 1207.1 L1298.58 1207.1 L1298 1207.1 L1297.41 1207.1 L1296.82 1207.1 L1296.24 1207.1 L1295.65 1207.1 L1295.06 1207.1 L1294.48 1207.1 L1293.89 1207.1 L1293.31 1207.1 L1292.72 1207.1 L1292.13 1207.1 L1291.55 1207.1 L1290.96 1207.1 L1290.37 1207.1 L1289.79 1207.1 L1289.2 1207.1 L1288.61 1207.1 L1288.03 1207.1 L1287.44 1207.1 L1286.86 1207.1 L1286.27 1207.1 L1285.68 1207.1 L1285.1 1207.1 L1284.51 1207.1 L1283.92 1207.1 L1283.34 1207.1 L1282.75 1207.1 L1282.16 1207.1 L1281.58 1207.1 L1280.99 1207.1 L1280.4 1207.1 L1279.82 1207.1 L1279.23 1207.1 L1278.65 1207.1 L1278.06 1207.1 L1277.47 1207.1 L1276.89 1207.1 L1276.3 1207.1 L1275.71 1207.1 L1275.13 1207.1 L1274.54 1207.1 L1273.95 1207.1 L1273.37 1207.1 L1272.78 1207.1 L1272.19 1207.1 L1271.61 1207.1 L1271.02 1207.1 L1270.44 1207.1 L1269.85 1207.1 L1269.26 1207.1 L1268.68 1207.1 L1268.09 1207.1 L1267.5 1207.1 L1266.92 1207.1 L1266.33 1207.1 L1265.74 1207.1 L1265.16 1207.1 L1264.57 1207.1 L1263.98 1207.1 L1263.4 1207.1 L1262.81 1207.1 L1262.23 1207.1 L1261.64 1207.1 L1261.05 1207.1 L1260.47 1207.1 L1259.88 1207.1 L1259.29 1207.1 L1258.71 1207.1 L1258.12 1207.1 L1257.53 1207.1 L1256.95 1207.1 L1256.36 1207.1 L1255.78 1207.1 L1255.19 1207.1 L1254.6 1207.1 L1254.02 1207.1 L1253.43 1207.1 L1252.84 1207.1 L1252.26 1207.1 L1251.67 1207.1 L1251.08 1207.1 L1250.5 1207.1 L1249.91 1207.1 L1249.32 1207.1 L1248.74 1207.1 L1248.15 1207.1 L1247.57 1207.1 L1246.98 1207.1 L1246.39 1207.1 L1245.81 1207.1 L1245.22 1207.1 L1244.63 1207.1 L1244.05 1207.1 L1243.46 1207.1 L1242.87 1207.1 L1242.29 1207.1 L1241.7 1207.1 L1241.11 1207.1 L1240.53 1207.1 L1239.94 1207.1 L1239.36 1207.1 L1238.77 1207.1 L1238.18 1207.1 L1237.6 1207.1 L1237.01 1207.1 L1236.42 1207.1 L1235.84 1207.1 L1235.25 1207.1 L1234.66 1207.1 L1234.08 1207.1 L1233.49 1207.1 L1232.91 1207.1 L1232.32 1207.1 L1231.73 1207.1 L1231.15 1207.1 L1230.56 1207.1 L1229.97 1207.1 L1229.39 1207.1 L1228.8 1207.1 L1228.21 1207.1 L1227.63 1207.1 L1227.04 1207.1 L1226.45 1207.1 L1225.87 1207.1 L1225.28 1207.1 L1224.7 1207.1 L1224.11 1207.1 L1223.52 1207.1 L1222.94 1207.1 L1222.35 1207.1 L1221.76 1207.1 L1221.18 1207.1 L1220.59 1207.1 L1220 1207.1 L1219.42 1207.1 L1218.83 1207.1 L1218.24 1207.1 L1217.66 1207.1 L1217.07 1207.1 L1216.49 1207.1 L1215.9 1207.1 L1215.31 1207.1 L1214.73 1207.1 L1214.14 1207.1 L1213.55 1207.1 L1212.97 1207.1 L1212.38 1207.1 L1211.79 1207.1 L1211.21 1207.1 L1210.62 1207.1 L1210.03 1207.1 L1209.45 1207.1 L1208.86 1207.1 L1208.28 1207.1 L1207.69 1207.1 L1207.1 1207.1 L1206.52 1207.1 L1205.93 1207.1 L1205.34 1207.1 L1204.76 1207.1 L1204.17 1207.1 L1203.58 1207.1 L1203 1207.1 L1202.41 1207.1 L1201.83 1207.1 L1201.24 1207.1 L1200.65 1207.1 L1200.07 1207.1 L1199.48 1207.1 L1198.89 1207.1 L1198.31 1207.1 L1197.72 1207.1 L1197.13 1207.1 L1196.55 1207.1 L1195.96 1207.1 L1195.37 1207.1 L1194.79 1207.1 L1194.2 1207.1 L1193.62 1207.1 L1193.03 1207.1 L1192.44 1207.1 L1191.86 1207.1 L1191.27 1207.1 L1190.68 1207.1 L1190.1 1207.1 L1189.51 1207.1 L1188.92 1207.1 L1188.34 1207.1 L1187.75 1207.1 L1187.16 1207.1 L1186.58 1207.1 L1185.99 1207.1 L1185.41 1207.1 L1184.82 1207.1 L1184.23 1207.1 L1183.65 1207.1 L1183.06 1207.1 L1182.47 1207.1 L1181.89 1207.1 L1181.3 1207.1 L1180.71 1207.1 L1180.13 1207.1 L1179.54 1207.1 L1178.96 1207.1 L1178.37 1207.1 L1177.78 1207.1 L1177.2 1207.1 L1176.61 1207.1 L1176.02 1207.1 L1175.44 1207.1 L1174.85 1207.1 L1174.26 1207.1 L1173.68 1207.1 L1173.09 1207.1 L1172.5 1207.1 L1171.92 1207.1 L1171.33 1207.1 L1170.75 1207.1 L1170.16 1207.1 L1169.57 1207.1 L1168.99 1207.1 L1168.4 1207.1 L1167.81 1207.1 L1167.23 1207.1 L1166.64 1207.1 L1166.05 1207.1 L1165.47 1207.1 L1164.88 1207.1 L1164.29 1207.1 L1163.71 1207.1 L1163.12 1207.1 L1162.54 1207.1 L1161.95 1207.1 L1161.36 1207.1 L1160.78 1207.1 L1160.19 1207.1 L1159.6 1207.1 L1159.02 1207.1 L1158.43 1207.1 L1157.84 1207.1 L1157.26 1207.1 L1156.67 1207.1 L1156.09 1207.1 L1155.5 1207.1 L1154.91 1207.1 L1154.33 1207.1 L1153.74 1207.1 L1153.15 1207.1 L1152.57 1207.1 L1151.98 1207.1 L1151.39 1207.1 L1150.81 1207.1 L1150.22 1207.1 L1149.63 1207.1 L1149.05 1207.1 L1148.46 1207.1 L1147.88 1207.1 L1147.29 1207.1 L1146.7 1207.1 L1146.12 1207.1 L1145.53 1207.1 L1144.94 1207.1 L1144.36 1207.1 L1143.77 1207.1 L1143.18 1207.1 L1142.6 1207.1 L1142.01 1207.1 L1141.42 1207.1 L1140.84 1207.1 L1140.25 1207.1 L1139.67 1207.1 L1139.08 1207.1 L1138.49 1207.1 L1137.91 1207.1 L1137.32 1207.1 L1136.73 1207.1 L1136.15 1207.1 L1135.56 1207.1 L1134.97 1207.1 L1134.39 1207.1 L1133.8 1207.1 L1133.21 1207.1 L1132.63 1207.1 L1132.04 1207.1 L1131.46 1207.1 L1130.87 1207.1 L1130.28 1207.1 L1129.7 1207.1 L1129.11 1207.1 L1128.52 1207.1 L1127.94 1207.1 L1127.35 1207.1 L1126.76 1207.1 L1126.18 1207.1 L1125.59 1207.1 L1125.01 1207.1 L1124.42 1207.1 L1123.83 1207.1 L1123.25 1207.1 L1122.66 1207.1 L1122.07 1207.1 L1121.49 1207.1 L1120.9 1207.1 L1120.31 1207.1 L1119.73 1207.1 L1119.14 1207.1 L1118.55 1207.1 L1117.97 1207.1 L1117.38 1207.1 L1116.8 1207.1 L1116.21 1207.1 L1115.62 1207.1 L1115.04 1207.1 L1114.45 1207.1 L1113.86 1207.1 L1113.28 1207.1 L1112.69 1207.1 L1112.1 1207.1 L1111.52 1207.1 L1110.93 1207.1 L1110.34 1207.1 L1109.76 1207.1 L1109.17 1207.1 L1108.59 1207.1 L1108 1207.1 L1107.41 1207.1 L1106.83 1207.1 L1106.24 1207.1 L1105.65 1207.1 L1105.07 1207.1 L1104.48 1207.1 L1103.89 1207.1 L1103.31 1207.1 L1102.72 1207.1 L1102.14 1207.1 L1101.55 1207.1 L1100.96 1207.1 L1100.38 1207.1 L1099.79 1207.1 L1099.2 1207.1 L1098.62 1207.1 L1098.03 1207.1 L1097.44 1207.1 L1096.86 1207.1 L1096.27 1207.1 L1095.68 1207.1 L1095.1 1207.1 L1094.51 1207.1 L1093.93 1207.1 L1093.34 1207.1 L1092.75 1207.1 L1092.17 1207.1 L1091.58 1207.1 L1090.99 1207.1 L1090.41 1207.1 L1089.82 1207.1 L1089.23 1207.1 L1088.65 1207.1 L1088.06 1207.1 L1087.47 1207.1 L1086.89 1207.1 L1086.3 1207.1 L1085.72 1207.1 L1085.13 1207.1 L1084.54 1207.1 L1083.96 1207.1 L1083.37 1207.1 L1082.78 1207.1 L1082.2 1207.1 L1081.61 1207.1 L1081.02 1207.1 L1080.44 1207.1 L1079.85 1207.1 L1079.26 1207.1 L1078.68 1207.1 L1078.09 1207.1 L1077.51 1207.1 L1076.92 1207.1 L1076.33 1207.1 L1075.75 1207.1 L1075.16 1207.1 L1074.57 1207.1 L1073.99 1207.1 L1073.4 1207.1 L1072.81 1207.1 L1072.23 1207.1 L1071.64 1207.1 L1071.06 1207.1 L1070.47 1207.1 L1069.88 1207.1 L1069.3 1207.1 L1068.71 1207.1 L1068.12 1207.1 L1067.54 1207.1 L1066.95 1207.1 L1066.36 1207.1 L1065.78 1207.1 L1065.19 1207.1 L1064.6 1207.1 L1064.02 1207.1 L1063.43 1207.1 L1062.85 1207.1 L1062.26 1207.1 L1061.67 1207.1 L1061.09 1207.1 L1060.5 1207.1 L1059.91 1207.1 L1059.33 1207.1 L1058.74 1207.1 L1058.15 1207.1 L1057.57 1207.1 L1056.98 1207.1 L1056.39 1207.1 L1055.81 1207.1 L1055.22 1207.1 L1054.64 1207.1 L1054.05 1207.1 L1053.46 1207.1 L1052.88 1207.1 L1052.29 1207.1 L1051.7 1207.1 L1051.12 1207.1 L1050.53 1207.1 L1049.94 1207.1 L1049.36 1207.1 L1048.77 1207.1 L1048.19 1207.1 L1047.6 1207.1 L1047.01 1207.1 L1046.43 1207.1 L1045.84 1207.1 L1045.25 1207.1 L1044.67 1207.1 L1044.08 1207.1 L1043.49 1207.1 L1042.91 1207.1 L1042.32 1207.1 L1041.73 1207.1 L1041.15 1207.1 L1040.56 1207.1 L1039.98 1207.1 L1039.39 1207.1 L1038.8 1207.1 L1038.22 1207.1 L1037.63 1207.1 L1037.04 1207.1 L1036.46 1207.1 L1035.87 1207.1 L1035.28 1207.1 L1034.7 1207.1 L1034.11 1207.1 L1033.52 1207.1 L1032.94 1207.1 L1032.35 1207.1 L1031.77 1207.1 L1031.18 1207.1 L1030.59 1207.1 L1030.01 1207.1 L1029.42 1207.1 L1028.83 1207.1 L1028.25 1207.1 L1027.66 1207.1 L1027.07 1207.1 L1026.49 1207.1 L1025.9 1207.1 L1025.32 1207.1 L1024.73 1207.1 L1024.14 1207.1 L1023.56 1207.1 L1022.97 1207.1 L1022.38 1207.1 L1021.8 1207.1 L1021.21 1207.1 L1020.62 1207.1 L1020.04 1207.1 L1019.45 1207.1 L1018.86 1207.1 L1018.28 1207.1 L1017.69 1207.1 L1017.11 1207.1 L1016.52 1207.1 L1015.93 1207.1 L1015.35 1207.1 L1014.76 1207.1 L1014.17 1207.1 L1013.59 1207.1 L1013 1207.1 L1012.41 1207.1 L1011.83 1207.1 L1011.24 1207.1 L1010.65 1207.1 L1010.07 1207.1 L1009.48 1207.1 L1008.9 1207.1 L1008.31 1207.1 L1007.72 1207.1 L1007.14 1207.1 L1006.55 1207.1 L1005.96 1207.1 L1005.38 1207.1 L1004.79 1207.1 L1004.2 1207.1 L1003.62 1207.1 L1003.03 1207.1 L1002.44 1207.1 L1001.86 1207.1 L1001.27 1207.1 L1000.69 1207.1 L1000.1 1207.1 L999.513 1207.1 L998.926 1207.1 L998.34 1207.1 L997.754 1207.1 L997.167 1207.1 L996.581 1207.1 L995.994 1207.1 L995.408 1207.1 L994.822 1207.1 L994.235 1207.1 L993.649 1207.1 L993.062 1207.1 L992.476 1207.1 L991.889 1207.1 L991.303 1207.1 L990.717 1207.1 L990.13 1207.1 L989.544 1207.1 L988.957 1207.1 L988.371 1207.1 L987.785 1207.1 L987.198 1207.1 L986.612 1207.1 L986.025 1207.1  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.16 986.612,1207.16 987.198,1207.16 987.785,1207.16 988.371,1207.16 988.957,1207.16 989.544,1207.16 990.13,1207.16 990.717,1207.16 991.303,1207.16 991.889,1207.16 992.476,1207.16 993.062,1207.16 993.649,1207.16 994.235,1207.16 994.822,1207.16 995.408,1207.16 995.994,1207.16 996.581,1207.16 997.167,1207.16 997.754,1207.16 998.34,1207.16 998.926,1207.16 999.513,1207.16 1000.1,1207.16 1000.69,1207.16 1001.27,1207.16 1001.86,1207.16 1002.44,1207.16 1003.03,1207.16 1003.62,1207.16 1004.2,1207.16 1004.79,1207.16 1005.38,1207.16 1005.96,1207.16 1006.55,1207.16 1007.14,1207.16 1007.72,1207.16 1008.31,1207.16 1008.9,1207.16 1009.48,1207.16 1010.07,1207.16 1010.65,1207.16 1011.24,1207.16 1011.83,1207.16 1012.41,1207.16 1013,1207.16 1013.59,1207.16 1014.17,1207.16 1014.76,1207.16 1015.35,1207.16 1015.93,1207.16 1016.52,1207.16 1017.11,1207.16 1017.69,1207.16 1018.28,1207.16 1018.86,1207.16 1019.45,1207.16 1020.04,1207.16 1020.62,1207.16 1021.21,1207.16 1021.8,1207.16 1022.38,1207.16 1022.97,1207.16 1023.56,1207.16 1024.14,1207.16 1024.73,1207.16 1025.32,1207.16 1025.9,1207.16 1026.49,1207.16 1027.07,1207.16 1027.66,1207.16 1028.25,1207.16 1028.83,1207.16 1029.42,1207.16 1030.01,1207.16 1030.59,1207.16 1031.18,1207.16 1031.77,1207.16 1032.35,1207.16 1032.94,1207.16 1033.52,1207.16 1034.11,1207.16 1034.7,1207.16 1035.28,1207.16 1035.87,1207.16 1036.46,1207.16 1037.04,1207.16 1037.63,1207.16 1038.22,1207.16 1038.8,1207.16 1039.39,1207.16 1039.98,1207.16 1040.56,1207.16 1041.15,1207.16 1041.73,1207.16 1042.32,1207.16 1042.91,1207.16 1043.49,1207.16 1044.08,1207.16 1044.67,1207.16 1045.25,1207.16 1045.84,1207.16 1046.43,1207.16 1047.01,1207.16 1047.6,1207.16 1048.19,1207.16 1048.77,1207.16 1049.36,1207.16 1049.94,1207.16 1050.53,1207.16 1051.12,1207.16 1051.7,1207.16 1052.29,1207.16 1052.88,1207.16 1053.46,1207.16 1054.05,1207.16 1054.64,1207.16 1055.22,1207.16 1055.81,1207.16 1056.39,1207.16 1056.98,1207.16 1057.57,1207.16 1058.15,1207.16 1058.74,1207.16 1059.33,1207.16 1059.91,1207.16 1060.5,1207.16 1061.09,1207.16 1061.67,1207.16 1062.26,1207.16 1062.85,1207.16 1063.43,1207.16 1064.02,1207.16 1064.6,1207.16 1065.19,1207.16 1065.78,1207.16 1066.36,1207.16 1066.95,1207.16 1067.54,1207.16 1068.12,1207.16 1068.71,1207.16 1069.3,1207.16 1069.88,1207.16 1070.47,1207.16 1071.06,1207.16 1071.64,1207.16 1072.23,1207.16 1072.81,1207.16 1073.4,1207.16 1073.99,1207.16 1074.57,1207.16 1075.16,1207.16 1075.75,1207.16 1076.33,1207.16 1076.92,1207.16 1077.51,1207.16 1078.09,1207.16 1078.68,1207.16 1079.26,1207.16 1079.85,1207.16 1080.44,1207.16 1081.02,1207.16 1081.61,1207.16 1082.2,1207.16 1082.78,1207.16 1083.37,1207.16 1083.96,1207.16 1084.54,1207.16 1085.13,1207.16 1085.72,1207.16 1086.3,1207.16 1086.89,1207.16 1087.47,1207.16 1088.06,1207.16 1088.65,1207.16 1089.23,1207.16 1089.82,1207.16 1090.41,1207.16 1090.99,1207.16 1091.58,1207.16 1092.17,1207.16 1092.75,1207.16 1093.34,1207.16 1093.93,1207.16 1094.51,1207.16 1095.1,1207.16 1095.68,1207.16 1096.27,1207.16 1096.86,1207.16 1097.44,1207.16 1098.03,1207.16 1098.62,1207.16 1099.2,1207.16 1099.79,1207.16 1100.38,1207.16 1100.96,1207.16 1101.55,1207.16 1102.14,1207.16 1102.72,1207.16 1103.31,1207.16 1103.89,1207.16 1104.48,1207.16 1105.07,1207.16 1105.65,1207.16 1106.24,1207.16 1106.83,1207.16 1107.41,1207.16 1108,1207.16 1108.59,1207.16 1109.17,1207.16 1109.76,1207.16 1110.34,1207.16 1110.93,1207.16 1111.52,1207.16 1112.1,1207.16 1112.69,1207.16 1113.28,1207.16 1113.86,1207.16 1114.45,1207.16 1115.04,1207.16 1115.62,1207.16 1116.21,1207.16 1116.8,1207.16 1117.38,1207.16 1117.97,1207.16 1118.55,1207.16 1119.14,1207.16 1119.73,1207.16 1120.31,1207.16 1120.9,1207.16 1121.49,1207.16 1122.07,1207.16 1122.66,1207.16 1123.25,1207.16 1123.83,1207.16 1124.42,1207.16 1125.01,1207.16 1125.59,1207.16 1126.18,1207.16 1126.76,1207.16 1127.35,1207.16 1127.94,1207.16 1128.52,1207.16 1129.11,1207.16 1129.7,1207.16 1130.28,1207.16 1130.87,1207.16 1131.46,1207.16 1132.04,1207.16 1132.63,1207.16 1133.21,1207.16 1133.8,1207.16 1134.39,1207.16 1134.97,1207.16 1135.56,1207.16 1136.15,1207.16 1136.73,1207.16 1137.32,1207.16 1137.91,1207.16 1138.49,1207.16 1139.08,1207.16 1139.67,1207.16 1140.25,1207.16 1140.84,1207.16 1141.42,1207.16 1142.01,1207.16 1142.6,1207.16 1143.18,1207.16 1143.77,1207.16 1144.36,1207.16 1144.94,1207.16 1145.53,1207.16 1146.12,1207.16 1146.7,1207.16 1147.29,1207.16 1147.88,1207.16 1148.46,1207.16 1149.05,1207.16 1149.63,1207.16 1150.22,1207.16 1150.81,1207.16 1151.39,1207.16 1151.98,1207.16 1152.57,1207.16 1153.15,1207.16 1153.74,1207.16 1154.33,1207.16 1154.91,1207.16 1155.5,1207.16 1156.09,1207.16 1156.67,1207.16 1157.26,1207.16 1157.84,1207.16 1158.43,1207.16 1159.02,1207.16 1159.6,1207.16 1160.19,1207.16 1160.78,1207.16 1161.36,1207.16 1161.95,1207.16 1162.54,1207.16 1163.12,1207.16 1163.71,1207.16 1164.29,1207.16 1164.88,1207.16 1165.47,1207.16 1166.05,1207.16 1166.64,1207.16 1167.23,1207.16 1167.81,1207.16 1168.4,1207.16 1168.99,1207.16 1169.57,1207.16 1170.16,1207.16 1170.75,1207.16 1171.33,1207.16 1171.92,1207.16 1172.5,1207.16 1173.09,1207.16 1173.68,1207.16 1174.26,1207.16 1174.85,1207.16 1175.44,1207.16 1176.02,1207.16 1176.61,1207.16 1177.2,1207.16 1177.78,1207.16 1178.37,1207.16 1178.96,1207.16 1179.54,1207.16 1180.13,1207.16 1180.71,1207.16 1181.3,1207.16 1181.89,1207.16 1182.47,1207.16 1183.06,1207.16 1183.65,1207.16 1184.23,1207.16 1184.82,1207.16 1185.41,1207.16 1185.99,1207.16 1186.58,1207.16 1187.16,1207.16 1187.75,1207.16 1188.34,1207.16 1188.92,1207.16 1189.51,1207.16 1190.1,1207.16 1190.68,1207.16 1191.27,1207.16 1191.86,1207.16 1192.44,1207.16 1193.03,1207.16 1193.62,1207.16 1194.2,1207.16 1194.79,1207.16 1195.37,1207.16 1195.96,1207.16 1196.55,1207.16 1197.13,1207.16 1197.72,1207.16 1198.31,1207.16 1198.89,1207.16 1199.48,1207.16 1200.07,1207.16 1200.65,1207.16 1201.24,1207.16 1201.83,1207.16 1202.41,1207.16 1203,1207.16 1203.58,1207.16 1204.17,1207.16 1204.76,1207.16 1205.34,1207.16 1205.93,1207.16 1206.52,1207.16 1207.1,1207.16 1207.69,1207.16 1208.28,1207.16 1208.86,1207.16 1209.45,1207.16 1210.03,1207.16 1210.62,1207.16 1211.21,1207.16 1211.79,1207.16 1212.38,1207.16 1212.97,1207.16 1213.55,1207.16 1214.14,1207.16 1214.73,1207.16 1215.31,1207.16 1215.9,1207.16 1216.49,1207.16 1217.07,1207.16 1217.66,1207.16 1218.24,1207.16 1218.83,1207.16 1219.42,1207.16 1220,1207.16 1220.59,1207.16 1221.18,1207.16 1221.76,1207.16 1222.35,1207.16 1222.94,1207.16 1223.52,1207.16 1224.11,1207.16 1224.7,1207.16 1225.28,1207.16 1225.87,1207.16 1226.45,1207.16 1227.04,1207.16 1227.63,1207.16 1228.21,1207.16 1228.8,1207.16 1229.39,1207.16 1229.97,1207.16 1230.56,1207.16 1231.15,1207.16 1231.73,1207.16 1232.32,1207.16 1232.91,1207.16 1233.49,1207.16 1234.08,1207.16 1234.66,1207.16 1235.25,1207.16 1235.84,1207.16 1236.42,1207.16 1237.01,1207.16 1237.6,1207.16 1238.18,1207.16 1238.77,1207.16 1239.36,1207.16 1239.94,1207.16 1240.53,1207.16 1241.11,1207.16 1241.7,1207.16 1242.29,1207.16 1242.87,1207.16 1243.46,1207.16 1244.05,1207.16 1244.63,1207.16 1245.22,1207.16 1245.81,1207.16 1246.39,1207.16 1246.98,1207.16 1247.57,1207.16 1248.15,1207.16 1248.74,1207.16 1249.32,1207.16 1249.91,1207.16 1250.5,1207.16 1251.08,1207.16 1251.67,1207.16 1252.26,1207.16 1252.84,1207.16 1253.43,1207.16 1254.02,1207.16 1254.6,1207.16 1255.19,1207.16 1255.78,1207.16 1256.36,1207.16 1256.95,1207.16 1257.53,1207.16 1258.12,1207.16 1258.71,1207.16 1259.29,1207.16 1259.88,1207.16 1260.47,1207.16 1261.05,1207.16 1261.64,1207.16 1262.23,1207.16 1262.81,1207.16 1263.4,1207.16 1263.98,1207.16 1264.57,1207.16 1265.16,1207.16 1265.74,1207.16 1266.33,1207.16 1266.92,1207.16 1267.5,1207.16 1268.09,1207.16 1268.68,1207.16 1269.26,1207.16 1269.85,1207.16 1270.44,1207.16 1271.02,1207.16 1271.61,1207.16 1272.19,1207.16 1272.78,1207.16 1273.37,1207.16 1273.95,1207.16 1274.54,1207.16 1275.13,1207.16 1275.71,1207.16 1276.3,1207.16 1276.89,1207.16 1277.47,1207.16 1278.06,1207.16 1278.65,1207.16 1279.23,1207.16 1279.82,1207.16 1280.4,1207.16 1280.99,1207.16 1281.58,1207.16 1282.16,1207.16 1282.75,1207.16 1283.34,1207.16 1283.92,1207.16 1284.51,1207.16 1285.1,1207.16 1285.68,1207.16 1286.27,1207.16 1286.86,1207.16 1287.44,1207.16 1288.03,1207.16 1288.61,1207.16 1289.2,1207.16 1289.79,1207.16 1290.37,1207.16 1290.96,1207.16 1291.55,1207.16 1292.13,1207.16 1292.72,1207.16 1293.31,1207.16 1293.89,1207.16 1294.48,1207.16 1295.06,1207.16 1295.65,1207.16 1296.24,1207.16 1296.82,1207.16 1297.41,1207.16 1298,1207.16 1298.58,1207.16 1299.17,1207.16 1299.76,1207.16 1300.34,1207.16 1300.93,1207.16 1301.52,1207.16 1302.1,1207.16 1302.69,1207.16 1303.27,1207.16 1303.86,1207.16 1304.45,1207.16 1305.03,1207.16 1305.62,1207.16 1306.21,1207.16 1306.79,1207.16 1307.38,1207.16 1307.97,1207.16 1308.55,1207.16 1309.14,1207.16 1309.73,1207.16 1310.31,1207.16 1310.9,1207.16 1311.48,1207.16 1312.07,1207.16 1312.66,1207.16 1313.24,1207.16 1313.83,1207.16 1314.42,1207.16 1315,1207.16 1315.59,1207.16 1316.18,1207.16 1316.76,1207.16 1317.35,1207.16 1317.93,1207.16 1318.52,1207.16 1319.11,1207.16 1319.69,1207.16 1320.28,1207.16 1320.87,1207.16 1321.45,1207.16 1322.04,1207.16 1322.63,1207.16 1323.21,1207.16 1323.8,1207.16 1324.39,1207.16 1324.97,1207.16 1325.56,1207.16 1326.14,1207.16 1326.73,1207.16 1327.32,1207.16 1327.9,1207.16 1328.49,1207.16 1329.08,1207.16 1329.66,1207.16 1330.25,1207.16 1330.84,1207.16 1331.42,1207.16 1332.01,1207.16 1332.6,1207.16 1333.18,1207.16 1333.77,1207.16 1334.35,1207.16 1334.94,1207.16 1335.53,1207.16 1336.11,1207.16 1336.7,1207.16 1337.29,1207.16 1337.87,1207.16 1338.46,1207.16 1339.05,1207.16 1339.63,1207.16 1340.22,1207.16 1340.8,1207.16 1341.39,1207.16 1341.98,1207.16 1342.56,1207.16 1343.15,1207.16 1343.74,1207.16 1344.32,1207.16 1344.91,1207.16 1345.5,1207.16 1346.08,1207.16 1346.67,1207.16 1347.26,1207.16 1347.84,1207.16 1348.43,1207.16 1349.01,1207.16 1349.6,1207.16 1350.19,1207.16 1350.77,1207.16 1351.36,1207.16 1351.95,1207.16 1352.53,1207.16 1353.12,1207.16 1353.71,1207.16 1354.29,1207.16 1354.88,1207.16 1355.47,1207.16 1356.05,1207.16 1356.64,1207.16 1357.22,1207.16 1357.81,1207.16 1358.4,1207.16 1358.98,1207.16 1359.57,1207.16 1360.16,1207.16 1360.74,1207.16 1361.33,1207.16 1361.92,1207.16 1362.5,1207.16 1363.09,1207.16 1363.68,1207.16 1364.26,1207.16 1364.85,1207.16 1365.43,1207.16 1366.02,1207.16 1366.61,1207.16 1367.19,1207.16 1367.78,1207.16 1368.37,1207.16 1368.95,1207.16 1369.54,1207.16 1370.13,1207.16 1370.71,1207.16 1371.3,1207.16 1371.88,1207.16 1372.47,1207.16 1373.06,1207.16 1373.64,1207.16 1374.23,1207.16 1374.82,1207.16 1375.4,1207.16 1375.99,1207.16 1376.58,1207.16 1377.16,1207.16 1377.75,1207.16 1378.34,1207.16 1378.92,1207.16 1379.51,1207.16 1380.09,1207.16 1380.68,1207.16 1381.27,1207.16 1381.85,1207.16 1382.44,1207.16 1383.03,1207.16 1383.61,1207.16 1384.2,1207.16 1384.79,1207.16 1385.37,1207.16 1385.96,1207.16 1386.55,1207.16 1387.13,1207.16 1387.72,1207.16 1388.3,1207.16 1388.89,1207.16 1389.48,1207.16 1390.06,1207.16 1390.65,1207.16 1391.24,1207.16 1391.82,1207.16 1392.41,1207.16 1393,1207.16 1393.58,1207.16 1394.17,1207.16 1394.75,1207.16 1395.34,1207.16 1395.93,1207.16 1396.51,1207.16 1397.1,1207.16 1397.69,1207.16 1398.27,1207.16 1398.86,1207.16 1399.45,1207.16 1400.03,1207.16 1400.62,1207.16 1401.21,1207.16 1401.79,1207.16 1402.38,1207.16 1402.96,1207.16 1403.55,1207.16 1404.14,1207.16 1404.72,1207.16 1405.31,1207.16 1405.9,1207.16 1406.48,1207.16 1407.07,1207.16 1407.66,1207.16 1408.24,1207.16 1408.83,1207.16 1409.42,1207.16 1410,1207.16 1410.59,1207.16 1411.17,1207.16 1411.76,1207.16 1412.35,1207.16 1412.93,1207.16 1413.52,1207.16 1414.11,1207.16 1414.69,1207.16 1415.28,1207.16 1415.87,1207.16 1416.45,1207.16 1417.04,1207.16 1417.63,1207.16 1418.21,1207.16 1418.8,1207.16 1419.38,1207.16 1419.97,1207.16 1420.56,1207.16 1421.14,1207.16 1421.73,1207.16 1422.32,1207.16 1422.9,1207.16 1423.49,1207.16 1424.08,1207.16 1424.66,1207.16 1425.25,1207.16 1425.83,1207.16 1426.42,1207.16 1427.01,1207.16 1427.59,1207.16 1428.18,1207.16 1428.77,1207.16 1429.35,1207.16 1429.94,1207.16 1430.53,1207.16 1431.11,1207.16 1431.7,1207.16 1432.29,1207.16 1432.87,1207.16 1433.46,1207.16 1434.04,1207.16 1434.63,1207.16 1435.22,1207.16 1435.8,1207.16 1436.39,1207.16 1436.98,1207.16 1437.56,1207.16 1438.15,1207.16 1438.74,1207.16 1439.32,1207.16 1439.91,1207.16 1440.5,1207.16 1441.08,1207.16 1441.67,1207.16 1442.25,1207.16 1442.84,1207.16 1443.43,1207.16 1444.01,1207.16 1444.6,1207.16 1445.19,1207.16 1445.77,1207.16 1446.36,1207.16 1446.95,1207.16 1447.53,1207.16 1448.12,1207.16 1448.7,1207.16 1449.29,1207.16 1449.88,1207.16 1450.46,1207.16 1451.05,1207.16 1451.64,1207.16 1452.22,1207.16 1452.81,1207.16 1453.4,1207.16 1453.98,1207.16 1454.57,1207.16 1455.16,1207.16 1455.74,1207.16 1456.33,1207.16 1456.91,1207.16 1457.5,1207.16 1458.09,1207.16 1458.67,1207.16 1459.26,1207.16 1459.85,1207.16 1460.43,1207.16 1461.02,1207.16 1461.61,1207.16 1462.19,1207.16 1462.78,1207.16 1463.37,1207.16 1463.95,1207.16 1464.54,1207.16 1465.12,1207.16 1465.71,1207.16 1466.3,1207.16 1466.88,1207.16 1467.47,1207.16 1468.06,1207.16 1468.64,1207.16 1469.23,1207.16 1469.82,1207.16 1470.4,1207.16 1470.99,1207.16 1471.57,1207.16 1472.16,1207.16 1472.75,1207.16 1473.33,1207.16 1473.92,1207.16 1474.51,1207.16 1475.09,1207.16 1475.68,1207.16 1476.27,1207.16 1476.85,1207.16 1477.44,1207.16 1478.03,1207.16 1478.61,1207.16 1479.2,1207.16 1479.78,1207.16 1480.37,1207.16 1480.96,1207.16 1481.54,1207.16 1482.13,1207.16 1482.72,1207.16 1483.3,1207.16 1483.89,1207.16 1484.48,1207.16 1485.06,1207.16 1485.65,1207.16 1486.24,1207.16 1486.82,1207.16 1487.41,1207.16 1487.99,1207.16 1488.58,1207.16 1489.17,1207.16 1489.75,1207.16 1490.34,1207.16 1490.93,1207.16 1491.51,1207.16 1492.1,1207.16 1492.69,1207.16 1493.27,1207.16 1493.86,1207.16 1494.45,1207.16 1495.03,1207.16 1495.62,1207.16 1496.2,1207.16 1496.79,1207.16 1497.38,1207.16 1497.96,1207.16 1498.55,1207.16 1499.14,1207.16 1499.72,1207.16 1500.31,1207.16 1500.9,1207.16 1501.48,1207.16 1502.07,1207.16 1502.65,1207.16 1503.24,1207.16 1503.83,1207.16 1504.41,1207.16 1505,1207.16 1505.59,1207.16 1506.17,1207.16 1506.76,1207.16 1507.35,1207.16 1507.93,1207.16 1508.52,1207.16 1509.11,1207.16 1509.69,1207.16 1510.28,1207.16 1510.86,1207.16 1511.45,1207.16 1512.04,1207.16 1512.62,1207.16 1513.21,1207.16 1513.8,1207.16 1514.38,1207.16 1514.97,1207.16 1515.56,1207.16 1516.14,1207.16 1516.73,1207.16 1517.32,1207.16 1517.9,1207.16 1518.49,1207.16 1519.07,1207.16 1519.66,1207.16 1520.25,1207.16 1520.83,1207.16 1521.42,1207.16 1522.01,1207.16 1522.59,1207.16 1523.18,1207.16 1523.77,1207.16 1524.35,1207.16 1524.94,1207.16 1525.52,1207.16 1526.11,1207.16 1526.7,1207.16 1527.28,1207.16 1527.87,1207.16 1528.46,1207.16 1529.04,1207.16 1529.63,1207.16 1530.22,1207.16 1530.8,1207.16 1531.39,1207.16 1531.98,1207.16 1532.56,1207.16 1533.15,1207.16 1533.73,1207.16 1534.32,1207.16 1534.91,1207.16 1535.49,1207.16 1536.08,1207.16 1536.67,1207.16 1537.25,1207.16 1537.84,1207.16 1538.43,1207.16 1539.01,1207.16 1539.6,1207.16 1540.19,1207.16 1540.77,1207.16 1541.36,1207.16 1541.94,1207.16 1542.53,1207.16 1543.12,1207.16 1543.7,1207.16 1544.29,1207.16 1544.88,1207.16 1545.46,1207.16 1546.05,1207.16 1546.64,1207.16 1547.22,1207.16 1547.81,1207.16 1548.4,1207.16 1548.98,1207.16 1549.57,1207.16 1550.15,1207.16 1550.74,1207.16 1551.33,1207.16 1551.91,1207.16 1552.5,1207.16 1553.09,1207.16 1553.67,1207.16 1554.26,1207.16 1554.85,1207.16 1555.43,1207.16 1556.02,1207.16 1556.6,1207.16 1557.19,1207.16 1557.78,1207.16 1558.36,1207.16 1558.95,1207.16 1559.54,1207.16 1560.12,1207.16 1560.71,1207.16 1561.3,1207.16 1561.88,1207.16 1562.47,1207.16 1563.06,1207.16 1563.64,1207.16 1564.23,1207.16 1564.81,1207.16 1565.4,1207.16 1565.99,1207.16 1566.57,1207.16 1567.16,1207.16 1567.75,1207.16 1568.33,1207.16 1568.92,1207.16 1569.51,1207.16 1570.09,1207.16 1570.68,1207.16 1571.27,1207.16 1571.85,1207.16 1572.44,1207.16 1573.02,1207.16 1573.61,1207.16 1574.2,1207.16 1574.78,1207.16 1575.37,1207.16 1575.96,1207.16 1576.54,1207.16 1577.13,1207.16 1577.72,1207.16 1578.3,1207.16 1578.89,1207.16 1579.47,1207.16 1580.06,1207.16 1580.65,1207.16 1581.23,1207.16 1581.82,1207.16 1582.41,1207.16 1582.99,1207.16 1583.58,1207.16 1584.17,1207.16 1584.75,1207.16 1585.34,1207.16 1585.93,1207.16 1586.51,1207.16 1587.1,1207.16 1587.68,1207.16 1588.27,1207.16 1588.86,1207.16 1589.44,1207.16 1590.03,1207.16 1590.62,1207.16 1591.2,1207.16 1591.79,1207.16 1592.38,1207.16 1592.96,1207.16 1593.55,1207.16 1594.14,1207.16 1594.72,1207.16 1595.31,1207.16 1595.89,1207.16 1596.48,1207.16 1597.07,1207.16 1597.65,1207.16 1598.24,1207.16 1598.83,1207.16 1599.41,1207.16 1600,1207.16 1600.59,1207.16 1601.17,1207.16 1601.76,1207.16 1602.34,1207.16 1602.93,1207.16 1603.52,1207.16 1604.1,1207.16 1604.69,1207.16 1605.28,1207.16 1605.86,1207.16 1606.45,1207.16 1607.04,1207.16 1607.62,1207.16 1608.21,1207.16 1608.8,1207.16 1609.38,1207.16 1609.97,1207.16 1610.55,1207.16 1611.14,1207.16 1611.73,1207.16 1612.31,1207.16 1612.9,1207.16 1613.49,1207.16 1614.07,1207.16 1614.66,1207.16 1615.25,1207.16 1615.83,1207.16 1616.42,1207.16 1617.01,1207.16 1617.59,1207.16 1618.18,1207.16 1618.76,1207.16 1619.35,1207.16 1619.94,1207.16 1620.52,1207.16 1621.11,1207.16 1621.7,1207.16 1622.28,1207.16 1622.87,1207.16 1623.46,1207.16 1624.04,1207.16 1624.63,1207.16 1625.22,1207.16 1625.8,1207.16 1626.39,1207.16 1626.97,1207.16 1627.56,1207.16 1628.15,1207.16 1628.73,1207.16 1629.32,1207.16 1629.91,1207.16 1630.49,1207.16 1631.08,1207.16 1631.67,1207.16 1632.25,1207.16 1632.84,1207.16 1633.42,1207.16 1634.01,1207.16 1634.6,1207.16 1635.18,1207.16 1635.77,1207.16 1636.36,1207.16 1636.94,1207.16 1637.53,1207.16 1638.12,1207.16 1638.7,1207.16 1639.29,1207.16 1639.88,1207.16 1640.46,1207.16 1641.05,1207.16 1641.63,1207.16 1642.22,1207.16 1642.81,1207.16 1643.39,1207.16 1643.98,1207.16 1644.57,1207.16 1645.15,1207.16 1645.74,1207.16 1646.33,1207.16 1646.91,1207.16 1647.5,1207.16 1648.09,1207.16 1648.67,1207.16 1649.26,1207.16 1649.84,1207.16 1650.43,1207.16 1651.02,1207.16 1651.6,1207.16 1652.19,1207.16 1652.78,1207.16 1653.36,1207.16 1653.95,1207.16 1654.54,1207.16 1655.12,1207.16 1655.71,1207.16 1656.29,1207.16 1656.88,1207.16 1657.47,1207.16 1658.05,1207.16 1658.64,1207.16 1659.23,1207.16 1659.81,1207.16 1660.4,1207.16 1660.99,1207.16 1661.57,1207.16 1662.16,1207.16 1662.75,1207.16 1663.33,1207.16 1663.92,1207.16 1664.5,1207.16 1665.09,1207.16 1665.68,1207.16 1666.26,1207.16 1666.85,1207.16 1667.44,1207.16 1668.02,1207.16 1668.61,1207.16 1669.2,1207.16 1669.78,1207.16 1670.37,1207.16 1670.96,1207.16 1671.54,1207.16 1672.13,1207.16 1672.71,1207.16 1673.3,1207.16 1673.89,1207.16 1674.47,1207.16 1675.06,1207.16 1675.65,1207.16 1676.23,1207.16 1676.82,1207.16 1677.41,1207.16 1677.99,1207.16 1678.58,1207.16 1679.17,1207.16 1679.75,1207.16 1680.34,1207.16 1680.92,1207.16 1681.51,1207.16 1682.1,1207.16 1682.68,1207.16 1683.27,1207.16 1683.86,1207.16 1684.44,1207.16 1685.03,1207.16 1685.62,1207.16 1686.2,1207.16 1686.79,1207.16 1687.37,1207.16 1687.96,1207.16 1688.55,1207.16 1689.13,1207.16 1689.72,1207.16 1690.31,1207.16 1690.89,1207.16 1691.48,1207.16 1692.07,1207.16 1692.65,1207.16 1693.24,1207.16 1693.83,1207.16 1694.41,1207.16 1695,1207.16 1695.58,1207.16 1696.17,1207.16 1696.76,1207.16 1697.34,1207.16 1697.93,1207.16 1698.52,1207.16 1699.1,1207.16 1699.69,1207.16 1700.28,1207.16 1700.86,1207.16 1701.45,1207.16 1702.04,1207.16 1702.62,1207.16 1703.21,1207.16 1703.79,1207.16 1704.38,1207.16 1704.97,1207.16 1705.55,1207.16 1706.14,1207.16 1706.73,1207.16 1707.31,1207.16 1707.9,1207.16 1708.49,1207.16 1709.07,1207.16 1709.66,1207.16 1710.24,1207.16 1710.83,1207.16 1711.42,1207.16 1712,1207.16 1712.59,1207.16 1713.18,1207.16 1713.76,1207.16 1714.35,1207.16 1714.94,1207.16 1715.52,1207.16 1716.11,1207.16 1716.7,1207.16 1717.28,1207.16 1717.87,1207.16 1718.45,1207.16 1719.04,1207.16 1719.63,1207.16 1720.21,1207.16 1720.8,1207.16 1721.39,1207.16 1721.97,1207.16 1722.56,1207.16 1723.15,1207.16 1723.73,1207.16 1724.32,1207.16 1724.91,1207.16 1725.49,1207.16 1726.08,1207.16 1726.66,1207.16 1727.25,1207.16 1727.84,1207.16 1728.42,1207.16 1729.01,1207.16 1729.6,1207.16 1730.18,1207.16 1730.77,1207.16 1731.36,1207.16 1731.94,1207.16 1732.53,1207.16 1733.11,1207.16 1733.7,1207.16 1734.29,1207.16 1734.87,1207.16 1735.46,1207.16 1736.05,1207.16 1736.63,1207.16 1737.22,1207.16 1737.81,1207.16 1738.39,1207.16 1738.98,1207.16 1739.57,1207.16 1740.15,1207.16 1740.74,1207.16 1741.32,1207.16 1741.91,1207.16 1742.5,1207.16 1743.08,1207.16 1743.67,1207.16 1744.26,1207.16 1744.84,1207.16 1745.43,1207.16 1746.02,1207.16 1746.6,1207.16 1747.19,1207.16 1747.78,1207.16 1748.36,1207.16 1748.95,1207.16 1749.53,1207.16 1750.12,1207.16 1750.71,1207.16 1751.29,1207.16 1751.88,1207.16 1752.47,1207.16 1753.05,1207.16 1753.64,1207.16 1754.23,1207.16 1754.81,1207.16 1755.4,1207.16 1755.99,1207.16 1756.57,1207.16 1757.16,1207.16 1757.74,1207.16 1758.33,1207.16 1758.92,1207.16 1759.5,1207.16 1760.09,1207.16 1760.68,1207.16 1761.26,1207.16 1761.85,1207.16 1762.44,1207.16 1763.02,1207.16 1763.61,1207.16 1764.19,1207.16 1764.78,1207.16 1765.37,1207.16 1765.95,1207.16 1766.54,1207.16 1767.13,1207.16 1767.71,1207.16 1768.3,1207.16 1768.89,1207.16 1769.47,1207.16 1770.06,1207.16 1770.65,1207.16 1771.23,1207.16 1771.82,1207.16 1772.4,1207.16 1772.99,1207.16 1773.58,1207.16 1774.16,1207.16 1774.75,1207.16 1775.34,1207.16 1775.92,1207.16 1776.51,1207.16 1777.1,1207.16 1777.68,1207.16 1778.27,1207.16 1778.86,1207.16 1779.44,1207.16 1780.03,1207.16 1780.61,1207.16 1781.2,1207.16 1781.79,1207.16 1782.37,1207.16 1782.96,1207.16 1783.55,1207.16 1784.13,1207.16 1784.72,1207.16 1785.31,1207.16 1785.89,1207.16 1786.48,1207.16 1787.06,1207.16 1787.65,1207.16 1788.24,1207.16 1788.82,1207.16 1789.41,1207.16 1790,1207.16 1790.58,1207.16 1791.17,1207.16 1791.76,1207.16 1792.34,1207.16 1792.93,1207.16 1793.52,1207.16 1794.1,1207.16 1794.69,1207.16 1795.27,1207.16 1795.86,1207.16 1796.45,1207.16 1797.03,1207.16 1797.62,1207.16 1798.21,1207.16 1798.79,1207.16 1799.38,1207.16 1799.97,1207.16 1800.55,1207.16 1801.14,1207.16 1801.73,1207.16 1802.31,1207.16 1802.9,1207.16 1803.48,1207.16 1804.07,1207.16 1804.66,1207.16 1805.24,1207.16 1805.83,1207.16 1806.42,1207.16 1807,1207.16 1807.59,1207.16 1808.18,1207.16 1808.76,1207.16 1809.35,1207.16 1809.94,1207.16 1810.52,1207.16 1811.11,1207.16 1811.69,1207.16 1812.28,1207.16 1812.87,1207.16 1813.45,1207.16 1814.04,1207.16 1814.63,1207.16 1815.21,1207.16 1815.8,1207.16 1816.39,1207.16 1816.97,1207.16 1817.56,1207.16 1818.14,1207.16 1818.73,1207.16 1819.32,1207.16 1819.9,1207.16 1820.49,1207.16 1821.08,1207.16 1821.66,1207.16 1822.25,1207.16 1822.84,1207.16 1823.42,1207.16 1824.01,1207.16 1824.6,1207.16 1825.18,1207.16 1825.77,1207.16 1826.35,1207.16 1826.94,1207.16 1827.53,1207.16 1828.11,1207.16 1828.7,1207.16 1829.29,1207.16 1829.87,1207.16 1830.46,1207.16 1831.05,1207.16 1831.63,1207.16 1832.22,1207.16 1832.81,1207.16 1833.39,1207.16 1833.98,1207.16 1834.56,1207.16 1835.15,1207.16 1835.74,1207.16 1836.32,1207.16 1836.91,1207.16 1837.5,1207.16 1838.08,1207.16 1838.67,1207.16 1839.26,1207.16 1839.84,1207.16 1840.43,1207.16 1841.01,1207.16 1841.6,1207.16 1842.19,1207.16 1842.77,1207.16 1843.36,1207.16 1843.95,1207.16 1844.53,1207.16 1845.12,1207.16 1845.71,1207.16 1846.29,1207.16 1846.88,1207.16 1847.47,1207.16 1848.05,1207.16 1848.64,1207.16 1849.22,1207.16 1849.81,1207.16 1850.4,1207.16 1850.98,1207.16 1851.57,1207.16 1852.16,1207.16 1852.74,1207.16 1853.33,1207.16 1853.92,1207.16 1854.5,1207.16 1855.09,1207.16 1855.68,1207.16 1856.26,1207.16 1856.85,1207.16 1857.43,1207.16 1858.02,1207.16 1858.61,1207.16 1859.19,1207.16 1859.78,1207.16 1860.37,1207.16 1860.95,1207.16 1861.54,1207.16 1862.13,1207.16 1862.71,1207.16 1863.3,1207.16 1863.88,1207.16 1864.47,1207.16 1865.06,1207.16 1865.64,1207.16 1866.23,1207.16 1866.82,1207.16 1867.4,1207.16 1867.99,1207.16 1868.58,1207.16 1869.16,1207.16 1869.75,1207.16 1870.34,1207.16 1870.92,1207.16 1871.51,1207.16 1872.09,1207.16 1872.68,1207.16 1873.27,1207.16 1873.85,1207.16 1874.44,1207.16 1875.03,1207.16 1875.61,1207.16 1876.2,1207.16 1876.79,1207.16 1877.37,1207.16 1877.96,1207.16 1878.55,1207.16 1879.13,1207.16 1879.72,1207.16 1880.3,1207.16 1880.89,1207.16 1881.48,1207.16 1882.06,1207.16 1882.65,1207.16 1883.24,1207.16 1883.82,1207.16 1884.41,1207.16 1885,1207.16 1885.58,1207.16 1886.17,1207.16 1886.76,1207.16 1887.34,1207.16 1887.93,1207.16 1888.51,1207.16 1889.1,1207.16 1889.69,1207.16 1890.27,1207.16 1890.86,1207.16 1891.45,1207.16 1892.03,1207.16 1892.62,1207.16 1893.21,1207.16 1893.79,1207.16 1894.38,1207.16 1894.96,1207.16 1895.55,1207.16 1896.14,1207.16 1896.72,1207.16 1897.31,1207.16 1897.9,1207.16 1898.48,1207.16 1899.07,1207.16 1899.66,1207.16 1900.24,1207.16 1900.83,1207.16 1901.42,1207.16 1902,1207.16 1902.59,1207.16 1903.17,1207.16 1903.76,1207.16 1904.35,1207.16 1904.93,1207.16 1905.52,1207.16 1906.11,1207.16 1906.69,1207.16 1907.28,1207.16 1907.87,1207.16 1908.45,1207.16 1909.04,1207.16 1909.63,1207.16 1910.21,1207.16 1910.8,1207.16 1911.38,1207.16 1911.97,1207.16 1912.56,1207.16 1913.14,1207.16 1913.73,1207.16 1914.32,1207.16 1914.9,1207.16 1915.49,1207.16 1916.08,1207.16 1916.66,1207.16 1917.25,1207.16 1917.83,1207.16 1918.42,1207.16 1919.01,1207.16 1919.59,1207.16 1920.18,1207.16 1920.77,1207.16 1921.35,1207.16 1921.94,1207.16 1922.53,1207.16 1923.11,1207.16 1923.7,1207.16 1924.29,1207.16 1924.87,1207.16 1925.46,1207.16 1926.04,1207.16 1926.63,1207.16 1927.22,1207.16 1927.8,1207.16 1928.39,1207.16 1928.98,1207.16 1929.56,1207.16 1930.15,1207.16 1930.74,1207.16 1931.32,1207.16 1931.91,1207.16 1932.5,1207.16 1933.08,1207.16 1933.67,1207.16 1934.25,1207.16 1934.84,1207.16 1935.43,1207.16 1936.01,1207.16 1936.6,1207.16 1937.19,1207.16 1937.77,1207.16 1938.36,1207.16 1938.95,1207.16 1939.53,1207.16 1940.12,1207.16 1940.71,1207.16 1941.29,1207.16 1941.88,1207.16 1942.46,1207.16 1943.05,1207.16 1943.64,1207.16 1944.22,1207.16 1944.81,1207.16 1945.4,1207.16 1945.98,1207.16 1946.57,1207.16 1947.16,1207.16 1947.74,1207.16 1948.33,1207.16 1948.91,1207.16 1949.5,1207.16 1950.09,1207.16 1950.67,1207.16 1951.26,1207.16 1951.85,1207.16 1952.43,1207.16 1953.02,1207.16 1953.61,1207.16 1954.19,1207.16 1954.78,1207.16 1955.37,1207.16 1955.95,1207.16 1956.54,1207.16 1957.12,1207.16 1957.71,1207.16 1958.3,1207.16 1958.88,1207.16 1959.47,1207.16 1960.06,1207.16 1960.64,1207.16 1961.23,1207.16 1961.82,1207.16 1962.4,1207.16 1962.99,1207.16 1963.58,1207.16 1964.16,1207.16 1964.75,1207.16 1965.33,1207.16 1965.92,1207.16 1966.51,1207.16 1967.09,1207.16 1967.68,1207.16 1968.27,1207.16 1968.85,1207.16 1969.44,1207.16 1970.03,1207.16 1970.61,1207.16 1971.2,1207.16 1971.78,1207.16 1972.37,1207.16 1972.96,1207.16 1973.54,1207.16 1974.13,1207.16 1974.72,1207.16 1975.3,1207.16 1975.89,1207.16 1976.48,1207.16 1977.06,1207.16 1977.65,1207.16 1978.24,1207.16 1978.82,1207.16 1979.41,1207.16 1979.99,1207.16 1980.58,1207.16 1981.17,1207.16 1981.75,1207.16 1982.34,1207.16 1982.93,1207.16 1983.51,1207.16 1984.1,1207.16 1984.69,1207.16 1985.27,1207.16 1985.86,1207.16 1986.45,1207.16 1987.03,1207.16 1987.62,1207.16 1988.2,1207.16 1988.79,1207.16 1989.38,1207.16 1989.96,1207.16 1990.55,1207.16 1991.14,1207.16 1991.72,1207.16 1992.31,1207.16 1992.9,1207.16 1993.48,1207.16 1994.07,1207.16 1994.65,1207.16 1995.24,1207.16 1995.83,1207.16 1996.41,1207.16 1997,1207.16 1997.59,1207.16 1998.17,1207.16 1998.76,1207.16 1999.35,1207.16 1999.93,1207.16 2000.52,1207.16 2001.11,1207.16 2001.69,1207.16 2002.28,1207.16 2002.86,1207.16 2003.45,1207.16 2004.04,1207.16 2004.62,1207.16 2005.21,1207.16 2005.8,1207.16 2006.38,1207.16 2006.97,1207.16 2007.56,1207.16 2008.14,1207.16 2008.73,1207.16 2009.32,1207.16 2009.9,1207.16 2010.49,1207.16 2011.07,1207.16 2011.66,1207.16 2012.25,1207.16 2012.83,1207.16 2013.42,1207.16 2014.01,1207.16 2014.59,1207.16 2015.18,1207.16 2015.77,1207.16 2016.35,1207.16 2016.94,1207.16 2017.53,1207.16 2018.11,1207.16 2018.7,1207.16 2019.28,1207.16 2019.87,1207.16 2020.46,1207.16 2021.04,1207.16 2021.63,1207.16 2022.22,1207.16 2022.8,1207.16 2023.39,1207.16 2023.98,1207.16 2024.56,1207.16 2025.15,1207.16 2025.73,1207.16 2026.32,1207.16 2026.91,1207.16 2027.49,1207.16 2028.08,1207.16 2028.67,1207.16 2029.25,1207.16 2029.84,1207.16 2030.43,1207.16 2031.01,1207.16 2031.6,1207.16 2032.19,1207.16 2032.77,1207.16 2033.36,1207.16 2033.94,1207.16 2034.53,1207.16 2035.12,1207.16 2035.7,1207.16 2036.29,1207.16 2036.88,1207.16 2037.46,1207.16 2038.05,1207.16 2038.64,1207.16 2039.22,1207.16 2039.81,1207.16 2040.4,1207.16 2040.98,1207.16 2041.57,1207.16 2042.15,1207.16 2042.74,1207.16 2043.33,1207.16 2043.91,1207.16 2044.5,1207.16 2045.09,1207.16 2045.67,1207.16 2046.26,1207.16 2046.85,1207.16 2047.43,1207.16 2048.02,1207.16 2048.6,1207.16 2049.19,1207.16 2049.78,1207.16 2050.36,1207.16 2050.95,1207.16 2051.54,1207.16 2052.12,1207.16 2052.71,1207.16 2053.3,1207.16 2053.88,1207.16 2054.47,1207.16 2055.06,1207.16 2055.64,1207.16 2056.23,1207.16 2056.81,1207.16 2057.4,1207.16 2057.99,1207.16 2058.57,1207.16 2059.16,1207.16 2059.75,1207.16 2060.33,1207.16 2060.92,1207.16 2061.51,1207.16 2062.09,1207.16 2062.68,1207.16 2063.27,1207.16 2063.85,1207.16 2064.44,1207.16 2065.02,1207.16 2065.61,1207.16 2066.2,1207.16 2066.78,1207.16 2067.37,1207.16 2067.96,1207.16 2068.54,1207.16 2069.13,1207.16 2069.72,1207.16 2070.3,1207.16 2070.89,1207.16 2071.48,1207.16 2072.06,1207.16 2072.65,1207.16 2073.23,1207.16 2073.82,1207.16 2074.41,1207.16 2074.99,1207.16 2075.58,1207.16 2076.17,1207.16 2076.75,1207.16 2077.34,1207.16 2077.93,1207.16 2078.51,1207.16 2079.1,1207.16 2079.68,1207.16 2080.27,1207.16 2080.86,1207.16 2081.44,1207.16 2082.03,1207.16 2082.62,1207.16 2083.2,1207.16 2083.79,1207.16 2084.38,1207.16 2084.96,1207.16 2085.55,1207.16 2086.14,1207.16 2086.72,1207.16 2087.31,1207.16 2087.89,1207.16 2088.48,1207.16 2089.07,1207.16 2089.65,1207.16 2090.24,1207.16 2090.83,1207.16 2091.41,1207.16 2092,1207.16 2092.59,1207.16 2093.17,1207.16 2093.76,1207.16 2094.35,1207.16 2094.93,1207.16 2095.52,1207.16 2096.1,1207.16 2096.69,1207.16 2097.28,1207.16 2097.86,1207.16 2098.45,1207.16 2099.04,1207.16 2099.62,1207.16 2100.21,1207.16 2100.8,1207.16 2101.38,1207.16 2101.97,1207.16 2102.55,1207.16 2103.14,1207.16 2103.73,1207.16 2104.31,1207.16 2104.9,1207.16 2105.49,1207.16 2106.07,1207.16 2106.66,1207.16 2107.25,1207.16 2107.83,1207.16 2108.42,1207.16 2109.01,1207.16 2109.59,1207.16 2110.18,1207.16 2110.76,1207.16 2111.35,1207.16 2111.94,1207.16 2112.52,1207.16 2113.11,1207.16 2113.7,1207.16 2114.28,1207.16 2114.87,1207.16 2115.46,1207.16 2116.04,1207.16 2116.63,1207.16 2117.22,1207.16 2117.8,1207.16 2118.39,1207.16 2118.97,1207.16 2119.56,1207.16 2120.15,1207.16 2120.73,1207.16 2121.32,1207.16 2121.91,1207.16 2122.49,1207.16 2123.08,1207.16 2123.67,1207.16 2124.25,1207.16 2124.84,1207.16 2125.42,1207.16 2126.01,1207.16 2126.6,1207.16 2127.18,1207.16 2127.77,1207.16 2128.36,1207.16 2128.94,1207.16 2129.53,1207.16 2130.12,1207.16 2130.7,1207.16 2131.29,1207.16 2131.88,1207.16 2132.46,1207.16 2133.05,1207.16 2133.63,1207.16 2134.22,1207.16 2134.81,1207.16 2135.39,1207.16 2135.98,1207.16 2136.57,1207.16 2137.15,1207.16 2137.74,1207.16 2138.33,1207.16 2138.91,1207.16 2139.5,1207.16 2140.09,1207.16 2140.67,1207.16 2141.26,1207.16 2141.84,1207.16 2142.43,1207.16 2143.02,1207.16 2143.6,1207.16 2144.19,1207.16 2144.78,1207.16 2145.36,1207.16 2145.95,1207.16 2146.54,1207.16 2147.12,1207.16 2147.71,1207.16 2148.3,1207.16 2148.88,1207.16 2149.47,1207.16 2150.05,1207.16 2150.64,1207.16 2151.23,1207.16 2151.81,1207.16 2152.4,1207.16 2152.99,1207.16 2153.57,1207.16 2154.16,1207.16 2154.75,1207.16 2155.33,1207.16 2155.92,1207.16 2156.5,1207.16 2157.09,1207.16 2157.68,1207.16 2158.26,1207.16 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.23,1189.56 1400.55,899.083 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.14 985.439,1189.56 2158.26,1189.56 2158.26,1224.14 985.439,1224.14 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip203\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip203)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-11615.7 169.384,-11126.6 169.943,-10709.1 170.503,-11033 171.062,-11314.9 171.621,-10943.8 172.18,-11172.4 172.74,-10847.3 173.299,-11025.4 173.858,-11162.6 174.417,-11274.1 174.977,-11342.6 175.536,-11410.8 176.095,-11093 176.655,-10796.2 177.214,-10487.7 177.773,-10483.4 178.332,-10471.4 178.892,-10439.6 179.451,-10159.7 180.01,-9887.67 180.569,-9433 181.129,-9373.34 181.688,-9313.41 182.247,-9230.26 182.806,-8976.82 183.366,-8894.18 183.925,-8791.51 184.484,-8681.97 185.043,-8566.16 185.603,-8327.9 186.162,-8217.25 186.721,-8091.09 187.28,-7972.71 187.84,-7721.03 188.399,-7600.74 188.958,-7380.36 189.517,-7258.41 190.077,-7042.02 190.636,-6735.82 191.195,-6528.32 191.754,-6252.74 192.314,-6138.68 192.873,-6021.93 193.432,-5827.65 193.991,-5635.65 194.551,-5391.6 195.11,-5275.56 195.669,-5041 196.228,-4821.77 196.788,-4555.2 197.347,-4301.57 197.906,-4202 198.465,-4104.85 199.025,-3967.3 199.584,-3825.9 200.143,-3689.67 200.702,-3510.23 201.262,-3339.89 201.821,-3219.41 202.38,-3098.32 202.939,-3017.58 203.499,-2892.38 204.058,-2702.62 204.617,-2595.77 205.176,-2412.61 205.736,-2273.44 206.295,-2170.17 206.854,-2041.74 207.413,-1981.68 207.973,-1852.08 208.532,-1763.35 209.091,-1675.31 209.65,-1532.71 210.21,-1398.44 210.769,-1351.53 211.328,-1249.25 211.887,-1177.72 212.447,-1134.98 213.006,-1064.07 213.565,-916.523 214.124,-855.928 214.684,-793.801 215.243,-708.985 215.802,-680.989 216.361,-598.127 216.921,-521.172 217.48,-446.705 218.039,-396.412 218.598,-322.895 219.158,-253.975 219.717,-181.162 220.276,-112.142 220.835,-45.2387 221.395,18.7946 221.954,33.8492 222.513,72.8863 223.072,108.373 223.632,168.447 224.191,200.652 224.75,211.807 225.309,244.499 225.869,255.396 226.428,269.739 226.987,302.155 227.546,396.072 228.106,400.777 228.665,450.683 229.224,453.543 229.783,459.456 230.343,486.523 230.902,474.008 231.461,502.282 232.02,511.888 232.58,538.94 233.139,645.731 233.698,626.264 234.257,608.555 234.817,651.775 235.376,672.573 235.935,750.133 236.494,784.707 237.054,817.8 237.613,813.53 238.172,792.674 238.731,828.822 239.291,844.441 239.85,932.804 240.409,943.124 240.968,985.115 241.528,977.568 242.087,970.374 242.646,947.237 243.205,955.217 243.765,966.534 244.324,963.326 244.883,955.067 245.442,981.782 246.002,977.859 246.561,988.443 247.12,999.053 247.679,1045.63 248.239,1035.04 248.798,1065.29 249.357,1090.69 249.916,1082.18 250.476,1106.27 251.035,1128.78 251.594,1080.71 252.153,1068.56 252.713,1059.89 253.272,1072.95 253.831,1044.13 254.39,1056.74 254.95,1100.89 255.509,1125.37 256.068,1114.93 256.627,1122.68 257.187,1132.26 257.746,1102.49 258.305,1130.18 258.864,1154.97 259.424,1191.63 259.983,1211.3 260.542,1211.3 261.101,1232.5 261.661,1232.14 262.22,1229.74 262.779,1197.81 263.338,1149.43 263.898,1120.28 264.457,1128.64 265.016,1084 265.575,1092.45 266.135,1086.06 266.694,1095.18 267.253,1104.7 267.812,1127.24 268.372,1118.86 268.931,1110.33 269.49,1117.79 270.049,1111.1 270.609,1104.07 271.168,1112.99 271.727,1103.82 272.286,1112.36 272.846,1065.4 273.405,1107.45 273.964,1118.22 274.523,1091.76 275.083,1095.36 275.642,1135.77 276.201,1114.55 276.76,1106.04 277.32,1113.79 277.879,1108.23 278.438,1102.14 278.997,1129.42 279.557,1134.98 280.116,1107.44 280.675,1131.66 281.234,1107.17 281.794,1081.71 282.353,1043.6 282.912,1039.53 283.471,1015.34 284.031,1023.11 284.59,1001.15 285.149,1028.93 285.708,1026.59 286.268,1022.1 286.827,1032.82 287.386,1027.93 287.945,1042.6 288.505,1035.26 289.064,1030.13 289.623,1039.8 290.182,1036.56 290.742,1032.67 291.301,1047.06 291.86,1040.59 292.419,1066.78 292.979,1077.28 293.538,1118.39 294.097,1110.57 294.656,1118.38 295.216,1144.18 295.775,1131.73 296.334,1136.59 296.893,1144.68 297.453,1082.18 298.012,1085.08 298.571,1121.67 299.13,1106.91 299.69,1144.27 300.249,1131.24 300.808,1118.18 301.368,1109.82 301.927,1114.8 302.486,1120.32 303.045,1143.41 303.605,1165.03 304.164,1153.76 304.723,1157.3 305.282,1145.53 305.842,1102.13 306.401,1056.93 306.96,1022.64 307.519,1002.62 308.079,1000.76 308.638,963.607 309.197,972.318 309.756,967.616 310.316,963.788 310.875,976.412 311.434,972.32 311.993,954.116 312.553,949.797 313.112,945.559 313.671,943.123 314.23,970.952 314.79,984.509 315.349,978.773 315.908,990.369 316.467,968.335 317.027,980.86 317.586,976.922 318.145,956.669 318.704,953.263 319.264,931.155 319.823,930.389 320.382,942.021 320.941,937.959 321.501,999.991 322.06,988.896 322.619,950.225 323.178,961.525 323.738,959.311 324.297,923.424 324.856,936.961 325.415,934.474 325.975,964.74 326.534,979.358 327.093,960.245 327.652,938.975 328.212,951.915 328.771,963.603 329.33,961.917 329.889,957.792 330.449,955.487 331.008,954.043 331.567,947.661 332.126,970.558 332.686,964.46 333.245,961.609 333.804,955.007 334.363,980.752 334.923,988.936 335.482,981.297 336.041,1005.79 336.6,980.922 337.16,987.947 337.719,996.573 338.278,974.388 338.837,984.7 339.397,959.32 339.956,987.055 340.515,960.019 341.074,952.565 341.634,947.164 342.193,975.514 342.752,987.029 343.311,1029.42 343.871,1003.14 344.43,994.589 344.989,1017.68 345.548,991.957 346.108,998.607 346.667,993.034 347.226,952.758 347.785,945.218 348.345,918.556 348.904,932.838 349.463,926.693 350.022,903.901 350.582,903.056 351.141,900.157 351.7,890.976 352.259,875.502 352.819,902.014 353.378,914.694 353.937,908.814 354.496,901.782 355.056,911.685 355.615,908.341 356.174,902.291 356.733,899.984 357.293,911.782 357.852,885.622 358.411,849.108 358.97,849.094 359.53,879.665 360.089,860.202 360.648,872.263 361.207,870.386 361.767,866.885 362.326,845.268 362.885,824.839 363.444,857.052 364.004,855.068 364.563,900.559 365.122,896.454 365.681,874.955 366.241,870.222 366.8,853.102 367.359,835.639 367.918,820.444 368.478,805.356 369.037,790.043 369.596,786.632 370.155,818.786 370.715,820.146 371.274,850.352 371.833,881.8 372.392,847.174 372.952,846.803 373.511,860.844 374.07,841.983 374.629,838.564 375.189,837.461 375.748,853.015 376.307,882.33 376.866,877.985 377.426,877.845 377.985,891.211 378.544,853.089 379.103,870.489 379.663,869.08 380.222,867.162 380.781,863.266 381.34,824.624 381.9,822.618 382.459,822.813 383.018,821.626 383.577,854.314 384.137,869.858 384.696,881.944 385.255,878.536 385.814,938.106 386.374,929.031 386.933,921.344 387.492,913.537 388.051,890.71 388.611,935.276 389.17,882.318 389.729,863.358 390.288,842.478 390.848,835.763 391.407,898.663 391.966,905.559 392.525,933.333 393.085,925.884 393.644,914.74 394.203,874.641 394.762,900.983 395.322,895.712 395.881,905.114 396.44,883.979 396.999,862.653 397.559,858.855 398.118,868.986 398.677,834.484 399.236,866.329 399.796,911.559 400.355,904.228 400.914,913.006 401.473,924.259 402.033,903.58 402.592,929.532 403.151,925.084 403.71,920.16 404.27,912.329 404.829,908.202 405.388,901.306 405.947,881.916 406.507,894.177 407.066,886.996 407.625,861.64 408.184,824.427 408.744,837.136 409.303,829.763 409.862,856.907 410.421,867.873 410.981,848.435 411.54,860.67 412.099,852.74 412.658,882.888 413.218,827.985 413.777,857.617 414.336,870.899 414.895,833.637 415.455,833.134 416.014,881.821 416.573,813.962 417.132,828.652 417.692,794.836 418.251,743.676 418.81,714.595 419.369,701.452 419.929,703.795 420.488,756.619 421.047,741.755 421.606,740.258 422.166,773.114 422.725,839.598 423.284,822.791 423.843,834.386 424.403,814.64 424.962,814.108 425.521,794.643 426.08,777.04 426.64,727.418 427.199,745.009 427.758,745.671 428.318,794.683 428.877,773.518 429.436,789.741 429.995,773.097 430.555,786.392 431.114,784.977 431.673,802.428 432.232,803.151 432.792,736.714 433.351,756.523 433.91,775.691 434.469,773.995 435.029,742.878 435.588,746.132 436.147,744.79 436.706,762.881 437.266,778.741 437.825,775.106 438.384,792.353 438.943,777.363 439.503,780.62 440.062,778.368 440.621,758.61 441.18,741.029 441.74,770.386 442.299,717.37 442.858,719.009 443.417,752.115 443.977,799.587 444.536,781.228 445.095,813.45 445.654,794.756 446.214,790.167 446.773,801.013 447.332,782.125 447.891,763.778 448.451,763.86 449.01,799.393 449.569,778.776 450.128,796.633 450.688,826.235 451.247,823.349 451.806,822.129 452.365,819.821 452.925,752.115 453.484,751.119 454.043,717.321 454.602,733.892 455.162,717.084 455.721,703.053 456.28,706.303 456.839,693.175 457.399,680.573 457.958,749.072 458.517,733.763 459.076,700.306 459.636,655.437 460.195,659.495 460.754,630.746 461.313,636.98 461.873,643.279 462.432,684.971 462.991,708.05 463.55,708.457 464.11,727.157 464.669,726.194 465.228,728.376 465.787,730.183 466.347,747.52 466.906,764.451 467.465,746.921 468.024,715.029 468.584,716.619 469.143,716.919 469.702,732.118 470.261,730.313 470.821,761.365 471.38,758.273 471.939,758.814 472.498,708.094 473.058,748.012 473.617,778.905 474.176,777.634 474.735,726.116 475.295,747.644 475.854,751.251 476.413,722.937 476.972,752.942 477.532,781.251 478.091,763.203 478.65,763.203 479.209,791.813 479.769,791.241 480.328,787.274 480.887,754.475 481.446,772.785 482.006,768.592 482.565,767.504 483.124,796.124 483.683,807.508 484.243,834.029 484.802,796.58 485.361,791.645 485.92,801.824 486.48,847.185 487.039,828.411 487.598,822.512 488.157,851.777 488.717,862.174 489.276,870.961 489.835,829.997 490.394,857.361 490.954,838.057 491.513,799.443 492.072,826.641 492.631,790.53 493.191,773.38 493.75,787.089 494.309,813.581 494.868,810.3 495.428,835.57 495.987,813.834 496.546,840.935 497.105,833.836 497.665,827.248 498.224,823.055 498.783,834.632 499.342,764.903 499.902,780.282 500.461,779.857 501.02,778.53 501.579,760.041 502.139,760.108 502.698,757.19 503.257,757.459 503.816,755.339 504.376,756.894 504.935,722.519 505.494,724.144 506.053,725.118 506.613,722.761 507.172,755.26 507.731,754.209 508.29,784.148 508.85,811.754 509.409,774.61 509.968,821.416 510.527,817.407 511.087,832.863 511.646,846.243 512.205,856.711 512.764,833.167 513.324,858.761 513.883,851.58 514.442,841.37 515.001,805.133 515.561,801.848 516.12,766.68 516.679,780.475 517.238,793.064 517.798,756.612 518.357,722.969 518.916,689.859 519.475,696.049 520.035,666.627 520.594,634.326 521.153,608.015 521.712,677.895 522.272,636.266 522.831,640.6 523.39,629.618 523.949,618.835 524.509,592.866 525.068,584.459 525.627,573.954 526.186,530.787 526.746,606.319 527.305,595.897 527.864,603.908 528.423,595.66 528.983,570.485 529.542,595.722 530.101,584.259 530.66,575.731 531.22,601.199 531.779,622.813 532.338,628.746 532.897,634.779 533.457,655.256 534.016,641.387 534.575,660.332 535.134,646.103 535.694,636.126 536.253,642.628 536.812,632.927 537.371,653.41 537.931,624.936 538.49,630.487 539.049,666.789 539.608,669.989 540.168,685.56 540.727,704.308 541.286,690.489 541.845,692.715 542.405,680.878 542.964,700.335 543.523,667.405 544.082,704.885 544.642,720.498 545.201,720.201 545.76,718.846 546.319,686.701 546.879,703.66 547.438,687.799 547.997,687.173 548.556,673.739 549.116,677.355 549.675,683.037 550.234,685.374 550.793,661.649 551.353,653.221 551.912,642.016 552.471,646.067 553.031,633.71 553.59,654.641 554.149,679.016 554.708,686.753 555.268,656.586 555.827,676.671 556.386,665.38 556.945,654.32 557.505,657.718 558.064,645.121 558.623,667.915 559.182,722.13 559.742,720.255 560.301,767.291 560.86,781.8 561.419,793.774 561.979,808.343 562.538,802.995 563.097,829.097 563.656,806.579 564.216,817.898 564.775,828.452 565.334,809.737 565.893,790.769 566.453,804.899 567.012,817.605 567.571,796.454 568.13,775.064 568.69,753.965 569.249,754.958 569.808,767.048 570.367,732.725 570.927,715.064 571.486,746.314 572.045,778.664 572.604,776.238 573.164,741.693 573.723,739.643 574.282,754.979 574.841,753.374 575.401,731.334 575.96,746.365 576.519,728.051 577.078,708.971 577.638,724.652 578.197,741.248 578.756,744.372 579.315,806.822 579.875,802.648 580.434,750.906 580.993,782.755 581.552,813.366 582.112,808.977 582.671,801.576 583.23,778.734 583.789,793.349 584.349,821.088 584.908,813.526 585.467,824.38 586.026,769.707 586.586,767.198 587.145,749.36 587.704,732.032 588.263,716.194 588.823,699.77 589.382,681.522 589.941,651.058 590.5,651.696 591.06,636.553 591.619,624.373 592.178,645.92 592.737,614.339 593.297,632.727 593.856,635.814 594.415,640.949 594.974,658.362 595.534,643.524 596.093,629.903 596.652,637.06 597.211,642.683 597.771,660.006 598.33,626.739 598.889,633.535 599.448,639.162 600.008,642.57 600.567,662.179 601.126,697.949 601.685,717.01 602.245,732.628 602.804,764.035 603.363,759.33 603.922,742.153 604.482,724.157 605.041,706.174 605.6,706.743 606.159,707.052 606.719,724.313 607.278,757.582 607.837,751.949 608.396,715.684 608.956,696.262 609.515,697.052 610.074,665.13 610.633,650.736 611.193,654.098 611.752,623.189 612.311,641.894 612.87,647.485 613.43,654.901 613.989,658.493 614.548,677.913 615.107,679.646 615.667,649.756 616.226,669.363 616.785,672.662 617.344,676.496 617.904,713.747 618.463,711.364 619.022,726.528 619.581,721.962 620.141,734.465 620.7,719.172 621.259,702.733 621.818,656.028 622.378,644.805 622.937,662.005 623.496,695.528 624.055,694.141 624.615,693.116 625.174,709.685 625.733,711.758 626.292,759.599 626.852,724.839 627.411,706.591 627.97,727.526 628.529,711.834 629.089,677.081 629.648,695.665 630.207,712.238 630.766,744.361 631.326,743.595 631.885,743.66 632.444,695.022 633.003,712.956 633.563,727.496 634.122,696.412 634.681,712.567 635.24,729.777 635.8,746.171 636.359,794.327 636.918,775.217 637.477,757.618 638.037,738.611 638.596,737.564 639.155,733.413 639.714,716.463 640.274,732.849 640.833,730.8 641.392,729.334 641.951,728.32 642.511,725.961 643.07,730.124 643.629,728.121 644.188,707.413 644.748,737.559 645.307,768.511 645.866,762.718 646.425,762.119 646.985,789.599 647.544,752.513 648.103,779.581 648.662,725.922 649.222,754.1 649.781,762.027 650.34,808.303 650.899,783.518 651.459,810.819 652.018,802.348 652.577,793.665 653.136,790.685 653.696,772.15 654.255,770.002 654.814,782.487 655.373,731.182 655.933,730.854 656.492,710.82 657.051,677.79 657.61,694.731 658.17,739.22 658.729,721.714 659.288,720.736 659.847,719.304 660.407,733.699 660.966,712.489 661.525,728.546 662.084,712.044 662.644,699.95 663.203,700.083 663.762,698.913 664.321,699.794 664.881,699.264 665.44,717.171 665.999,733.558 666.558,735.911 667.118,720.366 667.677,701.572 668.236,688.619 668.795,672.727 669.355,673.635 669.914,656.101 670.473,659.185 671.032,694.635 671.592,694.931 672.151,678.756 672.71,662.734 673.269,666.126 673.829,705.306 674.388,719.829 674.947,720.072 675.506,732.865 676.066,718.857 676.625,737.664 677.184,700.495 677.743,667.95 678.303,635.968 678.862,605.992 679.421,627.4 679.981,633.925 680.54,621.734 681.099,626.673 681.658,646.12 682.218,649.379 682.777,652.854 683.336,658.086 683.895,660.936 684.455,714.665 685.014,679.194 685.573,679.263 686.132,679.641 686.692,678.11 687.251,660.658 687.81,662.924 688.369,682.802 688.929,684.012 689.488,714.834 690.047,664.784 690.606,672.081 691.166,656.587 691.725,663.586 692.284,662.644 692.843,679.412 693.403,666.546 693.962,667.134 694.521,672.096 695.08,656.673 695.64,676.542 696.199,676.83 696.758,679.255 697.317,647.032 697.877,649.788 698.436,669.886 698.995,706.979 699.554,754.667 700.114,735.118 700.673,750.3 701.232,748.146 701.791,732.609 702.351,761.12 702.91,775.924 703.469,772.328 704.028,784.819 704.588,763.689 705.147,775.785 705.706,738.618 706.265,752.458 706.825,841.021 707.384,845.689 707.943,821.28 708.502,812.968 709.062,792.273 709.621,738.559 710.18,737.432 710.739,703.846 711.299,697.223 711.858,696.475 712.417,696.211 712.976,634.324 713.536,637.561 714.095,638.85 714.654,626.08 715.213,628.799 715.773,638.561 716.332,641.106 716.891,630.257 717.45,634.431 718.01,653.4 718.569,691.381 719.128,690.687 719.687,692.194 720.247,703.739 720.806,701.062 721.365,695.979 721.924,683.751 722.484,684.143 723.043,735.144 723.602,720.859 724.161,702.846 724.721,704.143 725.28,736.211 725.839,717.794 726.398,734.184 726.958,765.932 727.517,792.381 728.076,769.464 728.635,747.248 729.195,732.259 729.754,717.551 730.313,715.761 730.872,715.775 731.432,729.69 731.991,709.618 732.55,706.498 733.109,690.42 733.669,690.63 734.228,720.742 734.787,705.183 735.346,706.471 735.906,709.883 736.465,694.449 737.024,706.936 737.583,690.72 738.143,707.165 738.702,690.463 739.261,707.938 739.82,692.288 740.38,692.093 740.939,708.993 741.498,724.692 742.057,738.108 742.617,735.685 743.176,780.929 743.735,777.292 744.294,770.985 744.854,766.824 745.413,730.443 745.972,710.181 746.531,692.722 747.091,659.111 747.65,662.749 748.209,659.937 748.768,646.866 749.328,665.364 749.887,637.054 750.446,638.276 751.005,639.14 751.565,708.944 752.124,706.666 752.683,708.067 753.242,695.428 753.802,711.318 754.361,706.142 754.92,688.309 755.479,703.468 756.039,703.305 756.598,701.068 757.157,734.155 757.716,764.215 758.276,756.869 758.835,725.776 759.394,707.865 759.953,689.02 760.513,703.358 761.072,717.211 761.631,731.979 762.19,696.731 762.75,713.405 763.309,714.104 763.868,714.086 764.427,724.701 764.987,724.212 765.546,737.461 766.105,714.776 766.664,710.048 767.224,712.241 767.783,694.561 768.342,693.139 768.901,693.741 769.461,694.816 770.02,689.557 770.579,689.317 771.138,674.201 771.698,673.453 772.257,690.221 772.816,676.929 773.375,675.721 773.935,627.441 774.494,646.677 775.053,631.849 775.612,634.933 776.172,669.296 776.731,651.749 777.29,670.494 777.849,672.91 778.409,676.523 778.968,726.157 779.527,722.384 780.086,658.712 780.646,642.634 781.205,678.421 781.764,714.054 782.323,712.015 782.883,691.771 783.442,692.222 784.001,710.766 784.56,726.003 785.12,741.947 785.679,756.361 786.238,754.396 786.797,701.692 787.357,720.543 787.916,717.656 788.475,731.372 789.034,732.386 789.594,699.036 790.153,699.519 790.712,699.057 791.271,666.889 791.831,667.363 792.39,685.424 792.949,718.832 793.508,703.696 794.068,737.192 794.627,735.799 795.186,748.493 795.745,700.308 796.305,681.404 796.864,629.416 797.423,650.148 797.982,632.767 798.542,620.336 799.101,659.128 799.66,657.942 800.219,656.086 800.779,656.405 801.338,688.952 801.897,704.938 802.456,719.505 803.016,718.844 803.575,728.148 804.134,725.02 804.693,721.454 805.253,749.706 805.812,763.1 806.371,771.612 806.931,784.972 807.49,796.197 808.049,821.101 808.608,784.572 809.168,763.547 809.727,761.203 810.286,722.608 810.845,722.226 811.405,722.354 811.964,687.224 812.523,687.832 813.082,733.913 813.642,717.928 814.201,715.079 814.76,711.4 815.319,676.306 815.879,706.241 816.438,687.335 816.997,688.015 817.556,638.601 818.116,626.855 818.675,612.769 819.234,614.612 819.793,647.119 820.353,648.978 820.912,632.641 821.471,633.984 822.03,656.322 822.59,658.415 823.149,642.47 823.708,663.696 824.267,697.99 824.827,713.893 825.386,713.261 825.945,727.53 826.504,740.758 827.064,751.426 827.623,731.834 828.182,678.501 828.741,713.034 829.301,744.889 829.86,738.636 830.419,737.2 830.978,717.499 831.538,747.477 832.097,709.98 832.656,676.301 833.215,693.115 833.775,694.268 834.334,661.924 834.893,694.57 835.452,628.318 836.012,600.423 836.571,624.387 837.13,646.661 837.689,667.525 838.249,652.743 838.808,655.066 839.367,640.437 839.926,630.144 840.486,620.899 841.045,626.261 841.604,631.052 842.163,633.588 842.723,669.945 843.282,670.636 843.841,639.51 844.4,641.281 844.96,628.255 845.519,635.405 846.078,655.69 846.637,670.576 847.197,739.192 847.756,737.87 848.315,702.379 848.874,706.175 849.434,724.754 849.993,738.954 850.552,689.53 851.111,690.641 851.671,691.97 852.23,692.923 852.789,677.7 853.348,693.172 853.908,678.416 854.467,647.265 855.026,678.898 855.585,696.022 856.145,664.552 856.704,654.033 857.263,657.736 857.822,660.566 858.382,694.201 858.941,725.656 859.5,722.139 860.059,719.86 860.619,718.374 861.178,717.475 861.737,698.219 862.296,728.081 862.856,706.622 863.415,718.639 863.974,698.723 864.533,699.046 865.093,712.213 865.652,697.349 866.211,680.087 866.77,693.694 867.33,711.904 867.889,711.586 868.448,712.314 869.007,694.581 869.567,690.532 870.126,719.72 870.685,702.814 871.244,702.823 871.804,682.534 872.363,682.636 872.922,712.298 873.481,725.543 874.041,709.282 874.6,687.645 875.159,670.108 875.718,655.796 876.278,657.635 876.837,641.68 877.396,646.573 877.955,668.787 878.515,674.003 879.074,688.936 879.633,704.804 880.192,721.183 880.752,686.108 881.311,636.836 881.87,656.864 882.429,658.036 882.989,661.819 883.548,713.578 884.107,678.791 884.666,709.214 885.226,689.251 885.785,705.955 886.344,701.285 886.903,683.418 887.463,666.256 888.022,665.973 888.581,638.292 889.14,641.142 889.7,611.067 890.259,615.396 890.818,638.347 891.377,626.469 891.937,610.36 892.496,603.782 893.055,592.684 893.614,611.731 894.174,598.122 894.733,586.742 895.292,604.837 895.851,611.693 896.411,600.622 896.97,618.776 897.529,635.533 898.088,645.613 898.648,665.578 899.207,667.589 899.766,640.52 900.325,612.786 900.885,635.637 901.444,652.881 902.003,670.725 902.562,671.925 903.122,657.762 903.681,673.546 904.24,674.819 904.799,660.464 905.359,660.783 905.918,675.331 906.477,639.609 907.036,609.689 907.596,580.861 908.155,586.21 908.714,625.316 909.273,628.568 909.833,631.297 910.392,649.336 910.951,638.337 911.51,625.694 912.07,615.884 912.629,617.256 913.188,651.665 913.747,658.734 914.307,658.918 914.866,690.679 915.425,656.808 915.984,660.24 916.544,629.64 917.103,668.524 917.662,687.831 918.221,740.57 918.781,705.385 919.34,704.828 919.899,722.374 920.458,718.495 921.018,715.04 921.577,715.909 922.136,701.23 922.695,686.265 923.255,686.005 923.814,701.541 924.373,698.648 924.932,715.099 925.492,748.248 926.051,761.712 926.61,760.766 927.169,772.838 927.729,771.864 928.288,798.333 928.847,760.837 929.406,743.499 929.966,772.15 930.525,817.828 931.084,761.44 931.644,720.591 932.203,719.297 932.762,701.918 933.321,706.438 933.881,686.893 934.44,686.478 934.999,674.111 935.558,660.904 936.118,645.785 936.677,644.411 937.236,632.759 937.795,651.1 938.355,666.626 938.914,703.001 939.473,688.644 940.032,735.292 940.592,715.858 941.151,729.682 941.71,758.891 942.269,768.881 942.829,763.208 943.388,726.975 943.947,737.42 944.506,721.011 945.066,692.744 945.625,676.327 946.184,709.338 946.743,705.423 947.303,705.591 947.862,675.203 948.421,694.623 948.98,725.511 949.54,703.285 950.099,685.872 950.658,702.34 951.217,686.057 951.777,686.628 952.336,670.212 952.895,666.929 953.454,701.391 954.014,714.923 954.573,665.365 955.132,686.235 955.691,685.176 956.251,705.749 956.81,704.568 957.369,707.732 957.928,716.999 958.488,760.265 959.047,743.76 959.606,739.065 960.165,756.731 960.725,732.667 961.284,713.553 961.843,709.232 962.402,706.979 962.962,706.753 963.521,702.548 964.08,685.771 964.639,720.414 965.199,672.793 965.758,708.885 966.317,661.059 966.876,678.489 967.436,693.321 967.995,723.711 968.554,736.608 969.113,732.129 969.673,763.316 970.232,756.651 970.791,702.973 971.35,672.083 971.91,640.995 972.469,644.292 973.028,646.344 973.587,663.809 974.147,667.191 974.706,698.152 975.265,694.135 975.824,708.474 976.384,723.742 976.943,719.011 977.502,753.6 978.061,724.503 978.621,695.769 979.18,695.923 979.739,694.103 980.298,724.702 980.858,736.05 981.417,713.729 981.976,729.456 982.535,742.644 983.095,771.37 983.654,766.178 984.213,762.368 984.772,756.073 985.332,716.816 985.891,698.276 986.45,709.027 987.009,707.58 987.569,722.106 988.128,714.377 988.687,717.712 989.246,700.666 989.806,683.991 990.365,700.646 990.924,718.3 991.483,729.648 992.043,711.207 992.602,695.551 993.161,679.649 993.72,646.906 994.28,630.877 994.839,631.777 995.398,669.599 995.957,673.314 996.517,723.489 997.076,720.569 997.635,719.844 998.194,687.699 998.754,668.225 999.313,619.205 999.872,623.781 1000.43,642.502 1000.99,625.73 1001.55,662.999 1002.11,664.494 1002.67,649.663 1003.23,652.023 1003.79,653.515 1004.35,635.289 1004.91,652.469 1005.46,638.607 1006.02,640.117 1006.58,643.326 1007.14,646.846 1007.7,664.094 1008.26,650.731 1008.82,668.218 1009.38,699.149 1009.94,700.282 1010.5,718.056 1011.06,721.393 1011.62,720.815 1012.18,718.791 1012.73,715.206 1013.29,729.556 1013.85,744.599 1014.41,740.573 1014.97,722.451 1015.53,690.008 1016.09,688.231 1016.65,702.792 1017.21,751.676 1017.77,777.899 1018.33,726.316 1018.89,740.209 1019.45,721.818 1020.01,718.437 1020.56,698.603 1021.12,679.399 1021.68,649.32 1022.24,619.148 1022.8,576.364 1023.36,582.324 1023.92,590.774 1024.48,597.419 1025.04,620.43 1025.6,608.479 1026.16,627.178 1026.72,610.298 1027.28,616.87 1027.83,604.588 1028.39,577.473 1028.95,581.724 1029.51,587.944 1030.07,593.556 1030.63,611.948 1031.19,615.938 1031.75,617.97 1032.31,573.648 1032.87,595.959 1033.43,601.059 1033.99,590.926 1034.55,627.239 1035.1,626.673 1035.66,632.012 1036.22,651.77 1036.78,669.787 1037.34,672.953 1037.9,704.302 1038.46,701.962 1039.02,701.261 1039.58,699.434 1040.14,696.906 1040.7,697.547 1041.26,681.445 1041.82,681.524 1042.38,650.734 1042.93,685.237 1043.49,697.65 1044.05,693.026 1044.61,692.835 1045.17,692.403 1045.73,723.375 1046.29,752.77 1046.85,716.604 1047.41,681.232 1047.97,647.745 1048.53,679.642 1049.09,679.21 1049.65,695.382 1050.2,725.894 1050.76,721.241 1051.32,751.546 1051.88,748.117 1052.44,760.747 1053,757.29 1053.56,739.042 1054.12,704.832 1054.68,672.986 1055.24,685.677 1055.8,699.836 1056.36,715.014 1056.92,730.657 1057.48,699.19 1058.03,730.195 1058.59,728.87 1059.15,726.162 1059.71,703.875 1060.27,721.842 1060.83,719.4 1061.39,733.709 1061.95,715.61 1062.51,714.733 1063.07,713.507 1063.63,726.342 1064.19,755.074 1064.75,737.226 1065.3,697.824 1065.86,667.217 1066.42,685.55 1066.98,686.732 1067.54,685.82 1068.1,701.949 1068.66,702.605 1069.22,690.276 1069.78,739.12 1070.34,752.524 1070.9,717.187 1071.46,719.005 1072.02,734.204 1072.57,699.892 1073.13,693.35 1073.69,741.768 1074.25,733.567 1074.81,715.924 1075.37,713.882 1075.93,716.135 1076.49,662.585 1077.05,632.787 1077.61,622.144 1078.17,638.332 1078.73,622.758 1079.29,627.77 1079.85,631.025 1080.4,665.019 1080.96,684.561 1081.52,682.861 1082.08,686.608 1082.64,668.044 1083.2,687.031 1083.76,672.137 1084.32,657.193 1084.88,643.429 1085.44,632.654 1086,603.41 1086.56,609.898 1087.12,583.633 1087.67,622.521 1088.23,626.932 1088.79,647.558 1089.35,683.607 1089.91,701.458 1090.47,715.07 1091.03,712.327 1091.59,679.785 1092.15,648.111 1092.71,632.382 1093.27,603.688 1093.83,623.302 1094.39,643.112 1094.94,659.323 1095.5,694.343 1096.06,695.235 1096.62,663.868 1097.18,679.439 1097.74,632.102 1098.3,617.698 1098.86,608.15 1099.42,613.687 1099.98,618.87 1100.54,592.452 1101.1,582.16 1101.66,618.575 1102.22,624.889 1102.77,640.791 1103.33,674.805 1103.89,644.34 1104.45,646.045 1105.01,667.421 1105.57,701.178 1106.13,683.781 1106.69,717.697 1107.25,731.97 1107.81,697.399 1108.37,714.74 1108.93,743.079 1109.49,742.803 1110.04,767.322 1110.6,808.896 1111.16,771.314 1111.72,748.728 1112.28,747.063 1112.84,773.543 1113.4,786.596 1113.96,764.32 1114.52,777.044 1115.08,756.311 1115.64,752.101 1116.2,747.452 1116.76,713.562 1117.31,713.638 1117.87,713.439 1118.43,727.798 1118.99,742.411 1119.55,739.43 1120.11,734.316 1120.67,731.258 1121.23,745.724 1121.79,758.07 1122.35,753.687 1122.91,779.503 1123.47,759.327 1124.03,736.541 1124.59,748.319 1125.14,744.813 1125.7,756.109 1126.26,753.946 1126.82,718.499 1127.38,719.614 1127.94,702.757 1128.5,686.621 1129.06,688.134 1129.62,657.453 1130.18,658.083 1130.74,675.433 1131.3,661.4 1131.86,663.518 1132.41,665.231 1132.97,685.665 1133.53,705.739 1134.09,692.869 1134.65,743.311 1135.21,723.655 1135.77,721.277 1136.33,703.013 1136.89,703.196 1137.45,703.021 1138.01,688.378 1138.57,690.452 1139.13,675.695 1139.68,678.039 1140.24,724.797 1140.8,717.928 1141.36,701.93 1141.92,698 1142.48,713.252 1143.04,646.158 1143.6,597.926 1144.16,584.159 1144.72,623.272 1145.28,609.085 1145.84,630.76 1146.4,619.19 1146.96,640.06 1147.51,640.695 1148.07,662.187 1148.63,691.782 1149.19,692.703 1149.75,691.737 1150.31,676.292 1150.87,692.732 1151.43,709.508 1151.99,674.433 1152.55,694.055 1153.11,695.759 1153.67,712.536 1154.23,730.711 1154.78,714.122 1155.34,698.508 1155.9,681.067 1156.46,696.291 1157.02,696.798 1157.58,774.987 1158.14,754.3 1158.7,732.364 1159.26,717.002 1159.82,686.653 1160.38,653.468 1160.94,657.387 1161.5,659.276 1162.05,647.374 1162.61,651.615 1163.17,636.689 1163.73,639.45 1164.29,693.06 1164.85,676.405 1165.41,711.042 1165.97,711.006 1166.53,711.629 1167.09,708.048 1167.65,693.56 1168.21,679.291 1168.77,675.851 1169.33,676.3 1169.88,691.34 1170.44,673.07 1171,691.089 1171.56,677.053 1172.12,660.757 1172.68,649.943 1173.24,635.576 1173.8,654.14 1174.36,621.92 1174.92,593.742 1175.48,596.867 1176.04,585.826 1176.6,594.069 1177.15,612.991 1177.71,615.229 1178.27,605.481 1178.83,579.967 1179.39,567.271 1179.95,606.729 1180.51,609.943 1181.07,628.858 1181.63,662.632 1182.19,662.067 1182.75,650.589 1183.31,654.076 1183.87,672.034 1184.43,691.477 1184.98,711.517 1185.54,724.609 1186.1,723.812 1186.66,722.723 1187.22,689.236 1187.78,689.408 1188.34,703.25 1188.9,715.587 1189.46,683.205 1190.02,733.031 1190.58,729.092 1191.14,726.469 1191.7,708.276 1192.25,705.162 1192.81,701.812 1193.37,686.538 1193.93,686.517 1194.49,655.054 1195.05,656.871 1195.61,656.984 1196.17,642.524 1196.73,630.055 1197.29,681.843 1197.85,694.105 1198.41,743.855 1198.97,742.909 1199.52,738.399 1200.08,734.366 1200.64,718.574 1201.2,731.265 1201.76,727.511 1202.32,708.876 1202.88,738.665 1203.44,722.323 1204,749.907 1204.56,741.254 1205.12,755.72 1205.68,765.056 1206.24,775.262 1206.8,788.196 1207.35,781.13 1207.91,780.153 1208.47,775.473 1209.03,720.946 1209.59,734.878 1210.15,700.137 1210.71,700.744 1211.27,712.381 1211.83,711.043 1212.39,721.901 1212.95,686.083 1213.51,686.668 1214.07,690.867 1214.62,708.834 1215.18,707.328 1215.74,658.678 1216.3,641.626 1216.86,626.686 1217.42,612.82 1217.98,601.365 1218.54,589.496 1219.1,610.457 1219.66,662.883 1220.22,667.143 1220.78,698.996 1221.34,685.112 1221.89,702.122 1222.45,730.838 1223.01,758.361 1223.57,724.376 1224.13,707.202 1224.69,674.109 1225.25,656.396 1225.81,629.857 1226.37,616.308 1226.93,621.973 1227.49,638.555 1228.05,625.618 1228.61,613.48 1229.17,580.857 1229.72,604.11 1230.28,623.664 1230.84,626.551 1231.4,613.997 1231.96,631.673 1232.52,636.024 1233.08,641.09 1233.64,643.639 1234.2,646.477 1234.76,635.33 1235.32,672.991 1235.88,702.304 1236.44,718.135 1236.99,699.132 1237.55,696.451 1238.11,698.435 1238.67,714.1 1239.23,676.957 1239.79,662.411 1240.35,616.437 1240.91,635.706 1241.47,641.424 1242.03,644.61 1242.59,648.73 1243.15,650 1243.71,682.611 1244.26,697.981 1244.82,728.218 1245.38,741.49 1245.94,758.74 1246.5,774.698 1247.06,788.237 1247.62,783.244 1248.18,778.255 1248.74,789.141 1249.3,797.064 1249.86,809.152 1250.42,799.37 1250.98,828.121 1251.54,837.703 1252.09,797.31 1252.65,712.061 1253.21,744.133 1253.77,787.304 1254.33,748.84 1254.89,711.908 1255.45,727.518 1256.01,738.409 1256.57,736.977 1257.13,735.906 1257.69,751.164 1258.25,750.618 1258.81,698.165 1259.36,681.981 1259.92,684.019 1260.48,681.565 1261.04,701.893 1261.6,720.05 1262.16,703.897 1262.72,734.461 1263.28,701 1263.84,711.397 1264.4,712.687 1264.96,695.52 1265.52,726.095 1266.08,737.308 1266.63,736.583 1267.19,749.178 1267.75,794.93 1268.31,802.629 1268.87,811.66 1269.43,803.129 1269.99,762.325 1270.55,774.232 1271.11,773.999 1271.67,752.146 1272.23,748.162 1272.79,712.209 1273.35,676.823 1273.91,644.359 1274.46,597.157 1275.02,619.325 1275.58,591.511 1276.14,578.337 1276.7,617.232 1277.26,621.375 1277.82,655.252 1278.38,672.98 1278.94,640.304 1279.5,660.614 1280.06,665.331 1280.62,665.925 1281.18,650.742 1281.73,632.554 1282.29,655.92 1282.85,670.736 1283.41,672.444 1283.97,639.444 1284.53,642.337 1285.09,656.719 1285.65,640.716 1286.21,639.838 1286.77,627.51 1287.33,613.878 1287.89,668.568 1288.45,669.026 1289,700.898 1289.56,731.033 1290.12,727.748 1290.68,726.354 1291.24,724.689 1291.8,763.216 1292.36,756.399 1292.92,734.794 1293.48,764.993 1294.04,727.891 1294.6,692.602 1295.16,690.305 1295.72,702.094 1296.28,669.344 1296.83,687.224 1297.39,689.032 1297.95,688.181 1298.51,687.12 1299.07,685.398 1299.63,669.172 1300.19,654.455 1300.75,674.795 1301.31,672.157 1301.87,640.259 1302.43,623.368 1302.99,615.026 1303.55,652.216 1304.1,634.613 1304.66,654.121 1305.22,672.716 1305.78,703.073 1306.34,702.111 1306.9,699.018 1307.46,695.137 1308.02,693.818 1308.58,693.926 1309.14,676.876 1309.7,676.082 1310.26,690.145 1310.82,673.11 1311.38,677.755 1311.93,680.286 1312.49,648.06 1313.05,665.652 1313.61,668.398 1314.17,669.753 1314.73,640.158 1315.29,643.979 1315.85,628.134 1316.41,633.633 1316.97,653.425 1317.53,587.307 1318.09,594.259 1318.65,642.074 1319.2,647.223 1319.76,617.103 1320.32,621.419 1320.88,642.112 1321.44,597.603 1322,634.468 1322.56,625.857 1323.12,628.358 1323.68,629.779 1324.24,615.656 1324.8,651.916 1325.36,669.811 1325.92,638.518 1326.47,656.464 1327.03,657.554 1327.59,660.052 1328.15,693.164 1328.71,690.8 1329.27,724.155 1329.83,723.961 1330.39,726.75 1330.95,742.495 1331.51,757.168 1332.07,769.807 1332.63,765.33 1333.19,759.245 1333.75,739.031 1334.3,753.744 1334.86,734.476 1335.42,734.706 1335.98,732.484 1336.54,747.307 1337.1,731.171 1337.66,711.877 1338.22,710.702 1338.78,679.816 1339.34,660.816 1339.9,661.17 1340.46,678.211 1341.02,648.501 1341.57,602.732 1342.13,588.421 1342.69,592.577 1343.25,565.998 1343.81,592.6 1344.37,598.207 1344.93,616.788 1345.49,603.839 1346.05,622.82 1346.61,642.477 1347.17,611.336 1347.73,562.654 1348.29,551.605 1348.84,576.736 1349.4,599.104 1349.96,606.681 1350.52,612.497 1351.08,597.9 1351.64,617.276 1352.2,620.294 1352.76,655.289 1353.32,671.726 1353.88,675.463 1354.44,662.95 1355,677.717 1355.56,662.903 1356.12,679.488 1356.67,694.227 1357.23,674.043 1357.79,642.014 1358.35,643.064 1358.91,628.442 1359.47,629.227 1360.03,631.65 1360.59,635.383 1361.15,652.344 1361.71,623.55 1362.27,607.229 1362.83,674.37 1363.39,675.568 1363.94,678.326 1364.5,695.21 1365.06,695.108 1365.62,680.775 1366.18,685.753 1366.74,683.813 1367.3,699.567 1367.86,652.225 1368.42,636.648 1368.98,619.164 1369.54,672.053 1370.1,703.506 1370.66,690.084 1371.21,725.083 1371.77,722.753 1372.33,718.43 1372.89,700.276 1373.45,728.959 1374.01,740.124 1374.57,720.047 1375.13,701.085 1375.69,701.766 1376.25,716.482 1376.81,747.539 1377.37,742.42 1377.93,736.739 1378.49,750.742 1379.04,782.31 1379.6,793.211 1380.16,801.63 1380.72,781.333 1381.28,795.505 1381.84,789.969 1382.4,803.863 1382.96,832.618 1383.52,807.274 1384.08,791.192 1384.64,788.974 1385.2,780.664 1385.76,790.587 1386.31,769.598 1386.87,763.585 1387.43,759.6 1387.99,737.902 1388.55,738.384 1389.11,716.031 1389.67,714.82 1390.23,710.452 1390.79,687.298 1391.35,701.315 1391.91,703.267 1392.47,714.062 1393.03,696.582 1393.58,708.698 1394.14,711.366 1394.7,728.558 1395.26,760.477 1395.82,757.171 1396.38,770.001 1396.94,747.132 1397.5,759.162 1398.06,753.211 1398.62,767.611 1399.18,766.615 1399.74,741.855 1400.3,723.49 1400.86,721.036 1401.41,771.419 1401.97,749.9 1402.53,714.4 1403.09,728.408 1403.65,724.41 1404.21,706.052 1404.77,721.898 1405.33,701.227 1405.89,681.872 1406.45,681.042 1407.01,686.114 1407.57,665.936 1408.13,683.474 1408.68,696.444 1409.24,710.049 1409.8,741.384 1410.36,752.115 1410.92,748.851 1411.48,778.547 1412.04,773.249 1412.6,768.392 1413.16,777.579 1413.72,820.526 1414.28,831.635 1414.84,791.354 1415.4,801.628 1415.95,762.463 1416.51,740.701 1417.07,753.666 1417.63,746.244 1418.19,741.891 1418.75,705.029 1419.31,688.003 1419.87,677.384 1420.43,648.065 1420.99,652.433 1421.55,672.023 1422.11,704.854 1422.67,656.835 1423.23,661.828 1423.78,647.492 1424.34,635.805 1424.9,653.211 1425.46,668.308 1426.02,653.992 1426.58,655.198 1427.14,641.685 1427.7,647.367 1428.26,661.686 1428.82,646.355 1429.38,629.124 1429.94,629.441 1430.5,615.405 1431.05,639.503 1431.61,641.738 1432.17,676.166 1432.73,626.724 1433.29,629.017 1433.85,649.481 1434.41,664.031 1434.97,648.436 1435.53,649.395 1436.09,665.903 1436.65,667.425 1437.21,651.364 1437.77,666.784 1438.33,681.933 1438.88,699.601 1439.44,685.528 1440,683.452 1440.56,652.193 1441.12,671.483 1441.68,656.445 1442.24,656.529 1442.8,671.813 1443.36,625.743 1443.92,597.241 1444.48,586.374 1445.04,591.23 1445.6,597.893 1446.15,587.059 1446.71,541.787 1447.27,579.162 1447.83,587.576 1448.39,593.918 1448.95,609.183 1449.51,612.576 1450.07,633.885 1450.63,623.256 1451.19,608.531 1451.75,644.705 1452.31,680.442 1452.87,648.912 1453.42,654.963 1453.98,640.649 1454.54,659.609 1455.1,627.835 1455.66,644.32 1456.22,664.12 1456.78,681.494 1457.34,645.846 1457.9,648.569 1458.46,602.964 1459.02,607.756 1459.58,593.891 1460.14,599.854 1460.7,635.625 1461.25,622.734 1461.81,606.301 1462.37,642.184 1462.93,644.036 1463.49,646.793 1464.05,630.11 1464.61,635.377 1465.17,622.788 1465.73,628.437 1466.29,628.645 1466.85,613.961 1467.41,618.78 1467.97,601.469 1468.52,620.308 1469.08,623.825 1469.64,625.965 1470.2,645.042 1470.76,700.285 1471.32,715.465 1471.88,732.103 1472.44,729.006 1473,761.633 1473.56,770.735 1474.12,748.991 1474.68,731.304 1475.24,747.705 1475.79,762.133 1476.35,805.519 1476.91,782.762 1477.47,792.455 1478.03,783.282 1478.59,841.687 1479.15,815.745 1479.71,808.67 1480.27,806.237 1480.83,817.031 1481.39,808.632 1481.95,817.052 1482.51,809.307 1483.07,818.133 1483.62,825.07 1484.18,816.745 1484.74,760.75 1485.3,753.247 1485.86,734.276 1486.42,732.228 1486.98,745.136 1487.54,724.339 1488.1,674.811 1488.66,660.633 1489.22,682.205 1489.78,664.763 1490.34,647.752 1490.89,647.327 1491.45,681.465 1492.01,667.865 1492.57,618.47 1493.13,619.044 1493.69,625.16 1494.25,613.998 1494.81,587.452 1495.37,592.98 1495.93,598.836 1496.49,619.156 1497.05,590.567 1497.61,598.492 1498.16,604.226 1498.72,591.487 1499.28,598.241 1499.84,618.187 1500.4,653.178 1500.96,671.513 1501.52,703.268 1502.08,684.734 1502.64,686.55 1503.2,721.517 1503.76,748.518 1504.32,746.841 1504.88,717.194 1505.44,719.267 1505.99,718.923 1506.55,720.2 1507.11,719.085 1507.67,701.924 1508.23,712.969 1508.79,696.347 1509.35,682.164 1509.91,678.326 1510.47,712.169 1511.03,712.436 1511.59,712.351 1512.15,744.3 1512.71,739.103 1513.26,686.052 1513.82,706.397 1514.38,704.949 1514.94,737.715 1515.5,720.141 1516.06,765.768 1516.62,681.777 1517.18,729.618 1517.74,712.225 1518.3,726.646 1518.86,705.209 1519.42,687.212 1519.98,684.987 1520.53,656.735 1521.09,664.293 1521.65,630.769 1522.21,648.748 1522.77,649.307 1523.33,653.854 1523.89,639.589 1524.45,658.232 1525.01,659.196 1525.57,679.112 1526.13,661.444 1526.69,646.083 1527.25,660.267 1527.81,630.53 1528.36,617.142 1528.92,659.034 1529.48,692.177 1530.04,725.141 1530.6,756.531 1531.16,732.846 1531.72,728.319 1532.28,696.899 1532.84,712.514 1533.4,730.13 1533.96,747.424 1534.52,741.626 1535.08,737.121 1535.63,732.66 1536.19,711.392 1536.75,708.477 1537.31,706.69 1537.87,701.534 1538.43,730.508 1538.99,710.705 1539.55,711.006 1540.11,722.977 1540.67,738.372 1541.23,735.52 1541.79,745.208 1542.35,720.824 1542.9,769.072 1543.46,730.566 1544.02,695.944 1544.58,678.976 1545.14,697.755 1545.7,665.581 1546.26,648.199 1546.82,614.874 1547.38,616.325 1547.94,619.368 1548.5,626.141 1549.06,627.76 1549.62,600.944 1550.18,626.86 1550.73,656.964 1551.29,675.227 1551.85,678.414 1552.41,684.219 1552.97,684.886 1553.53,685.15 1554.09,702.263 1554.65,685.903 1555.21,684.018 1555.77,668.154 1556.33,666.255 1556.89,649.669 1557.45,634.877 1558,634.896 1558.56,642.754 1559.12,628.831 1559.68,614.088 1560.24,626.983 1560.8,630.816 1561.36,580.502 1561.92,602.306 1562.48,688.424 1563.04,706.971 1563.6,726.039 1564.16,703.215 1564.72,655.034 1565.28,654.348 1565.83,623.326 1566.39,630.785 1566.95,599.591 1567.51,605.811 1568.07,579.059 1568.63,616.664 1569.19,588.756 1569.75,612.366 1570.31,648.877 1570.87,654.667 1571.43,654.966 1571.99,639.775 1572.55,706.241 1573.1,722.659 1573.66,640.955 1574.22,641.649 1574.78,630.3 1575.34,619.227 1575.9,623.401 1576.46,645.151 1577.02,662.196 1577.58,648.618 1578.14,656.19 1578.7,657.698 1579.26,643.286 1579.82,645.176 1580.37,634.925 1580.93,636.814 1581.49,687.561 1582.05,686.072 1582.61,672.343 1583.17,655.689 1583.73,646.921 1584.29,648.694 1584.85,648.247 1585.41,681.942 1585.97,683.198 1586.53,649.681 1587.09,637.076 1587.65,657.464 1588.2,657.547 1588.76,657.675 1589.32,656.831 1589.88,691.247 1590.44,674.385 1591,672.81 1591.56,689.644 1592.12,689.68 1592.68,687.777 1593.24,687.229 1593.8,700.868 1594.36,684.834 1594.92,690.31 1595.47,721.56 1596.03,719.466 1596.59,686.377 1597.15,687.972 1597.71,686.403 1598.27,636.897 1598.83,654.233 1599.39,674.769 1599.95,690.263 1600.51,724.793 1601.07,703.226 1601.63,685.614 1602.19,734.45 1602.74,717.047 1603.3,734.076 1603.86,729.467 1604.42,728.146 1604.98,725.069 1605.54,738.108 1606.1,782.384 1606.66,776.672 1607.22,802.085 1607.78,798.817 1608.34,791.814 1608.9,801.778 1609.46,780.262 1610.02,793.961 1610.57,788.723 1611.13,769.181 1611.69,779.674 1612.25,756.189 1612.81,754.696 1613.37,755.301 1613.93,768.002 1614.49,765.618 1615.05,763.464 1615.61,760.187 1616.17,772.555 1616.73,765.484 1617.29,744.809 1617.84,741.25 1618.4,707.258 1618.96,671.856 1619.52,670.916 1620.08,687.28 1620.64,667.737 1621.2,635.459 1621.76,654.526 1622.32,642.191 1622.88,595.967 1623.44,580.326 1624,603.321 1624.56,591.163 1625.11,631.649 1625.67,633.158 1626.23,623.81 1626.79,624.338 1627.35,677.377 1627.91,660.854 1628.47,681.588 1629.03,697.347 1629.59,694.016 1630.15,673.298 1630.71,705.346 1631.27,720.037 1631.83,731.461 1632.39,729.858 1632.94,713.344 1633.5,726.591 1634.06,724.339 1634.62,719.52 1635.18,683.903 1635.74,699.527 1636.3,651.457 1636.86,620.303 1637.42,620.633 1637.98,636.611 1638.54,637.006 1639.1,642.063 1639.66,658.201 1640.21,661.696 1640.77,679.415 1641.33,690.304 1641.89,689.206 1642.45,673.551 1643.01,705.68 1643.57,752.029 1644.13,796.979 1644.69,757.108 1645.25,751.385 1645.81,733.54 1646.37,725.864 1646.93,690.359 1647.48,735.576 1648.04,747.842 1648.6,744.156 1649.16,739.863 1649.72,686.218 1650.28,686.916 1650.84,685.435 1651.4,665.87 1651.96,620.687 1652.52,642.45 1653.08,677.811 1653.64,663.877 1654.2,649.722 1654.76,669.309 1655.31,653.634 1655.87,639.223 1656.43,660.002 1656.99,645.218 1657.55,599.682 1658.11,601.018 1658.67,590.644 1659.23,630.351 1659.79,619.562 1660.35,641.122 1660.91,642.694 1661.47,644.025 1662.03,617.644 1662.58,624.01 1663.14,610.818 1663.7,597.018 1664.26,604.244 1664.82,624.763 1665.38,661.56 1665.94,663.03 1666.5,660.871 1667.06,695.381 1667.62,659.49 1668.18,691.132 1668.74,705.838 1669.3,752.506 1669.85,732.719 1670.41,699.107 1670.97,710.888 1671.53,694.179 1672.09,694.435 1672.65,673.652 1673.21,694.798 1673.77,692.127 1674.33,694.746 1674.89,738.288 1675.45,764.359 1676.01,730.873 1676.57,666.487 1677.13,652.822 1677.68,656.161 1678.24,611.71 1678.8,616.799 1679.36,588.045 1679.92,592.303 1680.48,597.48 1681.04,618.354 1681.6,605.428 1682.16,589.167 1682.72,628.695 1683.28,612.385 1683.84,618.13 1684.4,621.309 1684.95,575.311 1685.51,583.427 1686.07,589.142 1686.63,595.662 1687.19,618.059 1687.75,622.943 1688.31,623.484 1688.87,612.225 1689.43,615.101 1689.99,606.864 1690.55,629.839 1691.11,652.434 1691.67,656.686 1692.23,662.293 1692.78,662.501 1693.34,648.259 1693.9,669.761 1694.46,690.61 1695.02,724.512 1695.58,709.366 1696.14,705.137 1696.7,706.426 1697.26,723.128 1697.82,706.778 1698.38,708.299 1698.94,691.057 1699.5,692.065 1700.05,677.949 1700.61,658.672 1701.17,642.373 1701.73,642.446 1702.29,678.245 1702.85,678.684 1703.41,676.491 1703.97,645.46 1704.53,650.79 1705.09,633.715 1705.65,650.918 1706.21,607.671 1706.77,645.36 1707.32,645.754 1707.88,649.745 1708.44,652.088 1709,653.242 1709.56,655.328 1710.12,657.261 1710.68,658.557 1711.24,658.553 1711.8,660.029 1712.36,662.239 1712.92,664.33 1713.48,666.918 1714.04,699.257 1714.6,731.309 1715.15,730.813 1715.71,727.427 1716.27,739.896 1716.83,721.617 1717.39,737.768 1717.95,734.856 1718.51,746.688 1719.07,776.767 1719.63,751.631 1720.19,782.177 1720.75,743.829 1721.31,746.084 1721.87,727.374 1722.42,721.935 1722.98,752.811 1723.54,767.323 1724.1,780.476 1724.66,793.171 1725.22,806.608 1725.78,816.979 1726.34,825.654 1726.9,782.807 1727.46,744.251 1728.02,740.524 1728.58,769.219 1729.14,768.184 1729.69,734.179 1730.25,731.676 1730.81,731.977 1731.37,746.407 1731.93,728.239 1732.49,725.111 1733.05,756.367 1733.61,769.874 1734.17,763.992 1734.73,759.02 1735.29,774.318 1735.85,800.968 1736.41,764.308 1736.97,809.5 1737.52,785.256 1738.08,759.731 1738.64,739.442 1739.2,718.423 1739.76,733.368 1740.32,746.927 1740.88,690.636 1741.44,691.441 1742,688.636 1742.56,688.241 1743.12,684.201 1743.68,700.329 1744.24,697.921 1744.79,696.023 1745.35,696.112 1745.91,692.362 1746.47,686.19 1747.03,704.129 1747.59,718.249 1748.15,721.429 1748.71,721.988 1749.27,721.196 1749.83,736.122 1750.39,687.392 1750.95,687.434 1751.51,634.114 1752.06,652.598 1752.62,688.91 1753.18,722.649 1753.74,767.893 1754.3,762.826 1754.86,773.913 1755.42,802.011 1755.98,794.629 1756.54,792.391 1757.1,801.945 1757.66,778.134 1758.22,769.598 1758.78,749.66 1759.34,763.21 1759.89,770.976 1760.45,785.808 1761.01,748.8 1761.57,746.564 1762.13,739.861 1762.69,735.664 1763.25,683.508 1763.81,666.098 1764.37,681.984 1764.93,663.77 1765.49,678.259 1766.05,695.509 1766.61,694.522 1767.16,677.11 1767.72,675.764 1768.28,674.682 1768.84,658.921 1769.4,659.604 1769.96,674.084 1770.52,674.505 1771.08,642.878 1771.64,665.569 1772.2,661.342 1772.76,629.19 1773.32,618.29 1773.88,617.883 1774.43,622.218 1774.99,608.375 1775.55,562.12 1776.11,554.18 1776.67,596.059 1777.23,553.856 1777.79,541.444 1778.35,545.862 1778.91,570.882 1779.47,574.749 1780.03,563.551 1780.59,553.956 1781.15,560.639 1781.71,570.096 1782.26,562.813 1782.82,584.519 1783.38,577.476 1783.94,584.592 1784.5,587.122 1785.06,608.244 1785.62,595.486 1786.18,631.89 1786.74,666.801 1787.3,668.97 1787.86,686.185 1788.42,683.653 1788.98,696.876 1789.53,716.303 1790.09,731.337 1790.65,741.488 1791.21,723.887 1791.77,737.278 1792.33,750.772 1792.89,765.539 1793.45,750.089 1794.01,761.93 1794.57,740.748 1795.13,757.522 1795.69,786.435 1796.25,797.655 1796.8,774.206 1797.36,784.093 1797.92,778.728 1798.48,788.119 1799.04,801.728 1799.6,796.93 1800.16,807.12 1800.72,802.731 1801.28,812.65 1801.84,804.08 1802.4,765.484 1802.96,777.842 1803.52,772.699 1804.08,752.966 1804.63,733.732 1805.19,714.048 1805.75,693.893 1806.31,689.757 1806.87,669.984 1807.43,669.416 1807.99,654.145 1808.55,673.108 1809.11,686.45 1809.67,704.925 1810.23,702.418 1810.79,702.069 1811.35,668.986 1811.9,670.039 1812.46,668.026 1813.02,669.412 1813.58,669.369 1814.14,669.152 1814.7,719.03 1815.26,696.82 1815.82,697.456 1816.38,715.75 1816.94,729.747 1817.5,729.394 1818.06,710.365 1818.62,710.501 1819.18,721.756 1819.73,718.004 1820.29,685.869 1820.85,670.048 1821.41,685.812 1821.97,684.43 1822.53,679.841 1823.09,696.561 1823.65,678.745 1824.21,729.046 1824.77,726.09 1825.33,710.562 1825.89,676.934 1826.45,677.449 1827,711.125 1827.56,705.738 1828.12,673.948 1828.68,673.149 1829.24,673.675 1829.8,689.961 1830.36,672.389 1830.92,641.314 1831.48,641.831 1832.04,677.092 1832.6,646.413 1833.16,634.173 1833.72,633.793 1834.27,602.543 1834.83,588.823 1835.39,595.922 1835.95,600.654 1836.51,586.388 1837.07,652.969 1837.63,682.991 1838.19,649.43 \"/>\n<path clip-path=\"url(#clip203)\" d=\"M720.247 692.501 L720.806 692.501 L721.365 692.501 L721.924 692.501 L722.484 692.501 L723.043 692.501 L723.602 692.501 L724.161 692.501 L724.721 692.501 L725.28 692.501 L725.839 692.501 L726.398 692.501 L726.958 692.501 L727.517 692.501 L728.076 692.501 L728.635 692.501 L729.195 692.501 L729.754 692.501 L730.313 692.501 L730.872 692.501 L731.432 692.501 L731.991 692.501 L732.55 692.501 L733.109 692.501 L733.669 692.501 L734.228 692.501 L734.787 692.501 L735.346 692.501 L735.906 692.501 L736.465 692.501 L737.024 692.501 L737.583 692.501 L738.143 692.501 L738.702 692.501 L739.261 692.501 L739.82 692.501 L740.38 692.501 L740.939 692.501 L741.498 692.501 L742.057 692.501 L742.617 692.501 L743.176 692.501 L743.735 692.501 L744.294 692.501 L744.854 692.501 L745.413 692.501 L745.972 692.501 L746.531 692.501 L747.091 692.501 L747.65 692.501 L748.209 692.501 L748.768 692.501 L749.328 692.501 L749.887 692.501 L750.446 692.501 L751.005 692.501 L751.565 692.501 L752.124 692.501 L752.683 692.501 L753.242 692.501 L753.802 692.501 L754.361 692.501 L754.92 692.501 L755.479 692.501 L756.039 692.501 L756.598 692.501 L757.157 692.501 L757.716 692.501 L758.276 692.501 L758.835 692.501 L759.394 692.501 L759.953 692.501 L760.513 692.501 L761.072 692.501 L761.631 692.501 L762.19 692.501 L762.75 692.501 L763.309 692.501 L763.868 692.501 L764.427 692.501 L764.987 692.501 L765.546 692.501 L766.105 692.501 L766.664 692.501 L767.224 692.501 L767.783 692.501 L768.342 692.501 L768.901 692.501 L769.461 692.501 L770.02 692.501 L770.579 692.501 L771.138 692.501 L771.698 692.501 L772.257 692.501 L772.816 692.501 L773.375 692.501 L773.935 692.501 L774.494 692.501 L775.053 692.501 L775.612 692.501 L776.172 692.501 L776.731 692.501 L777.29 692.501 L777.849 692.501 L778.409 692.501 L778.968 692.501 L779.527 692.501 L780.086 692.501 L780.646 692.501 L781.205 692.501 L781.764 692.501 L782.323 692.501 L782.883 692.501 L783.442 692.501 L784.001 692.501 L784.56 692.501 L785.12 692.501 L785.679 692.501 L786.238 692.501 L786.797 692.501 L787.357 692.501 L787.916 692.501 L788.475 692.501 L789.034 692.501 L789.594 692.501 L790.153 692.501 L790.712 692.501 L791.271 692.501 L791.831 692.501 L792.39 692.501 L792.949 692.501 L793.508 692.501 L794.068 692.501 L794.627 692.501 L795.186 692.501 L795.745 692.501 L796.305 692.501 L796.864 692.501 L797.423 692.501 L797.982 692.501 L798.542 692.501 L799.101 692.501 L799.66 692.501 L800.219 692.501 L800.779 692.501 L801.338 692.501 L801.897 692.501 L802.456 692.501 L803.016 692.501 L803.575 692.501 L804.134 692.501 L804.693 692.501 L805.253 692.501 L805.812 692.501 L806.371 692.501 L806.931 692.501 L807.49 692.501 L808.049 692.501 L808.608 692.501 L809.168 692.501 L809.727 692.501 L810.286 692.501 L810.845 692.501 L811.405 692.501 L811.964 692.501 L812.523 692.501 L813.082 692.501 L813.642 692.501 L814.201 692.501 L814.76 692.501 L815.319 692.501 L815.879 692.501 L816.438 692.501 L816.997 692.501 L817.556 692.501 L818.116 692.501 L818.675 692.501 L819.234 692.501 L819.793 692.501 L820.353 692.501 L820.912 692.501 L821.471 692.501 L822.03 692.501 L822.59 692.501 L823.149 692.501 L823.708 692.501 L824.267 692.501 L824.827 692.501 L825.386 692.501 L825.945 692.501 L826.504 692.501 L827.064 692.501 L827.623 692.501 L828.182 692.501 L828.741 692.501 L829.301 692.501 L829.86 692.501 L830.419 692.501 L830.978 692.501 L831.538 692.501 L832.097 692.501 L832.656 692.501 L833.215 692.501 L833.775 692.501 L834.334 692.501 L834.893 692.501 L835.452 692.501 L836.012 692.501 L836.571 692.501 L837.13 692.501 L837.689 692.501 L838.249 692.501 L838.808 692.501 L839.367 692.501 L839.926 692.501 L840.486 692.501 L841.045 692.501 L841.604 692.501 L842.163 692.501 L842.723 692.501 L843.282 692.501 L843.841 692.501 L844.4 692.501 L844.96 692.501 L845.519 692.501 L846.078 692.501 L846.637 692.501 L847.197 692.501 L847.756 692.501 L848.315 692.501 L848.874 692.501 L849.434 692.501 L849.993 692.501 L850.552 692.501 L851.111 692.501 L851.671 692.501 L852.23 692.501 L852.789 692.501 L853.348 692.501 L853.908 692.501 L854.467 692.501 L855.026 692.501 L855.585 692.501 L856.145 692.501 L856.704 692.501 L857.263 692.501 L857.822 692.501 L858.382 692.501 L858.941 692.501 L859.5 692.501 L860.059 692.501 L860.619 692.501 L861.178 692.501 L861.737 692.501 L862.296 692.501 L862.856 692.501 L863.415 692.501 L863.974 692.501 L864.533 692.501 L865.093 692.501 L865.652 692.501 L866.211 692.501 L866.77 692.501 L867.33 692.501 L867.889 692.501 L868.448 692.501 L869.007 692.501 L869.567 692.501 L870.126 692.501 L870.685 692.501 L871.244 692.501 L871.804 692.501 L872.363 692.501 L872.922 692.501 L873.481 692.501 L874.041 692.501 L874.6 692.501 L875.159 692.501 L875.718 692.501 L876.278 692.501 L876.837 692.501 L877.396 692.501 L877.955 692.501 L878.515 692.501 L879.074 692.501 L879.633 692.501 L880.192 692.501 L880.752 692.501 L881.311 692.501 L881.87 692.501 L882.429 692.501 L882.989 692.501 L883.548 692.501 L884.107 692.501 L884.666 692.501 L885.226 692.501 L885.785 692.501 L886.344 692.501 L886.903 692.501 L887.463 692.501 L888.022 692.501 L888.581 692.501 L889.14 692.501 L889.7 692.501 L890.259 692.501 L890.818 692.501 L891.377 692.501 L891.937 692.501 L892.496 692.501 L893.055 692.501 L893.614 692.501 L894.174 692.501 L894.733 692.501 L895.292 692.501 L895.851 692.501 L896.411 692.501 L896.97 692.501 L897.529 692.501 L898.088 692.501 L898.648 692.501 L899.207 692.501 L899.766 692.501 L900.325 692.501 L900.885 692.501 L901.444 692.501 L902.003 692.501 L902.562 692.501 L903.122 692.501 L903.681 692.501 L904.24 692.501 L904.799 692.501 L905.359 692.501 L905.918 692.501 L906.477 692.501 L907.036 692.501 L907.596 692.501 L908.155 692.501 L908.714 692.501 L909.273 692.501 L909.833 692.501 L910.392 692.501 L910.951 692.501 L911.51 692.501 L912.07 692.501 L912.629 692.501 L913.188 692.501 L913.747 692.501 L914.307 692.501 L914.866 692.501 L915.425 692.501 L915.984 692.501 L916.544 692.501 L917.103 692.501 L917.662 692.501 L918.221 692.501 L918.781 692.501 L919.34 692.501 L919.899 692.501 L920.458 692.501 L921.018 692.501 L921.577 692.501 L922.136 692.501 L922.695 692.501 L923.255 692.501 L923.814 692.501 L924.373 692.501 L924.932 692.501 L925.492 692.501 L926.051 692.501 L926.61 692.501 L927.169 692.501 L927.729 692.501 L928.288 692.501 L928.847 692.501 L929.406 692.501 L929.966 692.501 L930.525 692.501 L931.084 692.501 L931.644 692.501 L932.203 692.501 L932.762 692.501 L933.321 692.501 L933.881 692.501 L934.44 692.501 L934.999 692.501 L935.558 692.501 L936.118 692.501 L936.677 692.501 L937.236 692.501 L937.795 692.501 L938.355 692.501 L938.914 692.501 L939.473 692.501 L940.032 692.501 L940.592 692.501 L941.151 692.501 L941.71 692.501 L942.269 692.501 L942.829 692.501 L943.388 692.501 L943.947 692.501 L944.506 692.501 L945.066 692.501 L945.625 692.501 L946.184 692.501 L946.743 692.501 L947.303 692.501 L947.862 692.501 L948.421 692.501 L948.98 692.501 L949.54 692.501 L950.099 692.501 L950.658 692.501 L951.217 692.501 L951.777 692.501 L952.336 692.501 L952.895 692.501 L953.454 692.501 L954.014 692.501 L954.573 692.501 L955.132 692.501 L955.691 692.501 L956.251 692.501 L956.81 692.501 L957.369 692.501 L957.928 692.501 L958.488 692.501 L959.047 692.501 L959.606 692.501 L960.165 692.501 L960.725 692.501 L961.284 692.501 L961.843 692.501 L962.402 692.501 L962.962 692.501 L963.521 692.501 L964.08 692.501 L964.639 692.501 L965.199 692.501 L965.758 692.501 L966.317 692.501 L966.876 692.501 L967.436 692.501 L967.995 692.501 L968.554 692.501 L969.113 692.501 L969.673 692.501 L970.232 692.501 L970.791 692.501 L971.35 692.501 L971.91 692.501 L972.469 692.501 L973.028 692.501 L973.587 692.501 L974.147 692.501 L974.706 692.501 L975.265 692.501 L975.824 692.501 L976.384 692.501 L976.943 692.501 L977.502 692.501 L978.061 692.501 L978.621 692.501 L979.18 692.501 L979.739 692.501 L980.298 692.501 L980.858 692.501 L981.417 692.501 L981.976 692.501 L982.535 692.501 L983.095 692.501 L983.654 692.501 L984.213 692.501 L984.772 692.501 L985.332 692.501 L985.891 692.501 L986.45 692.501 L987.009 692.501 L987.569 692.501 L988.128 692.501 L988.687 692.501 L989.246 692.501 L989.806 692.501 L990.365 692.501 L990.924 692.501 L991.483 692.501 L992.043 692.501 L992.602 692.501 L993.161 692.501 L993.72 692.501 L994.28 692.501 L994.839 692.501 L995.398 692.501 L995.957 692.501 L996.517 692.501 L997.076 692.501 L997.635 692.501 L998.194 692.501 L998.754 692.501 L999.313 692.501 L999.872 692.501 L1000.43 692.501 L1000.99 692.501 L1001.55 692.501 L1002.11 692.501 L1002.67 692.501 L1003.23 692.501 L1003.79 692.501 L1004.35 692.501 L1004.91 692.501 L1005.46 692.501 L1006.02 692.501 L1006.58 692.501 L1007.14 692.501 L1007.7 692.501 L1008.26 692.501 L1008.82 692.501 L1009.38 692.501 L1009.94 692.501 L1010.5 692.501 L1011.06 692.501 L1011.62 692.501 L1012.18 692.501 L1012.73 692.501 L1013.29 692.501 L1013.85 692.501 L1014.41 692.501 L1014.97 692.501 L1015.53 692.501 L1016.09 692.501 L1016.65 692.501 L1017.21 692.501 L1017.77 692.501 L1018.33 692.501 L1018.89 692.501 L1019.45 692.501 L1020.01 692.501 L1020.56 692.501 L1021.12 692.501 L1021.68 692.501 L1022.24 692.501 L1022.8 692.501 L1023.36 692.501 L1023.92 692.501 L1024.48 692.501 L1025.04 692.501 L1025.6 692.501 L1026.16 692.501 L1026.72 692.501 L1027.28 692.501 L1027.83 692.501 L1028.39 692.501 L1028.95 692.501 L1029.51 692.501 L1030.07 692.501 L1030.63 692.501 L1031.19 692.501 L1031.75 692.501 L1032.31 692.501 L1032.87 692.501 L1033.43 692.501 L1033.99 692.501 L1034.55 692.501 L1035.1 692.501 L1035.66 692.501 L1036.22 692.501 L1036.78 692.501 L1037.34 692.501 L1037.9 692.501 L1038.46 692.501 L1039.02 692.501 L1039.58 692.501 L1040.14 692.501 L1040.7 692.501 L1041.26 692.501 L1041.82 692.501 L1042.38 692.501 L1042.93 692.501 L1043.49 692.501 L1044.05 692.501 L1044.61 692.501 L1045.17 692.501 L1045.73 692.501 L1046.29 692.501 L1046.85 692.501 L1047.41 692.501 L1047.97 692.501 L1048.53 692.501 L1049.09 692.501 L1049.65 692.501 L1050.2 692.501 L1050.76 692.501 L1051.32 692.501 L1051.88 692.501 L1052.44 692.501 L1053 692.501 L1053.56 692.501 L1054.12 692.501 L1054.68 692.501 L1055.24 692.501 L1055.8 692.501 L1056.36 692.501 L1056.92 692.501 L1057.48 692.501 L1058.03 692.501 L1058.59 692.501 L1059.15 692.501 L1059.71 692.501 L1060.27 692.501 L1060.83 692.501 L1061.39 692.501 L1061.95 692.501 L1062.51 692.501 L1063.07 692.501 L1063.63 692.501 L1064.19 692.501 L1064.75 692.501 L1065.3 692.501 L1065.86 692.501 L1066.42 692.501 L1066.98 692.501 L1067.54 692.501 L1068.1 692.501 L1068.66 692.501 L1069.22 692.501 L1069.78 692.501 L1070.34 692.501 L1070.9 692.501 L1071.46 692.501 L1072.02 692.501 L1072.57 692.501 L1073.13 692.501 L1073.69 692.501 L1074.25 692.501 L1074.81 692.501 L1075.37 692.501 L1075.93 692.501 L1076.49 692.501 L1077.05 692.501 L1077.61 692.501 L1078.17 692.501 L1078.73 692.501 L1079.29 692.501 L1079.85 692.501 L1080.4 692.501 L1080.96 692.501 L1081.52 692.501 L1082.08 692.501 L1082.64 692.501 L1083.2 692.501 L1083.76 692.501 L1084.32 692.501 L1084.88 692.501 L1085.44 692.501 L1086 692.501 L1086.56 692.501 L1087.12 692.501 L1087.67 692.501 L1088.23 692.501 L1088.79 692.501 L1089.35 692.501 L1089.91 692.501 L1090.47 692.501 L1091.03 692.501 L1091.59 692.501 L1092.15 692.501 L1092.71 692.501 L1093.27 692.501 L1093.83 692.501 L1094.39 692.501 L1094.94 692.501 L1095.5 692.501 L1096.06 692.501 L1096.62 692.501 L1097.18 692.501 L1097.74 692.501 L1098.3 692.501 L1098.86 692.501 L1099.42 692.501 L1099.98 692.501 L1100.54 692.501 L1101.1 692.501 L1101.66 692.501 L1102.22 692.501 L1102.77 692.501 L1103.33 692.501 L1103.89 692.501 L1104.45 692.501 L1105.01 692.501 L1105.57 692.501 L1106.13 692.501 L1106.69 692.501 L1107.25 692.501 L1107.81 692.501 L1108.37 692.501 L1108.93 692.501 L1109.49 692.501 L1110.04 692.501 L1110.6 692.501 L1111.16 692.501 L1111.72 692.501 L1112.28 692.501 L1112.84 692.501 L1113.4 692.501 L1113.96 692.501 L1114.52 692.501 L1115.08 692.501 L1115.64 692.501 L1116.2 692.501 L1116.76 692.501 L1117.31 692.501 L1117.87 692.501 L1118.43 692.501 L1118.99 692.501 L1119.55 692.501 L1120.11 692.501 L1120.67 692.501 L1121.23 692.501 L1121.79 692.501 L1122.35 692.501 L1122.91 692.501 L1123.47 692.501 L1124.03 692.501 L1124.59 692.501 L1125.14 692.501 L1125.7 692.501 L1126.26 692.501 L1126.82 692.501 L1127.38 692.501 L1127.94 692.501 L1128.5 692.501 L1129.06 692.501 L1129.62 692.501 L1130.18 692.501 L1130.74 692.501 L1131.3 692.501 L1131.86 692.501 L1132.41 692.501 L1132.97 692.501 L1133.53 692.501 L1134.09 692.501 L1134.65 692.501 L1135.21 692.501 L1135.77 692.501 L1136.33 692.501 L1136.89 692.501 L1137.45 692.501 L1138.01 692.501 L1138.57 692.501 L1139.13 692.501 L1139.68 692.501 L1140.24 692.501 L1140.8 692.501 L1141.36 692.501 L1141.92 692.501 L1142.48 692.501 L1143.04 692.501 L1143.6 692.501 L1144.16 692.501 L1144.72 692.501 L1145.28 692.501 L1145.84 692.501 L1146.4 692.501 L1146.96 692.501 L1147.51 692.501 L1148.07 692.501 L1148.63 692.501 L1149.19 692.501 L1149.75 692.501 L1150.31 692.501 L1150.87 692.501 L1151.43 692.501 L1151.99 692.501 L1152.55 692.501 L1153.11 692.501 L1153.67 692.501 L1154.23 692.501 L1154.78 692.501 L1155.34 692.501 L1155.9 692.501 L1156.46 692.501 L1157.02 692.501 L1157.58 692.501 L1158.14 692.501 L1158.7 692.501 L1159.26 692.501 L1159.82 692.501 L1160.38 692.501 L1160.94 692.501 L1161.5 692.501 L1162.05 692.501 L1162.61 692.501 L1163.17 692.501 L1163.73 692.501 L1164.29 692.501 L1164.85 692.501 L1165.41 692.501 L1165.97 692.501 L1166.53 692.501 L1167.09 692.501 L1167.65 692.501 L1168.21 692.501 L1168.77 692.501 L1169.33 692.501 L1169.88 692.501 L1170.44 692.501 L1171 692.501 L1171.56 692.501 L1172.12 692.501 L1172.68 692.501 L1173.24 692.501 L1173.8 692.501 L1174.36 692.501 L1174.92 692.501 L1175.48 692.501 L1176.04 692.501 L1176.6 692.501 L1177.15 692.501 L1177.71 692.501 L1178.27 692.501 L1178.83 692.501 L1179.39 692.501 L1179.95 692.501 L1180.51 692.501 L1181.07 692.501 L1181.63 692.501 L1182.19 692.501 L1182.75 692.501 L1183.31 692.501 L1183.87 692.501 L1184.43 692.501 L1184.98 692.501 L1185.54 692.501 L1186.1 692.501 L1186.66 692.501 L1187.22 692.501 L1187.78 692.501 L1188.34 692.501 L1188.9 692.501 L1189.46 692.501 L1190.02 692.501 L1190.58 692.501 L1191.14 692.501 L1191.7 692.501 L1192.25 692.501 L1192.81 692.501 L1193.37 692.501 L1193.93 692.501 L1194.49 692.501 L1195.05 692.501 L1195.61 692.501 L1196.17 692.501 L1196.73 692.501 L1197.29 692.501 L1197.85 692.501 L1198.41 692.501 L1198.97 692.501 L1199.52 692.501 L1200.08 692.501 L1200.64 692.501 L1201.2 692.501 L1201.76 692.501 L1202.32 692.501 L1202.88 692.501 L1203.44 692.501 L1204 692.501 L1204.56 692.501 L1205.12 692.501 L1205.68 692.501 L1206.24 692.501 L1206.8 692.501 L1207.35 692.501 L1207.91 692.501 L1208.47 692.501 L1209.03 692.501 L1209.59 692.501 L1210.15 692.501 L1210.71 692.501 L1211.27 692.501 L1211.83 692.501 L1212.39 692.501 L1212.95 692.501 L1213.51 692.501 L1214.07 692.501 L1214.62 692.501 L1215.18 692.501 L1215.74 692.501 L1216.3 692.501 L1216.86 692.501 L1217.42 692.501 L1217.98 692.501 L1218.54 692.501 L1219.1 692.501 L1219.66 692.501 L1220.22 692.501 L1220.78 692.501 L1221.34 692.501 L1221.89 692.501 L1222.45 692.501 L1223.01 692.501 L1223.57 692.501 L1224.13 692.501 L1224.69 692.501 L1225.25 692.501 L1225.81 692.501 L1226.37 692.501 L1226.93 692.501 L1227.49 692.501 L1228.05 692.501 L1228.61 692.501 L1229.17 692.501 L1229.72 692.501 L1230.28 692.501 L1230.84 692.501 L1231.4 692.501 L1231.96 692.501 L1232.52 692.501 L1233.08 692.501 L1233.64 692.501 L1234.2 692.501 L1234.76 692.501 L1235.32 692.501 L1235.88 692.501 L1236.44 692.501 L1236.99 692.501 L1237.55 692.501 L1238.11 692.501 L1238.67 692.501 L1239.23 692.501 L1239.79 692.501 L1240.35 692.501 L1240.91 692.501 L1241.47 692.501 L1242.03 692.501 L1242.59 692.501 L1243.15 692.501 L1243.71 692.501 L1244.26 692.501 L1244.82 692.501 L1245.38 692.501 L1245.94 692.501 L1246.5 692.501 L1247.06 692.501 L1247.62 692.501 L1248.18 692.501 L1248.74 692.501 L1249.3 692.501 L1249.86 692.501 L1250.42 692.501 L1250.98 692.501 L1251.54 692.501 L1252.09 692.501 L1252.65 692.501 L1253.21 692.501 L1253.77 692.501 L1254.33 692.501 L1254.89 692.501 L1255.45 692.501 L1256.01 692.501 L1256.57 692.501 L1257.13 692.501 L1257.69 692.501 L1258.25 692.501 L1258.81 692.501 L1259.36 692.501 L1259.92 692.501 L1260.48 692.501 L1261.04 692.501 L1261.6 692.501 L1262.16 692.501 L1262.72 692.501 L1263.28 692.501 L1263.84 692.501 L1264.4 692.501 L1264.96 692.501 L1265.52 692.501 L1266.08 692.501 L1266.63 692.501 L1267.19 692.501 L1267.75 692.501 L1268.31 692.501 L1268.87 692.501 L1269.43 692.501 L1269.99 692.501 L1270.55 692.501 L1271.11 692.501 L1271.67 692.501 L1272.23 692.501 L1272.79 692.501 L1273.35 692.501 L1273.91 692.501 L1274.46 692.501 L1275.02 692.501 L1275.58 692.501 L1276.14 692.501 L1276.7 692.501 L1277.26 692.501 L1277.82 692.501 L1278.38 692.501 L1278.94 692.501 L1279.5 692.501 L1280.06 692.501 L1280.62 692.501 L1281.18 692.501 L1281.73 692.501 L1282.29 692.501 L1282.85 692.501 L1283.41 692.501 L1283.97 692.501 L1284.53 692.501 L1285.09 692.501 L1285.65 692.501 L1286.21 692.501 L1286.77 692.501 L1287.33 692.501 L1287.89 692.501 L1288.45 692.501 L1289 692.501 L1289.56 692.501 L1290.12 692.501 L1290.68 692.501 L1291.24 692.501 L1291.8 692.501 L1292.36 692.501 L1292.92 692.501 L1293.48 692.501 L1294.04 692.501 L1294.6 692.501 L1295.16 692.501 L1295.72 692.501 L1296.28 692.501 L1296.83 692.501 L1297.39 692.501 L1297.95 692.501 L1298.51 692.501 L1299.07 692.501 L1299.63 692.501 L1300.19 692.501 L1300.75 692.501 L1301.31 692.501 L1301.87 692.501 L1302.43 692.501 L1302.99 692.501 L1303.55 692.501 L1304.1 692.501 L1304.66 692.501 L1305.22 692.501 L1305.78 692.501 L1306.34 692.501 L1306.9 692.501 L1307.46 692.501 L1308.02 692.501 L1308.58 692.501 L1309.14 692.501 L1309.7 692.501 L1310.26 692.501 L1310.82 692.501 L1311.38 692.501 L1311.93 692.501 L1312.49 692.501 L1313.05 692.501 L1313.61 692.501 L1314.17 692.501 L1314.73 692.501 L1315.29 692.501 L1315.85 692.501 L1316.41 692.501 L1316.97 692.501 L1317.53 692.501 L1318.09 692.501 L1318.65 692.501 L1319.2 692.501 L1319.76 692.501 L1320.32 692.501 L1320.88 692.501 L1321.44 692.501 L1322 692.501 L1322.56 692.501 L1323.12 692.501 L1323.68 692.501 L1324.24 692.501 L1324.8 692.501 L1325.36 692.501 L1325.92 692.501 L1326.47 692.501 L1327.03 692.501 L1327.59 692.501 L1328.15 692.501 L1328.71 692.501 L1329.27 692.501 L1329.83 692.501 L1330.39 692.501 L1330.95 692.501 L1331.51 692.501 L1332.07 692.501 L1332.63 692.501 L1333.19 692.501 L1333.75 692.501 L1334.3 692.501 L1334.86 692.501 L1335.42 692.501 L1335.98 692.501 L1336.54 692.501 L1337.1 692.501 L1337.66 692.501 L1338.22 692.501 L1338.78 692.501 L1339.34 692.501 L1339.9 692.501 L1340.46 692.501 L1341.02 692.501 L1341.57 692.501 L1342.13 692.501 L1342.69 692.501 L1343.25 692.501 L1343.81 692.501 L1344.37 692.501 L1344.93 692.501 L1345.49 692.501 L1346.05 692.501 L1346.61 692.501 L1347.17 692.501 L1347.73 692.501 L1348.29 692.501 L1348.84 692.501 L1349.4 692.501 L1349.96 692.501 L1350.52 692.501 L1351.08 692.501 L1351.64 692.501 L1352.2 692.501 L1352.76 692.501 L1353.32 692.501 L1353.88 692.501 L1354.44 692.501 L1355 692.501 L1355.56 692.501 L1356.12 692.501 L1356.67 692.501 L1357.23 692.501 L1357.79 692.501 L1358.35 692.501 L1358.91 692.501 L1359.47 692.501 L1360.03 692.501 L1360.59 692.501 L1361.15 692.501 L1361.71 692.501 L1362.27 692.501 L1362.83 692.501 L1363.39 692.501 L1363.94 692.501 L1364.5 692.501 L1365.06 692.501 L1365.62 692.501 L1366.18 692.501 L1366.74 692.501 L1367.3 692.501 L1367.86 692.501 L1368.42 692.501 L1368.98 692.501 L1369.54 692.501 L1370.1 692.501 L1370.66 692.501 L1371.21 692.501 L1371.77 692.501 L1372.33 692.501 L1372.89 692.501 L1373.45 692.501 L1374.01 692.501 L1374.57 692.501 L1375.13 692.501 L1375.69 692.501 L1376.25 692.501 L1376.81 692.501 L1377.37 692.501 L1377.93 692.501 L1378.49 692.501 L1379.04 692.501 L1379.6 692.501 L1380.16 692.501 L1380.72 692.501 L1381.28 692.501 L1381.84 692.501 L1382.4 692.501 L1382.96 692.501 L1383.52 692.501 L1384.08 692.501 L1384.64 692.501 L1385.2 692.501 L1385.76 692.501 L1386.31 692.501 L1386.87 692.501 L1387.43 692.501 L1387.99 692.501 L1388.55 692.501 L1389.11 692.501 L1389.67 692.501 L1390.23 692.501 L1390.79 692.501 L1391.35 692.501 L1391.91 692.501 L1392.47 692.501 L1393.03 692.501 L1393.58 692.501 L1394.14 692.501 L1394.7 692.501 L1395.26 692.501 L1395.82 692.501 L1396.38 692.501 L1396.94 692.501 L1397.5 692.501 L1398.06 692.501 L1398.62 692.501 L1399.18 692.501 L1399.74 692.501 L1400.3 692.501 L1400.86 692.501 L1401.41 692.501 L1401.97 692.501 L1402.53 692.501 L1403.09 692.501 L1403.65 692.501 L1404.21 692.501 L1404.77 692.501 L1405.33 692.501 L1405.89 692.501 L1406.45 692.501 L1407.01 692.501 L1407.57 692.501 L1408.13 692.501 L1408.68 692.501 L1409.24 692.501 L1409.8 692.501 L1410.36 692.501 L1410.92 692.501 L1411.48 692.501 L1412.04 692.501 L1412.6 692.501 L1413.16 692.501 L1413.72 692.501 L1414.28 692.501 L1414.84 692.501 L1415.4 692.501 L1415.95 692.501 L1416.51 692.501 L1417.07 692.501 L1417.63 692.501 L1418.19 692.501 L1418.75 692.501 L1419.31 692.501 L1419.87 692.501 L1420.43 692.501 L1420.99 692.501 L1421.55 692.501 L1422.11 692.501 L1422.67 692.501 L1423.23 692.501 L1423.78 692.501 L1424.34 692.501 L1424.9 692.501 L1425.46 692.501 L1426.02 692.501 L1426.58 692.501 L1427.14 692.501 L1427.7 692.501 L1428.26 692.501 L1428.82 692.501 L1429.38 692.501 L1429.94 692.501 L1430.5 692.501 L1431.05 692.501 L1431.61 692.501 L1432.17 692.501 L1432.73 692.501 L1433.29 692.501 L1433.85 692.501 L1434.41 692.501 L1434.97 692.501 L1435.53 692.501 L1436.09 692.501 L1436.65 692.501 L1437.21 692.501 L1437.77 692.501 L1438.33 692.501 L1438.88 692.501 L1439.44 692.501 L1440 692.501 L1440.56 692.501 L1441.12 692.501 L1441.68 692.501 L1442.24 692.501 L1442.8 692.501 L1443.36 692.501 L1443.92 692.501 L1444.48 692.501 L1445.04 692.501 L1445.6 692.501 L1446.15 692.501 L1446.71 692.501 L1447.27 692.501 L1447.83 692.501 L1448.39 692.501 L1448.95 692.501 L1449.51 692.501 L1450.07 692.501 L1450.63 692.501 L1451.19 692.501 L1451.75 692.501 L1452.31 692.501 L1452.87 692.501 L1453.42 692.501 L1453.98 692.501 L1454.54 692.501 L1455.1 692.501 L1455.66 692.501 L1456.22 692.501 L1456.78 692.501 L1457.34 692.501 L1457.9 692.501 L1458.46 692.501 L1459.02 692.501 L1459.58 692.501 L1460.14 692.501 L1460.7 692.501 L1461.25 692.501 L1461.81 692.501 L1462.37 692.501 L1462.93 692.501 L1463.49 692.501 L1464.05 692.501 L1464.61 692.501 L1465.17 692.501 L1465.73 692.501 L1466.29 692.501 L1466.85 692.501 L1467.41 692.501 L1467.97 692.501 L1468.52 692.501 L1469.08 692.501 L1469.64 692.501 L1470.2 692.501 L1470.76 692.501 L1471.32 692.501 L1471.88 692.501 L1472.44 692.501 L1473 692.501 L1473.56 692.501 L1474.12 692.501 L1474.68 692.501 L1475.24 692.501 L1475.79 692.501 L1476.35 692.501 L1476.91 692.501 L1477.47 692.501 L1478.03 692.501 L1478.59 692.501 L1479.15 692.501 L1479.71 692.501 L1480.27 692.501 L1480.83 692.501 L1481.39 692.501 L1481.95 692.501 L1482.51 692.501 L1483.07 692.501 L1483.62 692.501 L1484.18 692.501 L1484.74 692.501 L1485.3 692.501 L1485.86 692.501 L1486.42 692.501 L1486.98 692.501 L1487.54 692.501 L1488.1 692.501 L1488.66 692.501 L1489.22 692.501 L1489.78 692.501 L1490.34 692.501 L1490.89 692.501 L1491.45 692.501 L1492.01 692.501 L1492.57 692.501 L1493.13 692.501 L1493.69 692.501 L1494.25 692.501 L1494.81 692.501 L1495.37 692.501 L1495.93 692.501 L1496.49 692.501 L1497.05 692.501 L1497.61 692.501 L1498.16 692.501 L1498.72 692.501 L1499.28 692.501 L1499.84 692.501 L1500.4 692.501 L1500.96 692.501 L1501.52 692.501 L1502.08 692.501 L1502.64 692.501 L1503.2 692.501 L1503.76 692.501 L1504.32 692.501 L1504.88 692.501 L1505.44 692.501 L1505.99 692.501 L1506.55 692.501 L1507.11 692.501 L1507.67 692.501 L1508.23 692.501 L1508.79 692.501 L1509.35 692.501 L1509.91 692.501 L1510.47 692.501 L1511.03 692.501 L1511.59 692.501 L1512.15 692.501 L1512.71 692.501 L1513.26 692.501 L1513.82 692.501 L1514.38 692.501 L1514.94 692.501 L1515.5 692.501 L1516.06 692.501 L1516.62 692.501 L1517.18 692.501 L1517.74 692.501 L1518.3 692.501 L1518.86 692.501 L1519.42 692.501 L1519.98 692.501 L1520.53 692.501 L1521.09 692.501 L1521.65 692.501 L1522.21 692.501 L1522.77 692.501 L1523.33 692.501 L1523.89 692.501 L1524.45 692.501 L1525.01 692.501 L1525.57 692.501 L1526.13 692.501 L1526.69 692.501 L1527.25 692.501 L1527.81 692.501 L1528.36 692.501 L1528.92 692.501 L1529.48 692.501 L1530.04 692.501 L1530.6 692.501 L1531.16 692.501 L1531.72 692.501 L1532.28 692.501 L1532.84 692.501 L1533.4 692.501 L1533.96 692.501 L1534.52 692.501 L1535.08 692.501 L1535.63 692.501 L1536.19 692.501 L1536.75 692.501 L1537.31 692.501 L1537.87 692.501 L1538.43 692.501 L1538.99 692.501 L1539.55 692.501 L1540.11 692.501 L1540.67 692.501 L1541.23 692.501 L1541.79 692.501 L1542.35 692.501 L1542.9 692.501 L1543.46 692.501 L1544.02 692.501 L1544.58 692.501 L1545.14 692.501 L1545.7 692.501 L1546.26 692.501 L1546.82 692.501 L1547.38 692.501 L1547.94 692.501 L1548.5 692.501 L1549.06 692.501 L1549.62 692.501 L1550.18 692.501 L1550.73 692.501 L1551.29 692.501 L1551.85 692.501 L1552.41 692.501 L1552.97 692.501 L1553.53 692.501 L1554.09 692.501 L1554.65 692.501 L1555.21 692.501 L1555.77 692.501 L1556.33 692.501 L1556.89 692.501 L1557.45 692.501 L1558 692.501 L1558.56 692.501 L1559.12 692.501 L1559.68 692.501 L1560.24 692.501 L1560.8 692.501 L1561.36 692.501 L1561.92 692.501 L1562.48 692.501 L1563.04 692.501 L1563.6 692.501 L1564.16 692.501 L1564.72 692.501 L1565.28 692.501 L1565.83 692.501 L1566.39 692.501 L1566.95 692.501 L1567.51 692.501 L1568.07 692.501 L1568.63 692.501 L1569.19 692.501 L1569.75 692.501 L1570.31 692.501 L1570.87 692.501 L1571.43 692.501 L1571.99 692.501 L1572.55 692.501 L1573.1 692.501 L1573.66 692.501 L1574.22 692.501 L1574.78 692.501 L1575.34 692.501 L1575.9 692.501 L1576.46 692.501 L1577.02 692.501 L1577.58 692.501 L1578.14 692.501 L1578.7 692.501 L1579.26 692.501 L1579.82 692.501 L1580.37 692.501 L1580.93 692.501 L1581.49 692.501 L1582.05 692.501 L1582.61 692.501 L1583.17 692.501 L1583.73 692.501 L1584.29 692.501 L1584.85 692.501 L1585.41 692.501 L1585.97 692.501 L1586.53 692.501 L1587.09 692.501 L1587.65 692.501 L1588.2 692.501 L1588.76 692.501 L1589.32 692.501 L1589.88 692.501 L1590.44 692.501 L1591 692.501 L1591.56 692.501 L1592.12 692.501 L1592.68 692.501 L1593.24 692.501 L1593.8 692.501 L1594.36 692.501 L1594.92 692.501 L1595.47 692.501 L1596.03 692.501 L1596.59 692.501 L1597.15 692.501 L1597.71 692.501 L1598.27 692.501 L1598.83 692.501 L1599.39 692.501 L1599.95 692.501 L1600.51 692.501 L1601.07 692.501 L1601.63 692.501 L1602.19 692.501 L1602.74 692.501 L1603.3 692.501 L1603.86 692.501 L1604.42 692.501 L1604.98 692.501 L1605.54 692.501 L1606.1 692.501 L1606.66 692.501 L1607.22 692.501 L1607.78 692.501 L1608.34 692.501 L1608.9 692.501 L1609.46 692.501 L1610.02 692.501 L1610.57 692.501 L1611.13 692.501 L1611.69 692.501 L1612.25 692.501 L1612.81 692.501 L1613.37 692.501 L1613.93 692.501 L1614.49 692.501 L1615.05 692.501 L1615.61 692.501 L1616.17 692.501 L1616.73 692.501 L1617.29 692.501 L1617.84 692.501 L1618.4 692.501 L1618.96 692.501 L1619.52 692.501 L1620.08 692.501 L1620.64 692.501 L1621.2 692.501 L1621.76 692.501 L1622.32 692.501 L1622.88 692.501 L1623.44 692.501 L1624 692.501 L1624.56 692.501 L1625.11 692.501 L1625.67 692.501 L1626.23 692.501 L1626.79 692.501 L1627.35 692.501 L1627.91 692.501 L1628.47 692.501 L1629.03 692.501 L1629.59 692.501 L1630.15 692.501 L1630.71 692.501 L1631.27 692.501 L1631.83 692.501 L1632.39 692.501 L1632.94 692.501 L1633.5 692.501 L1634.06 692.501 L1634.62 692.501 L1635.18 692.501 L1635.74 692.501 L1636.3 692.501 L1636.86 692.501 L1637.42 692.501 L1637.98 692.501 L1638.54 692.501 L1639.1 692.501 L1639.66 692.501 L1640.21 692.501 L1640.77 692.501 L1641.33 692.501 L1641.89 692.501 L1642.45 692.501 L1643.01 692.501 L1643.57 692.501 L1644.13 692.501 L1644.69 692.501 L1645.25 692.501 L1645.81 692.501 L1646.37 692.501 L1646.93 692.501 L1647.48 692.501 L1648.04 692.501 L1648.6 692.501 L1649.16 692.501 L1649.72 692.501 L1650.28 692.501 L1650.84 692.501 L1651.4 692.501 L1651.96 692.501 L1652.52 692.501 L1653.08 692.501 L1653.64 692.501 L1654.2 692.501 L1654.76 692.501 L1655.31 692.501 L1655.87 692.501 L1656.43 692.501 L1656.99 692.501 L1657.55 692.501 L1658.11 692.501 L1658.67 692.501 L1659.23 692.501 L1659.79 692.501 L1660.35 692.501 L1660.91 692.501 L1661.47 692.501 L1662.03 692.501 L1662.58 692.501 L1663.14 692.501 L1663.7 692.501 L1664.26 692.501 L1664.82 692.501 L1665.38 692.501 L1665.94 692.501 L1666.5 692.501 L1667.06 692.501 L1667.62 692.501 L1668.18 692.501 L1668.74 692.501 L1669.3 692.501 L1669.85 692.501 L1670.41 692.501 L1670.97 692.501 L1671.53 692.501 L1672.09 692.501 L1672.65 692.501 L1673.21 692.501 L1673.77 692.501 L1674.33 692.501 L1674.89 692.501 L1675.45 692.501 L1676.01 692.501 L1676.57 692.501 L1677.13 692.501 L1677.68 692.501 L1678.24 692.501 L1678.8 692.501 L1679.36 692.501 L1679.92 692.501 L1680.48 692.501 L1681.04 692.501 L1681.6 692.501 L1682.16 692.501 L1682.72 692.501 L1683.28 692.501 L1683.84 692.501 L1684.4 692.501 L1684.95 692.501 L1685.51 692.501 L1686.07 692.501 L1686.63 692.501 L1687.19 692.501 L1687.75 692.501 L1688.31 692.501 L1688.87 692.501 L1689.43 692.501 L1689.99 692.501 L1690.55 692.501 L1691.11 692.501 L1691.67 692.501 L1692.23 692.501 L1692.78 692.501 L1693.34 692.501 L1693.9 692.501 L1694.46 692.501 L1695.02 692.501 L1695.58 692.501 L1696.14 692.501 L1696.7 692.501 L1697.26 692.501 L1697.82 692.501 L1698.38 692.501 L1698.94 692.501 L1699.5 692.501 L1700.05 692.501 L1700.61 692.501 L1701.17 692.501 L1701.73 692.501 L1702.29 692.501 L1702.85 692.501 L1703.41 692.501 L1703.97 692.501 L1704.53 692.501 L1705.09 692.501 L1705.65 692.501 L1706.21 692.501 L1706.77 692.501 L1707.32 692.501 L1707.88 692.501 L1708.44 692.501 L1709 692.501 L1709.56 692.501 L1710.12 692.501 L1710.68 692.501 L1711.24 692.501 L1711.8 692.501 L1712.36 692.501 L1712.92 692.501 L1713.48 692.501 L1714.04 692.501 L1714.6 692.501 L1715.15 692.501 L1715.71 692.501 L1716.27 692.501 L1716.83 692.501 L1717.39 692.501 L1717.95 692.501 L1718.51 692.501 L1719.07 692.501 L1719.63 692.501 L1720.19 692.501 L1720.75 692.501 L1721.31 692.501 L1721.87 692.501 L1722.42 692.501 L1722.98 692.501 L1723.54 692.501 L1724.1 692.501 L1724.66 692.501 L1725.22 692.501 L1725.78 692.501 L1726.34 692.501 L1726.9 692.501 L1727.46 692.501 L1728.02 692.501 L1728.58 692.501 L1729.14 692.501 L1729.69 692.501 L1730.25 692.501 L1730.81 692.501 L1731.37 692.501 L1731.93 692.501 L1732.49 692.501 L1733.05 692.501 L1733.61 692.501 L1734.17 692.501 L1734.73 692.501 L1735.29 692.501 L1735.85 692.501 L1736.41 692.501 L1736.97 692.501 L1737.52 692.501 L1738.08 692.501 L1738.64 692.501 L1739.2 692.501 L1739.76 692.501 L1740.32 692.501 L1740.88 692.501 L1741.44 692.501 L1742 692.501 L1742.56 692.501 L1743.12 692.501 L1743.68 692.501 L1744.24 692.501 L1744.79 692.501 L1745.35 692.501 L1745.91 692.501 L1746.47 692.501 L1747.03 692.501 L1747.59 692.501 L1748.15 692.501 L1748.71 692.501 L1749.27 692.501 L1749.83 692.501 L1750.39 692.501 L1750.95 692.501 L1751.51 692.501 L1752.06 692.501 L1752.62 692.501 L1753.18 692.501 L1753.74 692.501 L1754.3 692.501 L1754.86 692.501 L1755.42 692.501 L1755.98 692.501 L1756.54 692.501 L1757.1 692.501 L1757.66 692.501 L1758.22 692.501 L1758.78 692.501 L1759.34 692.501 L1759.89 692.501 L1760.45 692.501 L1761.01 692.501 L1761.57 692.501 L1762.13 692.501 L1762.69 692.501 L1763.25 692.501 L1763.81 692.501 L1764.37 692.501 L1764.93 692.501 L1765.49 692.501 L1766.05 692.501 L1766.61 692.501 L1767.16 692.501 L1767.72 692.501 L1768.28 692.501 L1768.84 692.501 L1769.4 692.501 L1769.96 692.501 L1770.52 692.501 L1771.08 692.501 L1771.64 692.501 L1772.2 692.501 L1772.76 692.501 L1773.32 692.501 L1773.88 692.501 L1774.43 692.501 L1774.99 692.501 L1775.55 692.501 L1776.11 692.501 L1776.67 692.501 L1777.23 692.501 L1777.79 692.501 L1778.35 692.501 L1778.91 692.501 L1779.47 692.501 L1780.03 692.501 L1780.59 692.501 L1781.15 692.501 L1781.71 692.501 L1782.26 692.501 L1782.82 692.501 L1783.38 692.501 L1783.94 692.501 L1784.5 692.501 L1785.06 692.501 L1785.62 692.501 L1786.18 692.501 L1786.74 692.501 L1787.3 692.501 L1787.86 692.501 L1788.42 692.501 L1788.98 692.501 L1789.53 692.501 L1790.09 692.501 L1790.65 692.501 L1791.21 692.501 L1791.77 692.501 L1792.33 692.501 L1792.89 692.501 L1793.45 692.501 L1794.01 692.501 L1794.57 692.501 L1795.13 692.501 L1795.69 692.501 L1796.25 692.501 L1796.8 692.501 L1797.36 692.501 L1797.92 692.501 L1798.48 692.501 L1799.04 692.501 L1799.6 692.501 L1800.16 692.501 L1800.72 692.501 L1801.28 692.501 L1801.84 692.501 L1802.4 692.501 L1802.96 692.501 L1803.52 692.501 L1804.08 692.501 L1804.63 692.501 L1805.19 692.501 L1805.75 692.501 L1806.31 692.501 L1806.87 692.501 L1807.43 692.501 L1807.99 692.501 L1808.55 692.501 L1809.11 692.501 L1809.67 692.501 L1810.23 692.501 L1810.79 692.501 L1811.35 692.501 L1811.9 692.501 L1812.46 692.501 L1813.02 692.501 L1813.58 692.501 L1814.14 692.501 L1814.7 692.501 L1815.26 692.501 L1815.82 692.501 L1816.38 692.501 L1816.94 692.501 L1817.5 692.501 L1818.06 692.501 L1818.62 692.501 L1819.18 692.501 L1819.73 692.501 L1820.29 692.501 L1820.85 692.501 L1821.41 692.501 L1821.97 692.501 L1822.53 692.501 L1823.09 692.501 L1823.65 692.501 L1824.21 692.501 L1824.77 692.501 L1825.33 692.501 L1825.89 692.501 L1826.45 692.501 L1827 692.501 L1827.56 692.501 L1828.12 692.501 L1828.68 692.501 L1829.24 692.501 L1829.8 692.501 L1830.36 692.501 L1830.92 692.501 L1831.48 692.501 L1832.04 692.501 L1832.6 692.501 L1833.16 692.501 L1833.72 692.501 L1834.27 692.501 L1834.83 692.501 L1835.39 692.501 L1835.95 692.501 L1836.51 692.501 L1837.07 692.501 L1837.63 692.501 L1838.19 692.501 L1838.19 683.713 L1837.63 683.713 L1837.07 683.713 L1836.51 683.713 L1835.95 683.713 L1835.39 683.713 L1834.83 683.713 L1834.27 683.713 L1833.72 683.713 L1833.16 683.713 L1832.6 683.713 L1832.04 683.713 L1831.48 683.713 L1830.92 683.713 L1830.36 683.713 L1829.8 683.713 L1829.24 683.713 L1828.68 683.713 L1828.12 683.713 L1827.56 683.713 L1827 683.713 L1826.45 683.713 L1825.89 683.713 L1825.33 683.713 L1824.77 683.713 L1824.21 683.713 L1823.65 683.713 L1823.09 683.713 L1822.53 683.713 L1821.97 683.713 L1821.41 683.713 L1820.85 683.713 L1820.29 683.713 L1819.73 683.713 L1819.18 683.713 L1818.62 683.713 L1818.06 683.713 L1817.5 683.713 L1816.94 683.713 L1816.38 683.713 L1815.82 683.713 L1815.26 683.713 L1814.7 683.713 L1814.14 683.713 L1813.58 683.713 L1813.02 683.713 L1812.46 683.713 L1811.9 683.713 L1811.35 683.713 L1810.79 683.713 L1810.23 683.713 L1809.67 683.713 L1809.11 683.713 L1808.55 683.713 L1807.99 683.713 L1807.43 683.713 L1806.87 683.713 L1806.31 683.713 L1805.75 683.713 L1805.19 683.713 L1804.63 683.713 L1804.08 683.713 L1803.52 683.713 L1802.96 683.713 L1802.4 683.713 L1801.84 683.713 L1801.28 683.713 L1800.72 683.713 L1800.16 683.713 L1799.6 683.713 L1799.04 683.713 L1798.48 683.713 L1797.92 683.713 L1797.36 683.713 L1796.8 683.713 L1796.25 683.713 L1795.69 683.713 L1795.13 683.713 L1794.57 683.713 L1794.01 683.713 L1793.45 683.713 L1792.89 683.713 L1792.33 683.713 L1791.77 683.713 L1791.21 683.713 L1790.65 683.713 L1790.09 683.713 L1789.53 683.713 L1788.98 683.713 L1788.42 683.713 L1787.86 683.713 L1787.3 683.713 L1786.74 683.713 L1786.18 683.713 L1785.62 683.713 L1785.06 683.713 L1784.5 683.713 L1783.94 683.713 L1783.38 683.713 L1782.82 683.713 L1782.26 683.713 L1781.71 683.713 L1781.15 683.713 L1780.59 683.713 L1780.03 683.713 L1779.47 683.713 L1778.91 683.713 L1778.35 683.713 L1777.79 683.713 L1777.23 683.713 L1776.67 683.713 L1776.11 683.713 L1775.55 683.713 L1774.99 683.713 L1774.43 683.713 L1773.88 683.713 L1773.32 683.713 L1772.76 683.713 L1772.2 683.713 L1771.64 683.713 L1771.08 683.713 L1770.52 683.713 L1769.96 683.713 L1769.4 683.713 L1768.84 683.713 L1768.28 683.713 L1767.72 683.713 L1767.16 683.713 L1766.61 683.713 L1766.05 683.713 L1765.49 683.713 L1764.93 683.713 L1764.37 683.713 L1763.81 683.713 L1763.25 683.713 L1762.69 683.713 L1762.13 683.713 L1761.57 683.713 L1761.01 683.713 L1760.45 683.713 L1759.89 683.713 L1759.34 683.713 L1758.78 683.713 L1758.22 683.713 L1757.66 683.713 L1757.1 683.713 L1756.54 683.713 L1755.98 683.713 L1755.42 683.713 L1754.86 683.713 L1754.3 683.713 L1753.74 683.713 L1753.18 683.713 L1752.62 683.713 L1752.06 683.713 L1751.51 683.713 L1750.95 683.713 L1750.39 683.713 L1749.83 683.713 L1749.27 683.713 L1748.71 683.713 L1748.15 683.713 L1747.59 683.713 L1747.03 683.713 L1746.47 683.713 L1745.91 683.713 L1745.35 683.713 L1744.79 683.713 L1744.24 683.713 L1743.68 683.713 L1743.12 683.713 L1742.56 683.713 L1742 683.713 L1741.44 683.713 L1740.88 683.713 L1740.32 683.713 L1739.76 683.713 L1739.2 683.713 L1738.64 683.713 L1738.08 683.713 L1737.52 683.713 L1736.97 683.713 L1736.41 683.713 L1735.85 683.713 L1735.29 683.713 L1734.73 683.713 L1734.17 683.713 L1733.61 683.713 L1733.05 683.713 L1732.49 683.713 L1731.93 683.713 L1731.37 683.713 L1730.81 683.713 L1730.25 683.713 L1729.69 683.713 L1729.14 683.713 L1728.58 683.713 L1728.02 683.713 L1727.46 683.713 L1726.9 683.713 L1726.34 683.713 L1725.78 683.713 L1725.22 683.713 L1724.66 683.713 L1724.1 683.713 L1723.54 683.713 L1722.98 683.713 L1722.42 683.713 L1721.87 683.713 L1721.31 683.713 L1720.75 683.713 L1720.19 683.713 L1719.63 683.713 L1719.07 683.713 L1718.51 683.713 L1717.95 683.713 L1717.39 683.713 L1716.83 683.713 L1716.27 683.713 L1715.71 683.713 L1715.15 683.713 L1714.6 683.713 L1714.04 683.713 L1713.48 683.713 L1712.92 683.713 L1712.36 683.713 L1711.8 683.713 L1711.24 683.713 L1710.68 683.713 L1710.12 683.713 L1709.56 683.713 L1709 683.713 L1708.44 683.713 L1707.88 683.713 L1707.32 683.713 L1706.77 683.713 L1706.21 683.713 L1705.65 683.713 L1705.09 683.713 L1704.53 683.713 L1703.97 683.713 L1703.41 683.713 L1702.85 683.713 L1702.29 683.713 L1701.73 683.713 L1701.17 683.713 L1700.61 683.713 L1700.05 683.713 L1699.5 683.713 L1698.94 683.713 L1698.38 683.713 L1697.82 683.713 L1697.26 683.713 L1696.7 683.713 L1696.14 683.713 L1695.58 683.713 L1695.02 683.713 L1694.46 683.713 L1693.9 683.713 L1693.34 683.713 L1692.78 683.713 L1692.23 683.713 L1691.67 683.713 L1691.11 683.713 L1690.55 683.713 L1689.99 683.713 L1689.43 683.713 L1688.87 683.713 L1688.31 683.713 L1687.75 683.713 L1687.19 683.713 L1686.63 683.713 L1686.07 683.713 L1685.51 683.713 L1684.95 683.713 L1684.4 683.713 L1683.84 683.713 L1683.28 683.713 L1682.72 683.713 L1682.16 683.713 L1681.6 683.713 L1681.04 683.713 L1680.48 683.713 L1679.92 683.713 L1679.36 683.713 L1678.8 683.713 L1678.24 683.713 L1677.68 683.713 L1677.13 683.713 L1676.57 683.713 L1676.01 683.713 L1675.45 683.713 L1674.89 683.713 L1674.33 683.713 L1673.77 683.713 L1673.21 683.713 L1672.65 683.713 L1672.09 683.713 L1671.53 683.713 L1670.97 683.713 L1670.41 683.713 L1669.85 683.713 L1669.3 683.713 L1668.74 683.713 L1668.18 683.713 L1667.62 683.713 L1667.06 683.713 L1666.5 683.713 L1665.94 683.713 L1665.38 683.713 L1664.82 683.713 L1664.26 683.713 L1663.7 683.713 L1663.14 683.713 L1662.58 683.713 L1662.03 683.713 L1661.47 683.713 L1660.91 683.713 L1660.35 683.713 L1659.79 683.713 L1659.23 683.713 L1658.67 683.713 L1658.11 683.713 L1657.55 683.713 L1656.99 683.713 L1656.43 683.713 L1655.87 683.713 L1655.31 683.713 L1654.76 683.713 L1654.2 683.713 L1653.64 683.713 L1653.08 683.713 L1652.52 683.713 L1651.96 683.713 L1651.4 683.713 L1650.84 683.713 L1650.28 683.713 L1649.72 683.713 L1649.16 683.713 L1648.6 683.713 L1648.04 683.713 L1647.48 683.713 L1646.93 683.713 L1646.37 683.713 L1645.81 683.713 L1645.25 683.713 L1644.69 683.713 L1644.13 683.713 L1643.57 683.713 L1643.01 683.713 L1642.45 683.713 L1641.89 683.713 L1641.33 683.713 L1640.77 683.713 L1640.21 683.713 L1639.66 683.713 L1639.1 683.713 L1638.54 683.713 L1637.98 683.713 L1637.42 683.713 L1636.86 683.713 L1636.3 683.713 L1635.74 683.713 L1635.18 683.713 L1634.62 683.713 L1634.06 683.713 L1633.5 683.713 L1632.94 683.713 L1632.39 683.713 L1631.83 683.713 L1631.27 683.713 L1630.71 683.713 L1630.15 683.713 L1629.59 683.713 L1629.03 683.713 L1628.47 683.713 L1627.91 683.713 L1627.35 683.713 L1626.79 683.713 L1626.23 683.713 L1625.67 683.713 L1625.11 683.713 L1624.56 683.713 L1624 683.713 L1623.44 683.713 L1622.88 683.713 L1622.32 683.713 L1621.76 683.713 L1621.2 683.713 L1620.64 683.713 L1620.08 683.713 L1619.52 683.713 L1618.96 683.713 L1618.4 683.713 L1617.84 683.713 L1617.29 683.713 L1616.73 683.713 L1616.17 683.713 L1615.61 683.713 L1615.05 683.713 L1614.49 683.713 L1613.93 683.713 L1613.37 683.713 L1612.81 683.713 L1612.25 683.713 L1611.69 683.713 L1611.13 683.713 L1610.57 683.713 L1610.02 683.713 L1609.46 683.713 L1608.9 683.713 L1608.34 683.713 L1607.78 683.713 L1607.22 683.713 L1606.66 683.713 L1606.1 683.713 L1605.54 683.713 L1604.98 683.713 L1604.42 683.713 L1603.86 683.713 L1603.3 683.713 L1602.74 683.713 L1602.19 683.713 L1601.63 683.713 L1601.07 683.713 L1600.51 683.713 L1599.95 683.713 L1599.39 683.713 L1598.83 683.713 L1598.27 683.713 L1597.71 683.713 L1597.15 683.713 L1596.59 683.713 L1596.03 683.713 L1595.47 683.713 L1594.92 683.713 L1594.36 683.713 L1593.8 683.713 L1593.24 683.713 L1592.68 683.713 L1592.12 683.713 L1591.56 683.713 L1591 683.713 L1590.44 683.713 L1589.88 683.713 L1589.32 683.713 L1588.76 683.713 L1588.2 683.713 L1587.65 683.713 L1587.09 683.713 L1586.53 683.713 L1585.97 683.713 L1585.41 683.713 L1584.85 683.713 L1584.29 683.713 L1583.73 683.713 L1583.17 683.713 L1582.61 683.713 L1582.05 683.713 L1581.49 683.713 L1580.93 683.713 L1580.37 683.713 L1579.82 683.713 L1579.26 683.713 L1578.7 683.713 L1578.14 683.713 L1577.58 683.713 L1577.02 683.713 L1576.46 683.713 L1575.9 683.713 L1575.34 683.713 L1574.78 683.713 L1574.22 683.713 L1573.66 683.713 L1573.1 683.713 L1572.55 683.713 L1571.99 683.713 L1571.43 683.713 L1570.87 683.713 L1570.31 683.713 L1569.75 683.713 L1569.19 683.713 L1568.63 683.713 L1568.07 683.713 L1567.51 683.713 L1566.95 683.713 L1566.39 683.713 L1565.83 683.713 L1565.28 683.713 L1564.72 683.713 L1564.16 683.713 L1563.6 683.713 L1563.04 683.713 L1562.48 683.713 L1561.92 683.713 L1561.36 683.713 L1560.8 683.713 L1560.24 683.713 L1559.68 683.713 L1559.12 683.713 L1558.56 683.713 L1558 683.713 L1557.45 683.713 L1556.89 683.713 L1556.33 683.713 L1555.77 683.713 L1555.21 683.713 L1554.65 683.713 L1554.09 683.713 L1553.53 683.713 L1552.97 683.713 L1552.41 683.713 L1551.85 683.713 L1551.29 683.713 L1550.73 683.713 L1550.18 683.713 L1549.62 683.713 L1549.06 683.713 L1548.5 683.713 L1547.94 683.713 L1547.38 683.713 L1546.82 683.713 L1546.26 683.713 L1545.7 683.713 L1545.14 683.713 L1544.58 683.713 L1544.02 683.713 L1543.46 683.713 L1542.9 683.713 L1542.35 683.713 L1541.79 683.713 L1541.23 683.713 L1540.67 683.713 L1540.11 683.713 L1539.55 683.713 L1538.99 683.713 L1538.43 683.713 L1537.87 683.713 L1537.31 683.713 L1536.75 683.713 L1536.19 683.713 L1535.63 683.713 L1535.08 683.713 L1534.52 683.713 L1533.96 683.713 L1533.4 683.713 L1532.84 683.713 L1532.28 683.713 L1531.72 683.713 L1531.16 683.713 L1530.6 683.713 L1530.04 683.713 L1529.48 683.713 L1528.92 683.713 L1528.36 683.713 L1527.81 683.713 L1527.25 683.713 L1526.69 683.713 L1526.13 683.713 L1525.57 683.713 L1525.01 683.713 L1524.45 683.713 L1523.89 683.713 L1523.33 683.713 L1522.77 683.713 L1522.21 683.713 L1521.65 683.713 L1521.09 683.713 L1520.53 683.713 L1519.98 683.713 L1519.42 683.713 L1518.86 683.713 L1518.3 683.713 L1517.74 683.713 L1517.18 683.713 L1516.62 683.713 L1516.06 683.713 L1515.5 683.713 L1514.94 683.713 L1514.38 683.713 L1513.82 683.713 L1513.26 683.713 L1512.71 683.713 L1512.15 683.713 L1511.59 683.713 L1511.03 683.713 L1510.47 683.713 L1509.91 683.713 L1509.35 683.713 L1508.79 683.713 L1508.23 683.713 L1507.67 683.713 L1507.11 683.713 L1506.55 683.713 L1505.99 683.713 L1505.44 683.713 L1504.88 683.713 L1504.32 683.713 L1503.76 683.713 L1503.2 683.713 L1502.64 683.713 L1502.08 683.713 L1501.52 683.713 L1500.96 683.713 L1500.4 683.713 L1499.84 683.713 L1499.28 683.713 L1498.72 683.713 L1498.16 683.713 L1497.61 683.713 L1497.05 683.713 L1496.49 683.713 L1495.93 683.713 L1495.37 683.713 L1494.81 683.713 L1494.25 683.713 L1493.69 683.713 L1493.13 683.713 L1492.57 683.713 L1492.01 683.713 L1491.45 683.713 L1490.89 683.713 L1490.34 683.713 L1489.78 683.713 L1489.22 683.713 L1488.66 683.713 L1488.1 683.713 L1487.54 683.713 L1486.98 683.713 L1486.42 683.713 L1485.86 683.713 L1485.3 683.713 L1484.74 683.713 L1484.18 683.713 L1483.62 683.713 L1483.07 683.713 L1482.51 683.713 L1481.95 683.713 L1481.39 683.713 L1480.83 683.713 L1480.27 683.713 L1479.71 683.713 L1479.15 683.713 L1478.59 683.713 L1478.03 683.713 L1477.47 683.713 L1476.91 683.713 L1476.35 683.713 L1475.79 683.713 L1475.24 683.713 L1474.68 683.713 L1474.12 683.713 L1473.56 683.713 L1473 683.713 L1472.44 683.713 L1471.88 683.713 L1471.32 683.713 L1470.76 683.713 L1470.2 683.713 L1469.64 683.713 L1469.08 683.713 L1468.52 683.713 L1467.97 683.713 L1467.41 683.713 L1466.85 683.713 L1466.29 683.713 L1465.73 683.713 L1465.17 683.713 L1464.61 683.713 L1464.05 683.713 L1463.49 683.713 L1462.93 683.713 L1462.37 683.713 L1461.81 683.713 L1461.25 683.713 L1460.7 683.713 L1460.14 683.713 L1459.58 683.713 L1459.02 683.713 L1458.46 683.713 L1457.9 683.713 L1457.34 683.713 L1456.78 683.713 L1456.22 683.713 L1455.66 683.713 L1455.1 683.713 L1454.54 683.713 L1453.98 683.713 L1453.42 683.713 L1452.87 683.713 L1452.31 683.713 L1451.75 683.713 L1451.19 683.713 L1450.63 683.713 L1450.07 683.713 L1449.51 683.713 L1448.95 683.713 L1448.39 683.713 L1447.83 683.713 L1447.27 683.713 L1446.71 683.713 L1446.15 683.713 L1445.6 683.713 L1445.04 683.713 L1444.48 683.713 L1443.92 683.713 L1443.36 683.713 L1442.8 683.713 L1442.24 683.713 L1441.68 683.713 L1441.12 683.713 L1440.56 683.713 L1440 683.713 L1439.44 683.713 L1438.88 683.713 L1438.33 683.713 L1437.77 683.713 L1437.21 683.713 L1436.65 683.713 L1436.09 683.713 L1435.53 683.713 L1434.97 683.713 L1434.41 683.713 L1433.85 683.713 L1433.29 683.713 L1432.73 683.713 L1432.17 683.713 L1431.61 683.713 L1431.05 683.713 L1430.5 683.713 L1429.94 683.713 L1429.38 683.713 L1428.82 683.713 L1428.26 683.713 L1427.7 683.713 L1427.14 683.713 L1426.58 683.713 L1426.02 683.713 L1425.46 683.713 L1424.9 683.713 L1424.34 683.713 L1423.78 683.713 L1423.23 683.713 L1422.67 683.713 L1422.11 683.713 L1421.55 683.713 L1420.99 683.713 L1420.43 683.713 L1419.87 683.713 L1419.31 683.713 L1418.75 683.713 L1418.19 683.713 L1417.63 683.713 L1417.07 683.713 L1416.51 683.713 L1415.95 683.713 L1415.4 683.713 L1414.84 683.713 L1414.28 683.713 L1413.72 683.713 L1413.16 683.713 L1412.6 683.713 L1412.04 683.713 L1411.48 683.713 L1410.92 683.713 L1410.36 683.713 L1409.8 683.713 L1409.24 683.713 L1408.68 683.713 L1408.13 683.713 L1407.57 683.713 L1407.01 683.713 L1406.45 683.713 L1405.89 683.713 L1405.33 683.713 L1404.77 683.713 L1404.21 683.713 L1403.65 683.713 L1403.09 683.713 L1402.53 683.713 L1401.97 683.713 L1401.41 683.713 L1400.86 683.713 L1400.3 683.713 L1399.74 683.713 L1399.18 683.713 L1398.62 683.713 L1398.06 683.713 L1397.5 683.713 L1396.94 683.713 L1396.38 683.713 L1395.82 683.713 L1395.26 683.713 L1394.7 683.713 L1394.14 683.713 L1393.58 683.713 L1393.03 683.713 L1392.47 683.713 L1391.91 683.713 L1391.35 683.713 L1390.79 683.713 L1390.23 683.713 L1389.67 683.713 L1389.11 683.713 L1388.55 683.713 L1387.99 683.713 L1387.43 683.713 L1386.87 683.713 L1386.31 683.713 L1385.76 683.713 L1385.2 683.713 L1384.64 683.713 L1384.08 683.713 L1383.52 683.713 L1382.96 683.713 L1382.4 683.713 L1381.84 683.713 L1381.28 683.713 L1380.72 683.713 L1380.16 683.713 L1379.6 683.713 L1379.04 683.713 L1378.49 683.713 L1377.93 683.713 L1377.37 683.713 L1376.81 683.713 L1376.25 683.713 L1375.69 683.713 L1375.13 683.713 L1374.57 683.713 L1374.01 683.713 L1373.45 683.713 L1372.89 683.713 L1372.33 683.713 L1371.77 683.713 L1371.21 683.713 L1370.66 683.713 L1370.1 683.713 L1369.54 683.713 L1368.98 683.713 L1368.42 683.713 L1367.86 683.713 L1367.3 683.713 L1366.74 683.713 L1366.18 683.713 L1365.62 683.713 L1365.06 683.713 L1364.5 683.713 L1363.94 683.713 L1363.39 683.713 L1362.83 683.713 L1362.27 683.713 L1361.71 683.713 L1361.15 683.713 L1360.59 683.713 L1360.03 683.713 L1359.47 683.713 L1358.91 683.713 L1358.35 683.713 L1357.79 683.713 L1357.23 683.713 L1356.67 683.713 L1356.12 683.713 L1355.56 683.713 L1355 683.713 L1354.44 683.713 L1353.88 683.713 L1353.32 683.713 L1352.76 683.713 L1352.2 683.713 L1351.64 683.713 L1351.08 683.713 L1350.52 683.713 L1349.96 683.713 L1349.4 683.713 L1348.84 683.713 L1348.29 683.713 L1347.73 683.713 L1347.17 683.713 L1346.61 683.713 L1346.05 683.713 L1345.49 683.713 L1344.93 683.713 L1344.37 683.713 L1343.81 683.713 L1343.25 683.713 L1342.69 683.713 L1342.13 683.713 L1341.57 683.713 L1341.02 683.713 L1340.46 683.713 L1339.9 683.713 L1339.34 683.713 L1338.78 683.713 L1338.22 683.713 L1337.66 683.713 L1337.1 683.713 L1336.54 683.713 L1335.98 683.713 L1335.42 683.713 L1334.86 683.713 L1334.3 683.713 L1333.75 683.713 L1333.19 683.713 L1332.63 683.713 L1332.07 683.713 L1331.51 683.713 L1330.95 683.713 L1330.39 683.713 L1329.83 683.713 L1329.27 683.713 L1328.71 683.713 L1328.15 683.713 L1327.59 683.713 L1327.03 683.713 L1326.47 683.713 L1325.92 683.713 L1325.36 683.713 L1324.8 683.713 L1324.24 683.713 L1323.68 683.713 L1323.12 683.713 L1322.56 683.713 L1322 683.713 L1321.44 683.713 L1320.88 683.713 L1320.32 683.713 L1319.76 683.713 L1319.2 683.713 L1318.65 683.713 L1318.09 683.713 L1317.53 683.713 L1316.97 683.713 L1316.41 683.713 L1315.85 683.713 L1315.29 683.713 L1314.73 683.713 L1314.17 683.713 L1313.61 683.713 L1313.05 683.713 L1312.49 683.713 L1311.93 683.713 L1311.38 683.713 L1310.82 683.713 L1310.26 683.713 L1309.7 683.713 L1309.14 683.713 L1308.58 683.713 L1308.02 683.713 L1307.46 683.713 L1306.9 683.713 L1306.34 683.713 L1305.78 683.713 L1305.22 683.713 L1304.66 683.713 L1304.1 683.713 L1303.55 683.713 L1302.99 683.713 L1302.43 683.713 L1301.87 683.713 L1301.31 683.713 L1300.75 683.713 L1300.19 683.713 L1299.63 683.713 L1299.07 683.713 L1298.51 683.713 L1297.95 683.713 L1297.39 683.713 L1296.83 683.713 L1296.28 683.713 L1295.72 683.713 L1295.16 683.713 L1294.6 683.713 L1294.04 683.713 L1293.48 683.713 L1292.92 683.713 L1292.36 683.713 L1291.8 683.713 L1291.24 683.713 L1290.68 683.713 L1290.12 683.713 L1289.56 683.713 L1289 683.713 L1288.45 683.713 L1287.89 683.713 L1287.33 683.713 L1286.77 683.713 L1286.21 683.713 L1285.65 683.713 L1285.09 683.713 L1284.53 683.713 L1283.97 683.713 L1283.41 683.713 L1282.85 683.713 L1282.29 683.713 L1281.73 683.713 L1281.18 683.713 L1280.62 683.713 L1280.06 683.713 L1279.5 683.713 L1278.94 683.713 L1278.38 683.713 L1277.82 683.713 L1277.26 683.713 L1276.7 683.713 L1276.14 683.713 L1275.58 683.713 L1275.02 683.713 L1274.46 683.713 L1273.91 683.713 L1273.35 683.713 L1272.79 683.713 L1272.23 683.713 L1271.67 683.713 L1271.11 683.713 L1270.55 683.713 L1269.99 683.713 L1269.43 683.713 L1268.87 683.713 L1268.31 683.713 L1267.75 683.713 L1267.19 683.713 L1266.63 683.713 L1266.08 683.713 L1265.52 683.713 L1264.96 683.713 L1264.4 683.713 L1263.84 683.713 L1263.28 683.713 L1262.72 683.713 L1262.16 683.713 L1261.6 683.713 L1261.04 683.713 L1260.48 683.713 L1259.92 683.713 L1259.36 683.713 L1258.81 683.713 L1258.25 683.713 L1257.69 683.713 L1257.13 683.713 L1256.57 683.713 L1256.01 683.713 L1255.45 683.713 L1254.89 683.713 L1254.33 683.713 L1253.77 683.713 L1253.21 683.713 L1252.65 683.713 L1252.09 683.713 L1251.54 683.713 L1250.98 683.713 L1250.42 683.713 L1249.86 683.713 L1249.3 683.713 L1248.74 683.713 L1248.18 683.713 L1247.62 683.713 L1247.06 683.713 L1246.5 683.713 L1245.94 683.713 L1245.38 683.713 L1244.82 683.713 L1244.26 683.713 L1243.71 683.713 L1243.15 683.713 L1242.59 683.713 L1242.03 683.713 L1241.47 683.713 L1240.91 683.713 L1240.35 683.713 L1239.79 683.713 L1239.23 683.713 L1238.67 683.713 L1238.11 683.713 L1237.55 683.713 L1236.99 683.713 L1236.44 683.713 L1235.88 683.713 L1235.32 683.713 L1234.76 683.713 L1234.2 683.713 L1233.64 683.713 L1233.08 683.713 L1232.52 683.713 L1231.96 683.713 L1231.4 683.713 L1230.84 683.713 L1230.28 683.713 L1229.72 683.713 L1229.17 683.713 L1228.61 683.713 L1228.05 683.713 L1227.49 683.713 L1226.93 683.713 L1226.37 683.713 L1225.81 683.713 L1225.25 683.713 L1224.69 683.713 L1224.13 683.713 L1223.57 683.713 L1223.01 683.713 L1222.45 683.713 L1221.89 683.713 L1221.34 683.713 L1220.78 683.713 L1220.22 683.713 L1219.66 683.713 L1219.1 683.713 L1218.54 683.713 L1217.98 683.713 L1217.42 683.713 L1216.86 683.713 L1216.3 683.713 L1215.74 683.713 L1215.18 683.713 L1214.62 683.713 L1214.07 683.713 L1213.51 683.713 L1212.95 683.713 L1212.39 683.713 L1211.83 683.713 L1211.27 683.713 L1210.71 683.713 L1210.15 683.713 L1209.59 683.713 L1209.03 683.713 L1208.47 683.713 L1207.91 683.713 L1207.35 683.713 L1206.8 683.713 L1206.24 683.713 L1205.68 683.713 L1205.12 683.713 L1204.56 683.713 L1204 683.713 L1203.44 683.713 L1202.88 683.713 L1202.32 683.713 L1201.76 683.713 L1201.2 683.713 L1200.64 683.713 L1200.08 683.713 L1199.52 683.713 L1198.97 683.713 L1198.41 683.713 L1197.85 683.713 L1197.29 683.713 L1196.73 683.713 L1196.17 683.713 L1195.61 683.713 L1195.05 683.713 L1194.49 683.713 L1193.93 683.713 L1193.37 683.713 L1192.81 683.713 L1192.25 683.713 L1191.7 683.713 L1191.14 683.713 L1190.58 683.713 L1190.02 683.713 L1189.46 683.713 L1188.9 683.713 L1188.34 683.713 L1187.78 683.713 L1187.22 683.713 L1186.66 683.713 L1186.1 683.713 L1185.54 683.713 L1184.98 683.713 L1184.43 683.713 L1183.87 683.713 L1183.31 683.713 L1182.75 683.713 L1182.19 683.713 L1181.63 683.713 L1181.07 683.713 L1180.51 683.713 L1179.95 683.713 L1179.39 683.713 L1178.83 683.713 L1178.27 683.713 L1177.71 683.713 L1177.15 683.713 L1176.6 683.713 L1176.04 683.713 L1175.48 683.713 L1174.92 683.713 L1174.36 683.713 L1173.8 683.713 L1173.24 683.713 L1172.68 683.713 L1172.12 683.713 L1171.56 683.713 L1171 683.713 L1170.44 683.713 L1169.88 683.713 L1169.33 683.713 L1168.77 683.713 L1168.21 683.713 L1167.65 683.713 L1167.09 683.713 L1166.53 683.713 L1165.97 683.713 L1165.41 683.713 L1164.85 683.713 L1164.29 683.713 L1163.73 683.713 L1163.17 683.713 L1162.61 683.713 L1162.05 683.713 L1161.5 683.713 L1160.94 683.713 L1160.38 683.713 L1159.82 683.713 L1159.26 683.713 L1158.7 683.713 L1158.14 683.713 L1157.58 683.713 L1157.02 683.713 L1156.46 683.713 L1155.9 683.713 L1155.34 683.713 L1154.78 683.713 L1154.23 683.713 L1153.67 683.713 L1153.11 683.713 L1152.55 683.713 L1151.99 683.713 L1151.43 683.713 L1150.87 683.713 L1150.31 683.713 L1149.75 683.713 L1149.19 683.713 L1148.63 683.713 L1148.07 683.713 L1147.51 683.713 L1146.96 683.713 L1146.4 683.713 L1145.84 683.713 L1145.28 683.713 L1144.72 683.713 L1144.16 683.713 L1143.6 683.713 L1143.04 683.713 L1142.48 683.713 L1141.92 683.713 L1141.36 683.713 L1140.8 683.713 L1140.24 683.713 L1139.68 683.713 L1139.13 683.713 L1138.57 683.713 L1138.01 683.713 L1137.45 683.713 L1136.89 683.713 L1136.33 683.713 L1135.77 683.713 L1135.21 683.713 L1134.65 683.713 L1134.09 683.713 L1133.53 683.713 L1132.97 683.713 L1132.41 683.713 L1131.86 683.713 L1131.3 683.713 L1130.74 683.713 L1130.18 683.713 L1129.62 683.713 L1129.06 683.713 L1128.5 683.713 L1127.94 683.713 L1127.38 683.713 L1126.82 683.713 L1126.26 683.713 L1125.7 683.713 L1125.14 683.713 L1124.59 683.713 L1124.03 683.713 L1123.47 683.713 L1122.91 683.713 L1122.35 683.713 L1121.79 683.713 L1121.23 683.713 L1120.67 683.713 L1120.11 683.713 L1119.55 683.713 L1118.99 683.713 L1118.43 683.713 L1117.87 683.713 L1117.31 683.713 L1116.76 683.713 L1116.2 683.713 L1115.64 683.713 L1115.08 683.713 L1114.52 683.713 L1113.96 683.713 L1113.4 683.713 L1112.84 683.713 L1112.28 683.713 L1111.72 683.713 L1111.16 683.713 L1110.6 683.713 L1110.04 683.713 L1109.49 683.713 L1108.93 683.713 L1108.37 683.713 L1107.81 683.713 L1107.25 683.713 L1106.69 683.713 L1106.13 683.713 L1105.57 683.713 L1105.01 683.713 L1104.45 683.713 L1103.89 683.713 L1103.33 683.713 L1102.77 683.713 L1102.22 683.713 L1101.66 683.713 L1101.1 683.713 L1100.54 683.713 L1099.98 683.713 L1099.42 683.713 L1098.86 683.713 L1098.3 683.713 L1097.74 683.713 L1097.18 683.713 L1096.62 683.713 L1096.06 683.713 L1095.5 683.713 L1094.94 683.713 L1094.39 683.713 L1093.83 683.713 L1093.27 683.713 L1092.71 683.713 L1092.15 683.713 L1091.59 683.713 L1091.03 683.713 L1090.47 683.713 L1089.91 683.713 L1089.35 683.713 L1088.79 683.713 L1088.23 683.713 L1087.67 683.713 L1087.12 683.713 L1086.56 683.713 L1086 683.713 L1085.44 683.713 L1084.88 683.713 L1084.32 683.713 L1083.76 683.713 L1083.2 683.713 L1082.64 683.713 L1082.08 683.713 L1081.52 683.713 L1080.96 683.713 L1080.4 683.713 L1079.85 683.713 L1079.29 683.713 L1078.73 683.713 L1078.17 683.713 L1077.61 683.713 L1077.05 683.713 L1076.49 683.713 L1075.93 683.713 L1075.37 683.713 L1074.81 683.713 L1074.25 683.713 L1073.69 683.713 L1073.13 683.713 L1072.57 683.713 L1072.02 683.713 L1071.46 683.713 L1070.9 683.713 L1070.34 683.713 L1069.78 683.713 L1069.22 683.713 L1068.66 683.713 L1068.1 683.713 L1067.54 683.713 L1066.98 683.713 L1066.42 683.713 L1065.86 683.713 L1065.3 683.713 L1064.75 683.713 L1064.19 683.713 L1063.63 683.713 L1063.07 683.713 L1062.51 683.713 L1061.95 683.713 L1061.39 683.713 L1060.83 683.713 L1060.27 683.713 L1059.71 683.713 L1059.15 683.713 L1058.59 683.713 L1058.03 683.713 L1057.48 683.713 L1056.92 683.713 L1056.36 683.713 L1055.8 683.713 L1055.24 683.713 L1054.68 683.713 L1054.12 683.713 L1053.56 683.713 L1053 683.713 L1052.44 683.713 L1051.88 683.713 L1051.32 683.713 L1050.76 683.713 L1050.2 683.713 L1049.65 683.713 L1049.09 683.713 L1048.53 683.713 L1047.97 683.713 L1047.41 683.713 L1046.85 683.713 L1046.29 683.713 L1045.73 683.713 L1045.17 683.713 L1044.61 683.713 L1044.05 683.713 L1043.49 683.713 L1042.93 683.713 L1042.38 683.713 L1041.82 683.713 L1041.26 683.713 L1040.7 683.713 L1040.14 683.713 L1039.58 683.713 L1039.02 683.713 L1038.46 683.713 L1037.9 683.713 L1037.34 683.713 L1036.78 683.713 L1036.22 683.713 L1035.66 683.713 L1035.1 683.713 L1034.55 683.713 L1033.99 683.713 L1033.43 683.713 L1032.87 683.713 L1032.31 683.713 L1031.75 683.713 L1031.19 683.713 L1030.63 683.713 L1030.07 683.713 L1029.51 683.713 L1028.95 683.713 L1028.39 683.713 L1027.83 683.713 L1027.28 683.713 L1026.72 683.713 L1026.16 683.713 L1025.6 683.713 L1025.04 683.713 L1024.48 683.713 L1023.92 683.713 L1023.36 683.713 L1022.8 683.713 L1022.24 683.713 L1021.68 683.713 L1021.12 683.713 L1020.56 683.713 L1020.01 683.713 L1019.45 683.713 L1018.89 683.713 L1018.33 683.713 L1017.77 683.713 L1017.21 683.713 L1016.65 683.713 L1016.09 683.713 L1015.53 683.713 L1014.97 683.713 L1014.41 683.713 L1013.85 683.713 L1013.29 683.713 L1012.73 683.713 L1012.18 683.713 L1011.62 683.713 L1011.06 683.713 L1010.5 683.713 L1009.94 683.713 L1009.38 683.713 L1008.82 683.713 L1008.26 683.713 L1007.7 683.713 L1007.14 683.713 L1006.58 683.713 L1006.02 683.713 L1005.46 683.713 L1004.91 683.713 L1004.35 683.713 L1003.79 683.713 L1003.23 683.713 L1002.67 683.713 L1002.11 683.713 L1001.55 683.713 L1000.99 683.713 L1000.43 683.713 L999.872 683.713 L999.313 683.713 L998.754 683.713 L998.194 683.713 L997.635 683.713 L997.076 683.713 L996.517 683.713 L995.957 683.713 L995.398 683.713 L994.839 683.713 L994.28 683.713 L993.72 683.713 L993.161 683.713 L992.602 683.713 L992.043 683.713 L991.483 683.713 L990.924 683.713 L990.365 683.713 L989.806 683.713 L989.246 683.713 L988.687 683.713 L988.128 683.713 L987.569 683.713 L987.009 683.713 L986.45 683.713 L985.891 683.713 L985.332 683.713 L984.772 683.713 L984.213 683.713 L983.654 683.713 L983.095 683.713 L982.535 683.713 L981.976 683.713 L981.417 683.713 L980.858 683.713 L980.298 683.713 L979.739 683.713 L979.18 683.713 L978.621 683.713 L978.061 683.713 L977.502 683.713 L976.943 683.713 L976.384 683.713 L975.824 683.713 L975.265 683.713 L974.706 683.713 L974.147 683.713 L973.587 683.713 L973.028 683.713 L972.469 683.713 L971.91 683.713 L971.35 683.713 L970.791 683.713 L970.232 683.713 L969.673 683.713 L969.113 683.713 L968.554 683.713 L967.995 683.713 L967.436 683.713 L966.876 683.713 L966.317 683.713 L965.758 683.713 L965.199 683.713 L964.639 683.713 L964.08 683.713 L963.521 683.713 L962.962 683.713 L962.402 683.713 L961.843 683.713 L961.284 683.713 L960.725 683.713 L960.165 683.713 L959.606 683.713 L959.047 683.713 L958.488 683.713 L957.928 683.713 L957.369 683.713 L956.81 683.713 L956.251 683.713 L955.691 683.713 L955.132 683.713 L954.573 683.713 L954.014 683.713 L953.454 683.713 L952.895 683.713 L952.336 683.713 L951.777 683.713 L951.217 683.713 L950.658 683.713 L950.099 683.713 L949.54 683.713 L948.98 683.713 L948.421 683.713 L947.862 683.713 L947.303 683.713 L946.743 683.713 L946.184 683.713 L945.625 683.713 L945.066 683.713 L944.506 683.713 L943.947 683.713 L943.388 683.713 L942.829 683.713 L942.269 683.713 L941.71 683.713 L941.151 683.713 L940.592 683.713 L940.032 683.713 L939.473 683.713 L938.914 683.713 L938.355 683.713 L937.795 683.713 L937.236 683.713 L936.677 683.713 L936.118 683.713 L935.558 683.713 L934.999 683.713 L934.44 683.713 L933.881 683.713 L933.321 683.713 L932.762 683.713 L932.203 683.713 L931.644 683.713 L931.084 683.713 L930.525 683.713 L929.966 683.713 L929.406 683.713 L928.847 683.713 L928.288 683.713 L927.729 683.713 L927.169 683.713 L926.61 683.713 L926.051 683.713 L925.492 683.713 L924.932 683.713 L924.373 683.713 L923.814 683.713 L923.255 683.713 L922.695 683.713 L922.136 683.713 L921.577 683.713 L921.018 683.713 L920.458 683.713 L919.899 683.713 L919.34 683.713 L918.781 683.713 L918.221 683.713 L917.662 683.713 L917.103 683.713 L916.544 683.713 L915.984 683.713 L915.425 683.713 L914.866 683.713 L914.307 683.713 L913.747 683.713 L913.188 683.713 L912.629 683.713 L912.07 683.713 L911.51 683.713 L910.951 683.713 L910.392 683.713 L909.833 683.713 L909.273 683.713 L908.714 683.713 L908.155 683.713 L907.596 683.713 L907.036 683.713 L906.477 683.713 L905.918 683.713 L905.359 683.713 L904.799 683.713 L904.24 683.713 L903.681 683.713 L903.122 683.713 L902.562 683.713 L902.003 683.713 L901.444 683.713 L900.885 683.713 L900.325 683.713 L899.766 683.713 L899.207 683.713 L898.648 683.713 L898.088 683.713 L897.529 683.713 L896.97 683.713 L896.411 683.713 L895.851 683.713 L895.292 683.713 L894.733 683.713 L894.174 683.713 L893.614 683.713 L893.055 683.713 L892.496 683.713 L891.937 683.713 L891.377 683.713 L890.818 683.713 L890.259 683.713 L889.7 683.713 L889.14 683.713 L888.581 683.713 L888.022 683.713 L887.463 683.713 L886.903 683.713 L886.344 683.713 L885.785 683.713 L885.226 683.713 L884.666 683.713 L884.107 683.713 L883.548 683.713 L882.989 683.713 L882.429 683.713 L881.87 683.713 L881.311 683.713 L880.752 683.713 L880.192 683.713 L879.633 683.713 L879.074 683.713 L878.515 683.713 L877.955 683.713 L877.396 683.713 L876.837 683.713 L876.278 683.713 L875.718 683.713 L875.159 683.713 L874.6 683.713 L874.041 683.713 L873.481 683.713 L872.922 683.713 L872.363 683.713 L871.804 683.713 L871.244 683.713 L870.685 683.713 L870.126 683.713 L869.567 683.713 L869.007 683.713 L868.448 683.713 L867.889 683.713 L867.33 683.713 L866.77 683.713 L866.211 683.713 L865.652 683.713 L865.093 683.713 L864.533 683.713 L863.974 683.713 L863.415 683.713 L862.856 683.713 L862.296 683.713 L861.737 683.713 L861.178 683.713 L860.619 683.713 L860.059 683.713 L859.5 683.713 L858.941 683.713 L858.382 683.713 L857.822 683.713 L857.263 683.713 L856.704 683.713 L856.145 683.713 L855.585 683.713 L855.026 683.713 L854.467 683.713 L853.908 683.713 L853.348 683.713 L852.789 683.713 L852.23 683.713 L851.671 683.713 L851.111 683.713 L850.552 683.713 L849.993 683.713 L849.434 683.713 L848.874 683.713 L848.315 683.713 L847.756 683.713 L847.197 683.713 L846.637 683.713 L846.078 683.713 L845.519 683.713 L844.96 683.713 L844.4 683.713 L843.841 683.713 L843.282 683.713 L842.723 683.713 L842.163 683.713 L841.604 683.713 L841.045 683.713 L840.486 683.713 L839.926 683.713 L839.367 683.713 L838.808 683.713 L838.249 683.713 L837.689 683.713 L837.13 683.713 L836.571 683.713 L836.012 683.713 L835.452 683.713 L834.893 683.713 L834.334 683.713 L833.775 683.713 L833.215 683.713 L832.656 683.713 L832.097 683.713 L831.538 683.713 L830.978 683.713 L830.419 683.713 L829.86 683.713 L829.301 683.713 L828.741 683.713 L828.182 683.713 L827.623 683.713 L827.064 683.713 L826.504 683.713 L825.945 683.713 L825.386 683.713 L824.827 683.713 L824.267 683.713 L823.708 683.713 L823.149 683.713 L822.59 683.713 L822.03 683.713 L821.471 683.713 L820.912 683.713 L820.353 683.713 L819.793 683.713 L819.234 683.713 L818.675 683.713 L818.116 683.713 L817.556 683.713 L816.997 683.713 L816.438 683.713 L815.879 683.713 L815.319 683.713 L814.76 683.713 L814.201 683.713 L813.642 683.713 L813.082 683.713 L812.523 683.713 L811.964 683.713 L811.405 683.713 L810.845 683.713 L810.286 683.713 L809.727 683.713 L809.168 683.713 L808.608 683.713 L808.049 683.713 L807.49 683.713 L806.931 683.713 L806.371 683.713 L805.812 683.713 L805.253 683.713 L804.693 683.713 L804.134 683.713 L803.575 683.713 L803.016 683.713 L802.456 683.713 L801.897 683.713 L801.338 683.713 L800.779 683.713 L800.219 683.713 L799.66 683.713 L799.101 683.713 L798.542 683.713 L797.982 683.713 L797.423 683.713 L796.864 683.713 L796.305 683.713 L795.745 683.713 L795.186 683.713 L794.627 683.713 L794.068 683.713 L793.508 683.713 L792.949 683.713 L792.39 683.713 L791.831 683.713 L791.271 683.713 L790.712 683.713 L790.153 683.713 L789.594 683.713 L789.034 683.713 L788.475 683.713 L787.916 683.713 L787.357 683.713 L786.797 683.713 L786.238 683.713 L785.679 683.713 L785.12 683.713 L784.56 683.713 L784.001 683.713 L783.442 683.713 L782.883 683.713 L782.323 683.713 L781.764 683.713 L781.205 683.713 L780.646 683.713 L780.086 683.713 L779.527 683.713 L778.968 683.713 L778.409 683.713 L777.849 683.713 L777.29 683.713 L776.731 683.713 L776.172 683.713 L775.612 683.713 L775.053 683.713 L774.494 683.713 L773.935 683.713 L773.375 683.713 L772.816 683.713 L772.257 683.713 L771.698 683.713 L771.138 683.713 L770.579 683.713 L770.02 683.713 L769.461 683.713 L768.901 683.713 L768.342 683.713 L767.783 683.713 L767.224 683.713 L766.664 683.713 L766.105 683.713 L765.546 683.713 L764.987 683.713 L764.427 683.713 L763.868 683.713 L763.309 683.713 L762.75 683.713 L762.19 683.713 L761.631 683.713 L761.072 683.713 L760.513 683.713 L759.953 683.713 L759.394 683.713 L758.835 683.713 L758.276 683.713 L757.716 683.713 L757.157 683.713 L756.598 683.713 L756.039 683.713 L755.479 683.713 L754.92 683.713 L754.361 683.713 L753.802 683.713 L753.242 683.713 L752.683 683.713 L752.124 683.713 L751.565 683.713 L751.005 683.713 L750.446 683.713 L749.887 683.713 L749.328 683.713 L748.768 683.713 L748.209 683.713 L747.65 683.713 L747.091 683.713 L746.531 683.713 L745.972 683.713 L745.413 683.713 L744.854 683.713 L744.294 683.713 L743.735 683.713 L743.176 683.713 L742.617 683.713 L742.057 683.713 L741.498 683.713 L740.939 683.713 L740.38 683.713 L739.82 683.713 L739.261 683.713 L738.702 683.713 L738.143 683.713 L737.583 683.713 L737.024 683.713 L736.465 683.713 L735.906 683.713 L735.346 683.713 L734.787 683.713 L734.228 683.713 L733.669 683.713 L733.109 683.713 L732.55 683.713 L731.991 683.713 L731.432 683.713 L730.872 683.713 L730.313 683.713 L729.754 683.713 L729.195 683.713 L728.635 683.713 L728.076 683.713 L727.517 683.713 L726.958 683.713 L726.398 683.713 L725.839 683.713 L725.28 683.713 L724.721 683.713 L724.161 683.713 L723.602 683.713 L723.043 683.713 L722.484 683.713 L721.924 683.713 L721.365 683.713 L720.806 683.713 L720.247 683.713  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.107 720.806,688.107 721.365,688.107 721.924,688.107 722.484,688.107 723.043,688.107 723.602,688.107 724.161,688.107 724.721,688.107 725.28,688.107 725.839,688.107 726.398,688.107 726.958,688.107 727.517,688.107 728.076,688.107 728.635,688.107 729.195,688.107 729.754,688.107 730.313,688.107 730.872,688.107 731.432,688.107 731.991,688.107 732.55,688.107 733.109,688.107 733.669,688.107 734.228,688.107 734.787,688.107 735.346,688.107 735.906,688.107 736.465,688.107 737.024,688.107 737.583,688.107 738.143,688.107 738.702,688.107 739.261,688.107 739.82,688.107 740.38,688.107 740.939,688.107 741.498,688.107 742.057,688.107 742.617,688.107 743.176,688.107 743.735,688.107 744.294,688.107 744.854,688.107 745.413,688.107 745.972,688.107 746.531,688.107 747.091,688.107 747.65,688.107 748.209,688.107 748.768,688.107 749.328,688.107 749.887,688.107 750.446,688.107 751.005,688.107 751.565,688.107 752.124,688.107 752.683,688.107 753.242,688.107 753.802,688.107 754.361,688.107 754.92,688.107 755.479,688.107 756.039,688.107 756.598,688.107 757.157,688.107 757.716,688.107 758.276,688.107 758.835,688.107 759.394,688.107 759.953,688.107 760.513,688.107 761.072,688.107 761.631,688.107 762.19,688.107 762.75,688.107 763.309,688.107 763.868,688.107 764.427,688.107 764.987,688.107 765.546,688.107 766.105,688.107 766.664,688.107 767.224,688.107 767.783,688.107 768.342,688.107 768.901,688.107 769.461,688.107 770.02,688.107 770.579,688.107 771.138,688.107 771.698,688.107 772.257,688.107 772.816,688.107 773.375,688.107 773.935,688.107 774.494,688.107 775.053,688.107 775.612,688.107 776.172,688.107 776.731,688.107 777.29,688.107 777.849,688.107 778.409,688.107 778.968,688.107 779.527,688.107 780.086,688.107 780.646,688.107 781.205,688.107 781.764,688.107 782.323,688.107 782.883,688.107 783.442,688.107 784.001,688.107 784.56,688.107 785.12,688.107 785.679,688.107 786.238,688.107 786.797,688.107 787.357,688.107 787.916,688.107 788.475,688.107 789.034,688.107 789.594,688.107 790.153,688.107 790.712,688.107 791.271,688.107 791.831,688.107 792.39,688.107 792.949,688.107 793.508,688.107 794.068,688.107 794.627,688.107 795.186,688.107 795.745,688.107 796.305,688.107 796.864,688.107 797.423,688.107 797.982,688.107 798.542,688.107 799.101,688.107 799.66,688.107 800.219,688.107 800.779,688.107 801.338,688.107 801.897,688.107 802.456,688.107 803.016,688.107 803.575,688.107 804.134,688.107 804.693,688.107 805.253,688.107 805.812,688.107 806.371,688.107 806.931,688.107 807.49,688.107 808.049,688.107 808.608,688.107 809.168,688.107 809.727,688.107 810.286,688.107 810.845,688.107 811.405,688.107 811.964,688.107 812.523,688.107 813.082,688.107 813.642,688.107 814.201,688.107 814.76,688.107 815.319,688.107 815.879,688.107 816.438,688.107 816.997,688.107 817.556,688.107 818.116,688.107 818.675,688.107 819.234,688.107 819.793,688.107 820.353,688.107 820.912,688.107 821.471,688.107 822.03,688.107 822.59,688.107 823.149,688.107 823.708,688.107 824.267,688.107 824.827,688.107 825.386,688.107 825.945,688.107 826.504,688.107 827.064,688.107 827.623,688.107 828.182,688.107 828.741,688.107 829.301,688.107 829.86,688.107 830.419,688.107 830.978,688.107 831.538,688.107 832.097,688.107 832.656,688.107 833.215,688.107 833.775,688.107 834.334,688.107 834.893,688.107 835.452,688.107 836.012,688.107 836.571,688.107 837.13,688.107 837.689,688.107 838.249,688.107 838.808,688.107 839.367,688.107 839.926,688.107 840.486,688.107 841.045,688.107 841.604,688.107 842.163,688.107 842.723,688.107 843.282,688.107 843.841,688.107 844.4,688.107 844.96,688.107 845.519,688.107 846.078,688.107 846.637,688.107 847.197,688.107 847.756,688.107 848.315,688.107 848.874,688.107 849.434,688.107 849.993,688.107 850.552,688.107 851.111,688.107 851.671,688.107 852.23,688.107 852.789,688.107 853.348,688.107 853.908,688.107 854.467,688.107 855.026,688.107 855.585,688.107 856.145,688.107 856.704,688.107 857.263,688.107 857.822,688.107 858.382,688.107 858.941,688.107 859.5,688.107 860.059,688.107 860.619,688.107 861.178,688.107 861.737,688.107 862.296,688.107 862.856,688.107 863.415,688.107 863.974,688.107 864.533,688.107 865.093,688.107 865.652,688.107 866.211,688.107 866.77,688.107 867.33,688.107 867.889,688.107 868.448,688.107 869.007,688.107 869.567,688.107 870.126,688.107 870.685,688.107 871.244,688.107 871.804,688.107 872.363,688.107 872.922,688.107 873.481,688.107 874.041,688.107 874.6,688.107 875.159,688.107 875.718,688.107 876.278,688.107 876.837,688.107 877.396,688.107 877.955,688.107 878.515,688.107 879.074,688.107 879.633,688.107 880.192,688.107 880.752,688.107 881.311,688.107 881.87,688.107 882.429,688.107 882.989,688.107 883.548,688.107 884.107,688.107 884.666,688.107 885.226,688.107 885.785,688.107 886.344,688.107 886.903,688.107 887.463,688.107 888.022,688.107 888.581,688.107 889.14,688.107 889.7,688.107 890.259,688.107 890.818,688.107 891.377,688.107 891.937,688.107 892.496,688.107 893.055,688.107 893.614,688.107 894.174,688.107 894.733,688.107 895.292,688.107 895.851,688.107 896.411,688.107 896.97,688.107 897.529,688.107 898.088,688.107 898.648,688.107 899.207,688.107 899.766,688.107 900.325,688.107 900.885,688.107 901.444,688.107 902.003,688.107 902.562,688.107 903.122,688.107 903.681,688.107 904.24,688.107 904.799,688.107 905.359,688.107 905.918,688.107 906.477,688.107 907.036,688.107 907.596,688.107 908.155,688.107 908.714,688.107 909.273,688.107 909.833,688.107 910.392,688.107 910.951,688.107 911.51,688.107 912.07,688.107 912.629,688.107 913.188,688.107 913.747,688.107 914.307,688.107 914.866,688.107 915.425,688.107 915.984,688.107 916.544,688.107 917.103,688.107 917.662,688.107 918.221,688.107 918.781,688.107 919.34,688.107 919.899,688.107 920.458,688.107 921.018,688.107 921.577,688.107 922.136,688.107 922.695,688.107 923.255,688.107 923.814,688.107 924.373,688.107 924.932,688.107 925.492,688.107 926.051,688.107 926.61,688.107 927.169,688.107 927.729,688.107 928.288,688.107 928.847,688.107 929.406,688.107 929.966,688.107 930.525,688.107 931.084,688.107 931.644,688.107 932.203,688.107 932.762,688.107 933.321,688.107 933.881,688.107 934.44,688.107 934.999,688.107 935.558,688.107 936.118,688.107 936.677,688.107 937.236,688.107 937.795,688.107 938.355,688.107 938.914,688.107 939.473,688.107 940.032,688.107 940.592,688.107 941.151,688.107 941.71,688.107 942.269,688.107 942.829,688.107 943.388,688.107 943.947,688.107 944.506,688.107 945.066,688.107 945.625,688.107 946.184,688.107 946.743,688.107 947.303,688.107 947.862,688.107 948.421,688.107 948.98,688.107 949.54,688.107 950.099,688.107 950.658,688.107 951.217,688.107 951.777,688.107 952.336,688.107 952.895,688.107 953.454,688.107 954.014,688.107 954.573,688.107 955.132,688.107 955.691,688.107 956.251,688.107 956.81,688.107 957.369,688.107 957.928,688.107 958.488,688.107 959.047,688.107 959.606,688.107 960.165,688.107 960.725,688.107 961.284,688.107 961.843,688.107 962.402,688.107 962.962,688.107 963.521,688.107 964.08,688.107 964.639,688.107 965.199,688.107 965.758,688.107 966.317,688.107 966.876,688.107 967.436,688.107 967.995,688.107 968.554,688.107 969.113,688.107 969.673,688.107 970.232,688.107 970.791,688.107 971.35,688.107 971.91,688.107 972.469,688.107 973.028,688.107 973.587,688.107 974.147,688.107 974.706,688.107 975.265,688.107 975.824,688.107 976.384,688.107 976.943,688.107 977.502,688.107 978.061,688.107 978.621,688.107 979.18,688.107 979.739,688.107 980.298,688.107 980.858,688.107 981.417,688.107 981.976,688.107 982.535,688.107 983.095,688.107 983.654,688.107 984.213,688.107 984.772,688.107 985.332,688.107 985.891,688.107 986.45,688.107 987.009,688.107 987.569,688.107 988.128,688.107 988.687,688.107 989.246,688.107 989.806,688.107 990.365,688.107 990.924,688.107 991.483,688.107 992.043,688.107 992.602,688.107 993.161,688.107 993.72,688.107 994.28,688.107 994.839,688.107 995.398,688.107 995.957,688.107 996.517,688.107 997.076,688.107 997.635,688.107 998.194,688.107 998.754,688.107 999.313,688.107 999.872,688.107 1000.43,688.107 1000.99,688.107 1001.55,688.107 1002.11,688.107 1002.67,688.107 1003.23,688.107 1003.79,688.107 1004.35,688.107 1004.91,688.107 1005.46,688.107 1006.02,688.107 1006.58,688.107 1007.14,688.107 1007.7,688.107 1008.26,688.107 1008.82,688.107 1009.38,688.107 1009.94,688.107 1010.5,688.107 1011.06,688.107 1011.62,688.107 1012.18,688.107 1012.73,688.107 1013.29,688.107 1013.85,688.107 1014.41,688.107 1014.97,688.107 1015.53,688.107 1016.09,688.107 1016.65,688.107 1017.21,688.107 1017.77,688.107 1018.33,688.107 1018.89,688.107 1019.45,688.107 1020.01,688.107 1020.56,688.107 1021.12,688.107 1021.68,688.107 1022.24,688.107 1022.8,688.107 1023.36,688.107 1023.92,688.107 1024.48,688.107 1025.04,688.107 1025.6,688.107 1026.16,688.107 1026.72,688.107 1027.28,688.107 1027.83,688.107 1028.39,688.107 1028.95,688.107 1029.51,688.107 1030.07,688.107 1030.63,688.107 1031.19,688.107 1031.75,688.107 1032.31,688.107 1032.87,688.107 1033.43,688.107 1033.99,688.107 1034.55,688.107 1035.1,688.107 1035.66,688.107 1036.22,688.107 1036.78,688.107 1037.34,688.107 1037.9,688.107 1038.46,688.107 1039.02,688.107 1039.58,688.107 1040.14,688.107 1040.7,688.107 1041.26,688.107 1041.82,688.107 1042.38,688.107 1042.93,688.107 1043.49,688.107 1044.05,688.107 1044.61,688.107 1045.17,688.107 1045.73,688.107 1046.29,688.107 1046.85,688.107 1047.41,688.107 1047.97,688.107 1048.53,688.107 1049.09,688.107 1049.65,688.107 1050.2,688.107 1050.76,688.107 1051.32,688.107 1051.88,688.107 1052.44,688.107 1053,688.107 1053.56,688.107 1054.12,688.107 1054.68,688.107 1055.24,688.107 1055.8,688.107 1056.36,688.107 1056.92,688.107 1057.48,688.107 1058.03,688.107 1058.59,688.107 1059.15,688.107 1059.71,688.107 1060.27,688.107 1060.83,688.107 1061.39,688.107 1061.95,688.107 1062.51,688.107 1063.07,688.107 1063.63,688.107 1064.19,688.107 1064.75,688.107 1065.3,688.107 1065.86,688.107 1066.42,688.107 1066.98,688.107 1067.54,688.107 1068.1,688.107 1068.66,688.107 1069.22,688.107 1069.78,688.107 1070.34,688.107 1070.9,688.107 1071.46,688.107 1072.02,688.107 1072.57,688.107 1073.13,688.107 1073.69,688.107 1074.25,688.107 1074.81,688.107 1075.37,688.107 1075.93,688.107 1076.49,688.107 1077.05,688.107 1077.61,688.107 1078.17,688.107 1078.73,688.107 1079.29,688.107 1079.85,688.107 1080.4,688.107 1080.96,688.107 1081.52,688.107 1082.08,688.107 1082.64,688.107 1083.2,688.107 1083.76,688.107 1084.32,688.107 1084.88,688.107 1085.44,688.107 1086,688.107 1086.56,688.107 1087.12,688.107 1087.67,688.107 1088.23,688.107 1088.79,688.107 1089.35,688.107 1089.91,688.107 1090.47,688.107 1091.03,688.107 1091.59,688.107 1092.15,688.107 1092.71,688.107 1093.27,688.107 1093.83,688.107 1094.39,688.107 1094.94,688.107 1095.5,688.107 1096.06,688.107 1096.62,688.107 1097.18,688.107 1097.74,688.107 1098.3,688.107 1098.86,688.107 1099.42,688.107 1099.98,688.107 1100.54,688.107 1101.1,688.107 1101.66,688.107 1102.22,688.107 1102.77,688.107 1103.33,688.107 1103.89,688.107 1104.45,688.107 1105.01,688.107 1105.57,688.107 1106.13,688.107 1106.69,688.107 1107.25,688.107 1107.81,688.107 1108.37,688.107 1108.93,688.107 1109.49,688.107 1110.04,688.107 1110.6,688.107 1111.16,688.107 1111.72,688.107 1112.28,688.107 1112.84,688.107 1113.4,688.107 1113.96,688.107 1114.52,688.107 1115.08,688.107 1115.64,688.107 1116.2,688.107 1116.76,688.107 1117.31,688.107 1117.87,688.107 1118.43,688.107 1118.99,688.107 1119.55,688.107 1120.11,688.107 1120.67,688.107 1121.23,688.107 1121.79,688.107 1122.35,688.107 1122.91,688.107 1123.47,688.107 1124.03,688.107 1124.59,688.107 1125.14,688.107 1125.7,688.107 1126.26,688.107 1126.82,688.107 1127.38,688.107 1127.94,688.107 1128.5,688.107 1129.06,688.107 1129.62,688.107 1130.18,688.107 1130.74,688.107 1131.3,688.107 1131.86,688.107 1132.41,688.107 1132.97,688.107 1133.53,688.107 1134.09,688.107 1134.65,688.107 1135.21,688.107 1135.77,688.107 1136.33,688.107 1136.89,688.107 1137.45,688.107 1138.01,688.107 1138.57,688.107 1139.13,688.107 1139.68,688.107 1140.24,688.107 1140.8,688.107 1141.36,688.107 1141.92,688.107 1142.48,688.107 1143.04,688.107 1143.6,688.107 1144.16,688.107 1144.72,688.107 1145.28,688.107 1145.84,688.107 1146.4,688.107 1146.96,688.107 1147.51,688.107 1148.07,688.107 1148.63,688.107 1149.19,688.107 1149.75,688.107 1150.31,688.107 1150.87,688.107 1151.43,688.107 1151.99,688.107 1152.55,688.107 1153.11,688.107 1153.67,688.107 1154.23,688.107 1154.78,688.107 1155.34,688.107 1155.9,688.107 1156.46,688.107 1157.02,688.107 1157.58,688.107 1158.14,688.107 1158.7,688.107 1159.26,688.107 1159.82,688.107 1160.38,688.107 1160.94,688.107 1161.5,688.107 1162.05,688.107 1162.61,688.107 1163.17,688.107 1163.73,688.107 1164.29,688.107 1164.85,688.107 1165.41,688.107 1165.97,688.107 1166.53,688.107 1167.09,688.107 1167.65,688.107 1168.21,688.107 1168.77,688.107 1169.33,688.107 1169.88,688.107 1170.44,688.107 1171,688.107 1171.56,688.107 1172.12,688.107 1172.68,688.107 1173.24,688.107 1173.8,688.107 1174.36,688.107 1174.92,688.107 1175.48,688.107 1176.04,688.107 1176.6,688.107 1177.15,688.107 1177.71,688.107 1178.27,688.107 1178.83,688.107 1179.39,688.107 1179.95,688.107 1180.51,688.107 1181.07,688.107 1181.63,688.107 1182.19,688.107 1182.75,688.107 1183.31,688.107 1183.87,688.107 1184.43,688.107 1184.98,688.107 1185.54,688.107 1186.1,688.107 1186.66,688.107 1187.22,688.107 1187.78,688.107 1188.34,688.107 1188.9,688.107 1189.46,688.107 1190.02,688.107 1190.58,688.107 1191.14,688.107 1191.7,688.107 1192.25,688.107 1192.81,688.107 1193.37,688.107 1193.93,688.107 1194.49,688.107 1195.05,688.107 1195.61,688.107 1196.17,688.107 1196.73,688.107 1197.29,688.107 1197.85,688.107 1198.41,688.107 1198.97,688.107 1199.52,688.107 1200.08,688.107 1200.64,688.107 1201.2,688.107 1201.76,688.107 1202.32,688.107 1202.88,688.107 1203.44,688.107 1204,688.107 1204.56,688.107 1205.12,688.107 1205.68,688.107 1206.24,688.107 1206.8,688.107 1207.35,688.107 1207.91,688.107 1208.47,688.107 1209.03,688.107 1209.59,688.107 1210.15,688.107 1210.71,688.107 1211.27,688.107 1211.83,688.107 1212.39,688.107 1212.95,688.107 1213.51,688.107 1214.07,688.107 1214.62,688.107 1215.18,688.107 1215.74,688.107 1216.3,688.107 1216.86,688.107 1217.42,688.107 1217.98,688.107 1218.54,688.107 1219.1,688.107 1219.66,688.107 1220.22,688.107 1220.78,688.107 1221.34,688.107 1221.89,688.107 1222.45,688.107 1223.01,688.107 1223.57,688.107 1224.13,688.107 1224.69,688.107 1225.25,688.107 1225.81,688.107 1226.37,688.107 1226.93,688.107 1227.49,688.107 1228.05,688.107 1228.61,688.107 1229.17,688.107 1229.72,688.107 1230.28,688.107 1230.84,688.107 1231.4,688.107 1231.96,688.107 1232.52,688.107 1233.08,688.107 1233.64,688.107 1234.2,688.107 1234.76,688.107 1235.32,688.107 1235.88,688.107 1236.44,688.107 1236.99,688.107 1237.55,688.107 1238.11,688.107 1238.67,688.107 1239.23,688.107 1239.79,688.107 1240.35,688.107 1240.91,688.107 1241.47,688.107 1242.03,688.107 1242.59,688.107 1243.15,688.107 1243.71,688.107 1244.26,688.107 1244.82,688.107 1245.38,688.107 1245.94,688.107 1246.5,688.107 1247.06,688.107 1247.62,688.107 1248.18,688.107 1248.74,688.107 1249.3,688.107 1249.86,688.107 1250.42,688.107 1250.98,688.107 1251.54,688.107 1252.09,688.107 1252.65,688.107 1253.21,688.107 1253.77,688.107 1254.33,688.107 1254.89,688.107 1255.45,688.107 1256.01,688.107 1256.57,688.107 1257.13,688.107 1257.69,688.107 1258.25,688.107 1258.81,688.107 1259.36,688.107 1259.92,688.107 1260.48,688.107 1261.04,688.107 1261.6,688.107 1262.16,688.107 1262.72,688.107 1263.28,688.107 1263.84,688.107 1264.4,688.107 1264.96,688.107 1265.52,688.107 1266.08,688.107 1266.63,688.107 1267.19,688.107 1267.75,688.107 1268.31,688.107 1268.87,688.107 1269.43,688.107 1269.99,688.107 1270.55,688.107 1271.11,688.107 1271.67,688.107 1272.23,688.107 1272.79,688.107 1273.35,688.107 1273.91,688.107 1274.46,688.107 1275.02,688.107 1275.58,688.107 1276.14,688.107 1276.7,688.107 1277.26,688.107 1277.82,688.107 1278.38,688.107 1278.94,688.107 1279.5,688.107 1280.06,688.107 1280.62,688.107 1281.18,688.107 1281.73,688.107 1282.29,688.107 1282.85,688.107 1283.41,688.107 1283.97,688.107 1284.53,688.107 1285.09,688.107 1285.65,688.107 1286.21,688.107 1286.77,688.107 1287.33,688.107 1287.89,688.107 1288.45,688.107 1289,688.107 1289.56,688.107 1290.12,688.107 1290.68,688.107 1291.24,688.107 1291.8,688.107 1292.36,688.107 1292.92,688.107 1293.48,688.107 1294.04,688.107 1294.6,688.107 1295.16,688.107 1295.72,688.107 1296.28,688.107 1296.83,688.107 1297.39,688.107 1297.95,688.107 1298.51,688.107 1299.07,688.107 1299.63,688.107 1300.19,688.107 1300.75,688.107 1301.31,688.107 1301.87,688.107 1302.43,688.107 1302.99,688.107 1303.55,688.107 1304.1,688.107 1304.66,688.107 1305.22,688.107 1305.78,688.107 1306.34,688.107 1306.9,688.107 1307.46,688.107 1308.02,688.107 1308.58,688.107 1309.14,688.107 1309.7,688.107 1310.26,688.107 1310.82,688.107 1311.38,688.107 1311.93,688.107 1312.49,688.107 1313.05,688.107 1313.61,688.107 1314.17,688.107 1314.73,688.107 1315.29,688.107 1315.85,688.107 1316.41,688.107 1316.97,688.107 1317.53,688.107 1318.09,688.107 1318.65,688.107 1319.2,688.107 1319.76,688.107 1320.32,688.107 1320.88,688.107 1321.44,688.107 1322,688.107 1322.56,688.107 1323.12,688.107 1323.68,688.107 1324.24,688.107 1324.8,688.107 1325.36,688.107 1325.92,688.107 1326.47,688.107 1327.03,688.107 1327.59,688.107 1328.15,688.107 1328.71,688.107 1329.27,688.107 1329.83,688.107 1330.39,688.107 1330.95,688.107 1331.51,688.107 1332.07,688.107 1332.63,688.107 1333.19,688.107 1333.75,688.107 1334.3,688.107 1334.86,688.107 1335.42,688.107 1335.98,688.107 1336.54,688.107 1337.1,688.107 1337.66,688.107 1338.22,688.107 1338.78,688.107 1339.34,688.107 1339.9,688.107 1340.46,688.107 1341.02,688.107 1341.57,688.107 1342.13,688.107 1342.69,688.107 1343.25,688.107 1343.81,688.107 1344.37,688.107 1344.93,688.107 1345.49,688.107 1346.05,688.107 1346.61,688.107 1347.17,688.107 1347.73,688.107 1348.29,688.107 1348.84,688.107 1349.4,688.107 1349.96,688.107 1350.52,688.107 1351.08,688.107 1351.64,688.107 1352.2,688.107 1352.76,688.107 1353.32,688.107 1353.88,688.107 1354.44,688.107 1355,688.107 1355.56,688.107 1356.12,688.107 1356.67,688.107 1357.23,688.107 1357.79,688.107 1358.35,688.107 1358.91,688.107 1359.47,688.107 1360.03,688.107 1360.59,688.107 1361.15,688.107 1361.71,688.107 1362.27,688.107 1362.83,688.107 1363.39,688.107 1363.94,688.107 1364.5,688.107 1365.06,688.107 1365.62,688.107 1366.18,688.107 1366.74,688.107 1367.3,688.107 1367.86,688.107 1368.42,688.107 1368.98,688.107 1369.54,688.107 1370.1,688.107 1370.66,688.107 1371.21,688.107 1371.77,688.107 1372.33,688.107 1372.89,688.107 1373.45,688.107 1374.01,688.107 1374.57,688.107 1375.13,688.107 1375.69,688.107 1376.25,688.107 1376.81,688.107 1377.37,688.107 1377.93,688.107 1378.49,688.107 1379.04,688.107 1379.6,688.107 1380.16,688.107 1380.72,688.107 1381.28,688.107 1381.84,688.107 1382.4,688.107 1382.96,688.107 1383.52,688.107 1384.08,688.107 1384.64,688.107 1385.2,688.107 1385.76,688.107 1386.31,688.107 1386.87,688.107 1387.43,688.107 1387.99,688.107 1388.55,688.107 1389.11,688.107 1389.67,688.107 1390.23,688.107 1390.79,688.107 1391.35,688.107 1391.91,688.107 1392.47,688.107 1393.03,688.107 1393.58,688.107 1394.14,688.107 1394.7,688.107 1395.26,688.107 1395.82,688.107 1396.38,688.107 1396.94,688.107 1397.5,688.107 1398.06,688.107 1398.62,688.107 1399.18,688.107 1399.74,688.107 1400.3,688.107 1400.86,688.107 1401.41,688.107 1401.97,688.107 1402.53,688.107 1403.09,688.107 1403.65,688.107 1404.21,688.107 1404.77,688.107 1405.33,688.107 1405.89,688.107 1406.45,688.107 1407.01,688.107 1407.57,688.107 1408.13,688.107 1408.68,688.107 1409.24,688.107 1409.8,688.107 1410.36,688.107 1410.92,688.107 1411.48,688.107 1412.04,688.107 1412.6,688.107 1413.16,688.107 1413.72,688.107 1414.28,688.107 1414.84,688.107 1415.4,688.107 1415.95,688.107 1416.51,688.107 1417.07,688.107 1417.63,688.107 1418.19,688.107 1418.75,688.107 1419.31,688.107 1419.87,688.107 1420.43,688.107 1420.99,688.107 1421.55,688.107 1422.11,688.107 1422.67,688.107 1423.23,688.107 1423.78,688.107 1424.34,688.107 1424.9,688.107 1425.46,688.107 1426.02,688.107 1426.58,688.107 1427.14,688.107 1427.7,688.107 1428.26,688.107 1428.82,688.107 1429.38,688.107 1429.94,688.107 1430.5,688.107 1431.05,688.107 1431.61,688.107 1432.17,688.107 1432.73,688.107 1433.29,688.107 1433.85,688.107 1434.41,688.107 1434.97,688.107 1435.53,688.107 1436.09,688.107 1436.65,688.107 1437.21,688.107 1437.77,688.107 1438.33,688.107 1438.88,688.107 1439.44,688.107 1440,688.107 1440.56,688.107 1441.12,688.107 1441.68,688.107 1442.24,688.107 1442.8,688.107 1443.36,688.107 1443.92,688.107 1444.48,688.107 1445.04,688.107 1445.6,688.107 1446.15,688.107 1446.71,688.107 1447.27,688.107 1447.83,688.107 1448.39,688.107 1448.95,688.107 1449.51,688.107 1450.07,688.107 1450.63,688.107 1451.19,688.107 1451.75,688.107 1452.31,688.107 1452.87,688.107 1453.42,688.107 1453.98,688.107 1454.54,688.107 1455.1,688.107 1455.66,688.107 1456.22,688.107 1456.78,688.107 1457.34,688.107 1457.9,688.107 1458.46,688.107 1459.02,688.107 1459.58,688.107 1460.14,688.107 1460.7,688.107 1461.25,688.107 1461.81,688.107 1462.37,688.107 1462.93,688.107 1463.49,688.107 1464.05,688.107 1464.61,688.107 1465.17,688.107 1465.73,688.107 1466.29,688.107 1466.85,688.107 1467.41,688.107 1467.97,688.107 1468.52,688.107 1469.08,688.107 1469.64,688.107 1470.2,688.107 1470.76,688.107 1471.32,688.107 1471.88,688.107 1472.44,688.107 1473,688.107 1473.56,688.107 1474.12,688.107 1474.68,688.107 1475.24,688.107 1475.79,688.107 1476.35,688.107 1476.91,688.107 1477.47,688.107 1478.03,688.107 1478.59,688.107 1479.15,688.107 1479.71,688.107 1480.27,688.107 1480.83,688.107 1481.39,688.107 1481.95,688.107 1482.51,688.107 1483.07,688.107 1483.62,688.107 1484.18,688.107 1484.74,688.107 1485.3,688.107 1485.86,688.107 1486.42,688.107 1486.98,688.107 1487.54,688.107 1488.1,688.107 1488.66,688.107 1489.22,688.107 1489.78,688.107 1490.34,688.107 1490.89,688.107 1491.45,688.107 1492.01,688.107 1492.57,688.107 1493.13,688.107 1493.69,688.107 1494.25,688.107 1494.81,688.107 1495.37,688.107 1495.93,688.107 1496.49,688.107 1497.05,688.107 1497.61,688.107 1498.16,688.107 1498.72,688.107 1499.28,688.107 1499.84,688.107 1500.4,688.107 1500.96,688.107 1501.52,688.107 1502.08,688.107 1502.64,688.107 1503.2,688.107 1503.76,688.107 1504.32,688.107 1504.88,688.107 1505.44,688.107 1505.99,688.107 1506.55,688.107 1507.11,688.107 1507.67,688.107 1508.23,688.107 1508.79,688.107 1509.35,688.107 1509.91,688.107 1510.47,688.107 1511.03,688.107 1511.59,688.107 1512.15,688.107 1512.71,688.107 1513.26,688.107 1513.82,688.107 1514.38,688.107 1514.94,688.107 1515.5,688.107 1516.06,688.107 1516.62,688.107 1517.18,688.107 1517.74,688.107 1518.3,688.107 1518.86,688.107 1519.42,688.107 1519.98,688.107 1520.53,688.107 1521.09,688.107 1521.65,688.107 1522.21,688.107 1522.77,688.107 1523.33,688.107 1523.89,688.107 1524.45,688.107 1525.01,688.107 1525.57,688.107 1526.13,688.107 1526.69,688.107 1527.25,688.107 1527.81,688.107 1528.36,688.107 1528.92,688.107 1529.48,688.107 1530.04,688.107 1530.6,688.107 1531.16,688.107 1531.72,688.107 1532.28,688.107 1532.84,688.107 1533.4,688.107 1533.96,688.107 1534.52,688.107 1535.08,688.107 1535.63,688.107 1536.19,688.107 1536.75,688.107 1537.31,688.107 1537.87,688.107 1538.43,688.107 1538.99,688.107 1539.55,688.107 1540.11,688.107 1540.67,688.107 1541.23,688.107 1541.79,688.107 1542.35,688.107 1542.9,688.107 1543.46,688.107 1544.02,688.107 1544.58,688.107 1545.14,688.107 1545.7,688.107 1546.26,688.107 1546.82,688.107 1547.38,688.107 1547.94,688.107 1548.5,688.107 1549.06,688.107 1549.62,688.107 1550.18,688.107 1550.73,688.107 1551.29,688.107 1551.85,688.107 1552.41,688.107 1552.97,688.107 1553.53,688.107 1554.09,688.107 1554.65,688.107 1555.21,688.107 1555.77,688.107 1556.33,688.107 1556.89,688.107 1557.45,688.107 1558,688.107 1558.56,688.107 1559.12,688.107 1559.68,688.107 1560.24,688.107 1560.8,688.107 1561.36,688.107 1561.92,688.107 1562.48,688.107 1563.04,688.107 1563.6,688.107 1564.16,688.107 1564.72,688.107 1565.28,688.107 1565.83,688.107 1566.39,688.107 1566.95,688.107 1567.51,688.107 1568.07,688.107 1568.63,688.107 1569.19,688.107 1569.75,688.107 1570.31,688.107 1570.87,688.107 1571.43,688.107 1571.99,688.107 1572.55,688.107 1573.1,688.107 1573.66,688.107 1574.22,688.107 1574.78,688.107 1575.34,688.107 1575.9,688.107 1576.46,688.107 1577.02,688.107 1577.58,688.107 1578.14,688.107 1578.7,688.107 1579.26,688.107 1579.82,688.107 1580.37,688.107 1580.93,688.107 1581.49,688.107 1582.05,688.107 1582.61,688.107 1583.17,688.107 1583.73,688.107 1584.29,688.107 1584.85,688.107 1585.41,688.107 1585.97,688.107 1586.53,688.107 1587.09,688.107 1587.65,688.107 1588.2,688.107 1588.76,688.107 1589.32,688.107 1589.88,688.107 1590.44,688.107 1591,688.107 1591.56,688.107 1592.12,688.107 1592.68,688.107 1593.24,688.107 1593.8,688.107 1594.36,688.107 1594.92,688.107 1595.47,688.107 1596.03,688.107 1596.59,688.107 1597.15,688.107 1597.71,688.107 1598.27,688.107 1598.83,688.107 1599.39,688.107 1599.95,688.107 1600.51,688.107 1601.07,688.107 1601.63,688.107 1602.19,688.107 1602.74,688.107 1603.3,688.107 1603.86,688.107 1604.42,688.107 1604.98,688.107 1605.54,688.107 1606.1,688.107 1606.66,688.107 1607.22,688.107 1607.78,688.107 1608.34,688.107 1608.9,688.107 1609.46,688.107 1610.02,688.107 1610.57,688.107 1611.13,688.107 1611.69,688.107 1612.25,688.107 1612.81,688.107 1613.37,688.107 1613.93,688.107 1614.49,688.107 1615.05,688.107 1615.61,688.107 1616.17,688.107 1616.73,688.107 1617.29,688.107 1617.84,688.107 1618.4,688.107 1618.96,688.107 1619.52,688.107 1620.08,688.107 1620.64,688.107 1621.2,688.107 1621.76,688.107 1622.32,688.107 1622.88,688.107 1623.44,688.107 1624,688.107 1624.56,688.107 1625.11,688.107 1625.67,688.107 1626.23,688.107 1626.79,688.107 1627.35,688.107 1627.91,688.107 1628.47,688.107 1629.03,688.107 1629.59,688.107 1630.15,688.107 1630.71,688.107 1631.27,688.107 1631.83,688.107 1632.39,688.107 1632.94,688.107 1633.5,688.107 1634.06,688.107 1634.62,688.107 1635.18,688.107 1635.74,688.107 1636.3,688.107 1636.86,688.107 1637.42,688.107 1637.98,688.107 1638.54,688.107 1639.1,688.107 1639.66,688.107 1640.21,688.107 1640.77,688.107 1641.33,688.107 1641.89,688.107 1642.45,688.107 1643.01,688.107 1643.57,688.107 1644.13,688.107 1644.69,688.107 1645.25,688.107 1645.81,688.107 1646.37,688.107 1646.93,688.107 1647.48,688.107 1648.04,688.107 1648.6,688.107 1649.16,688.107 1649.72,688.107 1650.28,688.107 1650.84,688.107 1651.4,688.107 1651.96,688.107 1652.52,688.107 1653.08,688.107 1653.64,688.107 1654.2,688.107 1654.76,688.107 1655.31,688.107 1655.87,688.107 1656.43,688.107 1656.99,688.107 1657.55,688.107 1658.11,688.107 1658.67,688.107 1659.23,688.107 1659.79,688.107 1660.35,688.107 1660.91,688.107 1661.47,688.107 1662.03,688.107 1662.58,688.107 1663.14,688.107 1663.7,688.107 1664.26,688.107 1664.82,688.107 1665.38,688.107 1665.94,688.107 1666.5,688.107 1667.06,688.107 1667.62,688.107 1668.18,688.107 1668.74,688.107 1669.3,688.107 1669.85,688.107 1670.41,688.107 1670.97,688.107 1671.53,688.107 1672.09,688.107 1672.65,688.107 1673.21,688.107 1673.77,688.107 1674.33,688.107 1674.89,688.107 1675.45,688.107 1676.01,688.107 1676.57,688.107 1677.13,688.107 1677.68,688.107 1678.24,688.107 1678.8,688.107 1679.36,688.107 1679.92,688.107 1680.48,688.107 1681.04,688.107 1681.6,688.107 1682.16,688.107 1682.72,688.107 1683.28,688.107 1683.84,688.107 1684.4,688.107 1684.95,688.107 1685.51,688.107 1686.07,688.107 1686.63,688.107 1687.19,688.107 1687.75,688.107 1688.31,688.107 1688.87,688.107 1689.43,688.107 1689.99,688.107 1690.55,688.107 1691.11,688.107 1691.67,688.107 1692.23,688.107 1692.78,688.107 1693.34,688.107 1693.9,688.107 1694.46,688.107 1695.02,688.107 1695.58,688.107 1696.14,688.107 1696.7,688.107 1697.26,688.107 1697.82,688.107 1698.38,688.107 1698.94,688.107 1699.5,688.107 1700.05,688.107 1700.61,688.107 1701.17,688.107 1701.73,688.107 1702.29,688.107 1702.85,688.107 1703.41,688.107 1703.97,688.107 1704.53,688.107 1705.09,688.107 1705.65,688.107 1706.21,688.107 1706.77,688.107 1707.32,688.107 1707.88,688.107 1708.44,688.107 1709,688.107 1709.56,688.107 1710.12,688.107 1710.68,688.107 1711.24,688.107 1711.8,688.107 1712.36,688.107 1712.92,688.107 1713.48,688.107 1714.04,688.107 1714.6,688.107 1715.15,688.107 1715.71,688.107 1716.27,688.107 1716.83,688.107 1717.39,688.107 1717.95,688.107 1718.51,688.107 1719.07,688.107 1719.63,688.107 1720.19,688.107 1720.75,688.107 1721.31,688.107 1721.87,688.107 1722.42,688.107 1722.98,688.107 1723.54,688.107 1724.1,688.107 1724.66,688.107 1725.22,688.107 1725.78,688.107 1726.34,688.107 1726.9,688.107 1727.46,688.107 1728.02,688.107 1728.58,688.107 1729.14,688.107 1729.69,688.107 1730.25,688.107 1730.81,688.107 1731.37,688.107 1731.93,688.107 1732.49,688.107 1733.05,688.107 1733.61,688.107 1734.17,688.107 1734.73,688.107 1735.29,688.107 1735.85,688.107 1736.41,688.107 1736.97,688.107 1737.52,688.107 1738.08,688.107 1738.64,688.107 1739.2,688.107 1739.76,688.107 1740.32,688.107 1740.88,688.107 1741.44,688.107 1742,688.107 1742.56,688.107 1743.12,688.107 1743.68,688.107 1744.24,688.107 1744.79,688.107 1745.35,688.107 1745.91,688.107 1746.47,688.107 1747.03,688.107 1747.59,688.107 1748.15,688.107 1748.71,688.107 1749.27,688.107 1749.83,688.107 1750.39,688.107 1750.95,688.107 1751.51,688.107 1752.06,688.107 1752.62,688.107 1753.18,688.107 1753.74,688.107 1754.3,688.107 1754.86,688.107 1755.42,688.107 1755.98,688.107 1756.54,688.107 1757.1,688.107 1757.66,688.107 1758.22,688.107 1758.78,688.107 1759.34,688.107 1759.89,688.107 1760.45,688.107 1761.01,688.107 1761.57,688.107 1762.13,688.107 1762.69,688.107 1763.25,688.107 1763.81,688.107 1764.37,688.107 1764.93,688.107 1765.49,688.107 1766.05,688.107 1766.61,688.107 1767.16,688.107 1767.72,688.107 1768.28,688.107 1768.84,688.107 1769.4,688.107 1769.96,688.107 1770.52,688.107 1771.08,688.107 1771.64,688.107 1772.2,688.107 1772.76,688.107 1773.32,688.107 1773.88,688.107 1774.43,688.107 1774.99,688.107 1775.55,688.107 1776.11,688.107 1776.67,688.107 1777.23,688.107 1777.79,688.107 1778.35,688.107 1778.91,688.107 1779.47,688.107 1780.03,688.107 1780.59,688.107 1781.15,688.107 1781.71,688.107 1782.26,688.107 1782.82,688.107 1783.38,688.107 1783.94,688.107 1784.5,688.107 1785.06,688.107 1785.62,688.107 1786.18,688.107 1786.74,688.107 1787.3,688.107 1787.86,688.107 1788.42,688.107 1788.98,688.107 1789.53,688.107 1790.09,688.107 1790.65,688.107 1791.21,688.107 1791.77,688.107 1792.33,688.107 1792.89,688.107 1793.45,688.107 1794.01,688.107 1794.57,688.107 1795.13,688.107 1795.69,688.107 1796.25,688.107 1796.8,688.107 1797.36,688.107 1797.92,688.107 1798.48,688.107 1799.04,688.107 1799.6,688.107 1800.16,688.107 1800.72,688.107 1801.28,688.107 1801.84,688.107 1802.4,688.107 1802.96,688.107 1803.52,688.107 1804.08,688.107 1804.63,688.107 1805.19,688.107 1805.75,688.107 1806.31,688.107 1806.87,688.107 1807.43,688.107 1807.99,688.107 1808.55,688.107 1809.11,688.107 1809.67,688.107 1810.23,688.107 1810.79,688.107 1811.35,688.107 1811.9,688.107 1812.46,688.107 1813.02,688.107 1813.58,688.107 1814.14,688.107 1814.7,688.107 1815.26,688.107 1815.82,688.107 1816.38,688.107 1816.94,688.107 1817.5,688.107 1818.06,688.107 1818.62,688.107 1819.18,688.107 1819.73,688.107 1820.29,688.107 1820.85,688.107 1821.41,688.107 1821.97,688.107 1822.53,688.107 1823.09,688.107 1823.65,688.107 1824.21,688.107 1824.77,688.107 1825.33,688.107 1825.89,688.107 1826.45,688.107 1827,688.107 1827.56,688.107 1828.12,688.107 1828.68,688.107 1829.24,688.107 1829.8,688.107 1830.36,688.107 1830.92,688.107 1831.48,688.107 1832.04,688.107 1832.6,688.107 1833.16,688.107 1833.72,688.107 1834.27,688.107 1834.83,688.107 1835.39,688.107 1835.95,688.107 1836.51,688.107 1837.07,688.107 1837.63,688.107 1838.19,688.107 \"/>\n<path clip-path=\"url(#clip203)\" d=\"M720.247 685.221 L720.806 685.221 L721.365 685.221 L721.924 685.221 L722.484 685.221 L723.043 685.221 L723.602 685.221 L724.161 685.221 L724.721 685.221 L725.28 685.221 L725.839 685.221 L726.398 685.221 L726.958 685.221 L727.517 685.221 L728.076 685.221 L728.635 685.221 L729.195 685.221 L729.754 685.221 L730.313 685.221 L730.872 685.221 L731.432 685.221 L731.991 685.221 L732.55 685.221 L733.109 685.221 L733.669 685.221 L734.228 685.221 L734.787 685.221 L735.346 685.221 L735.906 685.221 L736.465 685.221 L737.024 685.221 L737.583 685.221 L738.143 685.221 L738.702 685.221 L739.261 685.221 L739.82 685.221 L740.38 685.221 L740.939 685.221 L741.498 685.221 L742.057 685.221 L742.617 685.221 L743.176 685.221 L743.735 685.221 L744.294 685.221 L744.854 685.221 L745.413 685.221 L745.972 685.221 L746.531 685.221 L747.091 685.221 L747.65 685.221 L748.209 685.221 L748.768 685.221 L749.328 685.221 L749.887 685.221 L750.446 685.221 L751.005 685.221 L751.565 685.221 L752.124 685.221 L752.683 685.221 L753.242 685.221 L753.802 685.221 L754.361 685.221 L754.92 685.221 L755.479 685.221 L756.039 685.221 L756.598 685.221 L757.157 685.221 L757.716 685.221 L758.276 685.221 L758.835 685.221 L759.394 685.221 L759.953 685.221 L760.513 685.221 L761.072 685.221 L761.631 685.221 L762.19 685.221 L762.75 685.221 L763.309 685.221 L763.868 685.221 L764.427 685.221 L764.987 685.221 L765.546 685.221 L766.105 685.221 L766.664 685.221 L767.224 685.221 L767.783 685.221 L768.342 685.221 L768.901 685.221 L769.461 685.221 L770.02 685.221 L770.579 685.221 L771.138 685.221 L771.698 685.221 L772.257 685.221 L772.816 685.221 L773.375 685.221 L773.935 685.221 L774.494 685.221 L775.053 685.221 L775.612 685.221 L776.172 685.221 L776.731 685.221 L777.29 685.221 L777.849 685.221 L778.409 685.221 L778.968 685.221 L779.527 685.221 L780.086 685.221 L780.646 685.221 L781.205 685.221 L781.764 685.221 L782.323 685.221 L782.883 685.221 L783.442 685.221 L784.001 685.221 L784.56 685.221 L785.12 685.221 L785.679 685.221 L786.238 685.221 L786.797 685.221 L787.357 685.221 L787.916 685.221 L788.475 685.221 L789.034 685.221 L789.594 685.221 L790.153 685.221 L790.712 685.221 L791.271 685.221 L791.831 685.221 L792.39 685.221 L792.949 685.221 L793.508 685.221 L794.068 685.221 L794.627 685.221 L795.186 685.221 L795.745 685.221 L796.305 685.221 L796.864 685.221 L797.423 685.221 L797.982 685.221 L798.542 685.221 L799.101 685.221 L799.66 685.221 L800.219 685.221 L800.779 685.221 L801.338 685.221 L801.897 685.221 L802.456 685.221 L803.016 685.221 L803.575 685.221 L804.134 685.221 L804.693 685.221 L805.253 685.221 L805.812 685.221 L806.371 685.221 L806.931 685.221 L807.49 685.221 L808.049 685.221 L808.608 685.221 L809.168 685.221 L809.727 685.221 L810.286 685.221 L810.845 685.221 L811.405 685.221 L811.964 685.221 L812.523 685.221 L813.082 685.221 L813.642 685.221 L814.201 685.221 L814.76 685.221 L815.319 685.221 L815.879 685.221 L816.438 685.221 L816.997 685.221 L817.556 685.221 L818.116 685.221 L818.675 685.221 L819.234 685.221 L819.793 685.221 L820.353 685.221 L820.912 685.221 L821.471 685.221 L822.03 685.221 L822.59 685.221 L823.149 685.221 L823.708 685.221 L824.267 685.221 L824.827 685.221 L825.386 685.221 L825.945 685.221 L826.504 685.221 L827.064 685.221 L827.623 685.221 L828.182 685.221 L828.741 685.221 L829.301 685.221 L829.86 685.221 L830.419 685.221 L830.978 685.221 L831.538 685.221 L832.097 685.221 L832.656 685.221 L833.215 685.221 L833.775 685.221 L834.334 685.221 L834.893 685.221 L835.452 685.221 L836.012 685.221 L836.571 685.221 L837.13 685.221 L837.689 685.221 L838.249 685.221 L838.808 685.221 L839.367 685.221 L839.926 685.221 L840.486 685.221 L841.045 685.221 L841.604 685.221 L842.163 685.221 L842.723 685.221 L843.282 685.221 L843.841 685.221 L844.4 685.221 L844.96 685.221 L845.519 685.221 L846.078 685.221 L846.637 685.221 L847.197 685.221 L847.756 685.221 L848.315 685.221 L848.874 685.221 L849.434 685.221 L849.993 685.221 L850.552 685.221 L851.111 685.221 L851.671 685.221 L852.23 685.221 L852.789 685.221 L853.348 685.221 L853.908 685.221 L854.467 685.221 L855.026 685.221 L855.585 685.221 L856.145 685.221 L856.704 685.221 L857.263 685.221 L857.822 685.221 L858.382 685.221 L858.941 685.221 L859.5 685.221 L860.059 685.221 L860.619 685.221 L861.178 685.221 L861.737 685.221 L862.296 685.221 L862.856 685.221 L863.415 685.221 L863.974 685.221 L864.533 685.221 L865.093 685.221 L865.652 685.221 L866.211 685.221 L866.77 685.221 L867.33 685.221 L867.889 685.221 L868.448 685.221 L869.007 685.221 L869.567 685.221 L870.126 685.221 L870.685 685.221 L871.244 685.221 L871.804 685.221 L872.363 685.221 L872.922 685.221 L873.481 685.221 L874.041 685.221 L874.6 685.221 L875.159 685.221 L875.718 685.221 L876.278 685.221 L876.837 685.221 L877.396 685.221 L877.955 685.221 L878.515 685.221 L879.074 685.221 L879.633 685.221 L880.192 685.221 L880.752 685.221 L881.311 685.221 L881.87 685.221 L882.429 685.221 L882.989 685.221 L883.548 685.221 L884.107 685.221 L884.666 685.221 L885.226 685.221 L885.785 685.221 L886.344 685.221 L886.903 685.221 L887.463 685.221 L888.022 685.221 L888.581 685.221 L889.14 685.221 L889.7 685.221 L890.259 685.221 L890.818 685.221 L891.377 685.221 L891.937 685.221 L892.496 685.221 L893.055 685.221 L893.614 685.221 L894.174 685.221 L894.733 685.221 L895.292 685.221 L895.851 685.221 L896.411 685.221 L896.97 685.221 L897.529 685.221 L898.088 685.221 L898.648 685.221 L899.207 685.221 L899.766 685.221 L900.325 685.221 L900.885 685.221 L901.444 685.221 L902.003 685.221 L902.562 685.221 L903.122 685.221 L903.681 685.221 L904.24 685.221 L904.799 685.221 L905.359 685.221 L905.918 685.221 L906.477 685.221 L907.036 685.221 L907.596 685.221 L908.155 685.221 L908.714 685.221 L909.273 685.221 L909.833 685.221 L910.392 685.221 L910.951 685.221 L911.51 685.221 L912.07 685.221 L912.629 685.221 L913.188 685.221 L913.747 685.221 L914.307 685.221 L914.866 685.221 L915.425 685.221 L915.984 685.221 L916.544 685.221 L917.103 685.221 L917.662 685.221 L918.221 685.221 L918.781 685.221 L919.34 685.221 L919.899 685.221 L920.458 685.221 L921.018 685.221 L921.577 685.221 L922.136 685.221 L922.695 685.221 L923.255 685.221 L923.814 685.221 L924.373 685.221 L924.932 685.221 L925.492 685.221 L926.051 685.221 L926.61 685.221 L927.169 685.221 L927.729 685.221 L928.288 685.221 L928.847 685.221 L929.406 685.221 L929.966 685.221 L930.525 685.221 L931.084 685.221 L931.644 685.221 L932.203 685.221 L932.762 685.221 L933.321 685.221 L933.881 685.221 L934.44 685.221 L934.999 685.221 L935.558 685.221 L936.118 685.221 L936.677 685.221 L937.236 685.221 L937.795 685.221 L938.355 685.221 L938.914 685.221 L939.473 685.221 L940.032 685.221 L940.592 685.221 L941.151 685.221 L941.71 685.221 L942.269 685.221 L942.829 685.221 L943.388 685.221 L943.947 685.221 L944.506 685.221 L945.066 685.221 L945.625 685.221 L946.184 685.221 L946.743 685.221 L947.303 685.221 L947.862 685.221 L948.421 685.221 L948.98 685.221 L949.54 685.221 L950.099 685.221 L950.658 685.221 L951.217 685.221 L951.777 685.221 L952.336 685.221 L952.895 685.221 L953.454 685.221 L954.014 685.221 L954.573 685.221 L955.132 685.221 L955.691 685.221 L956.251 685.221 L956.81 685.221 L957.369 685.221 L957.928 685.221 L958.488 685.221 L959.047 685.221 L959.606 685.221 L960.165 685.221 L960.725 685.221 L961.284 685.221 L961.843 685.221 L962.402 685.221 L962.962 685.221 L963.521 685.221 L964.08 685.221 L964.639 685.221 L965.199 685.221 L965.758 685.221 L966.317 685.221 L966.876 685.221 L967.436 685.221 L967.995 685.221 L968.554 685.221 L969.113 685.221 L969.673 685.221 L970.232 685.221 L970.791 685.221 L971.35 685.221 L971.91 685.221 L972.469 685.221 L973.028 685.221 L973.587 685.221 L974.147 685.221 L974.706 685.221 L975.265 685.221 L975.824 685.221 L976.384 685.221 L976.943 685.221 L977.502 685.221 L978.061 685.221 L978.621 685.221 L979.18 685.221 L979.739 685.221 L980.298 685.221 L980.858 685.221 L981.417 685.221 L981.976 685.221 L982.535 685.221 L983.095 685.221 L983.654 685.221 L984.213 685.221 L984.772 685.221 L985.332 685.221 L985.891 685.221 L986.45 685.221 L987.009 685.221 L987.569 685.221 L988.128 685.221 L988.687 685.221 L989.246 685.221 L989.806 685.221 L990.365 685.221 L990.924 685.221 L991.483 685.221 L992.043 685.221 L992.602 685.221 L993.161 685.221 L993.72 685.221 L994.28 685.221 L994.839 685.221 L995.398 685.221 L995.957 685.221 L996.517 685.221 L997.076 685.221 L997.635 685.221 L998.194 685.221 L998.754 685.221 L999.313 685.221 L999.872 685.221 L1000.43 685.221 L1000.99 685.221 L1001.55 685.221 L1002.11 685.221 L1002.67 685.221 L1003.23 685.221 L1003.79 685.221 L1004.35 685.221 L1004.91 685.221 L1005.46 685.221 L1006.02 685.221 L1006.58 685.221 L1007.14 685.221 L1007.7 685.221 L1008.26 685.221 L1008.82 685.221 L1009.38 685.221 L1009.94 685.221 L1010.5 685.221 L1011.06 685.221 L1011.62 685.221 L1012.18 685.221 L1012.73 685.221 L1013.29 685.221 L1013.85 685.221 L1014.41 685.221 L1014.97 685.221 L1015.53 685.221 L1016.09 685.221 L1016.65 685.221 L1017.21 685.221 L1017.77 685.221 L1018.33 685.221 L1018.89 685.221 L1019.45 685.221 L1020.01 685.221 L1020.56 685.221 L1021.12 685.221 L1021.68 685.221 L1022.24 685.221 L1022.8 685.221 L1023.36 685.221 L1023.92 685.221 L1024.48 685.221 L1025.04 685.221 L1025.6 685.221 L1026.16 685.221 L1026.72 685.221 L1027.28 685.221 L1027.83 685.221 L1028.39 685.221 L1028.95 685.221 L1029.51 685.221 L1030.07 685.221 L1030.63 685.221 L1031.19 685.221 L1031.75 685.221 L1032.31 685.221 L1032.87 685.221 L1033.43 685.221 L1033.99 685.221 L1034.55 685.221 L1035.1 685.221 L1035.66 685.221 L1036.22 685.221 L1036.78 685.221 L1037.34 685.221 L1037.9 685.221 L1038.46 685.221 L1039.02 685.221 L1039.58 685.221 L1040.14 685.221 L1040.7 685.221 L1041.26 685.221 L1041.82 685.221 L1042.38 685.221 L1042.93 685.221 L1043.49 685.221 L1044.05 685.221 L1044.61 685.221 L1045.17 685.221 L1045.73 685.221 L1046.29 685.221 L1046.85 685.221 L1047.41 685.221 L1047.97 685.221 L1048.53 685.221 L1049.09 685.221 L1049.65 685.221 L1050.2 685.221 L1050.76 685.221 L1051.32 685.221 L1051.88 685.221 L1052.44 685.221 L1053 685.221 L1053.56 685.221 L1054.12 685.221 L1054.68 685.221 L1055.24 685.221 L1055.8 685.221 L1056.36 685.221 L1056.92 685.221 L1057.48 685.221 L1058.03 685.221 L1058.59 685.221 L1059.15 685.221 L1059.71 685.221 L1060.27 685.221 L1060.83 685.221 L1061.39 685.221 L1061.95 685.221 L1062.51 685.221 L1063.07 685.221 L1063.63 685.221 L1064.19 685.221 L1064.75 685.221 L1065.3 685.221 L1065.86 685.221 L1066.42 685.221 L1066.98 685.221 L1067.54 685.221 L1068.1 685.221 L1068.66 685.221 L1069.22 685.221 L1069.78 685.221 L1070.34 685.221 L1070.9 685.221 L1071.46 685.221 L1072.02 685.221 L1072.57 685.221 L1073.13 685.221 L1073.69 685.221 L1074.25 685.221 L1074.81 685.221 L1075.37 685.221 L1075.93 685.221 L1076.49 685.221 L1077.05 685.221 L1077.61 685.221 L1078.17 685.221 L1078.73 685.221 L1079.29 685.221 L1079.85 685.221 L1080.4 685.221 L1080.96 685.221 L1081.52 685.221 L1082.08 685.221 L1082.64 685.221 L1083.2 685.221 L1083.76 685.221 L1084.32 685.221 L1084.88 685.221 L1085.44 685.221 L1086 685.221 L1086.56 685.221 L1087.12 685.221 L1087.67 685.221 L1088.23 685.221 L1088.79 685.221 L1089.35 685.221 L1089.91 685.221 L1090.47 685.221 L1091.03 685.221 L1091.59 685.221 L1092.15 685.221 L1092.71 685.221 L1093.27 685.221 L1093.83 685.221 L1094.39 685.221 L1094.94 685.221 L1095.5 685.221 L1096.06 685.221 L1096.62 685.221 L1097.18 685.221 L1097.74 685.221 L1098.3 685.221 L1098.86 685.221 L1099.42 685.221 L1099.98 685.221 L1100.54 685.221 L1101.1 685.221 L1101.66 685.221 L1102.22 685.221 L1102.77 685.221 L1103.33 685.221 L1103.89 685.221 L1104.45 685.221 L1105.01 685.221 L1105.57 685.221 L1106.13 685.221 L1106.69 685.221 L1107.25 685.221 L1107.81 685.221 L1108.37 685.221 L1108.93 685.221 L1109.49 685.221 L1110.04 685.221 L1110.6 685.221 L1111.16 685.221 L1111.72 685.221 L1112.28 685.221 L1112.84 685.221 L1113.4 685.221 L1113.96 685.221 L1114.52 685.221 L1115.08 685.221 L1115.64 685.221 L1116.2 685.221 L1116.76 685.221 L1117.31 685.221 L1117.87 685.221 L1118.43 685.221 L1118.99 685.221 L1119.55 685.221 L1120.11 685.221 L1120.67 685.221 L1121.23 685.221 L1121.79 685.221 L1122.35 685.221 L1122.91 685.221 L1123.47 685.221 L1124.03 685.221 L1124.59 685.221 L1125.14 685.221 L1125.7 685.221 L1126.26 685.221 L1126.82 685.221 L1127.38 685.221 L1127.94 685.221 L1128.5 685.221 L1129.06 685.221 L1129.62 685.221 L1130.18 685.221 L1130.74 685.221 L1131.3 685.221 L1131.86 685.221 L1132.41 685.221 L1132.97 685.221 L1133.53 685.221 L1134.09 685.221 L1134.65 685.221 L1135.21 685.221 L1135.77 685.221 L1136.33 685.221 L1136.89 685.221 L1137.45 685.221 L1138.01 685.221 L1138.57 685.221 L1139.13 685.221 L1139.68 685.221 L1140.24 685.221 L1140.8 685.221 L1141.36 685.221 L1141.92 685.221 L1142.48 685.221 L1143.04 685.221 L1143.6 685.221 L1144.16 685.221 L1144.72 685.221 L1145.28 685.221 L1145.84 685.221 L1146.4 685.221 L1146.96 685.221 L1147.51 685.221 L1148.07 685.221 L1148.63 685.221 L1149.19 685.221 L1149.75 685.221 L1150.31 685.221 L1150.87 685.221 L1151.43 685.221 L1151.99 685.221 L1152.55 685.221 L1153.11 685.221 L1153.67 685.221 L1154.23 685.221 L1154.78 685.221 L1155.34 685.221 L1155.9 685.221 L1156.46 685.221 L1157.02 685.221 L1157.58 685.221 L1158.14 685.221 L1158.7 685.221 L1159.26 685.221 L1159.82 685.221 L1160.38 685.221 L1160.94 685.221 L1161.5 685.221 L1162.05 685.221 L1162.61 685.221 L1163.17 685.221 L1163.73 685.221 L1164.29 685.221 L1164.85 685.221 L1165.41 685.221 L1165.97 685.221 L1166.53 685.221 L1167.09 685.221 L1167.65 685.221 L1168.21 685.221 L1168.77 685.221 L1169.33 685.221 L1169.88 685.221 L1170.44 685.221 L1171 685.221 L1171.56 685.221 L1172.12 685.221 L1172.68 685.221 L1173.24 685.221 L1173.8 685.221 L1174.36 685.221 L1174.92 685.221 L1175.48 685.221 L1176.04 685.221 L1176.6 685.221 L1177.15 685.221 L1177.71 685.221 L1178.27 685.221 L1178.83 685.221 L1179.39 685.221 L1179.95 685.221 L1180.51 685.221 L1181.07 685.221 L1181.63 685.221 L1182.19 685.221 L1182.75 685.221 L1183.31 685.221 L1183.87 685.221 L1184.43 685.221 L1184.98 685.221 L1185.54 685.221 L1186.1 685.221 L1186.66 685.221 L1187.22 685.221 L1187.78 685.221 L1188.34 685.221 L1188.9 685.221 L1189.46 685.221 L1190.02 685.221 L1190.58 685.221 L1191.14 685.221 L1191.7 685.221 L1192.25 685.221 L1192.81 685.221 L1193.37 685.221 L1193.93 685.221 L1194.49 685.221 L1195.05 685.221 L1195.61 685.221 L1196.17 685.221 L1196.73 685.221 L1197.29 685.221 L1197.85 685.221 L1198.41 685.221 L1198.97 685.221 L1199.52 685.221 L1200.08 685.221 L1200.64 685.221 L1201.2 685.221 L1201.76 685.221 L1202.32 685.221 L1202.88 685.221 L1203.44 685.221 L1204 685.221 L1204.56 685.221 L1205.12 685.221 L1205.68 685.221 L1206.24 685.221 L1206.8 685.221 L1207.35 685.221 L1207.91 685.221 L1208.47 685.221 L1209.03 685.221 L1209.59 685.221 L1210.15 685.221 L1210.71 685.221 L1211.27 685.221 L1211.83 685.221 L1212.39 685.221 L1212.95 685.221 L1213.51 685.221 L1214.07 685.221 L1214.62 685.221 L1215.18 685.221 L1215.74 685.221 L1216.3 685.221 L1216.86 685.221 L1217.42 685.221 L1217.98 685.221 L1218.54 685.221 L1219.1 685.221 L1219.66 685.221 L1220.22 685.221 L1220.78 685.221 L1221.34 685.221 L1221.89 685.221 L1222.45 685.221 L1223.01 685.221 L1223.57 685.221 L1224.13 685.221 L1224.69 685.221 L1225.25 685.221 L1225.81 685.221 L1226.37 685.221 L1226.93 685.221 L1227.49 685.221 L1228.05 685.221 L1228.61 685.221 L1229.17 685.221 L1229.72 685.221 L1230.28 685.221 L1230.84 685.221 L1231.4 685.221 L1231.96 685.221 L1232.52 685.221 L1233.08 685.221 L1233.64 685.221 L1234.2 685.221 L1234.76 685.221 L1235.32 685.221 L1235.88 685.221 L1236.44 685.221 L1236.99 685.221 L1237.55 685.221 L1238.11 685.221 L1238.67 685.221 L1239.23 685.221 L1239.79 685.221 L1240.35 685.221 L1240.91 685.221 L1241.47 685.221 L1242.03 685.221 L1242.59 685.221 L1243.15 685.221 L1243.71 685.221 L1244.26 685.221 L1244.82 685.221 L1245.38 685.221 L1245.94 685.221 L1246.5 685.221 L1247.06 685.221 L1247.62 685.221 L1248.18 685.221 L1248.74 685.221 L1249.3 685.221 L1249.86 685.221 L1250.42 685.221 L1250.98 685.221 L1251.54 685.221 L1252.09 685.221 L1252.65 685.221 L1253.21 685.221 L1253.77 685.221 L1254.33 685.221 L1254.89 685.221 L1255.45 685.221 L1256.01 685.221 L1256.57 685.221 L1257.13 685.221 L1257.69 685.221 L1258.25 685.221 L1258.81 685.221 L1259.36 685.221 L1259.92 685.221 L1260.48 685.221 L1261.04 685.221 L1261.6 685.221 L1262.16 685.221 L1262.72 685.221 L1263.28 685.221 L1263.84 685.221 L1264.4 685.221 L1264.96 685.221 L1265.52 685.221 L1266.08 685.221 L1266.63 685.221 L1267.19 685.221 L1267.75 685.221 L1268.31 685.221 L1268.87 685.221 L1269.43 685.221 L1269.99 685.221 L1270.55 685.221 L1271.11 685.221 L1271.67 685.221 L1272.23 685.221 L1272.79 685.221 L1273.35 685.221 L1273.91 685.221 L1274.46 685.221 L1275.02 685.221 L1275.58 685.221 L1276.14 685.221 L1276.7 685.221 L1277.26 685.221 L1277.82 685.221 L1278.38 685.221 L1278.94 685.221 L1279.5 685.221 L1280.06 685.221 L1280.62 685.221 L1281.18 685.221 L1281.73 685.221 L1282.29 685.221 L1282.85 685.221 L1283.41 685.221 L1283.97 685.221 L1284.53 685.221 L1285.09 685.221 L1285.65 685.221 L1286.21 685.221 L1286.77 685.221 L1287.33 685.221 L1287.89 685.221 L1288.45 685.221 L1289 685.221 L1289.56 685.221 L1290.12 685.221 L1290.68 685.221 L1291.24 685.221 L1291.8 685.221 L1292.36 685.221 L1292.92 685.221 L1293.48 685.221 L1294.04 685.221 L1294.6 685.221 L1295.16 685.221 L1295.72 685.221 L1296.28 685.221 L1296.83 685.221 L1297.39 685.221 L1297.95 685.221 L1298.51 685.221 L1299.07 685.221 L1299.63 685.221 L1300.19 685.221 L1300.75 685.221 L1301.31 685.221 L1301.87 685.221 L1302.43 685.221 L1302.99 685.221 L1303.55 685.221 L1304.1 685.221 L1304.66 685.221 L1305.22 685.221 L1305.78 685.221 L1306.34 685.221 L1306.9 685.221 L1307.46 685.221 L1308.02 685.221 L1308.58 685.221 L1309.14 685.221 L1309.7 685.221 L1310.26 685.221 L1310.82 685.221 L1311.38 685.221 L1311.93 685.221 L1312.49 685.221 L1313.05 685.221 L1313.61 685.221 L1314.17 685.221 L1314.73 685.221 L1315.29 685.221 L1315.85 685.221 L1316.41 685.221 L1316.97 685.221 L1317.53 685.221 L1318.09 685.221 L1318.65 685.221 L1319.2 685.221 L1319.76 685.221 L1320.32 685.221 L1320.88 685.221 L1321.44 685.221 L1322 685.221 L1322.56 685.221 L1323.12 685.221 L1323.68 685.221 L1324.24 685.221 L1324.8 685.221 L1325.36 685.221 L1325.92 685.221 L1326.47 685.221 L1327.03 685.221 L1327.59 685.221 L1328.15 685.221 L1328.71 685.221 L1329.27 685.221 L1329.83 685.221 L1330.39 685.221 L1330.95 685.221 L1331.51 685.221 L1332.07 685.221 L1332.63 685.221 L1333.19 685.221 L1333.75 685.221 L1334.3 685.221 L1334.86 685.221 L1335.42 685.221 L1335.98 685.221 L1336.54 685.221 L1337.1 685.221 L1337.66 685.221 L1338.22 685.221 L1338.78 685.221 L1339.34 685.221 L1339.9 685.221 L1340.46 685.221 L1341.02 685.221 L1341.57 685.221 L1342.13 685.221 L1342.69 685.221 L1343.25 685.221 L1343.81 685.221 L1344.37 685.221 L1344.93 685.221 L1345.49 685.221 L1346.05 685.221 L1346.61 685.221 L1347.17 685.221 L1347.73 685.221 L1348.29 685.221 L1348.84 685.221 L1349.4 685.221 L1349.96 685.221 L1350.52 685.221 L1351.08 685.221 L1351.64 685.221 L1352.2 685.221 L1352.76 685.221 L1353.32 685.221 L1353.88 685.221 L1354.44 685.221 L1355 685.221 L1355.56 685.221 L1356.12 685.221 L1356.67 685.221 L1357.23 685.221 L1357.79 685.221 L1358.35 685.221 L1358.91 685.221 L1359.47 685.221 L1360.03 685.221 L1360.59 685.221 L1361.15 685.221 L1361.71 685.221 L1362.27 685.221 L1362.83 685.221 L1363.39 685.221 L1363.94 685.221 L1364.5 685.221 L1365.06 685.221 L1365.62 685.221 L1366.18 685.221 L1366.74 685.221 L1367.3 685.221 L1367.86 685.221 L1368.42 685.221 L1368.98 685.221 L1369.54 685.221 L1370.1 685.221 L1370.66 685.221 L1371.21 685.221 L1371.77 685.221 L1372.33 685.221 L1372.89 685.221 L1373.45 685.221 L1374.01 685.221 L1374.57 685.221 L1375.13 685.221 L1375.69 685.221 L1376.25 685.221 L1376.81 685.221 L1377.37 685.221 L1377.93 685.221 L1378.49 685.221 L1379.04 685.221 L1379.6 685.221 L1380.16 685.221 L1380.72 685.221 L1381.28 685.221 L1381.84 685.221 L1382.4 685.221 L1382.96 685.221 L1383.52 685.221 L1384.08 685.221 L1384.64 685.221 L1385.2 685.221 L1385.76 685.221 L1386.31 685.221 L1386.87 685.221 L1387.43 685.221 L1387.99 685.221 L1388.55 685.221 L1389.11 685.221 L1389.67 685.221 L1390.23 685.221 L1390.79 685.221 L1391.35 685.221 L1391.91 685.221 L1392.47 685.221 L1393.03 685.221 L1393.58 685.221 L1394.14 685.221 L1394.7 685.221 L1395.26 685.221 L1395.82 685.221 L1396.38 685.221 L1396.94 685.221 L1397.5 685.221 L1398.06 685.221 L1398.62 685.221 L1399.18 685.221 L1399.74 685.221 L1400.3 685.221 L1400.86 685.221 L1401.41 685.221 L1401.97 685.221 L1402.53 685.221 L1403.09 685.221 L1403.65 685.221 L1404.21 685.221 L1404.77 685.221 L1405.33 685.221 L1405.89 685.221 L1406.45 685.221 L1407.01 685.221 L1407.57 685.221 L1408.13 685.221 L1408.68 685.221 L1409.24 685.221 L1409.8 685.221 L1410.36 685.221 L1410.92 685.221 L1411.48 685.221 L1412.04 685.221 L1412.6 685.221 L1413.16 685.221 L1413.72 685.221 L1414.28 685.221 L1414.84 685.221 L1415.4 685.221 L1415.95 685.221 L1416.51 685.221 L1417.07 685.221 L1417.63 685.221 L1418.19 685.221 L1418.75 685.221 L1419.31 685.221 L1419.87 685.221 L1420.43 685.221 L1420.99 685.221 L1421.55 685.221 L1422.11 685.221 L1422.67 685.221 L1423.23 685.221 L1423.78 685.221 L1424.34 685.221 L1424.9 685.221 L1425.46 685.221 L1426.02 685.221 L1426.58 685.221 L1427.14 685.221 L1427.7 685.221 L1428.26 685.221 L1428.82 685.221 L1429.38 685.221 L1429.94 685.221 L1430.5 685.221 L1431.05 685.221 L1431.61 685.221 L1432.17 685.221 L1432.73 685.221 L1433.29 685.221 L1433.85 685.221 L1434.41 685.221 L1434.97 685.221 L1435.53 685.221 L1436.09 685.221 L1436.65 685.221 L1437.21 685.221 L1437.77 685.221 L1438.33 685.221 L1438.88 685.221 L1439.44 685.221 L1440 685.221 L1440.56 685.221 L1441.12 685.221 L1441.68 685.221 L1442.24 685.221 L1442.8 685.221 L1443.36 685.221 L1443.92 685.221 L1444.48 685.221 L1445.04 685.221 L1445.6 685.221 L1446.15 685.221 L1446.71 685.221 L1447.27 685.221 L1447.83 685.221 L1448.39 685.221 L1448.95 685.221 L1449.51 685.221 L1450.07 685.221 L1450.63 685.221 L1451.19 685.221 L1451.75 685.221 L1452.31 685.221 L1452.87 685.221 L1453.42 685.221 L1453.98 685.221 L1454.54 685.221 L1455.1 685.221 L1455.66 685.221 L1456.22 685.221 L1456.78 685.221 L1457.34 685.221 L1457.9 685.221 L1458.46 685.221 L1459.02 685.221 L1459.58 685.221 L1460.14 685.221 L1460.7 685.221 L1461.25 685.221 L1461.81 685.221 L1462.37 685.221 L1462.93 685.221 L1463.49 685.221 L1464.05 685.221 L1464.61 685.221 L1465.17 685.221 L1465.73 685.221 L1466.29 685.221 L1466.85 685.221 L1467.41 685.221 L1467.97 685.221 L1468.52 685.221 L1469.08 685.221 L1469.64 685.221 L1470.2 685.221 L1470.76 685.221 L1471.32 685.221 L1471.88 685.221 L1472.44 685.221 L1473 685.221 L1473.56 685.221 L1474.12 685.221 L1474.68 685.221 L1475.24 685.221 L1475.79 685.221 L1476.35 685.221 L1476.91 685.221 L1477.47 685.221 L1478.03 685.221 L1478.59 685.221 L1479.15 685.221 L1479.71 685.221 L1480.27 685.221 L1480.83 685.221 L1481.39 685.221 L1481.95 685.221 L1482.51 685.221 L1483.07 685.221 L1483.62 685.221 L1484.18 685.221 L1484.74 685.221 L1485.3 685.221 L1485.86 685.221 L1486.42 685.221 L1486.98 685.221 L1487.54 685.221 L1488.1 685.221 L1488.66 685.221 L1489.22 685.221 L1489.78 685.221 L1490.34 685.221 L1490.89 685.221 L1491.45 685.221 L1492.01 685.221 L1492.57 685.221 L1493.13 685.221 L1493.69 685.221 L1494.25 685.221 L1494.81 685.221 L1495.37 685.221 L1495.93 685.221 L1496.49 685.221 L1497.05 685.221 L1497.61 685.221 L1498.16 685.221 L1498.72 685.221 L1499.28 685.221 L1499.84 685.221 L1500.4 685.221 L1500.96 685.221 L1501.52 685.221 L1502.08 685.221 L1502.64 685.221 L1503.2 685.221 L1503.76 685.221 L1504.32 685.221 L1504.88 685.221 L1505.44 685.221 L1505.99 685.221 L1506.55 685.221 L1507.11 685.221 L1507.67 685.221 L1508.23 685.221 L1508.79 685.221 L1509.35 685.221 L1509.91 685.221 L1510.47 685.221 L1511.03 685.221 L1511.59 685.221 L1512.15 685.221 L1512.71 685.221 L1513.26 685.221 L1513.82 685.221 L1514.38 685.221 L1514.94 685.221 L1515.5 685.221 L1516.06 685.221 L1516.62 685.221 L1517.18 685.221 L1517.74 685.221 L1518.3 685.221 L1518.86 685.221 L1519.42 685.221 L1519.98 685.221 L1520.53 685.221 L1521.09 685.221 L1521.65 685.221 L1522.21 685.221 L1522.77 685.221 L1523.33 685.221 L1523.89 685.221 L1524.45 685.221 L1525.01 685.221 L1525.57 685.221 L1526.13 685.221 L1526.69 685.221 L1527.25 685.221 L1527.81 685.221 L1528.36 685.221 L1528.92 685.221 L1529.48 685.221 L1530.04 685.221 L1530.6 685.221 L1531.16 685.221 L1531.72 685.221 L1532.28 685.221 L1532.84 685.221 L1533.4 685.221 L1533.96 685.221 L1534.52 685.221 L1535.08 685.221 L1535.63 685.221 L1536.19 685.221 L1536.75 685.221 L1537.31 685.221 L1537.87 685.221 L1538.43 685.221 L1538.99 685.221 L1539.55 685.221 L1540.11 685.221 L1540.67 685.221 L1541.23 685.221 L1541.79 685.221 L1542.35 685.221 L1542.9 685.221 L1543.46 685.221 L1544.02 685.221 L1544.58 685.221 L1545.14 685.221 L1545.7 685.221 L1546.26 685.221 L1546.82 685.221 L1547.38 685.221 L1547.94 685.221 L1548.5 685.221 L1549.06 685.221 L1549.62 685.221 L1550.18 685.221 L1550.73 685.221 L1551.29 685.221 L1551.85 685.221 L1552.41 685.221 L1552.97 685.221 L1553.53 685.221 L1554.09 685.221 L1554.65 685.221 L1555.21 685.221 L1555.77 685.221 L1556.33 685.221 L1556.89 685.221 L1557.45 685.221 L1558 685.221 L1558.56 685.221 L1559.12 685.221 L1559.68 685.221 L1560.24 685.221 L1560.8 685.221 L1561.36 685.221 L1561.92 685.221 L1562.48 685.221 L1563.04 685.221 L1563.6 685.221 L1564.16 685.221 L1564.72 685.221 L1565.28 685.221 L1565.83 685.221 L1566.39 685.221 L1566.95 685.221 L1567.51 685.221 L1568.07 685.221 L1568.63 685.221 L1569.19 685.221 L1569.75 685.221 L1570.31 685.221 L1570.87 685.221 L1571.43 685.221 L1571.99 685.221 L1572.55 685.221 L1573.1 685.221 L1573.66 685.221 L1574.22 685.221 L1574.78 685.221 L1575.34 685.221 L1575.9 685.221 L1576.46 685.221 L1577.02 685.221 L1577.58 685.221 L1578.14 685.221 L1578.7 685.221 L1579.26 685.221 L1579.82 685.221 L1580.37 685.221 L1580.93 685.221 L1581.49 685.221 L1582.05 685.221 L1582.61 685.221 L1583.17 685.221 L1583.73 685.221 L1584.29 685.221 L1584.85 685.221 L1585.41 685.221 L1585.97 685.221 L1586.53 685.221 L1587.09 685.221 L1587.65 685.221 L1588.2 685.221 L1588.76 685.221 L1589.32 685.221 L1589.88 685.221 L1590.44 685.221 L1591 685.221 L1591.56 685.221 L1592.12 685.221 L1592.68 685.221 L1593.24 685.221 L1593.8 685.221 L1594.36 685.221 L1594.92 685.221 L1595.47 685.221 L1596.03 685.221 L1596.59 685.221 L1597.15 685.221 L1597.71 685.221 L1598.27 685.221 L1598.83 685.221 L1599.39 685.221 L1599.95 685.221 L1600.51 685.221 L1601.07 685.221 L1601.63 685.221 L1602.19 685.221 L1602.74 685.221 L1603.3 685.221 L1603.86 685.221 L1604.42 685.221 L1604.98 685.221 L1605.54 685.221 L1606.1 685.221 L1606.66 685.221 L1607.22 685.221 L1607.78 685.221 L1608.34 685.221 L1608.9 685.221 L1609.46 685.221 L1610.02 685.221 L1610.57 685.221 L1611.13 685.221 L1611.69 685.221 L1612.25 685.221 L1612.81 685.221 L1613.37 685.221 L1613.93 685.221 L1614.49 685.221 L1615.05 685.221 L1615.61 685.221 L1616.17 685.221 L1616.73 685.221 L1617.29 685.221 L1617.84 685.221 L1618.4 685.221 L1618.96 685.221 L1619.52 685.221 L1620.08 685.221 L1620.64 685.221 L1621.2 685.221 L1621.76 685.221 L1622.32 685.221 L1622.88 685.221 L1623.44 685.221 L1624 685.221 L1624.56 685.221 L1625.11 685.221 L1625.67 685.221 L1626.23 685.221 L1626.79 685.221 L1627.35 685.221 L1627.91 685.221 L1628.47 685.221 L1629.03 685.221 L1629.59 685.221 L1630.15 685.221 L1630.71 685.221 L1631.27 685.221 L1631.83 685.221 L1632.39 685.221 L1632.94 685.221 L1633.5 685.221 L1634.06 685.221 L1634.62 685.221 L1635.18 685.221 L1635.74 685.221 L1636.3 685.221 L1636.86 685.221 L1637.42 685.221 L1637.98 685.221 L1638.54 685.221 L1639.1 685.221 L1639.66 685.221 L1640.21 685.221 L1640.77 685.221 L1641.33 685.221 L1641.89 685.221 L1642.45 685.221 L1643.01 685.221 L1643.57 685.221 L1644.13 685.221 L1644.69 685.221 L1645.25 685.221 L1645.81 685.221 L1646.37 685.221 L1646.93 685.221 L1647.48 685.221 L1648.04 685.221 L1648.6 685.221 L1649.16 685.221 L1649.72 685.221 L1650.28 685.221 L1650.84 685.221 L1651.4 685.221 L1651.96 685.221 L1652.52 685.221 L1653.08 685.221 L1653.64 685.221 L1654.2 685.221 L1654.76 685.221 L1655.31 685.221 L1655.87 685.221 L1656.43 685.221 L1656.99 685.221 L1657.55 685.221 L1658.11 685.221 L1658.67 685.221 L1659.23 685.221 L1659.79 685.221 L1660.35 685.221 L1660.91 685.221 L1661.47 685.221 L1662.03 685.221 L1662.58 685.221 L1663.14 685.221 L1663.7 685.221 L1664.26 685.221 L1664.82 685.221 L1665.38 685.221 L1665.94 685.221 L1666.5 685.221 L1667.06 685.221 L1667.62 685.221 L1668.18 685.221 L1668.74 685.221 L1669.3 685.221 L1669.85 685.221 L1670.41 685.221 L1670.97 685.221 L1671.53 685.221 L1672.09 685.221 L1672.65 685.221 L1673.21 685.221 L1673.77 685.221 L1674.33 685.221 L1674.89 685.221 L1675.45 685.221 L1676.01 685.221 L1676.57 685.221 L1677.13 685.221 L1677.68 685.221 L1678.24 685.221 L1678.8 685.221 L1679.36 685.221 L1679.92 685.221 L1680.48 685.221 L1681.04 685.221 L1681.6 685.221 L1682.16 685.221 L1682.72 685.221 L1683.28 685.221 L1683.84 685.221 L1684.4 685.221 L1684.95 685.221 L1685.51 685.221 L1686.07 685.221 L1686.63 685.221 L1687.19 685.221 L1687.75 685.221 L1688.31 685.221 L1688.87 685.221 L1689.43 685.221 L1689.99 685.221 L1690.55 685.221 L1691.11 685.221 L1691.67 685.221 L1692.23 685.221 L1692.78 685.221 L1693.34 685.221 L1693.9 685.221 L1694.46 685.221 L1695.02 685.221 L1695.58 685.221 L1696.14 685.221 L1696.7 685.221 L1697.26 685.221 L1697.82 685.221 L1698.38 685.221 L1698.94 685.221 L1699.5 685.221 L1700.05 685.221 L1700.61 685.221 L1701.17 685.221 L1701.73 685.221 L1702.29 685.221 L1702.85 685.221 L1703.41 685.221 L1703.97 685.221 L1704.53 685.221 L1705.09 685.221 L1705.65 685.221 L1706.21 685.221 L1706.77 685.221 L1707.32 685.221 L1707.88 685.221 L1708.44 685.221 L1709 685.221 L1709.56 685.221 L1710.12 685.221 L1710.68 685.221 L1711.24 685.221 L1711.8 685.221 L1712.36 685.221 L1712.92 685.221 L1713.48 685.221 L1714.04 685.221 L1714.6 685.221 L1715.15 685.221 L1715.71 685.221 L1716.27 685.221 L1716.83 685.221 L1717.39 685.221 L1717.95 685.221 L1718.51 685.221 L1719.07 685.221 L1719.63 685.221 L1720.19 685.221 L1720.75 685.221 L1721.31 685.221 L1721.87 685.221 L1722.42 685.221 L1722.98 685.221 L1723.54 685.221 L1724.1 685.221 L1724.66 685.221 L1725.22 685.221 L1725.78 685.221 L1726.34 685.221 L1726.9 685.221 L1727.46 685.221 L1728.02 685.221 L1728.58 685.221 L1729.14 685.221 L1729.69 685.221 L1730.25 685.221 L1730.81 685.221 L1731.37 685.221 L1731.93 685.221 L1732.49 685.221 L1733.05 685.221 L1733.61 685.221 L1734.17 685.221 L1734.73 685.221 L1735.29 685.221 L1735.85 685.221 L1736.41 685.221 L1736.97 685.221 L1737.52 685.221 L1738.08 685.221 L1738.64 685.221 L1739.2 685.221 L1739.76 685.221 L1740.32 685.221 L1740.88 685.221 L1741.44 685.221 L1742 685.221 L1742.56 685.221 L1743.12 685.221 L1743.68 685.221 L1744.24 685.221 L1744.79 685.221 L1745.35 685.221 L1745.91 685.221 L1746.47 685.221 L1747.03 685.221 L1747.59 685.221 L1748.15 685.221 L1748.71 685.221 L1749.27 685.221 L1749.83 685.221 L1750.39 685.221 L1750.95 685.221 L1751.51 685.221 L1752.06 685.221 L1752.62 685.221 L1753.18 685.221 L1753.74 685.221 L1754.3 685.221 L1754.86 685.221 L1755.42 685.221 L1755.98 685.221 L1756.54 685.221 L1757.1 685.221 L1757.66 685.221 L1758.22 685.221 L1758.78 685.221 L1759.34 685.221 L1759.89 685.221 L1760.45 685.221 L1761.01 685.221 L1761.57 685.221 L1762.13 685.221 L1762.69 685.221 L1763.25 685.221 L1763.81 685.221 L1764.37 685.221 L1764.93 685.221 L1765.49 685.221 L1766.05 685.221 L1766.61 685.221 L1767.16 685.221 L1767.72 685.221 L1768.28 685.221 L1768.84 685.221 L1769.4 685.221 L1769.96 685.221 L1770.52 685.221 L1771.08 685.221 L1771.64 685.221 L1772.2 685.221 L1772.76 685.221 L1773.32 685.221 L1773.88 685.221 L1774.43 685.221 L1774.99 685.221 L1775.55 685.221 L1776.11 685.221 L1776.67 685.221 L1777.23 685.221 L1777.79 685.221 L1778.35 685.221 L1778.91 685.221 L1779.47 685.221 L1780.03 685.221 L1780.59 685.221 L1781.15 685.221 L1781.71 685.221 L1782.26 685.221 L1782.82 685.221 L1783.38 685.221 L1783.94 685.221 L1784.5 685.221 L1785.06 685.221 L1785.62 685.221 L1786.18 685.221 L1786.74 685.221 L1787.3 685.221 L1787.86 685.221 L1788.42 685.221 L1788.98 685.221 L1789.53 685.221 L1790.09 685.221 L1790.65 685.221 L1791.21 685.221 L1791.77 685.221 L1792.33 685.221 L1792.89 685.221 L1793.45 685.221 L1794.01 685.221 L1794.57 685.221 L1795.13 685.221 L1795.69 685.221 L1796.25 685.221 L1796.8 685.221 L1797.36 685.221 L1797.92 685.221 L1798.48 685.221 L1799.04 685.221 L1799.6 685.221 L1800.16 685.221 L1800.72 685.221 L1801.28 685.221 L1801.84 685.221 L1802.4 685.221 L1802.96 685.221 L1803.52 685.221 L1804.08 685.221 L1804.63 685.221 L1805.19 685.221 L1805.75 685.221 L1806.31 685.221 L1806.87 685.221 L1807.43 685.221 L1807.99 685.221 L1808.55 685.221 L1809.11 685.221 L1809.67 685.221 L1810.23 685.221 L1810.79 685.221 L1811.35 685.221 L1811.9 685.221 L1812.46 685.221 L1813.02 685.221 L1813.58 685.221 L1814.14 685.221 L1814.7 685.221 L1815.26 685.221 L1815.82 685.221 L1816.38 685.221 L1816.94 685.221 L1817.5 685.221 L1818.06 685.221 L1818.62 685.221 L1819.18 685.221 L1819.73 685.221 L1820.29 685.221 L1820.85 685.221 L1821.41 685.221 L1821.97 685.221 L1822.53 685.221 L1823.09 685.221 L1823.65 685.221 L1824.21 685.221 L1824.77 685.221 L1825.33 685.221 L1825.89 685.221 L1826.45 685.221 L1827 685.221 L1827.56 685.221 L1828.12 685.221 L1828.68 685.221 L1829.24 685.221 L1829.8 685.221 L1830.36 685.221 L1830.92 685.221 L1831.48 685.221 L1832.04 685.221 L1832.6 685.221 L1833.16 685.221 L1833.72 685.221 L1834.27 685.221 L1834.83 685.221 L1835.39 685.221 L1835.95 685.221 L1836.51 685.221 L1837.07 685.221 L1837.63 685.221 L1838.19 685.221 L1838.19 683.673 L1837.63 683.673 L1837.07 683.673 L1836.51 683.673 L1835.95 683.673 L1835.39 683.673 L1834.83 683.673 L1834.27 683.673 L1833.72 683.673 L1833.16 683.673 L1832.6 683.673 L1832.04 683.673 L1831.48 683.673 L1830.92 683.673 L1830.36 683.673 L1829.8 683.673 L1829.24 683.673 L1828.68 683.673 L1828.12 683.673 L1827.56 683.673 L1827 683.673 L1826.45 683.673 L1825.89 683.673 L1825.33 683.673 L1824.77 683.673 L1824.21 683.673 L1823.65 683.673 L1823.09 683.673 L1822.53 683.673 L1821.97 683.673 L1821.41 683.673 L1820.85 683.673 L1820.29 683.673 L1819.73 683.673 L1819.18 683.673 L1818.62 683.673 L1818.06 683.673 L1817.5 683.673 L1816.94 683.673 L1816.38 683.673 L1815.82 683.673 L1815.26 683.673 L1814.7 683.673 L1814.14 683.673 L1813.58 683.673 L1813.02 683.673 L1812.46 683.673 L1811.9 683.673 L1811.35 683.673 L1810.79 683.673 L1810.23 683.673 L1809.67 683.673 L1809.11 683.673 L1808.55 683.673 L1807.99 683.673 L1807.43 683.673 L1806.87 683.673 L1806.31 683.673 L1805.75 683.673 L1805.19 683.673 L1804.63 683.673 L1804.08 683.673 L1803.52 683.673 L1802.96 683.673 L1802.4 683.673 L1801.84 683.673 L1801.28 683.673 L1800.72 683.673 L1800.16 683.673 L1799.6 683.673 L1799.04 683.673 L1798.48 683.673 L1797.92 683.673 L1797.36 683.673 L1796.8 683.673 L1796.25 683.673 L1795.69 683.673 L1795.13 683.673 L1794.57 683.673 L1794.01 683.673 L1793.45 683.673 L1792.89 683.673 L1792.33 683.673 L1791.77 683.673 L1791.21 683.673 L1790.65 683.673 L1790.09 683.673 L1789.53 683.673 L1788.98 683.673 L1788.42 683.673 L1787.86 683.673 L1787.3 683.673 L1786.74 683.673 L1786.18 683.673 L1785.62 683.673 L1785.06 683.673 L1784.5 683.673 L1783.94 683.673 L1783.38 683.673 L1782.82 683.673 L1782.26 683.673 L1781.71 683.673 L1781.15 683.673 L1780.59 683.673 L1780.03 683.673 L1779.47 683.673 L1778.91 683.673 L1778.35 683.673 L1777.79 683.673 L1777.23 683.673 L1776.67 683.673 L1776.11 683.673 L1775.55 683.673 L1774.99 683.673 L1774.43 683.673 L1773.88 683.673 L1773.32 683.673 L1772.76 683.673 L1772.2 683.673 L1771.64 683.673 L1771.08 683.673 L1770.52 683.673 L1769.96 683.673 L1769.4 683.673 L1768.84 683.673 L1768.28 683.673 L1767.72 683.673 L1767.16 683.673 L1766.61 683.673 L1766.05 683.673 L1765.49 683.673 L1764.93 683.673 L1764.37 683.673 L1763.81 683.673 L1763.25 683.673 L1762.69 683.673 L1762.13 683.673 L1761.57 683.673 L1761.01 683.673 L1760.45 683.673 L1759.89 683.673 L1759.34 683.673 L1758.78 683.673 L1758.22 683.673 L1757.66 683.673 L1757.1 683.673 L1756.54 683.673 L1755.98 683.673 L1755.42 683.673 L1754.86 683.673 L1754.3 683.673 L1753.74 683.673 L1753.18 683.673 L1752.62 683.673 L1752.06 683.673 L1751.51 683.673 L1750.95 683.673 L1750.39 683.673 L1749.83 683.673 L1749.27 683.673 L1748.71 683.673 L1748.15 683.673 L1747.59 683.673 L1747.03 683.673 L1746.47 683.673 L1745.91 683.673 L1745.35 683.673 L1744.79 683.673 L1744.24 683.673 L1743.68 683.673 L1743.12 683.673 L1742.56 683.673 L1742 683.673 L1741.44 683.673 L1740.88 683.673 L1740.32 683.673 L1739.76 683.673 L1739.2 683.673 L1738.64 683.673 L1738.08 683.673 L1737.52 683.673 L1736.97 683.673 L1736.41 683.673 L1735.85 683.673 L1735.29 683.673 L1734.73 683.673 L1734.17 683.673 L1733.61 683.673 L1733.05 683.673 L1732.49 683.673 L1731.93 683.673 L1731.37 683.673 L1730.81 683.673 L1730.25 683.673 L1729.69 683.673 L1729.14 683.673 L1728.58 683.673 L1728.02 683.673 L1727.46 683.673 L1726.9 683.673 L1726.34 683.673 L1725.78 683.673 L1725.22 683.673 L1724.66 683.673 L1724.1 683.673 L1723.54 683.673 L1722.98 683.673 L1722.42 683.673 L1721.87 683.673 L1721.31 683.673 L1720.75 683.673 L1720.19 683.673 L1719.63 683.673 L1719.07 683.673 L1718.51 683.673 L1717.95 683.673 L1717.39 683.673 L1716.83 683.673 L1716.27 683.673 L1715.71 683.673 L1715.15 683.673 L1714.6 683.673 L1714.04 683.673 L1713.48 683.673 L1712.92 683.673 L1712.36 683.673 L1711.8 683.673 L1711.24 683.673 L1710.68 683.673 L1710.12 683.673 L1709.56 683.673 L1709 683.673 L1708.44 683.673 L1707.88 683.673 L1707.32 683.673 L1706.77 683.673 L1706.21 683.673 L1705.65 683.673 L1705.09 683.673 L1704.53 683.673 L1703.97 683.673 L1703.41 683.673 L1702.85 683.673 L1702.29 683.673 L1701.73 683.673 L1701.17 683.673 L1700.61 683.673 L1700.05 683.673 L1699.5 683.673 L1698.94 683.673 L1698.38 683.673 L1697.82 683.673 L1697.26 683.673 L1696.7 683.673 L1696.14 683.673 L1695.58 683.673 L1695.02 683.673 L1694.46 683.673 L1693.9 683.673 L1693.34 683.673 L1692.78 683.673 L1692.23 683.673 L1691.67 683.673 L1691.11 683.673 L1690.55 683.673 L1689.99 683.673 L1689.43 683.673 L1688.87 683.673 L1688.31 683.673 L1687.75 683.673 L1687.19 683.673 L1686.63 683.673 L1686.07 683.673 L1685.51 683.673 L1684.95 683.673 L1684.4 683.673 L1683.84 683.673 L1683.28 683.673 L1682.72 683.673 L1682.16 683.673 L1681.6 683.673 L1681.04 683.673 L1680.48 683.673 L1679.92 683.673 L1679.36 683.673 L1678.8 683.673 L1678.24 683.673 L1677.68 683.673 L1677.13 683.673 L1676.57 683.673 L1676.01 683.673 L1675.45 683.673 L1674.89 683.673 L1674.33 683.673 L1673.77 683.673 L1673.21 683.673 L1672.65 683.673 L1672.09 683.673 L1671.53 683.673 L1670.97 683.673 L1670.41 683.673 L1669.85 683.673 L1669.3 683.673 L1668.74 683.673 L1668.18 683.673 L1667.62 683.673 L1667.06 683.673 L1666.5 683.673 L1665.94 683.673 L1665.38 683.673 L1664.82 683.673 L1664.26 683.673 L1663.7 683.673 L1663.14 683.673 L1662.58 683.673 L1662.03 683.673 L1661.47 683.673 L1660.91 683.673 L1660.35 683.673 L1659.79 683.673 L1659.23 683.673 L1658.67 683.673 L1658.11 683.673 L1657.55 683.673 L1656.99 683.673 L1656.43 683.673 L1655.87 683.673 L1655.31 683.673 L1654.76 683.673 L1654.2 683.673 L1653.64 683.673 L1653.08 683.673 L1652.52 683.673 L1651.96 683.673 L1651.4 683.673 L1650.84 683.673 L1650.28 683.673 L1649.72 683.673 L1649.16 683.673 L1648.6 683.673 L1648.04 683.673 L1647.48 683.673 L1646.93 683.673 L1646.37 683.673 L1645.81 683.673 L1645.25 683.673 L1644.69 683.673 L1644.13 683.673 L1643.57 683.673 L1643.01 683.673 L1642.45 683.673 L1641.89 683.673 L1641.33 683.673 L1640.77 683.673 L1640.21 683.673 L1639.66 683.673 L1639.1 683.673 L1638.54 683.673 L1637.98 683.673 L1637.42 683.673 L1636.86 683.673 L1636.3 683.673 L1635.74 683.673 L1635.18 683.673 L1634.62 683.673 L1634.06 683.673 L1633.5 683.673 L1632.94 683.673 L1632.39 683.673 L1631.83 683.673 L1631.27 683.673 L1630.71 683.673 L1630.15 683.673 L1629.59 683.673 L1629.03 683.673 L1628.47 683.673 L1627.91 683.673 L1627.35 683.673 L1626.79 683.673 L1626.23 683.673 L1625.67 683.673 L1625.11 683.673 L1624.56 683.673 L1624 683.673 L1623.44 683.673 L1622.88 683.673 L1622.32 683.673 L1621.76 683.673 L1621.2 683.673 L1620.64 683.673 L1620.08 683.673 L1619.52 683.673 L1618.96 683.673 L1618.4 683.673 L1617.84 683.673 L1617.29 683.673 L1616.73 683.673 L1616.17 683.673 L1615.61 683.673 L1615.05 683.673 L1614.49 683.673 L1613.93 683.673 L1613.37 683.673 L1612.81 683.673 L1612.25 683.673 L1611.69 683.673 L1611.13 683.673 L1610.57 683.673 L1610.02 683.673 L1609.46 683.673 L1608.9 683.673 L1608.34 683.673 L1607.78 683.673 L1607.22 683.673 L1606.66 683.673 L1606.1 683.673 L1605.54 683.673 L1604.98 683.673 L1604.42 683.673 L1603.86 683.673 L1603.3 683.673 L1602.74 683.673 L1602.19 683.673 L1601.63 683.673 L1601.07 683.673 L1600.51 683.673 L1599.95 683.673 L1599.39 683.673 L1598.83 683.673 L1598.27 683.673 L1597.71 683.673 L1597.15 683.673 L1596.59 683.673 L1596.03 683.673 L1595.47 683.673 L1594.92 683.673 L1594.36 683.673 L1593.8 683.673 L1593.24 683.673 L1592.68 683.673 L1592.12 683.673 L1591.56 683.673 L1591 683.673 L1590.44 683.673 L1589.88 683.673 L1589.32 683.673 L1588.76 683.673 L1588.2 683.673 L1587.65 683.673 L1587.09 683.673 L1586.53 683.673 L1585.97 683.673 L1585.41 683.673 L1584.85 683.673 L1584.29 683.673 L1583.73 683.673 L1583.17 683.673 L1582.61 683.673 L1582.05 683.673 L1581.49 683.673 L1580.93 683.673 L1580.37 683.673 L1579.82 683.673 L1579.26 683.673 L1578.7 683.673 L1578.14 683.673 L1577.58 683.673 L1577.02 683.673 L1576.46 683.673 L1575.9 683.673 L1575.34 683.673 L1574.78 683.673 L1574.22 683.673 L1573.66 683.673 L1573.1 683.673 L1572.55 683.673 L1571.99 683.673 L1571.43 683.673 L1570.87 683.673 L1570.31 683.673 L1569.75 683.673 L1569.19 683.673 L1568.63 683.673 L1568.07 683.673 L1567.51 683.673 L1566.95 683.673 L1566.39 683.673 L1565.83 683.673 L1565.28 683.673 L1564.72 683.673 L1564.16 683.673 L1563.6 683.673 L1563.04 683.673 L1562.48 683.673 L1561.92 683.673 L1561.36 683.673 L1560.8 683.673 L1560.24 683.673 L1559.68 683.673 L1559.12 683.673 L1558.56 683.673 L1558 683.673 L1557.45 683.673 L1556.89 683.673 L1556.33 683.673 L1555.77 683.673 L1555.21 683.673 L1554.65 683.673 L1554.09 683.673 L1553.53 683.673 L1552.97 683.673 L1552.41 683.673 L1551.85 683.673 L1551.29 683.673 L1550.73 683.673 L1550.18 683.673 L1549.62 683.673 L1549.06 683.673 L1548.5 683.673 L1547.94 683.673 L1547.38 683.673 L1546.82 683.673 L1546.26 683.673 L1545.7 683.673 L1545.14 683.673 L1544.58 683.673 L1544.02 683.673 L1543.46 683.673 L1542.9 683.673 L1542.35 683.673 L1541.79 683.673 L1541.23 683.673 L1540.67 683.673 L1540.11 683.673 L1539.55 683.673 L1538.99 683.673 L1538.43 683.673 L1537.87 683.673 L1537.31 683.673 L1536.75 683.673 L1536.19 683.673 L1535.63 683.673 L1535.08 683.673 L1534.52 683.673 L1533.96 683.673 L1533.4 683.673 L1532.84 683.673 L1532.28 683.673 L1531.72 683.673 L1531.16 683.673 L1530.6 683.673 L1530.04 683.673 L1529.48 683.673 L1528.92 683.673 L1528.36 683.673 L1527.81 683.673 L1527.25 683.673 L1526.69 683.673 L1526.13 683.673 L1525.57 683.673 L1525.01 683.673 L1524.45 683.673 L1523.89 683.673 L1523.33 683.673 L1522.77 683.673 L1522.21 683.673 L1521.65 683.673 L1521.09 683.673 L1520.53 683.673 L1519.98 683.673 L1519.42 683.673 L1518.86 683.673 L1518.3 683.673 L1517.74 683.673 L1517.18 683.673 L1516.62 683.673 L1516.06 683.673 L1515.5 683.673 L1514.94 683.673 L1514.38 683.673 L1513.82 683.673 L1513.26 683.673 L1512.71 683.673 L1512.15 683.673 L1511.59 683.673 L1511.03 683.673 L1510.47 683.673 L1509.91 683.673 L1509.35 683.673 L1508.79 683.673 L1508.23 683.673 L1507.67 683.673 L1507.11 683.673 L1506.55 683.673 L1505.99 683.673 L1505.44 683.673 L1504.88 683.673 L1504.32 683.673 L1503.76 683.673 L1503.2 683.673 L1502.64 683.673 L1502.08 683.673 L1501.52 683.673 L1500.96 683.673 L1500.4 683.673 L1499.84 683.673 L1499.28 683.673 L1498.72 683.673 L1498.16 683.673 L1497.61 683.673 L1497.05 683.673 L1496.49 683.673 L1495.93 683.673 L1495.37 683.673 L1494.81 683.673 L1494.25 683.673 L1493.69 683.673 L1493.13 683.673 L1492.57 683.673 L1492.01 683.673 L1491.45 683.673 L1490.89 683.673 L1490.34 683.673 L1489.78 683.673 L1489.22 683.673 L1488.66 683.673 L1488.1 683.673 L1487.54 683.673 L1486.98 683.673 L1486.42 683.673 L1485.86 683.673 L1485.3 683.673 L1484.74 683.673 L1484.18 683.673 L1483.62 683.673 L1483.07 683.673 L1482.51 683.673 L1481.95 683.673 L1481.39 683.673 L1480.83 683.673 L1480.27 683.673 L1479.71 683.673 L1479.15 683.673 L1478.59 683.673 L1478.03 683.673 L1477.47 683.673 L1476.91 683.673 L1476.35 683.673 L1475.79 683.673 L1475.24 683.673 L1474.68 683.673 L1474.12 683.673 L1473.56 683.673 L1473 683.673 L1472.44 683.673 L1471.88 683.673 L1471.32 683.673 L1470.76 683.673 L1470.2 683.673 L1469.64 683.673 L1469.08 683.673 L1468.52 683.673 L1467.97 683.673 L1467.41 683.673 L1466.85 683.673 L1466.29 683.673 L1465.73 683.673 L1465.17 683.673 L1464.61 683.673 L1464.05 683.673 L1463.49 683.673 L1462.93 683.673 L1462.37 683.673 L1461.81 683.673 L1461.25 683.673 L1460.7 683.673 L1460.14 683.673 L1459.58 683.673 L1459.02 683.673 L1458.46 683.673 L1457.9 683.673 L1457.34 683.673 L1456.78 683.673 L1456.22 683.673 L1455.66 683.673 L1455.1 683.673 L1454.54 683.673 L1453.98 683.673 L1453.42 683.673 L1452.87 683.673 L1452.31 683.673 L1451.75 683.673 L1451.19 683.673 L1450.63 683.673 L1450.07 683.673 L1449.51 683.673 L1448.95 683.673 L1448.39 683.673 L1447.83 683.673 L1447.27 683.673 L1446.71 683.673 L1446.15 683.673 L1445.6 683.673 L1445.04 683.673 L1444.48 683.673 L1443.92 683.673 L1443.36 683.673 L1442.8 683.673 L1442.24 683.673 L1441.68 683.673 L1441.12 683.673 L1440.56 683.673 L1440 683.673 L1439.44 683.673 L1438.88 683.673 L1438.33 683.673 L1437.77 683.673 L1437.21 683.673 L1436.65 683.673 L1436.09 683.673 L1435.53 683.673 L1434.97 683.673 L1434.41 683.673 L1433.85 683.673 L1433.29 683.673 L1432.73 683.673 L1432.17 683.673 L1431.61 683.673 L1431.05 683.673 L1430.5 683.673 L1429.94 683.673 L1429.38 683.673 L1428.82 683.673 L1428.26 683.673 L1427.7 683.673 L1427.14 683.673 L1426.58 683.673 L1426.02 683.673 L1425.46 683.673 L1424.9 683.673 L1424.34 683.673 L1423.78 683.673 L1423.23 683.673 L1422.67 683.673 L1422.11 683.673 L1421.55 683.673 L1420.99 683.673 L1420.43 683.673 L1419.87 683.673 L1419.31 683.673 L1418.75 683.673 L1418.19 683.673 L1417.63 683.673 L1417.07 683.673 L1416.51 683.673 L1415.95 683.673 L1415.4 683.673 L1414.84 683.673 L1414.28 683.673 L1413.72 683.673 L1413.16 683.673 L1412.6 683.673 L1412.04 683.673 L1411.48 683.673 L1410.92 683.673 L1410.36 683.673 L1409.8 683.673 L1409.24 683.673 L1408.68 683.673 L1408.13 683.673 L1407.57 683.673 L1407.01 683.673 L1406.45 683.673 L1405.89 683.673 L1405.33 683.673 L1404.77 683.673 L1404.21 683.673 L1403.65 683.673 L1403.09 683.673 L1402.53 683.673 L1401.97 683.673 L1401.41 683.673 L1400.86 683.673 L1400.3 683.673 L1399.74 683.673 L1399.18 683.673 L1398.62 683.673 L1398.06 683.673 L1397.5 683.673 L1396.94 683.673 L1396.38 683.673 L1395.82 683.673 L1395.26 683.673 L1394.7 683.673 L1394.14 683.673 L1393.58 683.673 L1393.03 683.673 L1392.47 683.673 L1391.91 683.673 L1391.35 683.673 L1390.79 683.673 L1390.23 683.673 L1389.67 683.673 L1389.11 683.673 L1388.55 683.673 L1387.99 683.673 L1387.43 683.673 L1386.87 683.673 L1386.31 683.673 L1385.76 683.673 L1385.2 683.673 L1384.64 683.673 L1384.08 683.673 L1383.52 683.673 L1382.96 683.673 L1382.4 683.673 L1381.84 683.673 L1381.28 683.673 L1380.72 683.673 L1380.16 683.673 L1379.6 683.673 L1379.04 683.673 L1378.49 683.673 L1377.93 683.673 L1377.37 683.673 L1376.81 683.673 L1376.25 683.673 L1375.69 683.673 L1375.13 683.673 L1374.57 683.673 L1374.01 683.673 L1373.45 683.673 L1372.89 683.673 L1372.33 683.673 L1371.77 683.673 L1371.21 683.673 L1370.66 683.673 L1370.1 683.673 L1369.54 683.673 L1368.98 683.673 L1368.42 683.673 L1367.86 683.673 L1367.3 683.673 L1366.74 683.673 L1366.18 683.673 L1365.62 683.673 L1365.06 683.673 L1364.5 683.673 L1363.94 683.673 L1363.39 683.673 L1362.83 683.673 L1362.27 683.673 L1361.71 683.673 L1361.15 683.673 L1360.59 683.673 L1360.03 683.673 L1359.47 683.673 L1358.91 683.673 L1358.35 683.673 L1357.79 683.673 L1357.23 683.673 L1356.67 683.673 L1356.12 683.673 L1355.56 683.673 L1355 683.673 L1354.44 683.673 L1353.88 683.673 L1353.32 683.673 L1352.76 683.673 L1352.2 683.673 L1351.64 683.673 L1351.08 683.673 L1350.52 683.673 L1349.96 683.673 L1349.4 683.673 L1348.84 683.673 L1348.29 683.673 L1347.73 683.673 L1347.17 683.673 L1346.61 683.673 L1346.05 683.673 L1345.49 683.673 L1344.93 683.673 L1344.37 683.673 L1343.81 683.673 L1343.25 683.673 L1342.69 683.673 L1342.13 683.673 L1341.57 683.673 L1341.02 683.673 L1340.46 683.673 L1339.9 683.673 L1339.34 683.673 L1338.78 683.673 L1338.22 683.673 L1337.66 683.673 L1337.1 683.673 L1336.54 683.673 L1335.98 683.673 L1335.42 683.673 L1334.86 683.673 L1334.3 683.673 L1333.75 683.673 L1333.19 683.673 L1332.63 683.673 L1332.07 683.673 L1331.51 683.673 L1330.95 683.673 L1330.39 683.673 L1329.83 683.673 L1329.27 683.673 L1328.71 683.673 L1328.15 683.673 L1327.59 683.673 L1327.03 683.673 L1326.47 683.673 L1325.92 683.673 L1325.36 683.673 L1324.8 683.673 L1324.24 683.673 L1323.68 683.673 L1323.12 683.673 L1322.56 683.673 L1322 683.673 L1321.44 683.673 L1320.88 683.673 L1320.32 683.673 L1319.76 683.673 L1319.2 683.673 L1318.65 683.673 L1318.09 683.673 L1317.53 683.673 L1316.97 683.673 L1316.41 683.673 L1315.85 683.673 L1315.29 683.673 L1314.73 683.673 L1314.17 683.673 L1313.61 683.673 L1313.05 683.673 L1312.49 683.673 L1311.93 683.673 L1311.38 683.673 L1310.82 683.673 L1310.26 683.673 L1309.7 683.673 L1309.14 683.673 L1308.58 683.673 L1308.02 683.673 L1307.46 683.673 L1306.9 683.673 L1306.34 683.673 L1305.78 683.673 L1305.22 683.673 L1304.66 683.673 L1304.1 683.673 L1303.55 683.673 L1302.99 683.673 L1302.43 683.673 L1301.87 683.673 L1301.31 683.673 L1300.75 683.673 L1300.19 683.673 L1299.63 683.673 L1299.07 683.673 L1298.51 683.673 L1297.95 683.673 L1297.39 683.673 L1296.83 683.673 L1296.28 683.673 L1295.72 683.673 L1295.16 683.673 L1294.6 683.673 L1294.04 683.673 L1293.48 683.673 L1292.92 683.673 L1292.36 683.673 L1291.8 683.673 L1291.24 683.673 L1290.68 683.673 L1290.12 683.673 L1289.56 683.673 L1289 683.673 L1288.45 683.673 L1287.89 683.673 L1287.33 683.673 L1286.77 683.673 L1286.21 683.673 L1285.65 683.673 L1285.09 683.673 L1284.53 683.673 L1283.97 683.673 L1283.41 683.673 L1282.85 683.673 L1282.29 683.673 L1281.73 683.673 L1281.18 683.673 L1280.62 683.673 L1280.06 683.673 L1279.5 683.673 L1278.94 683.673 L1278.38 683.673 L1277.82 683.673 L1277.26 683.673 L1276.7 683.673 L1276.14 683.673 L1275.58 683.673 L1275.02 683.673 L1274.46 683.673 L1273.91 683.673 L1273.35 683.673 L1272.79 683.673 L1272.23 683.673 L1271.67 683.673 L1271.11 683.673 L1270.55 683.673 L1269.99 683.673 L1269.43 683.673 L1268.87 683.673 L1268.31 683.673 L1267.75 683.673 L1267.19 683.673 L1266.63 683.673 L1266.08 683.673 L1265.52 683.673 L1264.96 683.673 L1264.4 683.673 L1263.84 683.673 L1263.28 683.673 L1262.72 683.673 L1262.16 683.673 L1261.6 683.673 L1261.04 683.673 L1260.48 683.673 L1259.92 683.673 L1259.36 683.673 L1258.81 683.673 L1258.25 683.673 L1257.69 683.673 L1257.13 683.673 L1256.57 683.673 L1256.01 683.673 L1255.45 683.673 L1254.89 683.673 L1254.33 683.673 L1253.77 683.673 L1253.21 683.673 L1252.65 683.673 L1252.09 683.673 L1251.54 683.673 L1250.98 683.673 L1250.42 683.673 L1249.86 683.673 L1249.3 683.673 L1248.74 683.673 L1248.18 683.673 L1247.62 683.673 L1247.06 683.673 L1246.5 683.673 L1245.94 683.673 L1245.38 683.673 L1244.82 683.673 L1244.26 683.673 L1243.71 683.673 L1243.15 683.673 L1242.59 683.673 L1242.03 683.673 L1241.47 683.673 L1240.91 683.673 L1240.35 683.673 L1239.79 683.673 L1239.23 683.673 L1238.67 683.673 L1238.11 683.673 L1237.55 683.673 L1236.99 683.673 L1236.44 683.673 L1235.88 683.673 L1235.32 683.673 L1234.76 683.673 L1234.2 683.673 L1233.64 683.673 L1233.08 683.673 L1232.52 683.673 L1231.96 683.673 L1231.4 683.673 L1230.84 683.673 L1230.28 683.673 L1229.72 683.673 L1229.17 683.673 L1228.61 683.673 L1228.05 683.673 L1227.49 683.673 L1226.93 683.673 L1226.37 683.673 L1225.81 683.673 L1225.25 683.673 L1224.69 683.673 L1224.13 683.673 L1223.57 683.673 L1223.01 683.673 L1222.45 683.673 L1221.89 683.673 L1221.34 683.673 L1220.78 683.673 L1220.22 683.673 L1219.66 683.673 L1219.1 683.673 L1218.54 683.673 L1217.98 683.673 L1217.42 683.673 L1216.86 683.673 L1216.3 683.673 L1215.74 683.673 L1215.18 683.673 L1214.62 683.673 L1214.07 683.673 L1213.51 683.673 L1212.95 683.673 L1212.39 683.673 L1211.83 683.673 L1211.27 683.673 L1210.71 683.673 L1210.15 683.673 L1209.59 683.673 L1209.03 683.673 L1208.47 683.673 L1207.91 683.673 L1207.35 683.673 L1206.8 683.673 L1206.24 683.673 L1205.68 683.673 L1205.12 683.673 L1204.56 683.673 L1204 683.673 L1203.44 683.673 L1202.88 683.673 L1202.32 683.673 L1201.76 683.673 L1201.2 683.673 L1200.64 683.673 L1200.08 683.673 L1199.52 683.673 L1198.97 683.673 L1198.41 683.673 L1197.85 683.673 L1197.29 683.673 L1196.73 683.673 L1196.17 683.673 L1195.61 683.673 L1195.05 683.673 L1194.49 683.673 L1193.93 683.673 L1193.37 683.673 L1192.81 683.673 L1192.25 683.673 L1191.7 683.673 L1191.14 683.673 L1190.58 683.673 L1190.02 683.673 L1189.46 683.673 L1188.9 683.673 L1188.34 683.673 L1187.78 683.673 L1187.22 683.673 L1186.66 683.673 L1186.1 683.673 L1185.54 683.673 L1184.98 683.673 L1184.43 683.673 L1183.87 683.673 L1183.31 683.673 L1182.75 683.673 L1182.19 683.673 L1181.63 683.673 L1181.07 683.673 L1180.51 683.673 L1179.95 683.673 L1179.39 683.673 L1178.83 683.673 L1178.27 683.673 L1177.71 683.673 L1177.15 683.673 L1176.6 683.673 L1176.04 683.673 L1175.48 683.673 L1174.92 683.673 L1174.36 683.673 L1173.8 683.673 L1173.24 683.673 L1172.68 683.673 L1172.12 683.673 L1171.56 683.673 L1171 683.673 L1170.44 683.673 L1169.88 683.673 L1169.33 683.673 L1168.77 683.673 L1168.21 683.673 L1167.65 683.673 L1167.09 683.673 L1166.53 683.673 L1165.97 683.673 L1165.41 683.673 L1164.85 683.673 L1164.29 683.673 L1163.73 683.673 L1163.17 683.673 L1162.61 683.673 L1162.05 683.673 L1161.5 683.673 L1160.94 683.673 L1160.38 683.673 L1159.82 683.673 L1159.26 683.673 L1158.7 683.673 L1158.14 683.673 L1157.58 683.673 L1157.02 683.673 L1156.46 683.673 L1155.9 683.673 L1155.34 683.673 L1154.78 683.673 L1154.23 683.673 L1153.67 683.673 L1153.11 683.673 L1152.55 683.673 L1151.99 683.673 L1151.43 683.673 L1150.87 683.673 L1150.31 683.673 L1149.75 683.673 L1149.19 683.673 L1148.63 683.673 L1148.07 683.673 L1147.51 683.673 L1146.96 683.673 L1146.4 683.673 L1145.84 683.673 L1145.28 683.673 L1144.72 683.673 L1144.16 683.673 L1143.6 683.673 L1143.04 683.673 L1142.48 683.673 L1141.92 683.673 L1141.36 683.673 L1140.8 683.673 L1140.24 683.673 L1139.68 683.673 L1139.13 683.673 L1138.57 683.673 L1138.01 683.673 L1137.45 683.673 L1136.89 683.673 L1136.33 683.673 L1135.77 683.673 L1135.21 683.673 L1134.65 683.673 L1134.09 683.673 L1133.53 683.673 L1132.97 683.673 L1132.41 683.673 L1131.86 683.673 L1131.3 683.673 L1130.74 683.673 L1130.18 683.673 L1129.62 683.673 L1129.06 683.673 L1128.5 683.673 L1127.94 683.673 L1127.38 683.673 L1126.82 683.673 L1126.26 683.673 L1125.7 683.673 L1125.14 683.673 L1124.59 683.673 L1124.03 683.673 L1123.47 683.673 L1122.91 683.673 L1122.35 683.673 L1121.79 683.673 L1121.23 683.673 L1120.67 683.673 L1120.11 683.673 L1119.55 683.673 L1118.99 683.673 L1118.43 683.673 L1117.87 683.673 L1117.31 683.673 L1116.76 683.673 L1116.2 683.673 L1115.64 683.673 L1115.08 683.673 L1114.52 683.673 L1113.96 683.673 L1113.4 683.673 L1112.84 683.673 L1112.28 683.673 L1111.72 683.673 L1111.16 683.673 L1110.6 683.673 L1110.04 683.673 L1109.49 683.673 L1108.93 683.673 L1108.37 683.673 L1107.81 683.673 L1107.25 683.673 L1106.69 683.673 L1106.13 683.673 L1105.57 683.673 L1105.01 683.673 L1104.45 683.673 L1103.89 683.673 L1103.33 683.673 L1102.77 683.673 L1102.22 683.673 L1101.66 683.673 L1101.1 683.673 L1100.54 683.673 L1099.98 683.673 L1099.42 683.673 L1098.86 683.673 L1098.3 683.673 L1097.74 683.673 L1097.18 683.673 L1096.62 683.673 L1096.06 683.673 L1095.5 683.673 L1094.94 683.673 L1094.39 683.673 L1093.83 683.673 L1093.27 683.673 L1092.71 683.673 L1092.15 683.673 L1091.59 683.673 L1091.03 683.673 L1090.47 683.673 L1089.91 683.673 L1089.35 683.673 L1088.79 683.673 L1088.23 683.673 L1087.67 683.673 L1087.12 683.673 L1086.56 683.673 L1086 683.673 L1085.44 683.673 L1084.88 683.673 L1084.32 683.673 L1083.76 683.673 L1083.2 683.673 L1082.64 683.673 L1082.08 683.673 L1081.52 683.673 L1080.96 683.673 L1080.4 683.673 L1079.85 683.673 L1079.29 683.673 L1078.73 683.673 L1078.17 683.673 L1077.61 683.673 L1077.05 683.673 L1076.49 683.673 L1075.93 683.673 L1075.37 683.673 L1074.81 683.673 L1074.25 683.673 L1073.69 683.673 L1073.13 683.673 L1072.57 683.673 L1072.02 683.673 L1071.46 683.673 L1070.9 683.673 L1070.34 683.673 L1069.78 683.673 L1069.22 683.673 L1068.66 683.673 L1068.1 683.673 L1067.54 683.673 L1066.98 683.673 L1066.42 683.673 L1065.86 683.673 L1065.3 683.673 L1064.75 683.673 L1064.19 683.673 L1063.63 683.673 L1063.07 683.673 L1062.51 683.673 L1061.95 683.673 L1061.39 683.673 L1060.83 683.673 L1060.27 683.673 L1059.71 683.673 L1059.15 683.673 L1058.59 683.673 L1058.03 683.673 L1057.48 683.673 L1056.92 683.673 L1056.36 683.673 L1055.8 683.673 L1055.24 683.673 L1054.68 683.673 L1054.12 683.673 L1053.56 683.673 L1053 683.673 L1052.44 683.673 L1051.88 683.673 L1051.32 683.673 L1050.76 683.673 L1050.2 683.673 L1049.65 683.673 L1049.09 683.673 L1048.53 683.673 L1047.97 683.673 L1047.41 683.673 L1046.85 683.673 L1046.29 683.673 L1045.73 683.673 L1045.17 683.673 L1044.61 683.673 L1044.05 683.673 L1043.49 683.673 L1042.93 683.673 L1042.38 683.673 L1041.82 683.673 L1041.26 683.673 L1040.7 683.673 L1040.14 683.673 L1039.58 683.673 L1039.02 683.673 L1038.46 683.673 L1037.9 683.673 L1037.34 683.673 L1036.78 683.673 L1036.22 683.673 L1035.66 683.673 L1035.1 683.673 L1034.55 683.673 L1033.99 683.673 L1033.43 683.673 L1032.87 683.673 L1032.31 683.673 L1031.75 683.673 L1031.19 683.673 L1030.63 683.673 L1030.07 683.673 L1029.51 683.673 L1028.95 683.673 L1028.39 683.673 L1027.83 683.673 L1027.28 683.673 L1026.72 683.673 L1026.16 683.673 L1025.6 683.673 L1025.04 683.673 L1024.48 683.673 L1023.92 683.673 L1023.36 683.673 L1022.8 683.673 L1022.24 683.673 L1021.68 683.673 L1021.12 683.673 L1020.56 683.673 L1020.01 683.673 L1019.45 683.673 L1018.89 683.673 L1018.33 683.673 L1017.77 683.673 L1017.21 683.673 L1016.65 683.673 L1016.09 683.673 L1015.53 683.673 L1014.97 683.673 L1014.41 683.673 L1013.85 683.673 L1013.29 683.673 L1012.73 683.673 L1012.18 683.673 L1011.62 683.673 L1011.06 683.673 L1010.5 683.673 L1009.94 683.673 L1009.38 683.673 L1008.82 683.673 L1008.26 683.673 L1007.7 683.673 L1007.14 683.673 L1006.58 683.673 L1006.02 683.673 L1005.46 683.673 L1004.91 683.673 L1004.35 683.673 L1003.79 683.673 L1003.23 683.673 L1002.67 683.673 L1002.11 683.673 L1001.55 683.673 L1000.99 683.673 L1000.43 683.673 L999.872 683.673 L999.313 683.673 L998.754 683.673 L998.194 683.673 L997.635 683.673 L997.076 683.673 L996.517 683.673 L995.957 683.673 L995.398 683.673 L994.839 683.673 L994.28 683.673 L993.72 683.673 L993.161 683.673 L992.602 683.673 L992.043 683.673 L991.483 683.673 L990.924 683.673 L990.365 683.673 L989.806 683.673 L989.246 683.673 L988.687 683.673 L988.128 683.673 L987.569 683.673 L987.009 683.673 L986.45 683.673 L985.891 683.673 L985.332 683.673 L984.772 683.673 L984.213 683.673 L983.654 683.673 L983.095 683.673 L982.535 683.673 L981.976 683.673 L981.417 683.673 L980.858 683.673 L980.298 683.673 L979.739 683.673 L979.18 683.673 L978.621 683.673 L978.061 683.673 L977.502 683.673 L976.943 683.673 L976.384 683.673 L975.824 683.673 L975.265 683.673 L974.706 683.673 L974.147 683.673 L973.587 683.673 L973.028 683.673 L972.469 683.673 L971.91 683.673 L971.35 683.673 L970.791 683.673 L970.232 683.673 L969.673 683.673 L969.113 683.673 L968.554 683.673 L967.995 683.673 L967.436 683.673 L966.876 683.673 L966.317 683.673 L965.758 683.673 L965.199 683.673 L964.639 683.673 L964.08 683.673 L963.521 683.673 L962.962 683.673 L962.402 683.673 L961.843 683.673 L961.284 683.673 L960.725 683.673 L960.165 683.673 L959.606 683.673 L959.047 683.673 L958.488 683.673 L957.928 683.673 L957.369 683.673 L956.81 683.673 L956.251 683.673 L955.691 683.673 L955.132 683.673 L954.573 683.673 L954.014 683.673 L953.454 683.673 L952.895 683.673 L952.336 683.673 L951.777 683.673 L951.217 683.673 L950.658 683.673 L950.099 683.673 L949.54 683.673 L948.98 683.673 L948.421 683.673 L947.862 683.673 L947.303 683.673 L946.743 683.673 L946.184 683.673 L945.625 683.673 L945.066 683.673 L944.506 683.673 L943.947 683.673 L943.388 683.673 L942.829 683.673 L942.269 683.673 L941.71 683.673 L941.151 683.673 L940.592 683.673 L940.032 683.673 L939.473 683.673 L938.914 683.673 L938.355 683.673 L937.795 683.673 L937.236 683.673 L936.677 683.673 L936.118 683.673 L935.558 683.673 L934.999 683.673 L934.44 683.673 L933.881 683.673 L933.321 683.673 L932.762 683.673 L932.203 683.673 L931.644 683.673 L931.084 683.673 L930.525 683.673 L929.966 683.673 L929.406 683.673 L928.847 683.673 L928.288 683.673 L927.729 683.673 L927.169 683.673 L926.61 683.673 L926.051 683.673 L925.492 683.673 L924.932 683.673 L924.373 683.673 L923.814 683.673 L923.255 683.673 L922.695 683.673 L922.136 683.673 L921.577 683.673 L921.018 683.673 L920.458 683.673 L919.899 683.673 L919.34 683.673 L918.781 683.673 L918.221 683.673 L917.662 683.673 L917.103 683.673 L916.544 683.673 L915.984 683.673 L915.425 683.673 L914.866 683.673 L914.307 683.673 L913.747 683.673 L913.188 683.673 L912.629 683.673 L912.07 683.673 L911.51 683.673 L910.951 683.673 L910.392 683.673 L909.833 683.673 L909.273 683.673 L908.714 683.673 L908.155 683.673 L907.596 683.673 L907.036 683.673 L906.477 683.673 L905.918 683.673 L905.359 683.673 L904.799 683.673 L904.24 683.673 L903.681 683.673 L903.122 683.673 L902.562 683.673 L902.003 683.673 L901.444 683.673 L900.885 683.673 L900.325 683.673 L899.766 683.673 L899.207 683.673 L898.648 683.673 L898.088 683.673 L897.529 683.673 L896.97 683.673 L896.411 683.673 L895.851 683.673 L895.292 683.673 L894.733 683.673 L894.174 683.673 L893.614 683.673 L893.055 683.673 L892.496 683.673 L891.937 683.673 L891.377 683.673 L890.818 683.673 L890.259 683.673 L889.7 683.673 L889.14 683.673 L888.581 683.673 L888.022 683.673 L887.463 683.673 L886.903 683.673 L886.344 683.673 L885.785 683.673 L885.226 683.673 L884.666 683.673 L884.107 683.673 L883.548 683.673 L882.989 683.673 L882.429 683.673 L881.87 683.673 L881.311 683.673 L880.752 683.673 L880.192 683.673 L879.633 683.673 L879.074 683.673 L878.515 683.673 L877.955 683.673 L877.396 683.673 L876.837 683.673 L876.278 683.673 L875.718 683.673 L875.159 683.673 L874.6 683.673 L874.041 683.673 L873.481 683.673 L872.922 683.673 L872.363 683.673 L871.804 683.673 L871.244 683.673 L870.685 683.673 L870.126 683.673 L869.567 683.673 L869.007 683.673 L868.448 683.673 L867.889 683.673 L867.33 683.673 L866.77 683.673 L866.211 683.673 L865.652 683.673 L865.093 683.673 L864.533 683.673 L863.974 683.673 L863.415 683.673 L862.856 683.673 L862.296 683.673 L861.737 683.673 L861.178 683.673 L860.619 683.673 L860.059 683.673 L859.5 683.673 L858.941 683.673 L858.382 683.673 L857.822 683.673 L857.263 683.673 L856.704 683.673 L856.145 683.673 L855.585 683.673 L855.026 683.673 L854.467 683.673 L853.908 683.673 L853.348 683.673 L852.789 683.673 L852.23 683.673 L851.671 683.673 L851.111 683.673 L850.552 683.673 L849.993 683.673 L849.434 683.673 L848.874 683.673 L848.315 683.673 L847.756 683.673 L847.197 683.673 L846.637 683.673 L846.078 683.673 L845.519 683.673 L844.96 683.673 L844.4 683.673 L843.841 683.673 L843.282 683.673 L842.723 683.673 L842.163 683.673 L841.604 683.673 L841.045 683.673 L840.486 683.673 L839.926 683.673 L839.367 683.673 L838.808 683.673 L838.249 683.673 L837.689 683.673 L837.13 683.673 L836.571 683.673 L836.012 683.673 L835.452 683.673 L834.893 683.673 L834.334 683.673 L833.775 683.673 L833.215 683.673 L832.656 683.673 L832.097 683.673 L831.538 683.673 L830.978 683.673 L830.419 683.673 L829.86 683.673 L829.301 683.673 L828.741 683.673 L828.182 683.673 L827.623 683.673 L827.064 683.673 L826.504 683.673 L825.945 683.673 L825.386 683.673 L824.827 683.673 L824.267 683.673 L823.708 683.673 L823.149 683.673 L822.59 683.673 L822.03 683.673 L821.471 683.673 L820.912 683.673 L820.353 683.673 L819.793 683.673 L819.234 683.673 L818.675 683.673 L818.116 683.673 L817.556 683.673 L816.997 683.673 L816.438 683.673 L815.879 683.673 L815.319 683.673 L814.76 683.673 L814.201 683.673 L813.642 683.673 L813.082 683.673 L812.523 683.673 L811.964 683.673 L811.405 683.673 L810.845 683.673 L810.286 683.673 L809.727 683.673 L809.168 683.673 L808.608 683.673 L808.049 683.673 L807.49 683.673 L806.931 683.673 L806.371 683.673 L805.812 683.673 L805.253 683.673 L804.693 683.673 L804.134 683.673 L803.575 683.673 L803.016 683.673 L802.456 683.673 L801.897 683.673 L801.338 683.673 L800.779 683.673 L800.219 683.673 L799.66 683.673 L799.101 683.673 L798.542 683.673 L797.982 683.673 L797.423 683.673 L796.864 683.673 L796.305 683.673 L795.745 683.673 L795.186 683.673 L794.627 683.673 L794.068 683.673 L793.508 683.673 L792.949 683.673 L792.39 683.673 L791.831 683.673 L791.271 683.673 L790.712 683.673 L790.153 683.673 L789.594 683.673 L789.034 683.673 L788.475 683.673 L787.916 683.673 L787.357 683.673 L786.797 683.673 L786.238 683.673 L785.679 683.673 L785.12 683.673 L784.56 683.673 L784.001 683.673 L783.442 683.673 L782.883 683.673 L782.323 683.673 L781.764 683.673 L781.205 683.673 L780.646 683.673 L780.086 683.673 L779.527 683.673 L778.968 683.673 L778.409 683.673 L777.849 683.673 L777.29 683.673 L776.731 683.673 L776.172 683.673 L775.612 683.673 L775.053 683.673 L774.494 683.673 L773.935 683.673 L773.375 683.673 L772.816 683.673 L772.257 683.673 L771.698 683.673 L771.138 683.673 L770.579 683.673 L770.02 683.673 L769.461 683.673 L768.901 683.673 L768.342 683.673 L767.783 683.673 L767.224 683.673 L766.664 683.673 L766.105 683.673 L765.546 683.673 L764.987 683.673 L764.427 683.673 L763.868 683.673 L763.309 683.673 L762.75 683.673 L762.19 683.673 L761.631 683.673 L761.072 683.673 L760.513 683.673 L759.953 683.673 L759.394 683.673 L758.835 683.673 L758.276 683.673 L757.716 683.673 L757.157 683.673 L756.598 683.673 L756.039 683.673 L755.479 683.673 L754.92 683.673 L754.361 683.673 L753.802 683.673 L753.242 683.673 L752.683 683.673 L752.124 683.673 L751.565 683.673 L751.005 683.673 L750.446 683.673 L749.887 683.673 L749.328 683.673 L748.768 683.673 L748.209 683.673 L747.65 683.673 L747.091 683.673 L746.531 683.673 L745.972 683.673 L745.413 683.673 L744.854 683.673 L744.294 683.673 L743.735 683.673 L743.176 683.673 L742.617 683.673 L742.057 683.673 L741.498 683.673 L740.939 683.673 L740.38 683.673 L739.82 683.673 L739.261 683.673 L738.702 683.673 L738.143 683.673 L737.583 683.673 L737.024 683.673 L736.465 683.673 L735.906 683.673 L735.346 683.673 L734.787 683.673 L734.228 683.673 L733.669 683.673 L733.109 683.673 L732.55 683.673 L731.991 683.673 L731.432 683.673 L730.872 683.673 L730.313 683.673 L729.754 683.673 L729.195 683.673 L728.635 683.673 L728.076 683.673 L727.517 683.673 L726.958 683.673 L726.398 683.673 L725.839 683.673 L725.28 683.673 L724.721 683.673 L724.161 683.673 L723.602 683.673 L723.043 683.673 L722.484 683.673 L721.924 683.673 L721.365 683.673 L720.806 683.673 L720.247 683.673  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.431 720.806,684.431 721.365,684.431 721.924,684.431 722.484,684.431 723.043,684.431 723.602,684.431 724.161,684.431 724.721,684.431 725.28,684.431 725.839,684.431 726.398,684.431 726.958,684.431 727.517,684.431 728.076,684.431 728.635,684.431 729.195,684.431 729.754,684.431 730.313,684.431 730.872,684.431 731.432,684.431 731.991,684.431 732.55,684.431 733.109,684.431 733.669,684.431 734.228,684.431 734.787,684.431 735.346,684.431 735.906,684.431 736.465,684.431 737.024,684.431 737.583,684.431 738.143,684.431 738.702,684.431 739.261,684.431 739.82,684.431 740.38,684.431 740.939,684.431 741.498,684.431 742.057,684.431 742.617,684.431 743.176,684.431 743.735,684.431 744.294,684.431 744.854,684.431 745.413,684.431 745.972,684.431 746.531,684.431 747.091,684.431 747.65,684.431 748.209,684.431 748.768,684.431 749.328,684.431 749.887,684.431 750.446,684.431 751.005,684.431 751.565,684.431 752.124,684.431 752.683,684.431 753.242,684.431 753.802,684.431 754.361,684.431 754.92,684.431 755.479,684.431 756.039,684.431 756.598,684.431 757.157,684.431 757.716,684.431 758.276,684.431 758.835,684.431 759.394,684.431 759.953,684.431 760.513,684.431 761.072,684.431 761.631,684.431 762.19,684.431 762.75,684.431 763.309,684.431 763.868,684.431 764.427,684.431 764.987,684.431 765.546,684.431 766.105,684.431 766.664,684.431 767.224,684.431 767.783,684.431 768.342,684.431 768.901,684.431 769.461,684.431 770.02,684.431 770.579,684.431 771.138,684.431 771.698,684.431 772.257,684.431 772.816,684.431 773.375,684.431 773.935,684.431 774.494,684.431 775.053,684.431 775.612,684.431 776.172,684.431 776.731,684.431 777.29,684.431 777.849,684.431 778.409,684.431 778.968,684.431 779.527,684.431 780.086,684.431 780.646,684.431 781.205,684.431 781.764,684.431 782.323,684.431 782.883,684.431 783.442,684.431 784.001,684.431 784.56,684.431 785.12,684.431 785.679,684.431 786.238,684.431 786.797,684.431 787.357,684.431 787.916,684.431 788.475,684.431 789.034,684.431 789.594,684.431 790.153,684.431 790.712,684.431 791.271,684.431 791.831,684.431 792.39,684.431 792.949,684.431 793.508,684.431 794.068,684.431 794.627,684.431 795.186,684.431 795.745,684.431 796.305,684.431 796.864,684.431 797.423,684.431 797.982,684.431 798.542,684.431 799.101,684.431 799.66,684.431 800.219,684.431 800.779,684.431 801.338,684.431 801.897,684.431 802.456,684.431 803.016,684.431 803.575,684.431 804.134,684.431 804.693,684.431 805.253,684.431 805.812,684.431 806.371,684.431 806.931,684.431 807.49,684.431 808.049,684.431 808.608,684.431 809.168,684.431 809.727,684.431 810.286,684.431 810.845,684.431 811.405,684.431 811.964,684.431 812.523,684.431 813.082,684.431 813.642,684.431 814.201,684.431 814.76,684.431 815.319,684.431 815.879,684.431 816.438,684.431 816.997,684.431 817.556,684.431 818.116,684.431 818.675,684.431 819.234,684.431 819.793,684.431 820.353,684.431 820.912,684.431 821.471,684.431 822.03,684.431 822.59,684.431 823.149,684.431 823.708,684.431 824.267,684.431 824.827,684.431 825.386,684.431 825.945,684.431 826.504,684.431 827.064,684.431 827.623,684.431 828.182,684.431 828.741,684.431 829.301,684.431 829.86,684.431 830.419,684.431 830.978,684.431 831.538,684.431 832.097,684.431 832.656,684.431 833.215,684.431 833.775,684.431 834.334,684.431 834.893,684.431 835.452,684.431 836.012,684.431 836.571,684.431 837.13,684.431 837.689,684.431 838.249,684.431 838.808,684.431 839.367,684.431 839.926,684.431 840.486,684.431 841.045,684.431 841.604,684.431 842.163,684.431 842.723,684.431 843.282,684.431 843.841,684.431 844.4,684.431 844.96,684.431 845.519,684.431 846.078,684.431 846.637,684.431 847.197,684.431 847.756,684.431 848.315,684.431 848.874,684.431 849.434,684.431 849.993,684.431 850.552,684.431 851.111,684.431 851.671,684.431 852.23,684.431 852.789,684.431 853.348,684.431 853.908,684.431 854.467,684.431 855.026,684.431 855.585,684.431 856.145,684.431 856.704,684.431 857.263,684.431 857.822,684.431 858.382,684.431 858.941,684.431 859.5,684.431 860.059,684.431 860.619,684.431 861.178,684.431 861.737,684.431 862.296,684.431 862.856,684.431 863.415,684.431 863.974,684.431 864.533,684.431 865.093,684.431 865.652,684.431 866.211,684.431 866.77,684.431 867.33,684.431 867.889,684.431 868.448,684.431 869.007,684.431 869.567,684.431 870.126,684.431 870.685,684.431 871.244,684.431 871.804,684.431 872.363,684.431 872.922,684.431 873.481,684.431 874.041,684.431 874.6,684.431 875.159,684.431 875.718,684.431 876.278,684.431 876.837,684.431 877.396,684.431 877.955,684.431 878.515,684.431 879.074,684.431 879.633,684.431 880.192,684.431 880.752,684.431 881.311,684.431 881.87,684.431 882.429,684.431 882.989,684.431 883.548,684.431 884.107,684.431 884.666,684.431 885.226,684.431 885.785,684.431 886.344,684.431 886.903,684.431 887.463,684.431 888.022,684.431 888.581,684.431 889.14,684.431 889.7,684.431 890.259,684.431 890.818,684.431 891.377,684.431 891.937,684.431 892.496,684.431 893.055,684.431 893.614,684.431 894.174,684.431 894.733,684.431 895.292,684.431 895.851,684.431 896.411,684.431 896.97,684.431 897.529,684.431 898.088,684.431 898.648,684.431 899.207,684.431 899.766,684.431 900.325,684.431 900.885,684.431 901.444,684.431 902.003,684.431 902.562,684.431 903.122,684.431 903.681,684.431 904.24,684.431 904.799,684.431 905.359,684.431 905.918,684.431 906.477,684.431 907.036,684.431 907.596,684.431 908.155,684.431 908.714,684.431 909.273,684.431 909.833,684.431 910.392,684.431 910.951,684.431 911.51,684.431 912.07,684.431 912.629,684.431 913.188,684.431 913.747,684.431 914.307,684.431 914.866,684.431 915.425,684.431 915.984,684.431 916.544,684.431 917.103,684.431 917.662,684.431 918.221,684.431 918.781,684.431 919.34,684.431 919.899,684.431 920.458,684.431 921.018,684.431 921.577,684.431 922.136,684.431 922.695,684.431 923.255,684.431 923.814,684.431 924.373,684.431 924.932,684.431 925.492,684.431 926.051,684.431 926.61,684.431 927.169,684.431 927.729,684.431 928.288,684.431 928.847,684.431 929.406,684.431 929.966,684.431 930.525,684.431 931.084,684.431 931.644,684.431 932.203,684.431 932.762,684.431 933.321,684.431 933.881,684.431 934.44,684.431 934.999,684.431 935.558,684.431 936.118,684.431 936.677,684.431 937.236,684.431 937.795,684.431 938.355,684.431 938.914,684.431 939.473,684.431 940.032,684.431 940.592,684.431 941.151,684.431 941.71,684.431 942.269,684.431 942.829,684.431 943.388,684.431 943.947,684.431 944.506,684.431 945.066,684.431 945.625,684.431 946.184,684.431 946.743,684.431 947.303,684.431 947.862,684.431 948.421,684.431 948.98,684.431 949.54,684.431 950.099,684.431 950.658,684.431 951.217,684.431 951.777,684.431 952.336,684.431 952.895,684.431 953.454,684.431 954.014,684.431 954.573,684.431 955.132,684.431 955.691,684.431 956.251,684.431 956.81,684.431 957.369,684.431 957.928,684.431 958.488,684.431 959.047,684.431 959.606,684.431 960.165,684.431 960.725,684.431 961.284,684.431 961.843,684.431 962.402,684.431 962.962,684.431 963.521,684.431 964.08,684.431 964.639,684.431 965.199,684.431 965.758,684.431 966.317,684.431 966.876,684.431 967.436,684.431 967.995,684.431 968.554,684.431 969.113,684.431 969.673,684.431 970.232,684.431 970.791,684.431 971.35,684.431 971.91,684.431 972.469,684.431 973.028,684.431 973.587,684.431 974.147,684.431 974.706,684.431 975.265,684.431 975.824,684.431 976.384,684.431 976.943,684.431 977.502,684.431 978.061,684.431 978.621,684.431 979.18,684.431 979.739,684.431 980.298,684.431 980.858,684.431 981.417,684.431 981.976,684.431 982.535,684.431 983.095,684.431 983.654,684.431 984.213,684.431 984.772,684.431 985.332,684.431 985.891,684.431 986.45,684.431 987.009,684.431 987.569,684.431 988.128,684.431 988.687,684.431 989.246,684.431 989.806,684.431 990.365,684.431 990.924,684.431 991.483,684.431 992.043,684.431 992.602,684.431 993.161,684.431 993.72,684.431 994.28,684.431 994.839,684.431 995.398,684.431 995.957,684.431 996.517,684.431 997.076,684.431 997.635,684.431 998.194,684.431 998.754,684.431 999.313,684.431 999.872,684.431 1000.43,684.431 1000.99,684.431 1001.55,684.431 1002.11,684.431 1002.67,684.431 1003.23,684.431 1003.79,684.431 1004.35,684.431 1004.91,684.431 1005.46,684.431 1006.02,684.431 1006.58,684.431 1007.14,684.431 1007.7,684.431 1008.26,684.431 1008.82,684.431 1009.38,684.431 1009.94,684.431 1010.5,684.431 1011.06,684.431 1011.62,684.431 1012.18,684.431 1012.73,684.431 1013.29,684.431 1013.85,684.431 1014.41,684.431 1014.97,684.431 1015.53,684.431 1016.09,684.431 1016.65,684.431 1017.21,684.431 1017.77,684.431 1018.33,684.431 1018.89,684.431 1019.45,684.431 1020.01,684.431 1020.56,684.431 1021.12,684.431 1021.68,684.431 1022.24,684.431 1022.8,684.431 1023.36,684.431 1023.92,684.431 1024.48,684.431 1025.04,684.431 1025.6,684.431 1026.16,684.431 1026.72,684.431 1027.28,684.431 1027.83,684.431 1028.39,684.431 1028.95,684.431 1029.51,684.431 1030.07,684.431 1030.63,684.431 1031.19,684.431 1031.75,684.431 1032.31,684.431 1032.87,684.431 1033.43,684.431 1033.99,684.431 1034.55,684.431 1035.1,684.431 1035.66,684.431 1036.22,684.431 1036.78,684.431 1037.34,684.431 1037.9,684.431 1038.46,684.431 1039.02,684.431 1039.58,684.431 1040.14,684.431 1040.7,684.431 1041.26,684.431 1041.82,684.431 1042.38,684.431 1042.93,684.431 1043.49,684.431 1044.05,684.431 1044.61,684.431 1045.17,684.431 1045.73,684.431 1046.29,684.431 1046.85,684.431 1047.41,684.431 1047.97,684.431 1048.53,684.431 1049.09,684.431 1049.65,684.431 1050.2,684.431 1050.76,684.431 1051.32,684.431 1051.88,684.431 1052.44,684.431 1053,684.431 1053.56,684.431 1054.12,684.431 1054.68,684.431 1055.24,684.431 1055.8,684.431 1056.36,684.431 1056.92,684.431 1057.48,684.431 1058.03,684.431 1058.59,684.431 1059.15,684.431 1059.71,684.431 1060.27,684.431 1060.83,684.431 1061.39,684.431 1061.95,684.431 1062.51,684.431 1063.07,684.431 1063.63,684.431 1064.19,684.431 1064.75,684.431 1065.3,684.431 1065.86,684.431 1066.42,684.431 1066.98,684.431 1067.54,684.431 1068.1,684.431 1068.66,684.431 1069.22,684.431 1069.78,684.431 1070.34,684.431 1070.9,684.431 1071.46,684.431 1072.02,684.431 1072.57,684.431 1073.13,684.431 1073.69,684.431 1074.25,684.431 1074.81,684.431 1075.37,684.431 1075.93,684.431 1076.49,684.431 1077.05,684.431 1077.61,684.431 1078.17,684.431 1078.73,684.431 1079.29,684.431 1079.85,684.431 1080.4,684.431 1080.96,684.431 1081.52,684.431 1082.08,684.431 1082.64,684.431 1083.2,684.431 1083.76,684.431 1084.32,684.431 1084.88,684.431 1085.44,684.431 1086,684.431 1086.56,684.431 1087.12,684.431 1087.67,684.431 1088.23,684.431 1088.79,684.431 1089.35,684.431 1089.91,684.431 1090.47,684.431 1091.03,684.431 1091.59,684.431 1092.15,684.431 1092.71,684.431 1093.27,684.431 1093.83,684.431 1094.39,684.431 1094.94,684.431 1095.5,684.431 1096.06,684.431 1096.62,684.431 1097.18,684.431 1097.74,684.431 1098.3,684.431 1098.86,684.431 1099.42,684.431 1099.98,684.431 1100.54,684.431 1101.1,684.431 1101.66,684.431 1102.22,684.431 1102.77,684.431 1103.33,684.431 1103.89,684.431 1104.45,684.431 1105.01,684.431 1105.57,684.431 1106.13,684.431 1106.69,684.431 1107.25,684.431 1107.81,684.431 1108.37,684.431 1108.93,684.431 1109.49,684.431 1110.04,684.431 1110.6,684.431 1111.16,684.431 1111.72,684.431 1112.28,684.431 1112.84,684.431 1113.4,684.431 1113.96,684.431 1114.52,684.431 1115.08,684.431 1115.64,684.431 1116.2,684.431 1116.76,684.431 1117.31,684.431 1117.87,684.431 1118.43,684.431 1118.99,684.431 1119.55,684.431 1120.11,684.431 1120.67,684.431 1121.23,684.431 1121.79,684.431 1122.35,684.431 1122.91,684.431 1123.47,684.431 1124.03,684.431 1124.59,684.431 1125.14,684.431 1125.7,684.431 1126.26,684.431 1126.82,684.431 1127.38,684.431 1127.94,684.431 1128.5,684.431 1129.06,684.431 1129.62,684.431 1130.18,684.431 1130.74,684.431 1131.3,684.431 1131.86,684.431 1132.41,684.431 1132.97,684.431 1133.53,684.431 1134.09,684.431 1134.65,684.431 1135.21,684.431 1135.77,684.431 1136.33,684.431 1136.89,684.431 1137.45,684.431 1138.01,684.431 1138.57,684.431 1139.13,684.431 1139.68,684.431 1140.24,684.431 1140.8,684.431 1141.36,684.431 1141.92,684.431 1142.48,684.431 1143.04,684.431 1143.6,684.431 1144.16,684.431 1144.72,684.431 1145.28,684.431 1145.84,684.431 1146.4,684.431 1146.96,684.431 1147.51,684.431 1148.07,684.431 1148.63,684.431 1149.19,684.431 1149.75,684.431 1150.31,684.431 1150.87,684.431 1151.43,684.431 1151.99,684.431 1152.55,684.431 1153.11,684.431 1153.67,684.431 1154.23,684.431 1154.78,684.431 1155.34,684.431 1155.9,684.431 1156.46,684.431 1157.02,684.431 1157.58,684.431 1158.14,684.431 1158.7,684.431 1159.26,684.431 1159.82,684.431 1160.38,684.431 1160.94,684.431 1161.5,684.431 1162.05,684.431 1162.61,684.431 1163.17,684.431 1163.73,684.431 1164.29,684.431 1164.85,684.431 1165.41,684.431 1165.97,684.431 1166.53,684.431 1167.09,684.431 1167.65,684.431 1168.21,684.431 1168.77,684.431 1169.33,684.431 1169.88,684.431 1170.44,684.431 1171,684.431 1171.56,684.431 1172.12,684.431 1172.68,684.431 1173.24,684.431 1173.8,684.431 1174.36,684.431 1174.92,684.431 1175.48,684.431 1176.04,684.431 1176.6,684.431 1177.15,684.431 1177.71,684.431 1178.27,684.431 1178.83,684.431 1179.39,684.431 1179.95,684.431 1180.51,684.431 1181.07,684.431 1181.63,684.431 1182.19,684.431 1182.75,684.431 1183.31,684.431 1183.87,684.431 1184.43,684.431 1184.98,684.431 1185.54,684.431 1186.1,684.431 1186.66,684.431 1187.22,684.431 1187.78,684.431 1188.34,684.431 1188.9,684.431 1189.46,684.431 1190.02,684.431 1190.58,684.431 1191.14,684.431 1191.7,684.431 1192.25,684.431 1192.81,684.431 1193.37,684.431 1193.93,684.431 1194.49,684.431 1195.05,684.431 1195.61,684.431 1196.17,684.431 1196.73,684.431 1197.29,684.431 1197.85,684.431 1198.41,684.431 1198.97,684.431 1199.52,684.431 1200.08,684.431 1200.64,684.431 1201.2,684.431 1201.76,684.431 1202.32,684.431 1202.88,684.431 1203.44,684.431 1204,684.431 1204.56,684.431 1205.12,684.431 1205.68,684.431 1206.24,684.431 1206.8,684.431 1207.35,684.431 1207.91,684.431 1208.47,684.431 1209.03,684.431 1209.59,684.431 1210.15,684.431 1210.71,684.431 1211.27,684.431 1211.83,684.431 1212.39,684.431 1212.95,684.431 1213.51,684.431 1214.07,684.431 1214.62,684.431 1215.18,684.431 1215.74,684.431 1216.3,684.431 1216.86,684.431 1217.42,684.431 1217.98,684.431 1218.54,684.431 1219.1,684.431 1219.66,684.431 1220.22,684.431 1220.78,684.431 1221.34,684.431 1221.89,684.431 1222.45,684.431 1223.01,684.431 1223.57,684.431 1224.13,684.431 1224.69,684.431 1225.25,684.431 1225.81,684.431 1226.37,684.431 1226.93,684.431 1227.49,684.431 1228.05,684.431 1228.61,684.431 1229.17,684.431 1229.72,684.431 1230.28,684.431 1230.84,684.431 1231.4,684.431 1231.96,684.431 1232.52,684.431 1233.08,684.431 1233.64,684.431 1234.2,684.431 1234.76,684.431 1235.32,684.431 1235.88,684.431 1236.44,684.431 1236.99,684.431 1237.55,684.431 1238.11,684.431 1238.67,684.431 1239.23,684.431 1239.79,684.431 1240.35,684.431 1240.91,684.431 1241.47,684.431 1242.03,684.431 1242.59,684.431 1243.15,684.431 1243.71,684.431 1244.26,684.431 1244.82,684.431 1245.38,684.431 1245.94,684.431 1246.5,684.431 1247.06,684.431 1247.62,684.431 1248.18,684.431 1248.74,684.431 1249.3,684.431 1249.86,684.431 1250.42,684.431 1250.98,684.431 1251.54,684.431 1252.09,684.431 1252.65,684.431 1253.21,684.431 1253.77,684.431 1254.33,684.431 1254.89,684.431 1255.45,684.431 1256.01,684.431 1256.57,684.431 1257.13,684.431 1257.69,684.431 1258.25,684.431 1258.81,684.431 1259.36,684.431 1259.92,684.431 1260.48,684.431 1261.04,684.431 1261.6,684.431 1262.16,684.431 1262.72,684.431 1263.28,684.431 1263.84,684.431 1264.4,684.431 1264.96,684.431 1265.52,684.431 1266.08,684.431 1266.63,684.431 1267.19,684.431 1267.75,684.431 1268.31,684.431 1268.87,684.431 1269.43,684.431 1269.99,684.431 1270.55,684.431 1271.11,684.431 1271.67,684.431 1272.23,684.431 1272.79,684.431 1273.35,684.431 1273.91,684.431 1274.46,684.431 1275.02,684.431 1275.58,684.431 1276.14,684.431 1276.7,684.431 1277.26,684.431 1277.82,684.431 1278.38,684.431 1278.94,684.431 1279.5,684.431 1280.06,684.431 1280.62,684.431 1281.18,684.431 1281.73,684.431 1282.29,684.431 1282.85,684.431 1283.41,684.431 1283.97,684.431 1284.53,684.431 1285.09,684.431 1285.65,684.431 1286.21,684.431 1286.77,684.431 1287.33,684.431 1287.89,684.431 1288.45,684.431 1289,684.431 1289.56,684.431 1290.12,684.431 1290.68,684.431 1291.24,684.431 1291.8,684.431 1292.36,684.431 1292.92,684.431 1293.48,684.431 1294.04,684.431 1294.6,684.431 1295.16,684.431 1295.72,684.431 1296.28,684.431 1296.83,684.431 1297.39,684.431 1297.95,684.431 1298.51,684.431 1299.07,684.431 1299.63,684.431 1300.19,684.431 1300.75,684.431 1301.31,684.431 1301.87,684.431 1302.43,684.431 1302.99,684.431 1303.55,684.431 1304.1,684.431 1304.66,684.431 1305.22,684.431 1305.78,684.431 1306.34,684.431 1306.9,684.431 1307.46,684.431 1308.02,684.431 1308.58,684.431 1309.14,684.431 1309.7,684.431 1310.26,684.431 1310.82,684.431 1311.38,684.431 1311.93,684.431 1312.49,684.431 1313.05,684.431 1313.61,684.431 1314.17,684.431 1314.73,684.431 1315.29,684.431 1315.85,684.431 1316.41,684.431 1316.97,684.431 1317.53,684.431 1318.09,684.431 1318.65,684.431 1319.2,684.431 1319.76,684.431 1320.32,684.431 1320.88,684.431 1321.44,684.431 1322,684.431 1322.56,684.431 1323.12,684.431 1323.68,684.431 1324.24,684.431 1324.8,684.431 1325.36,684.431 1325.92,684.431 1326.47,684.431 1327.03,684.431 1327.59,684.431 1328.15,684.431 1328.71,684.431 1329.27,684.431 1329.83,684.431 1330.39,684.431 1330.95,684.431 1331.51,684.431 1332.07,684.431 1332.63,684.431 1333.19,684.431 1333.75,684.431 1334.3,684.431 1334.86,684.431 1335.42,684.431 1335.98,684.431 1336.54,684.431 1337.1,684.431 1337.66,684.431 1338.22,684.431 1338.78,684.431 1339.34,684.431 1339.9,684.431 1340.46,684.431 1341.02,684.431 1341.57,684.431 1342.13,684.431 1342.69,684.431 1343.25,684.431 1343.81,684.431 1344.37,684.431 1344.93,684.431 1345.49,684.431 1346.05,684.431 1346.61,684.431 1347.17,684.431 1347.73,684.431 1348.29,684.431 1348.84,684.431 1349.4,684.431 1349.96,684.431 1350.52,684.431 1351.08,684.431 1351.64,684.431 1352.2,684.431 1352.76,684.431 1353.32,684.431 1353.88,684.431 1354.44,684.431 1355,684.431 1355.56,684.431 1356.12,684.431 1356.67,684.431 1357.23,684.431 1357.79,684.431 1358.35,684.431 1358.91,684.431 1359.47,684.431 1360.03,684.431 1360.59,684.431 1361.15,684.431 1361.71,684.431 1362.27,684.431 1362.83,684.431 1363.39,684.431 1363.94,684.431 1364.5,684.431 1365.06,684.431 1365.62,684.431 1366.18,684.431 1366.74,684.431 1367.3,684.431 1367.86,684.431 1368.42,684.431 1368.98,684.431 1369.54,684.431 1370.1,684.431 1370.66,684.431 1371.21,684.431 1371.77,684.431 1372.33,684.431 1372.89,684.431 1373.45,684.431 1374.01,684.431 1374.57,684.431 1375.13,684.431 1375.69,684.431 1376.25,684.431 1376.81,684.431 1377.37,684.431 1377.93,684.431 1378.49,684.431 1379.04,684.431 1379.6,684.431 1380.16,684.431 1380.72,684.431 1381.28,684.431 1381.84,684.431 1382.4,684.431 1382.96,684.431 1383.52,684.431 1384.08,684.431 1384.64,684.431 1385.2,684.431 1385.76,684.431 1386.31,684.431 1386.87,684.431 1387.43,684.431 1387.99,684.431 1388.55,684.431 1389.11,684.431 1389.67,684.431 1390.23,684.431 1390.79,684.431 1391.35,684.431 1391.91,684.431 1392.47,684.431 1393.03,684.431 1393.58,684.431 1394.14,684.431 1394.7,684.431 1395.26,684.431 1395.82,684.431 1396.38,684.431 1396.94,684.431 1397.5,684.431 1398.06,684.431 1398.62,684.431 1399.18,684.431 1399.74,684.431 1400.3,684.431 1400.86,684.431 1401.41,684.431 1401.97,684.431 1402.53,684.431 1403.09,684.431 1403.65,684.431 1404.21,684.431 1404.77,684.431 1405.33,684.431 1405.89,684.431 1406.45,684.431 1407.01,684.431 1407.57,684.431 1408.13,684.431 1408.68,684.431 1409.24,684.431 1409.8,684.431 1410.36,684.431 1410.92,684.431 1411.48,684.431 1412.04,684.431 1412.6,684.431 1413.16,684.431 1413.72,684.431 1414.28,684.431 1414.84,684.431 1415.4,684.431 1415.95,684.431 1416.51,684.431 1417.07,684.431 1417.63,684.431 1418.19,684.431 1418.75,684.431 1419.31,684.431 1419.87,684.431 1420.43,684.431 1420.99,684.431 1421.55,684.431 1422.11,684.431 1422.67,684.431 1423.23,684.431 1423.78,684.431 1424.34,684.431 1424.9,684.431 1425.46,684.431 1426.02,684.431 1426.58,684.431 1427.14,684.431 1427.7,684.431 1428.26,684.431 1428.82,684.431 1429.38,684.431 1429.94,684.431 1430.5,684.431 1431.05,684.431 1431.61,684.431 1432.17,684.431 1432.73,684.431 1433.29,684.431 1433.85,684.431 1434.41,684.431 1434.97,684.431 1435.53,684.431 1436.09,684.431 1436.65,684.431 1437.21,684.431 1437.77,684.431 1438.33,684.431 1438.88,684.431 1439.44,684.431 1440,684.431 1440.56,684.431 1441.12,684.431 1441.68,684.431 1442.24,684.431 1442.8,684.431 1443.36,684.431 1443.92,684.431 1444.48,684.431 1445.04,684.431 1445.6,684.431 1446.15,684.431 1446.71,684.431 1447.27,684.431 1447.83,684.431 1448.39,684.431 1448.95,684.431 1449.51,684.431 1450.07,684.431 1450.63,684.431 1451.19,684.431 1451.75,684.431 1452.31,684.431 1452.87,684.431 1453.42,684.431 1453.98,684.431 1454.54,684.431 1455.1,684.431 1455.66,684.431 1456.22,684.431 1456.78,684.431 1457.34,684.431 1457.9,684.431 1458.46,684.431 1459.02,684.431 1459.58,684.431 1460.14,684.431 1460.7,684.431 1461.25,684.431 1461.81,684.431 1462.37,684.431 1462.93,684.431 1463.49,684.431 1464.05,684.431 1464.61,684.431 1465.17,684.431 1465.73,684.431 1466.29,684.431 1466.85,684.431 1467.41,684.431 1467.97,684.431 1468.52,684.431 1469.08,684.431 1469.64,684.431 1470.2,684.431 1470.76,684.431 1471.32,684.431 1471.88,684.431 1472.44,684.431 1473,684.431 1473.56,684.431 1474.12,684.431 1474.68,684.431 1475.24,684.431 1475.79,684.431 1476.35,684.431 1476.91,684.431 1477.47,684.431 1478.03,684.431 1478.59,684.431 1479.15,684.431 1479.71,684.431 1480.27,684.431 1480.83,684.431 1481.39,684.431 1481.95,684.431 1482.51,684.431 1483.07,684.431 1483.62,684.431 1484.18,684.431 1484.74,684.431 1485.3,684.431 1485.86,684.431 1486.42,684.431 1486.98,684.431 1487.54,684.431 1488.1,684.431 1488.66,684.431 1489.22,684.431 1489.78,684.431 1490.34,684.431 1490.89,684.431 1491.45,684.431 1492.01,684.431 1492.57,684.431 1493.13,684.431 1493.69,684.431 1494.25,684.431 1494.81,684.431 1495.37,684.431 1495.93,684.431 1496.49,684.431 1497.05,684.431 1497.61,684.431 1498.16,684.431 1498.72,684.431 1499.28,684.431 1499.84,684.431 1500.4,684.431 1500.96,684.431 1501.52,684.431 1502.08,684.431 1502.64,684.431 1503.2,684.431 1503.76,684.431 1504.32,684.431 1504.88,684.431 1505.44,684.431 1505.99,684.431 1506.55,684.431 1507.11,684.431 1507.67,684.431 1508.23,684.431 1508.79,684.431 1509.35,684.431 1509.91,684.431 1510.47,684.431 1511.03,684.431 1511.59,684.431 1512.15,684.431 1512.71,684.431 1513.26,684.431 1513.82,684.431 1514.38,684.431 1514.94,684.431 1515.5,684.431 1516.06,684.431 1516.62,684.431 1517.18,684.431 1517.74,684.431 1518.3,684.431 1518.86,684.431 1519.42,684.431 1519.98,684.431 1520.53,684.431 1521.09,684.431 1521.65,684.431 1522.21,684.431 1522.77,684.431 1523.33,684.431 1523.89,684.431 1524.45,684.431 1525.01,684.431 1525.57,684.431 1526.13,684.431 1526.69,684.431 1527.25,684.431 1527.81,684.431 1528.36,684.431 1528.92,684.431 1529.48,684.431 1530.04,684.431 1530.6,684.431 1531.16,684.431 1531.72,684.431 1532.28,684.431 1532.84,684.431 1533.4,684.431 1533.96,684.431 1534.52,684.431 1535.08,684.431 1535.63,684.431 1536.19,684.431 1536.75,684.431 1537.31,684.431 1537.87,684.431 1538.43,684.431 1538.99,684.431 1539.55,684.431 1540.11,684.431 1540.67,684.431 1541.23,684.431 1541.79,684.431 1542.35,684.431 1542.9,684.431 1543.46,684.431 1544.02,684.431 1544.58,684.431 1545.14,684.431 1545.7,684.431 1546.26,684.431 1546.82,684.431 1547.38,684.431 1547.94,684.431 1548.5,684.431 1549.06,684.431 1549.62,684.431 1550.18,684.431 1550.73,684.431 1551.29,684.431 1551.85,684.431 1552.41,684.431 1552.97,684.431 1553.53,684.431 1554.09,684.431 1554.65,684.431 1555.21,684.431 1555.77,684.431 1556.33,684.431 1556.89,684.431 1557.45,684.431 1558,684.431 1558.56,684.431 1559.12,684.431 1559.68,684.431 1560.24,684.431 1560.8,684.431 1561.36,684.431 1561.92,684.431 1562.48,684.431 1563.04,684.431 1563.6,684.431 1564.16,684.431 1564.72,684.431 1565.28,684.431 1565.83,684.431 1566.39,684.431 1566.95,684.431 1567.51,684.431 1568.07,684.431 1568.63,684.431 1569.19,684.431 1569.75,684.431 1570.31,684.431 1570.87,684.431 1571.43,684.431 1571.99,684.431 1572.55,684.431 1573.1,684.431 1573.66,684.431 1574.22,684.431 1574.78,684.431 1575.34,684.431 1575.9,684.431 1576.46,684.431 1577.02,684.431 1577.58,684.431 1578.14,684.431 1578.7,684.431 1579.26,684.431 1579.82,684.431 1580.37,684.431 1580.93,684.431 1581.49,684.431 1582.05,684.431 1582.61,684.431 1583.17,684.431 1583.73,684.431 1584.29,684.431 1584.85,684.431 1585.41,684.431 1585.97,684.431 1586.53,684.431 1587.09,684.431 1587.65,684.431 1588.2,684.431 1588.76,684.431 1589.32,684.431 1589.88,684.431 1590.44,684.431 1591,684.431 1591.56,684.431 1592.12,684.431 1592.68,684.431 1593.24,684.431 1593.8,684.431 1594.36,684.431 1594.92,684.431 1595.47,684.431 1596.03,684.431 1596.59,684.431 1597.15,684.431 1597.71,684.431 1598.27,684.431 1598.83,684.431 1599.39,684.431 1599.95,684.431 1600.51,684.431 1601.07,684.431 1601.63,684.431 1602.19,684.431 1602.74,684.431 1603.3,684.431 1603.86,684.431 1604.42,684.431 1604.98,684.431 1605.54,684.431 1606.1,684.431 1606.66,684.431 1607.22,684.431 1607.78,684.431 1608.34,684.431 1608.9,684.431 1609.46,684.431 1610.02,684.431 1610.57,684.431 1611.13,684.431 1611.69,684.431 1612.25,684.431 1612.81,684.431 1613.37,684.431 1613.93,684.431 1614.49,684.431 1615.05,684.431 1615.61,684.431 1616.17,684.431 1616.73,684.431 1617.29,684.431 1617.84,684.431 1618.4,684.431 1618.96,684.431 1619.52,684.431 1620.08,684.431 1620.64,684.431 1621.2,684.431 1621.76,684.431 1622.32,684.431 1622.88,684.431 1623.44,684.431 1624,684.431 1624.56,684.431 1625.11,684.431 1625.67,684.431 1626.23,684.431 1626.79,684.431 1627.35,684.431 1627.91,684.431 1628.47,684.431 1629.03,684.431 1629.59,684.431 1630.15,684.431 1630.71,684.431 1631.27,684.431 1631.83,684.431 1632.39,684.431 1632.94,684.431 1633.5,684.431 1634.06,684.431 1634.62,684.431 1635.18,684.431 1635.74,684.431 1636.3,684.431 1636.86,684.431 1637.42,684.431 1637.98,684.431 1638.54,684.431 1639.1,684.431 1639.66,684.431 1640.21,684.431 1640.77,684.431 1641.33,684.431 1641.89,684.431 1642.45,684.431 1643.01,684.431 1643.57,684.431 1644.13,684.431 1644.69,684.431 1645.25,684.431 1645.81,684.431 1646.37,684.431 1646.93,684.431 1647.48,684.431 1648.04,684.431 1648.6,684.431 1649.16,684.431 1649.72,684.431 1650.28,684.431 1650.84,684.431 1651.4,684.431 1651.96,684.431 1652.52,684.431 1653.08,684.431 1653.64,684.431 1654.2,684.431 1654.76,684.431 1655.31,684.431 1655.87,684.431 1656.43,684.431 1656.99,684.431 1657.55,684.431 1658.11,684.431 1658.67,684.431 1659.23,684.431 1659.79,684.431 1660.35,684.431 1660.91,684.431 1661.47,684.431 1662.03,684.431 1662.58,684.431 1663.14,684.431 1663.7,684.431 1664.26,684.431 1664.82,684.431 1665.38,684.431 1665.94,684.431 1666.5,684.431 1667.06,684.431 1667.62,684.431 1668.18,684.431 1668.74,684.431 1669.3,684.431 1669.85,684.431 1670.41,684.431 1670.97,684.431 1671.53,684.431 1672.09,684.431 1672.65,684.431 1673.21,684.431 1673.77,684.431 1674.33,684.431 1674.89,684.431 1675.45,684.431 1676.01,684.431 1676.57,684.431 1677.13,684.431 1677.68,684.431 1678.24,684.431 1678.8,684.431 1679.36,684.431 1679.92,684.431 1680.48,684.431 1681.04,684.431 1681.6,684.431 1682.16,684.431 1682.72,684.431 1683.28,684.431 1683.84,684.431 1684.4,684.431 1684.95,684.431 1685.51,684.431 1686.07,684.431 1686.63,684.431 1687.19,684.431 1687.75,684.431 1688.31,684.431 1688.87,684.431 1689.43,684.431 1689.99,684.431 1690.55,684.431 1691.11,684.431 1691.67,684.431 1692.23,684.431 1692.78,684.431 1693.34,684.431 1693.9,684.431 1694.46,684.431 1695.02,684.431 1695.58,684.431 1696.14,684.431 1696.7,684.431 1697.26,684.431 1697.82,684.431 1698.38,684.431 1698.94,684.431 1699.5,684.431 1700.05,684.431 1700.61,684.431 1701.17,684.431 1701.73,684.431 1702.29,684.431 1702.85,684.431 1703.41,684.431 1703.97,684.431 1704.53,684.431 1705.09,684.431 1705.65,684.431 1706.21,684.431 1706.77,684.431 1707.32,684.431 1707.88,684.431 1708.44,684.431 1709,684.431 1709.56,684.431 1710.12,684.431 1710.68,684.431 1711.24,684.431 1711.8,684.431 1712.36,684.431 1712.92,684.431 1713.48,684.431 1714.04,684.431 1714.6,684.431 1715.15,684.431 1715.71,684.431 1716.27,684.431 1716.83,684.431 1717.39,684.431 1717.95,684.431 1718.51,684.431 1719.07,684.431 1719.63,684.431 1720.19,684.431 1720.75,684.431 1721.31,684.431 1721.87,684.431 1722.42,684.431 1722.98,684.431 1723.54,684.431 1724.1,684.431 1724.66,684.431 1725.22,684.431 1725.78,684.431 1726.34,684.431 1726.9,684.431 1727.46,684.431 1728.02,684.431 1728.58,684.431 1729.14,684.431 1729.69,684.431 1730.25,684.431 1730.81,684.431 1731.37,684.431 1731.93,684.431 1732.49,684.431 1733.05,684.431 1733.61,684.431 1734.17,684.431 1734.73,684.431 1735.29,684.431 1735.85,684.431 1736.41,684.431 1736.97,684.431 1737.52,684.431 1738.08,684.431 1738.64,684.431 1739.2,684.431 1739.76,684.431 1740.32,684.431 1740.88,684.431 1741.44,684.431 1742,684.431 1742.56,684.431 1743.12,684.431 1743.68,684.431 1744.24,684.431 1744.79,684.431 1745.35,684.431 1745.91,684.431 1746.47,684.431 1747.03,684.431 1747.59,684.431 1748.15,684.431 1748.71,684.431 1749.27,684.431 1749.83,684.431 1750.39,684.431 1750.95,684.431 1751.51,684.431 1752.06,684.431 1752.62,684.431 1753.18,684.431 1753.74,684.431 1754.3,684.431 1754.86,684.431 1755.42,684.431 1755.98,684.431 1756.54,684.431 1757.1,684.431 1757.66,684.431 1758.22,684.431 1758.78,684.431 1759.34,684.431 1759.89,684.431 1760.45,684.431 1761.01,684.431 1761.57,684.431 1762.13,684.431 1762.69,684.431 1763.25,684.431 1763.81,684.431 1764.37,684.431 1764.93,684.431 1765.49,684.431 1766.05,684.431 1766.61,684.431 1767.16,684.431 1767.72,684.431 1768.28,684.431 1768.84,684.431 1769.4,684.431 1769.96,684.431 1770.52,684.431 1771.08,684.431 1771.64,684.431 1772.2,684.431 1772.76,684.431 1773.32,684.431 1773.88,684.431 1774.43,684.431 1774.99,684.431 1775.55,684.431 1776.11,684.431 1776.67,684.431 1777.23,684.431 1777.79,684.431 1778.35,684.431 1778.91,684.431 1779.47,684.431 1780.03,684.431 1780.59,684.431 1781.15,684.431 1781.71,684.431 1782.26,684.431 1782.82,684.431 1783.38,684.431 1783.94,684.431 1784.5,684.431 1785.06,684.431 1785.62,684.431 1786.18,684.431 1786.74,684.431 1787.3,684.431 1787.86,684.431 1788.42,684.431 1788.98,684.431 1789.53,684.431 1790.09,684.431 1790.65,684.431 1791.21,684.431 1791.77,684.431 1792.33,684.431 1792.89,684.431 1793.45,684.431 1794.01,684.431 1794.57,684.431 1795.13,684.431 1795.69,684.431 1796.25,684.431 1796.8,684.431 1797.36,684.431 1797.92,684.431 1798.48,684.431 1799.04,684.431 1799.6,684.431 1800.16,684.431 1800.72,684.431 1801.28,684.431 1801.84,684.431 1802.4,684.431 1802.96,684.431 1803.52,684.431 1804.08,684.431 1804.63,684.431 1805.19,684.431 1805.75,684.431 1806.31,684.431 1806.87,684.431 1807.43,684.431 1807.99,684.431 1808.55,684.431 1809.11,684.431 1809.67,684.431 1810.23,684.431 1810.79,684.431 1811.35,684.431 1811.9,684.431 1812.46,684.431 1813.02,684.431 1813.58,684.431 1814.14,684.431 1814.7,684.431 1815.26,684.431 1815.82,684.431 1816.38,684.431 1816.94,684.431 1817.5,684.431 1818.06,684.431 1818.62,684.431 1819.18,684.431 1819.73,684.431 1820.29,684.431 1820.85,684.431 1821.41,684.431 1821.97,684.431 1822.53,684.431 1823.09,684.431 1823.65,684.431 1824.21,684.431 1824.77,684.431 1825.33,684.431 1825.89,684.431 1826.45,684.431 1827,684.431 1827.56,684.431 1828.12,684.431 1828.68,684.431 1829.24,684.431 1829.8,684.431 1830.36,684.431 1830.92,684.431 1831.48,684.431 1832.04,684.431 1832.6,684.431 1833.16,684.431 1833.72,684.431 1834.27,684.431 1834.83,684.431 1835.39,684.431 1835.95,684.431 1836.51,684.431 1837.07,684.431 1837.63,684.431 1838.19,684.431 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037851731711119 ± 0.022121299492083645\nProjected Energy: -4.019345677330586 ± (0.003974612066191874, 0.003818926755986496)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.624953</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5348e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.9867e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.1331e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.312e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.815e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.798e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.36312429161336\n -0.7590191922770835\n  0.13584182219622676\n  0.15789998694607554\n  0.8767114411781343\n  1.530592997097334\n  1.5835732611867295\n  3.072870330325869\n  3.1256726539518356\n  4.862107221562172\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
