var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21528081763310097 ± 0.0014486525989625772\n   G2(1) = 0.9153414009225903 ± 0.0006945569695683462\n   G2(2) = 0.9818934498972339 ± 0.0006411086283077424\n   G2(3) = 0.9902494807272507 ± 0.0008937527829437306\n   G2(4) = 0.9818934498972339 ± 0.0006411086283077424\n   G2(5) = 0.9153414009225903 ± 0.0006945569695683462\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0902013710034835 ± 0.13777791697124972\n   Replica 2: -4.055587093600515 ± 0.1257116630945538\n   Replica 3: -4.034334633531982 ± 0.13026091778308996\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip370\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip371\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip372\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.09 2211.02,1004.09 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.299 2211.02,746.299 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.513 2211.02,488.513 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.727 2211.02,230.727 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.09 423.181,1004.09 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.299 423.181,746.299 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.513 423.181,488.513 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.727 423.181,230.727 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.23 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.23 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M290.043 1017.43 L306.363 1017.43 L306.363 1021.37 L284.418 1021.37 L284.418 1017.43 Q287.08 1014.68 291.664 1010.05 Q296.27 1005.39 297.451 1004.05 Q299.696 1001.53 300.576 999.791 Q301.478 998.032 301.478 996.342 Q301.478 993.588 299.534 991.851 Q297.613 990.115 294.511 990.115 Q292.312 990.115 289.858 990.879 Q287.427 991.643 284.65 993.194 L284.65 988.472 Q287.474 987.338 289.927 986.759 Q292.381 986.18 294.418 986.18 Q299.789 986.18 302.983 988.865 Q306.177 991.55 306.177 996.041 Q306.177 998.171 305.367 1000.09 Q304.58 1001.99 302.474 1004.58 Q301.895 1005.25 298.793 1008.47 Q295.691 1011.67 290.043 1017.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M316.224 986.805 L334.58 986.805 L334.58 990.74 L320.506 990.74 L320.506 999.212 Q321.524 998.865 322.543 998.703 Q323.562 998.518 324.58 998.518 Q330.367 998.518 333.747 1001.69 Q337.126 1004.86 337.126 1010.28 Q337.126 1015.86 333.654 1018.96 Q330.182 1022.04 323.862 1022.04 Q321.687 1022.04 319.418 1021.67 Q317.173 1021.3 314.765 1020.55 L314.765 1015.86 Q316.849 1016.99 319.071 1017.55 Q321.293 1018.1 323.77 1018.1 Q327.774 1018.1 330.112 1015.99 Q332.45 1013.89 332.45 1010.28 Q332.45 1006.67 330.112 1004.56 Q327.774 1002.45 323.77 1002.45 Q321.895 1002.45 320.02 1002.87 Q318.168 1003.29 316.224 1004.17 L316.224 986.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 989.884 Q352.728 989.884 350.899 993.449 Q349.094 996.99 349.094 1004.12 Q349.094 1011.23 350.899 1014.79 Q352.728 1018.33 356.339 1018.33 Q359.973 1018.33 361.779 1014.79 Q363.608 1011.23 363.608 1004.12 Q363.608 996.99 361.779 993.449 Q359.973 989.884 356.339 989.884 M356.339 986.18 Q362.149 986.18 365.205 990.787 Q368.284 995.37 368.284 1004.12 Q368.284 1012.85 365.205 1017.45 Q362.149 1022.04 356.339 1022.04 Q350.529 1022.04 347.45 1017.45 Q344.395 1012.85 344.395 1004.12 Q344.395 995.37 347.45 990.787 Q350.529 986.18 356.339 986.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M286.062 729.019 L304.418 729.019 L304.418 732.954 L290.344 732.954 L290.344 741.426 Q291.363 741.079 292.381 740.917 Q293.4 740.732 294.418 740.732 Q300.205 740.732 303.585 743.903 Q306.964 747.075 306.964 752.491 Q306.964 758.07 303.492 761.172 Q300.02 764.25 293.701 764.25 Q291.525 764.25 289.256 763.88 Q287.011 763.51 284.603 762.769 L284.603 758.07 Q286.687 759.204 288.909 759.76 Q291.131 760.315 293.608 760.315 Q297.613 760.315 299.951 758.209 Q302.288 756.102 302.288 752.491 Q302.288 748.88 299.951 746.774 Q297.613 744.667 293.608 744.667 Q291.733 744.667 289.858 745.084 Q288.006 745.501 286.062 746.38 L286.062 729.019 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M326.177 732.098 Q322.566 732.098 320.737 735.663 Q318.932 739.204 318.932 746.334 Q318.932 753.44 320.737 757.005 Q322.566 760.547 326.177 760.547 Q329.811 760.547 331.617 757.005 Q333.446 753.44 333.446 746.334 Q333.446 739.204 331.617 735.663 Q329.811 732.098 326.177 732.098 M326.177 728.394 Q331.987 728.394 335.043 733.001 Q338.122 737.584 338.122 746.334 Q338.122 755.061 335.043 759.667 Q331.987 764.25 326.177 764.25 Q320.367 764.25 317.288 759.667 Q314.233 755.061 314.233 746.334 Q314.233 737.584 317.288 733.001 Q320.367 728.394 326.177 728.394 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 732.098 Q352.728 732.098 350.899 735.663 Q349.094 739.204 349.094 746.334 Q349.094 753.44 350.899 757.005 Q352.728 760.547 356.339 760.547 Q359.973 760.547 361.779 757.005 Q363.608 753.44 363.608 746.334 Q363.608 739.204 361.779 735.663 Q359.973 732.098 356.339 732.098 M356.339 728.394 Q362.149 728.394 365.205 733.001 Q368.284 737.584 368.284 746.334 Q368.284 755.061 365.205 759.667 Q362.149 764.25 356.339 764.25 Q350.529 764.25 347.45 759.667 Q344.395 755.061 344.395 746.334 Q344.395 737.584 347.45 733.001 Q350.529 728.394 356.339 728.394 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M284.835 471.233 L307.057 471.233 L307.057 473.224 L294.511 505.793 L289.627 505.793 L301.432 475.168 L284.835 475.168 L284.835 471.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M316.224 471.233 L334.58 471.233 L334.58 475.168 L320.506 475.168 L320.506 483.64 Q321.524 483.293 322.543 483.131 Q323.562 482.946 324.58 482.946 Q330.367 482.946 333.747 486.117 Q337.126 489.289 337.126 494.705 Q337.126 500.284 333.654 503.386 Q330.182 506.464 323.862 506.464 Q321.687 506.464 319.418 506.094 Q317.173 505.724 314.765 504.983 L314.765 500.284 Q316.849 501.418 319.071 501.974 Q321.293 502.529 323.77 502.529 Q327.774 502.529 330.112 500.423 Q332.45 498.316 332.45 494.705 Q332.45 491.094 330.112 488.988 Q327.774 486.881 323.77 486.881 Q321.895 486.881 320.02 487.298 Q318.168 487.715 316.224 488.594 L316.224 471.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 474.312 Q352.728 474.312 350.899 477.877 Q349.094 481.418 349.094 488.548 Q349.094 495.654 350.899 499.219 Q352.728 502.761 356.339 502.761 Q359.973 502.761 361.779 499.219 Q363.608 495.654 363.608 488.548 Q363.608 481.418 361.779 477.877 Q359.973 474.312 356.339 474.312 M356.339 470.608 Q362.149 470.608 365.205 475.215 Q368.284 479.798 368.284 488.548 Q368.284 497.275 365.205 501.881 Q362.149 506.464 356.339 506.464 Q350.529 506.464 347.45 501.881 Q344.395 497.275 344.395 488.548 Q344.395 479.798 347.45 475.215 Q350.529 470.608 356.339 470.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M256.664 244.072 L264.303 244.072 L264.303 217.706 L255.992 219.373 L255.992 215.114 L264.256 213.447 L268.932 213.447 L268.932 244.072 L276.571 244.072 L276.571 248.007 L256.664 248.007 L256.664 244.072 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M296.015 216.526 Q292.404 216.526 290.576 220.091 Q288.77 223.632 288.77 230.762 Q288.77 237.868 290.576 241.433 Q292.404 244.975 296.015 244.975 Q299.65 244.975 301.455 241.433 Q303.284 237.868 303.284 230.762 Q303.284 223.632 301.455 220.091 Q299.65 216.526 296.015 216.526 M296.015 212.822 Q301.826 212.822 304.881 217.429 Q307.96 222.012 307.96 230.762 Q307.96 239.489 304.881 244.095 Q301.826 248.678 296.015 248.678 Q290.205 248.678 287.127 244.095 Q284.071 239.489 284.071 230.762 Q284.071 222.012 287.127 217.429 Q290.205 212.822 296.015 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M326.177 216.526 Q322.566 216.526 320.737 220.091 Q318.932 223.632 318.932 230.762 Q318.932 237.868 320.737 241.433 Q322.566 244.975 326.177 244.975 Q329.811 244.975 331.617 241.433 Q333.446 237.868 333.446 230.762 Q333.446 223.632 331.617 220.091 Q329.811 216.526 326.177 216.526 M326.177 212.822 Q331.987 212.822 335.043 217.429 Q338.122 222.012 338.122 230.762 Q338.122 239.489 335.043 244.095 Q331.987 248.678 326.177 248.678 Q320.367 248.678 317.288 244.095 Q314.233 239.489 314.233 230.762 Q314.233 222.012 317.288 217.429 Q320.367 212.822 326.177 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 216.526 Q352.728 216.526 350.899 220.091 Q349.094 223.632 349.094 230.762 Q349.094 237.868 350.899 241.433 Q352.728 244.975 356.339 244.975 Q359.973 244.975 361.779 241.433 Q363.608 237.868 363.608 230.762 Q363.608 223.632 361.779 220.091 Q359.973 216.526 356.339 216.526 M356.339 212.822 Q362.149 212.822 365.205 217.429 Q368.284 222.012 368.284 230.762 Q368.284 239.489 365.205 244.095 Q362.149 248.678 356.339 248.678 Q350.529 248.678 347.45 244.095 Q344.395 239.489 344.395 230.762 Q344.395 222.012 347.45 217.429 Q350.529 212.822 356.339 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.727 4017.76,230.727 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.47 456.554,1249.46 457.123,1249.34 457.691,1249.14 458.259,1248.9 458.828,1248.58 459.396,1248.17 459.964,1247.7 460.533,1247.18 461.101,1246.57 461.669,1245.86 462.238,1245.07 462.806,1244.17 463.375,1243.2 463.943,1240.06 464.511,1238.97 465.08,1236.72 465.648,1234.37 466.216,1232.97 466.785,1231.42 467.353,1229.75 467.921,1227.98 468.49,1226 469.058,1221.84 469.626,1219.67 470.195,1217.34 470.763,1213.76 471.331,1211.17 471.9,1208.38 472.468,1205.44 473.036,1201.29 473.605,1196.87 474.173,1193.27 474.741,1187.39 475.31,1183.45 475.878,1179.36 476.446,1174.03 477.015,1169.51 477.583,1164.77 478.152,1158.75 478.72,1152.54 479.288,1145.13 479.857,1138.49 480.425,1130.69 480.993,1124.65 481.562,1118.49 482.13,1109.93 482.698,1102.23 483.267,1095.31 483.835,1088.17 484.403,1080.73 484.972,1073.05 485.54,1064.16 486.108,1054.14 486.677,1044.15 487.245,1035.1 487.813,1024.9 488.382,1016.43 488.95,1004.75 489.518,994.08 490.087,984.341 490.655,974.581 491.224,964.734 491.792,955.773 492.36,945.766 492.929,932.378 493.497,923.306 494.065,914.101 494.634,902.838 495.202,892.387 495.77,882.899 496.339,869.422 496.907,859.22 497.475,849.837 498.044,839.396 498.612,826.954 499.18,815.699 499.749,805.505 500.317,794.499 500.885,782.538 501.454,771.543 502.022,759.574 502.59,746.825 503.159,738.348 503.727,726.656 504.295,715.336 504.864,706.039 505.432,695.829 506.001,685.83 506.569,676.846 507.137,668.873 507.706,661.098 508.274,653.283 508.842,644.5 509.411,634.516 509.979,624.909 510.547,616.331 511.116,607.854 511.684,598.441 512.252,589.242 512.821,581.156 513.389,572.227 513.957,564.437 514.526,556.763 515.094,550.218 515.662,541.689 516.231,532.256 516.799,526.282 517.367,518.172 517.936,508.287 518.504,501.635 519.072,494.165 519.641,486.971 520.209,481.933 520.778,478.039 521.346,472.138 521.914,467.34 522.483,463.663 523.051,457.803 523.619,451.914 524.188,446.409 524.756,437.887 525.324,432.859 525.893,429.003 526.461,425.903 527.029,417.834 527.598,414.015 528.166,408.477 528.734,403.846 529.303,400.441 529.871,396.268 530.439,390.891 531.008,385.552 531.576,380.467 532.144,377.57 532.713,375.009 533.281,372.241 533.85,368.401 534.418,365.585 534.986,362.872 535.555,359.051 536.123,355.638 536.691,353.187 537.26,351.686 537.828,348.206 538.396,346.759 538.965,345.366 539.533,340.839 540.101,334.685 540.67,332.847 541.238,328.979 541.806,326.149 542.375,321.601 542.943,320.119 543.511,318.676 544.08,320.381 544.648,317.639 545.216,317.068 545.785,315.461 546.353,312.605 546.921,310.09 547.49,307.806 548.058,303.429 548.627,301.096 549.195,297.965 549.763,296.314 550.332,295.412 550.9,291.37 551.468,289.572 552.037,285.839 552.605,287.433 553.173,284.766 553.742,283.337 554.31,283.956 554.878,282.666 555.447,282.298 556.015,281.94 556.583,280.48 557.152,280.109 557.72,276.418 558.288,276.173 558.857,274.738 559.425,273.571 559.993,272.26 560.562,268.93 561.13,267.951 561.698,267.039 562.267,268.255 562.835,267.982 563.404,266.85 563.972,265.661 564.54,266.734 565.109,264.588 565.677,264.685 566.245,264.505 566.814,260.351 567.382,259.669 567.95,259.075 568.519,258.371 569.087,257.547 569.655,256.786 570.224,256.155 570.792,256.582 571.36,255.673 571.929,257.819 572.497,257.155 573.065,255.291 573.634,255.68 574.202,252.882 574.77,254.533 575.339,254.739 575.907,255.986 576.476,256.032 577.044,253.009 577.612,251.454 578.181,251.91 578.749,253.495 579.317,253.759 579.886,251.845 580.454,251.022 581.022,252.38 581.591,253.422 582.159,253.584 582.727,253.68 583.296,251.743 583.864,250.938 584.432,251.065 585.001,251.415 585.569,252.339 586.137,252.573 586.706,252.691 587.274,249.698 587.842,251.682 588.411,252.685 588.979,251.472 589.547,251.493 590.116,251.582 590.684,251.587 591.253,251.498 591.821,250.048 592.389,247.935 592.958,248.04 593.526,247.208 594.094,247.351 594.663,246.361 595.231,247.616 595.799,246.609 596.368,245.752 596.936,244.978 597.504,244.136 598.073,245.325 598.641,244.535 599.209,244.947 599.778,246.252 600.346,246.184 600.914,244.037 601.483,244.307 602.051,246.471 602.619,247.466 603.188,246.493 603.756,246.588 604.325,244.66 604.893,244.822 605.461,242.771 606.03,243.91 606.598,243.094 607.166,243.208 607.735,244.476 608.303,245.256 608.871,246.118 609.44,243.986 610.008,239.535 610.576,239.719 611.145,237.969 611.713,238.324 612.281,237.545 612.85,238.952 613.418,239.293 613.986,241.775 614.555,241.783 615.123,241.966 615.691,241.256 616.26,241.365 616.828,240.472 617.396,239.506 617.965,240.923 618.533,240.905 619.102,241.03 619.67,240.016 620.238,241.379 620.807,242.453 621.375,241.523 621.943,239.462 622.512,238.551 623.08,237.515 623.648,235.727 624.217,235.013 624.785,233.402 625.353,236.98 625.922,237.162 626.49,236.367 627.058,236.577 627.627,234.854 628.195,237.264 628.763,236.551 629.332,238.967 629.9,239.054 630.468,241.291 631.037,240.278 631.605,239.202 632.173,240.24 632.742,241.409 633.31,240.382 633.879,241.446 634.447,244.449 635.015,243.096 635.584,242.652 636.152,243.257 636.72,242.114 637.289,241.928 637.857,241.961 638.425,242.809 638.994,243.449 639.562,243.275 640.13,243.783 640.699,244.344 641.267,240.951 641.835,240.75 642.404,241.579 642.972,241.235 643.54,237.944 644.109,236.91 644.677,236.011 645.245,236.258 645.814,236.427 646.382,239.767 646.951,239.603 647.519,237.527 648.087,235.577 648.656,235.936 649.224,234.895 649.792,234.842 650.361,237.169 650.929,236.196 651.497,233.211 652.066,231.123 652.634,231.447 653.202,230.807 653.771,229.251 654.339,228.872 654.907,230.605 655.476,230.21 656.044,229.013 656.612,227.747 657.181,227.342 657.749,231.202 658.317,230.842 658.886,231.384 659.454,232.842 660.022,233.293 660.591,233.509 661.159,234.791 661.728,236.048 662.296,239.354 662.864,239.213 663.433,239.928 664.001,239.841 664.569,239.527 665.138,240.272 665.706,241.077 666.274,244.112 666.843,242.547 667.411,241.96 667.979,240.456 668.548,241.286 669.116,241.926 669.684,240.71 670.253,238.105 670.821,236.905 671.389,235.758 671.958,233.606 672.526,235.854 673.094,233.865 673.663,233.946 674.231,233.915 674.799,233.237 675.368,233.414 675.936,234.532 676.505,233.414 677.073,232.358 677.641,234.48 678.21,234.415 678.778,235.45 679.346,235.369 679.915,235.431 680.483,235.236 681.051,234.149 681.62,235.31 682.188,231.198 682.756,230.305 683.325,231.615 683.893,233.071 684.461,234.331 685.03,237.66 685.598,239.476 686.166,240.059 686.735,239.444 687.303,238.287 687.871,237.045 688.44,236.914 689.008,235.739 689.577,233.636 690.145,233.882 690.713,235.195 691.282,235.1 691.85,238.097 692.418,237.723 692.987,236.375 693.555,236.321 694.123,238.111 694.692,236.892 695.26,235.809 695.828,234.511 696.397,234.424 696.965,234.365 697.533,234.437 698.102,233.366 698.67,233.271 699.238,234.257 699.807,232.424 700.375,231.431 700.943,233.739 701.512,232.823 702.08,233.861 702.648,230.768 703.217,232.142 703.785,231.258 704.354,231.145 704.922,231.478 705.49,231.582 706.059,232.532 706.627,232.68 707.195,229.565 707.764,228.853 708.332,228.206 708.9,225.594 709.469,225.289 710.037,224.919 710.605,227.724 711.174,228.233 711.742,230.658 712.31,230.061 712.879,232.526 713.447,233.724 714.015,234.772 714.584,232.831 715.152,232.903 715.72,232.974 716.289,233.011 716.857,233.141 717.425,231.301 717.994,230.338 718.562,230.474 719.131,230.698 719.699,230.888 720.267,232.473 720.836,235.652 721.404,234.626 721.972,234.516 722.541,233.586 723.109,233.409 723.677,236.584 724.246,238.392 724.814,237.956 725.382,236.645 725.951,237.539 726.519,237.21 727.087,237.89 727.656,235.577 728.224,236.512 728.792,236.248 729.361,234.844 729.929,234.666 730.497,236.366 731.066,235.997 731.634,237.561 732.203,237.283 732.771,233.874 733.339,232.866 733.908,232.598 734.476,233.687 735.044,232.324 735.613,233.481 736.181,233.292 736.749,232.129 737.318,230.179 737.886,230.408 738.454,230.451 739.023,230.676 739.591,231.719 740.159,230.627 740.728,230.799 741.296,230.828 741.864,229.125 742.433,229.286 743.001,227.483 743.569,227.682 744.138,228.001 744.706,228.337 745.274,228.567 745.843,228.868 746.411,230.222 746.98,230.216 747.548,229.715 748.116,230.01 748.685,228.154 749.253,228.577 749.821,231.008 750.39,233.181 750.958,233.22 751.526,233.444 752.095,232.619 752.663,232.768 753.231,234.787 753.8,235.628 754.368,235.547 754.936,236.471 755.505,235.253 756.073,236.271 756.641,236.155 757.21,236.087 757.778,233.803 758.346,230.628 758.915,230.848 759.483,230.887 760.052,230.231 760.62,229.303 761.188,229.613 761.757,228.778 762.325,229.064 762.893,229.484 763.462,230.796 764.03,230.825 764.598,230.042 765.167,230.444 765.735,230.775 766.303,231.245 766.872,231.516 767.44,231.615 768.008,232.882 768.577,231.778 769.145,231.929 769.713,232.963 770.282,234.003 770.85,234.754 771.418,234.504 771.987,234.396 772.555,235.243 773.123,235.071 773.692,232.704 774.26,232.828 774.829,231.787 775.397,231.862 775.965,230.942 776.534,231.047 777.102,233.475 777.67,232.349 778.239,231.413 778.807,232.612 779.375,233.932 779.944,233.581 780.512,235.581 781.08,235.464 781.649,237.237 782.217,239.072 782.785,234.582 783.354,236.326 783.922,235.085 784.49,234.03 785.059,233.889 785.627,231.763 786.195,232.797 786.764,231.795 787.332,230.89 787.9,229.709 788.469,229.864 789.037,228.913 789.606,227.928 790.174,227.19 790.742,228.577 791.311,229.833 791.879,229.644 792.447,229.882 793.016,228.14 793.584,226.558 794.152,227.085 794.721,228.664 795.289,230.251 795.857,230.574 796.426,230.61 796.994,231.637 797.562,232.464 798.131,233.524 798.699,234.817 799.267,233.695 799.836,235.539 800.404,234.265 800.972,235.349 801.541,236.251 802.109,235.91 802.678,236.649 803.246,233.126 803.814,232.15 804.383,234.196 804.951,235.074 805.519,234.737 806.088,234.528 806.656,233.328 807.224,233.137 807.793,234.986 808.361,235.066 808.929,234.878 809.498,234.574 810.066,236.474 810.634,235.19 811.203,235.019 811.771,235.952 812.339,235.895 812.908,236.898 813.476,235.425 814.044,233.128 814.613,234.958 815.181,234.601 815.749,235.566 816.318,236.254 816.886,235.895 817.455,236.612 818.023,237.312 818.591,237.844 819.16,237.41 819.728,235.797 820.296,234.56 820.865,233.36 821.433,234.191 822.001,236.854 822.57,238.345 823.138,237.64 823.706,236.339 824.275,234.699 824.843,234.161 825.411,233.775 825.98,232.348 826.548,234.173 827.116,233.756 827.685,234.303 828.253,235.148 828.821,235.591 829.39,234.849 829.958,234.542 830.526,233.078 831.095,233.84 831.663,235.658 832.232,235.052 832.8,233.587 833.368,234.287 833.937,232.688 834.505,230.095 835.073,229.043 835.642,228.15 836.21,226.038 836.778,226.054 837.347,226.443 837.915,226.832 838.483,227.987 839.052,229.137 839.62,230.318 840.188,228.278 840.757,228.316 841.325,228.536 841.893,228.552 842.462,228.792 843.03,228.026 843.598,228.182 844.167,226.198 844.735,225.559 845.304,225.825 845.872,225.887 846.44,226.204 847.009,226.254 847.577,225.711 848.145,226.158 848.714,226.545 849.282,228.038 849.85,228.317 850.419,228.908 850.987,229.264 851.555,230.187 852.124,229.236 852.692,229.223 853.26,230.478 853.829,230.384 854.397,230.39 854.965,228.494 855.534,227.561 856.102,226.888 856.67,228.125 857.239,227.402 857.807,228.906 858.375,229.205 858.944,230.164 859.512,232.276 860.081,233.027 860.649,232.697 861.217,233.44 861.786,233.22 862.354,232.977 862.922,232.82 863.491,231.603 864.059,233.506 864.627,234.451 865.196,235.314 865.764,232.822 866.332,232.801 866.901,234.401 867.469,233.138 868.037,231.999 868.606,230.924 869.174,230.881 869.742,228.748 870.311,228.897 870.879,228.862 871.447,229.027 872.016,229.034 872.584,230.358 873.152,230.329 873.721,229.231 874.289,227.296 874.858,226.625 875.426,227.047 875.994,227.195 876.563,229.402 877.131,230.527 877.699,228.52 878.268,229.954 878.836,230.218 879.404,228.161 879.973,228.619 880.541,228.829 881.109,229.178 881.678,229.434 882.246,228.623 882.814,227.721 883.383,226.833 883.951,227.184 884.519,226.461 885.088,227.821 885.656,228.029 886.224,229.271 886.793,229.325 887.361,229.331 887.93,227.671 888.498,227.883 889.066,227.896 889.635,228.976 890.203,229.28 890.771,230.698 891.34,230.981 891.908,231.17 892.476,231.243 893.045,232.318 893.613,231.395 894.181,233.255 894.75,233.049 895.318,233.079 895.886,235.186 896.455,233.831 897.023,232.719 897.591,232.685 898.16,233.788 898.728,231.484 899.296,230.399 899.865,230.438 900.433,230.609 901.001,230.756 901.57,230.57 902.138,231.683 902.707,233.851 903.275,234.717 903.843,232.546 904.412,228.467 904.98,227.573 905.548,227.797 906.117,227.166 906.685,227.617 907.253,227.744 907.822,228.935 908.39,229.225 908.958,230.365 909.527,229.348 910.095,228.65 910.663,227.891 911.232,228.102 911.8,229.382 912.368,229.516 912.937,228.654 913.505,228.869 914.073,228.23 914.642,231.508 915.21,231.44 915.779,231.409 916.347,232.583 916.915,232.495 917.484,233.594 918.052,233.32 918.62,235.406 919.189,234.189 919.757,236.138 920.325,233.962 920.894,234.033 921.462,232.954 922.03,231.796 922.599,232.876 923.167,234.949 923.735,233.87 924.304,234.687 924.872,233.479 925.44,230.183 926.009,230.082 926.577,231.138 927.145,231.149 927.714,231.92 928.282,230.714 928.85,229.655 929.419,230.027 929.987,230.146 930.556,231.329 931.124,230.346 931.692,229.174 932.261,230.509 932.829,231.764 933.397,231.625 933.966,230.655 934.534,228.844 935.102,229.082 935.671,228.419 936.239,228.69 936.807,229.026 937.376,231.266 937.944,231.451 938.512,230.521 939.081,230.607 939.649,229.737 940.217,230.933 940.786,232.08 941.354,231.87 941.922,232.792 942.491,234.868 943.059,233.688 943.627,234.451 944.196,232.437 944.764,233.58 945.333,233.331 945.901,230.056 946.469,231.214 947.038,229.279 947.606,228.572 948.174,229.745 948.743,229.63 949.311,228.807 949.879,231.055 950.448,233.342 951.016,233.328 951.584,233.348 952.153,233.139 952.721,232.142 953.289,233.374 953.858,234.167 954.426,232.945 954.994,232.009 955.563,231.99 956.131,231.994 956.699,232.047 957.268,233.046 957.836,233.031 958.405,232.915 958.973,233.798 959.541,233.708 960.11,232.349 960.678,232.222 961.246,231.194 961.815,231.205 962.383,232.132 962.951,231.049 963.52,231.976 964.088,231.798 964.656,231.95 965.225,234.02 965.793,233.697 966.361,231.58 966.93,231.44 967.498,230.312 968.066,229.376 968.635,231.56 969.203,231.654 969.771,232.648 970.34,232.442 970.908,233.267 971.476,233.071 972.045,231.772 972.613,231.808 973.182,231.673 973.75,231.442 974.318,232.213 974.887,232.018 975.455,237.066 976.023,234.439 976.592,234.098 977.16,233.846 977.728,233.511 978.297,234.311 978.865,234.016 979.433,232.549 980.002,231.45 980.57,231.408 981.138,231.031 981.707,229.791 982.275,230.68 982.843,229.445 983.412,230.371 983.98,229.171 984.548,227.127 985.117,225.52 985.685,225.981 986.253,226.493 986.822,226.761 987.39,226.002 987.959,226.407 988.527,228.765 989.095,229.898 989.664,228.944 990.232,227.894 990.8,229.093 991.369,230.287 991.937,230.492 992.505,230.188 993.074,232.233 993.642,231.902 994.21,230.824 994.779,231.853 995.347,231.855 995.915,232.697 996.484,234.696 997.052,233.414 997.62,232.233 998.189,234.193 998.757,232.792 999.325,231.608 999.894,232.529 1000.46,232.578 1001.03,233.423 1001.6,233.158 1002.17,236.037 1002.74,235.53 1003.3,236.376 1003.87,236.223 1004.44,234.926 1005.01,233.532 1005.58,235.193 1006.15,232.769 1006.71,231.463 1007.28,231.341 1007.85,231.444 1008.42,231.33 1008.99,233.3 1009.56,233.909 1010.12,234.632 1010.69,233.331 1011.26,233.697 1011.83,232.301 1012.4,233.083 1012.97,231.507 1013.53,230.455 1014.1,229.256 1014.67,229.405 1015.24,230.52 1015.81,230.399 1016.38,229.407 1016.94,230.717 1017.51,228.795 1018.08,228.997 1018.65,227.105 1019.22,228.396 1019.79,226.551 1020.35,224.676 1020.92,224.95 1021.49,225.317 1022.06,224.706 1022.63,224.944 1023.2,228.439 1023.76,228.568 1024.33,226.432 1024.9,227.614 1025.47,228.809 1026.04,227.549 1026.61,228.708 1027.17,228.828 1027.74,227.911 1028.31,227.141 1028.88,227.304 1029.45,227.581 1030.02,224.958 1030.58,224.402 1031.15,226.036 1031.72,226.544 1032.29,223.582 1032.86,220.097 1033.43,223.081 1033.99,220.534 1034.56,221.593 1035.13,225.518 1035.7,226.024 1036.27,226.435 1036.84,226.937 1037.4,228.437 1037.97,226.665 1038.54,226.949 1039.11,228.24 1039.68,227.608 1040.25,227.994 1040.81,227.415 1041.38,228.024 1041.95,230.455 1042.52,229.721 1043.09,230.104 1043.66,228.173 1044.22,228.43 1044.79,230.781 1045.36,230.987 1045.93,231.05 1046.5,233.155 1047.07,234.019 1047.63,230.866 1048.2,229.051 1048.77,229.424 1049.34,231.637 1049.91,231.891 1050.48,231.096 1051.05,231.187 1051.61,232.404 1052.18,233.381 1052.75,233.226 1053.32,233.023 1053.89,233.039 1054.46,231.986 1055.02,232.814 1055.59,231.71 1056.16,232.874 1056.73,232.829 1057.3,231.85 1057.87,233.928 1058.43,233.791 1059,233.58 1059.57,234.646 1060.14,233.376 1060.71,234.182 1061.28,235.009 1061.84,233.729 1062.41,233.453 1062.98,233.593 1063.55,235.392 1064.12,237.19 1064.69,235.497 1065.25,238.184 1065.82,237.63 1066.39,236.222 1066.96,235.918 1067.53,233.653 1068.1,233.593 1068.66,233.596 1069.23,232.431 1069.8,233.304 1070.37,232.091 1070.94,229.987 1071.51,232.299 1072.07,232.147 1072.64,230.212 1073.21,228.5 1073.78,228.591 1074.35,227.623 1074.92,228.922 1075.48,227.139 1076.05,227.237 1076.62,225.371 1077.19,224.846 1077.76,226.471 1078.33,227.786 1078.89,229.088 1079.46,230.354 1080.03,232.676 1080.6,233.837 1081.17,233.704 1081.74,229.241 1082.3,229.488 1082.87,229.676 1083.44,231.977 1084.01,232.982 1084.58,230.701 1085.15,229.651 1085.71,232.996 1086.28,233.955 1086.85,235.756 1087.42,234.484 1087.99,231.176 1088.56,233.231 1089.12,234.029 1089.69,233.569 1090.26,234.413 1090.83,234.242 1091.4,237.261 1091.97,238.796 1092.53,239.362 1093.1,239.482 1093.67,240.062 1094.24,239.437 1094.81,238.762 1095.38,238.989 1095.94,239.3 1096.51,237.546 1097.08,240.055 1097.65,239.542 1098.22,239.805 1098.79,239.177 1099.35,238.441 1099.92,236.795 1100.49,237.177 1101.06,236.379 1101.63,235.534 1102.2,235.19 1102.76,233.006 1103.33,232.657 1103.9,233.479 1104.47,234.402 1105.04,235.067 1105.61,234.486 1106.17,233.831 1106.74,231.568 1107.31,232.094 1107.88,230.641 1108.45,228.508 1109.02,228.583 1109.58,229.719 1110.15,228.463 1110.72,227.168 1111.29,226.016 1111.86,227.168 1112.43,227.277 1112.99,229.491 1113.56,228.389 1114.13,228.389 1114.7,227.453 1115.27,226.604 1115.84,226.834 1116.4,226.995 1116.97,228.107 1117.54,229.229 1118.11,230.245 1118.68,231.373 1119.25,231.297 1119.81,230.016 1120.38,228.986 1120.95,229.862 1121.52,229.811 1122.09,229.677 1122.66,229.665 1123.23,229.497 1123.79,229.567 1124.36,229.546 1124.93,229.384 1125.5,229.217 1126.07,228.348 1126.64,226.244 1127.2,227.458 1127.77,229.765 1128.34,228.78 1128.91,228.802 1129.48,229.061 1130.05,229.135 1130.61,228.308 1131.18,227.443 1131.75,226.564 1132.32,225.852 1132.89,227.31 1133.46,228.385 1134.02,228.39 1134.59,227.497 1135.16,228.837 1135.73,226.998 1136.3,225.12 1136.87,226.513 1137.43,227.698 1138,227.864 1138.57,228.998 1139.14,230.169 1139.71,231.875 1140.28,231.856 1140.84,232.984 1141.41,232.942 1141.98,231.744 1142.55,230.547 1143.12,229.724 1143.69,228.596 1144.25,228.738 1144.82,228.88 1145.39,228.952 1145.96,226.05 1146.53,224.385 1147.1,224.934 1147.66,223.34 1148.23,226.145 1148.8,226.759 1149.37,225.036 1149.94,228.364 1150.51,227.523 1151.07,229.919 1151.64,228.946 1152.21,228.999 1152.78,228.12 1153.35,229.479 1153.92,230.707 1154.48,230.94 1155.05,234.143 1155.62,232.019 1156.19,231.849 1156.76,233.971 1157.33,234.86 1157.89,233.824 1158.46,230.658 1159.03,229.796 1159.6,230.18 1160.17,230.278 1160.74,230.477 1161.3,230.591 1161.87,230.62 1162.44,233.625 1163.01,234.6 1163.58,232.294 1164.15,231.47 1164.71,234.472 1165.28,233.372 1165.85,234.097 1166.42,233.727 1166.99,230.386 1167.56,229.3 1168.12,229.137 1168.69,228.114 1169.26,227.466 1169.83,225.802 1170.4,227.244 1170.97,227.268 1171.53,228.484 1172.1,230.633 1172.67,231.66 1173.24,231.544 1173.81,232.833 1174.38,232.593 1174.94,231.352 1175.51,235.542 1176.08,238.165 1176.65,236.654 1177.22,235.255 1177.79,233.938 1178.35,232.693 1178.92,232.602 1179.49,233.437 1180.06,233.072 1180.63,232.611 1181.2,230.202 1181.76,229.202 1182.33,231.319 1182.9,232.148 1183.47,229.909 1184.04,229.924 1184.61,230.106 1185.17,230.17 1185.74,230.275 1186.31,229.421 1186.88,229.569 1187.45,228.556 1188.02,228.506 1188.58,230.795 1189.15,228.448 1189.72,227.8 1190.29,227.98 1190.86,226.287 1191.43,225.542 1192,226.943 1192.56,225.047 1193.13,221.346 1193.7,224.224 1194.27,227.949 1194.84,227.154 1195.41,228.67 1195.97,228.666 1196.54,231.951 1197.11,231.854 1197.68,230.794 1198.25,229.819 1198.82,229.145 1199.38,229.218 1199.95,228.298 1200.52,229.479 1201.09,229.594 1201.66,229.935 1202.23,227.118 1202.79,225.497 1203.36,226.201 1203.93,228.78 1204.5,230.033 1205.07,227.134 1205.64,228.67 1206.2,229.179 1206.77,231.341 1207.34,232.28 1207.91,232.454 1208.48,232.447 1209.05,231.508 1209.61,232.353 1210.18,233.451 1210.75,236.252 1211.32,237.942 1211.89,238.439 1212.46,238.056 1213.02,237.71 1213.59,236.395 1214.16,236.118 1214.73,234.752 1215.3,234.535 1215.87,233.318 1216.43,231.214 1217,232.154 1217.57,233.396 1218.14,233.104 1218.71,233.114 1219.28,231.058 1219.84,231.911 1220.41,233.003 1220.98,232.684 1221.55,231.576 1222.12,231.439 1222.69,233.465 1223.25,233.32 1223.82,232.1 1224.39,231.102 1224.96,231.007 1225.53,231.757 1226.1,232.812 1226.66,233.512 1227.23,232.264 1227.8,231.086 1228.37,231.982 1228.94,232.973 1229.51,230.578 1230.07,227.575 1230.64,226.73 1231.21,228.233 1231.78,229.605 1232.35,230.818 1232.92,230.819 1233.48,228.774 1234.05,228.001 1234.62,227.235 1235.19,227.526 1235.76,226.661 1236.33,226.714 1236.89,226.964 1237.46,228.313 1238.03,229.187 1238.6,229.364 1239.17,231.317 1239.74,232.428 1240.3,233.365 1240.87,233.228 1241.44,231.914 1242.01,231.661 1242.58,231.555 1243.15,234.398 1243.71,236.282 1244.28,238.918 1244.85,238.273 1245.42,237.636 1245.99,236.289 1246.56,237.876 1247.12,239.543 1247.69,239.88 1248.26,239.259 1248.83,238.523 1249.4,236.979 1249.97,236.321 1250.53,236.105 1251.1,235.659 1251.67,234.202 1252.24,235.874 1252.81,235.333 1253.38,233.753 1253.94,233.362 1254.51,230.982 1255.08,230.577 1255.65,231.438 1256.22,229.178 1256.79,228.885 1257.35,227.805 1257.92,226.949 1258.49,225.019 1259.06,223.208 1259.63,222.685 1260.2,222.059 1260.76,220.424 1261.33,220.826 1261.9,223.336 1262.47,223.686 1263.04,225.16 1263.61,226.408 1264.18,227.748 1264.74,228.076 1265.31,229.463 1265.88,228.501 1266.45,227.619 1267.02,227.782 1267.59,229.93 1268.15,228.799 1268.72,229.748 1269.29,231.777 1269.86,232.593 1270.43,231.373 1271,233.171 1271.56,232.011 1272.13,233.699 1272.7,233.476 1273.27,234.064 1273.84,231.959 1274.41,230.631 1274.97,229.772 1275.54,228.956 1276.11,230.165 1276.68,230.178 1277.25,229.334 1277.82,229.539 1278.38,229.821 1278.95,231.937 1279.52,234.829 1280.09,235.618 1280.66,236.19 1281.23,235.788 1281.79,234.597 1282.36,232.373 1282.93,231.166 1283.5,230.091 1284.07,231.058 1284.64,230.059 1285.2,230.815 1285.77,232.672 1286.34,231.493 1286.91,228.254 1287.48,229.363 1288.05,228.281 1288.61,225.138 1289.18,226.592 1289.75,223.93 1290.32,225.199 1290.89,227.233 1291.46,229.547 1292.02,233.828 1292.59,233.67 1293.16,232.442 1293.73,232.216 1294.3,233.196 1294.87,230.981 1295.43,231.06 1296,229.929 1296.57,230.918 1297.14,231.175 1297.71,231.024 1298.28,228.931 1298.84,229.023 1299.41,228.007 1299.98,227.996 1300.55,228.239 1301.12,225.536 1301.69,227.13 1302.25,226.2 1302.82,226.389 1303.39,225.857 1303.96,225.323 1304.53,225.64 1305.1,225.969 1305.66,225.544 1306.23,226.818 1306.8,228.1 1307.37,230.555 1307.94,229.704 1308.51,231.762 1309.07,231.52 1309.64,229.423 1310.21,228.693 1310.78,226.72 1311.35,229.249 1311.92,227.1 1312.48,227.45 1313.05,226.917 1313.62,227.381 1314.19,226.883 1314.76,229.217 1315.33,229.547 1315.89,229.891 1316.46,230.166 1317.03,228.234 1317.6,230.742 1318.17,231.999 1318.74,232.891 1319.3,234.048 1319.87,232.748 1320.44,232.691 1321.01,229.419 1321.58,228.463 1322.15,228.641 1322.71,227.981 1323.28,228.318 1323.85,229.435 1324.42,229.492 1324.99,228.425 1325.56,228.587 1326.12,230.756 1326.69,231.868 1327.26,230.917 1327.83,231.131 1328.4,229.1 1328.97,232.194 1329.53,231.857 1330.1,233.052 1330.67,228.95 1331.24,228.246 1331.81,229.624 1332.38,229.643 1332.94,229.056 1333.51,229.424 1334.08,229.717 1334.65,231.057 1335.22,228.248 1335.79,229.605 1336.36,229.87 1336.92,230.952 1337.49,230.895 1338.06,232.899 1338.63,232.888 1339.2,233.842 1339.77,231.621 1340.33,230.811 1340.9,228.891 1341.47,229.235 1342.04,228.226 1342.61,227.598 1343.18,225.816 1343.74,225.099 1344.31,223.649 1344.88,226.249 1345.45,225.788 1346.02,226.273 1346.59,228.811 1347.15,227.927 1347.72,228.298 1348.29,227.835 1348.86,228.377 1349.43,230.821 1350,229.726 1350.56,229.678 1351.13,231.926 1351.7,231.809 1352.27,231.851 1352.84,231.71 1353.41,232.958 1353.97,231.826 1354.54,234.838 1355.11,232.747 1355.68,232.953 1356.25,233.802 1356.82,233.696 1357.38,234.58 1357.95,234.57 1358.52,235.374 1359.09,235.105 1359.66,234 1360.23,233.869 1360.79,233.865 1361.36,232.667 1361.93,236.797 1362.5,237.698 1363.07,240.341 1363.64,240.724 1364.2,241.245 1364.77,240.575 1365.34,240.828 1365.91,237.032 1366.48,237.571 1367.05,239.013 1367.61,239.623 1368.18,237.925 1368.75,236.334 1369.32,236.644 1369.89,234.954 1370.46,233.609 1371.02,235.52 1371.59,234.208 1372.16,234.687 1372.73,234.387 1373.3,233.081 1373.87,234.894 1374.43,235.637 1375,235.205 1375.57,235.829 1376.14,236.511 1376.71,232.83 1377.28,233.757 1377.84,232.162 1378.41,233.131 1378.98,232.729 1379.55,232.611 1380.12,230.391 1380.69,228.262 1381.25,228.345 1381.82,229.493 1382.39,229.387 1382.96,231.019 1383.53,230.906 1384.1,232.804 1384.66,233.5 1385.23,230.399 1385.8,230.485 1386.37,230.423 1386.94,230.093 1387.51,227.022 1388.07,226.203 1388.64,226.317 1389.21,227.577 1389.78,228.625 1390.35,227.563 1390.92,228.733 1391.48,228.753 1392.05,228.762 1392.62,226.756 1393.19,228.251 1393.76,228.615 1394.33,229.78 1394.89,231.886 1395.46,231.928 1396.03,233.924 1396.6,232.513 1397.17,229.168 1397.74,229.782 1398.3,229.769 1398.87,230.975 1399.44,231.153 1400.01,230.975 1400.58,231.21 1401.15,232.38 1401.71,230.163 1402.28,230.23 1402.85,229.043 1403.42,229.106 1403.99,228.385 1404.56,229.52 1405.13,231.695 1405.69,230.727 1406.26,231.817 1406.83,231.712 1407.4,230.533 1407.97,231.621 1408.54,232.47 1409.1,231.389 1409.67,230.317 1410.24,230.353 1410.81,229.366 1411.38,228.363 1411.95,226.245 1412.51,228.533 1413.08,227.495 1413.65,227.546 1414.22,229.017 1414.79,230.198 1415.36,229.235 1415.92,229.472 1416.49,229.381 1417.06,233.647 1417.63,236.373 1418.2,234.641 1418.77,234.429 1419.33,231.983 1419.9,232.188 1420.47,232.954 1421.04,234.863 1421.61,235.562 1422.18,234.116 1422.74,231.779 1423.31,231.868 1423.88,231.938 1424.45,230.614 1425.02,229.598 1425.59,228.435 1426.15,225.489 1426.72,225.759 1427.29,226.04 1427.86,226.153 1428.43,225.062 1429,224.481 1429.56,223.933 1430.13,226.464 1430.7,227.916 1431.27,228.072 1431.84,228.422 1432.41,227.781 1432.97,228.007 1433.54,228.092 1434.11,227.322 1434.68,225.553 1435.25,225.906 1435.82,227.358 1436.38,229.738 1436.95,230.756 1437.52,231.804 1438.09,231.753 1438.66,231.824 1439.23,230.79 1439.79,230.839 1440.36,228.64 1440.93,231.671 1441.5,230.551 1442.07,231.629 1442.64,229.242 1443.2,229.668 1443.77,230.866 1444.34,231.792 1444.91,231.856 1445.48,228.621 1446.05,228.909 1446.61,231.156 1447.18,232.035 1447.75,232.037 1448.32,231.841 1448.89,231.611 1449.46,231.781 1450.02,230.693 1450.59,227.47 1451.16,228.928 1451.73,230.051 1452.3,231.15 1452.87,229.079 1453.43,229.172 1454,227.388 1454.57,228.843 1455.14,231.033 1455.71,232.794 1456.28,231.553 1456.84,230.507 1457.41,229.394 1457.98,227.588 1458.55,230.08 1459.12,229.158 1459.69,228.425 1460.25,227.646 1460.82,226.662 1461.39,226.996 1461.96,225.312 1462.53,230.891 1463.1,231.046 1463.66,231.94 1464.23,231.808 1464.8,231.805 1465.37,231.837 1465.94,231.794 1466.51,229.851 1467.07,229.084 1467.64,229.34 1468.21,228.498 1468.78,228.752 1469.35,226.671 1469.92,224.96 1470.48,225.394 1471.05,227.941 1471.62,228.323 1472.19,231.655 1472.76,233.293 1473.33,234.211 1473.89,234.92 1474.46,233.579 1475.03,233.241 1475.6,233.969 1476.17,235.853 1476.74,235.683 1477.31,233.184 1477.87,231.83 1478.44,231.769 1479.01,233.809 1479.58,233.223 1480.15,234.195 1480.72,232.974 1481.28,230.675 1481.85,230.577 1482.42,231.548 1482.99,232.759 1483.56,232.73 1484.13,235.652 1484.69,236.437 1485.26,236.149 1485.83,235.633 1486.4,234.056 1486.97,234.711 1487.54,233.345 1488.1,232.904 1488.67,231.538 1489.24,232.348 1489.81,232.013 1490.38,231.064 1490.95,231.07 1491.51,231.992 1492.08,232.004 1492.65,232.748 1493.22,232.667 1493.79,230.436 1494.36,229.493 1494.92,226.617 1495.49,225.957 1496.06,226.235 1496.63,227.579 1497.2,228.701 1497.77,228.732 1498.33,225.788 1498.9,227.057 1499.47,227.411 1500.04,229.832 1500.61,228.753 1501.18,227.852 1501.74,226.094 1502.31,224.307 1502.88,225.859 1503.45,225.084 1504.02,225.45 1504.59,225.039 1505.15,223.353 1505.72,224.846 1506.29,225.473 1506.86,225.184 1507.43,224.885 1508,224.219 1508.56,223.832 1509.13,224.353 1509.7,222.759 1510.27,224.457 1510.84,225.902 1511.41,226.289 1511.97,223.611 1512.54,222.238 1513.11,219.895 1513.68,222.95 1514.25,224.539 1514.82,227.112 1515.38,227.398 1515.95,228.73 1516.52,228.83 1517.09,230.223 1517.66,231.294 1518.23,233.437 1518.79,232.226 1519.36,230.224 1519.93,230.58 1520.5,230.592 1521.07,230.725 1521.64,230.904 1522.2,232.16 1522.77,232.434 1523.34,234.528 1523.91,234.07 1524.48,232.047 1525.05,232.165 1525.61,234.391 1526.18,234.154 1526.75,232.865 1527.32,232.706 1527.89,232.901 1528.46,230.843 1529.02,232.093 1529.59,231.211 1530.16,231.087 1530.73,233.262 1531.3,234.229 1531.87,235.269 1532.43,234.309 1533,236.337 1533.57,236.016 1534.14,236.615 1534.71,237.125 1535.28,235.726 1535.84,234.589 1536.41,235.513 1536.98,235.025 1537.55,233.87 1538.12,235.557 1538.69,236.226 1539.25,237.094 1539.82,238.755 1540.39,237.224 1540.96,235.657 1541.53,235.393 1542.1,233.981 1542.66,235.548 1543.23,233.236 1543.8,232.14 1544.37,231.2 1544.94,229.185 1545.51,228.303 1546.08,228.542 1546.64,231.747 1547.21,229.632 1547.78,230.885 1548.35,230.796 1548.92,230.75 1549.49,231.709 1550.05,231.672 1550.62,231.552 1551.19,230.721 1551.76,231.633 1552.33,231.609 1552.9,232.498 1553.46,231.548 1554.03,231.459 1554.6,230.336 1555.17,230.561 1555.74,233.568 1556.31,232.336 1556.87,232.16 1557.44,233.043 1558.01,235.002 1558.58,233.564 1559.15,232.401 1559.72,231.305 1560.28,232.298 1560.85,232.112 1561.42,233.992 1561.99,233.807 1562.56,234.603 1563.13,233.093 1563.69,232.43 1564.26,232.287 1564.83,232.073 1565.4,233.167 1565.97,231.867 1566.54,230.594 1567.1,229.528 1567.67,228.595 1568.24,227.902 1568.81,230.084 1569.38,230.089 1569.95,229.134 1570.51,227.028 1571.08,228.403 1571.65,228.729 1572.22,227.954 1572.79,227.006 1573.36,229.172 1573.92,229.378 1574.49,230.484 1575.06,231.532 1575.63,233.554 1576.2,232.377 1576.77,233.018 1577.33,231.812 1577.9,233.664 1578.47,234.277 1579.04,235.94 1579.61,236.415 1580.18,234.865 1580.74,235.689 1581.31,236.293 1581.88,237.541 1582.45,238.178 1583.02,236.713 1583.59,236.011 1584.15,234.38 1584.72,234.053 1585.29,234.689 1585.86,234.283 1586.43,232.846 1587,230.576 1587.56,229.322 1588.13,229.254 1588.7,227.149 1589.27,230.31 1589.84,228.311 1590.41,227.285 1590.97,228.596 1591.54,226.352 1592.11,227.581 1592.68,226.629 1593.25,227.7 1593.82,227.82 1594.38,228.139 1594.95,227.214 1595.52,226.367 1596.09,226.574 1596.66,226.889 1597.23,225.953 1597.79,224.204 1598.36,225.987 1598.93,225.526 1599.5,228.084 1600.07,228.154 1600.64,229.303 1601.2,228.283 1601.77,228.449 1602.34,228.536 1602.91,229.844 1603.48,228.9 1604.05,228.323 1604.61,228.592 1605.18,229.799 1605.75,229.846 1606.32,228.83 1606.89,230.128 1607.46,230.194 1608.02,233.448 1608.59,230.198 1609.16,229.324 1609.73,231.204 1610.3,233.42 1610.87,230.524 1611.43,233.695 1612,235.567 1612.57,234.114 1613.14,233.93 1613.71,232.602 1614.28,230.396 1614.84,230.554 1615.41,230.379 1615.98,231.293 1616.55,230.31 1617.12,230.221 1617.69,231.242 1618.26,231.244 1618.82,229.281 1619.39,229.286 1619.96,230.379 1620.53,230.356 1621.1,229.552 1621.67,228.708 1622.23,225.752 1622.8,225.209 1623.37,226.693 1623.94,227.106 1624.51,226.481 1625.08,225.637 1625.64,226.026 1626.21,226.305 1626.78,229.631 1627.35,229.99 1627.92,229.069 1628.49,232.253 1629.05,228.141 1629.62,228.4 1630.19,227.659 1630.76,227.805 1631.33,228.001 1631.9,229.366 1632.46,231.56 1633.03,230.325 1633.6,230.375 1634.17,230.574 1634.74,230.508 1635.31,229.539 1635.87,230.759 1636.44,230.925 1637.01,230.201 1637.58,231.353 1638.15,229.214 1638.72,228.293 1639.28,228.349 1639.85,228.447 1640.42,229.671 1640.99,228.723 1641.56,227.661 1642.13,227.004 1642.69,225.326 1643.26,228.165 1643.83,230.665 1644.4,232.111 1644.97,233.41 1645.54,235.426 1646.1,236.292 1646.67,235.067 1647.24,234.987 1647.81,236.046 1648.38,234.972 1648.95,235.852 1649.51,234.56 1650.08,234.493 1650.65,235.362 1651.22,234.153 1651.79,237.156 1652.36,238.793 1652.92,239.272 1653.49,237.626 1654.06,236.157 1654.63,234.877 1655.2,235.677 1655.77,235.465 1656.33,237.026 1656.9,236.559 1657.47,234.153 1658.04,233.789 1658.61,233.353 1659.18,235.156 1659.74,231.679 1660.31,231.703 1660.88,229.518 1661.45,231.657 1662.02,230.549 1662.59,231.431 1663.15,231.361 1663.72,229.257 1664.29,228.467 1664.86,228.555 1665.43,228.554 1666,228.683 1666.56,229.82 1667.13,229.676 1667.7,230.795 1668.27,230.673 1668.84,230.274 1669.41,228.186 1669.97,229.237 1670.54,227.114 1671.11,226.034 1671.68,226.392 1672.25,225.54 1672.82,226.871 1673.38,229.152 1673.95,229.029 1674.52,228.061 1675.09,229.196 1675.66,228.358 1676.23,228.518 1676.79,230.82 1677.36,231.738 1677.93,231.552 1678.5,229.178 1679.07,227.158 1679.64,228.599 1680.2,228.756 1680.77,228.966 1681.34,229.231 1681.91,228.253 1682.48,229.5 1683.05,229.734 1683.61,231.994 1684.18,231.958 1684.75,231.965 1685.32,230.825 1685.89,230.724 1686.46,232.758 1687.02,232.698 1687.59,232.509 1688.16,232.179 1688.73,231.165 1689.3,232.218 1689.87,232.057 1690.44,232.001 1691,231.886 1691.57,232.688 1692.14,230.734 1692.71,231.695 1693.28,232.67 1693.85,232.423 1694.41,232.513 1694.98,231.373 1695.55,231.128 1696.12,229.038 1696.69,229.325 1697.26,229.556 1697.82,231.612 1698.39,230.366 1698.96,228.243 1699.53,229.355 1700.1,230.46 1700.67,229.689 1701.23,233.78 1701.8,231.697 1702.37,234.705 1702.94,234.565 1703.51,233.295 1704.08,234.138 1704.64,231.985 1705.21,231.971 1705.78,230.801 1706.35,231.02 1706.92,232.265 1707.49,233.153 1708.05,230.983 1708.62,231.054 1709.19,230.82 1709.76,230.912 1710.33,232.97 1710.9,231.522 1711.46,232.604 1712.03,232.413 1712.6,232.183 1713.17,230.922 1713.74,230.579 1714.31,230.626 1714.87,231.53 1715.44,233.695 1716.01,230.319 1716.58,230.29 1717.15,231.252 1717.72,230.169 1718.28,230.196 1718.85,231.329 1719.42,226.098 1719.99,225.328 1720.56,224.719 1721.13,226.029 1721.69,229.547 1722.26,227.782 1722.83,228.047 1723.4,228.359 1723.97,228.657 1724.54,228.915 1725.1,230.056 1725.67,229.914 1726.24,230.206 1726.81,230.212 1727.38,231.279 1727.95,231.079 1728.51,234.361 1729.08,232.968 1729.65,231.435 1730.22,232.235 1730.79,230.178 1731.36,232.115 1731.92,232.123 1732.49,231.896 1733.06,230.879 1733.63,231.027 1734.2,230.898 1734.77,231.951 1735.33,234.038 1735.9,232.932 1736.47,231.903 1737.04,231.966 1737.61,235.033 1738.18,234.61 1738.74,234.393 1739.31,230.236 1739.88,227.991 1740.45,230.006 1741.02,228.883 1741.59,228.144 1742.15,229.209 1742.72,229.177 1743.29,229.224 1743.86,231.385 1744.43,230.354 1745,228.378 1745.56,230.784 1746.13,230.649 1746.7,230.665 1747.27,230.543 1747.84,231.781 1748.41,232.71 1748.97,232.571 1749.54,232.287 1750.11,234.307 1750.68,235.179 1751.25,235.752 1751.82,235.49 1752.38,235.171 1752.95,234.063 1753.52,232.762 1754.09,232.528 1754.66,235.508 1755.23,234.238 1755.79,234.78 1756.36,233.327 1756.93,234.939 1757.5,233.774 1758.07,232.563 1758.64,232.288 1759.21,230.911 1759.77,228.403 1760.34,227.506 1760.91,226.625 1761.48,226.735 1762.05,226.305 1762.62,227.431 1763.18,226.527 1763.75,224.48 1764.32,224.641 1764.89,224.369 1765.46,227.879 1766.03,228.038 1766.59,229.256 1767.16,228.222 1767.73,227.408 1768.3,232.734 1768.87,232.698 1769.44,230.581 1770,232.527 1770.57,233.399 1771.14,232.93 1771.71,233.929 1772.28,232.713 1772.85,234.701 1773.41,233.36 1773.98,234.181 1774.55,232.852 1775.12,233.545 1775.69,233.373 1776.26,232.163 1776.82,230.888 1777.39,231.714 1777.96,230.744 1778.53,231.764 1779.1,231.59 1779.67,230.237 1780.23,230.227 1780.8,228.12 1781.37,227.994 1781.94,228.993 1782.51,227.948 1783.08,232.096 1783.64,232.624 1784.21,233.336 1784.78,234.153 1785.35,232.775 1785.92,231.478 1786.49,230.137 1787.05,231.131 1787.62,231.052 1788.19,231.019 1788.76,233.846 1789.33,232.548 1789.9,231.215 1790.46,229.053 1791.03,227.074 1791.6,227.148 1792.17,227.24 1792.74,226.354 1793.31,227.532 1793.87,228.69 1794.44,227.996 1795.01,227.224 1795.58,226.346 1796.15,227.776 1796.72,227.932 1797.28,227.969 1797.85,228.214 1798.42,226.046 1798.99,226.269 1799.56,226.541 1800.13,224.698 1800.69,226.241 1801.26,226.568 1801.83,223.965 1802.4,224.619 1802.97,224.211 1803.54,224.567 1804.1,226.077 1804.67,226.56 1805.24,223.618 1805.81,224.071 1806.38,222.388 1806.95,222.15 1807.51,226.073 1808.08,227.501 1808.65,228.768 1809.22,229.87 1809.79,231.093 1810.36,232.331 1810.92,232.32 1811.49,230.471 1812.06,231.639 1812.63,232.409 1813.2,232.466 1813.77,232.511 1814.33,231.433 1814.9,230.606 1815.47,229.893 1816.04,230.062 1816.61,229.12 1817.18,229.317 1817.74,228.635 1818.31,230.932 1818.88,230.951 1819.45,229.923 1820.02,229.068 1820.59,230.478 1821.15,233.577 1821.72,233.435 1822.29,234.257 1822.86,233.07 1823.43,233.047 1824,232.945 1824.56,234.033 1825.13,235.912 1825.7,233.33 1826.27,235.233 1826.84,233.006 1827.41,233.865 1827.97,234.585 1828.54,235.228 1829.11,233.977 1829.68,233.707 1830.25,232.653 1830.82,231.562 1831.39,231.565 1831.95,232.555 1832.52,231.67 1833.09,232.691 1833.66,231.632 1834.23,231.705 1834.8,234.702 1835.36,236.325 1835.93,235.925 1836.5,233.595 1837.07,234.386 1837.64,234.069 1838.21,233.589 1838.77,234.532 1839.34,234.238 1839.91,234.244 1840.48,235.866 1841.05,235.45 1841.62,235.076 1842.18,237.951 1842.75,238.248 1843.32,237.658 1843.89,237.976 1844.46,237.393 1845.03,235.84 1845.59,234.444 1846.16,235.003 1846.73,233.652 1847.3,232.467 1847.87,230.253 1848.44,230.378 1849,231.359 1849.57,232.472 1850.14,230.397 1850.71,229.551 1851.28,225.481 1851.85,223.922 1852.41,225.205 1852.98,224.316 1853.55,226.613 1854.12,227.723 1854.69,225.678 1855.26,224.916 1855.82,224.348 1856.39,223.892 1856.96,224.986 1857.53,224.144 1858.1,222.64 1858.67,223.421 1859.23,222.938 1859.8,223.571 1860.37,224.239 1860.94,225.85 1861.51,225.496 1862.08,227.978 1862.64,227.029 1863.21,226.141 1863.78,226.708 1864.35,228.164 1864.92,227.547 1865.49,229.855 1866.05,232.903 1866.62,233.848 1867.19,234.92 1867.76,236.438 1868.33,237.3 1868.9,237.758 1869.46,235.042 1870.03,234.787 1870.6,236.569 1871.17,236 1871.74,236.57 1872.31,237.177 1872.87,235.739 1873.44,234.339 1874.01,236.049 1874.58,235.875 1875.15,235.586 1875.72,234.119 1876.28,232.913 1876.85,230.829 1877.42,228.856 1877.99,229.037 1878.56,228.114 1879.13,228.332 1879.69,228.729 1880.26,226.634 1880.83,227.843 1881.4,228.041 1881.97,227.334 1882.54,229.714 1883.1,229.9 1883.67,230.18 1884.24,232.355 1884.81,230.013 1885.38,231.974 1885.95,229.867 1886.51,229.987 1887.08,230.158 1887.65,228.962 1888.22,230.116 1888.79,227.99 1889.36,230.264 1889.92,231.16 1890.49,229.059 1891.06,228.275 1891.63,228.526 1892.2,227.672 1892.77,226.867 1893.33,230.149 1893.9,229.173 1894.47,230.063 1895.04,229.119 1895.61,228.581 1896.18,229.892 1896.74,230.04 1897.31,230.146 1897.88,228.347 1898.45,228.565 1899.02,228.545 1899.59,226.858 1900.16,228.255 1900.72,229.735 1901.29,228.898 1901.86,229.024 1902.43,230.215 1903,230.491 1903.57,231.472 1904.13,233.496 1904.7,233.237 1905.27,232.922 1905.84,231.768 1906.41,231.888 1906.98,232.748 1907.54,233.456 1908.11,235.532 1908.68,235.45 1909.25,234.218 1909.82,234.891 1910.39,236.704 1910.95,237.399 1911.52,233.897 1912.09,233.73 1912.66,233.458 1913.23,233.376 1913.8,234.284 1914.36,235.039 1914.93,234.573 1915.5,234.3 1916.07,232.933 1916.64,232.66 1917.21,232.505 1917.77,231.107 1918.34,231.375 1918.91,232.344 1919.48,231.009 1920.05,230.668 1920.62,228.508 1921.18,227.362 1921.75,227.594 1922.32,227.775 1922.89,226.784 1923.46,230.208 1924.03,232.253 1924.59,232.149 1925.16,230.127 1925.73,230.19 1926.3,232.365 1926.87,234.54 1927.44,233.174 1928,233.954 1928.57,233.521 1929.14,230.987 1929.71,230.842 1930.28,231.825 1930.85,230.518 1931.41,231.376 1931.98,233.363 1932.55,234.247 1933.12,231.936 1933.69,230.62 1934.26,227.58 1934.82,229.003 1935.39,228.938 1935.96,230.193 1936.53,230.329 1937.1,229.188 1937.67,230.109 1938.23,229.875 1938.8,228.998 1939.37,230.028 1939.94,229.187 1940.51,231.225 1941.08,235.203 1941.64,233.889 1942.21,234.711 1942.78,234.33 1943.35,232.902 1943.92,234.632 1944.49,234.325 1945.05,235.209 1945.62,232.535 1946.19,233.232 1946.76,234.211 1947.33,232.655 1947.9,231.37 1948.46,233.287 1949.03,231.968 1949.6,232.764 1950.17,231.427 1950.74,233.174 1951.31,228.527 1951.87,230.576 1952.44,229.433 1953.01,227.244 1953.58,229.41 1954.15,230.418 1954.72,229.294 1955.28,228.094 1955.85,229.26 1956.42,228.18 1956.99,228.302 1957.56,225.228 1958.13,225.662 1958.69,227 1959.26,226.224 1959.83,227.405 1960.4,227.584 1960.97,226.843 1961.54,226.999 1962.1,229.13 1962.67,230.384 1963.24,231.182 1963.81,231.113 1964.38,231.845 1964.95,229.671 1965.51,233.689 1966.08,235.297 1966.65,233.076 1967.22,232.86 1967.79,232.64 1968.36,232.531 1968.92,230.399 1969.49,229.531 1970.06,231.586 1970.63,232.699 1971.2,230.545 1971.77,230.279 1972.34,226.119 1972.9,228.48 1973.47,228.816 1974.04,230.966 1974.61,230.796 1975.18,230.81 1975.75,229.788 1976.31,229.735 1976.88,230.822 1977.45,230.798 1978.02,231.743 1978.59,229.644 1979.16,232.852 1979.72,232.769 1980.29,231.489 1980.86,232.419 1981.43,230.12 1982,230.061 1982.57,230.119 1983.13,228.99 1983.7,229.188 1984.27,228.358 1984.84,229.545 1985.41,230.447 1985.98,231.575 1986.54,229.674 1987.11,226.635 1987.68,227.94 1988.25,229.717 1988.82,230.737 1989.39,230.428 1989.95,230.083 1990.52,229.786 1991.09,229.731 1991.66,229.859 1992.23,229.856 1992.8,229.801 1993.36,230.778 1993.93,230.497 1994.5,228.426 1995.07,228.55 1995.64,226.95 1996.21,227.332 1996.77,228.452 1997.34,229.616 1997.91,228.553 1998.48,227.453 1999.05,228.652 1999.62,226.686 2000.18,226.842 2000.75,226.951 2001.32,228.178 2001.89,228.358 2002.46,231.811 2003.03,232.699 2003.59,231.485 2004.16,230.571 2004.73,229.554 2005.3,231.833 2005.87,231.823 2006.44,230.788 2007,230.976 2007.57,229.022 2008.14,229.093 2008.71,230.219 2009.28,229.413 2009.85,229.759 2010.41,231.851 2010.98,231.797 2011.55,232.989 2012.12,235.931 2012.69,234.548 2013.26,235.382 2013.82,236.276 2014.39,234.611 2014.96,235.567 2015.53,237.286 2016.1,233.646 2016.67,233.561 2017.23,231.047 2017.8,232.974 2018.37,233.851 2018.94,233.403 2019.51,233.192 2020.08,231.968 2020.64,232.002 2021.21,232.041 2021.78,231.829 2022.35,232.816 2022.92,233.66 2023.49,233.367 2024.05,234.137 2024.62,236.985 2025.19,239.247 2025.76,237.613 2026.33,235.96 2026.9,233.37 2027.46,233.911 2028.03,233.529 2028.6,231.946 2029.17,230.742 2029.74,230.515 2030.31,228.379 2030.87,228.522 2031.44,226.706 2032.01,225.983 2032.58,224.19 2033.15,224.754 2033.72,224.181 2034.28,223.607 2034.85,225.091 2035.42,225.362 2035.99,224.474 2036.56,225.89 2037.13,225.29 2037.69,226.705 2038.26,223.781 2038.83,227.403 2039.4,227.659 2039.97,225.751 2040.54,227.15 2041.11,227.242 2041.67,227.407 2042.24,225.673 2042.81,227.221 2043.38,225.278 2043.95,225.566 2044.52,225.099 2045.08,225.834 2045.65,227.127 2046.22,228.305 2046.79,231.74 2047.36,231.852 2047.93,230.672 2048.49,230.799 2049.06,227.815 2049.63,230.269 2050.2,229.22 2050.77,227.425 2051.34,226.679 2051.9,226.158 2052.47,224.457 2053.04,225.226 2053.61,221.651 2054.18,223.407 2054.75,224.067 2055.31,224.558 2055.88,225.126 2056.45,223.696 2057.02,224.236 2057.59,222.865 2058.16,225.482 2058.72,225.972 2059.29,225.467 2059.86,224.917 2060.43,226.674 2061,228.247 2061.57,227.643 2062.13,229.11 2062.7,231.619 2063.27,231.687 2063.84,233.932 2064.41,235.863 2064.98,234.855 2065.54,234.652 2066.11,235.5 2066.68,237.38 2067.25,237.977 2067.82,236.59 2068.39,235.594 2068.95,236.591 2069.52,235.2 2070.09,237.059 2070.66,235.226 2071.23,236.067 2071.8,235.815 2072.36,235.44 2072.93,234.162 2073.5,233.941 2074.07,233.821 2074.64,232.87 2075.21,234.968 2075.77,233.744 2076.34,233.603 2076.91,235.489 2077.48,235.34 2078.05,233.077 2078.62,235.025 2079.18,234.89 2079.75,235.41 2080.32,237.195 2080.89,235.867 2081.46,235.393 2082.03,236.201 2082.59,236.865 2083.16,237.427 2083.73,237.988 2084.3,236.314 2084.87,235.598 2085.44,235.16 2086,234.66 2086.57,234.532 2087.14,233.077 2087.71,230.557 2088.28,230.389 2088.85,232.221 2089.41,232.177 2089.98,233.041 2090.55,232.853 2091.12,232.849 2091.69,231.673 2092.26,232.459 2092.82,232.208 2093.39,236.279 2093.96,234.844 2094.53,234.307 2095.1,232.933 2095.67,231.81 2096.23,233.521 2096.8,234.145 2097.37,232.674 2097.94,233.658 2098.51,233.387 2099.08,233.111 2099.64,233.707 2100.21,233.483 2100.78,233.343 2101.35,232.146 2101.92,229.773 2102.49,230.856 2103.05,231.65 2103.62,230.542 2104.19,230.604 2104.76,231.492 2105.33,230.365 2105.9,229.13 2106.46,231.368 2107.03,229.113 2107.6,228.898 2108.17,227.816 2108.74,226.803 2109.31,227.917 2109.87,226.804 2110.44,226.959 2111.01,227.026 2111.58,225.474 2112.15,225.823 2112.72,227.091 2113.29,228.316 2113.85,228.371 2114.42,226.608 2114.99,225.615 2115.56,226.874 2116.13,226.979 2116.7,226.801 2117.26,226.999 2117.83,227.04 2118.4,227.074 2118.97,226.279 2119.54,226.644 2120.11,225.956 2120.67,225.163 2121.24,226.678 2121.81,227.72 2122.38,231.134 2122.95,231.18 2123.52,230.724 2124.08,227.738 2124.65,230.319 2125.22,231.233 2125.79,232.361 2126.36,231.35 2126.93,230.301 2127.49,230.556 2128.06,228.587 2128.63,229.801 2129.2,228.795 2129.77,228.919 2130.34,230.128 2130.9,229.187 2131.47,229.509 2132.04,229.666 2132.61,229.934 2133.18,229.821 2133.75,230.825 2134.31,230.762 2134.88,230.746 2135.45,229.685 2136.02,231.994 2136.59,232.987 2137.16,232.852 2137.72,233.68 2138.29,233.491 2138.86,232.414 2139.43,233.495 2140,232.272 2140.57,231.886 2141.13,229.732 2141.7,232.955 2142.27,230.696 2142.84,229.74 2143.41,229.552 2143.98,229.62 2144.54,230.781 2145.11,228.638 2145.68,227.675 2146.25,227.932 2146.82,226.03 2147.39,228.41 2147.95,230.774 2148.52,229.737 2149.09,232.05 2149.66,231.962 2150.23,232.659 2150.8,231.097 2151.36,229.142 2151.93,228.348 2152.5,228.493 2153.07,229.676 2153.64,229.665 2154.21,229.767 2154.77,230.009 2155.34,230.208 2155.91,228.44 2156.48,229.691 2157.05,229.745 2157.62,231.777 2158.18,232.594 2158.75,231.201 2159.32,233.452 2159.89,233.452 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.024\n  with uncertainty of ± 0.002152649707945196\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01812 ± (0.00330675, 0.00338448) (MC)\n  95% confidence interval: [-4.02491, -4.01153] (MC)\n  linear error propagation: -4.01811 ± 0.00327165\n  |δ_y| = |0.00272611| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0181238633579275, val_l = 0.00678446890019746, val_u = 0.006593022899136436)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip400\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip401\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip402\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.66 2211.02,1142.66 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,976.131 2211.02,976.131 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,809.604 2211.02,809.604 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,643.077 2211.02,643.077 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,476.549 2211.02,476.549 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,310.022 2211.02,310.022 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.66 365.751,1142.66 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,976.131 365.751,976.131 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,809.604 365.751,809.604 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,643.077 365.751,643.077 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,476.549 365.751,476.549 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,310.022 365.751,310.022 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M298.909 1128.46 Q295.298 1128.46 293.469 1132.02 Q291.664 1135.56 291.664 1142.69 Q291.664 1149.8 293.469 1153.36 Q295.298 1156.91 298.909 1156.91 Q302.543 1156.91 304.349 1153.36 Q306.177 1149.8 306.177 1142.69 Q306.177 1135.56 304.349 1132.02 Q302.543 1128.46 298.909 1128.46 M298.909 1124.75 Q304.719 1124.75 307.775 1129.36 Q310.853 1133.94 310.853 1142.69 Q310.853 1151.42 307.775 1156.03 Q304.719 1160.61 298.909 1160.61 Q293.099 1160.61 290.02 1156.03 Q286.964 1151.42 286.964 1142.69 Q286.964 1133.94 290.02 1129.36 Q293.099 1124.75 298.909 1124.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M259.557 989.476 L267.196 989.476 L267.196 963.111 L258.886 964.777 L258.886 960.518 L267.15 958.851 L271.826 958.851 L271.826 989.476 L279.465 989.476 L279.465 993.411 L259.557 993.411 L259.557 989.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 961.93 Q295.298 961.93 293.469 965.495 Q291.664 969.036 291.664 976.166 Q291.664 983.272 293.469 986.837 Q295.298 990.379 298.909 990.379 Q302.543 990.379 304.349 986.837 Q306.177 983.272 306.177 976.166 Q306.177 969.036 304.349 965.495 Q302.543 961.93 298.909 961.93 M298.909 958.226 Q304.719 958.226 307.775 962.833 Q310.853 967.416 310.853 976.166 Q310.853 984.893 307.775 989.499 Q304.719 994.083 298.909 994.083 Q293.099 994.083 290.02 989.499 Q286.964 984.893 286.964 976.166 Q286.964 967.416 290.02 962.833 Q293.099 958.226 298.909 958.226 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M262.775 822.949 L279.094 822.949 L279.094 826.884 L257.15 826.884 L257.15 822.949 Q259.812 820.194 264.395 815.565 Q269.002 810.912 270.182 809.569 Q272.428 807.046 273.307 805.31 Q274.21 803.551 274.21 801.861 Q274.21 799.106 272.266 797.37 Q270.344 795.634 267.242 795.634 Q265.043 795.634 262.59 796.398 Q260.159 797.162 257.381 798.713 L257.381 793.991 Q260.205 792.856 262.659 792.278 Q265.113 791.699 267.15 791.699 Q272.52 791.699 275.715 794.384 Q278.909 797.069 278.909 801.56 Q278.909 803.69 278.099 805.611 Q277.312 807.509 275.205 810.102 Q274.627 810.773 271.525 813.991 Q268.423 817.185 262.775 822.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 795.403 Q295.298 795.403 293.469 798.967 Q291.664 802.509 291.664 809.639 Q291.664 816.745 293.469 820.31 Q295.298 823.852 298.909 823.852 Q302.543 823.852 304.349 820.31 Q306.177 816.745 306.177 809.639 Q306.177 802.509 304.349 798.967 Q302.543 795.403 298.909 795.403 M298.909 791.699 Q304.719 791.699 307.775 796.305 Q310.853 800.889 310.853 809.639 Q310.853 818.365 307.775 822.972 Q304.719 827.555 298.909 827.555 Q293.099 827.555 290.02 822.972 Q286.964 818.365 286.964 809.639 Q286.964 800.889 290.02 796.305 Q293.099 791.699 298.909 791.699 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M272.914 641.722 Q276.27 642.44 278.145 644.709 Q280.043 646.977 280.043 650.31 Q280.043 655.426 276.525 658.227 Q273.006 661.028 266.525 661.028 Q264.349 661.028 262.034 660.588 Q259.742 660.171 257.289 659.315 L257.289 654.801 Q259.233 655.935 261.548 656.514 Q263.863 657.093 266.386 657.093 Q270.784 657.093 273.076 655.357 Q275.39 653.621 275.39 650.31 Q275.39 647.255 273.238 645.542 Q271.108 643.806 267.289 643.806 L263.261 643.806 L263.261 639.963 L267.474 639.963 Q270.923 639.963 272.752 638.598 Q274.58 637.209 274.58 634.616 Q274.58 631.954 272.682 630.542 Q270.807 629.107 267.289 629.107 Q265.367 629.107 263.168 629.523 Q260.969 629.94 258.33 630.82 L258.33 626.653 Q260.992 625.912 263.307 625.542 Q265.645 625.172 267.705 625.172 Q273.029 625.172 276.131 627.602 Q279.233 630.01 279.233 634.13 Q279.233 637 277.59 638.991 Q275.946 640.959 272.914 641.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 628.875 Q295.298 628.875 293.469 632.44 Q291.664 635.982 291.664 643.111 Q291.664 650.218 293.469 653.783 Q295.298 657.324 298.909 657.324 Q302.543 657.324 304.349 653.783 Q306.177 650.218 306.177 643.111 Q306.177 635.982 304.349 632.44 Q302.543 628.875 298.909 628.875 M298.909 625.172 Q304.719 625.172 307.775 629.778 Q310.853 634.361 310.853 643.111 Q310.853 651.838 307.775 656.445 Q304.719 661.028 298.909 661.028 Q293.099 661.028 290.02 656.445 Q286.964 651.838 286.964 643.111 Q286.964 634.361 290.02 629.778 Q293.099 625.172 298.909 625.172 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M271.594 463.343 L259.789 481.792 L271.594 481.792 L271.594 463.343 M270.367 459.269 L276.247 459.269 L276.247 481.792 L281.177 481.792 L281.177 485.681 L276.247 485.681 L276.247 493.829 L271.594 493.829 L271.594 485.681 L255.992 485.681 L255.992 481.167 L270.367 459.269 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 462.348 Q295.298 462.348 293.469 465.913 Q291.664 469.454 291.664 476.584 Q291.664 483.69 293.469 487.255 Q295.298 490.797 298.909 490.797 Q302.543 490.797 304.349 487.255 Q306.177 483.69 306.177 476.584 Q306.177 469.454 304.349 465.913 Q302.543 462.348 298.909 462.348 M298.909 458.644 Q304.719 458.644 307.775 463.251 Q310.853 467.834 310.853 476.584 Q310.853 485.311 307.775 489.917 Q304.719 494.501 298.909 494.501 Q293.099 494.501 290.02 489.917 Q286.964 485.311 286.964 476.584 Q286.964 467.834 290.02 463.251 Q293.099 458.644 298.909 458.644 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M258.793 292.742 L277.15 292.742 L277.15 296.677 L263.076 296.677 L263.076 305.149 Q264.094 304.802 265.113 304.64 Q266.131 304.455 267.15 304.455 Q272.937 304.455 276.316 307.626 Q279.696 310.797 279.696 316.214 Q279.696 321.793 276.224 324.895 Q272.752 327.973 266.432 327.973 Q264.256 327.973 261.988 327.603 Q259.742 327.233 257.335 326.492 L257.335 321.793 Q259.418 322.927 261.641 323.483 Q263.863 324.038 266.34 324.038 Q270.344 324.038 272.682 321.932 Q275.02 319.825 275.02 316.214 Q275.02 312.603 272.682 310.497 Q270.344 308.39 266.34 308.39 Q264.465 308.39 262.59 308.807 Q260.738 309.223 258.793 310.103 L258.793 292.742 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 295.821 Q295.298 295.821 293.469 299.385 Q291.664 302.927 291.664 310.057 Q291.664 317.163 293.469 320.728 Q295.298 324.27 298.909 324.27 Q302.543 324.27 304.349 320.728 Q306.177 317.163 306.177 310.057 Q306.177 302.927 304.349 299.385 Q302.543 295.821 298.909 295.821 M298.909 292.117 Q304.719 292.117 307.775 296.723 Q310.853 301.307 310.853 310.057 Q310.853 318.784 307.775 323.39 Q304.719 327.973 298.909 327.973 Q293.099 327.973 290.02 323.39 Q286.964 318.784 286.964 310.057 Q286.964 301.307 290.02 296.723 Q293.099 292.117 298.909 292.117 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1149.47 400.199,1150.2 400.786,1034.14 401.372,929.547 401.958,833.599 402.545,741.985 403.131,658.185 403.718,583.531 404.304,513.73 404.891,448.481 405.477,390.986 406.063,340.455 406.65,295.056 407.236,256.098 407.823,219.895 408.409,324.511 408.995,288.284 409.582,313.937 410.168,336.611 410.755,307.434 411.341,283.246 411.927,261.597 412.514,242.311 413.1,228.188 413.687,287.85 414.273,273.107 414.86,260.962 415.446,282.223 416.032,272.022 416.619,264.553 417.205,258.363 417.792,277.387 418.378,297.616 418.964,297.085 419.551,336.706 420.137,336.658 420.724,337.064 421.31,354.902 421.896,357.432 422.483,361.226 423.069,379.978 423.656,398.098 424.242,427.415 424.829,444.555 425.415,471.245 426.001,477.469 426.588,483.441 427.174,509.645 427.761,525.83 428.347,533.756 428.933,542.221 429.52,551.798 430.106,561.824 430.693,579.112 431.279,602.343 431.865,623.439 432.452,637.334 433.038,656.814 433.625,665.356 434.211,690.25 434.798,708.504 435.384,721.122 435.97,733.118 436.557,744.868 437.143,752.089 437.73,763.441 438.316,788.306 438.902,794.815 439.489,801.594 440.075,815.945 440.662,826.824 441.248,833.934 441.835,854.747 442.421,863.882 443.007,870.131 443.594,879.692 444.18,895.358 444.767,907.076 445.353,915.452 445.939,926.115 446.526,939.372 447.112,949.78 447.699,962.745 448.285,977.639 448.871,981.327 449.458,993.282 450.044,1004.25 450.631,1010.26 451.217,1018.52 451.804,1026.34 452.39,1031.85 452.976,1035.15 453.563,1038.11 454.149,1041.28 454.736,1046.7 455.322,1054.83 455.908,1062.24 456.495,1067.59 457.081,1072.83 457.668,1080.12 458.254,1087.08 458.84,1091.94 459.427,1098.58 460.013,1103.13 460.6,1107.58 461.186,1110.01 461.773,1116.32 462.359,1124.44 462.945,1126.3 463.532,1132.2 464.118,1141.44 464.705,1145.02 465.291,1150.19 465.877,1155 466.464,1156.2 467.05,1155.53 467.637,1158.41 468.223,1159.53 468.809,1158.86 469.396,1161.98 469.982,1165.27 470.569,1168.04 471.155,1175.91 471.742,1178.21 472.328,1178.7 472.914,1178.06 473.501,1185.52 474.087,1186.32 474.674,1189.95 475.26,1192.26 475.846,1192.75 476.433,1194.52 477.019,1198.28 477.606,1202.08 478.192,1205.61 478.778,1205.89 479.365,1205.72 479.951,1205.94 480.538,1207.86 481.124,1208.32 481.711,1208.69 482.297,1210.8 482.883,1212.39 483.47,1212.62 484.056,1211.49 484.643,1213.35 485.229,1212.28 485.815,1211.17 486.402,1214.72 486.988,1220.76 487.575,1220.62 488.161,1223.49 488.748,1224.94 489.334,1228.94 489.92,1228.62 490.507,1228.28 491.093,1223.45 491.68,1224.98 492.266,1223.45 492.852,1223.43 493.439,1225.24 494.025,1226.63 494.612,1227.76 495.198,1231.91 495.784,1233.26 496.371,1235.8 496.957,1236.33 497.544,1235.85 498.13,1239.79 498.717,1240.69 499.303,1244.33 499.889,1240.65 500.476,1242.86 501.062,1243.41 501.649,1241.15 502.235,1241.53 502.821,1240.66 503.408,1239.79 503.994,1240.46 504.581,1239.66 505.167,1243.45 505.753,1242.58 506.34,1243.35 506.926,1243.8 507.513,1244.47 508.099,1247.94 508.686,1248.27 509.272,1248.54 509.858,1245.92 510.445,1245.31 511.031,1245.87 511.618,1246.54 512.204,1244.16 512.79,1246.14 513.377,1245.12 513.963,1244.47 514.55,1249.23 515.136,1249.38 515.722,1249.43 516.309,1249.64 516.895,1250.03 517.482,1250.36 518.068,1250.53 518.655,1249.29 519.241,1249.84 519.827,1246.28 520.414,1246.47 521,1248.3 521.587,1247.13 522.173,1250.25 522.759,1247.45 523.346,1246.55 523.932,1244.24 524.519,1243.51 525.105,1246.93 525.691,1248.44 526.278,1247.29 526.864,1244.6 527.451,1243.65 528.037,1245.62 528.624,1246.18 529.21,1243.82 529.796,1241.85 530.383,1241.04 530.969,1240.32 531.556,1242.33 532.142,1242.86 532.728,1242.16 533.315,1241.16 533.901,1239.38 534.488,1238.5 535.074,1237.77 535.661,1241.22 536.247,1238.06 536.833,1236.16 537.42,1237.22 538.006,1236.65 538.593,1235.99 539.179,1235.44 539.765,1235.01 540.352,1236.42 540.938,1238.75 541.525,1238.16 542.111,1238.82 542.697,1238.2 543.284,1239.09 543.87,1237.01 544.457,1237.92 545.043,1238.65 545.63,1239.29 546.216,1240.05 546.802,1238.11 547.389,1238.78 547.975,1237.87 548.562,1235.76 549.148,1235.45 549.734,1237.91 550.321,1237.21 550.907,1233.96 551.494,1232.22 552.08,1233.09 552.666,1232.55 553.253,1234.71 553.839,1234.13 554.426,1236.5 555.012,1234.67 555.599,1235.42 556.185,1234.94 556.771,1232.93 557.358,1231.53 557.944,1230 558.531,1232.44 559.117,1238.03 559.703,1237.56 560.29,1239.65 560.876,1238.99 561.463,1239.83 562.049,1237.78 562.635,1237.11 563.222,1233.59 563.808,1233.29 564.395,1232.76 564.981,1233.41 565.568,1233 566.154,1233.91 566.74,1234.94 567.327,1232.83 567.913,1232.59 568.5,1232.16 569.086,1233.24 569.672,1231.18 570.259,1229.47 570.845,1230.41 571.432,1232.87 572.018,1233.85 572.605,1235.03 573.191,1237.22 573.777,1238.04 574.364,1240.06 574.95,1235.25 575.537,1234.85 576.123,1235.73 576.709,1235.31 577.296,1237.44 577.882,1234.14 578.469,1234.92 579.055,1231.56 579.641,1231.23 580.228,1228.04 580.814,1229.11 581.401,1230.3 581.987,1228.7 582.574,1226.89 583.16,1227.98 583.746,1226.32 584.333,1222.03 584.919,1223.48 585.506,1223.75 586.092,1222.63 586.678,1223.83 587.265,1223.79 587.851,1223.45 588.438,1222.03 589.024,1220.86 589.61,1220.76 590.197,1219.76 590.783,1218.67 591.37,1222.84 591.956,1222.84 592.543,1221.48 593.129,1221.65 593.715,1225.75 594.302,1226.94 594.888,1227.97 595.475,1227.51 596.061,1227.14 596.647,1222.56 597.234,1222.54 597.82,1225.07 598.407,1227.48 598.993,1226.87 599.579,1228.12 600.166,1228.08 600.752,1224.89 601.339,1226.01 601.925,1229.82 602.512,1232.51 603.098,1232.07 603.684,1232.9 604.271,1234.95 604.857,1235.48 605.444,1233.25 606.03,1233.77 606.616,1235.36 607.203,1237.07 607.789,1237.68 608.376,1232.69 608.962,1233.15 609.548,1232.43 610.135,1230.49 610.721,1229.84 611.308,1229.49 611.894,1227.72 612.481,1225.95 613.067,1221.43 613.653,1221.39 614.24,1220.22 614.826,1220.1 615.413,1220.28 615.999,1219.06 616.585,1217.74 617.172,1213.43 617.758,1215.17 618.345,1215.64 618.931,1217.35 619.518,1216 620.104,1214.87 620.69,1216.2 621.277,1219.4 621.863,1220.8 622.45,1222.16 623.036,1224.88 623.622,1221.83 624.209,1224.33 624.795,1224.14 625.382,1224.1 625.968,1224.91 626.554,1224.61 627.141,1223.06 627.727,1224.44 628.314,1225.77 628.9,1222.92 629.487,1222.91 630.073,1221.44 630.659,1221.43 631.246,1221.23 631.832,1221.36 632.419,1222.68 633.005,1221.06 633.591,1226.37 634.178,1227.54 634.764,1225.82 635.351,1223.88 635.937,1222.15 636.523,1217.65 637.11,1215.06 637.696,1214.06 638.283,1214.63 638.869,1215.94 639.456,1217.39 640.042,1217.4 640.628,1218.8 641.215,1221.45 641.801,1221.05 642.388,1219.23 642.974,1219.24 643.56,1215.16 644.147,1215.46 644.733,1217.07 645.32,1217 645.906,1214.48 646.492,1215.9 647.079,1217.18 647.665,1218.76 648.252,1218.78 648.838,1218.76 649.425,1218.57 650.011,1219.89 650.597,1219.95 651.184,1218.58 651.77,1220.91 652.357,1222.18 652.943,1219.11 653.529,1220.24 654.116,1218.82 654.702,1222.82 655.289,1221.01 655.875,1222.14 656.462,1222.27 657.048,1221.82 657.634,1221.67 658.221,1220.39 658.807,1220.15 659.394,1224.2 659.98,1225.17 660.566,1226.07 661.153,1229.57 661.739,1230.1 662.326,1230.72 662.912,1227.19 663.498,1226.6 664.085,1223.47 664.671,1224.26 665.258,1221.03 665.844,1219.4 666.431,1217.94 667.017,1220.4 667.603,1220.25 668.19,1220.1 668.776,1219.99 669.363,1219.76 669.949,1222.12 670.535,1223.38 671.122,1223.21 671.708,1222.92 672.295,1222.67 672.881,1220.58 673.467,1216.33 674.054,1217.56 674.64,1217.6 675.227,1218.73 675.813,1218.89 676.4,1214.62 676.986,1212.07 677.572,1212.45 678.159,1214.01 678.745,1212.67 679.332,1212.93 679.918,1211.86 680.504,1214.74 681.091,1213.37 681.677,1213.57 682.264,1215.29 682.85,1215.42 683.436,1213.06 684.023,1213.41 684.609,1211.2 685.196,1211.39 685.782,1215.73 686.369,1216.98 686.955,1217.28 687.541,1215.79 688.128,1217.52 688.714,1215.95 689.301,1216.13 689.887,1217.6 690.473,1220.13 691.06,1219.84 691.646,1219.79 692.233,1219.51 692.819,1218.13 693.405,1219.55 693.992,1219.32 694.578,1219.28 695.165,1221.52 695.751,1221.35 696.338,1223.76 696.924,1223.58 697.51,1223.24 698.097,1222.87 698.683,1222.63 699.27,1222.29 699.856,1220.55 700.442,1220.58 701.029,1221.25 701.615,1220.89 702.202,1223.35 702.788,1222.86 703.375,1219.71 703.961,1216.84 704.547,1216.72 705.134,1216.36 705.72,1217.38 706.307,1217.13 706.893,1214.41 707.479,1213.2 708.066,1213.18 708.652,1211.83 709.239,1213.29 709.825,1211.83 710.411,1211.84 710.998,1211.78 711.584,1214.67 712.171,1218.78 712.757,1218.49 713.344,1218.44 713.93,1219.3 714.516,1220.53 715.103,1220.16 715.689,1221.29 716.276,1220.96 716.862,1220.45 717.448,1218.76 718.035,1218.72 718.621,1219.75 719.208,1219.23 719.794,1218.81 720.38,1218.18 720.967,1217.81 721.553,1217.66 722.14,1215.97 722.726,1217.37 723.313,1217.14 723.899,1215.75 724.485,1214.31 725.072,1213.24 725.658,1213.46 726.245,1213.51 726.831,1212.29 727.417,1212.4 728.004,1215.42 728.59,1215.2 729.177,1216.52 729.763,1216.4 730.349,1217.58 730.936,1217.44 731.522,1214.23 732.109,1215.64 732.695,1216.83 733.282,1215.23 733.868,1213.44 734.454,1213.82 735.041,1211.1 735.627,1211.13 736.214,1208.66 736.8,1206.06 737.386,1211.79 737.973,1209.38 738.559,1210.88 739.146,1212.16 739.732,1212.26 740.318,1214.99 740.905,1213.6 741.491,1214.87 742.078,1216.03 742.664,1217.58 743.251,1217.41 743.837,1218.68 744.423,1220.02 745.01,1221.06 745.596,1219.33 746.183,1217.74 746.769,1218.01 747.355,1217.72 747.942,1220.04 748.528,1222.18 749.115,1221.6 749.701,1219.62 750.288,1217.58 750.874,1217.17 751.46,1217.12 752.047,1215.77 752.633,1214.66 753.22,1213.21 753.806,1211.43 754.392,1212.81 754.979,1210.29 755.565,1211.85 756.152,1210.33 756.738,1209.01 757.324,1209.32 757.911,1208.21 758.497,1212.72 759.084,1213.94 759.67,1211.2 760.257,1209.95 760.843,1210.29 761.429,1210.46 762.016,1211.95 762.602,1212.13 763.189,1209.63 763.775,1209.41 764.361,1209.55 764.948,1209.84 765.534,1207.22 766.121,1208.78 766.707,1208.89 767.293,1207.54 767.88,1207.48 768.466,1206.02 769.053,1207.81 769.639,1210.73 770.226,1208.24 770.812,1208.61 771.398,1207.23 771.985,1206.19 772.571,1206.53 773.158,1205.44 773.744,1204.36 774.33,1203.48 774.917,1203.87 775.503,1205.84 776.09,1207.35 776.676,1208.83 777.262,1207.67 777.849,1204.05 778.435,1201.91 779.022,1202.65 779.608,1204.2 780.195,1206.22 780.781,1206.83 781.367,1207.25 781.954,1209.06 782.54,1206.61 783.127,1207.07 783.713,1206.27 784.299,1205.06 784.886,1204.36 785.472,1205.21 786.059,1205.51 786.645,1207.35 787.232,1206.28 787.818,1203.79 788.404,1204.47 788.991,1206.29 789.577,1205.29 790.164,1207.32 790.75,1210.68 791.336,1212.09 791.923,1213.3 792.509,1216.14 793.096,1216.24 793.682,1215.85 794.268,1215.45 794.855,1214.04 795.441,1212.6 796.028,1211.08 796.614,1213.78 797.201,1213.79 797.787,1213.56 798.373,1213.6 798.96,1213.34 799.546,1214.4 800.133,1214.26 800.719,1216.93 801.305,1217.89 801.892,1217.67 802.478,1217.72 803.065,1217.42 803.651,1217.48 804.237,1218.3 804.824,1217.85 805.41,1217.46 805.997,1215.6 806.583,1215.31 807.17,1214.59 807.756,1214.17 808.342,1212.99 808.929,1214.26 809.515,1214.31 810.102,1212.7 810.688,1212.83 811.274,1212.83 811.861,1215.34 812.447,1216.62 813.034,1217.59 813.62,1216.06 814.206,1217.08 814.793,1215.19 815.379,1214.84 815.966,1213.61 816.552,1210.84 817.139,1209.81 817.725,1210.19 818.311,1209.16 818.898,1209.38 819.484,1209.63 820.071,1209.78 820.657,1211.34 821.243,1208.8 821.83,1207.48 822.416,1206.24 823.003,1209.42 823.589,1209.39 824.175,1207.22 824.762,1208.8 825.348,1210.24 825.935,1211.62 826.521,1211.67 827.108,1214.48 827.694,1214.33 828.28,1214.43 828.867,1214.26 829.453,1214.29 830.04,1212.59 830.626,1212.64 831.212,1214.1 831.799,1216.68 832.385,1217.65 832.972,1217.2 833.558,1217.1 834.145,1214.29 834.731,1212.84 835.317,1215.49 835.904,1213.66 836.49,1213.33 837.077,1216.05 837.663,1215.52 838.249,1215.3 838.836,1214.89 839.422,1214.59 840.009,1215.69 840.595,1216.93 841.181,1218.17 841.768,1217.81 842.354,1218.85 842.941,1217.18 843.527,1216.98 844.114,1215.42 844.7,1215.38 845.286,1215.41 845.873,1217.63 846.459,1217.43 847.046,1217.48 847.632,1216.14 848.218,1215.78 848.805,1213.95 849.391,1213.58 849.978,1213.32 850.564,1213.22 851.15,1211.79 851.737,1212.96 852.323,1210.49 852.91,1210.7 853.496,1210.6 854.083,1207.75 854.669,1209.43 855.255,1210.82 855.842,1210.81 856.428,1209.3 857.015,1212.27 857.601,1213.68 858.187,1213.63 858.774,1213.41 859.36,1213.22 859.947,1213.47 860.533,1212 861.119,1209.12 861.706,1207.89 862.292,1210.66 862.879,1215.98 863.465,1217.22 864.052,1217.01 864.638,1217.91 865.224,1217.41 865.811,1217.32 866.397,1215.83 866.984,1215.5 867.57,1214.04 868.156,1215.38 868.743,1216.34 869.329,1217.39 869.916,1217.19 870.502,1215.57 871.089,1215.43 871.675,1216.59 872.261,1216.36 872.848,1217.25 873.434,1213 874.021,1213.07 874.607,1213.09 875.193,1211.53 875.78,1211.59 876.366,1210.1 876.953,1210.38 877.539,1207.56 878.125,1209.05 878.712,1206.38 879.298,1209.12 879.885,1208.94 880.471,1210.28 881.058,1211.75 881.644,1210.3 882.23,1207.5 882.817,1208.82 883.403,1207.66 883.99,1209.15 884.576,1213.43 885.162,1213.58 885.749,1212.2 886.335,1212.18 886.922,1211.15 887.508,1212.71 888.094,1214.1 888.681,1213.64 889.267,1213.5 889.854,1211.96 890.44,1213.24 891.027,1214.79 891.613,1213.08 892.199,1211.43 892.786,1211.58 893.372,1212.84 893.959,1215.22 894.545,1214.96 895.131,1215.87 895.718,1215.58 896.304,1215.19 896.891,1212.28 897.477,1212.02 898.063,1213.23 898.65,1213.12 899.236,1214.27 899.823,1212.72 900.409,1211.2 900.996,1211.45 901.582,1210.2 902.168,1207.4 902.755,1208.86 903.341,1207.77 903.928,1210.33 904.514,1208.78 905.1,1209.04 905.687,1213.29 906.273,1211.78 906.86,1214.32 907.446,1215.28 908.032,1213.8 908.619,1213.97 909.205,1215.08 909.792,1212.17 910.378,1209.15 910.965,1209.1 911.551,1209 912.137,1209.21 912.724,1210.47 913.31,1208.8 913.897,1207.69 914.483,1209.21 915.069,1210.39 915.656,1210.38 916.242,1210.34 916.829,1210.24 917.415,1208.89 918.002,1208.85 918.588,1208.94 919.174,1207.72 919.761,1207.76 920.347,1209.48 920.934,1209.6 921.52,1210.92 922.106,1210.89 922.693,1209.66 923.279,1211.05 923.866,1209.82 924.452,1210.02 925.038,1209.79 925.625,1207.03 926.211,1207.37 926.798,1210.09 927.384,1210.25 927.971,1211.72 928.557,1212.96 929.143,1210.12 929.73,1209.97 930.316,1208.64 930.903,1208.86 931.489,1207.73 932.075,1207.92 932.662,1209.57 933.248,1209.5 933.835,1209.65 934.421,1209.93 935.007,1208.89 935.594,1209.11 936.18,1202.4 936.767,1205.72 937.353,1206.07 937.94,1206.32 938.526,1206.68 939.112,1205.55 939.699,1205.85 940.285,1207.7 940.872,1209.1 941.458,1209.14 942.044,1209.62 942.631,1211.25 943.217,1210.1 943.804,1211.72 944.39,1210.54 944.976,1212.13 945.563,1214.86 946.149,1217.06 946.736,1216.59 947.322,1216.04 947.909,1215.79 948.495,1216.89 949.081,1216.48 949.668,1213.5 950.254,1212.06 950.841,1213.33 951.427,1214.76 952.013,1213.26 952.6,1211.73 953.186,1211.47 953.773,1211.87 954.359,1209.19 954.945,1209.59 955.532,1210.98 956.118,1209.62 956.705,1209.59 957.291,1208.45 957.878,1205.76 958.464,1207.35 959.05,1208.84 959.637,1206.21 960.223,1207.97 960.81,1209.48 961.396,1208.24 961.982,1208.13 962.569,1206.97 963.155,1207.25 963.742,1203.38 964.328,1203.91 964.915,1202.67 965.501,1202.72 966.087,1204.3 966.674,1206.03 967.26,1203.76 967.847,1206.85 968.433,1208.52 969.019,1208.66 969.606,1208.51 970.192,1208.64 970.779,1206.03 971.365,1205.16 971.951,1204.12 972.538,1205.74 973.124,1205.19 973.711,1206.95 974.297,1205.88 974.884,1207.9 975.47,1209.27 976.056,1210.85 976.643,1210.69 977.229,1209.26 977.816,1209.42 978.402,1210.74 978.988,1209.05 979.575,1211.58 980.161,1211.36 980.748,1213.89 981.334,1212.29 981.92,1214.78 982.507,1217.34 983.093,1217.14 983.68,1216.81 984.266,1217.75 984.853,1217.59 985.439,1213.15 986.025,1213.04 986.612,1215.9 987.198,1214.46 987.785,1212.97 988.371,1214.68 988.957,1213.23 989.544,1213.13 990.13,1214.38 990.717,1215.47 991.303,1215.35 991.889,1215.07 992.476,1218.59 993.062,1219.47 993.649,1217.49 994.235,1216.95 994.822,1220.94 995.408,1225.67 995.994,1222.05 996.581,1225.57 997.167,1224.45 997.754,1219.55 998.34,1219.02 998.926,1218.6 999.513,1218.06 1000.1,1216.18 1000.69,1218.57 1001.27,1218.3 1001.86,1216.7 1002.44,1217.6 1003.03,1217.17 1003.62,1218 1004.2,1217.29 1004.79,1214.16 1005.38,1215.13 1005.96,1214.65 1006.55,1217.21 1007.14,1216.94 1007.72,1213.9 1008.31,1213.63 1008.9,1213.54 1009.48,1210.75 1010.07,1209.55 1010.65,1213.63 1011.24,1216.01 1011.83,1215.57 1012.41,1212.68 1013,1212.32 1013.59,1213.34 1014.17,1213.21 1014.76,1211.6 1015.35,1210.26 1015.93,1210.4 1016.52,1210.6 1017.11,1210.52 1017.69,1211.85 1018.28,1210.73 1018.86,1212.13 1019.45,1210.57 1020.04,1210.57 1020.62,1211.81 1021.21,1209.04 1021.8,1209.13 1022.38,1209.33 1022.97,1207.85 1023.56,1209.43 1024.14,1208.3 1024.73,1207.11 1025.32,1208.69 1025.9,1208.98 1026.49,1208.72 1027.07,1206.27 1027.66,1203.77 1028.25,1205.84 1028.83,1202.16 1029.42,1202.7 1030.01,1204.39 1030.59,1204.65 1031.18,1207.51 1031.77,1207.51 1032.35,1207.43 1032.94,1208.9 1033.52,1207.7 1034.11,1209.24 1034.7,1211.98 1035.28,1208.95 1035.87,1209.11 1036.46,1211.62 1037.04,1213.89 1037.63,1213.83 1038.22,1215.15 1038.8,1213.53 1039.39,1215.92 1039.98,1215.88 1040.56,1218.42 1041.15,1219.24 1041.73,1217.27 1042.32,1215.65 1042.91,1214.01 1043.49,1212.39 1044.08,1209.33 1044.67,1207.75 1045.25,1207.85 1045.84,1213.65 1046.43,1213.37 1047.01,1213.15 1047.6,1210.15 1048.19,1208.79 1048.77,1211.74 1049.36,1213.12 1049.94,1208.74 1050.53,1207.41 1051.12,1204.95 1051.7,1206.5 1052.29,1210.77 1052.88,1208.05 1053.46,1206.93 1054.05,1207.45 1054.64,1206.26 1055.22,1206.39 1055.81,1202.3 1056.39,1200.1 1056.98,1199.14 1057.57,1198.75 1058.15,1197.75 1058.74,1198.34 1059.33,1199.01 1059.91,1198.5 1060.5,1197.88 1061.09,1199.98 1061.67,1196.47 1062.26,1196.91 1062.85,1196.33 1063.43,1196.93 1064.02,1197.69 1064.6,1199.68 1065.19,1199.01 1065.78,1199.9 1066.36,1200.87 1066.95,1201.21 1067.54,1203.98 1068.12,1204.38 1068.71,1203.24 1069.3,1201.95 1069.88,1200.98 1070.47,1201.63 1071.06,1202.4 1071.64,1205.31 1072.23,1204.6 1072.81,1206.48 1073.4,1209.29 1073.99,1209.24 1074.57,1207.8 1075.16,1209.48 1075.75,1211.24 1076.33,1212.85 1076.92,1211.46 1077.51,1211.41 1078.09,1208.58 1078.68,1210.06 1079.26,1210.13 1079.85,1211.42 1080.44,1212.62 1081.02,1212.42 1081.61,1212.31 1082.2,1210.94 1082.78,1209.54 1083.37,1208.24 1083.96,1206.76 1084.54,1206.85 1085.13,1208.52 1085.72,1209.89 1086.3,1208.79 1086.89,1208.88 1087.47,1209.08 1088.06,1209.12 1088.65,1209.37 1089.23,1209.31 1089.82,1209.36 1090.41,1209.61 1090.99,1209.86 1091.58,1211.04 1092.17,1213.87 1092.75,1212.39 1093.34,1209.44 1093.93,1210.76 1094.51,1210.78 1095.1,1210.49 1095.68,1210.44 1096.27,1211.57 1096.86,1212.77 1097.44,1214.01 1098.03,1215.05 1098.62,1213.26 1099.2,1211.93 1099.79,1211.99 1100.38,1213.22 1100.96,1211.54 1101.55,1214.01 1102.14,1216.57 1102.72,1214.89 1103.31,1213.44 1103.89,1213.3 1104.48,1211.88 1105.07,1210.38 1105.65,1208.15 1106.24,1208.15 1106.83,1206.63 1107.41,1206.63 1108,1208.15 1108.59,1209.7 1109.17,1210.79 1109.76,1212.3 1110.34,1212.17 1110.93,1212.03 1111.52,1211.99 1112.1,1215.84 1112.69,1218.15 1113.28,1217.59 1113.86,1219.83 1114.45,1216.34 1115.04,1215.65 1115.62,1218.02 1116.21,1213.8 1116.8,1214.96 1117.38,1211.89 1117.97,1213.19 1118.55,1213.17 1119.14,1214.37 1119.73,1212.65 1120.31,1211.07 1120.9,1210.76 1121.49,1206.53 1122.07,1209.24 1122.66,1209.43 1123.25,1206.6 1123.83,1205.34 1124.42,1206.61 1125.01,1210.7 1125.59,1211.84 1126.18,1211.36 1126.76,1211.24 1127.35,1210.99 1127.94,1210.85 1128.52,1210.81 1129.11,1206.85 1129.7,1205.49 1130.28,1208.44 1130.87,1209.48 1131.46,1205.5 1132.04,1206.86 1132.63,1205.83 1133.21,1206.23 1133.8,1210.56 1134.39,1212 1134.97,1212.25 1135.56,1213.64 1136.15,1214.56 1136.73,1216.82 1137.32,1215.06 1137.91,1215.12 1138.49,1213.61 1139.08,1210.84 1139.67,1209.49 1140.25,1209.61 1140.84,1207.89 1141.42,1208.15 1142.01,1209.74 1142.6,1204.19 1143.18,1200.59 1143.77,1202.4 1144.36,1204.1 1144.94,1205.73 1145.53,1207.29 1146.12,1207.36 1146.7,1206.2 1147.29,1206.62 1147.88,1207.17 1148.46,1210.29 1149.05,1211.62 1149.63,1208.87 1150.22,1207.77 1150.81,1210.68 1151.39,1210.68 1151.98,1210.46 1152.57,1210.4 1153.15,1210.27 1153.74,1211.41 1154.33,1211.25 1154.91,1212.61 1155.5,1212.73 1156.09,1209.77 1156.67,1212.86 1157.26,1213.77 1157.84,1213.61 1158.43,1215.91 1159.02,1217 1159.6,1215.29 1160.19,1217.88 1160.78,1222.87 1161.36,1219.34 1161.95,1214.62 1162.54,1215.74 1163.12,1213.84 1163.71,1213.9 1164.29,1209.62 1164.88,1209.72 1165.47,1211.09 1166.05,1212.37 1166.64,1213.28 1167.23,1213.23 1167.81,1214.48 1168.4,1212.98 1168.99,1212.87 1169.57,1212.45 1170.16,1216.17 1170.75,1218.39 1171.33,1217.6 1171.92,1214.33 1172.5,1212.73 1173.09,1216.56 1173.68,1214.64 1174.26,1214.02 1174.85,1211.21 1175.44,1209.96 1176.02,1209.69 1176.61,1209.65 1177.2,1210.85 1177.78,1209.71 1178.37,1208.22 1178.96,1204.44 1179.54,1202.06 1180.13,1201.21 1180.71,1201.52 1181.3,1201.79 1181.89,1203.35 1182.47,1203.57 1183.06,1205.24 1183.65,1205.43 1184.23,1206.93 1184.82,1209.65 1185.41,1208.39 1185.99,1206.72 1186.58,1207.03 1187.16,1206.96 1187.75,1209.61 1188.34,1208.48 1188.92,1207 1189.51,1207.37 1190.1,1208.78 1190.68,1208.94 1191.27,1206.24 1191.86,1206.36 1192.44,1207.91 1193.03,1209.19 1193.62,1209.3 1194.2,1208.31 1194.79,1206.89 1195.37,1205.91 1195.96,1207.49 1196.55,1209 1197.13,1207.81 1197.72,1206.47 1198.31,1209.57 1198.89,1213.53 1199.48,1214.72 1200.07,1212.84 1200.65,1211.1 1201.24,1209.54 1201.83,1209.53 1202.41,1212.22 1203,1213.29 1203.58,1214.36 1204.17,1214.07 1204.76,1215.29 1205.34,1215.33 1205.93,1215.1 1206.52,1213.43 1207.1,1212.34 1207.69,1212.15 1208.28,1209.61 1208.86,1208.13 1209.45,1206.85 1210.03,1206.96 1210.62,1208.63 1211.21,1208.93 1211.79,1209.05 1212.38,1205.27 1212.97,1202.68 1213.55,1199.04 1214.14,1199.69 1214.73,1200.34 1215.31,1201.94 1215.9,1199.69 1216.49,1197.29 1217.07,1196.62 1217.66,1197.21 1218.24,1197.96 1218.83,1199.81 1219.42,1200.52 1220,1200.66 1220.59,1201.11 1221.18,1202.91 1221.76,1200.61 1222.35,1201.19 1222.94,1203.16 1223.52,1203.6 1224.11,1206.67 1224.7,1207.2 1225.28,1206.07 1225.87,1209.03 1226.45,1209.45 1227.04,1210.92 1227.63,1212.12 1228.21,1214.75 1228.8,1217.27 1229.39,1218.15 1229.97,1219.17 1230.56,1221.53 1231.15,1221.27 1231.73,1218.24 1232.32,1217.98 1232.91,1216.23 1233.49,1214.73 1234.08,1213.08 1234.66,1212.73 1235.25,1210.98 1235.84,1212.27 1236.42,1213.49 1237.01,1213.36 1237.6,1210.61 1238.18,1212.12 1238.77,1210.92 1239.36,1208.27 1239.94,1207.16 1240.53,1208.73 1241.11,1206.34 1241.7,1207.8 1242.29,1205.54 1242.87,1205.76 1243.46,1204.91 1244.05,1207.61 1244.63,1209.32 1245.22,1210.46 1245.81,1211.56 1246.39,1210.01 1246.98,1210.01 1247.57,1211.13 1248.15,1210.9 1248.74,1210.56 1249.32,1207.79 1249.91,1203.94 1250.5,1202.79 1251.08,1201.91 1251.67,1202.3 1252.26,1203.74 1252.84,1206.58 1253.43,1208.13 1254.02,1209.54 1254.6,1208.28 1255.19,1209.59 1255.78,1208.61 1256.36,1206.16 1256.95,1207.66 1257.53,1211.91 1258.12,1210.51 1258.71,1211.97 1259.29,1216.16 1259.88,1214.4 1260.47,1217.99 1261.05,1216.5 1261.64,1213.98 1262.23,1211.03 1262.81,1205.41 1263.4,1205.54 1263.98,1207.08 1264.57,1207.34 1265.16,1206 1265.74,1208.86 1266.33,1208.75 1266.92,1210.24 1267.5,1208.95 1268.09,1208.61 1268.68,1208.8 1269.26,1211.54 1269.85,1211.47 1270.44,1212.85 1271.02,1212.94 1271.61,1212.69 1272.19,1216.3 1272.78,1214.34 1273.37,1215.65 1273.95,1215.52 1274.54,1216.33 1275.13,1217.16 1275.71,1216.88 1276.3,1216.58 1276.89,1217.26 1277.47,1215.72 1278.06,1214.14 1278.65,1210.98 1279.23,1212.1 1279.82,1209.42 1280.4,1209.71 1280.99,1212.45 1281.58,1213.45 1282.16,1216.09 1282.75,1212.87 1283.34,1215.73 1283.92,1215.37 1284.51,1216.15 1285.1,1215.64 1285.68,1216.38 1286.27,1213.41 1286.86,1213.02 1287.44,1212.6 1288.03,1212.26 1288.61,1214.81 1289.2,1211.58 1289.79,1209.92 1290.37,1208.71 1290.96,1207.12 1291.55,1208.75 1292.13,1208.78 1292.72,1213.04 1293.31,1214.33 1293.89,1214.15 1294.48,1215.08 1295.06,1214.7 1295.65,1213.3 1296.24,1213.26 1296.82,1214.69 1297.41,1214.54 1298,1211.74 1298.58,1210.27 1299.17,1211.49 1299.76,1211.21 1300.34,1213.87 1300.93,1209.84 1301.52,1210.24 1302.1,1208.64 1302.69,1213.98 1303.27,1214.96 1303.86,1213.21 1304.45,1213.21 1305.03,1214.01 1305.62,1213.57 1306.21,1213.22 1306.79,1211.48 1307.38,1215.17 1307.97,1213.45 1308.55,1213.13 1309.14,1211.72 1309.73,1211.79 1310.31,1209.15 1310.9,1209.1 1311.48,1207.79 1312.07,1210.64 1312.66,1211.68 1313.24,1214.21 1313.83,1213.8 1314.42,1215.17 1315,1216.06 1315.59,1218.48 1316.18,1219.55 1316.76,1221.59 1317.35,1218.37 1317.93,1219.09 1318.52,1218.58 1319.11,1215.36 1319.69,1216.57 1320.28,1216.15 1320.87,1216.83 1321.45,1216.19 1322.04,1213.03 1322.63,1214.47 1323.21,1214.56 1323.8,1211.62 1324.39,1211.75 1324.97,1211.66 1325.56,1211.82 1326.14,1210.15 1326.73,1211.58 1327.32,1207.58 1327.9,1210.23 1328.49,1209.91 1329.08,1208.73 1329.66,1208.79 1330.25,1207.55 1330.84,1207.46 1331.42,1206.3 1332.01,1206.53 1332.6,1207.88 1333.18,1207.97 1333.77,1207.89 1334.35,1209.39 1334.94,1203.88 1335.53,1202.53 1336.11,1198.84 1336.7,1198.08 1337.29,1197.12 1337.87,1197.74 1338.46,1197.15 1339.05,1201.93 1339.63,1201.05 1340.22,1198.96 1340.8,1197.93 1341.39,1199.96 1341.98,1201.88 1342.56,1201.33 1343.15,1203.41 1343.74,1205.08 1344.32,1202.48 1344.91,1204.09 1345.5,1203.37 1346.08,1203.66 1346.67,1205.29 1347.26,1202.83 1347.84,1201.74 1348.43,1202.19 1349.01,1201.25 1349.6,1200.21 1350.19,1204.93 1350.77,1203.65 1351.36,1205.68 1351.95,1204.36 1352.53,1204.83 1353.12,1204.93 1353.71,1207.81 1354.29,1210.62 1354.88,1210.58 1355.47,1209.13 1356.05,1209.3 1356.64,1207.19 1357.22,1207.33 1357.81,1204.82 1358.4,1203.85 1358.98,1207.87 1359.57,1207.76 1360.16,1207.85 1360.74,1208.29 1361.33,1212.35 1361.92,1213.52 1362.5,1213.48 1363.09,1211.94 1363.68,1210.65 1364.26,1212.1 1364.85,1210.64 1365.43,1210.66 1366.02,1210.71 1366.61,1213.39 1367.19,1211.53 1367.78,1211.12 1368.37,1209.64 1368.95,1206.89 1369.54,1206.8 1370.13,1204.13 1370.71,1205.91 1371.3,1210.28 1371.88,1209.51 1372.47,1209.55 1373.06,1207.99 1373.64,1207.75 1374.23,1207.97 1374.82,1207.65 1375.4,1206.1 1375.99,1208.98 1376.58,1208.9 1377.16,1210.48 1377.75,1210.44 1378.34,1211.43 1378.92,1210 1379.51,1207.16 1380.09,1208.41 1380.68,1206.98 1381.27,1207.09 1381.85,1208.62 1382.44,1207.19 1383.03,1206.04 1383.61,1207.42 1384.2,1208.82 1384.79,1208.78 1385.37,1210.09 1385.96,1211.45 1386.55,1214.29 1387.13,1211.4 1387.72,1212.82 1388.3,1212.84 1388.89,1210.98 1389.48,1209.47 1390.06,1210.76 1390.65,1210.48 1391.24,1210.64 1391.82,1205.04 1392.41,1201.36 1393,1203.51 1393.58,1203.69 1394.17,1206.82 1394.75,1206.52 1395.34,1205.47 1395.93,1202.89 1396.51,1201.86 1397.1,1203.64 1397.69,1206.64 1398.27,1206.5 1398.86,1206.38 1399.45,1208.09 1400.03,1209.43 1400.62,1210.99 1401.21,1214.92 1401.79,1214.7 1402.38,1214.46 1402.96,1214.43 1403.55,1215.98 1404.14,1216.89 1404.72,1217.77 1405.31,1214.62 1405.9,1212.83 1406.48,1212.69 1407.07,1212.3 1407.66,1213.2 1408.24,1212.98 1408.83,1212.94 1409.42,1214.02 1410,1216.43 1410.59,1216.1 1411.17,1214.32 1411.76,1211.28 1412.35,1209.96 1412.93,1208.58 1413.52,1208.62 1414.11,1208.5 1414.69,1209.83 1415.28,1209.77 1415.87,1212.66 1416.45,1208.72 1417.04,1210.17 1417.63,1208.76 1418.21,1211.88 1418.8,1211.36 1419.38,1209.81 1419.97,1208.58 1420.56,1208.47 1421.14,1212.7 1421.73,1212.38 1422.32,1209.46 1422.9,1208.29 1423.49,1208.26 1424.08,1208.48 1424.66,1208.76 1425.25,1208.51 1425.83,1209.92 1426.42,1214.16 1427.01,1212.33 1427.59,1210.89 1428.18,1209.46 1428.77,1212.18 1429.35,1212.1 1429.94,1214.49 1430.53,1212.66 1431.11,1209.82 1431.7,1207.49 1432.29,1209.08 1432.87,1210.43 1433.46,1211.91 1434.04,1214.31 1434.63,1211.12 1435.22,1212.35 1435.8,1213.35 1436.39,1214.44 1436.98,1215.81 1437.56,1215.47 1438.15,1217.78 1438.74,1210.59 1439.32,1210.38 1439.91,1209.19 1440.5,1209.33 1441.08,1209.31 1441.67,1209.24 1442.25,1209.27 1442.84,1211.8 1443.43,1212.83 1444.01,1212.54 1444.6,1213.68 1445.19,1213.41 1445.77,1216.19 1446.36,1218.54 1446.95,1218.12 1447.53,1214.91 1448.12,1214.48 1448.7,1210.16 1449.29,1207.97 1449.88,1206.69 1450.46,1205.66 1451.05,1207.33 1451.64,1207.7 1452.22,1206.67 1452.81,1204.1 1453.4,1204.19 1453.98,1207.37 1454.57,1209.09 1455.16,1209.14 1455.74,1206.42 1456.33,1207.11 1456.91,1205.77 1457.5,1207.29 1458.09,1210.26 1458.67,1210.39 1459.26,1209.12 1459.85,1207.5 1460.43,1207.49 1461.02,1203.57 1461.61,1202.4 1462.19,1202.64 1462.78,1203.18 1463.37,1205.14 1463.95,1204.19 1464.54,1205.89 1465.12,1206.4 1465.71,1208.15 1466.3,1207.06 1466.88,1207.46 1467.47,1208.68 1468.06,1208.66 1468.64,1207.44 1469.23,1207.39 1469.82,1206.37 1470.4,1206.43 1470.99,1209.32 1471.57,1210.57 1472.16,1214.38 1472.75,1215.35 1473.33,1215.11 1473.92,1213.46 1474.51,1212.07 1475.09,1212.08 1475.68,1216 1476.27,1214.46 1476.85,1214.09 1477.44,1210.99 1478.03,1212.44 1478.61,1213.67 1479.2,1216.05 1479.78,1218.52 1480.37,1216.65 1480.96,1217.79 1481.54,1217.45 1482.13,1218.13 1482.72,1220.48 1483.3,1218.72 1483.89,1218.05 1484.48,1218.56 1485.06,1219.1 1485.65,1220.12 1486.24,1220.79 1486.82,1220.29 1487.41,1222.54 1487.99,1220.52 1488.58,1218.79 1489.17,1218.41 1489.75,1222.03 1490.34,1224.01 1490.93,1227.29 1491.51,1223.58 1492.1,1221.7 1492.69,1218.48 1493.27,1218.2 1493.86,1216.53 1494.45,1216.45 1495.03,1214.67 1495.62,1213.27 1496.2,1210.43 1496.79,1211.96 1497.38,1214.56 1497.96,1214.1 1498.55,1214.09 1499.14,1213.92 1499.72,1213.68 1500.31,1212.02 1500.9,1211.62 1501.48,1208.81 1502.07,1209.32 1502.65,1211.9 1503.24,1211.71 1503.83,1208.74 1504.41,1208.95 1505,1210.57 1505.59,1210.72 1506.17,1210.42 1506.76,1213.07 1507.35,1211.42 1507.93,1212.55 1508.52,1212.7 1509.11,1209.82 1509.69,1208.48 1510.28,1207.01 1510.86,1208.16 1511.45,1205.39 1512.04,1205.67 1512.62,1204.74 1513.21,1203.91 1513.8,1205.59 1514.38,1206.97 1514.97,1205.65 1515.56,1206.17 1516.14,1207.59 1516.73,1205.27 1517.32,1204.26 1517.9,1202.97 1518.49,1200.6 1519.07,1202.42 1519.66,1204.33 1520.25,1204.55 1520.83,1206.3 1521.42,1204.14 1522.01,1207.08 1522.59,1208.46 1523.18,1209.66 1523.77,1212.3 1524.35,1213.5 1524.94,1213.25 1525.52,1209.09 1526.11,1211.85 1526.7,1210.23 1527.28,1210.34 1527.87,1210.4 1528.46,1209.13 1529.04,1209.16 1529.63,1209.29 1530.22,1210.36 1530.8,1209.16 1531.39,1209.17 1531.98,1207.97 1532.56,1209.18 1533.15,1209.28 1533.73,1210.74 1534.32,1210.45 1534.91,1206.49 1535.49,1208.04 1536.08,1208.23 1536.67,1207.03 1537.25,1204.38 1537.84,1206.17 1538.43,1207.63 1539.01,1209.04 1539.6,1207.71 1540.19,1207.92 1540.77,1205.4 1541.36,1205.56 1541.94,1204.43 1542.53,1206.32 1543.12,1207.14 1543.7,1207.28 1544.29,1207.52 1544.88,1206.04 1545.46,1207.7 1546.05,1209.35 1546.64,1210.75 1547.22,1212.01 1547.81,1212.98 1548.4,1210.18 1548.98,1210.19 1549.57,1211.46 1550.15,1214.27 1550.74,1212.56 1551.33,1212.19 1551.91,1213.26 1552.5,1214.58 1553.09,1211.83 1553.67,1211.6 1554.26,1210.18 1554.85,1208.8 1555.43,1206.11 1556.02,1207.59 1556.6,1206.7 1557.19,1208.24 1557.78,1205.76 1558.36,1204.88 1558.95,1202.58 1559.54,1201.82 1560.12,1203.72 1560.71,1202.53 1561.3,1201.6 1561.88,1199.8 1562.47,1198.78 1563.06,1200.53 1563.64,1201.3 1564.23,1203.32 1564.81,1203.66 1565.4,1202.73 1565.99,1203.17 1566.57,1204.98 1567.16,1207.91 1567.75,1209.57 1568.33,1209.7 1568.92,1212.5 1569.51,1208.44 1570.09,1211.08 1570.68,1212.49 1571.27,1210.85 1571.85,1213.86 1572.44,1212.36 1573.02,1213.69 1573.61,1212.39 1574.2,1212.31 1574.78,1211.96 1575.37,1213.24 1575.96,1214.45 1576.54,1214.29 1577.13,1213.98 1577.72,1215.31 1578.3,1217.72 1578.89,1215.56 1579.47,1216.28 1580.06,1213.06 1580.65,1213.03 1581.23,1211.59 1581.82,1212.97 1582.41,1212.81 1582.99,1212.76 1583.58,1211.09 1584.17,1212.36 1584.75,1213.16 1585.34,1212.87 1585.93,1211.34 1586.51,1211.3 1587.1,1212.66 1587.68,1211 1588.27,1210.93 1588.86,1206.65 1589.44,1210.87 1590.03,1212.03 1590.62,1209.59 1591.2,1206.65 1591.79,1210.41 1592.38,1206.23 1592.96,1203.67 1593.55,1205.47 1594.14,1205.63 1594.72,1207.3 1595.31,1210.16 1595.89,1209.96 1596.48,1210.19 1597.07,1209 1597.65,1210.28 1598.24,1210.41 1598.83,1209.08 1599.41,1209.06 1600,1211.63 1600.59,1211.66 1601.17,1210.26 1601.76,1210.3 1602.34,1211.37 1602.93,1212.51 1603.52,1216.44 1604.1,1217.28 1604.69,1215.48 1605.28,1215.04 1605.86,1215.95 1606.45,1217.17 1607.04,1216.79 1607.62,1216.55 1608.21,1212.29 1608.8,1211.85 1609.38,1213.08 1609.97,1208.92 1610.55,1214.3 1611.14,1214.03 1611.73,1215.06 1612.31,1214.95 1612.9,1214.77 1613.49,1213.04 1614.07,1210.19 1614.66,1211.79 1615.25,1211.74 1615.83,1211.48 1616.42,1211.57 1617.01,1212.86 1617.59,1211.28 1618.18,1211.06 1618.76,1212.01 1619.35,1210.51 1619.94,1213.31 1620.52,1214.56 1621.11,1214.55 1621.7,1214.48 1622.28,1212.93 1622.87,1214.2 1623.46,1215.65 1624.04,1216.59 1624.63,1218.89 1625.22,1215.3 1625.8,1212.08 1626.39,1210.17 1626.97,1208.42 1627.56,1205.69 1628.15,1204.42 1628.73,1205.9 1629.32,1205.89 1629.91,1204.38 1630.49,1205.66 1631.08,1204.39 1631.67,1205.96 1632.25,1205.95 1632.84,1204.71 1633.42,1206.18 1634.01,1202.12 1634.6,1199.78 1635.18,1198.93 1635.77,1200.9 1636.36,1202.67 1636.94,1204.22 1637.53,1203.05 1638.12,1203.21 1638.7,1201.02 1639.29,1201.47 1639.88,1204.51 1640.46,1204.9 1641.05,1205.4 1641.63,1202.94 1642.22,1207.42 1642.81,1207.37 1643.39,1210.22 1643.98,1207.43 1644.57,1208.87 1645.15,1207.71 1645.74,1207.78 1646.33,1210.54 1646.91,1211.62 1647.5,1211.56 1648.09,1211.62 1648.67,1211.5 1649.26,1210.06 1649.84,1210.27 1650.43,1208.83 1651.02,1208.99 1651.6,1209.51 1652.19,1212.27 1652.78,1210.96 1653.36,1213.78 1653.95,1215.3 1654.54,1214.95 1655.12,1216.18 1655.71,1214.56 1656.29,1211.66 1656.88,1211.87 1657.47,1213.19 1658.05,1211.76 1658.64,1212.9 1659.23,1212.75 1659.81,1209.78 1660.4,1208.57 1660.99,1208.79 1661.57,1211.89 1662.16,1214.59 1662.75,1212.79 1663.33,1212.63 1663.92,1212.41 1664.5,1212.11 1665.09,1213.43 1665.68,1211.85 1666.26,1211.58 1666.85,1208.63 1667.44,1208.64 1668.02,1208.6 1668.61,1210.07 1669.2,1210.2 1669.78,1207.52 1670.37,1207.54 1670.96,1207.74 1671.54,1208.13 1672.13,1209.43 1672.71,1208.03 1673.3,1208.21 1673.89,1208.24 1674.47,1208.36 1675.06,1207.28 1675.65,1209.8 1676.23,1208.54 1676.82,1207.22 1677.41,1207.5 1677.99,1207.34 1678.58,1208.79 1679.17,1209.1 1679.75,1211.84 1680.34,1211.51 1680.92,1211.24 1681.51,1208.56 1682.1,1210.18 1682.68,1212.98 1683.27,1211.59 1683.86,1210.17 1684.44,1211.19 1685.03,1205.82 1685.62,1208.49 1686.2,1204.49 1686.79,1204.57 1687.37,1206.15 1687.96,1204.97 1688.55,1207.73 1689.13,1207.71 1689.72,1209.23 1690.31,1208.94 1690.89,1207.28 1691.48,1206.07 1692.07,1208.87 1692.65,1208.77 1693.24,1209.07 1693.83,1208.95 1694.41,1206.23 1695,1208.08 1695.58,1206.63 1696.17,1206.84 1696.76,1207.1 1697.34,1208.72 1697.93,1209.17 1698.52,1209.11 1699.1,1207.92 1699.69,1205.04 1700.28,1209.42 1700.86,1209.47 1701.45,1208.21 1702.04,1209.63 1702.62,1209.61 1703.21,1208.13 1703.79,1214.99 1704.38,1216.12 1704.97,1217.06 1705.55,1215.5 1706.14,1210.99 1706.73,1213.34 1707.31,1213.07 1707.9,1212.73 1708.49,1212.4 1709.07,1212.12 1709.66,1210.66 1710.24,1210.87 1710.83,1210.5 1711.42,1210.51 1712,1209.11 1712.59,1209.36 1713.18,1205.02 1713.76,1206.77 1714.35,1208.73 1714.94,1207.66 1715.52,1210.33 1716.11,1207.79 1716.7,1207.75 1717.28,1208.01 1717.87,1209.32 1718.45,1209.12 1719.04,1209.28 1719.63,1207.89 1720.21,1205.1 1720.8,1206.48 1721.39,1207.78 1721.97,1207.67 1722.56,1203.58 1723.15,1204.03 1723.73,1204.22 1724.32,1209.61 1724.91,1212.57 1725.49,1209.99 1726.08,1211.49 1726.66,1212.51 1727.25,1211.18 1727.84,1211.26 1728.42,1211.24 1729.01,1208.43 1729.6,1209.77 1730.18,1212.38 1730.77,1209.27 1731.36,1209.45 1731.94,1209.43 1732.53,1209.59 1733.11,1207.97 1733.7,1206.71 1734.29,1206.84 1734.87,1207.17 1735.46,1204.46 1736.05,1203.22 1736.63,1202.34 1737.22,1202.56 1737.81,1202.86 1738.39,1204.21 1738.98,1205.84 1739.57,1206.1 1740.15,1202.11 1740.74,1203.67 1741.32,1202.86 1741.91,1204.68 1742.5,1202.48 1743.08,1203.91 1743.67,1205.43 1744.26,1205.75 1744.84,1207.52 1745.43,1210.82 1746.02,1212.06 1746.6,1213.3 1747.19,1213.26 1747.78,1213.93 1748.36,1212.56 1748.95,1213.83 1749.53,1216.63 1750.12,1216.58 1750.71,1217.09 1751.29,1212.65 1751.88,1212.51 1752.47,1210.98 1753.05,1212.38 1753.64,1213.51 1754.23,1206.58 1754.81,1206.58 1755.4,1209.32 1755.99,1206.76 1756.57,1205.56 1757.16,1206.11 1757.74,1204.73 1758.33,1206.26 1758.92,1203.58 1759.5,1205.25 1760.09,1204.09 1760.68,1205.76 1761.26,1204.79 1761.85,1204.95 1762.44,1206.47 1763.02,1208.12 1763.61,1207.03 1764.19,1208.28 1764.78,1206.93 1765.37,1207.14 1765.95,1208.9 1766.54,1208.92 1767.13,1211.71 1767.71,1211.94 1768.3,1210.7 1768.89,1212.12 1769.47,1206.73 1770.06,1205.99 1770.65,1205 1771.23,1203.86 1771.82,1205.59 1772.4,1207.25 1772.99,1209 1773.58,1207.7 1774.16,1207.8 1774.75,1207.83 1775.34,1204.09 1775.92,1205.73 1776.51,1207.44 1777.1,1210.27 1777.68,1212.92 1778.27,1212.91 1778.86,1212.88 1779.44,1214.14 1780.03,1212.7 1780.61,1211.26 1781.2,1212.23 1781.79,1213.31 1782.37,1214.56 1782.96,1212.79 1783.55,1212.66 1784.13,1212.69 1784.72,1212.44 1785.31,1215.35 1785.89,1215.18 1786.48,1214.93 1787.06,1217.46 1787.65,1215.59 1788.24,1215.28 1788.82,1218.8 1789.41,1218.11 1790,1218.81 1790.58,1218.51 1791.17,1216.69 1791.76,1216.17 1792.34,1220.14 1792.93,1219.73 1793.52,1222.1 1794.1,1222.63 1794.69,1217.71 1795.27,1215.95 1795.86,1214.37 1796.45,1212.97 1797.03,1211.38 1797.62,1209.74 1798.21,1209.71 1798.79,1212.11 1799.38,1210.58 1799.97,1209.54 1800.55,1209.42 1801.14,1209.32 1801.73,1210.69 1802.31,1211.76 1802.9,1212.71 1803.48,1212.5 1804.07,1213.76 1804.66,1213.54 1805.24,1214.48 1805.83,1211.51 1806.42,1211.48 1807,1212.83 1807.59,1213.97 1808.18,1212.16 1808.76,1208.08 1809.35,1208.19 1809.94,1207.03 1810.52,1208.51 1811.11,1208.48 1811.69,1208.55 1812.28,1207.06 1812.87,1204.49 1813.45,1207.77 1814.04,1205.19 1814.63,1208.01 1815.21,1206.82 1815.8,1205.79 1816.39,1204.83 1816.97,1206.37 1817.56,1206.65 1818.14,1207.96 1818.73,1209.35 1819.32,1209.33 1819.9,1208 1820.49,1209.12 1821.08,1207.75 1821.66,1209.09 1822.25,1208.97 1822.84,1204.99 1823.42,1202.74 1824.01,1203.12 1824.6,1206.07 1825.18,1204.95 1825.77,1205.27 1826.35,1205.82 1826.94,1204.5 1827.53,1204.79 1828.11,1204.69 1828.7,1202.46 1829.29,1202.87 1829.87,1203.25 1830.46,1199.32 1831.05,1198.74 1831.63,1199.33 1832.22,1198.73 1832.81,1199.31 1833.39,1201.2 1833.98,1202.91 1834.56,1202.08 1835.15,1203.76 1835.74,1205.24 1836.32,1208.12 1836.91,1207.97 1837.5,1206.68 1838.08,1205.2 1838.67,1207.89 1839.26,1209.01 1839.84,1214.39 1840.43,1216.57 1841.01,1215.06 1841.6,1216.37 1842.19,1213.52 1842.77,1212.17 1843.36,1214.93 1843.95,1216.06 1844.53,1216.95 1845.12,1217.72 1845.71,1216.46 1846.29,1217.71 1846.88,1219.85 1847.47,1219.03 1848.05,1219.85 1848.64,1219.23 1849.22,1218.54 1849.81,1216.59 1850.4,1217.18 1850.98,1214.06 1851.57,1215.38 1852.16,1216.64 1852.74,1216.01 1853.33,1214.2 1853.92,1215.08 1854.5,1212.13 1855.09,1208.13 1855.68,1206.82 1856.26,1205.33 1856.85,1203.21 1857.43,1201.92 1858.02,1201.14 1858.61,1204.56 1859.19,1204.78 1859.78,1202.32 1860.37,1202.92 1860.95,1202.03 1861.54,1201.07 1862.13,1202.81 1862.71,1204.53 1863.3,1202.18 1863.88,1202.27 1864.47,1202.52 1865.06,1204.33 1865.64,1205.84 1866.23,1208.53 1866.82,1211.13 1867.4,1210.94 1867.99,1212.19 1868.58,1211.98 1869.16,1211.51 1869.75,1214.32 1870.34,1212.84 1870.92,1212.65 1871.51,1213.65 1872.09,1210.61 1872.68,1210.39 1873.27,1210.04 1873.85,1207.19 1874.44,1210.23 1875.03,1207.67 1875.61,1210.41 1876.2,1210.28 1876.79,1210.07 1877.37,1211.66 1877.96,1210.18 1878.55,1213 1879.13,1210.08 1879.72,1208.91 1880.3,1211.66 1880.89,1212.74 1881.48,1212.47 1882.06,1213.65 1882.65,1214.79 1883.24,1210.57 1883.82,1211.87 1884.41,1210.74 1885,1212 1885.58,1212.75 1886.17,1211.08 1886.76,1210.9 1887.34,1210.78 1887.93,1213.17 1888.51,1212.94 1889.1,1213.02 1889.69,1215.29 1890.27,1213.56 1890.86,1211.68 1891.45,1212.8 1892.03,1212.68 1892.62,1211.16 1893.21,1210.81 1893.79,1209.52 1894.38,1206.83 1894.96,1207.1 1895.55,1207.45 1896.14,1208.92 1896.72,1208.74 1897.31,1207.57 1897.9,1206.58 1898.48,1203.77 1899.07,1203.75 1899.66,1205.26 1900.24,1204.28 1900.83,1201.77 1901.42,1200.69 1902,1205.16 1902.59,1205.3 1903.17,1205.58 1903.76,1205.61 1904.35,1204.35 1904.93,1203.26 1905.52,1203.76 1906.11,1204.02 1906.69,1205.74 1907.28,1206.04 1907.87,1206.19 1908.45,1207.99 1909.04,1207.63 1909.63,1206.33 1910.21,1208.05 1910.8,1208.49 1911.38,1211.34 1911.97,1212.9 1912.56,1212.69 1913.14,1212.53 1913.73,1213.91 1914.32,1209.5 1914.9,1206.82 1915.49,1206.92 1916.08,1209.55 1916.66,1209.48 1917.25,1206.63 1917.83,1203.71 1918.42,1205.42 1919.01,1204.32 1919.59,1204.81 1920.18,1208.08 1920.77,1208.27 1921.35,1206.97 1921.94,1208.66 1922.53,1207.54 1923.11,1204.9 1923.7,1203.66 1924.29,1206.62 1924.87,1208.33 1925.46,1212.33 1926.04,1210.54 1926.63,1210.67 1927.22,1209.07 1927.8,1208.9 1928.39,1210.41 1928.98,1209.24 1929.56,1209.56 1930.15,1210.74 1930.74,1209.43 1931.32,1210.56 1931.91,1207.91 1932.5,1202.64 1933.08,1204.26 1933.67,1203.09 1934.25,1203.5 1934.84,1205.29 1935.43,1202.95 1936.01,1203.25 1936.6,1201.99 1937.19,1205.41 1937.77,1204.44 1938.36,1203.08 1938.95,1205.05 1939.53,1206.69 1940.12,1204.15 1940.71,1205.82 1941.29,1204.74 1941.88,1206.45 1942.46,1204.13 1943.05,1210.19 1943.64,1207.55 1944.22,1209.06 1944.81,1211.97 1945.4,1209.21 1945.98,1207.92 1946.57,1209.41 1947.16,1211.02 1947.74,1209.56 1948.33,1211.01 1948.91,1210.92 1949.5,1215.02 1950.09,1214.59 1950.67,1212.96 1951.26,1214.08 1951.85,1212.65 1952.43,1212.49 1953.02,1213.55 1953.61,1213.45 1954.19,1210.74 1954.78,1209.13 1955.37,1208.09 1955.95,1208.17 1956.54,1207.19 1957.12,1210.03 1957.71,1204.76 1958.3,1202.55 1958.88,1205.37 1959.47,1205.59 1960.06,1205.83 1960.64,1205.92 1961.23,1208.69 1961.82,1209.84 1962.4,1207.16 1962.99,1205.67 1963.58,1208.46 1964.16,1208.82 1964.75,1214.3 1965.33,1211.32 1965.92,1210.93 1966.51,1208.15 1967.09,1208.37 1967.68,1208.35 1968.27,1209.69 1968.85,1209.79 1969.44,1208.38 1970.03,1208.41 1970.61,1207.16 1971.2,1209.9 1971.78,1205.7 1972.37,1205.75 1972.96,1207.39 1973.54,1206.14 1974.13,1209.13 1974.72,1209.22 1975.3,1209.17 1975.89,1210.67 1976.48,1210.45 1977.06,1211.58 1977.65,1210.08 1978.24,1208.92 1978.82,1207.45 1979.41,1209.93 1979.99,1213.95 1980.58,1212.34 1981.17,1210.08 1981.75,1208.76 1982.34,1209.17 1982.93,1209.63 1983.51,1210.04 1984.1,1210.13 1984.69,1209.99 1985.27,1210.02 1985.86,1210.11 1986.45,1208.85 1987.03,1209.22 1987.62,1211.95 1988.2,1211.84 1988.79,1214 1989.38,1213.6 1989.96,1212.22 1990.55,1210.74 1991.14,1212.17 1991.72,1213.67 1992.31,1212.18 1992.9,1214.82 1993.48,1214.72 1994.07,1214.67 1994.65,1213.16 1995.24,1212.99 1995.83,1208.5 1996.41,1207.3 1997,1208.85 1997.59,1210.04 1998.17,1211.38 1998.76,1208.41 1999.35,1208.39 1999.93,1209.73 2000.52,1209.48 2001.11,1212.05 2001.69,1212 2002.28,1210.56 2002.86,1211.63 2003.45,1211.21 2004.04,1208.48 2004.62,1208.52 2005.21,1206.92 2005.8,1202.97 2006.38,1204.66 2006.97,1203.46 2007.56,1202.16 2008.14,1204.22 2008.73,1202.85 2009.32,1200.45 2009.9,1205.1 2010.49,1205.14 2011.07,1208.38 2011.66,1205.83 2012.25,1204.61 2012.83,1205.12 2013.42,1205.33 2014.01,1206.89 2014.59,1206.81 2015.18,1206.72 2015.77,1206.97 2016.35,1205.64 2016.94,1204.47 2017.53,1204.78 2018.11,1203.69 2018.7,1199.84 2019.28,1196.67 2019.87,1198.62 2020.46,1200.63 2021.04,1203.92 2021.63,1203.14 2022.22,1203.56 2022.8,1205.58 2023.39,1207.14 2023.98,1207.43 2024.56,1210.25 2025.15,1210.12 2025.73,1212.57 2026.32,1213.62 2026.91,1216.09 2027.49,1215.52 2028.08,1216.42 2028.67,1217.35 2029.25,1215.59 2029.84,1215.37 2030.43,1216.68 2031.01,1214.98 2031.6,1215.89 2032.19,1214.18 2032.77,1218.11 2033.36,1213.54 2033.94,1213.29 2034.53,1215.88 2035.12,1214.17 2035.7,1214.14 2036.29,1214.01 2036.88,1216.38 2037.46,1214.47 2038.05,1217.11 2038.64,1216.88 2039.22,1217.62 2039.81,1216.8 2040.4,1215.23 2040.98,1213.78 2041.57,1209.32 2042.15,1209.14 2042.74,1210.67 2043.33,1210.5 2043.91,1214.43 2044.5,1211.28 2045.09,1212.67 2045.67,1215.07 2046.26,1216.13 2046.85,1216.92 2047.43,1219.27 2048.02,1218.42 2048.6,1223.24 2049.19,1221.18 2049.78,1220.5 2050.36,1220.03 2050.95,1219.45 2051.54,1221.46 2052.12,1220.94 2052.71,1222.9 2053.3,1219.67 2053.88,1219.17 2054.47,1219.95 2055.06,1220.81 2055.64,1218.65 2056.23,1216.69 2056.81,1217.55 2057.4,1215.7 2057.99,1212.44 2058.57,1212.32 2059.16,1209.34 2059.75,1206.7 2060.33,1207.9 2060.92,1208.06 2061.51,1206.84 2062.09,1204.22 2062.68,1203.26 2063.27,1204.91 2063.85,1206.08 2064.44,1204.63 2065.02,1206.32 2065.61,1203.74 2066.2,1206 2066.78,1204.77 2067.37,1204.97 2067.96,1205.33 2068.54,1206.9 2069.13,1207.11 2069.72,1207.18 2070.3,1208.36 2070.89,1205.53 2071.48,1207.04 2072.06,1207.15 2072.65,1204.58 2073.23,1204.65 2073.82,1207.53 2074.41,1204.89 2074.99,1204.96 2075.58,1204.16 2076.17,1201.67 2076.75,1203.27 2077.34,1203.76 2077.93,1202.57 2078.51,1201.55 2079.1,1200.64 2079.68,1199.72 2080.27,1201.76 2080.86,1202.56 2081.44,1203.01 2082.03,1203.56 2082.62,1203.63 2083.2,1205.45 2083.79,1208.72 2084.38,1208.94 2084.96,1206.54 2085.55,1206.56 2086.14,1205.38 2086.72,1205.57 2087.31,1205.52 2087.89,1207.01 2088.48,1205.95 2089.07,1206.24 2089.65,1200.82 2090.24,1202.57 2090.83,1203.18 2091.41,1204.9 2092,1206.32 2092.59,1204.04 2093.17,1203.14 2093.76,1205 2094.35,1203.65 2094.93,1203.93 2095.52,1204.22 2096.1,1203.37 2096.69,1203.59 2097.28,1203.71 2097.86,1205.22 2098.45,1208.31 2099.04,1206.91 2099.62,1205.86 2100.21,1207.3 2100.8,1207.22 2101.38,1206.05 2101.97,1207.52 2102.55,1209.15 2103.14,1206.25 2103.73,1209.2 2104.31,1209.52 2104.9,1210.99 2105.49,1212.4 2106.07,1211.04 2106.66,1212.57 2107.25,1212.47 2107.83,1212.48 2108.42,1214.61 2109.01,1214.29 2109.59,1212.75 2110.18,1211.24 2110.76,1211.22 2111.35,1213.6 2111.94,1215.01 2112.52,1213.49 2113.11,1213.45 2113.7,1213.78 2114.28,1213.62 2114.87,1213.67 2115.46,1213.72 2116.04,1214.85 2116.63,1214.49 2117.22,1215.5 2117.8,1216.66 2118.39,1214.82 2118.97,1213.55 2119.56,1209.14 2120.15,1209.07 2120.73,1209.65 2121.32,1213.58 2121.91,1210.27 2122.49,1209.07 2123.08,1207.57 2123.67,1208.86 2124.25,1210.23 2124.84,1209.9 2125.42,1212.5 2126.01,1210.96 2126.6,1212.31 2127.18,1212.19 2127.77,1210.65 2128.36,1211.9 2128.94,1211.52 2129.53,1211.34 2130.12,1211.02 2130.7,1211.19 2131.29,1209.89 2131.88,1209.97 2132.46,1209.99 2133.05,1211.39 2133.63,1208.37 2134.22,1207.03 2134.81,1207.15 2135.39,1206 2135.98,1206.17 2136.57,1207.52 2137.15,1206.05 2137.74,1207.59 2138.33,1208.06 2138.91,1210.87 2139.5,1206.65 2140.09,1209.57 2140.67,1210.83 2141.26,1211.1 2141.84,1211.04 2142.43,1209.54 2143.02,1212.36 2143.6,1213.68 2144.19,1213.42 2144.78,1215.99 2145.36,1212.99 2145.95,1209.94 2146.54,1211.3 2147.12,1208.28 2147.71,1208.36 2148.3,1207.41 2148.88,1209.42 2149.47,1211.98 2150.05,1213.07 2150.64,1212.94 2151.23,1211.44 2151.81,1211.48 2152.4,1211.38 2152.99,1211.08 2153.57,1210.84 2154.16,1213.18 2154.75,1211.59 2155.33,1211.55 2155.92,1208.89 2156.5,1207.79 2157.09,1209.58 2157.68,1206.6 2158.26,1206.53 \"/>\n<path clip-path=\"url(#clip402)\" d=\"M986.025 1210.21 L986.612 1210.21 L987.198 1210.21 L987.785 1210.21 L988.371 1210.21 L988.957 1210.21 L989.544 1210.21 L990.13 1210.21 L990.717 1210.21 L991.303 1210.21 L991.889 1210.21 L992.476 1210.21 L993.062 1210.21 L993.649 1210.21 L994.235 1210.21 L994.822 1210.21 L995.408 1210.21 L995.994 1210.21 L996.581 1210.21 L997.167 1210.21 L997.754 1210.21 L998.34 1210.21 L998.926 1210.21 L999.513 1210.21 L1000.1 1210.21 L1000.69 1210.21 L1001.27 1210.21 L1001.86 1210.21 L1002.44 1210.21 L1003.03 1210.21 L1003.62 1210.21 L1004.2 1210.21 L1004.79 1210.21 L1005.38 1210.21 L1005.96 1210.21 L1006.55 1210.21 L1007.14 1210.21 L1007.72 1210.21 L1008.31 1210.21 L1008.9 1210.21 L1009.48 1210.21 L1010.07 1210.21 L1010.65 1210.21 L1011.24 1210.21 L1011.83 1210.21 L1012.41 1210.21 L1013 1210.21 L1013.59 1210.21 L1014.17 1210.21 L1014.76 1210.21 L1015.35 1210.21 L1015.93 1210.21 L1016.52 1210.21 L1017.11 1210.21 L1017.69 1210.21 L1018.28 1210.21 L1018.86 1210.21 L1019.45 1210.21 L1020.04 1210.21 L1020.62 1210.21 L1021.21 1210.21 L1021.8 1210.21 L1022.38 1210.21 L1022.97 1210.21 L1023.56 1210.21 L1024.14 1210.21 L1024.73 1210.21 L1025.32 1210.21 L1025.9 1210.21 L1026.49 1210.21 L1027.07 1210.21 L1027.66 1210.21 L1028.25 1210.21 L1028.83 1210.21 L1029.42 1210.21 L1030.01 1210.21 L1030.59 1210.21 L1031.18 1210.21 L1031.77 1210.21 L1032.35 1210.21 L1032.94 1210.21 L1033.52 1210.21 L1034.11 1210.21 L1034.7 1210.21 L1035.28 1210.21 L1035.87 1210.21 L1036.46 1210.21 L1037.04 1210.21 L1037.63 1210.21 L1038.22 1210.21 L1038.8 1210.21 L1039.39 1210.21 L1039.98 1210.21 L1040.56 1210.21 L1041.15 1210.21 L1041.73 1210.21 L1042.32 1210.21 L1042.91 1210.21 L1043.49 1210.21 L1044.08 1210.21 L1044.67 1210.21 L1045.25 1210.21 L1045.84 1210.21 L1046.43 1210.21 L1047.01 1210.21 L1047.6 1210.21 L1048.19 1210.21 L1048.77 1210.21 L1049.36 1210.21 L1049.94 1210.21 L1050.53 1210.21 L1051.12 1210.21 L1051.7 1210.21 L1052.29 1210.21 L1052.88 1210.21 L1053.46 1210.21 L1054.05 1210.21 L1054.64 1210.21 L1055.22 1210.21 L1055.81 1210.21 L1056.39 1210.21 L1056.98 1210.21 L1057.57 1210.21 L1058.15 1210.21 L1058.74 1210.21 L1059.33 1210.21 L1059.91 1210.21 L1060.5 1210.21 L1061.09 1210.21 L1061.67 1210.21 L1062.26 1210.21 L1062.85 1210.21 L1063.43 1210.21 L1064.02 1210.21 L1064.6 1210.21 L1065.19 1210.21 L1065.78 1210.21 L1066.36 1210.21 L1066.95 1210.21 L1067.54 1210.21 L1068.12 1210.21 L1068.71 1210.21 L1069.3 1210.21 L1069.88 1210.21 L1070.47 1210.21 L1071.06 1210.21 L1071.64 1210.21 L1072.23 1210.21 L1072.81 1210.21 L1073.4 1210.21 L1073.99 1210.21 L1074.57 1210.21 L1075.16 1210.21 L1075.75 1210.21 L1076.33 1210.21 L1076.92 1210.21 L1077.51 1210.21 L1078.09 1210.21 L1078.68 1210.21 L1079.26 1210.21 L1079.85 1210.21 L1080.44 1210.21 L1081.02 1210.21 L1081.61 1210.21 L1082.2 1210.21 L1082.78 1210.21 L1083.37 1210.21 L1083.96 1210.21 L1084.54 1210.21 L1085.13 1210.21 L1085.72 1210.21 L1086.3 1210.21 L1086.89 1210.21 L1087.47 1210.21 L1088.06 1210.21 L1088.65 1210.21 L1089.23 1210.21 L1089.82 1210.21 L1090.41 1210.21 L1090.99 1210.21 L1091.58 1210.21 L1092.17 1210.21 L1092.75 1210.21 L1093.34 1210.21 L1093.93 1210.21 L1094.51 1210.21 L1095.1 1210.21 L1095.68 1210.21 L1096.27 1210.21 L1096.86 1210.21 L1097.44 1210.21 L1098.03 1210.21 L1098.62 1210.21 L1099.2 1210.21 L1099.79 1210.21 L1100.38 1210.21 L1100.96 1210.21 L1101.55 1210.21 L1102.14 1210.21 L1102.72 1210.21 L1103.31 1210.21 L1103.89 1210.21 L1104.48 1210.21 L1105.07 1210.21 L1105.65 1210.21 L1106.24 1210.21 L1106.83 1210.21 L1107.41 1210.21 L1108 1210.21 L1108.59 1210.21 L1109.17 1210.21 L1109.76 1210.21 L1110.34 1210.21 L1110.93 1210.21 L1111.52 1210.21 L1112.1 1210.21 L1112.69 1210.21 L1113.28 1210.21 L1113.86 1210.21 L1114.45 1210.21 L1115.04 1210.21 L1115.62 1210.21 L1116.21 1210.21 L1116.8 1210.21 L1117.38 1210.21 L1117.97 1210.21 L1118.55 1210.21 L1119.14 1210.21 L1119.73 1210.21 L1120.31 1210.21 L1120.9 1210.21 L1121.49 1210.21 L1122.07 1210.21 L1122.66 1210.21 L1123.25 1210.21 L1123.83 1210.21 L1124.42 1210.21 L1125.01 1210.21 L1125.59 1210.21 L1126.18 1210.21 L1126.76 1210.21 L1127.35 1210.21 L1127.94 1210.21 L1128.52 1210.21 L1129.11 1210.21 L1129.7 1210.21 L1130.28 1210.21 L1130.87 1210.21 L1131.46 1210.21 L1132.04 1210.21 L1132.63 1210.21 L1133.21 1210.21 L1133.8 1210.21 L1134.39 1210.21 L1134.97 1210.21 L1135.56 1210.21 L1136.15 1210.21 L1136.73 1210.21 L1137.32 1210.21 L1137.91 1210.21 L1138.49 1210.21 L1139.08 1210.21 L1139.67 1210.21 L1140.25 1210.21 L1140.84 1210.21 L1141.42 1210.21 L1142.01 1210.21 L1142.6 1210.21 L1143.18 1210.21 L1143.77 1210.21 L1144.36 1210.21 L1144.94 1210.21 L1145.53 1210.21 L1146.12 1210.21 L1146.7 1210.21 L1147.29 1210.21 L1147.88 1210.21 L1148.46 1210.21 L1149.05 1210.21 L1149.63 1210.21 L1150.22 1210.21 L1150.81 1210.21 L1151.39 1210.21 L1151.98 1210.21 L1152.57 1210.21 L1153.15 1210.21 L1153.74 1210.21 L1154.33 1210.21 L1154.91 1210.21 L1155.5 1210.21 L1156.09 1210.21 L1156.67 1210.21 L1157.26 1210.21 L1157.84 1210.21 L1158.43 1210.21 L1159.02 1210.21 L1159.6 1210.21 L1160.19 1210.21 L1160.78 1210.21 L1161.36 1210.21 L1161.95 1210.21 L1162.54 1210.21 L1163.12 1210.21 L1163.71 1210.21 L1164.29 1210.21 L1164.88 1210.21 L1165.47 1210.21 L1166.05 1210.21 L1166.64 1210.21 L1167.23 1210.21 L1167.81 1210.21 L1168.4 1210.21 L1168.99 1210.21 L1169.57 1210.21 L1170.16 1210.21 L1170.75 1210.21 L1171.33 1210.21 L1171.92 1210.21 L1172.5 1210.21 L1173.09 1210.21 L1173.68 1210.21 L1174.26 1210.21 L1174.85 1210.21 L1175.44 1210.21 L1176.02 1210.21 L1176.61 1210.21 L1177.2 1210.21 L1177.78 1210.21 L1178.37 1210.21 L1178.96 1210.21 L1179.54 1210.21 L1180.13 1210.21 L1180.71 1210.21 L1181.3 1210.21 L1181.89 1210.21 L1182.47 1210.21 L1183.06 1210.21 L1183.65 1210.21 L1184.23 1210.21 L1184.82 1210.21 L1185.41 1210.21 L1185.99 1210.21 L1186.58 1210.21 L1187.16 1210.21 L1187.75 1210.21 L1188.34 1210.21 L1188.92 1210.21 L1189.51 1210.21 L1190.1 1210.21 L1190.68 1210.21 L1191.27 1210.21 L1191.86 1210.21 L1192.44 1210.21 L1193.03 1210.21 L1193.62 1210.21 L1194.2 1210.21 L1194.79 1210.21 L1195.37 1210.21 L1195.96 1210.21 L1196.55 1210.21 L1197.13 1210.21 L1197.72 1210.21 L1198.31 1210.21 L1198.89 1210.21 L1199.48 1210.21 L1200.07 1210.21 L1200.65 1210.21 L1201.24 1210.21 L1201.83 1210.21 L1202.41 1210.21 L1203 1210.21 L1203.58 1210.21 L1204.17 1210.21 L1204.76 1210.21 L1205.34 1210.21 L1205.93 1210.21 L1206.52 1210.21 L1207.1 1210.21 L1207.69 1210.21 L1208.28 1210.21 L1208.86 1210.21 L1209.45 1210.21 L1210.03 1210.21 L1210.62 1210.21 L1211.21 1210.21 L1211.79 1210.21 L1212.38 1210.21 L1212.97 1210.21 L1213.55 1210.21 L1214.14 1210.21 L1214.73 1210.21 L1215.31 1210.21 L1215.9 1210.21 L1216.49 1210.21 L1217.07 1210.21 L1217.66 1210.21 L1218.24 1210.21 L1218.83 1210.21 L1219.42 1210.21 L1220 1210.21 L1220.59 1210.21 L1221.18 1210.21 L1221.76 1210.21 L1222.35 1210.21 L1222.94 1210.21 L1223.52 1210.21 L1224.11 1210.21 L1224.7 1210.21 L1225.28 1210.21 L1225.87 1210.21 L1226.45 1210.21 L1227.04 1210.21 L1227.63 1210.21 L1228.21 1210.21 L1228.8 1210.21 L1229.39 1210.21 L1229.97 1210.21 L1230.56 1210.21 L1231.15 1210.21 L1231.73 1210.21 L1232.32 1210.21 L1232.91 1210.21 L1233.49 1210.21 L1234.08 1210.21 L1234.66 1210.21 L1235.25 1210.21 L1235.84 1210.21 L1236.42 1210.21 L1237.01 1210.21 L1237.6 1210.21 L1238.18 1210.21 L1238.77 1210.21 L1239.36 1210.21 L1239.94 1210.21 L1240.53 1210.21 L1241.11 1210.21 L1241.7 1210.21 L1242.29 1210.21 L1242.87 1210.21 L1243.46 1210.21 L1244.05 1210.21 L1244.63 1210.21 L1245.22 1210.21 L1245.81 1210.21 L1246.39 1210.21 L1246.98 1210.21 L1247.57 1210.21 L1248.15 1210.21 L1248.74 1210.21 L1249.32 1210.21 L1249.91 1210.21 L1250.5 1210.21 L1251.08 1210.21 L1251.67 1210.21 L1252.26 1210.21 L1252.84 1210.21 L1253.43 1210.21 L1254.02 1210.21 L1254.6 1210.21 L1255.19 1210.21 L1255.78 1210.21 L1256.36 1210.21 L1256.95 1210.21 L1257.53 1210.21 L1258.12 1210.21 L1258.71 1210.21 L1259.29 1210.21 L1259.88 1210.21 L1260.47 1210.21 L1261.05 1210.21 L1261.64 1210.21 L1262.23 1210.21 L1262.81 1210.21 L1263.4 1210.21 L1263.98 1210.21 L1264.57 1210.21 L1265.16 1210.21 L1265.74 1210.21 L1266.33 1210.21 L1266.92 1210.21 L1267.5 1210.21 L1268.09 1210.21 L1268.68 1210.21 L1269.26 1210.21 L1269.85 1210.21 L1270.44 1210.21 L1271.02 1210.21 L1271.61 1210.21 L1272.19 1210.21 L1272.78 1210.21 L1273.37 1210.21 L1273.95 1210.21 L1274.54 1210.21 L1275.13 1210.21 L1275.71 1210.21 L1276.3 1210.21 L1276.89 1210.21 L1277.47 1210.21 L1278.06 1210.21 L1278.65 1210.21 L1279.23 1210.21 L1279.82 1210.21 L1280.4 1210.21 L1280.99 1210.21 L1281.58 1210.21 L1282.16 1210.21 L1282.75 1210.21 L1283.34 1210.21 L1283.92 1210.21 L1284.51 1210.21 L1285.1 1210.21 L1285.68 1210.21 L1286.27 1210.21 L1286.86 1210.21 L1287.44 1210.21 L1288.03 1210.21 L1288.61 1210.21 L1289.2 1210.21 L1289.79 1210.21 L1290.37 1210.21 L1290.96 1210.21 L1291.55 1210.21 L1292.13 1210.21 L1292.72 1210.21 L1293.31 1210.21 L1293.89 1210.21 L1294.48 1210.21 L1295.06 1210.21 L1295.65 1210.21 L1296.24 1210.21 L1296.82 1210.21 L1297.41 1210.21 L1298 1210.21 L1298.58 1210.21 L1299.17 1210.21 L1299.76 1210.21 L1300.34 1210.21 L1300.93 1210.21 L1301.52 1210.21 L1302.1 1210.21 L1302.69 1210.21 L1303.27 1210.21 L1303.86 1210.21 L1304.45 1210.21 L1305.03 1210.21 L1305.62 1210.21 L1306.21 1210.21 L1306.79 1210.21 L1307.38 1210.21 L1307.97 1210.21 L1308.55 1210.21 L1309.14 1210.21 L1309.73 1210.21 L1310.31 1210.21 L1310.9 1210.21 L1311.48 1210.21 L1312.07 1210.21 L1312.66 1210.21 L1313.24 1210.21 L1313.83 1210.21 L1314.42 1210.21 L1315 1210.21 L1315.59 1210.21 L1316.18 1210.21 L1316.76 1210.21 L1317.35 1210.21 L1317.93 1210.21 L1318.52 1210.21 L1319.11 1210.21 L1319.69 1210.21 L1320.28 1210.21 L1320.87 1210.21 L1321.45 1210.21 L1322.04 1210.21 L1322.63 1210.21 L1323.21 1210.21 L1323.8 1210.21 L1324.39 1210.21 L1324.97 1210.21 L1325.56 1210.21 L1326.14 1210.21 L1326.73 1210.21 L1327.32 1210.21 L1327.9 1210.21 L1328.49 1210.21 L1329.08 1210.21 L1329.66 1210.21 L1330.25 1210.21 L1330.84 1210.21 L1331.42 1210.21 L1332.01 1210.21 L1332.6 1210.21 L1333.18 1210.21 L1333.77 1210.21 L1334.35 1210.21 L1334.94 1210.21 L1335.53 1210.21 L1336.11 1210.21 L1336.7 1210.21 L1337.29 1210.21 L1337.87 1210.21 L1338.46 1210.21 L1339.05 1210.21 L1339.63 1210.21 L1340.22 1210.21 L1340.8 1210.21 L1341.39 1210.21 L1341.98 1210.21 L1342.56 1210.21 L1343.15 1210.21 L1343.74 1210.21 L1344.32 1210.21 L1344.91 1210.21 L1345.5 1210.21 L1346.08 1210.21 L1346.67 1210.21 L1347.26 1210.21 L1347.84 1210.21 L1348.43 1210.21 L1349.01 1210.21 L1349.6 1210.21 L1350.19 1210.21 L1350.77 1210.21 L1351.36 1210.21 L1351.95 1210.21 L1352.53 1210.21 L1353.12 1210.21 L1353.71 1210.21 L1354.29 1210.21 L1354.88 1210.21 L1355.47 1210.21 L1356.05 1210.21 L1356.64 1210.21 L1357.22 1210.21 L1357.81 1210.21 L1358.4 1210.21 L1358.98 1210.21 L1359.57 1210.21 L1360.16 1210.21 L1360.74 1210.21 L1361.33 1210.21 L1361.92 1210.21 L1362.5 1210.21 L1363.09 1210.21 L1363.68 1210.21 L1364.26 1210.21 L1364.85 1210.21 L1365.43 1210.21 L1366.02 1210.21 L1366.61 1210.21 L1367.19 1210.21 L1367.78 1210.21 L1368.37 1210.21 L1368.95 1210.21 L1369.54 1210.21 L1370.13 1210.21 L1370.71 1210.21 L1371.3 1210.21 L1371.88 1210.21 L1372.47 1210.21 L1373.06 1210.21 L1373.64 1210.21 L1374.23 1210.21 L1374.82 1210.21 L1375.4 1210.21 L1375.99 1210.21 L1376.58 1210.21 L1377.16 1210.21 L1377.75 1210.21 L1378.34 1210.21 L1378.92 1210.21 L1379.51 1210.21 L1380.09 1210.21 L1380.68 1210.21 L1381.27 1210.21 L1381.85 1210.21 L1382.44 1210.21 L1383.03 1210.21 L1383.61 1210.21 L1384.2 1210.21 L1384.79 1210.21 L1385.37 1210.21 L1385.96 1210.21 L1386.55 1210.21 L1387.13 1210.21 L1387.72 1210.21 L1388.3 1210.21 L1388.89 1210.21 L1389.48 1210.21 L1390.06 1210.21 L1390.65 1210.21 L1391.24 1210.21 L1391.82 1210.21 L1392.41 1210.21 L1393 1210.21 L1393.58 1210.21 L1394.17 1210.21 L1394.75 1210.21 L1395.34 1210.21 L1395.93 1210.21 L1396.51 1210.21 L1397.1 1210.21 L1397.69 1210.21 L1398.27 1210.21 L1398.86 1210.21 L1399.45 1210.21 L1400.03 1210.21 L1400.62 1210.21 L1401.21 1210.21 L1401.79 1210.21 L1402.38 1210.21 L1402.96 1210.21 L1403.55 1210.21 L1404.14 1210.21 L1404.72 1210.21 L1405.31 1210.21 L1405.9 1210.21 L1406.48 1210.21 L1407.07 1210.21 L1407.66 1210.21 L1408.24 1210.21 L1408.83 1210.21 L1409.42 1210.21 L1410 1210.21 L1410.59 1210.21 L1411.17 1210.21 L1411.76 1210.21 L1412.35 1210.21 L1412.93 1210.21 L1413.52 1210.21 L1414.11 1210.21 L1414.69 1210.21 L1415.28 1210.21 L1415.87 1210.21 L1416.45 1210.21 L1417.04 1210.21 L1417.63 1210.21 L1418.21 1210.21 L1418.8 1210.21 L1419.38 1210.21 L1419.97 1210.21 L1420.56 1210.21 L1421.14 1210.21 L1421.73 1210.21 L1422.32 1210.21 L1422.9 1210.21 L1423.49 1210.21 L1424.08 1210.21 L1424.66 1210.21 L1425.25 1210.21 L1425.83 1210.21 L1426.42 1210.21 L1427.01 1210.21 L1427.59 1210.21 L1428.18 1210.21 L1428.77 1210.21 L1429.35 1210.21 L1429.94 1210.21 L1430.53 1210.21 L1431.11 1210.21 L1431.7 1210.21 L1432.29 1210.21 L1432.87 1210.21 L1433.46 1210.21 L1434.04 1210.21 L1434.63 1210.21 L1435.22 1210.21 L1435.8 1210.21 L1436.39 1210.21 L1436.98 1210.21 L1437.56 1210.21 L1438.15 1210.21 L1438.74 1210.21 L1439.32 1210.21 L1439.91 1210.21 L1440.5 1210.21 L1441.08 1210.21 L1441.67 1210.21 L1442.25 1210.21 L1442.84 1210.21 L1443.43 1210.21 L1444.01 1210.21 L1444.6 1210.21 L1445.19 1210.21 L1445.77 1210.21 L1446.36 1210.21 L1446.95 1210.21 L1447.53 1210.21 L1448.12 1210.21 L1448.7 1210.21 L1449.29 1210.21 L1449.88 1210.21 L1450.46 1210.21 L1451.05 1210.21 L1451.64 1210.21 L1452.22 1210.21 L1452.81 1210.21 L1453.4 1210.21 L1453.98 1210.21 L1454.57 1210.21 L1455.16 1210.21 L1455.74 1210.21 L1456.33 1210.21 L1456.91 1210.21 L1457.5 1210.21 L1458.09 1210.21 L1458.67 1210.21 L1459.26 1210.21 L1459.85 1210.21 L1460.43 1210.21 L1461.02 1210.21 L1461.61 1210.21 L1462.19 1210.21 L1462.78 1210.21 L1463.37 1210.21 L1463.95 1210.21 L1464.54 1210.21 L1465.12 1210.21 L1465.71 1210.21 L1466.3 1210.21 L1466.88 1210.21 L1467.47 1210.21 L1468.06 1210.21 L1468.64 1210.21 L1469.23 1210.21 L1469.82 1210.21 L1470.4 1210.21 L1470.99 1210.21 L1471.57 1210.21 L1472.16 1210.21 L1472.75 1210.21 L1473.33 1210.21 L1473.92 1210.21 L1474.51 1210.21 L1475.09 1210.21 L1475.68 1210.21 L1476.27 1210.21 L1476.85 1210.21 L1477.44 1210.21 L1478.03 1210.21 L1478.61 1210.21 L1479.2 1210.21 L1479.78 1210.21 L1480.37 1210.21 L1480.96 1210.21 L1481.54 1210.21 L1482.13 1210.21 L1482.72 1210.21 L1483.3 1210.21 L1483.89 1210.21 L1484.48 1210.21 L1485.06 1210.21 L1485.65 1210.21 L1486.24 1210.21 L1486.82 1210.21 L1487.41 1210.21 L1487.99 1210.21 L1488.58 1210.21 L1489.17 1210.21 L1489.75 1210.21 L1490.34 1210.21 L1490.93 1210.21 L1491.51 1210.21 L1492.1 1210.21 L1492.69 1210.21 L1493.27 1210.21 L1493.86 1210.21 L1494.45 1210.21 L1495.03 1210.21 L1495.62 1210.21 L1496.2 1210.21 L1496.79 1210.21 L1497.38 1210.21 L1497.96 1210.21 L1498.55 1210.21 L1499.14 1210.21 L1499.72 1210.21 L1500.31 1210.21 L1500.9 1210.21 L1501.48 1210.21 L1502.07 1210.21 L1502.65 1210.21 L1503.24 1210.21 L1503.83 1210.21 L1504.41 1210.21 L1505 1210.21 L1505.59 1210.21 L1506.17 1210.21 L1506.76 1210.21 L1507.35 1210.21 L1507.93 1210.21 L1508.52 1210.21 L1509.11 1210.21 L1509.69 1210.21 L1510.28 1210.21 L1510.86 1210.21 L1511.45 1210.21 L1512.04 1210.21 L1512.62 1210.21 L1513.21 1210.21 L1513.8 1210.21 L1514.38 1210.21 L1514.97 1210.21 L1515.56 1210.21 L1516.14 1210.21 L1516.73 1210.21 L1517.32 1210.21 L1517.9 1210.21 L1518.49 1210.21 L1519.07 1210.21 L1519.66 1210.21 L1520.25 1210.21 L1520.83 1210.21 L1521.42 1210.21 L1522.01 1210.21 L1522.59 1210.21 L1523.18 1210.21 L1523.77 1210.21 L1524.35 1210.21 L1524.94 1210.21 L1525.52 1210.21 L1526.11 1210.21 L1526.7 1210.21 L1527.28 1210.21 L1527.87 1210.21 L1528.46 1210.21 L1529.04 1210.21 L1529.63 1210.21 L1530.22 1210.21 L1530.8 1210.21 L1531.39 1210.21 L1531.98 1210.21 L1532.56 1210.21 L1533.15 1210.21 L1533.73 1210.21 L1534.32 1210.21 L1534.91 1210.21 L1535.49 1210.21 L1536.08 1210.21 L1536.67 1210.21 L1537.25 1210.21 L1537.84 1210.21 L1538.43 1210.21 L1539.01 1210.21 L1539.6 1210.21 L1540.19 1210.21 L1540.77 1210.21 L1541.36 1210.21 L1541.94 1210.21 L1542.53 1210.21 L1543.12 1210.21 L1543.7 1210.21 L1544.29 1210.21 L1544.88 1210.21 L1545.46 1210.21 L1546.05 1210.21 L1546.64 1210.21 L1547.22 1210.21 L1547.81 1210.21 L1548.4 1210.21 L1548.98 1210.21 L1549.57 1210.21 L1550.15 1210.21 L1550.74 1210.21 L1551.33 1210.21 L1551.91 1210.21 L1552.5 1210.21 L1553.09 1210.21 L1553.67 1210.21 L1554.26 1210.21 L1554.85 1210.21 L1555.43 1210.21 L1556.02 1210.21 L1556.6 1210.21 L1557.19 1210.21 L1557.78 1210.21 L1558.36 1210.21 L1558.95 1210.21 L1559.54 1210.21 L1560.12 1210.21 L1560.71 1210.21 L1561.3 1210.21 L1561.88 1210.21 L1562.47 1210.21 L1563.06 1210.21 L1563.64 1210.21 L1564.23 1210.21 L1564.81 1210.21 L1565.4 1210.21 L1565.99 1210.21 L1566.57 1210.21 L1567.16 1210.21 L1567.75 1210.21 L1568.33 1210.21 L1568.92 1210.21 L1569.51 1210.21 L1570.09 1210.21 L1570.68 1210.21 L1571.27 1210.21 L1571.85 1210.21 L1572.44 1210.21 L1573.02 1210.21 L1573.61 1210.21 L1574.2 1210.21 L1574.78 1210.21 L1575.37 1210.21 L1575.96 1210.21 L1576.54 1210.21 L1577.13 1210.21 L1577.72 1210.21 L1578.3 1210.21 L1578.89 1210.21 L1579.47 1210.21 L1580.06 1210.21 L1580.65 1210.21 L1581.23 1210.21 L1581.82 1210.21 L1582.41 1210.21 L1582.99 1210.21 L1583.58 1210.21 L1584.17 1210.21 L1584.75 1210.21 L1585.34 1210.21 L1585.93 1210.21 L1586.51 1210.21 L1587.1 1210.21 L1587.68 1210.21 L1588.27 1210.21 L1588.86 1210.21 L1589.44 1210.21 L1590.03 1210.21 L1590.62 1210.21 L1591.2 1210.21 L1591.79 1210.21 L1592.38 1210.21 L1592.96 1210.21 L1593.55 1210.21 L1594.14 1210.21 L1594.72 1210.21 L1595.31 1210.21 L1595.89 1210.21 L1596.48 1210.21 L1597.07 1210.21 L1597.65 1210.21 L1598.24 1210.21 L1598.83 1210.21 L1599.41 1210.21 L1600 1210.21 L1600.59 1210.21 L1601.17 1210.21 L1601.76 1210.21 L1602.34 1210.21 L1602.93 1210.21 L1603.52 1210.21 L1604.1 1210.21 L1604.69 1210.21 L1605.28 1210.21 L1605.86 1210.21 L1606.45 1210.21 L1607.04 1210.21 L1607.62 1210.21 L1608.21 1210.21 L1608.8 1210.21 L1609.38 1210.21 L1609.97 1210.21 L1610.55 1210.21 L1611.14 1210.21 L1611.73 1210.21 L1612.31 1210.21 L1612.9 1210.21 L1613.49 1210.21 L1614.07 1210.21 L1614.66 1210.21 L1615.25 1210.21 L1615.83 1210.21 L1616.42 1210.21 L1617.01 1210.21 L1617.59 1210.21 L1618.18 1210.21 L1618.76 1210.21 L1619.35 1210.21 L1619.94 1210.21 L1620.52 1210.21 L1621.11 1210.21 L1621.7 1210.21 L1622.28 1210.21 L1622.87 1210.21 L1623.46 1210.21 L1624.04 1210.21 L1624.63 1210.21 L1625.22 1210.21 L1625.8 1210.21 L1626.39 1210.21 L1626.97 1210.21 L1627.56 1210.21 L1628.15 1210.21 L1628.73 1210.21 L1629.32 1210.21 L1629.91 1210.21 L1630.49 1210.21 L1631.08 1210.21 L1631.67 1210.21 L1632.25 1210.21 L1632.84 1210.21 L1633.42 1210.21 L1634.01 1210.21 L1634.6 1210.21 L1635.18 1210.21 L1635.77 1210.21 L1636.36 1210.21 L1636.94 1210.21 L1637.53 1210.21 L1638.12 1210.21 L1638.7 1210.21 L1639.29 1210.21 L1639.88 1210.21 L1640.46 1210.21 L1641.05 1210.21 L1641.63 1210.21 L1642.22 1210.21 L1642.81 1210.21 L1643.39 1210.21 L1643.98 1210.21 L1644.57 1210.21 L1645.15 1210.21 L1645.74 1210.21 L1646.33 1210.21 L1646.91 1210.21 L1647.5 1210.21 L1648.09 1210.21 L1648.67 1210.21 L1649.26 1210.21 L1649.84 1210.21 L1650.43 1210.21 L1651.02 1210.21 L1651.6 1210.21 L1652.19 1210.21 L1652.78 1210.21 L1653.36 1210.21 L1653.95 1210.21 L1654.54 1210.21 L1655.12 1210.21 L1655.71 1210.21 L1656.29 1210.21 L1656.88 1210.21 L1657.47 1210.21 L1658.05 1210.21 L1658.64 1210.21 L1659.23 1210.21 L1659.81 1210.21 L1660.4 1210.21 L1660.99 1210.21 L1661.57 1210.21 L1662.16 1210.21 L1662.75 1210.21 L1663.33 1210.21 L1663.92 1210.21 L1664.5 1210.21 L1665.09 1210.21 L1665.68 1210.21 L1666.26 1210.21 L1666.85 1210.21 L1667.44 1210.21 L1668.02 1210.21 L1668.61 1210.21 L1669.2 1210.21 L1669.78 1210.21 L1670.37 1210.21 L1670.96 1210.21 L1671.54 1210.21 L1672.13 1210.21 L1672.71 1210.21 L1673.3 1210.21 L1673.89 1210.21 L1674.47 1210.21 L1675.06 1210.21 L1675.65 1210.21 L1676.23 1210.21 L1676.82 1210.21 L1677.41 1210.21 L1677.99 1210.21 L1678.58 1210.21 L1679.17 1210.21 L1679.75 1210.21 L1680.34 1210.21 L1680.92 1210.21 L1681.51 1210.21 L1682.1 1210.21 L1682.68 1210.21 L1683.27 1210.21 L1683.86 1210.21 L1684.44 1210.21 L1685.03 1210.21 L1685.62 1210.21 L1686.2 1210.21 L1686.79 1210.21 L1687.37 1210.21 L1687.96 1210.21 L1688.55 1210.21 L1689.13 1210.21 L1689.72 1210.21 L1690.31 1210.21 L1690.89 1210.21 L1691.48 1210.21 L1692.07 1210.21 L1692.65 1210.21 L1693.24 1210.21 L1693.83 1210.21 L1694.41 1210.21 L1695 1210.21 L1695.58 1210.21 L1696.17 1210.21 L1696.76 1210.21 L1697.34 1210.21 L1697.93 1210.21 L1698.52 1210.21 L1699.1 1210.21 L1699.69 1210.21 L1700.28 1210.21 L1700.86 1210.21 L1701.45 1210.21 L1702.04 1210.21 L1702.62 1210.21 L1703.21 1210.21 L1703.79 1210.21 L1704.38 1210.21 L1704.97 1210.21 L1705.55 1210.21 L1706.14 1210.21 L1706.73 1210.21 L1707.31 1210.21 L1707.9 1210.21 L1708.49 1210.21 L1709.07 1210.21 L1709.66 1210.21 L1710.24 1210.21 L1710.83 1210.21 L1711.42 1210.21 L1712 1210.21 L1712.59 1210.21 L1713.18 1210.21 L1713.76 1210.21 L1714.35 1210.21 L1714.94 1210.21 L1715.52 1210.21 L1716.11 1210.21 L1716.7 1210.21 L1717.28 1210.21 L1717.87 1210.21 L1718.45 1210.21 L1719.04 1210.21 L1719.63 1210.21 L1720.21 1210.21 L1720.8 1210.21 L1721.39 1210.21 L1721.97 1210.21 L1722.56 1210.21 L1723.15 1210.21 L1723.73 1210.21 L1724.32 1210.21 L1724.91 1210.21 L1725.49 1210.21 L1726.08 1210.21 L1726.66 1210.21 L1727.25 1210.21 L1727.84 1210.21 L1728.42 1210.21 L1729.01 1210.21 L1729.6 1210.21 L1730.18 1210.21 L1730.77 1210.21 L1731.36 1210.21 L1731.94 1210.21 L1732.53 1210.21 L1733.11 1210.21 L1733.7 1210.21 L1734.29 1210.21 L1734.87 1210.21 L1735.46 1210.21 L1736.05 1210.21 L1736.63 1210.21 L1737.22 1210.21 L1737.81 1210.21 L1738.39 1210.21 L1738.98 1210.21 L1739.57 1210.21 L1740.15 1210.21 L1740.74 1210.21 L1741.32 1210.21 L1741.91 1210.21 L1742.5 1210.21 L1743.08 1210.21 L1743.67 1210.21 L1744.26 1210.21 L1744.84 1210.21 L1745.43 1210.21 L1746.02 1210.21 L1746.6 1210.21 L1747.19 1210.21 L1747.78 1210.21 L1748.36 1210.21 L1748.95 1210.21 L1749.53 1210.21 L1750.12 1210.21 L1750.71 1210.21 L1751.29 1210.21 L1751.88 1210.21 L1752.47 1210.21 L1753.05 1210.21 L1753.64 1210.21 L1754.23 1210.21 L1754.81 1210.21 L1755.4 1210.21 L1755.99 1210.21 L1756.57 1210.21 L1757.16 1210.21 L1757.74 1210.21 L1758.33 1210.21 L1758.92 1210.21 L1759.5 1210.21 L1760.09 1210.21 L1760.68 1210.21 L1761.26 1210.21 L1761.85 1210.21 L1762.44 1210.21 L1763.02 1210.21 L1763.61 1210.21 L1764.19 1210.21 L1764.78 1210.21 L1765.37 1210.21 L1765.95 1210.21 L1766.54 1210.21 L1767.13 1210.21 L1767.71 1210.21 L1768.3 1210.21 L1768.89 1210.21 L1769.47 1210.21 L1770.06 1210.21 L1770.65 1210.21 L1771.23 1210.21 L1771.82 1210.21 L1772.4 1210.21 L1772.99 1210.21 L1773.58 1210.21 L1774.16 1210.21 L1774.75 1210.21 L1775.34 1210.21 L1775.92 1210.21 L1776.51 1210.21 L1777.1 1210.21 L1777.68 1210.21 L1778.27 1210.21 L1778.86 1210.21 L1779.44 1210.21 L1780.03 1210.21 L1780.61 1210.21 L1781.2 1210.21 L1781.79 1210.21 L1782.37 1210.21 L1782.96 1210.21 L1783.55 1210.21 L1784.13 1210.21 L1784.72 1210.21 L1785.31 1210.21 L1785.89 1210.21 L1786.48 1210.21 L1787.06 1210.21 L1787.65 1210.21 L1788.24 1210.21 L1788.82 1210.21 L1789.41 1210.21 L1790 1210.21 L1790.58 1210.21 L1791.17 1210.21 L1791.76 1210.21 L1792.34 1210.21 L1792.93 1210.21 L1793.52 1210.21 L1794.1 1210.21 L1794.69 1210.21 L1795.27 1210.21 L1795.86 1210.21 L1796.45 1210.21 L1797.03 1210.21 L1797.62 1210.21 L1798.21 1210.21 L1798.79 1210.21 L1799.38 1210.21 L1799.97 1210.21 L1800.55 1210.21 L1801.14 1210.21 L1801.73 1210.21 L1802.31 1210.21 L1802.9 1210.21 L1803.48 1210.21 L1804.07 1210.21 L1804.66 1210.21 L1805.24 1210.21 L1805.83 1210.21 L1806.42 1210.21 L1807 1210.21 L1807.59 1210.21 L1808.18 1210.21 L1808.76 1210.21 L1809.35 1210.21 L1809.94 1210.21 L1810.52 1210.21 L1811.11 1210.21 L1811.69 1210.21 L1812.28 1210.21 L1812.87 1210.21 L1813.45 1210.21 L1814.04 1210.21 L1814.63 1210.21 L1815.21 1210.21 L1815.8 1210.21 L1816.39 1210.21 L1816.97 1210.21 L1817.56 1210.21 L1818.14 1210.21 L1818.73 1210.21 L1819.32 1210.21 L1819.9 1210.21 L1820.49 1210.21 L1821.08 1210.21 L1821.66 1210.21 L1822.25 1210.21 L1822.84 1210.21 L1823.42 1210.21 L1824.01 1210.21 L1824.6 1210.21 L1825.18 1210.21 L1825.77 1210.21 L1826.35 1210.21 L1826.94 1210.21 L1827.53 1210.21 L1828.11 1210.21 L1828.7 1210.21 L1829.29 1210.21 L1829.87 1210.21 L1830.46 1210.21 L1831.05 1210.21 L1831.63 1210.21 L1832.22 1210.21 L1832.81 1210.21 L1833.39 1210.21 L1833.98 1210.21 L1834.56 1210.21 L1835.15 1210.21 L1835.74 1210.21 L1836.32 1210.21 L1836.91 1210.21 L1837.5 1210.21 L1838.08 1210.21 L1838.67 1210.21 L1839.26 1210.21 L1839.84 1210.21 L1840.43 1210.21 L1841.01 1210.21 L1841.6 1210.21 L1842.19 1210.21 L1842.77 1210.21 L1843.36 1210.21 L1843.95 1210.21 L1844.53 1210.21 L1845.12 1210.21 L1845.71 1210.21 L1846.29 1210.21 L1846.88 1210.21 L1847.47 1210.21 L1848.05 1210.21 L1848.64 1210.21 L1849.22 1210.21 L1849.81 1210.21 L1850.4 1210.21 L1850.98 1210.21 L1851.57 1210.21 L1852.16 1210.21 L1852.74 1210.21 L1853.33 1210.21 L1853.92 1210.21 L1854.5 1210.21 L1855.09 1210.21 L1855.68 1210.21 L1856.26 1210.21 L1856.85 1210.21 L1857.43 1210.21 L1858.02 1210.21 L1858.61 1210.21 L1859.19 1210.21 L1859.78 1210.21 L1860.37 1210.21 L1860.95 1210.21 L1861.54 1210.21 L1862.13 1210.21 L1862.71 1210.21 L1863.3 1210.21 L1863.88 1210.21 L1864.47 1210.21 L1865.06 1210.21 L1865.64 1210.21 L1866.23 1210.21 L1866.82 1210.21 L1867.4 1210.21 L1867.99 1210.21 L1868.58 1210.21 L1869.16 1210.21 L1869.75 1210.21 L1870.34 1210.21 L1870.92 1210.21 L1871.51 1210.21 L1872.09 1210.21 L1872.68 1210.21 L1873.27 1210.21 L1873.85 1210.21 L1874.44 1210.21 L1875.03 1210.21 L1875.61 1210.21 L1876.2 1210.21 L1876.79 1210.21 L1877.37 1210.21 L1877.96 1210.21 L1878.55 1210.21 L1879.13 1210.21 L1879.72 1210.21 L1880.3 1210.21 L1880.89 1210.21 L1881.48 1210.21 L1882.06 1210.21 L1882.65 1210.21 L1883.24 1210.21 L1883.82 1210.21 L1884.41 1210.21 L1885 1210.21 L1885.58 1210.21 L1886.17 1210.21 L1886.76 1210.21 L1887.34 1210.21 L1887.93 1210.21 L1888.51 1210.21 L1889.1 1210.21 L1889.69 1210.21 L1890.27 1210.21 L1890.86 1210.21 L1891.45 1210.21 L1892.03 1210.21 L1892.62 1210.21 L1893.21 1210.21 L1893.79 1210.21 L1894.38 1210.21 L1894.96 1210.21 L1895.55 1210.21 L1896.14 1210.21 L1896.72 1210.21 L1897.31 1210.21 L1897.9 1210.21 L1898.48 1210.21 L1899.07 1210.21 L1899.66 1210.21 L1900.24 1210.21 L1900.83 1210.21 L1901.42 1210.21 L1902 1210.21 L1902.59 1210.21 L1903.17 1210.21 L1903.76 1210.21 L1904.35 1210.21 L1904.93 1210.21 L1905.52 1210.21 L1906.11 1210.21 L1906.69 1210.21 L1907.28 1210.21 L1907.87 1210.21 L1908.45 1210.21 L1909.04 1210.21 L1909.63 1210.21 L1910.21 1210.21 L1910.8 1210.21 L1911.38 1210.21 L1911.97 1210.21 L1912.56 1210.21 L1913.14 1210.21 L1913.73 1210.21 L1914.32 1210.21 L1914.9 1210.21 L1915.49 1210.21 L1916.08 1210.21 L1916.66 1210.21 L1917.25 1210.21 L1917.83 1210.21 L1918.42 1210.21 L1919.01 1210.21 L1919.59 1210.21 L1920.18 1210.21 L1920.77 1210.21 L1921.35 1210.21 L1921.94 1210.21 L1922.53 1210.21 L1923.11 1210.21 L1923.7 1210.21 L1924.29 1210.21 L1924.87 1210.21 L1925.46 1210.21 L1926.04 1210.21 L1926.63 1210.21 L1927.22 1210.21 L1927.8 1210.21 L1928.39 1210.21 L1928.98 1210.21 L1929.56 1210.21 L1930.15 1210.21 L1930.74 1210.21 L1931.32 1210.21 L1931.91 1210.21 L1932.5 1210.21 L1933.08 1210.21 L1933.67 1210.21 L1934.25 1210.21 L1934.84 1210.21 L1935.43 1210.21 L1936.01 1210.21 L1936.6 1210.21 L1937.19 1210.21 L1937.77 1210.21 L1938.36 1210.21 L1938.95 1210.21 L1939.53 1210.21 L1940.12 1210.21 L1940.71 1210.21 L1941.29 1210.21 L1941.88 1210.21 L1942.46 1210.21 L1943.05 1210.21 L1943.64 1210.21 L1944.22 1210.21 L1944.81 1210.21 L1945.4 1210.21 L1945.98 1210.21 L1946.57 1210.21 L1947.16 1210.21 L1947.74 1210.21 L1948.33 1210.21 L1948.91 1210.21 L1949.5 1210.21 L1950.09 1210.21 L1950.67 1210.21 L1951.26 1210.21 L1951.85 1210.21 L1952.43 1210.21 L1953.02 1210.21 L1953.61 1210.21 L1954.19 1210.21 L1954.78 1210.21 L1955.37 1210.21 L1955.95 1210.21 L1956.54 1210.21 L1957.12 1210.21 L1957.71 1210.21 L1958.3 1210.21 L1958.88 1210.21 L1959.47 1210.21 L1960.06 1210.21 L1960.64 1210.21 L1961.23 1210.21 L1961.82 1210.21 L1962.4 1210.21 L1962.99 1210.21 L1963.58 1210.21 L1964.16 1210.21 L1964.75 1210.21 L1965.33 1210.21 L1965.92 1210.21 L1966.51 1210.21 L1967.09 1210.21 L1967.68 1210.21 L1968.27 1210.21 L1968.85 1210.21 L1969.44 1210.21 L1970.03 1210.21 L1970.61 1210.21 L1971.2 1210.21 L1971.78 1210.21 L1972.37 1210.21 L1972.96 1210.21 L1973.54 1210.21 L1974.13 1210.21 L1974.72 1210.21 L1975.3 1210.21 L1975.89 1210.21 L1976.48 1210.21 L1977.06 1210.21 L1977.65 1210.21 L1978.24 1210.21 L1978.82 1210.21 L1979.41 1210.21 L1979.99 1210.21 L1980.58 1210.21 L1981.17 1210.21 L1981.75 1210.21 L1982.34 1210.21 L1982.93 1210.21 L1983.51 1210.21 L1984.1 1210.21 L1984.69 1210.21 L1985.27 1210.21 L1985.86 1210.21 L1986.45 1210.21 L1987.03 1210.21 L1987.62 1210.21 L1988.2 1210.21 L1988.79 1210.21 L1989.38 1210.21 L1989.96 1210.21 L1990.55 1210.21 L1991.14 1210.21 L1991.72 1210.21 L1992.31 1210.21 L1992.9 1210.21 L1993.48 1210.21 L1994.07 1210.21 L1994.65 1210.21 L1995.24 1210.21 L1995.83 1210.21 L1996.41 1210.21 L1997 1210.21 L1997.59 1210.21 L1998.17 1210.21 L1998.76 1210.21 L1999.35 1210.21 L1999.93 1210.21 L2000.52 1210.21 L2001.11 1210.21 L2001.69 1210.21 L2002.28 1210.21 L2002.86 1210.21 L2003.45 1210.21 L2004.04 1210.21 L2004.62 1210.21 L2005.21 1210.21 L2005.8 1210.21 L2006.38 1210.21 L2006.97 1210.21 L2007.56 1210.21 L2008.14 1210.21 L2008.73 1210.21 L2009.32 1210.21 L2009.9 1210.21 L2010.49 1210.21 L2011.07 1210.21 L2011.66 1210.21 L2012.25 1210.21 L2012.83 1210.21 L2013.42 1210.21 L2014.01 1210.21 L2014.59 1210.21 L2015.18 1210.21 L2015.77 1210.21 L2016.35 1210.21 L2016.94 1210.21 L2017.53 1210.21 L2018.11 1210.21 L2018.7 1210.21 L2019.28 1210.21 L2019.87 1210.21 L2020.46 1210.21 L2021.04 1210.21 L2021.63 1210.21 L2022.22 1210.21 L2022.8 1210.21 L2023.39 1210.21 L2023.98 1210.21 L2024.56 1210.21 L2025.15 1210.21 L2025.73 1210.21 L2026.32 1210.21 L2026.91 1210.21 L2027.49 1210.21 L2028.08 1210.21 L2028.67 1210.21 L2029.25 1210.21 L2029.84 1210.21 L2030.43 1210.21 L2031.01 1210.21 L2031.6 1210.21 L2032.19 1210.21 L2032.77 1210.21 L2033.36 1210.21 L2033.94 1210.21 L2034.53 1210.21 L2035.12 1210.21 L2035.7 1210.21 L2036.29 1210.21 L2036.88 1210.21 L2037.46 1210.21 L2038.05 1210.21 L2038.64 1210.21 L2039.22 1210.21 L2039.81 1210.21 L2040.4 1210.21 L2040.98 1210.21 L2041.57 1210.21 L2042.15 1210.21 L2042.74 1210.21 L2043.33 1210.21 L2043.91 1210.21 L2044.5 1210.21 L2045.09 1210.21 L2045.67 1210.21 L2046.26 1210.21 L2046.85 1210.21 L2047.43 1210.21 L2048.02 1210.21 L2048.6 1210.21 L2049.19 1210.21 L2049.78 1210.21 L2050.36 1210.21 L2050.95 1210.21 L2051.54 1210.21 L2052.12 1210.21 L2052.71 1210.21 L2053.3 1210.21 L2053.88 1210.21 L2054.47 1210.21 L2055.06 1210.21 L2055.64 1210.21 L2056.23 1210.21 L2056.81 1210.21 L2057.4 1210.21 L2057.99 1210.21 L2058.57 1210.21 L2059.16 1210.21 L2059.75 1210.21 L2060.33 1210.21 L2060.92 1210.21 L2061.51 1210.21 L2062.09 1210.21 L2062.68 1210.21 L2063.27 1210.21 L2063.85 1210.21 L2064.44 1210.21 L2065.02 1210.21 L2065.61 1210.21 L2066.2 1210.21 L2066.78 1210.21 L2067.37 1210.21 L2067.96 1210.21 L2068.54 1210.21 L2069.13 1210.21 L2069.72 1210.21 L2070.3 1210.21 L2070.89 1210.21 L2071.48 1210.21 L2072.06 1210.21 L2072.65 1210.21 L2073.23 1210.21 L2073.82 1210.21 L2074.41 1210.21 L2074.99 1210.21 L2075.58 1210.21 L2076.17 1210.21 L2076.75 1210.21 L2077.34 1210.21 L2077.93 1210.21 L2078.51 1210.21 L2079.1 1210.21 L2079.68 1210.21 L2080.27 1210.21 L2080.86 1210.21 L2081.44 1210.21 L2082.03 1210.21 L2082.62 1210.21 L2083.2 1210.21 L2083.79 1210.21 L2084.38 1210.21 L2084.96 1210.21 L2085.55 1210.21 L2086.14 1210.21 L2086.72 1210.21 L2087.31 1210.21 L2087.89 1210.21 L2088.48 1210.21 L2089.07 1210.21 L2089.65 1210.21 L2090.24 1210.21 L2090.83 1210.21 L2091.41 1210.21 L2092 1210.21 L2092.59 1210.21 L2093.17 1210.21 L2093.76 1210.21 L2094.35 1210.21 L2094.93 1210.21 L2095.52 1210.21 L2096.1 1210.21 L2096.69 1210.21 L2097.28 1210.21 L2097.86 1210.21 L2098.45 1210.21 L2099.04 1210.21 L2099.62 1210.21 L2100.21 1210.21 L2100.8 1210.21 L2101.38 1210.21 L2101.97 1210.21 L2102.55 1210.21 L2103.14 1210.21 L2103.73 1210.21 L2104.31 1210.21 L2104.9 1210.21 L2105.49 1210.21 L2106.07 1210.21 L2106.66 1210.21 L2107.25 1210.21 L2107.83 1210.21 L2108.42 1210.21 L2109.01 1210.21 L2109.59 1210.21 L2110.18 1210.21 L2110.76 1210.21 L2111.35 1210.21 L2111.94 1210.21 L2112.52 1210.21 L2113.11 1210.21 L2113.7 1210.21 L2114.28 1210.21 L2114.87 1210.21 L2115.46 1210.21 L2116.04 1210.21 L2116.63 1210.21 L2117.22 1210.21 L2117.8 1210.21 L2118.39 1210.21 L2118.97 1210.21 L2119.56 1210.21 L2120.15 1210.21 L2120.73 1210.21 L2121.32 1210.21 L2121.91 1210.21 L2122.49 1210.21 L2123.08 1210.21 L2123.67 1210.21 L2124.25 1210.21 L2124.84 1210.21 L2125.42 1210.21 L2126.01 1210.21 L2126.6 1210.21 L2127.18 1210.21 L2127.77 1210.21 L2128.36 1210.21 L2128.94 1210.21 L2129.53 1210.21 L2130.12 1210.21 L2130.7 1210.21 L2131.29 1210.21 L2131.88 1210.21 L2132.46 1210.21 L2133.05 1210.21 L2133.63 1210.21 L2134.22 1210.21 L2134.81 1210.21 L2135.39 1210.21 L2135.98 1210.21 L2136.57 1210.21 L2137.15 1210.21 L2137.74 1210.21 L2138.33 1210.21 L2138.91 1210.21 L2139.5 1210.21 L2140.09 1210.21 L2140.67 1210.21 L2141.26 1210.21 L2141.84 1210.21 L2142.43 1210.21 L2143.02 1210.21 L2143.6 1210.21 L2144.19 1210.21 L2144.78 1210.21 L2145.36 1210.21 L2145.95 1210.21 L2146.54 1210.21 L2147.12 1210.21 L2147.71 1210.21 L2148.3 1210.21 L2148.88 1210.21 L2149.47 1210.21 L2150.05 1210.21 L2150.64 1210.21 L2151.23 1210.21 L2151.81 1210.21 L2152.4 1210.21 L2152.99 1210.21 L2153.57 1210.21 L2154.16 1210.21 L2154.75 1210.21 L2155.33 1210.21 L2155.92 1210.21 L2156.5 1210.21 L2157.09 1210.21 L2157.68 1210.21 L2158.26 1210.21 L2158.26 1209.42 L2157.68 1209.42 L2157.09 1209.42 L2156.5 1209.42 L2155.92 1209.42 L2155.33 1209.42 L2154.75 1209.42 L2154.16 1209.42 L2153.57 1209.42 L2152.99 1209.42 L2152.4 1209.42 L2151.81 1209.42 L2151.23 1209.42 L2150.64 1209.42 L2150.05 1209.42 L2149.47 1209.42 L2148.88 1209.42 L2148.3 1209.42 L2147.71 1209.42 L2147.12 1209.42 L2146.54 1209.42 L2145.95 1209.42 L2145.36 1209.42 L2144.78 1209.42 L2144.19 1209.42 L2143.6 1209.42 L2143.02 1209.42 L2142.43 1209.42 L2141.84 1209.42 L2141.26 1209.42 L2140.67 1209.42 L2140.09 1209.42 L2139.5 1209.42 L2138.91 1209.42 L2138.33 1209.42 L2137.74 1209.42 L2137.15 1209.42 L2136.57 1209.42 L2135.98 1209.42 L2135.39 1209.42 L2134.81 1209.42 L2134.22 1209.42 L2133.63 1209.42 L2133.05 1209.42 L2132.46 1209.42 L2131.88 1209.42 L2131.29 1209.42 L2130.7 1209.42 L2130.12 1209.42 L2129.53 1209.42 L2128.94 1209.42 L2128.36 1209.42 L2127.77 1209.42 L2127.18 1209.42 L2126.6 1209.42 L2126.01 1209.42 L2125.42 1209.42 L2124.84 1209.42 L2124.25 1209.42 L2123.67 1209.42 L2123.08 1209.42 L2122.49 1209.42 L2121.91 1209.42 L2121.32 1209.42 L2120.73 1209.42 L2120.15 1209.42 L2119.56 1209.42 L2118.97 1209.42 L2118.39 1209.42 L2117.8 1209.42 L2117.22 1209.42 L2116.63 1209.42 L2116.04 1209.42 L2115.46 1209.42 L2114.87 1209.42 L2114.28 1209.42 L2113.7 1209.42 L2113.11 1209.42 L2112.52 1209.42 L2111.94 1209.42 L2111.35 1209.42 L2110.76 1209.42 L2110.18 1209.42 L2109.59 1209.42 L2109.01 1209.42 L2108.42 1209.42 L2107.83 1209.42 L2107.25 1209.42 L2106.66 1209.42 L2106.07 1209.42 L2105.49 1209.42 L2104.9 1209.42 L2104.31 1209.42 L2103.73 1209.42 L2103.14 1209.42 L2102.55 1209.42 L2101.97 1209.42 L2101.38 1209.42 L2100.8 1209.42 L2100.21 1209.42 L2099.62 1209.42 L2099.04 1209.42 L2098.45 1209.42 L2097.86 1209.42 L2097.28 1209.42 L2096.69 1209.42 L2096.1 1209.42 L2095.52 1209.42 L2094.93 1209.42 L2094.35 1209.42 L2093.76 1209.42 L2093.17 1209.42 L2092.59 1209.42 L2092 1209.42 L2091.41 1209.42 L2090.83 1209.42 L2090.24 1209.42 L2089.65 1209.42 L2089.07 1209.42 L2088.48 1209.42 L2087.89 1209.42 L2087.31 1209.42 L2086.72 1209.42 L2086.14 1209.42 L2085.55 1209.42 L2084.96 1209.42 L2084.38 1209.42 L2083.79 1209.42 L2083.2 1209.42 L2082.62 1209.42 L2082.03 1209.42 L2081.44 1209.42 L2080.86 1209.42 L2080.27 1209.42 L2079.68 1209.42 L2079.1 1209.42 L2078.51 1209.42 L2077.93 1209.42 L2077.34 1209.42 L2076.75 1209.42 L2076.17 1209.42 L2075.58 1209.42 L2074.99 1209.42 L2074.41 1209.42 L2073.82 1209.42 L2073.23 1209.42 L2072.65 1209.42 L2072.06 1209.42 L2071.48 1209.42 L2070.89 1209.42 L2070.3 1209.42 L2069.72 1209.42 L2069.13 1209.42 L2068.54 1209.42 L2067.96 1209.42 L2067.37 1209.42 L2066.78 1209.42 L2066.2 1209.42 L2065.61 1209.42 L2065.02 1209.42 L2064.44 1209.42 L2063.85 1209.42 L2063.27 1209.42 L2062.68 1209.42 L2062.09 1209.42 L2061.51 1209.42 L2060.92 1209.42 L2060.33 1209.42 L2059.75 1209.42 L2059.16 1209.42 L2058.57 1209.42 L2057.99 1209.42 L2057.4 1209.42 L2056.81 1209.42 L2056.23 1209.42 L2055.64 1209.42 L2055.06 1209.42 L2054.47 1209.42 L2053.88 1209.42 L2053.3 1209.42 L2052.71 1209.42 L2052.12 1209.42 L2051.54 1209.42 L2050.95 1209.42 L2050.36 1209.42 L2049.78 1209.42 L2049.19 1209.42 L2048.6 1209.42 L2048.02 1209.42 L2047.43 1209.42 L2046.85 1209.42 L2046.26 1209.42 L2045.67 1209.42 L2045.09 1209.42 L2044.5 1209.42 L2043.91 1209.42 L2043.33 1209.42 L2042.74 1209.42 L2042.15 1209.42 L2041.57 1209.42 L2040.98 1209.42 L2040.4 1209.42 L2039.81 1209.42 L2039.22 1209.42 L2038.64 1209.42 L2038.05 1209.42 L2037.46 1209.42 L2036.88 1209.42 L2036.29 1209.42 L2035.7 1209.42 L2035.12 1209.42 L2034.53 1209.42 L2033.94 1209.42 L2033.36 1209.42 L2032.77 1209.42 L2032.19 1209.42 L2031.6 1209.42 L2031.01 1209.42 L2030.43 1209.42 L2029.84 1209.42 L2029.25 1209.42 L2028.67 1209.42 L2028.08 1209.42 L2027.49 1209.42 L2026.91 1209.42 L2026.32 1209.42 L2025.73 1209.42 L2025.15 1209.42 L2024.56 1209.42 L2023.98 1209.42 L2023.39 1209.42 L2022.8 1209.42 L2022.22 1209.42 L2021.63 1209.42 L2021.04 1209.42 L2020.46 1209.42 L2019.87 1209.42 L2019.28 1209.42 L2018.7 1209.42 L2018.11 1209.42 L2017.53 1209.42 L2016.94 1209.42 L2016.35 1209.42 L2015.77 1209.42 L2015.18 1209.42 L2014.59 1209.42 L2014.01 1209.42 L2013.42 1209.42 L2012.83 1209.42 L2012.25 1209.42 L2011.66 1209.42 L2011.07 1209.42 L2010.49 1209.42 L2009.9 1209.42 L2009.32 1209.42 L2008.73 1209.42 L2008.14 1209.42 L2007.56 1209.42 L2006.97 1209.42 L2006.38 1209.42 L2005.8 1209.42 L2005.21 1209.42 L2004.62 1209.42 L2004.04 1209.42 L2003.45 1209.42 L2002.86 1209.42 L2002.28 1209.42 L2001.69 1209.42 L2001.11 1209.42 L2000.52 1209.42 L1999.93 1209.42 L1999.35 1209.42 L1998.76 1209.42 L1998.17 1209.42 L1997.59 1209.42 L1997 1209.42 L1996.41 1209.42 L1995.83 1209.42 L1995.24 1209.42 L1994.65 1209.42 L1994.07 1209.42 L1993.48 1209.42 L1992.9 1209.42 L1992.31 1209.42 L1991.72 1209.42 L1991.14 1209.42 L1990.55 1209.42 L1989.96 1209.42 L1989.38 1209.42 L1988.79 1209.42 L1988.2 1209.42 L1987.62 1209.42 L1987.03 1209.42 L1986.45 1209.42 L1985.86 1209.42 L1985.27 1209.42 L1984.69 1209.42 L1984.1 1209.42 L1983.51 1209.42 L1982.93 1209.42 L1982.34 1209.42 L1981.75 1209.42 L1981.17 1209.42 L1980.58 1209.42 L1979.99 1209.42 L1979.41 1209.42 L1978.82 1209.42 L1978.24 1209.42 L1977.65 1209.42 L1977.06 1209.42 L1976.48 1209.42 L1975.89 1209.42 L1975.3 1209.42 L1974.72 1209.42 L1974.13 1209.42 L1973.54 1209.42 L1972.96 1209.42 L1972.37 1209.42 L1971.78 1209.42 L1971.2 1209.42 L1970.61 1209.42 L1970.03 1209.42 L1969.44 1209.42 L1968.85 1209.42 L1968.27 1209.42 L1967.68 1209.42 L1967.09 1209.42 L1966.51 1209.42 L1965.92 1209.42 L1965.33 1209.42 L1964.75 1209.42 L1964.16 1209.42 L1963.58 1209.42 L1962.99 1209.42 L1962.4 1209.42 L1961.82 1209.42 L1961.23 1209.42 L1960.64 1209.42 L1960.06 1209.42 L1959.47 1209.42 L1958.88 1209.42 L1958.3 1209.42 L1957.71 1209.42 L1957.12 1209.42 L1956.54 1209.42 L1955.95 1209.42 L1955.37 1209.42 L1954.78 1209.42 L1954.19 1209.42 L1953.61 1209.42 L1953.02 1209.42 L1952.43 1209.42 L1951.85 1209.42 L1951.26 1209.42 L1950.67 1209.42 L1950.09 1209.42 L1949.5 1209.42 L1948.91 1209.42 L1948.33 1209.42 L1947.74 1209.42 L1947.16 1209.42 L1946.57 1209.42 L1945.98 1209.42 L1945.4 1209.42 L1944.81 1209.42 L1944.22 1209.42 L1943.64 1209.42 L1943.05 1209.42 L1942.46 1209.42 L1941.88 1209.42 L1941.29 1209.42 L1940.71 1209.42 L1940.12 1209.42 L1939.53 1209.42 L1938.95 1209.42 L1938.36 1209.42 L1937.77 1209.42 L1937.19 1209.42 L1936.6 1209.42 L1936.01 1209.42 L1935.43 1209.42 L1934.84 1209.42 L1934.25 1209.42 L1933.67 1209.42 L1933.08 1209.42 L1932.5 1209.42 L1931.91 1209.42 L1931.32 1209.42 L1930.74 1209.42 L1930.15 1209.42 L1929.56 1209.42 L1928.98 1209.42 L1928.39 1209.42 L1927.8 1209.42 L1927.22 1209.42 L1926.63 1209.42 L1926.04 1209.42 L1925.46 1209.42 L1924.87 1209.42 L1924.29 1209.42 L1923.7 1209.42 L1923.11 1209.42 L1922.53 1209.42 L1921.94 1209.42 L1921.35 1209.42 L1920.77 1209.42 L1920.18 1209.42 L1919.59 1209.42 L1919.01 1209.42 L1918.42 1209.42 L1917.83 1209.42 L1917.25 1209.42 L1916.66 1209.42 L1916.08 1209.42 L1915.49 1209.42 L1914.9 1209.42 L1914.32 1209.42 L1913.73 1209.42 L1913.14 1209.42 L1912.56 1209.42 L1911.97 1209.42 L1911.38 1209.42 L1910.8 1209.42 L1910.21 1209.42 L1909.63 1209.42 L1909.04 1209.42 L1908.45 1209.42 L1907.87 1209.42 L1907.28 1209.42 L1906.69 1209.42 L1906.11 1209.42 L1905.52 1209.42 L1904.93 1209.42 L1904.35 1209.42 L1903.76 1209.42 L1903.17 1209.42 L1902.59 1209.42 L1902 1209.42 L1901.42 1209.42 L1900.83 1209.42 L1900.24 1209.42 L1899.66 1209.42 L1899.07 1209.42 L1898.48 1209.42 L1897.9 1209.42 L1897.31 1209.42 L1896.72 1209.42 L1896.14 1209.42 L1895.55 1209.42 L1894.96 1209.42 L1894.38 1209.42 L1893.79 1209.42 L1893.21 1209.42 L1892.62 1209.42 L1892.03 1209.42 L1891.45 1209.42 L1890.86 1209.42 L1890.27 1209.42 L1889.69 1209.42 L1889.1 1209.42 L1888.51 1209.42 L1887.93 1209.42 L1887.34 1209.42 L1886.76 1209.42 L1886.17 1209.42 L1885.58 1209.42 L1885 1209.42 L1884.41 1209.42 L1883.82 1209.42 L1883.24 1209.42 L1882.65 1209.42 L1882.06 1209.42 L1881.48 1209.42 L1880.89 1209.42 L1880.3 1209.42 L1879.72 1209.42 L1879.13 1209.42 L1878.55 1209.42 L1877.96 1209.42 L1877.37 1209.42 L1876.79 1209.42 L1876.2 1209.42 L1875.61 1209.42 L1875.03 1209.42 L1874.44 1209.42 L1873.85 1209.42 L1873.27 1209.42 L1872.68 1209.42 L1872.09 1209.42 L1871.51 1209.42 L1870.92 1209.42 L1870.34 1209.42 L1869.75 1209.42 L1869.16 1209.42 L1868.58 1209.42 L1867.99 1209.42 L1867.4 1209.42 L1866.82 1209.42 L1866.23 1209.42 L1865.64 1209.42 L1865.06 1209.42 L1864.47 1209.42 L1863.88 1209.42 L1863.3 1209.42 L1862.71 1209.42 L1862.13 1209.42 L1861.54 1209.42 L1860.95 1209.42 L1860.37 1209.42 L1859.78 1209.42 L1859.19 1209.42 L1858.61 1209.42 L1858.02 1209.42 L1857.43 1209.42 L1856.85 1209.42 L1856.26 1209.42 L1855.68 1209.42 L1855.09 1209.42 L1854.5 1209.42 L1853.92 1209.42 L1853.33 1209.42 L1852.74 1209.42 L1852.16 1209.42 L1851.57 1209.42 L1850.98 1209.42 L1850.4 1209.42 L1849.81 1209.42 L1849.22 1209.42 L1848.64 1209.42 L1848.05 1209.42 L1847.47 1209.42 L1846.88 1209.42 L1846.29 1209.42 L1845.71 1209.42 L1845.12 1209.42 L1844.53 1209.42 L1843.95 1209.42 L1843.36 1209.42 L1842.77 1209.42 L1842.19 1209.42 L1841.6 1209.42 L1841.01 1209.42 L1840.43 1209.42 L1839.84 1209.42 L1839.26 1209.42 L1838.67 1209.42 L1838.08 1209.42 L1837.5 1209.42 L1836.91 1209.42 L1836.32 1209.42 L1835.74 1209.42 L1835.15 1209.42 L1834.56 1209.42 L1833.98 1209.42 L1833.39 1209.42 L1832.81 1209.42 L1832.22 1209.42 L1831.63 1209.42 L1831.05 1209.42 L1830.46 1209.42 L1829.87 1209.42 L1829.29 1209.42 L1828.7 1209.42 L1828.11 1209.42 L1827.53 1209.42 L1826.94 1209.42 L1826.35 1209.42 L1825.77 1209.42 L1825.18 1209.42 L1824.6 1209.42 L1824.01 1209.42 L1823.42 1209.42 L1822.84 1209.42 L1822.25 1209.42 L1821.66 1209.42 L1821.08 1209.42 L1820.49 1209.42 L1819.9 1209.42 L1819.32 1209.42 L1818.73 1209.42 L1818.14 1209.42 L1817.56 1209.42 L1816.97 1209.42 L1816.39 1209.42 L1815.8 1209.42 L1815.21 1209.42 L1814.63 1209.42 L1814.04 1209.42 L1813.45 1209.42 L1812.87 1209.42 L1812.28 1209.42 L1811.69 1209.42 L1811.11 1209.42 L1810.52 1209.42 L1809.94 1209.42 L1809.35 1209.42 L1808.76 1209.42 L1808.18 1209.42 L1807.59 1209.42 L1807 1209.42 L1806.42 1209.42 L1805.83 1209.42 L1805.24 1209.42 L1804.66 1209.42 L1804.07 1209.42 L1803.48 1209.42 L1802.9 1209.42 L1802.31 1209.42 L1801.73 1209.42 L1801.14 1209.42 L1800.55 1209.42 L1799.97 1209.42 L1799.38 1209.42 L1798.79 1209.42 L1798.21 1209.42 L1797.62 1209.42 L1797.03 1209.42 L1796.45 1209.42 L1795.86 1209.42 L1795.27 1209.42 L1794.69 1209.42 L1794.1 1209.42 L1793.52 1209.42 L1792.93 1209.42 L1792.34 1209.42 L1791.76 1209.42 L1791.17 1209.42 L1790.58 1209.42 L1790 1209.42 L1789.41 1209.42 L1788.82 1209.42 L1788.24 1209.42 L1787.65 1209.42 L1787.06 1209.42 L1786.48 1209.42 L1785.89 1209.42 L1785.31 1209.42 L1784.72 1209.42 L1784.13 1209.42 L1783.55 1209.42 L1782.96 1209.42 L1782.37 1209.42 L1781.79 1209.42 L1781.2 1209.42 L1780.61 1209.42 L1780.03 1209.42 L1779.44 1209.42 L1778.86 1209.42 L1778.27 1209.42 L1777.68 1209.42 L1777.1 1209.42 L1776.51 1209.42 L1775.92 1209.42 L1775.34 1209.42 L1774.75 1209.42 L1774.16 1209.42 L1773.58 1209.42 L1772.99 1209.42 L1772.4 1209.42 L1771.82 1209.42 L1771.23 1209.42 L1770.65 1209.42 L1770.06 1209.42 L1769.47 1209.42 L1768.89 1209.42 L1768.3 1209.42 L1767.71 1209.42 L1767.13 1209.42 L1766.54 1209.42 L1765.95 1209.42 L1765.37 1209.42 L1764.78 1209.42 L1764.19 1209.42 L1763.61 1209.42 L1763.02 1209.42 L1762.44 1209.42 L1761.85 1209.42 L1761.26 1209.42 L1760.68 1209.42 L1760.09 1209.42 L1759.5 1209.42 L1758.92 1209.42 L1758.33 1209.42 L1757.74 1209.42 L1757.16 1209.42 L1756.57 1209.42 L1755.99 1209.42 L1755.4 1209.42 L1754.81 1209.42 L1754.23 1209.42 L1753.64 1209.42 L1753.05 1209.42 L1752.47 1209.42 L1751.88 1209.42 L1751.29 1209.42 L1750.71 1209.42 L1750.12 1209.42 L1749.53 1209.42 L1748.95 1209.42 L1748.36 1209.42 L1747.78 1209.42 L1747.19 1209.42 L1746.6 1209.42 L1746.02 1209.42 L1745.43 1209.42 L1744.84 1209.42 L1744.26 1209.42 L1743.67 1209.42 L1743.08 1209.42 L1742.5 1209.42 L1741.91 1209.42 L1741.32 1209.42 L1740.74 1209.42 L1740.15 1209.42 L1739.57 1209.42 L1738.98 1209.42 L1738.39 1209.42 L1737.81 1209.42 L1737.22 1209.42 L1736.63 1209.42 L1736.05 1209.42 L1735.46 1209.42 L1734.87 1209.42 L1734.29 1209.42 L1733.7 1209.42 L1733.11 1209.42 L1732.53 1209.42 L1731.94 1209.42 L1731.36 1209.42 L1730.77 1209.42 L1730.18 1209.42 L1729.6 1209.42 L1729.01 1209.42 L1728.42 1209.42 L1727.84 1209.42 L1727.25 1209.42 L1726.66 1209.42 L1726.08 1209.42 L1725.49 1209.42 L1724.91 1209.42 L1724.32 1209.42 L1723.73 1209.42 L1723.15 1209.42 L1722.56 1209.42 L1721.97 1209.42 L1721.39 1209.42 L1720.8 1209.42 L1720.21 1209.42 L1719.63 1209.42 L1719.04 1209.42 L1718.45 1209.42 L1717.87 1209.42 L1717.28 1209.42 L1716.7 1209.42 L1716.11 1209.42 L1715.52 1209.42 L1714.94 1209.42 L1714.35 1209.42 L1713.76 1209.42 L1713.18 1209.42 L1712.59 1209.42 L1712 1209.42 L1711.42 1209.42 L1710.83 1209.42 L1710.24 1209.42 L1709.66 1209.42 L1709.07 1209.42 L1708.49 1209.42 L1707.9 1209.42 L1707.31 1209.42 L1706.73 1209.42 L1706.14 1209.42 L1705.55 1209.42 L1704.97 1209.42 L1704.38 1209.42 L1703.79 1209.42 L1703.21 1209.42 L1702.62 1209.42 L1702.04 1209.42 L1701.45 1209.42 L1700.86 1209.42 L1700.28 1209.42 L1699.69 1209.42 L1699.1 1209.42 L1698.52 1209.42 L1697.93 1209.42 L1697.34 1209.42 L1696.76 1209.42 L1696.17 1209.42 L1695.58 1209.42 L1695 1209.42 L1694.41 1209.42 L1693.83 1209.42 L1693.24 1209.42 L1692.65 1209.42 L1692.07 1209.42 L1691.48 1209.42 L1690.89 1209.42 L1690.31 1209.42 L1689.72 1209.42 L1689.13 1209.42 L1688.55 1209.42 L1687.96 1209.42 L1687.37 1209.42 L1686.79 1209.42 L1686.2 1209.42 L1685.62 1209.42 L1685.03 1209.42 L1684.44 1209.42 L1683.86 1209.42 L1683.27 1209.42 L1682.68 1209.42 L1682.1 1209.42 L1681.51 1209.42 L1680.92 1209.42 L1680.34 1209.42 L1679.75 1209.42 L1679.17 1209.42 L1678.58 1209.42 L1677.99 1209.42 L1677.41 1209.42 L1676.82 1209.42 L1676.23 1209.42 L1675.65 1209.42 L1675.06 1209.42 L1674.47 1209.42 L1673.89 1209.42 L1673.3 1209.42 L1672.71 1209.42 L1672.13 1209.42 L1671.54 1209.42 L1670.96 1209.42 L1670.37 1209.42 L1669.78 1209.42 L1669.2 1209.42 L1668.61 1209.42 L1668.02 1209.42 L1667.44 1209.42 L1666.85 1209.42 L1666.26 1209.42 L1665.68 1209.42 L1665.09 1209.42 L1664.5 1209.42 L1663.92 1209.42 L1663.33 1209.42 L1662.75 1209.42 L1662.16 1209.42 L1661.57 1209.42 L1660.99 1209.42 L1660.4 1209.42 L1659.81 1209.42 L1659.23 1209.42 L1658.64 1209.42 L1658.05 1209.42 L1657.47 1209.42 L1656.88 1209.42 L1656.29 1209.42 L1655.71 1209.42 L1655.12 1209.42 L1654.54 1209.42 L1653.95 1209.42 L1653.36 1209.42 L1652.78 1209.42 L1652.19 1209.42 L1651.6 1209.42 L1651.02 1209.42 L1650.43 1209.42 L1649.84 1209.42 L1649.26 1209.42 L1648.67 1209.42 L1648.09 1209.42 L1647.5 1209.42 L1646.91 1209.42 L1646.33 1209.42 L1645.74 1209.42 L1645.15 1209.42 L1644.57 1209.42 L1643.98 1209.42 L1643.39 1209.42 L1642.81 1209.42 L1642.22 1209.42 L1641.63 1209.42 L1641.05 1209.42 L1640.46 1209.42 L1639.88 1209.42 L1639.29 1209.42 L1638.7 1209.42 L1638.12 1209.42 L1637.53 1209.42 L1636.94 1209.42 L1636.36 1209.42 L1635.77 1209.42 L1635.18 1209.42 L1634.6 1209.42 L1634.01 1209.42 L1633.42 1209.42 L1632.84 1209.42 L1632.25 1209.42 L1631.67 1209.42 L1631.08 1209.42 L1630.49 1209.42 L1629.91 1209.42 L1629.32 1209.42 L1628.73 1209.42 L1628.15 1209.42 L1627.56 1209.42 L1626.97 1209.42 L1626.39 1209.42 L1625.8 1209.42 L1625.22 1209.42 L1624.63 1209.42 L1624.04 1209.42 L1623.46 1209.42 L1622.87 1209.42 L1622.28 1209.42 L1621.7 1209.42 L1621.11 1209.42 L1620.52 1209.42 L1619.94 1209.42 L1619.35 1209.42 L1618.76 1209.42 L1618.18 1209.42 L1617.59 1209.42 L1617.01 1209.42 L1616.42 1209.42 L1615.83 1209.42 L1615.25 1209.42 L1614.66 1209.42 L1614.07 1209.42 L1613.49 1209.42 L1612.9 1209.42 L1612.31 1209.42 L1611.73 1209.42 L1611.14 1209.42 L1610.55 1209.42 L1609.97 1209.42 L1609.38 1209.42 L1608.8 1209.42 L1608.21 1209.42 L1607.62 1209.42 L1607.04 1209.42 L1606.45 1209.42 L1605.86 1209.42 L1605.28 1209.42 L1604.69 1209.42 L1604.1 1209.42 L1603.52 1209.42 L1602.93 1209.42 L1602.34 1209.42 L1601.76 1209.42 L1601.17 1209.42 L1600.59 1209.42 L1600 1209.42 L1599.41 1209.42 L1598.83 1209.42 L1598.24 1209.42 L1597.65 1209.42 L1597.07 1209.42 L1596.48 1209.42 L1595.89 1209.42 L1595.31 1209.42 L1594.72 1209.42 L1594.14 1209.42 L1593.55 1209.42 L1592.96 1209.42 L1592.38 1209.42 L1591.79 1209.42 L1591.2 1209.42 L1590.62 1209.42 L1590.03 1209.42 L1589.44 1209.42 L1588.86 1209.42 L1588.27 1209.42 L1587.68 1209.42 L1587.1 1209.42 L1586.51 1209.42 L1585.93 1209.42 L1585.34 1209.42 L1584.75 1209.42 L1584.17 1209.42 L1583.58 1209.42 L1582.99 1209.42 L1582.41 1209.42 L1581.82 1209.42 L1581.23 1209.42 L1580.65 1209.42 L1580.06 1209.42 L1579.47 1209.42 L1578.89 1209.42 L1578.3 1209.42 L1577.72 1209.42 L1577.13 1209.42 L1576.54 1209.42 L1575.96 1209.42 L1575.37 1209.42 L1574.78 1209.42 L1574.2 1209.42 L1573.61 1209.42 L1573.02 1209.42 L1572.44 1209.42 L1571.85 1209.42 L1571.27 1209.42 L1570.68 1209.42 L1570.09 1209.42 L1569.51 1209.42 L1568.92 1209.42 L1568.33 1209.42 L1567.75 1209.42 L1567.16 1209.42 L1566.57 1209.42 L1565.99 1209.42 L1565.4 1209.42 L1564.81 1209.42 L1564.23 1209.42 L1563.64 1209.42 L1563.06 1209.42 L1562.47 1209.42 L1561.88 1209.42 L1561.3 1209.42 L1560.71 1209.42 L1560.12 1209.42 L1559.54 1209.42 L1558.95 1209.42 L1558.36 1209.42 L1557.78 1209.42 L1557.19 1209.42 L1556.6 1209.42 L1556.02 1209.42 L1555.43 1209.42 L1554.85 1209.42 L1554.26 1209.42 L1553.67 1209.42 L1553.09 1209.42 L1552.5 1209.42 L1551.91 1209.42 L1551.33 1209.42 L1550.74 1209.42 L1550.15 1209.42 L1549.57 1209.42 L1548.98 1209.42 L1548.4 1209.42 L1547.81 1209.42 L1547.22 1209.42 L1546.64 1209.42 L1546.05 1209.42 L1545.46 1209.42 L1544.88 1209.42 L1544.29 1209.42 L1543.7 1209.42 L1543.12 1209.42 L1542.53 1209.42 L1541.94 1209.42 L1541.36 1209.42 L1540.77 1209.42 L1540.19 1209.42 L1539.6 1209.42 L1539.01 1209.42 L1538.43 1209.42 L1537.84 1209.42 L1537.25 1209.42 L1536.67 1209.42 L1536.08 1209.42 L1535.49 1209.42 L1534.91 1209.42 L1534.32 1209.42 L1533.73 1209.42 L1533.15 1209.42 L1532.56 1209.42 L1531.98 1209.42 L1531.39 1209.42 L1530.8 1209.42 L1530.22 1209.42 L1529.63 1209.42 L1529.04 1209.42 L1528.46 1209.42 L1527.87 1209.42 L1527.28 1209.42 L1526.7 1209.42 L1526.11 1209.42 L1525.52 1209.42 L1524.94 1209.42 L1524.35 1209.42 L1523.77 1209.42 L1523.18 1209.42 L1522.59 1209.42 L1522.01 1209.42 L1521.42 1209.42 L1520.83 1209.42 L1520.25 1209.42 L1519.66 1209.42 L1519.07 1209.42 L1518.49 1209.42 L1517.9 1209.42 L1517.32 1209.42 L1516.73 1209.42 L1516.14 1209.42 L1515.56 1209.42 L1514.97 1209.42 L1514.38 1209.42 L1513.8 1209.42 L1513.21 1209.42 L1512.62 1209.42 L1512.04 1209.42 L1511.45 1209.42 L1510.86 1209.42 L1510.28 1209.42 L1509.69 1209.42 L1509.11 1209.42 L1508.52 1209.42 L1507.93 1209.42 L1507.35 1209.42 L1506.76 1209.42 L1506.17 1209.42 L1505.59 1209.42 L1505 1209.42 L1504.41 1209.42 L1503.83 1209.42 L1503.24 1209.42 L1502.65 1209.42 L1502.07 1209.42 L1501.48 1209.42 L1500.9 1209.42 L1500.31 1209.42 L1499.72 1209.42 L1499.14 1209.42 L1498.55 1209.42 L1497.96 1209.42 L1497.38 1209.42 L1496.79 1209.42 L1496.2 1209.42 L1495.62 1209.42 L1495.03 1209.42 L1494.45 1209.42 L1493.86 1209.42 L1493.27 1209.42 L1492.69 1209.42 L1492.1 1209.42 L1491.51 1209.42 L1490.93 1209.42 L1490.34 1209.42 L1489.75 1209.42 L1489.17 1209.42 L1488.58 1209.42 L1487.99 1209.42 L1487.41 1209.42 L1486.82 1209.42 L1486.24 1209.42 L1485.65 1209.42 L1485.06 1209.42 L1484.48 1209.42 L1483.89 1209.42 L1483.3 1209.42 L1482.72 1209.42 L1482.13 1209.42 L1481.54 1209.42 L1480.96 1209.42 L1480.37 1209.42 L1479.78 1209.42 L1479.2 1209.42 L1478.61 1209.42 L1478.03 1209.42 L1477.44 1209.42 L1476.85 1209.42 L1476.27 1209.42 L1475.68 1209.42 L1475.09 1209.42 L1474.51 1209.42 L1473.92 1209.42 L1473.33 1209.42 L1472.75 1209.42 L1472.16 1209.42 L1471.57 1209.42 L1470.99 1209.42 L1470.4 1209.42 L1469.82 1209.42 L1469.23 1209.42 L1468.64 1209.42 L1468.06 1209.42 L1467.47 1209.42 L1466.88 1209.42 L1466.3 1209.42 L1465.71 1209.42 L1465.12 1209.42 L1464.54 1209.42 L1463.95 1209.42 L1463.37 1209.42 L1462.78 1209.42 L1462.19 1209.42 L1461.61 1209.42 L1461.02 1209.42 L1460.43 1209.42 L1459.85 1209.42 L1459.26 1209.42 L1458.67 1209.42 L1458.09 1209.42 L1457.5 1209.42 L1456.91 1209.42 L1456.33 1209.42 L1455.74 1209.42 L1455.16 1209.42 L1454.57 1209.42 L1453.98 1209.42 L1453.4 1209.42 L1452.81 1209.42 L1452.22 1209.42 L1451.64 1209.42 L1451.05 1209.42 L1450.46 1209.42 L1449.88 1209.42 L1449.29 1209.42 L1448.7 1209.42 L1448.12 1209.42 L1447.53 1209.42 L1446.95 1209.42 L1446.36 1209.42 L1445.77 1209.42 L1445.19 1209.42 L1444.6 1209.42 L1444.01 1209.42 L1443.43 1209.42 L1442.84 1209.42 L1442.25 1209.42 L1441.67 1209.42 L1441.08 1209.42 L1440.5 1209.42 L1439.91 1209.42 L1439.32 1209.42 L1438.74 1209.42 L1438.15 1209.42 L1437.56 1209.42 L1436.98 1209.42 L1436.39 1209.42 L1435.8 1209.42 L1435.22 1209.42 L1434.63 1209.42 L1434.04 1209.42 L1433.46 1209.42 L1432.87 1209.42 L1432.29 1209.42 L1431.7 1209.42 L1431.11 1209.42 L1430.53 1209.42 L1429.94 1209.42 L1429.35 1209.42 L1428.77 1209.42 L1428.18 1209.42 L1427.59 1209.42 L1427.01 1209.42 L1426.42 1209.42 L1425.83 1209.42 L1425.25 1209.42 L1424.66 1209.42 L1424.08 1209.42 L1423.49 1209.42 L1422.9 1209.42 L1422.32 1209.42 L1421.73 1209.42 L1421.14 1209.42 L1420.56 1209.42 L1419.97 1209.42 L1419.38 1209.42 L1418.8 1209.42 L1418.21 1209.42 L1417.63 1209.42 L1417.04 1209.42 L1416.45 1209.42 L1415.87 1209.42 L1415.28 1209.42 L1414.69 1209.42 L1414.11 1209.42 L1413.52 1209.42 L1412.93 1209.42 L1412.35 1209.42 L1411.76 1209.42 L1411.17 1209.42 L1410.59 1209.42 L1410 1209.42 L1409.42 1209.42 L1408.83 1209.42 L1408.24 1209.42 L1407.66 1209.42 L1407.07 1209.42 L1406.48 1209.42 L1405.9 1209.42 L1405.31 1209.42 L1404.72 1209.42 L1404.14 1209.42 L1403.55 1209.42 L1402.96 1209.42 L1402.38 1209.42 L1401.79 1209.42 L1401.21 1209.42 L1400.62 1209.42 L1400.03 1209.42 L1399.45 1209.42 L1398.86 1209.42 L1398.27 1209.42 L1397.69 1209.42 L1397.1 1209.42 L1396.51 1209.42 L1395.93 1209.42 L1395.34 1209.42 L1394.75 1209.42 L1394.17 1209.42 L1393.58 1209.42 L1393 1209.42 L1392.41 1209.42 L1391.82 1209.42 L1391.24 1209.42 L1390.65 1209.42 L1390.06 1209.42 L1389.48 1209.42 L1388.89 1209.42 L1388.3 1209.42 L1387.72 1209.42 L1387.13 1209.42 L1386.55 1209.42 L1385.96 1209.42 L1385.37 1209.42 L1384.79 1209.42 L1384.2 1209.42 L1383.61 1209.42 L1383.03 1209.42 L1382.44 1209.42 L1381.85 1209.42 L1381.27 1209.42 L1380.68 1209.42 L1380.09 1209.42 L1379.51 1209.42 L1378.92 1209.42 L1378.34 1209.42 L1377.75 1209.42 L1377.16 1209.42 L1376.58 1209.42 L1375.99 1209.42 L1375.4 1209.42 L1374.82 1209.42 L1374.23 1209.42 L1373.64 1209.42 L1373.06 1209.42 L1372.47 1209.42 L1371.88 1209.42 L1371.3 1209.42 L1370.71 1209.42 L1370.13 1209.42 L1369.54 1209.42 L1368.95 1209.42 L1368.37 1209.42 L1367.78 1209.42 L1367.19 1209.42 L1366.61 1209.42 L1366.02 1209.42 L1365.43 1209.42 L1364.85 1209.42 L1364.26 1209.42 L1363.68 1209.42 L1363.09 1209.42 L1362.5 1209.42 L1361.92 1209.42 L1361.33 1209.42 L1360.74 1209.42 L1360.16 1209.42 L1359.57 1209.42 L1358.98 1209.42 L1358.4 1209.42 L1357.81 1209.42 L1357.22 1209.42 L1356.64 1209.42 L1356.05 1209.42 L1355.47 1209.42 L1354.88 1209.42 L1354.29 1209.42 L1353.71 1209.42 L1353.12 1209.42 L1352.53 1209.42 L1351.95 1209.42 L1351.36 1209.42 L1350.77 1209.42 L1350.19 1209.42 L1349.6 1209.42 L1349.01 1209.42 L1348.43 1209.42 L1347.84 1209.42 L1347.26 1209.42 L1346.67 1209.42 L1346.08 1209.42 L1345.5 1209.42 L1344.91 1209.42 L1344.32 1209.42 L1343.74 1209.42 L1343.15 1209.42 L1342.56 1209.42 L1341.98 1209.42 L1341.39 1209.42 L1340.8 1209.42 L1340.22 1209.42 L1339.63 1209.42 L1339.05 1209.42 L1338.46 1209.42 L1337.87 1209.42 L1337.29 1209.42 L1336.7 1209.42 L1336.11 1209.42 L1335.53 1209.42 L1334.94 1209.42 L1334.35 1209.42 L1333.77 1209.42 L1333.18 1209.42 L1332.6 1209.42 L1332.01 1209.42 L1331.42 1209.42 L1330.84 1209.42 L1330.25 1209.42 L1329.66 1209.42 L1329.08 1209.42 L1328.49 1209.42 L1327.9 1209.42 L1327.32 1209.42 L1326.73 1209.42 L1326.14 1209.42 L1325.56 1209.42 L1324.97 1209.42 L1324.39 1209.42 L1323.8 1209.42 L1323.21 1209.42 L1322.63 1209.42 L1322.04 1209.42 L1321.45 1209.42 L1320.87 1209.42 L1320.28 1209.42 L1319.69 1209.42 L1319.11 1209.42 L1318.52 1209.42 L1317.93 1209.42 L1317.35 1209.42 L1316.76 1209.42 L1316.18 1209.42 L1315.59 1209.42 L1315 1209.42 L1314.42 1209.42 L1313.83 1209.42 L1313.24 1209.42 L1312.66 1209.42 L1312.07 1209.42 L1311.48 1209.42 L1310.9 1209.42 L1310.31 1209.42 L1309.73 1209.42 L1309.14 1209.42 L1308.55 1209.42 L1307.97 1209.42 L1307.38 1209.42 L1306.79 1209.42 L1306.21 1209.42 L1305.62 1209.42 L1305.03 1209.42 L1304.45 1209.42 L1303.86 1209.42 L1303.27 1209.42 L1302.69 1209.42 L1302.1 1209.42 L1301.52 1209.42 L1300.93 1209.42 L1300.34 1209.42 L1299.76 1209.42 L1299.17 1209.42 L1298.58 1209.42 L1298 1209.42 L1297.41 1209.42 L1296.82 1209.42 L1296.24 1209.42 L1295.65 1209.42 L1295.06 1209.42 L1294.48 1209.42 L1293.89 1209.42 L1293.31 1209.42 L1292.72 1209.42 L1292.13 1209.42 L1291.55 1209.42 L1290.96 1209.42 L1290.37 1209.42 L1289.79 1209.42 L1289.2 1209.42 L1288.61 1209.42 L1288.03 1209.42 L1287.44 1209.42 L1286.86 1209.42 L1286.27 1209.42 L1285.68 1209.42 L1285.1 1209.42 L1284.51 1209.42 L1283.92 1209.42 L1283.34 1209.42 L1282.75 1209.42 L1282.16 1209.42 L1281.58 1209.42 L1280.99 1209.42 L1280.4 1209.42 L1279.82 1209.42 L1279.23 1209.42 L1278.65 1209.42 L1278.06 1209.42 L1277.47 1209.42 L1276.89 1209.42 L1276.3 1209.42 L1275.71 1209.42 L1275.13 1209.42 L1274.54 1209.42 L1273.95 1209.42 L1273.37 1209.42 L1272.78 1209.42 L1272.19 1209.42 L1271.61 1209.42 L1271.02 1209.42 L1270.44 1209.42 L1269.85 1209.42 L1269.26 1209.42 L1268.68 1209.42 L1268.09 1209.42 L1267.5 1209.42 L1266.92 1209.42 L1266.33 1209.42 L1265.74 1209.42 L1265.16 1209.42 L1264.57 1209.42 L1263.98 1209.42 L1263.4 1209.42 L1262.81 1209.42 L1262.23 1209.42 L1261.64 1209.42 L1261.05 1209.42 L1260.47 1209.42 L1259.88 1209.42 L1259.29 1209.42 L1258.71 1209.42 L1258.12 1209.42 L1257.53 1209.42 L1256.95 1209.42 L1256.36 1209.42 L1255.78 1209.42 L1255.19 1209.42 L1254.6 1209.42 L1254.02 1209.42 L1253.43 1209.42 L1252.84 1209.42 L1252.26 1209.42 L1251.67 1209.42 L1251.08 1209.42 L1250.5 1209.42 L1249.91 1209.42 L1249.32 1209.42 L1248.74 1209.42 L1248.15 1209.42 L1247.57 1209.42 L1246.98 1209.42 L1246.39 1209.42 L1245.81 1209.42 L1245.22 1209.42 L1244.63 1209.42 L1244.05 1209.42 L1243.46 1209.42 L1242.87 1209.42 L1242.29 1209.42 L1241.7 1209.42 L1241.11 1209.42 L1240.53 1209.42 L1239.94 1209.42 L1239.36 1209.42 L1238.77 1209.42 L1238.18 1209.42 L1237.6 1209.42 L1237.01 1209.42 L1236.42 1209.42 L1235.84 1209.42 L1235.25 1209.42 L1234.66 1209.42 L1234.08 1209.42 L1233.49 1209.42 L1232.91 1209.42 L1232.32 1209.42 L1231.73 1209.42 L1231.15 1209.42 L1230.56 1209.42 L1229.97 1209.42 L1229.39 1209.42 L1228.8 1209.42 L1228.21 1209.42 L1227.63 1209.42 L1227.04 1209.42 L1226.45 1209.42 L1225.87 1209.42 L1225.28 1209.42 L1224.7 1209.42 L1224.11 1209.42 L1223.52 1209.42 L1222.94 1209.42 L1222.35 1209.42 L1221.76 1209.42 L1221.18 1209.42 L1220.59 1209.42 L1220 1209.42 L1219.42 1209.42 L1218.83 1209.42 L1218.24 1209.42 L1217.66 1209.42 L1217.07 1209.42 L1216.49 1209.42 L1215.9 1209.42 L1215.31 1209.42 L1214.73 1209.42 L1214.14 1209.42 L1213.55 1209.42 L1212.97 1209.42 L1212.38 1209.42 L1211.79 1209.42 L1211.21 1209.42 L1210.62 1209.42 L1210.03 1209.42 L1209.45 1209.42 L1208.86 1209.42 L1208.28 1209.42 L1207.69 1209.42 L1207.1 1209.42 L1206.52 1209.42 L1205.93 1209.42 L1205.34 1209.42 L1204.76 1209.42 L1204.17 1209.42 L1203.58 1209.42 L1203 1209.42 L1202.41 1209.42 L1201.83 1209.42 L1201.24 1209.42 L1200.65 1209.42 L1200.07 1209.42 L1199.48 1209.42 L1198.89 1209.42 L1198.31 1209.42 L1197.72 1209.42 L1197.13 1209.42 L1196.55 1209.42 L1195.96 1209.42 L1195.37 1209.42 L1194.79 1209.42 L1194.2 1209.42 L1193.62 1209.42 L1193.03 1209.42 L1192.44 1209.42 L1191.86 1209.42 L1191.27 1209.42 L1190.68 1209.42 L1190.1 1209.42 L1189.51 1209.42 L1188.92 1209.42 L1188.34 1209.42 L1187.75 1209.42 L1187.16 1209.42 L1186.58 1209.42 L1185.99 1209.42 L1185.41 1209.42 L1184.82 1209.42 L1184.23 1209.42 L1183.65 1209.42 L1183.06 1209.42 L1182.47 1209.42 L1181.89 1209.42 L1181.3 1209.42 L1180.71 1209.42 L1180.13 1209.42 L1179.54 1209.42 L1178.96 1209.42 L1178.37 1209.42 L1177.78 1209.42 L1177.2 1209.42 L1176.61 1209.42 L1176.02 1209.42 L1175.44 1209.42 L1174.85 1209.42 L1174.26 1209.42 L1173.68 1209.42 L1173.09 1209.42 L1172.5 1209.42 L1171.92 1209.42 L1171.33 1209.42 L1170.75 1209.42 L1170.16 1209.42 L1169.57 1209.42 L1168.99 1209.42 L1168.4 1209.42 L1167.81 1209.42 L1167.23 1209.42 L1166.64 1209.42 L1166.05 1209.42 L1165.47 1209.42 L1164.88 1209.42 L1164.29 1209.42 L1163.71 1209.42 L1163.12 1209.42 L1162.54 1209.42 L1161.95 1209.42 L1161.36 1209.42 L1160.78 1209.42 L1160.19 1209.42 L1159.6 1209.42 L1159.02 1209.42 L1158.43 1209.42 L1157.84 1209.42 L1157.26 1209.42 L1156.67 1209.42 L1156.09 1209.42 L1155.5 1209.42 L1154.91 1209.42 L1154.33 1209.42 L1153.74 1209.42 L1153.15 1209.42 L1152.57 1209.42 L1151.98 1209.42 L1151.39 1209.42 L1150.81 1209.42 L1150.22 1209.42 L1149.63 1209.42 L1149.05 1209.42 L1148.46 1209.42 L1147.88 1209.42 L1147.29 1209.42 L1146.7 1209.42 L1146.12 1209.42 L1145.53 1209.42 L1144.94 1209.42 L1144.36 1209.42 L1143.77 1209.42 L1143.18 1209.42 L1142.6 1209.42 L1142.01 1209.42 L1141.42 1209.42 L1140.84 1209.42 L1140.25 1209.42 L1139.67 1209.42 L1139.08 1209.42 L1138.49 1209.42 L1137.91 1209.42 L1137.32 1209.42 L1136.73 1209.42 L1136.15 1209.42 L1135.56 1209.42 L1134.97 1209.42 L1134.39 1209.42 L1133.8 1209.42 L1133.21 1209.42 L1132.63 1209.42 L1132.04 1209.42 L1131.46 1209.42 L1130.87 1209.42 L1130.28 1209.42 L1129.7 1209.42 L1129.11 1209.42 L1128.52 1209.42 L1127.94 1209.42 L1127.35 1209.42 L1126.76 1209.42 L1126.18 1209.42 L1125.59 1209.42 L1125.01 1209.42 L1124.42 1209.42 L1123.83 1209.42 L1123.25 1209.42 L1122.66 1209.42 L1122.07 1209.42 L1121.49 1209.42 L1120.9 1209.42 L1120.31 1209.42 L1119.73 1209.42 L1119.14 1209.42 L1118.55 1209.42 L1117.97 1209.42 L1117.38 1209.42 L1116.8 1209.42 L1116.21 1209.42 L1115.62 1209.42 L1115.04 1209.42 L1114.45 1209.42 L1113.86 1209.42 L1113.28 1209.42 L1112.69 1209.42 L1112.1 1209.42 L1111.52 1209.42 L1110.93 1209.42 L1110.34 1209.42 L1109.76 1209.42 L1109.17 1209.42 L1108.59 1209.42 L1108 1209.42 L1107.41 1209.42 L1106.83 1209.42 L1106.24 1209.42 L1105.65 1209.42 L1105.07 1209.42 L1104.48 1209.42 L1103.89 1209.42 L1103.31 1209.42 L1102.72 1209.42 L1102.14 1209.42 L1101.55 1209.42 L1100.96 1209.42 L1100.38 1209.42 L1099.79 1209.42 L1099.2 1209.42 L1098.62 1209.42 L1098.03 1209.42 L1097.44 1209.42 L1096.86 1209.42 L1096.27 1209.42 L1095.68 1209.42 L1095.1 1209.42 L1094.51 1209.42 L1093.93 1209.42 L1093.34 1209.42 L1092.75 1209.42 L1092.17 1209.42 L1091.58 1209.42 L1090.99 1209.42 L1090.41 1209.42 L1089.82 1209.42 L1089.23 1209.42 L1088.65 1209.42 L1088.06 1209.42 L1087.47 1209.42 L1086.89 1209.42 L1086.3 1209.42 L1085.72 1209.42 L1085.13 1209.42 L1084.54 1209.42 L1083.96 1209.42 L1083.37 1209.42 L1082.78 1209.42 L1082.2 1209.42 L1081.61 1209.42 L1081.02 1209.42 L1080.44 1209.42 L1079.85 1209.42 L1079.26 1209.42 L1078.68 1209.42 L1078.09 1209.42 L1077.51 1209.42 L1076.92 1209.42 L1076.33 1209.42 L1075.75 1209.42 L1075.16 1209.42 L1074.57 1209.42 L1073.99 1209.42 L1073.4 1209.42 L1072.81 1209.42 L1072.23 1209.42 L1071.64 1209.42 L1071.06 1209.42 L1070.47 1209.42 L1069.88 1209.42 L1069.3 1209.42 L1068.71 1209.42 L1068.12 1209.42 L1067.54 1209.42 L1066.95 1209.42 L1066.36 1209.42 L1065.78 1209.42 L1065.19 1209.42 L1064.6 1209.42 L1064.02 1209.42 L1063.43 1209.42 L1062.85 1209.42 L1062.26 1209.42 L1061.67 1209.42 L1061.09 1209.42 L1060.5 1209.42 L1059.91 1209.42 L1059.33 1209.42 L1058.74 1209.42 L1058.15 1209.42 L1057.57 1209.42 L1056.98 1209.42 L1056.39 1209.42 L1055.81 1209.42 L1055.22 1209.42 L1054.64 1209.42 L1054.05 1209.42 L1053.46 1209.42 L1052.88 1209.42 L1052.29 1209.42 L1051.7 1209.42 L1051.12 1209.42 L1050.53 1209.42 L1049.94 1209.42 L1049.36 1209.42 L1048.77 1209.42 L1048.19 1209.42 L1047.6 1209.42 L1047.01 1209.42 L1046.43 1209.42 L1045.84 1209.42 L1045.25 1209.42 L1044.67 1209.42 L1044.08 1209.42 L1043.49 1209.42 L1042.91 1209.42 L1042.32 1209.42 L1041.73 1209.42 L1041.15 1209.42 L1040.56 1209.42 L1039.98 1209.42 L1039.39 1209.42 L1038.8 1209.42 L1038.22 1209.42 L1037.63 1209.42 L1037.04 1209.42 L1036.46 1209.42 L1035.87 1209.42 L1035.28 1209.42 L1034.7 1209.42 L1034.11 1209.42 L1033.52 1209.42 L1032.94 1209.42 L1032.35 1209.42 L1031.77 1209.42 L1031.18 1209.42 L1030.59 1209.42 L1030.01 1209.42 L1029.42 1209.42 L1028.83 1209.42 L1028.25 1209.42 L1027.66 1209.42 L1027.07 1209.42 L1026.49 1209.42 L1025.9 1209.42 L1025.32 1209.42 L1024.73 1209.42 L1024.14 1209.42 L1023.56 1209.42 L1022.97 1209.42 L1022.38 1209.42 L1021.8 1209.42 L1021.21 1209.42 L1020.62 1209.42 L1020.04 1209.42 L1019.45 1209.42 L1018.86 1209.42 L1018.28 1209.42 L1017.69 1209.42 L1017.11 1209.42 L1016.52 1209.42 L1015.93 1209.42 L1015.35 1209.42 L1014.76 1209.42 L1014.17 1209.42 L1013.59 1209.42 L1013 1209.42 L1012.41 1209.42 L1011.83 1209.42 L1011.24 1209.42 L1010.65 1209.42 L1010.07 1209.42 L1009.48 1209.42 L1008.9 1209.42 L1008.31 1209.42 L1007.72 1209.42 L1007.14 1209.42 L1006.55 1209.42 L1005.96 1209.42 L1005.38 1209.42 L1004.79 1209.42 L1004.2 1209.42 L1003.62 1209.42 L1003.03 1209.42 L1002.44 1209.42 L1001.86 1209.42 L1001.27 1209.42 L1000.69 1209.42 L1000.1 1209.42 L999.513 1209.42 L998.926 1209.42 L998.34 1209.42 L997.754 1209.42 L997.167 1209.42 L996.581 1209.42 L995.994 1209.42 L995.408 1209.42 L994.822 1209.42 L994.235 1209.42 L993.649 1209.42 L993.062 1209.42 L992.476 1209.42 L991.889 1209.42 L991.303 1209.42 L990.717 1209.42 L990.13 1209.42 L989.544 1209.42 L988.957 1209.42 L988.371 1209.42 L987.785 1209.42 L987.198 1209.42 L986.612 1209.42 L986.025 1209.42  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.82 986.612,1209.82 987.198,1209.82 987.785,1209.82 988.371,1209.82 988.957,1209.82 989.544,1209.82 990.13,1209.82 990.717,1209.82 991.303,1209.82 991.889,1209.82 992.476,1209.82 993.062,1209.82 993.649,1209.82 994.235,1209.82 994.822,1209.82 995.408,1209.82 995.994,1209.82 996.581,1209.82 997.167,1209.82 997.754,1209.82 998.34,1209.82 998.926,1209.82 999.513,1209.82 1000.1,1209.82 1000.69,1209.82 1001.27,1209.82 1001.86,1209.82 1002.44,1209.82 1003.03,1209.82 1003.62,1209.82 1004.2,1209.82 1004.79,1209.82 1005.38,1209.82 1005.96,1209.82 1006.55,1209.82 1007.14,1209.82 1007.72,1209.82 1008.31,1209.82 1008.9,1209.82 1009.48,1209.82 1010.07,1209.82 1010.65,1209.82 1011.24,1209.82 1011.83,1209.82 1012.41,1209.82 1013,1209.82 1013.59,1209.82 1014.17,1209.82 1014.76,1209.82 1015.35,1209.82 1015.93,1209.82 1016.52,1209.82 1017.11,1209.82 1017.69,1209.82 1018.28,1209.82 1018.86,1209.82 1019.45,1209.82 1020.04,1209.82 1020.62,1209.82 1021.21,1209.82 1021.8,1209.82 1022.38,1209.82 1022.97,1209.82 1023.56,1209.82 1024.14,1209.82 1024.73,1209.82 1025.32,1209.82 1025.9,1209.82 1026.49,1209.82 1027.07,1209.82 1027.66,1209.82 1028.25,1209.82 1028.83,1209.82 1029.42,1209.82 1030.01,1209.82 1030.59,1209.82 1031.18,1209.82 1031.77,1209.82 1032.35,1209.82 1032.94,1209.82 1033.52,1209.82 1034.11,1209.82 1034.7,1209.82 1035.28,1209.82 1035.87,1209.82 1036.46,1209.82 1037.04,1209.82 1037.63,1209.82 1038.22,1209.82 1038.8,1209.82 1039.39,1209.82 1039.98,1209.82 1040.56,1209.82 1041.15,1209.82 1041.73,1209.82 1042.32,1209.82 1042.91,1209.82 1043.49,1209.82 1044.08,1209.82 1044.67,1209.82 1045.25,1209.82 1045.84,1209.82 1046.43,1209.82 1047.01,1209.82 1047.6,1209.82 1048.19,1209.82 1048.77,1209.82 1049.36,1209.82 1049.94,1209.82 1050.53,1209.82 1051.12,1209.82 1051.7,1209.82 1052.29,1209.82 1052.88,1209.82 1053.46,1209.82 1054.05,1209.82 1054.64,1209.82 1055.22,1209.82 1055.81,1209.82 1056.39,1209.82 1056.98,1209.82 1057.57,1209.82 1058.15,1209.82 1058.74,1209.82 1059.33,1209.82 1059.91,1209.82 1060.5,1209.82 1061.09,1209.82 1061.67,1209.82 1062.26,1209.82 1062.85,1209.82 1063.43,1209.82 1064.02,1209.82 1064.6,1209.82 1065.19,1209.82 1065.78,1209.82 1066.36,1209.82 1066.95,1209.82 1067.54,1209.82 1068.12,1209.82 1068.71,1209.82 1069.3,1209.82 1069.88,1209.82 1070.47,1209.82 1071.06,1209.82 1071.64,1209.82 1072.23,1209.82 1072.81,1209.82 1073.4,1209.82 1073.99,1209.82 1074.57,1209.82 1075.16,1209.82 1075.75,1209.82 1076.33,1209.82 1076.92,1209.82 1077.51,1209.82 1078.09,1209.82 1078.68,1209.82 1079.26,1209.82 1079.85,1209.82 1080.44,1209.82 1081.02,1209.82 1081.61,1209.82 1082.2,1209.82 1082.78,1209.82 1083.37,1209.82 1083.96,1209.82 1084.54,1209.82 1085.13,1209.82 1085.72,1209.82 1086.3,1209.82 1086.89,1209.82 1087.47,1209.82 1088.06,1209.82 1088.65,1209.82 1089.23,1209.82 1089.82,1209.82 1090.41,1209.82 1090.99,1209.82 1091.58,1209.82 1092.17,1209.82 1092.75,1209.82 1093.34,1209.82 1093.93,1209.82 1094.51,1209.82 1095.1,1209.82 1095.68,1209.82 1096.27,1209.82 1096.86,1209.82 1097.44,1209.82 1098.03,1209.82 1098.62,1209.82 1099.2,1209.82 1099.79,1209.82 1100.38,1209.82 1100.96,1209.82 1101.55,1209.82 1102.14,1209.82 1102.72,1209.82 1103.31,1209.82 1103.89,1209.82 1104.48,1209.82 1105.07,1209.82 1105.65,1209.82 1106.24,1209.82 1106.83,1209.82 1107.41,1209.82 1108,1209.82 1108.59,1209.82 1109.17,1209.82 1109.76,1209.82 1110.34,1209.82 1110.93,1209.82 1111.52,1209.82 1112.1,1209.82 1112.69,1209.82 1113.28,1209.82 1113.86,1209.82 1114.45,1209.82 1115.04,1209.82 1115.62,1209.82 1116.21,1209.82 1116.8,1209.82 1117.38,1209.82 1117.97,1209.82 1118.55,1209.82 1119.14,1209.82 1119.73,1209.82 1120.31,1209.82 1120.9,1209.82 1121.49,1209.82 1122.07,1209.82 1122.66,1209.82 1123.25,1209.82 1123.83,1209.82 1124.42,1209.82 1125.01,1209.82 1125.59,1209.82 1126.18,1209.82 1126.76,1209.82 1127.35,1209.82 1127.94,1209.82 1128.52,1209.82 1129.11,1209.82 1129.7,1209.82 1130.28,1209.82 1130.87,1209.82 1131.46,1209.82 1132.04,1209.82 1132.63,1209.82 1133.21,1209.82 1133.8,1209.82 1134.39,1209.82 1134.97,1209.82 1135.56,1209.82 1136.15,1209.82 1136.73,1209.82 1137.32,1209.82 1137.91,1209.82 1138.49,1209.82 1139.08,1209.82 1139.67,1209.82 1140.25,1209.82 1140.84,1209.82 1141.42,1209.82 1142.01,1209.82 1142.6,1209.82 1143.18,1209.82 1143.77,1209.82 1144.36,1209.82 1144.94,1209.82 1145.53,1209.82 1146.12,1209.82 1146.7,1209.82 1147.29,1209.82 1147.88,1209.82 1148.46,1209.82 1149.05,1209.82 1149.63,1209.82 1150.22,1209.82 1150.81,1209.82 1151.39,1209.82 1151.98,1209.82 1152.57,1209.82 1153.15,1209.82 1153.74,1209.82 1154.33,1209.82 1154.91,1209.82 1155.5,1209.82 1156.09,1209.82 1156.67,1209.82 1157.26,1209.82 1157.84,1209.82 1158.43,1209.82 1159.02,1209.82 1159.6,1209.82 1160.19,1209.82 1160.78,1209.82 1161.36,1209.82 1161.95,1209.82 1162.54,1209.82 1163.12,1209.82 1163.71,1209.82 1164.29,1209.82 1164.88,1209.82 1165.47,1209.82 1166.05,1209.82 1166.64,1209.82 1167.23,1209.82 1167.81,1209.82 1168.4,1209.82 1168.99,1209.82 1169.57,1209.82 1170.16,1209.82 1170.75,1209.82 1171.33,1209.82 1171.92,1209.82 1172.5,1209.82 1173.09,1209.82 1173.68,1209.82 1174.26,1209.82 1174.85,1209.82 1175.44,1209.82 1176.02,1209.82 1176.61,1209.82 1177.2,1209.82 1177.78,1209.82 1178.37,1209.82 1178.96,1209.82 1179.54,1209.82 1180.13,1209.82 1180.71,1209.82 1181.3,1209.82 1181.89,1209.82 1182.47,1209.82 1183.06,1209.82 1183.65,1209.82 1184.23,1209.82 1184.82,1209.82 1185.41,1209.82 1185.99,1209.82 1186.58,1209.82 1187.16,1209.82 1187.75,1209.82 1188.34,1209.82 1188.92,1209.82 1189.51,1209.82 1190.1,1209.82 1190.68,1209.82 1191.27,1209.82 1191.86,1209.82 1192.44,1209.82 1193.03,1209.82 1193.62,1209.82 1194.2,1209.82 1194.79,1209.82 1195.37,1209.82 1195.96,1209.82 1196.55,1209.82 1197.13,1209.82 1197.72,1209.82 1198.31,1209.82 1198.89,1209.82 1199.48,1209.82 1200.07,1209.82 1200.65,1209.82 1201.24,1209.82 1201.83,1209.82 1202.41,1209.82 1203,1209.82 1203.58,1209.82 1204.17,1209.82 1204.76,1209.82 1205.34,1209.82 1205.93,1209.82 1206.52,1209.82 1207.1,1209.82 1207.69,1209.82 1208.28,1209.82 1208.86,1209.82 1209.45,1209.82 1210.03,1209.82 1210.62,1209.82 1211.21,1209.82 1211.79,1209.82 1212.38,1209.82 1212.97,1209.82 1213.55,1209.82 1214.14,1209.82 1214.73,1209.82 1215.31,1209.82 1215.9,1209.82 1216.49,1209.82 1217.07,1209.82 1217.66,1209.82 1218.24,1209.82 1218.83,1209.82 1219.42,1209.82 1220,1209.82 1220.59,1209.82 1221.18,1209.82 1221.76,1209.82 1222.35,1209.82 1222.94,1209.82 1223.52,1209.82 1224.11,1209.82 1224.7,1209.82 1225.28,1209.82 1225.87,1209.82 1226.45,1209.82 1227.04,1209.82 1227.63,1209.82 1228.21,1209.82 1228.8,1209.82 1229.39,1209.82 1229.97,1209.82 1230.56,1209.82 1231.15,1209.82 1231.73,1209.82 1232.32,1209.82 1232.91,1209.82 1233.49,1209.82 1234.08,1209.82 1234.66,1209.82 1235.25,1209.82 1235.84,1209.82 1236.42,1209.82 1237.01,1209.82 1237.6,1209.82 1238.18,1209.82 1238.77,1209.82 1239.36,1209.82 1239.94,1209.82 1240.53,1209.82 1241.11,1209.82 1241.7,1209.82 1242.29,1209.82 1242.87,1209.82 1243.46,1209.82 1244.05,1209.82 1244.63,1209.82 1245.22,1209.82 1245.81,1209.82 1246.39,1209.82 1246.98,1209.82 1247.57,1209.82 1248.15,1209.82 1248.74,1209.82 1249.32,1209.82 1249.91,1209.82 1250.5,1209.82 1251.08,1209.82 1251.67,1209.82 1252.26,1209.82 1252.84,1209.82 1253.43,1209.82 1254.02,1209.82 1254.6,1209.82 1255.19,1209.82 1255.78,1209.82 1256.36,1209.82 1256.95,1209.82 1257.53,1209.82 1258.12,1209.82 1258.71,1209.82 1259.29,1209.82 1259.88,1209.82 1260.47,1209.82 1261.05,1209.82 1261.64,1209.82 1262.23,1209.82 1262.81,1209.82 1263.4,1209.82 1263.98,1209.82 1264.57,1209.82 1265.16,1209.82 1265.74,1209.82 1266.33,1209.82 1266.92,1209.82 1267.5,1209.82 1268.09,1209.82 1268.68,1209.82 1269.26,1209.82 1269.85,1209.82 1270.44,1209.82 1271.02,1209.82 1271.61,1209.82 1272.19,1209.82 1272.78,1209.82 1273.37,1209.82 1273.95,1209.82 1274.54,1209.82 1275.13,1209.82 1275.71,1209.82 1276.3,1209.82 1276.89,1209.82 1277.47,1209.82 1278.06,1209.82 1278.65,1209.82 1279.23,1209.82 1279.82,1209.82 1280.4,1209.82 1280.99,1209.82 1281.58,1209.82 1282.16,1209.82 1282.75,1209.82 1283.34,1209.82 1283.92,1209.82 1284.51,1209.82 1285.1,1209.82 1285.68,1209.82 1286.27,1209.82 1286.86,1209.82 1287.44,1209.82 1288.03,1209.82 1288.61,1209.82 1289.2,1209.82 1289.79,1209.82 1290.37,1209.82 1290.96,1209.82 1291.55,1209.82 1292.13,1209.82 1292.72,1209.82 1293.31,1209.82 1293.89,1209.82 1294.48,1209.82 1295.06,1209.82 1295.65,1209.82 1296.24,1209.82 1296.82,1209.82 1297.41,1209.82 1298,1209.82 1298.58,1209.82 1299.17,1209.82 1299.76,1209.82 1300.34,1209.82 1300.93,1209.82 1301.52,1209.82 1302.1,1209.82 1302.69,1209.82 1303.27,1209.82 1303.86,1209.82 1304.45,1209.82 1305.03,1209.82 1305.62,1209.82 1306.21,1209.82 1306.79,1209.82 1307.38,1209.82 1307.97,1209.82 1308.55,1209.82 1309.14,1209.82 1309.73,1209.82 1310.31,1209.82 1310.9,1209.82 1311.48,1209.82 1312.07,1209.82 1312.66,1209.82 1313.24,1209.82 1313.83,1209.82 1314.42,1209.82 1315,1209.82 1315.59,1209.82 1316.18,1209.82 1316.76,1209.82 1317.35,1209.82 1317.93,1209.82 1318.52,1209.82 1319.11,1209.82 1319.69,1209.82 1320.28,1209.82 1320.87,1209.82 1321.45,1209.82 1322.04,1209.82 1322.63,1209.82 1323.21,1209.82 1323.8,1209.82 1324.39,1209.82 1324.97,1209.82 1325.56,1209.82 1326.14,1209.82 1326.73,1209.82 1327.32,1209.82 1327.9,1209.82 1328.49,1209.82 1329.08,1209.82 1329.66,1209.82 1330.25,1209.82 1330.84,1209.82 1331.42,1209.82 1332.01,1209.82 1332.6,1209.82 1333.18,1209.82 1333.77,1209.82 1334.35,1209.82 1334.94,1209.82 1335.53,1209.82 1336.11,1209.82 1336.7,1209.82 1337.29,1209.82 1337.87,1209.82 1338.46,1209.82 1339.05,1209.82 1339.63,1209.82 1340.22,1209.82 1340.8,1209.82 1341.39,1209.82 1341.98,1209.82 1342.56,1209.82 1343.15,1209.82 1343.74,1209.82 1344.32,1209.82 1344.91,1209.82 1345.5,1209.82 1346.08,1209.82 1346.67,1209.82 1347.26,1209.82 1347.84,1209.82 1348.43,1209.82 1349.01,1209.82 1349.6,1209.82 1350.19,1209.82 1350.77,1209.82 1351.36,1209.82 1351.95,1209.82 1352.53,1209.82 1353.12,1209.82 1353.71,1209.82 1354.29,1209.82 1354.88,1209.82 1355.47,1209.82 1356.05,1209.82 1356.64,1209.82 1357.22,1209.82 1357.81,1209.82 1358.4,1209.82 1358.98,1209.82 1359.57,1209.82 1360.16,1209.82 1360.74,1209.82 1361.33,1209.82 1361.92,1209.82 1362.5,1209.82 1363.09,1209.82 1363.68,1209.82 1364.26,1209.82 1364.85,1209.82 1365.43,1209.82 1366.02,1209.82 1366.61,1209.82 1367.19,1209.82 1367.78,1209.82 1368.37,1209.82 1368.95,1209.82 1369.54,1209.82 1370.13,1209.82 1370.71,1209.82 1371.3,1209.82 1371.88,1209.82 1372.47,1209.82 1373.06,1209.82 1373.64,1209.82 1374.23,1209.82 1374.82,1209.82 1375.4,1209.82 1375.99,1209.82 1376.58,1209.82 1377.16,1209.82 1377.75,1209.82 1378.34,1209.82 1378.92,1209.82 1379.51,1209.82 1380.09,1209.82 1380.68,1209.82 1381.27,1209.82 1381.85,1209.82 1382.44,1209.82 1383.03,1209.82 1383.61,1209.82 1384.2,1209.82 1384.79,1209.82 1385.37,1209.82 1385.96,1209.82 1386.55,1209.82 1387.13,1209.82 1387.72,1209.82 1388.3,1209.82 1388.89,1209.82 1389.48,1209.82 1390.06,1209.82 1390.65,1209.82 1391.24,1209.82 1391.82,1209.82 1392.41,1209.82 1393,1209.82 1393.58,1209.82 1394.17,1209.82 1394.75,1209.82 1395.34,1209.82 1395.93,1209.82 1396.51,1209.82 1397.1,1209.82 1397.69,1209.82 1398.27,1209.82 1398.86,1209.82 1399.45,1209.82 1400.03,1209.82 1400.62,1209.82 1401.21,1209.82 1401.79,1209.82 1402.38,1209.82 1402.96,1209.82 1403.55,1209.82 1404.14,1209.82 1404.72,1209.82 1405.31,1209.82 1405.9,1209.82 1406.48,1209.82 1407.07,1209.82 1407.66,1209.82 1408.24,1209.82 1408.83,1209.82 1409.42,1209.82 1410,1209.82 1410.59,1209.82 1411.17,1209.82 1411.76,1209.82 1412.35,1209.82 1412.93,1209.82 1413.52,1209.82 1414.11,1209.82 1414.69,1209.82 1415.28,1209.82 1415.87,1209.82 1416.45,1209.82 1417.04,1209.82 1417.63,1209.82 1418.21,1209.82 1418.8,1209.82 1419.38,1209.82 1419.97,1209.82 1420.56,1209.82 1421.14,1209.82 1421.73,1209.82 1422.32,1209.82 1422.9,1209.82 1423.49,1209.82 1424.08,1209.82 1424.66,1209.82 1425.25,1209.82 1425.83,1209.82 1426.42,1209.82 1427.01,1209.82 1427.59,1209.82 1428.18,1209.82 1428.77,1209.82 1429.35,1209.82 1429.94,1209.82 1430.53,1209.82 1431.11,1209.82 1431.7,1209.82 1432.29,1209.82 1432.87,1209.82 1433.46,1209.82 1434.04,1209.82 1434.63,1209.82 1435.22,1209.82 1435.8,1209.82 1436.39,1209.82 1436.98,1209.82 1437.56,1209.82 1438.15,1209.82 1438.74,1209.82 1439.32,1209.82 1439.91,1209.82 1440.5,1209.82 1441.08,1209.82 1441.67,1209.82 1442.25,1209.82 1442.84,1209.82 1443.43,1209.82 1444.01,1209.82 1444.6,1209.82 1445.19,1209.82 1445.77,1209.82 1446.36,1209.82 1446.95,1209.82 1447.53,1209.82 1448.12,1209.82 1448.7,1209.82 1449.29,1209.82 1449.88,1209.82 1450.46,1209.82 1451.05,1209.82 1451.64,1209.82 1452.22,1209.82 1452.81,1209.82 1453.4,1209.82 1453.98,1209.82 1454.57,1209.82 1455.16,1209.82 1455.74,1209.82 1456.33,1209.82 1456.91,1209.82 1457.5,1209.82 1458.09,1209.82 1458.67,1209.82 1459.26,1209.82 1459.85,1209.82 1460.43,1209.82 1461.02,1209.82 1461.61,1209.82 1462.19,1209.82 1462.78,1209.82 1463.37,1209.82 1463.95,1209.82 1464.54,1209.82 1465.12,1209.82 1465.71,1209.82 1466.3,1209.82 1466.88,1209.82 1467.47,1209.82 1468.06,1209.82 1468.64,1209.82 1469.23,1209.82 1469.82,1209.82 1470.4,1209.82 1470.99,1209.82 1471.57,1209.82 1472.16,1209.82 1472.75,1209.82 1473.33,1209.82 1473.92,1209.82 1474.51,1209.82 1475.09,1209.82 1475.68,1209.82 1476.27,1209.82 1476.85,1209.82 1477.44,1209.82 1478.03,1209.82 1478.61,1209.82 1479.2,1209.82 1479.78,1209.82 1480.37,1209.82 1480.96,1209.82 1481.54,1209.82 1482.13,1209.82 1482.72,1209.82 1483.3,1209.82 1483.89,1209.82 1484.48,1209.82 1485.06,1209.82 1485.65,1209.82 1486.24,1209.82 1486.82,1209.82 1487.41,1209.82 1487.99,1209.82 1488.58,1209.82 1489.17,1209.82 1489.75,1209.82 1490.34,1209.82 1490.93,1209.82 1491.51,1209.82 1492.1,1209.82 1492.69,1209.82 1493.27,1209.82 1493.86,1209.82 1494.45,1209.82 1495.03,1209.82 1495.62,1209.82 1496.2,1209.82 1496.79,1209.82 1497.38,1209.82 1497.96,1209.82 1498.55,1209.82 1499.14,1209.82 1499.72,1209.82 1500.31,1209.82 1500.9,1209.82 1501.48,1209.82 1502.07,1209.82 1502.65,1209.82 1503.24,1209.82 1503.83,1209.82 1504.41,1209.82 1505,1209.82 1505.59,1209.82 1506.17,1209.82 1506.76,1209.82 1507.35,1209.82 1507.93,1209.82 1508.52,1209.82 1509.11,1209.82 1509.69,1209.82 1510.28,1209.82 1510.86,1209.82 1511.45,1209.82 1512.04,1209.82 1512.62,1209.82 1513.21,1209.82 1513.8,1209.82 1514.38,1209.82 1514.97,1209.82 1515.56,1209.82 1516.14,1209.82 1516.73,1209.82 1517.32,1209.82 1517.9,1209.82 1518.49,1209.82 1519.07,1209.82 1519.66,1209.82 1520.25,1209.82 1520.83,1209.82 1521.42,1209.82 1522.01,1209.82 1522.59,1209.82 1523.18,1209.82 1523.77,1209.82 1524.35,1209.82 1524.94,1209.82 1525.52,1209.82 1526.11,1209.82 1526.7,1209.82 1527.28,1209.82 1527.87,1209.82 1528.46,1209.82 1529.04,1209.82 1529.63,1209.82 1530.22,1209.82 1530.8,1209.82 1531.39,1209.82 1531.98,1209.82 1532.56,1209.82 1533.15,1209.82 1533.73,1209.82 1534.32,1209.82 1534.91,1209.82 1535.49,1209.82 1536.08,1209.82 1536.67,1209.82 1537.25,1209.82 1537.84,1209.82 1538.43,1209.82 1539.01,1209.82 1539.6,1209.82 1540.19,1209.82 1540.77,1209.82 1541.36,1209.82 1541.94,1209.82 1542.53,1209.82 1543.12,1209.82 1543.7,1209.82 1544.29,1209.82 1544.88,1209.82 1545.46,1209.82 1546.05,1209.82 1546.64,1209.82 1547.22,1209.82 1547.81,1209.82 1548.4,1209.82 1548.98,1209.82 1549.57,1209.82 1550.15,1209.82 1550.74,1209.82 1551.33,1209.82 1551.91,1209.82 1552.5,1209.82 1553.09,1209.82 1553.67,1209.82 1554.26,1209.82 1554.85,1209.82 1555.43,1209.82 1556.02,1209.82 1556.6,1209.82 1557.19,1209.82 1557.78,1209.82 1558.36,1209.82 1558.95,1209.82 1559.54,1209.82 1560.12,1209.82 1560.71,1209.82 1561.3,1209.82 1561.88,1209.82 1562.47,1209.82 1563.06,1209.82 1563.64,1209.82 1564.23,1209.82 1564.81,1209.82 1565.4,1209.82 1565.99,1209.82 1566.57,1209.82 1567.16,1209.82 1567.75,1209.82 1568.33,1209.82 1568.92,1209.82 1569.51,1209.82 1570.09,1209.82 1570.68,1209.82 1571.27,1209.82 1571.85,1209.82 1572.44,1209.82 1573.02,1209.82 1573.61,1209.82 1574.2,1209.82 1574.78,1209.82 1575.37,1209.82 1575.96,1209.82 1576.54,1209.82 1577.13,1209.82 1577.72,1209.82 1578.3,1209.82 1578.89,1209.82 1579.47,1209.82 1580.06,1209.82 1580.65,1209.82 1581.23,1209.82 1581.82,1209.82 1582.41,1209.82 1582.99,1209.82 1583.58,1209.82 1584.17,1209.82 1584.75,1209.82 1585.34,1209.82 1585.93,1209.82 1586.51,1209.82 1587.1,1209.82 1587.68,1209.82 1588.27,1209.82 1588.86,1209.82 1589.44,1209.82 1590.03,1209.82 1590.62,1209.82 1591.2,1209.82 1591.79,1209.82 1592.38,1209.82 1592.96,1209.82 1593.55,1209.82 1594.14,1209.82 1594.72,1209.82 1595.31,1209.82 1595.89,1209.82 1596.48,1209.82 1597.07,1209.82 1597.65,1209.82 1598.24,1209.82 1598.83,1209.82 1599.41,1209.82 1600,1209.82 1600.59,1209.82 1601.17,1209.82 1601.76,1209.82 1602.34,1209.82 1602.93,1209.82 1603.52,1209.82 1604.1,1209.82 1604.69,1209.82 1605.28,1209.82 1605.86,1209.82 1606.45,1209.82 1607.04,1209.82 1607.62,1209.82 1608.21,1209.82 1608.8,1209.82 1609.38,1209.82 1609.97,1209.82 1610.55,1209.82 1611.14,1209.82 1611.73,1209.82 1612.31,1209.82 1612.9,1209.82 1613.49,1209.82 1614.07,1209.82 1614.66,1209.82 1615.25,1209.82 1615.83,1209.82 1616.42,1209.82 1617.01,1209.82 1617.59,1209.82 1618.18,1209.82 1618.76,1209.82 1619.35,1209.82 1619.94,1209.82 1620.52,1209.82 1621.11,1209.82 1621.7,1209.82 1622.28,1209.82 1622.87,1209.82 1623.46,1209.82 1624.04,1209.82 1624.63,1209.82 1625.22,1209.82 1625.8,1209.82 1626.39,1209.82 1626.97,1209.82 1627.56,1209.82 1628.15,1209.82 1628.73,1209.82 1629.32,1209.82 1629.91,1209.82 1630.49,1209.82 1631.08,1209.82 1631.67,1209.82 1632.25,1209.82 1632.84,1209.82 1633.42,1209.82 1634.01,1209.82 1634.6,1209.82 1635.18,1209.82 1635.77,1209.82 1636.36,1209.82 1636.94,1209.82 1637.53,1209.82 1638.12,1209.82 1638.7,1209.82 1639.29,1209.82 1639.88,1209.82 1640.46,1209.82 1641.05,1209.82 1641.63,1209.82 1642.22,1209.82 1642.81,1209.82 1643.39,1209.82 1643.98,1209.82 1644.57,1209.82 1645.15,1209.82 1645.74,1209.82 1646.33,1209.82 1646.91,1209.82 1647.5,1209.82 1648.09,1209.82 1648.67,1209.82 1649.26,1209.82 1649.84,1209.82 1650.43,1209.82 1651.02,1209.82 1651.6,1209.82 1652.19,1209.82 1652.78,1209.82 1653.36,1209.82 1653.95,1209.82 1654.54,1209.82 1655.12,1209.82 1655.71,1209.82 1656.29,1209.82 1656.88,1209.82 1657.47,1209.82 1658.05,1209.82 1658.64,1209.82 1659.23,1209.82 1659.81,1209.82 1660.4,1209.82 1660.99,1209.82 1661.57,1209.82 1662.16,1209.82 1662.75,1209.82 1663.33,1209.82 1663.92,1209.82 1664.5,1209.82 1665.09,1209.82 1665.68,1209.82 1666.26,1209.82 1666.85,1209.82 1667.44,1209.82 1668.02,1209.82 1668.61,1209.82 1669.2,1209.82 1669.78,1209.82 1670.37,1209.82 1670.96,1209.82 1671.54,1209.82 1672.13,1209.82 1672.71,1209.82 1673.3,1209.82 1673.89,1209.82 1674.47,1209.82 1675.06,1209.82 1675.65,1209.82 1676.23,1209.82 1676.82,1209.82 1677.41,1209.82 1677.99,1209.82 1678.58,1209.82 1679.17,1209.82 1679.75,1209.82 1680.34,1209.82 1680.92,1209.82 1681.51,1209.82 1682.1,1209.82 1682.68,1209.82 1683.27,1209.82 1683.86,1209.82 1684.44,1209.82 1685.03,1209.82 1685.62,1209.82 1686.2,1209.82 1686.79,1209.82 1687.37,1209.82 1687.96,1209.82 1688.55,1209.82 1689.13,1209.82 1689.72,1209.82 1690.31,1209.82 1690.89,1209.82 1691.48,1209.82 1692.07,1209.82 1692.65,1209.82 1693.24,1209.82 1693.83,1209.82 1694.41,1209.82 1695,1209.82 1695.58,1209.82 1696.17,1209.82 1696.76,1209.82 1697.34,1209.82 1697.93,1209.82 1698.52,1209.82 1699.1,1209.82 1699.69,1209.82 1700.28,1209.82 1700.86,1209.82 1701.45,1209.82 1702.04,1209.82 1702.62,1209.82 1703.21,1209.82 1703.79,1209.82 1704.38,1209.82 1704.97,1209.82 1705.55,1209.82 1706.14,1209.82 1706.73,1209.82 1707.31,1209.82 1707.9,1209.82 1708.49,1209.82 1709.07,1209.82 1709.66,1209.82 1710.24,1209.82 1710.83,1209.82 1711.42,1209.82 1712,1209.82 1712.59,1209.82 1713.18,1209.82 1713.76,1209.82 1714.35,1209.82 1714.94,1209.82 1715.52,1209.82 1716.11,1209.82 1716.7,1209.82 1717.28,1209.82 1717.87,1209.82 1718.45,1209.82 1719.04,1209.82 1719.63,1209.82 1720.21,1209.82 1720.8,1209.82 1721.39,1209.82 1721.97,1209.82 1722.56,1209.82 1723.15,1209.82 1723.73,1209.82 1724.32,1209.82 1724.91,1209.82 1725.49,1209.82 1726.08,1209.82 1726.66,1209.82 1727.25,1209.82 1727.84,1209.82 1728.42,1209.82 1729.01,1209.82 1729.6,1209.82 1730.18,1209.82 1730.77,1209.82 1731.36,1209.82 1731.94,1209.82 1732.53,1209.82 1733.11,1209.82 1733.7,1209.82 1734.29,1209.82 1734.87,1209.82 1735.46,1209.82 1736.05,1209.82 1736.63,1209.82 1737.22,1209.82 1737.81,1209.82 1738.39,1209.82 1738.98,1209.82 1739.57,1209.82 1740.15,1209.82 1740.74,1209.82 1741.32,1209.82 1741.91,1209.82 1742.5,1209.82 1743.08,1209.82 1743.67,1209.82 1744.26,1209.82 1744.84,1209.82 1745.43,1209.82 1746.02,1209.82 1746.6,1209.82 1747.19,1209.82 1747.78,1209.82 1748.36,1209.82 1748.95,1209.82 1749.53,1209.82 1750.12,1209.82 1750.71,1209.82 1751.29,1209.82 1751.88,1209.82 1752.47,1209.82 1753.05,1209.82 1753.64,1209.82 1754.23,1209.82 1754.81,1209.82 1755.4,1209.82 1755.99,1209.82 1756.57,1209.82 1757.16,1209.82 1757.74,1209.82 1758.33,1209.82 1758.92,1209.82 1759.5,1209.82 1760.09,1209.82 1760.68,1209.82 1761.26,1209.82 1761.85,1209.82 1762.44,1209.82 1763.02,1209.82 1763.61,1209.82 1764.19,1209.82 1764.78,1209.82 1765.37,1209.82 1765.95,1209.82 1766.54,1209.82 1767.13,1209.82 1767.71,1209.82 1768.3,1209.82 1768.89,1209.82 1769.47,1209.82 1770.06,1209.82 1770.65,1209.82 1771.23,1209.82 1771.82,1209.82 1772.4,1209.82 1772.99,1209.82 1773.58,1209.82 1774.16,1209.82 1774.75,1209.82 1775.34,1209.82 1775.92,1209.82 1776.51,1209.82 1777.1,1209.82 1777.68,1209.82 1778.27,1209.82 1778.86,1209.82 1779.44,1209.82 1780.03,1209.82 1780.61,1209.82 1781.2,1209.82 1781.79,1209.82 1782.37,1209.82 1782.96,1209.82 1783.55,1209.82 1784.13,1209.82 1784.72,1209.82 1785.31,1209.82 1785.89,1209.82 1786.48,1209.82 1787.06,1209.82 1787.65,1209.82 1788.24,1209.82 1788.82,1209.82 1789.41,1209.82 1790,1209.82 1790.58,1209.82 1791.17,1209.82 1791.76,1209.82 1792.34,1209.82 1792.93,1209.82 1793.52,1209.82 1794.1,1209.82 1794.69,1209.82 1795.27,1209.82 1795.86,1209.82 1796.45,1209.82 1797.03,1209.82 1797.62,1209.82 1798.21,1209.82 1798.79,1209.82 1799.38,1209.82 1799.97,1209.82 1800.55,1209.82 1801.14,1209.82 1801.73,1209.82 1802.31,1209.82 1802.9,1209.82 1803.48,1209.82 1804.07,1209.82 1804.66,1209.82 1805.24,1209.82 1805.83,1209.82 1806.42,1209.82 1807,1209.82 1807.59,1209.82 1808.18,1209.82 1808.76,1209.82 1809.35,1209.82 1809.94,1209.82 1810.52,1209.82 1811.11,1209.82 1811.69,1209.82 1812.28,1209.82 1812.87,1209.82 1813.45,1209.82 1814.04,1209.82 1814.63,1209.82 1815.21,1209.82 1815.8,1209.82 1816.39,1209.82 1816.97,1209.82 1817.56,1209.82 1818.14,1209.82 1818.73,1209.82 1819.32,1209.82 1819.9,1209.82 1820.49,1209.82 1821.08,1209.82 1821.66,1209.82 1822.25,1209.82 1822.84,1209.82 1823.42,1209.82 1824.01,1209.82 1824.6,1209.82 1825.18,1209.82 1825.77,1209.82 1826.35,1209.82 1826.94,1209.82 1827.53,1209.82 1828.11,1209.82 1828.7,1209.82 1829.29,1209.82 1829.87,1209.82 1830.46,1209.82 1831.05,1209.82 1831.63,1209.82 1832.22,1209.82 1832.81,1209.82 1833.39,1209.82 1833.98,1209.82 1834.56,1209.82 1835.15,1209.82 1835.74,1209.82 1836.32,1209.82 1836.91,1209.82 1837.5,1209.82 1838.08,1209.82 1838.67,1209.82 1839.26,1209.82 1839.84,1209.82 1840.43,1209.82 1841.01,1209.82 1841.6,1209.82 1842.19,1209.82 1842.77,1209.82 1843.36,1209.82 1843.95,1209.82 1844.53,1209.82 1845.12,1209.82 1845.71,1209.82 1846.29,1209.82 1846.88,1209.82 1847.47,1209.82 1848.05,1209.82 1848.64,1209.82 1849.22,1209.82 1849.81,1209.82 1850.4,1209.82 1850.98,1209.82 1851.57,1209.82 1852.16,1209.82 1852.74,1209.82 1853.33,1209.82 1853.92,1209.82 1854.5,1209.82 1855.09,1209.82 1855.68,1209.82 1856.26,1209.82 1856.85,1209.82 1857.43,1209.82 1858.02,1209.82 1858.61,1209.82 1859.19,1209.82 1859.78,1209.82 1860.37,1209.82 1860.95,1209.82 1861.54,1209.82 1862.13,1209.82 1862.71,1209.82 1863.3,1209.82 1863.88,1209.82 1864.47,1209.82 1865.06,1209.82 1865.64,1209.82 1866.23,1209.82 1866.82,1209.82 1867.4,1209.82 1867.99,1209.82 1868.58,1209.82 1869.16,1209.82 1869.75,1209.82 1870.34,1209.82 1870.92,1209.82 1871.51,1209.82 1872.09,1209.82 1872.68,1209.82 1873.27,1209.82 1873.85,1209.82 1874.44,1209.82 1875.03,1209.82 1875.61,1209.82 1876.2,1209.82 1876.79,1209.82 1877.37,1209.82 1877.96,1209.82 1878.55,1209.82 1879.13,1209.82 1879.72,1209.82 1880.3,1209.82 1880.89,1209.82 1881.48,1209.82 1882.06,1209.82 1882.65,1209.82 1883.24,1209.82 1883.82,1209.82 1884.41,1209.82 1885,1209.82 1885.58,1209.82 1886.17,1209.82 1886.76,1209.82 1887.34,1209.82 1887.93,1209.82 1888.51,1209.82 1889.1,1209.82 1889.69,1209.82 1890.27,1209.82 1890.86,1209.82 1891.45,1209.82 1892.03,1209.82 1892.62,1209.82 1893.21,1209.82 1893.79,1209.82 1894.38,1209.82 1894.96,1209.82 1895.55,1209.82 1896.14,1209.82 1896.72,1209.82 1897.31,1209.82 1897.9,1209.82 1898.48,1209.82 1899.07,1209.82 1899.66,1209.82 1900.24,1209.82 1900.83,1209.82 1901.42,1209.82 1902,1209.82 1902.59,1209.82 1903.17,1209.82 1903.76,1209.82 1904.35,1209.82 1904.93,1209.82 1905.52,1209.82 1906.11,1209.82 1906.69,1209.82 1907.28,1209.82 1907.87,1209.82 1908.45,1209.82 1909.04,1209.82 1909.63,1209.82 1910.21,1209.82 1910.8,1209.82 1911.38,1209.82 1911.97,1209.82 1912.56,1209.82 1913.14,1209.82 1913.73,1209.82 1914.32,1209.82 1914.9,1209.82 1915.49,1209.82 1916.08,1209.82 1916.66,1209.82 1917.25,1209.82 1917.83,1209.82 1918.42,1209.82 1919.01,1209.82 1919.59,1209.82 1920.18,1209.82 1920.77,1209.82 1921.35,1209.82 1921.94,1209.82 1922.53,1209.82 1923.11,1209.82 1923.7,1209.82 1924.29,1209.82 1924.87,1209.82 1925.46,1209.82 1926.04,1209.82 1926.63,1209.82 1927.22,1209.82 1927.8,1209.82 1928.39,1209.82 1928.98,1209.82 1929.56,1209.82 1930.15,1209.82 1930.74,1209.82 1931.32,1209.82 1931.91,1209.82 1932.5,1209.82 1933.08,1209.82 1933.67,1209.82 1934.25,1209.82 1934.84,1209.82 1935.43,1209.82 1936.01,1209.82 1936.6,1209.82 1937.19,1209.82 1937.77,1209.82 1938.36,1209.82 1938.95,1209.82 1939.53,1209.82 1940.12,1209.82 1940.71,1209.82 1941.29,1209.82 1941.88,1209.82 1942.46,1209.82 1943.05,1209.82 1943.64,1209.82 1944.22,1209.82 1944.81,1209.82 1945.4,1209.82 1945.98,1209.82 1946.57,1209.82 1947.16,1209.82 1947.74,1209.82 1948.33,1209.82 1948.91,1209.82 1949.5,1209.82 1950.09,1209.82 1950.67,1209.82 1951.26,1209.82 1951.85,1209.82 1952.43,1209.82 1953.02,1209.82 1953.61,1209.82 1954.19,1209.82 1954.78,1209.82 1955.37,1209.82 1955.95,1209.82 1956.54,1209.82 1957.12,1209.82 1957.71,1209.82 1958.3,1209.82 1958.88,1209.82 1959.47,1209.82 1960.06,1209.82 1960.64,1209.82 1961.23,1209.82 1961.82,1209.82 1962.4,1209.82 1962.99,1209.82 1963.58,1209.82 1964.16,1209.82 1964.75,1209.82 1965.33,1209.82 1965.92,1209.82 1966.51,1209.82 1967.09,1209.82 1967.68,1209.82 1968.27,1209.82 1968.85,1209.82 1969.44,1209.82 1970.03,1209.82 1970.61,1209.82 1971.2,1209.82 1971.78,1209.82 1972.37,1209.82 1972.96,1209.82 1973.54,1209.82 1974.13,1209.82 1974.72,1209.82 1975.3,1209.82 1975.89,1209.82 1976.48,1209.82 1977.06,1209.82 1977.65,1209.82 1978.24,1209.82 1978.82,1209.82 1979.41,1209.82 1979.99,1209.82 1980.58,1209.82 1981.17,1209.82 1981.75,1209.82 1982.34,1209.82 1982.93,1209.82 1983.51,1209.82 1984.1,1209.82 1984.69,1209.82 1985.27,1209.82 1985.86,1209.82 1986.45,1209.82 1987.03,1209.82 1987.62,1209.82 1988.2,1209.82 1988.79,1209.82 1989.38,1209.82 1989.96,1209.82 1990.55,1209.82 1991.14,1209.82 1991.72,1209.82 1992.31,1209.82 1992.9,1209.82 1993.48,1209.82 1994.07,1209.82 1994.65,1209.82 1995.24,1209.82 1995.83,1209.82 1996.41,1209.82 1997,1209.82 1997.59,1209.82 1998.17,1209.82 1998.76,1209.82 1999.35,1209.82 1999.93,1209.82 2000.52,1209.82 2001.11,1209.82 2001.69,1209.82 2002.28,1209.82 2002.86,1209.82 2003.45,1209.82 2004.04,1209.82 2004.62,1209.82 2005.21,1209.82 2005.8,1209.82 2006.38,1209.82 2006.97,1209.82 2007.56,1209.82 2008.14,1209.82 2008.73,1209.82 2009.32,1209.82 2009.9,1209.82 2010.49,1209.82 2011.07,1209.82 2011.66,1209.82 2012.25,1209.82 2012.83,1209.82 2013.42,1209.82 2014.01,1209.82 2014.59,1209.82 2015.18,1209.82 2015.77,1209.82 2016.35,1209.82 2016.94,1209.82 2017.53,1209.82 2018.11,1209.82 2018.7,1209.82 2019.28,1209.82 2019.87,1209.82 2020.46,1209.82 2021.04,1209.82 2021.63,1209.82 2022.22,1209.82 2022.8,1209.82 2023.39,1209.82 2023.98,1209.82 2024.56,1209.82 2025.15,1209.82 2025.73,1209.82 2026.32,1209.82 2026.91,1209.82 2027.49,1209.82 2028.08,1209.82 2028.67,1209.82 2029.25,1209.82 2029.84,1209.82 2030.43,1209.82 2031.01,1209.82 2031.6,1209.82 2032.19,1209.82 2032.77,1209.82 2033.36,1209.82 2033.94,1209.82 2034.53,1209.82 2035.12,1209.82 2035.7,1209.82 2036.29,1209.82 2036.88,1209.82 2037.46,1209.82 2038.05,1209.82 2038.64,1209.82 2039.22,1209.82 2039.81,1209.82 2040.4,1209.82 2040.98,1209.82 2041.57,1209.82 2042.15,1209.82 2042.74,1209.82 2043.33,1209.82 2043.91,1209.82 2044.5,1209.82 2045.09,1209.82 2045.67,1209.82 2046.26,1209.82 2046.85,1209.82 2047.43,1209.82 2048.02,1209.82 2048.6,1209.82 2049.19,1209.82 2049.78,1209.82 2050.36,1209.82 2050.95,1209.82 2051.54,1209.82 2052.12,1209.82 2052.71,1209.82 2053.3,1209.82 2053.88,1209.82 2054.47,1209.82 2055.06,1209.82 2055.64,1209.82 2056.23,1209.82 2056.81,1209.82 2057.4,1209.82 2057.99,1209.82 2058.57,1209.82 2059.16,1209.82 2059.75,1209.82 2060.33,1209.82 2060.92,1209.82 2061.51,1209.82 2062.09,1209.82 2062.68,1209.82 2063.27,1209.82 2063.85,1209.82 2064.44,1209.82 2065.02,1209.82 2065.61,1209.82 2066.2,1209.82 2066.78,1209.82 2067.37,1209.82 2067.96,1209.82 2068.54,1209.82 2069.13,1209.82 2069.72,1209.82 2070.3,1209.82 2070.89,1209.82 2071.48,1209.82 2072.06,1209.82 2072.65,1209.82 2073.23,1209.82 2073.82,1209.82 2074.41,1209.82 2074.99,1209.82 2075.58,1209.82 2076.17,1209.82 2076.75,1209.82 2077.34,1209.82 2077.93,1209.82 2078.51,1209.82 2079.1,1209.82 2079.68,1209.82 2080.27,1209.82 2080.86,1209.82 2081.44,1209.82 2082.03,1209.82 2082.62,1209.82 2083.2,1209.82 2083.79,1209.82 2084.38,1209.82 2084.96,1209.82 2085.55,1209.82 2086.14,1209.82 2086.72,1209.82 2087.31,1209.82 2087.89,1209.82 2088.48,1209.82 2089.07,1209.82 2089.65,1209.82 2090.24,1209.82 2090.83,1209.82 2091.41,1209.82 2092,1209.82 2092.59,1209.82 2093.17,1209.82 2093.76,1209.82 2094.35,1209.82 2094.93,1209.82 2095.52,1209.82 2096.1,1209.82 2096.69,1209.82 2097.28,1209.82 2097.86,1209.82 2098.45,1209.82 2099.04,1209.82 2099.62,1209.82 2100.21,1209.82 2100.8,1209.82 2101.38,1209.82 2101.97,1209.82 2102.55,1209.82 2103.14,1209.82 2103.73,1209.82 2104.31,1209.82 2104.9,1209.82 2105.49,1209.82 2106.07,1209.82 2106.66,1209.82 2107.25,1209.82 2107.83,1209.82 2108.42,1209.82 2109.01,1209.82 2109.59,1209.82 2110.18,1209.82 2110.76,1209.82 2111.35,1209.82 2111.94,1209.82 2112.52,1209.82 2113.11,1209.82 2113.7,1209.82 2114.28,1209.82 2114.87,1209.82 2115.46,1209.82 2116.04,1209.82 2116.63,1209.82 2117.22,1209.82 2117.8,1209.82 2118.39,1209.82 2118.97,1209.82 2119.56,1209.82 2120.15,1209.82 2120.73,1209.82 2121.32,1209.82 2121.91,1209.82 2122.49,1209.82 2123.08,1209.82 2123.67,1209.82 2124.25,1209.82 2124.84,1209.82 2125.42,1209.82 2126.01,1209.82 2126.6,1209.82 2127.18,1209.82 2127.77,1209.82 2128.36,1209.82 2128.94,1209.82 2129.53,1209.82 2130.12,1209.82 2130.7,1209.82 2131.29,1209.82 2131.88,1209.82 2132.46,1209.82 2133.05,1209.82 2133.63,1209.82 2134.22,1209.82 2134.81,1209.82 2135.39,1209.82 2135.98,1209.82 2136.57,1209.82 2137.15,1209.82 2137.74,1209.82 2138.33,1209.82 2138.91,1209.82 2139.5,1209.82 2140.09,1209.82 2140.67,1209.82 2141.26,1209.82 2141.84,1209.82 2142.43,1209.82 2143.02,1209.82 2143.6,1209.82 2144.19,1209.82 2144.78,1209.82 2145.36,1209.82 2145.95,1209.82 2146.54,1209.82 2147.12,1209.82 2147.71,1209.82 2148.3,1209.82 2148.88,1209.82 2149.47,1209.82 2150.05,1209.82 2150.64,1209.82 2151.23,1209.82 2151.81,1209.82 2152.4,1209.82 2152.99,1209.82 2153.57,1209.82 2154.16,1209.82 2154.75,1209.82 2155.33,1209.82 2155.92,1209.82 2156.5,1209.82 2157.09,1209.82 2157.68,1209.82 2158.26,1209.82 \"/>\n<path clip-path=\"url(#clip402)\" d=\"M986.025 1209.68 L986.612 1209.68 L987.198 1209.68 L987.785 1209.68 L988.371 1209.68 L988.957 1209.68 L989.544 1209.68 L990.13 1209.68 L990.717 1209.68 L991.303 1209.68 L991.889 1209.68 L992.476 1209.68 L993.062 1209.68 L993.649 1209.68 L994.235 1209.68 L994.822 1209.68 L995.408 1209.68 L995.994 1209.68 L996.581 1209.68 L997.167 1209.68 L997.754 1209.68 L998.34 1209.68 L998.926 1209.68 L999.513 1209.68 L1000.1 1209.68 L1000.69 1209.68 L1001.27 1209.68 L1001.86 1209.68 L1002.44 1209.68 L1003.03 1209.68 L1003.62 1209.68 L1004.2 1209.68 L1004.79 1209.68 L1005.38 1209.68 L1005.96 1209.68 L1006.55 1209.68 L1007.14 1209.68 L1007.72 1209.68 L1008.31 1209.68 L1008.9 1209.68 L1009.48 1209.68 L1010.07 1209.68 L1010.65 1209.68 L1011.24 1209.68 L1011.83 1209.68 L1012.41 1209.68 L1013 1209.68 L1013.59 1209.68 L1014.17 1209.68 L1014.76 1209.68 L1015.35 1209.68 L1015.93 1209.68 L1016.52 1209.68 L1017.11 1209.68 L1017.69 1209.68 L1018.28 1209.68 L1018.86 1209.68 L1019.45 1209.68 L1020.04 1209.68 L1020.62 1209.68 L1021.21 1209.68 L1021.8 1209.68 L1022.38 1209.68 L1022.97 1209.68 L1023.56 1209.68 L1024.14 1209.68 L1024.73 1209.68 L1025.32 1209.68 L1025.9 1209.68 L1026.49 1209.68 L1027.07 1209.68 L1027.66 1209.68 L1028.25 1209.68 L1028.83 1209.68 L1029.42 1209.68 L1030.01 1209.68 L1030.59 1209.68 L1031.18 1209.68 L1031.77 1209.68 L1032.35 1209.68 L1032.94 1209.68 L1033.52 1209.68 L1034.11 1209.68 L1034.7 1209.68 L1035.28 1209.68 L1035.87 1209.68 L1036.46 1209.68 L1037.04 1209.68 L1037.63 1209.68 L1038.22 1209.68 L1038.8 1209.68 L1039.39 1209.68 L1039.98 1209.68 L1040.56 1209.68 L1041.15 1209.68 L1041.73 1209.68 L1042.32 1209.68 L1042.91 1209.68 L1043.49 1209.68 L1044.08 1209.68 L1044.67 1209.68 L1045.25 1209.68 L1045.84 1209.68 L1046.43 1209.68 L1047.01 1209.68 L1047.6 1209.68 L1048.19 1209.68 L1048.77 1209.68 L1049.36 1209.68 L1049.94 1209.68 L1050.53 1209.68 L1051.12 1209.68 L1051.7 1209.68 L1052.29 1209.68 L1052.88 1209.68 L1053.46 1209.68 L1054.05 1209.68 L1054.64 1209.68 L1055.22 1209.68 L1055.81 1209.68 L1056.39 1209.68 L1056.98 1209.68 L1057.57 1209.68 L1058.15 1209.68 L1058.74 1209.68 L1059.33 1209.68 L1059.91 1209.68 L1060.5 1209.68 L1061.09 1209.68 L1061.67 1209.68 L1062.26 1209.68 L1062.85 1209.68 L1063.43 1209.68 L1064.02 1209.68 L1064.6 1209.68 L1065.19 1209.68 L1065.78 1209.68 L1066.36 1209.68 L1066.95 1209.68 L1067.54 1209.68 L1068.12 1209.68 L1068.71 1209.68 L1069.3 1209.68 L1069.88 1209.68 L1070.47 1209.68 L1071.06 1209.68 L1071.64 1209.68 L1072.23 1209.68 L1072.81 1209.68 L1073.4 1209.68 L1073.99 1209.68 L1074.57 1209.68 L1075.16 1209.68 L1075.75 1209.68 L1076.33 1209.68 L1076.92 1209.68 L1077.51 1209.68 L1078.09 1209.68 L1078.68 1209.68 L1079.26 1209.68 L1079.85 1209.68 L1080.44 1209.68 L1081.02 1209.68 L1081.61 1209.68 L1082.2 1209.68 L1082.78 1209.68 L1083.37 1209.68 L1083.96 1209.68 L1084.54 1209.68 L1085.13 1209.68 L1085.72 1209.68 L1086.3 1209.68 L1086.89 1209.68 L1087.47 1209.68 L1088.06 1209.68 L1088.65 1209.68 L1089.23 1209.68 L1089.82 1209.68 L1090.41 1209.68 L1090.99 1209.68 L1091.58 1209.68 L1092.17 1209.68 L1092.75 1209.68 L1093.34 1209.68 L1093.93 1209.68 L1094.51 1209.68 L1095.1 1209.68 L1095.68 1209.68 L1096.27 1209.68 L1096.86 1209.68 L1097.44 1209.68 L1098.03 1209.68 L1098.62 1209.68 L1099.2 1209.68 L1099.79 1209.68 L1100.38 1209.68 L1100.96 1209.68 L1101.55 1209.68 L1102.14 1209.68 L1102.72 1209.68 L1103.31 1209.68 L1103.89 1209.68 L1104.48 1209.68 L1105.07 1209.68 L1105.65 1209.68 L1106.24 1209.68 L1106.83 1209.68 L1107.41 1209.68 L1108 1209.68 L1108.59 1209.68 L1109.17 1209.68 L1109.76 1209.68 L1110.34 1209.68 L1110.93 1209.68 L1111.52 1209.68 L1112.1 1209.68 L1112.69 1209.68 L1113.28 1209.68 L1113.86 1209.68 L1114.45 1209.68 L1115.04 1209.68 L1115.62 1209.68 L1116.21 1209.68 L1116.8 1209.68 L1117.38 1209.68 L1117.97 1209.68 L1118.55 1209.68 L1119.14 1209.68 L1119.73 1209.68 L1120.31 1209.68 L1120.9 1209.68 L1121.49 1209.68 L1122.07 1209.68 L1122.66 1209.68 L1123.25 1209.68 L1123.83 1209.68 L1124.42 1209.68 L1125.01 1209.68 L1125.59 1209.68 L1126.18 1209.68 L1126.76 1209.68 L1127.35 1209.68 L1127.94 1209.68 L1128.52 1209.68 L1129.11 1209.68 L1129.7 1209.68 L1130.28 1209.68 L1130.87 1209.68 L1131.46 1209.68 L1132.04 1209.68 L1132.63 1209.68 L1133.21 1209.68 L1133.8 1209.68 L1134.39 1209.68 L1134.97 1209.68 L1135.56 1209.68 L1136.15 1209.68 L1136.73 1209.68 L1137.32 1209.68 L1137.91 1209.68 L1138.49 1209.68 L1139.08 1209.68 L1139.67 1209.68 L1140.25 1209.68 L1140.84 1209.68 L1141.42 1209.68 L1142.01 1209.68 L1142.6 1209.68 L1143.18 1209.68 L1143.77 1209.68 L1144.36 1209.68 L1144.94 1209.68 L1145.53 1209.68 L1146.12 1209.68 L1146.7 1209.68 L1147.29 1209.68 L1147.88 1209.68 L1148.46 1209.68 L1149.05 1209.68 L1149.63 1209.68 L1150.22 1209.68 L1150.81 1209.68 L1151.39 1209.68 L1151.98 1209.68 L1152.57 1209.68 L1153.15 1209.68 L1153.74 1209.68 L1154.33 1209.68 L1154.91 1209.68 L1155.5 1209.68 L1156.09 1209.68 L1156.67 1209.68 L1157.26 1209.68 L1157.84 1209.68 L1158.43 1209.68 L1159.02 1209.68 L1159.6 1209.68 L1160.19 1209.68 L1160.78 1209.68 L1161.36 1209.68 L1161.95 1209.68 L1162.54 1209.68 L1163.12 1209.68 L1163.71 1209.68 L1164.29 1209.68 L1164.88 1209.68 L1165.47 1209.68 L1166.05 1209.68 L1166.64 1209.68 L1167.23 1209.68 L1167.81 1209.68 L1168.4 1209.68 L1168.99 1209.68 L1169.57 1209.68 L1170.16 1209.68 L1170.75 1209.68 L1171.33 1209.68 L1171.92 1209.68 L1172.5 1209.68 L1173.09 1209.68 L1173.68 1209.68 L1174.26 1209.68 L1174.85 1209.68 L1175.44 1209.68 L1176.02 1209.68 L1176.61 1209.68 L1177.2 1209.68 L1177.78 1209.68 L1178.37 1209.68 L1178.96 1209.68 L1179.54 1209.68 L1180.13 1209.68 L1180.71 1209.68 L1181.3 1209.68 L1181.89 1209.68 L1182.47 1209.68 L1183.06 1209.68 L1183.65 1209.68 L1184.23 1209.68 L1184.82 1209.68 L1185.41 1209.68 L1185.99 1209.68 L1186.58 1209.68 L1187.16 1209.68 L1187.75 1209.68 L1188.34 1209.68 L1188.92 1209.68 L1189.51 1209.68 L1190.1 1209.68 L1190.68 1209.68 L1191.27 1209.68 L1191.86 1209.68 L1192.44 1209.68 L1193.03 1209.68 L1193.62 1209.68 L1194.2 1209.68 L1194.79 1209.68 L1195.37 1209.68 L1195.96 1209.68 L1196.55 1209.68 L1197.13 1209.68 L1197.72 1209.68 L1198.31 1209.68 L1198.89 1209.68 L1199.48 1209.68 L1200.07 1209.68 L1200.65 1209.68 L1201.24 1209.68 L1201.83 1209.68 L1202.41 1209.68 L1203 1209.68 L1203.58 1209.68 L1204.17 1209.68 L1204.76 1209.68 L1205.34 1209.68 L1205.93 1209.68 L1206.52 1209.68 L1207.1 1209.68 L1207.69 1209.68 L1208.28 1209.68 L1208.86 1209.68 L1209.45 1209.68 L1210.03 1209.68 L1210.62 1209.68 L1211.21 1209.68 L1211.79 1209.68 L1212.38 1209.68 L1212.97 1209.68 L1213.55 1209.68 L1214.14 1209.68 L1214.73 1209.68 L1215.31 1209.68 L1215.9 1209.68 L1216.49 1209.68 L1217.07 1209.68 L1217.66 1209.68 L1218.24 1209.68 L1218.83 1209.68 L1219.42 1209.68 L1220 1209.68 L1220.59 1209.68 L1221.18 1209.68 L1221.76 1209.68 L1222.35 1209.68 L1222.94 1209.68 L1223.52 1209.68 L1224.11 1209.68 L1224.7 1209.68 L1225.28 1209.68 L1225.87 1209.68 L1226.45 1209.68 L1227.04 1209.68 L1227.63 1209.68 L1228.21 1209.68 L1228.8 1209.68 L1229.39 1209.68 L1229.97 1209.68 L1230.56 1209.68 L1231.15 1209.68 L1231.73 1209.68 L1232.32 1209.68 L1232.91 1209.68 L1233.49 1209.68 L1234.08 1209.68 L1234.66 1209.68 L1235.25 1209.68 L1235.84 1209.68 L1236.42 1209.68 L1237.01 1209.68 L1237.6 1209.68 L1238.18 1209.68 L1238.77 1209.68 L1239.36 1209.68 L1239.94 1209.68 L1240.53 1209.68 L1241.11 1209.68 L1241.7 1209.68 L1242.29 1209.68 L1242.87 1209.68 L1243.46 1209.68 L1244.05 1209.68 L1244.63 1209.68 L1245.22 1209.68 L1245.81 1209.68 L1246.39 1209.68 L1246.98 1209.68 L1247.57 1209.68 L1248.15 1209.68 L1248.74 1209.68 L1249.32 1209.68 L1249.91 1209.68 L1250.5 1209.68 L1251.08 1209.68 L1251.67 1209.68 L1252.26 1209.68 L1252.84 1209.68 L1253.43 1209.68 L1254.02 1209.68 L1254.6 1209.68 L1255.19 1209.68 L1255.78 1209.68 L1256.36 1209.68 L1256.95 1209.68 L1257.53 1209.68 L1258.12 1209.68 L1258.71 1209.68 L1259.29 1209.68 L1259.88 1209.68 L1260.47 1209.68 L1261.05 1209.68 L1261.64 1209.68 L1262.23 1209.68 L1262.81 1209.68 L1263.4 1209.68 L1263.98 1209.68 L1264.57 1209.68 L1265.16 1209.68 L1265.74 1209.68 L1266.33 1209.68 L1266.92 1209.68 L1267.5 1209.68 L1268.09 1209.68 L1268.68 1209.68 L1269.26 1209.68 L1269.85 1209.68 L1270.44 1209.68 L1271.02 1209.68 L1271.61 1209.68 L1272.19 1209.68 L1272.78 1209.68 L1273.37 1209.68 L1273.95 1209.68 L1274.54 1209.68 L1275.13 1209.68 L1275.71 1209.68 L1276.3 1209.68 L1276.89 1209.68 L1277.47 1209.68 L1278.06 1209.68 L1278.65 1209.68 L1279.23 1209.68 L1279.82 1209.68 L1280.4 1209.68 L1280.99 1209.68 L1281.58 1209.68 L1282.16 1209.68 L1282.75 1209.68 L1283.34 1209.68 L1283.92 1209.68 L1284.51 1209.68 L1285.1 1209.68 L1285.68 1209.68 L1286.27 1209.68 L1286.86 1209.68 L1287.44 1209.68 L1288.03 1209.68 L1288.61 1209.68 L1289.2 1209.68 L1289.79 1209.68 L1290.37 1209.68 L1290.96 1209.68 L1291.55 1209.68 L1292.13 1209.68 L1292.72 1209.68 L1293.31 1209.68 L1293.89 1209.68 L1294.48 1209.68 L1295.06 1209.68 L1295.65 1209.68 L1296.24 1209.68 L1296.82 1209.68 L1297.41 1209.68 L1298 1209.68 L1298.58 1209.68 L1299.17 1209.68 L1299.76 1209.68 L1300.34 1209.68 L1300.93 1209.68 L1301.52 1209.68 L1302.1 1209.68 L1302.69 1209.68 L1303.27 1209.68 L1303.86 1209.68 L1304.45 1209.68 L1305.03 1209.68 L1305.62 1209.68 L1306.21 1209.68 L1306.79 1209.68 L1307.38 1209.68 L1307.97 1209.68 L1308.55 1209.68 L1309.14 1209.68 L1309.73 1209.68 L1310.31 1209.68 L1310.9 1209.68 L1311.48 1209.68 L1312.07 1209.68 L1312.66 1209.68 L1313.24 1209.68 L1313.83 1209.68 L1314.42 1209.68 L1315 1209.68 L1315.59 1209.68 L1316.18 1209.68 L1316.76 1209.68 L1317.35 1209.68 L1317.93 1209.68 L1318.52 1209.68 L1319.11 1209.68 L1319.69 1209.68 L1320.28 1209.68 L1320.87 1209.68 L1321.45 1209.68 L1322.04 1209.68 L1322.63 1209.68 L1323.21 1209.68 L1323.8 1209.68 L1324.39 1209.68 L1324.97 1209.68 L1325.56 1209.68 L1326.14 1209.68 L1326.73 1209.68 L1327.32 1209.68 L1327.9 1209.68 L1328.49 1209.68 L1329.08 1209.68 L1329.66 1209.68 L1330.25 1209.68 L1330.84 1209.68 L1331.42 1209.68 L1332.01 1209.68 L1332.6 1209.68 L1333.18 1209.68 L1333.77 1209.68 L1334.35 1209.68 L1334.94 1209.68 L1335.53 1209.68 L1336.11 1209.68 L1336.7 1209.68 L1337.29 1209.68 L1337.87 1209.68 L1338.46 1209.68 L1339.05 1209.68 L1339.63 1209.68 L1340.22 1209.68 L1340.8 1209.68 L1341.39 1209.68 L1341.98 1209.68 L1342.56 1209.68 L1343.15 1209.68 L1343.74 1209.68 L1344.32 1209.68 L1344.91 1209.68 L1345.5 1209.68 L1346.08 1209.68 L1346.67 1209.68 L1347.26 1209.68 L1347.84 1209.68 L1348.43 1209.68 L1349.01 1209.68 L1349.6 1209.68 L1350.19 1209.68 L1350.77 1209.68 L1351.36 1209.68 L1351.95 1209.68 L1352.53 1209.68 L1353.12 1209.68 L1353.71 1209.68 L1354.29 1209.68 L1354.88 1209.68 L1355.47 1209.68 L1356.05 1209.68 L1356.64 1209.68 L1357.22 1209.68 L1357.81 1209.68 L1358.4 1209.68 L1358.98 1209.68 L1359.57 1209.68 L1360.16 1209.68 L1360.74 1209.68 L1361.33 1209.68 L1361.92 1209.68 L1362.5 1209.68 L1363.09 1209.68 L1363.68 1209.68 L1364.26 1209.68 L1364.85 1209.68 L1365.43 1209.68 L1366.02 1209.68 L1366.61 1209.68 L1367.19 1209.68 L1367.78 1209.68 L1368.37 1209.68 L1368.95 1209.68 L1369.54 1209.68 L1370.13 1209.68 L1370.71 1209.68 L1371.3 1209.68 L1371.88 1209.68 L1372.47 1209.68 L1373.06 1209.68 L1373.64 1209.68 L1374.23 1209.68 L1374.82 1209.68 L1375.4 1209.68 L1375.99 1209.68 L1376.58 1209.68 L1377.16 1209.68 L1377.75 1209.68 L1378.34 1209.68 L1378.92 1209.68 L1379.51 1209.68 L1380.09 1209.68 L1380.68 1209.68 L1381.27 1209.68 L1381.85 1209.68 L1382.44 1209.68 L1383.03 1209.68 L1383.61 1209.68 L1384.2 1209.68 L1384.79 1209.68 L1385.37 1209.68 L1385.96 1209.68 L1386.55 1209.68 L1387.13 1209.68 L1387.72 1209.68 L1388.3 1209.68 L1388.89 1209.68 L1389.48 1209.68 L1390.06 1209.68 L1390.65 1209.68 L1391.24 1209.68 L1391.82 1209.68 L1392.41 1209.68 L1393 1209.68 L1393.58 1209.68 L1394.17 1209.68 L1394.75 1209.68 L1395.34 1209.68 L1395.93 1209.68 L1396.51 1209.68 L1397.1 1209.68 L1397.69 1209.68 L1398.27 1209.68 L1398.86 1209.68 L1399.45 1209.68 L1400.03 1209.68 L1400.62 1209.68 L1401.21 1209.68 L1401.79 1209.68 L1402.38 1209.68 L1402.96 1209.68 L1403.55 1209.68 L1404.14 1209.68 L1404.72 1209.68 L1405.31 1209.68 L1405.9 1209.68 L1406.48 1209.68 L1407.07 1209.68 L1407.66 1209.68 L1408.24 1209.68 L1408.83 1209.68 L1409.42 1209.68 L1410 1209.68 L1410.59 1209.68 L1411.17 1209.68 L1411.76 1209.68 L1412.35 1209.68 L1412.93 1209.68 L1413.52 1209.68 L1414.11 1209.68 L1414.69 1209.68 L1415.28 1209.68 L1415.87 1209.68 L1416.45 1209.68 L1417.04 1209.68 L1417.63 1209.68 L1418.21 1209.68 L1418.8 1209.68 L1419.38 1209.68 L1419.97 1209.68 L1420.56 1209.68 L1421.14 1209.68 L1421.73 1209.68 L1422.32 1209.68 L1422.9 1209.68 L1423.49 1209.68 L1424.08 1209.68 L1424.66 1209.68 L1425.25 1209.68 L1425.83 1209.68 L1426.42 1209.68 L1427.01 1209.68 L1427.59 1209.68 L1428.18 1209.68 L1428.77 1209.68 L1429.35 1209.68 L1429.94 1209.68 L1430.53 1209.68 L1431.11 1209.68 L1431.7 1209.68 L1432.29 1209.68 L1432.87 1209.68 L1433.46 1209.68 L1434.04 1209.68 L1434.63 1209.68 L1435.22 1209.68 L1435.8 1209.68 L1436.39 1209.68 L1436.98 1209.68 L1437.56 1209.68 L1438.15 1209.68 L1438.74 1209.68 L1439.32 1209.68 L1439.91 1209.68 L1440.5 1209.68 L1441.08 1209.68 L1441.67 1209.68 L1442.25 1209.68 L1442.84 1209.68 L1443.43 1209.68 L1444.01 1209.68 L1444.6 1209.68 L1445.19 1209.68 L1445.77 1209.68 L1446.36 1209.68 L1446.95 1209.68 L1447.53 1209.68 L1448.12 1209.68 L1448.7 1209.68 L1449.29 1209.68 L1449.88 1209.68 L1450.46 1209.68 L1451.05 1209.68 L1451.64 1209.68 L1452.22 1209.68 L1452.81 1209.68 L1453.4 1209.68 L1453.98 1209.68 L1454.57 1209.68 L1455.16 1209.68 L1455.74 1209.68 L1456.33 1209.68 L1456.91 1209.68 L1457.5 1209.68 L1458.09 1209.68 L1458.67 1209.68 L1459.26 1209.68 L1459.85 1209.68 L1460.43 1209.68 L1461.02 1209.68 L1461.61 1209.68 L1462.19 1209.68 L1462.78 1209.68 L1463.37 1209.68 L1463.95 1209.68 L1464.54 1209.68 L1465.12 1209.68 L1465.71 1209.68 L1466.3 1209.68 L1466.88 1209.68 L1467.47 1209.68 L1468.06 1209.68 L1468.64 1209.68 L1469.23 1209.68 L1469.82 1209.68 L1470.4 1209.68 L1470.99 1209.68 L1471.57 1209.68 L1472.16 1209.68 L1472.75 1209.68 L1473.33 1209.68 L1473.92 1209.68 L1474.51 1209.68 L1475.09 1209.68 L1475.68 1209.68 L1476.27 1209.68 L1476.85 1209.68 L1477.44 1209.68 L1478.03 1209.68 L1478.61 1209.68 L1479.2 1209.68 L1479.78 1209.68 L1480.37 1209.68 L1480.96 1209.68 L1481.54 1209.68 L1482.13 1209.68 L1482.72 1209.68 L1483.3 1209.68 L1483.89 1209.68 L1484.48 1209.68 L1485.06 1209.68 L1485.65 1209.68 L1486.24 1209.68 L1486.82 1209.68 L1487.41 1209.68 L1487.99 1209.68 L1488.58 1209.68 L1489.17 1209.68 L1489.75 1209.68 L1490.34 1209.68 L1490.93 1209.68 L1491.51 1209.68 L1492.1 1209.68 L1492.69 1209.68 L1493.27 1209.68 L1493.86 1209.68 L1494.45 1209.68 L1495.03 1209.68 L1495.62 1209.68 L1496.2 1209.68 L1496.79 1209.68 L1497.38 1209.68 L1497.96 1209.68 L1498.55 1209.68 L1499.14 1209.68 L1499.72 1209.68 L1500.31 1209.68 L1500.9 1209.68 L1501.48 1209.68 L1502.07 1209.68 L1502.65 1209.68 L1503.24 1209.68 L1503.83 1209.68 L1504.41 1209.68 L1505 1209.68 L1505.59 1209.68 L1506.17 1209.68 L1506.76 1209.68 L1507.35 1209.68 L1507.93 1209.68 L1508.52 1209.68 L1509.11 1209.68 L1509.69 1209.68 L1510.28 1209.68 L1510.86 1209.68 L1511.45 1209.68 L1512.04 1209.68 L1512.62 1209.68 L1513.21 1209.68 L1513.8 1209.68 L1514.38 1209.68 L1514.97 1209.68 L1515.56 1209.68 L1516.14 1209.68 L1516.73 1209.68 L1517.32 1209.68 L1517.9 1209.68 L1518.49 1209.68 L1519.07 1209.68 L1519.66 1209.68 L1520.25 1209.68 L1520.83 1209.68 L1521.42 1209.68 L1522.01 1209.68 L1522.59 1209.68 L1523.18 1209.68 L1523.77 1209.68 L1524.35 1209.68 L1524.94 1209.68 L1525.52 1209.68 L1526.11 1209.68 L1526.7 1209.68 L1527.28 1209.68 L1527.87 1209.68 L1528.46 1209.68 L1529.04 1209.68 L1529.63 1209.68 L1530.22 1209.68 L1530.8 1209.68 L1531.39 1209.68 L1531.98 1209.68 L1532.56 1209.68 L1533.15 1209.68 L1533.73 1209.68 L1534.32 1209.68 L1534.91 1209.68 L1535.49 1209.68 L1536.08 1209.68 L1536.67 1209.68 L1537.25 1209.68 L1537.84 1209.68 L1538.43 1209.68 L1539.01 1209.68 L1539.6 1209.68 L1540.19 1209.68 L1540.77 1209.68 L1541.36 1209.68 L1541.94 1209.68 L1542.53 1209.68 L1543.12 1209.68 L1543.7 1209.68 L1544.29 1209.68 L1544.88 1209.68 L1545.46 1209.68 L1546.05 1209.68 L1546.64 1209.68 L1547.22 1209.68 L1547.81 1209.68 L1548.4 1209.68 L1548.98 1209.68 L1549.57 1209.68 L1550.15 1209.68 L1550.74 1209.68 L1551.33 1209.68 L1551.91 1209.68 L1552.5 1209.68 L1553.09 1209.68 L1553.67 1209.68 L1554.26 1209.68 L1554.85 1209.68 L1555.43 1209.68 L1556.02 1209.68 L1556.6 1209.68 L1557.19 1209.68 L1557.78 1209.68 L1558.36 1209.68 L1558.95 1209.68 L1559.54 1209.68 L1560.12 1209.68 L1560.71 1209.68 L1561.3 1209.68 L1561.88 1209.68 L1562.47 1209.68 L1563.06 1209.68 L1563.64 1209.68 L1564.23 1209.68 L1564.81 1209.68 L1565.4 1209.68 L1565.99 1209.68 L1566.57 1209.68 L1567.16 1209.68 L1567.75 1209.68 L1568.33 1209.68 L1568.92 1209.68 L1569.51 1209.68 L1570.09 1209.68 L1570.68 1209.68 L1571.27 1209.68 L1571.85 1209.68 L1572.44 1209.68 L1573.02 1209.68 L1573.61 1209.68 L1574.2 1209.68 L1574.78 1209.68 L1575.37 1209.68 L1575.96 1209.68 L1576.54 1209.68 L1577.13 1209.68 L1577.72 1209.68 L1578.3 1209.68 L1578.89 1209.68 L1579.47 1209.68 L1580.06 1209.68 L1580.65 1209.68 L1581.23 1209.68 L1581.82 1209.68 L1582.41 1209.68 L1582.99 1209.68 L1583.58 1209.68 L1584.17 1209.68 L1584.75 1209.68 L1585.34 1209.68 L1585.93 1209.68 L1586.51 1209.68 L1587.1 1209.68 L1587.68 1209.68 L1588.27 1209.68 L1588.86 1209.68 L1589.44 1209.68 L1590.03 1209.68 L1590.62 1209.68 L1591.2 1209.68 L1591.79 1209.68 L1592.38 1209.68 L1592.96 1209.68 L1593.55 1209.68 L1594.14 1209.68 L1594.72 1209.68 L1595.31 1209.68 L1595.89 1209.68 L1596.48 1209.68 L1597.07 1209.68 L1597.65 1209.68 L1598.24 1209.68 L1598.83 1209.68 L1599.41 1209.68 L1600 1209.68 L1600.59 1209.68 L1601.17 1209.68 L1601.76 1209.68 L1602.34 1209.68 L1602.93 1209.68 L1603.52 1209.68 L1604.1 1209.68 L1604.69 1209.68 L1605.28 1209.68 L1605.86 1209.68 L1606.45 1209.68 L1607.04 1209.68 L1607.62 1209.68 L1608.21 1209.68 L1608.8 1209.68 L1609.38 1209.68 L1609.97 1209.68 L1610.55 1209.68 L1611.14 1209.68 L1611.73 1209.68 L1612.31 1209.68 L1612.9 1209.68 L1613.49 1209.68 L1614.07 1209.68 L1614.66 1209.68 L1615.25 1209.68 L1615.83 1209.68 L1616.42 1209.68 L1617.01 1209.68 L1617.59 1209.68 L1618.18 1209.68 L1618.76 1209.68 L1619.35 1209.68 L1619.94 1209.68 L1620.52 1209.68 L1621.11 1209.68 L1621.7 1209.68 L1622.28 1209.68 L1622.87 1209.68 L1623.46 1209.68 L1624.04 1209.68 L1624.63 1209.68 L1625.22 1209.68 L1625.8 1209.68 L1626.39 1209.68 L1626.97 1209.68 L1627.56 1209.68 L1628.15 1209.68 L1628.73 1209.68 L1629.32 1209.68 L1629.91 1209.68 L1630.49 1209.68 L1631.08 1209.68 L1631.67 1209.68 L1632.25 1209.68 L1632.84 1209.68 L1633.42 1209.68 L1634.01 1209.68 L1634.6 1209.68 L1635.18 1209.68 L1635.77 1209.68 L1636.36 1209.68 L1636.94 1209.68 L1637.53 1209.68 L1638.12 1209.68 L1638.7 1209.68 L1639.29 1209.68 L1639.88 1209.68 L1640.46 1209.68 L1641.05 1209.68 L1641.63 1209.68 L1642.22 1209.68 L1642.81 1209.68 L1643.39 1209.68 L1643.98 1209.68 L1644.57 1209.68 L1645.15 1209.68 L1645.74 1209.68 L1646.33 1209.68 L1646.91 1209.68 L1647.5 1209.68 L1648.09 1209.68 L1648.67 1209.68 L1649.26 1209.68 L1649.84 1209.68 L1650.43 1209.68 L1651.02 1209.68 L1651.6 1209.68 L1652.19 1209.68 L1652.78 1209.68 L1653.36 1209.68 L1653.95 1209.68 L1654.54 1209.68 L1655.12 1209.68 L1655.71 1209.68 L1656.29 1209.68 L1656.88 1209.68 L1657.47 1209.68 L1658.05 1209.68 L1658.64 1209.68 L1659.23 1209.68 L1659.81 1209.68 L1660.4 1209.68 L1660.99 1209.68 L1661.57 1209.68 L1662.16 1209.68 L1662.75 1209.68 L1663.33 1209.68 L1663.92 1209.68 L1664.5 1209.68 L1665.09 1209.68 L1665.68 1209.68 L1666.26 1209.68 L1666.85 1209.68 L1667.44 1209.68 L1668.02 1209.68 L1668.61 1209.68 L1669.2 1209.68 L1669.78 1209.68 L1670.37 1209.68 L1670.96 1209.68 L1671.54 1209.68 L1672.13 1209.68 L1672.71 1209.68 L1673.3 1209.68 L1673.89 1209.68 L1674.47 1209.68 L1675.06 1209.68 L1675.65 1209.68 L1676.23 1209.68 L1676.82 1209.68 L1677.41 1209.68 L1677.99 1209.68 L1678.58 1209.68 L1679.17 1209.68 L1679.75 1209.68 L1680.34 1209.68 L1680.92 1209.68 L1681.51 1209.68 L1682.1 1209.68 L1682.68 1209.68 L1683.27 1209.68 L1683.86 1209.68 L1684.44 1209.68 L1685.03 1209.68 L1685.62 1209.68 L1686.2 1209.68 L1686.79 1209.68 L1687.37 1209.68 L1687.96 1209.68 L1688.55 1209.68 L1689.13 1209.68 L1689.72 1209.68 L1690.31 1209.68 L1690.89 1209.68 L1691.48 1209.68 L1692.07 1209.68 L1692.65 1209.68 L1693.24 1209.68 L1693.83 1209.68 L1694.41 1209.68 L1695 1209.68 L1695.58 1209.68 L1696.17 1209.68 L1696.76 1209.68 L1697.34 1209.68 L1697.93 1209.68 L1698.52 1209.68 L1699.1 1209.68 L1699.69 1209.68 L1700.28 1209.68 L1700.86 1209.68 L1701.45 1209.68 L1702.04 1209.68 L1702.62 1209.68 L1703.21 1209.68 L1703.79 1209.68 L1704.38 1209.68 L1704.97 1209.68 L1705.55 1209.68 L1706.14 1209.68 L1706.73 1209.68 L1707.31 1209.68 L1707.9 1209.68 L1708.49 1209.68 L1709.07 1209.68 L1709.66 1209.68 L1710.24 1209.68 L1710.83 1209.68 L1711.42 1209.68 L1712 1209.68 L1712.59 1209.68 L1713.18 1209.68 L1713.76 1209.68 L1714.35 1209.68 L1714.94 1209.68 L1715.52 1209.68 L1716.11 1209.68 L1716.7 1209.68 L1717.28 1209.68 L1717.87 1209.68 L1718.45 1209.68 L1719.04 1209.68 L1719.63 1209.68 L1720.21 1209.68 L1720.8 1209.68 L1721.39 1209.68 L1721.97 1209.68 L1722.56 1209.68 L1723.15 1209.68 L1723.73 1209.68 L1724.32 1209.68 L1724.91 1209.68 L1725.49 1209.68 L1726.08 1209.68 L1726.66 1209.68 L1727.25 1209.68 L1727.84 1209.68 L1728.42 1209.68 L1729.01 1209.68 L1729.6 1209.68 L1730.18 1209.68 L1730.77 1209.68 L1731.36 1209.68 L1731.94 1209.68 L1732.53 1209.68 L1733.11 1209.68 L1733.7 1209.68 L1734.29 1209.68 L1734.87 1209.68 L1735.46 1209.68 L1736.05 1209.68 L1736.63 1209.68 L1737.22 1209.68 L1737.81 1209.68 L1738.39 1209.68 L1738.98 1209.68 L1739.57 1209.68 L1740.15 1209.68 L1740.74 1209.68 L1741.32 1209.68 L1741.91 1209.68 L1742.5 1209.68 L1743.08 1209.68 L1743.67 1209.68 L1744.26 1209.68 L1744.84 1209.68 L1745.43 1209.68 L1746.02 1209.68 L1746.6 1209.68 L1747.19 1209.68 L1747.78 1209.68 L1748.36 1209.68 L1748.95 1209.68 L1749.53 1209.68 L1750.12 1209.68 L1750.71 1209.68 L1751.29 1209.68 L1751.88 1209.68 L1752.47 1209.68 L1753.05 1209.68 L1753.64 1209.68 L1754.23 1209.68 L1754.81 1209.68 L1755.4 1209.68 L1755.99 1209.68 L1756.57 1209.68 L1757.16 1209.68 L1757.74 1209.68 L1758.33 1209.68 L1758.92 1209.68 L1759.5 1209.68 L1760.09 1209.68 L1760.68 1209.68 L1761.26 1209.68 L1761.85 1209.68 L1762.44 1209.68 L1763.02 1209.68 L1763.61 1209.68 L1764.19 1209.68 L1764.78 1209.68 L1765.37 1209.68 L1765.95 1209.68 L1766.54 1209.68 L1767.13 1209.68 L1767.71 1209.68 L1768.3 1209.68 L1768.89 1209.68 L1769.47 1209.68 L1770.06 1209.68 L1770.65 1209.68 L1771.23 1209.68 L1771.82 1209.68 L1772.4 1209.68 L1772.99 1209.68 L1773.58 1209.68 L1774.16 1209.68 L1774.75 1209.68 L1775.34 1209.68 L1775.92 1209.68 L1776.51 1209.68 L1777.1 1209.68 L1777.68 1209.68 L1778.27 1209.68 L1778.86 1209.68 L1779.44 1209.68 L1780.03 1209.68 L1780.61 1209.68 L1781.2 1209.68 L1781.79 1209.68 L1782.37 1209.68 L1782.96 1209.68 L1783.55 1209.68 L1784.13 1209.68 L1784.72 1209.68 L1785.31 1209.68 L1785.89 1209.68 L1786.48 1209.68 L1787.06 1209.68 L1787.65 1209.68 L1788.24 1209.68 L1788.82 1209.68 L1789.41 1209.68 L1790 1209.68 L1790.58 1209.68 L1791.17 1209.68 L1791.76 1209.68 L1792.34 1209.68 L1792.93 1209.68 L1793.52 1209.68 L1794.1 1209.68 L1794.69 1209.68 L1795.27 1209.68 L1795.86 1209.68 L1796.45 1209.68 L1797.03 1209.68 L1797.62 1209.68 L1798.21 1209.68 L1798.79 1209.68 L1799.38 1209.68 L1799.97 1209.68 L1800.55 1209.68 L1801.14 1209.68 L1801.73 1209.68 L1802.31 1209.68 L1802.9 1209.68 L1803.48 1209.68 L1804.07 1209.68 L1804.66 1209.68 L1805.24 1209.68 L1805.83 1209.68 L1806.42 1209.68 L1807 1209.68 L1807.59 1209.68 L1808.18 1209.68 L1808.76 1209.68 L1809.35 1209.68 L1809.94 1209.68 L1810.52 1209.68 L1811.11 1209.68 L1811.69 1209.68 L1812.28 1209.68 L1812.87 1209.68 L1813.45 1209.68 L1814.04 1209.68 L1814.63 1209.68 L1815.21 1209.68 L1815.8 1209.68 L1816.39 1209.68 L1816.97 1209.68 L1817.56 1209.68 L1818.14 1209.68 L1818.73 1209.68 L1819.32 1209.68 L1819.9 1209.68 L1820.49 1209.68 L1821.08 1209.68 L1821.66 1209.68 L1822.25 1209.68 L1822.84 1209.68 L1823.42 1209.68 L1824.01 1209.68 L1824.6 1209.68 L1825.18 1209.68 L1825.77 1209.68 L1826.35 1209.68 L1826.94 1209.68 L1827.53 1209.68 L1828.11 1209.68 L1828.7 1209.68 L1829.29 1209.68 L1829.87 1209.68 L1830.46 1209.68 L1831.05 1209.68 L1831.63 1209.68 L1832.22 1209.68 L1832.81 1209.68 L1833.39 1209.68 L1833.98 1209.68 L1834.56 1209.68 L1835.15 1209.68 L1835.74 1209.68 L1836.32 1209.68 L1836.91 1209.68 L1837.5 1209.68 L1838.08 1209.68 L1838.67 1209.68 L1839.26 1209.68 L1839.84 1209.68 L1840.43 1209.68 L1841.01 1209.68 L1841.6 1209.68 L1842.19 1209.68 L1842.77 1209.68 L1843.36 1209.68 L1843.95 1209.68 L1844.53 1209.68 L1845.12 1209.68 L1845.71 1209.68 L1846.29 1209.68 L1846.88 1209.68 L1847.47 1209.68 L1848.05 1209.68 L1848.64 1209.68 L1849.22 1209.68 L1849.81 1209.68 L1850.4 1209.68 L1850.98 1209.68 L1851.57 1209.68 L1852.16 1209.68 L1852.74 1209.68 L1853.33 1209.68 L1853.92 1209.68 L1854.5 1209.68 L1855.09 1209.68 L1855.68 1209.68 L1856.26 1209.68 L1856.85 1209.68 L1857.43 1209.68 L1858.02 1209.68 L1858.61 1209.68 L1859.19 1209.68 L1859.78 1209.68 L1860.37 1209.68 L1860.95 1209.68 L1861.54 1209.68 L1862.13 1209.68 L1862.71 1209.68 L1863.3 1209.68 L1863.88 1209.68 L1864.47 1209.68 L1865.06 1209.68 L1865.64 1209.68 L1866.23 1209.68 L1866.82 1209.68 L1867.4 1209.68 L1867.99 1209.68 L1868.58 1209.68 L1869.16 1209.68 L1869.75 1209.68 L1870.34 1209.68 L1870.92 1209.68 L1871.51 1209.68 L1872.09 1209.68 L1872.68 1209.68 L1873.27 1209.68 L1873.85 1209.68 L1874.44 1209.68 L1875.03 1209.68 L1875.61 1209.68 L1876.2 1209.68 L1876.79 1209.68 L1877.37 1209.68 L1877.96 1209.68 L1878.55 1209.68 L1879.13 1209.68 L1879.72 1209.68 L1880.3 1209.68 L1880.89 1209.68 L1881.48 1209.68 L1882.06 1209.68 L1882.65 1209.68 L1883.24 1209.68 L1883.82 1209.68 L1884.41 1209.68 L1885 1209.68 L1885.58 1209.68 L1886.17 1209.68 L1886.76 1209.68 L1887.34 1209.68 L1887.93 1209.68 L1888.51 1209.68 L1889.1 1209.68 L1889.69 1209.68 L1890.27 1209.68 L1890.86 1209.68 L1891.45 1209.68 L1892.03 1209.68 L1892.62 1209.68 L1893.21 1209.68 L1893.79 1209.68 L1894.38 1209.68 L1894.96 1209.68 L1895.55 1209.68 L1896.14 1209.68 L1896.72 1209.68 L1897.31 1209.68 L1897.9 1209.68 L1898.48 1209.68 L1899.07 1209.68 L1899.66 1209.68 L1900.24 1209.68 L1900.83 1209.68 L1901.42 1209.68 L1902 1209.68 L1902.59 1209.68 L1903.17 1209.68 L1903.76 1209.68 L1904.35 1209.68 L1904.93 1209.68 L1905.52 1209.68 L1906.11 1209.68 L1906.69 1209.68 L1907.28 1209.68 L1907.87 1209.68 L1908.45 1209.68 L1909.04 1209.68 L1909.63 1209.68 L1910.21 1209.68 L1910.8 1209.68 L1911.38 1209.68 L1911.97 1209.68 L1912.56 1209.68 L1913.14 1209.68 L1913.73 1209.68 L1914.32 1209.68 L1914.9 1209.68 L1915.49 1209.68 L1916.08 1209.68 L1916.66 1209.68 L1917.25 1209.68 L1917.83 1209.68 L1918.42 1209.68 L1919.01 1209.68 L1919.59 1209.68 L1920.18 1209.68 L1920.77 1209.68 L1921.35 1209.68 L1921.94 1209.68 L1922.53 1209.68 L1923.11 1209.68 L1923.7 1209.68 L1924.29 1209.68 L1924.87 1209.68 L1925.46 1209.68 L1926.04 1209.68 L1926.63 1209.68 L1927.22 1209.68 L1927.8 1209.68 L1928.39 1209.68 L1928.98 1209.68 L1929.56 1209.68 L1930.15 1209.68 L1930.74 1209.68 L1931.32 1209.68 L1931.91 1209.68 L1932.5 1209.68 L1933.08 1209.68 L1933.67 1209.68 L1934.25 1209.68 L1934.84 1209.68 L1935.43 1209.68 L1936.01 1209.68 L1936.6 1209.68 L1937.19 1209.68 L1937.77 1209.68 L1938.36 1209.68 L1938.95 1209.68 L1939.53 1209.68 L1940.12 1209.68 L1940.71 1209.68 L1941.29 1209.68 L1941.88 1209.68 L1942.46 1209.68 L1943.05 1209.68 L1943.64 1209.68 L1944.22 1209.68 L1944.81 1209.68 L1945.4 1209.68 L1945.98 1209.68 L1946.57 1209.68 L1947.16 1209.68 L1947.74 1209.68 L1948.33 1209.68 L1948.91 1209.68 L1949.5 1209.68 L1950.09 1209.68 L1950.67 1209.68 L1951.26 1209.68 L1951.85 1209.68 L1952.43 1209.68 L1953.02 1209.68 L1953.61 1209.68 L1954.19 1209.68 L1954.78 1209.68 L1955.37 1209.68 L1955.95 1209.68 L1956.54 1209.68 L1957.12 1209.68 L1957.71 1209.68 L1958.3 1209.68 L1958.88 1209.68 L1959.47 1209.68 L1960.06 1209.68 L1960.64 1209.68 L1961.23 1209.68 L1961.82 1209.68 L1962.4 1209.68 L1962.99 1209.68 L1963.58 1209.68 L1964.16 1209.68 L1964.75 1209.68 L1965.33 1209.68 L1965.92 1209.68 L1966.51 1209.68 L1967.09 1209.68 L1967.68 1209.68 L1968.27 1209.68 L1968.85 1209.68 L1969.44 1209.68 L1970.03 1209.68 L1970.61 1209.68 L1971.2 1209.68 L1971.78 1209.68 L1972.37 1209.68 L1972.96 1209.68 L1973.54 1209.68 L1974.13 1209.68 L1974.72 1209.68 L1975.3 1209.68 L1975.89 1209.68 L1976.48 1209.68 L1977.06 1209.68 L1977.65 1209.68 L1978.24 1209.68 L1978.82 1209.68 L1979.41 1209.68 L1979.99 1209.68 L1980.58 1209.68 L1981.17 1209.68 L1981.75 1209.68 L1982.34 1209.68 L1982.93 1209.68 L1983.51 1209.68 L1984.1 1209.68 L1984.69 1209.68 L1985.27 1209.68 L1985.86 1209.68 L1986.45 1209.68 L1987.03 1209.68 L1987.62 1209.68 L1988.2 1209.68 L1988.79 1209.68 L1989.38 1209.68 L1989.96 1209.68 L1990.55 1209.68 L1991.14 1209.68 L1991.72 1209.68 L1992.31 1209.68 L1992.9 1209.68 L1993.48 1209.68 L1994.07 1209.68 L1994.65 1209.68 L1995.24 1209.68 L1995.83 1209.68 L1996.41 1209.68 L1997 1209.68 L1997.59 1209.68 L1998.17 1209.68 L1998.76 1209.68 L1999.35 1209.68 L1999.93 1209.68 L2000.52 1209.68 L2001.11 1209.68 L2001.69 1209.68 L2002.28 1209.68 L2002.86 1209.68 L2003.45 1209.68 L2004.04 1209.68 L2004.62 1209.68 L2005.21 1209.68 L2005.8 1209.68 L2006.38 1209.68 L2006.97 1209.68 L2007.56 1209.68 L2008.14 1209.68 L2008.73 1209.68 L2009.32 1209.68 L2009.9 1209.68 L2010.49 1209.68 L2011.07 1209.68 L2011.66 1209.68 L2012.25 1209.68 L2012.83 1209.68 L2013.42 1209.68 L2014.01 1209.68 L2014.59 1209.68 L2015.18 1209.68 L2015.77 1209.68 L2016.35 1209.68 L2016.94 1209.68 L2017.53 1209.68 L2018.11 1209.68 L2018.7 1209.68 L2019.28 1209.68 L2019.87 1209.68 L2020.46 1209.68 L2021.04 1209.68 L2021.63 1209.68 L2022.22 1209.68 L2022.8 1209.68 L2023.39 1209.68 L2023.98 1209.68 L2024.56 1209.68 L2025.15 1209.68 L2025.73 1209.68 L2026.32 1209.68 L2026.91 1209.68 L2027.49 1209.68 L2028.08 1209.68 L2028.67 1209.68 L2029.25 1209.68 L2029.84 1209.68 L2030.43 1209.68 L2031.01 1209.68 L2031.6 1209.68 L2032.19 1209.68 L2032.77 1209.68 L2033.36 1209.68 L2033.94 1209.68 L2034.53 1209.68 L2035.12 1209.68 L2035.7 1209.68 L2036.29 1209.68 L2036.88 1209.68 L2037.46 1209.68 L2038.05 1209.68 L2038.64 1209.68 L2039.22 1209.68 L2039.81 1209.68 L2040.4 1209.68 L2040.98 1209.68 L2041.57 1209.68 L2042.15 1209.68 L2042.74 1209.68 L2043.33 1209.68 L2043.91 1209.68 L2044.5 1209.68 L2045.09 1209.68 L2045.67 1209.68 L2046.26 1209.68 L2046.85 1209.68 L2047.43 1209.68 L2048.02 1209.68 L2048.6 1209.68 L2049.19 1209.68 L2049.78 1209.68 L2050.36 1209.68 L2050.95 1209.68 L2051.54 1209.68 L2052.12 1209.68 L2052.71 1209.68 L2053.3 1209.68 L2053.88 1209.68 L2054.47 1209.68 L2055.06 1209.68 L2055.64 1209.68 L2056.23 1209.68 L2056.81 1209.68 L2057.4 1209.68 L2057.99 1209.68 L2058.57 1209.68 L2059.16 1209.68 L2059.75 1209.68 L2060.33 1209.68 L2060.92 1209.68 L2061.51 1209.68 L2062.09 1209.68 L2062.68 1209.68 L2063.27 1209.68 L2063.85 1209.68 L2064.44 1209.68 L2065.02 1209.68 L2065.61 1209.68 L2066.2 1209.68 L2066.78 1209.68 L2067.37 1209.68 L2067.96 1209.68 L2068.54 1209.68 L2069.13 1209.68 L2069.72 1209.68 L2070.3 1209.68 L2070.89 1209.68 L2071.48 1209.68 L2072.06 1209.68 L2072.65 1209.68 L2073.23 1209.68 L2073.82 1209.68 L2074.41 1209.68 L2074.99 1209.68 L2075.58 1209.68 L2076.17 1209.68 L2076.75 1209.68 L2077.34 1209.68 L2077.93 1209.68 L2078.51 1209.68 L2079.1 1209.68 L2079.68 1209.68 L2080.27 1209.68 L2080.86 1209.68 L2081.44 1209.68 L2082.03 1209.68 L2082.62 1209.68 L2083.2 1209.68 L2083.79 1209.68 L2084.38 1209.68 L2084.96 1209.68 L2085.55 1209.68 L2086.14 1209.68 L2086.72 1209.68 L2087.31 1209.68 L2087.89 1209.68 L2088.48 1209.68 L2089.07 1209.68 L2089.65 1209.68 L2090.24 1209.68 L2090.83 1209.68 L2091.41 1209.68 L2092 1209.68 L2092.59 1209.68 L2093.17 1209.68 L2093.76 1209.68 L2094.35 1209.68 L2094.93 1209.68 L2095.52 1209.68 L2096.1 1209.68 L2096.69 1209.68 L2097.28 1209.68 L2097.86 1209.68 L2098.45 1209.68 L2099.04 1209.68 L2099.62 1209.68 L2100.21 1209.68 L2100.8 1209.68 L2101.38 1209.68 L2101.97 1209.68 L2102.55 1209.68 L2103.14 1209.68 L2103.73 1209.68 L2104.31 1209.68 L2104.9 1209.68 L2105.49 1209.68 L2106.07 1209.68 L2106.66 1209.68 L2107.25 1209.68 L2107.83 1209.68 L2108.42 1209.68 L2109.01 1209.68 L2109.59 1209.68 L2110.18 1209.68 L2110.76 1209.68 L2111.35 1209.68 L2111.94 1209.68 L2112.52 1209.68 L2113.11 1209.68 L2113.7 1209.68 L2114.28 1209.68 L2114.87 1209.68 L2115.46 1209.68 L2116.04 1209.68 L2116.63 1209.68 L2117.22 1209.68 L2117.8 1209.68 L2118.39 1209.68 L2118.97 1209.68 L2119.56 1209.68 L2120.15 1209.68 L2120.73 1209.68 L2121.32 1209.68 L2121.91 1209.68 L2122.49 1209.68 L2123.08 1209.68 L2123.67 1209.68 L2124.25 1209.68 L2124.84 1209.68 L2125.42 1209.68 L2126.01 1209.68 L2126.6 1209.68 L2127.18 1209.68 L2127.77 1209.68 L2128.36 1209.68 L2128.94 1209.68 L2129.53 1209.68 L2130.12 1209.68 L2130.7 1209.68 L2131.29 1209.68 L2131.88 1209.68 L2132.46 1209.68 L2133.05 1209.68 L2133.63 1209.68 L2134.22 1209.68 L2134.81 1209.68 L2135.39 1209.68 L2135.98 1209.68 L2136.57 1209.68 L2137.15 1209.68 L2137.74 1209.68 L2138.33 1209.68 L2138.91 1209.68 L2139.5 1209.68 L2140.09 1209.68 L2140.67 1209.68 L2141.26 1209.68 L2141.84 1209.68 L2142.43 1209.68 L2143.02 1209.68 L2143.6 1209.68 L2144.19 1209.68 L2144.78 1209.68 L2145.36 1209.68 L2145.95 1209.68 L2146.54 1209.68 L2147.12 1209.68 L2147.71 1209.68 L2148.3 1209.68 L2148.88 1209.68 L2149.47 1209.68 L2150.05 1209.68 L2150.64 1209.68 L2151.23 1209.68 L2151.81 1209.68 L2152.4 1209.68 L2152.99 1209.68 L2153.57 1209.68 L2154.16 1209.68 L2154.75 1209.68 L2155.33 1209.68 L2155.92 1209.68 L2156.5 1209.68 L2157.09 1209.68 L2157.68 1209.68 L2158.26 1209.68 L2158.26 1209.46 L2157.68 1209.46 L2157.09 1209.46 L2156.5 1209.46 L2155.92 1209.46 L2155.33 1209.46 L2154.75 1209.46 L2154.16 1209.46 L2153.57 1209.46 L2152.99 1209.46 L2152.4 1209.46 L2151.81 1209.46 L2151.23 1209.46 L2150.64 1209.46 L2150.05 1209.46 L2149.47 1209.46 L2148.88 1209.46 L2148.3 1209.46 L2147.71 1209.46 L2147.12 1209.46 L2146.54 1209.46 L2145.95 1209.46 L2145.36 1209.46 L2144.78 1209.46 L2144.19 1209.46 L2143.6 1209.46 L2143.02 1209.46 L2142.43 1209.46 L2141.84 1209.46 L2141.26 1209.46 L2140.67 1209.46 L2140.09 1209.46 L2139.5 1209.46 L2138.91 1209.46 L2138.33 1209.46 L2137.74 1209.46 L2137.15 1209.46 L2136.57 1209.46 L2135.98 1209.46 L2135.39 1209.46 L2134.81 1209.46 L2134.22 1209.46 L2133.63 1209.46 L2133.05 1209.46 L2132.46 1209.46 L2131.88 1209.46 L2131.29 1209.46 L2130.7 1209.46 L2130.12 1209.46 L2129.53 1209.46 L2128.94 1209.46 L2128.36 1209.46 L2127.77 1209.46 L2127.18 1209.46 L2126.6 1209.46 L2126.01 1209.46 L2125.42 1209.46 L2124.84 1209.46 L2124.25 1209.46 L2123.67 1209.46 L2123.08 1209.46 L2122.49 1209.46 L2121.91 1209.46 L2121.32 1209.46 L2120.73 1209.46 L2120.15 1209.46 L2119.56 1209.46 L2118.97 1209.46 L2118.39 1209.46 L2117.8 1209.46 L2117.22 1209.46 L2116.63 1209.46 L2116.04 1209.46 L2115.46 1209.46 L2114.87 1209.46 L2114.28 1209.46 L2113.7 1209.46 L2113.11 1209.46 L2112.52 1209.46 L2111.94 1209.46 L2111.35 1209.46 L2110.76 1209.46 L2110.18 1209.46 L2109.59 1209.46 L2109.01 1209.46 L2108.42 1209.46 L2107.83 1209.46 L2107.25 1209.46 L2106.66 1209.46 L2106.07 1209.46 L2105.49 1209.46 L2104.9 1209.46 L2104.31 1209.46 L2103.73 1209.46 L2103.14 1209.46 L2102.55 1209.46 L2101.97 1209.46 L2101.38 1209.46 L2100.8 1209.46 L2100.21 1209.46 L2099.62 1209.46 L2099.04 1209.46 L2098.45 1209.46 L2097.86 1209.46 L2097.28 1209.46 L2096.69 1209.46 L2096.1 1209.46 L2095.52 1209.46 L2094.93 1209.46 L2094.35 1209.46 L2093.76 1209.46 L2093.17 1209.46 L2092.59 1209.46 L2092 1209.46 L2091.41 1209.46 L2090.83 1209.46 L2090.24 1209.46 L2089.65 1209.46 L2089.07 1209.46 L2088.48 1209.46 L2087.89 1209.46 L2087.31 1209.46 L2086.72 1209.46 L2086.14 1209.46 L2085.55 1209.46 L2084.96 1209.46 L2084.38 1209.46 L2083.79 1209.46 L2083.2 1209.46 L2082.62 1209.46 L2082.03 1209.46 L2081.44 1209.46 L2080.86 1209.46 L2080.27 1209.46 L2079.68 1209.46 L2079.1 1209.46 L2078.51 1209.46 L2077.93 1209.46 L2077.34 1209.46 L2076.75 1209.46 L2076.17 1209.46 L2075.58 1209.46 L2074.99 1209.46 L2074.41 1209.46 L2073.82 1209.46 L2073.23 1209.46 L2072.65 1209.46 L2072.06 1209.46 L2071.48 1209.46 L2070.89 1209.46 L2070.3 1209.46 L2069.72 1209.46 L2069.13 1209.46 L2068.54 1209.46 L2067.96 1209.46 L2067.37 1209.46 L2066.78 1209.46 L2066.2 1209.46 L2065.61 1209.46 L2065.02 1209.46 L2064.44 1209.46 L2063.85 1209.46 L2063.27 1209.46 L2062.68 1209.46 L2062.09 1209.46 L2061.51 1209.46 L2060.92 1209.46 L2060.33 1209.46 L2059.75 1209.46 L2059.16 1209.46 L2058.57 1209.46 L2057.99 1209.46 L2057.4 1209.46 L2056.81 1209.46 L2056.23 1209.46 L2055.64 1209.46 L2055.06 1209.46 L2054.47 1209.46 L2053.88 1209.46 L2053.3 1209.46 L2052.71 1209.46 L2052.12 1209.46 L2051.54 1209.46 L2050.95 1209.46 L2050.36 1209.46 L2049.78 1209.46 L2049.19 1209.46 L2048.6 1209.46 L2048.02 1209.46 L2047.43 1209.46 L2046.85 1209.46 L2046.26 1209.46 L2045.67 1209.46 L2045.09 1209.46 L2044.5 1209.46 L2043.91 1209.46 L2043.33 1209.46 L2042.74 1209.46 L2042.15 1209.46 L2041.57 1209.46 L2040.98 1209.46 L2040.4 1209.46 L2039.81 1209.46 L2039.22 1209.46 L2038.64 1209.46 L2038.05 1209.46 L2037.46 1209.46 L2036.88 1209.46 L2036.29 1209.46 L2035.7 1209.46 L2035.12 1209.46 L2034.53 1209.46 L2033.94 1209.46 L2033.36 1209.46 L2032.77 1209.46 L2032.19 1209.46 L2031.6 1209.46 L2031.01 1209.46 L2030.43 1209.46 L2029.84 1209.46 L2029.25 1209.46 L2028.67 1209.46 L2028.08 1209.46 L2027.49 1209.46 L2026.91 1209.46 L2026.32 1209.46 L2025.73 1209.46 L2025.15 1209.46 L2024.56 1209.46 L2023.98 1209.46 L2023.39 1209.46 L2022.8 1209.46 L2022.22 1209.46 L2021.63 1209.46 L2021.04 1209.46 L2020.46 1209.46 L2019.87 1209.46 L2019.28 1209.46 L2018.7 1209.46 L2018.11 1209.46 L2017.53 1209.46 L2016.94 1209.46 L2016.35 1209.46 L2015.77 1209.46 L2015.18 1209.46 L2014.59 1209.46 L2014.01 1209.46 L2013.42 1209.46 L2012.83 1209.46 L2012.25 1209.46 L2011.66 1209.46 L2011.07 1209.46 L2010.49 1209.46 L2009.9 1209.46 L2009.32 1209.46 L2008.73 1209.46 L2008.14 1209.46 L2007.56 1209.46 L2006.97 1209.46 L2006.38 1209.46 L2005.8 1209.46 L2005.21 1209.46 L2004.62 1209.46 L2004.04 1209.46 L2003.45 1209.46 L2002.86 1209.46 L2002.28 1209.46 L2001.69 1209.46 L2001.11 1209.46 L2000.52 1209.46 L1999.93 1209.46 L1999.35 1209.46 L1998.76 1209.46 L1998.17 1209.46 L1997.59 1209.46 L1997 1209.46 L1996.41 1209.46 L1995.83 1209.46 L1995.24 1209.46 L1994.65 1209.46 L1994.07 1209.46 L1993.48 1209.46 L1992.9 1209.46 L1992.31 1209.46 L1991.72 1209.46 L1991.14 1209.46 L1990.55 1209.46 L1989.96 1209.46 L1989.38 1209.46 L1988.79 1209.46 L1988.2 1209.46 L1987.62 1209.46 L1987.03 1209.46 L1986.45 1209.46 L1985.86 1209.46 L1985.27 1209.46 L1984.69 1209.46 L1984.1 1209.46 L1983.51 1209.46 L1982.93 1209.46 L1982.34 1209.46 L1981.75 1209.46 L1981.17 1209.46 L1980.58 1209.46 L1979.99 1209.46 L1979.41 1209.46 L1978.82 1209.46 L1978.24 1209.46 L1977.65 1209.46 L1977.06 1209.46 L1976.48 1209.46 L1975.89 1209.46 L1975.3 1209.46 L1974.72 1209.46 L1974.13 1209.46 L1973.54 1209.46 L1972.96 1209.46 L1972.37 1209.46 L1971.78 1209.46 L1971.2 1209.46 L1970.61 1209.46 L1970.03 1209.46 L1969.44 1209.46 L1968.85 1209.46 L1968.27 1209.46 L1967.68 1209.46 L1967.09 1209.46 L1966.51 1209.46 L1965.92 1209.46 L1965.33 1209.46 L1964.75 1209.46 L1964.16 1209.46 L1963.58 1209.46 L1962.99 1209.46 L1962.4 1209.46 L1961.82 1209.46 L1961.23 1209.46 L1960.64 1209.46 L1960.06 1209.46 L1959.47 1209.46 L1958.88 1209.46 L1958.3 1209.46 L1957.71 1209.46 L1957.12 1209.46 L1956.54 1209.46 L1955.95 1209.46 L1955.37 1209.46 L1954.78 1209.46 L1954.19 1209.46 L1953.61 1209.46 L1953.02 1209.46 L1952.43 1209.46 L1951.85 1209.46 L1951.26 1209.46 L1950.67 1209.46 L1950.09 1209.46 L1949.5 1209.46 L1948.91 1209.46 L1948.33 1209.46 L1947.74 1209.46 L1947.16 1209.46 L1946.57 1209.46 L1945.98 1209.46 L1945.4 1209.46 L1944.81 1209.46 L1944.22 1209.46 L1943.64 1209.46 L1943.05 1209.46 L1942.46 1209.46 L1941.88 1209.46 L1941.29 1209.46 L1940.71 1209.46 L1940.12 1209.46 L1939.53 1209.46 L1938.95 1209.46 L1938.36 1209.46 L1937.77 1209.46 L1937.19 1209.46 L1936.6 1209.46 L1936.01 1209.46 L1935.43 1209.46 L1934.84 1209.46 L1934.25 1209.46 L1933.67 1209.46 L1933.08 1209.46 L1932.5 1209.46 L1931.91 1209.46 L1931.32 1209.46 L1930.74 1209.46 L1930.15 1209.46 L1929.56 1209.46 L1928.98 1209.46 L1928.39 1209.46 L1927.8 1209.46 L1927.22 1209.46 L1926.63 1209.46 L1926.04 1209.46 L1925.46 1209.46 L1924.87 1209.46 L1924.29 1209.46 L1923.7 1209.46 L1923.11 1209.46 L1922.53 1209.46 L1921.94 1209.46 L1921.35 1209.46 L1920.77 1209.46 L1920.18 1209.46 L1919.59 1209.46 L1919.01 1209.46 L1918.42 1209.46 L1917.83 1209.46 L1917.25 1209.46 L1916.66 1209.46 L1916.08 1209.46 L1915.49 1209.46 L1914.9 1209.46 L1914.32 1209.46 L1913.73 1209.46 L1913.14 1209.46 L1912.56 1209.46 L1911.97 1209.46 L1911.38 1209.46 L1910.8 1209.46 L1910.21 1209.46 L1909.63 1209.46 L1909.04 1209.46 L1908.45 1209.46 L1907.87 1209.46 L1907.28 1209.46 L1906.69 1209.46 L1906.11 1209.46 L1905.52 1209.46 L1904.93 1209.46 L1904.35 1209.46 L1903.76 1209.46 L1903.17 1209.46 L1902.59 1209.46 L1902 1209.46 L1901.42 1209.46 L1900.83 1209.46 L1900.24 1209.46 L1899.66 1209.46 L1899.07 1209.46 L1898.48 1209.46 L1897.9 1209.46 L1897.31 1209.46 L1896.72 1209.46 L1896.14 1209.46 L1895.55 1209.46 L1894.96 1209.46 L1894.38 1209.46 L1893.79 1209.46 L1893.21 1209.46 L1892.62 1209.46 L1892.03 1209.46 L1891.45 1209.46 L1890.86 1209.46 L1890.27 1209.46 L1889.69 1209.46 L1889.1 1209.46 L1888.51 1209.46 L1887.93 1209.46 L1887.34 1209.46 L1886.76 1209.46 L1886.17 1209.46 L1885.58 1209.46 L1885 1209.46 L1884.41 1209.46 L1883.82 1209.46 L1883.24 1209.46 L1882.65 1209.46 L1882.06 1209.46 L1881.48 1209.46 L1880.89 1209.46 L1880.3 1209.46 L1879.72 1209.46 L1879.13 1209.46 L1878.55 1209.46 L1877.96 1209.46 L1877.37 1209.46 L1876.79 1209.46 L1876.2 1209.46 L1875.61 1209.46 L1875.03 1209.46 L1874.44 1209.46 L1873.85 1209.46 L1873.27 1209.46 L1872.68 1209.46 L1872.09 1209.46 L1871.51 1209.46 L1870.92 1209.46 L1870.34 1209.46 L1869.75 1209.46 L1869.16 1209.46 L1868.58 1209.46 L1867.99 1209.46 L1867.4 1209.46 L1866.82 1209.46 L1866.23 1209.46 L1865.64 1209.46 L1865.06 1209.46 L1864.47 1209.46 L1863.88 1209.46 L1863.3 1209.46 L1862.71 1209.46 L1862.13 1209.46 L1861.54 1209.46 L1860.95 1209.46 L1860.37 1209.46 L1859.78 1209.46 L1859.19 1209.46 L1858.61 1209.46 L1858.02 1209.46 L1857.43 1209.46 L1856.85 1209.46 L1856.26 1209.46 L1855.68 1209.46 L1855.09 1209.46 L1854.5 1209.46 L1853.92 1209.46 L1853.33 1209.46 L1852.74 1209.46 L1852.16 1209.46 L1851.57 1209.46 L1850.98 1209.46 L1850.4 1209.46 L1849.81 1209.46 L1849.22 1209.46 L1848.64 1209.46 L1848.05 1209.46 L1847.47 1209.46 L1846.88 1209.46 L1846.29 1209.46 L1845.71 1209.46 L1845.12 1209.46 L1844.53 1209.46 L1843.95 1209.46 L1843.36 1209.46 L1842.77 1209.46 L1842.19 1209.46 L1841.6 1209.46 L1841.01 1209.46 L1840.43 1209.46 L1839.84 1209.46 L1839.26 1209.46 L1838.67 1209.46 L1838.08 1209.46 L1837.5 1209.46 L1836.91 1209.46 L1836.32 1209.46 L1835.74 1209.46 L1835.15 1209.46 L1834.56 1209.46 L1833.98 1209.46 L1833.39 1209.46 L1832.81 1209.46 L1832.22 1209.46 L1831.63 1209.46 L1831.05 1209.46 L1830.46 1209.46 L1829.87 1209.46 L1829.29 1209.46 L1828.7 1209.46 L1828.11 1209.46 L1827.53 1209.46 L1826.94 1209.46 L1826.35 1209.46 L1825.77 1209.46 L1825.18 1209.46 L1824.6 1209.46 L1824.01 1209.46 L1823.42 1209.46 L1822.84 1209.46 L1822.25 1209.46 L1821.66 1209.46 L1821.08 1209.46 L1820.49 1209.46 L1819.9 1209.46 L1819.32 1209.46 L1818.73 1209.46 L1818.14 1209.46 L1817.56 1209.46 L1816.97 1209.46 L1816.39 1209.46 L1815.8 1209.46 L1815.21 1209.46 L1814.63 1209.46 L1814.04 1209.46 L1813.45 1209.46 L1812.87 1209.46 L1812.28 1209.46 L1811.69 1209.46 L1811.11 1209.46 L1810.52 1209.46 L1809.94 1209.46 L1809.35 1209.46 L1808.76 1209.46 L1808.18 1209.46 L1807.59 1209.46 L1807 1209.46 L1806.42 1209.46 L1805.83 1209.46 L1805.24 1209.46 L1804.66 1209.46 L1804.07 1209.46 L1803.48 1209.46 L1802.9 1209.46 L1802.31 1209.46 L1801.73 1209.46 L1801.14 1209.46 L1800.55 1209.46 L1799.97 1209.46 L1799.38 1209.46 L1798.79 1209.46 L1798.21 1209.46 L1797.62 1209.46 L1797.03 1209.46 L1796.45 1209.46 L1795.86 1209.46 L1795.27 1209.46 L1794.69 1209.46 L1794.1 1209.46 L1793.52 1209.46 L1792.93 1209.46 L1792.34 1209.46 L1791.76 1209.46 L1791.17 1209.46 L1790.58 1209.46 L1790 1209.46 L1789.41 1209.46 L1788.82 1209.46 L1788.24 1209.46 L1787.65 1209.46 L1787.06 1209.46 L1786.48 1209.46 L1785.89 1209.46 L1785.31 1209.46 L1784.72 1209.46 L1784.13 1209.46 L1783.55 1209.46 L1782.96 1209.46 L1782.37 1209.46 L1781.79 1209.46 L1781.2 1209.46 L1780.61 1209.46 L1780.03 1209.46 L1779.44 1209.46 L1778.86 1209.46 L1778.27 1209.46 L1777.68 1209.46 L1777.1 1209.46 L1776.51 1209.46 L1775.92 1209.46 L1775.34 1209.46 L1774.75 1209.46 L1774.16 1209.46 L1773.58 1209.46 L1772.99 1209.46 L1772.4 1209.46 L1771.82 1209.46 L1771.23 1209.46 L1770.65 1209.46 L1770.06 1209.46 L1769.47 1209.46 L1768.89 1209.46 L1768.3 1209.46 L1767.71 1209.46 L1767.13 1209.46 L1766.54 1209.46 L1765.95 1209.46 L1765.37 1209.46 L1764.78 1209.46 L1764.19 1209.46 L1763.61 1209.46 L1763.02 1209.46 L1762.44 1209.46 L1761.85 1209.46 L1761.26 1209.46 L1760.68 1209.46 L1760.09 1209.46 L1759.5 1209.46 L1758.92 1209.46 L1758.33 1209.46 L1757.74 1209.46 L1757.16 1209.46 L1756.57 1209.46 L1755.99 1209.46 L1755.4 1209.46 L1754.81 1209.46 L1754.23 1209.46 L1753.64 1209.46 L1753.05 1209.46 L1752.47 1209.46 L1751.88 1209.46 L1751.29 1209.46 L1750.71 1209.46 L1750.12 1209.46 L1749.53 1209.46 L1748.95 1209.46 L1748.36 1209.46 L1747.78 1209.46 L1747.19 1209.46 L1746.6 1209.46 L1746.02 1209.46 L1745.43 1209.46 L1744.84 1209.46 L1744.26 1209.46 L1743.67 1209.46 L1743.08 1209.46 L1742.5 1209.46 L1741.91 1209.46 L1741.32 1209.46 L1740.74 1209.46 L1740.15 1209.46 L1739.57 1209.46 L1738.98 1209.46 L1738.39 1209.46 L1737.81 1209.46 L1737.22 1209.46 L1736.63 1209.46 L1736.05 1209.46 L1735.46 1209.46 L1734.87 1209.46 L1734.29 1209.46 L1733.7 1209.46 L1733.11 1209.46 L1732.53 1209.46 L1731.94 1209.46 L1731.36 1209.46 L1730.77 1209.46 L1730.18 1209.46 L1729.6 1209.46 L1729.01 1209.46 L1728.42 1209.46 L1727.84 1209.46 L1727.25 1209.46 L1726.66 1209.46 L1726.08 1209.46 L1725.49 1209.46 L1724.91 1209.46 L1724.32 1209.46 L1723.73 1209.46 L1723.15 1209.46 L1722.56 1209.46 L1721.97 1209.46 L1721.39 1209.46 L1720.8 1209.46 L1720.21 1209.46 L1719.63 1209.46 L1719.04 1209.46 L1718.45 1209.46 L1717.87 1209.46 L1717.28 1209.46 L1716.7 1209.46 L1716.11 1209.46 L1715.52 1209.46 L1714.94 1209.46 L1714.35 1209.46 L1713.76 1209.46 L1713.18 1209.46 L1712.59 1209.46 L1712 1209.46 L1711.42 1209.46 L1710.83 1209.46 L1710.24 1209.46 L1709.66 1209.46 L1709.07 1209.46 L1708.49 1209.46 L1707.9 1209.46 L1707.31 1209.46 L1706.73 1209.46 L1706.14 1209.46 L1705.55 1209.46 L1704.97 1209.46 L1704.38 1209.46 L1703.79 1209.46 L1703.21 1209.46 L1702.62 1209.46 L1702.04 1209.46 L1701.45 1209.46 L1700.86 1209.46 L1700.28 1209.46 L1699.69 1209.46 L1699.1 1209.46 L1698.52 1209.46 L1697.93 1209.46 L1697.34 1209.46 L1696.76 1209.46 L1696.17 1209.46 L1695.58 1209.46 L1695 1209.46 L1694.41 1209.46 L1693.83 1209.46 L1693.24 1209.46 L1692.65 1209.46 L1692.07 1209.46 L1691.48 1209.46 L1690.89 1209.46 L1690.31 1209.46 L1689.72 1209.46 L1689.13 1209.46 L1688.55 1209.46 L1687.96 1209.46 L1687.37 1209.46 L1686.79 1209.46 L1686.2 1209.46 L1685.62 1209.46 L1685.03 1209.46 L1684.44 1209.46 L1683.86 1209.46 L1683.27 1209.46 L1682.68 1209.46 L1682.1 1209.46 L1681.51 1209.46 L1680.92 1209.46 L1680.34 1209.46 L1679.75 1209.46 L1679.17 1209.46 L1678.58 1209.46 L1677.99 1209.46 L1677.41 1209.46 L1676.82 1209.46 L1676.23 1209.46 L1675.65 1209.46 L1675.06 1209.46 L1674.47 1209.46 L1673.89 1209.46 L1673.3 1209.46 L1672.71 1209.46 L1672.13 1209.46 L1671.54 1209.46 L1670.96 1209.46 L1670.37 1209.46 L1669.78 1209.46 L1669.2 1209.46 L1668.61 1209.46 L1668.02 1209.46 L1667.44 1209.46 L1666.85 1209.46 L1666.26 1209.46 L1665.68 1209.46 L1665.09 1209.46 L1664.5 1209.46 L1663.92 1209.46 L1663.33 1209.46 L1662.75 1209.46 L1662.16 1209.46 L1661.57 1209.46 L1660.99 1209.46 L1660.4 1209.46 L1659.81 1209.46 L1659.23 1209.46 L1658.64 1209.46 L1658.05 1209.46 L1657.47 1209.46 L1656.88 1209.46 L1656.29 1209.46 L1655.71 1209.46 L1655.12 1209.46 L1654.54 1209.46 L1653.95 1209.46 L1653.36 1209.46 L1652.78 1209.46 L1652.19 1209.46 L1651.6 1209.46 L1651.02 1209.46 L1650.43 1209.46 L1649.84 1209.46 L1649.26 1209.46 L1648.67 1209.46 L1648.09 1209.46 L1647.5 1209.46 L1646.91 1209.46 L1646.33 1209.46 L1645.74 1209.46 L1645.15 1209.46 L1644.57 1209.46 L1643.98 1209.46 L1643.39 1209.46 L1642.81 1209.46 L1642.22 1209.46 L1641.63 1209.46 L1641.05 1209.46 L1640.46 1209.46 L1639.88 1209.46 L1639.29 1209.46 L1638.7 1209.46 L1638.12 1209.46 L1637.53 1209.46 L1636.94 1209.46 L1636.36 1209.46 L1635.77 1209.46 L1635.18 1209.46 L1634.6 1209.46 L1634.01 1209.46 L1633.42 1209.46 L1632.84 1209.46 L1632.25 1209.46 L1631.67 1209.46 L1631.08 1209.46 L1630.49 1209.46 L1629.91 1209.46 L1629.32 1209.46 L1628.73 1209.46 L1628.15 1209.46 L1627.56 1209.46 L1626.97 1209.46 L1626.39 1209.46 L1625.8 1209.46 L1625.22 1209.46 L1624.63 1209.46 L1624.04 1209.46 L1623.46 1209.46 L1622.87 1209.46 L1622.28 1209.46 L1621.7 1209.46 L1621.11 1209.46 L1620.52 1209.46 L1619.94 1209.46 L1619.35 1209.46 L1618.76 1209.46 L1618.18 1209.46 L1617.59 1209.46 L1617.01 1209.46 L1616.42 1209.46 L1615.83 1209.46 L1615.25 1209.46 L1614.66 1209.46 L1614.07 1209.46 L1613.49 1209.46 L1612.9 1209.46 L1612.31 1209.46 L1611.73 1209.46 L1611.14 1209.46 L1610.55 1209.46 L1609.97 1209.46 L1609.38 1209.46 L1608.8 1209.46 L1608.21 1209.46 L1607.62 1209.46 L1607.04 1209.46 L1606.45 1209.46 L1605.86 1209.46 L1605.28 1209.46 L1604.69 1209.46 L1604.1 1209.46 L1603.52 1209.46 L1602.93 1209.46 L1602.34 1209.46 L1601.76 1209.46 L1601.17 1209.46 L1600.59 1209.46 L1600 1209.46 L1599.41 1209.46 L1598.83 1209.46 L1598.24 1209.46 L1597.65 1209.46 L1597.07 1209.46 L1596.48 1209.46 L1595.89 1209.46 L1595.31 1209.46 L1594.72 1209.46 L1594.14 1209.46 L1593.55 1209.46 L1592.96 1209.46 L1592.38 1209.46 L1591.79 1209.46 L1591.2 1209.46 L1590.62 1209.46 L1590.03 1209.46 L1589.44 1209.46 L1588.86 1209.46 L1588.27 1209.46 L1587.68 1209.46 L1587.1 1209.46 L1586.51 1209.46 L1585.93 1209.46 L1585.34 1209.46 L1584.75 1209.46 L1584.17 1209.46 L1583.58 1209.46 L1582.99 1209.46 L1582.41 1209.46 L1581.82 1209.46 L1581.23 1209.46 L1580.65 1209.46 L1580.06 1209.46 L1579.47 1209.46 L1578.89 1209.46 L1578.3 1209.46 L1577.72 1209.46 L1577.13 1209.46 L1576.54 1209.46 L1575.96 1209.46 L1575.37 1209.46 L1574.78 1209.46 L1574.2 1209.46 L1573.61 1209.46 L1573.02 1209.46 L1572.44 1209.46 L1571.85 1209.46 L1571.27 1209.46 L1570.68 1209.46 L1570.09 1209.46 L1569.51 1209.46 L1568.92 1209.46 L1568.33 1209.46 L1567.75 1209.46 L1567.16 1209.46 L1566.57 1209.46 L1565.99 1209.46 L1565.4 1209.46 L1564.81 1209.46 L1564.23 1209.46 L1563.64 1209.46 L1563.06 1209.46 L1562.47 1209.46 L1561.88 1209.46 L1561.3 1209.46 L1560.71 1209.46 L1560.12 1209.46 L1559.54 1209.46 L1558.95 1209.46 L1558.36 1209.46 L1557.78 1209.46 L1557.19 1209.46 L1556.6 1209.46 L1556.02 1209.46 L1555.43 1209.46 L1554.85 1209.46 L1554.26 1209.46 L1553.67 1209.46 L1553.09 1209.46 L1552.5 1209.46 L1551.91 1209.46 L1551.33 1209.46 L1550.74 1209.46 L1550.15 1209.46 L1549.57 1209.46 L1548.98 1209.46 L1548.4 1209.46 L1547.81 1209.46 L1547.22 1209.46 L1546.64 1209.46 L1546.05 1209.46 L1545.46 1209.46 L1544.88 1209.46 L1544.29 1209.46 L1543.7 1209.46 L1543.12 1209.46 L1542.53 1209.46 L1541.94 1209.46 L1541.36 1209.46 L1540.77 1209.46 L1540.19 1209.46 L1539.6 1209.46 L1539.01 1209.46 L1538.43 1209.46 L1537.84 1209.46 L1537.25 1209.46 L1536.67 1209.46 L1536.08 1209.46 L1535.49 1209.46 L1534.91 1209.46 L1534.32 1209.46 L1533.73 1209.46 L1533.15 1209.46 L1532.56 1209.46 L1531.98 1209.46 L1531.39 1209.46 L1530.8 1209.46 L1530.22 1209.46 L1529.63 1209.46 L1529.04 1209.46 L1528.46 1209.46 L1527.87 1209.46 L1527.28 1209.46 L1526.7 1209.46 L1526.11 1209.46 L1525.52 1209.46 L1524.94 1209.46 L1524.35 1209.46 L1523.77 1209.46 L1523.18 1209.46 L1522.59 1209.46 L1522.01 1209.46 L1521.42 1209.46 L1520.83 1209.46 L1520.25 1209.46 L1519.66 1209.46 L1519.07 1209.46 L1518.49 1209.46 L1517.9 1209.46 L1517.32 1209.46 L1516.73 1209.46 L1516.14 1209.46 L1515.56 1209.46 L1514.97 1209.46 L1514.38 1209.46 L1513.8 1209.46 L1513.21 1209.46 L1512.62 1209.46 L1512.04 1209.46 L1511.45 1209.46 L1510.86 1209.46 L1510.28 1209.46 L1509.69 1209.46 L1509.11 1209.46 L1508.52 1209.46 L1507.93 1209.46 L1507.35 1209.46 L1506.76 1209.46 L1506.17 1209.46 L1505.59 1209.46 L1505 1209.46 L1504.41 1209.46 L1503.83 1209.46 L1503.24 1209.46 L1502.65 1209.46 L1502.07 1209.46 L1501.48 1209.46 L1500.9 1209.46 L1500.31 1209.46 L1499.72 1209.46 L1499.14 1209.46 L1498.55 1209.46 L1497.96 1209.46 L1497.38 1209.46 L1496.79 1209.46 L1496.2 1209.46 L1495.62 1209.46 L1495.03 1209.46 L1494.45 1209.46 L1493.86 1209.46 L1493.27 1209.46 L1492.69 1209.46 L1492.1 1209.46 L1491.51 1209.46 L1490.93 1209.46 L1490.34 1209.46 L1489.75 1209.46 L1489.17 1209.46 L1488.58 1209.46 L1487.99 1209.46 L1487.41 1209.46 L1486.82 1209.46 L1486.24 1209.46 L1485.65 1209.46 L1485.06 1209.46 L1484.48 1209.46 L1483.89 1209.46 L1483.3 1209.46 L1482.72 1209.46 L1482.13 1209.46 L1481.54 1209.46 L1480.96 1209.46 L1480.37 1209.46 L1479.78 1209.46 L1479.2 1209.46 L1478.61 1209.46 L1478.03 1209.46 L1477.44 1209.46 L1476.85 1209.46 L1476.27 1209.46 L1475.68 1209.46 L1475.09 1209.46 L1474.51 1209.46 L1473.92 1209.46 L1473.33 1209.46 L1472.75 1209.46 L1472.16 1209.46 L1471.57 1209.46 L1470.99 1209.46 L1470.4 1209.46 L1469.82 1209.46 L1469.23 1209.46 L1468.64 1209.46 L1468.06 1209.46 L1467.47 1209.46 L1466.88 1209.46 L1466.3 1209.46 L1465.71 1209.46 L1465.12 1209.46 L1464.54 1209.46 L1463.95 1209.46 L1463.37 1209.46 L1462.78 1209.46 L1462.19 1209.46 L1461.61 1209.46 L1461.02 1209.46 L1460.43 1209.46 L1459.85 1209.46 L1459.26 1209.46 L1458.67 1209.46 L1458.09 1209.46 L1457.5 1209.46 L1456.91 1209.46 L1456.33 1209.46 L1455.74 1209.46 L1455.16 1209.46 L1454.57 1209.46 L1453.98 1209.46 L1453.4 1209.46 L1452.81 1209.46 L1452.22 1209.46 L1451.64 1209.46 L1451.05 1209.46 L1450.46 1209.46 L1449.88 1209.46 L1449.29 1209.46 L1448.7 1209.46 L1448.12 1209.46 L1447.53 1209.46 L1446.95 1209.46 L1446.36 1209.46 L1445.77 1209.46 L1445.19 1209.46 L1444.6 1209.46 L1444.01 1209.46 L1443.43 1209.46 L1442.84 1209.46 L1442.25 1209.46 L1441.67 1209.46 L1441.08 1209.46 L1440.5 1209.46 L1439.91 1209.46 L1439.32 1209.46 L1438.74 1209.46 L1438.15 1209.46 L1437.56 1209.46 L1436.98 1209.46 L1436.39 1209.46 L1435.8 1209.46 L1435.22 1209.46 L1434.63 1209.46 L1434.04 1209.46 L1433.46 1209.46 L1432.87 1209.46 L1432.29 1209.46 L1431.7 1209.46 L1431.11 1209.46 L1430.53 1209.46 L1429.94 1209.46 L1429.35 1209.46 L1428.77 1209.46 L1428.18 1209.46 L1427.59 1209.46 L1427.01 1209.46 L1426.42 1209.46 L1425.83 1209.46 L1425.25 1209.46 L1424.66 1209.46 L1424.08 1209.46 L1423.49 1209.46 L1422.9 1209.46 L1422.32 1209.46 L1421.73 1209.46 L1421.14 1209.46 L1420.56 1209.46 L1419.97 1209.46 L1419.38 1209.46 L1418.8 1209.46 L1418.21 1209.46 L1417.63 1209.46 L1417.04 1209.46 L1416.45 1209.46 L1415.87 1209.46 L1415.28 1209.46 L1414.69 1209.46 L1414.11 1209.46 L1413.52 1209.46 L1412.93 1209.46 L1412.35 1209.46 L1411.76 1209.46 L1411.17 1209.46 L1410.59 1209.46 L1410 1209.46 L1409.42 1209.46 L1408.83 1209.46 L1408.24 1209.46 L1407.66 1209.46 L1407.07 1209.46 L1406.48 1209.46 L1405.9 1209.46 L1405.31 1209.46 L1404.72 1209.46 L1404.14 1209.46 L1403.55 1209.46 L1402.96 1209.46 L1402.38 1209.46 L1401.79 1209.46 L1401.21 1209.46 L1400.62 1209.46 L1400.03 1209.46 L1399.45 1209.46 L1398.86 1209.46 L1398.27 1209.46 L1397.69 1209.46 L1397.1 1209.46 L1396.51 1209.46 L1395.93 1209.46 L1395.34 1209.46 L1394.75 1209.46 L1394.17 1209.46 L1393.58 1209.46 L1393 1209.46 L1392.41 1209.46 L1391.82 1209.46 L1391.24 1209.46 L1390.65 1209.46 L1390.06 1209.46 L1389.48 1209.46 L1388.89 1209.46 L1388.3 1209.46 L1387.72 1209.46 L1387.13 1209.46 L1386.55 1209.46 L1385.96 1209.46 L1385.37 1209.46 L1384.79 1209.46 L1384.2 1209.46 L1383.61 1209.46 L1383.03 1209.46 L1382.44 1209.46 L1381.85 1209.46 L1381.27 1209.46 L1380.68 1209.46 L1380.09 1209.46 L1379.51 1209.46 L1378.92 1209.46 L1378.34 1209.46 L1377.75 1209.46 L1377.16 1209.46 L1376.58 1209.46 L1375.99 1209.46 L1375.4 1209.46 L1374.82 1209.46 L1374.23 1209.46 L1373.64 1209.46 L1373.06 1209.46 L1372.47 1209.46 L1371.88 1209.46 L1371.3 1209.46 L1370.71 1209.46 L1370.13 1209.46 L1369.54 1209.46 L1368.95 1209.46 L1368.37 1209.46 L1367.78 1209.46 L1367.19 1209.46 L1366.61 1209.46 L1366.02 1209.46 L1365.43 1209.46 L1364.85 1209.46 L1364.26 1209.46 L1363.68 1209.46 L1363.09 1209.46 L1362.5 1209.46 L1361.92 1209.46 L1361.33 1209.46 L1360.74 1209.46 L1360.16 1209.46 L1359.57 1209.46 L1358.98 1209.46 L1358.4 1209.46 L1357.81 1209.46 L1357.22 1209.46 L1356.64 1209.46 L1356.05 1209.46 L1355.47 1209.46 L1354.88 1209.46 L1354.29 1209.46 L1353.71 1209.46 L1353.12 1209.46 L1352.53 1209.46 L1351.95 1209.46 L1351.36 1209.46 L1350.77 1209.46 L1350.19 1209.46 L1349.6 1209.46 L1349.01 1209.46 L1348.43 1209.46 L1347.84 1209.46 L1347.26 1209.46 L1346.67 1209.46 L1346.08 1209.46 L1345.5 1209.46 L1344.91 1209.46 L1344.32 1209.46 L1343.74 1209.46 L1343.15 1209.46 L1342.56 1209.46 L1341.98 1209.46 L1341.39 1209.46 L1340.8 1209.46 L1340.22 1209.46 L1339.63 1209.46 L1339.05 1209.46 L1338.46 1209.46 L1337.87 1209.46 L1337.29 1209.46 L1336.7 1209.46 L1336.11 1209.46 L1335.53 1209.46 L1334.94 1209.46 L1334.35 1209.46 L1333.77 1209.46 L1333.18 1209.46 L1332.6 1209.46 L1332.01 1209.46 L1331.42 1209.46 L1330.84 1209.46 L1330.25 1209.46 L1329.66 1209.46 L1329.08 1209.46 L1328.49 1209.46 L1327.9 1209.46 L1327.32 1209.46 L1326.73 1209.46 L1326.14 1209.46 L1325.56 1209.46 L1324.97 1209.46 L1324.39 1209.46 L1323.8 1209.46 L1323.21 1209.46 L1322.63 1209.46 L1322.04 1209.46 L1321.45 1209.46 L1320.87 1209.46 L1320.28 1209.46 L1319.69 1209.46 L1319.11 1209.46 L1318.52 1209.46 L1317.93 1209.46 L1317.35 1209.46 L1316.76 1209.46 L1316.18 1209.46 L1315.59 1209.46 L1315 1209.46 L1314.42 1209.46 L1313.83 1209.46 L1313.24 1209.46 L1312.66 1209.46 L1312.07 1209.46 L1311.48 1209.46 L1310.9 1209.46 L1310.31 1209.46 L1309.73 1209.46 L1309.14 1209.46 L1308.55 1209.46 L1307.97 1209.46 L1307.38 1209.46 L1306.79 1209.46 L1306.21 1209.46 L1305.62 1209.46 L1305.03 1209.46 L1304.45 1209.46 L1303.86 1209.46 L1303.27 1209.46 L1302.69 1209.46 L1302.1 1209.46 L1301.52 1209.46 L1300.93 1209.46 L1300.34 1209.46 L1299.76 1209.46 L1299.17 1209.46 L1298.58 1209.46 L1298 1209.46 L1297.41 1209.46 L1296.82 1209.46 L1296.24 1209.46 L1295.65 1209.46 L1295.06 1209.46 L1294.48 1209.46 L1293.89 1209.46 L1293.31 1209.46 L1292.72 1209.46 L1292.13 1209.46 L1291.55 1209.46 L1290.96 1209.46 L1290.37 1209.46 L1289.79 1209.46 L1289.2 1209.46 L1288.61 1209.46 L1288.03 1209.46 L1287.44 1209.46 L1286.86 1209.46 L1286.27 1209.46 L1285.68 1209.46 L1285.1 1209.46 L1284.51 1209.46 L1283.92 1209.46 L1283.34 1209.46 L1282.75 1209.46 L1282.16 1209.46 L1281.58 1209.46 L1280.99 1209.46 L1280.4 1209.46 L1279.82 1209.46 L1279.23 1209.46 L1278.65 1209.46 L1278.06 1209.46 L1277.47 1209.46 L1276.89 1209.46 L1276.3 1209.46 L1275.71 1209.46 L1275.13 1209.46 L1274.54 1209.46 L1273.95 1209.46 L1273.37 1209.46 L1272.78 1209.46 L1272.19 1209.46 L1271.61 1209.46 L1271.02 1209.46 L1270.44 1209.46 L1269.85 1209.46 L1269.26 1209.46 L1268.68 1209.46 L1268.09 1209.46 L1267.5 1209.46 L1266.92 1209.46 L1266.33 1209.46 L1265.74 1209.46 L1265.16 1209.46 L1264.57 1209.46 L1263.98 1209.46 L1263.4 1209.46 L1262.81 1209.46 L1262.23 1209.46 L1261.64 1209.46 L1261.05 1209.46 L1260.47 1209.46 L1259.88 1209.46 L1259.29 1209.46 L1258.71 1209.46 L1258.12 1209.46 L1257.53 1209.46 L1256.95 1209.46 L1256.36 1209.46 L1255.78 1209.46 L1255.19 1209.46 L1254.6 1209.46 L1254.02 1209.46 L1253.43 1209.46 L1252.84 1209.46 L1252.26 1209.46 L1251.67 1209.46 L1251.08 1209.46 L1250.5 1209.46 L1249.91 1209.46 L1249.32 1209.46 L1248.74 1209.46 L1248.15 1209.46 L1247.57 1209.46 L1246.98 1209.46 L1246.39 1209.46 L1245.81 1209.46 L1245.22 1209.46 L1244.63 1209.46 L1244.05 1209.46 L1243.46 1209.46 L1242.87 1209.46 L1242.29 1209.46 L1241.7 1209.46 L1241.11 1209.46 L1240.53 1209.46 L1239.94 1209.46 L1239.36 1209.46 L1238.77 1209.46 L1238.18 1209.46 L1237.6 1209.46 L1237.01 1209.46 L1236.42 1209.46 L1235.84 1209.46 L1235.25 1209.46 L1234.66 1209.46 L1234.08 1209.46 L1233.49 1209.46 L1232.91 1209.46 L1232.32 1209.46 L1231.73 1209.46 L1231.15 1209.46 L1230.56 1209.46 L1229.97 1209.46 L1229.39 1209.46 L1228.8 1209.46 L1228.21 1209.46 L1227.63 1209.46 L1227.04 1209.46 L1226.45 1209.46 L1225.87 1209.46 L1225.28 1209.46 L1224.7 1209.46 L1224.11 1209.46 L1223.52 1209.46 L1222.94 1209.46 L1222.35 1209.46 L1221.76 1209.46 L1221.18 1209.46 L1220.59 1209.46 L1220 1209.46 L1219.42 1209.46 L1218.83 1209.46 L1218.24 1209.46 L1217.66 1209.46 L1217.07 1209.46 L1216.49 1209.46 L1215.9 1209.46 L1215.31 1209.46 L1214.73 1209.46 L1214.14 1209.46 L1213.55 1209.46 L1212.97 1209.46 L1212.38 1209.46 L1211.79 1209.46 L1211.21 1209.46 L1210.62 1209.46 L1210.03 1209.46 L1209.45 1209.46 L1208.86 1209.46 L1208.28 1209.46 L1207.69 1209.46 L1207.1 1209.46 L1206.52 1209.46 L1205.93 1209.46 L1205.34 1209.46 L1204.76 1209.46 L1204.17 1209.46 L1203.58 1209.46 L1203 1209.46 L1202.41 1209.46 L1201.83 1209.46 L1201.24 1209.46 L1200.65 1209.46 L1200.07 1209.46 L1199.48 1209.46 L1198.89 1209.46 L1198.31 1209.46 L1197.72 1209.46 L1197.13 1209.46 L1196.55 1209.46 L1195.96 1209.46 L1195.37 1209.46 L1194.79 1209.46 L1194.2 1209.46 L1193.62 1209.46 L1193.03 1209.46 L1192.44 1209.46 L1191.86 1209.46 L1191.27 1209.46 L1190.68 1209.46 L1190.1 1209.46 L1189.51 1209.46 L1188.92 1209.46 L1188.34 1209.46 L1187.75 1209.46 L1187.16 1209.46 L1186.58 1209.46 L1185.99 1209.46 L1185.41 1209.46 L1184.82 1209.46 L1184.23 1209.46 L1183.65 1209.46 L1183.06 1209.46 L1182.47 1209.46 L1181.89 1209.46 L1181.3 1209.46 L1180.71 1209.46 L1180.13 1209.46 L1179.54 1209.46 L1178.96 1209.46 L1178.37 1209.46 L1177.78 1209.46 L1177.2 1209.46 L1176.61 1209.46 L1176.02 1209.46 L1175.44 1209.46 L1174.85 1209.46 L1174.26 1209.46 L1173.68 1209.46 L1173.09 1209.46 L1172.5 1209.46 L1171.92 1209.46 L1171.33 1209.46 L1170.75 1209.46 L1170.16 1209.46 L1169.57 1209.46 L1168.99 1209.46 L1168.4 1209.46 L1167.81 1209.46 L1167.23 1209.46 L1166.64 1209.46 L1166.05 1209.46 L1165.47 1209.46 L1164.88 1209.46 L1164.29 1209.46 L1163.71 1209.46 L1163.12 1209.46 L1162.54 1209.46 L1161.95 1209.46 L1161.36 1209.46 L1160.78 1209.46 L1160.19 1209.46 L1159.6 1209.46 L1159.02 1209.46 L1158.43 1209.46 L1157.84 1209.46 L1157.26 1209.46 L1156.67 1209.46 L1156.09 1209.46 L1155.5 1209.46 L1154.91 1209.46 L1154.33 1209.46 L1153.74 1209.46 L1153.15 1209.46 L1152.57 1209.46 L1151.98 1209.46 L1151.39 1209.46 L1150.81 1209.46 L1150.22 1209.46 L1149.63 1209.46 L1149.05 1209.46 L1148.46 1209.46 L1147.88 1209.46 L1147.29 1209.46 L1146.7 1209.46 L1146.12 1209.46 L1145.53 1209.46 L1144.94 1209.46 L1144.36 1209.46 L1143.77 1209.46 L1143.18 1209.46 L1142.6 1209.46 L1142.01 1209.46 L1141.42 1209.46 L1140.84 1209.46 L1140.25 1209.46 L1139.67 1209.46 L1139.08 1209.46 L1138.49 1209.46 L1137.91 1209.46 L1137.32 1209.46 L1136.73 1209.46 L1136.15 1209.46 L1135.56 1209.46 L1134.97 1209.46 L1134.39 1209.46 L1133.8 1209.46 L1133.21 1209.46 L1132.63 1209.46 L1132.04 1209.46 L1131.46 1209.46 L1130.87 1209.46 L1130.28 1209.46 L1129.7 1209.46 L1129.11 1209.46 L1128.52 1209.46 L1127.94 1209.46 L1127.35 1209.46 L1126.76 1209.46 L1126.18 1209.46 L1125.59 1209.46 L1125.01 1209.46 L1124.42 1209.46 L1123.83 1209.46 L1123.25 1209.46 L1122.66 1209.46 L1122.07 1209.46 L1121.49 1209.46 L1120.9 1209.46 L1120.31 1209.46 L1119.73 1209.46 L1119.14 1209.46 L1118.55 1209.46 L1117.97 1209.46 L1117.38 1209.46 L1116.8 1209.46 L1116.21 1209.46 L1115.62 1209.46 L1115.04 1209.46 L1114.45 1209.46 L1113.86 1209.46 L1113.28 1209.46 L1112.69 1209.46 L1112.1 1209.46 L1111.52 1209.46 L1110.93 1209.46 L1110.34 1209.46 L1109.76 1209.46 L1109.17 1209.46 L1108.59 1209.46 L1108 1209.46 L1107.41 1209.46 L1106.83 1209.46 L1106.24 1209.46 L1105.65 1209.46 L1105.07 1209.46 L1104.48 1209.46 L1103.89 1209.46 L1103.31 1209.46 L1102.72 1209.46 L1102.14 1209.46 L1101.55 1209.46 L1100.96 1209.46 L1100.38 1209.46 L1099.79 1209.46 L1099.2 1209.46 L1098.62 1209.46 L1098.03 1209.46 L1097.44 1209.46 L1096.86 1209.46 L1096.27 1209.46 L1095.68 1209.46 L1095.1 1209.46 L1094.51 1209.46 L1093.93 1209.46 L1093.34 1209.46 L1092.75 1209.46 L1092.17 1209.46 L1091.58 1209.46 L1090.99 1209.46 L1090.41 1209.46 L1089.82 1209.46 L1089.23 1209.46 L1088.65 1209.46 L1088.06 1209.46 L1087.47 1209.46 L1086.89 1209.46 L1086.3 1209.46 L1085.72 1209.46 L1085.13 1209.46 L1084.54 1209.46 L1083.96 1209.46 L1083.37 1209.46 L1082.78 1209.46 L1082.2 1209.46 L1081.61 1209.46 L1081.02 1209.46 L1080.44 1209.46 L1079.85 1209.46 L1079.26 1209.46 L1078.68 1209.46 L1078.09 1209.46 L1077.51 1209.46 L1076.92 1209.46 L1076.33 1209.46 L1075.75 1209.46 L1075.16 1209.46 L1074.57 1209.46 L1073.99 1209.46 L1073.4 1209.46 L1072.81 1209.46 L1072.23 1209.46 L1071.64 1209.46 L1071.06 1209.46 L1070.47 1209.46 L1069.88 1209.46 L1069.3 1209.46 L1068.71 1209.46 L1068.12 1209.46 L1067.54 1209.46 L1066.95 1209.46 L1066.36 1209.46 L1065.78 1209.46 L1065.19 1209.46 L1064.6 1209.46 L1064.02 1209.46 L1063.43 1209.46 L1062.85 1209.46 L1062.26 1209.46 L1061.67 1209.46 L1061.09 1209.46 L1060.5 1209.46 L1059.91 1209.46 L1059.33 1209.46 L1058.74 1209.46 L1058.15 1209.46 L1057.57 1209.46 L1056.98 1209.46 L1056.39 1209.46 L1055.81 1209.46 L1055.22 1209.46 L1054.64 1209.46 L1054.05 1209.46 L1053.46 1209.46 L1052.88 1209.46 L1052.29 1209.46 L1051.7 1209.46 L1051.12 1209.46 L1050.53 1209.46 L1049.94 1209.46 L1049.36 1209.46 L1048.77 1209.46 L1048.19 1209.46 L1047.6 1209.46 L1047.01 1209.46 L1046.43 1209.46 L1045.84 1209.46 L1045.25 1209.46 L1044.67 1209.46 L1044.08 1209.46 L1043.49 1209.46 L1042.91 1209.46 L1042.32 1209.46 L1041.73 1209.46 L1041.15 1209.46 L1040.56 1209.46 L1039.98 1209.46 L1039.39 1209.46 L1038.8 1209.46 L1038.22 1209.46 L1037.63 1209.46 L1037.04 1209.46 L1036.46 1209.46 L1035.87 1209.46 L1035.28 1209.46 L1034.7 1209.46 L1034.11 1209.46 L1033.52 1209.46 L1032.94 1209.46 L1032.35 1209.46 L1031.77 1209.46 L1031.18 1209.46 L1030.59 1209.46 L1030.01 1209.46 L1029.42 1209.46 L1028.83 1209.46 L1028.25 1209.46 L1027.66 1209.46 L1027.07 1209.46 L1026.49 1209.46 L1025.9 1209.46 L1025.32 1209.46 L1024.73 1209.46 L1024.14 1209.46 L1023.56 1209.46 L1022.97 1209.46 L1022.38 1209.46 L1021.8 1209.46 L1021.21 1209.46 L1020.62 1209.46 L1020.04 1209.46 L1019.45 1209.46 L1018.86 1209.46 L1018.28 1209.46 L1017.69 1209.46 L1017.11 1209.46 L1016.52 1209.46 L1015.93 1209.46 L1015.35 1209.46 L1014.76 1209.46 L1014.17 1209.46 L1013.59 1209.46 L1013 1209.46 L1012.41 1209.46 L1011.83 1209.46 L1011.24 1209.46 L1010.65 1209.46 L1010.07 1209.46 L1009.48 1209.46 L1008.9 1209.46 L1008.31 1209.46 L1007.72 1209.46 L1007.14 1209.46 L1006.55 1209.46 L1005.96 1209.46 L1005.38 1209.46 L1004.79 1209.46 L1004.2 1209.46 L1003.62 1209.46 L1003.03 1209.46 L1002.44 1209.46 L1001.86 1209.46 L1001.27 1209.46 L1000.69 1209.46 L1000.1 1209.46 L999.513 1209.46 L998.926 1209.46 L998.34 1209.46 L997.754 1209.46 L997.167 1209.46 L996.581 1209.46 L995.994 1209.46 L995.408 1209.46 L994.822 1209.46 L994.235 1209.46 L993.649 1209.46 L993.062 1209.46 L992.476 1209.46 L991.889 1209.46 L991.303 1209.46 L990.717 1209.46 L990.13 1209.46 L989.544 1209.46 L988.957 1209.46 L988.371 1209.46 L987.785 1209.46 L987.198 1209.46 L986.612 1209.46 L986.025 1209.46  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.57 986.612,1209.57 987.198,1209.57 987.785,1209.57 988.371,1209.57 988.957,1209.57 989.544,1209.57 990.13,1209.57 990.717,1209.57 991.303,1209.57 991.889,1209.57 992.476,1209.57 993.062,1209.57 993.649,1209.57 994.235,1209.57 994.822,1209.57 995.408,1209.57 995.994,1209.57 996.581,1209.57 997.167,1209.57 997.754,1209.57 998.34,1209.57 998.926,1209.57 999.513,1209.57 1000.1,1209.57 1000.69,1209.57 1001.27,1209.57 1001.86,1209.57 1002.44,1209.57 1003.03,1209.57 1003.62,1209.57 1004.2,1209.57 1004.79,1209.57 1005.38,1209.57 1005.96,1209.57 1006.55,1209.57 1007.14,1209.57 1007.72,1209.57 1008.31,1209.57 1008.9,1209.57 1009.48,1209.57 1010.07,1209.57 1010.65,1209.57 1011.24,1209.57 1011.83,1209.57 1012.41,1209.57 1013,1209.57 1013.59,1209.57 1014.17,1209.57 1014.76,1209.57 1015.35,1209.57 1015.93,1209.57 1016.52,1209.57 1017.11,1209.57 1017.69,1209.57 1018.28,1209.57 1018.86,1209.57 1019.45,1209.57 1020.04,1209.57 1020.62,1209.57 1021.21,1209.57 1021.8,1209.57 1022.38,1209.57 1022.97,1209.57 1023.56,1209.57 1024.14,1209.57 1024.73,1209.57 1025.32,1209.57 1025.9,1209.57 1026.49,1209.57 1027.07,1209.57 1027.66,1209.57 1028.25,1209.57 1028.83,1209.57 1029.42,1209.57 1030.01,1209.57 1030.59,1209.57 1031.18,1209.57 1031.77,1209.57 1032.35,1209.57 1032.94,1209.57 1033.52,1209.57 1034.11,1209.57 1034.7,1209.57 1035.28,1209.57 1035.87,1209.57 1036.46,1209.57 1037.04,1209.57 1037.63,1209.57 1038.22,1209.57 1038.8,1209.57 1039.39,1209.57 1039.98,1209.57 1040.56,1209.57 1041.15,1209.57 1041.73,1209.57 1042.32,1209.57 1042.91,1209.57 1043.49,1209.57 1044.08,1209.57 1044.67,1209.57 1045.25,1209.57 1045.84,1209.57 1046.43,1209.57 1047.01,1209.57 1047.6,1209.57 1048.19,1209.57 1048.77,1209.57 1049.36,1209.57 1049.94,1209.57 1050.53,1209.57 1051.12,1209.57 1051.7,1209.57 1052.29,1209.57 1052.88,1209.57 1053.46,1209.57 1054.05,1209.57 1054.64,1209.57 1055.22,1209.57 1055.81,1209.57 1056.39,1209.57 1056.98,1209.57 1057.57,1209.57 1058.15,1209.57 1058.74,1209.57 1059.33,1209.57 1059.91,1209.57 1060.5,1209.57 1061.09,1209.57 1061.67,1209.57 1062.26,1209.57 1062.85,1209.57 1063.43,1209.57 1064.02,1209.57 1064.6,1209.57 1065.19,1209.57 1065.78,1209.57 1066.36,1209.57 1066.95,1209.57 1067.54,1209.57 1068.12,1209.57 1068.71,1209.57 1069.3,1209.57 1069.88,1209.57 1070.47,1209.57 1071.06,1209.57 1071.64,1209.57 1072.23,1209.57 1072.81,1209.57 1073.4,1209.57 1073.99,1209.57 1074.57,1209.57 1075.16,1209.57 1075.75,1209.57 1076.33,1209.57 1076.92,1209.57 1077.51,1209.57 1078.09,1209.57 1078.68,1209.57 1079.26,1209.57 1079.85,1209.57 1080.44,1209.57 1081.02,1209.57 1081.61,1209.57 1082.2,1209.57 1082.78,1209.57 1083.37,1209.57 1083.96,1209.57 1084.54,1209.57 1085.13,1209.57 1085.72,1209.57 1086.3,1209.57 1086.89,1209.57 1087.47,1209.57 1088.06,1209.57 1088.65,1209.57 1089.23,1209.57 1089.82,1209.57 1090.41,1209.57 1090.99,1209.57 1091.58,1209.57 1092.17,1209.57 1092.75,1209.57 1093.34,1209.57 1093.93,1209.57 1094.51,1209.57 1095.1,1209.57 1095.68,1209.57 1096.27,1209.57 1096.86,1209.57 1097.44,1209.57 1098.03,1209.57 1098.62,1209.57 1099.2,1209.57 1099.79,1209.57 1100.38,1209.57 1100.96,1209.57 1101.55,1209.57 1102.14,1209.57 1102.72,1209.57 1103.31,1209.57 1103.89,1209.57 1104.48,1209.57 1105.07,1209.57 1105.65,1209.57 1106.24,1209.57 1106.83,1209.57 1107.41,1209.57 1108,1209.57 1108.59,1209.57 1109.17,1209.57 1109.76,1209.57 1110.34,1209.57 1110.93,1209.57 1111.52,1209.57 1112.1,1209.57 1112.69,1209.57 1113.28,1209.57 1113.86,1209.57 1114.45,1209.57 1115.04,1209.57 1115.62,1209.57 1116.21,1209.57 1116.8,1209.57 1117.38,1209.57 1117.97,1209.57 1118.55,1209.57 1119.14,1209.57 1119.73,1209.57 1120.31,1209.57 1120.9,1209.57 1121.49,1209.57 1122.07,1209.57 1122.66,1209.57 1123.25,1209.57 1123.83,1209.57 1124.42,1209.57 1125.01,1209.57 1125.59,1209.57 1126.18,1209.57 1126.76,1209.57 1127.35,1209.57 1127.94,1209.57 1128.52,1209.57 1129.11,1209.57 1129.7,1209.57 1130.28,1209.57 1130.87,1209.57 1131.46,1209.57 1132.04,1209.57 1132.63,1209.57 1133.21,1209.57 1133.8,1209.57 1134.39,1209.57 1134.97,1209.57 1135.56,1209.57 1136.15,1209.57 1136.73,1209.57 1137.32,1209.57 1137.91,1209.57 1138.49,1209.57 1139.08,1209.57 1139.67,1209.57 1140.25,1209.57 1140.84,1209.57 1141.42,1209.57 1142.01,1209.57 1142.6,1209.57 1143.18,1209.57 1143.77,1209.57 1144.36,1209.57 1144.94,1209.57 1145.53,1209.57 1146.12,1209.57 1146.7,1209.57 1147.29,1209.57 1147.88,1209.57 1148.46,1209.57 1149.05,1209.57 1149.63,1209.57 1150.22,1209.57 1150.81,1209.57 1151.39,1209.57 1151.98,1209.57 1152.57,1209.57 1153.15,1209.57 1153.74,1209.57 1154.33,1209.57 1154.91,1209.57 1155.5,1209.57 1156.09,1209.57 1156.67,1209.57 1157.26,1209.57 1157.84,1209.57 1158.43,1209.57 1159.02,1209.57 1159.6,1209.57 1160.19,1209.57 1160.78,1209.57 1161.36,1209.57 1161.95,1209.57 1162.54,1209.57 1163.12,1209.57 1163.71,1209.57 1164.29,1209.57 1164.88,1209.57 1165.47,1209.57 1166.05,1209.57 1166.64,1209.57 1167.23,1209.57 1167.81,1209.57 1168.4,1209.57 1168.99,1209.57 1169.57,1209.57 1170.16,1209.57 1170.75,1209.57 1171.33,1209.57 1171.92,1209.57 1172.5,1209.57 1173.09,1209.57 1173.68,1209.57 1174.26,1209.57 1174.85,1209.57 1175.44,1209.57 1176.02,1209.57 1176.61,1209.57 1177.2,1209.57 1177.78,1209.57 1178.37,1209.57 1178.96,1209.57 1179.54,1209.57 1180.13,1209.57 1180.71,1209.57 1181.3,1209.57 1181.89,1209.57 1182.47,1209.57 1183.06,1209.57 1183.65,1209.57 1184.23,1209.57 1184.82,1209.57 1185.41,1209.57 1185.99,1209.57 1186.58,1209.57 1187.16,1209.57 1187.75,1209.57 1188.34,1209.57 1188.92,1209.57 1189.51,1209.57 1190.1,1209.57 1190.68,1209.57 1191.27,1209.57 1191.86,1209.57 1192.44,1209.57 1193.03,1209.57 1193.62,1209.57 1194.2,1209.57 1194.79,1209.57 1195.37,1209.57 1195.96,1209.57 1196.55,1209.57 1197.13,1209.57 1197.72,1209.57 1198.31,1209.57 1198.89,1209.57 1199.48,1209.57 1200.07,1209.57 1200.65,1209.57 1201.24,1209.57 1201.83,1209.57 1202.41,1209.57 1203,1209.57 1203.58,1209.57 1204.17,1209.57 1204.76,1209.57 1205.34,1209.57 1205.93,1209.57 1206.52,1209.57 1207.1,1209.57 1207.69,1209.57 1208.28,1209.57 1208.86,1209.57 1209.45,1209.57 1210.03,1209.57 1210.62,1209.57 1211.21,1209.57 1211.79,1209.57 1212.38,1209.57 1212.97,1209.57 1213.55,1209.57 1214.14,1209.57 1214.73,1209.57 1215.31,1209.57 1215.9,1209.57 1216.49,1209.57 1217.07,1209.57 1217.66,1209.57 1218.24,1209.57 1218.83,1209.57 1219.42,1209.57 1220,1209.57 1220.59,1209.57 1221.18,1209.57 1221.76,1209.57 1222.35,1209.57 1222.94,1209.57 1223.52,1209.57 1224.11,1209.57 1224.7,1209.57 1225.28,1209.57 1225.87,1209.57 1226.45,1209.57 1227.04,1209.57 1227.63,1209.57 1228.21,1209.57 1228.8,1209.57 1229.39,1209.57 1229.97,1209.57 1230.56,1209.57 1231.15,1209.57 1231.73,1209.57 1232.32,1209.57 1232.91,1209.57 1233.49,1209.57 1234.08,1209.57 1234.66,1209.57 1235.25,1209.57 1235.84,1209.57 1236.42,1209.57 1237.01,1209.57 1237.6,1209.57 1238.18,1209.57 1238.77,1209.57 1239.36,1209.57 1239.94,1209.57 1240.53,1209.57 1241.11,1209.57 1241.7,1209.57 1242.29,1209.57 1242.87,1209.57 1243.46,1209.57 1244.05,1209.57 1244.63,1209.57 1245.22,1209.57 1245.81,1209.57 1246.39,1209.57 1246.98,1209.57 1247.57,1209.57 1248.15,1209.57 1248.74,1209.57 1249.32,1209.57 1249.91,1209.57 1250.5,1209.57 1251.08,1209.57 1251.67,1209.57 1252.26,1209.57 1252.84,1209.57 1253.43,1209.57 1254.02,1209.57 1254.6,1209.57 1255.19,1209.57 1255.78,1209.57 1256.36,1209.57 1256.95,1209.57 1257.53,1209.57 1258.12,1209.57 1258.71,1209.57 1259.29,1209.57 1259.88,1209.57 1260.47,1209.57 1261.05,1209.57 1261.64,1209.57 1262.23,1209.57 1262.81,1209.57 1263.4,1209.57 1263.98,1209.57 1264.57,1209.57 1265.16,1209.57 1265.74,1209.57 1266.33,1209.57 1266.92,1209.57 1267.5,1209.57 1268.09,1209.57 1268.68,1209.57 1269.26,1209.57 1269.85,1209.57 1270.44,1209.57 1271.02,1209.57 1271.61,1209.57 1272.19,1209.57 1272.78,1209.57 1273.37,1209.57 1273.95,1209.57 1274.54,1209.57 1275.13,1209.57 1275.71,1209.57 1276.3,1209.57 1276.89,1209.57 1277.47,1209.57 1278.06,1209.57 1278.65,1209.57 1279.23,1209.57 1279.82,1209.57 1280.4,1209.57 1280.99,1209.57 1281.58,1209.57 1282.16,1209.57 1282.75,1209.57 1283.34,1209.57 1283.92,1209.57 1284.51,1209.57 1285.1,1209.57 1285.68,1209.57 1286.27,1209.57 1286.86,1209.57 1287.44,1209.57 1288.03,1209.57 1288.61,1209.57 1289.2,1209.57 1289.79,1209.57 1290.37,1209.57 1290.96,1209.57 1291.55,1209.57 1292.13,1209.57 1292.72,1209.57 1293.31,1209.57 1293.89,1209.57 1294.48,1209.57 1295.06,1209.57 1295.65,1209.57 1296.24,1209.57 1296.82,1209.57 1297.41,1209.57 1298,1209.57 1298.58,1209.57 1299.17,1209.57 1299.76,1209.57 1300.34,1209.57 1300.93,1209.57 1301.52,1209.57 1302.1,1209.57 1302.69,1209.57 1303.27,1209.57 1303.86,1209.57 1304.45,1209.57 1305.03,1209.57 1305.62,1209.57 1306.21,1209.57 1306.79,1209.57 1307.38,1209.57 1307.97,1209.57 1308.55,1209.57 1309.14,1209.57 1309.73,1209.57 1310.31,1209.57 1310.9,1209.57 1311.48,1209.57 1312.07,1209.57 1312.66,1209.57 1313.24,1209.57 1313.83,1209.57 1314.42,1209.57 1315,1209.57 1315.59,1209.57 1316.18,1209.57 1316.76,1209.57 1317.35,1209.57 1317.93,1209.57 1318.52,1209.57 1319.11,1209.57 1319.69,1209.57 1320.28,1209.57 1320.87,1209.57 1321.45,1209.57 1322.04,1209.57 1322.63,1209.57 1323.21,1209.57 1323.8,1209.57 1324.39,1209.57 1324.97,1209.57 1325.56,1209.57 1326.14,1209.57 1326.73,1209.57 1327.32,1209.57 1327.9,1209.57 1328.49,1209.57 1329.08,1209.57 1329.66,1209.57 1330.25,1209.57 1330.84,1209.57 1331.42,1209.57 1332.01,1209.57 1332.6,1209.57 1333.18,1209.57 1333.77,1209.57 1334.35,1209.57 1334.94,1209.57 1335.53,1209.57 1336.11,1209.57 1336.7,1209.57 1337.29,1209.57 1337.87,1209.57 1338.46,1209.57 1339.05,1209.57 1339.63,1209.57 1340.22,1209.57 1340.8,1209.57 1341.39,1209.57 1341.98,1209.57 1342.56,1209.57 1343.15,1209.57 1343.74,1209.57 1344.32,1209.57 1344.91,1209.57 1345.5,1209.57 1346.08,1209.57 1346.67,1209.57 1347.26,1209.57 1347.84,1209.57 1348.43,1209.57 1349.01,1209.57 1349.6,1209.57 1350.19,1209.57 1350.77,1209.57 1351.36,1209.57 1351.95,1209.57 1352.53,1209.57 1353.12,1209.57 1353.71,1209.57 1354.29,1209.57 1354.88,1209.57 1355.47,1209.57 1356.05,1209.57 1356.64,1209.57 1357.22,1209.57 1357.81,1209.57 1358.4,1209.57 1358.98,1209.57 1359.57,1209.57 1360.16,1209.57 1360.74,1209.57 1361.33,1209.57 1361.92,1209.57 1362.5,1209.57 1363.09,1209.57 1363.68,1209.57 1364.26,1209.57 1364.85,1209.57 1365.43,1209.57 1366.02,1209.57 1366.61,1209.57 1367.19,1209.57 1367.78,1209.57 1368.37,1209.57 1368.95,1209.57 1369.54,1209.57 1370.13,1209.57 1370.71,1209.57 1371.3,1209.57 1371.88,1209.57 1372.47,1209.57 1373.06,1209.57 1373.64,1209.57 1374.23,1209.57 1374.82,1209.57 1375.4,1209.57 1375.99,1209.57 1376.58,1209.57 1377.16,1209.57 1377.75,1209.57 1378.34,1209.57 1378.92,1209.57 1379.51,1209.57 1380.09,1209.57 1380.68,1209.57 1381.27,1209.57 1381.85,1209.57 1382.44,1209.57 1383.03,1209.57 1383.61,1209.57 1384.2,1209.57 1384.79,1209.57 1385.37,1209.57 1385.96,1209.57 1386.55,1209.57 1387.13,1209.57 1387.72,1209.57 1388.3,1209.57 1388.89,1209.57 1389.48,1209.57 1390.06,1209.57 1390.65,1209.57 1391.24,1209.57 1391.82,1209.57 1392.41,1209.57 1393,1209.57 1393.58,1209.57 1394.17,1209.57 1394.75,1209.57 1395.34,1209.57 1395.93,1209.57 1396.51,1209.57 1397.1,1209.57 1397.69,1209.57 1398.27,1209.57 1398.86,1209.57 1399.45,1209.57 1400.03,1209.57 1400.62,1209.57 1401.21,1209.57 1401.79,1209.57 1402.38,1209.57 1402.96,1209.57 1403.55,1209.57 1404.14,1209.57 1404.72,1209.57 1405.31,1209.57 1405.9,1209.57 1406.48,1209.57 1407.07,1209.57 1407.66,1209.57 1408.24,1209.57 1408.83,1209.57 1409.42,1209.57 1410,1209.57 1410.59,1209.57 1411.17,1209.57 1411.76,1209.57 1412.35,1209.57 1412.93,1209.57 1413.52,1209.57 1414.11,1209.57 1414.69,1209.57 1415.28,1209.57 1415.87,1209.57 1416.45,1209.57 1417.04,1209.57 1417.63,1209.57 1418.21,1209.57 1418.8,1209.57 1419.38,1209.57 1419.97,1209.57 1420.56,1209.57 1421.14,1209.57 1421.73,1209.57 1422.32,1209.57 1422.9,1209.57 1423.49,1209.57 1424.08,1209.57 1424.66,1209.57 1425.25,1209.57 1425.83,1209.57 1426.42,1209.57 1427.01,1209.57 1427.59,1209.57 1428.18,1209.57 1428.77,1209.57 1429.35,1209.57 1429.94,1209.57 1430.53,1209.57 1431.11,1209.57 1431.7,1209.57 1432.29,1209.57 1432.87,1209.57 1433.46,1209.57 1434.04,1209.57 1434.63,1209.57 1435.22,1209.57 1435.8,1209.57 1436.39,1209.57 1436.98,1209.57 1437.56,1209.57 1438.15,1209.57 1438.74,1209.57 1439.32,1209.57 1439.91,1209.57 1440.5,1209.57 1441.08,1209.57 1441.67,1209.57 1442.25,1209.57 1442.84,1209.57 1443.43,1209.57 1444.01,1209.57 1444.6,1209.57 1445.19,1209.57 1445.77,1209.57 1446.36,1209.57 1446.95,1209.57 1447.53,1209.57 1448.12,1209.57 1448.7,1209.57 1449.29,1209.57 1449.88,1209.57 1450.46,1209.57 1451.05,1209.57 1451.64,1209.57 1452.22,1209.57 1452.81,1209.57 1453.4,1209.57 1453.98,1209.57 1454.57,1209.57 1455.16,1209.57 1455.74,1209.57 1456.33,1209.57 1456.91,1209.57 1457.5,1209.57 1458.09,1209.57 1458.67,1209.57 1459.26,1209.57 1459.85,1209.57 1460.43,1209.57 1461.02,1209.57 1461.61,1209.57 1462.19,1209.57 1462.78,1209.57 1463.37,1209.57 1463.95,1209.57 1464.54,1209.57 1465.12,1209.57 1465.71,1209.57 1466.3,1209.57 1466.88,1209.57 1467.47,1209.57 1468.06,1209.57 1468.64,1209.57 1469.23,1209.57 1469.82,1209.57 1470.4,1209.57 1470.99,1209.57 1471.57,1209.57 1472.16,1209.57 1472.75,1209.57 1473.33,1209.57 1473.92,1209.57 1474.51,1209.57 1475.09,1209.57 1475.68,1209.57 1476.27,1209.57 1476.85,1209.57 1477.44,1209.57 1478.03,1209.57 1478.61,1209.57 1479.2,1209.57 1479.78,1209.57 1480.37,1209.57 1480.96,1209.57 1481.54,1209.57 1482.13,1209.57 1482.72,1209.57 1483.3,1209.57 1483.89,1209.57 1484.48,1209.57 1485.06,1209.57 1485.65,1209.57 1486.24,1209.57 1486.82,1209.57 1487.41,1209.57 1487.99,1209.57 1488.58,1209.57 1489.17,1209.57 1489.75,1209.57 1490.34,1209.57 1490.93,1209.57 1491.51,1209.57 1492.1,1209.57 1492.69,1209.57 1493.27,1209.57 1493.86,1209.57 1494.45,1209.57 1495.03,1209.57 1495.62,1209.57 1496.2,1209.57 1496.79,1209.57 1497.38,1209.57 1497.96,1209.57 1498.55,1209.57 1499.14,1209.57 1499.72,1209.57 1500.31,1209.57 1500.9,1209.57 1501.48,1209.57 1502.07,1209.57 1502.65,1209.57 1503.24,1209.57 1503.83,1209.57 1504.41,1209.57 1505,1209.57 1505.59,1209.57 1506.17,1209.57 1506.76,1209.57 1507.35,1209.57 1507.93,1209.57 1508.52,1209.57 1509.11,1209.57 1509.69,1209.57 1510.28,1209.57 1510.86,1209.57 1511.45,1209.57 1512.04,1209.57 1512.62,1209.57 1513.21,1209.57 1513.8,1209.57 1514.38,1209.57 1514.97,1209.57 1515.56,1209.57 1516.14,1209.57 1516.73,1209.57 1517.32,1209.57 1517.9,1209.57 1518.49,1209.57 1519.07,1209.57 1519.66,1209.57 1520.25,1209.57 1520.83,1209.57 1521.42,1209.57 1522.01,1209.57 1522.59,1209.57 1523.18,1209.57 1523.77,1209.57 1524.35,1209.57 1524.94,1209.57 1525.52,1209.57 1526.11,1209.57 1526.7,1209.57 1527.28,1209.57 1527.87,1209.57 1528.46,1209.57 1529.04,1209.57 1529.63,1209.57 1530.22,1209.57 1530.8,1209.57 1531.39,1209.57 1531.98,1209.57 1532.56,1209.57 1533.15,1209.57 1533.73,1209.57 1534.32,1209.57 1534.91,1209.57 1535.49,1209.57 1536.08,1209.57 1536.67,1209.57 1537.25,1209.57 1537.84,1209.57 1538.43,1209.57 1539.01,1209.57 1539.6,1209.57 1540.19,1209.57 1540.77,1209.57 1541.36,1209.57 1541.94,1209.57 1542.53,1209.57 1543.12,1209.57 1543.7,1209.57 1544.29,1209.57 1544.88,1209.57 1545.46,1209.57 1546.05,1209.57 1546.64,1209.57 1547.22,1209.57 1547.81,1209.57 1548.4,1209.57 1548.98,1209.57 1549.57,1209.57 1550.15,1209.57 1550.74,1209.57 1551.33,1209.57 1551.91,1209.57 1552.5,1209.57 1553.09,1209.57 1553.67,1209.57 1554.26,1209.57 1554.85,1209.57 1555.43,1209.57 1556.02,1209.57 1556.6,1209.57 1557.19,1209.57 1557.78,1209.57 1558.36,1209.57 1558.95,1209.57 1559.54,1209.57 1560.12,1209.57 1560.71,1209.57 1561.3,1209.57 1561.88,1209.57 1562.47,1209.57 1563.06,1209.57 1563.64,1209.57 1564.23,1209.57 1564.81,1209.57 1565.4,1209.57 1565.99,1209.57 1566.57,1209.57 1567.16,1209.57 1567.75,1209.57 1568.33,1209.57 1568.92,1209.57 1569.51,1209.57 1570.09,1209.57 1570.68,1209.57 1571.27,1209.57 1571.85,1209.57 1572.44,1209.57 1573.02,1209.57 1573.61,1209.57 1574.2,1209.57 1574.78,1209.57 1575.37,1209.57 1575.96,1209.57 1576.54,1209.57 1577.13,1209.57 1577.72,1209.57 1578.3,1209.57 1578.89,1209.57 1579.47,1209.57 1580.06,1209.57 1580.65,1209.57 1581.23,1209.57 1581.82,1209.57 1582.41,1209.57 1582.99,1209.57 1583.58,1209.57 1584.17,1209.57 1584.75,1209.57 1585.34,1209.57 1585.93,1209.57 1586.51,1209.57 1587.1,1209.57 1587.68,1209.57 1588.27,1209.57 1588.86,1209.57 1589.44,1209.57 1590.03,1209.57 1590.62,1209.57 1591.2,1209.57 1591.79,1209.57 1592.38,1209.57 1592.96,1209.57 1593.55,1209.57 1594.14,1209.57 1594.72,1209.57 1595.31,1209.57 1595.89,1209.57 1596.48,1209.57 1597.07,1209.57 1597.65,1209.57 1598.24,1209.57 1598.83,1209.57 1599.41,1209.57 1600,1209.57 1600.59,1209.57 1601.17,1209.57 1601.76,1209.57 1602.34,1209.57 1602.93,1209.57 1603.52,1209.57 1604.1,1209.57 1604.69,1209.57 1605.28,1209.57 1605.86,1209.57 1606.45,1209.57 1607.04,1209.57 1607.62,1209.57 1608.21,1209.57 1608.8,1209.57 1609.38,1209.57 1609.97,1209.57 1610.55,1209.57 1611.14,1209.57 1611.73,1209.57 1612.31,1209.57 1612.9,1209.57 1613.49,1209.57 1614.07,1209.57 1614.66,1209.57 1615.25,1209.57 1615.83,1209.57 1616.42,1209.57 1617.01,1209.57 1617.59,1209.57 1618.18,1209.57 1618.76,1209.57 1619.35,1209.57 1619.94,1209.57 1620.52,1209.57 1621.11,1209.57 1621.7,1209.57 1622.28,1209.57 1622.87,1209.57 1623.46,1209.57 1624.04,1209.57 1624.63,1209.57 1625.22,1209.57 1625.8,1209.57 1626.39,1209.57 1626.97,1209.57 1627.56,1209.57 1628.15,1209.57 1628.73,1209.57 1629.32,1209.57 1629.91,1209.57 1630.49,1209.57 1631.08,1209.57 1631.67,1209.57 1632.25,1209.57 1632.84,1209.57 1633.42,1209.57 1634.01,1209.57 1634.6,1209.57 1635.18,1209.57 1635.77,1209.57 1636.36,1209.57 1636.94,1209.57 1637.53,1209.57 1638.12,1209.57 1638.7,1209.57 1639.29,1209.57 1639.88,1209.57 1640.46,1209.57 1641.05,1209.57 1641.63,1209.57 1642.22,1209.57 1642.81,1209.57 1643.39,1209.57 1643.98,1209.57 1644.57,1209.57 1645.15,1209.57 1645.74,1209.57 1646.33,1209.57 1646.91,1209.57 1647.5,1209.57 1648.09,1209.57 1648.67,1209.57 1649.26,1209.57 1649.84,1209.57 1650.43,1209.57 1651.02,1209.57 1651.6,1209.57 1652.19,1209.57 1652.78,1209.57 1653.36,1209.57 1653.95,1209.57 1654.54,1209.57 1655.12,1209.57 1655.71,1209.57 1656.29,1209.57 1656.88,1209.57 1657.47,1209.57 1658.05,1209.57 1658.64,1209.57 1659.23,1209.57 1659.81,1209.57 1660.4,1209.57 1660.99,1209.57 1661.57,1209.57 1662.16,1209.57 1662.75,1209.57 1663.33,1209.57 1663.92,1209.57 1664.5,1209.57 1665.09,1209.57 1665.68,1209.57 1666.26,1209.57 1666.85,1209.57 1667.44,1209.57 1668.02,1209.57 1668.61,1209.57 1669.2,1209.57 1669.78,1209.57 1670.37,1209.57 1670.96,1209.57 1671.54,1209.57 1672.13,1209.57 1672.71,1209.57 1673.3,1209.57 1673.89,1209.57 1674.47,1209.57 1675.06,1209.57 1675.65,1209.57 1676.23,1209.57 1676.82,1209.57 1677.41,1209.57 1677.99,1209.57 1678.58,1209.57 1679.17,1209.57 1679.75,1209.57 1680.34,1209.57 1680.92,1209.57 1681.51,1209.57 1682.1,1209.57 1682.68,1209.57 1683.27,1209.57 1683.86,1209.57 1684.44,1209.57 1685.03,1209.57 1685.62,1209.57 1686.2,1209.57 1686.79,1209.57 1687.37,1209.57 1687.96,1209.57 1688.55,1209.57 1689.13,1209.57 1689.72,1209.57 1690.31,1209.57 1690.89,1209.57 1691.48,1209.57 1692.07,1209.57 1692.65,1209.57 1693.24,1209.57 1693.83,1209.57 1694.41,1209.57 1695,1209.57 1695.58,1209.57 1696.17,1209.57 1696.76,1209.57 1697.34,1209.57 1697.93,1209.57 1698.52,1209.57 1699.1,1209.57 1699.69,1209.57 1700.28,1209.57 1700.86,1209.57 1701.45,1209.57 1702.04,1209.57 1702.62,1209.57 1703.21,1209.57 1703.79,1209.57 1704.38,1209.57 1704.97,1209.57 1705.55,1209.57 1706.14,1209.57 1706.73,1209.57 1707.31,1209.57 1707.9,1209.57 1708.49,1209.57 1709.07,1209.57 1709.66,1209.57 1710.24,1209.57 1710.83,1209.57 1711.42,1209.57 1712,1209.57 1712.59,1209.57 1713.18,1209.57 1713.76,1209.57 1714.35,1209.57 1714.94,1209.57 1715.52,1209.57 1716.11,1209.57 1716.7,1209.57 1717.28,1209.57 1717.87,1209.57 1718.45,1209.57 1719.04,1209.57 1719.63,1209.57 1720.21,1209.57 1720.8,1209.57 1721.39,1209.57 1721.97,1209.57 1722.56,1209.57 1723.15,1209.57 1723.73,1209.57 1724.32,1209.57 1724.91,1209.57 1725.49,1209.57 1726.08,1209.57 1726.66,1209.57 1727.25,1209.57 1727.84,1209.57 1728.42,1209.57 1729.01,1209.57 1729.6,1209.57 1730.18,1209.57 1730.77,1209.57 1731.36,1209.57 1731.94,1209.57 1732.53,1209.57 1733.11,1209.57 1733.7,1209.57 1734.29,1209.57 1734.87,1209.57 1735.46,1209.57 1736.05,1209.57 1736.63,1209.57 1737.22,1209.57 1737.81,1209.57 1738.39,1209.57 1738.98,1209.57 1739.57,1209.57 1740.15,1209.57 1740.74,1209.57 1741.32,1209.57 1741.91,1209.57 1742.5,1209.57 1743.08,1209.57 1743.67,1209.57 1744.26,1209.57 1744.84,1209.57 1745.43,1209.57 1746.02,1209.57 1746.6,1209.57 1747.19,1209.57 1747.78,1209.57 1748.36,1209.57 1748.95,1209.57 1749.53,1209.57 1750.12,1209.57 1750.71,1209.57 1751.29,1209.57 1751.88,1209.57 1752.47,1209.57 1753.05,1209.57 1753.64,1209.57 1754.23,1209.57 1754.81,1209.57 1755.4,1209.57 1755.99,1209.57 1756.57,1209.57 1757.16,1209.57 1757.74,1209.57 1758.33,1209.57 1758.92,1209.57 1759.5,1209.57 1760.09,1209.57 1760.68,1209.57 1761.26,1209.57 1761.85,1209.57 1762.44,1209.57 1763.02,1209.57 1763.61,1209.57 1764.19,1209.57 1764.78,1209.57 1765.37,1209.57 1765.95,1209.57 1766.54,1209.57 1767.13,1209.57 1767.71,1209.57 1768.3,1209.57 1768.89,1209.57 1769.47,1209.57 1770.06,1209.57 1770.65,1209.57 1771.23,1209.57 1771.82,1209.57 1772.4,1209.57 1772.99,1209.57 1773.58,1209.57 1774.16,1209.57 1774.75,1209.57 1775.34,1209.57 1775.92,1209.57 1776.51,1209.57 1777.1,1209.57 1777.68,1209.57 1778.27,1209.57 1778.86,1209.57 1779.44,1209.57 1780.03,1209.57 1780.61,1209.57 1781.2,1209.57 1781.79,1209.57 1782.37,1209.57 1782.96,1209.57 1783.55,1209.57 1784.13,1209.57 1784.72,1209.57 1785.31,1209.57 1785.89,1209.57 1786.48,1209.57 1787.06,1209.57 1787.65,1209.57 1788.24,1209.57 1788.82,1209.57 1789.41,1209.57 1790,1209.57 1790.58,1209.57 1791.17,1209.57 1791.76,1209.57 1792.34,1209.57 1792.93,1209.57 1793.52,1209.57 1794.1,1209.57 1794.69,1209.57 1795.27,1209.57 1795.86,1209.57 1796.45,1209.57 1797.03,1209.57 1797.62,1209.57 1798.21,1209.57 1798.79,1209.57 1799.38,1209.57 1799.97,1209.57 1800.55,1209.57 1801.14,1209.57 1801.73,1209.57 1802.31,1209.57 1802.9,1209.57 1803.48,1209.57 1804.07,1209.57 1804.66,1209.57 1805.24,1209.57 1805.83,1209.57 1806.42,1209.57 1807,1209.57 1807.59,1209.57 1808.18,1209.57 1808.76,1209.57 1809.35,1209.57 1809.94,1209.57 1810.52,1209.57 1811.11,1209.57 1811.69,1209.57 1812.28,1209.57 1812.87,1209.57 1813.45,1209.57 1814.04,1209.57 1814.63,1209.57 1815.21,1209.57 1815.8,1209.57 1816.39,1209.57 1816.97,1209.57 1817.56,1209.57 1818.14,1209.57 1818.73,1209.57 1819.32,1209.57 1819.9,1209.57 1820.49,1209.57 1821.08,1209.57 1821.66,1209.57 1822.25,1209.57 1822.84,1209.57 1823.42,1209.57 1824.01,1209.57 1824.6,1209.57 1825.18,1209.57 1825.77,1209.57 1826.35,1209.57 1826.94,1209.57 1827.53,1209.57 1828.11,1209.57 1828.7,1209.57 1829.29,1209.57 1829.87,1209.57 1830.46,1209.57 1831.05,1209.57 1831.63,1209.57 1832.22,1209.57 1832.81,1209.57 1833.39,1209.57 1833.98,1209.57 1834.56,1209.57 1835.15,1209.57 1835.74,1209.57 1836.32,1209.57 1836.91,1209.57 1837.5,1209.57 1838.08,1209.57 1838.67,1209.57 1839.26,1209.57 1839.84,1209.57 1840.43,1209.57 1841.01,1209.57 1841.6,1209.57 1842.19,1209.57 1842.77,1209.57 1843.36,1209.57 1843.95,1209.57 1844.53,1209.57 1845.12,1209.57 1845.71,1209.57 1846.29,1209.57 1846.88,1209.57 1847.47,1209.57 1848.05,1209.57 1848.64,1209.57 1849.22,1209.57 1849.81,1209.57 1850.4,1209.57 1850.98,1209.57 1851.57,1209.57 1852.16,1209.57 1852.74,1209.57 1853.33,1209.57 1853.92,1209.57 1854.5,1209.57 1855.09,1209.57 1855.68,1209.57 1856.26,1209.57 1856.85,1209.57 1857.43,1209.57 1858.02,1209.57 1858.61,1209.57 1859.19,1209.57 1859.78,1209.57 1860.37,1209.57 1860.95,1209.57 1861.54,1209.57 1862.13,1209.57 1862.71,1209.57 1863.3,1209.57 1863.88,1209.57 1864.47,1209.57 1865.06,1209.57 1865.64,1209.57 1866.23,1209.57 1866.82,1209.57 1867.4,1209.57 1867.99,1209.57 1868.58,1209.57 1869.16,1209.57 1869.75,1209.57 1870.34,1209.57 1870.92,1209.57 1871.51,1209.57 1872.09,1209.57 1872.68,1209.57 1873.27,1209.57 1873.85,1209.57 1874.44,1209.57 1875.03,1209.57 1875.61,1209.57 1876.2,1209.57 1876.79,1209.57 1877.37,1209.57 1877.96,1209.57 1878.55,1209.57 1879.13,1209.57 1879.72,1209.57 1880.3,1209.57 1880.89,1209.57 1881.48,1209.57 1882.06,1209.57 1882.65,1209.57 1883.24,1209.57 1883.82,1209.57 1884.41,1209.57 1885,1209.57 1885.58,1209.57 1886.17,1209.57 1886.76,1209.57 1887.34,1209.57 1887.93,1209.57 1888.51,1209.57 1889.1,1209.57 1889.69,1209.57 1890.27,1209.57 1890.86,1209.57 1891.45,1209.57 1892.03,1209.57 1892.62,1209.57 1893.21,1209.57 1893.79,1209.57 1894.38,1209.57 1894.96,1209.57 1895.55,1209.57 1896.14,1209.57 1896.72,1209.57 1897.31,1209.57 1897.9,1209.57 1898.48,1209.57 1899.07,1209.57 1899.66,1209.57 1900.24,1209.57 1900.83,1209.57 1901.42,1209.57 1902,1209.57 1902.59,1209.57 1903.17,1209.57 1903.76,1209.57 1904.35,1209.57 1904.93,1209.57 1905.52,1209.57 1906.11,1209.57 1906.69,1209.57 1907.28,1209.57 1907.87,1209.57 1908.45,1209.57 1909.04,1209.57 1909.63,1209.57 1910.21,1209.57 1910.8,1209.57 1911.38,1209.57 1911.97,1209.57 1912.56,1209.57 1913.14,1209.57 1913.73,1209.57 1914.32,1209.57 1914.9,1209.57 1915.49,1209.57 1916.08,1209.57 1916.66,1209.57 1917.25,1209.57 1917.83,1209.57 1918.42,1209.57 1919.01,1209.57 1919.59,1209.57 1920.18,1209.57 1920.77,1209.57 1921.35,1209.57 1921.94,1209.57 1922.53,1209.57 1923.11,1209.57 1923.7,1209.57 1924.29,1209.57 1924.87,1209.57 1925.46,1209.57 1926.04,1209.57 1926.63,1209.57 1927.22,1209.57 1927.8,1209.57 1928.39,1209.57 1928.98,1209.57 1929.56,1209.57 1930.15,1209.57 1930.74,1209.57 1931.32,1209.57 1931.91,1209.57 1932.5,1209.57 1933.08,1209.57 1933.67,1209.57 1934.25,1209.57 1934.84,1209.57 1935.43,1209.57 1936.01,1209.57 1936.6,1209.57 1937.19,1209.57 1937.77,1209.57 1938.36,1209.57 1938.95,1209.57 1939.53,1209.57 1940.12,1209.57 1940.71,1209.57 1941.29,1209.57 1941.88,1209.57 1942.46,1209.57 1943.05,1209.57 1943.64,1209.57 1944.22,1209.57 1944.81,1209.57 1945.4,1209.57 1945.98,1209.57 1946.57,1209.57 1947.16,1209.57 1947.74,1209.57 1948.33,1209.57 1948.91,1209.57 1949.5,1209.57 1950.09,1209.57 1950.67,1209.57 1951.26,1209.57 1951.85,1209.57 1952.43,1209.57 1953.02,1209.57 1953.61,1209.57 1954.19,1209.57 1954.78,1209.57 1955.37,1209.57 1955.95,1209.57 1956.54,1209.57 1957.12,1209.57 1957.71,1209.57 1958.3,1209.57 1958.88,1209.57 1959.47,1209.57 1960.06,1209.57 1960.64,1209.57 1961.23,1209.57 1961.82,1209.57 1962.4,1209.57 1962.99,1209.57 1963.58,1209.57 1964.16,1209.57 1964.75,1209.57 1965.33,1209.57 1965.92,1209.57 1966.51,1209.57 1967.09,1209.57 1967.68,1209.57 1968.27,1209.57 1968.85,1209.57 1969.44,1209.57 1970.03,1209.57 1970.61,1209.57 1971.2,1209.57 1971.78,1209.57 1972.37,1209.57 1972.96,1209.57 1973.54,1209.57 1974.13,1209.57 1974.72,1209.57 1975.3,1209.57 1975.89,1209.57 1976.48,1209.57 1977.06,1209.57 1977.65,1209.57 1978.24,1209.57 1978.82,1209.57 1979.41,1209.57 1979.99,1209.57 1980.58,1209.57 1981.17,1209.57 1981.75,1209.57 1982.34,1209.57 1982.93,1209.57 1983.51,1209.57 1984.1,1209.57 1984.69,1209.57 1985.27,1209.57 1985.86,1209.57 1986.45,1209.57 1987.03,1209.57 1987.62,1209.57 1988.2,1209.57 1988.79,1209.57 1989.38,1209.57 1989.96,1209.57 1990.55,1209.57 1991.14,1209.57 1991.72,1209.57 1992.31,1209.57 1992.9,1209.57 1993.48,1209.57 1994.07,1209.57 1994.65,1209.57 1995.24,1209.57 1995.83,1209.57 1996.41,1209.57 1997,1209.57 1997.59,1209.57 1998.17,1209.57 1998.76,1209.57 1999.35,1209.57 1999.93,1209.57 2000.52,1209.57 2001.11,1209.57 2001.69,1209.57 2002.28,1209.57 2002.86,1209.57 2003.45,1209.57 2004.04,1209.57 2004.62,1209.57 2005.21,1209.57 2005.8,1209.57 2006.38,1209.57 2006.97,1209.57 2007.56,1209.57 2008.14,1209.57 2008.73,1209.57 2009.32,1209.57 2009.9,1209.57 2010.49,1209.57 2011.07,1209.57 2011.66,1209.57 2012.25,1209.57 2012.83,1209.57 2013.42,1209.57 2014.01,1209.57 2014.59,1209.57 2015.18,1209.57 2015.77,1209.57 2016.35,1209.57 2016.94,1209.57 2017.53,1209.57 2018.11,1209.57 2018.7,1209.57 2019.28,1209.57 2019.87,1209.57 2020.46,1209.57 2021.04,1209.57 2021.63,1209.57 2022.22,1209.57 2022.8,1209.57 2023.39,1209.57 2023.98,1209.57 2024.56,1209.57 2025.15,1209.57 2025.73,1209.57 2026.32,1209.57 2026.91,1209.57 2027.49,1209.57 2028.08,1209.57 2028.67,1209.57 2029.25,1209.57 2029.84,1209.57 2030.43,1209.57 2031.01,1209.57 2031.6,1209.57 2032.19,1209.57 2032.77,1209.57 2033.36,1209.57 2033.94,1209.57 2034.53,1209.57 2035.12,1209.57 2035.7,1209.57 2036.29,1209.57 2036.88,1209.57 2037.46,1209.57 2038.05,1209.57 2038.64,1209.57 2039.22,1209.57 2039.81,1209.57 2040.4,1209.57 2040.98,1209.57 2041.57,1209.57 2042.15,1209.57 2042.74,1209.57 2043.33,1209.57 2043.91,1209.57 2044.5,1209.57 2045.09,1209.57 2045.67,1209.57 2046.26,1209.57 2046.85,1209.57 2047.43,1209.57 2048.02,1209.57 2048.6,1209.57 2049.19,1209.57 2049.78,1209.57 2050.36,1209.57 2050.95,1209.57 2051.54,1209.57 2052.12,1209.57 2052.71,1209.57 2053.3,1209.57 2053.88,1209.57 2054.47,1209.57 2055.06,1209.57 2055.64,1209.57 2056.23,1209.57 2056.81,1209.57 2057.4,1209.57 2057.99,1209.57 2058.57,1209.57 2059.16,1209.57 2059.75,1209.57 2060.33,1209.57 2060.92,1209.57 2061.51,1209.57 2062.09,1209.57 2062.68,1209.57 2063.27,1209.57 2063.85,1209.57 2064.44,1209.57 2065.02,1209.57 2065.61,1209.57 2066.2,1209.57 2066.78,1209.57 2067.37,1209.57 2067.96,1209.57 2068.54,1209.57 2069.13,1209.57 2069.72,1209.57 2070.3,1209.57 2070.89,1209.57 2071.48,1209.57 2072.06,1209.57 2072.65,1209.57 2073.23,1209.57 2073.82,1209.57 2074.41,1209.57 2074.99,1209.57 2075.58,1209.57 2076.17,1209.57 2076.75,1209.57 2077.34,1209.57 2077.93,1209.57 2078.51,1209.57 2079.1,1209.57 2079.68,1209.57 2080.27,1209.57 2080.86,1209.57 2081.44,1209.57 2082.03,1209.57 2082.62,1209.57 2083.2,1209.57 2083.79,1209.57 2084.38,1209.57 2084.96,1209.57 2085.55,1209.57 2086.14,1209.57 2086.72,1209.57 2087.31,1209.57 2087.89,1209.57 2088.48,1209.57 2089.07,1209.57 2089.65,1209.57 2090.24,1209.57 2090.83,1209.57 2091.41,1209.57 2092,1209.57 2092.59,1209.57 2093.17,1209.57 2093.76,1209.57 2094.35,1209.57 2094.93,1209.57 2095.52,1209.57 2096.1,1209.57 2096.69,1209.57 2097.28,1209.57 2097.86,1209.57 2098.45,1209.57 2099.04,1209.57 2099.62,1209.57 2100.21,1209.57 2100.8,1209.57 2101.38,1209.57 2101.97,1209.57 2102.55,1209.57 2103.14,1209.57 2103.73,1209.57 2104.31,1209.57 2104.9,1209.57 2105.49,1209.57 2106.07,1209.57 2106.66,1209.57 2107.25,1209.57 2107.83,1209.57 2108.42,1209.57 2109.01,1209.57 2109.59,1209.57 2110.18,1209.57 2110.76,1209.57 2111.35,1209.57 2111.94,1209.57 2112.52,1209.57 2113.11,1209.57 2113.7,1209.57 2114.28,1209.57 2114.87,1209.57 2115.46,1209.57 2116.04,1209.57 2116.63,1209.57 2117.22,1209.57 2117.8,1209.57 2118.39,1209.57 2118.97,1209.57 2119.56,1209.57 2120.15,1209.57 2120.73,1209.57 2121.32,1209.57 2121.91,1209.57 2122.49,1209.57 2123.08,1209.57 2123.67,1209.57 2124.25,1209.57 2124.84,1209.57 2125.42,1209.57 2126.01,1209.57 2126.6,1209.57 2127.18,1209.57 2127.77,1209.57 2128.36,1209.57 2128.94,1209.57 2129.53,1209.57 2130.12,1209.57 2130.7,1209.57 2131.29,1209.57 2131.88,1209.57 2132.46,1209.57 2133.05,1209.57 2133.63,1209.57 2134.22,1209.57 2134.81,1209.57 2135.39,1209.57 2135.98,1209.57 2136.57,1209.57 2137.15,1209.57 2137.74,1209.57 2138.33,1209.57 2138.91,1209.57 2139.5,1209.57 2140.09,1209.57 2140.67,1209.57 2141.26,1209.57 2141.84,1209.57 2142.43,1209.57 2143.02,1209.57 2143.6,1209.57 2144.19,1209.57 2144.78,1209.57 2145.36,1209.57 2145.95,1209.57 2146.54,1209.57 2147.12,1209.57 2147.71,1209.57 2148.3,1209.57 2148.88,1209.57 2149.47,1209.57 2150.05,1209.57 2150.64,1209.57 2151.23,1209.57 2151.81,1209.57 2152.4,1209.57 2152.99,1209.57 2153.57,1209.57 2154.16,1209.57 2154.75,1209.57 2155.33,1209.57 2155.92,1209.57 2156.5,1209.57 2157.09,1209.57 2157.68,1209.57 2158.26,1209.57 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.7,1190.95 1399.99,899.083 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.59 985.439,1190.95 2158.26,1190.95 2158.26,1227.59 985.439,1227.59 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip403\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip403)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-24.0279 162.114,-1408.31 162.673,-2655.89 163.232,-3800.36 163.792,-4893.11 164.351,-5892.66 164.91,-6783.12 165.469,-7615.7 166.029,-8393.97 166.588,-9079.77 167.147,-9682.49 167.706,-10224 168.266,-10688.7 168.825,-11120.5 169.384,-9872.66 169.943,-10304.8 170.503,-9998.8 171.062,-9728.34 171.621,-10076.4 172.18,-10364.9 172.74,-10623.1 173.299,-10853.1 173.858,-11021.6 174.417,-10310 174.977,-10485.8 175.536,-10630.7 176.095,-10377.1 176.655,-10498.8 177.214,-10587.8 177.773,-10661.7 178.332,-10434.8 178.892,-10193.5 179.451,-10199.8 180.01,-9727.21 180.569,-9727.78 181.129,-9722.94 181.688,-9510.18 182.247,-9479.99 182.806,-9434.74 183.366,-9211.07 183.925,-8994.94 184.484,-8645.25 185.043,-8440.8 185.603,-8122.45 186.162,-8048.21 186.721,-7976.98 187.28,-7664.43 187.84,-7471.36 188.399,-7376.83 188.958,-7275.85 189.517,-7161.63 190.077,-7042.04 190.636,-6835.82 191.195,-6558.74 191.754,-6307.11 192.314,-6141.37 192.873,-5909.01 193.432,-5807.12 193.991,-5510.2 194.551,-5292.47 195.11,-5141.95 195.669,-4998.87 196.228,-4858.72 196.788,-4772.59 197.347,-4637.18 197.906,-4340.6 198.465,-4262.95 199.025,-4182.1 199.584,-4010.93 200.143,-3881.16 200.702,-3796.35 201.262,-3548.09 201.821,-3439.14 202.38,-3364.6 202.939,-3250.56 203.499,-3063.7 204.058,-2923.92 204.617,-2824.02 205.176,-2696.83 205.736,-2538.71 206.295,-2414.57 206.854,-2259.91 207.413,-2082.26 207.973,-2038.27 208.532,-1895.68 209.091,-1764.86 209.65,-1693.21 210.21,-1594.59 210.769,-1501.38 211.328,-1435.59 211.887,-1396.29 212.447,-1361 213.006,-1323.21 213.565,-1258.52 214.124,-1161.54 214.684,-1073.13 215.243,-1009.4 215.802,-946.79 216.361,-859.866 216.921,-776.827 217.48,-718.923 218.039,-639.685 218.598,-585.465 219.158,-532.361 219.717,-503.398 220.276,-428.141 220.835,-331.3 221.395,-309.062 221.954,-238.681 222.513,-128.521 223.072,-85.7321 223.632,-24.1099 224.191,33.2936 224.75,47.5472 225.309,39.5378 225.869,73.9424 226.428,87.3572 226.987,79.3361 227.546,116.514 228.106,155.739 228.665,188.795 229.224,282.732 229.783,310.06 230.343,315.93 230.902,308.275 231.461,397.29 232.02,406.824 232.58,450.16 233.139,477.745 233.698,483.519 234.257,504.693 234.817,549.457 235.376,594.861 235.935,636.926 236.494,640.247 237.054,638.291 237.613,640.896 238.172,663.795 238.731,669.266 239.291,673.703 239.85,698.855 240.409,717.783 240.968,720.519 241.528,707.097 242.087,729.286 242.646,716.494 243.205,703.219 243.765,745.614 244.324,817.665 244.883,815.984 245.442,850.191 246.002,867.451 246.561,915.193 247.12,911.4 247.679,907.383 248.239,849.722 248.798,867.965 249.357,849.776 249.916,849.519 250.476,871.116 251.035,887.702 251.594,901.101 252.153,950.601 252.713,966.773 253.272,997.043 253.831,1003.34 254.39,997.602 254.95,1044.65 255.509,1055.4 256.068,1098.83 256.627,1054.88 257.187,1081.19 257.746,1087.78 258.305,1060.88 258.864,1065.41 259.424,1055.07 259.983,1044.69 260.542,1052.63 261.101,1043.03 261.661,1088.25 262.22,1077.88 262.779,1087.14 263.338,1092.43 263.898,1100.43 264.457,1141.81 265.016,1145.79 265.575,1148.96 266.135,1117.75 266.694,1110.41 267.253,1117.17 267.812,1125.2 268.372,1096.77 268.931,1120.39 269.49,1108.21 270.049,1100.49 270.609,1157.26 271.168,1159.04 271.727,1159.6 272.286,1162.12 272.846,1166.78 273.405,1170.68 273.964,1172.72 274.523,1157.89 275.083,1164.48 275.642,1122.09 276.201,1124.34 276.76,1146.14 277.32,1132.21 277.879,1169.44 278.438,1135.98 278.997,1125.25 279.557,1097.68 280.116,1089.06 280.675,1129.79 281.234,1147.82 281.794,1134.05 282.353,1102 282.912,1090.65 283.471,1114.21 284.031,1120.84 284.59,1092.74 285.149,1069.26 285.708,1059.57 286.268,1050.91 286.827,1074.87 287.386,1081.24 287.945,1072.91 288.505,1060.96 289.064,1039.69 289.623,1029.21 290.182,1020.5 290.742,1061.66 291.301,1023.95 291.86,1001.33 292.419,1013.96 292.979,1007.16 293.538,999.276 294.097,992.698 294.656,987.637 295.216,1004.4 295.775,1032.21 296.334,1025.17 296.893,1033.09 297.453,1025.68 298.012,1036.34 298.571,1011.43 299.13,1022.28 299.69,1031.01 300.249,1038.7 300.808,1047.69 301.368,1024.58 301.927,1032.64 302.486,1021.79 303.045,996.563 303.605,992.819 304.164,1022.25 304.723,1013.82 305.282,975.093 305.842,954.319 306.401,964.657 306.96,958.248 307.519,984.065 308.079,977.161 308.638,1005.44 309.197,983.581 309.756,992.488 310.316,986.83 310.875,962.77 311.434,946.077 311.993,927.813 312.553,957.018 313.112,1023.63 313.671,1017.98 314.23,1042.93 314.79,1035.07 315.349,1045.06 315.908,1020.66 316.467,1012.71 317.027,970.677 317.586,967.116 318.145,960.783 318.704,968.59 319.264,963.585 319.823,974.476 320.382,986.771 320.941,961.578 321.501,958.701 322.06,953.567 322.619,966.465 323.178,941.959 323.738,921.595 324.297,932.74 324.856,962.093 325.415,973.833 325.975,987.814 326.534,1013.98 327.093,1023.71 327.652,1047.79 328.212,990.479 328.771,985.668 329.33,996.25 329.889,991.184 330.449,1016.59 331.008,977.239 331.567,986.498 332.126,946.455 332.686,942.536 333.245,904.469 333.804,917.277 334.363,931.385 334.923,912.295 335.482,890.797 336.041,903.786 336.6,883.913 337.16,832.808 337.719,850.093 338.278,853.321 338.837,839.996 339.397,854.303 339.956,853.727 340.515,849.732 341.074,832.756 341.634,818.843 342.193,817.662 342.752,805.678 343.311,792.701 343.871,842.434 344.43,842.461 344.989,826.195 345.548,828.293 346.108,877.206 346.667,891.332 347.226,903.638 347.785,898.098 348.345,893.728 348.904,839.088 349.463,838.877 350.022,869.013 350.582,897.74 351.141,890.565 351.7,905.393 352.259,904.952 352.819,866.92 353.378,880.311 353.937,925.713 354.496,957.812 355.056,952.596 355.615,962.441 356.174,986.864 356.733,993.254 357.293,966.611 357.852,972.86 358.411,991.817 358.97,1012.21 359.53,1019.46 360.089,959.913 360.648,965.434 361.207,956.875 361.767,933.713 362.326,925.969 362.885,921.763 363.444,900.692 364.004,879.581 364.563,825.624 365.122,825.183 365.681,811.226 366.241,809.753 366.8,811.915 367.359,797.379 367.918,781.639 368.478,730.177 369.037,750.921 369.596,756.586 370.155,776.991 370.715,760.812 371.274,747.365 371.833,763.205 372.392,801.415 372.952,818.11 373.511,834.334 374.07,866.734 374.629,830.379 375.189,860.189 375.748,857.934 376.307,857.434 376.866,867.141 377.426,863.577 377.985,845.108 378.544,861.574 379.103,877.369 379.663,843.434 380.222,843.3 380.781,825.815 381.34,825.644 381.9,823.222 382.459,824.854 383.018,840.605 383.577,821.228 384.137,884.609 384.696,898.499 385.255,878.031 385.814,854.837 386.374,834.262 386.933,780.543 387.492,749.631 388.051,737.683 388.611,744.541 389.17,760.187 389.729,777.501 390.288,777.614 390.848,794.271 391.407,825.915 391.966,821.139 392.525,799.448 393.085,799.571 393.644,750.828 394.203,754.476 394.762,773.633 395.322,772.745 395.881,742.694 396.44,759.703 396.999,774.912 397.559,793.828 398.118,794.036 398.677,793.827 399.236,791.559 399.796,807.301 400.355,807.997 400.914,791.662 401.473,819.45 402.033,834.56 402.592,798.003 403.151,811.496 403.71,794.499 404.27,842.23 404.829,820.598 405.388,834.063 405.947,835.691 406.507,830.325 407.066,828.454 407.625,813.234 408.184,810.354 408.744,858.721 409.303,870.266 409.862,880.989 410.421,922.672 410.981,929.02 411.54,936.479 412.099,894.359 412.658,887.292 413.218,849.991 413.777,859.392 414.336,820.832 414.895,801.411 415.455,783.954 416.014,813.301 416.573,811.526 417.132,809.736 417.692,808.461 418.251,805.703 418.81,833.926 419.369,848.878 419.929,846.868 420.488,843.425 421.047,840.441 421.606,815.457 422.166,764.793 422.725,779.467 423.284,779.999 423.843,793.489 424.403,795.393 424.962,744.45 425.521,714.038 426.08,718.576 426.64,737.073 427.199,721.103 427.758,724.207 428.318,711.438 428.877,745.792 429.436,729.523 429.995,731.914 430.555,752.379 431.114,753.917 431.673,725.853 432.232,729.93 432.792,703.575 433.351,705.86 433.91,757.676 434.469,772.583 435.029,776.142 435.588,758.41 436.147,778.976 436.706,760.261 437.266,762.389 437.825,779.905 438.384,810.142 438.943,806.719 439.503,806.133 440.062,802.676 440.621,786.292 441.18,803.162 441.74,800.491 442.299,800.018 442.858,826.729 443.417,824.697 443.977,853.42 444.536,851.292 445.095,847.235 445.654,842.808 446.214,839.928 446.773,835.876 447.332,815.183 447.891,815.442 448.451,823.468 449.01,819.145 449.569,848.491 450.128,842.647 450.688,805.13 451.247,770.854 451.806,769.474 452.365,765.183 452.925,777.333 453.484,774.398 454.043,741.942 454.602,727.415 455.162,727.184 455.721,711.086 456.28,728.55 456.839,711.072 457.399,711.192 457.958,710.591 458.517,744.981 459.076,794.018 459.636,790.585 460.195,789.936 460.754,800.202 461.313,814.929 461.873,810.493 462.432,823.952 462.991,820.059 463.55,813.979 464.11,793.745 464.669,793.281 465.228,805.549 465.787,799.449 466.347,794.329 466.906,786.918 467.465,782.504 468.024,780.695 468.584,760.48 469.143,777.197 469.702,774.492 470.261,757.838 470.821,740.762 471.38,727.91 471.939,730.609 472.498,731.151 473.058,716.645 473.617,717.958 474.176,753.938 474.735,751.376 475.295,767.115 475.854,765.613 476.413,779.735 476.972,778.014 477.532,739.704 478.091,756.579 478.65,770.822 479.209,751.739 479.769,730.35 480.328,734.896 480.887,702.459 481.446,702.815 482.006,673.318 482.565,642.255 483.124,710.677 483.683,681.942 484.243,699.811 484.802,715.113 485.361,716.313 485.92,748.827 486.48,732.234 487.039,747.36 487.598,761.27 488.157,779.772 488.717,777.652 489.276,792.846 489.835,808.851 490.394,821.276 490.954,800.623 491.513,781.58 492.072,784.815 492.631,781.42 493.191,809.01 493.75,834.592 494.309,827.622 494.868,803.988 495.428,779.719 495.987,774.779 496.546,774.262 497.105,758.157 497.665,744.857 498.224,727.618 498.783,706.364 499.342,722.799 499.902,692.789 500.461,711.414 501.02,693.213 501.579,677.542 502.139,681.214 502.698,667.932 503.257,721.71 503.816,736.342 504.376,703.668 504.935,688.744 505.494,692.712 506.053,694.771 506.613,712.517 507.172,714.72 507.731,684.83 508.29,682.243 508.85,683.876 509.409,687.384 509.968,656.192 510.527,674.705 511.087,676.029 511.646,659.97 512.205,659.256 512.764,641.796 513.324,663.175 513.883,697.955 514.442,668.348 515.001,672.681 515.561,656.245 516.12,643.88 516.679,647.856 517.238,634.917 517.798,622.033 518.357,611.573 518.916,616.242 519.475,639.684 520.035,657.639 520.594,675.382 521.153,661.459 521.712,618.335 522.272,592.856 522.831,601.659 523.39,620.1 523.949,644.253 524.509,651.52 525.068,656.552 525.627,678.078 526.186,648.821 526.746,654.347 527.305,644.772 527.864,630.347 528.423,621.979 528.983,632.199 529.542,635.769 530.101,657.672 530.66,644.938 531.22,615.275 531.779,623.325 532.338,645.106 532.897,633.18 533.457,657.287 534.016,697.467 534.575,714.176 535.134,728.703 535.694,762.584 536.253,763.763 536.812,759.121 537.371,754.351 537.931,737.452 538.49,720.259 539.049,702.196 539.608,734.343 540.168,734.498 540.727,731.791 541.286,732.214 541.845,729.129 542.405,741.734 542.964,740.121 543.523,771.986 544.082,783.37 544.642,780.799 545.201,781.332 545.76,777.856 546.319,778.468 546.879,788.338 547.438,782.884 547.997,778.232 548.556,756.128 549.116,752.586 549.675,744.066 550.234,739.029 550.793,724.994 551.353,740.083 551.912,740.746 552.471,721.499 553.031,723.057 553.59,723.068 554.149,752.945 554.708,768.251 555.268,779.778 555.827,761.573 556.386,773.704 556.945,751.149 557.505,747.018 558.064,732.415 558.623,699.375 559.182,687.076 559.742,691.568 560.301,679.253 560.86,681.879 561.419,684.941 561.979,686.716 562.538,705.237 563.097,674.995 563.656,659.239 564.216,644.474 564.775,682.342 565.334,682.032 565.893,656.174 566.453,674.947 567.012,692.136 567.571,708.656 568.13,709.269 568.69,742.725 569.249,741.002 569.808,742.114 570.367,740.091 570.927,740.511 571.486,720.241 572.045,720.8 572.604,738.182 573.164,768.984 573.723,780.55 574.282,775.198 574.841,774.017 575.401,740.488 575.96,723.222 576.519,754.803 577.078,732.971 577.638,729.063 578.197,761.506 578.756,755.11 579.315,752.459 579.875,747.569 580.434,744.032 580.993,757.159 581.552,771.939 582.112,786.783 582.671,782.487 583.23,794.891 583.789,774.899 584.349,772.531 584.908,753.892 585.467,753.48 586.026,753.818 586.586,780.284 587.145,777.902 587.704,778.576 588.263,762.506 588.823,758.284 589.382,736.458 589.941,732.019 590.5,728.956 591.06,727.682 591.619,710.606 592.178,724.643 592.737,695.148 593.297,697.616 593.856,696.433 594.415,662.477 594.974,682.473 595.534,699.033 596.093,698.962 596.652,680.979 597.211,716.318 597.771,733.14 598.33,732.624 598.889,730.028 599.448,727.756 600.008,730.664 600.567,713.21 601.126,678.775 601.685,664.153 602.245,697.136 602.804,760.685 603.363,775.389 603.922,772.859 604.482,783.639 605.041,777.666 605.6,776.642 606.159,758.875 606.719,754.874 607.278,737.44 607.837,753.528 608.396,764.906 608.956,777.448 609.515,775.015 610.074,755.732 610.633,754.048 611.193,767.95 611.752,765.216 612.311,775.805 612.87,725.09 613.43,725.923 613.989,726.195 614.548,707.497 615.107,708.312 615.667,690.456 616.226,693.883 616.785,660.188 617.344,677.939 617.904,646.114 618.463,678.787 619.022,676.661 619.581,692.657 620.141,710.189 620.7,692.869 621.259,659.508 621.818,675.232 622.378,661.379 622.937,679.204 623.496,730.216 624.055,731.972 624.615,715.573 625.174,715.274 625.733,703.01 626.292,721.616 626.852,738.255 627.411,732.743 627.97,731.097 628.529,712.676 629.089,727.942 629.648,746.458 630.207,725.983 630.766,706.311 631.326,708.171 631.885,723.156 632.444,751.608 633.003,748.461 633.563,759.371 634.122,755.823 634.681,751.19 635.24,716.509 635.8,713.442 636.359,727.844 636.918,726.547 637.477,740.258 638.037,721.763 638.596,703.66 639.155,706.548 639.714,691.677 640.274,658.314 640.833,675.653 641.392,662.698 641.951,693.296 642.511,674.755 643.07,677.806 643.629,728.521 644.188,710.531 644.748,740.782 645.307,752.323 645.866,734.573 646.425,736.684 646.985,749.944 647.544,715.23 648.103,679.116 648.662,678.541 649.222,677.413 649.781,679.906 650.34,694.852 650.899,675.02 651.459,661.706 652.018,679.898 652.577,693.96 653.136,693.863 653.696,693.408 654.255,692.175 654.814,676.046 655.373,675.566 655.933,676.683 656.492,662.092 657.051,662.562 657.61,683.048 658.17,684.544 658.729,700.258 659.288,699.942 659.847,685.219 660.407,701.822 660.966,687.137 661.525,689.549 662.084,686.823 662.644,653.85 663.203,657.927 663.762,690.336 664.321,692.273 664.881,709.797 665.44,724.623 665.999,690.72 666.558,688.979 667.118,673.057 667.677,675.699 668.236,662.178 668.795,664.476 669.355,684.209 669.914,683.324 670.473,685.114 671.032,688.45 671.592,676.103 672.151,678.713 672.71,598.67 673.269,638.207 673.829,642.442 674.388,645.367 674.947,649.685 675.506,636.217 676.066,639.768 676.625,661.866 677.184,678.6 677.743,679.04 678.303,684.756 678.862,704.153 679.421,690.472 679.981,709.876 680.54,695.727 681.099,714.691 681.658,747.224 682.218,773.474 682.777,767.869 683.336,761.312 683.895,758.414 684.455,771.519 685.014,766.636 685.573,731.017 686.132,713.823 686.692,729.069 687.251,746.077 687.81,728.152 688.369,709.897 688.929,706.812 689.488,711.657 690.047,679.663 690.606,684.422 691.166,701.008 691.725,684.785 692.284,684.419 692.843,670.812 693.403,638.696 693.962,657.686 694.521,675.45 695.08,644.109 695.64,665.114 696.199,683.114 696.758,668.352 697.317,667.03 697.877,653.136 698.436,656.485 698.995,610.302 699.554,616.684 700.114,601.834 700.673,602.501 701.232,621.279 701.791,641.979 702.351,614.911 702.91,651.759 703.469,671.686 704.028,673.364 704.588,671.565 705.147,673.134 705.706,641.936 706.265,631.541 706.825,619.16 707.384,638.462 707.943,631.897 708.502,652.971 709.062,640.169 709.621,664.251 710.18,680.548 710.739,699.471 711.299,697.575 711.858,680.472 712.417,682.442 712.976,698.119 713.536,677.944 714.095,708.133 714.654,705.554 715.213,735.748 715.773,716.642 716.332,746.263 716.891,776.88 717.45,774.443 718.01,770.492 718.569,781.708 719.128,779.832 719.687,726.894 720.247,725.57 720.806,759.711 721.365,742.51 721.924,724.729 722.484,745.082 723.043,727.883 723.602,726.629 724.161,741.593 724.721,754.517 725.28,753.078 725.839,749.782 726.398,791.81 726.958,802.267 727.517,778.671 728.076,772.16 728.635,819.755 729.195,876.249 729.754,833.022 730.313,875.065 730.872,861.692 731.432,803.235 731.991,796.921 732.55,791.934 733.109,785.383 733.669,763.049 734.228,791.513 734.787,788.321 735.346,769.252 735.906,779.92 736.465,774.84 737.024,784.749 737.583,776.222 738.143,738.902 738.702,750.507 739.261,744.816 739.82,775.306 740.38,772.056 740.939,735.85 741.498,732.596 742.057,731.532 742.617,698.296 743.176,683.924 743.735,732.562 744.294,761.016 744.854,755.686 745.413,721.305 745.972,717.028 746.531,729.168 747.091,727.633 747.65,708.333 748.209,692.427 748.768,694.053 749.328,696.479 749.887,695.518 750.446,711.387 751.005,697.958 751.565,714.706 752.124,696.071 752.683,696.113 753.242,710.891 753.802,677.808 754.361,678.973 754.92,681.361 755.479,663.671 756.039,682.488 756.598,668.966 757.157,654.837 757.716,673.719 758.276,677.135 758.835,674.082 759.394,644.822 759.953,614.962 760.513,639.724 761.072,595.766 761.631,602.231 762.19,622.364 762.75,625.468 763.309,659.603 763.868,659.638 764.427,658.706 764.987,676.175 765.546,661.9 766.105,680.218 766.664,712.873 767.224,676.742 767.783,678.65 768.342,708.649 768.901,735.671 769.461,734.94 770.02,750.763 770.579,731.356 771.138,759.87 771.698,759.431 772.257,789.719 772.816,799.573 773.375,775.963 773.935,756.666 774.494,737.146 775.053,717.782 775.612,681.362 776.172,662.469 776.731,663.606 777.29,732.896 777.849,729.469 778.409,726.903 778.968,691.048 779.527,674.848 780.086,710.045 780.646,726.545 781.205,674.272 781.764,658.451 782.323,629.032 782.883,647.559 783.442,698.499 784.001,666.015 784.56,652.669 785.12,658.898 785.679,644.704 786.238,646.268 786.797,597.498 787.357,571.171 787.916,559.716 788.475,555.137 789.034,543.222 789.594,550.256 790.153,558.253 790.712,552.166 791.271,544.677 791.831,569.804 792.39,527.953 792.949,533.202 793.508,526.303 794.068,533.449 794.627,542.496 795.186,566.15 795.745,558.237 796.305,568.854 796.864,580.457 797.423,584.4 797.982,617.465 798.542,622.26 799.101,608.725 799.66,593.313 800.219,581.682 800.779,589.519 801.338,598.683 801.897,633.367 802.456,624.834 803.016,647.268 803.575,680.786 804.134,680.286 804.693,663.11 805.253,683.143 805.812,704.129 806.371,723.261 806.931,706.673 807.49,706.062 808.049,672.412 808.608,690.072 809.168,690.795 809.727,706.195 810.286,720.499 810.845,718.168 811.405,716.842 811.964,700.567 812.523,683.773 813.082,668.265 813.642,650.684 814.201,651.681 814.76,671.649 815.319,688.039 815.879,674.81 816.438,675.889 816.997,678.278 817.556,678.785 818.116,681.742 818.675,681.036 819.234,681.713 819.793,684.619 820.353,687.657 820.912,701.754 821.471,735.459 822.03,717.82 822.59,682.639 823.149,698.402 823.708,698.654 824.267,695.182 824.827,694.526 825.386,707.995 825.945,722.294 826.504,737.082 827.064,749.502 827.623,728.164 828.182,712.374 828.741,713.02 829.301,727.733 829.86,707.715 830.419,737.121 830.978,767.655 831.538,747.586 832.097,730.323 832.656,728.654 833.215,711.753 833.775,693.892 834.334,667.25 834.893,667.19 835.452,649.085 836.012,649.045 836.571,667.22 837.13,685.737 837.689,698.714 838.249,716.735 838.808,715.154 839.367,713.547 839.926,712.983 840.486,759.011 841.045,786.48 841.604,779.851 842.163,806.525 842.723,764.952 843.282,756.75 843.841,784.926 844.4,734.569 844.96,748.481 845.519,711.881 846.078,727.407 846.637,727.118 847.197,741.439 847.756,720.914 848.315,702.022 848.874,698.358 849.434,647.854 849.993,680.269 850.552,682.545 851.111,648.762 851.671,633.751 852.23,648.807 852.789,697.7 853.348,711.255 853.908,705.512 854.467,704.143 855.026,701.146 855.585,699.436 856.145,699.021 856.704,651.756 857.263,635.481 857.822,670.636 858.382,683.111 858.941,635.597 859.5,651.791 860.059,639.538 860.619,644.338 861.178,695.997 861.737,713.155 862.296,716.159 862.856,732.695 863.415,743.643 863.974,770.706 864.533,749.654 865.093,750.339 865.652,732.348 866.211,699.296 866.77,683.181 867.33,684.704 867.889,664.175 868.448,667.293 869.007,686.258 869.567,620.023 870.126,577.056 870.685,598.667 871.244,618.933 871.804,638.325 872.363,656.953 872.922,657.771 873.481,644.034 874.041,648.957 874.6,655.492 875.159,692.806 875.718,708.674 876.278,675.872 876.837,662.657 877.396,697.41 877.955,697.44 878.515,694.819 879.074,694.013 879.633,692.524 880.192,706.081 880.752,704.154 881.311,720.413 881.87,721.862 882.429,686.61 882.989,723.445 883.548,734.298 884.107,732.382 884.666,759.742 885.226,772.764 885.785,752.439 886.344,783.268 886.903,842.77 887.463,800.743 888.022,744.453 888.581,757.777 889.14,735.1 889.7,735.8 890.259,684.819 890.818,685.963 891.377,702.295 891.937,717.586 892.496,728.458 893.055,727.794 893.614,742.698 894.174,724.905 894.733,723.486 895.292,718.483 895.851,762.906 896.411,789.401 896.97,779.986 897.529,740.968 898.088,721.903 898.648,767.592 899.207,744.618 899.766,737.266 900.325,703.761 900.885,688.798 901.444,685.58 902.003,685.156 902.562,699.417 903.122,685.876 903.681,668.07 904.24,623.026 904.799,594.598 905.359,584.496 905.918,588.177 906.477,591.373 907.036,610.025 907.596,612.651 908.155,632.542 908.714,634.737 909.273,652.736 909.833,685.068 910.392,670.121 910.951,650.131 911.51,653.899 912.07,653.005 912.629,684.627 913.188,671.12 913.747,653.548 914.307,657.876 914.866,674.721 915.425,676.611 915.984,644.488 916.544,645.93 917.103,664.34 917.662,679.627 918.221,681.002 918.781,669.12 919.34,652.189 919.899,640.523 920.458,659.311 921.018,677.375 921.577,663.17 922.136,647.171 922.695,684.178 923.255,731.351 923.814,745.557 924.373,723.236 924.932,702.468 925.492,683.755 926.051,683.708 926.61,715.796 927.169,728.531 927.729,741.364 928.288,737.885 928.847,752.419 929.406,752.843 929.966,750.165 930.525,730.181 931.084,717.21 931.644,714.898 932.203,684.634 932.762,666.964 933.321,651.68 933.881,653.032 934.44,672.944 934.999,676.557 935.558,677.938 936.118,632.908 936.677,602.015 937.236,558.588 937.795,566.279 938.355,574.029 938.914,593.192 939.473,566.37 940.032,537.745 940.592,529.678 941.151,536.69 941.71,545.72 942.269,567.74 942.829,576.211 943.388,577.883 943.947,583.28 944.506,604.739 945.066,577.287 945.625,584.237 946.184,607.735 946.743,612.97 947.303,649.619 947.862,655.902 948.421,642.416 948.98,677.715 949.54,682.781 950.099,700.293 950.658,714.594 951.217,745.952 951.777,775.992 952.336,786.473 952.895,798.693 953.454,826.83 954.014,823.723 954.573,787.643 955.132,784.449 955.691,763.58 956.251,745.762 956.81,726.098 957.369,721.88 957.928,700.933 958.488,716.417 959.047,730.927 959.606,729.337 960.165,696.54 960.725,714.546 961.284,700.236 961.843,668.642 962.402,655.47 962.962,674.095 963.521,645.595 964.08,663.104 964.639,636.127 965.199,638.725 965.758,628.611 966.317,660.739 966.876,681.244 967.436,694.761 967.995,707.875 968.554,689.431 969.113,689.401 969.673,702.822 970.232,700.035 970.791,695.982 971.35,662.995 971.91,617.035 972.469,603.318 973.028,592.772 973.587,597.432 974.147,614.672 974.706,648.524 975.265,667.005 975.824,683.773 976.384,668.773 976.943,684.368 977.502,672.694 978.061,643.451 978.621,661.402 979.18,712.046 979.739,695.406 980.298,712.791 980.858,762.758 981.417,741.737 981.976,784.627 982.535,766.887 983.095,736.758 983.654,701.542 984.213,634.555 984.772,636.08 985.332,654.522 985.891,657.544 986.45,641.647 987.009,675.755 987.569,674.438 988.128,692.113 988.687,676.811 989.246,672.713 989.806,674.954 990.365,707.726 990.924,706.842 991.483,723.305 992.043,724.318 992.602,721.346 993.161,764.438 993.72,741.093 994.28,756.746 994.839,755.191 995.398,764.845 995.957,774.698 996.517,771.401 997.076,767.812 997.635,775.931 998.194,757.58 998.754,738.697 999.313,700.97 999.872,714.389 1000.43,682.353 1000.99,685.848 1001.55,718.551 1002.11,730.406 1002.67,761.959 1003.23,723.542 1003.79,757.697 1004.35,753.329 1004.91,762.695 1005.46,756.589 1006.02,765.421 1006.58,730.014 1007.14,725.304 1007.7,720.26 1008.26,716.199 1008.82,746.696 1009.38,708.09 1009.94,688.312 1010.5,673.877 1011.06,654.964 1011.62,674.433 1012.18,674.713 1012.73,725.547 1013.29,740.958 1013.85,738.861 1014.41,749.855 1014.97,745.42 1015.53,728.623 1016.09,728.129 1016.65,745.259 1017.21,743.42 1017.77,710.016 1018.33,692.519 1018.89,707.123 1019.45,703.714 1020.01,735.497 1020.56,687.355 1021.12,692.21 1021.68,673.048 1022.24,736.822 1022.8,748.42 1023.36,727.562 1023.92,727.604 1024.48,737.154 1025.04,731.879 1025.6,727.682 1026.16,706.934 1026.72,750.947 1027.28,730.425 1027.83,726.603 1028.39,709.862 1028.95,710.69 1029.51,679.109 1030.07,678.611 1030.63,662.899 1031.19,696.918 1031.75,709.381 1032.31,739.518 1032.87,734.677 1033.43,750.966 1033.99,761.583 1034.55,790.453 1035.1,803.166 1035.66,827.55 1036.22,789.093 1036.78,797.681 1037.34,791.604 1037.9,753.202 1038.46,767.661 1039.02,762.699 1039.58,770.711 1040.14,763.104 1040.7,725.456 1041.26,742.624 1041.82,743.698 1042.38,708.676 1042.93,710.14 1043.49,709.157 1044.05,711.026 1044.61,691.07 1045.17,708.204 1045.73,660.401 1046.29,692.1 1046.85,688.237 1047.41,674.161 1047.97,674.885 1048.53,660.032 1049.09,659.004 1049.65,645.125 1050.2,647.927 1050.76,664.022 1051.32,665.065 1051.88,664.162 1052.44,682.067 1053,616.306 1053.56,600.178 1054.12,556.128 1054.68,547.087 1055.24,535.712 1055.8,543.094 1056.36,536.029 1056.92,593.037 1057.48,582.57 1058.03,557.613 1058.59,545.381 1059.15,569.527 1059.71,592.464 1060.27,585.839 1060.83,610.701 1061.39,630.608 1061.95,599.578 1062.51,618.8 1063.07,610.166 1063.63,613.675 1064.19,633.138 1064.75,603.817 1065.3,590.806 1065.86,596.105 1066.42,584.874 1066.98,572.518 1067.54,628.82 1068.1,613.559 1068.66,637.74 1069.22,622.043 1069.78,627.64 1070.34,628.868 1070.9,663.21 1071.46,696.734 1072.02,696.197 1072.57,678.923 1073.13,680.968 1073.69,655.738 1074.25,657.415 1074.81,627.504 1075.37,615.891 1075.93,663.841 1076.49,662.58 1077.05,663.641 1077.61,668.915 1078.17,717.286 1078.73,731.242 1079.29,730.844 1079.85,712.47 1080.4,697.009 1080.96,714.308 1081.52,696.942 1082.08,697.232 1082.64,697.712 1083.2,729.745 1083.76,707.549 1084.32,702.602 1084.88,684.964 1085.44,652.156 1086,651.127 1086.56,619.312 1087.12,640.559 1087.67,692.604 1088.23,683.432 1088.79,683.934 1089.35,665.28 1089.91,662.407 1090.47,665.068 1091.03,661.3 1091.59,642.734 1092.15,677.104 1092.71,676.226 1093.27,695.005 1093.83,694.546 1094.39,706.353 1094.94,689.271 1095.5,655.447 1096.06,670.378 1096.62,653.24 1097.18,654.557 1097.74,672.788 1098.3,655.735 1098.86,642.093 1099.42,658.569 1099.98,675.215 1100.54,674.779 1101.1,690.395 1101.66,706.556 1102.22,740.463 1102.77,705.996 1103.33,722.944 1103.89,723.137 1104.45,701.047 1105.01,683.028 1105.57,698.326 1106.13,695.065 1106.69,696.88 1107.25,630.177 1107.81,586.255 1108.37,611.853 1108.93,613.997 1109.49,651.397 1110.04,647.773 1110.6,635.271 1111.16,604.479 1111.72,592.164 1112.28,613.498 1112.84,649.258 1113.4,647.535 1113.96,646.089 1114.52,666.524 1115.08,682.531 1115.64,701.126 1116.2,747.974 1116.76,745.358 1117.31,742.481 1117.87,742.159 1118.43,760.635 1118.99,771.455 1119.55,781.933 1120.11,744.445 1120.67,723.017 1121.23,721.428 1121.79,716.764 1122.35,727.526 1122.91,724.887 1123.47,724.395 1124.03,737.269 1124.59,766.016 1125.14,762.074 1125.7,740.82 1126.26,704.529 1126.82,688.849 1127.38,672.358 1127.94,672.829 1128.5,671.393 1129.06,687.316 1129.62,686.523 1130.18,721.021 1130.74,674.05 1131.3,691.367 1131.86,674.463 1132.41,711.697 1132.97,705.477 1133.53,686.977 1134.09,672.375 1134.65,671.035 1135.21,721.515 1135.77,717.635 1136.33,682.911 1136.89,668.942 1137.45,668.516 1138.01,671.185 1138.57,674.46 1139.13,671.525 1139.68,688.3 1140.24,738.888 1140.8,717.037 1141.36,699.954 1141.92,682.9 1142.48,715.304 1143.04,714.343 1143.6,742.8 1144.16,721.009 1144.72,687.197 1145.28,659.391 1145.84,678.289 1146.4,694.487 1146.96,712.03 1147.51,740.769 1148.07,702.633 1148.63,717.304 1149.19,729.292 1149.75,742.212 1150.31,758.569 1150.87,754.599 1151.43,782.098 1151.99,696.292 1152.55,693.809 1153.11,679.647 1153.67,681.34 1154.23,681.058 1154.78,680.22 1155.34,680.556 1155.9,710.767 1156.46,723.076 1157.02,719.564 1157.58,733.208 1158.14,729.918 1158.7,763.131 1159.26,791.147 1159.82,786.133 1160.38,747.902 1160.94,742.773 1161.5,691.162 1162.05,665.1 1162.61,649.823 1163.17,637.563 1163.73,657.423 1164.29,661.876 1164.85,649.622 1165.41,618.886 1165.97,619.98 1166.53,657.877 1167.09,678.431 1167.65,679.055 1168.21,646.611 1168.77,654.885 1169.33,638.8 1169.88,656.978 1170.44,692.45 1171,694.007 1171.56,678.796 1172.12,659.476 1172.68,659.311 1173.24,612.608 1173.8,598.672 1174.36,601.464 1174.92,607.94 1175.48,631.308 1176.04,619.945 1176.6,640.255 1177.15,646.406 1177.71,667.232 1178.27,654.24 1178.83,659.01 1179.39,673.543 1179.95,673.352 1180.51,658.737 1181.07,658.152 1181.63,646.049 1182.19,646.708 1182.75,681.198 1183.31,696.106 1183.87,741.565 1184.43,753.159 1184.98,750.285 1185.54,730.619 1186.1,713.985 1186.66,714.122 1187.22,760.868 1187.78,742.518 1188.34,738.103 1188.9,701.138 1189.46,718.352 1190.02,733.102 1190.58,761.507 1191.14,790.879 1191.7,768.591 1192.25,782.208 1192.81,778.218 1193.37,786.257 1193.93,814.343 1194.49,793.297 1195.05,785.295 1195.61,791.432 1196.17,797.813 1196.73,810.017 1197.29,818.059 1197.85,812.036 1198.41,838.878 1198.97,814.817 1199.52,794.146 1200.08,789.576 1200.64,832.811 1201.2,856.413 1201.76,895.498 1202.32,851.239 1202.88,828.807 1203.44,790.461 1204,787.091 1204.56,767.233 1205.12,766.281 1205.68,744.998 1206.24,728.313 1206.8,694.399 1207.35,712.639 1207.91,743.663 1208.47,738.221 1209.03,738.082 1209.59,736.029 1210.15,733.219 1210.71,713.396 1211.27,708.648 1211.83,675.112 1212.39,681.168 1212.95,712.011 1213.51,709.75 1214.07,674.223 1214.62,676.827 1215.18,696.095 1215.74,697.932 1216.3,694.258 1216.86,725.965 1217.42,706.26 1217.98,719.724 1218.54,721.517 1219.1,687.183 1219.66,671.15 1220.22,653.65 1220.78,667.399 1221.34,634.278 1221.89,637.623 1222.45,626.515 1223.01,616.636 1223.57,636.757 1224.13,653.175 1224.69,637.393 1225.25,643.611 1225.81,660.513 1226.37,632.925 1226.93,620.866 1227.49,605.444 1228.05,577.171 1228.61,598.932 1229.17,621.691 1229.72,624.34 1230.28,645.172 1230.84,619.444 1231.4,654.416 1231.96,670.91 1232.52,685.269 1233.08,716.774 1233.64,731.085 1234.2,728.092 1234.76,678.404 1235.32,711.334 1235.88,691.995 1236.44,693.34 1236.99,694.047 1237.55,678.957 1238.11,679.231 1238.67,680.819 1239.23,693.637 1239.79,679.295 1240.35,679.394 1240.91,665.137 1241.47,679.54 1242.03,680.686 1242.59,698.115 1243.15,694.697 1243.71,647.427 1244.26,665.959 1244.82,668.232 1245.38,653.875 1245.94,622.27 1246.5,643.64 1247.06,661.078 1247.62,677.818 1248.18,662.006 1248.74,664.446 1249.3,634.403 1249.86,636.324 1250.42,622.81 1250.98,645.428 1251.54,655.142 1252.09,656.857 1252.65,659.742 1253.21,642.102 1253.77,661.818 1254.33,681.489 1254.89,698.273 1255.45,713.281 1256.01,724.817 1256.57,691.437 1257.13,691.557 1257.69,706.758 1258.25,740.263 1258.81,719.855 1259.36,715.451 1259.92,728.215 1260.48,743.921 1261.04,711.116 1261.6,708.361 1262.16,691.394 1262.72,675.002 1263.28,642.907 1263.84,660.586 1264.4,649.978 1264.96,668.253 1265.52,638.758 1266.08,628.175 1266.63,600.828 1267.19,591.716 1267.75,614.433 1268.31,600.147 1268.87,589.078 1269.43,567.616 1269.99,555.436 1270.55,576.304 1271.11,585.552 1271.67,609.666 1272.23,613.7 1272.79,602.644 1273.35,607.812 1273.91,629.378 1274.46,664.428 1275.02,684.178 1275.58,685.674 1276.14,719.142 1276.7,670.639 1277.26,702.15 1277.82,718.986 1278.38,699.493 1278.94,735.305 1279.5,717.397 1280.06,733.29 1280.62,717.767 1281.18,716.819 1281.73,712.709 1282.29,728.005 1282.85,742.352 1283.41,740.446 1283.97,736.799 1284.53,752.624 1285.09,781.441 1285.65,755.565 1286.21,764.235 1286.77,725.779 1287.33,725.496 1287.89,708.257 1288.45,724.701 1289,722.845 1289.56,722.195 1290.12,702.337 1290.68,717.426 1291.24,727.033 1291.8,723.563 1292.36,705.275 1292.92,704.817 1293.48,721.045 1294.04,701.242 1294.6,700.397 1295.16,649.363 1295.72,699.658 1296.28,713.551 1296.83,684.442 1297.39,649.398 1297.95,694.154 1298.51,644.301 1299.07,613.842 1299.63,635.277 1300.19,637.133 1300.75,657.078 1301.31,691.208 1301.87,688.821 1302.43,691.621 1302.99,677.359 1303.55,692.646 1304.1,694.163 1304.66,678.272 1305.22,678.082 1305.78,708.774 1306.34,709.13 1306.9,692.418 1307.46,692.876 1308.02,705.619 1308.58,719.23 1309.14,766.156 1309.7,776.186 1310.26,754.663 1310.82,749.434 1311.38,760.33 1311.93,774.84 1312.49,770.333 1313.05,767.404 1313.61,716.626 1314.17,711.326 1314.73,726.006 1315.29,676.469 1315.85,740.606 1316.41,737.344 1316.97,749.683 1317.53,748.336 1318.09,746.159 1318.65,725.585 1319.2,691.525 1319.76,710.682 1320.32,710.028 1320.88,707.01 1321.44,708.087 1322,723.375 1322.56,704.571 1323.12,701.964 1323.68,713.277 1324.24,695.332 1324.8,728.746 1325.36,743.66 1325.92,743.535 1326.47,742.718 1327.03,724.215 1327.59,739.419 1328.15,756.687 1328.71,767.936 1329.27,795.33 1329.83,752.541 1330.39,714.086 1330.95,691.354 1331.51,670.479 1332.07,637.848 1332.63,622.715 1333.19,640.339 1333.75,640.261 1334.3,622.226 1334.86,637.546 1335.42,622.327 1335.98,641.144 1336.54,641.025 1337.1,626.146 1337.66,643.786 1338.22,595.3 1338.78,567.391 1339.34,557.31 1339.9,580.735 1340.46,601.829 1341.02,620.374 1341.57,606.462 1342.13,608.272 1342.69,582.135 1343.25,587.574 1343.81,623.767 1344.37,628.445 1344.93,634.38 1345.49,605.13 1346.05,658.553 1346.61,657.877 1347.17,691.932 1347.73,658.677 1348.29,675.823 1348.84,662.005 1349.4,662.881 1349.96,695.749 1350.52,708.597 1351.08,707.911 1351.64,708.597 1352.2,707.242 1352.76,690.031 1353.32,692.564 1353.88,675.31 1354.44,677.214 1355,683.488 1355.56,716.414 1356.12,700.695 1356.67,734.446 1357.23,752.476 1357.79,748.316 1358.35,762.973 1358.91,743.745 1359.47,709.156 1360.03,711.575 1360.59,727.292 1361.15,710.298 1361.71,723.923 1362.27,722.134 1362.83,686.679 1363.39,672.212 1363.94,674.824 1364.5,711.878 1365.06,744.022 1365.62,722.531 1366.18,720.727 1366.74,718.037 1367.3,714.425 1367.86,730.224 1368.42,711.422 1368.98,708.121 1369.54,672.902 1370.1,673.077 1370.66,672.579 1371.21,690.14 1371.77,691.695 1372.33,659.696 1372.89,660.003 1373.45,662.37 1374.01,667.021 1374.57,682.533 1375.13,665.82 1375.69,667.9 1376.25,668.364 1376.81,669.79 1377.37,656.8 1377.93,686.947 1378.49,671.835 1379.04,656.18 1379.6,659.465 1380.16,657.534 1380.72,674.919 1381.28,678.574 1381.84,711.282 1382.4,707.296 1382.96,704.101 1383.52,672.151 1384.08,691.465 1384.64,724.899 1385.2,708.224 1385.76,691.295 1386.31,703.48 1386.87,639.435 1387.43,671.296 1387.99,623.6 1388.55,624.592 1389.11,643.427 1389.67,629.34 1390.23,662.203 1390.79,662.037 1391.35,680.061 1391.91,676.6 1392.47,656.916 1393.03,642.461 1393.58,675.868 1394.14,674.675 1394.7,678.242 1395.26,676.77 1395.82,644.331 1396.38,666.429 1396.94,649.147 1397.5,651.588 1398.06,654.683 1398.62,674.072 1399.18,679.401 1399.74,678.707 1400.3,664.529 1400.86,630.181 1401.41,682.405 1401.97,682.983 1402.53,668 1403.09,684.866 1403.65,684.601 1404.21,666.962 1404.77,748.842 1405.33,762.309 1405.89,773.488 1406.45,754.855 1407.01,701.149 1407.57,729.196 1408.13,725.949 1408.68,721.89 1409.24,717.937 1409.8,714.529 1410.36,697.17 1410.92,699.621 1411.48,695.27 1412.04,695.349 1412.6,678.728 1413.16,681.71 1413.72,629.902 1414.28,650.741 1414.84,674.191 1415.4,661.376 1415.95,693.26 1416.51,662.967 1417.07,662.419 1417.63,665.564 1418.19,681.193 1418.75,678.813 1419.31,680.756 1419.87,664.138 1420.43,630.885 1420.99,647.3 1421.55,662.821 1422.11,661.466 1422.67,612.747 1423.23,618.08 1423.78,620.316 1424.34,684.625 1424.9,720.008 1425.46,689.234 1426.02,707.081 1426.58,719.242 1427.14,703.335 1427.7,704.306 1428.26,704.032 1428.82,670.55 1429.38,686.553 1429.94,717.69 1430.5,680.633 1431.05,682.743 1431.61,682.504 1432.17,684.454 1432.73,665.039 1433.29,650.082 1433.85,651.665 1434.41,655.568 1434.97,623.248 1435.53,608.392 1436.09,597.958 1436.65,600.554 1437.21,604.118 1437.77,620.23 1438.33,639.699 1438.88,642.753 1439.44,595.203 1440,613.78 1440.56,604.14 1441.12,625.798 1441.68,599.576 1442.24,616.657 1442.8,634.793 1443.36,638.553 1443.92,659.737 1444.48,699.069 1445.04,713.848 1445.6,728.639 1446.15,728.177 1446.71,736.137 1447.27,719.857 1447.83,735.023 1448.39,768.334 1448.95,767.734 1449.51,773.864 1450.07,720.89 1450.63,719.264 1451.19,700.99 1451.75,717.671 1452.31,731.201 1452.87,648.547 1453.42,648.503 1453.98,681.2 1454.54,650.637 1455.1,636.334 1455.66,642.899 1456.22,626.481 1456.78,644.653 1457.34,612.707 1457.9,632.628 1458.46,618.86 1459.02,638.739 1459.58,627.177 1460.14,629.018 1460.7,647.248 1461.25,666.873 1461.81,653.828 1462.37,668.771 1462.93,652.724 1463.49,655.153 1464.05,676.146 1464.61,676.457 1465.17,709.685 1465.73,712.468 1466.29,697.628 1466.85,714.557 1467.41,650.257 1467.97,641.523 1468.52,629.719 1469.08,616.04 1469.64,636.692 1470.2,656.487 1470.76,677.332 1471.32,661.88 1471.88,663.01 1472.44,663.431 1473,618.828 1473.56,638.314 1474.12,658.726 1474.68,692.549 1475.24,724.085 1475.79,724.054 1476.35,723.704 1476.91,738.656 1477.47,721.552 1478.03,704.381 1478.59,715.887 1479.15,728.836 1479.71,743.662 1480.27,722.606 1480.83,721.061 1481.39,721.351 1481.95,718.352 1482.51,753.089 1483.07,751.046 1483.62,748.145 1484.18,778.262 1484.74,755.987 1485.3,752.246 1485.86,794.223 1486.42,786.089 1486.98,794.343 1487.54,790.778 1488.1,769.067 1488.66,762.928 1489.22,810.21 1489.78,805.325 1490.34,833.63 1490.89,839.891 1491.45,781.261 1492.01,760.322 1492.57,741.453 1493.13,724.761 1493.69,705.811 1494.25,686.206 1494.81,685.891 1495.37,714.476 1495.93,696.194 1496.49,683.79 1497.05,682.376 1497.61,681.138 1498.16,697.556 1498.72,710.333 1499.28,721.578 1499.84,719.171 1500.4,734.167 1500.96,731.575 1501.52,742.707 1502.08,707.286 1502.64,706.924 1503.2,723.007 1503.76,736.681 1504.32,715.044 1504.88,666.348 1505.44,667.709 1505.99,653.917 1506.55,671.54 1507.11,671.171 1507.67,672.062 1508.23,654.225 1508.79,623.557 1509.35,662.685 1509.91,631.877 1510.47,665.599 1511.03,651.358 1511.59,639.04 1512.15,627.692 1512.71,646.05 1513.26,649.304 1513.82,664.98 1514.38,681.558 1514.94,681.261 1515.5,665.421 1516.06,678.789 1516.62,662.428 1517.18,678.48 1517.74,677.06 1518.3,629.539 1518.86,602.67 1519.42,607.261 1519.98,642.437 1520.53,629.07 1521.09,632.936 1521.65,639.478 1522.21,623.717 1522.77,627.19 1523.33,626.009 1523.89,599.324 1524.45,604.307 1525.01,608.753 1525.57,561.957 1526.13,555.022 1526.69,562.027 1527.25,554.858 1527.81,561.835 1528.36,584.333 1528.92,604.79 1529.48,594.815 1530.04,614.815 1530.6,632.572 1531.16,666.863 1531.72,665.045 1532.28,649.73 1532.84,632.027 1533.4,664.116 1533.96,677.516 1534.52,741.651 1535.08,767.626 1535.63,749.675 1536.19,765.267 1536.75,731.306 1537.31,715.183 1537.87,748.123 1538.43,761.597 1538.99,772.252 1539.55,781.341 1540.11,766.353 1540.67,781.264 1541.23,806.759 1541.79,797.065 1542.35,806.84 1542.9,799.362 1543.46,791.126 1544.02,767.938 1544.58,774.967 1545.14,737.716 1545.7,753.434 1546.26,768.474 1546.82,761.004 1547.38,739.428 1547.94,749.895 1548.5,714.659 1549.06,666.99 1549.62,651.424 1550.18,633.557 1550.73,608.276 1551.29,592.887 1551.85,583.608 1552.41,624.355 1552.97,627.053 1553.53,597.656 1554.09,604.836 1554.65,594.195 1555.21,582.802 1555.77,603.527 1556.33,624.08 1556.89,595.97 1557.45,597.08 1558,600.053 1558.56,621.702 1559.12,639.655 1559.68,671.781 1560.24,702.732 1560.8,700.473 1561.36,715.477 1561.92,712.862 1562.48,707.37 1563.04,740.813 1563.6,723.141 1564.16,720.922 1564.72,732.828 1565.28,696.54 1565.83,693.929 1566.39,689.786 1566.95,655.747 1567.51,692.079 1568.07,661.457 1568.63,694.2 1569.19,692.588 1569.75,690.122 1570.31,709.084 1570.87,691.5 1571.43,725.061 1571.99,690.212 1572.55,676.266 1573.1,709.145 1573.66,721.961 1574.22,718.77 1574.78,732.848 1575.34,746.394 1575.9,696.106 1576.46,711.598 1577.02,698.106 1577.58,713.132 1578.14,722.068 1578.7,702.15 1579.26,700.089 1579.82,698.632 1580.37,727.056 1580.93,724.364 1581.49,725.341 1582.05,752.455 1582.61,731.76 1583.17,709.295 1583.73,722.732 1584.29,721.32 1584.85,703.15 1585.41,698.972 1585.97,683.608 1586.53,651.516 1587.09,654.746 1587.65,658.929 1588.2,676.417 1588.76,674.219 1589.32,660.322 1589.88,648.533 1590.44,614.944 1591,614.756 1591.56,632.743 1592.12,621.049 1592.68,591.112 1593.24,578.28 1593.8,631.526 1594.36,633.187 1594.92,636.549 1595.47,636.995 1596.03,621.85 1596.59,608.851 1597.15,614.867 1597.71,617.992 1598.27,638.436 1598.83,642.053 1599.39,643.891 1599.95,665.348 1600.51,661.007 1601.07,645.569 1601.63,666.069 1602.19,671.342 1602.74,705.28 1603.3,723.924 1603.86,721.331 1604.42,719.449 1604.98,735.887 1605.54,683.394 1606.1,651.395 1606.66,652.567 1607.22,683.92 1607.78,683.116 1608.34,649.074 1608.9,614.295 1609.46,634.654 1610.02,621.6 1610.57,627.426 1611.13,666.457 1611.69,668.65 1612.25,653.158 1612.81,673.37 1613.37,659.944 1613.93,628.467 1614.49,613.714 1615.05,649.035 1615.61,669.369 1616.17,717.11 1616.73,695.754 1617.29,697.304 1617.84,678.151 1618.4,676.184 1618.96,694.233 1619.52,680.236 1620.08,684.106 1620.64,698.132 1621.2,682.488 1621.76,695.922 1622.32,664.376 1622.88,601.531 1623.44,620.888 1624,606.939 1624.56,611.723 1625.11,633.115 1625.67,605.176 1626.23,608.815 1626.79,593.758 1627.35,634.537 1627.91,622.998 1628.47,606.793 1629.03,630.23 1629.59,649.865 1630.15,619.485 1630.71,639.475 1631.27,626.549 1631.83,646.975 1632.39,619.248 1632.94,691.544 1633.5,660.052 1634.06,678.05 1634.62,712.783 1635.18,679.888 1635.74,664.453 1636.3,682.21 1636.86,701.48 1637.42,683.994 1637.98,701.389 1638.54,700.252 1639.1,749.143 1639.66,744.045 1640.21,724.659 1640.77,737.956 1641.33,720.852 1641.89,719.058 1642.45,731.634 1643.01,730.396 1643.57,698.12 1644.13,678.922 1644.69,666.489 1645.25,667.43 1645.81,655.793 1646.37,689.625 1646.93,626.744 1647.48,600.46 1648.04,634.072 1648.6,636.755 1649.16,639.557 1649.72,640.677 1650.28,673.665 1650.84,687.405 1651.4,655.476 1651.96,637.684 1652.52,670.961 1653.08,675.197 1653.64,740.561 1654.2,704.998 1654.76,700.411 1655.31,667.233 1655.87,669.829 1656.43,669.594 1656.99,685.625 1657.55,686.751 1658.11,669.971 1658.67,670.321 1659.23,655.444 1659.79,688.113 1660.35,638.009 1660.91,638.646 1661.47,658.178 1662.03,643.299 1662.58,678.93 1663.14,680.054 1663.7,679.35 1664.26,697.258 1664.82,694.687 1665.38,708.185 1665.94,690.284 1666.5,676.473 1667.06,658.838 1667.62,688.439 1668.18,736.427 1668.74,717.23 1669.3,690.209 1669.85,674.496 1670.41,679.353 1670.97,684.862 1671.53,689.73 1672.09,690.875 1672.65,689.181 1673.21,689.488 1673.77,690.626 1674.33,675.554 1674.89,679.965 1675.45,712.541 1676.01,711.305 1676.57,737.058 1677.13,732.234 1677.68,715.725 1678.24,698.153 1678.8,715.179 1679.36,733.099 1679.92,715.299 1680.48,746.75 1681.04,745.551 1681.6,745.051 1682.16,726.971 1682.72,724.945 1683.28,671.425 1683.84,657.109 1684.4,675.612 1684.95,689.749 1685.51,705.776 1686.07,670.305 1686.63,670.131 1687.19,686.064 1687.75,683.089 1688.31,713.717 1688.87,713.119 1689.43,695.951 1689.99,708.762 1690.55,703.735 1691.11,671.138 1691.67,671.648 1692.23,652.553 1692.78,605.438 1693.34,625.658 1693.9,611.322 1694.46,595.763 1695.02,620.344 1695.58,604.046 1696.14,575.379 1696.7,630.831 1697.26,631.274 1697.82,669.984 1698.38,639.547 1698.94,625.03 1699.5,631.135 1700.05,633.635 1700.61,652.147 1701.17,651.231 1701.73,650.222 1702.29,653.15 1702.85,637.275 1703.41,623.336 1703.97,627.044 1704.53,614.095 1705.09,568.063 1705.65,530.309 1706.21,553.561 1706.77,577.553 1707.32,616.812 1707.88,607.468 1708.44,612.501 1709,636.573 1709.56,655.139 1710.12,658.695 1710.68,692.303 1711.24,690.773 1711.8,719.92 1712.36,732.471 1712.92,761.956 1713.48,755.147 1714.04,765.936 1714.6,776.921 1715.15,755.919 1715.71,753.411 1716.27,768.946 1716.83,748.727 1717.39,759.595 1717.95,739.129 1718.51,786.084 1719.07,731.563 1719.63,728.573 1720.19,759.393 1720.75,739.033 1721.31,738.692 1721.87,737.17 1722.42,765.35 1722.98,742.658 1723.54,774.161 1724.1,771.32 1724.66,780.208 1725.22,770.453 1725.78,751.711 1726.34,734.365 1726.9,681.151 1727.46,679.067 1728.02,697.28 1728.58,695.303 1729.14,742.127 1729.69,704.511 1730.25,721.126 1730.81,749.74 1731.37,762.434 1731.93,771.839 1732.49,799.832 1733.05,789.753 1733.61,847.235 1734.17,822.641 1734.73,814.577 1735.29,808.95 1735.85,801.979 1736.41,826.044 1736.97,819.769 1737.52,843.169 1738.08,804.694 1738.64,798.644 1739.2,808.01 1739.76,818.232 1740.32,792.517 1740.88,769.121 1741.44,779.358 1742,757.293 1742.56,718.374 1743.12,717.028 1743.68,681.372 1744.24,649.911 1744.79,664.238 1745.35,666.161 1745.91,651.558 1746.47,620.378 1747.03,608.87 1747.59,628.573 1748.15,642.494 1748.71,625.239 1749.27,645.396 1749.83,614.639 1750.39,641.644 1750.95,626.976 1751.51,629.305 1752.06,633.654 1752.62,652.375 1753.18,654.797 1753.74,655.695 1754.3,669.724 1754.86,635.986 1755.42,653.984 1755.98,655.277 1756.54,624.638 1757.1,625.51 1757.66,659.782 1758.22,628.336 1758.78,629.139 1759.34,619.649 1759.89,589.982 1760.45,608.978 1761.01,614.873 1761.57,600.667 1762.13,588.488 1762.69,577.706 1763.25,566.742 1763.81,590.989 1764.37,600.56 1764.93,605.983 1765.49,612.508 1766.05,613.31 1766.61,635.065 1767.16,673.999 1767.72,676.692 1768.28,647.984 1768.84,648.211 1769.4,634.16 1769.96,636.402 1770.52,635.821 1771.08,653.672 1771.64,641.007 1772.2,644.421 1772.76,579.758 1773.32,600.708 1773.88,607.908 1774.43,628.461 1774.99,645.455 1775.55,618.177 1776.11,607.485 1776.67,629.615 1777.23,613.509 1777.79,616.879 1778.35,620.403 1778.91,610.273 1779.47,612.881 1780.03,614.243 1780.59,632.284 1781.15,669.15 1781.71,652.435 1782.26,639.91 1782.82,657.047 1783.38,656.127 1783.94,642.194 1784.5,659.685 1785.06,679.185 1785.62,644.526 1786.18,679.746 1786.74,683.622 1787.3,701.158 1787.86,717.926 1788.42,701.672 1788.98,719.98 1789.53,718.75 1790.09,718.874 1790.65,744.301 1791.21,740.451 1791.77,722.105 1792.33,704.032 1792.89,703.906 1793.45,732.255 1794.01,749.067 1794.57,730.929 1795.13,730.472 1795.69,734.418 1796.25,732.529 1796.8,733.021 1797.36,733.629 1797.92,747.197 1798.48,742.851 1799.04,754.883 1799.6,768.749 1800.16,746.75 1800.72,731.673 1801.28,679.009 1801.84,678.154 1802.4,685.182 1802.96,732.061 1803.52,692.472 1804.08,678.23 1804.63,660.327 1805.19,675.732 1805.75,692.031 1806.31,688.148 1806.87,719.127 1807.43,700.721 1807.99,716.799 1808.55,715.448 1809.11,697.022 1809.67,711.981 1810.23,707.404 1810.79,705.322 1811.35,701.443 1811.9,703.456 1812.46,687.953 1813.02,688.92 1813.58,689.16 1814.14,705.821 1814.7,669.849 1815.26,653.817 1815.82,655.254 1816.38,641.542 1816.94,643.612 1817.5,659.73 1818.06,642.184 1818.62,660.584 1819.18,666.194 1819.73,699.696 1820.29,649.312 1820.85,684.167 1821.41,699.196 1821.97,702.448 1822.53,701.744 1823.09,683.841 1823.65,717.474 1824.21,733.23 1824.77,730.141 1825.33,760.789 1825.89,724.936 1826.45,688.536 1827,704.817 1827.56,668.758 1828.12,669.734 1828.68,658.384 1829.24,682.366 1829.8,712.962 1830.36,725.904 1830.92,724.374 1831.48,706.494 1832.04,706.989 1832.6,705.71 1833.16,702.206 1833.72,699.297 1834.27,727.214 1834.83,708.278 1835.39,707.754 1835.95,676.114 1836.51,662.937 1837.07,684.284 1837.63,648.692 1838.19,647.856 \"/>\n<path clip-path=\"url(#clip403)\" d=\"M720.247 691.82 L720.806 691.82 L721.365 691.82 L721.924 691.82 L722.484 691.82 L723.043 691.82 L723.602 691.82 L724.161 691.82 L724.721 691.82 L725.28 691.82 L725.839 691.82 L726.398 691.82 L726.958 691.82 L727.517 691.82 L728.076 691.82 L728.635 691.82 L729.195 691.82 L729.754 691.82 L730.313 691.82 L730.872 691.82 L731.432 691.82 L731.991 691.82 L732.55 691.82 L733.109 691.82 L733.669 691.82 L734.228 691.82 L734.787 691.82 L735.346 691.82 L735.906 691.82 L736.465 691.82 L737.024 691.82 L737.583 691.82 L738.143 691.82 L738.702 691.82 L739.261 691.82 L739.82 691.82 L740.38 691.82 L740.939 691.82 L741.498 691.82 L742.057 691.82 L742.617 691.82 L743.176 691.82 L743.735 691.82 L744.294 691.82 L744.854 691.82 L745.413 691.82 L745.972 691.82 L746.531 691.82 L747.091 691.82 L747.65 691.82 L748.209 691.82 L748.768 691.82 L749.328 691.82 L749.887 691.82 L750.446 691.82 L751.005 691.82 L751.565 691.82 L752.124 691.82 L752.683 691.82 L753.242 691.82 L753.802 691.82 L754.361 691.82 L754.92 691.82 L755.479 691.82 L756.039 691.82 L756.598 691.82 L757.157 691.82 L757.716 691.82 L758.276 691.82 L758.835 691.82 L759.394 691.82 L759.953 691.82 L760.513 691.82 L761.072 691.82 L761.631 691.82 L762.19 691.82 L762.75 691.82 L763.309 691.82 L763.868 691.82 L764.427 691.82 L764.987 691.82 L765.546 691.82 L766.105 691.82 L766.664 691.82 L767.224 691.82 L767.783 691.82 L768.342 691.82 L768.901 691.82 L769.461 691.82 L770.02 691.82 L770.579 691.82 L771.138 691.82 L771.698 691.82 L772.257 691.82 L772.816 691.82 L773.375 691.82 L773.935 691.82 L774.494 691.82 L775.053 691.82 L775.612 691.82 L776.172 691.82 L776.731 691.82 L777.29 691.82 L777.849 691.82 L778.409 691.82 L778.968 691.82 L779.527 691.82 L780.086 691.82 L780.646 691.82 L781.205 691.82 L781.764 691.82 L782.323 691.82 L782.883 691.82 L783.442 691.82 L784.001 691.82 L784.56 691.82 L785.12 691.82 L785.679 691.82 L786.238 691.82 L786.797 691.82 L787.357 691.82 L787.916 691.82 L788.475 691.82 L789.034 691.82 L789.594 691.82 L790.153 691.82 L790.712 691.82 L791.271 691.82 L791.831 691.82 L792.39 691.82 L792.949 691.82 L793.508 691.82 L794.068 691.82 L794.627 691.82 L795.186 691.82 L795.745 691.82 L796.305 691.82 L796.864 691.82 L797.423 691.82 L797.982 691.82 L798.542 691.82 L799.101 691.82 L799.66 691.82 L800.219 691.82 L800.779 691.82 L801.338 691.82 L801.897 691.82 L802.456 691.82 L803.016 691.82 L803.575 691.82 L804.134 691.82 L804.693 691.82 L805.253 691.82 L805.812 691.82 L806.371 691.82 L806.931 691.82 L807.49 691.82 L808.049 691.82 L808.608 691.82 L809.168 691.82 L809.727 691.82 L810.286 691.82 L810.845 691.82 L811.405 691.82 L811.964 691.82 L812.523 691.82 L813.082 691.82 L813.642 691.82 L814.201 691.82 L814.76 691.82 L815.319 691.82 L815.879 691.82 L816.438 691.82 L816.997 691.82 L817.556 691.82 L818.116 691.82 L818.675 691.82 L819.234 691.82 L819.793 691.82 L820.353 691.82 L820.912 691.82 L821.471 691.82 L822.03 691.82 L822.59 691.82 L823.149 691.82 L823.708 691.82 L824.267 691.82 L824.827 691.82 L825.386 691.82 L825.945 691.82 L826.504 691.82 L827.064 691.82 L827.623 691.82 L828.182 691.82 L828.741 691.82 L829.301 691.82 L829.86 691.82 L830.419 691.82 L830.978 691.82 L831.538 691.82 L832.097 691.82 L832.656 691.82 L833.215 691.82 L833.775 691.82 L834.334 691.82 L834.893 691.82 L835.452 691.82 L836.012 691.82 L836.571 691.82 L837.13 691.82 L837.689 691.82 L838.249 691.82 L838.808 691.82 L839.367 691.82 L839.926 691.82 L840.486 691.82 L841.045 691.82 L841.604 691.82 L842.163 691.82 L842.723 691.82 L843.282 691.82 L843.841 691.82 L844.4 691.82 L844.96 691.82 L845.519 691.82 L846.078 691.82 L846.637 691.82 L847.197 691.82 L847.756 691.82 L848.315 691.82 L848.874 691.82 L849.434 691.82 L849.993 691.82 L850.552 691.82 L851.111 691.82 L851.671 691.82 L852.23 691.82 L852.789 691.82 L853.348 691.82 L853.908 691.82 L854.467 691.82 L855.026 691.82 L855.585 691.82 L856.145 691.82 L856.704 691.82 L857.263 691.82 L857.822 691.82 L858.382 691.82 L858.941 691.82 L859.5 691.82 L860.059 691.82 L860.619 691.82 L861.178 691.82 L861.737 691.82 L862.296 691.82 L862.856 691.82 L863.415 691.82 L863.974 691.82 L864.533 691.82 L865.093 691.82 L865.652 691.82 L866.211 691.82 L866.77 691.82 L867.33 691.82 L867.889 691.82 L868.448 691.82 L869.007 691.82 L869.567 691.82 L870.126 691.82 L870.685 691.82 L871.244 691.82 L871.804 691.82 L872.363 691.82 L872.922 691.82 L873.481 691.82 L874.041 691.82 L874.6 691.82 L875.159 691.82 L875.718 691.82 L876.278 691.82 L876.837 691.82 L877.396 691.82 L877.955 691.82 L878.515 691.82 L879.074 691.82 L879.633 691.82 L880.192 691.82 L880.752 691.82 L881.311 691.82 L881.87 691.82 L882.429 691.82 L882.989 691.82 L883.548 691.82 L884.107 691.82 L884.666 691.82 L885.226 691.82 L885.785 691.82 L886.344 691.82 L886.903 691.82 L887.463 691.82 L888.022 691.82 L888.581 691.82 L889.14 691.82 L889.7 691.82 L890.259 691.82 L890.818 691.82 L891.377 691.82 L891.937 691.82 L892.496 691.82 L893.055 691.82 L893.614 691.82 L894.174 691.82 L894.733 691.82 L895.292 691.82 L895.851 691.82 L896.411 691.82 L896.97 691.82 L897.529 691.82 L898.088 691.82 L898.648 691.82 L899.207 691.82 L899.766 691.82 L900.325 691.82 L900.885 691.82 L901.444 691.82 L902.003 691.82 L902.562 691.82 L903.122 691.82 L903.681 691.82 L904.24 691.82 L904.799 691.82 L905.359 691.82 L905.918 691.82 L906.477 691.82 L907.036 691.82 L907.596 691.82 L908.155 691.82 L908.714 691.82 L909.273 691.82 L909.833 691.82 L910.392 691.82 L910.951 691.82 L911.51 691.82 L912.07 691.82 L912.629 691.82 L913.188 691.82 L913.747 691.82 L914.307 691.82 L914.866 691.82 L915.425 691.82 L915.984 691.82 L916.544 691.82 L917.103 691.82 L917.662 691.82 L918.221 691.82 L918.781 691.82 L919.34 691.82 L919.899 691.82 L920.458 691.82 L921.018 691.82 L921.577 691.82 L922.136 691.82 L922.695 691.82 L923.255 691.82 L923.814 691.82 L924.373 691.82 L924.932 691.82 L925.492 691.82 L926.051 691.82 L926.61 691.82 L927.169 691.82 L927.729 691.82 L928.288 691.82 L928.847 691.82 L929.406 691.82 L929.966 691.82 L930.525 691.82 L931.084 691.82 L931.644 691.82 L932.203 691.82 L932.762 691.82 L933.321 691.82 L933.881 691.82 L934.44 691.82 L934.999 691.82 L935.558 691.82 L936.118 691.82 L936.677 691.82 L937.236 691.82 L937.795 691.82 L938.355 691.82 L938.914 691.82 L939.473 691.82 L940.032 691.82 L940.592 691.82 L941.151 691.82 L941.71 691.82 L942.269 691.82 L942.829 691.82 L943.388 691.82 L943.947 691.82 L944.506 691.82 L945.066 691.82 L945.625 691.82 L946.184 691.82 L946.743 691.82 L947.303 691.82 L947.862 691.82 L948.421 691.82 L948.98 691.82 L949.54 691.82 L950.099 691.82 L950.658 691.82 L951.217 691.82 L951.777 691.82 L952.336 691.82 L952.895 691.82 L953.454 691.82 L954.014 691.82 L954.573 691.82 L955.132 691.82 L955.691 691.82 L956.251 691.82 L956.81 691.82 L957.369 691.82 L957.928 691.82 L958.488 691.82 L959.047 691.82 L959.606 691.82 L960.165 691.82 L960.725 691.82 L961.284 691.82 L961.843 691.82 L962.402 691.82 L962.962 691.82 L963.521 691.82 L964.08 691.82 L964.639 691.82 L965.199 691.82 L965.758 691.82 L966.317 691.82 L966.876 691.82 L967.436 691.82 L967.995 691.82 L968.554 691.82 L969.113 691.82 L969.673 691.82 L970.232 691.82 L970.791 691.82 L971.35 691.82 L971.91 691.82 L972.469 691.82 L973.028 691.82 L973.587 691.82 L974.147 691.82 L974.706 691.82 L975.265 691.82 L975.824 691.82 L976.384 691.82 L976.943 691.82 L977.502 691.82 L978.061 691.82 L978.621 691.82 L979.18 691.82 L979.739 691.82 L980.298 691.82 L980.858 691.82 L981.417 691.82 L981.976 691.82 L982.535 691.82 L983.095 691.82 L983.654 691.82 L984.213 691.82 L984.772 691.82 L985.332 691.82 L985.891 691.82 L986.45 691.82 L987.009 691.82 L987.569 691.82 L988.128 691.82 L988.687 691.82 L989.246 691.82 L989.806 691.82 L990.365 691.82 L990.924 691.82 L991.483 691.82 L992.043 691.82 L992.602 691.82 L993.161 691.82 L993.72 691.82 L994.28 691.82 L994.839 691.82 L995.398 691.82 L995.957 691.82 L996.517 691.82 L997.076 691.82 L997.635 691.82 L998.194 691.82 L998.754 691.82 L999.313 691.82 L999.872 691.82 L1000.43 691.82 L1000.99 691.82 L1001.55 691.82 L1002.11 691.82 L1002.67 691.82 L1003.23 691.82 L1003.79 691.82 L1004.35 691.82 L1004.91 691.82 L1005.46 691.82 L1006.02 691.82 L1006.58 691.82 L1007.14 691.82 L1007.7 691.82 L1008.26 691.82 L1008.82 691.82 L1009.38 691.82 L1009.94 691.82 L1010.5 691.82 L1011.06 691.82 L1011.62 691.82 L1012.18 691.82 L1012.73 691.82 L1013.29 691.82 L1013.85 691.82 L1014.41 691.82 L1014.97 691.82 L1015.53 691.82 L1016.09 691.82 L1016.65 691.82 L1017.21 691.82 L1017.77 691.82 L1018.33 691.82 L1018.89 691.82 L1019.45 691.82 L1020.01 691.82 L1020.56 691.82 L1021.12 691.82 L1021.68 691.82 L1022.24 691.82 L1022.8 691.82 L1023.36 691.82 L1023.92 691.82 L1024.48 691.82 L1025.04 691.82 L1025.6 691.82 L1026.16 691.82 L1026.72 691.82 L1027.28 691.82 L1027.83 691.82 L1028.39 691.82 L1028.95 691.82 L1029.51 691.82 L1030.07 691.82 L1030.63 691.82 L1031.19 691.82 L1031.75 691.82 L1032.31 691.82 L1032.87 691.82 L1033.43 691.82 L1033.99 691.82 L1034.55 691.82 L1035.1 691.82 L1035.66 691.82 L1036.22 691.82 L1036.78 691.82 L1037.34 691.82 L1037.9 691.82 L1038.46 691.82 L1039.02 691.82 L1039.58 691.82 L1040.14 691.82 L1040.7 691.82 L1041.26 691.82 L1041.82 691.82 L1042.38 691.82 L1042.93 691.82 L1043.49 691.82 L1044.05 691.82 L1044.61 691.82 L1045.17 691.82 L1045.73 691.82 L1046.29 691.82 L1046.85 691.82 L1047.41 691.82 L1047.97 691.82 L1048.53 691.82 L1049.09 691.82 L1049.65 691.82 L1050.2 691.82 L1050.76 691.82 L1051.32 691.82 L1051.88 691.82 L1052.44 691.82 L1053 691.82 L1053.56 691.82 L1054.12 691.82 L1054.68 691.82 L1055.24 691.82 L1055.8 691.82 L1056.36 691.82 L1056.92 691.82 L1057.48 691.82 L1058.03 691.82 L1058.59 691.82 L1059.15 691.82 L1059.71 691.82 L1060.27 691.82 L1060.83 691.82 L1061.39 691.82 L1061.95 691.82 L1062.51 691.82 L1063.07 691.82 L1063.63 691.82 L1064.19 691.82 L1064.75 691.82 L1065.3 691.82 L1065.86 691.82 L1066.42 691.82 L1066.98 691.82 L1067.54 691.82 L1068.1 691.82 L1068.66 691.82 L1069.22 691.82 L1069.78 691.82 L1070.34 691.82 L1070.9 691.82 L1071.46 691.82 L1072.02 691.82 L1072.57 691.82 L1073.13 691.82 L1073.69 691.82 L1074.25 691.82 L1074.81 691.82 L1075.37 691.82 L1075.93 691.82 L1076.49 691.82 L1077.05 691.82 L1077.61 691.82 L1078.17 691.82 L1078.73 691.82 L1079.29 691.82 L1079.85 691.82 L1080.4 691.82 L1080.96 691.82 L1081.52 691.82 L1082.08 691.82 L1082.64 691.82 L1083.2 691.82 L1083.76 691.82 L1084.32 691.82 L1084.88 691.82 L1085.44 691.82 L1086 691.82 L1086.56 691.82 L1087.12 691.82 L1087.67 691.82 L1088.23 691.82 L1088.79 691.82 L1089.35 691.82 L1089.91 691.82 L1090.47 691.82 L1091.03 691.82 L1091.59 691.82 L1092.15 691.82 L1092.71 691.82 L1093.27 691.82 L1093.83 691.82 L1094.39 691.82 L1094.94 691.82 L1095.5 691.82 L1096.06 691.82 L1096.62 691.82 L1097.18 691.82 L1097.74 691.82 L1098.3 691.82 L1098.86 691.82 L1099.42 691.82 L1099.98 691.82 L1100.54 691.82 L1101.1 691.82 L1101.66 691.82 L1102.22 691.82 L1102.77 691.82 L1103.33 691.82 L1103.89 691.82 L1104.45 691.82 L1105.01 691.82 L1105.57 691.82 L1106.13 691.82 L1106.69 691.82 L1107.25 691.82 L1107.81 691.82 L1108.37 691.82 L1108.93 691.82 L1109.49 691.82 L1110.04 691.82 L1110.6 691.82 L1111.16 691.82 L1111.72 691.82 L1112.28 691.82 L1112.84 691.82 L1113.4 691.82 L1113.96 691.82 L1114.52 691.82 L1115.08 691.82 L1115.64 691.82 L1116.2 691.82 L1116.76 691.82 L1117.31 691.82 L1117.87 691.82 L1118.43 691.82 L1118.99 691.82 L1119.55 691.82 L1120.11 691.82 L1120.67 691.82 L1121.23 691.82 L1121.79 691.82 L1122.35 691.82 L1122.91 691.82 L1123.47 691.82 L1124.03 691.82 L1124.59 691.82 L1125.14 691.82 L1125.7 691.82 L1126.26 691.82 L1126.82 691.82 L1127.38 691.82 L1127.94 691.82 L1128.5 691.82 L1129.06 691.82 L1129.62 691.82 L1130.18 691.82 L1130.74 691.82 L1131.3 691.82 L1131.86 691.82 L1132.41 691.82 L1132.97 691.82 L1133.53 691.82 L1134.09 691.82 L1134.65 691.82 L1135.21 691.82 L1135.77 691.82 L1136.33 691.82 L1136.89 691.82 L1137.45 691.82 L1138.01 691.82 L1138.57 691.82 L1139.13 691.82 L1139.68 691.82 L1140.24 691.82 L1140.8 691.82 L1141.36 691.82 L1141.92 691.82 L1142.48 691.82 L1143.04 691.82 L1143.6 691.82 L1144.16 691.82 L1144.72 691.82 L1145.28 691.82 L1145.84 691.82 L1146.4 691.82 L1146.96 691.82 L1147.51 691.82 L1148.07 691.82 L1148.63 691.82 L1149.19 691.82 L1149.75 691.82 L1150.31 691.82 L1150.87 691.82 L1151.43 691.82 L1151.99 691.82 L1152.55 691.82 L1153.11 691.82 L1153.67 691.82 L1154.23 691.82 L1154.78 691.82 L1155.34 691.82 L1155.9 691.82 L1156.46 691.82 L1157.02 691.82 L1157.58 691.82 L1158.14 691.82 L1158.7 691.82 L1159.26 691.82 L1159.82 691.82 L1160.38 691.82 L1160.94 691.82 L1161.5 691.82 L1162.05 691.82 L1162.61 691.82 L1163.17 691.82 L1163.73 691.82 L1164.29 691.82 L1164.85 691.82 L1165.41 691.82 L1165.97 691.82 L1166.53 691.82 L1167.09 691.82 L1167.65 691.82 L1168.21 691.82 L1168.77 691.82 L1169.33 691.82 L1169.88 691.82 L1170.44 691.82 L1171 691.82 L1171.56 691.82 L1172.12 691.82 L1172.68 691.82 L1173.24 691.82 L1173.8 691.82 L1174.36 691.82 L1174.92 691.82 L1175.48 691.82 L1176.04 691.82 L1176.6 691.82 L1177.15 691.82 L1177.71 691.82 L1178.27 691.82 L1178.83 691.82 L1179.39 691.82 L1179.95 691.82 L1180.51 691.82 L1181.07 691.82 L1181.63 691.82 L1182.19 691.82 L1182.75 691.82 L1183.31 691.82 L1183.87 691.82 L1184.43 691.82 L1184.98 691.82 L1185.54 691.82 L1186.1 691.82 L1186.66 691.82 L1187.22 691.82 L1187.78 691.82 L1188.34 691.82 L1188.9 691.82 L1189.46 691.82 L1190.02 691.82 L1190.58 691.82 L1191.14 691.82 L1191.7 691.82 L1192.25 691.82 L1192.81 691.82 L1193.37 691.82 L1193.93 691.82 L1194.49 691.82 L1195.05 691.82 L1195.61 691.82 L1196.17 691.82 L1196.73 691.82 L1197.29 691.82 L1197.85 691.82 L1198.41 691.82 L1198.97 691.82 L1199.52 691.82 L1200.08 691.82 L1200.64 691.82 L1201.2 691.82 L1201.76 691.82 L1202.32 691.82 L1202.88 691.82 L1203.44 691.82 L1204 691.82 L1204.56 691.82 L1205.12 691.82 L1205.68 691.82 L1206.24 691.82 L1206.8 691.82 L1207.35 691.82 L1207.91 691.82 L1208.47 691.82 L1209.03 691.82 L1209.59 691.82 L1210.15 691.82 L1210.71 691.82 L1211.27 691.82 L1211.83 691.82 L1212.39 691.82 L1212.95 691.82 L1213.51 691.82 L1214.07 691.82 L1214.62 691.82 L1215.18 691.82 L1215.74 691.82 L1216.3 691.82 L1216.86 691.82 L1217.42 691.82 L1217.98 691.82 L1218.54 691.82 L1219.1 691.82 L1219.66 691.82 L1220.22 691.82 L1220.78 691.82 L1221.34 691.82 L1221.89 691.82 L1222.45 691.82 L1223.01 691.82 L1223.57 691.82 L1224.13 691.82 L1224.69 691.82 L1225.25 691.82 L1225.81 691.82 L1226.37 691.82 L1226.93 691.82 L1227.49 691.82 L1228.05 691.82 L1228.61 691.82 L1229.17 691.82 L1229.72 691.82 L1230.28 691.82 L1230.84 691.82 L1231.4 691.82 L1231.96 691.82 L1232.52 691.82 L1233.08 691.82 L1233.64 691.82 L1234.2 691.82 L1234.76 691.82 L1235.32 691.82 L1235.88 691.82 L1236.44 691.82 L1236.99 691.82 L1237.55 691.82 L1238.11 691.82 L1238.67 691.82 L1239.23 691.82 L1239.79 691.82 L1240.35 691.82 L1240.91 691.82 L1241.47 691.82 L1242.03 691.82 L1242.59 691.82 L1243.15 691.82 L1243.71 691.82 L1244.26 691.82 L1244.82 691.82 L1245.38 691.82 L1245.94 691.82 L1246.5 691.82 L1247.06 691.82 L1247.62 691.82 L1248.18 691.82 L1248.74 691.82 L1249.3 691.82 L1249.86 691.82 L1250.42 691.82 L1250.98 691.82 L1251.54 691.82 L1252.09 691.82 L1252.65 691.82 L1253.21 691.82 L1253.77 691.82 L1254.33 691.82 L1254.89 691.82 L1255.45 691.82 L1256.01 691.82 L1256.57 691.82 L1257.13 691.82 L1257.69 691.82 L1258.25 691.82 L1258.81 691.82 L1259.36 691.82 L1259.92 691.82 L1260.48 691.82 L1261.04 691.82 L1261.6 691.82 L1262.16 691.82 L1262.72 691.82 L1263.28 691.82 L1263.84 691.82 L1264.4 691.82 L1264.96 691.82 L1265.52 691.82 L1266.08 691.82 L1266.63 691.82 L1267.19 691.82 L1267.75 691.82 L1268.31 691.82 L1268.87 691.82 L1269.43 691.82 L1269.99 691.82 L1270.55 691.82 L1271.11 691.82 L1271.67 691.82 L1272.23 691.82 L1272.79 691.82 L1273.35 691.82 L1273.91 691.82 L1274.46 691.82 L1275.02 691.82 L1275.58 691.82 L1276.14 691.82 L1276.7 691.82 L1277.26 691.82 L1277.82 691.82 L1278.38 691.82 L1278.94 691.82 L1279.5 691.82 L1280.06 691.82 L1280.62 691.82 L1281.18 691.82 L1281.73 691.82 L1282.29 691.82 L1282.85 691.82 L1283.41 691.82 L1283.97 691.82 L1284.53 691.82 L1285.09 691.82 L1285.65 691.82 L1286.21 691.82 L1286.77 691.82 L1287.33 691.82 L1287.89 691.82 L1288.45 691.82 L1289 691.82 L1289.56 691.82 L1290.12 691.82 L1290.68 691.82 L1291.24 691.82 L1291.8 691.82 L1292.36 691.82 L1292.92 691.82 L1293.48 691.82 L1294.04 691.82 L1294.6 691.82 L1295.16 691.82 L1295.72 691.82 L1296.28 691.82 L1296.83 691.82 L1297.39 691.82 L1297.95 691.82 L1298.51 691.82 L1299.07 691.82 L1299.63 691.82 L1300.19 691.82 L1300.75 691.82 L1301.31 691.82 L1301.87 691.82 L1302.43 691.82 L1302.99 691.82 L1303.55 691.82 L1304.1 691.82 L1304.66 691.82 L1305.22 691.82 L1305.78 691.82 L1306.34 691.82 L1306.9 691.82 L1307.46 691.82 L1308.02 691.82 L1308.58 691.82 L1309.14 691.82 L1309.7 691.82 L1310.26 691.82 L1310.82 691.82 L1311.38 691.82 L1311.93 691.82 L1312.49 691.82 L1313.05 691.82 L1313.61 691.82 L1314.17 691.82 L1314.73 691.82 L1315.29 691.82 L1315.85 691.82 L1316.41 691.82 L1316.97 691.82 L1317.53 691.82 L1318.09 691.82 L1318.65 691.82 L1319.2 691.82 L1319.76 691.82 L1320.32 691.82 L1320.88 691.82 L1321.44 691.82 L1322 691.82 L1322.56 691.82 L1323.12 691.82 L1323.68 691.82 L1324.24 691.82 L1324.8 691.82 L1325.36 691.82 L1325.92 691.82 L1326.47 691.82 L1327.03 691.82 L1327.59 691.82 L1328.15 691.82 L1328.71 691.82 L1329.27 691.82 L1329.83 691.82 L1330.39 691.82 L1330.95 691.82 L1331.51 691.82 L1332.07 691.82 L1332.63 691.82 L1333.19 691.82 L1333.75 691.82 L1334.3 691.82 L1334.86 691.82 L1335.42 691.82 L1335.98 691.82 L1336.54 691.82 L1337.1 691.82 L1337.66 691.82 L1338.22 691.82 L1338.78 691.82 L1339.34 691.82 L1339.9 691.82 L1340.46 691.82 L1341.02 691.82 L1341.57 691.82 L1342.13 691.82 L1342.69 691.82 L1343.25 691.82 L1343.81 691.82 L1344.37 691.82 L1344.93 691.82 L1345.49 691.82 L1346.05 691.82 L1346.61 691.82 L1347.17 691.82 L1347.73 691.82 L1348.29 691.82 L1348.84 691.82 L1349.4 691.82 L1349.96 691.82 L1350.52 691.82 L1351.08 691.82 L1351.64 691.82 L1352.2 691.82 L1352.76 691.82 L1353.32 691.82 L1353.88 691.82 L1354.44 691.82 L1355 691.82 L1355.56 691.82 L1356.12 691.82 L1356.67 691.82 L1357.23 691.82 L1357.79 691.82 L1358.35 691.82 L1358.91 691.82 L1359.47 691.82 L1360.03 691.82 L1360.59 691.82 L1361.15 691.82 L1361.71 691.82 L1362.27 691.82 L1362.83 691.82 L1363.39 691.82 L1363.94 691.82 L1364.5 691.82 L1365.06 691.82 L1365.62 691.82 L1366.18 691.82 L1366.74 691.82 L1367.3 691.82 L1367.86 691.82 L1368.42 691.82 L1368.98 691.82 L1369.54 691.82 L1370.1 691.82 L1370.66 691.82 L1371.21 691.82 L1371.77 691.82 L1372.33 691.82 L1372.89 691.82 L1373.45 691.82 L1374.01 691.82 L1374.57 691.82 L1375.13 691.82 L1375.69 691.82 L1376.25 691.82 L1376.81 691.82 L1377.37 691.82 L1377.93 691.82 L1378.49 691.82 L1379.04 691.82 L1379.6 691.82 L1380.16 691.82 L1380.72 691.82 L1381.28 691.82 L1381.84 691.82 L1382.4 691.82 L1382.96 691.82 L1383.52 691.82 L1384.08 691.82 L1384.64 691.82 L1385.2 691.82 L1385.76 691.82 L1386.31 691.82 L1386.87 691.82 L1387.43 691.82 L1387.99 691.82 L1388.55 691.82 L1389.11 691.82 L1389.67 691.82 L1390.23 691.82 L1390.79 691.82 L1391.35 691.82 L1391.91 691.82 L1392.47 691.82 L1393.03 691.82 L1393.58 691.82 L1394.14 691.82 L1394.7 691.82 L1395.26 691.82 L1395.82 691.82 L1396.38 691.82 L1396.94 691.82 L1397.5 691.82 L1398.06 691.82 L1398.62 691.82 L1399.18 691.82 L1399.74 691.82 L1400.3 691.82 L1400.86 691.82 L1401.41 691.82 L1401.97 691.82 L1402.53 691.82 L1403.09 691.82 L1403.65 691.82 L1404.21 691.82 L1404.77 691.82 L1405.33 691.82 L1405.89 691.82 L1406.45 691.82 L1407.01 691.82 L1407.57 691.82 L1408.13 691.82 L1408.68 691.82 L1409.24 691.82 L1409.8 691.82 L1410.36 691.82 L1410.92 691.82 L1411.48 691.82 L1412.04 691.82 L1412.6 691.82 L1413.16 691.82 L1413.72 691.82 L1414.28 691.82 L1414.84 691.82 L1415.4 691.82 L1415.95 691.82 L1416.51 691.82 L1417.07 691.82 L1417.63 691.82 L1418.19 691.82 L1418.75 691.82 L1419.31 691.82 L1419.87 691.82 L1420.43 691.82 L1420.99 691.82 L1421.55 691.82 L1422.11 691.82 L1422.67 691.82 L1423.23 691.82 L1423.78 691.82 L1424.34 691.82 L1424.9 691.82 L1425.46 691.82 L1426.02 691.82 L1426.58 691.82 L1427.14 691.82 L1427.7 691.82 L1428.26 691.82 L1428.82 691.82 L1429.38 691.82 L1429.94 691.82 L1430.5 691.82 L1431.05 691.82 L1431.61 691.82 L1432.17 691.82 L1432.73 691.82 L1433.29 691.82 L1433.85 691.82 L1434.41 691.82 L1434.97 691.82 L1435.53 691.82 L1436.09 691.82 L1436.65 691.82 L1437.21 691.82 L1437.77 691.82 L1438.33 691.82 L1438.88 691.82 L1439.44 691.82 L1440 691.82 L1440.56 691.82 L1441.12 691.82 L1441.68 691.82 L1442.24 691.82 L1442.8 691.82 L1443.36 691.82 L1443.92 691.82 L1444.48 691.82 L1445.04 691.82 L1445.6 691.82 L1446.15 691.82 L1446.71 691.82 L1447.27 691.82 L1447.83 691.82 L1448.39 691.82 L1448.95 691.82 L1449.51 691.82 L1450.07 691.82 L1450.63 691.82 L1451.19 691.82 L1451.75 691.82 L1452.31 691.82 L1452.87 691.82 L1453.42 691.82 L1453.98 691.82 L1454.54 691.82 L1455.1 691.82 L1455.66 691.82 L1456.22 691.82 L1456.78 691.82 L1457.34 691.82 L1457.9 691.82 L1458.46 691.82 L1459.02 691.82 L1459.58 691.82 L1460.14 691.82 L1460.7 691.82 L1461.25 691.82 L1461.81 691.82 L1462.37 691.82 L1462.93 691.82 L1463.49 691.82 L1464.05 691.82 L1464.61 691.82 L1465.17 691.82 L1465.73 691.82 L1466.29 691.82 L1466.85 691.82 L1467.41 691.82 L1467.97 691.82 L1468.52 691.82 L1469.08 691.82 L1469.64 691.82 L1470.2 691.82 L1470.76 691.82 L1471.32 691.82 L1471.88 691.82 L1472.44 691.82 L1473 691.82 L1473.56 691.82 L1474.12 691.82 L1474.68 691.82 L1475.24 691.82 L1475.79 691.82 L1476.35 691.82 L1476.91 691.82 L1477.47 691.82 L1478.03 691.82 L1478.59 691.82 L1479.15 691.82 L1479.71 691.82 L1480.27 691.82 L1480.83 691.82 L1481.39 691.82 L1481.95 691.82 L1482.51 691.82 L1483.07 691.82 L1483.62 691.82 L1484.18 691.82 L1484.74 691.82 L1485.3 691.82 L1485.86 691.82 L1486.42 691.82 L1486.98 691.82 L1487.54 691.82 L1488.1 691.82 L1488.66 691.82 L1489.22 691.82 L1489.78 691.82 L1490.34 691.82 L1490.89 691.82 L1491.45 691.82 L1492.01 691.82 L1492.57 691.82 L1493.13 691.82 L1493.69 691.82 L1494.25 691.82 L1494.81 691.82 L1495.37 691.82 L1495.93 691.82 L1496.49 691.82 L1497.05 691.82 L1497.61 691.82 L1498.16 691.82 L1498.72 691.82 L1499.28 691.82 L1499.84 691.82 L1500.4 691.82 L1500.96 691.82 L1501.52 691.82 L1502.08 691.82 L1502.64 691.82 L1503.2 691.82 L1503.76 691.82 L1504.32 691.82 L1504.88 691.82 L1505.44 691.82 L1505.99 691.82 L1506.55 691.82 L1507.11 691.82 L1507.67 691.82 L1508.23 691.82 L1508.79 691.82 L1509.35 691.82 L1509.91 691.82 L1510.47 691.82 L1511.03 691.82 L1511.59 691.82 L1512.15 691.82 L1512.71 691.82 L1513.26 691.82 L1513.82 691.82 L1514.38 691.82 L1514.94 691.82 L1515.5 691.82 L1516.06 691.82 L1516.62 691.82 L1517.18 691.82 L1517.74 691.82 L1518.3 691.82 L1518.86 691.82 L1519.42 691.82 L1519.98 691.82 L1520.53 691.82 L1521.09 691.82 L1521.65 691.82 L1522.21 691.82 L1522.77 691.82 L1523.33 691.82 L1523.89 691.82 L1524.45 691.82 L1525.01 691.82 L1525.57 691.82 L1526.13 691.82 L1526.69 691.82 L1527.25 691.82 L1527.81 691.82 L1528.36 691.82 L1528.92 691.82 L1529.48 691.82 L1530.04 691.82 L1530.6 691.82 L1531.16 691.82 L1531.72 691.82 L1532.28 691.82 L1532.84 691.82 L1533.4 691.82 L1533.96 691.82 L1534.52 691.82 L1535.08 691.82 L1535.63 691.82 L1536.19 691.82 L1536.75 691.82 L1537.31 691.82 L1537.87 691.82 L1538.43 691.82 L1538.99 691.82 L1539.55 691.82 L1540.11 691.82 L1540.67 691.82 L1541.23 691.82 L1541.79 691.82 L1542.35 691.82 L1542.9 691.82 L1543.46 691.82 L1544.02 691.82 L1544.58 691.82 L1545.14 691.82 L1545.7 691.82 L1546.26 691.82 L1546.82 691.82 L1547.38 691.82 L1547.94 691.82 L1548.5 691.82 L1549.06 691.82 L1549.62 691.82 L1550.18 691.82 L1550.73 691.82 L1551.29 691.82 L1551.85 691.82 L1552.41 691.82 L1552.97 691.82 L1553.53 691.82 L1554.09 691.82 L1554.65 691.82 L1555.21 691.82 L1555.77 691.82 L1556.33 691.82 L1556.89 691.82 L1557.45 691.82 L1558 691.82 L1558.56 691.82 L1559.12 691.82 L1559.68 691.82 L1560.24 691.82 L1560.8 691.82 L1561.36 691.82 L1561.92 691.82 L1562.48 691.82 L1563.04 691.82 L1563.6 691.82 L1564.16 691.82 L1564.72 691.82 L1565.28 691.82 L1565.83 691.82 L1566.39 691.82 L1566.95 691.82 L1567.51 691.82 L1568.07 691.82 L1568.63 691.82 L1569.19 691.82 L1569.75 691.82 L1570.31 691.82 L1570.87 691.82 L1571.43 691.82 L1571.99 691.82 L1572.55 691.82 L1573.1 691.82 L1573.66 691.82 L1574.22 691.82 L1574.78 691.82 L1575.34 691.82 L1575.9 691.82 L1576.46 691.82 L1577.02 691.82 L1577.58 691.82 L1578.14 691.82 L1578.7 691.82 L1579.26 691.82 L1579.82 691.82 L1580.37 691.82 L1580.93 691.82 L1581.49 691.82 L1582.05 691.82 L1582.61 691.82 L1583.17 691.82 L1583.73 691.82 L1584.29 691.82 L1584.85 691.82 L1585.41 691.82 L1585.97 691.82 L1586.53 691.82 L1587.09 691.82 L1587.65 691.82 L1588.2 691.82 L1588.76 691.82 L1589.32 691.82 L1589.88 691.82 L1590.44 691.82 L1591 691.82 L1591.56 691.82 L1592.12 691.82 L1592.68 691.82 L1593.24 691.82 L1593.8 691.82 L1594.36 691.82 L1594.92 691.82 L1595.47 691.82 L1596.03 691.82 L1596.59 691.82 L1597.15 691.82 L1597.71 691.82 L1598.27 691.82 L1598.83 691.82 L1599.39 691.82 L1599.95 691.82 L1600.51 691.82 L1601.07 691.82 L1601.63 691.82 L1602.19 691.82 L1602.74 691.82 L1603.3 691.82 L1603.86 691.82 L1604.42 691.82 L1604.98 691.82 L1605.54 691.82 L1606.1 691.82 L1606.66 691.82 L1607.22 691.82 L1607.78 691.82 L1608.34 691.82 L1608.9 691.82 L1609.46 691.82 L1610.02 691.82 L1610.57 691.82 L1611.13 691.82 L1611.69 691.82 L1612.25 691.82 L1612.81 691.82 L1613.37 691.82 L1613.93 691.82 L1614.49 691.82 L1615.05 691.82 L1615.61 691.82 L1616.17 691.82 L1616.73 691.82 L1617.29 691.82 L1617.84 691.82 L1618.4 691.82 L1618.96 691.82 L1619.52 691.82 L1620.08 691.82 L1620.64 691.82 L1621.2 691.82 L1621.76 691.82 L1622.32 691.82 L1622.88 691.82 L1623.44 691.82 L1624 691.82 L1624.56 691.82 L1625.11 691.82 L1625.67 691.82 L1626.23 691.82 L1626.79 691.82 L1627.35 691.82 L1627.91 691.82 L1628.47 691.82 L1629.03 691.82 L1629.59 691.82 L1630.15 691.82 L1630.71 691.82 L1631.27 691.82 L1631.83 691.82 L1632.39 691.82 L1632.94 691.82 L1633.5 691.82 L1634.06 691.82 L1634.62 691.82 L1635.18 691.82 L1635.74 691.82 L1636.3 691.82 L1636.86 691.82 L1637.42 691.82 L1637.98 691.82 L1638.54 691.82 L1639.1 691.82 L1639.66 691.82 L1640.21 691.82 L1640.77 691.82 L1641.33 691.82 L1641.89 691.82 L1642.45 691.82 L1643.01 691.82 L1643.57 691.82 L1644.13 691.82 L1644.69 691.82 L1645.25 691.82 L1645.81 691.82 L1646.37 691.82 L1646.93 691.82 L1647.48 691.82 L1648.04 691.82 L1648.6 691.82 L1649.16 691.82 L1649.72 691.82 L1650.28 691.82 L1650.84 691.82 L1651.4 691.82 L1651.96 691.82 L1652.52 691.82 L1653.08 691.82 L1653.64 691.82 L1654.2 691.82 L1654.76 691.82 L1655.31 691.82 L1655.87 691.82 L1656.43 691.82 L1656.99 691.82 L1657.55 691.82 L1658.11 691.82 L1658.67 691.82 L1659.23 691.82 L1659.79 691.82 L1660.35 691.82 L1660.91 691.82 L1661.47 691.82 L1662.03 691.82 L1662.58 691.82 L1663.14 691.82 L1663.7 691.82 L1664.26 691.82 L1664.82 691.82 L1665.38 691.82 L1665.94 691.82 L1666.5 691.82 L1667.06 691.82 L1667.62 691.82 L1668.18 691.82 L1668.74 691.82 L1669.3 691.82 L1669.85 691.82 L1670.41 691.82 L1670.97 691.82 L1671.53 691.82 L1672.09 691.82 L1672.65 691.82 L1673.21 691.82 L1673.77 691.82 L1674.33 691.82 L1674.89 691.82 L1675.45 691.82 L1676.01 691.82 L1676.57 691.82 L1677.13 691.82 L1677.68 691.82 L1678.24 691.82 L1678.8 691.82 L1679.36 691.82 L1679.92 691.82 L1680.48 691.82 L1681.04 691.82 L1681.6 691.82 L1682.16 691.82 L1682.72 691.82 L1683.28 691.82 L1683.84 691.82 L1684.4 691.82 L1684.95 691.82 L1685.51 691.82 L1686.07 691.82 L1686.63 691.82 L1687.19 691.82 L1687.75 691.82 L1688.31 691.82 L1688.87 691.82 L1689.43 691.82 L1689.99 691.82 L1690.55 691.82 L1691.11 691.82 L1691.67 691.82 L1692.23 691.82 L1692.78 691.82 L1693.34 691.82 L1693.9 691.82 L1694.46 691.82 L1695.02 691.82 L1695.58 691.82 L1696.14 691.82 L1696.7 691.82 L1697.26 691.82 L1697.82 691.82 L1698.38 691.82 L1698.94 691.82 L1699.5 691.82 L1700.05 691.82 L1700.61 691.82 L1701.17 691.82 L1701.73 691.82 L1702.29 691.82 L1702.85 691.82 L1703.41 691.82 L1703.97 691.82 L1704.53 691.82 L1705.09 691.82 L1705.65 691.82 L1706.21 691.82 L1706.77 691.82 L1707.32 691.82 L1707.88 691.82 L1708.44 691.82 L1709 691.82 L1709.56 691.82 L1710.12 691.82 L1710.68 691.82 L1711.24 691.82 L1711.8 691.82 L1712.36 691.82 L1712.92 691.82 L1713.48 691.82 L1714.04 691.82 L1714.6 691.82 L1715.15 691.82 L1715.71 691.82 L1716.27 691.82 L1716.83 691.82 L1717.39 691.82 L1717.95 691.82 L1718.51 691.82 L1719.07 691.82 L1719.63 691.82 L1720.19 691.82 L1720.75 691.82 L1721.31 691.82 L1721.87 691.82 L1722.42 691.82 L1722.98 691.82 L1723.54 691.82 L1724.1 691.82 L1724.66 691.82 L1725.22 691.82 L1725.78 691.82 L1726.34 691.82 L1726.9 691.82 L1727.46 691.82 L1728.02 691.82 L1728.58 691.82 L1729.14 691.82 L1729.69 691.82 L1730.25 691.82 L1730.81 691.82 L1731.37 691.82 L1731.93 691.82 L1732.49 691.82 L1733.05 691.82 L1733.61 691.82 L1734.17 691.82 L1734.73 691.82 L1735.29 691.82 L1735.85 691.82 L1736.41 691.82 L1736.97 691.82 L1737.52 691.82 L1738.08 691.82 L1738.64 691.82 L1739.2 691.82 L1739.76 691.82 L1740.32 691.82 L1740.88 691.82 L1741.44 691.82 L1742 691.82 L1742.56 691.82 L1743.12 691.82 L1743.68 691.82 L1744.24 691.82 L1744.79 691.82 L1745.35 691.82 L1745.91 691.82 L1746.47 691.82 L1747.03 691.82 L1747.59 691.82 L1748.15 691.82 L1748.71 691.82 L1749.27 691.82 L1749.83 691.82 L1750.39 691.82 L1750.95 691.82 L1751.51 691.82 L1752.06 691.82 L1752.62 691.82 L1753.18 691.82 L1753.74 691.82 L1754.3 691.82 L1754.86 691.82 L1755.42 691.82 L1755.98 691.82 L1756.54 691.82 L1757.1 691.82 L1757.66 691.82 L1758.22 691.82 L1758.78 691.82 L1759.34 691.82 L1759.89 691.82 L1760.45 691.82 L1761.01 691.82 L1761.57 691.82 L1762.13 691.82 L1762.69 691.82 L1763.25 691.82 L1763.81 691.82 L1764.37 691.82 L1764.93 691.82 L1765.49 691.82 L1766.05 691.82 L1766.61 691.82 L1767.16 691.82 L1767.72 691.82 L1768.28 691.82 L1768.84 691.82 L1769.4 691.82 L1769.96 691.82 L1770.52 691.82 L1771.08 691.82 L1771.64 691.82 L1772.2 691.82 L1772.76 691.82 L1773.32 691.82 L1773.88 691.82 L1774.43 691.82 L1774.99 691.82 L1775.55 691.82 L1776.11 691.82 L1776.67 691.82 L1777.23 691.82 L1777.79 691.82 L1778.35 691.82 L1778.91 691.82 L1779.47 691.82 L1780.03 691.82 L1780.59 691.82 L1781.15 691.82 L1781.71 691.82 L1782.26 691.82 L1782.82 691.82 L1783.38 691.82 L1783.94 691.82 L1784.5 691.82 L1785.06 691.82 L1785.62 691.82 L1786.18 691.82 L1786.74 691.82 L1787.3 691.82 L1787.86 691.82 L1788.42 691.82 L1788.98 691.82 L1789.53 691.82 L1790.09 691.82 L1790.65 691.82 L1791.21 691.82 L1791.77 691.82 L1792.33 691.82 L1792.89 691.82 L1793.45 691.82 L1794.01 691.82 L1794.57 691.82 L1795.13 691.82 L1795.69 691.82 L1796.25 691.82 L1796.8 691.82 L1797.36 691.82 L1797.92 691.82 L1798.48 691.82 L1799.04 691.82 L1799.6 691.82 L1800.16 691.82 L1800.72 691.82 L1801.28 691.82 L1801.84 691.82 L1802.4 691.82 L1802.96 691.82 L1803.52 691.82 L1804.08 691.82 L1804.63 691.82 L1805.19 691.82 L1805.75 691.82 L1806.31 691.82 L1806.87 691.82 L1807.43 691.82 L1807.99 691.82 L1808.55 691.82 L1809.11 691.82 L1809.67 691.82 L1810.23 691.82 L1810.79 691.82 L1811.35 691.82 L1811.9 691.82 L1812.46 691.82 L1813.02 691.82 L1813.58 691.82 L1814.14 691.82 L1814.7 691.82 L1815.26 691.82 L1815.82 691.82 L1816.38 691.82 L1816.94 691.82 L1817.5 691.82 L1818.06 691.82 L1818.62 691.82 L1819.18 691.82 L1819.73 691.82 L1820.29 691.82 L1820.85 691.82 L1821.41 691.82 L1821.97 691.82 L1822.53 691.82 L1823.09 691.82 L1823.65 691.82 L1824.21 691.82 L1824.77 691.82 L1825.33 691.82 L1825.89 691.82 L1826.45 691.82 L1827 691.82 L1827.56 691.82 L1828.12 691.82 L1828.68 691.82 L1829.24 691.82 L1829.8 691.82 L1830.36 691.82 L1830.92 691.82 L1831.48 691.82 L1832.04 691.82 L1832.6 691.82 L1833.16 691.82 L1833.72 691.82 L1834.27 691.82 L1834.83 691.82 L1835.39 691.82 L1835.95 691.82 L1836.51 691.82 L1837.07 691.82 L1837.63 691.82 L1838.19 691.82 L1838.19 682.375 L1837.63 682.375 L1837.07 682.375 L1836.51 682.375 L1835.95 682.375 L1835.39 682.375 L1834.83 682.375 L1834.27 682.375 L1833.72 682.375 L1833.16 682.375 L1832.6 682.375 L1832.04 682.375 L1831.48 682.375 L1830.92 682.375 L1830.36 682.375 L1829.8 682.375 L1829.24 682.375 L1828.68 682.375 L1828.12 682.375 L1827.56 682.375 L1827 682.375 L1826.45 682.375 L1825.89 682.375 L1825.33 682.375 L1824.77 682.375 L1824.21 682.375 L1823.65 682.375 L1823.09 682.375 L1822.53 682.375 L1821.97 682.375 L1821.41 682.375 L1820.85 682.375 L1820.29 682.375 L1819.73 682.375 L1819.18 682.375 L1818.62 682.375 L1818.06 682.375 L1817.5 682.375 L1816.94 682.375 L1816.38 682.375 L1815.82 682.375 L1815.26 682.375 L1814.7 682.375 L1814.14 682.375 L1813.58 682.375 L1813.02 682.375 L1812.46 682.375 L1811.9 682.375 L1811.35 682.375 L1810.79 682.375 L1810.23 682.375 L1809.67 682.375 L1809.11 682.375 L1808.55 682.375 L1807.99 682.375 L1807.43 682.375 L1806.87 682.375 L1806.31 682.375 L1805.75 682.375 L1805.19 682.375 L1804.63 682.375 L1804.08 682.375 L1803.52 682.375 L1802.96 682.375 L1802.4 682.375 L1801.84 682.375 L1801.28 682.375 L1800.72 682.375 L1800.16 682.375 L1799.6 682.375 L1799.04 682.375 L1798.48 682.375 L1797.92 682.375 L1797.36 682.375 L1796.8 682.375 L1796.25 682.375 L1795.69 682.375 L1795.13 682.375 L1794.57 682.375 L1794.01 682.375 L1793.45 682.375 L1792.89 682.375 L1792.33 682.375 L1791.77 682.375 L1791.21 682.375 L1790.65 682.375 L1790.09 682.375 L1789.53 682.375 L1788.98 682.375 L1788.42 682.375 L1787.86 682.375 L1787.3 682.375 L1786.74 682.375 L1786.18 682.375 L1785.62 682.375 L1785.06 682.375 L1784.5 682.375 L1783.94 682.375 L1783.38 682.375 L1782.82 682.375 L1782.26 682.375 L1781.71 682.375 L1781.15 682.375 L1780.59 682.375 L1780.03 682.375 L1779.47 682.375 L1778.91 682.375 L1778.35 682.375 L1777.79 682.375 L1777.23 682.375 L1776.67 682.375 L1776.11 682.375 L1775.55 682.375 L1774.99 682.375 L1774.43 682.375 L1773.88 682.375 L1773.32 682.375 L1772.76 682.375 L1772.2 682.375 L1771.64 682.375 L1771.08 682.375 L1770.52 682.375 L1769.96 682.375 L1769.4 682.375 L1768.84 682.375 L1768.28 682.375 L1767.72 682.375 L1767.16 682.375 L1766.61 682.375 L1766.05 682.375 L1765.49 682.375 L1764.93 682.375 L1764.37 682.375 L1763.81 682.375 L1763.25 682.375 L1762.69 682.375 L1762.13 682.375 L1761.57 682.375 L1761.01 682.375 L1760.45 682.375 L1759.89 682.375 L1759.34 682.375 L1758.78 682.375 L1758.22 682.375 L1757.66 682.375 L1757.1 682.375 L1756.54 682.375 L1755.98 682.375 L1755.42 682.375 L1754.86 682.375 L1754.3 682.375 L1753.74 682.375 L1753.18 682.375 L1752.62 682.375 L1752.06 682.375 L1751.51 682.375 L1750.95 682.375 L1750.39 682.375 L1749.83 682.375 L1749.27 682.375 L1748.71 682.375 L1748.15 682.375 L1747.59 682.375 L1747.03 682.375 L1746.47 682.375 L1745.91 682.375 L1745.35 682.375 L1744.79 682.375 L1744.24 682.375 L1743.68 682.375 L1743.12 682.375 L1742.56 682.375 L1742 682.375 L1741.44 682.375 L1740.88 682.375 L1740.32 682.375 L1739.76 682.375 L1739.2 682.375 L1738.64 682.375 L1738.08 682.375 L1737.52 682.375 L1736.97 682.375 L1736.41 682.375 L1735.85 682.375 L1735.29 682.375 L1734.73 682.375 L1734.17 682.375 L1733.61 682.375 L1733.05 682.375 L1732.49 682.375 L1731.93 682.375 L1731.37 682.375 L1730.81 682.375 L1730.25 682.375 L1729.69 682.375 L1729.14 682.375 L1728.58 682.375 L1728.02 682.375 L1727.46 682.375 L1726.9 682.375 L1726.34 682.375 L1725.78 682.375 L1725.22 682.375 L1724.66 682.375 L1724.1 682.375 L1723.54 682.375 L1722.98 682.375 L1722.42 682.375 L1721.87 682.375 L1721.31 682.375 L1720.75 682.375 L1720.19 682.375 L1719.63 682.375 L1719.07 682.375 L1718.51 682.375 L1717.95 682.375 L1717.39 682.375 L1716.83 682.375 L1716.27 682.375 L1715.71 682.375 L1715.15 682.375 L1714.6 682.375 L1714.04 682.375 L1713.48 682.375 L1712.92 682.375 L1712.36 682.375 L1711.8 682.375 L1711.24 682.375 L1710.68 682.375 L1710.12 682.375 L1709.56 682.375 L1709 682.375 L1708.44 682.375 L1707.88 682.375 L1707.32 682.375 L1706.77 682.375 L1706.21 682.375 L1705.65 682.375 L1705.09 682.375 L1704.53 682.375 L1703.97 682.375 L1703.41 682.375 L1702.85 682.375 L1702.29 682.375 L1701.73 682.375 L1701.17 682.375 L1700.61 682.375 L1700.05 682.375 L1699.5 682.375 L1698.94 682.375 L1698.38 682.375 L1697.82 682.375 L1697.26 682.375 L1696.7 682.375 L1696.14 682.375 L1695.58 682.375 L1695.02 682.375 L1694.46 682.375 L1693.9 682.375 L1693.34 682.375 L1692.78 682.375 L1692.23 682.375 L1691.67 682.375 L1691.11 682.375 L1690.55 682.375 L1689.99 682.375 L1689.43 682.375 L1688.87 682.375 L1688.31 682.375 L1687.75 682.375 L1687.19 682.375 L1686.63 682.375 L1686.07 682.375 L1685.51 682.375 L1684.95 682.375 L1684.4 682.375 L1683.84 682.375 L1683.28 682.375 L1682.72 682.375 L1682.16 682.375 L1681.6 682.375 L1681.04 682.375 L1680.48 682.375 L1679.92 682.375 L1679.36 682.375 L1678.8 682.375 L1678.24 682.375 L1677.68 682.375 L1677.13 682.375 L1676.57 682.375 L1676.01 682.375 L1675.45 682.375 L1674.89 682.375 L1674.33 682.375 L1673.77 682.375 L1673.21 682.375 L1672.65 682.375 L1672.09 682.375 L1671.53 682.375 L1670.97 682.375 L1670.41 682.375 L1669.85 682.375 L1669.3 682.375 L1668.74 682.375 L1668.18 682.375 L1667.62 682.375 L1667.06 682.375 L1666.5 682.375 L1665.94 682.375 L1665.38 682.375 L1664.82 682.375 L1664.26 682.375 L1663.7 682.375 L1663.14 682.375 L1662.58 682.375 L1662.03 682.375 L1661.47 682.375 L1660.91 682.375 L1660.35 682.375 L1659.79 682.375 L1659.23 682.375 L1658.67 682.375 L1658.11 682.375 L1657.55 682.375 L1656.99 682.375 L1656.43 682.375 L1655.87 682.375 L1655.31 682.375 L1654.76 682.375 L1654.2 682.375 L1653.64 682.375 L1653.08 682.375 L1652.52 682.375 L1651.96 682.375 L1651.4 682.375 L1650.84 682.375 L1650.28 682.375 L1649.72 682.375 L1649.16 682.375 L1648.6 682.375 L1648.04 682.375 L1647.48 682.375 L1646.93 682.375 L1646.37 682.375 L1645.81 682.375 L1645.25 682.375 L1644.69 682.375 L1644.13 682.375 L1643.57 682.375 L1643.01 682.375 L1642.45 682.375 L1641.89 682.375 L1641.33 682.375 L1640.77 682.375 L1640.21 682.375 L1639.66 682.375 L1639.1 682.375 L1638.54 682.375 L1637.98 682.375 L1637.42 682.375 L1636.86 682.375 L1636.3 682.375 L1635.74 682.375 L1635.18 682.375 L1634.62 682.375 L1634.06 682.375 L1633.5 682.375 L1632.94 682.375 L1632.39 682.375 L1631.83 682.375 L1631.27 682.375 L1630.71 682.375 L1630.15 682.375 L1629.59 682.375 L1629.03 682.375 L1628.47 682.375 L1627.91 682.375 L1627.35 682.375 L1626.79 682.375 L1626.23 682.375 L1625.67 682.375 L1625.11 682.375 L1624.56 682.375 L1624 682.375 L1623.44 682.375 L1622.88 682.375 L1622.32 682.375 L1621.76 682.375 L1621.2 682.375 L1620.64 682.375 L1620.08 682.375 L1619.52 682.375 L1618.96 682.375 L1618.4 682.375 L1617.84 682.375 L1617.29 682.375 L1616.73 682.375 L1616.17 682.375 L1615.61 682.375 L1615.05 682.375 L1614.49 682.375 L1613.93 682.375 L1613.37 682.375 L1612.81 682.375 L1612.25 682.375 L1611.69 682.375 L1611.13 682.375 L1610.57 682.375 L1610.02 682.375 L1609.46 682.375 L1608.9 682.375 L1608.34 682.375 L1607.78 682.375 L1607.22 682.375 L1606.66 682.375 L1606.1 682.375 L1605.54 682.375 L1604.98 682.375 L1604.42 682.375 L1603.86 682.375 L1603.3 682.375 L1602.74 682.375 L1602.19 682.375 L1601.63 682.375 L1601.07 682.375 L1600.51 682.375 L1599.95 682.375 L1599.39 682.375 L1598.83 682.375 L1598.27 682.375 L1597.71 682.375 L1597.15 682.375 L1596.59 682.375 L1596.03 682.375 L1595.47 682.375 L1594.92 682.375 L1594.36 682.375 L1593.8 682.375 L1593.24 682.375 L1592.68 682.375 L1592.12 682.375 L1591.56 682.375 L1591 682.375 L1590.44 682.375 L1589.88 682.375 L1589.32 682.375 L1588.76 682.375 L1588.2 682.375 L1587.65 682.375 L1587.09 682.375 L1586.53 682.375 L1585.97 682.375 L1585.41 682.375 L1584.85 682.375 L1584.29 682.375 L1583.73 682.375 L1583.17 682.375 L1582.61 682.375 L1582.05 682.375 L1581.49 682.375 L1580.93 682.375 L1580.37 682.375 L1579.82 682.375 L1579.26 682.375 L1578.7 682.375 L1578.14 682.375 L1577.58 682.375 L1577.02 682.375 L1576.46 682.375 L1575.9 682.375 L1575.34 682.375 L1574.78 682.375 L1574.22 682.375 L1573.66 682.375 L1573.1 682.375 L1572.55 682.375 L1571.99 682.375 L1571.43 682.375 L1570.87 682.375 L1570.31 682.375 L1569.75 682.375 L1569.19 682.375 L1568.63 682.375 L1568.07 682.375 L1567.51 682.375 L1566.95 682.375 L1566.39 682.375 L1565.83 682.375 L1565.28 682.375 L1564.72 682.375 L1564.16 682.375 L1563.6 682.375 L1563.04 682.375 L1562.48 682.375 L1561.92 682.375 L1561.36 682.375 L1560.8 682.375 L1560.24 682.375 L1559.68 682.375 L1559.12 682.375 L1558.56 682.375 L1558 682.375 L1557.45 682.375 L1556.89 682.375 L1556.33 682.375 L1555.77 682.375 L1555.21 682.375 L1554.65 682.375 L1554.09 682.375 L1553.53 682.375 L1552.97 682.375 L1552.41 682.375 L1551.85 682.375 L1551.29 682.375 L1550.73 682.375 L1550.18 682.375 L1549.62 682.375 L1549.06 682.375 L1548.5 682.375 L1547.94 682.375 L1547.38 682.375 L1546.82 682.375 L1546.26 682.375 L1545.7 682.375 L1545.14 682.375 L1544.58 682.375 L1544.02 682.375 L1543.46 682.375 L1542.9 682.375 L1542.35 682.375 L1541.79 682.375 L1541.23 682.375 L1540.67 682.375 L1540.11 682.375 L1539.55 682.375 L1538.99 682.375 L1538.43 682.375 L1537.87 682.375 L1537.31 682.375 L1536.75 682.375 L1536.19 682.375 L1535.63 682.375 L1535.08 682.375 L1534.52 682.375 L1533.96 682.375 L1533.4 682.375 L1532.84 682.375 L1532.28 682.375 L1531.72 682.375 L1531.16 682.375 L1530.6 682.375 L1530.04 682.375 L1529.48 682.375 L1528.92 682.375 L1528.36 682.375 L1527.81 682.375 L1527.25 682.375 L1526.69 682.375 L1526.13 682.375 L1525.57 682.375 L1525.01 682.375 L1524.45 682.375 L1523.89 682.375 L1523.33 682.375 L1522.77 682.375 L1522.21 682.375 L1521.65 682.375 L1521.09 682.375 L1520.53 682.375 L1519.98 682.375 L1519.42 682.375 L1518.86 682.375 L1518.3 682.375 L1517.74 682.375 L1517.18 682.375 L1516.62 682.375 L1516.06 682.375 L1515.5 682.375 L1514.94 682.375 L1514.38 682.375 L1513.82 682.375 L1513.26 682.375 L1512.71 682.375 L1512.15 682.375 L1511.59 682.375 L1511.03 682.375 L1510.47 682.375 L1509.91 682.375 L1509.35 682.375 L1508.79 682.375 L1508.23 682.375 L1507.67 682.375 L1507.11 682.375 L1506.55 682.375 L1505.99 682.375 L1505.44 682.375 L1504.88 682.375 L1504.32 682.375 L1503.76 682.375 L1503.2 682.375 L1502.64 682.375 L1502.08 682.375 L1501.52 682.375 L1500.96 682.375 L1500.4 682.375 L1499.84 682.375 L1499.28 682.375 L1498.72 682.375 L1498.16 682.375 L1497.61 682.375 L1497.05 682.375 L1496.49 682.375 L1495.93 682.375 L1495.37 682.375 L1494.81 682.375 L1494.25 682.375 L1493.69 682.375 L1493.13 682.375 L1492.57 682.375 L1492.01 682.375 L1491.45 682.375 L1490.89 682.375 L1490.34 682.375 L1489.78 682.375 L1489.22 682.375 L1488.66 682.375 L1488.1 682.375 L1487.54 682.375 L1486.98 682.375 L1486.42 682.375 L1485.86 682.375 L1485.3 682.375 L1484.74 682.375 L1484.18 682.375 L1483.62 682.375 L1483.07 682.375 L1482.51 682.375 L1481.95 682.375 L1481.39 682.375 L1480.83 682.375 L1480.27 682.375 L1479.71 682.375 L1479.15 682.375 L1478.59 682.375 L1478.03 682.375 L1477.47 682.375 L1476.91 682.375 L1476.35 682.375 L1475.79 682.375 L1475.24 682.375 L1474.68 682.375 L1474.12 682.375 L1473.56 682.375 L1473 682.375 L1472.44 682.375 L1471.88 682.375 L1471.32 682.375 L1470.76 682.375 L1470.2 682.375 L1469.64 682.375 L1469.08 682.375 L1468.52 682.375 L1467.97 682.375 L1467.41 682.375 L1466.85 682.375 L1466.29 682.375 L1465.73 682.375 L1465.17 682.375 L1464.61 682.375 L1464.05 682.375 L1463.49 682.375 L1462.93 682.375 L1462.37 682.375 L1461.81 682.375 L1461.25 682.375 L1460.7 682.375 L1460.14 682.375 L1459.58 682.375 L1459.02 682.375 L1458.46 682.375 L1457.9 682.375 L1457.34 682.375 L1456.78 682.375 L1456.22 682.375 L1455.66 682.375 L1455.1 682.375 L1454.54 682.375 L1453.98 682.375 L1453.42 682.375 L1452.87 682.375 L1452.31 682.375 L1451.75 682.375 L1451.19 682.375 L1450.63 682.375 L1450.07 682.375 L1449.51 682.375 L1448.95 682.375 L1448.39 682.375 L1447.83 682.375 L1447.27 682.375 L1446.71 682.375 L1446.15 682.375 L1445.6 682.375 L1445.04 682.375 L1444.48 682.375 L1443.92 682.375 L1443.36 682.375 L1442.8 682.375 L1442.24 682.375 L1441.68 682.375 L1441.12 682.375 L1440.56 682.375 L1440 682.375 L1439.44 682.375 L1438.88 682.375 L1438.33 682.375 L1437.77 682.375 L1437.21 682.375 L1436.65 682.375 L1436.09 682.375 L1435.53 682.375 L1434.97 682.375 L1434.41 682.375 L1433.85 682.375 L1433.29 682.375 L1432.73 682.375 L1432.17 682.375 L1431.61 682.375 L1431.05 682.375 L1430.5 682.375 L1429.94 682.375 L1429.38 682.375 L1428.82 682.375 L1428.26 682.375 L1427.7 682.375 L1427.14 682.375 L1426.58 682.375 L1426.02 682.375 L1425.46 682.375 L1424.9 682.375 L1424.34 682.375 L1423.78 682.375 L1423.23 682.375 L1422.67 682.375 L1422.11 682.375 L1421.55 682.375 L1420.99 682.375 L1420.43 682.375 L1419.87 682.375 L1419.31 682.375 L1418.75 682.375 L1418.19 682.375 L1417.63 682.375 L1417.07 682.375 L1416.51 682.375 L1415.95 682.375 L1415.4 682.375 L1414.84 682.375 L1414.28 682.375 L1413.72 682.375 L1413.16 682.375 L1412.6 682.375 L1412.04 682.375 L1411.48 682.375 L1410.92 682.375 L1410.36 682.375 L1409.8 682.375 L1409.24 682.375 L1408.68 682.375 L1408.13 682.375 L1407.57 682.375 L1407.01 682.375 L1406.45 682.375 L1405.89 682.375 L1405.33 682.375 L1404.77 682.375 L1404.21 682.375 L1403.65 682.375 L1403.09 682.375 L1402.53 682.375 L1401.97 682.375 L1401.41 682.375 L1400.86 682.375 L1400.3 682.375 L1399.74 682.375 L1399.18 682.375 L1398.62 682.375 L1398.06 682.375 L1397.5 682.375 L1396.94 682.375 L1396.38 682.375 L1395.82 682.375 L1395.26 682.375 L1394.7 682.375 L1394.14 682.375 L1393.58 682.375 L1393.03 682.375 L1392.47 682.375 L1391.91 682.375 L1391.35 682.375 L1390.79 682.375 L1390.23 682.375 L1389.67 682.375 L1389.11 682.375 L1388.55 682.375 L1387.99 682.375 L1387.43 682.375 L1386.87 682.375 L1386.31 682.375 L1385.76 682.375 L1385.2 682.375 L1384.64 682.375 L1384.08 682.375 L1383.52 682.375 L1382.96 682.375 L1382.4 682.375 L1381.84 682.375 L1381.28 682.375 L1380.72 682.375 L1380.16 682.375 L1379.6 682.375 L1379.04 682.375 L1378.49 682.375 L1377.93 682.375 L1377.37 682.375 L1376.81 682.375 L1376.25 682.375 L1375.69 682.375 L1375.13 682.375 L1374.57 682.375 L1374.01 682.375 L1373.45 682.375 L1372.89 682.375 L1372.33 682.375 L1371.77 682.375 L1371.21 682.375 L1370.66 682.375 L1370.1 682.375 L1369.54 682.375 L1368.98 682.375 L1368.42 682.375 L1367.86 682.375 L1367.3 682.375 L1366.74 682.375 L1366.18 682.375 L1365.62 682.375 L1365.06 682.375 L1364.5 682.375 L1363.94 682.375 L1363.39 682.375 L1362.83 682.375 L1362.27 682.375 L1361.71 682.375 L1361.15 682.375 L1360.59 682.375 L1360.03 682.375 L1359.47 682.375 L1358.91 682.375 L1358.35 682.375 L1357.79 682.375 L1357.23 682.375 L1356.67 682.375 L1356.12 682.375 L1355.56 682.375 L1355 682.375 L1354.44 682.375 L1353.88 682.375 L1353.32 682.375 L1352.76 682.375 L1352.2 682.375 L1351.64 682.375 L1351.08 682.375 L1350.52 682.375 L1349.96 682.375 L1349.4 682.375 L1348.84 682.375 L1348.29 682.375 L1347.73 682.375 L1347.17 682.375 L1346.61 682.375 L1346.05 682.375 L1345.49 682.375 L1344.93 682.375 L1344.37 682.375 L1343.81 682.375 L1343.25 682.375 L1342.69 682.375 L1342.13 682.375 L1341.57 682.375 L1341.02 682.375 L1340.46 682.375 L1339.9 682.375 L1339.34 682.375 L1338.78 682.375 L1338.22 682.375 L1337.66 682.375 L1337.1 682.375 L1336.54 682.375 L1335.98 682.375 L1335.42 682.375 L1334.86 682.375 L1334.3 682.375 L1333.75 682.375 L1333.19 682.375 L1332.63 682.375 L1332.07 682.375 L1331.51 682.375 L1330.95 682.375 L1330.39 682.375 L1329.83 682.375 L1329.27 682.375 L1328.71 682.375 L1328.15 682.375 L1327.59 682.375 L1327.03 682.375 L1326.47 682.375 L1325.92 682.375 L1325.36 682.375 L1324.8 682.375 L1324.24 682.375 L1323.68 682.375 L1323.12 682.375 L1322.56 682.375 L1322 682.375 L1321.44 682.375 L1320.88 682.375 L1320.32 682.375 L1319.76 682.375 L1319.2 682.375 L1318.65 682.375 L1318.09 682.375 L1317.53 682.375 L1316.97 682.375 L1316.41 682.375 L1315.85 682.375 L1315.29 682.375 L1314.73 682.375 L1314.17 682.375 L1313.61 682.375 L1313.05 682.375 L1312.49 682.375 L1311.93 682.375 L1311.38 682.375 L1310.82 682.375 L1310.26 682.375 L1309.7 682.375 L1309.14 682.375 L1308.58 682.375 L1308.02 682.375 L1307.46 682.375 L1306.9 682.375 L1306.34 682.375 L1305.78 682.375 L1305.22 682.375 L1304.66 682.375 L1304.1 682.375 L1303.55 682.375 L1302.99 682.375 L1302.43 682.375 L1301.87 682.375 L1301.31 682.375 L1300.75 682.375 L1300.19 682.375 L1299.63 682.375 L1299.07 682.375 L1298.51 682.375 L1297.95 682.375 L1297.39 682.375 L1296.83 682.375 L1296.28 682.375 L1295.72 682.375 L1295.16 682.375 L1294.6 682.375 L1294.04 682.375 L1293.48 682.375 L1292.92 682.375 L1292.36 682.375 L1291.8 682.375 L1291.24 682.375 L1290.68 682.375 L1290.12 682.375 L1289.56 682.375 L1289 682.375 L1288.45 682.375 L1287.89 682.375 L1287.33 682.375 L1286.77 682.375 L1286.21 682.375 L1285.65 682.375 L1285.09 682.375 L1284.53 682.375 L1283.97 682.375 L1283.41 682.375 L1282.85 682.375 L1282.29 682.375 L1281.73 682.375 L1281.18 682.375 L1280.62 682.375 L1280.06 682.375 L1279.5 682.375 L1278.94 682.375 L1278.38 682.375 L1277.82 682.375 L1277.26 682.375 L1276.7 682.375 L1276.14 682.375 L1275.58 682.375 L1275.02 682.375 L1274.46 682.375 L1273.91 682.375 L1273.35 682.375 L1272.79 682.375 L1272.23 682.375 L1271.67 682.375 L1271.11 682.375 L1270.55 682.375 L1269.99 682.375 L1269.43 682.375 L1268.87 682.375 L1268.31 682.375 L1267.75 682.375 L1267.19 682.375 L1266.63 682.375 L1266.08 682.375 L1265.52 682.375 L1264.96 682.375 L1264.4 682.375 L1263.84 682.375 L1263.28 682.375 L1262.72 682.375 L1262.16 682.375 L1261.6 682.375 L1261.04 682.375 L1260.48 682.375 L1259.92 682.375 L1259.36 682.375 L1258.81 682.375 L1258.25 682.375 L1257.69 682.375 L1257.13 682.375 L1256.57 682.375 L1256.01 682.375 L1255.45 682.375 L1254.89 682.375 L1254.33 682.375 L1253.77 682.375 L1253.21 682.375 L1252.65 682.375 L1252.09 682.375 L1251.54 682.375 L1250.98 682.375 L1250.42 682.375 L1249.86 682.375 L1249.3 682.375 L1248.74 682.375 L1248.18 682.375 L1247.62 682.375 L1247.06 682.375 L1246.5 682.375 L1245.94 682.375 L1245.38 682.375 L1244.82 682.375 L1244.26 682.375 L1243.71 682.375 L1243.15 682.375 L1242.59 682.375 L1242.03 682.375 L1241.47 682.375 L1240.91 682.375 L1240.35 682.375 L1239.79 682.375 L1239.23 682.375 L1238.67 682.375 L1238.11 682.375 L1237.55 682.375 L1236.99 682.375 L1236.44 682.375 L1235.88 682.375 L1235.32 682.375 L1234.76 682.375 L1234.2 682.375 L1233.64 682.375 L1233.08 682.375 L1232.52 682.375 L1231.96 682.375 L1231.4 682.375 L1230.84 682.375 L1230.28 682.375 L1229.72 682.375 L1229.17 682.375 L1228.61 682.375 L1228.05 682.375 L1227.49 682.375 L1226.93 682.375 L1226.37 682.375 L1225.81 682.375 L1225.25 682.375 L1224.69 682.375 L1224.13 682.375 L1223.57 682.375 L1223.01 682.375 L1222.45 682.375 L1221.89 682.375 L1221.34 682.375 L1220.78 682.375 L1220.22 682.375 L1219.66 682.375 L1219.1 682.375 L1218.54 682.375 L1217.98 682.375 L1217.42 682.375 L1216.86 682.375 L1216.3 682.375 L1215.74 682.375 L1215.18 682.375 L1214.62 682.375 L1214.07 682.375 L1213.51 682.375 L1212.95 682.375 L1212.39 682.375 L1211.83 682.375 L1211.27 682.375 L1210.71 682.375 L1210.15 682.375 L1209.59 682.375 L1209.03 682.375 L1208.47 682.375 L1207.91 682.375 L1207.35 682.375 L1206.8 682.375 L1206.24 682.375 L1205.68 682.375 L1205.12 682.375 L1204.56 682.375 L1204 682.375 L1203.44 682.375 L1202.88 682.375 L1202.32 682.375 L1201.76 682.375 L1201.2 682.375 L1200.64 682.375 L1200.08 682.375 L1199.52 682.375 L1198.97 682.375 L1198.41 682.375 L1197.85 682.375 L1197.29 682.375 L1196.73 682.375 L1196.17 682.375 L1195.61 682.375 L1195.05 682.375 L1194.49 682.375 L1193.93 682.375 L1193.37 682.375 L1192.81 682.375 L1192.25 682.375 L1191.7 682.375 L1191.14 682.375 L1190.58 682.375 L1190.02 682.375 L1189.46 682.375 L1188.9 682.375 L1188.34 682.375 L1187.78 682.375 L1187.22 682.375 L1186.66 682.375 L1186.1 682.375 L1185.54 682.375 L1184.98 682.375 L1184.43 682.375 L1183.87 682.375 L1183.31 682.375 L1182.75 682.375 L1182.19 682.375 L1181.63 682.375 L1181.07 682.375 L1180.51 682.375 L1179.95 682.375 L1179.39 682.375 L1178.83 682.375 L1178.27 682.375 L1177.71 682.375 L1177.15 682.375 L1176.6 682.375 L1176.04 682.375 L1175.48 682.375 L1174.92 682.375 L1174.36 682.375 L1173.8 682.375 L1173.24 682.375 L1172.68 682.375 L1172.12 682.375 L1171.56 682.375 L1171 682.375 L1170.44 682.375 L1169.88 682.375 L1169.33 682.375 L1168.77 682.375 L1168.21 682.375 L1167.65 682.375 L1167.09 682.375 L1166.53 682.375 L1165.97 682.375 L1165.41 682.375 L1164.85 682.375 L1164.29 682.375 L1163.73 682.375 L1163.17 682.375 L1162.61 682.375 L1162.05 682.375 L1161.5 682.375 L1160.94 682.375 L1160.38 682.375 L1159.82 682.375 L1159.26 682.375 L1158.7 682.375 L1158.14 682.375 L1157.58 682.375 L1157.02 682.375 L1156.46 682.375 L1155.9 682.375 L1155.34 682.375 L1154.78 682.375 L1154.23 682.375 L1153.67 682.375 L1153.11 682.375 L1152.55 682.375 L1151.99 682.375 L1151.43 682.375 L1150.87 682.375 L1150.31 682.375 L1149.75 682.375 L1149.19 682.375 L1148.63 682.375 L1148.07 682.375 L1147.51 682.375 L1146.96 682.375 L1146.4 682.375 L1145.84 682.375 L1145.28 682.375 L1144.72 682.375 L1144.16 682.375 L1143.6 682.375 L1143.04 682.375 L1142.48 682.375 L1141.92 682.375 L1141.36 682.375 L1140.8 682.375 L1140.24 682.375 L1139.68 682.375 L1139.13 682.375 L1138.57 682.375 L1138.01 682.375 L1137.45 682.375 L1136.89 682.375 L1136.33 682.375 L1135.77 682.375 L1135.21 682.375 L1134.65 682.375 L1134.09 682.375 L1133.53 682.375 L1132.97 682.375 L1132.41 682.375 L1131.86 682.375 L1131.3 682.375 L1130.74 682.375 L1130.18 682.375 L1129.62 682.375 L1129.06 682.375 L1128.5 682.375 L1127.94 682.375 L1127.38 682.375 L1126.82 682.375 L1126.26 682.375 L1125.7 682.375 L1125.14 682.375 L1124.59 682.375 L1124.03 682.375 L1123.47 682.375 L1122.91 682.375 L1122.35 682.375 L1121.79 682.375 L1121.23 682.375 L1120.67 682.375 L1120.11 682.375 L1119.55 682.375 L1118.99 682.375 L1118.43 682.375 L1117.87 682.375 L1117.31 682.375 L1116.76 682.375 L1116.2 682.375 L1115.64 682.375 L1115.08 682.375 L1114.52 682.375 L1113.96 682.375 L1113.4 682.375 L1112.84 682.375 L1112.28 682.375 L1111.72 682.375 L1111.16 682.375 L1110.6 682.375 L1110.04 682.375 L1109.49 682.375 L1108.93 682.375 L1108.37 682.375 L1107.81 682.375 L1107.25 682.375 L1106.69 682.375 L1106.13 682.375 L1105.57 682.375 L1105.01 682.375 L1104.45 682.375 L1103.89 682.375 L1103.33 682.375 L1102.77 682.375 L1102.22 682.375 L1101.66 682.375 L1101.1 682.375 L1100.54 682.375 L1099.98 682.375 L1099.42 682.375 L1098.86 682.375 L1098.3 682.375 L1097.74 682.375 L1097.18 682.375 L1096.62 682.375 L1096.06 682.375 L1095.5 682.375 L1094.94 682.375 L1094.39 682.375 L1093.83 682.375 L1093.27 682.375 L1092.71 682.375 L1092.15 682.375 L1091.59 682.375 L1091.03 682.375 L1090.47 682.375 L1089.91 682.375 L1089.35 682.375 L1088.79 682.375 L1088.23 682.375 L1087.67 682.375 L1087.12 682.375 L1086.56 682.375 L1086 682.375 L1085.44 682.375 L1084.88 682.375 L1084.32 682.375 L1083.76 682.375 L1083.2 682.375 L1082.64 682.375 L1082.08 682.375 L1081.52 682.375 L1080.96 682.375 L1080.4 682.375 L1079.85 682.375 L1079.29 682.375 L1078.73 682.375 L1078.17 682.375 L1077.61 682.375 L1077.05 682.375 L1076.49 682.375 L1075.93 682.375 L1075.37 682.375 L1074.81 682.375 L1074.25 682.375 L1073.69 682.375 L1073.13 682.375 L1072.57 682.375 L1072.02 682.375 L1071.46 682.375 L1070.9 682.375 L1070.34 682.375 L1069.78 682.375 L1069.22 682.375 L1068.66 682.375 L1068.1 682.375 L1067.54 682.375 L1066.98 682.375 L1066.42 682.375 L1065.86 682.375 L1065.3 682.375 L1064.75 682.375 L1064.19 682.375 L1063.63 682.375 L1063.07 682.375 L1062.51 682.375 L1061.95 682.375 L1061.39 682.375 L1060.83 682.375 L1060.27 682.375 L1059.71 682.375 L1059.15 682.375 L1058.59 682.375 L1058.03 682.375 L1057.48 682.375 L1056.92 682.375 L1056.36 682.375 L1055.8 682.375 L1055.24 682.375 L1054.68 682.375 L1054.12 682.375 L1053.56 682.375 L1053 682.375 L1052.44 682.375 L1051.88 682.375 L1051.32 682.375 L1050.76 682.375 L1050.2 682.375 L1049.65 682.375 L1049.09 682.375 L1048.53 682.375 L1047.97 682.375 L1047.41 682.375 L1046.85 682.375 L1046.29 682.375 L1045.73 682.375 L1045.17 682.375 L1044.61 682.375 L1044.05 682.375 L1043.49 682.375 L1042.93 682.375 L1042.38 682.375 L1041.82 682.375 L1041.26 682.375 L1040.7 682.375 L1040.14 682.375 L1039.58 682.375 L1039.02 682.375 L1038.46 682.375 L1037.9 682.375 L1037.34 682.375 L1036.78 682.375 L1036.22 682.375 L1035.66 682.375 L1035.1 682.375 L1034.55 682.375 L1033.99 682.375 L1033.43 682.375 L1032.87 682.375 L1032.31 682.375 L1031.75 682.375 L1031.19 682.375 L1030.63 682.375 L1030.07 682.375 L1029.51 682.375 L1028.95 682.375 L1028.39 682.375 L1027.83 682.375 L1027.28 682.375 L1026.72 682.375 L1026.16 682.375 L1025.6 682.375 L1025.04 682.375 L1024.48 682.375 L1023.92 682.375 L1023.36 682.375 L1022.8 682.375 L1022.24 682.375 L1021.68 682.375 L1021.12 682.375 L1020.56 682.375 L1020.01 682.375 L1019.45 682.375 L1018.89 682.375 L1018.33 682.375 L1017.77 682.375 L1017.21 682.375 L1016.65 682.375 L1016.09 682.375 L1015.53 682.375 L1014.97 682.375 L1014.41 682.375 L1013.85 682.375 L1013.29 682.375 L1012.73 682.375 L1012.18 682.375 L1011.62 682.375 L1011.06 682.375 L1010.5 682.375 L1009.94 682.375 L1009.38 682.375 L1008.82 682.375 L1008.26 682.375 L1007.7 682.375 L1007.14 682.375 L1006.58 682.375 L1006.02 682.375 L1005.46 682.375 L1004.91 682.375 L1004.35 682.375 L1003.79 682.375 L1003.23 682.375 L1002.67 682.375 L1002.11 682.375 L1001.55 682.375 L1000.99 682.375 L1000.43 682.375 L999.872 682.375 L999.313 682.375 L998.754 682.375 L998.194 682.375 L997.635 682.375 L997.076 682.375 L996.517 682.375 L995.957 682.375 L995.398 682.375 L994.839 682.375 L994.28 682.375 L993.72 682.375 L993.161 682.375 L992.602 682.375 L992.043 682.375 L991.483 682.375 L990.924 682.375 L990.365 682.375 L989.806 682.375 L989.246 682.375 L988.687 682.375 L988.128 682.375 L987.569 682.375 L987.009 682.375 L986.45 682.375 L985.891 682.375 L985.332 682.375 L984.772 682.375 L984.213 682.375 L983.654 682.375 L983.095 682.375 L982.535 682.375 L981.976 682.375 L981.417 682.375 L980.858 682.375 L980.298 682.375 L979.739 682.375 L979.18 682.375 L978.621 682.375 L978.061 682.375 L977.502 682.375 L976.943 682.375 L976.384 682.375 L975.824 682.375 L975.265 682.375 L974.706 682.375 L974.147 682.375 L973.587 682.375 L973.028 682.375 L972.469 682.375 L971.91 682.375 L971.35 682.375 L970.791 682.375 L970.232 682.375 L969.673 682.375 L969.113 682.375 L968.554 682.375 L967.995 682.375 L967.436 682.375 L966.876 682.375 L966.317 682.375 L965.758 682.375 L965.199 682.375 L964.639 682.375 L964.08 682.375 L963.521 682.375 L962.962 682.375 L962.402 682.375 L961.843 682.375 L961.284 682.375 L960.725 682.375 L960.165 682.375 L959.606 682.375 L959.047 682.375 L958.488 682.375 L957.928 682.375 L957.369 682.375 L956.81 682.375 L956.251 682.375 L955.691 682.375 L955.132 682.375 L954.573 682.375 L954.014 682.375 L953.454 682.375 L952.895 682.375 L952.336 682.375 L951.777 682.375 L951.217 682.375 L950.658 682.375 L950.099 682.375 L949.54 682.375 L948.98 682.375 L948.421 682.375 L947.862 682.375 L947.303 682.375 L946.743 682.375 L946.184 682.375 L945.625 682.375 L945.066 682.375 L944.506 682.375 L943.947 682.375 L943.388 682.375 L942.829 682.375 L942.269 682.375 L941.71 682.375 L941.151 682.375 L940.592 682.375 L940.032 682.375 L939.473 682.375 L938.914 682.375 L938.355 682.375 L937.795 682.375 L937.236 682.375 L936.677 682.375 L936.118 682.375 L935.558 682.375 L934.999 682.375 L934.44 682.375 L933.881 682.375 L933.321 682.375 L932.762 682.375 L932.203 682.375 L931.644 682.375 L931.084 682.375 L930.525 682.375 L929.966 682.375 L929.406 682.375 L928.847 682.375 L928.288 682.375 L927.729 682.375 L927.169 682.375 L926.61 682.375 L926.051 682.375 L925.492 682.375 L924.932 682.375 L924.373 682.375 L923.814 682.375 L923.255 682.375 L922.695 682.375 L922.136 682.375 L921.577 682.375 L921.018 682.375 L920.458 682.375 L919.899 682.375 L919.34 682.375 L918.781 682.375 L918.221 682.375 L917.662 682.375 L917.103 682.375 L916.544 682.375 L915.984 682.375 L915.425 682.375 L914.866 682.375 L914.307 682.375 L913.747 682.375 L913.188 682.375 L912.629 682.375 L912.07 682.375 L911.51 682.375 L910.951 682.375 L910.392 682.375 L909.833 682.375 L909.273 682.375 L908.714 682.375 L908.155 682.375 L907.596 682.375 L907.036 682.375 L906.477 682.375 L905.918 682.375 L905.359 682.375 L904.799 682.375 L904.24 682.375 L903.681 682.375 L903.122 682.375 L902.562 682.375 L902.003 682.375 L901.444 682.375 L900.885 682.375 L900.325 682.375 L899.766 682.375 L899.207 682.375 L898.648 682.375 L898.088 682.375 L897.529 682.375 L896.97 682.375 L896.411 682.375 L895.851 682.375 L895.292 682.375 L894.733 682.375 L894.174 682.375 L893.614 682.375 L893.055 682.375 L892.496 682.375 L891.937 682.375 L891.377 682.375 L890.818 682.375 L890.259 682.375 L889.7 682.375 L889.14 682.375 L888.581 682.375 L888.022 682.375 L887.463 682.375 L886.903 682.375 L886.344 682.375 L885.785 682.375 L885.226 682.375 L884.666 682.375 L884.107 682.375 L883.548 682.375 L882.989 682.375 L882.429 682.375 L881.87 682.375 L881.311 682.375 L880.752 682.375 L880.192 682.375 L879.633 682.375 L879.074 682.375 L878.515 682.375 L877.955 682.375 L877.396 682.375 L876.837 682.375 L876.278 682.375 L875.718 682.375 L875.159 682.375 L874.6 682.375 L874.041 682.375 L873.481 682.375 L872.922 682.375 L872.363 682.375 L871.804 682.375 L871.244 682.375 L870.685 682.375 L870.126 682.375 L869.567 682.375 L869.007 682.375 L868.448 682.375 L867.889 682.375 L867.33 682.375 L866.77 682.375 L866.211 682.375 L865.652 682.375 L865.093 682.375 L864.533 682.375 L863.974 682.375 L863.415 682.375 L862.856 682.375 L862.296 682.375 L861.737 682.375 L861.178 682.375 L860.619 682.375 L860.059 682.375 L859.5 682.375 L858.941 682.375 L858.382 682.375 L857.822 682.375 L857.263 682.375 L856.704 682.375 L856.145 682.375 L855.585 682.375 L855.026 682.375 L854.467 682.375 L853.908 682.375 L853.348 682.375 L852.789 682.375 L852.23 682.375 L851.671 682.375 L851.111 682.375 L850.552 682.375 L849.993 682.375 L849.434 682.375 L848.874 682.375 L848.315 682.375 L847.756 682.375 L847.197 682.375 L846.637 682.375 L846.078 682.375 L845.519 682.375 L844.96 682.375 L844.4 682.375 L843.841 682.375 L843.282 682.375 L842.723 682.375 L842.163 682.375 L841.604 682.375 L841.045 682.375 L840.486 682.375 L839.926 682.375 L839.367 682.375 L838.808 682.375 L838.249 682.375 L837.689 682.375 L837.13 682.375 L836.571 682.375 L836.012 682.375 L835.452 682.375 L834.893 682.375 L834.334 682.375 L833.775 682.375 L833.215 682.375 L832.656 682.375 L832.097 682.375 L831.538 682.375 L830.978 682.375 L830.419 682.375 L829.86 682.375 L829.301 682.375 L828.741 682.375 L828.182 682.375 L827.623 682.375 L827.064 682.375 L826.504 682.375 L825.945 682.375 L825.386 682.375 L824.827 682.375 L824.267 682.375 L823.708 682.375 L823.149 682.375 L822.59 682.375 L822.03 682.375 L821.471 682.375 L820.912 682.375 L820.353 682.375 L819.793 682.375 L819.234 682.375 L818.675 682.375 L818.116 682.375 L817.556 682.375 L816.997 682.375 L816.438 682.375 L815.879 682.375 L815.319 682.375 L814.76 682.375 L814.201 682.375 L813.642 682.375 L813.082 682.375 L812.523 682.375 L811.964 682.375 L811.405 682.375 L810.845 682.375 L810.286 682.375 L809.727 682.375 L809.168 682.375 L808.608 682.375 L808.049 682.375 L807.49 682.375 L806.931 682.375 L806.371 682.375 L805.812 682.375 L805.253 682.375 L804.693 682.375 L804.134 682.375 L803.575 682.375 L803.016 682.375 L802.456 682.375 L801.897 682.375 L801.338 682.375 L800.779 682.375 L800.219 682.375 L799.66 682.375 L799.101 682.375 L798.542 682.375 L797.982 682.375 L797.423 682.375 L796.864 682.375 L796.305 682.375 L795.745 682.375 L795.186 682.375 L794.627 682.375 L794.068 682.375 L793.508 682.375 L792.949 682.375 L792.39 682.375 L791.831 682.375 L791.271 682.375 L790.712 682.375 L790.153 682.375 L789.594 682.375 L789.034 682.375 L788.475 682.375 L787.916 682.375 L787.357 682.375 L786.797 682.375 L786.238 682.375 L785.679 682.375 L785.12 682.375 L784.56 682.375 L784.001 682.375 L783.442 682.375 L782.883 682.375 L782.323 682.375 L781.764 682.375 L781.205 682.375 L780.646 682.375 L780.086 682.375 L779.527 682.375 L778.968 682.375 L778.409 682.375 L777.849 682.375 L777.29 682.375 L776.731 682.375 L776.172 682.375 L775.612 682.375 L775.053 682.375 L774.494 682.375 L773.935 682.375 L773.375 682.375 L772.816 682.375 L772.257 682.375 L771.698 682.375 L771.138 682.375 L770.579 682.375 L770.02 682.375 L769.461 682.375 L768.901 682.375 L768.342 682.375 L767.783 682.375 L767.224 682.375 L766.664 682.375 L766.105 682.375 L765.546 682.375 L764.987 682.375 L764.427 682.375 L763.868 682.375 L763.309 682.375 L762.75 682.375 L762.19 682.375 L761.631 682.375 L761.072 682.375 L760.513 682.375 L759.953 682.375 L759.394 682.375 L758.835 682.375 L758.276 682.375 L757.716 682.375 L757.157 682.375 L756.598 682.375 L756.039 682.375 L755.479 682.375 L754.92 682.375 L754.361 682.375 L753.802 682.375 L753.242 682.375 L752.683 682.375 L752.124 682.375 L751.565 682.375 L751.005 682.375 L750.446 682.375 L749.887 682.375 L749.328 682.375 L748.768 682.375 L748.209 682.375 L747.65 682.375 L747.091 682.375 L746.531 682.375 L745.972 682.375 L745.413 682.375 L744.854 682.375 L744.294 682.375 L743.735 682.375 L743.176 682.375 L742.617 682.375 L742.057 682.375 L741.498 682.375 L740.939 682.375 L740.38 682.375 L739.82 682.375 L739.261 682.375 L738.702 682.375 L738.143 682.375 L737.583 682.375 L737.024 682.375 L736.465 682.375 L735.906 682.375 L735.346 682.375 L734.787 682.375 L734.228 682.375 L733.669 682.375 L733.109 682.375 L732.55 682.375 L731.991 682.375 L731.432 682.375 L730.872 682.375 L730.313 682.375 L729.754 682.375 L729.195 682.375 L728.635 682.375 L728.076 682.375 L727.517 682.375 L726.958 682.375 L726.398 682.375 L725.839 682.375 L725.28 682.375 L724.721 682.375 L724.161 682.375 L723.602 682.375 L723.043 682.375 L722.484 682.375 L721.924 682.375 L721.365 682.375 L720.806 682.375 L720.247 682.375  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.097 720.806,687.097 721.365,687.097 721.924,687.097 722.484,687.097 723.043,687.097 723.602,687.097 724.161,687.097 724.721,687.097 725.28,687.097 725.839,687.097 726.398,687.097 726.958,687.097 727.517,687.097 728.076,687.097 728.635,687.097 729.195,687.097 729.754,687.097 730.313,687.097 730.872,687.097 731.432,687.097 731.991,687.097 732.55,687.097 733.109,687.097 733.669,687.097 734.228,687.097 734.787,687.097 735.346,687.097 735.906,687.097 736.465,687.097 737.024,687.097 737.583,687.097 738.143,687.097 738.702,687.097 739.261,687.097 739.82,687.097 740.38,687.097 740.939,687.097 741.498,687.097 742.057,687.097 742.617,687.097 743.176,687.097 743.735,687.097 744.294,687.097 744.854,687.097 745.413,687.097 745.972,687.097 746.531,687.097 747.091,687.097 747.65,687.097 748.209,687.097 748.768,687.097 749.328,687.097 749.887,687.097 750.446,687.097 751.005,687.097 751.565,687.097 752.124,687.097 752.683,687.097 753.242,687.097 753.802,687.097 754.361,687.097 754.92,687.097 755.479,687.097 756.039,687.097 756.598,687.097 757.157,687.097 757.716,687.097 758.276,687.097 758.835,687.097 759.394,687.097 759.953,687.097 760.513,687.097 761.072,687.097 761.631,687.097 762.19,687.097 762.75,687.097 763.309,687.097 763.868,687.097 764.427,687.097 764.987,687.097 765.546,687.097 766.105,687.097 766.664,687.097 767.224,687.097 767.783,687.097 768.342,687.097 768.901,687.097 769.461,687.097 770.02,687.097 770.579,687.097 771.138,687.097 771.698,687.097 772.257,687.097 772.816,687.097 773.375,687.097 773.935,687.097 774.494,687.097 775.053,687.097 775.612,687.097 776.172,687.097 776.731,687.097 777.29,687.097 777.849,687.097 778.409,687.097 778.968,687.097 779.527,687.097 780.086,687.097 780.646,687.097 781.205,687.097 781.764,687.097 782.323,687.097 782.883,687.097 783.442,687.097 784.001,687.097 784.56,687.097 785.12,687.097 785.679,687.097 786.238,687.097 786.797,687.097 787.357,687.097 787.916,687.097 788.475,687.097 789.034,687.097 789.594,687.097 790.153,687.097 790.712,687.097 791.271,687.097 791.831,687.097 792.39,687.097 792.949,687.097 793.508,687.097 794.068,687.097 794.627,687.097 795.186,687.097 795.745,687.097 796.305,687.097 796.864,687.097 797.423,687.097 797.982,687.097 798.542,687.097 799.101,687.097 799.66,687.097 800.219,687.097 800.779,687.097 801.338,687.097 801.897,687.097 802.456,687.097 803.016,687.097 803.575,687.097 804.134,687.097 804.693,687.097 805.253,687.097 805.812,687.097 806.371,687.097 806.931,687.097 807.49,687.097 808.049,687.097 808.608,687.097 809.168,687.097 809.727,687.097 810.286,687.097 810.845,687.097 811.405,687.097 811.964,687.097 812.523,687.097 813.082,687.097 813.642,687.097 814.201,687.097 814.76,687.097 815.319,687.097 815.879,687.097 816.438,687.097 816.997,687.097 817.556,687.097 818.116,687.097 818.675,687.097 819.234,687.097 819.793,687.097 820.353,687.097 820.912,687.097 821.471,687.097 822.03,687.097 822.59,687.097 823.149,687.097 823.708,687.097 824.267,687.097 824.827,687.097 825.386,687.097 825.945,687.097 826.504,687.097 827.064,687.097 827.623,687.097 828.182,687.097 828.741,687.097 829.301,687.097 829.86,687.097 830.419,687.097 830.978,687.097 831.538,687.097 832.097,687.097 832.656,687.097 833.215,687.097 833.775,687.097 834.334,687.097 834.893,687.097 835.452,687.097 836.012,687.097 836.571,687.097 837.13,687.097 837.689,687.097 838.249,687.097 838.808,687.097 839.367,687.097 839.926,687.097 840.486,687.097 841.045,687.097 841.604,687.097 842.163,687.097 842.723,687.097 843.282,687.097 843.841,687.097 844.4,687.097 844.96,687.097 845.519,687.097 846.078,687.097 846.637,687.097 847.197,687.097 847.756,687.097 848.315,687.097 848.874,687.097 849.434,687.097 849.993,687.097 850.552,687.097 851.111,687.097 851.671,687.097 852.23,687.097 852.789,687.097 853.348,687.097 853.908,687.097 854.467,687.097 855.026,687.097 855.585,687.097 856.145,687.097 856.704,687.097 857.263,687.097 857.822,687.097 858.382,687.097 858.941,687.097 859.5,687.097 860.059,687.097 860.619,687.097 861.178,687.097 861.737,687.097 862.296,687.097 862.856,687.097 863.415,687.097 863.974,687.097 864.533,687.097 865.093,687.097 865.652,687.097 866.211,687.097 866.77,687.097 867.33,687.097 867.889,687.097 868.448,687.097 869.007,687.097 869.567,687.097 870.126,687.097 870.685,687.097 871.244,687.097 871.804,687.097 872.363,687.097 872.922,687.097 873.481,687.097 874.041,687.097 874.6,687.097 875.159,687.097 875.718,687.097 876.278,687.097 876.837,687.097 877.396,687.097 877.955,687.097 878.515,687.097 879.074,687.097 879.633,687.097 880.192,687.097 880.752,687.097 881.311,687.097 881.87,687.097 882.429,687.097 882.989,687.097 883.548,687.097 884.107,687.097 884.666,687.097 885.226,687.097 885.785,687.097 886.344,687.097 886.903,687.097 887.463,687.097 888.022,687.097 888.581,687.097 889.14,687.097 889.7,687.097 890.259,687.097 890.818,687.097 891.377,687.097 891.937,687.097 892.496,687.097 893.055,687.097 893.614,687.097 894.174,687.097 894.733,687.097 895.292,687.097 895.851,687.097 896.411,687.097 896.97,687.097 897.529,687.097 898.088,687.097 898.648,687.097 899.207,687.097 899.766,687.097 900.325,687.097 900.885,687.097 901.444,687.097 902.003,687.097 902.562,687.097 903.122,687.097 903.681,687.097 904.24,687.097 904.799,687.097 905.359,687.097 905.918,687.097 906.477,687.097 907.036,687.097 907.596,687.097 908.155,687.097 908.714,687.097 909.273,687.097 909.833,687.097 910.392,687.097 910.951,687.097 911.51,687.097 912.07,687.097 912.629,687.097 913.188,687.097 913.747,687.097 914.307,687.097 914.866,687.097 915.425,687.097 915.984,687.097 916.544,687.097 917.103,687.097 917.662,687.097 918.221,687.097 918.781,687.097 919.34,687.097 919.899,687.097 920.458,687.097 921.018,687.097 921.577,687.097 922.136,687.097 922.695,687.097 923.255,687.097 923.814,687.097 924.373,687.097 924.932,687.097 925.492,687.097 926.051,687.097 926.61,687.097 927.169,687.097 927.729,687.097 928.288,687.097 928.847,687.097 929.406,687.097 929.966,687.097 930.525,687.097 931.084,687.097 931.644,687.097 932.203,687.097 932.762,687.097 933.321,687.097 933.881,687.097 934.44,687.097 934.999,687.097 935.558,687.097 936.118,687.097 936.677,687.097 937.236,687.097 937.795,687.097 938.355,687.097 938.914,687.097 939.473,687.097 940.032,687.097 940.592,687.097 941.151,687.097 941.71,687.097 942.269,687.097 942.829,687.097 943.388,687.097 943.947,687.097 944.506,687.097 945.066,687.097 945.625,687.097 946.184,687.097 946.743,687.097 947.303,687.097 947.862,687.097 948.421,687.097 948.98,687.097 949.54,687.097 950.099,687.097 950.658,687.097 951.217,687.097 951.777,687.097 952.336,687.097 952.895,687.097 953.454,687.097 954.014,687.097 954.573,687.097 955.132,687.097 955.691,687.097 956.251,687.097 956.81,687.097 957.369,687.097 957.928,687.097 958.488,687.097 959.047,687.097 959.606,687.097 960.165,687.097 960.725,687.097 961.284,687.097 961.843,687.097 962.402,687.097 962.962,687.097 963.521,687.097 964.08,687.097 964.639,687.097 965.199,687.097 965.758,687.097 966.317,687.097 966.876,687.097 967.436,687.097 967.995,687.097 968.554,687.097 969.113,687.097 969.673,687.097 970.232,687.097 970.791,687.097 971.35,687.097 971.91,687.097 972.469,687.097 973.028,687.097 973.587,687.097 974.147,687.097 974.706,687.097 975.265,687.097 975.824,687.097 976.384,687.097 976.943,687.097 977.502,687.097 978.061,687.097 978.621,687.097 979.18,687.097 979.739,687.097 980.298,687.097 980.858,687.097 981.417,687.097 981.976,687.097 982.535,687.097 983.095,687.097 983.654,687.097 984.213,687.097 984.772,687.097 985.332,687.097 985.891,687.097 986.45,687.097 987.009,687.097 987.569,687.097 988.128,687.097 988.687,687.097 989.246,687.097 989.806,687.097 990.365,687.097 990.924,687.097 991.483,687.097 992.043,687.097 992.602,687.097 993.161,687.097 993.72,687.097 994.28,687.097 994.839,687.097 995.398,687.097 995.957,687.097 996.517,687.097 997.076,687.097 997.635,687.097 998.194,687.097 998.754,687.097 999.313,687.097 999.872,687.097 1000.43,687.097 1000.99,687.097 1001.55,687.097 1002.11,687.097 1002.67,687.097 1003.23,687.097 1003.79,687.097 1004.35,687.097 1004.91,687.097 1005.46,687.097 1006.02,687.097 1006.58,687.097 1007.14,687.097 1007.7,687.097 1008.26,687.097 1008.82,687.097 1009.38,687.097 1009.94,687.097 1010.5,687.097 1011.06,687.097 1011.62,687.097 1012.18,687.097 1012.73,687.097 1013.29,687.097 1013.85,687.097 1014.41,687.097 1014.97,687.097 1015.53,687.097 1016.09,687.097 1016.65,687.097 1017.21,687.097 1017.77,687.097 1018.33,687.097 1018.89,687.097 1019.45,687.097 1020.01,687.097 1020.56,687.097 1021.12,687.097 1021.68,687.097 1022.24,687.097 1022.8,687.097 1023.36,687.097 1023.92,687.097 1024.48,687.097 1025.04,687.097 1025.6,687.097 1026.16,687.097 1026.72,687.097 1027.28,687.097 1027.83,687.097 1028.39,687.097 1028.95,687.097 1029.51,687.097 1030.07,687.097 1030.63,687.097 1031.19,687.097 1031.75,687.097 1032.31,687.097 1032.87,687.097 1033.43,687.097 1033.99,687.097 1034.55,687.097 1035.1,687.097 1035.66,687.097 1036.22,687.097 1036.78,687.097 1037.34,687.097 1037.9,687.097 1038.46,687.097 1039.02,687.097 1039.58,687.097 1040.14,687.097 1040.7,687.097 1041.26,687.097 1041.82,687.097 1042.38,687.097 1042.93,687.097 1043.49,687.097 1044.05,687.097 1044.61,687.097 1045.17,687.097 1045.73,687.097 1046.29,687.097 1046.85,687.097 1047.41,687.097 1047.97,687.097 1048.53,687.097 1049.09,687.097 1049.65,687.097 1050.2,687.097 1050.76,687.097 1051.32,687.097 1051.88,687.097 1052.44,687.097 1053,687.097 1053.56,687.097 1054.12,687.097 1054.68,687.097 1055.24,687.097 1055.8,687.097 1056.36,687.097 1056.92,687.097 1057.48,687.097 1058.03,687.097 1058.59,687.097 1059.15,687.097 1059.71,687.097 1060.27,687.097 1060.83,687.097 1061.39,687.097 1061.95,687.097 1062.51,687.097 1063.07,687.097 1063.63,687.097 1064.19,687.097 1064.75,687.097 1065.3,687.097 1065.86,687.097 1066.42,687.097 1066.98,687.097 1067.54,687.097 1068.1,687.097 1068.66,687.097 1069.22,687.097 1069.78,687.097 1070.34,687.097 1070.9,687.097 1071.46,687.097 1072.02,687.097 1072.57,687.097 1073.13,687.097 1073.69,687.097 1074.25,687.097 1074.81,687.097 1075.37,687.097 1075.93,687.097 1076.49,687.097 1077.05,687.097 1077.61,687.097 1078.17,687.097 1078.73,687.097 1079.29,687.097 1079.85,687.097 1080.4,687.097 1080.96,687.097 1081.52,687.097 1082.08,687.097 1082.64,687.097 1083.2,687.097 1083.76,687.097 1084.32,687.097 1084.88,687.097 1085.44,687.097 1086,687.097 1086.56,687.097 1087.12,687.097 1087.67,687.097 1088.23,687.097 1088.79,687.097 1089.35,687.097 1089.91,687.097 1090.47,687.097 1091.03,687.097 1091.59,687.097 1092.15,687.097 1092.71,687.097 1093.27,687.097 1093.83,687.097 1094.39,687.097 1094.94,687.097 1095.5,687.097 1096.06,687.097 1096.62,687.097 1097.18,687.097 1097.74,687.097 1098.3,687.097 1098.86,687.097 1099.42,687.097 1099.98,687.097 1100.54,687.097 1101.1,687.097 1101.66,687.097 1102.22,687.097 1102.77,687.097 1103.33,687.097 1103.89,687.097 1104.45,687.097 1105.01,687.097 1105.57,687.097 1106.13,687.097 1106.69,687.097 1107.25,687.097 1107.81,687.097 1108.37,687.097 1108.93,687.097 1109.49,687.097 1110.04,687.097 1110.6,687.097 1111.16,687.097 1111.72,687.097 1112.28,687.097 1112.84,687.097 1113.4,687.097 1113.96,687.097 1114.52,687.097 1115.08,687.097 1115.64,687.097 1116.2,687.097 1116.76,687.097 1117.31,687.097 1117.87,687.097 1118.43,687.097 1118.99,687.097 1119.55,687.097 1120.11,687.097 1120.67,687.097 1121.23,687.097 1121.79,687.097 1122.35,687.097 1122.91,687.097 1123.47,687.097 1124.03,687.097 1124.59,687.097 1125.14,687.097 1125.7,687.097 1126.26,687.097 1126.82,687.097 1127.38,687.097 1127.94,687.097 1128.5,687.097 1129.06,687.097 1129.62,687.097 1130.18,687.097 1130.74,687.097 1131.3,687.097 1131.86,687.097 1132.41,687.097 1132.97,687.097 1133.53,687.097 1134.09,687.097 1134.65,687.097 1135.21,687.097 1135.77,687.097 1136.33,687.097 1136.89,687.097 1137.45,687.097 1138.01,687.097 1138.57,687.097 1139.13,687.097 1139.68,687.097 1140.24,687.097 1140.8,687.097 1141.36,687.097 1141.92,687.097 1142.48,687.097 1143.04,687.097 1143.6,687.097 1144.16,687.097 1144.72,687.097 1145.28,687.097 1145.84,687.097 1146.4,687.097 1146.96,687.097 1147.51,687.097 1148.07,687.097 1148.63,687.097 1149.19,687.097 1149.75,687.097 1150.31,687.097 1150.87,687.097 1151.43,687.097 1151.99,687.097 1152.55,687.097 1153.11,687.097 1153.67,687.097 1154.23,687.097 1154.78,687.097 1155.34,687.097 1155.9,687.097 1156.46,687.097 1157.02,687.097 1157.58,687.097 1158.14,687.097 1158.7,687.097 1159.26,687.097 1159.82,687.097 1160.38,687.097 1160.94,687.097 1161.5,687.097 1162.05,687.097 1162.61,687.097 1163.17,687.097 1163.73,687.097 1164.29,687.097 1164.85,687.097 1165.41,687.097 1165.97,687.097 1166.53,687.097 1167.09,687.097 1167.65,687.097 1168.21,687.097 1168.77,687.097 1169.33,687.097 1169.88,687.097 1170.44,687.097 1171,687.097 1171.56,687.097 1172.12,687.097 1172.68,687.097 1173.24,687.097 1173.8,687.097 1174.36,687.097 1174.92,687.097 1175.48,687.097 1176.04,687.097 1176.6,687.097 1177.15,687.097 1177.71,687.097 1178.27,687.097 1178.83,687.097 1179.39,687.097 1179.95,687.097 1180.51,687.097 1181.07,687.097 1181.63,687.097 1182.19,687.097 1182.75,687.097 1183.31,687.097 1183.87,687.097 1184.43,687.097 1184.98,687.097 1185.54,687.097 1186.1,687.097 1186.66,687.097 1187.22,687.097 1187.78,687.097 1188.34,687.097 1188.9,687.097 1189.46,687.097 1190.02,687.097 1190.58,687.097 1191.14,687.097 1191.7,687.097 1192.25,687.097 1192.81,687.097 1193.37,687.097 1193.93,687.097 1194.49,687.097 1195.05,687.097 1195.61,687.097 1196.17,687.097 1196.73,687.097 1197.29,687.097 1197.85,687.097 1198.41,687.097 1198.97,687.097 1199.52,687.097 1200.08,687.097 1200.64,687.097 1201.2,687.097 1201.76,687.097 1202.32,687.097 1202.88,687.097 1203.44,687.097 1204,687.097 1204.56,687.097 1205.12,687.097 1205.68,687.097 1206.24,687.097 1206.8,687.097 1207.35,687.097 1207.91,687.097 1208.47,687.097 1209.03,687.097 1209.59,687.097 1210.15,687.097 1210.71,687.097 1211.27,687.097 1211.83,687.097 1212.39,687.097 1212.95,687.097 1213.51,687.097 1214.07,687.097 1214.62,687.097 1215.18,687.097 1215.74,687.097 1216.3,687.097 1216.86,687.097 1217.42,687.097 1217.98,687.097 1218.54,687.097 1219.1,687.097 1219.66,687.097 1220.22,687.097 1220.78,687.097 1221.34,687.097 1221.89,687.097 1222.45,687.097 1223.01,687.097 1223.57,687.097 1224.13,687.097 1224.69,687.097 1225.25,687.097 1225.81,687.097 1226.37,687.097 1226.93,687.097 1227.49,687.097 1228.05,687.097 1228.61,687.097 1229.17,687.097 1229.72,687.097 1230.28,687.097 1230.84,687.097 1231.4,687.097 1231.96,687.097 1232.52,687.097 1233.08,687.097 1233.64,687.097 1234.2,687.097 1234.76,687.097 1235.32,687.097 1235.88,687.097 1236.44,687.097 1236.99,687.097 1237.55,687.097 1238.11,687.097 1238.67,687.097 1239.23,687.097 1239.79,687.097 1240.35,687.097 1240.91,687.097 1241.47,687.097 1242.03,687.097 1242.59,687.097 1243.15,687.097 1243.71,687.097 1244.26,687.097 1244.82,687.097 1245.38,687.097 1245.94,687.097 1246.5,687.097 1247.06,687.097 1247.62,687.097 1248.18,687.097 1248.74,687.097 1249.3,687.097 1249.86,687.097 1250.42,687.097 1250.98,687.097 1251.54,687.097 1252.09,687.097 1252.65,687.097 1253.21,687.097 1253.77,687.097 1254.33,687.097 1254.89,687.097 1255.45,687.097 1256.01,687.097 1256.57,687.097 1257.13,687.097 1257.69,687.097 1258.25,687.097 1258.81,687.097 1259.36,687.097 1259.92,687.097 1260.48,687.097 1261.04,687.097 1261.6,687.097 1262.16,687.097 1262.72,687.097 1263.28,687.097 1263.84,687.097 1264.4,687.097 1264.96,687.097 1265.52,687.097 1266.08,687.097 1266.63,687.097 1267.19,687.097 1267.75,687.097 1268.31,687.097 1268.87,687.097 1269.43,687.097 1269.99,687.097 1270.55,687.097 1271.11,687.097 1271.67,687.097 1272.23,687.097 1272.79,687.097 1273.35,687.097 1273.91,687.097 1274.46,687.097 1275.02,687.097 1275.58,687.097 1276.14,687.097 1276.7,687.097 1277.26,687.097 1277.82,687.097 1278.38,687.097 1278.94,687.097 1279.5,687.097 1280.06,687.097 1280.62,687.097 1281.18,687.097 1281.73,687.097 1282.29,687.097 1282.85,687.097 1283.41,687.097 1283.97,687.097 1284.53,687.097 1285.09,687.097 1285.65,687.097 1286.21,687.097 1286.77,687.097 1287.33,687.097 1287.89,687.097 1288.45,687.097 1289,687.097 1289.56,687.097 1290.12,687.097 1290.68,687.097 1291.24,687.097 1291.8,687.097 1292.36,687.097 1292.92,687.097 1293.48,687.097 1294.04,687.097 1294.6,687.097 1295.16,687.097 1295.72,687.097 1296.28,687.097 1296.83,687.097 1297.39,687.097 1297.95,687.097 1298.51,687.097 1299.07,687.097 1299.63,687.097 1300.19,687.097 1300.75,687.097 1301.31,687.097 1301.87,687.097 1302.43,687.097 1302.99,687.097 1303.55,687.097 1304.1,687.097 1304.66,687.097 1305.22,687.097 1305.78,687.097 1306.34,687.097 1306.9,687.097 1307.46,687.097 1308.02,687.097 1308.58,687.097 1309.14,687.097 1309.7,687.097 1310.26,687.097 1310.82,687.097 1311.38,687.097 1311.93,687.097 1312.49,687.097 1313.05,687.097 1313.61,687.097 1314.17,687.097 1314.73,687.097 1315.29,687.097 1315.85,687.097 1316.41,687.097 1316.97,687.097 1317.53,687.097 1318.09,687.097 1318.65,687.097 1319.2,687.097 1319.76,687.097 1320.32,687.097 1320.88,687.097 1321.44,687.097 1322,687.097 1322.56,687.097 1323.12,687.097 1323.68,687.097 1324.24,687.097 1324.8,687.097 1325.36,687.097 1325.92,687.097 1326.47,687.097 1327.03,687.097 1327.59,687.097 1328.15,687.097 1328.71,687.097 1329.27,687.097 1329.83,687.097 1330.39,687.097 1330.95,687.097 1331.51,687.097 1332.07,687.097 1332.63,687.097 1333.19,687.097 1333.75,687.097 1334.3,687.097 1334.86,687.097 1335.42,687.097 1335.98,687.097 1336.54,687.097 1337.1,687.097 1337.66,687.097 1338.22,687.097 1338.78,687.097 1339.34,687.097 1339.9,687.097 1340.46,687.097 1341.02,687.097 1341.57,687.097 1342.13,687.097 1342.69,687.097 1343.25,687.097 1343.81,687.097 1344.37,687.097 1344.93,687.097 1345.49,687.097 1346.05,687.097 1346.61,687.097 1347.17,687.097 1347.73,687.097 1348.29,687.097 1348.84,687.097 1349.4,687.097 1349.96,687.097 1350.52,687.097 1351.08,687.097 1351.64,687.097 1352.2,687.097 1352.76,687.097 1353.32,687.097 1353.88,687.097 1354.44,687.097 1355,687.097 1355.56,687.097 1356.12,687.097 1356.67,687.097 1357.23,687.097 1357.79,687.097 1358.35,687.097 1358.91,687.097 1359.47,687.097 1360.03,687.097 1360.59,687.097 1361.15,687.097 1361.71,687.097 1362.27,687.097 1362.83,687.097 1363.39,687.097 1363.94,687.097 1364.5,687.097 1365.06,687.097 1365.62,687.097 1366.18,687.097 1366.74,687.097 1367.3,687.097 1367.86,687.097 1368.42,687.097 1368.98,687.097 1369.54,687.097 1370.1,687.097 1370.66,687.097 1371.21,687.097 1371.77,687.097 1372.33,687.097 1372.89,687.097 1373.45,687.097 1374.01,687.097 1374.57,687.097 1375.13,687.097 1375.69,687.097 1376.25,687.097 1376.81,687.097 1377.37,687.097 1377.93,687.097 1378.49,687.097 1379.04,687.097 1379.6,687.097 1380.16,687.097 1380.72,687.097 1381.28,687.097 1381.84,687.097 1382.4,687.097 1382.96,687.097 1383.52,687.097 1384.08,687.097 1384.64,687.097 1385.2,687.097 1385.76,687.097 1386.31,687.097 1386.87,687.097 1387.43,687.097 1387.99,687.097 1388.55,687.097 1389.11,687.097 1389.67,687.097 1390.23,687.097 1390.79,687.097 1391.35,687.097 1391.91,687.097 1392.47,687.097 1393.03,687.097 1393.58,687.097 1394.14,687.097 1394.7,687.097 1395.26,687.097 1395.82,687.097 1396.38,687.097 1396.94,687.097 1397.5,687.097 1398.06,687.097 1398.62,687.097 1399.18,687.097 1399.74,687.097 1400.3,687.097 1400.86,687.097 1401.41,687.097 1401.97,687.097 1402.53,687.097 1403.09,687.097 1403.65,687.097 1404.21,687.097 1404.77,687.097 1405.33,687.097 1405.89,687.097 1406.45,687.097 1407.01,687.097 1407.57,687.097 1408.13,687.097 1408.68,687.097 1409.24,687.097 1409.8,687.097 1410.36,687.097 1410.92,687.097 1411.48,687.097 1412.04,687.097 1412.6,687.097 1413.16,687.097 1413.72,687.097 1414.28,687.097 1414.84,687.097 1415.4,687.097 1415.95,687.097 1416.51,687.097 1417.07,687.097 1417.63,687.097 1418.19,687.097 1418.75,687.097 1419.31,687.097 1419.87,687.097 1420.43,687.097 1420.99,687.097 1421.55,687.097 1422.11,687.097 1422.67,687.097 1423.23,687.097 1423.78,687.097 1424.34,687.097 1424.9,687.097 1425.46,687.097 1426.02,687.097 1426.58,687.097 1427.14,687.097 1427.7,687.097 1428.26,687.097 1428.82,687.097 1429.38,687.097 1429.94,687.097 1430.5,687.097 1431.05,687.097 1431.61,687.097 1432.17,687.097 1432.73,687.097 1433.29,687.097 1433.85,687.097 1434.41,687.097 1434.97,687.097 1435.53,687.097 1436.09,687.097 1436.65,687.097 1437.21,687.097 1437.77,687.097 1438.33,687.097 1438.88,687.097 1439.44,687.097 1440,687.097 1440.56,687.097 1441.12,687.097 1441.68,687.097 1442.24,687.097 1442.8,687.097 1443.36,687.097 1443.92,687.097 1444.48,687.097 1445.04,687.097 1445.6,687.097 1446.15,687.097 1446.71,687.097 1447.27,687.097 1447.83,687.097 1448.39,687.097 1448.95,687.097 1449.51,687.097 1450.07,687.097 1450.63,687.097 1451.19,687.097 1451.75,687.097 1452.31,687.097 1452.87,687.097 1453.42,687.097 1453.98,687.097 1454.54,687.097 1455.1,687.097 1455.66,687.097 1456.22,687.097 1456.78,687.097 1457.34,687.097 1457.9,687.097 1458.46,687.097 1459.02,687.097 1459.58,687.097 1460.14,687.097 1460.7,687.097 1461.25,687.097 1461.81,687.097 1462.37,687.097 1462.93,687.097 1463.49,687.097 1464.05,687.097 1464.61,687.097 1465.17,687.097 1465.73,687.097 1466.29,687.097 1466.85,687.097 1467.41,687.097 1467.97,687.097 1468.52,687.097 1469.08,687.097 1469.64,687.097 1470.2,687.097 1470.76,687.097 1471.32,687.097 1471.88,687.097 1472.44,687.097 1473,687.097 1473.56,687.097 1474.12,687.097 1474.68,687.097 1475.24,687.097 1475.79,687.097 1476.35,687.097 1476.91,687.097 1477.47,687.097 1478.03,687.097 1478.59,687.097 1479.15,687.097 1479.71,687.097 1480.27,687.097 1480.83,687.097 1481.39,687.097 1481.95,687.097 1482.51,687.097 1483.07,687.097 1483.62,687.097 1484.18,687.097 1484.74,687.097 1485.3,687.097 1485.86,687.097 1486.42,687.097 1486.98,687.097 1487.54,687.097 1488.1,687.097 1488.66,687.097 1489.22,687.097 1489.78,687.097 1490.34,687.097 1490.89,687.097 1491.45,687.097 1492.01,687.097 1492.57,687.097 1493.13,687.097 1493.69,687.097 1494.25,687.097 1494.81,687.097 1495.37,687.097 1495.93,687.097 1496.49,687.097 1497.05,687.097 1497.61,687.097 1498.16,687.097 1498.72,687.097 1499.28,687.097 1499.84,687.097 1500.4,687.097 1500.96,687.097 1501.52,687.097 1502.08,687.097 1502.64,687.097 1503.2,687.097 1503.76,687.097 1504.32,687.097 1504.88,687.097 1505.44,687.097 1505.99,687.097 1506.55,687.097 1507.11,687.097 1507.67,687.097 1508.23,687.097 1508.79,687.097 1509.35,687.097 1509.91,687.097 1510.47,687.097 1511.03,687.097 1511.59,687.097 1512.15,687.097 1512.71,687.097 1513.26,687.097 1513.82,687.097 1514.38,687.097 1514.94,687.097 1515.5,687.097 1516.06,687.097 1516.62,687.097 1517.18,687.097 1517.74,687.097 1518.3,687.097 1518.86,687.097 1519.42,687.097 1519.98,687.097 1520.53,687.097 1521.09,687.097 1521.65,687.097 1522.21,687.097 1522.77,687.097 1523.33,687.097 1523.89,687.097 1524.45,687.097 1525.01,687.097 1525.57,687.097 1526.13,687.097 1526.69,687.097 1527.25,687.097 1527.81,687.097 1528.36,687.097 1528.92,687.097 1529.48,687.097 1530.04,687.097 1530.6,687.097 1531.16,687.097 1531.72,687.097 1532.28,687.097 1532.84,687.097 1533.4,687.097 1533.96,687.097 1534.52,687.097 1535.08,687.097 1535.63,687.097 1536.19,687.097 1536.75,687.097 1537.31,687.097 1537.87,687.097 1538.43,687.097 1538.99,687.097 1539.55,687.097 1540.11,687.097 1540.67,687.097 1541.23,687.097 1541.79,687.097 1542.35,687.097 1542.9,687.097 1543.46,687.097 1544.02,687.097 1544.58,687.097 1545.14,687.097 1545.7,687.097 1546.26,687.097 1546.82,687.097 1547.38,687.097 1547.94,687.097 1548.5,687.097 1549.06,687.097 1549.62,687.097 1550.18,687.097 1550.73,687.097 1551.29,687.097 1551.85,687.097 1552.41,687.097 1552.97,687.097 1553.53,687.097 1554.09,687.097 1554.65,687.097 1555.21,687.097 1555.77,687.097 1556.33,687.097 1556.89,687.097 1557.45,687.097 1558,687.097 1558.56,687.097 1559.12,687.097 1559.68,687.097 1560.24,687.097 1560.8,687.097 1561.36,687.097 1561.92,687.097 1562.48,687.097 1563.04,687.097 1563.6,687.097 1564.16,687.097 1564.72,687.097 1565.28,687.097 1565.83,687.097 1566.39,687.097 1566.95,687.097 1567.51,687.097 1568.07,687.097 1568.63,687.097 1569.19,687.097 1569.75,687.097 1570.31,687.097 1570.87,687.097 1571.43,687.097 1571.99,687.097 1572.55,687.097 1573.1,687.097 1573.66,687.097 1574.22,687.097 1574.78,687.097 1575.34,687.097 1575.9,687.097 1576.46,687.097 1577.02,687.097 1577.58,687.097 1578.14,687.097 1578.7,687.097 1579.26,687.097 1579.82,687.097 1580.37,687.097 1580.93,687.097 1581.49,687.097 1582.05,687.097 1582.61,687.097 1583.17,687.097 1583.73,687.097 1584.29,687.097 1584.85,687.097 1585.41,687.097 1585.97,687.097 1586.53,687.097 1587.09,687.097 1587.65,687.097 1588.2,687.097 1588.76,687.097 1589.32,687.097 1589.88,687.097 1590.44,687.097 1591,687.097 1591.56,687.097 1592.12,687.097 1592.68,687.097 1593.24,687.097 1593.8,687.097 1594.36,687.097 1594.92,687.097 1595.47,687.097 1596.03,687.097 1596.59,687.097 1597.15,687.097 1597.71,687.097 1598.27,687.097 1598.83,687.097 1599.39,687.097 1599.95,687.097 1600.51,687.097 1601.07,687.097 1601.63,687.097 1602.19,687.097 1602.74,687.097 1603.3,687.097 1603.86,687.097 1604.42,687.097 1604.98,687.097 1605.54,687.097 1606.1,687.097 1606.66,687.097 1607.22,687.097 1607.78,687.097 1608.34,687.097 1608.9,687.097 1609.46,687.097 1610.02,687.097 1610.57,687.097 1611.13,687.097 1611.69,687.097 1612.25,687.097 1612.81,687.097 1613.37,687.097 1613.93,687.097 1614.49,687.097 1615.05,687.097 1615.61,687.097 1616.17,687.097 1616.73,687.097 1617.29,687.097 1617.84,687.097 1618.4,687.097 1618.96,687.097 1619.52,687.097 1620.08,687.097 1620.64,687.097 1621.2,687.097 1621.76,687.097 1622.32,687.097 1622.88,687.097 1623.44,687.097 1624,687.097 1624.56,687.097 1625.11,687.097 1625.67,687.097 1626.23,687.097 1626.79,687.097 1627.35,687.097 1627.91,687.097 1628.47,687.097 1629.03,687.097 1629.59,687.097 1630.15,687.097 1630.71,687.097 1631.27,687.097 1631.83,687.097 1632.39,687.097 1632.94,687.097 1633.5,687.097 1634.06,687.097 1634.62,687.097 1635.18,687.097 1635.74,687.097 1636.3,687.097 1636.86,687.097 1637.42,687.097 1637.98,687.097 1638.54,687.097 1639.1,687.097 1639.66,687.097 1640.21,687.097 1640.77,687.097 1641.33,687.097 1641.89,687.097 1642.45,687.097 1643.01,687.097 1643.57,687.097 1644.13,687.097 1644.69,687.097 1645.25,687.097 1645.81,687.097 1646.37,687.097 1646.93,687.097 1647.48,687.097 1648.04,687.097 1648.6,687.097 1649.16,687.097 1649.72,687.097 1650.28,687.097 1650.84,687.097 1651.4,687.097 1651.96,687.097 1652.52,687.097 1653.08,687.097 1653.64,687.097 1654.2,687.097 1654.76,687.097 1655.31,687.097 1655.87,687.097 1656.43,687.097 1656.99,687.097 1657.55,687.097 1658.11,687.097 1658.67,687.097 1659.23,687.097 1659.79,687.097 1660.35,687.097 1660.91,687.097 1661.47,687.097 1662.03,687.097 1662.58,687.097 1663.14,687.097 1663.7,687.097 1664.26,687.097 1664.82,687.097 1665.38,687.097 1665.94,687.097 1666.5,687.097 1667.06,687.097 1667.62,687.097 1668.18,687.097 1668.74,687.097 1669.3,687.097 1669.85,687.097 1670.41,687.097 1670.97,687.097 1671.53,687.097 1672.09,687.097 1672.65,687.097 1673.21,687.097 1673.77,687.097 1674.33,687.097 1674.89,687.097 1675.45,687.097 1676.01,687.097 1676.57,687.097 1677.13,687.097 1677.68,687.097 1678.24,687.097 1678.8,687.097 1679.36,687.097 1679.92,687.097 1680.48,687.097 1681.04,687.097 1681.6,687.097 1682.16,687.097 1682.72,687.097 1683.28,687.097 1683.84,687.097 1684.4,687.097 1684.95,687.097 1685.51,687.097 1686.07,687.097 1686.63,687.097 1687.19,687.097 1687.75,687.097 1688.31,687.097 1688.87,687.097 1689.43,687.097 1689.99,687.097 1690.55,687.097 1691.11,687.097 1691.67,687.097 1692.23,687.097 1692.78,687.097 1693.34,687.097 1693.9,687.097 1694.46,687.097 1695.02,687.097 1695.58,687.097 1696.14,687.097 1696.7,687.097 1697.26,687.097 1697.82,687.097 1698.38,687.097 1698.94,687.097 1699.5,687.097 1700.05,687.097 1700.61,687.097 1701.17,687.097 1701.73,687.097 1702.29,687.097 1702.85,687.097 1703.41,687.097 1703.97,687.097 1704.53,687.097 1705.09,687.097 1705.65,687.097 1706.21,687.097 1706.77,687.097 1707.32,687.097 1707.88,687.097 1708.44,687.097 1709,687.097 1709.56,687.097 1710.12,687.097 1710.68,687.097 1711.24,687.097 1711.8,687.097 1712.36,687.097 1712.92,687.097 1713.48,687.097 1714.04,687.097 1714.6,687.097 1715.15,687.097 1715.71,687.097 1716.27,687.097 1716.83,687.097 1717.39,687.097 1717.95,687.097 1718.51,687.097 1719.07,687.097 1719.63,687.097 1720.19,687.097 1720.75,687.097 1721.31,687.097 1721.87,687.097 1722.42,687.097 1722.98,687.097 1723.54,687.097 1724.1,687.097 1724.66,687.097 1725.22,687.097 1725.78,687.097 1726.34,687.097 1726.9,687.097 1727.46,687.097 1728.02,687.097 1728.58,687.097 1729.14,687.097 1729.69,687.097 1730.25,687.097 1730.81,687.097 1731.37,687.097 1731.93,687.097 1732.49,687.097 1733.05,687.097 1733.61,687.097 1734.17,687.097 1734.73,687.097 1735.29,687.097 1735.85,687.097 1736.41,687.097 1736.97,687.097 1737.52,687.097 1738.08,687.097 1738.64,687.097 1739.2,687.097 1739.76,687.097 1740.32,687.097 1740.88,687.097 1741.44,687.097 1742,687.097 1742.56,687.097 1743.12,687.097 1743.68,687.097 1744.24,687.097 1744.79,687.097 1745.35,687.097 1745.91,687.097 1746.47,687.097 1747.03,687.097 1747.59,687.097 1748.15,687.097 1748.71,687.097 1749.27,687.097 1749.83,687.097 1750.39,687.097 1750.95,687.097 1751.51,687.097 1752.06,687.097 1752.62,687.097 1753.18,687.097 1753.74,687.097 1754.3,687.097 1754.86,687.097 1755.42,687.097 1755.98,687.097 1756.54,687.097 1757.1,687.097 1757.66,687.097 1758.22,687.097 1758.78,687.097 1759.34,687.097 1759.89,687.097 1760.45,687.097 1761.01,687.097 1761.57,687.097 1762.13,687.097 1762.69,687.097 1763.25,687.097 1763.81,687.097 1764.37,687.097 1764.93,687.097 1765.49,687.097 1766.05,687.097 1766.61,687.097 1767.16,687.097 1767.72,687.097 1768.28,687.097 1768.84,687.097 1769.4,687.097 1769.96,687.097 1770.52,687.097 1771.08,687.097 1771.64,687.097 1772.2,687.097 1772.76,687.097 1773.32,687.097 1773.88,687.097 1774.43,687.097 1774.99,687.097 1775.55,687.097 1776.11,687.097 1776.67,687.097 1777.23,687.097 1777.79,687.097 1778.35,687.097 1778.91,687.097 1779.47,687.097 1780.03,687.097 1780.59,687.097 1781.15,687.097 1781.71,687.097 1782.26,687.097 1782.82,687.097 1783.38,687.097 1783.94,687.097 1784.5,687.097 1785.06,687.097 1785.62,687.097 1786.18,687.097 1786.74,687.097 1787.3,687.097 1787.86,687.097 1788.42,687.097 1788.98,687.097 1789.53,687.097 1790.09,687.097 1790.65,687.097 1791.21,687.097 1791.77,687.097 1792.33,687.097 1792.89,687.097 1793.45,687.097 1794.01,687.097 1794.57,687.097 1795.13,687.097 1795.69,687.097 1796.25,687.097 1796.8,687.097 1797.36,687.097 1797.92,687.097 1798.48,687.097 1799.04,687.097 1799.6,687.097 1800.16,687.097 1800.72,687.097 1801.28,687.097 1801.84,687.097 1802.4,687.097 1802.96,687.097 1803.52,687.097 1804.08,687.097 1804.63,687.097 1805.19,687.097 1805.75,687.097 1806.31,687.097 1806.87,687.097 1807.43,687.097 1807.99,687.097 1808.55,687.097 1809.11,687.097 1809.67,687.097 1810.23,687.097 1810.79,687.097 1811.35,687.097 1811.9,687.097 1812.46,687.097 1813.02,687.097 1813.58,687.097 1814.14,687.097 1814.7,687.097 1815.26,687.097 1815.82,687.097 1816.38,687.097 1816.94,687.097 1817.5,687.097 1818.06,687.097 1818.62,687.097 1819.18,687.097 1819.73,687.097 1820.29,687.097 1820.85,687.097 1821.41,687.097 1821.97,687.097 1822.53,687.097 1823.09,687.097 1823.65,687.097 1824.21,687.097 1824.77,687.097 1825.33,687.097 1825.89,687.097 1826.45,687.097 1827,687.097 1827.56,687.097 1828.12,687.097 1828.68,687.097 1829.24,687.097 1829.8,687.097 1830.36,687.097 1830.92,687.097 1831.48,687.097 1832.04,687.097 1832.6,687.097 1833.16,687.097 1833.72,687.097 1834.27,687.097 1834.83,687.097 1835.39,687.097 1835.95,687.097 1836.51,687.097 1837.07,687.097 1837.63,687.097 1838.19,687.097 \"/>\n<path clip-path=\"url(#clip403)\" d=\"M720.247 685.536 L720.806 685.536 L721.365 685.536 L721.924 685.536 L722.484 685.536 L723.043 685.536 L723.602 685.536 L724.161 685.536 L724.721 685.536 L725.28 685.536 L725.839 685.536 L726.398 685.536 L726.958 685.536 L727.517 685.536 L728.076 685.536 L728.635 685.536 L729.195 685.536 L729.754 685.536 L730.313 685.536 L730.872 685.536 L731.432 685.536 L731.991 685.536 L732.55 685.536 L733.109 685.536 L733.669 685.536 L734.228 685.536 L734.787 685.536 L735.346 685.536 L735.906 685.536 L736.465 685.536 L737.024 685.536 L737.583 685.536 L738.143 685.536 L738.702 685.536 L739.261 685.536 L739.82 685.536 L740.38 685.536 L740.939 685.536 L741.498 685.536 L742.057 685.536 L742.617 685.536 L743.176 685.536 L743.735 685.536 L744.294 685.536 L744.854 685.536 L745.413 685.536 L745.972 685.536 L746.531 685.536 L747.091 685.536 L747.65 685.536 L748.209 685.536 L748.768 685.536 L749.328 685.536 L749.887 685.536 L750.446 685.536 L751.005 685.536 L751.565 685.536 L752.124 685.536 L752.683 685.536 L753.242 685.536 L753.802 685.536 L754.361 685.536 L754.92 685.536 L755.479 685.536 L756.039 685.536 L756.598 685.536 L757.157 685.536 L757.716 685.536 L758.276 685.536 L758.835 685.536 L759.394 685.536 L759.953 685.536 L760.513 685.536 L761.072 685.536 L761.631 685.536 L762.19 685.536 L762.75 685.536 L763.309 685.536 L763.868 685.536 L764.427 685.536 L764.987 685.536 L765.546 685.536 L766.105 685.536 L766.664 685.536 L767.224 685.536 L767.783 685.536 L768.342 685.536 L768.901 685.536 L769.461 685.536 L770.02 685.536 L770.579 685.536 L771.138 685.536 L771.698 685.536 L772.257 685.536 L772.816 685.536 L773.375 685.536 L773.935 685.536 L774.494 685.536 L775.053 685.536 L775.612 685.536 L776.172 685.536 L776.731 685.536 L777.29 685.536 L777.849 685.536 L778.409 685.536 L778.968 685.536 L779.527 685.536 L780.086 685.536 L780.646 685.536 L781.205 685.536 L781.764 685.536 L782.323 685.536 L782.883 685.536 L783.442 685.536 L784.001 685.536 L784.56 685.536 L785.12 685.536 L785.679 685.536 L786.238 685.536 L786.797 685.536 L787.357 685.536 L787.916 685.536 L788.475 685.536 L789.034 685.536 L789.594 685.536 L790.153 685.536 L790.712 685.536 L791.271 685.536 L791.831 685.536 L792.39 685.536 L792.949 685.536 L793.508 685.536 L794.068 685.536 L794.627 685.536 L795.186 685.536 L795.745 685.536 L796.305 685.536 L796.864 685.536 L797.423 685.536 L797.982 685.536 L798.542 685.536 L799.101 685.536 L799.66 685.536 L800.219 685.536 L800.779 685.536 L801.338 685.536 L801.897 685.536 L802.456 685.536 L803.016 685.536 L803.575 685.536 L804.134 685.536 L804.693 685.536 L805.253 685.536 L805.812 685.536 L806.371 685.536 L806.931 685.536 L807.49 685.536 L808.049 685.536 L808.608 685.536 L809.168 685.536 L809.727 685.536 L810.286 685.536 L810.845 685.536 L811.405 685.536 L811.964 685.536 L812.523 685.536 L813.082 685.536 L813.642 685.536 L814.201 685.536 L814.76 685.536 L815.319 685.536 L815.879 685.536 L816.438 685.536 L816.997 685.536 L817.556 685.536 L818.116 685.536 L818.675 685.536 L819.234 685.536 L819.793 685.536 L820.353 685.536 L820.912 685.536 L821.471 685.536 L822.03 685.536 L822.59 685.536 L823.149 685.536 L823.708 685.536 L824.267 685.536 L824.827 685.536 L825.386 685.536 L825.945 685.536 L826.504 685.536 L827.064 685.536 L827.623 685.536 L828.182 685.536 L828.741 685.536 L829.301 685.536 L829.86 685.536 L830.419 685.536 L830.978 685.536 L831.538 685.536 L832.097 685.536 L832.656 685.536 L833.215 685.536 L833.775 685.536 L834.334 685.536 L834.893 685.536 L835.452 685.536 L836.012 685.536 L836.571 685.536 L837.13 685.536 L837.689 685.536 L838.249 685.536 L838.808 685.536 L839.367 685.536 L839.926 685.536 L840.486 685.536 L841.045 685.536 L841.604 685.536 L842.163 685.536 L842.723 685.536 L843.282 685.536 L843.841 685.536 L844.4 685.536 L844.96 685.536 L845.519 685.536 L846.078 685.536 L846.637 685.536 L847.197 685.536 L847.756 685.536 L848.315 685.536 L848.874 685.536 L849.434 685.536 L849.993 685.536 L850.552 685.536 L851.111 685.536 L851.671 685.536 L852.23 685.536 L852.789 685.536 L853.348 685.536 L853.908 685.536 L854.467 685.536 L855.026 685.536 L855.585 685.536 L856.145 685.536 L856.704 685.536 L857.263 685.536 L857.822 685.536 L858.382 685.536 L858.941 685.536 L859.5 685.536 L860.059 685.536 L860.619 685.536 L861.178 685.536 L861.737 685.536 L862.296 685.536 L862.856 685.536 L863.415 685.536 L863.974 685.536 L864.533 685.536 L865.093 685.536 L865.652 685.536 L866.211 685.536 L866.77 685.536 L867.33 685.536 L867.889 685.536 L868.448 685.536 L869.007 685.536 L869.567 685.536 L870.126 685.536 L870.685 685.536 L871.244 685.536 L871.804 685.536 L872.363 685.536 L872.922 685.536 L873.481 685.536 L874.041 685.536 L874.6 685.536 L875.159 685.536 L875.718 685.536 L876.278 685.536 L876.837 685.536 L877.396 685.536 L877.955 685.536 L878.515 685.536 L879.074 685.536 L879.633 685.536 L880.192 685.536 L880.752 685.536 L881.311 685.536 L881.87 685.536 L882.429 685.536 L882.989 685.536 L883.548 685.536 L884.107 685.536 L884.666 685.536 L885.226 685.536 L885.785 685.536 L886.344 685.536 L886.903 685.536 L887.463 685.536 L888.022 685.536 L888.581 685.536 L889.14 685.536 L889.7 685.536 L890.259 685.536 L890.818 685.536 L891.377 685.536 L891.937 685.536 L892.496 685.536 L893.055 685.536 L893.614 685.536 L894.174 685.536 L894.733 685.536 L895.292 685.536 L895.851 685.536 L896.411 685.536 L896.97 685.536 L897.529 685.536 L898.088 685.536 L898.648 685.536 L899.207 685.536 L899.766 685.536 L900.325 685.536 L900.885 685.536 L901.444 685.536 L902.003 685.536 L902.562 685.536 L903.122 685.536 L903.681 685.536 L904.24 685.536 L904.799 685.536 L905.359 685.536 L905.918 685.536 L906.477 685.536 L907.036 685.536 L907.596 685.536 L908.155 685.536 L908.714 685.536 L909.273 685.536 L909.833 685.536 L910.392 685.536 L910.951 685.536 L911.51 685.536 L912.07 685.536 L912.629 685.536 L913.188 685.536 L913.747 685.536 L914.307 685.536 L914.866 685.536 L915.425 685.536 L915.984 685.536 L916.544 685.536 L917.103 685.536 L917.662 685.536 L918.221 685.536 L918.781 685.536 L919.34 685.536 L919.899 685.536 L920.458 685.536 L921.018 685.536 L921.577 685.536 L922.136 685.536 L922.695 685.536 L923.255 685.536 L923.814 685.536 L924.373 685.536 L924.932 685.536 L925.492 685.536 L926.051 685.536 L926.61 685.536 L927.169 685.536 L927.729 685.536 L928.288 685.536 L928.847 685.536 L929.406 685.536 L929.966 685.536 L930.525 685.536 L931.084 685.536 L931.644 685.536 L932.203 685.536 L932.762 685.536 L933.321 685.536 L933.881 685.536 L934.44 685.536 L934.999 685.536 L935.558 685.536 L936.118 685.536 L936.677 685.536 L937.236 685.536 L937.795 685.536 L938.355 685.536 L938.914 685.536 L939.473 685.536 L940.032 685.536 L940.592 685.536 L941.151 685.536 L941.71 685.536 L942.269 685.536 L942.829 685.536 L943.388 685.536 L943.947 685.536 L944.506 685.536 L945.066 685.536 L945.625 685.536 L946.184 685.536 L946.743 685.536 L947.303 685.536 L947.862 685.536 L948.421 685.536 L948.98 685.536 L949.54 685.536 L950.099 685.536 L950.658 685.536 L951.217 685.536 L951.777 685.536 L952.336 685.536 L952.895 685.536 L953.454 685.536 L954.014 685.536 L954.573 685.536 L955.132 685.536 L955.691 685.536 L956.251 685.536 L956.81 685.536 L957.369 685.536 L957.928 685.536 L958.488 685.536 L959.047 685.536 L959.606 685.536 L960.165 685.536 L960.725 685.536 L961.284 685.536 L961.843 685.536 L962.402 685.536 L962.962 685.536 L963.521 685.536 L964.08 685.536 L964.639 685.536 L965.199 685.536 L965.758 685.536 L966.317 685.536 L966.876 685.536 L967.436 685.536 L967.995 685.536 L968.554 685.536 L969.113 685.536 L969.673 685.536 L970.232 685.536 L970.791 685.536 L971.35 685.536 L971.91 685.536 L972.469 685.536 L973.028 685.536 L973.587 685.536 L974.147 685.536 L974.706 685.536 L975.265 685.536 L975.824 685.536 L976.384 685.536 L976.943 685.536 L977.502 685.536 L978.061 685.536 L978.621 685.536 L979.18 685.536 L979.739 685.536 L980.298 685.536 L980.858 685.536 L981.417 685.536 L981.976 685.536 L982.535 685.536 L983.095 685.536 L983.654 685.536 L984.213 685.536 L984.772 685.536 L985.332 685.536 L985.891 685.536 L986.45 685.536 L987.009 685.536 L987.569 685.536 L988.128 685.536 L988.687 685.536 L989.246 685.536 L989.806 685.536 L990.365 685.536 L990.924 685.536 L991.483 685.536 L992.043 685.536 L992.602 685.536 L993.161 685.536 L993.72 685.536 L994.28 685.536 L994.839 685.536 L995.398 685.536 L995.957 685.536 L996.517 685.536 L997.076 685.536 L997.635 685.536 L998.194 685.536 L998.754 685.536 L999.313 685.536 L999.872 685.536 L1000.43 685.536 L1000.99 685.536 L1001.55 685.536 L1002.11 685.536 L1002.67 685.536 L1003.23 685.536 L1003.79 685.536 L1004.35 685.536 L1004.91 685.536 L1005.46 685.536 L1006.02 685.536 L1006.58 685.536 L1007.14 685.536 L1007.7 685.536 L1008.26 685.536 L1008.82 685.536 L1009.38 685.536 L1009.94 685.536 L1010.5 685.536 L1011.06 685.536 L1011.62 685.536 L1012.18 685.536 L1012.73 685.536 L1013.29 685.536 L1013.85 685.536 L1014.41 685.536 L1014.97 685.536 L1015.53 685.536 L1016.09 685.536 L1016.65 685.536 L1017.21 685.536 L1017.77 685.536 L1018.33 685.536 L1018.89 685.536 L1019.45 685.536 L1020.01 685.536 L1020.56 685.536 L1021.12 685.536 L1021.68 685.536 L1022.24 685.536 L1022.8 685.536 L1023.36 685.536 L1023.92 685.536 L1024.48 685.536 L1025.04 685.536 L1025.6 685.536 L1026.16 685.536 L1026.72 685.536 L1027.28 685.536 L1027.83 685.536 L1028.39 685.536 L1028.95 685.536 L1029.51 685.536 L1030.07 685.536 L1030.63 685.536 L1031.19 685.536 L1031.75 685.536 L1032.31 685.536 L1032.87 685.536 L1033.43 685.536 L1033.99 685.536 L1034.55 685.536 L1035.1 685.536 L1035.66 685.536 L1036.22 685.536 L1036.78 685.536 L1037.34 685.536 L1037.9 685.536 L1038.46 685.536 L1039.02 685.536 L1039.58 685.536 L1040.14 685.536 L1040.7 685.536 L1041.26 685.536 L1041.82 685.536 L1042.38 685.536 L1042.93 685.536 L1043.49 685.536 L1044.05 685.536 L1044.61 685.536 L1045.17 685.536 L1045.73 685.536 L1046.29 685.536 L1046.85 685.536 L1047.41 685.536 L1047.97 685.536 L1048.53 685.536 L1049.09 685.536 L1049.65 685.536 L1050.2 685.536 L1050.76 685.536 L1051.32 685.536 L1051.88 685.536 L1052.44 685.536 L1053 685.536 L1053.56 685.536 L1054.12 685.536 L1054.68 685.536 L1055.24 685.536 L1055.8 685.536 L1056.36 685.536 L1056.92 685.536 L1057.48 685.536 L1058.03 685.536 L1058.59 685.536 L1059.15 685.536 L1059.71 685.536 L1060.27 685.536 L1060.83 685.536 L1061.39 685.536 L1061.95 685.536 L1062.51 685.536 L1063.07 685.536 L1063.63 685.536 L1064.19 685.536 L1064.75 685.536 L1065.3 685.536 L1065.86 685.536 L1066.42 685.536 L1066.98 685.536 L1067.54 685.536 L1068.1 685.536 L1068.66 685.536 L1069.22 685.536 L1069.78 685.536 L1070.34 685.536 L1070.9 685.536 L1071.46 685.536 L1072.02 685.536 L1072.57 685.536 L1073.13 685.536 L1073.69 685.536 L1074.25 685.536 L1074.81 685.536 L1075.37 685.536 L1075.93 685.536 L1076.49 685.536 L1077.05 685.536 L1077.61 685.536 L1078.17 685.536 L1078.73 685.536 L1079.29 685.536 L1079.85 685.536 L1080.4 685.536 L1080.96 685.536 L1081.52 685.536 L1082.08 685.536 L1082.64 685.536 L1083.2 685.536 L1083.76 685.536 L1084.32 685.536 L1084.88 685.536 L1085.44 685.536 L1086 685.536 L1086.56 685.536 L1087.12 685.536 L1087.67 685.536 L1088.23 685.536 L1088.79 685.536 L1089.35 685.536 L1089.91 685.536 L1090.47 685.536 L1091.03 685.536 L1091.59 685.536 L1092.15 685.536 L1092.71 685.536 L1093.27 685.536 L1093.83 685.536 L1094.39 685.536 L1094.94 685.536 L1095.5 685.536 L1096.06 685.536 L1096.62 685.536 L1097.18 685.536 L1097.74 685.536 L1098.3 685.536 L1098.86 685.536 L1099.42 685.536 L1099.98 685.536 L1100.54 685.536 L1101.1 685.536 L1101.66 685.536 L1102.22 685.536 L1102.77 685.536 L1103.33 685.536 L1103.89 685.536 L1104.45 685.536 L1105.01 685.536 L1105.57 685.536 L1106.13 685.536 L1106.69 685.536 L1107.25 685.536 L1107.81 685.536 L1108.37 685.536 L1108.93 685.536 L1109.49 685.536 L1110.04 685.536 L1110.6 685.536 L1111.16 685.536 L1111.72 685.536 L1112.28 685.536 L1112.84 685.536 L1113.4 685.536 L1113.96 685.536 L1114.52 685.536 L1115.08 685.536 L1115.64 685.536 L1116.2 685.536 L1116.76 685.536 L1117.31 685.536 L1117.87 685.536 L1118.43 685.536 L1118.99 685.536 L1119.55 685.536 L1120.11 685.536 L1120.67 685.536 L1121.23 685.536 L1121.79 685.536 L1122.35 685.536 L1122.91 685.536 L1123.47 685.536 L1124.03 685.536 L1124.59 685.536 L1125.14 685.536 L1125.7 685.536 L1126.26 685.536 L1126.82 685.536 L1127.38 685.536 L1127.94 685.536 L1128.5 685.536 L1129.06 685.536 L1129.62 685.536 L1130.18 685.536 L1130.74 685.536 L1131.3 685.536 L1131.86 685.536 L1132.41 685.536 L1132.97 685.536 L1133.53 685.536 L1134.09 685.536 L1134.65 685.536 L1135.21 685.536 L1135.77 685.536 L1136.33 685.536 L1136.89 685.536 L1137.45 685.536 L1138.01 685.536 L1138.57 685.536 L1139.13 685.536 L1139.68 685.536 L1140.24 685.536 L1140.8 685.536 L1141.36 685.536 L1141.92 685.536 L1142.48 685.536 L1143.04 685.536 L1143.6 685.536 L1144.16 685.536 L1144.72 685.536 L1145.28 685.536 L1145.84 685.536 L1146.4 685.536 L1146.96 685.536 L1147.51 685.536 L1148.07 685.536 L1148.63 685.536 L1149.19 685.536 L1149.75 685.536 L1150.31 685.536 L1150.87 685.536 L1151.43 685.536 L1151.99 685.536 L1152.55 685.536 L1153.11 685.536 L1153.67 685.536 L1154.23 685.536 L1154.78 685.536 L1155.34 685.536 L1155.9 685.536 L1156.46 685.536 L1157.02 685.536 L1157.58 685.536 L1158.14 685.536 L1158.7 685.536 L1159.26 685.536 L1159.82 685.536 L1160.38 685.536 L1160.94 685.536 L1161.5 685.536 L1162.05 685.536 L1162.61 685.536 L1163.17 685.536 L1163.73 685.536 L1164.29 685.536 L1164.85 685.536 L1165.41 685.536 L1165.97 685.536 L1166.53 685.536 L1167.09 685.536 L1167.65 685.536 L1168.21 685.536 L1168.77 685.536 L1169.33 685.536 L1169.88 685.536 L1170.44 685.536 L1171 685.536 L1171.56 685.536 L1172.12 685.536 L1172.68 685.536 L1173.24 685.536 L1173.8 685.536 L1174.36 685.536 L1174.92 685.536 L1175.48 685.536 L1176.04 685.536 L1176.6 685.536 L1177.15 685.536 L1177.71 685.536 L1178.27 685.536 L1178.83 685.536 L1179.39 685.536 L1179.95 685.536 L1180.51 685.536 L1181.07 685.536 L1181.63 685.536 L1182.19 685.536 L1182.75 685.536 L1183.31 685.536 L1183.87 685.536 L1184.43 685.536 L1184.98 685.536 L1185.54 685.536 L1186.1 685.536 L1186.66 685.536 L1187.22 685.536 L1187.78 685.536 L1188.34 685.536 L1188.9 685.536 L1189.46 685.536 L1190.02 685.536 L1190.58 685.536 L1191.14 685.536 L1191.7 685.536 L1192.25 685.536 L1192.81 685.536 L1193.37 685.536 L1193.93 685.536 L1194.49 685.536 L1195.05 685.536 L1195.61 685.536 L1196.17 685.536 L1196.73 685.536 L1197.29 685.536 L1197.85 685.536 L1198.41 685.536 L1198.97 685.536 L1199.52 685.536 L1200.08 685.536 L1200.64 685.536 L1201.2 685.536 L1201.76 685.536 L1202.32 685.536 L1202.88 685.536 L1203.44 685.536 L1204 685.536 L1204.56 685.536 L1205.12 685.536 L1205.68 685.536 L1206.24 685.536 L1206.8 685.536 L1207.35 685.536 L1207.91 685.536 L1208.47 685.536 L1209.03 685.536 L1209.59 685.536 L1210.15 685.536 L1210.71 685.536 L1211.27 685.536 L1211.83 685.536 L1212.39 685.536 L1212.95 685.536 L1213.51 685.536 L1214.07 685.536 L1214.62 685.536 L1215.18 685.536 L1215.74 685.536 L1216.3 685.536 L1216.86 685.536 L1217.42 685.536 L1217.98 685.536 L1218.54 685.536 L1219.1 685.536 L1219.66 685.536 L1220.22 685.536 L1220.78 685.536 L1221.34 685.536 L1221.89 685.536 L1222.45 685.536 L1223.01 685.536 L1223.57 685.536 L1224.13 685.536 L1224.69 685.536 L1225.25 685.536 L1225.81 685.536 L1226.37 685.536 L1226.93 685.536 L1227.49 685.536 L1228.05 685.536 L1228.61 685.536 L1229.17 685.536 L1229.72 685.536 L1230.28 685.536 L1230.84 685.536 L1231.4 685.536 L1231.96 685.536 L1232.52 685.536 L1233.08 685.536 L1233.64 685.536 L1234.2 685.536 L1234.76 685.536 L1235.32 685.536 L1235.88 685.536 L1236.44 685.536 L1236.99 685.536 L1237.55 685.536 L1238.11 685.536 L1238.67 685.536 L1239.23 685.536 L1239.79 685.536 L1240.35 685.536 L1240.91 685.536 L1241.47 685.536 L1242.03 685.536 L1242.59 685.536 L1243.15 685.536 L1243.71 685.536 L1244.26 685.536 L1244.82 685.536 L1245.38 685.536 L1245.94 685.536 L1246.5 685.536 L1247.06 685.536 L1247.62 685.536 L1248.18 685.536 L1248.74 685.536 L1249.3 685.536 L1249.86 685.536 L1250.42 685.536 L1250.98 685.536 L1251.54 685.536 L1252.09 685.536 L1252.65 685.536 L1253.21 685.536 L1253.77 685.536 L1254.33 685.536 L1254.89 685.536 L1255.45 685.536 L1256.01 685.536 L1256.57 685.536 L1257.13 685.536 L1257.69 685.536 L1258.25 685.536 L1258.81 685.536 L1259.36 685.536 L1259.92 685.536 L1260.48 685.536 L1261.04 685.536 L1261.6 685.536 L1262.16 685.536 L1262.72 685.536 L1263.28 685.536 L1263.84 685.536 L1264.4 685.536 L1264.96 685.536 L1265.52 685.536 L1266.08 685.536 L1266.63 685.536 L1267.19 685.536 L1267.75 685.536 L1268.31 685.536 L1268.87 685.536 L1269.43 685.536 L1269.99 685.536 L1270.55 685.536 L1271.11 685.536 L1271.67 685.536 L1272.23 685.536 L1272.79 685.536 L1273.35 685.536 L1273.91 685.536 L1274.46 685.536 L1275.02 685.536 L1275.58 685.536 L1276.14 685.536 L1276.7 685.536 L1277.26 685.536 L1277.82 685.536 L1278.38 685.536 L1278.94 685.536 L1279.5 685.536 L1280.06 685.536 L1280.62 685.536 L1281.18 685.536 L1281.73 685.536 L1282.29 685.536 L1282.85 685.536 L1283.41 685.536 L1283.97 685.536 L1284.53 685.536 L1285.09 685.536 L1285.65 685.536 L1286.21 685.536 L1286.77 685.536 L1287.33 685.536 L1287.89 685.536 L1288.45 685.536 L1289 685.536 L1289.56 685.536 L1290.12 685.536 L1290.68 685.536 L1291.24 685.536 L1291.8 685.536 L1292.36 685.536 L1292.92 685.536 L1293.48 685.536 L1294.04 685.536 L1294.6 685.536 L1295.16 685.536 L1295.72 685.536 L1296.28 685.536 L1296.83 685.536 L1297.39 685.536 L1297.95 685.536 L1298.51 685.536 L1299.07 685.536 L1299.63 685.536 L1300.19 685.536 L1300.75 685.536 L1301.31 685.536 L1301.87 685.536 L1302.43 685.536 L1302.99 685.536 L1303.55 685.536 L1304.1 685.536 L1304.66 685.536 L1305.22 685.536 L1305.78 685.536 L1306.34 685.536 L1306.9 685.536 L1307.46 685.536 L1308.02 685.536 L1308.58 685.536 L1309.14 685.536 L1309.7 685.536 L1310.26 685.536 L1310.82 685.536 L1311.38 685.536 L1311.93 685.536 L1312.49 685.536 L1313.05 685.536 L1313.61 685.536 L1314.17 685.536 L1314.73 685.536 L1315.29 685.536 L1315.85 685.536 L1316.41 685.536 L1316.97 685.536 L1317.53 685.536 L1318.09 685.536 L1318.65 685.536 L1319.2 685.536 L1319.76 685.536 L1320.32 685.536 L1320.88 685.536 L1321.44 685.536 L1322 685.536 L1322.56 685.536 L1323.12 685.536 L1323.68 685.536 L1324.24 685.536 L1324.8 685.536 L1325.36 685.536 L1325.92 685.536 L1326.47 685.536 L1327.03 685.536 L1327.59 685.536 L1328.15 685.536 L1328.71 685.536 L1329.27 685.536 L1329.83 685.536 L1330.39 685.536 L1330.95 685.536 L1331.51 685.536 L1332.07 685.536 L1332.63 685.536 L1333.19 685.536 L1333.75 685.536 L1334.3 685.536 L1334.86 685.536 L1335.42 685.536 L1335.98 685.536 L1336.54 685.536 L1337.1 685.536 L1337.66 685.536 L1338.22 685.536 L1338.78 685.536 L1339.34 685.536 L1339.9 685.536 L1340.46 685.536 L1341.02 685.536 L1341.57 685.536 L1342.13 685.536 L1342.69 685.536 L1343.25 685.536 L1343.81 685.536 L1344.37 685.536 L1344.93 685.536 L1345.49 685.536 L1346.05 685.536 L1346.61 685.536 L1347.17 685.536 L1347.73 685.536 L1348.29 685.536 L1348.84 685.536 L1349.4 685.536 L1349.96 685.536 L1350.52 685.536 L1351.08 685.536 L1351.64 685.536 L1352.2 685.536 L1352.76 685.536 L1353.32 685.536 L1353.88 685.536 L1354.44 685.536 L1355 685.536 L1355.56 685.536 L1356.12 685.536 L1356.67 685.536 L1357.23 685.536 L1357.79 685.536 L1358.35 685.536 L1358.91 685.536 L1359.47 685.536 L1360.03 685.536 L1360.59 685.536 L1361.15 685.536 L1361.71 685.536 L1362.27 685.536 L1362.83 685.536 L1363.39 685.536 L1363.94 685.536 L1364.5 685.536 L1365.06 685.536 L1365.62 685.536 L1366.18 685.536 L1366.74 685.536 L1367.3 685.536 L1367.86 685.536 L1368.42 685.536 L1368.98 685.536 L1369.54 685.536 L1370.1 685.536 L1370.66 685.536 L1371.21 685.536 L1371.77 685.536 L1372.33 685.536 L1372.89 685.536 L1373.45 685.536 L1374.01 685.536 L1374.57 685.536 L1375.13 685.536 L1375.69 685.536 L1376.25 685.536 L1376.81 685.536 L1377.37 685.536 L1377.93 685.536 L1378.49 685.536 L1379.04 685.536 L1379.6 685.536 L1380.16 685.536 L1380.72 685.536 L1381.28 685.536 L1381.84 685.536 L1382.4 685.536 L1382.96 685.536 L1383.52 685.536 L1384.08 685.536 L1384.64 685.536 L1385.2 685.536 L1385.76 685.536 L1386.31 685.536 L1386.87 685.536 L1387.43 685.536 L1387.99 685.536 L1388.55 685.536 L1389.11 685.536 L1389.67 685.536 L1390.23 685.536 L1390.79 685.536 L1391.35 685.536 L1391.91 685.536 L1392.47 685.536 L1393.03 685.536 L1393.58 685.536 L1394.14 685.536 L1394.7 685.536 L1395.26 685.536 L1395.82 685.536 L1396.38 685.536 L1396.94 685.536 L1397.5 685.536 L1398.06 685.536 L1398.62 685.536 L1399.18 685.536 L1399.74 685.536 L1400.3 685.536 L1400.86 685.536 L1401.41 685.536 L1401.97 685.536 L1402.53 685.536 L1403.09 685.536 L1403.65 685.536 L1404.21 685.536 L1404.77 685.536 L1405.33 685.536 L1405.89 685.536 L1406.45 685.536 L1407.01 685.536 L1407.57 685.536 L1408.13 685.536 L1408.68 685.536 L1409.24 685.536 L1409.8 685.536 L1410.36 685.536 L1410.92 685.536 L1411.48 685.536 L1412.04 685.536 L1412.6 685.536 L1413.16 685.536 L1413.72 685.536 L1414.28 685.536 L1414.84 685.536 L1415.4 685.536 L1415.95 685.536 L1416.51 685.536 L1417.07 685.536 L1417.63 685.536 L1418.19 685.536 L1418.75 685.536 L1419.31 685.536 L1419.87 685.536 L1420.43 685.536 L1420.99 685.536 L1421.55 685.536 L1422.11 685.536 L1422.67 685.536 L1423.23 685.536 L1423.78 685.536 L1424.34 685.536 L1424.9 685.536 L1425.46 685.536 L1426.02 685.536 L1426.58 685.536 L1427.14 685.536 L1427.7 685.536 L1428.26 685.536 L1428.82 685.536 L1429.38 685.536 L1429.94 685.536 L1430.5 685.536 L1431.05 685.536 L1431.61 685.536 L1432.17 685.536 L1432.73 685.536 L1433.29 685.536 L1433.85 685.536 L1434.41 685.536 L1434.97 685.536 L1435.53 685.536 L1436.09 685.536 L1436.65 685.536 L1437.21 685.536 L1437.77 685.536 L1438.33 685.536 L1438.88 685.536 L1439.44 685.536 L1440 685.536 L1440.56 685.536 L1441.12 685.536 L1441.68 685.536 L1442.24 685.536 L1442.8 685.536 L1443.36 685.536 L1443.92 685.536 L1444.48 685.536 L1445.04 685.536 L1445.6 685.536 L1446.15 685.536 L1446.71 685.536 L1447.27 685.536 L1447.83 685.536 L1448.39 685.536 L1448.95 685.536 L1449.51 685.536 L1450.07 685.536 L1450.63 685.536 L1451.19 685.536 L1451.75 685.536 L1452.31 685.536 L1452.87 685.536 L1453.42 685.536 L1453.98 685.536 L1454.54 685.536 L1455.1 685.536 L1455.66 685.536 L1456.22 685.536 L1456.78 685.536 L1457.34 685.536 L1457.9 685.536 L1458.46 685.536 L1459.02 685.536 L1459.58 685.536 L1460.14 685.536 L1460.7 685.536 L1461.25 685.536 L1461.81 685.536 L1462.37 685.536 L1462.93 685.536 L1463.49 685.536 L1464.05 685.536 L1464.61 685.536 L1465.17 685.536 L1465.73 685.536 L1466.29 685.536 L1466.85 685.536 L1467.41 685.536 L1467.97 685.536 L1468.52 685.536 L1469.08 685.536 L1469.64 685.536 L1470.2 685.536 L1470.76 685.536 L1471.32 685.536 L1471.88 685.536 L1472.44 685.536 L1473 685.536 L1473.56 685.536 L1474.12 685.536 L1474.68 685.536 L1475.24 685.536 L1475.79 685.536 L1476.35 685.536 L1476.91 685.536 L1477.47 685.536 L1478.03 685.536 L1478.59 685.536 L1479.15 685.536 L1479.71 685.536 L1480.27 685.536 L1480.83 685.536 L1481.39 685.536 L1481.95 685.536 L1482.51 685.536 L1483.07 685.536 L1483.62 685.536 L1484.18 685.536 L1484.74 685.536 L1485.3 685.536 L1485.86 685.536 L1486.42 685.536 L1486.98 685.536 L1487.54 685.536 L1488.1 685.536 L1488.66 685.536 L1489.22 685.536 L1489.78 685.536 L1490.34 685.536 L1490.89 685.536 L1491.45 685.536 L1492.01 685.536 L1492.57 685.536 L1493.13 685.536 L1493.69 685.536 L1494.25 685.536 L1494.81 685.536 L1495.37 685.536 L1495.93 685.536 L1496.49 685.536 L1497.05 685.536 L1497.61 685.536 L1498.16 685.536 L1498.72 685.536 L1499.28 685.536 L1499.84 685.536 L1500.4 685.536 L1500.96 685.536 L1501.52 685.536 L1502.08 685.536 L1502.64 685.536 L1503.2 685.536 L1503.76 685.536 L1504.32 685.536 L1504.88 685.536 L1505.44 685.536 L1505.99 685.536 L1506.55 685.536 L1507.11 685.536 L1507.67 685.536 L1508.23 685.536 L1508.79 685.536 L1509.35 685.536 L1509.91 685.536 L1510.47 685.536 L1511.03 685.536 L1511.59 685.536 L1512.15 685.536 L1512.71 685.536 L1513.26 685.536 L1513.82 685.536 L1514.38 685.536 L1514.94 685.536 L1515.5 685.536 L1516.06 685.536 L1516.62 685.536 L1517.18 685.536 L1517.74 685.536 L1518.3 685.536 L1518.86 685.536 L1519.42 685.536 L1519.98 685.536 L1520.53 685.536 L1521.09 685.536 L1521.65 685.536 L1522.21 685.536 L1522.77 685.536 L1523.33 685.536 L1523.89 685.536 L1524.45 685.536 L1525.01 685.536 L1525.57 685.536 L1526.13 685.536 L1526.69 685.536 L1527.25 685.536 L1527.81 685.536 L1528.36 685.536 L1528.92 685.536 L1529.48 685.536 L1530.04 685.536 L1530.6 685.536 L1531.16 685.536 L1531.72 685.536 L1532.28 685.536 L1532.84 685.536 L1533.4 685.536 L1533.96 685.536 L1534.52 685.536 L1535.08 685.536 L1535.63 685.536 L1536.19 685.536 L1536.75 685.536 L1537.31 685.536 L1537.87 685.536 L1538.43 685.536 L1538.99 685.536 L1539.55 685.536 L1540.11 685.536 L1540.67 685.536 L1541.23 685.536 L1541.79 685.536 L1542.35 685.536 L1542.9 685.536 L1543.46 685.536 L1544.02 685.536 L1544.58 685.536 L1545.14 685.536 L1545.7 685.536 L1546.26 685.536 L1546.82 685.536 L1547.38 685.536 L1547.94 685.536 L1548.5 685.536 L1549.06 685.536 L1549.62 685.536 L1550.18 685.536 L1550.73 685.536 L1551.29 685.536 L1551.85 685.536 L1552.41 685.536 L1552.97 685.536 L1553.53 685.536 L1554.09 685.536 L1554.65 685.536 L1555.21 685.536 L1555.77 685.536 L1556.33 685.536 L1556.89 685.536 L1557.45 685.536 L1558 685.536 L1558.56 685.536 L1559.12 685.536 L1559.68 685.536 L1560.24 685.536 L1560.8 685.536 L1561.36 685.536 L1561.92 685.536 L1562.48 685.536 L1563.04 685.536 L1563.6 685.536 L1564.16 685.536 L1564.72 685.536 L1565.28 685.536 L1565.83 685.536 L1566.39 685.536 L1566.95 685.536 L1567.51 685.536 L1568.07 685.536 L1568.63 685.536 L1569.19 685.536 L1569.75 685.536 L1570.31 685.536 L1570.87 685.536 L1571.43 685.536 L1571.99 685.536 L1572.55 685.536 L1573.1 685.536 L1573.66 685.536 L1574.22 685.536 L1574.78 685.536 L1575.34 685.536 L1575.9 685.536 L1576.46 685.536 L1577.02 685.536 L1577.58 685.536 L1578.14 685.536 L1578.7 685.536 L1579.26 685.536 L1579.82 685.536 L1580.37 685.536 L1580.93 685.536 L1581.49 685.536 L1582.05 685.536 L1582.61 685.536 L1583.17 685.536 L1583.73 685.536 L1584.29 685.536 L1584.85 685.536 L1585.41 685.536 L1585.97 685.536 L1586.53 685.536 L1587.09 685.536 L1587.65 685.536 L1588.2 685.536 L1588.76 685.536 L1589.32 685.536 L1589.88 685.536 L1590.44 685.536 L1591 685.536 L1591.56 685.536 L1592.12 685.536 L1592.68 685.536 L1593.24 685.536 L1593.8 685.536 L1594.36 685.536 L1594.92 685.536 L1595.47 685.536 L1596.03 685.536 L1596.59 685.536 L1597.15 685.536 L1597.71 685.536 L1598.27 685.536 L1598.83 685.536 L1599.39 685.536 L1599.95 685.536 L1600.51 685.536 L1601.07 685.536 L1601.63 685.536 L1602.19 685.536 L1602.74 685.536 L1603.3 685.536 L1603.86 685.536 L1604.42 685.536 L1604.98 685.536 L1605.54 685.536 L1606.1 685.536 L1606.66 685.536 L1607.22 685.536 L1607.78 685.536 L1608.34 685.536 L1608.9 685.536 L1609.46 685.536 L1610.02 685.536 L1610.57 685.536 L1611.13 685.536 L1611.69 685.536 L1612.25 685.536 L1612.81 685.536 L1613.37 685.536 L1613.93 685.536 L1614.49 685.536 L1615.05 685.536 L1615.61 685.536 L1616.17 685.536 L1616.73 685.536 L1617.29 685.536 L1617.84 685.536 L1618.4 685.536 L1618.96 685.536 L1619.52 685.536 L1620.08 685.536 L1620.64 685.536 L1621.2 685.536 L1621.76 685.536 L1622.32 685.536 L1622.88 685.536 L1623.44 685.536 L1624 685.536 L1624.56 685.536 L1625.11 685.536 L1625.67 685.536 L1626.23 685.536 L1626.79 685.536 L1627.35 685.536 L1627.91 685.536 L1628.47 685.536 L1629.03 685.536 L1629.59 685.536 L1630.15 685.536 L1630.71 685.536 L1631.27 685.536 L1631.83 685.536 L1632.39 685.536 L1632.94 685.536 L1633.5 685.536 L1634.06 685.536 L1634.62 685.536 L1635.18 685.536 L1635.74 685.536 L1636.3 685.536 L1636.86 685.536 L1637.42 685.536 L1637.98 685.536 L1638.54 685.536 L1639.1 685.536 L1639.66 685.536 L1640.21 685.536 L1640.77 685.536 L1641.33 685.536 L1641.89 685.536 L1642.45 685.536 L1643.01 685.536 L1643.57 685.536 L1644.13 685.536 L1644.69 685.536 L1645.25 685.536 L1645.81 685.536 L1646.37 685.536 L1646.93 685.536 L1647.48 685.536 L1648.04 685.536 L1648.6 685.536 L1649.16 685.536 L1649.72 685.536 L1650.28 685.536 L1650.84 685.536 L1651.4 685.536 L1651.96 685.536 L1652.52 685.536 L1653.08 685.536 L1653.64 685.536 L1654.2 685.536 L1654.76 685.536 L1655.31 685.536 L1655.87 685.536 L1656.43 685.536 L1656.99 685.536 L1657.55 685.536 L1658.11 685.536 L1658.67 685.536 L1659.23 685.536 L1659.79 685.536 L1660.35 685.536 L1660.91 685.536 L1661.47 685.536 L1662.03 685.536 L1662.58 685.536 L1663.14 685.536 L1663.7 685.536 L1664.26 685.536 L1664.82 685.536 L1665.38 685.536 L1665.94 685.536 L1666.5 685.536 L1667.06 685.536 L1667.62 685.536 L1668.18 685.536 L1668.74 685.536 L1669.3 685.536 L1669.85 685.536 L1670.41 685.536 L1670.97 685.536 L1671.53 685.536 L1672.09 685.536 L1672.65 685.536 L1673.21 685.536 L1673.77 685.536 L1674.33 685.536 L1674.89 685.536 L1675.45 685.536 L1676.01 685.536 L1676.57 685.536 L1677.13 685.536 L1677.68 685.536 L1678.24 685.536 L1678.8 685.536 L1679.36 685.536 L1679.92 685.536 L1680.48 685.536 L1681.04 685.536 L1681.6 685.536 L1682.16 685.536 L1682.72 685.536 L1683.28 685.536 L1683.84 685.536 L1684.4 685.536 L1684.95 685.536 L1685.51 685.536 L1686.07 685.536 L1686.63 685.536 L1687.19 685.536 L1687.75 685.536 L1688.31 685.536 L1688.87 685.536 L1689.43 685.536 L1689.99 685.536 L1690.55 685.536 L1691.11 685.536 L1691.67 685.536 L1692.23 685.536 L1692.78 685.536 L1693.34 685.536 L1693.9 685.536 L1694.46 685.536 L1695.02 685.536 L1695.58 685.536 L1696.14 685.536 L1696.7 685.536 L1697.26 685.536 L1697.82 685.536 L1698.38 685.536 L1698.94 685.536 L1699.5 685.536 L1700.05 685.536 L1700.61 685.536 L1701.17 685.536 L1701.73 685.536 L1702.29 685.536 L1702.85 685.536 L1703.41 685.536 L1703.97 685.536 L1704.53 685.536 L1705.09 685.536 L1705.65 685.536 L1706.21 685.536 L1706.77 685.536 L1707.32 685.536 L1707.88 685.536 L1708.44 685.536 L1709 685.536 L1709.56 685.536 L1710.12 685.536 L1710.68 685.536 L1711.24 685.536 L1711.8 685.536 L1712.36 685.536 L1712.92 685.536 L1713.48 685.536 L1714.04 685.536 L1714.6 685.536 L1715.15 685.536 L1715.71 685.536 L1716.27 685.536 L1716.83 685.536 L1717.39 685.536 L1717.95 685.536 L1718.51 685.536 L1719.07 685.536 L1719.63 685.536 L1720.19 685.536 L1720.75 685.536 L1721.31 685.536 L1721.87 685.536 L1722.42 685.536 L1722.98 685.536 L1723.54 685.536 L1724.1 685.536 L1724.66 685.536 L1725.22 685.536 L1725.78 685.536 L1726.34 685.536 L1726.9 685.536 L1727.46 685.536 L1728.02 685.536 L1728.58 685.536 L1729.14 685.536 L1729.69 685.536 L1730.25 685.536 L1730.81 685.536 L1731.37 685.536 L1731.93 685.536 L1732.49 685.536 L1733.05 685.536 L1733.61 685.536 L1734.17 685.536 L1734.73 685.536 L1735.29 685.536 L1735.85 685.536 L1736.41 685.536 L1736.97 685.536 L1737.52 685.536 L1738.08 685.536 L1738.64 685.536 L1739.2 685.536 L1739.76 685.536 L1740.32 685.536 L1740.88 685.536 L1741.44 685.536 L1742 685.536 L1742.56 685.536 L1743.12 685.536 L1743.68 685.536 L1744.24 685.536 L1744.79 685.536 L1745.35 685.536 L1745.91 685.536 L1746.47 685.536 L1747.03 685.536 L1747.59 685.536 L1748.15 685.536 L1748.71 685.536 L1749.27 685.536 L1749.83 685.536 L1750.39 685.536 L1750.95 685.536 L1751.51 685.536 L1752.06 685.536 L1752.62 685.536 L1753.18 685.536 L1753.74 685.536 L1754.3 685.536 L1754.86 685.536 L1755.42 685.536 L1755.98 685.536 L1756.54 685.536 L1757.1 685.536 L1757.66 685.536 L1758.22 685.536 L1758.78 685.536 L1759.34 685.536 L1759.89 685.536 L1760.45 685.536 L1761.01 685.536 L1761.57 685.536 L1762.13 685.536 L1762.69 685.536 L1763.25 685.536 L1763.81 685.536 L1764.37 685.536 L1764.93 685.536 L1765.49 685.536 L1766.05 685.536 L1766.61 685.536 L1767.16 685.536 L1767.72 685.536 L1768.28 685.536 L1768.84 685.536 L1769.4 685.536 L1769.96 685.536 L1770.52 685.536 L1771.08 685.536 L1771.64 685.536 L1772.2 685.536 L1772.76 685.536 L1773.32 685.536 L1773.88 685.536 L1774.43 685.536 L1774.99 685.536 L1775.55 685.536 L1776.11 685.536 L1776.67 685.536 L1777.23 685.536 L1777.79 685.536 L1778.35 685.536 L1778.91 685.536 L1779.47 685.536 L1780.03 685.536 L1780.59 685.536 L1781.15 685.536 L1781.71 685.536 L1782.26 685.536 L1782.82 685.536 L1783.38 685.536 L1783.94 685.536 L1784.5 685.536 L1785.06 685.536 L1785.62 685.536 L1786.18 685.536 L1786.74 685.536 L1787.3 685.536 L1787.86 685.536 L1788.42 685.536 L1788.98 685.536 L1789.53 685.536 L1790.09 685.536 L1790.65 685.536 L1791.21 685.536 L1791.77 685.536 L1792.33 685.536 L1792.89 685.536 L1793.45 685.536 L1794.01 685.536 L1794.57 685.536 L1795.13 685.536 L1795.69 685.536 L1796.25 685.536 L1796.8 685.536 L1797.36 685.536 L1797.92 685.536 L1798.48 685.536 L1799.04 685.536 L1799.6 685.536 L1800.16 685.536 L1800.72 685.536 L1801.28 685.536 L1801.84 685.536 L1802.4 685.536 L1802.96 685.536 L1803.52 685.536 L1804.08 685.536 L1804.63 685.536 L1805.19 685.536 L1805.75 685.536 L1806.31 685.536 L1806.87 685.536 L1807.43 685.536 L1807.99 685.536 L1808.55 685.536 L1809.11 685.536 L1809.67 685.536 L1810.23 685.536 L1810.79 685.536 L1811.35 685.536 L1811.9 685.536 L1812.46 685.536 L1813.02 685.536 L1813.58 685.536 L1814.14 685.536 L1814.7 685.536 L1815.26 685.536 L1815.82 685.536 L1816.38 685.536 L1816.94 685.536 L1817.5 685.536 L1818.06 685.536 L1818.62 685.536 L1819.18 685.536 L1819.73 685.536 L1820.29 685.536 L1820.85 685.536 L1821.41 685.536 L1821.97 685.536 L1822.53 685.536 L1823.09 685.536 L1823.65 685.536 L1824.21 685.536 L1824.77 685.536 L1825.33 685.536 L1825.89 685.536 L1826.45 685.536 L1827 685.536 L1827.56 685.536 L1828.12 685.536 L1828.68 685.536 L1829.24 685.536 L1829.8 685.536 L1830.36 685.536 L1830.92 685.536 L1831.48 685.536 L1832.04 685.536 L1832.6 685.536 L1833.16 685.536 L1833.72 685.536 L1834.27 685.536 L1834.83 685.536 L1835.39 685.536 L1835.95 685.536 L1836.51 685.536 L1837.07 685.536 L1837.63 685.536 L1838.19 685.536 L1838.19 682.879 L1837.63 682.879 L1837.07 682.879 L1836.51 682.879 L1835.95 682.879 L1835.39 682.879 L1834.83 682.879 L1834.27 682.879 L1833.72 682.879 L1833.16 682.879 L1832.6 682.879 L1832.04 682.879 L1831.48 682.879 L1830.92 682.879 L1830.36 682.879 L1829.8 682.879 L1829.24 682.879 L1828.68 682.879 L1828.12 682.879 L1827.56 682.879 L1827 682.879 L1826.45 682.879 L1825.89 682.879 L1825.33 682.879 L1824.77 682.879 L1824.21 682.879 L1823.65 682.879 L1823.09 682.879 L1822.53 682.879 L1821.97 682.879 L1821.41 682.879 L1820.85 682.879 L1820.29 682.879 L1819.73 682.879 L1819.18 682.879 L1818.62 682.879 L1818.06 682.879 L1817.5 682.879 L1816.94 682.879 L1816.38 682.879 L1815.82 682.879 L1815.26 682.879 L1814.7 682.879 L1814.14 682.879 L1813.58 682.879 L1813.02 682.879 L1812.46 682.879 L1811.9 682.879 L1811.35 682.879 L1810.79 682.879 L1810.23 682.879 L1809.67 682.879 L1809.11 682.879 L1808.55 682.879 L1807.99 682.879 L1807.43 682.879 L1806.87 682.879 L1806.31 682.879 L1805.75 682.879 L1805.19 682.879 L1804.63 682.879 L1804.08 682.879 L1803.52 682.879 L1802.96 682.879 L1802.4 682.879 L1801.84 682.879 L1801.28 682.879 L1800.72 682.879 L1800.16 682.879 L1799.6 682.879 L1799.04 682.879 L1798.48 682.879 L1797.92 682.879 L1797.36 682.879 L1796.8 682.879 L1796.25 682.879 L1795.69 682.879 L1795.13 682.879 L1794.57 682.879 L1794.01 682.879 L1793.45 682.879 L1792.89 682.879 L1792.33 682.879 L1791.77 682.879 L1791.21 682.879 L1790.65 682.879 L1790.09 682.879 L1789.53 682.879 L1788.98 682.879 L1788.42 682.879 L1787.86 682.879 L1787.3 682.879 L1786.74 682.879 L1786.18 682.879 L1785.62 682.879 L1785.06 682.879 L1784.5 682.879 L1783.94 682.879 L1783.38 682.879 L1782.82 682.879 L1782.26 682.879 L1781.71 682.879 L1781.15 682.879 L1780.59 682.879 L1780.03 682.879 L1779.47 682.879 L1778.91 682.879 L1778.35 682.879 L1777.79 682.879 L1777.23 682.879 L1776.67 682.879 L1776.11 682.879 L1775.55 682.879 L1774.99 682.879 L1774.43 682.879 L1773.88 682.879 L1773.32 682.879 L1772.76 682.879 L1772.2 682.879 L1771.64 682.879 L1771.08 682.879 L1770.52 682.879 L1769.96 682.879 L1769.4 682.879 L1768.84 682.879 L1768.28 682.879 L1767.72 682.879 L1767.16 682.879 L1766.61 682.879 L1766.05 682.879 L1765.49 682.879 L1764.93 682.879 L1764.37 682.879 L1763.81 682.879 L1763.25 682.879 L1762.69 682.879 L1762.13 682.879 L1761.57 682.879 L1761.01 682.879 L1760.45 682.879 L1759.89 682.879 L1759.34 682.879 L1758.78 682.879 L1758.22 682.879 L1757.66 682.879 L1757.1 682.879 L1756.54 682.879 L1755.98 682.879 L1755.42 682.879 L1754.86 682.879 L1754.3 682.879 L1753.74 682.879 L1753.18 682.879 L1752.62 682.879 L1752.06 682.879 L1751.51 682.879 L1750.95 682.879 L1750.39 682.879 L1749.83 682.879 L1749.27 682.879 L1748.71 682.879 L1748.15 682.879 L1747.59 682.879 L1747.03 682.879 L1746.47 682.879 L1745.91 682.879 L1745.35 682.879 L1744.79 682.879 L1744.24 682.879 L1743.68 682.879 L1743.12 682.879 L1742.56 682.879 L1742 682.879 L1741.44 682.879 L1740.88 682.879 L1740.32 682.879 L1739.76 682.879 L1739.2 682.879 L1738.64 682.879 L1738.08 682.879 L1737.52 682.879 L1736.97 682.879 L1736.41 682.879 L1735.85 682.879 L1735.29 682.879 L1734.73 682.879 L1734.17 682.879 L1733.61 682.879 L1733.05 682.879 L1732.49 682.879 L1731.93 682.879 L1731.37 682.879 L1730.81 682.879 L1730.25 682.879 L1729.69 682.879 L1729.14 682.879 L1728.58 682.879 L1728.02 682.879 L1727.46 682.879 L1726.9 682.879 L1726.34 682.879 L1725.78 682.879 L1725.22 682.879 L1724.66 682.879 L1724.1 682.879 L1723.54 682.879 L1722.98 682.879 L1722.42 682.879 L1721.87 682.879 L1721.31 682.879 L1720.75 682.879 L1720.19 682.879 L1719.63 682.879 L1719.07 682.879 L1718.51 682.879 L1717.95 682.879 L1717.39 682.879 L1716.83 682.879 L1716.27 682.879 L1715.71 682.879 L1715.15 682.879 L1714.6 682.879 L1714.04 682.879 L1713.48 682.879 L1712.92 682.879 L1712.36 682.879 L1711.8 682.879 L1711.24 682.879 L1710.68 682.879 L1710.12 682.879 L1709.56 682.879 L1709 682.879 L1708.44 682.879 L1707.88 682.879 L1707.32 682.879 L1706.77 682.879 L1706.21 682.879 L1705.65 682.879 L1705.09 682.879 L1704.53 682.879 L1703.97 682.879 L1703.41 682.879 L1702.85 682.879 L1702.29 682.879 L1701.73 682.879 L1701.17 682.879 L1700.61 682.879 L1700.05 682.879 L1699.5 682.879 L1698.94 682.879 L1698.38 682.879 L1697.82 682.879 L1697.26 682.879 L1696.7 682.879 L1696.14 682.879 L1695.58 682.879 L1695.02 682.879 L1694.46 682.879 L1693.9 682.879 L1693.34 682.879 L1692.78 682.879 L1692.23 682.879 L1691.67 682.879 L1691.11 682.879 L1690.55 682.879 L1689.99 682.879 L1689.43 682.879 L1688.87 682.879 L1688.31 682.879 L1687.75 682.879 L1687.19 682.879 L1686.63 682.879 L1686.07 682.879 L1685.51 682.879 L1684.95 682.879 L1684.4 682.879 L1683.84 682.879 L1683.28 682.879 L1682.72 682.879 L1682.16 682.879 L1681.6 682.879 L1681.04 682.879 L1680.48 682.879 L1679.92 682.879 L1679.36 682.879 L1678.8 682.879 L1678.24 682.879 L1677.68 682.879 L1677.13 682.879 L1676.57 682.879 L1676.01 682.879 L1675.45 682.879 L1674.89 682.879 L1674.33 682.879 L1673.77 682.879 L1673.21 682.879 L1672.65 682.879 L1672.09 682.879 L1671.53 682.879 L1670.97 682.879 L1670.41 682.879 L1669.85 682.879 L1669.3 682.879 L1668.74 682.879 L1668.18 682.879 L1667.62 682.879 L1667.06 682.879 L1666.5 682.879 L1665.94 682.879 L1665.38 682.879 L1664.82 682.879 L1664.26 682.879 L1663.7 682.879 L1663.14 682.879 L1662.58 682.879 L1662.03 682.879 L1661.47 682.879 L1660.91 682.879 L1660.35 682.879 L1659.79 682.879 L1659.23 682.879 L1658.67 682.879 L1658.11 682.879 L1657.55 682.879 L1656.99 682.879 L1656.43 682.879 L1655.87 682.879 L1655.31 682.879 L1654.76 682.879 L1654.2 682.879 L1653.64 682.879 L1653.08 682.879 L1652.52 682.879 L1651.96 682.879 L1651.4 682.879 L1650.84 682.879 L1650.28 682.879 L1649.72 682.879 L1649.16 682.879 L1648.6 682.879 L1648.04 682.879 L1647.48 682.879 L1646.93 682.879 L1646.37 682.879 L1645.81 682.879 L1645.25 682.879 L1644.69 682.879 L1644.13 682.879 L1643.57 682.879 L1643.01 682.879 L1642.45 682.879 L1641.89 682.879 L1641.33 682.879 L1640.77 682.879 L1640.21 682.879 L1639.66 682.879 L1639.1 682.879 L1638.54 682.879 L1637.98 682.879 L1637.42 682.879 L1636.86 682.879 L1636.3 682.879 L1635.74 682.879 L1635.18 682.879 L1634.62 682.879 L1634.06 682.879 L1633.5 682.879 L1632.94 682.879 L1632.39 682.879 L1631.83 682.879 L1631.27 682.879 L1630.71 682.879 L1630.15 682.879 L1629.59 682.879 L1629.03 682.879 L1628.47 682.879 L1627.91 682.879 L1627.35 682.879 L1626.79 682.879 L1626.23 682.879 L1625.67 682.879 L1625.11 682.879 L1624.56 682.879 L1624 682.879 L1623.44 682.879 L1622.88 682.879 L1622.32 682.879 L1621.76 682.879 L1621.2 682.879 L1620.64 682.879 L1620.08 682.879 L1619.52 682.879 L1618.96 682.879 L1618.4 682.879 L1617.84 682.879 L1617.29 682.879 L1616.73 682.879 L1616.17 682.879 L1615.61 682.879 L1615.05 682.879 L1614.49 682.879 L1613.93 682.879 L1613.37 682.879 L1612.81 682.879 L1612.25 682.879 L1611.69 682.879 L1611.13 682.879 L1610.57 682.879 L1610.02 682.879 L1609.46 682.879 L1608.9 682.879 L1608.34 682.879 L1607.78 682.879 L1607.22 682.879 L1606.66 682.879 L1606.1 682.879 L1605.54 682.879 L1604.98 682.879 L1604.42 682.879 L1603.86 682.879 L1603.3 682.879 L1602.74 682.879 L1602.19 682.879 L1601.63 682.879 L1601.07 682.879 L1600.51 682.879 L1599.95 682.879 L1599.39 682.879 L1598.83 682.879 L1598.27 682.879 L1597.71 682.879 L1597.15 682.879 L1596.59 682.879 L1596.03 682.879 L1595.47 682.879 L1594.92 682.879 L1594.36 682.879 L1593.8 682.879 L1593.24 682.879 L1592.68 682.879 L1592.12 682.879 L1591.56 682.879 L1591 682.879 L1590.44 682.879 L1589.88 682.879 L1589.32 682.879 L1588.76 682.879 L1588.2 682.879 L1587.65 682.879 L1587.09 682.879 L1586.53 682.879 L1585.97 682.879 L1585.41 682.879 L1584.85 682.879 L1584.29 682.879 L1583.73 682.879 L1583.17 682.879 L1582.61 682.879 L1582.05 682.879 L1581.49 682.879 L1580.93 682.879 L1580.37 682.879 L1579.82 682.879 L1579.26 682.879 L1578.7 682.879 L1578.14 682.879 L1577.58 682.879 L1577.02 682.879 L1576.46 682.879 L1575.9 682.879 L1575.34 682.879 L1574.78 682.879 L1574.22 682.879 L1573.66 682.879 L1573.1 682.879 L1572.55 682.879 L1571.99 682.879 L1571.43 682.879 L1570.87 682.879 L1570.31 682.879 L1569.75 682.879 L1569.19 682.879 L1568.63 682.879 L1568.07 682.879 L1567.51 682.879 L1566.95 682.879 L1566.39 682.879 L1565.83 682.879 L1565.28 682.879 L1564.72 682.879 L1564.16 682.879 L1563.6 682.879 L1563.04 682.879 L1562.48 682.879 L1561.92 682.879 L1561.36 682.879 L1560.8 682.879 L1560.24 682.879 L1559.68 682.879 L1559.12 682.879 L1558.56 682.879 L1558 682.879 L1557.45 682.879 L1556.89 682.879 L1556.33 682.879 L1555.77 682.879 L1555.21 682.879 L1554.65 682.879 L1554.09 682.879 L1553.53 682.879 L1552.97 682.879 L1552.41 682.879 L1551.85 682.879 L1551.29 682.879 L1550.73 682.879 L1550.18 682.879 L1549.62 682.879 L1549.06 682.879 L1548.5 682.879 L1547.94 682.879 L1547.38 682.879 L1546.82 682.879 L1546.26 682.879 L1545.7 682.879 L1545.14 682.879 L1544.58 682.879 L1544.02 682.879 L1543.46 682.879 L1542.9 682.879 L1542.35 682.879 L1541.79 682.879 L1541.23 682.879 L1540.67 682.879 L1540.11 682.879 L1539.55 682.879 L1538.99 682.879 L1538.43 682.879 L1537.87 682.879 L1537.31 682.879 L1536.75 682.879 L1536.19 682.879 L1535.63 682.879 L1535.08 682.879 L1534.52 682.879 L1533.96 682.879 L1533.4 682.879 L1532.84 682.879 L1532.28 682.879 L1531.72 682.879 L1531.16 682.879 L1530.6 682.879 L1530.04 682.879 L1529.48 682.879 L1528.92 682.879 L1528.36 682.879 L1527.81 682.879 L1527.25 682.879 L1526.69 682.879 L1526.13 682.879 L1525.57 682.879 L1525.01 682.879 L1524.45 682.879 L1523.89 682.879 L1523.33 682.879 L1522.77 682.879 L1522.21 682.879 L1521.65 682.879 L1521.09 682.879 L1520.53 682.879 L1519.98 682.879 L1519.42 682.879 L1518.86 682.879 L1518.3 682.879 L1517.74 682.879 L1517.18 682.879 L1516.62 682.879 L1516.06 682.879 L1515.5 682.879 L1514.94 682.879 L1514.38 682.879 L1513.82 682.879 L1513.26 682.879 L1512.71 682.879 L1512.15 682.879 L1511.59 682.879 L1511.03 682.879 L1510.47 682.879 L1509.91 682.879 L1509.35 682.879 L1508.79 682.879 L1508.23 682.879 L1507.67 682.879 L1507.11 682.879 L1506.55 682.879 L1505.99 682.879 L1505.44 682.879 L1504.88 682.879 L1504.32 682.879 L1503.76 682.879 L1503.2 682.879 L1502.64 682.879 L1502.08 682.879 L1501.52 682.879 L1500.96 682.879 L1500.4 682.879 L1499.84 682.879 L1499.28 682.879 L1498.72 682.879 L1498.16 682.879 L1497.61 682.879 L1497.05 682.879 L1496.49 682.879 L1495.93 682.879 L1495.37 682.879 L1494.81 682.879 L1494.25 682.879 L1493.69 682.879 L1493.13 682.879 L1492.57 682.879 L1492.01 682.879 L1491.45 682.879 L1490.89 682.879 L1490.34 682.879 L1489.78 682.879 L1489.22 682.879 L1488.66 682.879 L1488.1 682.879 L1487.54 682.879 L1486.98 682.879 L1486.42 682.879 L1485.86 682.879 L1485.3 682.879 L1484.74 682.879 L1484.18 682.879 L1483.62 682.879 L1483.07 682.879 L1482.51 682.879 L1481.95 682.879 L1481.39 682.879 L1480.83 682.879 L1480.27 682.879 L1479.71 682.879 L1479.15 682.879 L1478.59 682.879 L1478.03 682.879 L1477.47 682.879 L1476.91 682.879 L1476.35 682.879 L1475.79 682.879 L1475.24 682.879 L1474.68 682.879 L1474.12 682.879 L1473.56 682.879 L1473 682.879 L1472.44 682.879 L1471.88 682.879 L1471.32 682.879 L1470.76 682.879 L1470.2 682.879 L1469.64 682.879 L1469.08 682.879 L1468.52 682.879 L1467.97 682.879 L1467.41 682.879 L1466.85 682.879 L1466.29 682.879 L1465.73 682.879 L1465.17 682.879 L1464.61 682.879 L1464.05 682.879 L1463.49 682.879 L1462.93 682.879 L1462.37 682.879 L1461.81 682.879 L1461.25 682.879 L1460.7 682.879 L1460.14 682.879 L1459.58 682.879 L1459.02 682.879 L1458.46 682.879 L1457.9 682.879 L1457.34 682.879 L1456.78 682.879 L1456.22 682.879 L1455.66 682.879 L1455.1 682.879 L1454.54 682.879 L1453.98 682.879 L1453.42 682.879 L1452.87 682.879 L1452.31 682.879 L1451.75 682.879 L1451.19 682.879 L1450.63 682.879 L1450.07 682.879 L1449.51 682.879 L1448.95 682.879 L1448.39 682.879 L1447.83 682.879 L1447.27 682.879 L1446.71 682.879 L1446.15 682.879 L1445.6 682.879 L1445.04 682.879 L1444.48 682.879 L1443.92 682.879 L1443.36 682.879 L1442.8 682.879 L1442.24 682.879 L1441.68 682.879 L1441.12 682.879 L1440.56 682.879 L1440 682.879 L1439.44 682.879 L1438.88 682.879 L1438.33 682.879 L1437.77 682.879 L1437.21 682.879 L1436.65 682.879 L1436.09 682.879 L1435.53 682.879 L1434.97 682.879 L1434.41 682.879 L1433.85 682.879 L1433.29 682.879 L1432.73 682.879 L1432.17 682.879 L1431.61 682.879 L1431.05 682.879 L1430.5 682.879 L1429.94 682.879 L1429.38 682.879 L1428.82 682.879 L1428.26 682.879 L1427.7 682.879 L1427.14 682.879 L1426.58 682.879 L1426.02 682.879 L1425.46 682.879 L1424.9 682.879 L1424.34 682.879 L1423.78 682.879 L1423.23 682.879 L1422.67 682.879 L1422.11 682.879 L1421.55 682.879 L1420.99 682.879 L1420.43 682.879 L1419.87 682.879 L1419.31 682.879 L1418.75 682.879 L1418.19 682.879 L1417.63 682.879 L1417.07 682.879 L1416.51 682.879 L1415.95 682.879 L1415.4 682.879 L1414.84 682.879 L1414.28 682.879 L1413.72 682.879 L1413.16 682.879 L1412.6 682.879 L1412.04 682.879 L1411.48 682.879 L1410.92 682.879 L1410.36 682.879 L1409.8 682.879 L1409.24 682.879 L1408.68 682.879 L1408.13 682.879 L1407.57 682.879 L1407.01 682.879 L1406.45 682.879 L1405.89 682.879 L1405.33 682.879 L1404.77 682.879 L1404.21 682.879 L1403.65 682.879 L1403.09 682.879 L1402.53 682.879 L1401.97 682.879 L1401.41 682.879 L1400.86 682.879 L1400.3 682.879 L1399.74 682.879 L1399.18 682.879 L1398.62 682.879 L1398.06 682.879 L1397.5 682.879 L1396.94 682.879 L1396.38 682.879 L1395.82 682.879 L1395.26 682.879 L1394.7 682.879 L1394.14 682.879 L1393.58 682.879 L1393.03 682.879 L1392.47 682.879 L1391.91 682.879 L1391.35 682.879 L1390.79 682.879 L1390.23 682.879 L1389.67 682.879 L1389.11 682.879 L1388.55 682.879 L1387.99 682.879 L1387.43 682.879 L1386.87 682.879 L1386.31 682.879 L1385.76 682.879 L1385.2 682.879 L1384.64 682.879 L1384.08 682.879 L1383.52 682.879 L1382.96 682.879 L1382.4 682.879 L1381.84 682.879 L1381.28 682.879 L1380.72 682.879 L1380.16 682.879 L1379.6 682.879 L1379.04 682.879 L1378.49 682.879 L1377.93 682.879 L1377.37 682.879 L1376.81 682.879 L1376.25 682.879 L1375.69 682.879 L1375.13 682.879 L1374.57 682.879 L1374.01 682.879 L1373.45 682.879 L1372.89 682.879 L1372.33 682.879 L1371.77 682.879 L1371.21 682.879 L1370.66 682.879 L1370.1 682.879 L1369.54 682.879 L1368.98 682.879 L1368.42 682.879 L1367.86 682.879 L1367.3 682.879 L1366.74 682.879 L1366.18 682.879 L1365.62 682.879 L1365.06 682.879 L1364.5 682.879 L1363.94 682.879 L1363.39 682.879 L1362.83 682.879 L1362.27 682.879 L1361.71 682.879 L1361.15 682.879 L1360.59 682.879 L1360.03 682.879 L1359.47 682.879 L1358.91 682.879 L1358.35 682.879 L1357.79 682.879 L1357.23 682.879 L1356.67 682.879 L1356.12 682.879 L1355.56 682.879 L1355 682.879 L1354.44 682.879 L1353.88 682.879 L1353.32 682.879 L1352.76 682.879 L1352.2 682.879 L1351.64 682.879 L1351.08 682.879 L1350.52 682.879 L1349.96 682.879 L1349.4 682.879 L1348.84 682.879 L1348.29 682.879 L1347.73 682.879 L1347.17 682.879 L1346.61 682.879 L1346.05 682.879 L1345.49 682.879 L1344.93 682.879 L1344.37 682.879 L1343.81 682.879 L1343.25 682.879 L1342.69 682.879 L1342.13 682.879 L1341.57 682.879 L1341.02 682.879 L1340.46 682.879 L1339.9 682.879 L1339.34 682.879 L1338.78 682.879 L1338.22 682.879 L1337.66 682.879 L1337.1 682.879 L1336.54 682.879 L1335.98 682.879 L1335.42 682.879 L1334.86 682.879 L1334.3 682.879 L1333.75 682.879 L1333.19 682.879 L1332.63 682.879 L1332.07 682.879 L1331.51 682.879 L1330.95 682.879 L1330.39 682.879 L1329.83 682.879 L1329.27 682.879 L1328.71 682.879 L1328.15 682.879 L1327.59 682.879 L1327.03 682.879 L1326.47 682.879 L1325.92 682.879 L1325.36 682.879 L1324.8 682.879 L1324.24 682.879 L1323.68 682.879 L1323.12 682.879 L1322.56 682.879 L1322 682.879 L1321.44 682.879 L1320.88 682.879 L1320.32 682.879 L1319.76 682.879 L1319.2 682.879 L1318.65 682.879 L1318.09 682.879 L1317.53 682.879 L1316.97 682.879 L1316.41 682.879 L1315.85 682.879 L1315.29 682.879 L1314.73 682.879 L1314.17 682.879 L1313.61 682.879 L1313.05 682.879 L1312.49 682.879 L1311.93 682.879 L1311.38 682.879 L1310.82 682.879 L1310.26 682.879 L1309.7 682.879 L1309.14 682.879 L1308.58 682.879 L1308.02 682.879 L1307.46 682.879 L1306.9 682.879 L1306.34 682.879 L1305.78 682.879 L1305.22 682.879 L1304.66 682.879 L1304.1 682.879 L1303.55 682.879 L1302.99 682.879 L1302.43 682.879 L1301.87 682.879 L1301.31 682.879 L1300.75 682.879 L1300.19 682.879 L1299.63 682.879 L1299.07 682.879 L1298.51 682.879 L1297.95 682.879 L1297.39 682.879 L1296.83 682.879 L1296.28 682.879 L1295.72 682.879 L1295.16 682.879 L1294.6 682.879 L1294.04 682.879 L1293.48 682.879 L1292.92 682.879 L1292.36 682.879 L1291.8 682.879 L1291.24 682.879 L1290.68 682.879 L1290.12 682.879 L1289.56 682.879 L1289 682.879 L1288.45 682.879 L1287.89 682.879 L1287.33 682.879 L1286.77 682.879 L1286.21 682.879 L1285.65 682.879 L1285.09 682.879 L1284.53 682.879 L1283.97 682.879 L1283.41 682.879 L1282.85 682.879 L1282.29 682.879 L1281.73 682.879 L1281.18 682.879 L1280.62 682.879 L1280.06 682.879 L1279.5 682.879 L1278.94 682.879 L1278.38 682.879 L1277.82 682.879 L1277.26 682.879 L1276.7 682.879 L1276.14 682.879 L1275.58 682.879 L1275.02 682.879 L1274.46 682.879 L1273.91 682.879 L1273.35 682.879 L1272.79 682.879 L1272.23 682.879 L1271.67 682.879 L1271.11 682.879 L1270.55 682.879 L1269.99 682.879 L1269.43 682.879 L1268.87 682.879 L1268.31 682.879 L1267.75 682.879 L1267.19 682.879 L1266.63 682.879 L1266.08 682.879 L1265.52 682.879 L1264.96 682.879 L1264.4 682.879 L1263.84 682.879 L1263.28 682.879 L1262.72 682.879 L1262.16 682.879 L1261.6 682.879 L1261.04 682.879 L1260.48 682.879 L1259.92 682.879 L1259.36 682.879 L1258.81 682.879 L1258.25 682.879 L1257.69 682.879 L1257.13 682.879 L1256.57 682.879 L1256.01 682.879 L1255.45 682.879 L1254.89 682.879 L1254.33 682.879 L1253.77 682.879 L1253.21 682.879 L1252.65 682.879 L1252.09 682.879 L1251.54 682.879 L1250.98 682.879 L1250.42 682.879 L1249.86 682.879 L1249.3 682.879 L1248.74 682.879 L1248.18 682.879 L1247.62 682.879 L1247.06 682.879 L1246.5 682.879 L1245.94 682.879 L1245.38 682.879 L1244.82 682.879 L1244.26 682.879 L1243.71 682.879 L1243.15 682.879 L1242.59 682.879 L1242.03 682.879 L1241.47 682.879 L1240.91 682.879 L1240.35 682.879 L1239.79 682.879 L1239.23 682.879 L1238.67 682.879 L1238.11 682.879 L1237.55 682.879 L1236.99 682.879 L1236.44 682.879 L1235.88 682.879 L1235.32 682.879 L1234.76 682.879 L1234.2 682.879 L1233.64 682.879 L1233.08 682.879 L1232.52 682.879 L1231.96 682.879 L1231.4 682.879 L1230.84 682.879 L1230.28 682.879 L1229.72 682.879 L1229.17 682.879 L1228.61 682.879 L1228.05 682.879 L1227.49 682.879 L1226.93 682.879 L1226.37 682.879 L1225.81 682.879 L1225.25 682.879 L1224.69 682.879 L1224.13 682.879 L1223.57 682.879 L1223.01 682.879 L1222.45 682.879 L1221.89 682.879 L1221.34 682.879 L1220.78 682.879 L1220.22 682.879 L1219.66 682.879 L1219.1 682.879 L1218.54 682.879 L1217.98 682.879 L1217.42 682.879 L1216.86 682.879 L1216.3 682.879 L1215.74 682.879 L1215.18 682.879 L1214.62 682.879 L1214.07 682.879 L1213.51 682.879 L1212.95 682.879 L1212.39 682.879 L1211.83 682.879 L1211.27 682.879 L1210.71 682.879 L1210.15 682.879 L1209.59 682.879 L1209.03 682.879 L1208.47 682.879 L1207.91 682.879 L1207.35 682.879 L1206.8 682.879 L1206.24 682.879 L1205.68 682.879 L1205.12 682.879 L1204.56 682.879 L1204 682.879 L1203.44 682.879 L1202.88 682.879 L1202.32 682.879 L1201.76 682.879 L1201.2 682.879 L1200.64 682.879 L1200.08 682.879 L1199.52 682.879 L1198.97 682.879 L1198.41 682.879 L1197.85 682.879 L1197.29 682.879 L1196.73 682.879 L1196.17 682.879 L1195.61 682.879 L1195.05 682.879 L1194.49 682.879 L1193.93 682.879 L1193.37 682.879 L1192.81 682.879 L1192.25 682.879 L1191.7 682.879 L1191.14 682.879 L1190.58 682.879 L1190.02 682.879 L1189.46 682.879 L1188.9 682.879 L1188.34 682.879 L1187.78 682.879 L1187.22 682.879 L1186.66 682.879 L1186.1 682.879 L1185.54 682.879 L1184.98 682.879 L1184.43 682.879 L1183.87 682.879 L1183.31 682.879 L1182.75 682.879 L1182.19 682.879 L1181.63 682.879 L1181.07 682.879 L1180.51 682.879 L1179.95 682.879 L1179.39 682.879 L1178.83 682.879 L1178.27 682.879 L1177.71 682.879 L1177.15 682.879 L1176.6 682.879 L1176.04 682.879 L1175.48 682.879 L1174.92 682.879 L1174.36 682.879 L1173.8 682.879 L1173.24 682.879 L1172.68 682.879 L1172.12 682.879 L1171.56 682.879 L1171 682.879 L1170.44 682.879 L1169.88 682.879 L1169.33 682.879 L1168.77 682.879 L1168.21 682.879 L1167.65 682.879 L1167.09 682.879 L1166.53 682.879 L1165.97 682.879 L1165.41 682.879 L1164.85 682.879 L1164.29 682.879 L1163.73 682.879 L1163.17 682.879 L1162.61 682.879 L1162.05 682.879 L1161.5 682.879 L1160.94 682.879 L1160.38 682.879 L1159.82 682.879 L1159.26 682.879 L1158.7 682.879 L1158.14 682.879 L1157.58 682.879 L1157.02 682.879 L1156.46 682.879 L1155.9 682.879 L1155.34 682.879 L1154.78 682.879 L1154.23 682.879 L1153.67 682.879 L1153.11 682.879 L1152.55 682.879 L1151.99 682.879 L1151.43 682.879 L1150.87 682.879 L1150.31 682.879 L1149.75 682.879 L1149.19 682.879 L1148.63 682.879 L1148.07 682.879 L1147.51 682.879 L1146.96 682.879 L1146.4 682.879 L1145.84 682.879 L1145.28 682.879 L1144.72 682.879 L1144.16 682.879 L1143.6 682.879 L1143.04 682.879 L1142.48 682.879 L1141.92 682.879 L1141.36 682.879 L1140.8 682.879 L1140.24 682.879 L1139.68 682.879 L1139.13 682.879 L1138.57 682.879 L1138.01 682.879 L1137.45 682.879 L1136.89 682.879 L1136.33 682.879 L1135.77 682.879 L1135.21 682.879 L1134.65 682.879 L1134.09 682.879 L1133.53 682.879 L1132.97 682.879 L1132.41 682.879 L1131.86 682.879 L1131.3 682.879 L1130.74 682.879 L1130.18 682.879 L1129.62 682.879 L1129.06 682.879 L1128.5 682.879 L1127.94 682.879 L1127.38 682.879 L1126.82 682.879 L1126.26 682.879 L1125.7 682.879 L1125.14 682.879 L1124.59 682.879 L1124.03 682.879 L1123.47 682.879 L1122.91 682.879 L1122.35 682.879 L1121.79 682.879 L1121.23 682.879 L1120.67 682.879 L1120.11 682.879 L1119.55 682.879 L1118.99 682.879 L1118.43 682.879 L1117.87 682.879 L1117.31 682.879 L1116.76 682.879 L1116.2 682.879 L1115.64 682.879 L1115.08 682.879 L1114.52 682.879 L1113.96 682.879 L1113.4 682.879 L1112.84 682.879 L1112.28 682.879 L1111.72 682.879 L1111.16 682.879 L1110.6 682.879 L1110.04 682.879 L1109.49 682.879 L1108.93 682.879 L1108.37 682.879 L1107.81 682.879 L1107.25 682.879 L1106.69 682.879 L1106.13 682.879 L1105.57 682.879 L1105.01 682.879 L1104.45 682.879 L1103.89 682.879 L1103.33 682.879 L1102.77 682.879 L1102.22 682.879 L1101.66 682.879 L1101.1 682.879 L1100.54 682.879 L1099.98 682.879 L1099.42 682.879 L1098.86 682.879 L1098.3 682.879 L1097.74 682.879 L1097.18 682.879 L1096.62 682.879 L1096.06 682.879 L1095.5 682.879 L1094.94 682.879 L1094.39 682.879 L1093.83 682.879 L1093.27 682.879 L1092.71 682.879 L1092.15 682.879 L1091.59 682.879 L1091.03 682.879 L1090.47 682.879 L1089.91 682.879 L1089.35 682.879 L1088.79 682.879 L1088.23 682.879 L1087.67 682.879 L1087.12 682.879 L1086.56 682.879 L1086 682.879 L1085.44 682.879 L1084.88 682.879 L1084.32 682.879 L1083.76 682.879 L1083.2 682.879 L1082.64 682.879 L1082.08 682.879 L1081.52 682.879 L1080.96 682.879 L1080.4 682.879 L1079.85 682.879 L1079.29 682.879 L1078.73 682.879 L1078.17 682.879 L1077.61 682.879 L1077.05 682.879 L1076.49 682.879 L1075.93 682.879 L1075.37 682.879 L1074.81 682.879 L1074.25 682.879 L1073.69 682.879 L1073.13 682.879 L1072.57 682.879 L1072.02 682.879 L1071.46 682.879 L1070.9 682.879 L1070.34 682.879 L1069.78 682.879 L1069.22 682.879 L1068.66 682.879 L1068.1 682.879 L1067.54 682.879 L1066.98 682.879 L1066.42 682.879 L1065.86 682.879 L1065.3 682.879 L1064.75 682.879 L1064.19 682.879 L1063.63 682.879 L1063.07 682.879 L1062.51 682.879 L1061.95 682.879 L1061.39 682.879 L1060.83 682.879 L1060.27 682.879 L1059.71 682.879 L1059.15 682.879 L1058.59 682.879 L1058.03 682.879 L1057.48 682.879 L1056.92 682.879 L1056.36 682.879 L1055.8 682.879 L1055.24 682.879 L1054.68 682.879 L1054.12 682.879 L1053.56 682.879 L1053 682.879 L1052.44 682.879 L1051.88 682.879 L1051.32 682.879 L1050.76 682.879 L1050.2 682.879 L1049.65 682.879 L1049.09 682.879 L1048.53 682.879 L1047.97 682.879 L1047.41 682.879 L1046.85 682.879 L1046.29 682.879 L1045.73 682.879 L1045.17 682.879 L1044.61 682.879 L1044.05 682.879 L1043.49 682.879 L1042.93 682.879 L1042.38 682.879 L1041.82 682.879 L1041.26 682.879 L1040.7 682.879 L1040.14 682.879 L1039.58 682.879 L1039.02 682.879 L1038.46 682.879 L1037.9 682.879 L1037.34 682.879 L1036.78 682.879 L1036.22 682.879 L1035.66 682.879 L1035.1 682.879 L1034.55 682.879 L1033.99 682.879 L1033.43 682.879 L1032.87 682.879 L1032.31 682.879 L1031.75 682.879 L1031.19 682.879 L1030.63 682.879 L1030.07 682.879 L1029.51 682.879 L1028.95 682.879 L1028.39 682.879 L1027.83 682.879 L1027.28 682.879 L1026.72 682.879 L1026.16 682.879 L1025.6 682.879 L1025.04 682.879 L1024.48 682.879 L1023.92 682.879 L1023.36 682.879 L1022.8 682.879 L1022.24 682.879 L1021.68 682.879 L1021.12 682.879 L1020.56 682.879 L1020.01 682.879 L1019.45 682.879 L1018.89 682.879 L1018.33 682.879 L1017.77 682.879 L1017.21 682.879 L1016.65 682.879 L1016.09 682.879 L1015.53 682.879 L1014.97 682.879 L1014.41 682.879 L1013.85 682.879 L1013.29 682.879 L1012.73 682.879 L1012.18 682.879 L1011.62 682.879 L1011.06 682.879 L1010.5 682.879 L1009.94 682.879 L1009.38 682.879 L1008.82 682.879 L1008.26 682.879 L1007.7 682.879 L1007.14 682.879 L1006.58 682.879 L1006.02 682.879 L1005.46 682.879 L1004.91 682.879 L1004.35 682.879 L1003.79 682.879 L1003.23 682.879 L1002.67 682.879 L1002.11 682.879 L1001.55 682.879 L1000.99 682.879 L1000.43 682.879 L999.872 682.879 L999.313 682.879 L998.754 682.879 L998.194 682.879 L997.635 682.879 L997.076 682.879 L996.517 682.879 L995.957 682.879 L995.398 682.879 L994.839 682.879 L994.28 682.879 L993.72 682.879 L993.161 682.879 L992.602 682.879 L992.043 682.879 L991.483 682.879 L990.924 682.879 L990.365 682.879 L989.806 682.879 L989.246 682.879 L988.687 682.879 L988.128 682.879 L987.569 682.879 L987.009 682.879 L986.45 682.879 L985.891 682.879 L985.332 682.879 L984.772 682.879 L984.213 682.879 L983.654 682.879 L983.095 682.879 L982.535 682.879 L981.976 682.879 L981.417 682.879 L980.858 682.879 L980.298 682.879 L979.739 682.879 L979.18 682.879 L978.621 682.879 L978.061 682.879 L977.502 682.879 L976.943 682.879 L976.384 682.879 L975.824 682.879 L975.265 682.879 L974.706 682.879 L974.147 682.879 L973.587 682.879 L973.028 682.879 L972.469 682.879 L971.91 682.879 L971.35 682.879 L970.791 682.879 L970.232 682.879 L969.673 682.879 L969.113 682.879 L968.554 682.879 L967.995 682.879 L967.436 682.879 L966.876 682.879 L966.317 682.879 L965.758 682.879 L965.199 682.879 L964.639 682.879 L964.08 682.879 L963.521 682.879 L962.962 682.879 L962.402 682.879 L961.843 682.879 L961.284 682.879 L960.725 682.879 L960.165 682.879 L959.606 682.879 L959.047 682.879 L958.488 682.879 L957.928 682.879 L957.369 682.879 L956.81 682.879 L956.251 682.879 L955.691 682.879 L955.132 682.879 L954.573 682.879 L954.014 682.879 L953.454 682.879 L952.895 682.879 L952.336 682.879 L951.777 682.879 L951.217 682.879 L950.658 682.879 L950.099 682.879 L949.54 682.879 L948.98 682.879 L948.421 682.879 L947.862 682.879 L947.303 682.879 L946.743 682.879 L946.184 682.879 L945.625 682.879 L945.066 682.879 L944.506 682.879 L943.947 682.879 L943.388 682.879 L942.829 682.879 L942.269 682.879 L941.71 682.879 L941.151 682.879 L940.592 682.879 L940.032 682.879 L939.473 682.879 L938.914 682.879 L938.355 682.879 L937.795 682.879 L937.236 682.879 L936.677 682.879 L936.118 682.879 L935.558 682.879 L934.999 682.879 L934.44 682.879 L933.881 682.879 L933.321 682.879 L932.762 682.879 L932.203 682.879 L931.644 682.879 L931.084 682.879 L930.525 682.879 L929.966 682.879 L929.406 682.879 L928.847 682.879 L928.288 682.879 L927.729 682.879 L927.169 682.879 L926.61 682.879 L926.051 682.879 L925.492 682.879 L924.932 682.879 L924.373 682.879 L923.814 682.879 L923.255 682.879 L922.695 682.879 L922.136 682.879 L921.577 682.879 L921.018 682.879 L920.458 682.879 L919.899 682.879 L919.34 682.879 L918.781 682.879 L918.221 682.879 L917.662 682.879 L917.103 682.879 L916.544 682.879 L915.984 682.879 L915.425 682.879 L914.866 682.879 L914.307 682.879 L913.747 682.879 L913.188 682.879 L912.629 682.879 L912.07 682.879 L911.51 682.879 L910.951 682.879 L910.392 682.879 L909.833 682.879 L909.273 682.879 L908.714 682.879 L908.155 682.879 L907.596 682.879 L907.036 682.879 L906.477 682.879 L905.918 682.879 L905.359 682.879 L904.799 682.879 L904.24 682.879 L903.681 682.879 L903.122 682.879 L902.562 682.879 L902.003 682.879 L901.444 682.879 L900.885 682.879 L900.325 682.879 L899.766 682.879 L899.207 682.879 L898.648 682.879 L898.088 682.879 L897.529 682.879 L896.97 682.879 L896.411 682.879 L895.851 682.879 L895.292 682.879 L894.733 682.879 L894.174 682.879 L893.614 682.879 L893.055 682.879 L892.496 682.879 L891.937 682.879 L891.377 682.879 L890.818 682.879 L890.259 682.879 L889.7 682.879 L889.14 682.879 L888.581 682.879 L888.022 682.879 L887.463 682.879 L886.903 682.879 L886.344 682.879 L885.785 682.879 L885.226 682.879 L884.666 682.879 L884.107 682.879 L883.548 682.879 L882.989 682.879 L882.429 682.879 L881.87 682.879 L881.311 682.879 L880.752 682.879 L880.192 682.879 L879.633 682.879 L879.074 682.879 L878.515 682.879 L877.955 682.879 L877.396 682.879 L876.837 682.879 L876.278 682.879 L875.718 682.879 L875.159 682.879 L874.6 682.879 L874.041 682.879 L873.481 682.879 L872.922 682.879 L872.363 682.879 L871.804 682.879 L871.244 682.879 L870.685 682.879 L870.126 682.879 L869.567 682.879 L869.007 682.879 L868.448 682.879 L867.889 682.879 L867.33 682.879 L866.77 682.879 L866.211 682.879 L865.652 682.879 L865.093 682.879 L864.533 682.879 L863.974 682.879 L863.415 682.879 L862.856 682.879 L862.296 682.879 L861.737 682.879 L861.178 682.879 L860.619 682.879 L860.059 682.879 L859.5 682.879 L858.941 682.879 L858.382 682.879 L857.822 682.879 L857.263 682.879 L856.704 682.879 L856.145 682.879 L855.585 682.879 L855.026 682.879 L854.467 682.879 L853.908 682.879 L853.348 682.879 L852.789 682.879 L852.23 682.879 L851.671 682.879 L851.111 682.879 L850.552 682.879 L849.993 682.879 L849.434 682.879 L848.874 682.879 L848.315 682.879 L847.756 682.879 L847.197 682.879 L846.637 682.879 L846.078 682.879 L845.519 682.879 L844.96 682.879 L844.4 682.879 L843.841 682.879 L843.282 682.879 L842.723 682.879 L842.163 682.879 L841.604 682.879 L841.045 682.879 L840.486 682.879 L839.926 682.879 L839.367 682.879 L838.808 682.879 L838.249 682.879 L837.689 682.879 L837.13 682.879 L836.571 682.879 L836.012 682.879 L835.452 682.879 L834.893 682.879 L834.334 682.879 L833.775 682.879 L833.215 682.879 L832.656 682.879 L832.097 682.879 L831.538 682.879 L830.978 682.879 L830.419 682.879 L829.86 682.879 L829.301 682.879 L828.741 682.879 L828.182 682.879 L827.623 682.879 L827.064 682.879 L826.504 682.879 L825.945 682.879 L825.386 682.879 L824.827 682.879 L824.267 682.879 L823.708 682.879 L823.149 682.879 L822.59 682.879 L822.03 682.879 L821.471 682.879 L820.912 682.879 L820.353 682.879 L819.793 682.879 L819.234 682.879 L818.675 682.879 L818.116 682.879 L817.556 682.879 L816.997 682.879 L816.438 682.879 L815.879 682.879 L815.319 682.879 L814.76 682.879 L814.201 682.879 L813.642 682.879 L813.082 682.879 L812.523 682.879 L811.964 682.879 L811.405 682.879 L810.845 682.879 L810.286 682.879 L809.727 682.879 L809.168 682.879 L808.608 682.879 L808.049 682.879 L807.49 682.879 L806.931 682.879 L806.371 682.879 L805.812 682.879 L805.253 682.879 L804.693 682.879 L804.134 682.879 L803.575 682.879 L803.016 682.879 L802.456 682.879 L801.897 682.879 L801.338 682.879 L800.779 682.879 L800.219 682.879 L799.66 682.879 L799.101 682.879 L798.542 682.879 L797.982 682.879 L797.423 682.879 L796.864 682.879 L796.305 682.879 L795.745 682.879 L795.186 682.879 L794.627 682.879 L794.068 682.879 L793.508 682.879 L792.949 682.879 L792.39 682.879 L791.831 682.879 L791.271 682.879 L790.712 682.879 L790.153 682.879 L789.594 682.879 L789.034 682.879 L788.475 682.879 L787.916 682.879 L787.357 682.879 L786.797 682.879 L786.238 682.879 L785.679 682.879 L785.12 682.879 L784.56 682.879 L784.001 682.879 L783.442 682.879 L782.883 682.879 L782.323 682.879 L781.764 682.879 L781.205 682.879 L780.646 682.879 L780.086 682.879 L779.527 682.879 L778.968 682.879 L778.409 682.879 L777.849 682.879 L777.29 682.879 L776.731 682.879 L776.172 682.879 L775.612 682.879 L775.053 682.879 L774.494 682.879 L773.935 682.879 L773.375 682.879 L772.816 682.879 L772.257 682.879 L771.698 682.879 L771.138 682.879 L770.579 682.879 L770.02 682.879 L769.461 682.879 L768.901 682.879 L768.342 682.879 L767.783 682.879 L767.224 682.879 L766.664 682.879 L766.105 682.879 L765.546 682.879 L764.987 682.879 L764.427 682.879 L763.868 682.879 L763.309 682.879 L762.75 682.879 L762.19 682.879 L761.631 682.879 L761.072 682.879 L760.513 682.879 L759.953 682.879 L759.394 682.879 L758.835 682.879 L758.276 682.879 L757.716 682.879 L757.157 682.879 L756.598 682.879 L756.039 682.879 L755.479 682.879 L754.92 682.879 L754.361 682.879 L753.802 682.879 L753.242 682.879 L752.683 682.879 L752.124 682.879 L751.565 682.879 L751.005 682.879 L750.446 682.879 L749.887 682.879 L749.328 682.879 L748.768 682.879 L748.209 682.879 L747.65 682.879 L747.091 682.879 L746.531 682.879 L745.972 682.879 L745.413 682.879 L744.854 682.879 L744.294 682.879 L743.735 682.879 L743.176 682.879 L742.617 682.879 L742.057 682.879 L741.498 682.879 L740.939 682.879 L740.38 682.879 L739.82 682.879 L739.261 682.879 L738.702 682.879 L738.143 682.879 L737.583 682.879 L737.024 682.879 L736.465 682.879 L735.906 682.879 L735.346 682.879 L734.787 682.879 L734.228 682.879 L733.669 682.879 L733.109 682.879 L732.55 682.879 L731.991 682.879 L731.432 682.879 L730.872 682.879 L730.313 682.879 L729.754 682.879 L729.195 682.879 L728.635 682.879 L728.076 682.879 L727.517 682.879 L726.958 682.879 L726.398 682.879 L725.839 682.879 L725.28 682.879 L724.721 682.879 L724.161 682.879 L723.602 682.879 L723.043 682.879 L722.484 682.879 L721.924 682.879 L721.365 682.879 L720.806 682.879 L720.247 682.879  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.188 720.806,684.188 721.365,684.188 721.924,684.188 722.484,684.188 723.043,684.188 723.602,684.188 724.161,684.188 724.721,684.188 725.28,684.188 725.839,684.188 726.398,684.188 726.958,684.188 727.517,684.188 728.076,684.188 728.635,684.188 729.195,684.188 729.754,684.188 730.313,684.188 730.872,684.188 731.432,684.188 731.991,684.188 732.55,684.188 733.109,684.188 733.669,684.188 734.228,684.188 734.787,684.188 735.346,684.188 735.906,684.188 736.465,684.188 737.024,684.188 737.583,684.188 738.143,684.188 738.702,684.188 739.261,684.188 739.82,684.188 740.38,684.188 740.939,684.188 741.498,684.188 742.057,684.188 742.617,684.188 743.176,684.188 743.735,684.188 744.294,684.188 744.854,684.188 745.413,684.188 745.972,684.188 746.531,684.188 747.091,684.188 747.65,684.188 748.209,684.188 748.768,684.188 749.328,684.188 749.887,684.188 750.446,684.188 751.005,684.188 751.565,684.188 752.124,684.188 752.683,684.188 753.242,684.188 753.802,684.188 754.361,684.188 754.92,684.188 755.479,684.188 756.039,684.188 756.598,684.188 757.157,684.188 757.716,684.188 758.276,684.188 758.835,684.188 759.394,684.188 759.953,684.188 760.513,684.188 761.072,684.188 761.631,684.188 762.19,684.188 762.75,684.188 763.309,684.188 763.868,684.188 764.427,684.188 764.987,684.188 765.546,684.188 766.105,684.188 766.664,684.188 767.224,684.188 767.783,684.188 768.342,684.188 768.901,684.188 769.461,684.188 770.02,684.188 770.579,684.188 771.138,684.188 771.698,684.188 772.257,684.188 772.816,684.188 773.375,684.188 773.935,684.188 774.494,684.188 775.053,684.188 775.612,684.188 776.172,684.188 776.731,684.188 777.29,684.188 777.849,684.188 778.409,684.188 778.968,684.188 779.527,684.188 780.086,684.188 780.646,684.188 781.205,684.188 781.764,684.188 782.323,684.188 782.883,684.188 783.442,684.188 784.001,684.188 784.56,684.188 785.12,684.188 785.679,684.188 786.238,684.188 786.797,684.188 787.357,684.188 787.916,684.188 788.475,684.188 789.034,684.188 789.594,684.188 790.153,684.188 790.712,684.188 791.271,684.188 791.831,684.188 792.39,684.188 792.949,684.188 793.508,684.188 794.068,684.188 794.627,684.188 795.186,684.188 795.745,684.188 796.305,684.188 796.864,684.188 797.423,684.188 797.982,684.188 798.542,684.188 799.101,684.188 799.66,684.188 800.219,684.188 800.779,684.188 801.338,684.188 801.897,684.188 802.456,684.188 803.016,684.188 803.575,684.188 804.134,684.188 804.693,684.188 805.253,684.188 805.812,684.188 806.371,684.188 806.931,684.188 807.49,684.188 808.049,684.188 808.608,684.188 809.168,684.188 809.727,684.188 810.286,684.188 810.845,684.188 811.405,684.188 811.964,684.188 812.523,684.188 813.082,684.188 813.642,684.188 814.201,684.188 814.76,684.188 815.319,684.188 815.879,684.188 816.438,684.188 816.997,684.188 817.556,684.188 818.116,684.188 818.675,684.188 819.234,684.188 819.793,684.188 820.353,684.188 820.912,684.188 821.471,684.188 822.03,684.188 822.59,684.188 823.149,684.188 823.708,684.188 824.267,684.188 824.827,684.188 825.386,684.188 825.945,684.188 826.504,684.188 827.064,684.188 827.623,684.188 828.182,684.188 828.741,684.188 829.301,684.188 829.86,684.188 830.419,684.188 830.978,684.188 831.538,684.188 832.097,684.188 832.656,684.188 833.215,684.188 833.775,684.188 834.334,684.188 834.893,684.188 835.452,684.188 836.012,684.188 836.571,684.188 837.13,684.188 837.689,684.188 838.249,684.188 838.808,684.188 839.367,684.188 839.926,684.188 840.486,684.188 841.045,684.188 841.604,684.188 842.163,684.188 842.723,684.188 843.282,684.188 843.841,684.188 844.4,684.188 844.96,684.188 845.519,684.188 846.078,684.188 846.637,684.188 847.197,684.188 847.756,684.188 848.315,684.188 848.874,684.188 849.434,684.188 849.993,684.188 850.552,684.188 851.111,684.188 851.671,684.188 852.23,684.188 852.789,684.188 853.348,684.188 853.908,684.188 854.467,684.188 855.026,684.188 855.585,684.188 856.145,684.188 856.704,684.188 857.263,684.188 857.822,684.188 858.382,684.188 858.941,684.188 859.5,684.188 860.059,684.188 860.619,684.188 861.178,684.188 861.737,684.188 862.296,684.188 862.856,684.188 863.415,684.188 863.974,684.188 864.533,684.188 865.093,684.188 865.652,684.188 866.211,684.188 866.77,684.188 867.33,684.188 867.889,684.188 868.448,684.188 869.007,684.188 869.567,684.188 870.126,684.188 870.685,684.188 871.244,684.188 871.804,684.188 872.363,684.188 872.922,684.188 873.481,684.188 874.041,684.188 874.6,684.188 875.159,684.188 875.718,684.188 876.278,684.188 876.837,684.188 877.396,684.188 877.955,684.188 878.515,684.188 879.074,684.188 879.633,684.188 880.192,684.188 880.752,684.188 881.311,684.188 881.87,684.188 882.429,684.188 882.989,684.188 883.548,684.188 884.107,684.188 884.666,684.188 885.226,684.188 885.785,684.188 886.344,684.188 886.903,684.188 887.463,684.188 888.022,684.188 888.581,684.188 889.14,684.188 889.7,684.188 890.259,684.188 890.818,684.188 891.377,684.188 891.937,684.188 892.496,684.188 893.055,684.188 893.614,684.188 894.174,684.188 894.733,684.188 895.292,684.188 895.851,684.188 896.411,684.188 896.97,684.188 897.529,684.188 898.088,684.188 898.648,684.188 899.207,684.188 899.766,684.188 900.325,684.188 900.885,684.188 901.444,684.188 902.003,684.188 902.562,684.188 903.122,684.188 903.681,684.188 904.24,684.188 904.799,684.188 905.359,684.188 905.918,684.188 906.477,684.188 907.036,684.188 907.596,684.188 908.155,684.188 908.714,684.188 909.273,684.188 909.833,684.188 910.392,684.188 910.951,684.188 911.51,684.188 912.07,684.188 912.629,684.188 913.188,684.188 913.747,684.188 914.307,684.188 914.866,684.188 915.425,684.188 915.984,684.188 916.544,684.188 917.103,684.188 917.662,684.188 918.221,684.188 918.781,684.188 919.34,684.188 919.899,684.188 920.458,684.188 921.018,684.188 921.577,684.188 922.136,684.188 922.695,684.188 923.255,684.188 923.814,684.188 924.373,684.188 924.932,684.188 925.492,684.188 926.051,684.188 926.61,684.188 927.169,684.188 927.729,684.188 928.288,684.188 928.847,684.188 929.406,684.188 929.966,684.188 930.525,684.188 931.084,684.188 931.644,684.188 932.203,684.188 932.762,684.188 933.321,684.188 933.881,684.188 934.44,684.188 934.999,684.188 935.558,684.188 936.118,684.188 936.677,684.188 937.236,684.188 937.795,684.188 938.355,684.188 938.914,684.188 939.473,684.188 940.032,684.188 940.592,684.188 941.151,684.188 941.71,684.188 942.269,684.188 942.829,684.188 943.388,684.188 943.947,684.188 944.506,684.188 945.066,684.188 945.625,684.188 946.184,684.188 946.743,684.188 947.303,684.188 947.862,684.188 948.421,684.188 948.98,684.188 949.54,684.188 950.099,684.188 950.658,684.188 951.217,684.188 951.777,684.188 952.336,684.188 952.895,684.188 953.454,684.188 954.014,684.188 954.573,684.188 955.132,684.188 955.691,684.188 956.251,684.188 956.81,684.188 957.369,684.188 957.928,684.188 958.488,684.188 959.047,684.188 959.606,684.188 960.165,684.188 960.725,684.188 961.284,684.188 961.843,684.188 962.402,684.188 962.962,684.188 963.521,684.188 964.08,684.188 964.639,684.188 965.199,684.188 965.758,684.188 966.317,684.188 966.876,684.188 967.436,684.188 967.995,684.188 968.554,684.188 969.113,684.188 969.673,684.188 970.232,684.188 970.791,684.188 971.35,684.188 971.91,684.188 972.469,684.188 973.028,684.188 973.587,684.188 974.147,684.188 974.706,684.188 975.265,684.188 975.824,684.188 976.384,684.188 976.943,684.188 977.502,684.188 978.061,684.188 978.621,684.188 979.18,684.188 979.739,684.188 980.298,684.188 980.858,684.188 981.417,684.188 981.976,684.188 982.535,684.188 983.095,684.188 983.654,684.188 984.213,684.188 984.772,684.188 985.332,684.188 985.891,684.188 986.45,684.188 987.009,684.188 987.569,684.188 988.128,684.188 988.687,684.188 989.246,684.188 989.806,684.188 990.365,684.188 990.924,684.188 991.483,684.188 992.043,684.188 992.602,684.188 993.161,684.188 993.72,684.188 994.28,684.188 994.839,684.188 995.398,684.188 995.957,684.188 996.517,684.188 997.076,684.188 997.635,684.188 998.194,684.188 998.754,684.188 999.313,684.188 999.872,684.188 1000.43,684.188 1000.99,684.188 1001.55,684.188 1002.11,684.188 1002.67,684.188 1003.23,684.188 1003.79,684.188 1004.35,684.188 1004.91,684.188 1005.46,684.188 1006.02,684.188 1006.58,684.188 1007.14,684.188 1007.7,684.188 1008.26,684.188 1008.82,684.188 1009.38,684.188 1009.94,684.188 1010.5,684.188 1011.06,684.188 1011.62,684.188 1012.18,684.188 1012.73,684.188 1013.29,684.188 1013.85,684.188 1014.41,684.188 1014.97,684.188 1015.53,684.188 1016.09,684.188 1016.65,684.188 1017.21,684.188 1017.77,684.188 1018.33,684.188 1018.89,684.188 1019.45,684.188 1020.01,684.188 1020.56,684.188 1021.12,684.188 1021.68,684.188 1022.24,684.188 1022.8,684.188 1023.36,684.188 1023.92,684.188 1024.48,684.188 1025.04,684.188 1025.6,684.188 1026.16,684.188 1026.72,684.188 1027.28,684.188 1027.83,684.188 1028.39,684.188 1028.95,684.188 1029.51,684.188 1030.07,684.188 1030.63,684.188 1031.19,684.188 1031.75,684.188 1032.31,684.188 1032.87,684.188 1033.43,684.188 1033.99,684.188 1034.55,684.188 1035.1,684.188 1035.66,684.188 1036.22,684.188 1036.78,684.188 1037.34,684.188 1037.9,684.188 1038.46,684.188 1039.02,684.188 1039.58,684.188 1040.14,684.188 1040.7,684.188 1041.26,684.188 1041.82,684.188 1042.38,684.188 1042.93,684.188 1043.49,684.188 1044.05,684.188 1044.61,684.188 1045.17,684.188 1045.73,684.188 1046.29,684.188 1046.85,684.188 1047.41,684.188 1047.97,684.188 1048.53,684.188 1049.09,684.188 1049.65,684.188 1050.2,684.188 1050.76,684.188 1051.32,684.188 1051.88,684.188 1052.44,684.188 1053,684.188 1053.56,684.188 1054.12,684.188 1054.68,684.188 1055.24,684.188 1055.8,684.188 1056.36,684.188 1056.92,684.188 1057.48,684.188 1058.03,684.188 1058.59,684.188 1059.15,684.188 1059.71,684.188 1060.27,684.188 1060.83,684.188 1061.39,684.188 1061.95,684.188 1062.51,684.188 1063.07,684.188 1063.63,684.188 1064.19,684.188 1064.75,684.188 1065.3,684.188 1065.86,684.188 1066.42,684.188 1066.98,684.188 1067.54,684.188 1068.1,684.188 1068.66,684.188 1069.22,684.188 1069.78,684.188 1070.34,684.188 1070.9,684.188 1071.46,684.188 1072.02,684.188 1072.57,684.188 1073.13,684.188 1073.69,684.188 1074.25,684.188 1074.81,684.188 1075.37,684.188 1075.93,684.188 1076.49,684.188 1077.05,684.188 1077.61,684.188 1078.17,684.188 1078.73,684.188 1079.29,684.188 1079.85,684.188 1080.4,684.188 1080.96,684.188 1081.52,684.188 1082.08,684.188 1082.64,684.188 1083.2,684.188 1083.76,684.188 1084.32,684.188 1084.88,684.188 1085.44,684.188 1086,684.188 1086.56,684.188 1087.12,684.188 1087.67,684.188 1088.23,684.188 1088.79,684.188 1089.35,684.188 1089.91,684.188 1090.47,684.188 1091.03,684.188 1091.59,684.188 1092.15,684.188 1092.71,684.188 1093.27,684.188 1093.83,684.188 1094.39,684.188 1094.94,684.188 1095.5,684.188 1096.06,684.188 1096.62,684.188 1097.18,684.188 1097.74,684.188 1098.3,684.188 1098.86,684.188 1099.42,684.188 1099.98,684.188 1100.54,684.188 1101.1,684.188 1101.66,684.188 1102.22,684.188 1102.77,684.188 1103.33,684.188 1103.89,684.188 1104.45,684.188 1105.01,684.188 1105.57,684.188 1106.13,684.188 1106.69,684.188 1107.25,684.188 1107.81,684.188 1108.37,684.188 1108.93,684.188 1109.49,684.188 1110.04,684.188 1110.6,684.188 1111.16,684.188 1111.72,684.188 1112.28,684.188 1112.84,684.188 1113.4,684.188 1113.96,684.188 1114.52,684.188 1115.08,684.188 1115.64,684.188 1116.2,684.188 1116.76,684.188 1117.31,684.188 1117.87,684.188 1118.43,684.188 1118.99,684.188 1119.55,684.188 1120.11,684.188 1120.67,684.188 1121.23,684.188 1121.79,684.188 1122.35,684.188 1122.91,684.188 1123.47,684.188 1124.03,684.188 1124.59,684.188 1125.14,684.188 1125.7,684.188 1126.26,684.188 1126.82,684.188 1127.38,684.188 1127.94,684.188 1128.5,684.188 1129.06,684.188 1129.62,684.188 1130.18,684.188 1130.74,684.188 1131.3,684.188 1131.86,684.188 1132.41,684.188 1132.97,684.188 1133.53,684.188 1134.09,684.188 1134.65,684.188 1135.21,684.188 1135.77,684.188 1136.33,684.188 1136.89,684.188 1137.45,684.188 1138.01,684.188 1138.57,684.188 1139.13,684.188 1139.68,684.188 1140.24,684.188 1140.8,684.188 1141.36,684.188 1141.92,684.188 1142.48,684.188 1143.04,684.188 1143.6,684.188 1144.16,684.188 1144.72,684.188 1145.28,684.188 1145.84,684.188 1146.4,684.188 1146.96,684.188 1147.51,684.188 1148.07,684.188 1148.63,684.188 1149.19,684.188 1149.75,684.188 1150.31,684.188 1150.87,684.188 1151.43,684.188 1151.99,684.188 1152.55,684.188 1153.11,684.188 1153.67,684.188 1154.23,684.188 1154.78,684.188 1155.34,684.188 1155.9,684.188 1156.46,684.188 1157.02,684.188 1157.58,684.188 1158.14,684.188 1158.7,684.188 1159.26,684.188 1159.82,684.188 1160.38,684.188 1160.94,684.188 1161.5,684.188 1162.05,684.188 1162.61,684.188 1163.17,684.188 1163.73,684.188 1164.29,684.188 1164.85,684.188 1165.41,684.188 1165.97,684.188 1166.53,684.188 1167.09,684.188 1167.65,684.188 1168.21,684.188 1168.77,684.188 1169.33,684.188 1169.88,684.188 1170.44,684.188 1171,684.188 1171.56,684.188 1172.12,684.188 1172.68,684.188 1173.24,684.188 1173.8,684.188 1174.36,684.188 1174.92,684.188 1175.48,684.188 1176.04,684.188 1176.6,684.188 1177.15,684.188 1177.71,684.188 1178.27,684.188 1178.83,684.188 1179.39,684.188 1179.95,684.188 1180.51,684.188 1181.07,684.188 1181.63,684.188 1182.19,684.188 1182.75,684.188 1183.31,684.188 1183.87,684.188 1184.43,684.188 1184.98,684.188 1185.54,684.188 1186.1,684.188 1186.66,684.188 1187.22,684.188 1187.78,684.188 1188.34,684.188 1188.9,684.188 1189.46,684.188 1190.02,684.188 1190.58,684.188 1191.14,684.188 1191.7,684.188 1192.25,684.188 1192.81,684.188 1193.37,684.188 1193.93,684.188 1194.49,684.188 1195.05,684.188 1195.61,684.188 1196.17,684.188 1196.73,684.188 1197.29,684.188 1197.85,684.188 1198.41,684.188 1198.97,684.188 1199.52,684.188 1200.08,684.188 1200.64,684.188 1201.2,684.188 1201.76,684.188 1202.32,684.188 1202.88,684.188 1203.44,684.188 1204,684.188 1204.56,684.188 1205.12,684.188 1205.68,684.188 1206.24,684.188 1206.8,684.188 1207.35,684.188 1207.91,684.188 1208.47,684.188 1209.03,684.188 1209.59,684.188 1210.15,684.188 1210.71,684.188 1211.27,684.188 1211.83,684.188 1212.39,684.188 1212.95,684.188 1213.51,684.188 1214.07,684.188 1214.62,684.188 1215.18,684.188 1215.74,684.188 1216.3,684.188 1216.86,684.188 1217.42,684.188 1217.98,684.188 1218.54,684.188 1219.1,684.188 1219.66,684.188 1220.22,684.188 1220.78,684.188 1221.34,684.188 1221.89,684.188 1222.45,684.188 1223.01,684.188 1223.57,684.188 1224.13,684.188 1224.69,684.188 1225.25,684.188 1225.81,684.188 1226.37,684.188 1226.93,684.188 1227.49,684.188 1228.05,684.188 1228.61,684.188 1229.17,684.188 1229.72,684.188 1230.28,684.188 1230.84,684.188 1231.4,684.188 1231.96,684.188 1232.52,684.188 1233.08,684.188 1233.64,684.188 1234.2,684.188 1234.76,684.188 1235.32,684.188 1235.88,684.188 1236.44,684.188 1236.99,684.188 1237.55,684.188 1238.11,684.188 1238.67,684.188 1239.23,684.188 1239.79,684.188 1240.35,684.188 1240.91,684.188 1241.47,684.188 1242.03,684.188 1242.59,684.188 1243.15,684.188 1243.71,684.188 1244.26,684.188 1244.82,684.188 1245.38,684.188 1245.94,684.188 1246.5,684.188 1247.06,684.188 1247.62,684.188 1248.18,684.188 1248.74,684.188 1249.3,684.188 1249.86,684.188 1250.42,684.188 1250.98,684.188 1251.54,684.188 1252.09,684.188 1252.65,684.188 1253.21,684.188 1253.77,684.188 1254.33,684.188 1254.89,684.188 1255.45,684.188 1256.01,684.188 1256.57,684.188 1257.13,684.188 1257.69,684.188 1258.25,684.188 1258.81,684.188 1259.36,684.188 1259.92,684.188 1260.48,684.188 1261.04,684.188 1261.6,684.188 1262.16,684.188 1262.72,684.188 1263.28,684.188 1263.84,684.188 1264.4,684.188 1264.96,684.188 1265.52,684.188 1266.08,684.188 1266.63,684.188 1267.19,684.188 1267.75,684.188 1268.31,684.188 1268.87,684.188 1269.43,684.188 1269.99,684.188 1270.55,684.188 1271.11,684.188 1271.67,684.188 1272.23,684.188 1272.79,684.188 1273.35,684.188 1273.91,684.188 1274.46,684.188 1275.02,684.188 1275.58,684.188 1276.14,684.188 1276.7,684.188 1277.26,684.188 1277.82,684.188 1278.38,684.188 1278.94,684.188 1279.5,684.188 1280.06,684.188 1280.62,684.188 1281.18,684.188 1281.73,684.188 1282.29,684.188 1282.85,684.188 1283.41,684.188 1283.97,684.188 1284.53,684.188 1285.09,684.188 1285.65,684.188 1286.21,684.188 1286.77,684.188 1287.33,684.188 1287.89,684.188 1288.45,684.188 1289,684.188 1289.56,684.188 1290.12,684.188 1290.68,684.188 1291.24,684.188 1291.8,684.188 1292.36,684.188 1292.92,684.188 1293.48,684.188 1294.04,684.188 1294.6,684.188 1295.16,684.188 1295.72,684.188 1296.28,684.188 1296.83,684.188 1297.39,684.188 1297.95,684.188 1298.51,684.188 1299.07,684.188 1299.63,684.188 1300.19,684.188 1300.75,684.188 1301.31,684.188 1301.87,684.188 1302.43,684.188 1302.99,684.188 1303.55,684.188 1304.1,684.188 1304.66,684.188 1305.22,684.188 1305.78,684.188 1306.34,684.188 1306.9,684.188 1307.46,684.188 1308.02,684.188 1308.58,684.188 1309.14,684.188 1309.7,684.188 1310.26,684.188 1310.82,684.188 1311.38,684.188 1311.93,684.188 1312.49,684.188 1313.05,684.188 1313.61,684.188 1314.17,684.188 1314.73,684.188 1315.29,684.188 1315.85,684.188 1316.41,684.188 1316.97,684.188 1317.53,684.188 1318.09,684.188 1318.65,684.188 1319.2,684.188 1319.76,684.188 1320.32,684.188 1320.88,684.188 1321.44,684.188 1322,684.188 1322.56,684.188 1323.12,684.188 1323.68,684.188 1324.24,684.188 1324.8,684.188 1325.36,684.188 1325.92,684.188 1326.47,684.188 1327.03,684.188 1327.59,684.188 1328.15,684.188 1328.71,684.188 1329.27,684.188 1329.83,684.188 1330.39,684.188 1330.95,684.188 1331.51,684.188 1332.07,684.188 1332.63,684.188 1333.19,684.188 1333.75,684.188 1334.3,684.188 1334.86,684.188 1335.42,684.188 1335.98,684.188 1336.54,684.188 1337.1,684.188 1337.66,684.188 1338.22,684.188 1338.78,684.188 1339.34,684.188 1339.9,684.188 1340.46,684.188 1341.02,684.188 1341.57,684.188 1342.13,684.188 1342.69,684.188 1343.25,684.188 1343.81,684.188 1344.37,684.188 1344.93,684.188 1345.49,684.188 1346.05,684.188 1346.61,684.188 1347.17,684.188 1347.73,684.188 1348.29,684.188 1348.84,684.188 1349.4,684.188 1349.96,684.188 1350.52,684.188 1351.08,684.188 1351.64,684.188 1352.2,684.188 1352.76,684.188 1353.32,684.188 1353.88,684.188 1354.44,684.188 1355,684.188 1355.56,684.188 1356.12,684.188 1356.67,684.188 1357.23,684.188 1357.79,684.188 1358.35,684.188 1358.91,684.188 1359.47,684.188 1360.03,684.188 1360.59,684.188 1361.15,684.188 1361.71,684.188 1362.27,684.188 1362.83,684.188 1363.39,684.188 1363.94,684.188 1364.5,684.188 1365.06,684.188 1365.62,684.188 1366.18,684.188 1366.74,684.188 1367.3,684.188 1367.86,684.188 1368.42,684.188 1368.98,684.188 1369.54,684.188 1370.1,684.188 1370.66,684.188 1371.21,684.188 1371.77,684.188 1372.33,684.188 1372.89,684.188 1373.45,684.188 1374.01,684.188 1374.57,684.188 1375.13,684.188 1375.69,684.188 1376.25,684.188 1376.81,684.188 1377.37,684.188 1377.93,684.188 1378.49,684.188 1379.04,684.188 1379.6,684.188 1380.16,684.188 1380.72,684.188 1381.28,684.188 1381.84,684.188 1382.4,684.188 1382.96,684.188 1383.52,684.188 1384.08,684.188 1384.64,684.188 1385.2,684.188 1385.76,684.188 1386.31,684.188 1386.87,684.188 1387.43,684.188 1387.99,684.188 1388.55,684.188 1389.11,684.188 1389.67,684.188 1390.23,684.188 1390.79,684.188 1391.35,684.188 1391.91,684.188 1392.47,684.188 1393.03,684.188 1393.58,684.188 1394.14,684.188 1394.7,684.188 1395.26,684.188 1395.82,684.188 1396.38,684.188 1396.94,684.188 1397.5,684.188 1398.06,684.188 1398.62,684.188 1399.18,684.188 1399.74,684.188 1400.3,684.188 1400.86,684.188 1401.41,684.188 1401.97,684.188 1402.53,684.188 1403.09,684.188 1403.65,684.188 1404.21,684.188 1404.77,684.188 1405.33,684.188 1405.89,684.188 1406.45,684.188 1407.01,684.188 1407.57,684.188 1408.13,684.188 1408.68,684.188 1409.24,684.188 1409.8,684.188 1410.36,684.188 1410.92,684.188 1411.48,684.188 1412.04,684.188 1412.6,684.188 1413.16,684.188 1413.72,684.188 1414.28,684.188 1414.84,684.188 1415.4,684.188 1415.95,684.188 1416.51,684.188 1417.07,684.188 1417.63,684.188 1418.19,684.188 1418.75,684.188 1419.31,684.188 1419.87,684.188 1420.43,684.188 1420.99,684.188 1421.55,684.188 1422.11,684.188 1422.67,684.188 1423.23,684.188 1423.78,684.188 1424.34,684.188 1424.9,684.188 1425.46,684.188 1426.02,684.188 1426.58,684.188 1427.14,684.188 1427.7,684.188 1428.26,684.188 1428.82,684.188 1429.38,684.188 1429.94,684.188 1430.5,684.188 1431.05,684.188 1431.61,684.188 1432.17,684.188 1432.73,684.188 1433.29,684.188 1433.85,684.188 1434.41,684.188 1434.97,684.188 1435.53,684.188 1436.09,684.188 1436.65,684.188 1437.21,684.188 1437.77,684.188 1438.33,684.188 1438.88,684.188 1439.44,684.188 1440,684.188 1440.56,684.188 1441.12,684.188 1441.68,684.188 1442.24,684.188 1442.8,684.188 1443.36,684.188 1443.92,684.188 1444.48,684.188 1445.04,684.188 1445.6,684.188 1446.15,684.188 1446.71,684.188 1447.27,684.188 1447.83,684.188 1448.39,684.188 1448.95,684.188 1449.51,684.188 1450.07,684.188 1450.63,684.188 1451.19,684.188 1451.75,684.188 1452.31,684.188 1452.87,684.188 1453.42,684.188 1453.98,684.188 1454.54,684.188 1455.1,684.188 1455.66,684.188 1456.22,684.188 1456.78,684.188 1457.34,684.188 1457.9,684.188 1458.46,684.188 1459.02,684.188 1459.58,684.188 1460.14,684.188 1460.7,684.188 1461.25,684.188 1461.81,684.188 1462.37,684.188 1462.93,684.188 1463.49,684.188 1464.05,684.188 1464.61,684.188 1465.17,684.188 1465.73,684.188 1466.29,684.188 1466.85,684.188 1467.41,684.188 1467.97,684.188 1468.52,684.188 1469.08,684.188 1469.64,684.188 1470.2,684.188 1470.76,684.188 1471.32,684.188 1471.88,684.188 1472.44,684.188 1473,684.188 1473.56,684.188 1474.12,684.188 1474.68,684.188 1475.24,684.188 1475.79,684.188 1476.35,684.188 1476.91,684.188 1477.47,684.188 1478.03,684.188 1478.59,684.188 1479.15,684.188 1479.71,684.188 1480.27,684.188 1480.83,684.188 1481.39,684.188 1481.95,684.188 1482.51,684.188 1483.07,684.188 1483.62,684.188 1484.18,684.188 1484.74,684.188 1485.3,684.188 1485.86,684.188 1486.42,684.188 1486.98,684.188 1487.54,684.188 1488.1,684.188 1488.66,684.188 1489.22,684.188 1489.78,684.188 1490.34,684.188 1490.89,684.188 1491.45,684.188 1492.01,684.188 1492.57,684.188 1493.13,684.188 1493.69,684.188 1494.25,684.188 1494.81,684.188 1495.37,684.188 1495.93,684.188 1496.49,684.188 1497.05,684.188 1497.61,684.188 1498.16,684.188 1498.72,684.188 1499.28,684.188 1499.84,684.188 1500.4,684.188 1500.96,684.188 1501.52,684.188 1502.08,684.188 1502.64,684.188 1503.2,684.188 1503.76,684.188 1504.32,684.188 1504.88,684.188 1505.44,684.188 1505.99,684.188 1506.55,684.188 1507.11,684.188 1507.67,684.188 1508.23,684.188 1508.79,684.188 1509.35,684.188 1509.91,684.188 1510.47,684.188 1511.03,684.188 1511.59,684.188 1512.15,684.188 1512.71,684.188 1513.26,684.188 1513.82,684.188 1514.38,684.188 1514.94,684.188 1515.5,684.188 1516.06,684.188 1516.62,684.188 1517.18,684.188 1517.74,684.188 1518.3,684.188 1518.86,684.188 1519.42,684.188 1519.98,684.188 1520.53,684.188 1521.09,684.188 1521.65,684.188 1522.21,684.188 1522.77,684.188 1523.33,684.188 1523.89,684.188 1524.45,684.188 1525.01,684.188 1525.57,684.188 1526.13,684.188 1526.69,684.188 1527.25,684.188 1527.81,684.188 1528.36,684.188 1528.92,684.188 1529.48,684.188 1530.04,684.188 1530.6,684.188 1531.16,684.188 1531.72,684.188 1532.28,684.188 1532.84,684.188 1533.4,684.188 1533.96,684.188 1534.52,684.188 1535.08,684.188 1535.63,684.188 1536.19,684.188 1536.75,684.188 1537.31,684.188 1537.87,684.188 1538.43,684.188 1538.99,684.188 1539.55,684.188 1540.11,684.188 1540.67,684.188 1541.23,684.188 1541.79,684.188 1542.35,684.188 1542.9,684.188 1543.46,684.188 1544.02,684.188 1544.58,684.188 1545.14,684.188 1545.7,684.188 1546.26,684.188 1546.82,684.188 1547.38,684.188 1547.94,684.188 1548.5,684.188 1549.06,684.188 1549.62,684.188 1550.18,684.188 1550.73,684.188 1551.29,684.188 1551.85,684.188 1552.41,684.188 1552.97,684.188 1553.53,684.188 1554.09,684.188 1554.65,684.188 1555.21,684.188 1555.77,684.188 1556.33,684.188 1556.89,684.188 1557.45,684.188 1558,684.188 1558.56,684.188 1559.12,684.188 1559.68,684.188 1560.24,684.188 1560.8,684.188 1561.36,684.188 1561.92,684.188 1562.48,684.188 1563.04,684.188 1563.6,684.188 1564.16,684.188 1564.72,684.188 1565.28,684.188 1565.83,684.188 1566.39,684.188 1566.95,684.188 1567.51,684.188 1568.07,684.188 1568.63,684.188 1569.19,684.188 1569.75,684.188 1570.31,684.188 1570.87,684.188 1571.43,684.188 1571.99,684.188 1572.55,684.188 1573.1,684.188 1573.66,684.188 1574.22,684.188 1574.78,684.188 1575.34,684.188 1575.9,684.188 1576.46,684.188 1577.02,684.188 1577.58,684.188 1578.14,684.188 1578.7,684.188 1579.26,684.188 1579.82,684.188 1580.37,684.188 1580.93,684.188 1581.49,684.188 1582.05,684.188 1582.61,684.188 1583.17,684.188 1583.73,684.188 1584.29,684.188 1584.85,684.188 1585.41,684.188 1585.97,684.188 1586.53,684.188 1587.09,684.188 1587.65,684.188 1588.2,684.188 1588.76,684.188 1589.32,684.188 1589.88,684.188 1590.44,684.188 1591,684.188 1591.56,684.188 1592.12,684.188 1592.68,684.188 1593.24,684.188 1593.8,684.188 1594.36,684.188 1594.92,684.188 1595.47,684.188 1596.03,684.188 1596.59,684.188 1597.15,684.188 1597.71,684.188 1598.27,684.188 1598.83,684.188 1599.39,684.188 1599.95,684.188 1600.51,684.188 1601.07,684.188 1601.63,684.188 1602.19,684.188 1602.74,684.188 1603.3,684.188 1603.86,684.188 1604.42,684.188 1604.98,684.188 1605.54,684.188 1606.1,684.188 1606.66,684.188 1607.22,684.188 1607.78,684.188 1608.34,684.188 1608.9,684.188 1609.46,684.188 1610.02,684.188 1610.57,684.188 1611.13,684.188 1611.69,684.188 1612.25,684.188 1612.81,684.188 1613.37,684.188 1613.93,684.188 1614.49,684.188 1615.05,684.188 1615.61,684.188 1616.17,684.188 1616.73,684.188 1617.29,684.188 1617.84,684.188 1618.4,684.188 1618.96,684.188 1619.52,684.188 1620.08,684.188 1620.64,684.188 1621.2,684.188 1621.76,684.188 1622.32,684.188 1622.88,684.188 1623.44,684.188 1624,684.188 1624.56,684.188 1625.11,684.188 1625.67,684.188 1626.23,684.188 1626.79,684.188 1627.35,684.188 1627.91,684.188 1628.47,684.188 1629.03,684.188 1629.59,684.188 1630.15,684.188 1630.71,684.188 1631.27,684.188 1631.83,684.188 1632.39,684.188 1632.94,684.188 1633.5,684.188 1634.06,684.188 1634.62,684.188 1635.18,684.188 1635.74,684.188 1636.3,684.188 1636.86,684.188 1637.42,684.188 1637.98,684.188 1638.54,684.188 1639.1,684.188 1639.66,684.188 1640.21,684.188 1640.77,684.188 1641.33,684.188 1641.89,684.188 1642.45,684.188 1643.01,684.188 1643.57,684.188 1644.13,684.188 1644.69,684.188 1645.25,684.188 1645.81,684.188 1646.37,684.188 1646.93,684.188 1647.48,684.188 1648.04,684.188 1648.6,684.188 1649.16,684.188 1649.72,684.188 1650.28,684.188 1650.84,684.188 1651.4,684.188 1651.96,684.188 1652.52,684.188 1653.08,684.188 1653.64,684.188 1654.2,684.188 1654.76,684.188 1655.31,684.188 1655.87,684.188 1656.43,684.188 1656.99,684.188 1657.55,684.188 1658.11,684.188 1658.67,684.188 1659.23,684.188 1659.79,684.188 1660.35,684.188 1660.91,684.188 1661.47,684.188 1662.03,684.188 1662.58,684.188 1663.14,684.188 1663.7,684.188 1664.26,684.188 1664.82,684.188 1665.38,684.188 1665.94,684.188 1666.5,684.188 1667.06,684.188 1667.62,684.188 1668.18,684.188 1668.74,684.188 1669.3,684.188 1669.85,684.188 1670.41,684.188 1670.97,684.188 1671.53,684.188 1672.09,684.188 1672.65,684.188 1673.21,684.188 1673.77,684.188 1674.33,684.188 1674.89,684.188 1675.45,684.188 1676.01,684.188 1676.57,684.188 1677.13,684.188 1677.68,684.188 1678.24,684.188 1678.8,684.188 1679.36,684.188 1679.92,684.188 1680.48,684.188 1681.04,684.188 1681.6,684.188 1682.16,684.188 1682.72,684.188 1683.28,684.188 1683.84,684.188 1684.4,684.188 1684.95,684.188 1685.51,684.188 1686.07,684.188 1686.63,684.188 1687.19,684.188 1687.75,684.188 1688.31,684.188 1688.87,684.188 1689.43,684.188 1689.99,684.188 1690.55,684.188 1691.11,684.188 1691.67,684.188 1692.23,684.188 1692.78,684.188 1693.34,684.188 1693.9,684.188 1694.46,684.188 1695.02,684.188 1695.58,684.188 1696.14,684.188 1696.7,684.188 1697.26,684.188 1697.82,684.188 1698.38,684.188 1698.94,684.188 1699.5,684.188 1700.05,684.188 1700.61,684.188 1701.17,684.188 1701.73,684.188 1702.29,684.188 1702.85,684.188 1703.41,684.188 1703.97,684.188 1704.53,684.188 1705.09,684.188 1705.65,684.188 1706.21,684.188 1706.77,684.188 1707.32,684.188 1707.88,684.188 1708.44,684.188 1709,684.188 1709.56,684.188 1710.12,684.188 1710.68,684.188 1711.24,684.188 1711.8,684.188 1712.36,684.188 1712.92,684.188 1713.48,684.188 1714.04,684.188 1714.6,684.188 1715.15,684.188 1715.71,684.188 1716.27,684.188 1716.83,684.188 1717.39,684.188 1717.95,684.188 1718.51,684.188 1719.07,684.188 1719.63,684.188 1720.19,684.188 1720.75,684.188 1721.31,684.188 1721.87,684.188 1722.42,684.188 1722.98,684.188 1723.54,684.188 1724.1,684.188 1724.66,684.188 1725.22,684.188 1725.78,684.188 1726.34,684.188 1726.9,684.188 1727.46,684.188 1728.02,684.188 1728.58,684.188 1729.14,684.188 1729.69,684.188 1730.25,684.188 1730.81,684.188 1731.37,684.188 1731.93,684.188 1732.49,684.188 1733.05,684.188 1733.61,684.188 1734.17,684.188 1734.73,684.188 1735.29,684.188 1735.85,684.188 1736.41,684.188 1736.97,684.188 1737.52,684.188 1738.08,684.188 1738.64,684.188 1739.2,684.188 1739.76,684.188 1740.32,684.188 1740.88,684.188 1741.44,684.188 1742,684.188 1742.56,684.188 1743.12,684.188 1743.68,684.188 1744.24,684.188 1744.79,684.188 1745.35,684.188 1745.91,684.188 1746.47,684.188 1747.03,684.188 1747.59,684.188 1748.15,684.188 1748.71,684.188 1749.27,684.188 1749.83,684.188 1750.39,684.188 1750.95,684.188 1751.51,684.188 1752.06,684.188 1752.62,684.188 1753.18,684.188 1753.74,684.188 1754.3,684.188 1754.86,684.188 1755.42,684.188 1755.98,684.188 1756.54,684.188 1757.1,684.188 1757.66,684.188 1758.22,684.188 1758.78,684.188 1759.34,684.188 1759.89,684.188 1760.45,684.188 1761.01,684.188 1761.57,684.188 1762.13,684.188 1762.69,684.188 1763.25,684.188 1763.81,684.188 1764.37,684.188 1764.93,684.188 1765.49,684.188 1766.05,684.188 1766.61,684.188 1767.16,684.188 1767.72,684.188 1768.28,684.188 1768.84,684.188 1769.4,684.188 1769.96,684.188 1770.52,684.188 1771.08,684.188 1771.64,684.188 1772.2,684.188 1772.76,684.188 1773.32,684.188 1773.88,684.188 1774.43,684.188 1774.99,684.188 1775.55,684.188 1776.11,684.188 1776.67,684.188 1777.23,684.188 1777.79,684.188 1778.35,684.188 1778.91,684.188 1779.47,684.188 1780.03,684.188 1780.59,684.188 1781.15,684.188 1781.71,684.188 1782.26,684.188 1782.82,684.188 1783.38,684.188 1783.94,684.188 1784.5,684.188 1785.06,684.188 1785.62,684.188 1786.18,684.188 1786.74,684.188 1787.3,684.188 1787.86,684.188 1788.42,684.188 1788.98,684.188 1789.53,684.188 1790.09,684.188 1790.65,684.188 1791.21,684.188 1791.77,684.188 1792.33,684.188 1792.89,684.188 1793.45,684.188 1794.01,684.188 1794.57,684.188 1795.13,684.188 1795.69,684.188 1796.25,684.188 1796.8,684.188 1797.36,684.188 1797.92,684.188 1798.48,684.188 1799.04,684.188 1799.6,684.188 1800.16,684.188 1800.72,684.188 1801.28,684.188 1801.84,684.188 1802.4,684.188 1802.96,684.188 1803.52,684.188 1804.08,684.188 1804.63,684.188 1805.19,684.188 1805.75,684.188 1806.31,684.188 1806.87,684.188 1807.43,684.188 1807.99,684.188 1808.55,684.188 1809.11,684.188 1809.67,684.188 1810.23,684.188 1810.79,684.188 1811.35,684.188 1811.9,684.188 1812.46,684.188 1813.02,684.188 1813.58,684.188 1814.14,684.188 1814.7,684.188 1815.26,684.188 1815.82,684.188 1816.38,684.188 1816.94,684.188 1817.5,684.188 1818.06,684.188 1818.62,684.188 1819.18,684.188 1819.73,684.188 1820.29,684.188 1820.85,684.188 1821.41,684.188 1821.97,684.188 1822.53,684.188 1823.09,684.188 1823.65,684.188 1824.21,684.188 1824.77,684.188 1825.33,684.188 1825.89,684.188 1826.45,684.188 1827,684.188 1827.56,684.188 1828.12,684.188 1828.68,684.188 1829.24,684.188 1829.8,684.188 1830.36,684.188 1830.92,684.188 1831.48,684.188 1832.04,684.188 1832.6,684.188 1833.16,684.188 1833.72,684.188 1834.27,684.188 1834.83,684.188 1835.39,684.188 1835.95,684.188 1836.51,684.188 1837.07,684.188 1837.63,684.188 1838.19,684.188 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032769692482782 ± 0.02377679316779741\nProjected Energy: -4.0181238633579275 ± (0.00678446890019746, 0.006593022899136436)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.535271</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3365e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4797e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.071e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.262e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.875e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.538e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.3631242916133584\n -0.7590191922770781\n  0.13584182219622853\n  0.15789998694608975\n  0.876711441178152\n  1.5305929970973295\n  1.583573261186733\n  3.072870330325859\n  3.1256726539518347\n  4.862107221562172\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
