var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2094906556620514 ± 0.0018591680799693673\n   G2(1) = 0.9183271765623718 ± 0.0007057380459599991\n   G2(2) = 0.9809081109781241 ± 0.0006042072295487971\n   G2(3) = 0.9920387692569577 ± 0.0013201462355827568\n   G2(4) = 0.9809081109781241 ± 0.0006042072295487971\n   G2(5) = 0.9183271765623718 ± 0.0007057380459599991\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.006339673343356 ± 0.12863872050594763\n   Replica 2: -4.04438103372444 ± 0.14501025275713383\n   Replica 3: -4.013754055939969 ± 0.11925051021000024\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.8 2211.02,1260.8 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.11 2211.02,1004.11 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.416 2211.02,747.416 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.726 2211.02,490.726 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,234.036 2211.02,234.036 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.8 423.181,1260.8 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.11 423.181,1004.11 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.416 423.181,747.416 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.726 423.181,490.726 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,234.036 423.181,234.036 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M356.339 1246.59 Q352.728 1246.59 350.899 1250.16 Q349.094 1253.7 349.094 1260.83 Q349.094 1267.94 350.899 1271.5 Q352.728 1275.04 356.339 1275.04 Q359.973 1275.04 361.779 1271.5 Q363.608 1267.94 363.608 1260.83 Q363.608 1253.7 361.779 1250.16 Q359.973 1246.59 356.339 1246.59 M356.339 1242.89 Q362.149 1242.89 365.205 1247.5 Q368.284 1252.08 368.284 1260.83 Q368.284 1269.56 365.205 1274.16 Q362.149 1278.75 356.339 1278.75 Q350.529 1278.75 347.45 1274.16 Q344.395 1269.56 344.395 1260.83 Q344.395 1252.08 347.45 1247.5 Q350.529 1242.89 356.339 1242.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M290.043 1017.45 L306.363 1017.45 L306.363 1021.39 L284.418 1021.39 L284.418 1017.45 Q287.08 1014.7 291.664 1010.07 Q296.27 1005.41 297.451 1004.07 Q299.696 1001.55 300.576 999.812 Q301.478 998.053 301.478 996.363 Q301.478 993.609 299.534 991.872 Q297.613 990.136 294.511 990.136 Q292.312 990.136 289.858 990.9 Q287.427 991.664 284.65 993.215 L284.65 988.493 Q287.474 987.359 289.927 986.78 Q292.381 986.201 294.418 986.201 Q299.789 986.201 302.983 988.886 Q306.177 991.572 306.177 996.062 Q306.177 998.192 305.367 1000.11 Q304.58 1002.01 302.474 1004.6 Q301.895 1005.28 298.793 1008.49 Q295.691 1011.69 290.043 1017.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 986.826 L334.58 986.826 L334.58 990.761 L320.506 990.761 L320.506 999.234 Q321.524 998.886 322.543 998.724 Q323.562 998.539 324.58 998.539 Q330.367 998.539 333.747 1001.71 Q337.126 1004.88 337.126 1010.3 Q337.126 1015.88 333.654 1018.98 Q330.182 1022.06 323.862 1022.06 Q321.687 1022.06 319.418 1021.69 Q317.173 1021.32 314.765 1020.58 L314.765 1015.88 Q316.849 1017.01 319.071 1017.57 Q321.293 1018.12 323.77 1018.12 Q327.774 1018.12 330.112 1016.02 Q332.45 1013.91 332.45 1010.3 Q332.45 1006.69 330.112 1004.58 Q327.774 1002.47 323.77 1002.47 Q321.895 1002.47 320.02 1002.89 Q318.168 1003.31 316.224 1004.19 L316.224 986.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 989.905 Q352.728 989.905 350.899 993.47 Q349.094 997.011 349.094 1004.14 Q349.094 1011.25 350.899 1014.81 Q352.728 1018.35 356.339 1018.35 Q359.973 1018.35 361.779 1014.81 Q363.608 1011.25 363.608 1004.14 Q363.608 997.011 361.779 993.47 Q359.973 989.905 356.339 989.905 M356.339 986.201 Q362.149 986.201 365.205 990.808 Q368.284 995.391 368.284 1004.14 Q368.284 1012.87 365.205 1017.47 Q362.149 1022.06 356.339 1022.06 Q350.529 1022.06 347.45 1017.47 Q344.395 1012.87 344.395 1004.14 Q344.395 995.391 347.45 990.808 Q350.529 986.201 356.339 986.201 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M286.062 730.136 L304.418 730.136 L304.418 734.071 L290.344 734.071 L290.344 742.544 Q291.363 742.196 292.381 742.034 Q293.4 741.849 294.418 741.849 Q300.205 741.849 303.585 745.02 Q306.964 748.192 306.964 753.608 Q306.964 759.187 303.492 762.289 Q300.02 765.368 293.701 765.368 Q291.525 765.368 289.256 764.997 Q287.011 764.627 284.603 763.886 L284.603 759.187 Q286.687 760.321 288.909 760.877 Q291.131 761.432 293.608 761.432 Q297.613 761.432 299.951 759.326 Q302.288 757.219 302.288 753.608 Q302.288 749.997 299.951 747.891 Q297.613 745.784 293.608 745.784 Q291.733 745.784 289.858 746.201 Q288.006 746.618 286.062 747.497 L286.062 730.136 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 733.215 Q322.566 733.215 320.737 736.78 Q318.932 740.321 318.932 747.451 Q318.932 754.557 320.737 758.122 Q322.566 761.664 326.177 761.664 Q329.811 761.664 331.617 758.122 Q333.446 754.557 333.446 747.451 Q333.446 740.321 331.617 736.78 Q329.811 733.215 326.177 733.215 M326.177 729.511 Q331.987 729.511 335.043 734.118 Q338.122 738.701 338.122 747.451 Q338.122 756.178 335.043 760.784 Q331.987 765.368 326.177 765.368 Q320.367 765.368 317.288 760.784 Q314.233 756.178 314.233 747.451 Q314.233 738.701 317.288 734.118 Q320.367 729.511 326.177 729.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 733.215 Q352.728 733.215 350.899 736.78 Q349.094 740.321 349.094 747.451 Q349.094 754.557 350.899 758.122 Q352.728 761.664 356.339 761.664 Q359.973 761.664 361.779 758.122 Q363.608 754.557 363.608 747.451 Q363.608 740.321 361.779 736.78 Q359.973 733.215 356.339 733.215 M356.339 729.511 Q362.149 729.511 365.205 734.118 Q368.284 738.701 368.284 747.451 Q368.284 756.178 365.205 760.784 Q362.149 765.368 356.339 765.368 Q350.529 765.368 347.45 760.784 Q344.395 756.178 344.395 747.451 Q344.395 738.701 347.45 734.118 Q350.529 729.511 356.339 729.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M284.835 473.446 L307.057 473.446 L307.057 475.437 L294.511 508.006 L289.627 508.006 L301.432 477.381 L284.835 477.381 L284.835 473.446 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 473.446 L334.58 473.446 L334.58 477.381 L320.506 477.381 L320.506 485.854 Q321.524 485.506 322.543 485.344 Q323.562 485.159 324.58 485.159 Q330.367 485.159 333.747 488.33 Q337.126 491.502 337.126 496.918 Q337.126 502.497 333.654 505.599 Q330.182 508.678 323.862 508.678 Q321.687 508.678 319.418 508.307 Q317.173 507.937 314.765 507.196 L314.765 502.497 Q316.849 503.631 319.071 504.187 Q321.293 504.742 323.77 504.742 Q327.774 504.742 330.112 502.636 Q332.45 500.529 332.45 496.918 Q332.45 493.307 330.112 491.201 Q327.774 489.094 323.77 489.094 Q321.895 489.094 320.02 489.511 Q318.168 489.928 316.224 490.807 L316.224 473.446 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 476.525 Q352.728 476.525 350.899 480.09 Q349.094 483.631 349.094 490.761 Q349.094 497.867 350.899 501.432 Q352.728 504.974 356.339 504.974 Q359.973 504.974 361.779 501.432 Q363.608 497.867 363.608 490.761 Q363.608 483.631 361.779 480.09 Q359.973 476.525 356.339 476.525 M356.339 472.821 Q362.149 472.821 365.205 477.428 Q368.284 482.011 368.284 490.761 Q368.284 499.488 365.205 504.094 Q362.149 508.678 356.339 508.678 Q350.529 508.678 347.45 504.094 Q344.395 499.488 344.395 490.761 Q344.395 482.011 347.45 477.428 Q350.529 472.821 356.339 472.821 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M256.664 247.381 L264.303 247.381 L264.303 221.016 L255.992 222.682 L255.992 218.423 L264.256 216.756 L268.932 216.756 L268.932 247.381 L276.571 247.381 L276.571 251.316 L256.664 251.316 L256.664 247.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M296.015 219.835 Q292.404 219.835 290.576 223.4 Q288.77 226.941 288.77 234.071 Q288.77 241.177 290.576 244.742 Q292.404 248.284 296.015 248.284 Q299.65 248.284 301.455 244.742 Q303.284 241.177 303.284 234.071 Q303.284 226.941 301.455 223.4 Q299.65 219.835 296.015 219.835 M296.015 216.131 Q301.826 216.131 304.881 220.738 Q307.96 225.321 307.96 234.071 Q307.96 242.798 304.881 247.404 Q301.826 251.988 296.015 251.988 Q290.205 251.988 287.127 247.404 Q284.071 242.798 284.071 234.071 Q284.071 225.321 287.127 220.738 Q290.205 216.131 296.015 216.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 219.835 Q322.566 219.835 320.737 223.4 Q318.932 226.941 318.932 234.071 Q318.932 241.177 320.737 244.742 Q322.566 248.284 326.177 248.284 Q329.811 248.284 331.617 244.742 Q333.446 241.177 333.446 234.071 Q333.446 226.941 331.617 223.4 Q329.811 219.835 326.177 219.835 M326.177 216.131 Q331.987 216.131 335.043 220.738 Q338.122 225.321 338.122 234.071 Q338.122 242.798 335.043 247.404 Q331.987 251.988 326.177 251.988 Q320.367 251.988 317.288 247.404 Q314.233 242.798 314.233 234.071 Q314.233 225.321 317.288 220.738 Q320.367 216.131 326.177 216.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 219.835 Q352.728 219.835 350.899 223.4 Q349.094 226.941 349.094 234.071 Q349.094 241.177 350.899 244.742 Q352.728 248.284 356.339 248.284 Q359.973 248.284 361.779 244.742 Q363.608 241.177 363.608 234.071 Q363.608 226.941 361.779 223.4 Q359.973 219.835 356.339 219.835 M356.339 216.131 Q362.149 216.131 365.205 220.738 Q368.284 225.321 368.284 234.071 Q368.284 242.798 365.205 247.404 Q362.149 251.988 356.339 251.988 Q350.529 251.988 347.45 247.404 Q344.395 242.798 344.395 234.071 Q344.395 225.321 347.45 220.738 Q350.529 216.131 356.339 216.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,234.036 4017.76,234.036 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.12 457.691,1248.91 458.259,1247.58 458.828,1246.24 459.396,1245.89 459.964,1245.43 460.533,1243.88 461.101,1243.34 461.669,1242.7 462.238,1241.97 462.806,1241.14 463.375,1239.21 463.943,1237.2 464.511,1236.15 465.08,1235.02 465.648,1233.77 466.216,1231.33 466.785,1229.84 467.353,1228.23 467.921,1225.48 468.49,1223.56 469.058,1221.58 469.626,1219.42 470.195,1216.09 470.763,1212.65 471.331,1210.06 471.9,1206.28 472.468,1203.41 473.036,1199.3 473.605,1196.09 474.173,1191.67 474.741,1187.06 475.31,1183.32 475.878,1177.41 476.446,1173.24 477.015,1168.95 477.583,1163.47 478.152,1156.67 478.72,1150.74 479.288,1144.61 479.857,1139.3 480.425,1133.78 480.993,1127.02 481.562,1121.06 482.13,1112.98 482.698,1106.64 483.267,1100.05 483.835,1092.25 484.403,1085.36 484.972,1077.14 485.54,1069.75 486.108,1060.89 486.677,1052.05 487.245,1043.07 487.813,1032.9 488.382,1024.71 488.95,1014.22 489.518,1004.55 490.087,994.744 490.655,983.785 491.224,974.914 491.792,965.912 492.36,952.582 492.929,940.319 493.497,931.228 494.065,919.822 494.634,909.339 495.202,894.912 495.77,884.81 496.339,875.617 496.907,864.349 497.475,850.182 498.044,838.084 498.612,828.058 499.18,818.057 499.749,809.074 500.317,796.004 500.885,787.093 501.454,777.059 502.022,764.167 502.59,754.528 503.159,745.924 503.727,735.405 504.295,726.924 504.864,718.6 505.432,708.169 506.001,699.82 506.569,688.46 507.137,678.178 507.706,669.044 508.274,658.864 508.842,648.936 509.411,639.309 509.979,629.811 510.547,619.394 511.116,610.177 511.684,601.241 512.252,594.292 512.821,586.436 513.389,578.772 513.957,571.154 514.526,564.638 515.094,556.026 515.662,547.492 516.231,539.274 516.799,529.276 517.367,521.432 517.936,514.973 518.504,506.52 519.072,501.212 519.641,499.115 520.209,493.721 520.778,487.442 521.346,481.223 521.914,474.159 522.483,469.147 523.051,463.134 523.619,459.344 524.188,452.684 524.756,447.095 525.324,441.669 525.893,437.288 526.461,433.301 527.029,428.977 527.598,423.766 528.166,418.75 528.734,414.775 529.303,410.627 529.871,405.728 530.439,401.223 531.008,396.59 531.576,389.817 532.144,383.531 532.713,379.268 533.281,375.454 533.85,370.319 534.418,368.583 534.986,363.618 535.555,361.234 536.123,359.665 536.691,357.046 537.26,354.434 537.828,350.781 538.396,349.43 538.965,344.893 539.533,340.717 540.101,336.507 540.67,335.702 541.238,332.851 541.806,331.119 542.375,328.243 542.943,324.207 543.511,317.453 544.08,315.984 544.648,313.708 545.216,311.351 545.785,308.116 546.353,304.017 546.921,300.172 547.49,297.454 548.058,294.869 548.627,295.456 549.195,293.021 549.763,290.612 550.332,292.563 550.9,290.801 551.468,291.537 552.037,292.134 552.605,290.591 553.173,290.91 553.742,289.007 554.31,286.333 554.878,284.892 555.447,285.469 556.015,283.805 556.583,281.311 557.152,280.966 557.72,280.685 558.288,279.325 558.857,279.072 559.425,278.562 559.993,278.068 560.562,276.473 561.13,274.865 561.698,274.576 562.267,271.536 562.835,271.363 563.404,272.167 563.972,272.892 564.54,267.329 565.109,265.41 565.677,267.587 566.245,268.587 566.814,268.499 567.382,268.253 567.95,267.834 568.519,269.649 569.087,269.183 569.655,269.704 570.224,266.911 570.792,268.595 571.36,266.979 571.929,266.375 572.497,266.918 573.065,266.45 573.634,264.861 574.202,260.284 574.77,259.255 575.339,258.104 575.907,254.986 576.476,252.215 577.044,250.512 577.612,253.919 578.181,253.188 578.749,253.554 579.317,253.731 579.886,253.84 580.454,255.146 581.022,257.246 581.591,256.058 582.159,254.679 582.727,255.465 583.296,255.248 583.864,255.057 584.432,253.966 585.001,254.894 585.569,253.865 586.137,253.992 586.706,252.721 587.274,253.994 587.842,254.825 588.411,255.575 588.979,253.94 589.547,253.771 590.116,252.627 590.684,250.565 591.253,251.599 591.821,251.457 592.389,251.52 592.958,251.627 593.526,250.334 594.094,249.062 594.663,250.154 595.231,251.209 595.799,250.237 596.368,251.043 596.936,251.635 597.504,250.385 598.073,248.756 598.641,245.646 599.209,246.779 599.778,246.912 600.346,245.106 600.914,244.216 601.483,243.254 602.051,244.459 602.619,243.635 603.188,244.891 603.756,246.045 604.325,245.068 604.893,246.047 605.461,245.936 606.03,245.959 606.598,246.814 607.166,247.796 607.735,245.59 608.303,246.699 608.871,245.678 609.44,245.59 610.008,244.462 610.576,244.347 611.145,243.274 611.713,243.275 612.281,244.391 612.85,244.327 613.418,243.725 613.986,244.881 614.555,243.809 615.123,245.78 615.691,246.5 616.26,245.541 616.828,245.455 617.396,244.485 617.965,244.292 618.533,243.17 619.102,240.958 619.67,240.227 620.238,239.31 620.807,239.69 621.375,238.631 621.943,238.785 622.512,238.167 623.08,239.401 623.648,237.57 624.217,237.981 624.785,238.277 625.353,237.419 625.922,235.932 626.49,237.382 627.058,237.557 627.627,237.633 628.195,238.903 628.763,237.064 629.332,239.179 629.9,239.334 630.468,238.571 631.037,238.679 631.605,240.194 632.173,240.677 632.742,239.879 633.31,237.818 633.879,239.268 634.447,241.427 635.015,240.566 635.584,242.73 636.152,241.504 636.72,240.563 637.289,239.791 637.857,240.96 638.425,241.027 638.994,240.053 639.562,240.214 640.13,239.24 640.699,240.549 641.267,240.703 641.835,240.77 642.404,239.095 642.972,239.974 643.54,238.935 644.109,240.169 644.677,242.158 645.245,242.359 645.814,241.495 646.382,240.608 646.951,240.71 647.519,240.699 648.087,239.74 648.656,239.97 649.224,241.131 649.792,238.899 650.361,237.921 650.929,240.299 651.497,241.212 652.066,241.073 652.634,238.066 653.202,238.259 653.771,237.342 654.339,236.477 654.907,236.616 655.476,235.846 656.044,239.024 656.612,238.992 657.181,239.273 657.749,240.378 658.317,242.429 658.886,243.306 659.454,242.077 660.022,241.962 660.591,241.925 661.159,240.81 661.728,239.629 662.296,239.719 662.864,239.745 663.433,238.686 664.001,238.778 664.569,237.94 665.138,237.088 665.706,235.318 666.274,235.618 666.843,235.849 667.411,236.114 667.979,236.553 668.548,236.769 669.116,237.889 669.684,238.906 670.253,238.039 670.821,240.223 671.389,237.97 671.958,236.982 672.526,236.345 673.094,234.507 673.663,235.931 674.231,234.843 674.799,234.283 675.368,232.617 675.936,233.996 676.505,232.157 677.073,231.667 677.641,233.192 678.21,233.498 678.778,234.921 679.346,234.182 679.915,234.591 680.483,235.87 681.051,238.047 681.62,236.983 682.188,236.271 682.756,236.654 683.325,236.984 683.893,237.141 684.461,238.119 685.03,238.06 685.598,238.144 686.166,239.325 686.735,240.449 687.303,241.418 687.871,242.3 688.44,241.964 689.008,241.721 689.577,242.333 690.145,241.992 690.713,241.522 691.282,241.274 691.85,240.952 692.418,241.871 692.987,241.537 693.555,243.309 694.123,242.794 694.692,241.178 695.26,240.667 695.828,236.352 696.397,235.559 696.965,235.837 697.533,232.89 698.102,232.185 698.67,233.413 699.238,232.694 699.807,231.151 700.375,232.923 700.943,233.094 701.512,233.268 702.08,232.682 702.648,235.055 703.217,234.483 703.785,236.683 704.354,235.795 704.922,231.958 705.49,232.225 706.059,234.668 706.627,237.027 707.195,238.437 707.764,237.573 708.332,238.775 708.9,239.53 709.469,239.574 710.037,238.408 710.605,239.299 711.174,239.038 711.742,239.066 712.31,239.039 712.879,239.973 713.447,238.884 714.015,239.936 714.584,242.921 715.152,241.746 715.72,241.479 716.289,242.208 716.857,242.851 717.425,242.228 717.994,240.964 718.562,238.278 719.131,237.271 719.699,236.174 720.267,237.269 720.836,237.133 721.404,238.185 721.972,236.94 722.541,234.856 723.109,234.818 723.677,231.918 724.246,232.244 724.814,232.557 725.382,232.69 725.951,233.921 726.519,236.279 727.087,235.962 727.656,238.788 728.224,237.435 728.792,237.369 729.361,237.172 729.929,235.085 730.497,234.438 731.066,234.603 731.634,234.767 732.203,236.92 732.771,238.914 733.339,239.675 733.908,239.627 734.476,238.285 735.044,237.034 735.613,236.799 736.181,235.777 736.749,235.802 737.318,235.847 737.886,236.849 738.454,234.777 739.023,233.803 739.591,234.745 740.159,233.906 740.728,236.234 741.296,237.468 741.864,237.566 742.433,235.268 743.001,235.49 743.569,235.723 744.138,236.875 744.706,234.794 745.274,233.662 745.843,234.834 746.411,235.051 746.98,233.99 747.548,233.243 748.116,234.593 748.685,235.886 749.253,235.865 749.821,237.027 750.39,237.119 750.958,238.295 751.526,236.174 752.095,238.157 752.663,236.983 753.231,237.999 753.8,235.611 754.368,235.457 754.936,236.38 755.505,235.267 756.073,237.234 756.641,237.061 757.21,236.763 757.778,235.388 758.346,234.667 758.915,234.854 759.483,235.925 760.052,236.766 760.62,236.755 761.188,235.643 761.757,234.552 762.325,233.626 762.893,232.78 763.462,237.001 764.03,237.091 764.598,237.031 765.167,236.991 765.735,236.826 766.303,235.441 766.872,236.402 767.44,236.458 768.008,235.389 768.577,234.299 769.145,233.196 769.713,235.433 770.282,236.439 770.85,236.373 771.418,235.46 771.987,236.311 772.555,236.192 773.123,236.863 773.692,237.057 774.26,235.794 774.829,235.855 775.397,234.726 775.965,233.591 776.534,233.834 777.102,233.016 777.67,234.079 778.239,235.285 778.807,235.219 779.375,235.081 779.944,237.153 780.512,236.993 781.08,235.905 781.649,235.985 782.217,233.689 782.785,233.655 783.354,233.747 783.922,232.607 784.49,233.789 785.059,232.83 785.627,232.004 786.195,232.125 786.764,231.329 787.332,229.503 787.9,226.853 788.469,226.553 789.037,225.341 789.606,225.139 790.174,225.684 790.742,224.533 791.311,226.52 791.879,227.171 792.447,227.862 793.016,230.675 793.584,232.212 794.152,232.682 794.721,233.268 795.289,232.617 795.857,231.989 796.426,232.381 796.994,231.601 797.562,232.865 798.131,233.226 798.699,235.516 799.267,235.775 799.836,236.868 800.404,236.736 800.972,236.87 801.541,237.968 802.109,237.777 802.678,235.515 803.246,238.853 803.814,238.828 804.383,236.485 804.951,237.777 805.519,237.597 806.088,237.323 806.656,236.127 807.224,238.089 807.793,237.907 808.361,235.79 808.929,235.115 809.498,235.313 810.066,235.322 810.634,235.562 811.203,233.486 811.771,233.455 812.339,233.566 812.908,235.677 813.476,235.682 814.044,237.635 814.613,237.46 815.181,237.327 815.749,237.178 816.318,235.968 816.886,232.681 817.455,232.006 818.023,232.312 818.591,231.417 819.16,231.671 819.728,231.761 820.296,234.243 820.865,234.256 821.433,233.237 822.001,233.345 822.57,231.63 823.138,231.882 823.706,231.018 824.275,228.475 824.843,229.081 825.411,229.758 825.98,229.093 826.548,227.652 827.116,228.026 827.685,225.441 828.253,226.472 828.821,228.309 829.39,230.848 829.958,229.327 830.526,229.79 831.095,230.486 831.663,231.042 832.232,232.736 832.8,232.984 833.368,234.526 833.937,235.76 834.505,235.864 835.073,237.131 835.642,238.147 836.21,238.139 836.778,238.264 837.347,238.07 837.915,238.995 838.483,241.007 839.052,240.497 839.62,243.299 840.188,245.073 840.757,245.41 841.325,243.634 841.893,245.225 842.462,244.471 843.03,240.939 843.598,240.558 844.167,239.557 844.735,237.219 845.304,235.992 845.872,237.153 846.44,236.348 847.009,237.426 847.577,239.191 848.145,238.869 848.714,238.636 849.282,238.467 849.85,239.371 850.419,239.011 850.987,239.683 851.555,239.295 852.124,238.892 852.692,238.706 853.26,239.352 853.829,240.184 854.397,241.913 854.965,240.222 855.534,239.776 856.102,236.219 856.67,237.034 857.239,237.689 857.807,237.554 858.375,238.319 858.944,237.907 859.512,237.686 860.081,237.301 860.649,238.173 861.217,236.883 861.786,235.602 862.354,235.241 862.922,237.185 863.491,238.975 864.059,237.555 864.627,237.583 865.196,236.289 865.764,235.144 866.332,235.039 866.901,235.073 867.469,236.077 868.037,236.949 868.606,238.97 869.174,237.428 869.742,238.198 870.311,238.1 870.879,238.818 871.447,236.348 872.016,234.978 872.584,234.652 873.152,235.543 873.721,233.434 874.289,235.533 874.858,236.503 875.426,235.313 875.994,236.033 876.563,235.924 877.131,234.879 877.699,232.973 878.268,234.105 878.836,237.993 879.404,236.845 879.973,235.501 880.541,235.446 881.109,235.272 881.678,233.137 882.246,233.235 882.814,231.286 883.383,232.399 883.951,233.309 884.519,230.167 885.088,230.701 885.656,229.9 886.224,230.139 886.793,230.387 887.361,233.578 887.93,233.739 888.498,233.536 889.066,231.352 889.635,230.316 890.203,232.589 890.771,231.635 891.34,230.715 891.908,231.035 892.476,231.082 893.045,230.212 893.613,229.382 894.181,229.725 894.75,228.953 895.318,229.178 895.886,228.301 896.455,227.554 897.023,231.135 897.591,230.146 898.16,231.593 898.728,230.833 899.296,231.95 899.865,233.332 900.433,234.281 901.001,235.339 901.57,235.086 902.138,235.994 902.707,236.867 903.275,236.605 903.843,235.428 904.412,235.138 904.98,234.978 905.548,235.011 906.117,234.968 906.685,235.798 907.253,235.863 907.822,236.878 908.39,238.848 908.958,239.533 909.527,240.309 910.095,238.987 910.663,238.639 911.232,236.271 911.8,237.281 912.368,235 912.937,233.957 913.505,234.116 914.073,233.956 914.642,230.923 915.21,237.46 915.779,236.906 916.347,236.771 916.915,236.529 917.484,236.372 918.052,235.228 918.62,236.145 919.189,235.061 919.757,234.016 920.325,235.084 920.894,235.032 921.462,237.026 922.03,234.913 922.599,233.873 923.167,232.98 923.735,234.134 924.304,234.052 924.872,233.973 925.44,231.88 926.009,231.919 926.577,232.205 927.145,232.348 927.714,233.605 928.282,232.635 928.85,232.65 929.419,231.893 929.987,232.212 930.556,232.404 931.124,233.383 931.692,233.319 932.261,234.334 932.829,238.534 933.397,238.155 933.966,234.929 934.534,233.686 935.102,231.569 935.671,232.736 936.239,230.756 936.807,230.758 937.376,226.946 937.944,224.589 938.512,225.217 939.081,223.921 939.649,226.719 940.217,228.371 940.786,227.559 941.354,227.964 941.922,227.451 942.491,226.906 943.059,225.585 943.627,226.465 944.196,225.222 944.764,227.223 945.333,229.906 945.901,230.329 946.469,229.861 947.038,232.344 947.606,232.552 948.174,232.544 948.743,232.776 949.311,234.05 949.879,233.38 950.448,233.605 951.016,234.949 951.584,233.906 952.153,236.286 952.721,239.301 953.289,238.904 953.858,235.625 954.426,235.685 954.994,234.677 955.563,231.75 956.131,236.027 956.699,234.801 957.268,234.791 957.836,235.932 958.405,235.069 958.973,237.515 959.541,235.455 960.11,234.535 960.678,232.508 961.246,233.815 961.815,235.292 962.383,235.316 962.951,234.051 963.52,232.008 964.088,231.939 964.656,231.154 965.225,230.428 965.793,229.876 966.361,230.154 966.93,230.277 967.498,231.755 968.066,232.04 968.635,232.215 969.203,233.473 969.771,232.695 970.34,233.046 970.908,233.24 971.476,232.581 972.045,232.76 972.613,232.199 973.182,233.656 973.75,234.09 974.318,232.025 974.887,230.35 975.455,231.744 976.023,230.05 976.592,231.751 977.16,233.061 977.728,231.368 978.297,234.776 978.865,233.82 979.433,234.012 980.002,236.395 980.57,237.479 981.138,235.236 981.707,235.477 982.275,233.61 982.843,234.028 983.412,235.994 983.98,236.977 984.548,236.826 985.117,236.58 985.685,236.523 986.253,237.595 986.822,238.41 987.39,237.414 987.959,239.684 988.527,241.424 989.095,240.266 989.664,240.031 990.232,239.619 990.8,240.123 991.369,242.869 991.937,242.368 992.505,239.849 993.074,240.501 993.642,240.098 994.21,238.854 994.779,239.452 995.347,239.341 995.915,238.169 996.484,237.159 997.052,235.893 997.62,233.893 998.189,233.045 998.757,231.748 999.325,231.86 999.894,232 1000.46,231.066 1001.03,232.242 1001.6,230.142 1002.17,229.545 1002.74,229.947 1003.3,230.293 1003.87,231.663 1004.44,232.913 1005.01,235.098 1005.58,236.196 1006.15,238.212 1006.71,238.147 1007.28,236.896 1007.85,237.76 1008.42,239.634 1008.99,239.182 1009.56,238.847 1010.12,237.603 1010.69,237.401 1011.26,236.979 1011.83,235.858 1012.4,237.666 1012.97,237.401 1013.53,237.143 1014.1,236.87 1014.67,238.77 1015.24,236.589 1015.81,236.272 1016.38,238.335 1016.94,239.097 1017.51,237.571 1018.08,239.426 1018.65,235.017 1019.22,234.98 1019.79,232.956 1020.35,234.089 1020.92,237.147 1021.49,234.682 1022.06,231.681 1022.63,235.859 1023.2,235.924 1023.76,236.663 1024.33,236.408 1024.9,236.313 1025.47,237.064 1026.04,236.707 1026.61,235.57 1027.17,236.291 1027.74,235.078 1028.31,236.057 1028.88,236.96 1029.45,235.805 1030.02,236.633 1030.58,237.428 1031.15,233.115 1031.72,233.223 1032.29,233.05 1032.86,231.98 1033.43,232.04 1033.99,232.96 1034.56,233.18 1035.13,234.173 1035.7,234.161 1036.27,235.055 1036.84,235.783 1037.4,234.592 1037.97,233.55 1038.54,235.698 1039.11,235.375 1039.68,235.528 1040.25,236.254 1040.81,240.182 1041.38,238.517 1041.95,238.03 1042.52,236.558 1043.09,237.425 1043.66,238.362 1044.22,235.715 1044.79,232.391 1045.36,233.296 1045.93,234.523 1046.5,233.462 1047.07,234.397 1047.63,235.235 1048.2,235.361 1048.77,234.241 1049.34,235.235 1049.91,236.189 1050.48,236.939 1051.05,236.666 1051.61,236.598 1052.18,235.364 1052.75,236.184 1053.32,234.82 1053.89,233.676 1054.46,234.67 1055.02,234.514 1055.59,234.291 1056.16,234.06 1056.73,234.016 1057.3,233.876 1057.87,234.699 1058.43,233.606 1059,232.689 1059.57,231.544 1060.14,231.902 1060.71,227.874 1061.28,227.218 1061.84,228.891 1062.41,231.354 1062.98,233.609 1063.55,234.566 1064.12,236.37 1064.69,233.859 1065.25,232.934 1065.82,231.86 1066.39,233.102 1066.96,231.205 1067.53,233.18 1068.1,233.058 1068.66,234.063 1069.23,232.019 1069.8,233.159 1070.37,233.01 1070.94,231.812 1071.51,229.775 1072.07,229.039 1072.64,228.51 1073.21,228.807 1073.78,230.249 1074.35,229.603 1074.92,228.83 1075.48,229.062 1076.05,229.38 1076.62,227.846 1077.19,228.568 1077.76,228.998 1078.33,229.253 1078.89,227.619 1079.46,226.963 1080.03,228.744 1080.6,232.205 1081.17,233.372 1081.74,235.347 1082.3,233.438 1082.87,231.709 1083.44,233.057 1084.01,236.287 1084.58,236.303 1085.15,234.131 1085.71,234.127 1086.28,232.998 1086.85,230.033 1087.42,230.422 1087.99,230.837 1088.56,231.322 1089.12,231.682 1089.69,233.968 1090.26,233.88 1090.83,233.125 1091.4,231.164 1091.97,233.751 1092.53,233.648 1093.1,234.798 1093.67,235.837 1094.24,238.01 1094.81,235.782 1095.38,235.695 1095.94,235.522 1096.51,236.599 1097.08,234.475 1097.65,235.514 1098.22,235.437 1098.79,237.435 1099.35,234.202 1099.92,233.374 1100.49,233.384 1101.06,233.596 1101.63,235.761 1102.2,234.925 1102.76,234 1103.33,229.866 1103.9,231.501 1104.47,230.784 1105.04,229.969 1105.61,230.399 1106.17,230.684 1106.74,232.009 1107.31,232.193 1107.88,231.501 1108.45,233.842 1109.02,235.15 1109.58,234.387 1110.15,232.453 1110.72,231.566 1111.29,230.962 1111.86,230.373 1112.43,231.586 1112.99,230.866 1113.56,230.171 1114.13,233.683 1114.7,232.57 1115.27,234.573 1115.84,233.537 1116.4,233.562 1116.97,231.805 1117.54,233.141 1118.11,232.286 1118.68,234.668 1119.25,234.702 1119.81,237.741 1120.38,240.523 1120.95,236.934 1121.52,237.031 1122.09,237.872 1122.66,238.963 1123.23,239.646 1123.79,239.372 1124.36,238.984 1124.93,238.532 1125.5,239.231 1126.07,238.99 1126.64,238.448 1127.2,240.225 1127.77,238.735 1128.34,238.374 1128.91,238.212 1129.48,239.93 1130.05,240.49 1130.61,239.033 1131.18,237.877 1131.75,239.667 1132.32,241.241 1132.89,239.757 1133.46,241.231 1134.02,241.555 1134.59,241.006 1135.16,239.423 1135.73,240.064 1136.3,238.778 1136.87,238.46 1137.43,235.964 1138,235.684 1138.57,234.348 1139.14,235.243 1139.71,235.157 1140.28,236.035 1140.84,234.696 1141.41,235.419 1141.98,237.598 1142.55,236.278 1143.12,237.288 1143.69,235.86 1144.25,233.531 1144.82,232.359 1145.39,232.444 1145.96,232.663 1146.53,231.626 1147.1,232.926 1147.66,231.625 1148.23,231.535 1148.8,230.682 1149.37,234.046 1149.94,233.931 1150.51,235.78 1151.07,235.613 1151.64,234.306 1152.21,235.41 1152.78,234.22 1153.35,234.185 1153.92,234.926 1154.48,234.729 1155.05,233.786 1155.62,235.763 1156.19,234.61 1156.76,234.328 1157.33,234.179 1157.89,230.961 1158.46,233.012 1159.03,231.149 1159.6,232.102 1160.17,229.972 1160.74,230.139 1161.3,230.243 1161.87,231.396 1162.44,231.598 1163.01,229.613 1163.58,229.831 1164.15,228.946 1164.71,228.232 1165.28,228.645 1165.85,229.225 1166.42,229.663 1166.99,228.962 1167.56,232.461 1168.12,231.417 1168.69,231.848 1169.26,233.096 1169.83,233.303 1170.4,233.454 1170.97,234.36 1171.53,236.264 1172.1,230.901 1172.67,232.073 1173.24,232.359 1173.81,235.573 1174.38,233.596 1174.94,233.804 1175.51,235.863 1176.08,234.745 1176.65,234.84 1177.22,233.685 1177.79,231.528 1178.35,230.728 1178.92,229.055 1179.49,232.29 1180.06,233.401 1180.63,232.618 1181.2,234.708 1181.76,233.728 1182.33,234.772 1182.9,232.744 1183.47,232.945 1184.04,232.038 1184.61,231.09 1185.17,231.298 1185.74,232.635 1186.31,234.955 1186.88,235.963 1187.45,235.86 1188.02,235.823 1188.58,235.853 1189.15,234.762 1189.72,233.678 1190.29,231.629 1190.86,233.722 1191.43,232.726 1192,234.979 1192.56,236.919 1193.13,235.795 1193.7,236.448 1194.27,238.242 1194.84,239.048 1195.41,239.65 1195.97,237.95 1196.54,239.907 1197.11,239.613 1197.68,239.131 1198.25,240.082 1198.82,238.578 1199.38,237.302 1199.95,238.129 1200.52,238.014 1201.09,238.779 1201.66,239.292 1202.23,237.625 1202.79,238.23 1203.36,238.037 1203.93,237.505 1204.5,237.084 1205.07,236.082 1205.64,235.527 1206.2,232.118 1206.77,230.939 1207.34,233.038 1207.91,232.327 1208.48,233.489 1209.05,233.603 1209.61,235.726 1210.18,233.541 1210.75,233.572 1211.32,233.641 1211.89,231.764 1212.46,229.93 1213.02,230.953 1213.59,230.261 1214.16,230.645 1214.73,230.799 1215.3,230.935 1215.87,232.228 1216.43,234.594 1217,231.547 1217.57,232.703 1218.14,233.683 1218.71,234.943 1219.28,235.73 1219.84,233.486 1220.41,233.357 1220.98,233.363 1221.55,233.183 1222.12,232.21 1222.69,233.412 1223.25,232.509 1223.82,232.602 1224.39,230.726 1224.96,229.877 1225.53,232.202 1226.1,232.452 1226.66,233.459 1227.23,234.389 1227.8,235.363 1228.37,234.046 1228.94,233.785 1229.51,234.821 1230.07,233.76 1230.64,233.923 1231.21,233.885 1231.78,231.933 1232.35,233.308 1232.92,235.587 1233.48,235.51 1234.05,234.285 1234.62,235.235 1235.19,238.265 1235.76,235.984 1236.33,234.869 1236.89,233.672 1237.46,234.018 1238.03,232.859 1238.6,231.799 1239.17,230.696 1239.74,230.89 1240.3,232.101 1240.87,231.145 1241.44,230.026 1242.01,229.896 1242.58,230.268 1243.15,232.507 1243.71,234.584 1244.28,233.462 1244.85,233.417 1245.42,234.213 1245.99,233.26 1246.56,232.281 1247.12,231.502 1247.69,232.67 1248.26,234.776 1248.83,235.966 1249.4,234.012 1249.97,236.098 1250.53,235.916 1251.1,235.927 1251.67,235.742 1252.24,235.528 1252.81,235.463 1253.38,236.399 1253.94,235.154 1254.51,233.98 1255.08,232.857 1255.65,230.946 1256.22,230.141 1256.79,227.258 1257.35,226.738 1257.92,224.496 1258.49,225.199 1259.06,229.02 1259.63,229.548 1260.2,230.004 1260.76,232.313 1261.33,233.63 1261.9,235.93 1262.47,234.884 1263.04,236.923 1263.61,237.797 1264.18,239.758 1264.74,239.373 1265.31,240.276 1265.88,239.074 1266.45,238.877 1267.02,239.467 1267.59,243.218 1268.15,244.354 1268.72,242.682 1269.29,242.136 1269.86,240.835 1270.43,238.304 1271,237.882 1271.56,237.493 1272.13,237.025 1272.7,234.806 1273.27,234.653 1273.84,235.601 1274.41,232.375 1274.97,230.305 1275.54,231.69 1276.11,229.689 1276.68,228.895 1277.25,229.346 1277.82,228.565 1278.38,227.031 1278.95,227.615 1279.52,226.06 1280.09,230.794 1280.66,230.141 1281.23,232.676 1281.79,234.041 1282.36,234.201 1282.93,232.42 1283.5,233.704 1284.07,233.75 1284.64,234.757 1285.2,234.887 1285.77,234.976 1286.34,235.925 1286.91,232.707 1287.48,233.95 1288.05,236.063 1288.61,234.682 1289.18,232.602 1289.75,233.747 1290.32,232.815 1290.89,233.85 1291.46,234.01 1292.02,235.052 1292.59,235.11 1293.16,234.96 1293.73,235.984 1294.3,236.033 1294.87,236.144 1295.43,236.047 1296,237.956 1296.57,238.59 1297.14,239.257 1297.71,238.602 1298.28,237.079 1298.84,236.838 1299.41,237.845 1299.98,235.681 1300.55,236.516 1301.12,236.152 1301.69,235.981 1302.25,235.683 1302.82,233.648 1303.39,235.604 1303.96,234.476 1304.53,234.326 1305.1,232.237 1305.66,233.35 1306.23,233.436 1306.8,230.482 1307.37,232.71 1307.94,234.071 1308.51,234.215 1309.07,234.223 1309.64,235.4 1310.21,235.247 1310.78,232.994 1311.35,234.083 1311.92,232.92 1312.48,233.073 1313.05,233.256 1313.62,234.481 1314.19,235.497 1314.76,233.434 1315.33,232.44 1315.89,231.591 1316.46,229.653 1317.03,228.864 1317.6,229.192 1318.17,231.575 1318.74,233.937 1319.3,232.964 1319.87,233.96 1320.44,232.91 1321.01,232.896 1321.58,231.974 1322.15,230.922 1322.71,232.185 1323.28,232.215 1323.85,232.364 1324.42,231.331 1324.99,231.566 1325.56,232.543 1326.12,232.342 1326.69,231.515 1327.26,231.712 1327.83,232.763 1328.4,233.862 1328.97,233.993 1329.53,233.877 1330.1,235.001 1330.67,233.814 1331.24,234.133 1331.81,235.248 1332.38,237.461 1332.94,239.382 1333.51,235.939 1334.08,234.495 1334.65,233.48 1335.22,234.494 1335.79,234.508 1336.36,234.466 1336.92,232.365 1337.49,230.722 1338.06,230.852 1338.63,231.135 1339.2,231.372 1339.77,230.563 1340.33,230.948 1340.9,229.256 1341.47,229.608 1342.04,233.152 1342.61,233.255 1343.18,232.476 1343.74,230.563 1344.31,232.926 1344.88,230.827 1345.45,231.123 1346.02,230.278 1346.59,230.511 1347.15,229.628 1347.72,231.276 1348.29,234.535 1348.86,234.56 1349.43,232.49 1350,233.758 1350.56,233.865 1351.13,233.173 1351.7,233.359 1352.27,235.283 1352.84,235.417 1353.41,236.602 1353.97,235.558 1354.54,236.528 1355.11,234.495 1355.68,230.55 1356.25,235.011 1356.82,235.837 1357.38,234.499 1357.95,233.602 1358.52,236.683 1359.09,237.588 1359.66,236.135 1360.23,234.946 1360.79,231.604 1361.36,231.716 1361.93,233.066 1362.5,233.033 1363.07,232.273 1363.64,235.742 1364.2,236.643 1364.77,238.652 1365.34,239.513 1365.91,241.095 1366.48,240.787 1367.05,241.524 1367.61,241.988 1368.18,240.514 1368.75,240.002 1369.32,239.467 1369.89,238.965 1370.46,240.614 1371.02,240.107 1371.59,239.402 1372.16,236.891 1372.73,235.606 1373.3,235.309 1373.87,236.358 1374.43,236.843 1375,236.72 1375.57,236.199 1376.14,237.921 1376.71,236.728 1377.28,236.631 1377.84,238.687 1378.41,238.383 1378.98,236.94 1379.55,235.644 1380.12,231.382 1380.69,230.366 1381.25,230.489 1381.82,228.797 1382.39,229.786 1382.96,230.042 1383.53,230.252 1384.1,230.308 1384.66,228.281 1385.23,225.67 1385.8,226.249 1386.37,227.619 1386.94,230.14 1387.51,229.645 1388.07,230.919 1388.64,230.146 1389.21,232.608 1389.78,231.643 1390.35,230.747 1390.92,230.967 1391.48,231.335 1392.05,228.517 1392.62,228.038 1393.19,227.346 1393.76,230.815 1394.33,232.185 1394.89,232.447 1395.46,232.47 1396.03,230.692 1396.6,229.899 1397.17,231.351 1397.74,229.295 1398.3,229.837 1398.87,231.157 1399.44,232.296 1400.01,230.54 1400.58,233.987 1401.15,232.954 1401.71,234.123 1402.28,236.356 1402.85,237.48 1403.42,236.293 1403.99,236.482 1404.56,236.295 1405.13,237.262 1405.69,238.13 1406.26,236.803 1406.83,237.783 1407.4,239.563 1407.97,236.141 1408.54,234.865 1409.1,235.777 1409.67,235.76 1410.24,235.691 1410.81,236.616 1411.38,237.418 1411.95,237.283 1412.51,239.094 1413.08,241.653 1413.65,242.245 1414.22,239.525 1414.79,238.971 1415.36,240.859 1415.92,240.404 1416.49,240.187 1417.06,239.655 1417.63,237.954 1418.2,234.834 1418.77,234.776 1419.33,234.837 1419.9,234.619 1420.47,235.569 1421.04,236.524 1421.61,237.36 1422.18,238.079 1422.74,239.004 1423.31,239.734 1423.88,241.472 1424.45,241.009 1425.02,238.46 1425.59,243.197 1426.15,239.435 1426.72,240.079 1427.29,237.432 1427.86,237.094 1428.43,237.709 1429,237.206 1429.56,237.987 1430.13,236.547 1430.7,235.433 1431.27,234.352 1431.84,232.896 1432.41,229.784 1432.97,229.992 1433.54,230.346 1434.11,229.461 1434.68,228.797 1435.25,230.055 1435.82,232.299 1436.38,231.184 1436.95,232.222 1437.52,231.422 1438.09,231.453 1438.66,232.624 1439.23,231.434 1439.79,230.339 1440.36,227.428 1440.93,226.823 1441.5,229.277 1442.07,229.533 1442.64,229.563 1443.2,229.823 1443.77,230.187 1444.34,230.495 1444.91,230.789 1445.48,230.09 1446.05,231.281 1446.61,234.789 1447.18,231.99 1447.75,232.04 1448.32,232.188 1448.89,231.165 1449.46,231.282 1450.02,233.614 1450.59,231.82 1451.16,232.987 1451.73,236.227 1452.3,234.237 1452.87,233.564 1453.43,233.489 1454,233.513 1454.57,234.527 1455.14,234.364 1455.71,233.554 1456.28,234.765 1456.84,235.72 1457.41,235.876 1457.98,235.643 1458.55,235.504 1459.12,235.459 1459.69,233.338 1460.25,235.354 1460.82,237.371 1461.39,239.21 1461.96,238.796 1462.53,236.286 1463.1,237.226 1463.66,234.831 1464.23,233.749 1464.8,233.744 1465.37,232.824 1465.94,231.872 1466.51,232.08 1467.07,233.162 1467.64,233.01 1468.21,230.922 1468.78,232.111 1469.35,231.321 1469.92,231.457 1470.48,231.571 1471.05,232.66 1471.62,232.574 1472.19,233.593 1472.76,234.572 1473.33,235.53 1473.89,236.12 1474.46,235.74 1475.03,235.493 1475.6,234.355 1476.17,239.544 1476.74,239.244 1477.31,239.816 1477.87,237.161 1478.44,236.948 1479.01,233.524 1479.58,232.623 1480.15,231.543 1480.72,228.695 1481.28,233.189 1481.85,230.26 1482.42,231.458 1482.99,230.709 1483.56,232.947 1484.13,232.107 1484.69,232.127 1485.26,233.45 1485.83,232.475 1486.4,232.353 1486.97,234.403 1487.54,233.211 1488.1,233.222 1488.67,234.125 1489.24,235.084 1489.81,234.897 1490.38,234.704 1490.95,238.019 1491.51,238.756 1492.08,238.047 1492.65,239.694 1493.22,240.312 1493.79,238.651 1494.36,237.315 1494.92,237.017 1495.49,236.731 1496.06,236.47 1496.63,235.257 1497.2,234.992 1497.77,234.049 1498.33,235.981 1498.9,234.915 1499.47,233.919 1500.04,233.854 1500.61,231.734 1501.18,231.866 1501.74,232.327 1502.31,232.31 1502.88,233.6 1503.45,231.573 1504.02,233.918 1504.59,234.865 1505.15,233.643 1505.72,234.776 1506.29,233.591 1506.86,233.759 1507.43,232.411 1508,232.319 1508.56,232.417 1509.13,231.52 1509.7,236.029 1510.27,235.771 1510.84,232.465 1511.41,232.548 1511.97,233.726 1512.54,232.656 1513.11,231.764 1513.68,233.039 1514.25,235.156 1514.82,236.112 1515.38,236.982 1515.95,236.953 1516.52,236.634 1517.09,235.176 1517.66,232.932 1518.23,233.957 1518.79,233.696 1519.36,235.536 1519.93,235.534 1520.5,235.248 1521.07,235.132 1521.64,233.93 1522.2,233.917 1522.77,236.059 1523.34,234.993 1523.91,234.817 1524.48,236.855 1525.05,233.776 1525.61,238.134 1526.18,238.993 1526.75,236.511 1527.32,236.287 1527.89,232.917 1528.46,232.712 1529.02,231.671 1529.59,230.652 1530.16,228.821 1530.73,230.375 1531.3,229.699 1531.87,232.139 1532.43,231.263 1533,229.554 1533.57,228.845 1534.14,229.99 1534.71,230.353 1535.28,232.424 1535.84,233.388 1536.41,235.529 1536.98,236.437 1537.55,236.003 1538.12,235.757 1538.69,237.668 1539.25,237.294 1539.82,236.916 1540.39,235.635 1540.96,234.46 1541.53,235.328 1542.1,236.237 1542.66,235.996 1543.23,236.948 1543.8,237.821 1544.37,236.377 1544.94,237.14 1545.51,236.71 1546.08,237.343 1546.64,236.953 1547.21,232.503 1547.78,232.451 1548.35,232.578 1548.92,233.471 1549.49,232.413 1550.05,234.436 1550.62,234.315 1551.19,234.224 1551.76,235.076 1552.33,234.761 1552.9,235.53 1553.46,235.311 1554.03,237.242 1554.6,235.757 1555.17,235.602 1555.74,234.377 1556.31,235.133 1556.87,234.965 1557.44,234.159 1558.01,231.779 1558.58,230.917 1559.15,231.329 1559.72,231.423 1560.28,230.51 1560.85,230.699 1561.42,230.547 1561.99,227.757 1562.56,223.921 1563.13,223.532 1563.69,221.327 1564.26,219.895 1564.83,221.453 1565.4,221.256 1565.97,223.108 1566.54,223.961 1567.1,225.885 1567.67,226.58 1568.24,227.108 1568.81,227.674 1569.38,226.059 1569.95,228.822 1570.51,227.278 1571.08,229.092 1571.65,227.818 1572.22,227.322 1572.79,229.168 1573.36,228.87 1573.92,230.233 1574.49,229.861 1575.06,231.353 1575.63,231.57 1576.2,233.895 1576.77,236.027 1577.33,235.295 1577.9,234.512 1578.47,234.48 1579.04,236.578 1579.61,234.683 1580.18,233.808 1580.74,233.798 1581.31,235.777 1581.88,235.735 1582.45,235.72 1583.02,236.751 1583.59,238.708 1584.15,238.398 1584.72,239.465 1585.29,235.262 1585.86,232.163 1586.43,232.274 1587,233.333 1587.56,234.472 1588.13,235.592 1588.7,235.526 1589.27,234.529 1589.84,234.697 1590.41,234.856 1590.97,235.837 1591.54,237.954 1592.11,236.883 1592.68,235.969 1593.25,234.942 1593.82,234.581 1594.38,237.829 1594.95,240.736 1595.52,239.227 1596.09,237.983 1596.66,236.804 1597.23,234.678 1597.79,234.915 1598.36,237.2 1598.93,236.992 1599.5,235.903 1600.07,237.022 1600.64,238.965 1601.2,238.607 1601.77,238.367 1602.34,239.236 1602.91,237.824 1603.48,241.613 1604.05,241.023 1604.61,240.462 1605.18,239.057 1605.75,237.843 1606.32,237.569 1606.89,238.118 1607.46,237.997 1608.02,238.471 1608.59,238.903 1609.16,240.51 1609.73,239.001 1610.3,240.564 1610.87,241.126 1611.43,240.419 1612,238.765 1612.57,238.464 1613.14,238.127 1613.71,239.666 1614.28,238.053 1614.84,237.73 1615.41,239.283 1615.98,238.634 1616.55,238.127 1617.12,236.592 1617.69,235.245 1618.26,235.191 1618.82,234.735 1619.39,235.694 1619.96,237.557 1620.53,234.345 1621.1,230.004 1621.67,229.435 1622.23,227.705 1622.8,226.899 1623.37,228.519 1623.94,227.689 1624.51,227.117 1625.08,228.729 1625.64,230.098 1626.21,232.47 1626.78,231.265 1627.35,231.416 1627.92,230.665 1628.49,229.686 1629.05,228.765 1629.62,230.104 1630.19,229.235 1630.76,229.461 1631.33,229.496 1631.9,228.74 1632.46,228.08 1633.03,227.548 1633.6,227.22 1634.17,228.849 1634.74,231.453 1635.31,230.586 1635.87,228.946 1636.44,229.235 1637.01,229.586 1637.58,229.034 1638.15,230.227 1638.72,228.5 1639.28,228.001 1639.85,231.715 1640.42,231.871 1640.99,231.145 1641.56,232.764 1642.13,234.972 1642.69,236.049 1643.26,235.848 1643.83,234.668 1644.4,233.774 1644.97,235.881 1645.54,235.789 1646.1,235.785 1646.67,234.801 1647.24,236.947 1647.81,235.764 1648.38,236.64 1648.95,237.845 1649.51,238.614 1650.08,238.542 1650.65,239.349 1651.22,239.844 1651.79,241.619 1652.36,242.145 1652.92,240.33 1653.49,239.801 1654.06,237.423 1654.63,237.428 1655.2,238.288 1655.77,237.895 1656.33,236.498 1656.9,237.521 1657.47,237.245 1658.04,239.062 1658.61,239.68 1659.18,235.38 1659.74,236.064 1660.31,235.812 1660.88,236.782 1661.45,236.476 1662.02,234.175 1662.59,231.033 1663.15,229.893 1663.72,229.143 1664.29,229.304 1664.86,229.469 1665.43,228.728 1666,229.039 1666.56,228.188 1667.13,229.609 1667.7,231.981 1668.27,233.166 1668.84,232.28 1669.41,233.318 1669.97,231.256 1670.54,231.51 1671.11,233.723 1671.68,232.828 1672.25,232.822 1672.82,231.965 1673.38,232.083 1673.95,231.398 1674.52,231.421 1675.09,231.455 1675.66,231.638 1676.23,231.779 1676.79,231.155 1677.36,233.495 1677.93,234.363 1678.5,234.454 1679.07,231.506 1679.64,230.683 1680.2,232.004 1680.77,233.18 1681.34,233.361 1681.91,233.212 1682.48,231.238 1683.05,231.392 1683.61,232.569 1684.18,232.81 1684.75,233.017 1685.32,231.115 1685.89,232.322 1686.46,233.787 1687.02,232.691 1687.59,232.482 1688.16,231.566 1688.73,231.909 1689.3,231.057 1689.87,231.294 1690.44,230.59 1691,231.275 1691.57,232.58 1692.14,235.87 1692.71,236.734 1693.28,238.607 1693.85,237.526 1694.41,233.509 1694.98,235.734 1695.55,236.85 1696.12,238.921 1696.69,237.421 1697.26,236.226 1697.82,235.153 1698.39,236.245 1698.96,235.267 1699.53,236.068 1700.1,232.831 1700.67,231 1701.23,232.291 1701.8,232.55 1702.37,231.657 1702.94,231.018 1703.51,232.189 1704.08,229.433 1704.64,232.07 1705.21,231.297 1705.78,230.478 1706.35,231.128 1706.92,232.321 1707.49,231.553 1708.05,231.78 1708.62,233.058 1709.19,234.301 1709.76,232.326 1710.33,233.515 1710.9,234.612 1711.46,234.756 1712.03,234.587 1712.6,234.704 1713.17,232.614 1713.74,234.695 1714.31,234.735 1714.87,233.646 1715.44,233.637 1716.01,234.622 1716.58,232.627 1717.15,234.917 1717.72,232.888 1718.28,233.998 1718.85,233.95 1719.42,234.198 1719.99,236.274 1720.56,235.106 1721.13,236.144 1721.69,232.987 1722.26,231.049 1722.83,229.177 1723.4,229.755 1723.97,228.94 1724.54,230.45 1725.1,231.995 1725.67,230.979 1726.24,233.122 1726.81,236.181 1727.38,236.14 1727.95,236.872 1728.51,236.816 1729.08,235.673 1729.65,237.689 1730.22,237.439 1730.79,234.274 1731.36,235.477 1731.92,234.598 1732.49,234.743 1733.06,234.801 1733.63,234.664 1734.2,235.687 1734.77,236.62 1735.33,236.644 1735.9,234.367 1736.47,235.302 1737.04,235.345 1737.61,233.238 1738.18,233.338 1738.74,232.328 1739.31,231.377 1739.88,232.927 1740.45,235.174 1741.02,238.28 1741.59,238.041 1742.15,236.731 1742.72,237.604 1743.29,237.236 1743.86,240.42 1744.43,239.74 1745,239.417 1745.56,237.966 1746.13,239.5 1746.7,239.954 1747.27,240.623 1747.84,239.043 1748.41,238.71 1748.97,237.375 1749.54,239.392 1750.11,239.081 1750.68,239.656 1751.25,239.389 1751.82,241.92 1752.38,240.196 1752.95,237.739 1753.52,236.263 1754.09,236.018 1754.66,235.824 1755.23,235.544 1755.79,235.362 1756.36,235.182 1756.93,235.938 1757.5,236.745 1758.07,237.324 1758.64,239.115 1759.21,240.858 1759.77,241.18 1760.34,239.548 1760.91,237.07 1761.48,237.972 1762.05,237.531 1762.62,236.279 1763.18,234.995 1763.75,235.757 1764.32,235.73 1764.89,237.233 1765.46,235.026 1766.03,234.47 1766.59,235.097 1767.16,234.981 1767.73,234.779 1768.3,232.392 1768.87,229.181 1769.44,230.1 1770,230.255 1770.57,232.396 1771.14,233.418 1771.71,232.385 1772.28,233.474 1772.85,232.453 1773.41,232.41 1773.98,233.427 1774.55,232.24 1775.12,231.392 1775.69,232.393 1776.26,232.43 1776.82,232.331 1777.39,233.497 1777.96,235.605 1778.53,238.45 1779.1,238.036 1779.67,237.45 1780.23,236.93 1780.8,234.802 1781.37,235.659 1781.94,235.326 1782.51,235.139 1783.08,234.064 1783.64,235.022 1784.21,233.499 1784.78,232.396 1785.35,230.237 1785.92,229.321 1786.49,228.933 1787.05,228.277 1787.62,228.593 1788.19,229.82 1788.76,229.032 1789.33,229.274 1789.9,230.396 1790.46,230.709 1791.03,230.049 1791.6,229.357 1792.17,231.712 1792.74,229.583 1793.31,230.647 1793.87,230.815 1794.44,230.967 1795.01,230.153 1795.58,233.577 1796.15,234.745 1796.72,235.826 1797.28,234.887 1797.85,234.683 1798.42,235.956 1798.99,235.845 1799.56,234.517 1800.13,234.368 1800.69,233.594 1801.26,232.737 1801.83,233.853 1802.4,234.828 1802.97,235.618 1803.54,234.304 1804.1,234.197 1804.67,236.268 1805.24,232.925 1805.81,234.027 1806.38,234.897 1806.95,235.775 1807.51,235.326 1808.08,234.351 1808.65,234.207 1809.22,234.339 1809.79,235.251 1810.36,234.102 1810.92,234.141 1811.49,233.931 1812.06,234.782 1812.63,234.531 1813.2,231.426 1813.77,231.668 1814.33,231.719 1814.9,232.748 1815.47,232.75 1816.04,230.834 1816.61,231.839 1817.18,233.05 1817.74,233.235 1818.31,233.376 1818.88,233.459 1819.45,233.472 1820.02,230.406 1820.59,229.603 1821.15,231.878 1821.72,233.132 1822.29,235.197 1822.86,234.022 1823.43,234.098 1824,232.057 1824.56,233.093 1825.13,232.251 1825.7,232.43 1826.27,233.546 1826.84,231.647 1827.41,230.801 1827.97,230.951 1828.54,232.133 1829.11,232.341 1829.68,235.595 1830.25,234.461 1830.82,233.31 1831.39,232.277 1831.95,232.175 1832.52,229.243 1833.09,228.738 1833.66,230.25 1834.23,230.455 1834.8,231.808 1835.36,233.203 1835.93,233.186 1836.5,232.351 1837.07,230.481 1837.64,228.606 1838.21,226.894 1838.77,228.571 1839.34,229.199 1839.91,229.726 1840.48,227.938 1841.05,228.382 1841.62,228.929 1842.18,230.384 1842.75,231.957 1843.32,232.051 1843.89,229.958 1844.46,231.388 1845.03,231.548 1845.59,231.747 1846.16,230.93 1846.73,233.369 1847.3,233.647 1847.87,231.644 1848.44,231.784 1849,231.962 1849.57,232.123 1850.14,235.861 1850.71,235.817 1851.28,234.802 1851.85,234.864 1852.41,234.056 1852.98,233.198 1853.55,233.241 1854.12,233.289 1854.69,235.518 1855.26,235.591 1855.82,235.644 1856.39,236.605 1856.96,237.395 1857.53,238.31 1858.1,238.239 1858.67,237.085 1859.23,235.981 1859.8,235.95 1860.37,237.803 1860.94,236.333 1861.51,236.104 1862.08,238.195 1862.64,238.979 1863.21,239.648 1863.78,242.242 1864.35,244.808 1864.92,243.045 1865.49,243.463 1866.05,241.73 1866.62,240.194 1867.19,242.714 1867.76,243.107 1868.33,241.381 1868.9,238.488 1869.46,237.356 1870.03,236.064 1870.6,235.952 1871.17,236.881 1871.74,235.668 1872.31,234.674 1872.87,234.691 1873.44,231.438 1874.01,231.663 1874.58,231.83 1875.15,230.881 1875.72,232.093 1876.28,232.439 1876.85,234.376 1877.42,235.283 1877.99,234.16 1878.56,234.269 1879.13,234.204 1879.69,235.2 1880.26,233.996 1880.83,232.616 1881.4,230.592 1881.97,230.81 1882.54,229.032 1883.1,228.248 1883.67,228.62 1884.24,229.976 1884.81,230.375 1885.38,231.84 1885.95,233.2 1886.51,231.137 1887.08,231.384 1887.65,231.557 1888.22,232.698 1888.79,229.657 1889.36,231.038 1889.92,230.203 1890.49,229.418 1891.06,230.921 1891.63,234.287 1892.2,232.088 1892.77,231.339 1893.33,231.492 1893.9,231.903 1894.47,232.235 1895.04,235.461 1895.61,236.564 1896.18,238.25 1896.74,237.124 1897.31,236.971 1897.88,237.731 1898.45,234.543 1899.02,233.481 1899.59,232.572 1900.16,232.524 1900.72,232.698 1901.29,231.749 1901.86,234.974 1902.43,235.169 1903,235.212 1903.57,234.225 1904.13,235.292 1904.7,235.264 1905.27,234.356 1905.84,236.423 1906.41,235.257 1906.98,235.316 1907.54,234.231 1908.11,233.314 1908.68,233.298 1909.25,232.433 1909.82,232.675 1910.39,232.946 1910.95,231.035 1911.52,230.204 1912.09,227.614 1912.66,229.357 1913.23,229.846 1913.8,230.267 1914.36,231.726 1914.93,232.95 1915.5,232.308 1916.07,232.541 1916.64,231.685 1917.21,232.15 1917.77,231.246 1918.34,233.629 1918.91,233.685 1919.48,236.066 1920.05,236.034 1920.62,235.938 1921.18,234.897 1921.75,233.881 1922.32,232.024 1922.89,231.282 1923.46,230.57 1924.03,230.805 1924.59,232.062 1925.16,233.339 1925.73,239.625 1926.3,241.326 1926.87,240.95 1927.44,241.381 1928,240.969 1928.57,239.426 1929.14,239.129 1929.71,237.849 1930.28,237.582 1930.85,239.527 1931.41,240.246 1931.98,241.752 1932.55,242.191 1933.12,240.642 1933.69,239.343 1934.26,239.105 1934.82,238.783 1935.39,237.401 1935.96,233.106 1936.53,232.371 1937.1,236.665 1937.67,237.486 1938.23,238.261 1938.8,236.91 1939.37,235.625 1939.94,236.453 1940.51,235.287 1941.08,235.052 1941.64,234.009 1942.21,232.745 1942.78,232.986 1943.35,234.852 1943.92,233.761 1944.49,231.791 1945.05,231.819 1945.62,232.856 1946.19,232.854 1946.76,232.832 1947.33,232.881 1947.9,232.887 1948.46,234.051 1949.03,233.93 1949.6,231.896 1950.17,229.594 1950.74,229.879 1951.31,230.079 1951.87,231.18 1952.44,230.276 1953.01,234.587 1953.58,238.499 1954.15,237.261 1954.72,234.9 1955.28,234.813 1955.85,234.689 1956.42,234.999 1956.99,234.748 1957.56,233.803 1958.13,234.745 1958.69,236.934 1959.26,234.596 1959.83,234.528 1960.4,234.547 1960.97,233.355 1961.54,233.323 1962.1,229.253 1962.67,235.621 1963.24,236.571 1963.81,236.228 1964.38,235.057 1964.95,233.937 1965.51,233.904 1966.08,233.911 1966.65,232.946 1967.22,233.206 1967.79,233.161 1968.36,233.147 1968.92,233.176 1969.49,235.234 1970.06,236.048 1970.63,234.712 1971.2,232.478 1971.77,233.551 1972.34,234.528 1972.9,232.601 1973.47,234.81 1974.04,232.592 1974.61,234.423 1975.18,237.397 1975.75,237.068 1976.31,238.99 1976.88,239.848 1977.45,237.377 1978.02,238.238 1978.59,237.794 1979.16,238.57 1979.72,238.408 1980.29,238.769 1980.86,239.229 1981.43,238.641 1982,240.231 1982.57,237.636 1983.13,238.361 1983.7,237.806 1984.27,237.233 1984.84,236.897 1985.41,237.63 1985.98,237.182 1986.54,237.036 1987.11,236.635 1987.68,235.21 1988.25,234.925 1988.82,235.601 1989.39,235.269 1989.95,234.923 1990.52,233.718 1991.09,232.546 1991.66,232.288 1992.23,230.112 1992.8,230.248 1993.36,230.404 1993.93,231.535 1994.5,230.571 1995.07,231.631 1995.64,228.512 1996.21,230.031 1996.77,229.198 1997.34,229.389 1997.91,227.553 1998.48,229.016 1999.05,230.487 1999.62,229.72 2000.18,232.097 2000.75,229.936 2001.32,230.321 2001.89,230.566 2002.46,230.735 2003.03,228.917 2003.59,227.117 2004.16,226.773 2004.73,227.365 2005.3,227.722 2005.87,229.311 2006.44,229.686 2007,229.912 2007.57,230.177 2008.14,227.476 2008.71,225.895 2009.28,226.639 2009.85,229.469 2010.41,227.752 2010.98,230.369 2011.55,229.57 2012.12,231.968 2012.69,231.181 2013.26,233.447 2013.82,235.468 2014.39,234.625 2014.96,234.634 2015.53,234.762 2016.1,234.763 2016.67,237.319 2017.23,235.09 2017.8,233.107 2018.37,235.402 2018.94,235.467 2019.51,235.554 2020.08,234.471 2020.64,233.319 2021.21,233.627 2021.78,233.941 2022.35,234.045 2022.92,236.113 2023.49,233.957 2024.05,233.114 2024.62,233.485 2025.19,233.376 2025.76,233.413 2026.33,235.628 2026.9,235.715 2027.46,235.527 2028.03,234.511 2028.6,236.564 2029.17,235.237 2029.74,237.323 2030.31,238.994 2030.87,238.883 2031.44,237.648 2032.01,239.322 2032.58,239.866 2033.15,239.639 2033.72,241.466 2034.28,239.77 2034.85,241.569 2035.42,240.879 2035.99,239.29 2036.56,238.725 2037.13,238.43 2037.69,238.115 2038.26,236.563 2038.83,234.35 2039.4,236.323 2039.97,236.109 2040.54,235.807 2041.11,236.593 2041.67,234.078 2042.24,233.677 2042.81,232.795 2043.38,233.881 2043.95,233.836 2044.52,233.622 2045.08,232.555 2045.65,232.459 2046.22,233.623 2046.79,234.563 2047.36,235.43 2047.93,235.218 2048.49,237.107 2049.06,234.766 2049.63,236.835 2050.2,235.601 2050.77,236.232 2051.34,237.017 2051.9,235.754 2052.47,235.398 2053.04,234.158 2053.61,235.491 2054.18,235.331 2054.75,237.288 2055.31,236.977 2055.88,236.786 2056.45,236.471 2057.02,234.047 2057.59,234.996 2058.16,234.837 2058.72,233.674 2059.29,233.717 2059.86,234.615 2060.43,235.409 2061,235.215 2061.57,234.91 2062.13,232.733 2062.7,230.709 2063.27,228.861 2063.84,228.205 2064.41,227.509 2064.98,226.987 2065.54,227.232 2066.11,227.651 2066.68,228.146 2067.25,228.706 2067.82,228.265 2068.39,228.907 2068.95,228.059 2069.52,225.338 2070.09,225.824 2070.66,223.254 2071.23,224.128 2071.8,223.759 2072.36,224.387 2072.93,226.257 2073.5,225.798 2074.07,225.474 2074.64,227.353 2075.21,226.876 2075.77,227.411 2076.34,226.859 2076.91,228.441 2077.48,228.002 2078.05,229.605 2078.62,229.825 2079.18,231.07 2079.75,231.383 2080.32,231.752 2080.89,232.945 2081.46,230.146 2082.03,231.327 2082.59,234.998 2083.16,234.083 2083.73,234.4 2084.3,234.525 2084.87,235.645 2085.44,236.576 2086,237.624 2086.57,238.49 2087.14,237.387 2087.71,237.346 2088.28,237.143 2088.85,237.057 2089.41,236.884 2089.98,238.96 2090.55,237.848 2091.12,237.501 2091.69,236.527 2092.26,236.492 2092.82,234.361 2093.39,235.367 2093.96,234.482 2094.53,234.716 2095.1,232.767 2095.67,232.046 2096.23,230.288 2096.8,230.678 2097.37,232.996 2097.94,230.943 2098.51,233.287 2099.08,232.354 2099.64,232.594 2100.21,232.68 2100.78,231.977 2101.35,232.29 2101.92,233.466 2102.49,235.532 2103.05,236.44 2103.62,237.168 2104.19,238.128 2104.76,238.036 2105.33,237.696 2105.9,237.684 2106.46,238.549 2107.03,238.114 2107.6,239.113 2108.17,240.901 2108.74,239.462 2109.31,240.134 2109.87,239.871 2110.44,239.332 2111.01,238.946 2111.58,240.77 2112.15,241.22 2112.72,240.747 2113.29,241.073 2113.85,241.46 2114.42,242.83 2114.99,243.104 2115.56,242.354 2116.13,242.604 2116.7,242.041 2117.26,242.515 2117.83,242.016 2118.4,243.481 2118.97,242.623 2119.54,239.575 2120.11,237.958 2120.67,235.598 2121.24,235.296 2121.81,233.242 2122.38,232.157 2122.95,232.171 2123.52,231.194 2124.08,231.323 2124.65,231.209 2125.22,230.431 2125.79,229.479 2126.36,229.556 2126.93,228.963 2127.49,230.135 2128.06,231.551 2128.63,232.803 2129.2,230.616 2129.77,231.862 2130.34,233.852 2130.9,233.854 2131.47,234.98 2132.04,235.777 2132.61,236.642 2133.18,235.394 2133.75,234.227 2134.31,235.169 2134.88,231.801 2135.45,231.97 2136.02,231.802 2136.59,235.885 2137.16,233.747 2137.72,233.552 2138.29,234.671 2138.86,232.374 2139.43,232.343 2140,233.272 2140.57,235.169 2141.13,237.232 2141.7,237.864 2142.27,237.675 2142.84,237.483 2143.41,239.082 2143.98,237.628 2144.54,237.261 2145.11,234.919 2145.68,232.685 2146.25,233.771 2146.82,232.47 2147.39,232.645 2147.95,233.861 2148.52,235.085 2149.09,234.962 2149.66,234.076 2150.23,233.066 2150.8,232.017 2151.36,232.989 2151.93,233.086 2152.5,232.964 2153.07,232.803 2153.64,231.837 2154.21,233.882 2154.77,234.016 2155.34,235.162 2155.91,232.82 2156.48,233.122 2157.05,234.12 2157.62,233.264 2158.18,233.361 2158.75,233.443 2159.32,233.381 2159.89,234.319 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.023\n  with uncertainty of ± 0.0020914160017253478\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01623 ± (0.00158069, 0.00169254) (MC)\n  95% confidence interval: [-4.01955, -4.0131] (MC)\n  linear error propagation: -4.0163 ± 0.00165508\n  |δ_y| = |0.00131805| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016232853477876, val_l = 0.003317749430692629, val_u = 0.003132530541309464)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.46 2211.02,1138.46 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,961.875 2211.02,961.875 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,785.288 2211.02,785.288 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,608.702 2211.02,608.702 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,432.115 2211.02,432.115 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,255.528 2211.02,255.528 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.46 365.751,1138.46 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,961.875 365.751,961.875 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,785.288 365.751,785.288 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,608.702 365.751,608.702 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,432.115 365.751,432.115 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,255.528 365.751,255.528 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M298.909 1124.26 Q295.298 1124.26 293.469 1127.82 Q291.664 1131.37 291.664 1138.5 Q291.664 1145.6 293.469 1149.17 Q295.298 1152.71 298.909 1152.71 Q302.543 1152.71 304.349 1149.17 Q306.177 1145.6 306.177 1138.5 Q306.177 1131.37 304.349 1127.82 Q302.543 1124.26 298.909 1124.26 M298.909 1120.56 Q304.719 1120.56 307.775 1125.16 Q310.853 1129.75 310.853 1138.5 Q310.853 1147.22 307.775 1151.83 Q304.719 1156.41 298.909 1156.41 Q293.099 1156.41 290.02 1151.83 Q286.964 1147.22 286.964 1138.5 Q286.964 1129.75 290.02 1125.16 Q293.099 1120.56 298.909 1120.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M259.557 975.219 L267.196 975.219 L267.196 948.854 L258.886 950.521 L258.886 946.261 L267.15 944.595 L271.826 944.595 L271.826 975.219 L279.465 975.219 L279.465 979.155 L259.557 979.155 L259.557 975.219 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 947.673 Q295.298 947.673 293.469 951.238 Q291.664 954.78 291.664 961.909 Q291.664 969.016 293.469 972.581 Q295.298 976.122 298.909 976.122 Q302.543 976.122 304.349 972.581 Q306.177 969.016 306.177 961.909 Q306.177 954.78 304.349 951.238 Q302.543 947.673 298.909 947.673 M298.909 943.97 Q304.719 943.97 307.775 948.576 Q310.853 953.159 310.853 961.909 Q310.853 970.636 307.775 975.243 Q304.719 979.826 298.909 979.826 Q293.099 979.826 290.02 975.243 Q286.964 970.636 286.964 961.909 Q286.964 953.159 290.02 948.576 Q293.099 943.97 298.909 943.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M262.775 798.633 L279.094 798.633 L279.094 802.568 L257.15 802.568 L257.15 798.633 Q259.812 795.878 264.395 791.249 Q269.002 786.596 270.182 785.253 Q272.428 782.73 273.307 780.994 Q274.21 779.235 274.21 777.545 Q274.21 774.79 272.266 773.054 Q270.344 771.318 267.242 771.318 Q265.043 771.318 262.59 772.082 Q260.159 772.846 257.381 774.397 L257.381 769.675 Q260.205 768.54 262.659 767.962 Q265.113 767.383 267.15 767.383 Q272.52 767.383 275.715 770.068 Q278.909 772.753 278.909 777.244 Q278.909 779.374 278.099 781.295 Q277.312 783.193 275.205 785.786 Q274.627 786.457 271.525 789.675 Q268.423 792.869 262.775 798.633 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 771.087 Q295.298 771.087 293.469 774.652 Q291.664 778.193 291.664 785.323 Q291.664 792.429 293.469 795.994 Q295.298 799.536 298.909 799.536 Q302.543 799.536 304.349 795.994 Q306.177 792.429 306.177 785.323 Q306.177 778.193 304.349 774.652 Q302.543 771.087 298.909 771.087 M298.909 767.383 Q304.719 767.383 307.775 771.99 Q310.853 776.573 310.853 785.323 Q310.853 794.05 307.775 798.656 Q304.719 803.239 298.909 803.239 Q293.099 803.239 290.02 798.656 Q286.964 794.05 286.964 785.323 Q286.964 776.573 290.02 771.99 Q293.099 767.383 298.909 767.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M272.914 607.347 Q276.27 608.065 278.145 610.333 Q280.043 612.602 280.043 615.935 Q280.043 621.051 276.525 623.852 Q273.006 626.653 266.525 626.653 Q264.349 626.653 262.034 626.213 Q259.742 625.796 257.289 624.94 L257.289 620.426 Q259.233 621.56 261.548 622.139 Q263.863 622.718 266.386 622.718 Q270.784 622.718 273.076 620.982 Q275.39 619.245 275.39 615.935 Q275.39 612.88 273.238 611.167 Q271.108 609.431 267.289 609.431 L263.261 609.431 L263.261 605.588 L267.474 605.588 Q270.923 605.588 272.752 604.222 Q274.58 602.833 274.58 600.241 Q274.58 597.579 272.682 596.167 Q270.807 594.732 267.289 594.732 Q265.367 594.732 263.168 595.148 Q260.969 595.565 258.33 596.445 L258.33 592.278 Q260.992 591.537 263.307 591.167 Q265.645 590.797 267.705 590.797 Q273.029 590.797 276.131 593.227 Q279.233 595.634 279.233 599.755 Q279.233 602.625 277.59 604.616 Q275.946 606.583 272.914 607.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 594.5 Q295.298 594.5 293.469 598.065 Q291.664 601.607 291.664 608.736 Q291.664 615.843 293.469 619.407 Q295.298 622.949 298.909 622.949 Q302.543 622.949 304.349 619.407 Q306.177 615.843 306.177 608.736 Q306.177 601.607 304.349 598.065 Q302.543 594.5 298.909 594.5 M298.909 590.797 Q304.719 590.797 307.775 595.403 Q310.853 599.986 310.853 608.736 Q310.853 617.463 307.775 622.069 Q304.719 626.653 298.909 626.653 Q293.099 626.653 290.02 622.069 Q286.964 617.463 286.964 608.736 Q286.964 599.986 290.02 595.403 Q293.099 590.797 298.909 590.797 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M271.594 418.909 L259.789 437.358 L271.594 437.358 L271.594 418.909 M270.367 414.835 L276.247 414.835 L276.247 437.358 L281.177 437.358 L281.177 441.247 L276.247 441.247 L276.247 449.395 L271.594 449.395 L271.594 441.247 L255.992 441.247 L255.992 436.733 L270.367 414.835 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 417.914 Q295.298 417.914 293.469 421.478 Q291.664 425.02 291.664 432.15 Q291.664 439.256 293.469 442.821 Q295.298 446.363 298.909 446.363 Q302.543 446.363 304.349 442.821 Q306.177 439.256 306.177 432.15 Q306.177 425.02 304.349 421.478 Q302.543 417.914 298.909 417.914 M298.909 414.21 Q304.719 414.21 307.775 418.816 Q310.853 423.4 310.853 432.15 Q310.853 440.876 307.775 445.483 Q304.719 450.066 298.909 450.066 Q293.099 450.066 290.02 445.483 Q286.964 440.876 286.964 432.15 Q286.964 423.4 290.02 418.816 Q293.099 414.21 298.909 414.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M258.793 238.248 L277.15 238.248 L277.15 242.184 L263.076 242.184 L263.076 250.656 Q264.094 250.309 265.113 250.147 Q266.131 249.961 267.15 249.961 Q272.937 249.961 276.316 253.133 Q279.696 256.304 279.696 261.721 Q279.696 267.299 276.224 270.401 Q272.752 273.48 266.432 273.48 Q264.256 273.48 261.988 273.109 Q259.742 272.739 257.335 271.998 L257.335 267.299 Q259.418 268.433 261.641 268.989 Q263.863 269.545 266.34 269.545 Q270.344 269.545 272.682 267.438 Q275.02 265.332 275.02 261.721 Q275.02 258.109 272.682 256.003 Q270.344 253.896 266.34 253.896 Q264.465 253.896 262.59 254.313 Q260.738 254.73 258.793 255.609 L258.793 238.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 241.327 Q295.298 241.327 293.469 244.892 Q291.664 248.434 291.664 255.563 Q291.664 262.67 293.469 266.234 Q295.298 269.776 298.909 269.776 Q302.543 269.776 304.349 266.234 Q306.177 262.67 306.177 255.563 Q306.177 248.434 304.349 244.892 Q302.543 241.327 298.909 241.327 M298.909 237.623 Q304.719 237.623 307.775 242.23 Q310.853 246.813 310.853 255.563 Q310.853 264.29 307.775 268.896 Q304.719 273.48 298.909 273.48 Q293.099 273.48 290.02 268.896 Q286.964 264.29 286.964 255.563 Q286.964 246.813 290.02 242.23 Q293.099 237.623 298.909 237.623 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1008.35 400.199,888.812 400.786,913.698 401.372,806.489 401.958,706.076 402.545,732.898 403.131,748.705 403.718,663.121 404.304,586.671 404.891,607.268 405.477,536.366 406.063,472.964 406.65,415.53 407.236,364.916 407.823,388.43 408.409,407.107 408.995,363.235 409.582,322.855 410.168,286.876 410.755,308.704 411.341,279.35 411.927,253.592 412.514,272.687 413.1,253.753 413.687,234.74 414.273,219.895 414.86,240.635 415.446,259.017 416.032,247.957 416.619,266.476 417.205,257.565 417.792,275.579 418.378,269.486 418.964,286.505 419.551,303.366 420.137,300.273 420.724,333.173 421.31,332.557 421.896,331.937 422.483,347.192 423.069,377.945 423.656,393.154 424.242,408.131 424.829,410.932 425.415,414.653 426.001,430.294 426.588,435.519 427.174,460.163 427.761,466.002 428.347,472.713 428.933,488.585 429.52,495.242 430.106,511.351 430.693,519.54 431.279,537.335 431.865,553.459 432.452,569.159 433.038,591.122 433.625,599.469 434.211,620.554 434.798,635.699 435.384,650.6 435.97,670.605 436.557,679.011 437.143,687.562 437.73,716.017 438.316,738.241 438.902,745.647 439.489,762.568 440.075,775.056 440.662,802.732 441.248,812.823 441.835,819.247 442.421,833.096 443.007,856.802 443.594,872.747 444.18,881.451 444.767,889.961 445.353,895.138 445.939,913.04 446.526,918.011 447.112,926.358 447.699,942.993 448.285,950.17 448.871,954.474 449.458,964.116 450.044,968.258 450.631,972.075 451.217,981.491 451.804,985.597 452.39,997.406 452.976,1006.55 453.563,1012.95 454.149,1021.96 454.736,1030.45 455.322,1038.32 455.908,1045.99 456.495,1055.82 457.081,1063.09 457.668,1069.86 458.254,1072.45 458.84,1077.13 459.427,1081.53 460.013,1085.98 460.6,1088.29 461.186,1095.03 461.773,1101.74 462.359,1107.95 462.945,1117.81 463.532,1123.6 464.118,1126.86 464.705,1134.07 465.291,1135.46 465.877,1130.91 466.464,1132.65 467.05,1136.15 467.637,1139.69 468.223,1144.9 468.809,1146.53 469.396,1150.09 469.982,1149.78 470.569,1154.71 471.155,1157.87 471.742,1160.88 472.328,1162.18 472.914,1162.91 473.501,1164.32 474.087,1167.37 474.674,1170.21 475.26,1171.39 475.846,1172.97 476.433,1175.92 477.019,1178.32 477.606,1181.04 478.192,1187.42 478.778,1193.13 479.365,1195.67 479.951,1197.59 480.538,1201.73 481.124,1200.52 481.711,1204.54 482.297,1204.56 482.883,1203.33 483.47,1203.82 484.056,1204.38 484.643,1206.65 485.229,1205.38 485.815,1209.16 486.402,1212.49 486.988,1215.97 487.575,1214.25 488.161,1215.74 488.748,1215.57 489.334,1217.21 489.92,1220.72 490.507,1228.47 491.093,1228.32 491.68,1229.44 492.266,1230.74 492.852,1233.43 493.439,1237.5 494.025,1241.28 494.612,1243.47 495.198,1245.53 495.784,1242.93 496.371,1244.82 496.957,1246.73 497.544,1242.23 498.13,1243.19 498.717,1240.49 499.303,1237.97 499.889,1238.62 500.476,1236.55 501.062,1237.76 501.649,1240.17 502.235,1240.82 502.821,1238.53 503.408,1239.54 503.994,1241.8 504.581,1240.98 505.167,1240.07 505.753,1240.76 506.34,1239.85 506.926,1239.33 507.513,1238.81 508.099,1239.9 508.686,1241.06 509.272,1240.34 509.858,1243.64 510.445,1242.84 511.031,1240.62 511.618,1238.49 512.204,1245.49 512.79,1247.34 513.377,1243.31 513.963,1240.92 514.55,1240.08 515.136,1239.48 515.722,1239.13 516.309,1235.54 516.895,1235.22 517.482,1233.48 518.068,1236.54 518.655,1233.18 519.241,1234.55 519.827,1234.51 520.414,1232.82 521,1232.57 521.587,1233.97 522.173,1239.71 522.759,1240.47 523.346,1241.42 523.932,1245.22 524.519,1248.6 525.105,1250.53 525.691,1245.2 526.278,1245.7 526.864,1244.64 527.451,1243.85 528.037,1243.14 528.624,1240.72 529.21,1237.12 529.796,1238.18 530.383,1239.55 530.969,1237.85 531.556,1237.56 532.142,1237.25 532.728,1238.22 533.315,1236.34 533.901,1237.23 534.488,1236.5 535.074,1237.76 535.661,1235.43 536.247,1233.68 536.833,1232.03 537.42,1233.77 538.006,1233.46 538.593,1234.55 539.179,1236.98 539.765,1235.04 540.352,1234.76 540.938,1234.18 541.525,1233.55 542.111,1234.9 542.697,1236.26 543.284,1234.29 543.87,1232.34 544.457,1233.25 545.043,1231.65 545.63,1230.33 546.216,1231.63 546.802,1233.5 547.389,1237.51 547.975,1235.58 548.562,1235.04 549.148,1237.24 549.734,1238.2 550.321,1239.28 550.907,1237.32 551.494,1238.2 552.08,1236.15 552.666,1234.21 553.253,1235.27 553.839,1233.57 554.426,1233.4 555.012,1233.04 555.599,1231.49 556.185,1229.74 556.771,1232.5 557.358,1230.6 557.944,1231.7 558.531,1231.5 559.117,1232.78 559.703,1232.66 560.29,1233.89 560.876,1233.64 561.463,1231.8 562.049,1231.6 562.635,1232.17 563.222,1230.27 563.808,1231.49 564.395,1228.42 564.981,1227.07 565.568,1228.09 566.154,1227.89 566.74,1228.95 567.327,1228.94 567.913,1230.24 568.5,1233.12 569.086,1233.96 569.672,1235.08 570.259,1234.4 570.845,1235.74 571.432,1235.4 572.018,1236.14 572.605,1234.28 573.191,1236.72 573.777,1236.04 574.364,1235.51 574.95,1236.61 575.537,1238.61 576.123,1236.51 576.709,1236.17 577.296,1235.97 577.882,1234.08 578.469,1236.54 579.055,1233.47 579.641,1233.11 580.228,1234.04 580.814,1233.77 581.401,1231.5 581.987,1230.65 582.574,1231.59 583.16,1234.34 583.746,1232.19 584.333,1229 584.919,1230.01 585.506,1226.77 586.092,1228.26 586.678,1229.39 587.265,1230.3 587.851,1228.49 588.438,1228.2 589.024,1229.38 589.61,1228.99 590.197,1230.19 590.783,1228.2 591.37,1227.81 591.956,1227.53 592.543,1229.7 593.129,1228.33 593.715,1229.63 594.302,1227.75 594.888,1224.77 595.475,1224.26 596.061,1225.25 596.647,1226.3 597.234,1225.98 597.82,1225.81 598.407,1226.98 598.993,1226.5 599.579,1224.69 600.166,1227.65 600.752,1228.89 601.339,1225.43 601.925,1223.97 602.512,1223.97 603.098,1228.01 603.684,1227.63 604.271,1228.81 604.857,1229.93 605.444,1229.67 606.03,1230.68 606.616,1226.16 607.203,1226.06 607.789,1225.53 608.376,1223.83 608.962,1220.75 609.548,1219.28 610.135,1220.76 610.721,1220.7 611.308,1220.54 611.894,1221.89 612.481,1223.38 613.067,1223.09 613.653,1222.9 614.24,1224.24 614.826,1223.98 615.413,1225.03 615.999,1226.12 616.585,1228.53 617.172,1228.07 617.758,1227.7 618.345,1227.28 618.931,1226.6 619.518,1226.23 620.104,1224.58 620.69,1223.04 621.277,1224.13 621.863,1220.94 622.45,1223.94 623.036,1225.23 623.622,1226.04 624.209,1228.56 624.795,1226.55 625.382,1228.02 625.968,1228.79 626.554,1231.12 627.141,1229.22 627.727,1231.8 628.314,1232.54 628.9,1230.47 629.487,1230.06 630.073,1228.08 630.659,1229.09 631.246,1228.51 631.832,1226.7 632.419,1223.59 633.005,1224.98 633.591,1225.9 634.178,1225.3 634.764,1224.76 635.351,1224.46 635.937,1222.99 636.523,1222.96 637.11,1222.73 637.696,1220.96 638.283,1219.23 638.869,1217.68 639.456,1216.23 640.042,1216.47 640.628,1216.6 641.215,1215.52 641.801,1215.77 642.388,1216.22 642.974,1216.36 643.56,1216.62 644.147,1215.13 644.733,1215.38 645.32,1212.67 645.906,1213.14 646.492,1215.19 647.079,1215.71 647.665,1221.61 648.252,1222.66 648.838,1222.23 649.425,1226.32 650.011,1227.33 650.597,1225.66 651.184,1226.69 651.77,1228.89 652.357,1226.49 652.943,1226.28 653.529,1226.06 654.116,1226.9 654.702,1223.61 655.289,1224.38 655.875,1221.28 656.462,1222.45 657.048,1227.79 657.634,1227.47 658.221,1224.1 658.807,1220.76 659.394,1218.69 659.98,1219.79 660.566,1218 661.153,1216.8 661.739,1216.59 662.326,1218.08 662.912,1216.71 663.498,1216.93 664.085,1216.75 664.671,1216.65 665.258,1215.19 665.844,1216.57 666.431,1214.95 667.017,1210.57 667.603,1211.98 668.19,1212.15 668.776,1210.91 669.363,1209.78 669.949,1210.41 670.535,1211.97 671.122,1215.57 671.708,1216.87 672.295,1218.33 672.881,1216.73 673.467,1216.83 674.054,1215.26 674.64,1216.9 675.227,1219.75 675.813,1219.78 676.4,1223.83 676.986,1223.43 677.572,1223.04 678.159,1222.9 678.745,1221.21 679.332,1217.9 679.918,1218.28 680.504,1214.25 681.091,1216.02 681.677,1216.02 682.264,1216.21 682.85,1219.06 683.436,1219.94 684.023,1219.7 684.609,1219.45 685.196,1216.4 685.782,1213.51 686.369,1212.31 686.955,1212.22 687.541,1213.96 688.128,1215.6 688.714,1215.85 689.301,1217.21 689.887,1217.13 690.473,1217.02 691.06,1215.56 691.646,1218.39 692.233,1219.74 692.819,1218.42 693.405,1219.58 693.992,1216.31 694.578,1214.52 695.165,1214.28 695.751,1217.42 696.338,1217.07 696.924,1216.71 697.51,1215.04 698.097,1217.89 698.683,1219.45 699.27,1217.82 699.856,1217.49 700.442,1218.96 701.029,1220 701.615,1218.13 702.202,1216.3 702.788,1216.28 703.375,1214.59 703.961,1214.38 704.547,1212.64 705.134,1215.51 705.72,1212.66 706.307,1214.2 706.893,1212.69 707.479,1215.94 708.066,1216.11 708.652,1214.77 709.239,1216.27 709.825,1213.47 710.411,1213.63 710.998,1213.96 711.584,1215.82 712.171,1216.8 712.757,1216.52 713.344,1214.99 713.93,1213.76 714.516,1213.7 715.103,1215.19 715.689,1216.67 716.276,1217.96 716.862,1219.16 717.448,1213.26 718.035,1213.05 718.621,1213.05 719.208,1213.03 719.794,1213.18 720.38,1215.05 720.967,1213.66 721.553,1213.52 722.14,1214.95 722.726,1216.45 723.313,1217.99 723.899,1214.87 724.485,1213.42 725.072,1213.44 725.658,1214.66 726.245,1213.43 726.831,1213.53 727.417,1212.53 728.004,1212.18 728.59,1213.87 729.177,1213.74 729.763,1215.27 730.349,1216.85 730.936,1216.52 731.522,1217.67 732.109,1216.21 732.695,1214.51 733.282,1214.57 733.868,1214.73 734.454,1211.79 735.041,1211.93 735.627,1213.38 736.214,1213.21 736.8,1216.39 737.386,1216.44 737.973,1216.32 738.559,1217.93 739.146,1216.31 739.732,1217.66 740.318,1218.86 740.905,1218.74 741.491,1219.91 742.078,1222.54 742.664,1226.36 743.251,1226.97 743.837,1228.87 744.423,1229.39 745.01,1228.87 745.596,1230.7 746.183,1228.2 746.769,1227.5 747.355,1226.72 747.942,1222.96 748.528,1220.9 749.115,1220.29 749.701,1219.51 750.288,1220.44 750.874,1221.36 751.46,1220.87 752.047,1222.01 752.633,1220.3 753.22,1219.83 753.806,1216.64 754.392,1216.23 754.979,1214.64 755.565,1214.75 756.152,1214.49 756.738,1212.87 757.324,1213.03 757.911,1216.11 758.497,1211.37 759.084,1211.27 759.67,1214.44 760.257,1212.55 760.843,1212.7 761.429,1212.99 762.016,1214.58 762.602,1211.76 763.189,1211.91 763.775,1214.78 764.361,1215.68 764.948,1215.37 765.534,1215.32 766.121,1214.95 766.707,1217.82 767.293,1217.88 767.88,1217.74 768.466,1214.79 769.053,1214.74 769.639,1211.94 770.226,1212.09 770.812,1212.19 771.398,1212.3 771.985,1213.92 772.571,1218.48 773.158,1219.46 773.744,1219.09 774.33,1220.39 774.917,1220.11 775.503,1220.05 776.09,1216.63 776.676,1216.61 777.262,1218.03 777.849,1217.9 778.435,1220.32 779.022,1220.04 779.608,1221.3 780.195,1224.94 780.781,1224.25 781.367,1223.44 781.954,1224.48 782.54,1226.63 783.127,1226.29 783.713,1230.05 784.299,1228.85 784.886,1226.5 785.472,1223.11 786.059,1225.32 786.645,1224.8 787.232,1223.95 787.818,1223.27 788.404,1220.98 788.991,1220.67 789.577,1218.53 790.164,1216.78 790.75,1216.59 791.336,1214.76 791.923,1213.24 792.509,1213.14 793.096,1212.85 793.682,1213.01 794.268,1211.59 794.855,1208.61 795.441,1209.14 796.028,1205 796.614,1202.23 797.201,1201.45 797.787,1203.65 798.373,1201.13 798.96,1201.89 799.546,1206.6 800.133,1206.95 800.719,1208.18 801.305,1211.32 801.892,1212.96 802.478,1211.27 803.065,1212.32 803.651,1210.74 804.237,1208.16 804.824,1208.47 805.41,1208.67 805.997,1208.78 806.583,1207.38 807.17,1207.74 807.756,1206.66 808.342,1207.05 808.929,1207.47 809.515,1207.6 810.102,1206.56 810.688,1205.24 811.274,1202.63 811.861,1204.8 812.447,1205.26 813.034,1210.11 813.62,1208.9 814.206,1207.9 814.793,1207.99 815.379,1206.81 815.966,1207.28 816.552,1207.48 817.139,1207.92 817.725,1206.6 818.311,1208.31 818.898,1210.03 819.484,1210.49 820.071,1207.73 820.657,1205.12 821.243,1206.98 821.83,1206.85 822.416,1208.57 823.003,1210.12 823.589,1210.23 824.175,1210.16 824.762,1208.72 825.348,1207.44 825.935,1204.51 826.521,1206.55 827.108,1205.37 827.694,1205.39 828.28,1204.27 828.867,1207.61 829.453,1209.47 830.04,1209.91 830.626,1208.64 831.212,1211.56 831.799,1208.63 832.385,1207.22 832.972,1208.83 833.558,1207.78 834.145,1207.88 834.731,1209.3 835.317,1211.95 835.904,1210.39 836.49,1204.92 837.077,1206.43 837.663,1208.24 838.249,1208.28 838.836,1208.48 839.422,1211.44 840.009,1211.33 840.595,1214.08 841.181,1212.6 841.768,1211.37 842.354,1215.79 842.941,1215.15 843.527,1216.36 844.114,1216.14 844.7,1215.9 845.286,1211.53 845.873,1211.32 846.459,1211.61 847.046,1214.69 847.632,1216.21 848.218,1213.13 848.805,1214.51 849.391,1215.86 849.978,1215.5 850.564,1215.52 851.15,1216.82 851.737,1218.08 852.323,1217.73 852.91,1218.93 853.496,1218.75 854.083,1220.11 854.669,1221.31 855.255,1216.49 855.842,1217.95 856.428,1216.03 857.015,1217.16 857.601,1215.69 858.187,1213.81 858.774,1212.49 859.36,1211 859.947,1211.32 860.533,1210.02 861.119,1208.73 861.706,1209.03 862.292,1210.61 862.879,1210.98 863.465,1211.17 864.052,1211.1 864.638,1211.13 865.224,1209.94 865.811,1209.8 866.397,1208.32 866.984,1205.47 867.57,1204.37 868.156,1203.13 868.743,1204.82 869.329,1205.17 869.916,1208.38 870.502,1206.9 871.089,1210.01 871.675,1211.45 872.261,1211.23 872.848,1211.45 873.434,1215.71 874.021,1206.62 874.607,1207.3 875.193,1207.41 875.78,1207.68 876.366,1207.83 876.953,1209.37 877.539,1208.05 878.125,1209.52 878.712,1210.96 879.298,1209.46 879.885,1209.5 880.471,1206.67 881.058,1209.56 881.644,1211 882.23,1212.25 882.817,1210.66 883.403,1210.78 883.99,1210.88 884.576,1213.82 885.162,1213.83 885.749,1213.48 886.335,1213.33 886.922,1211.62 887.508,1212.99 888.094,1213.01 888.681,1214.11 889.267,1213.72 889.854,1213.5 890.44,1212.17 891.027,1212.28 891.613,1210.88 892.199,1204.96 892.786,1205.37 893.372,1209.79 893.959,1211.51 894.545,1214.49 895.131,1212.92 895.718,1215.73 896.304,1215.82 896.891,1221.23 897.477,1224.71 898.063,1224.09 898.65,1226.14 899.236,1222.52 899.823,1220.42 900.409,1221.71 900.996,1221.32 901.582,1222.2 902.168,1223.14 902.755,1225.18 903.341,1224.18 903.928,1226.12 904.514,1223.57 905.1,1220.02 905.687,1219.54 906.273,1220.29 906.86,1216.93 907.446,1216.69 908.032,1216.74 908.619,1216.46 909.205,1214.7 909.792,1215.64 910.378,1215.35 910.965,1213.47 911.551,1214.91 912.137,1211.57 912.724,1207.26 913.31,1207.68 913.897,1212.16 914.483,1212.03 915.069,1213.4 915.656,1217.49 916.242,1211.55 916.829,1213.22 917.415,1213.21 918.002,1211.59 918.588,1212.75 919.174,1209.28 919.761,1212.08 920.347,1213.34 920.934,1216.16 921.52,1214.37 922.106,1212.31 922.693,1212.24 923.279,1213.98 923.866,1216.84 924.452,1217 925.038,1218.15 925.625,1219.25 926.211,1220.12 926.798,1219.84 927.384,1219.78 927.971,1217.81 928.557,1217.48 929.143,1217.29 929.73,1215.57 930.316,1216.68 930.903,1216.22 931.489,1215.98 932.075,1216.92 932.662,1216.71 933.248,1217.54 933.835,1215.54 934.421,1214.94 935.007,1217.84 935.594,1220.24 936.18,1218.39 936.767,1220.82 937.353,1218.55 937.94,1216.78 938.526,1219.18 939.112,1214.47 939.699,1215.79 940.285,1215.53 940.872,1212.18 941.458,1210.59 942.044,1213.65 942.631,1213.28 943.217,1215.86 943.804,1215.29 944.39,1212.53 944.976,1211.09 945.563,1211.22 946.149,1211.49 946.736,1211.5 947.322,1209.92 947.909,1208.68 948.495,1209.96 949.081,1206.67 949.668,1204.05 950.254,1205.49 950.841,1205.65 951.427,1206.06 952.013,1205.19 952.6,1201.15 953.186,1201.61 953.773,1204.94 954.359,1203.86 954.945,1204.25 955.532,1205.84 956.118,1204.86 956.705,1204.87 957.291,1206.37 957.878,1207.68 958.464,1209.38 959.05,1212.14 959.637,1213.33 960.223,1215.17 960.81,1215.08 961.396,1214.94 961.982,1216.31 962.569,1214.74 963.155,1217.73 963.742,1218.67 964.328,1218.23 964.915,1217.86 965.501,1216.05 966.087,1214.36 966.674,1211.33 967.26,1209.75 967.847,1206.86 968.433,1206.83 969.019,1208.48 969.606,1207.18 970.192,1204.44 970.779,1204.92 971.365,1205.25 971.951,1206.87 972.538,1207.06 973.124,1207.56 973.711,1209.06 974.297,1206.46 974.884,1206.74 975.47,1207.01 976.056,1207.31 976.643,1204.55 977.229,1207.49 977.816,1207.87 978.402,1204.9 978.988,1203.71 979.575,1205.72 980.161,1203.01 980.748,1209.07 981.334,1209.09 981.92,1211.91 982.507,1210.35 983.093,1206.05 983.68,1209.43 984.266,1213.62 984.853,1207.82 985.439,1207.68 986.025,1206.59 986.612,1206.87 987.198,1206.94 987.785,1205.82 988.371,1206.24 988.957,1207.77 989.544,1206.71 990.13,1208.35 990.717,1206.95 991.303,1205.62 991.889,1207.17 992.476,1205.95 993.062,1204.76 993.649,1210.73 994.235,1210.6 994.822,1210.87 995.408,1212.4 995.994,1212.37 996.581,1211.13 997.167,1210.85 997.754,1209.49 998.34,1209.5 998.926,1208.24 999.513,1207.19 1000.1,1208.81 1000.69,1210.26 1001.27,1207.26 1001.86,1207.67 1002.44,1207.41 1003.03,1206.35 1003.62,1200.76 1004.2,1202.93 1004.79,1203.5 1005.38,1205.46 1005.96,1204.17 1006.55,1202.76 1007.14,1206.36 1007.72,1210.98 1008.31,1209.76 1008.9,1208.06 1009.48,1209.53 1010.07,1208.24 1010.65,1207.05 1011.24,1206.84 1011.83,1208.38 1012.41,1206.97 1013,1205.6 1013.59,1204.49 1014.17,1204.79 1014.76,1204.81 1015.35,1206.48 1015.93,1205.29 1016.52,1207.15 1017.11,1208.73 1017.69,1207.35 1018.28,1207.55 1018.86,1207.85 1019.45,1208.16 1020.04,1208.22 1020.62,1208.42 1021.21,1207.27 1021.8,1208.79 1022.38,1210.09 1022.97,1211.73 1023.56,1211.29 1024.14,1216.98 1024.73,1218.07 1025.32,1215.92 1025.9,1212.62 1026.49,1209.53 1027.07,1208.2 1027.66,1205.65 1028.25,1209.11 1028.83,1210.41 1029.42,1211.95 1030.01,1210.27 1030.59,1212.95 1031.18,1210.26 1031.77,1210.46 1032.35,1209.08 1032.94,1211.94 1033.52,1210.4 1034.11,1210.63 1034.7,1212.34 1035.28,1215.25 1035.87,1216.39 1036.46,1217.27 1037.04,1217.01 1037.63,1215.14 1038.22,1216.14 1038.8,1217.34 1039.39,1217.16 1039.98,1216.86 1040.56,1219.12 1041.15,1218.29 1041.73,1217.84 1042.32,1217.62 1042.91,1220.03 1043.49,1221.12 1044.08,1218.83 1044.67,1214.14 1045.25,1212.55 1045.84,1209.8 1046.43,1212.44 1047.01,1214.88 1047.6,1213.05 1048.19,1208.55 1048.77,1208.46 1049.36,1211.45 1049.94,1211.45 1050.53,1213.04 1051.12,1217.21 1051.7,1216.78 1052.29,1216.3 1052.88,1215.71 1053.46,1215.28 1054.05,1212.14 1054.64,1212.26 1055.22,1213.33 1055.81,1216.1 1056.39,1212.55 1056.98,1212.71 1057.57,1211.1 1058.15,1209.62 1058.74,1206.51 1059.33,1209.54 1059.91,1209.61 1060.5,1209.81 1061.09,1208.26 1061.67,1211.17 1062.26,1209.7 1062.85,1209.77 1063.43,1206.92 1064.02,1211.37 1064.6,1212.53 1065.19,1212.53 1065.78,1212.25 1066.36,1209.22 1066.95,1210.35 1067.54,1211.62 1068.12,1217.41 1068.71,1215.24 1069.3,1216.32 1069.88,1217.54 1070.47,1217.06 1071.06,1216.76 1071.64,1214.99 1072.23,1214.79 1072.81,1215.81 1073.4,1212.6 1073.99,1210.77 1074.57,1211.81 1075.16,1214.51 1075.75,1215.8 1076.33,1216.71 1076.92,1217.62 1077.51,1216.02 1078.09,1217.1 1078.68,1218.16 1079.26,1213.35 1079.85,1214.92 1080.44,1212.15 1081.02,1213.59 1081.61,1213.56 1082.2,1216.04 1082.78,1214.23 1083.37,1215.45 1083.96,1212.16 1084.54,1212.09 1085.13,1207.8 1085.72,1203.78 1086.3,1208.66 1086.89,1208.44 1087.47,1207.17 1088.06,1205.53 1088.65,1204.43 1089.23,1204.66 1089.82,1205.06 1090.41,1205.56 1090.99,1204.45 1091.58,1204.65 1092.17,1205.28 1092.75,1202.65 1093.34,1204.58 1093.93,1204.96 1094.51,1205.07 1095.1,1202.53 1095.68,1201.58 1096.27,1203.46 1096.86,1204.95 1097.44,1202.32 1098.03,1199.94 1098.62,1201.84 1099.2,1199.6 1099.79,1198.94 1100.38,1199.51 1100.96,1201.55 1101.55,1200.5 1102.14,1202.15 1102.72,1202.46 1103.31,1205.86 1103.89,1206.2 1104.48,1208.03 1105.07,1206.76 1105.65,1206.85 1106.24,1205.58 1106.83,1207.41 1107.41,1206.38 1108,1203.27 1108.59,1205.03 1109.17,1203.55 1109.76,1205.47 1110.34,1208.69 1110.93,1210.35 1111.52,1210.27 1112.1,1210.01 1112.69,1211.5 1113.28,1209.75 1113.86,1211.6 1114.45,1211.79 1115.04,1213.05 1115.62,1208.43 1116.21,1208.59 1116.8,1206 1117.38,1206.19 1117.97,1207.98 1118.55,1206.42 1119.14,1208.05 1119.73,1208.1 1120.31,1207.05 1120.9,1207.31 1121.49,1208.61 1122.07,1205.84 1122.66,1207.41 1123.25,1207.79 1123.83,1207.99 1124.42,1212.5 1125.01,1209.71 1125.59,1212.35 1126.18,1211.09 1126.76,1214.13 1127.35,1214.01 1127.94,1213.97 1128.52,1212.46 1129.11,1212.25 1129.7,1215.09 1130.28,1214.91 1130.87,1216.26 1131.46,1217.4 1132.04,1216.98 1132.63,1216.32 1133.21,1215.84 1133.8,1216.94 1134.39,1212.18 1134.97,1213.69 1135.56,1213.16 1136.15,1211.47 1136.73,1211.2 1137.32,1211.01 1137.91,1209.76 1138.49,1207.07 1139.08,1214.53 1139.67,1212.98 1140.25,1212.63 1140.84,1208.17 1141.42,1210.9 1142.01,1210.62 1142.6,1207.74 1143.18,1209.26 1143.77,1209.11 1144.36,1210.7 1144.94,1213.74 1145.53,1214.93 1146.12,1217.36 1146.7,1212.97 1147.29,1211.46 1147.88,1212.57 1148.46,1209.68 1149.05,1211.04 1149.63,1209.58 1150.22,1212.4 1150.81,1212.16 1151.39,1213.46 1151.98,1214.84 1152.57,1214.63 1153.15,1212.83 1153.74,1209.62 1154.33,1208.18 1154.91,1208.27 1155.5,1208.27 1156.09,1208.18 1156.67,1209.66 1157.26,1211.16 1157.84,1214.04 1158.43,1211.18 1159.02,1212.58 1159.6,1209.46 1160.19,1206.7 1160.78,1208.21 1161.36,1207.24 1161.95,1204.65 1162.54,1203.39 1163.12,1202.41 1163.71,1204.65 1164.29,1201.78 1164.88,1202.03 1165.47,1202.56 1166.05,1201.08 1166.64,1203.03 1167.23,1204.7 1167.81,1203.45 1168.4,1203.5 1168.99,1202.31 1169.57,1201.46 1170.16,1203.66 1170.75,1202.71 1171.33,1202.87 1171.92,1203.51 1172.5,1204 1173.09,1205.33 1173.68,1206.05 1174.26,1210.79 1174.85,1212.5 1175.44,1209.64 1176.02,1210.67 1176.61,1209.08 1177.2,1208.94 1177.78,1205.97 1178.37,1208.99 1178.96,1208.96 1179.54,1208.88 1180.13,1211.52 1180.71,1214.15 1181.3,1212.83 1181.89,1213.88 1182.47,1213.45 1183.06,1213.33 1183.65,1213.23 1184.23,1211.5 1184.82,1208.23 1185.41,1212.49 1185.99,1210.94 1186.58,1209.6 1187.16,1207.84 1187.75,1206.71 1188.34,1209.81 1188.92,1210.01 1189.51,1210.02 1190.1,1210.29 1190.68,1211.68 1191.27,1210.04 1191.86,1211.33 1192.44,1211.24 1193.03,1213.91 1193.62,1215.18 1194.2,1212.04 1194.79,1211.74 1195.37,1210.38 1195.96,1209.09 1196.55,1207.71 1197.13,1209.52 1197.72,1209.89 1198.31,1208.44 1198.89,1209.91 1199.48,1209.69 1200.07,1209.74 1200.65,1212.49 1201.24,1210.62 1201.83,1207.44 1202.41,1207.5 1203,1209.18 1203.58,1207.84 1204.17,1203.54 1204.76,1206.64 1205.34,1208.15 1205.93,1209.81 1206.52,1209.33 1207.1,1210.96 1207.69,1212.48 1208.28,1214.08 1208.86,1213.9 1209.45,1212.29 1210.03,1213.69 1210.62,1215.33 1211.21,1215.62 1211.79,1215.22 1212.38,1212.18 1212.97,1209.31 1213.55,1210.87 1214.14,1210.95 1214.73,1209.85 1215.31,1211.18 1215.9,1212.58 1216.49,1213.72 1217.07,1212.15 1217.66,1209.23 1218.24,1207.54 1218.83,1210.23 1219.42,1207.3 1220,1207.5 1220.59,1207.43 1221.18,1207.64 1221.76,1207.9 1222.35,1207.95 1222.94,1206.59 1223.52,1208.28 1224.11,1209.89 1224.7,1211.47 1225.28,1214.18 1225.87,1215.39 1226.45,1219.52 1227.04,1220.43 1227.63,1223.75 1228.21,1223.04 1228.8,1217.95 1229.39,1217.35 1229.97,1216.84 1230.56,1213.72 1231.15,1211.92 1231.73,1208.7 1232.32,1210.12 1232.91,1207.23 1233.49,1205.92 1234.08,1203.05 1234.66,1203.44 1235.25,1202.01 1235.84,1203.54 1236.42,1203.68 1237.01,1202.71 1237.6,1197.26 1238.18,1195.4 1238.77,1197.48 1239.36,1198.01 1239.94,1199.63 1240.53,1203.01 1241.11,1203.49 1241.7,1203.93 1242.29,1204.49 1242.87,1207.53 1243.46,1207.72 1244.05,1206.38 1244.63,1210.86 1245.22,1213.8 1245.81,1211.97 1246.39,1214.83 1246.98,1216.06 1247.57,1215.57 1248.15,1216.79 1248.74,1219.08 1249.32,1218.46 1249.91,1220.8 1250.5,1214.41 1251.08,1215.41 1251.67,1211.97 1252.26,1210.1 1252.84,1209.87 1253.43,1212.37 1254.02,1210.61 1254.6,1210.55 1255.19,1209.15 1255.78,1208.95 1256.36,1208.8 1256.95,1207.44 1257.53,1211.9 1258.12,1210.2 1258.71,1207.23 1259.29,1209.12 1259.88,1212.02 1260.47,1210.45 1261.05,1211.76 1261.64,1210.35 1262.23,1210.13 1262.81,1208.66 1263.4,1208.56 1263.98,1208.74 1264.57,1207.27 1265.16,1207.15 1265.74,1206.94 1266.33,1207.02 1266.92,1204.27 1267.5,1203.27 1268.09,1202.21 1268.68,1202.99 1269.26,1205.01 1269.85,1205.26 1270.44,1203.77 1271.02,1206.71 1271.61,1205.49 1272.19,1205.93 1272.78,1206.11 1273.37,1206.48 1273.95,1209.29 1274.54,1206.55 1275.13,1208.1 1275.71,1208.29 1276.3,1211.22 1276.89,1209.71 1277.47,1209.6 1278.06,1213.76 1278.65,1210.74 1279.23,1208.86 1279.82,1208.66 1280.4,1208.64 1280.99,1206.99 1281.58,1207.16 1282.16,1210.29 1282.75,1208.79 1283.34,1210.42 1283.92,1210.24 1284.51,1210.01 1285.1,1208.31 1285.68,1206.87 1286.27,1209.73 1286.86,1211.14 1287.44,1212.37 1288.03,1215.15 1288.61,1216.37 1289.2,1216.06 1289.79,1212.86 1290.37,1209.61 1290.96,1210.98 1291.55,1209.61 1292.13,1211.09 1292.72,1211.14 1293.31,1212.46 1293.89,1213.99 1294.48,1212.31 1295.06,1212.32 1295.65,1212.16 1296.24,1213.65 1296.82,1213.4 1297.41,1212.1 1298,1212.42 1298.58,1213.62 1299.17,1213.42 1299.76,1212.01 1300.34,1210.5 1300.93,1210.32 1301.52,1210.49 1302.1,1208.91 1302.69,1210.55 1303.27,1210.11 1303.86,1208.54 1304.45,1205.4 1305.03,1202.6 1305.62,1207.3 1306.21,1209.27 1306.79,1210.69 1307.38,1209.28 1307.97,1209.25 1308.55,1209.29 1309.14,1212.23 1309.73,1214.57 1310.31,1214.48 1310.9,1214.17 1311.48,1213.92 1312.07,1215.13 1312.66,1214.68 1313.24,1217.13 1313.83,1216.77 1314.42,1211.93 1315,1211.81 1315.59,1212.93 1316.18,1215.65 1316.76,1212.44 1317.35,1215.4 1317.93,1215.08 1318.52,1216.34 1319.11,1216.12 1319.69,1217.45 1320.28,1215.27 1320.87,1210.77 1321.45,1210.72 1322.04,1213.61 1322.63,1211.88 1323.21,1211.74 1323.8,1212.71 1324.39,1212.47 1324.97,1209.79 1325.56,1209.57 1326.14,1207.87 1326.73,1209.26 1327.32,1207.86 1327.9,1210.64 1328.49,1216.16 1329.08,1210 1329.66,1208.82 1330.25,1210.65 1330.84,1211.89 1331.42,1207.58 1332.01,1206.23 1332.6,1208.18 1333.18,1209.79 1333.77,1214.45 1334.35,1214.36 1334.94,1212.53 1335.53,1212.61 1336.11,1213.7 1336.7,1208.88 1337.29,1207.57 1337.87,1204.66 1338.46,1203.32 1339.05,1200.94 1339.63,1201.18 1340.22,1199.95 1340.8,1199.09 1341.39,1200.95 1341.98,1201.49 1342.56,1202.08 1343.15,1202.64 1343.74,1200.18 1344.32,1200.71 1344.91,1201.54 1345.5,1204.93 1346.08,1206.66 1346.67,1207.03 1347.26,1205.52 1347.84,1204.78 1348.43,1204.87 1349.01,1205.53 1349.6,1203.05 1350.19,1204.62 1350.77,1204.68 1351.36,1201.72 1351.95,1202.02 1352.53,1203.93 1353.12,1205.67 1353.71,1211.61 1354.29,1213.1 1354.88,1213.03 1355.47,1215.49 1356.05,1214.25 1356.64,1214.01 1357.22,1213.83 1357.81,1213.85 1358.4,1216.79 1358.98,1220.59 1359.57,1220.01 1360.16,1218.31 1360.74,1214.97 1361.33,1215.77 1361.92,1214.11 1362.5,1215.27 1363.09,1211.93 1363.68,1213.33 1364.26,1214.64 1364.85,1214.43 1365.43,1214 1366.02,1218.01 1366.61,1218.83 1367.19,1219.96 1367.78,1215.3 1368.37,1213.47 1368.95,1213.15 1369.54,1213.16 1370.13,1215.7 1370.71,1216.9 1371.3,1214.98 1371.88,1217.93 1372.47,1217.3 1373.06,1215.57 1373.64,1214.05 1374.23,1216.56 1374.82,1211.83 1375.4,1213.28 1375.99,1211.67 1376.58,1208.53 1377.16,1206.88 1377.75,1208.46 1378.34,1208.13 1378.92,1208.33 1379.51,1206.9 1380.09,1205.59 1380.68,1207.35 1381.27,1205.89 1381.85,1203.28 1382.44,1207.95 1383.03,1209.68 1383.61,1208.38 1384.2,1208.35 1384.79,1208.4 1385.37,1207.06 1385.96,1205.86 1386.55,1205.95 1387.13,1203.31 1387.72,1199.56 1388.3,1198.51 1388.89,1202.13 1389.48,1202.76 1390.06,1199.96 1390.65,1200.41 1391.24,1200.54 1391.82,1201.12 1392.41,1203.37 1393,1207.65 1393.58,1207.71 1394.17,1207.6 1394.75,1207.88 1395.34,1206.53 1395.93,1205.15 1396.51,1203.9 1397.1,1202.8 1397.69,1201.38 1398.27,1200.22 1398.86,1197.61 1399.45,1198.05 1400.03,1201.46 1400.62,1194.64 1401.21,1199.71 1401.79,1198.65 1402.38,1202.21 1402.96,1202.6 1403.55,1201.65 1404.14,1202.25 1404.72,1201.07 1405.31,1202.99 1405.9,1204.48 1406.48,1205.96 1407.07,1208 1407.66,1212.38 1408.24,1212.21 1408.83,1211.83 1409.42,1213.16 1410,1214.22 1410.59,1212.6 1411.17,1209.57 1411.76,1211.18 1412.35,1209.81 1412.93,1210.98 1413.52,1211 1414.11,1209.44 1414.69,1211.14 1415.28,1212.75 1415.87,1216.91 1416.45,1217.94 1417.04,1214.71 1417.63,1214.48 1418.21,1214.56 1418.8,1214.32 1419.38,1213.93 1419.97,1213.61 1420.56,1213.29 1421.14,1214.36 1421.73,1212.8 1422.32,1207.96 1422.9,1211.86 1423.49,1211.85 1424.08,1211.7 1424.66,1213.18 1425.25,1213.1 1425.83,1209.9 1426.42,1212.43 1427.01,1210.86 1427.59,1206.33 1428.18,1209.07 1428.77,1210.01 1429.35,1210.13 1429.94,1210.11 1430.53,1208.7 1431.11,1208.92 1431.7,1210.04 1432.29,1208.36 1432.87,1207 1433.46,1206.73 1434.04,1207.01 1434.63,1207.16 1435.22,1207.18 1435.8,1210.12 1436.39,1207.31 1436.98,1204.43 1437.56,1201.75 1438.15,1202.19 1438.74,1205.6 1439.32,1204.21 1439.91,1207.49 1440.5,1208.99 1441.08,1209 1441.67,1210.3 1442.25,1211.67 1442.84,1211.44 1443.43,1209.97 1444.01,1210.21 1444.6,1213.16 1445.19,1211.58 1445.77,1212.74 1446.36,1212.63 1446.95,1212.54 1447.53,1211.08 1448.12,1211.24 1448.7,1209.85 1449.29,1208.49 1449.88,1207.13 1450.46,1206.26 1451.05,1206.73 1451.64,1207.04 1452.22,1208.59 1452.81,1201.28 1453.4,1201.55 1453.98,1200.6 1454.57,1204.19 1455.16,1204.4 1455.74,1209.13 1456.33,1210.41 1456.91,1211.96 1457.5,1216.01 1458.09,1209.87 1458.67,1213.99 1459.26,1212.42 1459.85,1213.54 1460.43,1210.5 1461.02,1211.7 1461.61,1211.73 1462.19,1209.93 1462.78,1211.31 1463.37,1211.52 1463.95,1208.69 1464.54,1210.36 1465.12,1210.36 1465.71,1209.12 1466.3,1207.77 1466.88,1208 1467.47,1208.25 1468.06,1203.57 1468.64,1202.42 1469.23,1203.29 1469.82,1200.86 1470.4,1199.83 1470.99,1202 1471.57,1203.75 1472.16,1204.08 1472.75,1204.4 1473.33,1204.7 1473.92,1206.34 1474.51,1206.67 1475.09,1207.97 1475.68,1205.26 1476.27,1206.7 1476.85,1208.08 1477.44,1208.17 1478.03,1211.15 1478.61,1211.03 1479.2,1210.44 1479.78,1210.51 1480.37,1208.75 1480.96,1211.6 1481.54,1208.38 1482.13,1207.06 1482.72,1208.75 1483.3,1207.17 1483.89,1208.81 1484.48,1208.59 1485.06,1210.49 1485.65,1210.66 1486.24,1210.57 1486.82,1211.87 1487.41,1205.61 1487.99,1205.92 1488.58,1210.51 1489.17,1210.44 1489.75,1208.83 1490.34,1210.34 1490.93,1211.63 1491.51,1209.9 1492.1,1206.96 1492.69,1205.58 1493.27,1204.3 1493.86,1204.26 1494.45,1204.63 1495.03,1206.61 1495.62,1209.73 1496.2,1208.32 1496.79,1208.69 1497.38,1206.11 1497.96,1206.08 1498.55,1206.44 1499.14,1206.57 1499.72,1208.22 1500.31,1208.24 1500.9,1205.24 1501.48,1206.68 1502.07,1206.9 1502.65,1204.02 1503.24,1208.26 1503.83,1202.14 1504.41,1200.82 1505,1204.18 1505.59,1204.43 1506.17,1209.1 1506.76,1209.41 1507.35,1210.91 1507.93,1212.4 1508.52,1215.05 1509.11,1213.02 1509.69,1214.07 1510.28,1210.78 1510.86,1212.05 1511.45,1214.52 1512.04,1215.63 1512.62,1214.18 1513.21,1213.78 1513.8,1210.98 1514.38,1209.67 1514.97,1206.69 1515.56,1205.37 1516.14,1205.91 1516.73,1206.21 1517.32,1203.47 1517.9,1203.9 1518.49,1204.34 1519.07,1206.06 1519.66,1207.67 1520.25,1206.44 1520.83,1205.12 1521.42,1205.4 1522.01,1204.01 1522.59,1202.7 1523.18,1204.63 1523.77,1203.49 1524.35,1204.01 1524.94,1203.04 1525.52,1203.5 1526.11,1209.67 1526.7,1209.78 1527.28,1209.65 1527.87,1208.44 1528.46,1209.94 1529.04,1207.14 1529.63,1207.3 1530.22,1207.42 1530.8,1206.22 1531.39,1206.64 1531.98,1205.53 1532.56,1205.8 1533.15,1203.05 1533.73,1205.05 1534.32,1205.22 1534.91,1206.9 1535.49,1205.83 1536.08,1206.03 1536.67,1207.14 1537.25,1210.47 1537.84,1211.74 1538.43,1211.25 1539.01,1211.19 1539.6,1212.54 1540.19,1212.38 1540.77,1212.68 1541.36,1216.67 1541.94,1222.19 1542.53,1223 1543.12,1226.35 1543.7,1228.68 1544.29,1226.91 1544.88,1227.53 1545.46,1225.31 1546.05,1224.42 1546.64,1222.02 1547.22,1221.28 1547.81,1220.75 1548.4,1220.15 1548.98,1222.57 1549.57,1218.94 1550.15,1221.24 1550.74,1218.89 1551.33,1220.8 1551.91,1221.67 1552.5,1219.27 1553.09,1219.82 1553.67,1218.06 1554.26,1218.69 1554.85,1216.71 1555.43,1216.48 1556.02,1213.29 1556.6,1210.3 1557.19,1211.27 1557.78,1212.34 1558.36,1212.37 1558.95,1209.41 1559.54,1212.01 1560.12,1213.21 1560.71,1213.24 1561.3,1210.46 1561.88,1210.47 1562.47,1210.45 1563.06,1208.95 1563.64,1206.12 1564.23,1206.43 1564.81,1204.8 1565.4,1210.57 1565.99,1214.89 1566.57,1214.78 1567.16,1213.35 1567.75,1211.77 1568.33,1210.18 1568.92,1210.23 1569.51,1211.59 1570.09,1211.34 1570.68,1211.1 1571.27,1209.7 1571.85,1206.67 1572.44,1208.07 1573.02,1209.28 1573.61,1210.67 1574.2,1211.15 1574.78,1206.57 1575.37,1202.36 1575.96,1204.31 1576.54,1205.92 1577.13,1207.47 1577.72,1210.38 1578.3,1210.03 1578.89,1206.79 1579.47,1207 1580.06,1208.45 1580.65,1206.82 1581.23,1204 1581.82,1204.37 1582.41,1204.58 1582.99,1203.24 1583.58,1205.09 1584.17,1199.64 1584.75,1200.26 1585.34,1200.86 1585.93,1202.67 1586.51,1204.24 1587.1,1204.52 1587.68,1203.65 1588.27,1203.71 1588.86,1202.93 1589.44,1202.2 1590.03,1199.8 1590.62,1201.75 1591.2,1199.4 1591.79,1198.43 1592.38,1199.23 1592.96,1201.39 1593.55,1201.68 1594.14,1202.04 1594.72,1199.75 1595.31,1201.87 1595.89,1202.22 1596.48,1199.93 1597.07,1200.7 1597.65,1201.28 1598.24,1203.33 1598.83,1205.16 1599.41,1205.2 1600,1205.81 1600.59,1204.44 1601.17,1201.77 1601.76,1206.19 1602.34,1212.27 1602.93,1213.17 1603.52,1215.71 1604.1,1217.01 1604.69,1214.95 1605.28,1216.26 1605.86,1217.23 1606.45,1215.17 1607.04,1213.4 1607.62,1210.19 1608.21,1211.92 1608.8,1211.79 1609.38,1212.91 1609.97,1214.37 1610.55,1215.78 1611.14,1214.05 1611.73,1215.37 1612.31,1215.19 1612.9,1215.26 1613.49,1216.45 1614.07,1217.51 1614.66,1218.42 1615.25,1219.05 1615.83,1216.97 1616.42,1213.47 1617.01,1214.75 1617.59,1217.14 1618.18,1216.88 1618.76,1216.52 1619.35,1217.41 1619.94,1215.88 1620.52,1218.4 1621.11,1219.25 1621.7,1214.22 1622.28,1214.07 1622.87,1215.14 1623.46,1212.95 1624.04,1209.89 1624.63,1208.35 1625.22,1208.58 1625.8,1210.19 1626.39,1211.42 1626.97,1208.47 1627.56,1208.55 1628.15,1208.51 1628.73,1209.84 1629.32,1206.8 1629.91,1208.39 1630.49,1207.11 1631.08,1205.34 1631.67,1204.15 1632.25,1204.13 1632.84,1202.87 1633.42,1202.02 1634.01,1199.35 1634.6,1198.4 1635.18,1200.74 1635.77,1201.31 1636.36,1204.51 1636.94,1204.41 1637.53,1203.1 1638.12,1203.54 1638.7,1205.4 1639.29,1203.89 1639.88,1204.18 1640.46,1201.53 1641.05,1200.52 1641.63,1206.42 1642.22,1205.42 1642.81,1205.72 1643.39,1204.31 1643.98,1204.66 1644.57,1207.83 1645.15,1212.23 1645.74,1213.91 1646.33,1215.07 1646.91,1214.98 1647.5,1214.88 1648.09,1216.04 1648.67,1215.75 1649.26,1217.07 1649.84,1215.25 1650.43,1212.05 1651.02,1210.45 1651.6,1211.72 1652.19,1210.31 1652.78,1213.22 1653.36,1212.94 1653.95,1209.91 1654.54,1211.17 1655.12,1211.21 1655.71,1212.45 1656.29,1212.34 1656.88,1213.35 1657.47,1213.39 1658.05,1213.41 1658.64,1213.23 1659.23,1213.1 1659.81,1214.03 1660.4,1210.83 1660.99,1209.63 1661.57,1209.49 1662.16,1213.62 1662.75,1214.84 1663.33,1213.08 1663.92,1211.49 1664.5,1211.26 1665.09,1211.49 1665.68,1214.27 1666.26,1214.13 1666.85,1212.56 1667.44,1212.26 1668.02,1212 1668.61,1214.7 1669.2,1213.09 1669.78,1211.08 1670.37,1212.62 1670.96,1212.95 1671.54,1214.28 1672.13,1213.87 1672.71,1215.12 1673.3,1214.87 1673.89,1215.93 1674.47,1215.07 1675.06,1213.31 1675.65,1208.74 1676.23,1207.47 1676.82,1204.76 1677.41,1206.16 1677.99,1211.7 1678.58,1208.59 1679.17,1206.98 1679.75,1203.98 1680.34,1205.96 1680.92,1207.55 1681.51,1209 1682.1,1207.43 1682.68,1208.75 1683.27,1207.59 1683.86,1212.08 1684.44,1214.67 1685.03,1212.95 1685.62,1212.63 1686.2,1213.93 1686.79,1214.89 1687.37,1213.33 1687.96,1217.24 1688.55,1213.67 1689.13,1214.81 1689.72,1216.03 1690.31,1215.22 1690.89,1213.63 1691.48,1214.75 1692.07,1214.5 1692.65,1212.77 1693.24,1211.06 1693.83,1213.82 1694.41,1212.2 1695,1210.67 1695.58,1210.46 1696.17,1210.67 1696.76,1210.49 1697.34,1213.41 1697.93,1210.53 1698.52,1210.45 1699.1,1211.96 1699.69,1211.99 1700.28,1210.61 1700.86,1213.4 1701.45,1210.22 1702.04,1213.04 1702.62,1211.52 1703.21,1211.59 1703.79,1211.24 1704.38,1208.32 1704.97,1209.9 1705.55,1208.41 1706.14,1212.79 1706.73,1215.53 1707.31,1218.23 1707.9,1217.56 1708.49,1218.81 1709.07,1216.84 1709.66,1214.78 1710.24,1216.26 1710.83,1213.34 1711.42,1209.07 1712,1209.07 1712.59,1207.98 1713.18,1207.98 1713.76,1209.51 1714.35,1206.63 1714.94,1206.88 1715.52,1211.24 1716.11,1209.54 1716.7,1210.73 1717.28,1210.52 1717.87,1210.42 1718.45,1210.59 1719.04,1209.13 1719.63,1207.77 1720.21,1207.67 1720.8,1210.8 1721.39,1209.48 1721.97,1209.38 1722.56,1212.3 1723.15,1212.18 1723.73,1213.62 1724.32,1215 1724.91,1212.9 1725.49,1209.78 1726.08,1205.37 1726.66,1205.59 1727.25,1207.33 1727.84,1206.03 1728.42,1206.44 1729.01,1201.87 1729.6,1202.65 1730.18,1202.95 1730.77,1204.85 1731.36,1202.58 1731.94,1201.78 1732.53,1200.68 1733.11,1202.72 1733.7,1203.05 1734.29,1204.81 1734.87,1201.87 1735.46,1202.16 1736.05,1201.21 1736.63,1201.44 1737.22,1197.71 1737.81,1199.93 1738.39,1203.22 1738.98,1205.2 1739.57,1205.48 1740.15,1205.7 1740.74,1206.05 1741.32,1206.26 1741.91,1206.48 1742.5,1205.38 1743.08,1204.2 1743.67,1203.31 1744.26,1200.69 1744.84,1198.09 1745.43,1197.45 1746.02,1199.55 1746.6,1202.9 1747.19,1201.54 1747.78,1202.05 1748.36,1203.72 1748.95,1205.46 1749.53,1204.36 1750.12,1204.36 1750.71,1202.2 1751.29,1205.21 1751.88,1205.96 1752.47,1205.07 1753.05,1205.21 1753.64,1205.46 1754.23,1208.79 1754.81,1213.33 1755.4,1212.18 1755.99,1212.07 1756.57,1209.18 1757.16,1207.79 1757.74,1209.25 1758.33,1207.77 1758.92,1209.22 1759.5,1209.32 1760.09,1207.94 1760.68,1209.62 1761.26,1210.86 1761.85,1209.53 1762.44,1209.52 1763.02,1209.71 1763.61,1208.12 1764.19,1205.17 1764.78,1201.13 1765.37,1201.59 1765.95,1202.3 1766.54,1202.94 1767.13,1205.85 1767.71,1204.63 1768.3,1205.05 1768.89,1205.28 1769.47,1206.76 1770.06,1205.41 1770.65,1207.52 1771.23,1209.08 1771.82,1212.15 1772.4,1213.54 1772.99,1214.21 1773.58,1215.26 1774.16,1214.98 1774.75,1213.41 1775.34,1214.63 1775.92,1214.43 1776.51,1212.99 1777.1,1212.65 1777.68,1213.67 1778.27,1214.75 1778.86,1211.58 1779.44,1214.62 1780.03,1213.26 1780.61,1213.12 1781.2,1212.99 1781.79,1214.21 1782.37,1209.53 1782.96,1207.9 1783.55,1206.36 1784.13,1207.63 1784.72,1207.89 1785.31,1206.09 1785.89,1206.19 1786.48,1208.01 1787.06,1208.2 1787.65,1209.28 1788.24,1210.49 1788.82,1208.96 1789.41,1207.6 1790,1206.47 1790.58,1208.27 1791.17,1208.41 1791.76,1205.5 1792.34,1210.13 1792.93,1208.62 1793.52,1207.4 1794.1,1206.14 1794.69,1206.72 1795.27,1208.06 1795.86,1208.25 1796.45,1208.06 1797.03,1206.77 1797.62,1208.35 1798.21,1208.29 1798.79,1208.58 1799.38,1207.39 1799.97,1207.73 1800.55,1212.07 1801.14,1211.8 1801.73,1211.79 1802.31,1210.41 1802.9,1210.45 1803.48,1213.16 1804.07,1211.85 1804.66,1210.21 1805.24,1209.98 1805.83,1209.8 1806.42,1209.7 1807,1209.7 1807.59,1214.01 1808.18,1215.23 1808.76,1212.17 1809.35,1210.47 1809.94,1207.6 1810.52,1209.22 1811.11,1209.11 1811.69,1211.97 1812.28,1210.58 1812.87,1211.78 1813.45,1211.58 1814.04,1210.06 1814.63,1212.73 1815.21,1213.98 1815.8,1213.86 1816.39,1212.29 1816.97,1212.05 1817.56,1207.53 1818.14,1209.08 1818.73,1210.69 1819.32,1212.15 1819.9,1212.35 1820.49,1216.5 1821.08,1217.34 1821.66,1215.37 1822.25,1215.19 1822.84,1213.39 1823.42,1211.5 1824.01,1211.54 1824.6,1212.74 1825.18,1215.4 1825.77,1218.12 1826.35,1220.66 1826.94,1218.51 1827.53,1217.79 1828.11,1217.18 1828.7,1219.8 1829.29,1219.35 1829.87,1218.74 1830.46,1216.84 1831.05,1214.74 1831.63,1214.67 1832.22,1217.65 1832.81,1215.76 1833.39,1215.61 1833.98,1215.4 1834.56,1216.61 1835.15,1213.28 1835.74,1212.91 1836.32,1215.72 1836.91,1215.59 1837.5,1215.4 1838.08,1215.24 1838.67,1210.04 1839.26,1210.06 1839.84,1211.43 1840.43,1211.32 1841.01,1212.44 1841.6,1213.64 1842.19,1213.6 1842.77,1213.56 1843.36,1210.45 1843.95,1210.3 1844.53,1210.19 1845.12,1208.79 1845.71,1207.61 1846.29,1206.23 1846.88,1206.21 1847.47,1207.72 1848.05,1209.19 1848.64,1209.18 1849.22,1206.52 1849.81,1208.48 1850.4,1208.74 1850.98,1205.74 1851.57,1204.52 1852.16,1203.44 1852.74,1199.62 1853.33,1195.76 1853.92,1197.96 1854.5,1197.12 1855.09,1199.31 1855.68,1201.27 1856.26,1197.54 1856.85,1196.74 1857.43,1198.93 1858.02,1202.81 1858.61,1204.28 1859.19,1206.01 1859.78,1206.11 1860.37,1204.75 1860.95,1206.38 1861.54,1207.73 1862.13,1207.69 1862.71,1212.23 1863.3,1211.99 1863.88,1211.82 1864.47,1213.21 1865.06,1211.6 1865.64,1211.17 1866.23,1208.5 1866.82,1207.21 1867.4,1208.76 1867.99,1208.6 1868.58,1208.68 1869.16,1207.28 1869.75,1208.94 1870.34,1210.88 1870.92,1213.75 1871.51,1213.54 1872.09,1216.11 1872.68,1217.34 1873.27,1216.98 1873.85,1215.24 1874.44,1214.79 1875.03,1212.84 1875.61,1211 1876.2,1213.91 1876.79,1213.64 1877.37,1213.47 1877.96,1211.94 1878.55,1216.24 1879.13,1214.43 1879.72,1215.68 1880.3,1216.88 1880.89,1214.9 1881.48,1210.27 1882.06,1213.35 1882.65,1214.45 1883.24,1214.31 1883.82,1213.81 1884.41,1213.4 1885,1208.92 1885.58,1207.33 1886.17,1204.89 1886.76,1206.36 1887.34,1206.49 1887.93,1205.34 1888.51,1209.72 1889.1,1211.2 1889.69,1212.49 1890.27,1212.59 1890.86,1212.39 1891.45,1213.76 1892.03,1209.3 1892.62,1209 1893.21,1208.91 1893.79,1210.26 1894.38,1208.76 1894.96,1208.76 1895.55,1210 1896.14,1207.09 1896.72,1208.66 1897.31,1208.54 1897.9,1210.03 1898.48,1211.32 1899.07,1211.36 1899.66,1212.59 1900.24,1212.29 1900.83,1211.95 1901.42,1214.66 1902,1215.9 1902.59,1219.63 1903.17,1217.37 1903.76,1216.81 1904.35,1216.34 1904.93,1214.4 1905.52,1212.75 1906.11,1213.68 1906.69,1213.4 1907.28,1214.64 1907.87,1214.06 1908.45,1215.37 1909.04,1212.11 1909.63,1212.04 1910.21,1208.71 1910.8,1208.7 1911.38,1208.78 1911.97,1210.19 1912.56,1211.59 1913.14,1214.2 1913.73,1215.29 1914.32,1216.36 1914.9,1216.13 1915.49,1214.46 1916.08,1212.73 1916.66,1203.9 1917.25,1201.34 1917.83,1201.68 1918.42,1200.88 1919.01,1201.25 1919.59,1203.24 1920.18,1203.51 1920.77,1205.18 1921.35,1205.45 1921.94,1202.61 1922.53,1201.44 1923.11,1199.14 1923.7,1198.31 1924.29,1200.27 1924.87,1201.92 1925.46,1202.11 1926.04,1202.43 1926.63,1204.24 1927.22,1210.18 1927.8,1211.24 1928.39,1205.26 1928.98,1204.03 1929.56,1202.84 1930.15,1204.63 1930.74,1206.36 1931.32,1205.15 1931.91,1206.72 1932.5,1207.02 1933.08,1208.45 1933.67,1210.23 1934.25,1209.92 1934.84,1207.34 1935.43,1208.84 1936.01,1211.61 1936.6,1211.64 1937.19,1210.24 1937.77,1210.28 1938.36,1210.34 1938.95,1210.31 1939.53,1210.33 1940.12,1208.73 1940.71,1208.9 1941.29,1211.75 1941.88,1215.03 1942.46,1214.76 1943.05,1214.59 1943.64,1213.16 1944.22,1214.5 1944.81,1208.56 1945.4,1203.05 1945.98,1204.67 1946.57,1207.9 1947.16,1208 1947.74,1208.15 1948.33,1207.7 1948.91,1208.02 1949.5,1209.33 1950.09,1208.01 1950.67,1204.92 1951.26,1208.12 1951.85,1208.2 1952.43,1208.16 1953.02,1209.82 1953.61,1209.89 1954.19,1215.6 1954.78,1206.81 1955.37,1205.43 1955.95,1205.84 1956.54,1207.43 1957.12,1208.97 1957.71,1209.02 1958.3,1209.02 1958.88,1210.37 1959.47,1210.04 1960.06,1210.12 1960.64,1210.17 1961.23,1210.15 1961.82,1207.29 1962.4,1206.11 1962.99,1207.93 1963.58,1211.05 1964.16,1209.59 1964.75,1208.23 1965.33,1210.92 1965.92,1207.86 1966.51,1210.95 1967.09,1208.42 1967.68,1204.23 1968.27,1204.6 1968.85,1201.81 1969.44,1200.46 1970.03,1203.78 1970.61,1202.48 1971.2,1202.99 1971.78,1201.79 1972.37,1201.89 1972.96,1201.26 1973.54,1200.48 1974.13,1201.17 1974.72,1198.8 1975.3,1202.29 1975.89,1201.17 1976.48,1201.83 1977.06,1202.53 1977.65,1202.92 1978.24,1201.81 1978.82,1202.34 1979.41,1202.46 1979.99,1202.94 1980.58,1204.87 1981.17,1205.24 1981.75,1204.27 1982.34,1204.69 1982.93,1205.14 1983.51,1206.81 1984.1,1208.46 1984.69,1208.86 1985.27,1211.96 1985.86,1211.87 1986.45,1211.76 1987.03,1210.28 1987.62,1211.7 1988.2,1210.31 1988.79,1214.73 1989.38,1212.76 1989.96,1214.04 1990.55,1213.9 1991.14,1216.59 1991.72,1214.73 1992.31,1212.81 1992.9,1213.98 1993.48,1210.77 1994.07,1213.85 1994.65,1213.42 1995.24,1213.18 1995.83,1213.04 1996.41,1215.68 1997,1218.33 1997.59,1219 1998.17,1218.37 1998.76,1218.05 1999.35,1216.01 1999.93,1215.62 2000.52,1215.42 2001.11,1215.16 2001.69,1219.04 2002.28,1221.42 2002.86,1220.61 2003.45,1216.86 2004.04,1219.39 2004.62,1215.9 2005.21,1217.12 2005.8,1213.89 2006.38,1215.05 2006.97,1211.95 2007.56,1209.13 2008.14,1210.28 2008.73,1210.25 2009.32,1210.05 2009.9,1210.03 2010.49,1206.41 2011.07,1209.46 2011.66,1212.21 2012.25,1209.02 2012.83,1208.89 2013.42,1208.73 2014.01,1210.21 2014.59,1211.81 2015.18,1211.4 2015.77,1210.97 2016.35,1210.83 2016.94,1207.92 2017.53,1210.89 2018.11,1212.08 2018.7,1211.58 2019.28,1211.75 2019.87,1211.72 2020.46,1208.62 2021.04,1208.46 2021.63,1208.67 2022.22,1210.06 2022.8,1207.16 2023.39,1208.96 2023.98,1205.99 2024.56,1203.55 2025.15,1203.57 2025.73,1205.17 2026.32,1202.71 2026.91,1201.8 2027.49,1201.96 2028.08,1199.22 2028.67,1201.42 2029.25,1198.72 2029.84,1199.48 2030.43,1201.54 2031.01,1202.19 2031.6,1202.48 2032.19,1202.8 2032.77,1204.87 2033.36,1207.91 2033.94,1205.13 2034.53,1205.37 2035.12,1205.74 2035.7,1204.58 2036.29,1208.05 2036.88,1208.61 2037.46,1209.85 2038.05,1208.36 2038.64,1208.43 2039.22,1208.74 2039.81,1210.25 2040.4,1210.42 2040.98,1208.83 2041.57,1207.52 2042.15,1206.29 2042.74,1206.55 2043.33,1203.86 2043.91,1207.07 2044.5,1204.14 2045.09,1205.8 2045.67,1204.87 2046.26,1203.7 2046.85,1205.4 2047.43,1205.85 2048.02,1207.55 2048.6,1205.68 2049.19,1205.86 2049.78,1203.08 2050.36,1203.43 2050.95,1203.61 2051.54,1203.98 2052.12,1207.32 2052.71,1205.99 2053.3,1206.18 2053.88,1207.79 2054.47,1207.74 2055.06,1206.49 2055.64,1205.36 2056.23,1205.59 2056.81,1205.99 2057.4,1209.02 2057.99,1211.89 2058.57,1214.56 2059.16,1215.62 2059.75,1216.75 2060.33,1217.66 2060.92,1217.51 2061.51,1217.11 2062.09,1216.6 2062.68,1215.98 2063.27,1216.74 2063.85,1216 2064.44,1217.33 2065.02,1221.28 2065.61,1220.85 2066.2,1224.64 2066.78,1223.73 2067.37,1224.51 2067.96,1223.92 2068.54,1221.58 2069.13,1222.43 2069.72,1223.11 2070.3,1220.73 2070.89,1221.57 2071.48,1221.02 2072.06,1221.98 2072.65,1219.97 2073.23,1220.73 2073.82,1218.66 2074.41,1218.47 2074.99,1216.85 2075.58,1216.49 2076.17,1216.05 2076.75,1214.44 2077.34,1218.39 2077.93,1216.84 2078.51,1211.77 2079.1,1213.03 2079.68,1212.58 2080.27,1212.4 2080.86,1210.81 2081.44,1209.46 2082.03,1207.91 2082.62,1206.59 2083.2,1208.02 2083.79,1207.99 2084.38,1208.18 2084.96,1208.22 2085.55,1208.38 2086.14,1205.38 2086.72,1206.81 2087.31,1207.19 2087.89,1208.47 2088.48,1208.45 2089.07,1211.37 2089.65,1209.95 2090.24,1211.16 2090.83,1210.82 2091.41,1213.53 2092,1214.58 2092.59,1217.09 2093.17,1216.65 2093.76,1213.5 2094.35,1216.4 2094.93,1213.2 2095.52,1214.53 2096.1,1214.24 2096.69,1214.16 2097.28,1215.18 2097.86,1214.8 2098.45,1213.2 2099.04,1210.31 2099.62,1209 2100.21,1207.91 2100.8,1206.47 2101.38,1206.49 2101.97,1206.85 2102.55,1206.77 2103.14,1205.45 2103.73,1205.94 2104.31,1204.42 2104.9,1201.75 2105.49,1203.6 2106.07,1202.5 2106.66,1202.7 2107.25,1203.3 2107.83,1203.7 2108.42,1200.99 2109.01,1200.17 2109.59,1200.64 2110.18,1199.99 2110.76,1199.25 2111.35,1197.11 2111.94,1196.48 2112.52,1197.29 2113.11,1196.7 2113.7,1197.26 2114.28,1196.37 2114.87,1196.84 2115.46,1194.55 2116.04,1195.5 2116.63,1199.57 2117.22,1201.7 2117.8,1204.91 2118.39,1205.29 2118.97,1208.14 2119.56,1209.68 2120.15,1209.72 2120.73,1211.14 2121.32,1211.03 2121.91,1211.27 2122.49,1212.43 2123.08,1213.86 2123.67,1213.88 2124.25,1214.83 2124.84,1213.33 2125.42,1211.46 2126.01,1209.78 2126.6,1212.87 2127.18,1211.22 2127.77,1208.49 2128.36,1208.49 2128.94,1206.92 2129.53,1205.77 2130.12,1204.51 2130.7,1206.19 2131.29,1207.79 2131.88,1206.46 2132.46,1211.16 2133.05,1210.98 2133.63,1211.27 2134.22,1205.61 2134.81,1208.56 2135.39,1208.84 2135.98,1207.28 2136.57,1210.49 2137.15,1210.58 2137.74,1209.32 2138.33,1206.68 2138.91,1203.75 2139.5,1202.77 2140.09,1202.93 2140.67,1203.1 2141.26,1200.75 2141.84,1202.66 2142.43,1203.08 2143.02,1206.28 2143.6,1209.39 2144.19,1207.91 2144.78,1209.74 2145.36,1209.54 2145.95,1207.87 2146.54,1206.16 2147.12,1206.3 2147.71,1207.52 2148.3,1208.93 2148.88,1210.43 2149.47,1209.12 2150.05,1209.02 2150.64,1209.21 2151.23,1209.47 2151.81,1210.86 2152.4,1208.05 2152.99,1207.87 2153.57,1206.26 2154.16,1209.51 2154.75,1209.12 2155.33,1207.75 2155.92,1208.95 2156.5,1208.83 2157.09,1208.74 2157.68,1208.84 2158.26,1207.54 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1209.94 L986.612 1209.94 L987.198 1209.94 L987.785 1209.94 L988.371 1209.94 L988.957 1209.94 L989.544 1209.94 L990.13 1209.94 L990.717 1209.94 L991.303 1209.94 L991.889 1209.94 L992.476 1209.94 L993.062 1209.94 L993.649 1209.94 L994.235 1209.94 L994.822 1209.94 L995.408 1209.94 L995.994 1209.94 L996.581 1209.94 L997.167 1209.94 L997.754 1209.94 L998.34 1209.94 L998.926 1209.94 L999.513 1209.94 L1000.1 1209.94 L1000.69 1209.94 L1001.27 1209.94 L1001.86 1209.94 L1002.44 1209.94 L1003.03 1209.94 L1003.62 1209.94 L1004.2 1209.94 L1004.79 1209.94 L1005.38 1209.94 L1005.96 1209.94 L1006.55 1209.94 L1007.14 1209.94 L1007.72 1209.94 L1008.31 1209.94 L1008.9 1209.94 L1009.48 1209.94 L1010.07 1209.94 L1010.65 1209.94 L1011.24 1209.94 L1011.83 1209.94 L1012.41 1209.94 L1013 1209.94 L1013.59 1209.94 L1014.17 1209.94 L1014.76 1209.94 L1015.35 1209.94 L1015.93 1209.94 L1016.52 1209.94 L1017.11 1209.94 L1017.69 1209.94 L1018.28 1209.94 L1018.86 1209.94 L1019.45 1209.94 L1020.04 1209.94 L1020.62 1209.94 L1021.21 1209.94 L1021.8 1209.94 L1022.38 1209.94 L1022.97 1209.94 L1023.56 1209.94 L1024.14 1209.94 L1024.73 1209.94 L1025.32 1209.94 L1025.9 1209.94 L1026.49 1209.94 L1027.07 1209.94 L1027.66 1209.94 L1028.25 1209.94 L1028.83 1209.94 L1029.42 1209.94 L1030.01 1209.94 L1030.59 1209.94 L1031.18 1209.94 L1031.77 1209.94 L1032.35 1209.94 L1032.94 1209.94 L1033.52 1209.94 L1034.11 1209.94 L1034.7 1209.94 L1035.28 1209.94 L1035.87 1209.94 L1036.46 1209.94 L1037.04 1209.94 L1037.63 1209.94 L1038.22 1209.94 L1038.8 1209.94 L1039.39 1209.94 L1039.98 1209.94 L1040.56 1209.94 L1041.15 1209.94 L1041.73 1209.94 L1042.32 1209.94 L1042.91 1209.94 L1043.49 1209.94 L1044.08 1209.94 L1044.67 1209.94 L1045.25 1209.94 L1045.84 1209.94 L1046.43 1209.94 L1047.01 1209.94 L1047.6 1209.94 L1048.19 1209.94 L1048.77 1209.94 L1049.36 1209.94 L1049.94 1209.94 L1050.53 1209.94 L1051.12 1209.94 L1051.7 1209.94 L1052.29 1209.94 L1052.88 1209.94 L1053.46 1209.94 L1054.05 1209.94 L1054.64 1209.94 L1055.22 1209.94 L1055.81 1209.94 L1056.39 1209.94 L1056.98 1209.94 L1057.57 1209.94 L1058.15 1209.94 L1058.74 1209.94 L1059.33 1209.94 L1059.91 1209.94 L1060.5 1209.94 L1061.09 1209.94 L1061.67 1209.94 L1062.26 1209.94 L1062.85 1209.94 L1063.43 1209.94 L1064.02 1209.94 L1064.6 1209.94 L1065.19 1209.94 L1065.78 1209.94 L1066.36 1209.94 L1066.95 1209.94 L1067.54 1209.94 L1068.12 1209.94 L1068.71 1209.94 L1069.3 1209.94 L1069.88 1209.94 L1070.47 1209.94 L1071.06 1209.94 L1071.64 1209.94 L1072.23 1209.94 L1072.81 1209.94 L1073.4 1209.94 L1073.99 1209.94 L1074.57 1209.94 L1075.16 1209.94 L1075.75 1209.94 L1076.33 1209.94 L1076.92 1209.94 L1077.51 1209.94 L1078.09 1209.94 L1078.68 1209.94 L1079.26 1209.94 L1079.85 1209.94 L1080.44 1209.94 L1081.02 1209.94 L1081.61 1209.94 L1082.2 1209.94 L1082.78 1209.94 L1083.37 1209.94 L1083.96 1209.94 L1084.54 1209.94 L1085.13 1209.94 L1085.72 1209.94 L1086.3 1209.94 L1086.89 1209.94 L1087.47 1209.94 L1088.06 1209.94 L1088.65 1209.94 L1089.23 1209.94 L1089.82 1209.94 L1090.41 1209.94 L1090.99 1209.94 L1091.58 1209.94 L1092.17 1209.94 L1092.75 1209.94 L1093.34 1209.94 L1093.93 1209.94 L1094.51 1209.94 L1095.1 1209.94 L1095.68 1209.94 L1096.27 1209.94 L1096.86 1209.94 L1097.44 1209.94 L1098.03 1209.94 L1098.62 1209.94 L1099.2 1209.94 L1099.79 1209.94 L1100.38 1209.94 L1100.96 1209.94 L1101.55 1209.94 L1102.14 1209.94 L1102.72 1209.94 L1103.31 1209.94 L1103.89 1209.94 L1104.48 1209.94 L1105.07 1209.94 L1105.65 1209.94 L1106.24 1209.94 L1106.83 1209.94 L1107.41 1209.94 L1108 1209.94 L1108.59 1209.94 L1109.17 1209.94 L1109.76 1209.94 L1110.34 1209.94 L1110.93 1209.94 L1111.52 1209.94 L1112.1 1209.94 L1112.69 1209.94 L1113.28 1209.94 L1113.86 1209.94 L1114.45 1209.94 L1115.04 1209.94 L1115.62 1209.94 L1116.21 1209.94 L1116.8 1209.94 L1117.38 1209.94 L1117.97 1209.94 L1118.55 1209.94 L1119.14 1209.94 L1119.73 1209.94 L1120.31 1209.94 L1120.9 1209.94 L1121.49 1209.94 L1122.07 1209.94 L1122.66 1209.94 L1123.25 1209.94 L1123.83 1209.94 L1124.42 1209.94 L1125.01 1209.94 L1125.59 1209.94 L1126.18 1209.94 L1126.76 1209.94 L1127.35 1209.94 L1127.94 1209.94 L1128.52 1209.94 L1129.11 1209.94 L1129.7 1209.94 L1130.28 1209.94 L1130.87 1209.94 L1131.46 1209.94 L1132.04 1209.94 L1132.63 1209.94 L1133.21 1209.94 L1133.8 1209.94 L1134.39 1209.94 L1134.97 1209.94 L1135.56 1209.94 L1136.15 1209.94 L1136.73 1209.94 L1137.32 1209.94 L1137.91 1209.94 L1138.49 1209.94 L1139.08 1209.94 L1139.67 1209.94 L1140.25 1209.94 L1140.84 1209.94 L1141.42 1209.94 L1142.01 1209.94 L1142.6 1209.94 L1143.18 1209.94 L1143.77 1209.94 L1144.36 1209.94 L1144.94 1209.94 L1145.53 1209.94 L1146.12 1209.94 L1146.7 1209.94 L1147.29 1209.94 L1147.88 1209.94 L1148.46 1209.94 L1149.05 1209.94 L1149.63 1209.94 L1150.22 1209.94 L1150.81 1209.94 L1151.39 1209.94 L1151.98 1209.94 L1152.57 1209.94 L1153.15 1209.94 L1153.74 1209.94 L1154.33 1209.94 L1154.91 1209.94 L1155.5 1209.94 L1156.09 1209.94 L1156.67 1209.94 L1157.26 1209.94 L1157.84 1209.94 L1158.43 1209.94 L1159.02 1209.94 L1159.6 1209.94 L1160.19 1209.94 L1160.78 1209.94 L1161.36 1209.94 L1161.95 1209.94 L1162.54 1209.94 L1163.12 1209.94 L1163.71 1209.94 L1164.29 1209.94 L1164.88 1209.94 L1165.47 1209.94 L1166.05 1209.94 L1166.64 1209.94 L1167.23 1209.94 L1167.81 1209.94 L1168.4 1209.94 L1168.99 1209.94 L1169.57 1209.94 L1170.16 1209.94 L1170.75 1209.94 L1171.33 1209.94 L1171.92 1209.94 L1172.5 1209.94 L1173.09 1209.94 L1173.68 1209.94 L1174.26 1209.94 L1174.85 1209.94 L1175.44 1209.94 L1176.02 1209.94 L1176.61 1209.94 L1177.2 1209.94 L1177.78 1209.94 L1178.37 1209.94 L1178.96 1209.94 L1179.54 1209.94 L1180.13 1209.94 L1180.71 1209.94 L1181.3 1209.94 L1181.89 1209.94 L1182.47 1209.94 L1183.06 1209.94 L1183.65 1209.94 L1184.23 1209.94 L1184.82 1209.94 L1185.41 1209.94 L1185.99 1209.94 L1186.58 1209.94 L1187.16 1209.94 L1187.75 1209.94 L1188.34 1209.94 L1188.92 1209.94 L1189.51 1209.94 L1190.1 1209.94 L1190.68 1209.94 L1191.27 1209.94 L1191.86 1209.94 L1192.44 1209.94 L1193.03 1209.94 L1193.62 1209.94 L1194.2 1209.94 L1194.79 1209.94 L1195.37 1209.94 L1195.96 1209.94 L1196.55 1209.94 L1197.13 1209.94 L1197.72 1209.94 L1198.31 1209.94 L1198.89 1209.94 L1199.48 1209.94 L1200.07 1209.94 L1200.65 1209.94 L1201.24 1209.94 L1201.83 1209.94 L1202.41 1209.94 L1203 1209.94 L1203.58 1209.94 L1204.17 1209.94 L1204.76 1209.94 L1205.34 1209.94 L1205.93 1209.94 L1206.52 1209.94 L1207.1 1209.94 L1207.69 1209.94 L1208.28 1209.94 L1208.86 1209.94 L1209.45 1209.94 L1210.03 1209.94 L1210.62 1209.94 L1211.21 1209.94 L1211.79 1209.94 L1212.38 1209.94 L1212.97 1209.94 L1213.55 1209.94 L1214.14 1209.94 L1214.73 1209.94 L1215.31 1209.94 L1215.9 1209.94 L1216.49 1209.94 L1217.07 1209.94 L1217.66 1209.94 L1218.24 1209.94 L1218.83 1209.94 L1219.42 1209.94 L1220 1209.94 L1220.59 1209.94 L1221.18 1209.94 L1221.76 1209.94 L1222.35 1209.94 L1222.94 1209.94 L1223.52 1209.94 L1224.11 1209.94 L1224.7 1209.94 L1225.28 1209.94 L1225.87 1209.94 L1226.45 1209.94 L1227.04 1209.94 L1227.63 1209.94 L1228.21 1209.94 L1228.8 1209.94 L1229.39 1209.94 L1229.97 1209.94 L1230.56 1209.94 L1231.15 1209.94 L1231.73 1209.94 L1232.32 1209.94 L1232.91 1209.94 L1233.49 1209.94 L1234.08 1209.94 L1234.66 1209.94 L1235.25 1209.94 L1235.84 1209.94 L1236.42 1209.94 L1237.01 1209.94 L1237.6 1209.94 L1238.18 1209.94 L1238.77 1209.94 L1239.36 1209.94 L1239.94 1209.94 L1240.53 1209.94 L1241.11 1209.94 L1241.7 1209.94 L1242.29 1209.94 L1242.87 1209.94 L1243.46 1209.94 L1244.05 1209.94 L1244.63 1209.94 L1245.22 1209.94 L1245.81 1209.94 L1246.39 1209.94 L1246.98 1209.94 L1247.57 1209.94 L1248.15 1209.94 L1248.74 1209.94 L1249.32 1209.94 L1249.91 1209.94 L1250.5 1209.94 L1251.08 1209.94 L1251.67 1209.94 L1252.26 1209.94 L1252.84 1209.94 L1253.43 1209.94 L1254.02 1209.94 L1254.6 1209.94 L1255.19 1209.94 L1255.78 1209.94 L1256.36 1209.94 L1256.95 1209.94 L1257.53 1209.94 L1258.12 1209.94 L1258.71 1209.94 L1259.29 1209.94 L1259.88 1209.94 L1260.47 1209.94 L1261.05 1209.94 L1261.64 1209.94 L1262.23 1209.94 L1262.81 1209.94 L1263.4 1209.94 L1263.98 1209.94 L1264.57 1209.94 L1265.16 1209.94 L1265.74 1209.94 L1266.33 1209.94 L1266.92 1209.94 L1267.5 1209.94 L1268.09 1209.94 L1268.68 1209.94 L1269.26 1209.94 L1269.85 1209.94 L1270.44 1209.94 L1271.02 1209.94 L1271.61 1209.94 L1272.19 1209.94 L1272.78 1209.94 L1273.37 1209.94 L1273.95 1209.94 L1274.54 1209.94 L1275.13 1209.94 L1275.71 1209.94 L1276.3 1209.94 L1276.89 1209.94 L1277.47 1209.94 L1278.06 1209.94 L1278.65 1209.94 L1279.23 1209.94 L1279.82 1209.94 L1280.4 1209.94 L1280.99 1209.94 L1281.58 1209.94 L1282.16 1209.94 L1282.75 1209.94 L1283.34 1209.94 L1283.92 1209.94 L1284.51 1209.94 L1285.1 1209.94 L1285.68 1209.94 L1286.27 1209.94 L1286.86 1209.94 L1287.44 1209.94 L1288.03 1209.94 L1288.61 1209.94 L1289.2 1209.94 L1289.79 1209.94 L1290.37 1209.94 L1290.96 1209.94 L1291.55 1209.94 L1292.13 1209.94 L1292.72 1209.94 L1293.31 1209.94 L1293.89 1209.94 L1294.48 1209.94 L1295.06 1209.94 L1295.65 1209.94 L1296.24 1209.94 L1296.82 1209.94 L1297.41 1209.94 L1298 1209.94 L1298.58 1209.94 L1299.17 1209.94 L1299.76 1209.94 L1300.34 1209.94 L1300.93 1209.94 L1301.52 1209.94 L1302.1 1209.94 L1302.69 1209.94 L1303.27 1209.94 L1303.86 1209.94 L1304.45 1209.94 L1305.03 1209.94 L1305.62 1209.94 L1306.21 1209.94 L1306.79 1209.94 L1307.38 1209.94 L1307.97 1209.94 L1308.55 1209.94 L1309.14 1209.94 L1309.73 1209.94 L1310.31 1209.94 L1310.9 1209.94 L1311.48 1209.94 L1312.07 1209.94 L1312.66 1209.94 L1313.24 1209.94 L1313.83 1209.94 L1314.42 1209.94 L1315 1209.94 L1315.59 1209.94 L1316.18 1209.94 L1316.76 1209.94 L1317.35 1209.94 L1317.93 1209.94 L1318.52 1209.94 L1319.11 1209.94 L1319.69 1209.94 L1320.28 1209.94 L1320.87 1209.94 L1321.45 1209.94 L1322.04 1209.94 L1322.63 1209.94 L1323.21 1209.94 L1323.8 1209.94 L1324.39 1209.94 L1324.97 1209.94 L1325.56 1209.94 L1326.14 1209.94 L1326.73 1209.94 L1327.32 1209.94 L1327.9 1209.94 L1328.49 1209.94 L1329.08 1209.94 L1329.66 1209.94 L1330.25 1209.94 L1330.84 1209.94 L1331.42 1209.94 L1332.01 1209.94 L1332.6 1209.94 L1333.18 1209.94 L1333.77 1209.94 L1334.35 1209.94 L1334.94 1209.94 L1335.53 1209.94 L1336.11 1209.94 L1336.7 1209.94 L1337.29 1209.94 L1337.87 1209.94 L1338.46 1209.94 L1339.05 1209.94 L1339.63 1209.94 L1340.22 1209.94 L1340.8 1209.94 L1341.39 1209.94 L1341.98 1209.94 L1342.56 1209.94 L1343.15 1209.94 L1343.74 1209.94 L1344.32 1209.94 L1344.91 1209.94 L1345.5 1209.94 L1346.08 1209.94 L1346.67 1209.94 L1347.26 1209.94 L1347.84 1209.94 L1348.43 1209.94 L1349.01 1209.94 L1349.6 1209.94 L1350.19 1209.94 L1350.77 1209.94 L1351.36 1209.94 L1351.95 1209.94 L1352.53 1209.94 L1353.12 1209.94 L1353.71 1209.94 L1354.29 1209.94 L1354.88 1209.94 L1355.47 1209.94 L1356.05 1209.94 L1356.64 1209.94 L1357.22 1209.94 L1357.81 1209.94 L1358.4 1209.94 L1358.98 1209.94 L1359.57 1209.94 L1360.16 1209.94 L1360.74 1209.94 L1361.33 1209.94 L1361.92 1209.94 L1362.5 1209.94 L1363.09 1209.94 L1363.68 1209.94 L1364.26 1209.94 L1364.85 1209.94 L1365.43 1209.94 L1366.02 1209.94 L1366.61 1209.94 L1367.19 1209.94 L1367.78 1209.94 L1368.37 1209.94 L1368.95 1209.94 L1369.54 1209.94 L1370.13 1209.94 L1370.71 1209.94 L1371.3 1209.94 L1371.88 1209.94 L1372.47 1209.94 L1373.06 1209.94 L1373.64 1209.94 L1374.23 1209.94 L1374.82 1209.94 L1375.4 1209.94 L1375.99 1209.94 L1376.58 1209.94 L1377.16 1209.94 L1377.75 1209.94 L1378.34 1209.94 L1378.92 1209.94 L1379.51 1209.94 L1380.09 1209.94 L1380.68 1209.94 L1381.27 1209.94 L1381.85 1209.94 L1382.44 1209.94 L1383.03 1209.94 L1383.61 1209.94 L1384.2 1209.94 L1384.79 1209.94 L1385.37 1209.94 L1385.96 1209.94 L1386.55 1209.94 L1387.13 1209.94 L1387.72 1209.94 L1388.3 1209.94 L1388.89 1209.94 L1389.48 1209.94 L1390.06 1209.94 L1390.65 1209.94 L1391.24 1209.94 L1391.82 1209.94 L1392.41 1209.94 L1393 1209.94 L1393.58 1209.94 L1394.17 1209.94 L1394.75 1209.94 L1395.34 1209.94 L1395.93 1209.94 L1396.51 1209.94 L1397.1 1209.94 L1397.69 1209.94 L1398.27 1209.94 L1398.86 1209.94 L1399.45 1209.94 L1400.03 1209.94 L1400.62 1209.94 L1401.21 1209.94 L1401.79 1209.94 L1402.38 1209.94 L1402.96 1209.94 L1403.55 1209.94 L1404.14 1209.94 L1404.72 1209.94 L1405.31 1209.94 L1405.9 1209.94 L1406.48 1209.94 L1407.07 1209.94 L1407.66 1209.94 L1408.24 1209.94 L1408.83 1209.94 L1409.42 1209.94 L1410 1209.94 L1410.59 1209.94 L1411.17 1209.94 L1411.76 1209.94 L1412.35 1209.94 L1412.93 1209.94 L1413.52 1209.94 L1414.11 1209.94 L1414.69 1209.94 L1415.28 1209.94 L1415.87 1209.94 L1416.45 1209.94 L1417.04 1209.94 L1417.63 1209.94 L1418.21 1209.94 L1418.8 1209.94 L1419.38 1209.94 L1419.97 1209.94 L1420.56 1209.94 L1421.14 1209.94 L1421.73 1209.94 L1422.32 1209.94 L1422.9 1209.94 L1423.49 1209.94 L1424.08 1209.94 L1424.66 1209.94 L1425.25 1209.94 L1425.83 1209.94 L1426.42 1209.94 L1427.01 1209.94 L1427.59 1209.94 L1428.18 1209.94 L1428.77 1209.94 L1429.35 1209.94 L1429.94 1209.94 L1430.53 1209.94 L1431.11 1209.94 L1431.7 1209.94 L1432.29 1209.94 L1432.87 1209.94 L1433.46 1209.94 L1434.04 1209.94 L1434.63 1209.94 L1435.22 1209.94 L1435.8 1209.94 L1436.39 1209.94 L1436.98 1209.94 L1437.56 1209.94 L1438.15 1209.94 L1438.74 1209.94 L1439.32 1209.94 L1439.91 1209.94 L1440.5 1209.94 L1441.08 1209.94 L1441.67 1209.94 L1442.25 1209.94 L1442.84 1209.94 L1443.43 1209.94 L1444.01 1209.94 L1444.6 1209.94 L1445.19 1209.94 L1445.77 1209.94 L1446.36 1209.94 L1446.95 1209.94 L1447.53 1209.94 L1448.12 1209.94 L1448.7 1209.94 L1449.29 1209.94 L1449.88 1209.94 L1450.46 1209.94 L1451.05 1209.94 L1451.64 1209.94 L1452.22 1209.94 L1452.81 1209.94 L1453.4 1209.94 L1453.98 1209.94 L1454.57 1209.94 L1455.16 1209.94 L1455.74 1209.94 L1456.33 1209.94 L1456.91 1209.94 L1457.5 1209.94 L1458.09 1209.94 L1458.67 1209.94 L1459.26 1209.94 L1459.85 1209.94 L1460.43 1209.94 L1461.02 1209.94 L1461.61 1209.94 L1462.19 1209.94 L1462.78 1209.94 L1463.37 1209.94 L1463.95 1209.94 L1464.54 1209.94 L1465.12 1209.94 L1465.71 1209.94 L1466.3 1209.94 L1466.88 1209.94 L1467.47 1209.94 L1468.06 1209.94 L1468.64 1209.94 L1469.23 1209.94 L1469.82 1209.94 L1470.4 1209.94 L1470.99 1209.94 L1471.57 1209.94 L1472.16 1209.94 L1472.75 1209.94 L1473.33 1209.94 L1473.92 1209.94 L1474.51 1209.94 L1475.09 1209.94 L1475.68 1209.94 L1476.27 1209.94 L1476.85 1209.94 L1477.44 1209.94 L1478.03 1209.94 L1478.61 1209.94 L1479.2 1209.94 L1479.78 1209.94 L1480.37 1209.94 L1480.96 1209.94 L1481.54 1209.94 L1482.13 1209.94 L1482.72 1209.94 L1483.3 1209.94 L1483.89 1209.94 L1484.48 1209.94 L1485.06 1209.94 L1485.65 1209.94 L1486.24 1209.94 L1486.82 1209.94 L1487.41 1209.94 L1487.99 1209.94 L1488.58 1209.94 L1489.17 1209.94 L1489.75 1209.94 L1490.34 1209.94 L1490.93 1209.94 L1491.51 1209.94 L1492.1 1209.94 L1492.69 1209.94 L1493.27 1209.94 L1493.86 1209.94 L1494.45 1209.94 L1495.03 1209.94 L1495.62 1209.94 L1496.2 1209.94 L1496.79 1209.94 L1497.38 1209.94 L1497.96 1209.94 L1498.55 1209.94 L1499.14 1209.94 L1499.72 1209.94 L1500.31 1209.94 L1500.9 1209.94 L1501.48 1209.94 L1502.07 1209.94 L1502.65 1209.94 L1503.24 1209.94 L1503.83 1209.94 L1504.41 1209.94 L1505 1209.94 L1505.59 1209.94 L1506.17 1209.94 L1506.76 1209.94 L1507.35 1209.94 L1507.93 1209.94 L1508.52 1209.94 L1509.11 1209.94 L1509.69 1209.94 L1510.28 1209.94 L1510.86 1209.94 L1511.45 1209.94 L1512.04 1209.94 L1512.62 1209.94 L1513.21 1209.94 L1513.8 1209.94 L1514.38 1209.94 L1514.97 1209.94 L1515.56 1209.94 L1516.14 1209.94 L1516.73 1209.94 L1517.32 1209.94 L1517.9 1209.94 L1518.49 1209.94 L1519.07 1209.94 L1519.66 1209.94 L1520.25 1209.94 L1520.83 1209.94 L1521.42 1209.94 L1522.01 1209.94 L1522.59 1209.94 L1523.18 1209.94 L1523.77 1209.94 L1524.35 1209.94 L1524.94 1209.94 L1525.52 1209.94 L1526.11 1209.94 L1526.7 1209.94 L1527.28 1209.94 L1527.87 1209.94 L1528.46 1209.94 L1529.04 1209.94 L1529.63 1209.94 L1530.22 1209.94 L1530.8 1209.94 L1531.39 1209.94 L1531.98 1209.94 L1532.56 1209.94 L1533.15 1209.94 L1533.73 1209.94 L1534.32 1209.94 L1534.91 1209.94 L1535.49 1209.94 L1536.08 1209.94 L1536.67 1209.94 L1537.25 1209.94 L1537.84 1209.94 L1538.43 1209.94 L1539.01 1209.94 L1539.6 1209.94 L1540.19 1209.94 L1540.77 1209.94 L1541.36 1209.94 L1541.94 1209.94 L1542.53 1209.94 L1543.12 1209.94 L1543.7 1209.94 L1544.29 1209.94 L1544.88 1209.94 L1545.46 1209.94 L1546.05 1209.94 L1546.64 1209.94 L1547.22 1209.94 L1547.81 1209.94 L1548.4 1209.94 L1548.98 1209.94 L1549.57 1209.94 L1550.15 1209.94 L1550.74 1209.94 L1551.33 1209.94 L1551.91 1209.94 L1552.5 1209.94 L1553.09 1209.94 L1553.67 1209.94 L1554.26 1209.94 L1554.85 1209.94 L1555.43 1209.94 L1556.02 1209.94 L1556.6 1209.94 L1557.19 1209.94 L1557.78 1209.94 L1558.36 1209.94 L1558.95 1209.94 L1559.54 1209.94 L1560.12 1209.94 L1560.71 1209.94 L1561.3 1209.94 L1561.88 1209.94 L1562.47 1209.94 L1563.06 1209.94 L1563.64 1209.94 L1564.23 1209.94 L1564.81 1209.94 L1565.4 1209.94 L1565.99 1209.94 L1566.57 1209.94 L1567.16 1209.94 L1567.75 1209.94 L1568.33 1209.94 L1568.92 1209.94 L1569.51 1209.94 L1570.09 1209.94 L1570.68 1209.94 L1571.27 1209.94 L1571.85 1209.94 L1572.44 1209.94 L1573.02 1209.94 L1573.61 1209.94 L1574.2 1209.94 L1574.78 1209.94 L1575.37 1209.94 L1575.96 1209.94 L1576.54 1209.94 L1577.13 1209.94 L1577.72 1209.94 L1578.3 1209.94 L1578.89 1209.94 L1579.47 1209.94 L1580.06 1209.94 L1580.65 1209.94 L1581.23 1209.94 L1581.82 1209.94 L1582.41 1209.94 L1582.99 1209.94 L1583.58 1209.94 L1584.17 1209.94 L1584.75 1209.94 L1585.34 1209.94 L1585.93 1209.94 L1586.51 1209.94 L1587.1 1209.94 L1587.68 1209.94 L1588.27 1209.94 L1588.86 1209.94 L1589.44 1209.94 L1590.03 1209.94 L1590.62 1209.94 L1591.2 1209.94 L1591.79 1209.94 L1592.38 1209.94 L1592.96 1209.94 L1593.55 1209.94 L1594.14 1209.94 L1594.72 1209.94 L1595.31 1209.94 L1595.89 1209.94 L1596.48 1209.94 L1597.07 1209.94 L1597.65 1209.94 L1598.24 1209.94 L1598.83 1209.94 L1599.41 1209.94 L1600 1209.94 L1600.59 1209.94 L1601.17 1209.94 L1601.76 1209.94 L1602.34 1209.94 L1602.93 1209.94 L1603.52 1209.94 L1604.1 1209.94 L1604.69 1209.94 L1605.28 1209.94 L1605.86 1209.94 L1606.45 1209.94 L1607.04 1209.94 L1607.62 1209.94 L1608.21 1209.94 L1608.8 1209.94 L1609.38 1209.94 L1609.97 1209.94 L1610.55 1209.94 L1611.14 1209.94 L1611.73 1209.94 L1612.31 1209.94 L1612.9 1209.94 L1613.49 1209.94 L1614.07 1209.94 L1614.66 1209.94 L1615.25 1209.94 L1615.83 1209.94 L1616.42 1209.94 L1617.01 1209.94 L1617.59 1209.94 L1618.18 1209.94 L1618.76 1209.94 L1619.35 1209.94 L1619.94 1209.94 L1620.52 1209.94 L1621.11 1209.94 L1621.7 1209.94 L1622.28 1209.94 L1622.87 1209.94 L1623.46 1209.94 L1624.04 1209.94 L1624.63 1209.94 L1625.22 1209.94 L1625.8 1209.94 L1626.39 1209.94 L1626.97 1209.94 L1627.56 1209.94 L1628.15 1209.94 L1628.73 1209.94 L1629.32 1209.94 L1629.91 1209.94 L1630.49 1209.94 L1631.08 1209.94 L1631.67 1209.94 L1632.25 1209.94 L1632.84 1209.94 L1633.42 1209.94 L1634.01 1209.94 L1634.6 1209.94 L1635.18 1209.94 L1635.77 1209.94 L1636.36 1209.94 L1636.94 1209.94 L1637.53 1209.94 L1638.12 1209.94 L1638.7 1209.94 L1639.29 1209.94 L1639.88 1209.94 L1640.46 1209.94 L1641.05 1209.94 L1641.63 1209.94 L1642.22 1209.94 L1642.81 1209.94 L1643.39 1209.94 L1643.98 1209.94 L1644.57 1209.94 L1645.15 1209.94 L1645.74 1209.94 L1646.33 1209.94 L1646.91 1209.94 L1647.5 1209.94 L1648.09 1209.94 L1648.67 1209.94 L1649.26 1209.94 L1649.84 1209.94 L1650.43 1209.94 L1651.02 1209.94 L1651.6 1209.94 L1652.19 1209.94 L1652.78 1209.94 L1653.36 1209.94 L1653.95 1209.94 L1654.54 1209.94 L1655.12 1209.94 L1655.71 1209.94 L1656.29 1209.94 L1656.88 1209.94 L1657.47 1209.94 L1658.05 1209.94 L1658.64 1209.94 L1659.23 1209.94 L1659.81 1209.94 L1660.4 1209.94 L1660.99 1209.94 L1661.57 1209.94 L1662.16 1209.94 L1662.75 1209.94 L1663.33 1209.94 L1663.92 1209.94 L1664.5 1209.94 L1665.09 1209.94 L1665.68 1209.94 L1666.26 1209.94 L1666.85 1209.94 L1667.44 1209.94 L1668.02 1209.94 L1668.61 1209.94 L1669.2 1209.94 L1669.78 1209.94 L1670.37 1209.94 L1670.96 1209.94 L1671.54 1209.94 L1672.13 1209.94 L1672.71 1209.94 L1673.3 1209.94 L1673.89 1209.94 L1674.47 1209.94 L1675.06 1209.94 L1675.65 1209.94 L1676.23 1209.94 L1676.82 1209.94 L1677.41 1209.94 L1677.99 1209.94 L1678.58 1209.94 L1679.17 1209.94 L1679.75 1209.94 L1680.34 1209.94 L1680.92 1209.94 L1681.51 1209.94 L1682.1 1209.94 L1682.68 1209.94 L1683.27 1209.94 L1683.86 1209.94 L1684.44 1209.94 L1685.03 1209.94 L1685.62 1209.94 L1686.2 1209.94 L1686.79 1209.94 L1687.37 1209.94 L1687.96 1209.94 L1688.55 1209.94 L1689.13 1209.94 L1689.72 1209.94 L1690.31 1209.94 L1690.89 1209.94 L1691.48 1209.94 L1692.07 1209.94 L1692.65 1209.94 L1693.24 1209.94 L1693.83 1209.94 L1694.41 1209.94 L1695 1209.94 L1695.58 1209.94 L1696.17 1209.94 L1696.76 1209.94 L1697.34 1209.94 L1697.93 1209.94 L1698.52 1209.94 L1699.1 1209.94 L1699.69 1209.94 L1700.28 1209.94 L1700.86 1209.94 L1701.45 1209.94 L1702.04 1209.94 L1702.62 1209.94 L1703.21 1209.94 L1703.79 1209.94 L1704.38 1209.94 L1704.97 1209.94 L1705.55 1209.94 L1706.14 1209.94 L1706.73 1209.94 L1707.31 1209.94 L1707.9 1209.94 L1708.49 1209.94 L1709.07 1209.94 L1709.66 1209.94 L1710.24 1209.94 L1710.83 1209.94 L1711.42 1209.94 L1712 1209.94 L1712.59 1209.94 L1713.18 1209.94 L1713.76 1209.94 L1714.35 1209.94 L1714.94 1209.94 L1715.52 1209.94 L1716.11 1209.94 L1716.7 1209.94 L1717.28 1209.94 L1717.87 1209.94 L1718.45 1209.94 L1719.04 1209.94 L1719.63 1209.94 L1720.21 1209.94 L1720.8 1209.94 L1721.39 1209.94 L1721.97 1209.94 L1722.56 1209.94 L1723.15 1209.94 L1723.73 1209.94 L1724.32 1209.94 L1724.91 1209.94 L1725.49 1209.94 L1726.08 1209.94 L1726.66 1209.94 L1727.25 1209.94 L1727.84 1209.94 L1728.42 1209.94 L1729.01 1209.94 L1729.6 1209.94 L1730.18 1209.94 L1730.77 1209.94 L1731.36 1209.94 L1731.94 1209.94 L1732.53 1209.94 L1733.11 1209.94 L1733.7 1209.94 L1734.29 1209.94 L1734.87 1209.94 L1735.46 1209.94 L1736.05 1209.94 L1736.63 1209.94 L1737.22 1209.94 L1737.81 1209.94 L1738.39 1209.94 L1738.98 1209.94 L1739.57 1209.94 L1740.15 1209.94 L1740.74 1209.94 L1741.32 1209.94 L1741.91 1209.94 L1742.5 1209.94 L1743.08 1209.94 L1743.67 1209.94 L1744.26 1209.94 L1744.84 1209.94 L1745.43 1209.94 L1746.02 1209.94 L1746.6 1209.94 L1747.19 1209.94 L1747.78 1209.94 L1748.36 1209.94 L1748.95 1209.94 L1749.53 1209.94 L1750.12 1209.94 L1750.71 1209.94 L1751.29 1209.94 L1751.88 1209.94 L1752.47 1209.94 L1753.05 1209.94 L1753.64 1209.94 L1754.23 1209.94 L1754.81 1209.94 L1755.4 1209.94 L1755.99 1209.94 L1756.57 1209.94 L1757.16 1209.94 L1757.74 1209.94 L1758.33 1209.94 L1758.92 1209.94 L1759.5 1209.94 L1760.09 1209.94 L1760.68 1209.94 L1761.26 1209.94 L1761.85 1209.94 L1762.44 1209.94 L1763.02 1209.94 L1763.61 1209.94 L1764.19 1209.94 L1764.78 1209.94 L1765.37 1209.94 L1765.95 1209.94 L1766.54 1209.94 L1767.13 1209.94 L1767.71 1209.94 L1768.3 1209.94 L1768.89 1209.94 L1769.47 1209.94 L1770.06 1209.94 L1770.65 1209.94 L1771.23 1209.94 L1771.82 1209.94 L1772.4 1209.94 L1772.99 1209.94 L1773.58 1209.94 L1774.16 1209.94 L1774.75 1209.94 L1775.34 1209.94 L1775.92 1209.94 L1776.51 1209.94 L1777.1 1209.94 L1777.68 1209.94 L1778.27 1209.94 L1778.86 1209.94 L1779.44 1209.94 L1780.03 1209.94 L1780.61 1209.94 L1781.2 1209.94 L1781.79 1209.94 L1782.37 1209.94 L1782.96 1209.94 L1783.55 1209.94 L1784.13 1209.94 L1784.72 1209.94 L1785.31 1209.94 L1785.89 1209.94 L1786.48 1209.94 L1787.06 1209.94 L1787.65 1209.94 L1788.24 1209.94 L1788.82 1209.94 L1789.41 1209.94 L1790 1209.94 L1790.58 1209.94 L1791.17 1209.94 L1791.76 1209.94 L1792.34 1209.94 L1792.93 1209.94 L1793.52 1209.94 L1794.1 1209.94 L1794.69 1209.94 L1795.27 1209.94 L1795.86 1209.94 L1796.45 1209.94 L1797.03 1209.94 L1797.62 1209.94 L1798.21 1209.94 L1798.79 1209.94 L1799.38 1209.94 L1799.97 1209.94 L1800.55 1209.94 L1801.14 1209.94 L1801.73 1209.94 L1802.31 1209.94 L1802.9 1209.94 L1803.48 1209.94 L1804.07 1209.94 L1804.66 1209.94 L1805.24 1209.94 L1805.83 1209.94 L1806.42 1209.94 L1807 1209.94 L1807.59 1209.94 L1808.18 1209.94 L1808.76 1209.94 L1809.35 1209.94 L1809.94 1209.94 L1810.52 1209.94 L1811.11 1209.94 L1811.69 1209.94 L1812.28 1209.94 L1812.87 1209.94 L1813.45 1209.94 L1814.04 1209.94 L1814.63 1209.94 L1815.21 1209.94 L1815.8 1209.94 L1816.39 1209.94 L1816.97 1209.94 L1817.56 1209.94 L1818.14 1209.94 L1818.73 1209.94 L1819.32 1209.94 L1819.9 1209.94 L1820.49 1209.94 L1821.08 1209.94 L1821.66 1209.94 L1822.25 1209.94 L1822.84 1209.94 L1823.42 1209.94 L1824.01 1209.94 L1824.6 1209.94 L1825.18 1209.94 L1825.77 1209.94 L1826.35 1209.94 L1826.94 1209.94 L1827.53 1209.94 L1828.11 1209.94 L1828.7 1209.94 L1829.29 1209.94 L1829.87 1209.94 L1830.46 1209.94 L1831.05 1209.94 L1831.63 1209.94 L1832.22 1209.94 L1832.81 1209.94 L1833.39 1209.94 L1833.98 1209.94 L1834.56 1209.94 L1835.15 1209.94 L1835.74 1209.94 L1836.32 1209.94 L1836.91 1209.94 L1837.5 1209.94 L1838.08 1209.94 L1838.67 1209.94 L1839.26 1209.94 L1839.84 1209.94 L1840.43 1209.94 L1841.01 1209.94 L1841.6 1209.94 L1842.19 1209.94 L1842.77 1209.94 L1843.36 1209.94 L1843.95 1209.94 L1844.53 1209.94 L1845.12 1209.94 L1845.71 1209.94 L1846.29 1209.94 L1846.88 1209.94 L1847.47 1209.94 L1848.05 1209.94 L1848.64 1209.94 L1849.22 1209.94 L1849.81 1209.94 L1850.4 1209.94 L1850.98 1209.94 L1851.57 1209.94 L1852.16 1209.94 L1852.74 1209.94 L1853.33 1209.94 L1853.92 1209.94 L1854.5 1209.94 L1855.09 1209.94 L1855.68 1209.94 L1856.26 1209.94 L1856.85 1209.94 L1857.43 1209.94 L1858.02 1209.94 L1858.61 1209.94 L1859.19 1209.94 L1859.78 1209.94 L1860.37 1209.94 L1860.95 1209.94 L1861.54 1209.94 L1862.13 1209.94 L1862.71 1209.94 L1863.3 1209.94 L1863.88 1209.94 L1864.47 1209.94 L1865.06 1209.94 L1865.64 1209.94 L1866.23 1209.94 L1866.82 1209.94 L1867.4 1209.94 L1867.99 1209.94 L1868.58 1209.94 L1869.16 1209.94 L1869.75 1209.94 L1870.34 1209.94 L1870.92 1209.94 L1871.51 1209.94 L1872.09 1209.94 L1872.68 1209.94 L1873.27 1209.94 L1873.85 1209.94 L1874.44 1209.94 L1875.03 1209.94 L1875.61 1209.94 L1876.2 1209.94 L1876.79 1209.94 L1877.37 1209.94 L1877.96 1209.94 L1878.55 1209.94 L1879.13 1209.94 L1879.72 1209.94 L1880.3 1209.94 L1880.89 1209.94 L1881.48 1209.94 L1882.06 1209.94 L1882.65 1209.94 L1883.24 1209.94 L1883.82 1209.94 L1884.41 1209.94 L1885 1209.94 L1885.58 1209.94 L1886.17 1209.94 L1886.76 1209.94 L1887.34 1209.94 L1887.93 1209.94 L1888.51 1209.94 L1889.1 1209.94 L1889.69 1209.94 L1890.27 1209.94 L1890.86 1209.94 L1891.45 1209.94 L1892.03 1209.94 L1892.62 1209.94 L1893.21 1209.94 L1893.79 1209.94 L1894.38 1209.94 L1894.96 1209.94 L1895.55 1209.94 L1896.14 1209.94 L1896.72 1209.94 L1897.31 1209.94 L1897.9 1209.94 L1898.48 1209.94 L1899.07 1209.94 L1899.66 1209.94 L1900.24 1209.94 L1900.83 1209.94 L1901.42 1209.94 L1902 1209.94 L1902.59 1209.94 L1903.17 1209.94 L1903.76 1209.94 L1904.35 1209.94 L1904.93 1209.94 L1905.52 1209.94 L1906.11 1209.94 L1906.69 1209.94 L1907.28 1209.94 L1907.87 1209.94 L1908.45 1209.94 L1909.04 1209.94 L1909.63 1209.94 L1910.21 1209.94 L1910.8 1209.94 L1911.38 1209.94 L1911.97 1209.94 L1912.56 1209.94 L1913.14 1209.94 L1913.73 1209.94 L1914.32 1209.94 L1914.9 1209.94 L1915.49 1209.94 L1916.08 1209.94 L1916.66 1209.94 L1917.25 1209.94 L1917.83 1209.94 L1918.42 1209.94 L1919.01 1209.94 L1919.59 1209.94 L1920.18 1209.94 L1920.77 1209.94 L1921.35 1209.94 L1921.94 1209.94 L1922.53 1209.94 L1923.11 1209.94 L1923.7 1209.94 L1924.29 1209.94 L1924.87 1209.94 L1925.46 1209.94 L1926.04 1209.94 L1926.63 1209.94 L1927.22 1209.94 L1927.8 1209.94 L1928.39 1209.94 L1928.98 1209.94 L1929.56 1209.94 L1930.15 1209.94 L1930.74 1209.94 L1931.32 1209.94 L1931.91 1209.94 L1932.5 1209.94 L1933.08 1209.94 L1933.67 1209.94 L1934.25 1209.94 L1934.84 1209.94 L1935.43 1209.94 L1936.01 1209.94 L1936.6 1209.94 L1937.19 1209.94 L1937.77 1209.94 L1938.36 1209.94 L1938.95 1209.94 L1939.53 1209.94 L1940.12 1209.94 L1940.71 1209.94 L1941.29 1209.94 L1941.88 1209.94 L1942.46 1209.94 L1943.05 1209.94 L1943.64 1209.94 L1944.22 1209.94 L1944.81 1209.94 L1945.4 1209.94 L1945.98 1209.94 L1946.57 1209.94 L1947.16 1209.94 L1947.74 1209.94 L1948.33 1209.94 L1948.91 1209.94 L1949.5 1209.94 L1950.09 1209.94 L1950.67 1209.94 L1951.26 1209.94 L1951.85 1209.94 L1952.43 1209.94 L1953.02 1209.94 L1953.61 1209.94 L1954.19 1209.94 L1954.78 1209.94 L1955.37 1209.94 L1955.95 1209.94 L1956.54 1209.94 L1957.12 1209.94 L1957.71 1209.94 L1958.3 1209.94 L1958.88 1209.94 L1959.47 1209.94 L1960.06 1209.94 L1960.64 1209.94 L1961.23 1209.94 L1961.82 1209.94 L1962.4 1209.94 L1962.99 1209.94 L1963.58 1209.94 L1964.16 1209.94 L1964.75 1209.94 L1965.33 1209.94 L1965.92 1209.94 L1966.51 1209.94 L1967.09 1209.94 L1967.68 1209.94 L1968.27 1209.94 L1968.85 1209.94 L1969.44 1209.94 L1970.03 1209.94 L1970.61 1209.94 L1971.2 1209.94 L1971.78 1209.94 L1972.37 1209.94 L1972.96 1209.94 L1973.54 1209.94 L1974.13 1209.94 L1974.72 1209.94 L1975.3 1209.94 L1975.89 1209.94 L1976.48 1209.94 L1977.06 1209.94 L1977.65 1209.94 L1978.24 1209.94 L1978.82 1209.94 L1979.41 1209.94 L1979.99 1209.94 L1980.58 1209.94 L1981.17 1209.94 L1981.75 1209.94 L1982.34 1209.94 L1982.93 1209.94 L1983.51 1209.94 L1984.1 1209.94 L1984.69 1209.94 L1985.27 1209.94 L1985.86 1209.94 L1986.45 1209.94 L1987.03 1209.94 L1987.62 1209.94 L1988.2 1209.94 L1988.79 1209.94 L1989.38 1209.94 L1989.96 1209.94 L1990.55 1209.94 L1991.14 1209.94 L1991.72 1209.94 L1992.31 1209.94 L1992.9 1209.94 L1993.48 1209.94 L1994.07 1209.94 L1994.65 1209.94 L1995.24 1209.94 L1995.83 1209.94 L1996.41 1209.94 L1997 1209.94 L1997.59 1209.94 L1998.17 1209.94 L1998.76 1209.94 L1999.35 1209.94 L1999.93 1209.94 L2000.52 1209.94 L2001.11 1209.94 L2001.69 1209.94 L2002.28 1209.94 L2002.86 1209.94 L2003.45 1209.94 L2004.04 1209.94 L2004.62 1209.94 L2005.21 1209.94 L2005.8 1209.94 L2006.38 1209.94 L2006.97 1209.94 L2007.56 1209.94 L2008.14 1209.94 L2008.73 1209.94 L2009.32 1209.94 L2009.9 1209.94 L2010.49 1209.94 L2011.07 1209.94 L2011.66 1209.94 L2012.25 1209.94 L2012.83 1209.94 L2013.42 1209.94 L2014.01 1209.94 L2014.59 1209.94 L2015.18 1209.94 L2015.77 1209.94 L2016.35 1209.94 L2016.94 1209.94 L2017.53 1209.94 L2018.11 1209.94 L2018.7 1209.94 L2019.28 1209.94 L2019.87 1209.94 L2020.46 1209.94 L2021.04 1209.94 L2021.63 1209.94 L2022.22 1209.94 L2022.8 1209.94 L2023.39 1209.94 L2023.98 1209.94 L2024.56 1209.94 L2025.15 1209.94 L2025.73 1209.94 L2026.32 1209.94 L2026.91 1209.94 L2027.49 1209.94 L2028.08 1209.94 L2028.67 1209.94 L2029.25 1209.94 L2029.84 1209.94 L2030.43 1209.94 L2031.01 1209.94 L2031.6 1209.94 L2032.19 1209.94 L2032.77 1209.94 L2033.36 1209.94 L2033.94 1209.94 L2034.53 1209.94 L2035.12 1209.94 L2035.7 1209.94 L2036.29 1209.94 L2036.88 1209.94 L2037.46 1209.94 L2038.05 1209.94 L2038.64 1209.94 L2039.22 1209.94 L2039.81 1209.94 L2040.4 1209.94 L2040.98 1209.94 L2041.57 1209.94 L2042.15 1209.94 L2042.74 1209.94 L2043.33 1209.94 L2043.91 1209.94 L2044.5 1209.94 L2045.09 1209.94 L2045.67 1209.94 L2046.26 1209.94 L2046.85 1209.94 L2047.43 1209.94 L2048.02 1209.94 L2048.6 1209.94 L2049.19 1209.94 L2049.78 1209.94 L2050.36 1209.94 L2050.95 1209.94 L2051.54 1209.94 L2052.12 1209.94 L2052.71 1209.94 L2053.3 1209.94 L2053.88 1209.94 L2054.47 1209.94 L2055.06 1209.94 L2055.64 1209.94 L2056.23 1209.94 L2056.81 1209.94 L2057.4 1209.94 L2057.99 1209.94 L2058.57 1209.94 L2059.16 1209.94 L2059.75 1209.94 L2060.33 1209.94 L2060.92 1209.94 L2061.51 1209.94 L2062.09 1209.94 L2062.68 1209.94 L2063.27 1209.94 L2063.85 1209.94 L2064.44 1209.94 L2065.02 1209.94 L2065.61 1209.94 L2066.2 1209.94 L2066.78 1209.94 L2067.37 1209.94 L2067.96 1209.94 L2068.54 1209.94 L2069.13 1209.94 L2069.72 1209.94 L2070.3 1209.94 L2070.89 1209.94 L2071.48 1209.94 L2072.06 1209.94 L2072.65 1209.94 L2073.23 1209.94 L2073.82 1209.94 L2074.41 1209.94 L2074.99 1209.94 L2075.58 1209.94 L2076.17 1209.94 L2076.75 1209.94 L2077.34 1209.94 L2077.93 1209.94 L2078.51 1209.94 L2079.1 1209.94 L2079.68 1209.94 L2080.27 1209.94 L2080.86 1209.94 L2081.44 1209.94 L2082.03 1209.94 L2082.62 1209.94 L2083.2 1209.94 L2083.79 1209.94 L2084.38 1209.94 L2084.96 1209.94 L2085.55 1209.94 L2086.14 1209.94 L2086.72 1209.94 L2087.31 1209.94 L2087.89 1209.94 L2088.48 1209.94 L2089.07 1209.94 L2089.65 1209.94 L2090.24 1209.94 L2090.83 1209.94 L2091.41 1209.94 L2092 1209.94 L2092.59 1209.94 L2093.17 1209.94 L2093.76 1209.94 L2094.35 1209.94 L2094.93 1209.94 L2095.52 1209.94 L2096.1 1209.94 L2096.69 1209.94 L2097.28 1209.94 L2097.86 1209.94 L2098.45 1209.94 L2099.04 1209.94 L2099.62 1209.94 L2100.21 1209.94 L2100.8 1209.94 L2101.38 1209.94 L2101.97 1209.94 L2102.55 1209.94 L2103.14 1209.94 L2103.73 1209.94 L2104.31 1209.94 L2104.9 1209.94 L2105.49 1209.94 L2106.07 1209.94 L2106.66 1209.94 L2107.25 1209.94 L2107.83 1209.94 L2108.42 1209.94 L2109.01 1209.94 L2109.59 1209.94 L2110.18 1209.94 L2110.76 1209.94 L2111.35 1209.94 L2111.94 1209.94 L2112.52 1209.94 L2113.11 1209.94 L2113.7 1209.94 L2114.28 1209.94 L2114.87 1209.94 L2115.46 1209.94 L2116.04 1209.94 L2116.63 1209.94 L2117.22 1209.94 L2117.8 1209.94 L2118.39 1209.94 L2118.97 1209.94 L2119.56 1209.94 L2120.15 1209.94 L2120.73 1209.94 L2121.32 1209.94 L2121.91 1209.94 L2122.49 1209.94 L2123.08 1209.94 L2123.67 1209.94 L2124.25 1209.94 L2124.84 1209.94 L2125.42 1209.94 L2126.01 1209.94 L2126.6 1209.94 L2127.18 1209.94 L2127.77 1209.94 L2128.36 1209.94 L2128.94 1209.94 L2129.53 1209.94 L2130.12 1209.94 L2130.7 1209.94 L2131.29 1209.94 L2131.88 1209.94 L2132.46 1209.94 L2133.05 1209.94 L2133.63 1209.94 L2134.22 1209.94 L2134.81 1209.94 L2135.39 1209.94 L2135.98 1209.94 L2136.57 1209.94 L2137.15 1209.94 L2137.74 1209.94 L2138.33 1209.94 L2138.91 1209.94 L2139.5 1209.94 L2140.09 1209.94 L2140.67 1209.94 L2141.26 1209.94 L2141.84 1209.94 L2142.43 1209.94 L2143.02 1209.94 L2143.6 1209.94 L2144.19 1209.94 L2144.78 1209.94 L2145.36 1209.94 L2145.95 1209.94 L2146.54 1209.94 L2147.12 1209.94 L2147.71 1209.94 L2148.3 1209.94 L2148.88 1209.94 L2149.47 1209.94 L2150.05 1209.94 L2150.64 1209.94 L2151.23 1209.94 L2151.81 1209.94 L2152.4 1209.94 L2152.99 1209.94 L2153.57 1209.94 L2154.16 1209.94 L2154.75 1209.94 L2155.33 1209.94 L2155.92 1209.94 L2156.5 1209.94 L2157.09 1209.94 L2157.68 1209.94 L2158.26 1209.94 L2158.26 1209.13 L2157.68 1209.13 L2157.09 1209.13 L2156.5 1209.13 L2155.92 1209.13 L2155.33 1209.13 L2154.75 1209.13 L2154.16 1209.13 L2153.57 1209.13 L2152.99 1209.13 L2152.4 1209.13 L2151.81 1209.13 L2151.23 1209.13 L2150.64 1209.13 L2150.05 1209.13 L2149.47 1209.13 L2148.88 1209.13 L2148.3 1209.13 L2147.71 1209.13 L2147.12 1209.13 L2146.54 1209.13 L2145.95 1209.13 L2145.36 1209.13 L2144.78 1209.13 L2144.19 1209.13 L2143.6 1209.13 L2143.02 1209.13 L2142.43 1209.13 L2141.84 1209.13 L2141.26 1209.13 L2140.67 1209.13 L2140.09 1209.13 L2139.5 1209.13 L2138.91 1209.13 L2138.33 1209.13 L2137.74 1209.13 L2137.15 1209.13 L2136.57 1209.13 L2135.98 1209.13 L2135.39 1209.13 L2134.81 1209.13 L2134.22 1209.13 L2133.63 1209.13 L2133.05 1209.13 L2132.46 1209.13 L2131.88 1209.13 L2131.29 1209.13 L2130.7 1209.13 L2130.12 1209.13 L2129.53 1209.13 L2128.94 1209.13 L2128.36 1209.13 L2127.77 1209.13 L2127.18 1209.13 L2126.6 1209.13 L2126.01 1209.13 L2125.42 1209.13 L2124.84 1209.13 L2124.25 1209.13 L2123.67 1209.13 L2123.08 1209.13 L2122.49 1209.13 L2121.91 1209.13 L2121.32 1209.13 L2120.73 1209.13 L2120.15 1209.13 L2119.56 1209.13 L2118.97 1209.13 L2118.39 1209.13 L2117.8 1209.13 L2117.22 1209.13 L2116.63 1209.13 L2116.04 1209.13 L2115.46 1209.13 L2114.87 1209.13 L2114.28 1209.13 L2113.7 1209.13 L2113.11 1209.13 L2112.52 1209.13 L2111.94 1209.13 L2111.35 1209.13 L2110.76 1209.13 L2110.18 1209.13 L2109.59 1209.13 L2109.01 1209.13 L2108.42 1209.13 L2107.83 1209.13 L2107.25 1209.13 L2106.66 1209.13 L2106.07 1209.13 L2105.49 1209.13 L2104.9 1209.13 L2104.31 1209.13 L2103.73 1209.13 L2103.14 1209.13 L2102.55 1209.13 L2101.97 1209.13 L2101.38 1209.13 L2100.8 1209.13 L2100.21 1209.13 L2099.62 1209.13 L2099.04 1209.13 L2098.45 1209.13 L2097.86 1209.13 L2097.28 1209.13 L2096.69 1209.13 L2096.1 1209.13 L2095.52 1209.13 L2094.93 1209.13 L2094.35 1209.13 L2093.76 1209.13 L2093.17 1209.13 L2092.59 1209.13 L2092 1209.13 L2091.41 1209.13 L2090.83 1209.13 L2090.24 1209.13 L2089.65 1209.13 L2089.07 1209.13 L2088.48 1209.13 L2087.89 1209.13 L2087.31 1209.13 L2086.72 1209.13 L2086.14 1209.13 L2085.55 1209.13 L2084.96 1209.13 L2084.38 1209.13 L2083.79 1209.13 L2083.2 1209.13 L2082.62 1209.13 L2082.03 1209.13 L2081.44 1209.13 L2080.86 1209.13 L2080.27 1209.13 L2079.68 1209.13 L2079.1 1209.13 L2078.51 1209.13 L2077.93 1209.13 L2077.34 1209.13 L2076.75 1209.13 L2076.17 1209.13 L2075.58 1209.13 L2074.99 1209.13 L2074.41 1209.13 L2073.82 1209.13 L2073.23 1209.13 L2072.65 1209.13 L2072.06 1209.13 L2071.48 1209.13 L2070.89 1209.13 L2070.3 1209.13 L2069.72 1209.13 L2069.13 1209.13 L2068.54 1209.13 L2067.96 1209.13 L2067.37 1209.13 L2066.78 1209.13 L2066.2 1209.13 L2065.61 1209.13 L2065.02 1209.13 L2064.44 1209.13 L2063.85 1209.13 L2063.27 1209.13 L2062.68 1209.13 L2062.09 1209.13 L2061.51 1209.13 L2060.92 1209.13 L2060.33 1209.13 L2059.75 1209.13 L2059.16 1209.13 L2058.57 1209.13 L2057.99 1209.13 L2057.4 1209.13 L2056.81 1209.13 L2056.23 1209.13 L2055.64 1209.13 L2055.06 1209.13 L2054.47 1209.13 L2053.88 1209.13 L2053.3 1209.13 L2052.71 1209.13 L2052.12 1209.13 L2051.54 1209.13 L2050.95 1209.13 L2050.36 1209.13 L2049.78 1209.13 L2049.19 1209.13 L2048.6 1209.13 L2048.02 1209.13 L2047.43 1209.13 L2046.85 1209.13 L2046.26 1209.13 L2045.67 1209.13 L2045.09 1209.13 L2044.5 1209.13 L2043.91 1209.13 L2043.33 1209.13 L2042.74 1209.13 L2042.15 1209.13 L2041.57 1209.13 L2040.98 1209.13 L2040.4 1209.13 L2039.81 1209.13 L2039.22 1209.13 L2038.64 1209.13 L2038.05 1209.13 L2037.46 1209.13 L2036.88 1209.13 L2036.29 1209.13 L2035.7 1209.13 L2035.12 1209.13 L2034.53 1209.13 L2033.94 1209.13 L2033.36 1209.13 L2032.77 1209.13 L2032.19 1209.13 L2031.6 1209.13 L2031.01 1209.13 L2030.43 1209.13 L2029.84 1209.13 L2029.25 1209.13 L2028.67 1209.13 L2028.08 1209.13 L2027.49 1209.13 L2026.91 1209.13 L2026.32 1209.13 L2025.73 1209.13 L2025.15 1209.13 L2024.56 1209.13 L2023.98 1209.13 L2023.39 1209.13 L2022.8 1209.13 L2022.22 1209.13 L2021.63 1209.13 L2021.04 1209.13 L2020.46 1209.13 L2019.87 1209.13 L2019.28 1209.13 L2018.7 1209.13 L2018.11 1209.13 L2017.53 1209.13 L2016.94 1209.13 L2016.35 1209.13 L2015.77 1209.13 L2015.18 1209.13 L2014.59 1209.13 L2014.01 1209.13 L2013.42 1209.13 L2012.83 1209.13 L2012.25 1209.13 L2011.66 1209.13 L2011.07 1209.13 L2010.49 1209.13 L2009.9 1209.13 L2009.32 1209.13 L2008.73 1209.13 L2008.14 1209.13 L2007.56 1209.13 L2006.97 1209.13 L2006.38 1209.13 L2005.8 1209.13 L2005.21 1209.13 L2004.62 1209.13 L2004.04 1209.13 L2003.45 1209.13 L2002.86 1209.13 L2002.28 1209.13 L2001.69 1209.13 L2001.11 1209.13 L2000.52 1209.13 L1999.93 1209.13 L1999.35 1209.13 L1998.76 1209.13 L1998.17 1209.13 L1997.59 1209.13 L1997 1209.13 L1996.41 1209.13 L1995.83 1209.13 L1995.24 1209.13 L1994.65 1209.13 L1994.07 1209.13 L1993.48 1209.13 L1992.9 1209.13 L1992.31 1209.13 L1991.72 1209.13 L1991.14 1209.13 L1990.55 1209.13 L1989.96 1209.13 L1989.38 1209.13 L1988.79 1209.13 L1988.2 1209.13 L1987.62 1209.13 L1987.03 1209.13 L1986.45 1209.13 L1985.86 1209.13 L1985.27 1209.13 L1984.69 1209.13 L1984.1 1209.13 L1983.51 1209.13 L1982.93 1209.13 L1982.34 1209.13 L1981.75 1209.13 L1981.17 1209.13 L1980.58 1209.13 L1979.99 1209.13 L1979.41 1209.13 L1978.82 1209.13 L1978.24 1209.13 L1977.65 1209.13 L1977.06 1209.13 L1976.48 1209.13 L1975.89 1209.13 L1975.3 1209.13 L1974.72 1209.13 L1974.13 1209.13 L1973.54 1209.13 L1972.96 1209.13 L1972.37 1209.13 L1971.78 1209.13 L1971.2 1209.13 L1970.61 1209.13 L1970.03 1209.13 L1969.44 1209.13 L1968.85 1209.13 L1968.27 1209.13 L1967.68 1209.13 L1967.09 1209.13 L1966.51 1209.13 L1965.92 1209.13 L1965.33 1209.13 L1964.75 1209.13 L1964.16 1209.13 L1963.58 1209.13 L1962.99 1209.13 L1962.4 1209.13 L1961.82 1209.13 L1961.23 1209.13 L1960.64 1209.13 L1960.06 1209.13 L1959.47 1209.13 L1958.88 1209.13 L1958.3 1209.13 L1957.71 1209.13 L1957.12 1209.13 L1956.54 1209.13 L1955.95 1209.13 L1955.37 1209.13 L1954.78 1209.13 L1954.19 1209.13 L1953.61 1209.13 L1953.02 1209.13 L1952.43 1209.13 L1951.85 1209.13 L1951.26 1209.13 L1950.67 1209.13 L1950.09 1209.13 L1949.5 1209.13 L1948.91 1209.13 L1948.33 1209.13 L1947.74 1209.13 L1947.16 1209.13 L1946.57 1209.13 L1945.98 1209.13 L1945.4 1209.13 L1944.81 1209.13 L1944.22 1209.13 L1943.64 1209.13 L1943.05 1209.13 L1942.46 1209.13 L1941.88 1209.13 L1941.29 1209.13 L1940.71 1209.13 L1940.12 1209.13 L1939.53 1209.13 L1938.95 1209.13 L1938.36 1209.13 L1937.77 1209.13 L1937.19 1209.13 L1936.6 1209.13 L1936.01 1209.13 L1935.43 1209.13 L1934.84 1209.13 L1934.25 1209.13 L1933.67 1209.13 L1933.08 1209.13 L1932.5 1209.13 L1931.91 1209.13 L1931.32 1209.13 L1930.74 1209.13 L1930.15 1209.13 L1929.56 1209.13 L1928.98 1209.13 L1928.39 1209.13 L1927.8 1209.13 L1927.22 1209.13 L1926.63 1209.13 L1926.04 1209.13 L1925.46 1209.13 L1924.87 1209.13 L1924.29 1209.13 L1923.7 1209.13 L1923.11 1209.13 L1922.53 1209.13 L1921.94 1209.13 L1921.35 1209.13 L1920.77 1209.13 L1920.18 1209.13 L1919.59 1209.13 L1919.01 1209.13 L1918.42 1209.13 L1917.83 1209.13 L1917.25 1209.13 L1916.66 1209.13 L1916.08 1209.13 L1915.49 1209.13 L1914.9 1209.13 L1914.32 1209.13 L1913.73 1209.13 L1913.14 1209.13 L1912.56 1209.13 L1911.97 1209.13 L1911.38 1209.13 L1910.8 1209.13 L1910.21 1209.13 L1909.63 1209.13 L1909.04 1209.13 L1908.45 1209.13 L1907.87 1209.13 L1907.28 1209.13 L1906.69 1209.13 L1906.11 1209.13 L1905.52 1209.13 L1904.93 1209.13 L1904.35 1209.13 L1903.76 1209.13 L1903.17 1209.13 L1902.59 1209.13 L1902 1209.13 L1901.42 1209.13 L1900.83 1209.13 L1900.24 1209.13 L1899.66 1209.13 L1899.07 1209.13 L1898.48 1209.13 L1897.9 1209.13 L1897.31 1209.13 L1896.72 1209.13 L1896.14 1209.13 L1895.55 1209.13 L1894.96 1209.13 L1894.38 1209.13 L1893.79 1209.13 L1893.21 1209.13 L1892.62 1209.13 L1892.03 1209.13 L1891.45 1209.13 L1890.86 1209.13 L1890.27 1209.13 L1889.69 1209.13 L1889.1 1209.13 L1888.51 1209.13 L1887.93 1209.13 L1887.34 1209.13 L1886.76 1209.13 L1886.17 1209.13 L1885.58 1209.13 L1885 1209.13 L1884.41 1209.13 L1883.82 1209.13 L1883.24 1209.13 L1882.65 1209.13 L1882.06 1209.13 L1881.48 1209.13 L1880.89 1209.13 L1880.3 1209.13 L1879.72 1209.13 L1879.13 1209.13 L1878.55 1209.13 L1877.96 1209.13 L1877.37 1209.13 L1876.79 1209.13 L1876.2 1209.13 L1875.61 1209.13 L1875.03 1209.13 L1874.44 1209.13 L1873.85 1209.13 L1873.27 1209.13 L1872.68 1209.13 L1872.09 1209.13 L1871.51 1209.13 L1870.92 1209.13 L1870.34 1209.13 L1869.75 1209.13 L1869.16 1209.13 L1868.58 1209.13 L1867.99 1209.13 L1867.4 1209.13 L1866.82 1209.13 L1866.23 1209.13 L1865.64 1209.13 L1865.06 1209.13 L1864.47 1209.13 L1863.88 1209.13 L1863.3 1209.13 L1862.71 1209.13 L1862.13 1209.13 L1861.54 1209.13 L1860.95 1209.13 L1860.37 1209.13 L1859.78 1209.13 L1859.19 1209.13 L1858.61 1209.13 L1858.02 1209.13 L1857.43 1209.13 L1856.85 1209.13 L1856.26 1209.13 L1855.68 1209.13 L1855.09 1209.13 L1854.5 1209.13 L1853.92 1209.13 L1853.33 1209.13 L1852.74 1209.13 L1852.16 1209.13 L1851.57 1209.13 L1850.98 1209.13 L1850.4 1209.13 L1849.81 1209.13 L1849.22 1209.13 L1848.64 1209.13 L1848.05 1209.13 L1847.47 1209.13 L1846.88 1209.13 L1846.29 1209.13 L1845.71 1209.13 L1845.12 1209.13 L1844.53 1209.13 L1843.95 1209.13 L1843.36 1209.13 L1842.77 1209.13 L1842.19 1209.13 L1841.6 1209.13 L1841.01 1209.13 L1840.43 1209.13 L1839.84 1209.13 L1839.26 1209.13 L1838.67 1209.13 L1838.08 1209.13 L1837.5 1209.13 L1836.91 1209.13 L1836.32 1209.13 L1835.74 1209.13 L1835.15 1209.13 L1834.56 1209.13 L1833.98 1209.13 L1833.39 1209.13 L1832.81 1209.13 L1832.22 1209.13 L1831.63 1209.13 L1831.05 1209.13 L1830.46 1209.13 L1829.87 1209.13 L1829.29 1209.13 L1828.7 1209.13 L1828.11 1209.13 L1827.53 1209.13 L1826.94 1209.13 L1826.35 1209.13 L1825.77 1209.13 L1825.18 1209.13 L1824.6 1209.13 L1824.01 1209.13 L1823.42 1209.13 L1822.84 1209.13 L1822.25 1209.13 L1821.66 1209.13 L1821.08 1209.13 L1820.49 1209.13 L1819.9 1209.13 L1819.32 1209.13 L1818.73 1209.13 L1818.14 1209.13 L1817.56 1209.13 L1816.97 1209.13 L1816.39 1209.13 L1815.8 1209.13 L1815.21 1209.13 L1814.63 1209.13 L1814.04 1209.13 L1813.45 1209.13 L1812.87 1209.13 L1812.28 1209.13 L1811.69 1209.13 L1811.11 1209.13 L1810.52 1209.13 L1809.94 1209.13 L1809.35 1209.13 L1808.76 1209.13 L1808.18 1209.13 L1807.59 1209.13 L1807 1209.13 L1806.42 1209.13 L1805.83 1209.13 L1805.24 1209.13 L1804.66 1209.13 L1804.07 1209.13 L1803.48 1209.13 L1802.9 1209.13 L1802.31 1209.13 L1801.73 1209.13 L1801.14 1209.13 L1800.55 1209.13 L1799.97 1209.13 L1799.38 1209.13 L1798.79 1209.13 L1798.21 1209.13 L1797.62 1209.13 L1797.03 1209.13 L1796.45 1209.13 L1795.86 1209.13 L1795.27 1209.13 L1794.69 1209.13 L1794.1 1209.13 L1793.52 1209.13 L1792.93 1209.13 L1792.34 1209.13 L1791.76 1209.13 L1791.17 1209.13 L1790.58 1209.13 L1790 1209.13 L1789.41 1209.13 L1788.82 1209.13 L1788.24 1209.13 L1787.65 1209.13 L1787.06 1209.13 L1786.48 1209.13 L1785.89 1209.13 L1785.31 1209.13 L1784.72 1209.13 L1784.13 1209.13 L1783.55 1209.13 L1782.96 1209.13 L1782.37 1209.13 L1781.79 1209.13 L1781.2 1209.13 L1780.61 1209.13 L1780.03 1209.13 L1779.44 1209.13 L1778.86 1209.13 L1778.27 1209.13 L1777.68 1209.13 L1777.1 1209.13 L1776.51 1209.13 L1775.92 1209.13 L1775.34 1209.13 L1774.75 1209.13 L1774.16 1209.13 L1773.58 1209.13 L1772.99 1209.13 L1772.4 1209.13 L1771.82 1209.13 L1771.23 1209.13 L1770.65 1209.13 L1770.06 1209.13 L1769.47 1209.13 L1768.89 1209.13 L1768.3 1209.13 L1767.71 1209.13 L1767.13 1209.13 L1766.54 1209.13 L1765.95 1209.13 L1765.37 1209.13 L1764.78 1209.13 L1764.19 1209.13 L1763.61 1209.13 L1763.02 1209.13 L1762.44 1209.13 L1761.85 1209.13 L1761.26 1209.13 L1760.68 1209.13 L1760.09 1209.13 L1759.5 1209.13 L1758.92 1209.13 L1758.33 1209.13 L1757.74 1209.13 L1757.16 1209.13 L1756.57 1209.13 L1755.99 1209.13 L1755.4 1209.13 L1754.81 1209.13 L1754.23 1209.13 L1753.64 1209.13 L1753.05 1209.13 L1752.47 1209.13 L1751.88 1209.13 L1751.29 1209.13 L1750.71 1209.13 L1750.12 1209.13 L1749.53 1209.13 L1748.95 1209.13 L1748.36 1209.13 L1747.78 1209.13 L1747.19 1209.13 L1746.6 1209.13 L1746.02 1209.13 L1745.43 1209.13 L1744.84 1209.13 L1744.26 1209.13 L1743.67 1209.13 L1743.08 1209.13 L1742.5 1209.13 L1741.91 1209.13 L1741.32 1209.13 L1740.74 1209.13 L1740.15 1209.13 L1739.57 1209.13 L1738.98 1209.13 L1738.39 1209.13 L1737.81 1209.13 L1737.22 1209.13 L1736.63 1209.13 L1736.05 1209.13 L1735.46 1209.13 L1734.87 1209.13 L1734.29 1209.13 L1733.7 1209.13 L1733.11 1209.13 L1732.53 1209.13 L1731.94 1209.13 L1731.36 1209.13 L1730.77 1209.13 L1730.18 1209.13 L1729.6 1209.13 L1729.01 1209.13 L1728.42 1209.13 L1727.84 1209.13 L1727.25 1209.13 L1726.66 1209.13 L1726.08 1209.13 L1725.49 1209.13 L1724.91 1209.13 L1724.32 1209.13 L1723.73 1209.13 L1723.15 1209.13 L1722.56 1209.13 L1721.97 1209.13 L1721.39 1209.13 L1720.8 1209.13 L1720.21 1209.13 L1719.63 1209.13 L1719.04 1209.13 L1718.45 1209.13 L1717.87 1209.13 L1717.28 1209.13 L1716.7 1209.13 L1716.11 1209.13 L1715.52 1209.13 L1714.94 1209.13 L1714.35 1209.13 L1713.76 1209.13 L1713.18 1209.13 L1712.59 1209.13 L1712 1209.13 L1711.42 1209.13 L1710.83 1209.13 L1710.24 1209.13 L1709.66 1209.13 L1709.07 1209.13 L1708.49 1209.13 L1707.9 1209.13 L1707.31 1209.13 L1706.73 1209.13 L1706.14 1209.13 L1705.55 1209.13 L1704.97 1209.13 L1704.38 1209.13 L1703.79 1209.13 L1703.21 1209.13 L1702.62 1209.13 L1702.04 1209.13 L1701.45 1209.13 L1700.86 1209.13 L1700.28 1209.13 L1699.69 1209.13 L1699.1 1209.13 L1698.52 1209.13 L1697.93 1209.13 L1697.34 1209.13 L1696.76 1209.13 L1696.17 1209.13 L1695.58 1209.13 L1695 1209.13 L1694.41 1209.13 L1693.83 1209.13 L1693.24 1209.13 L1692.65 1209.13 L1692.07 1209.13 L1691.48 1209.13 L1690.89 1209.13 L1690.31 1209.13 L1689.72 1209.13 L1689.13 1209.13 L1688.55 1209.13 L1687.96 1209.13 L1687.37 1209.13 L1686.79 1209.13 L1686.2 1209.13 L1685.62 1209.13 L1685.03 1209.13 L1684.44 1209.13 L1683.86 1209.13 L1683.27 1209.13 L1682.68 1209.13 L1682.1 1209.13 L1681.51 1209.13 L1680.92 1209.13 L1680.34 1209.13 L1679.75 1209.13 L1679.17 1209.13 L1678.58 1209.13 L1677.99 1209.13 L1677.41 1209.13 L1676.82 1209.13 L1676.23 1209.13 L1675.65 1209.13 L1675.06 1209.13 L1674.47 1209.13 L1673.89 1209.13 L1673.3 1209.13 L1672.71 1209.13 L1672.13 1209.13 L1671.54 1209.13 L1670.96 1209.13 L1670.37 1209.13 L1669.78 1209.13 L1669.2 1209.13 L1668.61 1209.13 L1668.02 1209.13 L1667.44 1209.13 L1666.85 1209.13 L1666.26 1209.13 L1665.68 1209.13 L1665.09 1209.13 L1664.5 1209.13 L1663.92 1209.13 L1663.33 1209.13 L1662.75 1209.13 L1662.16 1209.13 L1661.57 1209.13 L1660.99 1209.13 L1660.4 1209.13 L1659.81 1209.13 L1659.23 1209.13 L1658.64 1209.13 L1658.05 1209.13 L1657.47 1209.13 L1656.88 1209.13 L1656.29 1209.13 L1655.71 1209.13 L1655.12 1209.13 L1654.54 1209.13 L1653.95 1209.13 L1653.36 1209.13 L1652.78 1209.13 L1652.19 1209.13 L1651.6 1209.13 L1651.02 1209.13 L1650.43 1209.13 L1649.84 1209.13 L1649.26 1209.13 L1648.67 1209.13 L1648.09 1209.13 L1647.5 1209.13 L1646.91 1209.13 L1646.33 1209.13 L1645.74 1209.13 L1645.15 1209.13 L1644.57 1209.13 L1643.98 1209.13 L1643.39 1209.13 L1642.81 1209.13 L1642.22 1209.13 L1641.63 1209.13 L1641.05 1209.13 L1640.46 1209.13 L1639.88 1209.13 L1639.29 1209.13 L1638.7 1209.13 L1638.12 1209.13 L1637.53 1209.13 L1636.94 1209.13 L1636.36 1209.13 L1635.77 1209.13 L1635.18 1209.13 L1634.6 1209.13 L1634.01 1209.13 L1633.42 1209.13 L1632.84 1209.13 L1632.25 1209.13 L1631.67 1209.13 L1631.08 1209.13 L1630.49 1209.13 L1629.91 1209.13 L1629.32 1209.13 L1628.73 1209.13 L1628.15 1209.13 L1627.56 1209.13 L1626.97 1209.13 L1626.39 1209.13 L1625.8 1209.13 L1625.22 1209.13 L1624.63 1209.13 L1624.04 1209.13 L1623.46 1209.13 L1622.87 1209.13 L1622.28 1209.13 L1621.7 1209.13 L1621.11 1209.13 L1620.52 1209.13 L1619.94 1209.13 L1619.35 1209.13 L1618.76 1209.13 L1618.18 1209.13 L1617.59 1209.13 L1617.01 1209.13 L1616.42 1209.13 L1615.83 1209.13 L1615.25 1209.13 L1614.66 1209.13 L1614.07 1209.13 L1613.49 1209.13 L1612.9 1209.13 L1612.31 1209.13 L1611.73 1209.13 L1611.14 1209.13 L1610.55 1209.13 L1609.97 1209.13 L1609.38 1209.13 L1608.8 1209.13 L1608.21 1209.13 L1607.62 1209.13 L1607.04 1209.13 L1606.45 1209.13 L1605.86 1209.13 L1605.28 1209.13 L1604.69 1209.13 L1604.1 1209.13 L1603.52 1209.13 L1602.93 1209.13 L1602.34 1209.13 L1601.76 1209.13 L1601.17 1209.13 L1600.59 1209.13 L1600 1209.13 L1599.41 1209.13 L1598.83 1209.13 L1598.24 1209.13 L1597.65 1209.13 L1597.07 1209.13 L1596.48 1209.13 L1595.89 1209.13 L1595.31 1209.13 L1594.72 1209.13 L1594.14 1209.13 L1593.55 1209.13 L1592.96 1209.13 L1592.38 1209.13 L1591.79 1209.13 L1591.2 1209.13 L1590.62 1209.13 L1590.03 1209.13 L1589.44 1209.13 L1588.86 1209.13 L1588.27 1209.13 L1587.68 1209.13 L1587.1 1209.13 L1586.51 1209.13 L1585.93 1209.13 L1585.34 1209.13 L1584.75 1209.13 L1584.17 1209.13 L1583.58 1209.13 L1582.99 1209.13 L1582.41 1209.13 L1581.82 1209.13 L1581.23 1209.13 L1580.65 1209.13 L1580.06 1209.13 L1579.47 1209.13 L1578.89 1209.13 L1578.3 1209.13 L1577.72 1209.13 L1577.13 1209.13 L1576.54 1209.13 L1575.96 1209.13 L1575.37 1209.13 L1574.78 1209.13 L1574.2 1209.13 L1573.61 1209.13 L1573.02 1209.13 L1572.44 1209.13 L1571.85 1209.13 L1571.27 1209.13 L1570.68 1209.13 L1570.09 1209.13 L1569.51 1209.13 L1568.92 1209.13 L1568.33 1209.13 L1567.75 1209.13 L1567.16 1209.13 L1566.57 1209.13 L1565.99 1209.13 L1565.4 1209.13 L1564.81 1209.13 L1564.23 1209.13 L1563.64 1209.13 L1563.06 1209.13 L1562.47 1209.13 L1561.88 1209.13 L1561.3 1209.13 L1560.71 1209.13 L1560.12 1209.13 L1559.54 1209.13 L1558.95 1209.13 L1558.36 1209.13 L1557.78 1209.13 L1557.19 1209.13 L1556.6 1209.13 L1556.02 1209.13 L1555.43 1209.13 L1554.85 1209.13 L1554.26 1209.13 L1553.67 1209.13 L1553.09 1209.13 L1552.5 1209.13 L1551.91 1209.13 L1551.33 1209.13 L1550.74 1209.13 L1550.15 1209.13 L1549.57 1209.13 L1548.98 1209.13 L1548.4 1209.13 L1547.81 1209.13 L1547.22 1209.13 L1546.64 1209.13 L1546.05 1209.13 L1545.46 1209.13 L1544.88 1209.13 L1544.29 1209.13 L1543.7 1209.13 L1543.12 1209.13 L1542.53 1209.13 L1541.94 1209.13 L1541.36 1209.13 L1540.77 1209.13 L1540.19 1209.13 L1539.6 1209.13 L1539.01 1209.13 L1538.43 1209.13 L1537.84 1209.13 L1537.25 1209.13 L1536.67 1209.13 L1536.08 1209.13 L1535.49 1209.13 L1534.91 1209.13 L1534.32 1209.13 L1533.73 1209.13 L1533.15 1209.13 L1532.56 1209.13 L1531.98 1209.13 L1531.39 1209.13 L1530.8 1209.13 L1530.22 1209.13 L1529.63 1209.13 L1529.04 1209.13 L1528.46 1209.13 L1527.87 1209.13 L1527.28 1209.13 L1526.7 1209.13 L1526.11 1209.13 L1525.52 1209.13 L1524.94 1209.13 L1524.35 1209.13 L1523.77 1209.13 L1523.18 1209.13 L1522.59 1209.13 L1522.01 1209.13 L1521.42 1209.13 L1520.83 1209.13 L1520.25 1209.13 L1519.66 1209.13 L1519.07 1209.13 L1518.49 1209.13 L1517.9 1209.13 L1517.32 1209.13 L1516.73 1209.13 L1516.14 1209.13 L1515.56 1209.13 L1514.97 1209.13 L1514.38 1209.13 L1513.8 1209.13 L1513.21 1209.13 L1512.62 1209.13 L1512.04 1209.13 L1511.45 1209.13 L1510.86 1209.13 L1510.28 1209.13 L1509.69 1209.13 L1509.11 1209.13 L1508.52 1209.13 L1507.93 1209.13 L1507.35 1209.13 L1506.76 1209.13 L1506.17 1209.13 L1505.59 1209.13 L1505 1209.13 L1504.41 1209.13 L1503.83 1209.13 L1503.24 1209.13 L1502.65 1209.13 L1502.07 1209.13 L1501.48 1209.13 L1500.9 1209.13 L1500.31 1209.13 L1499.72 1209.13 L1499.14 1209.13 L1498.55 1209.13 L1497.96 1209.13 L1497.38 1209.13 L1496.79 1209.13 L1496.2 1209.13 L1495.62 1209.13 L1495.03 1209.13 L1494.45 1209.13 L1493.86 1209.13 L1493.27 1209.13 L1492.69 1209.13 L1492.1 1209.13 L1491.51 1209.13 L1490.93 1209.13 L1490.34 1209.13 L1489.75 1209.13 L1489.17 1209.13 L1488.58 1209.13 L1487.99 1209.13 L1487.41 1209.13 L1486.82 1209.13 L1486.24 1209.13 L1485.65 1209.13 L1485.06 1209.13 L1484.48 1209.13 L1483.89 1209.13 L1483.3 1209.13 L1482.72 1209.13 L1482.13 1209.13 L1481.54 1209.13 L1480.96 1209.13 L1480.37 1209.13 L1479.78 1209.13 L1479.2 1209.13 L1478.61 1209.13 L1478.03 1209.13 L1477.44 1209.13 L1476.85 1209.13 L1476.27 1209.13 L1475.68 1209.13 L1475.09 1209.13 L1474.51 1209.13 L1473.92 1209.13 L1473.33 1209.13 L1472.75 1209.13 L1472.16 1209.13 L1471.57 1209.13 L1470.99 1209.13 L1470.4 1209.13 L1469.82 1209.13 L1469.23 1209.13 L1468.64 1209.13 L1468.06 1209.13 L1467.47 1209.13 L1466.88 1209.13 L1466.3 1209.13 L1465.71 1209.13 L1465.12 1209.13 L1464.54 1209.13 L1463.95 1209.13 L1463.37 1209.13 L1462.78 1209.13 L1462.19 1209.13 L1461.61 1209.13 L1461.02 1209.13 L1460.43 1209.13 L1459.85 1209.13 L1459.26 1209.13 L1458.67 1209.13 L1458.09 1209.13 L1457.5 1209.13 L1456.91 1209.13 L1456.33 1209.13 L1455.74 1209.13 L1455.16 1209.13 L1454.57 1209.13 L1453.98 1209.13 L1453.4 1209.13 L1452.81 1209.13 L1452.22 1209.13 L1451.64 1209.13 L1451.05 1209.13 L1450.46 1209.13 L1449.88 1209.13 L1449.29 1209.13 L1448.7 1209.13 L1448.12 1209.13 L1447.53 1209.13 L1446.95 1209.13 L1446.36 1209.13 L1445.77 1209.13 L1445.19 1209.13 L1444.6 1209.13 L1444.01 1209.13 L1443.43 1209.13 L1442.84 1209.13 L1442.25 1209.13 L1441.67 1209.13 L1441.08 1209.13 L1440.5 1209.13 L1439.91 1209.13 L1439.32 1209.13 L1438.74 1209.13 L1438.15 1209.13 L1437.56 1209.13 L1436.98 1209.13 L1436.39 1209.13 L1435.8 1209.13 L1435.22 1209.13 L1434.63 1209.13 L1434.04 1209.13 L1433.46 1209.13 L1432.87 1209.13 L1432.29 1209.13 L1431.7 1209.13 L1431.11 1209.13 L1430.53 1209.13 L1429.94 1209.13 L1429.35 1209.13 L1428.77 1209.13 L1428.18 1209.13 L1427.59 1209.13 L1427.01 1209.13 L1426.42 1209.13 L1425.83 1209.13 L1425.25 1209.13 L1424.66 1209.13 L1424.08 1209.13 L1423.49 1209.13 L1422.9 1209.13 L1422.32 1209.13 L1421.73 1209.13 L1421.14 1209.13 L1420.56 1209.13 L1419.97 1209.13 L1419.38 1209.13 L1418.8 1209.13 L1418.21 1209.13 L1417.63 1209.13 L1417.04 1209.13 L1416.45 1209.13 L1415.87 1209.13 L1415.28 1209.13 L1414.69 1209.13 L1414.11 1209.13 L1413.52 1209.13 L1412.93 1209.13 L1412.35 1209.13 L1411.76 1209.13 L1411.17 1209.13 L1410.59 1209.13 L1410 1209.13 L1409.42 1209.13 L1408.83 1209.13 L1408.24 1209.13 L1407.66 1209.13 L1407.07 1209.13 L1406.48 1209.13 L1405.9 1209.13 L1405.31 1209.13 L1404.72 1209.13 L1404.14 1209.13 L1403.55 1209.13 L1402.96 1209.13 L1402.38 1209.13 L1401.79 1209.13 L1401.21 1209.13 L1400.62 1209.13 L1400.03 1209.13 L1399.45 1209.13 L1398.86 1209.13 L1398.27 1209.13 L1397.69 1209.13 L1397.1 1209.13 L1396.51 1209.13 L1395.93 1209.13 L1395.34 1209.13 L1394.75 1209.13 L1394.17 1209.13 L1393.58 1209.13 L1393 1209.13 L1392.41 1209.13 L1391.82 1209.13 L1391.24 1209.13 L1390.65 1209.13 L1390.06 1209.13 L1389.48 1209.13 L1388.89 1209.13 L1388.3 1209.13 L1387.72 1209.13 L1387.13 1209.13 L1386.55 1209.13 L1385.96 1209.13 L1385.37 1209.13 L1384.79 1209.13 L1384.2 1209.13 L1383.61 1209.13 L1383.03 1209.13 L1382.44 1209.13 L1381.85 1209.13 L1381.27 1209.13 L1380.68 1209.13 L1380.09 1209.13 L1379.51 1209.13 L1378.92 1209.13 L1378.34 1209.13 L1377.75 1209.13 L1377.16 1209.13 L1376.58 1209.13 L1375.99 1209.13 L1375.4 1209.13 L1374.82 1209.13 L1374.23 1209.13 L1373.64 1209.13 L1373.06 1209.13 L1372.47 1209.13 L1371.88 1209.13 L1371.3 1209.13 L1370.71 1209.13 L1370.13 1209.13 L1369.54 1209.13 L1368.95 1209.13 L1368.37 1209.13 L1367.78 1209.13 L1367.19 1209.13 L1366.61 1209.13 L1366.02 1209.13 L1365.43 1209.13 L1364.85 1209.13 L1364.26 1209.13 L1363.68 1209.13 L1363.09 1209.13 L1362.5 1209.13 L1361.92 1209.13 L1361.33 1209.13 L1360.74 1209.13 L1360.16 1209.13 L1359.57 1209.13 L1358.98 1209.13 L1358.4 1209.13 L1357.81 1209.13 L1357.22 1209.13 L1356.64 1209.13 L1356.05 1209.13 L1355.47 1209.13 L1354.88 1209.13 L1354.29 1209.13 L1353.71 1209.13 L1353.12 1209.13 L1352.53 1209.13 L1351.95 1209.13 L1351.36 1209.13 L1350.77 1209.13 L1350.19 1209.13 L1349.6 1209.13 L1349.01 1209.13 L1348.43 1209.13 L1347.84 1209.13 L1347.26 1209.13 L1346.67 1209.13 L1346.08 1209.13 L1345.5 1209.13 L1344.91 1209.13 L1344.32 1209.13 L1343.74 1209.13 L1343.15 1209.13 L1342.56 1209.13 L1341.98 1209.13 L1341.39 1209.13 L1340.8 1209.13 L1340.22 1209.13 L1339.63 1209.13 L1339.05 1209.13 L1338.46 1209.13 L1337.87 1209.13 L1337.29 1209.13 L1336.7 1209.13 L1336.11 1209.13 L1335.53 1209.13 L1334.94 1209.13 L1334.35 1209.13 L1333.77 1209.13 L1333.18 1209.13 L1332.6 1209.13 L1332.01 1209.13 L1331.42 1209.13 L1330.84 1209.13 L1330.25 1209.13 L1329.66 1209.13 L1329.08 1209.13 L1328.49 1209.13 L1327.9 1209.13 L1327.32 1209.13 L1326.73 1209.13 L1326.14 1209.13 L1325.56 1209.13 L1324.97 1209.13 L1324.39 1209.13 L1323.8 1209.13 L1323.21 1209.13 L1322.63 1209.13 L1322.04 1209.13 L1321.45 1209.13 L1320.87 1209.13 L1320.28 1209.13 L1319.69 1209.13 L1319.11 1209.13 L1318.52 1209.13 L1317.93 1209.13 L1317.35 1209.13 L1316.76 1209.13 L1316.18 1209.13 L1315.59 1209.13 L1315 1209.13 L1314.42 1209.13 L1313.83 1209.13 L1313.24 1209.13 L1312.66 1209.13 L1312.07 1209.13 L1311.48 1209.13 L1310.9 1209.13 L1310.31 1209.13 L1309.73 1209.13 L1309.14 1209.13 L1308.55 1209.13 L1307.97 1209.13 L1307.38 1209.13 L1306.79 1209.13 L1306.21 1209.13 L1305.62 1209.13 L1305.03 1209.13 L1304.45 1209.13 L1303.86 1209.13 L1303.27 1209.13 L1302.69 1209.13 L1302.1 1209.13 L1301.52 1209.13 L1300.93 1209.13 L1300.34 1209.13 L1299.76 1209.13 L1299.17 1209.13 L1298.58 1209.13 L1298 1209.13 L1297.41 1209.13 L1296.82 1209.13 L1296.24 1209.13 L1295.65 1209.13 L1295.06 1209.13 L1294.48 1209.13 L1293.89 1209.13 L1293.31 1209.13 L1292.72 1209.13 L1292.13 1209.13 L1291.55 1209.13 L1290.96 1209.13 L1290.37 1209.13 L1289.79 1209.13 L1289.2 1209.13 L1288.61 1209.13 L1288.03 1209.13 L1287.44 1209.13 L1286.86 1209.13 L1286.27 1209.13 L1285.68 1209.13 L1285.1 1209.13 L1284.51 1209.13 L1283.92 1209.13 L1283.34 1209.13 L1282.75 1209.13 L1282.16 1209.13 L1281.58 1209.13 L1280.99 1209.13 L1280.4 1209.13 L1279.82 1209.13 L1279.23 1209.13 L1278.65 1209.13 L1278.06 1209.13 L1277.47 1209.13 L1276.89 1209.13 L1276.3 1209.13 L1275.71 1209.13 L1275.13 1209.13 L1274.54 1209.13 L1273.95 1209.13 L1273.37 1209.13 L1272.78 1209.13 L1272.19 1209.13 L1271.61 1209.13 L1271.02 1209.13 L1270.44 1209.13 L1269.85 1209.13 L1269.26 1209.13 L1268.68 1209.13 L1268.09 1209.13 L1267.5 1209.13 L1266.92 1209.13 L1266.33 1209.13 L1265.74 1209.13 L1265.16 1209.13 L1264.57 1209.13 L1263.98 1209.13 L1263.4 1209.13 L1262.81 1209.13 L1262.23 1209.13 L1261.64 1209.13 L1261.05 1209.13 L1260.47 1209.13 L1259.88 1209.13 L1259.29 1209.13 L1258.71 1209.13 L1258.12 1209.13 L1257.53 1209.13 L1256.95 1209.13 L1256.36 1209.13 L1255.78 1209.13 L1255.19 1209.13 L1254.6 1209.13 L1254.02 1209.13 L1253.43 1209.13 L1252.84 1209.13 L1252.26 1209.13 L1251.67 1209.13 L1251.08 1209.13 L1250.5 1209.13 L1249.91 1209.13 L1249.32 1209.13 L1248.74 1209.13 L1248.15 1209.13 L1247.57 1209.13 L1246.98 1209.13 L1246.39 1209.13 L1245.81 1209.13 L1245.22 1209.13 L1244.63 1209.13 L1244.05 1209.13 L1243.46 1209.13 L1242.87 1209.13 L1242.29 1209.13 L1241.7 1209.13 L1241.11 1209.13 L1240.53 1209.13 L1239.94 1209.13 L1239.36 1209.13 L1238.77 1209.13 L1238.18 1209.13 L1237.6 1209.13 L1237.01 1209.13 L1236.42 1209.13 L1235.84 1209.13 L1235.25 1209.13 L1234.66 1209.13 L1234.08 1209.13 L1233.49 1209.13 L1232.91 1209.13 L1232.32 1209.13 L1231.73 1209.13 L1231.15 1209.13 L1230.56 1209.13 L1229.97 1209.13 L1229.39 1209.13 L1228.8 1209.13 L1228.21 1209.13 L1227.63 1209.13 L1227.04 1209.13 L1226.45 1209.13 L1225.87 1209.13 L1225.28 1209.13 L1224.7 1209.13 L1224.11 1209.13 L1223.52 1209.13 L1222.94 1209.13 L1222.35 1209.13 L1221.76 1209.13 L1221.18 1209.13 L1220.59 1209.13 L1220 1209.13 L1219.42 1209.13 L1218.83 1209.13 L1218.24 1209.13 L1217.66 1209.13 L1217.07 1209.13 L1216.49 1209.13 L1215.9 1209.13 L1215.31 1209.13 L1214.73 1209.13 L1214.14 1209.13 L1213.55 1209.13 L1212.97 1209.13 L1212.38 1209.13 L1211.79 1209.13 L1211.21 1209.13 L1210.62 1209.13 L1210.03 1209.13 L1209.45 1209.13 L1208.86 1209.13 L1208.28 1209.13 L1207.69 1209.13 L1207.1 1209.13 L1206.52 1209.13 L1205.93 1209.13 L1205.34 1209.13 L1204.76 1209.13 L1204.17 1209.13 L1203.58 1209.13 L1203 1209.13 L1202.41 1209.13 L1201.83 1209.13 L1201.24 1209.13 L1200.65 1209.13 L1200.07 1209.13 L1199.48 1209.13 L1198.89 1209.13 L1198.31 1209.13 L1197.72 1209.13 L1197.13 1209.13 L1196.55 1209.13 L1195.96 1209.13 L1195.37 1209.13 L1194.79 1209.13 L1194.2 1209.13 L1193.62 1209.13 L1193.03 1209.13 L1192.44 1209.13 L1191.86 1209.13 L1191.27 1209.13 L1190.68 1209.13 L1190.1 1209.13 L1189.51 1209.13 L1188.92 1209.13 L1188.34 1209.13 L1187.75 1209.13 L1187.16 1209.13 L1186.58 1209.13 L1185.99 1209.13 L1185.41 1209.13 L1184.82 1209.13 L1184.23 1209.13 L1183.65 1209.13 L1183.06 1209.13 L1182.47 1209.13 L1181.89 1209.13 L1181.3 1209.13 L1180.71 1209.13 L1180.13 1209.13 L1179.54 1209.13 L1178.96 1209.13 L1178.37 1209.13 L1177.78 1209.13 L1177.2 1209.13 L1176.61 1209.13 L1176.02 1209.13 L1175.44 1209.13 L1174.85 1209.13 L1174.26 1209.13 L1173.68 1209.13 L1173.09 1209.13 L1172.5 1209.13 L1171.92 1209.13 L1171.33 1209.13 L1170.75 1209.13 L1170.16 1209.13 L1169.57 1209.13 L1168.99 1209.13 L1168.4 1209.13 L1167.81 1209.13 L1167.23 1209.13 L1166.64 1209.13 L1166.05 1209.13 L1165.47 1209.13 L1164.88 1209.13 L1164.29 1209.13 L1163.71 1209.13 L1163.12 1209.13 L1162.54 1209.13 L1161.95 1209.13 L1161.36 1209.13 L1160.78 1209.13 L1160.19 1209.13 L1159.6 1209.13 L1159.02 1209.13 L1158.43 1209.13 L1157.84 1209.13 L1157.26 1209.13 L1156.67 1209.13 L1156.09 1209.13 L1155.5 1209.13 L1154.91 1209.13 L1154.33 1209.13 L1153.74 1209.13 L1153.15 1209.13 L1152.57 1209.13 L1151.98 1209.13 L1151.39 1209.13 L1150.81 1209.13 L1150.22 1209.13 L1149.63 1209.13 L1149.05 1209.13 L1148.46 1209.13 L1147.88 1209.13 L1147.29 1209.13 L1146.7 1209.13 L1146.12 1209.13 L1145.53 1209.13 L1144.94 1209.13 L1144.36 1209.13 L1143.77 1209.13 L1143.18 1209.13 L1142.6 1209.13 L1142.01 1209.13 L1141.42 1209.13 L1140.84 1209.13 L1140.25 1209.13 L1139.67 1209.13 L1139.08 1209.13 L1138.49 1209.13 L1137.91 1209.13 L1137.32 1209.13 L1136.73 1209.13 L1136.15 1209.13 L1135.56 1209.13 L1134.97 1209.13 L1134.39 1209.13 L1133.8 1209.13 L1133.21 1209.13 L1132.63 1209.13 L1132.04 1209.13 L1131.46 1209.13 L1130.87 1209.13 L1130.28 1209.13 L1129.7 1209.13 L1129.11 1209.13 L1128.52 1209.13 L1127.94 1209.13 L1127.35 1209.13 L1126.76 1209.13 L1126.18 1209.13 L1125.59 1209.13 L1125.01 1209.13 L1124.42 1209.13 L1123.83 1209.13 L1123.25 1209.13 L1122.66 1209.13 L1122.07 1209.13 L1121.49 1209.13 L1120.9 1209.13 L1120.31 1209.13 L1119.73 1209.13 L1119.14 1209.13 L1118.55 1209.13 L1117.97 1209.13 L1117.38 1209.13 L1116.8 1209.13 L1116.21 1209.13 L1115.62 1209.13 L1115.04 1209.13 L1114.45 1209.13 L1113.86 1209.13 L1113.28 1209.13 L1112.69 1209.13 L1112.1 1209.13 L1111.52 1209.13 L1110.93 1209.13 L1110.34 1209.13 L1109.76 1209.13 L1109.17 1209.13 L1108.59 1209.13 L1108 1209.13 L1107.41 1209.13 L1106.83 1209.13 L1106.24 1209.13 L1105.65 1209.13 L1105.07 1209.13 L1104.48 1209.13 L1103.89 1209.13 L1103.31 1209.13 L1102.72 1209.13 L1102.14 1209.13 L1101.55 1209.13 L1100.96 1209.13 L1100.38 1209.13 L1099.79 1209.13 L1099.2 1209.13 L1098.62 1209.13 L1098.03 1209.13 L1097.44 1209.13 L1096.86 1209.13 L1096.27 1209.13 L1095.68 1209.13 L1095.1 1209.13 L1094.51 1209.13 L1093.93 1209.13 L1093.34 1209.13 L1092.75 1209.13 L1092.17 1209.13 L1091.58 1209.13 L1090.99 1209.13 L1090.41 1209.13 L1089.82 1209.13 L1089.23 1209.13 L1088.65 1209.13 L1088.06 1209.13 L1087.47 1209.13 L1086.89 1209.13 L1086.3 1209.13 L1085.72 1209.13 L1085.13 1209.13 L1084.54 1209.13 L1083.96 1209.13 L1083.37 1209.13 L1082.78 1209.13 L1082.2 1209.13 L1081.61 1209.13 L1081.02 1209.13 L1080.44 1209.13 L1079.85 1209.13 L1079.26 1209.13 L1078.68 1209.13 L1078.09 1209.13 L1077.51 1209.13 L1076.92 1209.13 L1076.33 1209.13 L1075.75 1209.13 L1075.16 1209.13 L1074.57 1209.13 L1073.99 1209.13 L1073.4 1209.13 L1072.81 1209.13 L1072.23 1209.13 L1071.64 1209.13 L1071.06 1209.13 L1070.47 1209.13 L1069.88 1209.13 L1069.3 1209.13 L1068.71 1209.13 L1068.12 1209.13 L1067.54 1209.13 L1066.95 1209.13 L1066.36 1209.13 L1065.78 1209.13 L1065.19 1209.13 L1064.6 1209.13 L1064.02 1209.13 L1063.43 1209.13 L1062.85 1209.13 L1062.26 1209.13 L1061.67 1209.13 L1061.09 1209.13 L1060.5 1209.13 L1059.91 1209.13 L1059.33 1209.13 L1058.74 1209.13 L1058.15 1209.13 L1057.57 1209.13 L1056.98 1209.13 L1056.39 1209.13 L1055.81 1209.13 L1055.22 1209.13 L1054.64 1209.13 L1054.05 1209.13 L1053.46 1209.13 L1052.88 1209.13 L1052.29 1209.13 L1051.7 1209.13 L1051.12 1209.13 L1050.53 1209.13 L1049.94 1209.13 L1049.36 1209.13 L1048.77 1209.13 L1048.19 1209.13 L1047.6 1209.13 L1047.01 1209.13 L1046.43 1209.13 L1045.84 1209.13 L1045.25 1209.13 L1044.67 1209.13 L1044.08 1209.13 L1043.49 1209.13 L1042.91 1209.13 L1042.32 1209.13 L1041.73 1209.13 L1041.15 1209.13 L1040.56 1209.13 L1039.98 1209.13 L1039.39 1209.13 L1038.8 1209.13 L1038.22 1209.13 L1037.63 1209.13 L1037.04 1209.13 L1036.46 1209.13 L1035.87 1209.13 L1035.28 1209.13 L1034.7 1209.13 L1034.11 1209.13 L1033.52 1209.13 L1032.94 1209.13 L1032.35 1209.13 L1031.77 1209.13 L1031.18 1209.13 L1030.59 1209.13 L1030.01 1209.13 L1029.42 1209.13 L1028.83 1209.13 L1028.25 1209.13 L1027.66 1209.13 L1027.07 1209.13 L1026.49 1209.13 L1025.9 1209.13 L1025.32 1209.13 L1024.73 1209.13 L1024.14 1209.13 L1023.56 1209.13 L1022.97 1209.13 L1022.38 1209.13 L1021.8 1209.13 L1021.21 1209.13 L1020.62 1209.13 L1020.04 1209.13 L1019.45 1209.13 L1018.86 1209.13 L1018.28 1209.13 L1017.69 1209.13 L1017.11 1209.13 L1016.52 1209.13 L1015.93 1209.13 L1015.35 1209.13 L1014.76 1209.13 L1014.17 1209.13 L1013.59 1209.13 L1013 1209.13 L1012.41 1209.13 L1011.83 1209.13 L1011.24 1209.13 L1010.65 1209.13 L1010.07 1209.13 L1009.48 1209.13 L1008.9 1209.13 L1008.31 1209.13 L1007.72 1209.13 L1007.14 1209.13 L1006.55 1209.13 L1005.96 1209.13 L1005.38 1209.13 L1004.79 1209.13 L1004.2 1209.13 L1003.62 1209.13 L1003.03 1209.13 L1002.44 1209.13 L1001.86 1209.13 L1001.27 1209.13 L1000.69 1209.13 L1000.1 1209.13 L999.513 1209.13 L998.926 1209.13 L998.34 1209.13 L997.754 1209.13 L997.167 1209.13 L996.581 1209.13 L995.994 1209.13 L995.408 1209.13 L994.822 1209.13 L994.235 1209.13 L993.649 1209.13 L993.062 1209.13 L992.476 1209.13 L991.889 1209.13 L991.303 1209.13 L990.717 1209.13 L990.13 1209.13 L989.544 1209.13 L988.957 1209.13 L988.371 1209.13 L987.785 1209.13 L987.198 1209.13 L986.612 1209.13 L986.025 1209.13  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.53 986.612,1209.53 987.198,1209.53 987.785,1209.53 988.371,1209.53 988.957,1209.53 989.544,1209.53 990.13,1209.53 990.717,1209.53 991.303,1209.53 991.889,1209.53 992.476,1209.53 993.062,1209.53 993.649,1209.53 994.235,1209.53 994.822,1209.53 995.408,1209.53 995.994,1209.53 996.581,1209.53 997.167,1209.53 997.754,1209.53 998.34,1209.53 998.926,1209.53 999.513,1209.53 1000.1,1209.53 1000.69,1209.53 1001.27,1209.53 1001.86,1209.53 1002.44,1209.53 1003.03,1209.53 1003.62,1209.53 1004.2,1209.53 1004.79,1209.53 1005.38,1209.53 1005.96,1209.53 1006.55,1209.53 1007.14,1209.53 1007.72,1209.53 1008.31,1209.53 1008.9,1209.53 1009.48,1209.53 1010.07,1209.53 1010.65,1209.53 1011.24,1209.53 1011.83,1209.53 1012.41,1209.53 1013,1209.53 1013.59,1209.53 1014.17,1209.53 1014.76,1209.53 1015.35,1209.53 1015.93,1209.53 1016.52,1209.53 1017.11,1209.53 1017.69,1209.53 1018.28,1209.53 1018.86,1209.53 1019.45,1209.53 1020.04,1209.53 1020.62,1209.53 1021.21,1209.53 1021.8,1209.53 1022.38,1209.53 1022.97,1209.53 1023.56,1209.53 1024.14,1209.53 1024.73,1209.53 1025.32,1209.53 1025.9,1209.53 1026.49,1209.53 1027.07,1209.53 1027.66,1209.53 1028.25,1209.53 1028.83,1209.53 1029.42,1209.53 1030.01,1209.53 1030.59,1209.53 1031.18,1209.53 1031.77,1209.53 1032.35,1209.53 1032.94,1209.53 1033.52,1209.53 1034.11,1209.53 1034.7,1209.53 1035.28,1209.53 1035.87,1209.53 1036.46,1209.53 1037.04,1209.53 1037.63,1209.53 1038.22,1209.53 1038.8,1209.53 1039.39,1209.53 1039.98,1209.53 1040.56,1209.53 1041.15,1209.53 1041.73,1209.53 1042.32,1209.53 1042.91,1209.53 1043.49,1209.53 1044.08,1209.53 1044.67,1209.53 1045.25,1209.53 1045.84,1209.53 1046.43,1209.53 1047.01,1209.53 1047.6,1209.53 1048.19,1209.53 1048.77,1209.53 1049.36,1209.53 1049.94,1209.53 1050.53,1209.53 1051.12,1209.53 1051.7,1209.53 1052.29,1209.53 1052.88,1209.53 1053.46,1209.53 1054.05,1209.53 1054.64,1209.53 1055.22,1209.53 1055.81,1209.53 1056.39,1209.53 1056.98,1209.53 1057.57,1209.53 1058.15,1209.53 1058.74,1209.53 1059.33,1209.53 1059.91,1209.53 1060.5,1209.53 1061.09,1209.53 1061.67,1209.53 1062.26,1209.53 1062.85,1209.53 1063.43,1209.53 1064.02,1209.53 1064.6,1209.53 1065.19,1209.53 1065.78,1209.53 1066.36,1209.53 1066.95,1209.53 1067.54,1209.53 1068.12,1209.53 1068.71,1209.53 1069.3,1209.53 1069.88,1209.53 1070.47,1209.53 1071.06,1209.53 1071.64,1209.53 1072.23,1209.53 1072.81,1209.53 1073.4,1209.53 1073.99,1209.53 1074.57,1209.53 1075.16,1209.53 1075.75,1209.53 1076.33,1209.53 1076.92,1209.53 1077.51,1209.53 1078.09,1209.53 1078.68,1209.53 1079.26,1209.53 1079.85,1209.53 1080.44,1209.53 1081.02,1209.53 1081.61,1209.53 1082.2,1209.53 1082.78,1209.53 1083.37,1209.53 1083.96,1209.53 1084.54,1209.53 1085.13,1209.53 1085.72,1209.53 1086.3,1209.53 1086.89,1209.53 1087.47,1209.53 1088.06,1209.53 1088.65,1209.53 1089.23,1209.53 1089.82,1209.53 1090.41,1209.53 1090.99,1209.53 1091.58,1209.53 1092.17,1209.53 1092.75,1209.53 1093.34,1209.53 1093.93,1209.53 1094.51,1209.53 1095.1,1209.53 1095.68,1209.53 1096.27,1209.53 1096.86,1209.53 1097.44,1209.53 1098.03,1209.53 1098.62,1209.53 1099.2,1209.53 1099.79,1209.53 1100.38,1209.53 1100.96,1209.53 1101.55,1209.53 1102.14,1209.53 1102.72,1209.53 1103.31,1209.53 1103.89,1209.53 1104.48,1209.53 1105.07,1209.53 1105.65,1209.53 1106.24,1209.53 1106.83,1209.53 1107.41,1209.53 1108,1209.53 1108.59,1209.53 1109.17,1209.53 1109.76,1209.53 1110.34,1209.53 1110.93,1209.53 1111.52,1209.53 1112.1,1209.53 1112.69,1209.53 1113.28,1209.53 1113.86,1209.53 1114.45,1209.53 1115.04,1209.53 1115.62,1209.53 1116.21,1209.53 1116.8,1209.53 1117.38,1209.53 1117.97,1209.53 1118.55,1209.53 1119.14,1209.53 1119.73,1209.53 1120.31,1209.53 1120.9,1209.53 1121.49,1209.53 1122.07,1209.53 1122.66,1209.53 1123.25,1209.53 1123.83,1209.53 1124.42,1209.53 1125.01,1209.53 1125.59,1209.53 1126.18,1209.53 1126.76,1209.53 1127.35,1209.53 1127.94,1209.53 1128.52,1209.53 1129.11,1209.53 1129.7,1209.53 1130.28,1209.53 1130.87,1209.53 1131.46,1209.53 1132.04,1209.53 1132.63,1209.53 1133.21,1209.53 1133.8,1209.53 1134.39,1209.53 1134.97,1209.53 1135.56,1209.53 1136.15,1209.53 1136.73,1209.53 1137.32,1209.53 1137.91,1209.53 1138.49,1209.53 1139.08,1209.53 1139.67,1209.53 1140.25,1209.53 1140.84,1209.53 1141.42,1209.53 1142.01,1209.53 1142.6,1209.53 1143.18,1209.53 1143.77,1209.53 1144.36,1209.53 1144.94,1209.53 1145.53,1209.53 1146.12,1209.53 1146.7,1209.53 1147.29,1209.53 1147.88,1209.53 1148.46,1209.53 1149.05,1209.53 1149.63,1209.53 1150.22,1209.53 1150.81,1209.53 1151.39,1209.53 1151.98,1209.53 1152.57,1209.53 1153.15,1209.53 1153.74,1209.53 1154.33,1209.53 1154.91,1209.53 1155.5,1209.53 1156.09,1209.53 1156.67,1209.53 1157.26,1209.53 1157.84,1209.53 1158.43,1209.53 1159.02,1209.53 1159.6,1209.53 1160.19,1209.53 1160.78,1209.53 1161.36,1209.53 1161.95,1209.53 1162.54,1209.53 1163.12,1209.53 1163.71,1209.53 1164.29,1209.53 1164.88,1209.53 1165.47,1209.53 1166.05,1209.53 1166.64,1209.53 1167.23,1209.53 1167.81,1209.53 1168.4,1209.53 1168.99,1209.53 1169.57,1209.53 1170.16,1209.53 1170.75,1209.53 1171.33,1209.53 1171.92,1209.53 1172.5,1209.53 1173.09,1209.53 1173.68,1209.53 1174.26,1209.53 1174.85,1209.53 1175.44,1209.53 1176.02,1209.53 1176.61,1209.53 1177.2,1209.53 1177.78,1209.53 1178.37,1209.53 1178.96,1209.53 1179.54,1209.53 1180.13,1209.53 1180.71,1209.53 1181.3,1209.53 1181.89,1209.53 1182.47,1209.53 1183.06,1209.53 1183.65,1209.53 1184.23,1209.53 1184.82,1209.53 1185.41,1209.53 1185.99,1209.53 1186.58,1209.53 1187.16,1209.53 1187.75,1209.53 1188.34,1209.53 1188.92,1209.53 1189.51,1209.53 1190.1,1209.53 1190.68,1209.53 1191.27,1209.53 1191.86,1209.53 1192.44,1209.53 1193.03,1209.53 1193.62,1209.53 1194.2,1209.53 1194.79,1209.53 1195.37,1209.53 1195.96,1209.53 1196.55,1209.53 1197.13,1209.53 1197.72,1209.53 1198.31,1209.53 1198.89,1209.53 1199.48,1209.53 1200.07,1209.53 1200.65,1209.53 1201.24,1209.53 1201.83,1209.53 1202.41,1209.53 1203,1209.53 1203.58,1209.53 1204.17,1209.53 1204.76,1209.53 1205.34,1209.53 1205.93,1209.53 1206.52,1209.53 1207.1,1209.53 1207.69,1209.53 1208.28,1209.53 1208.86,1209.53 1209.45,1209.53 1210.03,1209.53 1210.62,1209.53 1211.21,1209.53 1211.79,1209.53 1212.38,1209.53 1212.97,1209.53 1213.55,1209.53 1214.14,1209.53 1214.73,1209.53 1215.31,1209.53 1215.9,1209.53 1216.49,1209.53 1217.07,1209.53 1217.66,1209.53 1218.24,1209.53 1218.83,1209.53 1219.42,1209.53 1220,1209.53 1220.59,1209.53 1221.18,1209.53 1221.76,1209.53 1222.35,1209.53 1222.94,1209.53 1223.52,1209.53 1224.11,1209.53 1224.7,1209.53 1225.28,1209.53 1225.87,1209.53 1226.45,1209.53 1227.04,1209.53 1227.63,1209.53 1228.21,1209.53 1228.8,1209.53 1229.39,1209.53 1229.97,1209.53 1230.56,1209.53 1231.15,1209.53 1231.73,1209.53 1232.32,1209.53 1232.91,1209.53 1233.49,1209.53 1234.08,1209.53 1234.66,1209.53 1235.25,1209.53 1235.84,1209.53 1236.42,1209.53 1237.01,1209.53 1237.6,1209.53 1238.18,1209.53 1238.77,1209.53 1239.36,1209.53 1239.94,1209.53 1240.53,1209.53 1241.11,1209.53 1241.7,1209.53 1242.29,1209.53 1242.87,1209.53 1243.46,1209.53 1244.05,1209.53 1244.63,1209.53 1245.22,1209.53 1245.81,1209.53 1246.39,1209.53 1246.98,1209.53 1247.57,1209.53 1248.15,1209.53 1248.74,1209.53 1249.32,1209.53 1249.91,1209.53 1250.5,1209.53 1251.08,1209.53 1251.67,1209.53 1252.26,1209.53 1252.84,1209.53 1253.43,1209.53 1254.02,1209.53 1254.6,1209.53 1255.19,1209.53 1255.78,1209.53 1256.36,1209.53 1256.95,1209.53 1257.53,1209.53 1258.12,1209.53 1258.71,1209.53 1259.29,1209.53 1259.88,1209.53 1260.47,1209.53 1261.05,1209.53 1261.64,1209.53 1262.23,1209.53 1262.81,1209.53 1263.4,1209.53 1263.98,1209.53 1264.57,1209.53 1265.16,1209.53 1265.74,1209.53 1266.33,1209.53 1266.92,1209.53 1267.5,1209.53 1268.09,1209.53 1268.68,1209.53 1269.26,1209.53 1269.85,1209.53 1270.44,1209.53 1271.02,1209.53 1271.61,1209.53 1272.19,1209.53 1272.78,1209.53 1273.37,1209.53 1273.95,1209.53 1274.54,1209.53 1275.13,1209.53 1275.71,1209.53 1276.3,1209.53 1276.89,1209.53 1277.47,1209.53 1278.06,1209.53 1278.65,1209.53 1279.23,1209.53 1279.82,1209.53 1280.4,1209.53 1280.99,1209.53 1281.58,1209.53 1282.16,1209.53 1282.75,1209.53 1283.34,1209.53 1283.92,1209.53 1284.51,1209.53 1285.1,1209.53 1285.68,1209.53 1286.27,1209.53 1286.86,1209.53 1287.44,1209.53 1288.03,1209.53 1288.61,1209.53 1289.2,1209.53 1289.79,1209.53 1290.37,1209.53 1290.96,1209.53 1291.55,1209.53 1292.13,1209.53 1292.72,1209.53 1293.31,1209.53 1293.89,1209.53 1294.48,1209.53 1295.06,1209.53 1295.65,1209.53 1296.24,1209.53 1296.82,1209.53 1297.41,1209.53 1298,1209.53 1298.58,1209.53 1299.17,1209.53 1299.76,1209.53 1300.34,1209.53 1300.93,1209.53 1301.52,1209.53 1302.1,1209.53 1302.69,1209.53 1303.27,1209.53 1303.86,1209.53 1304.45,1209.53 1305.03,1209.53 1305.62,1209.53 1306.21,1209.53 1306.79,1209.53 1307.38,1209.53 1307.97,1209.53 1308.55,1209.53 1309.14,1209.53 1309.73,1209.53 1310.31,1209.53 1310.9,1209.53 1311.48,1209.53 1312.07,1209.53 1312.66,1209.53 1313.24,1209.53 1313.83,1209.53 1314.42,1209.53 1315,1209.53 1315.59,1209.53 1316.18,1209.53 1316.76,1209.53 1317.35,1209.53 1317.93,1209.53 1318.52,1209.53 1319.11,1209.53 1319.69,1209.53 1320.28,1209.53 1320.87,1209.53 1321.45,1209.53 1322.04,1209.53 1322.63,1209.53 1323.21,1209.53 1323.8,1209.53 1324.39,1209.53 1324.97,1209.53 1325.56,1209.53 1326.14,1209.53 1326.73,1209.53 1327.32,1209.53 1327.9,1209.53 1328.49,1209.53 1329.08,1209.53 1329.66,1209.53 1330.25,1209.53 1330.84,1209.53 1331.42,1209.53 1332.01,1209.53 1332.6,1209.53 1333.18,1209.53 1333.77,1209.53 1334.35,1209.53 1334.94,1209.53 1335.53,1209.53 1336.11,1209.53 1336.7,1209.53 1337.29,1209.53 1337.87,1209.53 1338.46,1209.53 1339.05,1209.53 1339.63,1209.53 1340.22,1209.53 1340.8,1209.53 1341.39,1209.53 1341.98,1209.53 1342.56,1209.53 1343.15,1209.53 1343.74,1209.53 1344.32,1209.53 1344.91,1209.53 1345.5,1209.53 1346.08,1209.53 1346.67,1209.53 1347.26,1209.53 1347.84,1209.53 1348.43,1209.53 1349.01,1209.53 1349.6,1209.53 1350.19,1209.53 1350.77,1209.53 1351.36,1209.53 1351.95,1209.53 1352.53,1209.53 1353.12,1209.53 1353.71,1209.53 1354.29,1209.53 1354.88,1209.53 1355.47,1209.53 1356.05,1209.53 1356.64,1209.53 1357.22,1209.53 1357.81,1209.53 1358.4,1209.53 1358.98,1209.53 1359.57,1209.53 1360.16,1209.53 1360.74,1209.53 1361.33,1209.53 1361.92,1209.53 1362.5,1209.53 1363.09,1209.53 1363.68,1209.53 1364.26,1209.53 1364.85,1209.53 1365.43,1209.53 1366.02,1209.53 1366.61,1209.53 1367.19,1209.53 1367.78,1209.53 1368.37,1209.53 1368.95,1209.53 1369.54,1209.53 1370.13,1209.53 1370.71,1209.53 1371.3,1209.53 1371.88,1209.53 1372.47,1209.53 1373.06,1209.53 1373.64,1209.53 1374.23,1209.53 1374.82,1209.53 1375.4,1209.53 1375.99,1209.53 1376.58,1209.53 1377.16,1209.53 1377.75,1209.53 1378.34,1209.53 1378.92,1209.53 1379.51,1209.53 1380.09,1209.53 1380.68,1209.53 1381.27,1209.53 1381.85,1209.53 1382.44,1209.53 1383.03,1209.53 1383.61,1209.53 1384.2,1209.53 1384.79,1209.53 1385.37,1209.53 1385.96,1209.53 1386.55,1209.53 1387.13,1209.53 1387.72,1209.53 1388.3,1209.53 1388.89,1209.53 1389.48,1209.53 1390.06,1209.53 1390.65,1209.53 1391.24,1209.53 1391.82,1209.53 1392.41,1209.53 1393,1209.53 1393.58,1209.53 1394.17,1209.53 1394.75,1209.53 1395.34,1209.53 1395.93,1209.53 1396.51,1209.53 1397.1,1209.53 1397.69,1209.53 1398.27,1209.53 1398.86,1209.53 1399.45,1209.53 1400.03,1209.53 1400.62,1209.53 1401.21,1209.53 1401.79,1209.53 1402.38,1209.53 1402.96,1209.53 1403.55,1209.53 1404.14,1209.53 1404.72,1209.53 1405.31,1209.53 1405.9,1209.53 1406.48,1209.53 1407.07,1209.53 1407.66,1209.53 1408.24,1209.53 1408.83,1209.53 1409.42,1209.53 1410,1209.53 1410.59,1209.53 1411.17,1209.53 1411.76,1209.53 1412.35,1209.53 1412.93,1209.53 1413.52,1209.53 1414.11,1209.53 1414.69,1209.53 1415.28,1209.53 1415.87,1209.53 1416.45,1209.53 1417.04,1209.53 1417.63,1209.53 1418.21,1209.53 1418.8,1209.53 1419.38,1209.53 1419.97,1209.53 1420.56,1209.53 1421.14,1209.53 1421.73,1209.53 1422.32,1209.53 1422.9,1209.53 1423.49,1209.53 1424.08,1209.53 1424.66,1209.53 1425.25,1209.53 1425.83,1209.53 1426.42,1209.53 1427.01,1209.53 1427.59,1209.53 1428.18,1209.53 1428.77,1209.53 1429.35,1209.53 1429.94,1209.53 1430.53,1209.53 1431.11,1209.53 1431.7,1209.53 1432.29,1209.53 1432.87,1209.53 1433.46,1209.53 1434.04,1209.53 1434.63,1209.53 1435.22,1209.53 1435.8,1209.53 1436.39,1209.53 1436.98,1209.53 1437.56,1209.53 1438.15,1209.53 1438.74,1209.53 1439.32,1209.53 1439.91,1209.53 1440.5,1209.53 1441.08,1209.53 1441.67,1209.53 1442.25,1209.53 1442.84,1209.53 1443.43,1209.53 1444.01,1209.53 1444.6,1209.53 1445.19,1209.53 1445.77,1209.53 1446.36,1209.53 1446.95,1209.53 1447.53,1209.53 1448.12,1209.53 1448.7,1209.53 1449.29,1209.53 1449.88,1209.53 1450.46,1209.53 1451.05,1209.53 1451.64,1209.53 1452.22,1209.53 1452.81,1209.53 1453.4,1209.53 1453.98,1209.53 1454.57,1209.53 1455.16,1209.53 1455.74,1209.53 1456.33,1209.53 1456.91,1209.53 1457.5,1209.53 1458.09,1209.53 1458.67,1209.53 1459.26,1209.53 1459.85,1209.53 1460.43,1209.53 1461.02,1209.53 1461.61,1209.53 1462.19,1209.53 1462.78,1209.53 1463.37,1209.53 1463.95,1209.53 1464.54,1209.53 1465.12,1209.53 1465.71,1209.53 1466.3,1209.53 1466.88,1209.53 1467.47,1209.53 1468.06,1209.53 1468.64,1209.53 1469.23,1209.53 1469.82,1209.53 1470.4,1209.53 1470.99,1209.53 1471.57,1209.53 1472.16,1209.53 1472.75,1209.53 1473.33,1209.53 1473.92,1209.53 1474.51,1209.53 1475.09,1209.53 1475.68,1209.53 1476.27,1209.53 1476.85,1209.53 1477.44,1209.53 1478.03,1209.53 1478.61,1209.53 1479.2,1209.53 1479.78,1209.53 1480.37,1209.53 1480.96,1209.53 1481.54,1209.53 1482.13,1209.53 1482.72,1209.53 1483.3,1209.53 1483.89,1209.53 1484.48,1209.53 1485.06,1209.53 1485.65,1209.53 1486.24,1209.53 1486.82,1209.53 1487.41,1209.53 1487.99,1209.53 1488.58,1209.53 1489.17,1209.53 1489.75,1209.53 1490.34,1209.53 1490.93,1209.53 1491.51,1209.53 1492.1,1209.53 1492.69,1209.53 1493.27,1209.53 1493.86,1209.53 1494.45,1209.53 1495.03,1209.53 1495.62,1209.53 1496.2,1209.53 1496.79,1209.53 1497.38,1209.53 1497.96,1209.53 1498.55,1209.53 1499.14,1209.53 1499.72,1209.53 1500.31,1209.53 1500.9,1209.53 1501.48,1209.53 1502.07,1209.53 1502.65,1209.53 1503.24,1209.53 1503.83,1209.53 1504.41,1209.53 1505,1209.53 1505.59,1209.53 1506.17,1209.53 1506.76,1209.53 1507.35,1209.53 1507.93,1209.53 1508.52,1209.53 1509.11,1209.53 1509.69,1209.53 1510.28,1209.53 1510.86,1209.53 1511.45,1209.53 1512.04,1209.53 1512.62,1209.53 1513.21,1209.53 1513.8,1209.53 1514.38,1209.53 1514.97,1209.53 1515.56,1209.53 1516.14,1209.53 1516.73,1209.53 1517.32,1209.53 1517.9,1209.53 1518.49,1209.53 1519.07,1209.53 1519.66,1209.53 1520.25,1209.53 1520.83,1209.53 1521.42,1209.53 1522.01,1209.53 1522.59,1209.53 1523.18,1209.53 1523.77,1209.53 1524.35,1209.53 1524.94,1209.53 1525.52,1209.53 1526.11,1209.53 1526.7,1209.53 1527.28,1209.53 1527.87,1209.53 1528.46,1209.53 1529.04,1209.53 1529.63,1209.53 1530.22,1209.53 1530.8,1209.53 1531.39,1209.53 1531.98,1209.53 1532.56,1209.53 1533.15,1209.53 1533.73,1209.53 1534.32,1209.53 1534.91,1209.53 1535.49,1209.53 1536.08,1209.53 1536.67,1209.53 1537.25,1209.53 1537.84,1209.53 1538.43,1209.53 1539.01,1209.53 1539.6,1209.53 1540.19,1209.53 1540.77,1209.53 1541.36,1209.53 1541.94,1209.53 1542.53,1209.53 1543.12,1209.53 1543.7,1209.53 1544.29,1209.53 1544.88,1209.53 1545.46,1209.53 1546.05,1209.53 1546.64,1209.53 1547.22,1209.53 1547.81,1209.53 1548.4,1209.53 1548.98,1209.53 1549.57,1209.53 1550.15,1209.53 1550.74,1209.53 1551.33,1209.53 1551.91,1209.53 1552.5,1209.53 1553.09,1209.53 1553.67,1209.53 1554.26,1209.53 1554.85,1209.53 1555.43,1209.53 1556.02,1209.53 1556.6,1209.53 1557.19,1209.53 1557.78,1209.53 1558.36,1209.53 1558.95,1209.53 1559.54,1209.53 1560.12,1209.53 1560.71,1209.53 1561.3,1209.53 1561.88,1209.53 1562.47,1209.53 1563.06,1209.53 1563.64,1209.53 1564.23,1209.53 1564.81,1209.53 1565.4,1209.53 1565.99,1209.53 1566.57,1209.53 1567.16,1209.53 1567.75,1209.53 1568.33,1209.53 1568.92,1209.53 1569.51,1209.53 1570.09,1209.53 1570.68,1209.53 1571.27,1209.53 1571.85,1209.53 1572.44,1209.53 1573.02,1209.53 1573.61,1209.53 1574.2,1209.53 1574.78,1209.53 1575.37,1209.53 1575.96,1209.53 1576.54,1209.53 1577.13,1209.53 1577.72,1209.53 1578.3,1209.53 1578.89,1209.53 1579.47,1209.53 1580.06,1209.53 1580.65,1209.53 1581.23,1209.53 1581.82,1209.53 1582.41,1209.53 1582.99,1209.53 1583.58,1209.53 1584.17,1209.53 1584.75,1209.53 1585.34,1209.53 1585.93,1209.53 1586.51,1209.53 1587.1,1209.53 1587.68,1209.53 1588.27,1209.53 1588.86,1209.53 1589.44,1209.53 1590.03,1209.53 1590.62,1209.53 1591.2,1209.53 1591.79,1209.53 1592.38,1209.53 1592.96,1209.53 1593.55,1209.53 1594.14,1209.53 1594.72,1209.53 1595.31,1209.53 1595.89,1209.53 1596.48,1209.53 1597.07,1209.53 1597.65,1209.53 1598.24,1209.53 1598.83,1209.53 1599.41,1209.53 1600,1209.53 1600.59,1209.53 1601.17,1209.53 1601.76,1209.53 1602.34,1209.53 1602.93,1209.53 1603.52,1209.53 1604.1,1209.53 1604.69,1209.53 1605.28,1209.53 1605.86,1209.53 1606.45,1209.53 1607.04,1209.53 1607.62,1209.53 1608.21,1209.53 1608.8,1209.53 1609.38,1209.53 1609.97,1209.53 1610.55,1209.53 1611.14,1209.53 1611.73,1209.53 1612.31,1209.53 1612.9,1209.53 1613.49,1209.53 1614.07,1209.53 1614.66,1209.53 1615.25,1209.53 1615.83,1209.53 1616.42,1209.53 1617.01,1209.53 1617.59,1209.53 1618.18,1209.53 1618.76,1209.53 1619.35,1209.53 1619.94,1209.53 1620.52,1209.53 1621.11,1209.53 1621.7,1209.53 1622.28,1209.53 1622.87,1209.53 1623.46,1209.53 1624.04,1209.53 1624.63,1209.53 1625.22,1209.53 1625.8,1209.53 1626.39,1209.53 1626.97,1209.53 1627.56,1209.53 1628.15,1209.53 1628.73,1209.53 1629.32,1209.53 1629.91,1209.53 1630.49,1209.53 1631.08,1209.53 1631.67,1209.53 1632.25,1209.53 1632.84,1209.53 1633.42,1209.53 1634.01,1209.53 1634.6,1209.53 1635.18,1209.53 1635.77,1209.53 1636.36,1209.53 1636.94,1209.53 1637.53,1209.53 1638.12,1209.53 1638.7,1209.53 1639.29,1209.53 1639.88,1209.53 1640.46,1209.53 1641.05,1209.53 1641.63,1209.53 1642.22,1209.53 1642.81,1209.53 1643.39,1209.53 1643.98,1209.53 1644.57,1209.53 1645.15,1209.53 1645.74,1209.53 1646.33,1209.53 1646.91,1209.53 1647.5,1209.53 1648.09,1209.53 1648.67,1209.53 1649.26,1209.53 1649.84,1209.53 1650.43,1209.53 1651.02,1209.53 1651.6,1209.53 1652.19,1209.53 1652.78,1209.53 1653.36,1209.53 1653.95,1209.53 1654.54,1209.53 1655.12,1209.53 1655.71,1209.53 1656.29,1209.53 1656.88,1209.53 1657.47,1209.53 1658.05,1209.53 1658.64,1209.53 1659.23,1209.53 1659.81,1209.53 1660.4,1209.53 1660.99,1209.53 1661.57,1209.53 1662.16,1209.53 1662.75,1209.53 1663.33,1209.53 1663.92,1209.53 1664.5,1209.53 1665.09,1209.53 1665.68,1209.53 1666.26,1209.53 1666.85,1209.53 1667.44,1209.53 1668.02,1209.53 1668.61,1209.53 1669.2,1209.53 1669.78,1209.53 1670.37,1209.53 1670.96,1209.53 1671.54,1209.53 1672.13,1209.53 1672.71,1209.53 1673.3,1209.53 1673.89,1209.53 1674.47,1209.53 1675.06,1209.53 1675.65,1209.53 1676.23,1209.53 1676.82,1209.53 1677.41,1209.53 1677.99,1209.53 1678.58,1209.53 1679.17,1209.53 1679.75,1209.53 1680.34,1209.53 1680.92,1209.53 1681.51,1209.53 1682.1,1209.53 1682.68,1209.53 1683.27,1209.53 1683.86,1209.53 1684.44,1209.53 1685.03,1209.53 1685.62,1209.53 1686.2,1209.53 1686.79,1209.53 1687.37,1209.53 1687.96,1209.53 1688.55,1209.53 1689.13,1209.53 1689.72,1209.53 1690.31,1209.53 1690.89,1209.53 1691.48,1209.53 1692.07,1209.53 1692.65,1209.53 1693.24,1209.53 1693.83,1209.53 1694.41,1209.53 1695,1209.53 1695.58,1209.53 1696.17,1209.53 1696.76,1209.53 1697.34,1209.53 1697.93,1209.53 1698.52,1209.53 1699.1,1209.53 1699.69,1209.53 1700.28,1209.53 1700.86,1209.53 1701.45,1209.53 1702.04,1209.53 1702.62,1209.53 1703.21,1209.53 1703.79,1209.53 1704.38,1209.53 1704.97,1209.53 1705.55,1209.53 1706.14,1209.53 1706.73,1209.53 1707.31,1209.53 1707.9,1209.53 1708.49,1209.53 1709.07,1209.53 1709.66,1209.53 1710.24,1209.53 1710.83,1209.53 1711.42,1209.53 1712,1209.53 1712.59,1209.53 1713.18,1209.53 1713.76,1209.53 1714.35,1209.53 1714.94,1209.53 1715.52,1209.53 1716.11,1209.53 1716.7,1209.53 1717.28,1209.53 1717.87,1209.53 1718.45,1209.53 1719.04,1209.53 1719.63,1209.53 1720.21,1209.53 1720.8,1209.53 1721.39,1209.53 1721.97,1209.53 1722.56,1209.53 1723.15,1209.53 1723.73,1209.53 1724.32,1209.53 1724.91,1209.53 1725.49,1209.53 1726.08,1209.53 1726.66,1209.53 1727.25,1209.53 1727.84,1209.53 1728.42,1209.53 1729.01,1209.53 1729.6,1209.53 1730.18,1209.53 1730.77,1209.53 1731.36,1209.53 1731.94,1209.53 1732.53,1209.53 1733.11,1209.53 1733.7,1209.53 1734.29,1209.53 1734.87,1209.53 1735.46,1209.53 1736.05,1209.53 1736.63,1209.53 1737.22,1209.53 1737.81,1209.53 1738.39,1209.53 1738.98,1209.53 1739.57,1209.53 1740.15,1209.53 1740.74,1209.53 1741.32,1209.53 1741.91,1209.53 1742.5,1209.53 1743.08,1209.53 1743.67,1209.53 1744.26,1209.53 1744.84,1209.53 1745.43,1209.53 1746.02,1209.53 1746.6,1209.53 1747.19,1209.53 1747.78,1209.53 1748.36,1209.53 1748.95,1209.53 1749.53,1209.53 1750.12,1209.53 1750.71,1209.53 1751.29,1209.53 1751.88,1209.53 1752.47,1209.53 1753.05,1209.53 1753.64,1209.53 1754.23,1209.53 1754.81,1209.53 1755.4,1209.53 1755.99,1209.53 1756.57,1209.53 1757.16,1209.53 1757.74,1209.53 1758.33,1209.53 1758.92,1209.53 1759.5,1209.53 1760.09,1209.53 1760.68,1209.53 1761.26,1209.53 1761.85,1209.53 1762.44,1209.53 1763.02,1209.53 1763.61,1209.53 1764.19,1209.53 1764.78,1209.53 1765.37,1209.53 1765.95,1209.53 1766.54,1209.53 1767.13,1209.53 1767.71,1209.53 1768.3,1209.53 1768.89,1209.53 1769.47,1209.53 1770.06,1209.53 1770.65,1209.53 1771.23,1209.53 1771.82,1209.53 1772.4,1209.53 1772.99,1209.53 1773.58,1209.53 1774.16,1209.53 1774.75,1209.53 1775.34,1209.53 1775.92,1209.53 1776.51,1209.53 1777.1,1209.53 1777.68,1209.53 1778.27,1209.53 1778.86,1209.53 1779.44,1209.53 1780.03,1209.53 1780.61,1209.53 1781.2,1209.53 1781.79,1209.53 1782.37,1209.53 1782.96,1209.53 1783.55,1209.53 1784.13,1209.53 1784.72,1209.53 1785.31,1209.53 1785.89,1209.53 1786.48,1209.53 1787.06,1209.53 1787.65,1209.53 1788.24,1209.53 1788.82,1209.53 1789.41,1209.53 1790,1209.53 1790.58,1209.53 1791.17,1209.53 1791.76,1209.53 1792.34,1209.53 1792.93,1209.53 1793.52,1209.53 1794.1,1209.53 1794.69,1209.53 1795.27,1209.53 1795.86,1209.53 1796.45,1209.53 1797.03,1209.53 1797.62,1209.53 1798.21,1209.53 1798.79,1209.53 1799.38,1209.53 1799.97,1209.53 1800.55,1209.53 1801.14,1209.53 1801.73,1209.53 1802.31,1209.53 1802.9,1209.53 1803.48,1209.53 1804.07,1209.53 1804.66,1209.53 1805.24,1209.53 1805.83,1209.53 1806.42,1209.53 1807,1209.53 1807.59,1209.53 1808.18,1209.53 1808.76,1209.53 1809.35,1209.53 1809.94,1209.53 1810.52,1209.53 1811.11,1209.53 1811.69,1209.53 1812.28,1209.53 1812.87,1209.53 1813.45,1209.53 1814.04,1209.53 1814.63,1209.53 1815.21,1209.53 1815.8,1209.53 1816.39,1209.53 1816.97,1209.53 1817.56,1209.53 1818.14,1209.53 1818.73,1209.53 1819.32,1209.53 1819.9,1209.53 1820.49,1209.53 1821.08,1209.53 1821.66,1209.53 1822.25,1209.53 1822.84,1209.53 1823.42,1209.53 1824.01,1209.53 1824.6,1209.53 1825.18,1209.53 1825.77,1209.53 1826.35,1209.53 1826.94,1209.53 1827.53,1209.53 1828.11,1209.53 1828.7,1209.53 1829.29,1209.53 1829.87,1209.53 1830.46,1209.53 1831.05,1209.53 1831.63,1209.53 1832.22,1209.53 1832.81,1209.53 1833.39,1209.53 1833.98,1209.53 1834.56,1209.53 1835.15,1209.53 1835.74,1209.53 1836.32,1209.53 1836.91,1209.53 1837.5,1209.53 1838.08,1209.53 1838.67,1209.53 1839.26,1209.53 1839.84,1209.53 1840.43,1209.53 1841.01,1209.53 1841.6,1209.53 1842.19,1209.53 1842.77,1209.53 1843.36,1209.53 1843.95,1209.53 1844.53,1209.53 1845.12,1209.53 1845.71,1209.53 1846.29,1209.53 1846.88,1209.53 1847.47,1209.53 1848.05,1209.53 1848.64,1209.53 1849.22,1209.53 1849.81,1209.53 1850.4,1209.53 1850.98,1209.53 1851.57,1209.53 1852.16,1209.53 1852.74,1209.53 1853.33,1209.53 1853.92,1209.53 1854.5,1209.53 1855.09,1209.53 1855.68,1209.53 1856.26,1209.53 1856.85,1209.53 1857.43,1209.53 1858.02,1209.53 1858.61,1209.53 1859.19,1209.53 1859.78,1209.53 1860.37,1209.53 1860.95,1209.53 1861.54,1209.53 1862.13,1209.53 1862.71,1209.53 1863.3,1209.53 1863.88,1209.53 1864.47,1209.53 1865.06,1209.53 1865.64,1209.53 1866.23,1209.53 1866.82,1209.53 1867.4,1209.53 1867.99,1209.53 1868.58,1209.53 1869.16,1209.53 1869.75,1209.53 1870.34,1209.53 1870.92,1209.53 1871.51,1209.53 1872.09,1209.53 1872.68,1209.53 1873.27,1209.53 1873.85,1209.53 1874.44,1209.53 1875.03,1209.53 1875.61,1209.53 1876.2,1209.53 1876.79,1209.53 1877.37,1209.53 1877.96,1209.53 1878.55,1209.53 1879.13,1209.53 1879.72,1209.53 1880.3,1209.53 1880.89,1209.53 1881.48,1209.53 1882.06,1209.53 1882.65,1209.53 1883.24,1209.53 1883.82,1209.53 1884.41,1209.53 1885,1209.53 1885.58,1209.53 1886.17,1209.53 1886.76,1209.53 1887.34,1209.53 1887.93,1209.53 1888.51,1209.53 1889.1,1209.53 1889.69,1209.53 1890.27,1209.53 1890.86,1209.53 1891.45,1209.53 1892.03,1209.53 1892.62,1209.53 1893.21,1209.53 1893.79,1209.53 1894.38,1209.53 1894.96,1209.53 1895.55,1209.53 1896.14,1209.53 1896.72,1209.53 1897.31,1209.53 1897.9,1209.53 1898.48,1209.53 1899.07,1209.53 1899.66,1209.53 1900.24,1209.53 1900.83,1209.53 1901.42,1209.53 1902,1209.53 1902.59,1209.53 1903.17,1209.53 1903.76,1209.53 1904.35,1209.53 1904.93,1209.53 1905.52,1209.53 1906.11,1209.53 1906.69,1209.53 1907.28,1209.53 1907.87,1209.53 1908.45,1209.53 1909.04,1209.53 1909.63,1209.53 1910.21,1209.53 1910.8,1209.53 1911.38,1209.53 1911.97,1209.53 1912.56,1209.53 1913.14,1209.53 1913.73,1209.53 1914.32,1209.53 1914.9,1209.53 1915.49,1209.53 1916.08,1209.53 1916.66,1209.53 1917.25,1209.53 1917.83,1209.53 1918.42,1209.53 1919.01,1209.53 1919.59,1209.53 1920.18,1209.53 1920.77,1209.53 1921.35,1209.53 1921.94,1209.53 1922.53,1209.53 1923.11,1209.53 1923.7,1209.53 1924.29,1209.53 1924.87,1209.53 1925.46,1209.53 1926.04,1209.53 1926.63,1209.53 1927.22,1209.53 1927.8,1209.53 1928.39,1209.53 1928.98,1209.53 1929.56,1209.53 1930.15,1209.53 1930.74,1209.53 1931.32,1209.53 1931.91,1209.53 1932.5,1209.53 1933.08,1209.53 1933.67,1209.53 1934.25,1209.53 1934.84,1209.53 1935.43,1209.53 1936.01,1209.53 1936.6,1209.53 1937.19,1209.53 1937.77,1209.53 1938.36,1209.53 1938.95,1209.53 1939.53,1209.53 1940.12,1209.53 1940.71,1209.53 1941.29,1209.53 1941.88,1209.53 1942.46,1209.53 1943.05,1209.53 1943.64,1209.53 1944.22,1209.53 1944.81,1209.53 1945.4,1209.53 1945.98,1209.53 1946.57,1209.53 1947.16,1209.53 1947.74,1209.53 1948.33,1209.53 1948.91,1209.53 1949.5,1209.53 1950.09,1209.53 1950.67,1209.53 1951.26,1209.53 1951.85,1209.53 1952.43,1209.53 1953.02,1209.53 1953.61,1209.53 1954.19,1209.53 1954.78,1209.53 1955.37,1209.53 1955.95,1209.53 1956.54,1209.53 1957.12,1209.53 1957.71,1209.53 1958.3,1209.53 1958.88,1209.53 1959.47,1209.53 1960.06,1209.53 1960.64,1209.53 1961.23,1209.53 1961.82,1209.53 1962.4,1209.53 1962.99,1209.53 1963.58,1209.53 1964.16,1209.53 1964.75,1209.53 1965.33,1209.53 1965.92,1209.53 1966.51,1209.53 1967.09,1209.53 1967.68,1209.53 1968.27,1209.53 1968.85,1209.53 1969.44,1209.53 1970.03,1209.53 1970.61,1209.53 1971.2,1209.53 1971.78,1209.53 1972.37,1209.53 1972.96,1209.53 1973.54,1209.53 1974.13,1209.53 1974.72,1209.53 1975.3,1209.53 1975.89,1209.53 1976.48,1209.53 1977.06,1209.53 1977.65,1209.53 1978.24,1209.53 1978.82,1209.53 1979.41,1209.53 1979.99,1209.53 1980.58,1209.53 1981.17,1209.53 1981.75,1209.53 1982.34,1209.53 1982.93,1209.53 1983.51,1209.53 1984.1,1209.53 1984.69,1209.53 1985.27,1209.53 1985.86,1209.53 1986.45,1209.53 1987.03,1209.53 1987.62,1209.53 1988.2,1209.53 1988.79,1209.53 1989.38,1209.53 1989.96,1209.53 1990.55,1209.53 1991.14,1209.53 1991.72,1209.53 1992.31,1209.53 1992.9,1209.53 1993.48,1209.53 1994.07,1209.53 1994.65,1209.53 1995.24,1209.53 1995.83,1209.53 1996.41,1209.53 1997,1209.53 1997.59,1209.53 1998.17,1209.53 1998.76,1209.53 1999.35,1209.53 1999.93,1209.53 2000.52,1209.53 2001.11,1209.53 2001.69,1209.53 2002.28,1209.53 2002.86,1209.53 2003.45,1209.53 2004.04,1209.53 2004.62,1209.53 2005.21,1209.53 2005.8,1209.53 2006.38,1209.53 2006.97,1209.53 2007.56,1209.53 2008.14,1209.53 2008.73,1209.53 2009.32,1209.53 2009.9,1209.53 2010.49,1209.53 2011.07,1209.53 2011.66,1209.53 2012.25,1209.53 2012.83,1209.53 2013.42,1209.53 2014.01,1209.53 2014.59,1209.53 2015.18,1209.53 2015.77,1209.53 2016.35,1209.53 2016.94,1209.53 2017.53,1209.53 2018.11,1209.53 2018.7,1209.53 2019.28,1209.53 2019.87,1209.53 2020.46,1209.53 2021.04,1209.53 2021.63,1209.53 2022.22,1209.53 2022.8,1209.53 2023.39,1209.53 2023.98,1209.53 2024.56,1209.53 2025.15,1209.53 2025.73,1209.53 2026.32,1209.53 2026.91,1209.53 2027.49,1209.53 2028.08,1209.53 2028.67,1209.53 2029.25,1209.53 2029.84,1209.53 2030.43,1209.53 2031.01,1209.53 2031.6,1209.53 2032.19,1209.53 2032.77,1209.53 2033.36,1209.53 2033.94,1209.53 2034.53,1209.53 2035.12,1209.53 2035.7,1209.53 2036.29,1209.53 2036.88,1209.53 2037.46,1209.53 2038.05,1209.53 2038.64,1209.53 2039.22,1209.53 2039.81,1209.53 2040.4,1209.53 2040.98,1209.53 2041.57,1209.53 2042.15,1209.53 2042.74,1209.53 2043.33,1209.53 2043.91,1209.53 2044.5,1209.53 2045.09,1209.53 2045.67,1209.53 2046.26,1209.53 2046.85,1209.53 2047.43,1209.53 2048.02,1209.53 2048.6,1209.53 2049.19,1209.53 2049.78,1209.53 2050.36,1209.53 2050.95,1209.53 2051.54,1209.53 2052.12,1209.53 2052.71,1209.53 2053.3,1209.53 2053.88,1209.53 2054.47,1209.53 2055.06,1209.53 2055.64,1209.53 2056.23,1209.53 2056.81,1209.53 2057.4,1209.53 2057.99,1209.53 2058.57,1209.53 2059.16,1209.53 2059.75,1209.53 2060.33,1209.53 2060.92,1209.53 2061.51,1209.53 2062.09,1209.53 2062.68,1209.53 2063.27,1209.53 2063.85,1209.53 2064.44,1209.53 2065.02,1209.53 2065.61,1209.53 2066.2,1209.53 2066.78,1209.53 2067.37,1209.53 2067.96,1209.53 2068.54,1209.53 2069.13,1209.53 2069.72,1209.53 2070.3,1209.53 2070.89,1209.53 2071.48,1209.53 2072.06,1209.53 2072.65,1209.53 2073.23,1209.53 2073.82,1209.53 2074.41,1209.53 2074.99,1209.53 2075.58,1209.53 2076.17,1209.53 2076.75,1209.53 2077.34,1209.53 2077.93,1209.53 2078.51,1209.53 2079.1,1209.53 2079.68,1209.53 2080.27,1209.53 2080.86,1209.53 2081.44,1209.53 2082.03,1209.53 2082.62,1209.53 2083.2,1209.53 2083.79,1209.53 2084.38,1209.53 2084.96,1209.53 2085.55,1209.53 2086.14,1209.53 2086.72,1209.53 2087.31,1209.53 2087.89,1209.53 2088.48,1209.53 2089.07,1209.53 2089.65,1209.53 2090.24,1209.53 2090.83,1209.53 2091.41,1209.53 2092,1209.53 2092.59,1209.53 2093.17,1209.53 2093.76,1209.53 2094.35,1209.53 2094.93,1209.53 2095.52,1209.53 2096.1,1209.53 2096.69,1209.53 2097.28,1209.53 2097.86,1209.53 2098.45,1209.53 2099.04,1209.53 2099.62,1209.53 2100.21,1209.53 2100.8,1209.53 2101.38,1209.53 2101.97,1209.53 2102.55,1209.53 2103.14,1209.53 2103.73,1209.53 2104.31,1209.53 2104.9,1209.53 2105.49,1209.53 2106.07,1209.53 2106.66,1209.53 2107.25,1209.53 2107.83,1209.53 2108.42,1209.53 2109.01,1209.53 2109.59,1209.53 2110.18,1209.53 2110.76,1209.53 2111.35,1209.53 2111.94,1209.53 2112.52,1209.53 2113.11,1209.53 2113.7,1209.53 2114.28,1209.53 2114.87,1209.53 2115.46,1209.53 2116.04,1209.53 2116.63,1209.53 2117.22,1209.53 2117.8,1209.53 2118.39,1209.53 2118.97,1209.53 2119.56,1209.53 2120.15,1209.53 2120.73,1209.53 2121.32,1209.53 2121.91,1209.53 2122.49,1209.53 2123.08,1209.53 2123.67,1209.53 2124.25,1209.53 2124.84,1209.53 2125.42,1209.53 2126.01,1209.53 2126.6,1209.53 2127.18,1209.53 2127.77,1209.53 2128.36,1209.53 2128.94,1209.53 2129.53,1209.53 2130.12,1209.53 2130.7,1209.53 2131.29,1209.53 2131.88,1209.53 2132.46,1209.53 2133.05,1209.53 2133.63,1209.53 2134.22,1209.53 2134.81,1209.53 2135.39,1209.53 2135.98,1209.53 2136.57,1209.53 2137.15,1209.53 2137.74,1209.53 2138.33,1209.53 2138.91,1209.53 2139.5,1209.53 2140.09,1209.53 2140.67,1209.53 2141.26,1209.53 2141.84,1209.53 2142.43,1209.53 2143.02,1209.53 2143.6,1209.53 2144.19,1209.53 2144.78,1209.53 2145.36,1209.53 2145.95,1209.53 2146.54,1209.53 2147.12,1209.53 2147.71,1209.53 2148.3,1209.53 2148.88,1209.53 2149.47,1209.53 2150.05,1209.53 2150.64,1209.53 2151.23,1209.53 2151.81,1209.53 2152.4,1209.53 2152.99,1209.53 2153.57,1209.53 2154.16,1209.53 2154.75,1209.53 2155.33,1209.53 2155.92,1209.53 2156.5,1209.53 2157.09,1209.53 2157.68,1209.53 2158.26,1209.53 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1209.44 L986.612 1209.44 L987.198 1209.44 L987.785 1209.44 L988.371 1209.44 L988.957 1209.44 L989.544 1209.44 L990.13 1209.44 L990.717 1209.44 L991.303 1209.44 L991.889 1209.44 L992.476 1209.44 L993.062 1209.44 L993.649 1209.44 L994.235 1209.44 L994.822 1209.44 L995.408 1209.44 L995.994 1209.44 L996.581 1209.44 L997.167 1209.44 L997.754 1209.44 L998.34 1209.44 L998.926 1209.44 L999.513 1209.44 L1000.1 1209.44 L1000.69 1209.44 L1001.27 1209.44 L1001.86 1209.44 L1002.44 1209.44 L1003.03 1209.44 L1003.62 1209.44 L1004.2 1209.44 L1004.79 1209.44 L1005.38 1209.44 L1005.96 1209.44 L1006.55 1209.44 L1007.14 1209.44 L1007.72 1209.44 L1008.31 1209.44 L1008.9 1209.44 L1009.48 1209.44 L1010.07 1209.44 L1010.65 1209.44 L1011.24 1209.44 L1011.83 1209.44 L1012.41 1209.44 L1013 1209.44 L1013.59 1209.44 L1014.17 1209.44 L1014.76 1209.44 L1015.35 1209.44 L1015.93 1209.44 L1016.52 1209.44 L1017.11 1209.44 L1017.69 1209.44 L1018.28 1209.44 L1018.86 1209.44 L1019.45 1209.44 L1020.04 1209.44 L1020.62 1209.44 L1021.21 1209.44 L1021.8 1209.44 L1022.38 1209.44 L1022.97 1209.44 L1023.56 1209.44 L1024.14 1209.44 L1024.73 1209.44 L1025.32 1209.44 L1025.9 1209.44 L1026.49 1209.44 L1027.07 1209.44 L1027.66 1209.44 L1028.25 1209.44 L1028.83 1209.44 L1029.42 1209.44 L1030.01 1209.44 L1030.59 1209.44 L1031.18 1209.44 L1031.77 1209.44 L1032.35 1209.44 L1032.94 1209.44 L1033.52 1209.44 L1034.11 1209.44 L1034.7 1209.44 L1035.28 1209.44 L1035.87 1209.44 L1036.46 1209.44 L1037.04 1209.44 L1037.63 1209.44 L1038.22 1209.44 L1038.8 1209.44 L1039.39 1209.44 L1039.98 1209.44 L1040.56 1209.44 L1041.15 1209.44 L1041.73 1209.44 L1042.32 1209.44 L1042.91 1209.44 L1043.49 1209.44 L1044.08 1209.44 L1044.67 1209.44 L1045.25 1209.44 L1045.84 1209.44 L1046.43 1209.44 L1047.01 1209.44 L1047.6 1209.44 L1048.19 1209.44 L1048.77 1209.44 L1049.36 1209.44 L1049.94 1209.44 L1050.53 1209.44 L1051.12 1209.44 L1051.7 1209.44 L1052.29 1209.44 L1052.88 1209.44 L1053.46 1209.44 L1054.05 1209.44 L1054.64 1209.44 L1055.22 1209.44 L1055.81 1209.44 L1056.39 1209.44 L1056.98 1209.44 L1057.57 1209.44 L1058.15 1209.44 L1058.74 1209.44 L1059.33 1209.44 L1059.91 1209.44 L1060.5 1209.44 L1061.09 1209.44 L1061.67 1209.44 L1062.26 1209.44 L1062.85 1209.44 L1063.43 1209.44 L1064.02 1209.44 L1064.6 1209.44 L1065.19 1209.44 L1065.78 1209.44 L1066.36 1209.44 L1066.95 1209.44 L1067.54 1209.44 L1068.12 1209.44 L1068.71 1209.44 L1069.3 1209.44 L1069.88 1209.44 L1070.47 1209.44 L1071.06 1209.44 L1071.64 1209.44 L1072.23 1209.44 L1072.81 1209.44 L1073.4 1209.44 L1073.99 1209.44 L1074.57 1209.44 L1075.16 1209.44 L1075.75 1209.44 L1076.33 1209.44 L1076.92 1209.44 L1077.51 1209.44 L1078.09 1209.44 L1078.68 1209.44 L1079.26 1209.44 L1079.85 1209.44 L1080.44 1209.44 L1081.02 1209.44 L1081.61 1209.44 L1082.2 1209.44 L1082.78 1209.44 L1083.37 1209.44 L1083.96 1209.44 L1084.54 1209.44 L1085.13 1209.44 L1085.72 1209.44 L1086.3 1209.44 L1086.89 1209.44 L1087.47 1209.44 L1088.06 1209.44 L1088.65 1209.44 L1089.23 1209.44 L1089.82 1209.44 L1090.41 1209.44 L1090.99 1209.44 L1091.58 1209.44 L1092.17 1209.44 L1092.75 1209.44 L1093.34 1209.44 L1093.93 1209.44 L1094.51 1209.44 L1095.1 1209.44 L1095.68 1209.44 L1096.27 1209.44 L1096.86 1209.44 L1097.44 1209.44 L1098.03 1209.44 L1098.62 1209.44 L1099.2 1209.44 L1099.79 1209.44 L1100.38 1209.44 L1100.96 1209.44 L1101.55 1209.44 L1102.14 1209.44 L1102.72 1209.44 L1103.31 1209.44 L1103.89 1209.44 L1104.48 1209.44 L1105.07 1209.44 L1105.65 1209.44 L1106.24 1209.44 L1106.83 1209.44 L1107.41 1209.44 L1108 1209.44 L1108.59 1209.44 L1109.17 1209.44 L1109.76 1209.44 L1110.34 1209.44 L1110.93 1209.44 L1111.52 1209.44 L1112.1 1209.44 L1112.69 1209.44 L1113.28 1209.44 L1113.86 1209.44 L1114.45 1209.44 L1115.04 1209.44 L1115.62 1209.44 L1116.21 1209.44 L1116.8 1209.44 L1117.38 1209.44 L1117.97 1209.44 L1118.55 1209.44 L1119.14 1209.44 L1119.73 1209.44 L1120.31 1209.44 L1120.9 1209.44 L1121.49 1209.44 L1122.07 1209.44 L1122.66 1209.44 L1123.25 1209.44 L1123.83 1209.44 L1124.42 1209.44 L1125.01 1209.44 L1125.59 1209.44 L1126.18 1209.44 L1126.76 1209.44 L1127.35 1209.44 L1127.94 1209.44 L1128.52 1209.44 L1129.11 1209.44 L1129.7 1209.44 L1130.28 1209.44 L1130.87 1209.44 L1131.46 1209.44 L1132.04 1209.44 L1132.63 1209.44 L1133.21 1209.44 L1133.8 1209.44 L1134.39 1209.44 L1134.97 1209.44 L1135.56 1209.44 L1136.15 1209.44 L1136.73 1209.44 L1137.32 1209.44 L1137.91 1209.44 L1138.49 1209.44 L1139.08 1209.44 L1139.67 1209.44 L1140.25 1209.44 L1140.84 1209.44 L1141.42 1209.44 L1142.01 1209.44 L1142.6 1209.44 L1143.18 1209.44 L1143.77 1209.44 L1144.36 1209.44 L1144.94 1209.44 L1145.53 1209.44 L1146.12 1209.44 L1146.7 1209.44 L1147.29 1209.44 L1147.88 1209.44 L1148.46 1209.44 L1149.05 1209.44 L1149.63 1209.44 L1150.22 1209.44 L1150.81 1209.44 L1151.39 1209.44 L1151.98 1209.44 L1152.57 1209.44 L1153.15 1209.44 L1153.74 1209.44 L1154.33 1209.44 L1154.91 1209.44 L1155.5 1209.44 L1156.09 1209.44 L1156.67 1209.44 L1157.26 1209.44 L1157.84 1209.44 L1158.43 1209.44 L1159.02 1209.44 L1159.6 1209.44 L1160.19 1209.44 L1160.78 1209.44 L1161.36 1209.44 L1161.95 1209.44 L1162.54 1209.44 L1163.12 1209.44 L1163.71 1209.44 L1164.29 1209.44 L1164.88 1209.44 L1165.47 1209.44 L1166.05 1209.44 L1166.64 1209.44 L1167.23 1209.44 L1167.81 1209.44 L1168.4 1209.44 L1168.99 1209.44 L1169.57 1209.44 L1170.16 1209.44 L1170.75 1209.44 L1171.33 1209.44 L1171.92 1209.44 L1172.5 1209.44 L1173.09 1209.44 L1173.68 1209.44 L1174.26 1209.44 L1174.85 1209.44 L1175.44 1209.44 L1176.02 1209.44 L1176.61 1209.44 L1177.2 1209.44 L1177.78 1209.44 L1178.37 1209.44 L1178.96 1209.44 L1179.54 1209.44 L1180.13 1209.44 L1180.71 1209.44 L1181.3 1209.44 L1181.89 1209.44 L1182.47 1209.44 L1183.06 1209.44 L1183.65 1209.44 L1184.23 1209.44 L1184.82 1209.44 L1185.41 1209.44 L1185.99 1209.44 L1186.58 1209.44 L1187.16 1209.44 L1187.75 1209.44 L1188.34 1209.44 L1188.92 1209.44 L1189.51 1209.44 L1190.1 1209.44 L1190.68 1209.44 L1191.27 1209.44 L1191.86 1209.44 L1192.44 1209.44 L1193.03 1209.44 L1193.62 1209.44 L1194.2 1209.44 L1194.79 1209.44 L1195.37 1209.44 L1195.96 1209.44 L1196.55 1209.44 L1197.13 1209.44 L1197.72 1209.44 L1198.31 1209.44 L1198.89 1209.44 L1199.48 1209.44 L1200.07 1209.44 L1200.65 1209.44 L1201.24 1209.44 L1201.83 1209.44 L1202.41 1209.44 L1203 1209.44 L1203.58 1209.44 L1204.17 1209.44 L1204.76 1209.44 L1205.34 1209.44 L1205.93 1209.44 L1206.52 1209.44 L1207.1 1209.44 L1207.69 1209.44 L1208.28 1209.44 L1208.86 1209.44 L1209.45 1209.44 L1210.03 1209.44 L1210.62 1209.44 L1211.21 1209.44 L1211.79 1209.44 L1212.38 1209.44 L1212.97 1209.44 L1213.55 1209.44 L1214.14 1209.44 L1214.73 1209.44 L1215.31 1209.44 L1215.9 1209.44 L1216.49 1209.44 L1217.07 1209.44 L1217.66 1209.44 L1218.24 1209.44 L1218.83 1209.44 L1219.42 1209.44 L1220 1209.44 L1220.59 1209.44 L1221.18 1209.44 L1221.76 1209.44 L1222.35 1209.44 L1222.94 1209.44 L1223.52 1209.44 L1224.11 1209.44 L1224.7 1209.44 L1225.28 1209.44 L1225.87 1209.44 L1226.45 1209.44 L1227.04 1209.44 L1227.63 1209.44 L1228.21 1209.44 L1228.8 1209.44 L1229.39 1209.44 L1229.97 1209.44 L1230.56 1209.44 L1231.15 1209.44 L1231.73 1209.44 L1232.32 1209.44 L1232.91 1209.44 L1233.49 1209.44 L1234.08 1209.44 L1234.66 1209.44 L1235.25 1209.44 L1235.84 1209.44 L1236.42 1209.44 L1237.01 1209.44 L1237.6 1209.44 L1238.18 1209.44 L1238.77 1209.44 L1239.36 1209.44 L1239.94 1209.44 L1240.53 1209.44 L1241.11 1209.44 L1241.7 1209.44 L1242.29 1209.44 L1242.87 1209.44 L1243.46 1209.44 L1244.05 1209.44 L1244.63 1209.44 L1245.22 1209.44 L1245.81 1209.44 L1246.39 1209.44 L1246.98 1209.44 L1247.57 1209.44 L1248.15 1209.44 L1248.74 1209.44 L1249.32 1209.44 L1249.91 1209.44 L1250.5 1209.44 L1251.08 1209.44 L1251.67 1209.44 L1252.26 1209.44 L1252.84 1209.44 L1253.43 1209.44 L1254.02 1209.44 L1254.6 1209.44 L1255.19 1209.44 L1255.78 1209.44 L1256.36 1209.44 L1256.95 1209.44 L1257.53 1209.44 L1258.12 1209.44 L1258.71 1209.44 L1259.29 1209.44 L1259.88 1209.44 L1260.47 1209.44 L1261.05 1209.44 L1261.64 1209.44 L1262.23 1209.44 L1262.81 1209.44 L1263.4 1209.44 L1263.98 1209.44 L1264.57 1209.44 L1265.16 1209.44 L1265.74 1209.44 L1266.33 1209.44 L1266.92 1209.44 L1267.5 1209.44 L1268.09 1209.44 L1268.68 1209.44 L1269.26 1209.44 L1269.85 1209.44 L1270.44 1209.44 L1271.02 1209.44 L1271.61 1209.44 L1272.19 1209.44 L1272.78 1209.44 L1273.37 1209.44 L1273.95 1209.44 L1274.54 1209.44 L1275.13 1209.44 L1275.71 1209.44 L1276.3 1209.44 L1276.89 1209.44 L1277.47 1209.44 L1278.06 1209.44 L1278.65 1209.44 L1279.23 1209.44 L1279.82 1209.44 L1280.4 1209.44 L1280.99 1209.44 L1281.58 1209.44 L1282.16 1209.44 L1282.75 1209.44 L1283.34 1209.44 L1283.92 1209.44 L1284.51 1209.44 L1285.1 1209.44 L1285.68 1209.44 L1286.27 1209.44 L1286.86 1209.44 L1287.44 1209.44 L1288.03 1209.44 L1288.61 1209.44 L1289.2 1209.44 L1289.79 1209.44 L1290.37 1209.44 L1290.96 1209.44 L1291.55 1209.44 L1292.13 1209.44 L1292.72 1209.44 L1293.31 1209.44 L1293.89 1209.44 L1294.48 1209.44 L1295.06 1209.44 L1295.65 1209.44 L1296.24 1209.44 L1296.82 1209.44 L1297.41 1209.44 L1298 1209.44 L1298.58 1209.44 L1299.17 1209.44 L1299.76 1209.44 L1300.34 1209.44 L1300.93 1209.44 L1301.52 1209.44 L1302.1 1209.44 L1302.69 1209.44 L1303.27 1209.44 L1303.86 1209.44 L1304.45 1209.44 L1305.03 1209.44 L1305.62 1209.44 L1306.21 1209.44 L1306.79 1209.44 L1307.38 1209.44 L1307.97 1209.44 L1308.55 1209.44 L1309.14 1209.44 L1309.73 1209.44 L1310.31 1209.44 L1310.9 1209.44 L1311.48 1209.44 L1312.07 1209.44 L1312.66 1209.44 L1313.24 1209.44 L1313.83 1209.44 L1314.42 1209.44 L1315 1209.44 L1315.59 1209.44 L1316.18 1209.44 L1316.76 1209.44 L1317.35 1209.44 L1317.93 1209.44 L1318.52 1209.44 L1319.11 1209.44 L1319.69 1209.44 L1320.28 1209.44 L1320.87 1209.44 L1321.45 1209.44 L1322.04 1209.44 L1322.63 1209.44 L1323.21 1209.44 L1323.8 1209.44 L1324.39 1209.44 L1324.97 1209.44 L1325.56 1209.44 L1326.14 1209.44 L1326.73 1209.44 L1327.32 1209.44 L1327.9 1209.44 L1328.49 1209.44 L1329.08 1209.44 L1329.66 1209.44 L1330.25 1209.44 L1330.84 1209.44 L1331.42 1209.44 L1332.01 1209.44 L1332.6 1209.44 L1333.18 1209.44 L1333.77 1209.44 L1334.35 1209.44 L1334.94 1209.44 L1335.53 1209.44 L1336.11 1209.44 L1336.7 1209.44 L1337.29 1209.44 L1337.87 1209.44 L1338.46 1209.44 L1339.05 1209.44 L1339.63 1209.44 L1340.22 1209.44 L1340.8 1209.44 L1341.39 1209.44 L1341.98 1209.44 L1342.56 1209.44 L1343.15 1209.44 L1343.74 1209.44 L1344.32 1209.44 L1344.91 1209.44 L1345.5 1209.44 L1346.08 1209.44 L1346.67 1209.44 L1347.26 1209.44 L1347.84 1209.44 L1348.43 1209.44 L1349.01 1209.44 L1349.6 1209.44 L1350.19 1209.44 L1350.77 1209.44 L1351.36 1209.44 L1351.95 1209.44 L1352.53 1209.44 L1353.12 1209.44 L1353.71 1209.44 L1354.29 1209.44 L1354.88 1209.44 L1355.47 1209.44 L1356.05 1209.44 L1356.64 1209.44 L1357.22 1209.44 L1357.81 1209.44 L1358.4 1209.44 L1358.98 1209.44 L1359.57 1209.44 L1360.16 1209.44 L1360.74 1209.44 L1361.33 1209.44 L1361.92 1209.44 L1362.5 1209.44 L1363.09 1209.44 L1363.68 1209.44 L1364.26 1209.44 L1364.85 1209.44 L1365.43 1209.44 L1366.02 1209.44 L1366.61 1209.44 L1367.19 1209.44 L1367.78 1209.44 L1368.37 1209.44 L1368.95 1209.44 L1369.54 1209.44 L1370.13 1209.44 L1370.71 1209.44 L1371.3 1209.44 L1371.88 1209.44 L1372.47 1209.44 L1373.06 1209.44 L1373.64 1209.44 L1374.23 1209.44 L1374.82 1209.44 L1375.4 1209.44 L1375.99 1209.44 L1376.58 1209.44 L1377.16 1209.44 L1377.75 1209.44 L1378.34 1209.44 L1378.92 1209.44 L1379.51 1209.44 L1380.09 1209.44 L1380.68 1209.44 L1381.27 1209.44 L1381.85 1209.44 L1382.44 1209.44 L1383.03 1209.44 L1383.61 1209.44 L1384.2 1209.44 L1384.79 1209.44 L1385.37 1209.44 L1385.96 1209.44 L1386.55 1209.44 L1387.13 1209.44 L1387.72 1209.44 L1388.3 1209.44 L1388.89 1209.44 L1389.48 1209.44 L1390.06 1209.44 L1390.65 1209.44 L1391.24 1209.44 L1391.82 1209.44 L1392.41 1209.44 L1393 1209.44 L1393.58 1209.44 L1394.17 1209.44 L1394.75 1209.44 L1395.34 1209.44 L1395.93 1209.44 L1396.51 1209.44 L1397.1 1209.44 L1397.69 1209.44 L1398.27 1209.44 L1398.86 1209.44 L1399.45 1209.44 L1400.03 1209.44 L1400.62 1209.44 L1401.21 1209.44 L1401.79 1209.44 L1402.38 1209.44 L1402.96 1209.44 L1403.55 1209.44 L1404.14 1209.44 L1404.72 1209.44 L1405.31 1209.44 L1405.9 1209.44 L1406.48 1209.44 L1407.07 1209.44 L1407.66 1209.44 L1408.24 1209.44 L1408.83 1209.44 L1409.42 1209.44 L1410 1209.44 L1410.59 1209.44 L1411.17 1209.44 L1411.76 1209.44 L1412.35 1209.44 L1412.93 1209.44 L1413.52 1209.44 L1414.11 1209.44 L1414.69 1209.44 L1415.28 1209.44 L1415.87 1209.44 L1416.45 1209.44 L1417.04 1209.44 L1417.63 1209.44 L1418.21 1209.44 L1418.8 1209.44 L1419.38 1209.44 L1419.97 1209.44 L1420.56 1209.44 L1421.14 1209.44 L1421.73 1209.44 L1422.32 1209.44 L1422.9 1209.44 L1423.49 1209.44 L1424.08 1209.44 L1424.66 1209.44 L1425.25 1209.44 L1425.83 1209.44 L1426.42 1209.44 L1427.01 1209.44 L1427.59 1209.44 L1428.18 1209.44 L1428.77 1209.44 L1429.35 1209.44 L1429.94 1209.44 L1430.53 1209.44 L1431.11 1209.44 L1431.7 1209.44 L1432.29 1209.44 L1432.87 1209.44 L1433.46 1209.44 L1434.04 1209.44 L1434.63 1209.44 L1435.22 1209.44 L1435.8 1209.44 L1436.39 1209.44 L1436.98 1209.44 L1437.56 1209.44 L1438.15 1209.44 L1438.74 1209.44 L1439.32 1209.44 L1439.91 1209.44 L1440.5 1209.44 L1441.08 1209.44 L1441.67 1209.44 L1442.25 1209.44 L1442.84 1209.44 L1443.43 1209.44 L1444.01 1209.44 L1444.6 1209.44 L1445.19 1209.44 L1445.77 1209.44 L1446.36 1209.44 L1446.95 1209.44 L1447.53 1209.44 L1448.12 1209.44 L1448.7 1209.44 L1449.29 1209.44 L1449.88 1209.44 L1450.46 1209.44 L1451.05 1209.44 L1451.64 1209.44 L1452.22 1209.44 L1452.81 1209.44 L1453.4 1209.44 L1453.98 1209.44 L1454.57 1209.44 L1455.16 1209.44 L1455.74 1209.44 L1456.33 1209.44 L1456.91 1209.44 L1457.5 1209.44 L1458.09 1209.44 L1458.67 1209.44 L1459.26 1209.44 L1459.85 1209.44 L1460.43 1209.44 L1461.02 1209.44 L1461.61 1209.44 L1462.19 1209.44 L1462.78 1209.44 L1463.37 1209.44 L1463.95 1209.44 L1464.54 1209.44 L1465.12 1209.44 L1465.71 1209.44 L1466.3 1209.44 L1466.88 1209.44 L1467.47 1209.44 L1468.06 1209.44 L1468.64 1209.44 L1469.23 1209.44 L1469.82 1209.44 L1470.4 1209.44 L1470.99 1209.44 L1471.57 1209.44 L1472.16 1209.44 L1472.75 1209.44 L1473.33 1209.44 L1473.92 1209.44 L1474.51 1209.44 L1475.09 1209.44 L1475.68 1209.44 L1476.27 1209.44 L1476.85 1209.44 L1477.44 1209.44 L1478.03 1209.44 L1478.61 1209.44 L1479.2 1209.44 L1479.78 1209.44 L1480.37 1209.44 L1480.96 1209.44 L1481.54 1209.44 L1482.13 1209.44 L1482.72 1209.44 L1483.3 1209.44 L1483.89 1209.44 L1484.48 1209.44 L1485.06 1209.44 L1485.65 1209.44 L1486.24 1209.44 L1486.82 1209.44 L1487.41 1209.44 L1487.99 1209.44 L1488.58 1209.44 L1489.17 1209.44 L1489.75 1209.44 L1490.34 1209.44 L1490.93 1209.44 L1491.51 1209.44 L1492.1 1209.44 L1492.69 1209.44 L1493.27 1209.44 L1493.86 1209.44 L1494.45 1209.44 L1495.03 1209.44 L1495.62 1209.44 L1496.2 1209.44 L1496.79 1209.44 L1497.38 1209.44 L1497.96 1209.44 L1498.55 1209.44 L1499.14 1209.44 L1499.72 1209.44 L1500.31 1209.44 L1500.9 1209.44 L1501.48 1209.44 L1502.07 1209.44 L1502.65 1209.44 L1503.24 1209.44 L1503.83 1209.44 L1504.41 1209.44 L1505 1209.44 L1505.59 1209.44 L1506.17 1209.44 L1506.76 1209.44 L1507.35 1209.44 L1507.93 1209.44 L1508.52 1209.44 L1509.11 1209.44 L1509.69 1209.44 L1510.28 1209.44 L1510.86 1209.44 L1511.45 1209.44 L1512.04 1209.44 L1512.62 1209.44 L1513.21 1209.44 L1513.8 1209.44 L1514.38 1209.44 L1514.97 1209.44 L1515.56 1209.44 L1516.14 1209.44 L1516.73 1209.44 L1517.32 1209.44 L1517.9 1209.44 L1518.49 1209.44 L1519.07 1209.44 L1519.66 1209.44 L1520.25 1209.44 L1520.83 1209.44 L1521.42 1209.44 L1522.01 1209.44 L1522.59 1209.44 L1523.18 1209.44 L1523.77 1209.44 L1524.35 1209.44 L1524.94 1209.44 L1525.52 1209.44 L1526.11 1209.44 L1526.7 1209.44 L1527.28 1209.44 L1527.87 1209.44 L1528.46 1209.44 L1529.04 1209.44 L1529.63 1209.44 L1530.22 1209.44 L1530.8 1209.44 L1531.39 1209.44 L1531.98 1209.44 L1532.56 1209.44 L1533.15 1209.44 L1533.73 1209.44 L1534.32 1209.44 L1534.91 1209.44 L1535.49 1209.44 L1536.08 1209.44 L1536.67 1209.44 L1537.25 1209.44 L1537.84 1209.44 L1538.43 1209.44 L1539.01 1209.44 L1539.6 1209.44 L1540.19 1209.44 L1540.77 1209.44 L1541.36 1209.44 L1541.94 1209.44 L1542.53 1209.44 L1543.12 1209.44 L1543.7 1209.44 L1544.29 1209.44 L1544.88 1209.44 L1545.46 1209.44 L1546.05 1209.44 L1546.64 1209.44 L1547.22 1209.44 L1547.81 1209.44 L1548.4 1209.44 L1548.98 1209.44 L1549.57 1209.44 L1550.15 1209.44 L1550.74 1209.44 L1551.33 1209.44 L1551.91 1209.44 L1552.5 1209.44 L1553.09 1209.44 L1553.67 1209.44 L1554.26 1209.44 L1554.85 1209.44 L1555.43 1209.44 L1556.02 1209.44 L1556.6 1209.44 L1557.19 1209.44 L1557.78 1209.44 L1558.36 1209.44 L1558.95 1209.44 L1559.54 1209.44 L1560.12 1209.44 L1560.71 1209.44 L1561.3 1209.44 L1561.88 1209.44 L1562.47 1209.44 L1563.06 1209.44 L1563.64 1209.44 L1564.23 1209.44 L1564.81 1209.44 L1565.4 1209.44 L1565.99 1209.44 L1566.57 1209.44 L1567.16 1209.44 L1567.75 1209.44 L1568.33 1209.44 L1568.92 1209.44 L1569.51 1209.44 L1570.09 1209.44 L1570.68 1209.44 L1571.27 1209.44 L1571.85 1209.44 L1572.44 1209.44 L1573.02 1209.44 L1573.61 1209.44 L1574.2 1209.44 L1574.78 1209.44 L1575.37 1209.44 L1575.96 1209.44 L1576.54 1209.44 L1577.13 1209.44 L1577.72 1209.44 L1578.3 1209.44 L1578.89 1209.44 L1579.47 1209.44 L1580.06 1209.44 L1580.65 1209.44 L1581.23 1209.44 L1581.82 1209.44 L1582.41 1209.44 L1582.99 1209.44 L1583.58 1209.44 L1584.17 1209.44 L1584.75 1209.44 L1585.34 1209.44 L1585.93 1209.44 L1586.51 1209.44 L1587.1 1209.44 L1587.68 1209.44 L1588.27 1209.44 L1588.86 1209.44 L1589.44 1209.44 L1590.03 1209.44 L1590.62 1209.44 L1591.2 1209.44 L1591.79 1209.44 L1592.38 1209.44 L1592.96 1209.44 L1593.55 1209.44 L1594.14 1209.44 L1594.72 1209.44 L1595.31 1209.44 L1595.89 1209.44 L1596.48 1209.44 L1597.07 1209.44 L1597.65 1209.44 L1598.24 1209.44 L1598.83 1209.44 L1599.41 1209.44 L1600 1209.44 L1600.59 1209.44 L1601.17 1209.44 L1601.76 1209.44 L1602.34 1209.44 L1602.93 1209.44 L1603.52 1209.44 L1604.1 1209.44 L1604.69 1209.44 L1605.28 1209.44 L1605.86 1209.44 L1606.45 1209.44 L1607.04 1209.44 L1607.62 1209.44 L1608.21 1209.44 L1608.8 1209.44 L1609.38 1209.44 L1609.97 1209.44 L1610.55 1209.44 L1611.14 1209.44 L1611.73 1209.44 L1612.31 1209.44 L1612.9 1209.44 L1613.49 1209.44 L1614.07 1209.44 L1614.66 1209.44 L1615.25 1209.44 L1615.83 1209.44 L1616.42 1209.44 L1617.01 1209.44 L1617.59 1209.44 L1618.18 1209.44 L1618.76 1209.44 L1619.35 1209.44 L1619.94 1209.44 L1620.52 1209.44 L1621.11 1209.44 L1621.7 1209.44 L1622.28 1209.44 L1622.87 1209.44 L1623.46 1209.44 L1624.04 1209.44 L1624.63 1209.44 L1625.22 1209.44 L1625.8 1209.44 L1626.39 1209.44 L1626.97 1209.44 L1627.56 1209.44 L1628.15 1209.44 L1628.73 1209.44 L1629.32 1209.44 L1629.91 1209.44 L1630.49 1209.44 L1631.08 1209.44 L1631.67 1209.44 L1632.25 1209.44 L1632.84 1209.44 L1633.42 1209.44 L1634.01 1209.44 L1634.6 1209.44 L1635.18 1209.44 L1635.77 1209.44 L1636.36 1209.44 L1636.94 1209.44 L1637.53 1209.44 L1638.12 1209.44 L1638.7 1209.44 L1639.29 1209.44 L1639.88 1209.44 L1640.46 1209.44 L1641.05 1209.44 L1641.63 1209.44 L1642.22 1209.44 L1642.81 1209.44 L1643.39 1209.44 L1643.98 1209.44 L1644.57 1209.44 L1645.15 1209.44 L1645.74 1209.44 L1646.33 1209.44 L1646.91 1209.44 L1647.5 1209.44 L1648.09 1209.44 L1648.67 1209.44 L1649.26 1209.44 L1649.84 1209.44 L1650.43 1209.44 L1651.02 1209.44 L1651.6 1209.44 L1652.19 1209.44 L1652.78 1209.44 L1653.36 1209.44 L1653.95 1209.44 L1654.54 1209.44 L1655.12 1209.44 L1655.71 1209.44 L1656.29 1209.44 L1656.88 1209.44 L1657.47 1209.44 L1658.05 1209.44 L1658.64 1209.44 L1659.23 1209.44 L1659.81 1209.44 L1660.4 1209.44 L1660.99 1209.44 L1661.57 1209.44 L1662.16 1209.44 L1662.75 1209.44 L1663.33 1209.44 L1663.92 1209.44 L1664.5 1209.44 L1665.09 1209.44 L1665.68 1209.44 L1666.26 1209.44 L1666.85 1209.44 L1667.44 1209.44 L1668.02 1209.44 L1668.61 1209.44 L1669.2 1209.44 L1669.78 1209.44 L1670.37 1209.44 L1670.96 1209.44 L1671.54 1209.44 L1672.13 1209.44 L1672.71 1209.44 L1673.3 1209.44 L1673.89 1209.44 L1674.47 1209.44 L1675.06 1209.44 L1675.65 1209.44 L1676.23 1209.44 L1676.82 1209.44 L1677.41 1209.44 L1677.99 1209.44 L1678.58 1209.44 L1679.17 1209.44 L1679.75 1209.44 L1680.34 1209.44 L1680.92 1209.44 L1681.51 1209.44 L1682.1 1209.44 L1682.68 1209.44 L1683.27 1209.44 L1683.86 1209.44 L1684.44 1209.44 L1685.03 1209.44 L1685.62 1209.44 L1686.2 1209.44 L1686.79 1209.44 L1687.37 1209.44 L1687.96 1209.44 L1688.55 1209.44 L1689.13 1209.44 L1689.72 1209.44 L1690.31 1209.44 L1690.89 1209.44 L1691.48 1209.44 L1692.07 1209.44 L1692.65 1209.44 L1693.24 1209.44 L1693.83 1209.44 L1694.41 1209.44 L1695 1209.44 L1695.58 1209.44 L1696.17 1209.44 L1696.76 1209.44 L1697.34 1209.44 L1697.93 1209.44 L1698.52 1209.44 L1699.1 1209.44 L1699.69 1209.44 L1700.28 1209.44 L1700.86 1209.44 L1701.45 1209.44 L1702.04 1209.44 L1702.62 1209.44 L1703.21 1209.44 L1703.79 1209.44 L1704.38 1209.44 L1704.97 1209.44 L1705.55 1209.44 L1706.14 1209.44 L1706.73 1209.44 L1707.31 1209.44 L1707.9 1209.44 L1708.49 1209.44 L1709.07 1209.44 L1709.66 1209.44 L1710.24 1209.44 L1710.83 1209.44 L1711.42 1209.44 L1712 1209.44 L1712.59 1209.44 L1713.18 1209.44 L1713.76 1209.44 L1714.35 1209.44 L1714.94 1209.44 L1715.52 1209.44 L1716.11 1209.44 L1716.7 1209.44 L1717.28 1209.44 L1717.87 1209.44 L1718.45 1209.44 L1719.04 1209.44 L1719.63 1209.44 L1720.21 1209.44 L1720.8 1209.44 L1721.39 1209.44 L1721.97 1209.44 L1722.56 1209.44 L1723.15 1209.44 L1723.73 1209.44 L1724.32 1209.44 L1724.91 1209.44 L1725.49 1209.44 L1726.08 1209.44 L1726.66 1209.44 L1727.25 1209.44 L1727.84 1209.44 L1728.42 1209.44 L1729.01 1209.44 L1729.6 1209.44 L1730.18 1209.44 L1730.77 1209.44 L1731.36 1209.44 L1731.94 1209.44 L1732.53 1209.44 L1733.11 1209.44 L1733.7 1209.44 L1734.29 1209.44 L1734.87 1209.44 L1735.46 1209.44 L1736.05 1209.44 L1736.63 1209.44 L1737.22 1209.44 L1737.81 1209.44 L1738.39 1209.44 L1738.98 1209.44 L1739.57 1209.44 L1740.15 1209.44 L1740.74 1209.44 L1741.32 1209.44 L1741.91 1209.44 L1742.5 1209.44 L1743.08 1209.44 L1743.67 1209.44 L1744.26 1209.44 L1744.84 1209.44 L1745.43 1209.44 L1746.02 1209.44 L1746.6 1209.44 L1747.19 1209.44 L1747.78 1209.44 L1748.36 1209.44 L1748.95 1209.44 L1749.53 1209.44 L1750.12 1209.44 L1750.71 1209.44 L1751.29 1209.44 L1751.88 1209.44 L1752.47 1209.44 L1753.05 1209.44 L1753.64 1209.44 L1754.23 1209.44 L1754.81 1209.44 L1755.4 1209.44 L1755.99 1209.44 L1756.57 1209.44 L1757.16 1209.44 L1757.74 1209.44 L1758.33 1209.44 L1758.92 1209.44 L1759.5 1209.44 L1760.09 1209.44 L1760.68 1209.44 L1761.26 1209.44 L1761.85 1209.44 L1762.44 1209.44 L1763.02 1209.44 L1763.61 1209.44 L1764.19 1209.44 L1764.78 1209.44 L1765.37 1209.44 L1765.95 1209.44 L1766.54 1209.44 L1767.13 1209.44 L1767.71 1209.44 L1768.3 1209.44 L1768.89 1209.44 L1769.47 1209.44 L1770.06 1209.44 L1770.65 1209.44 L1771.23 1209.44 L1771.82 1209.44 L1772.4 1209.44 L1772.99 1209.44 L1773.58 1209.44 L1774.16 1209.44 L1774.75 1209.44 L1775.34 1209.44 L1775.92 1209.44 L1776.51 1209.44 L1777.1 1209.44 L1777.68 1209.44 L1778.27 1209.44 L1778.86 1209.44 L1779.44 1209.44 L1780.03 1209.44 L1780.61 1209.44 L1781.2 1209.44 L1781.79 1209.44 L1782.37 1209.44 L1782.96 1209.44 L1783.55 1209.44 L1784.13 1209.44 L1784.72 1209.44 L1785.31 1209.44 L1785.89 1209.44 L1786.48 1209.44 L1787.06 1209.44 L1787.65 1209.44 L1788.24 1209.44 L1788.82 1209.44 L1789.41 1209.44 L1790 1209.44 L1790.58 1209.44 L1791.17 1209.44 L1791.76 1209.44 L1792.34 1209.44 L1792.93 1209.44 L1793.52 1209.44 L1794.1 1209.44 L1794.69 1209.44 L1795.27 1209.44 L1795.86 1209.44 L1796.45 1209.44 L1797.03 1209.44 L1797.62 1209.44 L1798.21 1209.44 L1798.79 1209.44 L1799.38 1209.44 L1799.97 1209.44 L1800.55 1209.44 L1801.14 1209.44 L1801.73 1209.44 L1802.31 1209.44 L1802.9 1209.44 L1803.48 1209.44 L1804.07 1209.44 L1804.66 1209.44 L1805.24 1209.44 L1805.83 1209.44 L1806.42 1209.44 L1807 1209.44 L1807.59 1209.44 L1808.18 1209.44 L1808.76 1209.44 L1809.35 1209.44 L1809.94 1209.44 L1810.52 1209.44 L1811.11 1209.44 L1811.69 1209.44 L1812.28 1209.44 L1812.87 1209.44 L1813.45 1209.44 L1814.04 1209.44 L1814.63 1209.44 L1815.21 1209.44 L1815.8 1209.44 L1816.39 1209.44 L1816.97 1209.44 L1817.56 1209.44 L1818.14 1209.44 L1818.73 1209.44 L1819.32 1209.44 L1819.9 1209.44 L1820.49 1209.44 L1821.08 1209.44 L1821.66 1209.44 L1822.25 1209.44 L1822.84 1209.44 L1823.42 1209.44 L1824.01 1209.44 L1824.6 1209.44 L1825.18 1209.44 L1825.77 1209.44 L1826.35 1209.44 L1826.94 1209.44 L1827.53 1209.44 L1828.11 1209.44 L1828.7 1209.44 L1829.29 1209.44 L1829.87 1209.44 L1830.46 1209.44 L1831.05 1209.44 L1831.63 1209.44 L1832.22 1209.44 L1832.81 1209.44 L1833.39 1209.44 L1833.98 1209.44 L1834.56 1209.44 L1835.15 1209.44 L1835.74 1209.44 L1836.32 1209.44 L1836.91 1209.44 L1837.5 1209.44 L1838.08 1209.44 L1838.67 1209.44 L1839.26 1209.44 L1839.84 1209.44 L1840.43 1209.44 L1841.01 1209.44 L1841.6 1209.44 L1842.19 1209.44 L1842.77 1209.44 L1843.36 1209.44 L1843.95 1209.44 L1844.53 1209.44 L1845.12 1209.44 L1845.71 1209.44 L1846.29 1209.44 L1846.88 1209.44 L1847.47 1209.44 L1848.05 1209.44 L1848.64 1209.44 L1849.22 1209.44 L1849.81 1209.44 L1850.4 1209.44 L1850.98 1209.44 L1851.57 1209.44 L1852.16 1209.44 L1852.74 1209.44 L1853.33 1209.44 L1853.92 1209.44 L1854.5 1209.44 L1855.09 1209.44 L1855.68 1209.44 L1856.26 1209.44 L1856.85 1209.44 L1857.43 1209.44 L1858.02 1209.44 L1858.61 1209.44 L1859.19 1209.44 L1859.78 1209.44 L1860.37 1209.44 L1860.95 1209.44 L1861.54 1209.44 L1862.13 1209.44 L1862.71 1209.44 L1863.3 1209.44 L1863.88 1209.44 L1864.47 1209.44 L1865.06 1209.44 L1865.64 1209.44 L1866.23 1209.44 L1866.82 1209.44 L1867.4 1209.44 L1867.99 1209.44 L1868.58 1209.44 L1869.16 1209.44 L1869.75 1209.44 L1870.34 1209.44 L1870.92 1209.44 L1871.51 1209.44 L1872.09 1209.44 L1872.68 1209.44 L1873.27 1209.44 L1873.85 1209.44 L1874.44 1209.44 L1875.03 1209.44 L1875.61 1209.44 L1876.2 1209.44 L1876.79 1209.44 L1877.37 1209.44 L1877.96 1209.44 L1878.55 1209.44 L1879.13 1209.44 L1879.72 1209.44 L1880.3 1209.44 L1880.89 1209.44 L1881.48 1209.44 L1882.06 1209.44 L1882.65 1209.44 L1883.24 1209.44 L1883.82 1209.44 L1884.41 1209.44 L1885 1209.44 L1885.58 1209.44 L1886.17 1209.44 L1886.76 1209.44 L1887.34 1209.44 L1887.93 1209.44 L1888.51 1209.44 L1889.1 1209.44 L1889.69 1209.44 L1890.27 1209.44 L1890.86 1209.44 L1891.45 1209.44 L1892.03 1209.44 L1892.62 1209.44 L1893.21 1209.44 L1893.79 1209.44 L1894.38 1209.44 L1894.96 1209.44 L1895.55 1209.44 L1896.14 1209.44 L1896.72 1209.44 L1897.31 1209.44 L1897.9 1209.44 L1898.48 1209.44 L1899.07 1209.44 L1899.66 1209.44 L1900.24 1209.44 L1900.83 1209.44 L1901.42 1209.44 L1902 1209.44 L1902.59 1209.44 L1903.17 1209.44 L1903.76 1209.44 L1904.35 1209.44 L1904.93 1209.44 L1905.52 1209.44 L1906.11 1209.44 L1906.69 1209.44 L1907.28 1209.44 L1907.87 1209.44 L1908.45 1209.44 L1909.04 1209.44 L1909.63 1209.44 L1910.21 1209.44 L1910.8 1209.44 L1911.38 1209.44 L1911.97 1209.44 L1912.56 1209.44 L1913.14 1209.44 L1913.73 1209.44 L1914.32 1209.44 L1914.9 1209.44 L1915.49 1209.44 L1916.08 1209.44 L1916.66 1209.44 L1917.25 1209.44 L1917.83 1209.44 L1918.42 1209.44 L1919.01 1209.44 L1919.59 1209.44 L1920.18 1209.44 L1920.77 1209.44 L1921.35 1209.44 L1921.94 1209.44 L1922.53 1209.44 L1923.11 1209.44 L1923.7 1209.44 L1924.29 1209.44 L1924.87 1209.44 L1925.46 1209.44 L1926.04 1209.44 L1926.63 1209.44 L1927.22 1209.44 L1927.8 1209.44 L1928.39 1209.44 L1928.98 1209.44 L1929.56 1209.44 L1930.15 1209.44 L1930.74 1209.44 L1931.32 1209.44 L1931.91 1209.44 L1932.5 1209.44 L1933.08 1209.44 L1933.67 1209.44 L1934.25 1209.44 L1934.84 1209.44 L1935.43 1209.44 L1936.01 1209.44 L1936.6 1209.44 L1937.19 1209.44 L1937.77 1209.44 L1938.36 1209.44 L1938.95 1209.44 L1939.53 1209.44 L1940.12 1209.44 L1940.71 1209.44 L1941.29 1209.44 L1941.88 1209.44 L1942.46 1209.44 L1943.05 1209.44 L1943.64 1209.44 L1944.22 1209.44 L1944.81 1209.44 L1945.4 1209.44 L1945.98 1209.44 L1946.57 1209.44 L1947.16 1209.44 L1947.74 1209.44 L1948.33 1209.44 L1948.91 1209.44 L1949.5 1209.44 L1950.09 1209.44 L1950.67 1209.44 L1951.26 1209.44 L1951.85 1209.44 L1952.43 1209.44 L1953.02 1209.44 L1953.61 1209.44 L1954.19 1209.44 L1954.78 1209.44 L1955.37 1209.44 L1955.95 1209.44 L1956.54 1209.44 L1957.12 1209.44 L1957.71 1209.44 L1958.3 1209.44 L1958.88 1209.44 L1959.47 1209.44 L1960.06 1209.44 L1960.64 1209.44 L1961.23 1209.44 L1961.82 1209.44 L1962.4 1209.44 L1962.99 1209.44 L1963.58 1209.44 L1964.16 1209.44 L1964.75 1209.44 L1965.33 1209.44 L1965.92 1209.44 L1966.51 1209.44 L1967.09 1209.44 L1967.68 1209.44 L1968.27 1209.44 L1968.85 1209.44 L1969.44 1209.44 L1970.03 1209.44 L1970.61 1209.44 L1971.2 1209.44 L1971.78 1209.44 L1972.37 1209.44 L1972.96 1209.44 L1973.54 1209.44 L1974.13 1209.44 L1974.72 1209.44 L1975.3 1209.44 L1975.89 1209.44 L1976.48 1209.44 L1977.06 1209.44 L1977.65 1209.44 L1978.24 1209.44 L1978.82 1209.44 L1979.41 1209.44 L1979.99 1209.44 L1980.58 1209.44 L1981.17 1209.44 L1981.75 1209.44 L1982.34 1209.44 L1982.93 1209.44 L1983.51 1209.44 L1984.1 1209.44 L1984.69 1209.44 L1985.27 1209.44 L1985.86 1209.44 L1986.45 1209.44 L1987.03 1209.44 L1987.62 1209.44 L1988.2 1209.44 L1988.79 1209.44 L1989.38 1209.44 L1989.96 1209.44 L1990.55 1209.44 L1991.14 1209.44 L1991.72 1209.44 L1992.31 1209.44 L1992.9 1209.44 L1993.48 1209.44 L1994.07 1209.44 L1994.65 1209.44 L1995.24 1209.44 L1995.83 1209.44 L1996.41 1209.44 L1997 1209.44 L1997.59 1209.44 L1998.17 1209.44 L1998.76 1209.44 L1999.35 1209.44 L1999.93 1209.44 L2000.52 1209.44 L2001.11 1209.44 L2001.69 1209.44 L2002.28 1209.44 L2002.86 1209.44 L2003.45 1209.44 L2004.04 1209.44 L2004.62 1209.44 L2005.21 1209.44 L2005.8 1209.44 L2006.38 1209.44 L2006.97 1209.44 L2007.56 1209.44 L2008.14 1209.44 L2008.73 1209.44 L2009.32 1209.44 L2009.9 1209.44 L2010.49 1209.44 L2011.07 1209.44 L2011.66 1209.44 L2012.25 1209.44 L2012.83 1209.44 L2013.42 1209.44 L2014.01 1209.44 L2014.59 1209.44 L2015.18 1209.44 L2015.77 1209.44 L2016.35 1209.44 L2016.94 1209.44 L2017.53 1209.44 L2018.11 1209.44 L2018.7 1209.44 L2019.28 1209.44 L2019.87 1209.44 L2020.46 1209.44 L2021.04 1209.44 L2021.63 1209.44 L2022.22 1209.44 L2022.8 1209.44 L2023.39 1209.44 L2023.98 1209.44 L2024.56 1209.44 L2025.15 1209.44 L2025.73 1209.44 L2026.32 1209.44 L2026.91 1209.44 L2027.49 1209.44 L2028.08 1209.44 L2028.67 1209.44 L2029.25 1209.44 L2029.84 1209.44 L2030.43 1209.44 L2031.01 1209.44 L2031.6 1209.44 L2032.19 1209.44 L2032.77 1209.44 L2033.36 1209.44 L2033.94 1209.44 L2034.53 1209.44 L2035.12 1209.44 L2035.7 1209.44 L2036.29 1209.44 L2036.88 1209.44 L2037.46 1209.44 L2038.05 1209.44 L2038.64 1209.44 L2039.22 1209.44 L2039.81 1209.44 L2040.4 1209.44 L2040.98 1209.44 L2041.57 1209.44 L2042.15 1209.44 L2042.74 1209.44 L2043.33 1209.44 L2043.91 1209.44 L2044.5 1209.44 L2045.09 1209.44 L2045.67 1209.44 L2046.26 1209.44 L2046.85 1209.44 L2047.43 1209.44 L2048.02 1209.44 L2048.6 1209.44 L2049.19 1209.44 L2049.78 1209.44 L2050.36 1209.44 L2050.95 1209.44 L2051.54 1209.44 L2052.12 1209.44 L2052.71 1209.44 L2053.3 1209.44 L2053.88 1209.44 L2054.47 1209.44 L2055.06 1209.44 L2055.64 1209.44 L2056.23 1209.44 L2056.81 1209.44 L2057.4 1209.44 L2057.99 1209.44 L2058.57 1209.44 L2059.16 1209.44 L2059.75 1209.44 L2060.33 1209.44 L2060.92 1209.44 L2061.51 1209.44 L2062.09 1209.44 L2062.68 1209.44 L2063.27 1209.44 L2063.85 1209.44 L2064.44 1209.44 L2065.02 1209.44 L2065.61 1209.44 L2066.2 1209.44 L2066.78 1209.44 L2067.37 1209.44 L2067.96 1209.44 L2068.54 1209.44 L2069.13 1209.44 L2069.72 1209.44 L2070.3 1209.44 L2070.89 1209.44 L2071.48 1209.44 L2072.06 1209.44 L2072.65 1209.44 L2073.23 1209.44 L2073.82 1209.44 L2074.41 1209.44 L2074.99 1209.44 L2075.58 1209.44 L2076.17 1209.44 L2076.75 1209.44 L2077.34 1209.44 L2077.93 1209.44 L2078.51 1209.44 L2079.1 1209.44 L2079.68 1209.44 L2080.27 1209.44 L2080.86 1209.44 L2081.44 1209.44 L2082.03 1209.44 L2082.62 1209.44 L2083.2 1209.44 L2083.79 1209.44 L2084.38 1209.44 L2084.96 1209.44 L2085.55 1209.44 L2086.14 1209.44 L2086.72 1209.44 L2087.31 1209.44 L2087.89 1209.44 L2088.48 1209.44 L2089.07 1209.44 L2089.65 1209.44 L2090.24 1209.44 L2090.83 1209.44 L2091.41 1209.44 L2092 1209.44 L2092.59 1209.44 L2093.17 1209.44 L2093.76 1209.44 L2094.35 1209.44 L2094.93 1209.44 L2095.52 1209.44 L2096.1 1209.44 L2096.69 1209.44 L2097.28 1209.44 L2097.86 1209.44 L2098.45 1209.44 L2099.04 1209.44 L2099.62 1209.44 L2100.21 1209.44 L2100.8 1209.44 L2101.38 1209.44 L2101.97 1209.44 L2102.55 1209.44 L2103.14 1209.44 L2103.73 1209.44 L2104.31 1209.44 L2104.9 1209.44 L2105.49 1209.44 L2106.07 1209.44 L2106.66 1209.44 L2107.25 1209.44 L2107.83 1209.44 L2108.42 1209.44 L2109.01 1209.44 L2109.59 1209.44 L2110.18 1209.44 L2110.76 1209.44 L2111.35 1209.44 L2111.94 1209.44 L2112.52 1209.44 L2113.11 1209.44 L2113.7 1209.44 L2114.28 1209.44 L2114.87 1209.44 L2115.46 1209.44 L2116.04 1209.44 L2116.63 1209.44 L2117.22 1209.44 L2117.8 1209.44 L2118.39 1209.44 L2118.97 1209.44 L2119.56 1209.44 L2120.15 1209.44 L2120.73 1209.44 L2121.32 1209.44 L2121.91 1209.44 L2122.49 1209.44 L2123.08 1209.44 L2123.67 1209.44 L2124.25 1209.44 L2124.84 1209.44 L2125.42 1209.44 L2126.01 1209.44 L2126.6 1209.44 L2127.18 1209.44 L2127.77 1209.44 L2128.36 1209.44 L2128.94 1209.44 L2129.53 1209.44 L2130.12 1209.44 L2130.7 1209.44 L2131.29 1209.44 L2131.88 1209.44 L2132.46 1209.44 L2133.05 1209.44 L2133.63 1209.44 L2134.22 1209.44 L2134.81 1209.44 L2135.39 1209.44 L2135.98 1209.44 L2136.57 1209.44 L2137.15 1209.44 L2137.74 1209.44 L2138.33 1209.44 L2138.91 1209.44 L2139.5 1209.44 L2140.09 1209.44 L2140.67 1209.44 L2141.26 1209.44 L2141.84 1209.44 L2142.43 1209.44 L2143.02 1209.44 L2143.6 1209.44 L2144.19 1209.44 L2144.78 1209.44 L2145.36 1209.44 L2145.95 1209.44 L2146.54 1209.44 L2147.12 1209.44 L2147.71 1209.44 L2148.3 1209.44 L2148.88 1209.44 L2149.47 1209.44 L2150.05 1209.44 L2150.64 1209.44 L2151.23 1209.44 L2151.81 1209.44 L2152.4 1209.44 L2152.99 1209.44 L2153.57 1209.44 L2154.16 1209.44 L2154.75 1209.44 L2155.33 1209.44 L2155.92 1209.44 L2156.5 1209.44 L2157.09 1209.44 L2157.68 1209.44 L2158.26 1209.44 L2158.26 1209.33 L2157.68 1209.33 L2157.09 1209.33 L2156.5 1209.33 L2155.92 1209.33 L2155.33 1209.33 L2154.75 1209.33 L2154.16 1209.33 L2153.57 1209.33 L2152.99 1209.33 L2152.4 1209.33 L2151.81 1209.33 L2151.23 1209.33 L2150.64 1209.33 L2150.05 1209.33 L2149.47 1209.33 L2148.88 1209.33 L2148.3 1209.33 L2147.71 1209.33 L2147.12 1209.33 L2146.54 1209.33 L2145.95 1209.33 L2145.36 1209.33 L2144.78 1209.33 L2144.19 1209.33 L2143.6 1209.33 L2143.02 1209.33 L2142.43 1209.33 L2141.84 1209.33 L2141.26 1209.33 L2140.67 1209.33 L2140.09 1209.33 L2139.5 1209.33 L2138.91 1209.33 L2138.33 1209.33 L2137.74 1209.33 L2137.15 1209.33 L2136.57 1209.33 L2135.98 1209.33 L2135.39 1209.33 L2134.81 1209.33 L2134.22 1209.33 L2133.63 1209.33 L2133.05 1209.33 L2132.46 1209.33 L2131.88 1209.33 L2131.29 1209.33 L2130.7 1209.33 L2130.12 1209.33 L2129.53 1209.33 L2128.94 1209.33 L2128.36 1209.33 L2127.77 1209.33 L2127.18 1209.33 L2126.6 1209.33 L2126.01 1209.33 L2125.42 1209.33 L2124.84 1209.33 L2124.25 1209.33 L2123.67 1209.33 L2123.08 1209.33 L2122.49 1209.33 L2121.91 1209.33 L2121.32 1209.33 L2120.73 1209.33 L2120.15 1209.33 L2119.56 1209.33 L2118.97 1209.33 L2118.39 1209.33 L2117.8 1209.33 L2117.22 1209.33 L2116.63 1209.33 L2116.04 1209.33 L2115.46 1209.33 L2114.87 1209.33 L2114.28 1209.33 L2113.7 1209.33 L2113.11 1209.33 L2112.52 1209.33 L2111.94 1209.33 L2111.35 1209.33 L2110.76 1209.33 L2110.18 1209.33 L2109.59 1209.33 L2109.01 1209.33 L2108.42 1209.33 L2107.83 1209.33 L2107.25 1209.33 L2106.66 1209.33 L2106.07 1209.33 L2105.49 1209.33 L2104.9 1209.33 L2104.31 1209.33 L2103.73 1209.33 L2103.14 1209.33 L2102.55 1209.33 L2101.97 1209.33 L2101.38 1209.33 L2100.8 1209.33 L2100.21 1209.33 L2099.62 1209.33 L2099.04 1209.33 L2098.45 1209.33 L2097.86 1209.33 L2097.28 1209.33 L2096.69 1209.33 L2096.1 1209.33 L2095.52 1209.33 L2094.93 1209.33 L2094.35 1209.33 L2093.76 1209.33 L2093.17 1209.33 L2092.59 1209.33 L2092 1209.33 L2091.41 1209.33 L2090.83 1209.33 L2090.24 1209.33 L2089.65 1209.33 L2089.07 1209.33 L2088.48 1209.33 L2087.89 1209.33 L2087.31 1209.33 L2086.72 1209.33 L2086.14 1209.33 L2085.55 1209.33 L2084.96 1209.33 L2084.38 1209.33 L2083.79 1209.33 L2083.2 1209.33 L2082.62 1209.33 L2082.03 1209.33 L2081.44 1209.33 L2080.86 1209.33 L2080.27 1209.33 L2079.68 1209.33 L2079.1 1209.33 L2078.51 1209.33 L2077.93 1209.33 L2077.34 1209.33 L2076.75 1209.33 L2076.17 1209.33 L2075.58 1209.33 L2074.99 1209.33 L2074.41 1209.33 L2073.82 1209.33 L2073.23 1209.33 L2072.65 1209.33 L2072.06 1209.33 L2071.48 1209.33 L2070.89 1209.33 L2070.3 1209.33 L2069.72 1209.33 L2069.13 1209.33 L2068.54 1209.33 L2067.96 1209.33 L2067.37 1209.33 L2066.78 1209.33 L2066.2 1209.33 L2065.61 1209.33 L2065.02 1209.33 L2064.44 1209.33 L2063.85 1209.33 L2063.27 1209.33 L2062.68 1209.33 L2062.09 1209.33 L2061.51 1209.33 L2060.92 1209.33 L2060.33 1209.33 L2059.75 1209.33 L2059.16 1209.33 L2058.57 1209.33 L2057.99 1209.33 L2057.4 1209.33 L2056.81 1209.33 L2056.23 1209.33 L2055.64 1209.33 L2055.06 1209.33 L2054.47 1209.33 L2053.88 1209.33 L2053.3 1209.33 L2052.71 1209.33 L2052.12 1209.33 L2051.54 1209.33 L2050.95 1209.33 L2050.36 1209.33 L2049.78 1209.33 L2049.19 1209.33 L2048.6 1209.33 L2048.02 1209.33 L2047.43 1209.33 L2046.85 1209.33 L2046.26 1209.33 L2045.67 1209.33 L2045.09 1209.33 L2044.5 1209.33 L2043.91 1209.33 L2043.33 1209.33 L2042.74 1209.33 L2042.15 1209.33 L2041.57 1209.33 L2040.98 1209.33 L2040.4 1209.33 L2039.81 1209.33 L2039.22 1209.33 L2038.64 1209.33 L2038.05 1209.33 L2037.46 1209.33 L2036.88 1209.33 L2036.29 1209.33 L2035.7 1209.33 L2035.12 1209.33 L2034.53 1209.33 L2033.94 1209.33 L2033.36 1209.33 L2032.77 1209.33 L2032.19 1209.33 L2031.6 1209.33 L2031.01 1209.33 L2030.43 1209.33 L2029.84 1209.33 L2029.25 1209.33 L2028.67 1209.33 L2028.08 1209.33 L2027.49 1209.33 L2026.91 1209.33 L2026.32 1209.33 L2025.73 1209.33 L2025.15 1209.33 L2024.56 1209.33 L2023.98 1209.33 L2023.39 1209.33 L2022.8 1209.33 L2022.22 1209.33 L2021.63 1209.33 L2021.04 1209.33 L2020.46 1209.33 L2019.87 1209.33 L2019.28 1209.33 L2018.7 1209.33 L2018.11 1209.33 L2017.53 1209.33 L2016.94 1209.33 L2016.35 1209.33 L2015.77 1209.33 L2015.18 1209.33 L2014.59 1209.33 L2014.01 1209.33 L2013.42 1209.33 L2012.83 1209.33 L2012.25 1209.33 L2011.66 1209.33 L2011.07 1209.33 L2010.49 1209.33 L2009.9 1209.33 L2009.32 1209.33 L2008.73 1209.33 L2008.14 1209.33 L2007.56 1209.33 L2006.97 1209.33 L2006.38 1209.33 L2005.8 1209.33 L2005.21 1209.33 L2004.62 1209.33 L2004.04 1209.33 L2003.45 1209.33 L2002.86 1209.33 L2002.28 1209.33 L2001.69 1209.33 L2001.11 1209.33 L2000.52 1209.33 L1999.93 1209.33 L1999.35 1209.33 L1998.76 1209.33 L1998.17 1209.33 L1997.59 1209.33 L1997 1209.33 L1996.41 1209.33 L1995.83 1209.33 L1995.24 1209.33 L1994.65 1209.33 L1994.07 1209.33 L1993.48 1209.33 L1992.9 1209.33 L1992.31 1209.33 L1991.72 1209.33 L1991.14 1209.33 L1990.55 1209.33 L1989.96 1209.33 L1989.38 1209.33 L1988.79 1209.33 L1988.2 1209.33 L1987.62 1209.33 L1987.03 1209.33 L1986.45 1209.33 L1985.86 1209.33 L1985.27 1209.33 L1984.69 1209.33 L1984.1 1209.33 L1983.51 1209.33 L1982.93 1209.33 L1982.34 1209.33 L1981.75 1209.33 L1981.17 1209.33 L1980.58 1209.33 L1979.99 1209.33 L1979.41 1209.33 L1978.82 1209.33 L1978.24 1209.33 L1977.65 1209.33 L1977.06 1209.33 L1976.48 1209.33 L1975.89 1209.33 L1975.3 1209.33 L1974.72 1209.33 L1974.13 1209.33 L1973.54 1209.33 L1972.96 1209.33 L1972.37 1209.33 L1971.78 1209.33 L1971.2 1209.33 L1970.61 1209.33 L1970.03 1209.33 L1969.44 1209.33 L1968.85 1209.33 L1968.27 1209.33 L1967.68 1209.33 L1967.09 1209.33 L1966.51 1209.33 L1965.92 1209.33 L1965.33 1209.33 L1964.75 1209.33 L1964.16 1209.33 L1963.58 1209.33 L1962.99 1209.33 L1962.4 1209.33 L1961.82 1209.33 L1961.23 1209.33 L1960.64 1209.33 L1960.06 1209.33 L1959.47 1209.33 L1958.88 1209.33 L1958.3 1209.33 L1957.71 1209.33 L1957.12 1209.33 L1956.54 1209.33 L1955.95 1209.33 L1955.37 1209.33 L1954.78 1209.33 L1954.19 1209.33 L1953.61 1209.33 L1953.02 1209.33 L1952.43 1209.33 L1951.85 1209.33 L1951.26 1209.33 L1950.67 1209.33 L1950.09 1209.33 L1949.5 1209.33 L1948.91 1209.33 L1948.33 1209.33 L1947.74 1209.33 L1947.16 1209.33 L1946.57 1209.33 L1945.98 1209.33 L1945.4 1209.33 L1944.81 1209.33 L1944.22 1209.33 L1943.64 1209.33 L1943.05 1209.33 L1942.46 1209.33 L1941.88 1209.33 L1941.29 1209.33 L1940.71 1209.33 L1940.12 1209.33 L1939.53 1209.33 L1938.95 1209.33 L1938.36 1209.33 L1937.77 1209.33 L1937.19 1209.33 L1936.6 1209.33 L1936.01 1209.33 L1935.43 1209.33 L1934.84 1209.33 L1934.25 1209.33 L1933.67 1209.33 L1933.08 1209.33 L1932.5 1209.33 L1931.91 1209.33 L1931.32 1209.33 L1930.74 1209.33 L1930.15 1209.33 L1929.56 1209.33 L1928.98 1209.33 L1928.39 1209.33 L1927.8 1209.33 L1927.22 1209.33 L1926.63 1209.33 L1926.04 1209.33 L1925.46 1209.33 L1924.87 1209.33 L1924.29 1209.33 L1923.7 1209.33 L1923.11 1209.33 L1922.53 1209.33 L1921.94 1209.33 L1921.35 1209.33 L1920.77 1209.33 L1920.18 1209.33 L1919.59 1209.33 L1919.01 1209.33 L1918.42 1209.33 L1917.83 1209.33 L1917.25 1209.33 L1916.66 1209.33 L1916.08 1209.33 L1915.49 1209.33 L1914.9 1209.33 L1914.32 1209.33 L1913.73 1209.33 L1913.14 1209.33 L1912.56 1209.33 L1911.97 1209.33 L1911.38 1209.33 L1910.8 1209.33 L1910.21 1209.33 L1909.63 1209.33 L1909.04 1209.33 L1908.45 1209.33 L1907.87 1209.33 L1907.28 1209.33 L1906.69 1209.33 L1906.11 1209.33 L1905.52 1209.33 L1904.93 1209.33 L1904.35 1209.33 L1903.76 1209.33 L1903.17 1209.33 L1902.59 1209.33 L1902 1209.33 L1901.42 1209.33 L1900.83 1209.33 L1900.24 1209.33 L1899.66 1209.33 L1899.07 1209.33 L1898.48 1209.33 L1897.9 1209.33 L1897.31 1209.33 L1896.72 1209.33 L1896.14 1209.33 L1895.55 1209.33 L1894.96 1209.33 L1894.38 1209.33 L1893.79 1209.33 L1893.21 1209.33 L1892.62 1209.33 L1892.03 1209.33 L1891.45 1209.33 L1890.86 1209.33 L1890.27 1209.33 L1889.69 1209.33 L1889.1 1209.33 L1888.51 1209.33 L1887.93 1209.33 L1887.34 1209.33 L1886.76 1209.33 L1886.17 1209.33 L1885.58 1209.33 L1885 1209.33 L1884.41 1209.33 L1883.82 1209.33 L1883.24 1209.33 L1882.65 1209.33 L1882.06 1209.33 L1881.48 1209.33 L1880.89 1209.33 L1880.3 1209.33 L1879.72 1209.33 L1879.13 1209.33 L1878.55 1209.33 L1877.96 1209.33 L1877.37 1209.33 L1876.79 1209.33 L1876.2 1209.33 L1875.61 1209.33 L1875.03 1209.33 L1874.44 1209.33 L1873.85 1209.33 L1873.27 1209.33 L1872.68 1209.33 L1872.09 1209.33 L1871.51 1209.33 L1870.92 1209.33 L1870.34 1209.33 L1869.75 1209.33 L1869.16 1209.33 L1868.58 1209.33 L1867.99 1209.33 L1867.4 1209.33 L1866.82 1209.33 L1866.23 1209.33 L1865.64 1209.33 L1865.06 1209.33 L1864.47 1209.33 L1863.88 1209.33 L1863.3 1209.33 L1862.71 1209.33 L1862.13 1209.33 L1861.54 1209.33 L1860.95 1209.33 L1860.37 1209.33 L1859.78 1209.33 L1859.19 1209.33 L1858.61 1209.33 L1858.02 1209.33 L1857.43 1209.33 L1856.85 1209.33 L1856.26 1209.33 L1855.68 1209.33 L1855.09 1209.33 L1854.5 1209.33 L1853.92 1209.33 L1853.33 1209.33 L1852.74 1209.33 L1852.16 1209.33 L1851.57 1209.33 L1850.98 1209.33 L1850.4 1209.33 L1849.81 1209.33 L1849.22 1209.33 L1848.64 1209.33 L1848.05 1209.33 L1847.47 1209.33 L1846.88 1209.33 L1846.29 1209.33 L1845.71 1209.33 L1845.12 1209.33 L1844.53 1209.33 L1843.95 1209.33 L1843.36 1209.33 L1842.77 1209.33 L1842.19 1209.33 L1841.6 1209.33 L1841.01 1209.33 L1840.43 1209.33 L1839.84 1209.33 L1839.26 1209.33 L1838.67 1209.33 L1838.08 1209.33 L1837.5 1209.33 L1836.91 1209.33 L1836.32 1209.33 L1835.74 1209.33 L1835.15 1209.33 L1834.56 1209.33 L1833.98 1209.33 L1833.39 1209.33 L1832.81 1209.33 L1832.22 1209.33 L1831.63 1209.33 L1831.05 1209.33 L1830.46 1209.33 L1829.87 1209.33 L1829.29 1209.33 L1828.7 1209.33 L1828.11 1209.33 L1827.53 1209.33 L1826.94 1209.33 L1826.35 1209.33 L1825.77 1209.33 L1825.18 1209.33 L1824.6 1209.33 L1824.01 1209.33 L1823.42 1209.33 L1822.84 1209.33 L1822.25 1209.33 L1821.66 1209.33 L1821.08 1209.33 L1820.49 1209.33 L1819.9 1209.33 L1819.32 1209.33 L1818.73 1209.33 L1818.14 1209.33 L1817.56 1209.33 L1816.97 1209.33 L1816.39 1209.33 L1815.8 1209.33 L1815.21 1209.33 L1814.63 1209.33 L1814.04 1209.33 L1813.45 1209.33 L1812.87 1209.33 L1812.28 1209.33 L1811.69 1209.33 L1811.11 1209.33 L1810.52 1209.33 L1809.94 1209.33 L1809.35 1209.33 L1808.76 1209.33 L1808.18 1209.33 L1807.59 1209.33 L1807 1209.33 L1806.42 1209.33 L1805.83 1209.33 L1805.24 1209.33 L1804.66 1209.33 L1804.07 1209.33 L1803.48 1209.33 L1802.9 1209.33 L1802.31 1209.33 L1801.73 1209.33 L1801.14 1209.33 L1800.55 1209.33 L1799.97 1209.33 L1799.38 1209.33 L1798.79 1209.33 L1798.21 1209.33 L1797.62 1209.33 L1797.03 1209.33 L1796.45 1209.33 L1795.86 1209.33 L1795.27 1209.33 L1794.69 1209.33 L1794.1 1209.33 L1793.52 1209.33 L1792.93 1209.33 L1792.34 1209.33 L1791.76 1209.33 L1791.17 1209.33 L1790.58 1209.33 L1790 1209.33 L1789.41 1209.33 L1788.82 1209.33 L1788.24 1209.33 L1787.65 1209.33 L1787.06 1209.33 L1786.48 1209.33 L1785.89 1209.33 L1785.31 1209.33 L1784.72 1209.33 L1784.13 1209.33 L1783.55 1209.33 L1782.96 1209.33 L1782.37 1209.33 L1781.79 1209.33 L1781.2 1209.33 L1780.61 1209.33 L1780.03 1209.33 L1779.44 1209.33 L1778.86 1209.33 L1778.27 1209.33 L1777.68 1209.33 L1777.1 1209.33 L1776.51 1209.33 L1775.92 1209.33 L1775.34 1209.33 L1774.75 1209.33 L1774.16 1209.33 L1773.58 1209.33 L1772.99 1209.33 L1772.4 1209.33 L1771.82 1209.33 L1771.23 1209.33 L1770.65 1209.33 L1770.06 1209.33 L1769.47 1209.33 L1768.89 1209.33 L1768.3 1209.33 L1767.71 1209.33 L1767.13 1209.33 L1766.54 1209.33 L1765.95 1209.33 L1765.37 1209.33 L1764.78 1209.33 L1764.19 1209.33 L1763.61 1209.33 L1763.02 1209.33 L1762.44 1209.33 L1761.85 1209.33 L1761.26 1209.33 L1760.68 1209.33 L1760.09 1209.33 L1759.5 1209.33 L1758.92 1209.33 L1758.33 1209.33 L1757.74 1209.33 L1757.16 1209.33 L1756.57 1209.33 L1755.99 1209.33 L1755.4 1209.33 L1754.81 1209.33 L1754.23 1209.33 L1753.64 1209.33 L1753.05 1209.33 L1752.47 1209.33 L1751.88 1209.33 L1751.29 1209.33 L1750.71 1209.33 L1750.12 1209.33 L1749.53 1209.33 L1748.95 1209.33 L1748.36 1209.33 L1747.78 1209.33 L1747.19 1209.33 L1746.6 1209.33 L1746.02 1209.33 L1745.43 1209.33 L1744.84 1209.33 L1744.26 1209.33 L1743.67 1209.33 L1743.08 1209.33 L1742.5 1209.33 L1741.91 1209.33 L1741.32 1209.33 L1740.74 1209.33 L1740.15 1209.33 L1739.57 1209.33 L1738.98 1209.33 L1738.39 1209.33 L1737.81 1209.33 L1737.22 1209.33 L1736.63 1209.33 L1736.05 1209.33 L1735.46 1209.33 L1734.87 1209.33 L1734.29 1209.33 L1733.7 1209.33 L1733.11 1209.33 L1732.53 1209.33 L1731.94 1209.33 L1731.36 1209.33 L1730.77 1209.33 L1730.18 1209.33 L1729.6 1209.33 L1729.01 1209.33 L1728.42 1209.33 L1727.84 1209.33 L1727.25 1209.33 L1726.66 1209.33 L1726.08 1209.33 L1725.49 1209.33 L1724.91 1209.33 L1724.32 1209.33 L1723.73 1209.33 L1723.15 1209.33 L1722.56 1209.33 L1721.97 1209.33 L1721.39 1209.33 L1720.8 1209.33 L1720.21 1209.33 L1719.63 1209.33 L1719.04 1209.33 L1718.45 1209.33 L1717.87 1209.33 L1717.28 1209.33 L1716.7 1209.33 L1716.11 1209.33 L1715.52 1209.33 L1714.94 1209.33 L1714.35 1209.33 L1713.76 1209.33 L1713.18 1209.33 L1712.59 1209.33 L1712 1209.33 L1711.42 1209.33 L1710.83 1209.33 L1710.24 1209.33 L1709.66 1209.33 L1709.07 1209.33 L1708.49 1209.33 L1707.9 1209.33 L1707.31 1209.33 L1706.73 1209.33 L1706.14 1209.33 L1705.55 1209.33 L1704.97 1209.33 L1704.38 1209.33 L1703.79 1209.33 L1703.21 1209.33 L1702.62 1209.33 L1702.04 1209.33 L1701.45 1209.33 L1700.86 1209.33 L1700.28 1209.33 L1699.69 1209.33 L1699.1 1209.33 L1698.52 1209.33 L1697.93 1209.33 L1697.34 1209.33 L1696.76 1209.33 L1696.17 1209.33 L1695.58 1209.33 L1695 1209.33 L1694.41 1209.33 L1693.83 1209.33 L1693.24 1209.33 L1692.65 1209.33 L1692.07 1209.33 L1691.48 1209.33 L1690.89 1209.33 L1690.31 1209.33 L1689.72 1209.33 L1689.13 1209.33 L1688.55 1209.33 L1687.96 1209.33 L1687.37 1209.33 L1686.79 1209.33 L1686.2 1209.33 L1685.62 1209.33 L1685.03 1209.33 L1684.44 1209.33 L1683.86 1209.33 L1683.27 1209.33 L1682.68 1209.33 L1682.1 1209.33 L1681.51 1209.33 L1680.92 1209.33 L1680.34 1209.33 L1679.75 1209.33 L1679.17 1209.33 L1678.58 1209.33 L1677.99 1209.33 L1677.41 1209.33 L1676.82 1209.33 L1676.23 1209.33 L1675.65 1209.33 L1675.06 1209.33 L1674.47 1209.33 L1673.89 1209.33 L1673.3 1209.33 L1672.71 1209.33 L1672.13 1209.33 L1671.54 1209.33 L1670.96 1209.33 L1670.37 1209.33 L1669.78 1209.33 L1669.2 1209.33 L1668.61 1209.33 L1668.02 1209.33 L1667.44 1209.33 L1666.85 1209.33 L1666.26 1209.33 L1665.68 1209.33 L1665.09 1209.33 L1664.5 1209.33 L1663.92 1209.33 L1663.33 1209.33 L1662.75 1209.33 L1662.16 1209.33 L1661.57 1209.33 L1660.99 1209.33 L1660.4 1209.33 L1659.81 1209.33 L1659.23 1209.33 L1658.64 1209.33 L1658.05 1209.33 L1657.47 1209.33 L1656.88 1209.33 L1656.29 1209.33 L1655.71 1209.33 L1655.12 1209.33 L1654.54 1209.33 L1653.95 1209.33 L1653.36 1209.33 L1652.78 1209.33 L1652.19 1209.33 L1651.6 1209.33 L1651.02 1209.33 L1650.43 1209.33 L1649.84 1209.33 L1649.26 1209.33 L1648.67 1209.33 L1648.09 1209.33 L1647.5 1209.33 L1646.91 1209.33 L1646.33 1209.33 L1645.74 1209.33 L1645.15 1209.33 L1644.57 1209.33 L1643.98 1209.33 L1643.39 1209.33 L1642.81 1209.33 L1642.22 1209.33 L1641.63 1209.33 L1641.05 1209.33 L1640.46 1209.33 L1639.88 1209.33 L1639.29 1209.33 L1638.7 1209.33 L1638.12 1209.33 L1637.53 1209.33 L1636.94 1209.33 L1636.36 1209.33 L1635.77 1209.33 L1635.18 1209.33 L1634.6 1209.33 L1634.01 1209.33 L1633.42 1209.33 L1632.84 1209.33 L1632.25 1209.33 L1631.67 1209.33 L1631.08 1209.33 L1630.49 1209.33 L1629.91 1209.33 L1629.32 1209.33 L1628.73 1209.33 L1628.15 1209.33 L1627.56 1209.33 L1626.97 1209.33 L1626.39 1209.33 L1625.8 1209.33 L1625.22 1209.33 L1624.63 1209.33 L1624.04 1209.33 L1623.46 1209.33 L1622.87 1209.33 L1622.28 1209.33 L1621.7 1209.33 L1621.11 1209.33 L1620.52 1209.33 L1619.94 1209.33 L1619.35 1209.33 L1618.76 1209.33 L1618.18 1209.33 L1617.59 1209.33 L1617.01 1209.33 L1616.42 1209.33 L1615.83 1209.33 L1615.25 1209.33 L1614.66 1209.33 L1614.07 1209.33 L1613.49 1209.33 L1612.9 1209.33 L1612.31 1209.33 L1611.73 1209.33 L1611.14 1209.33 L1610.55 1209.33 L1609.97 1209.33 L1609.38 1209.33 L1608.8 1209.33 L1608.21 1209.33 L1607.62 1209.33 L1607.04 1209.33 L1606.45 1209.33 L1605.86 1209.33 L1605.28 1209.33 L1604.69 1209.33 L1604.1 1209.33 L1603.52 1209.33 L1602.93 1209.33 L1602.34 1209.33 L1601.76 1209.33 L1601.17 1209.33 L1600.59 1209.33 L1600 1209.33 L1599.41 1209.33 L1598.83 1209.33 L1598.24 1209.33 L1597.65 1209.33 L1597.07 1209.33 L1596.48 1209.33 L1595.89 1209.33 L1595.31 1209.33 L1594.72 1209.33 L1594.14 1209.33 L1593.55 1209.33 L1592.96 1209.33 L1592.38 1209.33 L1591.79 1209.33 L1591.2 1209.33 L1590.62 1209.33 L1590.03 1209.33 L1589.44 1209.33 L1588.86 1209.33 L1588.27 1209.33 L1587.68 1209.33 L1587.1 1209.33 L1586.51 1209.33 L1585.93 1209.33 L1585.34 1209.33 L1584.75 1209.33 L1584.17 1209.33 L1583.58 1209.33 L1582.99 1209.33 L1582.41 1209.33 L1581.82 1209.33 L1581.23 1209.33 L1580.65 1209.33 L1580.06 1209.33 L1579.47 1209.33 L1578.89 1209.33 L1578.3 1209.33 L1577.72 1209.33 L1577.13 1209.33 L1576.54 1209.33 L1575.96 1209.33 L1575.37 1209.33 L1574.78 1209.33 L1574.2 1209.33 L1573.61 1209.33 L1573.02 1209.33 L1572.44 1209.33 L1571.85 1209.33 L1571.27 1209.33 L1570.68 1209.33 L1570.09 1209.33 L1569.51 1209.33 L1568.92 1209.33 L1568.33 1209.33 L1567.75 1209.33 L1567.16 1209.33 L1566.57 1209.33 L1565.99 1209.33 L1565.4 1209.33 L1564.81 1209.33 L1564.23 1209.33 L1563.64 1209.33 L1563.06 1209.33 L1562.47 1209.33 L1561.88 1209.33 L1561.3 1209.33 L1560.71 1209.33 L1560.12 1209.33 L1559.54 1209.33 L1558.95 1209.33 L1558.36 1209.33 L1557.78 1209.33 L1557.19 1209.33 L1556.6 1209.33 L1556.02 1209.33 L1555.43 1209.33 L1554.85 1209.33 L1554.26 1209.33 L1553.67 1209.33 L1553.09 1209.33 L1552.5 1209.33 L1551.91 1209.33 L1551.33 1209.33 L1550.74 1209.33 L1550.15 1209.33 L1549.57 1209.33 L1548.98 1209.33 L1548.4 1209.33 L1547.81 1209.33 L1547.22 1209.33 L1546.64 1209.33 L1546.05 1209.33 L1545.46 1209.33 L1544.88 1209.33 L1544.29 1209.33 L1543.7 1209.33 L1543.12 1209.33 L1542.53 1209.33 L1541.94 1209.33 L1541.36 1209.33 L1540.77 1209.33 L1540.19 1209.33 L1539.6 1209.33 L1539.01 1209.33 L1538.43 1209.33 L1537.84 1209.33 L1537.25 1209.33 L1536.67 1209.33 L1536.08 1209.33 L1535.49 1209.33 L1534.91 1209.33 L1534.32 1209.33 L1533.73 1209.33 L1533.15 1209.33 L1532.56 1209.33 L1531.98 1209.33 L1531.39 1209.33 L1530.8 1209.33 L1530.22 1209.33 L1529.63 1209.33 L1529.04 1209.33 L1528.46 1209.33 L1527.87 1209.33 L1527.28 1209.33 L1526.7 1209.33 L1526.11 1209.33 L1525.52 1209.33 L1524.94 1209.33 L1524.35 1209.33 L1523.77 1209.33 L1523.18 1209.33 L1522.59 1209.33 L1522.01 1209.33 L1521.42 1209.33 L1520.83 1209.33 L1520.25 1209.33 L1519.66 1209.33 L1519.07 1209.33 L1518.49 1209.33 L1517.9 1209.33 L1517.32 1209.33 L1516.73 1209.33 L1516.14 1209.33 L1515.56 1209.33 L1514.97 1209.33 L1514.38 1209.33 L1513.8 1209.33 L1513.21 1209.33 L1512.62 1209.33 L1512.04 1209.33 L1511.45 1209.33 L1510.86 1209.33 L1510.28 1209.33 L1509.69 1209.33 L1509.11 1209.33 L1508.52 1209.33 L1507.93 1209.33 L1507.35 1209.33 L1506.76 1209.33 L1506.17 1209.33 L1505.59 1209.33 L1505 1209.33 L1504.41 1209.33 L1503.83 1209.33 L1503.24 1209.33 L1502.65 1209.33 L1502.07 1209.33 L1501.48 1209.33 L1500.9 1209.33 L1500.31 1209.33 L1499.72 1209.33 L1499.14 1209.33 L1498.55 1209.33 L1497.96 1209.33 L1497.38 1209.33 L1496.79 1209.33 L1496.2 1209.33 L1495.62 1209.33 L1495.03 1209.33 L1494.45 1209.33 L1493.86 1209.33 L1493.27 1209.33 L1492.69 1209.33 L1492.1 1209.33 L1491.51 1209.33 L1490.93 1209.33 L1490.34 1209.33 L1489.75 1209.33 L1489.17 1209.33 L1488.58 1209.33 L1487.99 1209.33 L1487.41 1209.33 L1486.82 1209.33 L1486.24 1209.33 L1485.65 1209.33 L1485.06 1209.33 L1484.48 1209.33 L1483.89 1209.33 L1483.3 1209.33 L1482.72 1209.33 L1482.13 1209.33 L1481.54 1209.33 L1480.96 1209.33 L1480.37 1209.33 L1479.78 1209.33 L1479.2 1209.33 L1478.61 1209.33 L1478.03 1209.33 L1477.44 1209.33 L1476.85 1209.33 L1476.27 1209.33 L1475.68 1209.33 L1475.09 1209.33 L1474.51 1209.33 L1473.92 1209.33 L1473.33 1209.33 L1472.75 1209.33 L1472.16 1209.33 L1471.57 1209.33 L1470.99 1209.33 L1470.4 1209.33 L1469.82 1209.33 L1469.23 1209.33 L1468.64 1209.33 L1468.06 1209.33 L1467.47 1209.33 L1466.88 1209.33 L1466.3 1209.33 L1465.71 1209.33 L1465.12 1209.33 L1464.54 1209.33 L1463.95 1209.33 L1463.37 1209.33 L1462.78 1209.33 L1462.19 1209.33 L1461.61 1209.33 L1461.02 1209.33 L1460.43 1209.33 L1459.85 1209.33 L1459.26 1209.33 L1458.67 1209.33 L1458.09 1209.33 L1457.5 1209.33 L1456.91 1209.33 L1456.33 1209.33 L1455.74 1209.33 L1455.16 1209.33 L1454.57 1209.33 L1453.98 1209.33 L1453.4 1209.33 L1452.81 1209.33 L1452.22 1209.33 L1451.64 1209.33 L1451.05 1209.33 L1450.46 1209.33 L1449.88 1209.33 L1449.29 1209.33 L1448.7 1209.33 L1448.12 1209.33 L1447.53 1209.33 L1446.95 1209.33 L1446.36 1209.33 L1445.77 1209.33 L1445.19 1209.33 L1444.6 1209.33 L1444.01 1209.33 L1443.43 1209.33 L1442.84 1209.33 L1442.25 1209.33 L1441.67 1209.33 L1441.08 1209.33 L1440.5 1209.33 L1439.91 1209.33 L1439.32 1209.33 L1438.74 1209.33 L1438.15 1209.33 L1437.56 1209.33 L1436.98 1209.33 L1436.39 1209.33 L1435.8 1209.33 L1435.22 1209.33 L1434.63 1209.33 L1434.04 1209.33 L1433.46 1209.33 L1432.87 1209.33 L1432.29 1209.33 L1431.7 1209.33 L1431.11 1209.33 L1430.53 1209.33 L1429.94 1209.33 L1429.35 1209.33 L1428.77 1209.33 L1428.18 1209.33 L1427.59 1209.33 L1427.01 1209.33 L1426.42 1209.33 L1425.83 1209.33 L1425.25 1209.33 L1424.66 1209.33 L1424.08 1209.33 L1423.49 1209.33 L1422.9 1209.33 L1422.32 1209.33 L1421.73 1209.33 L1421.14 1209.33 L1420.56 1209.33 L1419.97 1209.33 L1419.38 1209.33 L1418.8 1209.33 L1418.21 1209.33 L1417.63 1209.33 L1417.04 1209.33 L1416.45 1209.33 L1415.87 1209.33 L1415.28 1209.33 L1414.69 1209.33 L1414.11 1209.33 L1413.52 1209.33 L1412.93 1209.33 L1412.35 1209.33 L1411.76 1209.33 L1411.17 1209.33 L1410.59 1209.33 L1410 1209.33 L1409.42 1209.33 L1408.83 1209.33 L1408.24 1209.33 L1407.66 1209.33 L1407.07 1209.33 L1406.48 1209.33 L1405.9 1209.33 L1405.31 1209.33 L1404.72 1209.33 L1404.14 1209.33 L1403.55 1209.33 L1402.96 1209.33 L1402.38 1209.33 L1401.79 1209.33 L1401.21 1209.33 L1400.62 1209.33 L1400.03 1209.33 L1399.45 1209.33 L1398.86 1209.33 L1398.27 1209.33 L1397.69 1209.33 L1397.1 1209.33 L1396.51 1209.33 L1395.93 1209.33 L1395.34 1209.33 L1394.75 1209.33 L1394.17 1209.33 L1393.58 1209.33 L1393 1209.33 L1392.41 1209.33 L1391.82 1209.33 L1391.24 1209.33 L1390.65 1209.33 L1390.06 1209.33 L1389.48 1209.33 L1388.89 1209.33 L1388.3 1209.33 L1387.72 1209.33 L1387.13 1209.33 L1386.55 1209.33 L1385.96 1209.33 L1385.37 1209.33 L1384.79 1209.33 L1384.2 1209.33 L1383.61 1209.33 L1383.03 1209.33 L1382.44 1209.33 L1381.85 1209.33 L1381.27 1209.33 L1380.68 1209.33 L1380.09 1209.33 L1379.51 1209.33 L1378.92 1209.33 L1378.34 1209.33 L1377.75 1209.33 L1377.16 1209.33 L1376.58 1209.33 L1375.99 1209.33 L1375.4 1209.33 L1374.82 1209.33 L1374.23 1209.33 L1373.64 1209.33 L1373.06 1209.33 L1372.47 1209.33 L1371.88 1209.33 L1371.3 1209.33 L1370.71 1209.33 L1370.13 1209.33 L1369.54 1209.33 L1368.95 1209.33 L1368.37 1209.33 L1367.78 1209.33 L1367.19 1209.33 L1366.61 1209.33 L1366.02 1209.33 L1365.43 1209.33 L1364.85 1209.33 L1364.26 1209.33 L1363.68 1209.33 L1363.09 1209.33 L1362.5 1209.33 L1361.92 1209.33 L1361.33 1209.33 L1360.74 1209.33 L1360.16 1209.33 L1359.57 1209.33 L1358.98 1209.33 L1358.4 1209.33 L1357.81 1209.33 L1357.22 1209.33 L1356.64 1209.33 L1356.05 1209.33 L1355.47 1209.33 L1354.88 1209.33 L1354.29 1209.33 L1353.71 1209.33 L1353.12 1209.33 L1352.53 1209.33 L1351.95 1209.33 L1351.36 1209.33 L1350.77 1209.33 L1350.19 1209.33 L1349.6 1209.33 L1349.01 1209.33 L1348.43 1209.33 L1347.84 1209.33 L1347.26 1209.33 L1346.67 1209.33 L1346.08 1209.33 L1345.5 1209.33 L1344.91 1209.33 L1344.32 1209.33 L1343.74 1209.33 L1343.15 1209.33 L1342.56 1209.33 L1341.98 1209.33 L1341.39 1209.33 L1340.8 1209.33 L1340.22 1209.33 L1339.63 1209.33 L1339.05 1209.33 L1338.46 1209.33 L1337.87 1209.33 L1337.29 1209.33 L1336.7 1209.33 L1336.11 1209.33 L1335.53 1209.33 L1334.94 1209.33 L1334.35 1209.33 L1333.77 1209.33 L1333.18 1209.33 L1332.6 1209.33 L1332.01 1209.33 L1331.42 1209.33 L1330.84 1209.33 L1330.25 1209.33 L1329.66 1209.33 L1329.08 1209.33 L1328.49 1209.33 L1327.9 1209.33 L1327.32 1209.33 L1326.73 1209.33 L1326.14 1209.33 L1325.56 1209.33 L1324.97 1209.33 L1324.39 1209.33 L1323.8 1209.33 L1323.21 1209.33 L1322.63 1209.33 L1322.04 1209.33 L1321.45 1209.33 L1320.87 1209.33 L1320.28 1209.33 L1319.69 1209.33 L1319.11 1209.33 L1318.52 1209.33 L1317.93 1209.33 L1317.35 1209.33 L1316.76 1209.33 L1316.18 1209.33 L1315.59 1209.33 L1315 1209.33 L1314.42 1209.33 L1313.83 1209.33 L1313.24 1209.33 L1312.66 1209.33 L1312.07 1209.33 L1311.48 1209.33 L1310.9 1209.33 L1310.31 1209.33 L1309.73 1209.33 L1309.14 1209.33 L1308.55 1209.33 L1307.97 1209.33 L1307.38 1209.33 L1306.79 1209.33 L1306.21 1209.33 L1305.62 1209.33 L1305.03 1209.33 L1304.45 1209.33 L1303.86 1209.33 L1303.27 1209.33 L1302.69 1209.33 L1302.1 1209.33 L1301.52 1209.33 L1300.93 1209.33 L1300.34 1209.33 L1299.76 1209.33 L1299.17 1209.33 L1298.58 1209.33 L1298 1209.33 L1297.41 1209.33 L1296.82 1209.33 L1296.24 1209.33 L1295.65 1209.33 L1295.06 1209.33 L1294.48 1209.33 L1293.89 1209.33 L1293.31 1209.33 L1292.72 1209.33 L1292.13 1209.33 L1291.55 1209.33 L1290.96 1209.33 L1290.37 1209.33 L1289.79 1209.33 L1289.2 1209.33 L1288.61 1209.33 L1288.03 1209.33 L1287.44 1209.33 L1286.86 1209.33 L1286.27 1209.33 L1285.68 1209.33 L1285.1 1209.33 L1284.51 1209.33 L1283.92 1209.33 L1283.34 1209.33 L1282.75 1209.33 L1282.16 1209.33 L1281.58 1209.33 L1280.99 1209.33 L1280.4 1209.33 L1279.82 1209.33 L1279.23 1209.33 L1278.65 1209.33 L1278.06 1209.33 L1277.47 1209.33 L1276.89 1209.33 L1276.3 1209.33 L1275.71 1209.33 L1275.13 1209.33 L1274.54 1209.33 L1273.95 1209.33 L1273.37 1209.33 L1272.78 1209.33 L1272.19 1209.33 L1271.61 1209.33 L1271.02 1209.33 L1270.44 1209.33 L1269.85 1209.33 L1269.26 1209.33 L1268.68 1209.33 L1268.09 1209.33 L1267.5 1209.33 L1266.92 1209.33 L1266.33 1209.33 L1265.74 1209.33 L1265.16 1209.33 L1264.57 1209.33 L1263.98 1209.33 L1263.4 1209.33 L1262.81 1209.33 L1262.23 1209.33 L1261.64 1209.33 L1261.05 1209.33 L1260.47 1209.33 L1259.88 1209.33 L1259.29 1209.33 L1258.71 1209.33 L1258.12 1209.33 L1257.53 1209.33 L1256.95 1209.33 L1256.36 1209.33 L1255.78 1209.33 L1255.19 1209.33 L1254.6 1209.33 L1254.02 1209.33 L1253.43 1209.33 L1252.84 1209.33 L1252.26 1209.33 L1251.67 1209.33 L1251.08 1209.33 L1250.5 1209.33 L1249.91 1209.33 L1249.32 1209.33 L1248.74 1209.33 L1248.15 1209.33 L1247.57 1209.33 L1246.98 1209.33 L1246.39 1209.33 L1245.81 1209.33 L1245.22 1209.33 L1244.63 1209.33 L1244.05 1209.33 L1243.46 1209.33 L1242.87 1209.33 L1242.29 1209.33 L1241.7 1209.33 L1241.11 1209.33 L1240.53 1209.33 L1239.94 1209.33 L1239.36 1209.33 L1238.77 1209.33 L1238.18 1209.33 L1237.6 1209.33 L1237.01 1209.33 L1236.42 1209.33 L1235.84 1209.33 L1235.25 1209.33 L1234.66 1209.33 L1234.08 1209.33 L1233.49 1209.33 L1232.91 1209.33 L1232.32 1209.33 L1231.73 1209.33 L1231.15 1209.33 L1230.56 1209.33 L1229.97 1209.33 L1229.39 1209.33 L1228.8 1209.33 L1228.21 1209.33 L1227.63 1209.33 L1227.04 1209.33 L1226.45 1209.33 L1225.87 1209.33 L1225.28 1209.33 L1224.7 1209.33 L1224.11 1209.33 L1223.52 1209.33 L1222.94 1209.33 L1222.35 1209.33 L1221.76 1209.33 L1221.18 1209.33 L1220.59 1209.33 L1220 1209.33 L1219.42 1209.33 L1218.83 1209.33 L1218.24 1209.33 L1217.66 1209.33 L1217.07 1209.33 L1216.49 1209.33 L1215.9 1209.33 L1215.31 1209.33 L1214.73 1209.33 L1214.14 1209.33 L1213.55 1209.33 L1212.97 1209.33 L1212.38 1209.33 L1211.79 1209.33 L1211.21 1209.33 L1210.62 1209.33 L1210.03 1209.33 L1209.45 1209.33 L1208.86 1209.33 L1208.28 1209.33 L1207.69 1209.33 L1207.1 1209.33 L1206.52 1209.33 L1205.93 1209.33 L1205.34 1209.33 L1204.76 1209.33 L1204.17 1209.33 L1203.58 1209.33 L1203 1209.33 L1202.41 1209.33 L1201.83 1209.33 L1201.24 1209.33 L1200.65 1209.33 L1200.07 1209.33 L1199.48 1209.33 L1198.89 1209.33 L1198.31 1209.33 L1197.72 1209.33 L1197.13 1209.33 L1196.55 1209.33 L1195.96 1209.33 L1195.37 1209.33 L1194.79 1209.33 L1194.2 1209.33 L1193.62 1209.33 L1193.03 1209.33 L1192.44 1209.33 L1191.86 1209.33 L1191.27 1209.33 L1190.68 1209.33 L1190.1 1209.33 L1189.51 1209.33 L1188.92 1209.33 L1188.34 1209.33 L1187.75 1209.33 L1187.16 1209.33 L1186.58 1209.33 L1185.99 1209.33 L1185.41 1209.33 L1184.82 1209.33 L1184.23 1209.33 L1183.65 1209.33 L1183.06 1209.33 L1182.47 1209.33 L1181.89 1209.33 L1181.3 1209.33 L1180.71 1209.33 L1180.13 1209.33 L1179.54 1209.33 L1178.96 1209.33 L1178.37 1209.33 L1177.78 1209.33 L1177.2 1209.33 L1176.61 1209.33 L1176.02 1209.33 L1175.44 1209.33 L1174.85 1209.33 L1174.26 1209.33 L1173.68 1209.33 L1173.09 1209.33 L1172.5 1209.33 L1171.92 1209.33 L1171.33 1209.33 L1170.75 1209.33 L1170.16 1209.33 L1169.57 1209.33 L1168.99 1209.33 L1168.4 1209.33 L1167.81 1209.33 L1167.23 1209.33 L1166.64 1209.33 L1166.05 1209.33 L1165.47 1209.33 L1164.88 1209.33 L1164.29 1209.33 L1163.71 1209.33 L1163.12 1209.33 L1162.54 1209.33 L1161.95 1209.33 L1161.36 1209.33 L1160.78 1209.33 L1160.19 1209.33 L1159.6 1209.33 L1159.02 1209.33 L1158.43 1209.33 L1157.84 1209.33 L1157.26 1209.33 L1156.67 1209.33 L1156.09 1209.33 L1155.5 1209.33 L1154.91 1209.33 L1154.33 1209.33 L1153.74 1209.33 L1153.15 1209.33 L1152.57 1209.33 L1151.98 1209.33 L1151.39 1209.33 L1150.81 1209.33 L1150.22 1209.33 L1149.63 1209.33 L1149.05 1209.33 L1148.46 1209.33 L1147.88 1209.33 L1147.29 1209.33 L1146.7 1209.33 L1146.12 1209.33 L1145.53 1209.33 L1144.94 1209.33 L1144.36 1209.33 L1143.77 1209.33 L1143.18 1209.33 L1142.6 1209.33 L1142.01 1209.33 L1141.42 1209.33 L1140.84 1209.33 L1140.25 1209.33 L1139.67 1209.33 L1139.08 1209.33 L1138.49 1209.33 L1137.91 1209.33 L1137.32 1209.33 L1136.73 1209.33 L1136.15 1209.33 L1135.56 1209.33 L1134.97 1209.33 L1134.39 1209.33 L1133.8 1209.33 L1133.21 1209.33 L1132.63 1209.33 L1132.04 1209.33 L1131.46 1209.33 L1130.87 1209.33 L1130.28 1209.33 L1129.7 1209.33 L1129.11 1209.33 L1128.52 1209.33 L1127.94 1209.33 L1127.35 1209.33 L1126.76 1209.33 L1126.18 1209.33 L1125.59 1209.33 L1125.01 1209.33 L1124.42 1209.33 L1123.83 1209.33 L1123.25 1209.33 L1122.66 1209.33 L1122.07 1209.33 L1121.49 1209.33 L1120.9 1209.33 L1120.31 1209.33 L1119.73 1209.33 L1119.14 1209.33 L1118.55 1209.33 L1117.97 1209.33 L1117.38 1209.33 L1116.8 1209.33 L1116.21 1209.33 L1115.62 1209.33 L1115.04 1209.33 L1114.45 1209.33 L1113.86 1209.33 L1113.28 1209.33 L1112.69 1209.33 L1112.1 1209.33 L1111.52 1209.33 L1110.93 1209.33 L1110.34 1209.33 L1109.76 1209.33 L1109.17 1209.33 L1108.59 1209.33 L1108 1209.33 L1107.41 1209.33 L1106.83 1209.33 L1106.24 1209.33 L1105.65 1209.33 L1105.07 1209.33 L1104.48 1209.33 L1103.89 1209.33 L1103.31 1209.33 L1102.72 1209.33 L1102.14 1209.33 L1101.55 1209.33 L1100.96 1209.33 L1100.38 1209.33 L1099.79 1209.33 L1099.2 1209.33 L1098.62 1209.33 L1098.03 1209.33 L1097.44 1209.33 L1096.86 1209.33 L1096.27 1209.33 L1095.68 1209.33 L1095.1 1209.33 L1094.51 1209.33 L1093.93 1209.33 L1093.34 1209.33 L1092.75 1209.33 L1092.17 1209.33 L1091.58 1209.33 L1090.99 1209.33 L1090.41 1209.33 L1089.82 1209.33 L1089.23 1209.33 L1088.65 1209.33 L1088.06 1209.33 L1087.47 1209.33 L1086.89 1209.33 L1086.3 1209.33 L1085.72 1209.33 L1085.13 1209.33 L1084.54 1209.33 L1083.96 1209.33 L1083.37 1209.33 L1082.78 1209.33 L1082.2 1209.33 L1081.61 1209.33 L1081.02 1209.33 L1080.44 1209.33 L1079.85 1209.33 L1079.26 1209.33 L1078.68 1209.33 L1078.09 1209.33 L1077.51 1209.33 L1076.92 1209.33 L1076.33 1209.33 L1075.75 1209.33 L1075.16 1209.33 L1074.57 1209.33 L1073.99 1209.33 L1073.4 1209.33 L1072.81 1209.33 L1072.23 1209.33 L1071.64 1209.33 L1071.06 1209.33 L1070.47 1209.33 L1069.88 1209.33 L1069.3 1209.33 L1068.71 1209.33 L1068.12 1209.33 L1067.54 1209.33 L1066.95 1209.33 L1066.36 1209.33 L1065.78 1209.33 L1065.19 1209.33 L1064.6 1209.33 L1064.02 1209.33 L1063.43 1209.33 L1062.85 1209.33 L1062.26 1209.33 L1061.67 1209.33 L1061.09 1209.33 L1060.5 1209.33 L1059.91 1209.33 L1059.33 1209.33 L1058.74 1209.33 L1058.15 1209.33 L1057.57 1209.33 L1056.98 1209.33 L1056.39 1209.33 L1055.81 1209.33 L1055.22 1209.33 L1054.64 1209.33 L1054.05 1209.33 L1053.46 1209.33 L1052.88 1209.33 L1052.29 1209.33 L1051.7 1209.33 L1051.12 1209.33 L1050.53 1209.33 L1049.94 1209.33 L1049.36 1209.33 L1048.77 1209.33 L1048.19 1209.33 L1047.6 1209.33 L1047.01 1209.33 L1046.43 1209.33 L1045.84 1209.33 L1045.25 1209.33 L1044.67 1209.33 L1044.08 1209.33 L1043.49 1209.33 L1042.91 1209.33 L1042.32 1209.33 L1041.73 1209.33 L1041.15 1209.33 L1040.56 1209.33 L1039.98 1209.33 L1039.39 1209.33 L1038.8 1209.33 L1038.22 1209.33 L1037.63 1209.33 L1037.04 1209.33 L1036.46 1209.33 L1035.87 1209.33 L1035.28 1209.33 L1034.7 1209.33 L1034.11 1209.33 L1033.52 1209.33 L1032.94 1209.33 L1032.35 1209.33 L1031.77 1209.33 L1031.18 1209.33 L1030.59 1209.33 L1030.01 1209.33 L1029.42 1209.33 L1028.83 1209.33 L1028.25 1209.33 L1027.66 1209.33 L1027.07 1209.33 L1026.49 1209.33 L1025.9 1209.33 L1025.32 1209.33 L1024.73 1209.33 L1024.14 1209.33 L1023.56 1209.33 L1022.97 1209.33 L1022.38 1209.33 L1021.8 1209.33 L1021.21 1209.33 L1020.62 1209.33 L1020.04 1209.33 L1019.45 1209.33 L1018.86 1209.33 L1018.28 1209.33 L1017.69 1209.33 L1017.11 1209.33 L1016.52 1209.33 L1015.93 1209.33 L1015.35 1209.33 L1014.76 1209.33 L1014.17 1209.33 L1013.59 1209.33 L1013 1209.33 L1012.41 1209.33 L1011.83 1209.33 L1011.24 1209.33 L1010.65 1209.33 L1010.07 1209.33 L1009.48 1209.33 L1008.9 1209.33 L1008.31 1209.33 L1007.72 1209.33 L1007.14 1209.33 L1006.55 1209.33 L1005.96 1209.33 L1005.38 1209.33 L1004.79 1209.33 L1004.2 1209.33 L1003.62 1209.33 L1003.03 1209.33 L1002.44 1209.33 L1001.86 1209.33 L1001.27 1209.33 L1000.69 1209.33 L1000.1 1209.33 L999.513 1209.33 L998.926 1209.33 L998.34 1209.33 L997.754 1209.33 L997.167 1209.33 L996.581 1209.33 L995.994 1209.33 L995.408 1209.33 L994.822 1209.33 L994.235 1209.33 L993.649 1209.33 L993.062 1209.33 L992.476 1209.33 L991.889 1209.33 L991.303 1209.33 L990.717 1209.33 L990.13 1209.33 L989.544 1209.33 L988.957 1209.33 L988.371 1209.33 L987.785 1209.33 L987.198 1209.33 L986.612 1209.33 L986.025 1209.33  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.38 986.612,1209.38 987.198,1209.38 987.785,1209.38 988.371,1209.38 988.957,1209.38 989.544,1209.38 990.13,1209.38 990.717,1209.38 991.303,1209.38 991.889,1209.38 992.476,1209.38 993.062,1209.38 993.649,1209.38 994.235,1209.38 994.822,1209.38 995.408,1209.38 995.994,1209.38 996.581,1209.38 997.167,1209.38 997.754,1209.38 998.34,1209.38 998.926,1209.38 999.513,1209.38 1000.1,1209.38 1000.69,1209.38 1001.27,1209.38 1001.86,1209.38 1002.44,1209.38 1003.03,1209.38 1003.62,1209.38 1004.2,1209.38 1004.79,1209.38 1005.38,1209.38 1005.96,1209.38 1006.55,1209.38 1007.14,1209.38 1007.72,1209.38 1008.31,1209.38 1008.9,1209.38 1009.48,1209.38 1010.07,1209.38 1010.65,1209.38 1011.24,1209.38 1011.83,1209.38 1012.41,1209.38 1013,1209.38 1013.59,1209.38 1014.17,1209.38 1014.76,1209.38 1015.35,1209.38 1015.93,1209.38 1016.52,1209.38 1017.11,1209.38 1017.69,1209.38 1018.28,1209.38 1018.86,1209.38 1019.45,1209.38 1020.04,1209.38 1020.62,1209.38 1021.21,1209.38 1021.8,1209.38 1022.38,1209.38 1022.97,1209.38 1023.56,1209.38 1024.14,1209.38 1024.73,1209.38 1025.32,1209.38 1025.9,1209.38 1026.49,1209.38 1027.07,1209.38 1027.66,1209.38 1028.25,1209.38 1028.83,1209.38 1029.42,1209.38 1030.01,1209.38 1030.59,1209.38 1031.18,1209.38 1031.77,1209.38 1032.35,1209.38 1032.94,1209.38 1033.52,1209.38 1034.11,1209.38 1034.7,1209.38 1035.28,1209.38 1035.87,1209.38 1036.46,1209.38 1037.04,1209.38 1037.63,1209.38 1038.22,1209.38 1038.8,1209.38 1039.39,1209.38 1039.98,1209.38 1040.56,1209.38 1041.15,1209.38 1041.73,1209.38 1042.32,1209.38 1042.91,1209.38 1043.49,1209.38 1044.08,1209.38 1044.67,1209.38 1045.25,1209.38 1045.84,1209.38 1046.43,1209.38 1047.01,1209.38 1047.6,1209.38 1048.19,1209.38 1048.77,1209.38 1049.36,1209.38 1049.94,1209.38 1050.53,1209.38 1051.12,1209.38 1051.7,1209.38 1052.29,1209.38 1052.88,1209.38 1053.46,1209.38 1054.05,1209.38 1054.64,1209.38 1055.22,1209.38 1055.81,1209.38 1056.39,1209.38 1056.98,1209.38 1057.57,1209.38 1058.15,1209.38 1058.74,1209.38 1059.33,1209.38 1059.91,1209.38 1060.5,1209.38 1061.09,1209.38 1061.67,1209.38 1062.26,1209.38 1062.85,1209.38 1063.43,1209.38 1064.02,1209.38 1064.6,1209.38 1065.19,1209.38 1065.78,1209.38 1066.36,1209.38 1066.95,1209.38 1067.54,1209.38 1068.12,1209.38 1068.71,1209.38 1069.3,1209.38 1069.88,1209.38 1070.47,1209.38 1071.06,1209.38 1071.64,1209.38 1072.23,1209.38 1072.81,1209.38 1073.4,1209.38 1073.99,1209.38 1074.57,1209.38 1075.16,1209.38 1075.75,1209.38 1076.33,1209.38 1076.92,1209.38 1077.51,1209.38 1078.09,1209.38 1078.68,1209.38 1079.26,1209.38 1079.85,1209.38 1080.44,1209.38 1081.02,1209.38 1081.61,1209.38 1082.2,1209.38 1082.78,1209.38 1083.37,1209.38 1083.96,1209.38 1084.54,1209.38 1085.13,1209.38 1085.72,1209.38 1086.3,1209.38 1086.89,1209.38 1087.47,1209.38 1088.06,1209.38 1088.65,1209.38 1089.23,1209.38 1089.82,1209.38 1090.41,1209.38 1090.99,1209.38 1091.58,1209.38 1092.17,1209.38 1092.75,1209.38 1093.34,1209.38 1093.93,1209.38 1094.51,1209.38 1095.1,1209.38 1095.68,1209.38 1096.27,1209.38 1096.86,1209.38 1097.44,1209.38 1098.03,1209.38 1098.62,1209.38 1099.2,1209.38 1099.79,1209.38 1100.38,1209.38 1100.96,1209.38 1101.55,1209.38 1102.14,1209.38 1102.72,1209.38 1103.31,1209.38 1103.89,1209.38 1104.48,1209.38 1105.07,1209.38 1105.65,1209.38 1106.24,1209.38 1106.83,1209.38 1107.41,1209.38 1108,1209.38 1108.59,1209.38 1109.17,1209.38 1109.76,1209.38 1110.34,1209.38 1110.93,1209.38 1111.52,1209.38 1112.1,1209.38 1112.69,1209.38 1113.28,1209.38 1113.86,1209.38 1114.45,1209.38 1115.04,1209.38 1115.62,1209.38 1116.21,1209.38 1116.8,1209.38 1117.38,1209.38 1117.97,1209.38 1118.55,1209.38 1119.14,1209.38 1119.73,1209.38 1120.31,1209.38 1120.9,1209.38 1121.49,1209.38 1122.07,1209.38 1122.66,1209.38 1123.25,1209.38 1123.83,1209.38 1124.42,1209.38 1125.01,1209.38 1125.59,1209.38 1126.18,1209.38 1126.76,1209.38 1127.35,1209.38 1127.94,1209.38 1128.52,1209.38 1129.11,1209.38 1129.7,1209.38 1130.28,1209.38 1130.87,1209.38 1131.46,1209.38 1132.04,1209.38 1132.63,1209.38 1133.21,1209.38 1133.8,1209.38 1134.39,1209.38 1134.97,1209.38 1135.56,1209.38 1136.15,1209.38 1136.73,1209.38 1137.32,1209.38 1137.91,1209.38 1138.49,1209.38 1139.08,1209.38 1139.67,1209.38 1140.25,1209.38 1140.84,1209.38 1141.42,1209.38 1142.01,1209.38 1142.6,1209.38 1143.18,1209.38 1143.77,1209.38 1144.36,1209.38 1144.94,1209.38 1145.53,1209.38 1146.12,1209.38 1146.7,1209.38 1147.29,1209.38 1147.88,1209.38 1148.46,1209.38 1149.05,1209.38 1149.63,1209.38 1150.22,1209.38 1150.81,1209.38 1151.39,1209.38 1151.98,1209.38 1152.57,1209.38 1153.15,1209.38 1153.74,1209.38 1154.33,1209.38 1154.91,1209.38 1155.5,1209.38 1156.09,1209.38 1156.67,1209.38 1157.26,1209.38 1157.84,1209.38 1158.43,1209.38 1159.02,1209.38 1159.6,1209.38 1160.19,1209.38 1160.78,1209.38 1161.36,1209.38 1161.95,1209.38 1162.54,1209.38 1163.12,1209.38 1163.71,1209.38 1164.29,1209.38 1164.88,1209.38 1165.47,1209.38 1166.05,1209.38 1166.64,1209.38 1167.23,1209.38 1167.81,1209.38 1168.4,1209.38 1168.99,1209.38 1169.57,1209.38 1170.16,1209.38 1170.75,1209.38 1171.33,1209.38 1171.92,1209.38 1172.5,1209.38 1173.09,1209.38 1173.68,1209.38 1174.26,1209.38 1174.85,1209.38 1175.44,1209.38 1176.02,1209.38 1176.61,1209.38 1177.2,1209.38 1177.78,1209.38 1178.37,1209.38 1178.96,1209.38 1179.54,1209.38 1180.13,1209.38 1180.71,1209.38 1181.3,1209.38 1181.89,1209.38 1182.47,1209.38 1183.06,1209.38 1183.65,1209.38 1184.23,1209.38 1184.82,1209.38 1185.41,1209.38 1185.99,1209.38 1186.58,1209.38 1187.16,1209.38 1187.75,1209.38 1188.34,1209.38 1188.92,1209.38 1189.51,1209.38 1190.1,1209.38 1190.68,1209.38 1191.27,1209.38 1191.86,1209.38 1192.44,1209.38 1193.03,1209.38 1193.62,1209.38 1194.2,1209.38 1194.79,1209.38 1195.37,1209.38 1195.96,1209.38 1196.55,1209.38 1197.13,1209.38 1197.72,1209.38 1198.31,1209.38 1198.89,1209.38 1199.48,1209.38 1200.07,1209.38 1200.65,1209.38 1201.24,1209.38 1201.83,1209.38 1202.41,1209.38 1203,1209.38 1203.58,1209.38 1204.17,1209.38 1204.76,1209.38 1205.34,1209.38 1205.93,1209.38 1206.52,1209.38 1207.1,1209.38 1207.69,1209.38 1208.28,1209.38 1208.86,1209.38 1209.45,1209.38 1210.03,1209.38 1210.62,1209.38 1211.21,1209.38 1211.79,1209.38 1212.38,1209.38 1212.97,1209.38 1213.55,1209.38 1214.14,1209.38 1214.73,1209.38 1215.31,1209.38 1215.9,1209.38 1216.49,1209.38 1217.07,1209.38 1217.66,1209.38 1218.24,1209.38 1218.83,1209.38 1219.42,1209.38 1220,1209.38 1220.59,1209.38 1221.18,1209.38 1221.76,1209.38 1222.35,1209.38 1222.94,1209.38 1223.52,1209.38 1224.11,1209.38 1224.7,1209.38 1225.28,1209.38 1225.87,1209.38 1226.45,1209.38 1227.04,1209.38 1227.63,1209.38 1228.21,1209.38 1228.8,1209.38 1229.39,1209.38 1229.97,1209.38 1230.56,1209.38 1231.15,1209.38 1231.73,1209.38 1232.32,1209.38 1232.91,1209.38 1233.49,1209.38 1234.08,1209.38 1234.66,1209.38 1235.25,1209.38 1235.84,1209.38 1236.42,1209.38 1237.01,1209.38 1237.6,1209.38 1238.18,1209.38 1238.77,1209.38 1239.36,1209.38 1239.94,1209.38 1240.53,1209.38 1241.11,1209.38 1241.7,1209.38 1242.29,1209.38 1242.87,1209.38 1243.46,1209.38 1244.05,1209.38 1244.63,1209.38 1245.22,1209.38 1245.81,1209.38 1246.39,1209.38 1246.98,1209.38 1247.57,1209.38 1248.15,1209.38 1248.74,1209.38 1249.32,1209.38 1249.91,1209.38 1250.5,1209.38 1251.08,1209.38 1251.67,1209.38 1252.26,1209.38 1252.84,1209.38 1253.43,1209.38 1254.02,1209.38 1254.6,1209.38 1255.19,1209.38 1255.78,1209.38 1256.36,1209.38 1256.95,1209.38 1257.53,1209.38 1258.12,1209.38 1258.71,1209.38 1259.29,1209.38 1259.88,1209.38 1260.47,1209.38 1261.05,1209.38 1261.64,1209.38 1262.23,1209.38 1262.81,1209.38 1263.4,1209.38 1263.98,1209.38 1264.57,1209.38 1265.16,1209.38 1265.74,1209.38 1266.33,1209.38 1266.92,1209.38 1267.5,1209.38 1268.09,1209.38 1268.68,1209.38 1269.26,1209.38 1269.85,1209.38 1270.44,1209.38 1271.02,1209.38 1271.61,1209.38 1272.19,1209.38 1272.78,1209.38 1273.37,1209.38 1273.95,1209.38 1274.54,1209.38 1275.13,1209.38 1275.71,1209.38 1276.3,1209.38 1276.89,1209.38 1277.47,1209.38 1278.06,1209.38 1278.65,1209.38 1279.23,1209.38 1279.82,1209.38 1280.4,1209.38 1280.99,1209.38 1281.58,1209.38 1282.16,1209.38 1282.75,1209.38 1283.34,1209.38 1283.92,1209.38 1284.51,1209.38 1285.1,1209.38 1285.68,1209.38 1286.27,1209.38 1286.86,1209.38 1287.44,1209.38 1288.03,1209.38 1288.61,1209.38 1289.2,1209.38 1289.79,1209.38 1290.37,1209.38 1290.96,1209.38 1291.55,1209.38 1292.13,1209.38 1292.72,1209.38 1293.31,1209.38 1293.89,1209.38 1294.48,1209.38 1295.06,1209.38 1295.65,1209.38 1296.24,1209.38 1296.82,1209.38 1297.41,1209.38 1298,1209.38 1298.58,1209.38 1299.17,1209.38 1299.76,1209.38 1300.34,1209.38 1300.93,1209.38 1301.52,1209.38 1302.1,1209.38 1302.69,1209.38 1303.27,1209.38 1303.86,1209.38 1304.45,1209.38 1305.03,1209.38 1305.62,1209.38 1306.21,1209.38 1306.79,1209.38 1307.38,1209.38 1307.97,1209.38 1308.55,1209.38 1309.14,1209.38 1309.73,1209.38 1310.31,1209.38 1310.9,1209.38 1311.48,1209.38 1312.07,1209.38 1312.66,1209.38 1313.24,1209.38 1313.83,1209.38 1314.42,1209.38 1315,1209.38 1315.59,1209.38 1316.18,1209.38 1316.76,1209.38 1317.35,1209.38 1317.93,1209.38 1318.52,1209.38 1319.11,1209.38 1319.69,1209.38 1320.28,1209.38 1320.87,1209.38 1321.45,1209.38 1322.04,1209.38 1322.63,1209.38 1323.21,1209.38 1323.8,1209.38 1324.39,1209.38 1324.97,1209.38 1325.56,1209.38 1326.14,1209.38 1326.73,1209.38 1327.32,1209.38 1327.9,1209.38 1328.49,1209.38 1329.08,1209.38 1329.66,1209.38 1330.25,1209.38 1330.84,1209.38 1331.42,1209.38 1332.01,1209.38 1332.6,1209.38 1333.18,1209.38 1333.77,1209.38 1334.35,1209.38 1334.94,1209.38 1335.53,1209.38 1336.11,1209.38 1336.7,1209.38 1337.29,1209.38 1337.87,1209.38 1338.46,1209.38 1339.05,1209.38 1339.63,1209.38 1340.22,1209.38 1340.8,1209.38 1341.39,1209.38 1341.98,1209.38 1342.56,1209.38 1343.15,1209.38 1343.74,1209.38 1344.32,1209.38 1344.91,1209.38 1345.5,1209.38 1346.08,1209.38 1346.67,1209.38 1347.26,1209.38 1347.84,1209.38 1348.43,1209.38 1349.01,1209.38 1349.6,1209.38 1350.19,1209.38 1350.77,1209.38 1351.36,1209.38 1351.95,1209.38 1352.53,1209.38 1353.12,1209.38 1353.71,1209.38 1354.29,1209.38 1354.88,1209.38 1355.47,1209.38 1356.05,1209.38 1356.64,1209.38 1357.22,1209.38 1357.81,1209.38 1358.4,1209.38 1358.98,1209.38 1359.57,1209.38 1360.16,1209.38 1360.74,1209.38 1361.33,1209.38 1361.92,1209.38 1362.5,1209.38 1363.09,1209.38 1363.68,1209.38 1364.26,1209.38 1364.85,1209.38 1365.43,1209.38 1366.02,1209.38 1366.61,1209.38 1367.19,1209.38 1367.78,1209.38 1368.37,1209.38 1368.95,1209.38 1369.54,1209.38 1370.13,1209.38 1370.71,1209.38 1371.3,1209.38 1371.88,1209.38 1372.47,1209.38 1373.06,1209.38 1373.64,1209.38 1374.23,1209.38 1374.82,1209.38 1375.4,1209.38 1375.99,1209.38 1376.58,1209.38 1377.16,1209.38 1377.75,1209.38 1378.34,1209.38 1378.92,1209.38 1379.51,1209.38 1380.09,1209.38 1380.68,1209.38 1381.27,1209.38 1381.85,1209.38 1382.44,1209.38 1383.03,1209.38 1383.61,1209.38 1384.2,1209.38 1384.79,1209.38 1385.37,1209.38 1385.96,1209.38 1386.55,1209.38 1387.13,1209.38 1387.72,1209.38 1388.3,1209.38 1388.89,1209.38 1389.48,1209.38 1390.06,1209.38 1390.65,1209.38 1391.24,1209.38 1391.82,1209.38 1392.41,1209.38 1393,1209.38 1393.58,1209.38 1394.17,1209.38 1394.75,1209.38 1395.34,1209.38 1395.93,1209.38 1396.51,1209.38 1397.1,1209.38 1397.69,1209.38 1398.27,1209.38 1398.86,1209.38 1399.45,1209.38 1400.03,1209.38 1400.62,1209.38 1401.21,1209.38 1401.79,1209.38 1402.38,1209.38 1402.96,1209.38 1403.55,1209.38 1404.14,1209.38 1404.72,1209.38 1405.31,1209.38 1405.9,1209.38 1406.48,1209.38 1407.07,1209.38 1407.66,1209.38 1408.24,1209.38 1408.83,1209.38 1409.42,1209.38 1410,1209.38 1410.59,1209.38 1411.17,1209.38 1411.76,1209.38 1412.35,1209.38 1412.93,1209.38 1413.52,1209.38 1414.11,1209.38 1414.69,1209.38 1415.28,1209.38 1415.87,1209.38 1416.45,1209.38 1417.04,1209.38 1417.63,1209.38 1418.21,1209.38 1418.8,1209.38 1419.38,1209.38 1419.97,1209.38 1420.56,1209.38 1421.14,1209.38 1421.73,1209.38 1422.32,1209.38 1422.9,1209.38 1423.49,1209.38 1424.08,1209.38 1424.66,1209.38 1425.25,1209.38 1425.83,1209.38 1426.42,1209.38 1427.01,1209.38 1427.59,1209.38 1428.18,1209.38 1428.77,1209.38 1429.35,1209.38 1429.94,1209.38 1430.53,1209.38 1431.11,1209.38 1431.7,1209.38 1432.29,1209.38 1432.87,1209.38 1433.46,1209.38 1434.04,1209.38 1434.63,1209.38 1435.22,1209.38 1435.8,1209.38 1436.39,1209.38 1436.98,1209.38 1437.56,1209.38 1438.15,1209.38 1438.74,1209.38 1439.32,1209.38 1439.91,1209.38 1440.5,1209.38 1441.08,1209.38 1441.67,1209.38 1442.25,1209.38 1442.84,1209.38 1443.43,1209.38 1444.01,1209.38 1444.6,1209.38 1445.19,1209.38 1445.77,1209.38 1446.36,1209.38 1446.95,1209.38 1447.53,1209.38 1448.12,1209.38 1448.7,1209.38 1449.29,1209.38 1449.88,1209.38 1450.46,1209.38 1451.05,1209.38 1451.64,1209.38 1452.22,1209.38 1452.81,1209.38 1453.4,1209.38 1453.98,1209.38 1454.57,1209.38 1455.16,1209.38 1455.74,1209.38 1456.33,1209.38 1456.91,1209.38 1457.5,1209.38 1458.09,1209.38 1458.67,1209.38 1459.26,1209.38 1459.85,1209.38 1460.43,1209.38 1461.02,1209.38 1461.61,1209.38 1462.19,1209.38 1462.78,1209.38 1463.37,1209.38 1463.95,1209.38 1464.54,1209.38 1465.12,1209.38 1465.71,1209.38 1466.3,1209.38 1466.88,1209.38 1467.47,1209.38 1468.06,1209.38 1468.64,1209.38 1469.23,1209.38 1469.82,1209.38 1470.4,1209.38 1470.99,1209.38 1471.57,1209.38 1472.16,1209.38 1472.75,1209.38 1473.33,1209.38 1473.92,1209.38 1474.51,1209.38 1475.09,1209.38 1475.68,1209.38 1476.27,1209.38 1476.85,1209.38 1477.44,1209.38 1478.03,1209.38 1478.61,1209.38 1479.2,1209.38 1479.78,1209.38 1480.37,1209.38 1480.96,1209.38 1481.54,1209.38 1482.13,1209.38 1482.72,1209.38 1483.3,1209.38 1483.89,1209.38 1484.48,1209.38 1485.06,1209.38 1485.65,1209.38 1486.24,1209.38 1486.82,1209.38 1487.41,1209.38 1487.99,1209.38 1488.58,1209.38 1489.17,1209.38 1489.75,1209.38 1490.34,1209.38 1490.93,1209.38 1491.51,1209.38 1492.1,1209.38 1492.69,1209.38 1493.27,1209.38 1493.86,1209.38 1494.45,1209.38 1495.03,1209.38 1495.62,1209.38 1496.2,1209.38 1496.79,1209.38 1497.38,1209.38 1497.96,1209.38 1498.55,1209.38 1499.14,1209.38 1499.72,1209.38 1500.31,1209.38 1500.9,1209.38 1501.48,1209.38 1502.07,1209.38 1502.65,1209.38 1503.24,1209.38 1503.83,1209.38 1504.41,1209.38 1505,1209.38 1505.59,1209.38 1506.17,1209.38 1506.76,1209.38 1507.35,1209.38 1507.93,1209.38 1508.52,1209.38 1509.11,1209.38 1509.69,1209.38 1510.28,1209.38 1510.86,1209.38 1511.45,1209.38 1512.04,1209.38 1512.62,1209.38 1513.21,1209.38 1513.8,1209.38 1514.38,1209.38 1514.97,1209.38 1515.56,1209.38 1516.14,1209.38 1516.73,1209.38 1517.32,1209.38 1517.9,1209.38 1518.49,1209.38 1519.07,1209.38 1519.66,1209.38 1520.25,1209.38 1520.83,1209.38 1521.42,1209.38 1522.01,1209.38 1522.59,1209.38 1523.18,1209.38 1523.77,1209.38 1524.35,1209.38 1524.94,1209.38 1525.52,1209.38 1526.11,1209.38 1526.7,1209.38 1527.28,1209.38 1527.87,1209.38 1528.46,1209.38 1529.04,1209.38 1529.63,1209.38 1530.22,1209.38 1530.8,1209.38 1531.39,1209.38 1531.98,1209.38 1532.56,1209.38 1533.15,1209.38 1533.73,1209.38 1534.32,1209.38 1534.91,1209.38 1535.49,1209.38 1536.08,1209.38 1536.67,1209.38 1537.25,1209.38 1537.84,1209.38 1538.43,1209.38 1539.01,1209.38 1539.6,1209.38 1540.19,1209.38 1540.77,1209.38 1541.36,1209.38 1541.94,1209.38 1542.53,1209.38 1543.12,1209.38 1543.7,1209.38 1544.29,1209.38 1544.88,1209.38 1545.46,1209.38 1546.05,1209.38 1546.64,1209.38 1547.22,1209.38 1547.81,1209.38 1548.4,1209.38 1548.98,1209.38 1549.57,1209.38 1550.15,1209.38 1550.74,1209.38 1551.33,1209.38 1551.91,1209.38 1552.5,1209.38 1553.09,1209.38 1553.67,1209.38 1554.26,1209.38 1554.85,1209.38 1555.43,1209.38 1556.02,1209.38 1556.6,1209.38 1557.19,1209.38 1557.78,1209.38 1558.36,1209.38 1558.95,1209.38 1559.54,1209.38 1560.12,1209.38 1560.71,1209.38 1561.3,1209.38 1561.88,1209.38 1562.47,1209.38 1563.06,1209.38 1563.64,1209.38 1564.23,1209.38 1564.81,1209.38 1565.4,1209.38 1565.99,1209.38 1566.57,1209.38 1567.16,1209.38 1567.75,1209.38 1568.33,1209.38 1568.92,1209.38 1569.51,1209.38 1570.09,1209.38 1570.68,1209.38 1571.27,1209.38 1571.85,1209.38 1572.44,1209.38 1573.02,1209.38 1573.61,1209.38 1574.2,1209.38 1574.78,1209.38 1575.37,1209.38 1575.96,1209.38 1576.54,1209.38 1577.13,1209.38 1577.72,1209.38 1578.3,1209.38 1578.89,1209.38 1579.47,1209.38 1580.06,1209.38 1580.65,1209.38 1581.23,1209.38 1581.82,1209.38 1582.41,1209.38 1582.99,1209.38 1583.58,1209.38 1584.17,1209.38 1584.75,1209.38 1585.34,1209.38 1585.93,1209.38 1586.51,1209.38 1587.1,1209.38 1587.68,1209.38 1588.27,1209.38 1588.86,1209.38 1589.44,1209.38 1590.03,1209.38 1590.62,1209.38 1591.2,1209.38 1591.79,1209.38 1592.38,1209.38 1592.96,1209.38 1593.55,1209.38 1594.14,1209.38 1594.72,1209.38 1595.31,1209.38 1595.89,1209.38 1596.48,1209.38 1597.07,1209.38 1597.65,1209.38 1598.24,1209.38 1598.83,1209.38 1599.41,1209.38 1600,1209.38 1600.59,1209.38 1601.17,1209.38 1601.76,1209.38 1602.34,1209.38 1602.93,1209.38 1603.52,1209.38 1604.1,1209.38 1604.69,1209.38 1605.28,1209.38 1605.86,1209.38 1606.45,1209.38 1607.04,1209.38 1607.62,1209.38 1608.21,1209.38 1608.8,1209.38 1609.38,1209.38 1609.97,1209.38 1610.55,1209.38 1611.14,1209.38 1611.73,1209.38 1612.31,1209.38 1612.9,1209.38 1613.49,1209.38 1614.07,1209.38 1614.66,1209.38 1615.25,1209.38 1615.83,1209.38 1616.42,1209.38 1617.01,1209.38 1617.59,1209.38 1618.18,1209.38 1618.76,1209.38 1619.35,1209.38 1619.94,1209.38 1620.52,1209.38 1621.11,1209.38 1621.7,1209.38 1622.28,1209.38 1622.87,1209.38 1623.46,1209.38 1624.04,1209.38 1624.63,1209.38 1625.22,1209.38 1625.8,1209.38 1626.39,1209.38 1626.97,1209.38 1627.56,1209.38 1628.15,1209.38 1628.73,1209.38 1629.32,1209.38 1629.91,1209.38 1630.49,1209.38 1631.08,1209.38 1631.67,1209.38 1632.25,1209.38 1632.84,1209.38 1633.42,1209.38 1634.01,1209.38 1634.6,1209.38 1635.18,1209.38 1635.77,1209.38 1636.36,1209.38 1636.94,1209.38 1637.53,1209.38 1638.12,1209.38 1638.7,1209.38 1639.29,1209.38 1639.88,1209.38 1640.46,1209.38 1641.05,1209.38 1641.63,1209.38 1642.22,1209.38 1642.81,1209.38 1643.39,1209.38 1643.98,1209.38 1644.57,1209.38 1645.15,1209.38 1645.74,1209.38 1646.33,1209.38 1646.91,1209.38 1647.5,1209.38 1648.09,1209.38 1648.67,1209.38 1649.26,1209.38 1649.84,1209.38 1650.43,1209.38 1651.02,1209.38 1651.6,1209.38 1652.19,1209.38 1652.78,1209.38 1653.36,1209.38 1653.95,1209.38 1654.54,1209.38 1655.12,1209.38 1655.71,1209.38 1656.29,1209.38 1656.88,1209.38 1657.47,1209.38 1658.05,1209.38 1658.64,1209.38 1659.23,1209.38 1659.81,1209.38 1660.4,1209.38 1660.99,1209.38 1661.57,1209.38 1662.16,1209.38 1662.75,1209.38 1663.33,1209.38 1663.92,1209.38 1664.5,1209.38 1665.09,1209.38 1665.68,1209.38 1666.26,1209.38 1666.85,1209.38 1667.44,1209.38 1668.02,1209.38 1668.61,1209.38 1669.2,1209.38 1669.78,1209.38 1670.37,1209.38 1670.96,1209.38 1671.54,1209.38 1672.13,1209.38 1672.71,1209.38 1673.3,1209.38 1673.89,1209.38 1674.47,1209.38 1675.06,1209.38 1675.65,1209.38 1676.23,1209.38 1676.82,1209.38 1677.41,1209.38 1677.99,1209.38 1678.58,1209.38 1679.17,1209.38 1679.75,1209.38 1680.34,1209.38 1680.92,1209.38 1681.51,1209.38 1682.1,1209.38 1682.68,1209.38 1683.27,1209.38 1683.86,1209.38 1684.44,1209.38 1685.03,1209.38 1685.62,1209.38 1686.2,1209.38 1686.79,1209.38 1687.37,1209.38 1687.96,1209.38 1688.55,1209.38 1689.13,1209.38 1689.72,1209.38 1690.31,1209.38 1690.89,1209.38 1691.48,1209.38 1692.07,1209.38 1692.65,1209.38 1693.24,1209.38 1693.83,1209.38 1694.41,1209.38 1695,1209.38 1695.58,1209.38 1696.17,1209.38 1696.76,1209.38 1697.34,1209.38 1697.93,1209.38 1698.52,1209.38 1699.1,1209.38 1699.69,1209.38 1700.28,1209.38 1700.86,1209.38 1701.45,1209.38 1702.04,1209.38 1702.62,1209.38 1703.21,1209.38 1703.79,1209.38 1704.38,1209.38 1704.97,1209.38 1705.55,1209.38 1706.14,1209.38 1706.73,1209.38 1707.31,1209.38 1707.9,1209.38 1708.49,1209.38 1709.07,1209.38 1709.66,1209.38 1710.24,1209.38 1710.83,1209.38 1711.42,1209.38 1712,1209.38 1712.59,1209.38 1713.18,1209.38 1713.76,1209.38 1714.35,1209.38 1714.94,1209.38 1715.52,1209.38 1716.11,1209.38 1716.7,1209.38 1717.28,1209.38 1717.87,1209.38 1718.45,1209.38 1719.04,1209.38 1719.63,1209.38 1720.21,1209.38 1720.8,1209.38 1721.39,1209.38 1721.97,1209.38 1722.56,1209.38 1723.15,1209.38 1723.73,1209.38 1724.32,1209.38 1724.91,1209.38 1725.49,1209.38 1726.08,1209.38 1726.66,1209.38 1727.25,1209.38 1727.84,1209.38 1728.42,1209.38 1729.01,1209.38 1729.6,1209.38 1730.18,1209.38 1730.77,1209.38 1731.36,1209.38 1731.94,1209.38 1732.53,1209.38 1733.11,1209.38 1733.7,1209.38 1734.29,1209.38 1734.87,1209.38 1735.46,1209.38 1736.05,1209.38 1736.63,1209.38 1737.22,1209.38 1737.81,1209.38 1738.39,1209.38 1738.98,1209.38 1739.57,1209.38 1740.15,1209.38 1740.74,1209.38 1741.32,1209.38 1741.91,1209.38 1742.5,1209.38 1743.08,1209.38 1743.67,1209.38 1744.26,1209.38 1744.84,1209.38 1745.43,1209.38 1746.02,1209.38 1746.6,1209.38 1747.19,1209.38 1747.78,1209.38 1748.36,1209.38 1748.95,1209.38 1749.53,1209.38 1750.12,1209.38 1750.71,1209.38 1751.29,1209.38 1751.88,1209.38 1752.47,1209.38 1753.05,1209.38 1753.64,1209.38 1754.23,1209.38 1754.81,1209.38 1755.4,1209.38 1755.99,1209.38 1756.57,1209.38 1757.16,1209.38 1757.74,1209.38 1758.33,1209.38 1758.92,1209.38 1759.5,1209.38 1760.09,1209.38 1760.68,1209.38 1761.26,1209.38 1761.85,1209.38 1762.44,1209.38 1763.02,1209.38 1763.61,1209.38 1764.19,1209.38 1764.78,1209.38 1765.37,1209.38 1765.95,1209.38 1766.54,1209.38 1767.13,1209.38 1767.71,1209.38 1768.3,1209.38 1768.89,1209.38 1769.47,1209.38 1770.06,1209.38 1770.65,1209.38 1771.23,1209.38 1771.82,1209.38 1772.4,1209.38 1772.99,1209.38 1773.58,1209.38 1774.16,1209.38 1774.75,1209.38 1775.34,1209.38 1775.92,1209.38 1776.51,1209.38 1777.1,1209.38 1777.68,1209.38 1778.27,1209.38 1778.86,1209.38 1779.44,1209.38 1780.03,1209.38 1780.61,1209.38 1781.2,1209.38 1781.79,1209.38 1782.37,1209.38 1782.96,1209.38 1783.55,1209.38 1784.13,1209.38 1784.72,1209.38 1785.31,1209.38 1785.89,1209.38 1786.48,1209.38 1787.06,1209.38 1787.65,1209.38 1788.24,1209.38 1788.82,1209.38 1789.41,1209.38 1790,1209.38 1790.58,1209.38 1791.17,1209.38 1791.76,1209.38 1792.34,1209.38 1792.93,1209.38 1793.52,1209.38 1794.1,1209.38 1794.69,1209.38 1795.27,1209.38 1795.86,1209.38 1796.45,1209.38 1797.03,1209.38 1797.62,1209.38 1798.21,1209.38 1798.79,1209.38 1799.38,1209.38 1799.97,1209.38 1800.55,1209.38 1801.14,1209.38 1801.73,1209.38 1802.31,1209.38 1802.9,1209.38 1803.48,1209.38 1804.07,1209.38 1804.66,1209.38 1805.24,1209.38 1805.83,1209.38 1806.42,1209.38 1807,1209.38 1807.59,1209.38 1808.18,1209.38 1808.76,1209.38 1809.35,1209.38 1809.94,1209.38 1810.52,1209.38 1811.11,1209.38 1811.69,1209.38 1812.28,1209.38 1812.87,1209.38 1813.45,1209.38 1814.04,1209.38 1814.63,1209.38 1815.21,1209.38 1815.8,1209.38 1816.39,1209.38 1816.97,1209.38 1817.56,1209.38 1818.14,1209.38 1818.73,1209.38 1819.32,1209.38 1819.9,1209.38 1820.49,1209.38 1821.08,1209.38 1821.66,1209.38 1822.25,1209.38 1822.84,1209.38 1823.42,1209.38 1824.01,1209.38 1824.6,1209.38 1825.18,1209.38 1825.77,1209.38 1826.35,1209.38 1826.94,1209.38 1827.53,1209.38 1828.11,1209.38 1828.7,1209.38 1829.29,1209.38 1829.87,1209.38 1830.46,1209.38 1831.05,1209.38 1831.63,1209.38 1832.22,1209.38 1832.81,1209.38 1833.39,1209.38 1833.98,1209.38 1834.56,1209.38 1835.15,1209.38 1835.74,1209.38 1836.32,1209.38 1836.91,1209.38 1837.5,1209.38 1838.08,1209.38 1838.67,1209.38 1839.26,1209.38 1839.84,1209.38 1840.43,1209.38 1841.01,1209.38 1841.6,1209.38 1842.19,1209.38 1842.77,1209.38 1843.36,1209.38 1843.95,1209.38 1844.53,1209.38 1845.12,1209.38 1845.71,1209.38 1846.29,1209.38 1846.88,1209.38 1847.47,1209.38 1848.05,1209.38 1848.64,1209.38 1849.22,1209.38 1849.81,1209.38 1850.4,1209.38 1850.98,1209.38 1851.57,1209.38 1852.16,1209.38 1852.74,1209.38 1853.33,1209.38 1853.92,1209.38 1854.5,1209.38 1855.09,1209.38 1855.68,1209.38 1856.26,1209.38 1856.85,1209.38 1857.43,1209.38 1858.02,1209.38 1858.61,1209.38 1859.19,1209.38 1859.78,1209.38 1860.37,1209.38 1860.95,1209.38 1861.54,1209.38 1862.13,1209.38 1862.71,1209.38 1863.3,1209.38 1863.88,1209.38 1864.47,1209.38 1865.06,1209.38 1865.64,1209.38 1866.23,1209.38 1866.82,1209.38 1867.4,1209.38 1867.99,1209.38 1868.58,1209.38 1869.16,1209.38 1869.75,1209.38 1870.34,1209.38 1870.92,1209.38 1871.51,1209.38 1872.09,1209.38 1872.68,1209.38 1873.27,1209.38 1873.85,1209.38 1874.44,1209.38 1875.03,1209.38 1875.61,1209.38 1876.2,1209.38 1876.79,1209.38 1877.37,1209.38 1877.96,1209.38 1878.55,1209.38 1879.13,1209.38 1879.72,1209.38 1880.3,1209.38 1880.89,1209.38 1881.48,1209.38 1882.06,1209.38 1882.65,1209.38 1883.24,1209.38 1883.82,1209.38 1884.41,1209.38 1885,1209.38 1885.58,1209.38 1886.17,1209.38 1886.76,1209.38 1887.34,1209.38 1887.93,1209.38 1888.51,1209.38 1889.1,1209.38 1889.69,1209.38 1890.27,1209.38 1890.86,1209.38 1891.45,1209.38 1892.03,1209.38 1892.62,1209.38 1893.21,1209.38 1893.79,1209.38 1894.38,1209.38 1894.96,1209.38 1895.55,1209.38 1896.14,1209.38 1896.72,1209.38 1897.31,1209.38 1897.9,1209.38 1898.48,1209.38 1899.07,1209.38 1899.66,1209.38 1900.24,1209.38 1900.83,1209.38 1901.42,1209.38 1902,1209.38 1902.59,1209.38 1903.17,1209.38 1903.76,1209.38 1904.35,1209.38 1904.93,1209.38 1905.52,1209.38 1906.11,1209.38 1906.69,1209.38 1907.28,1209.38 1907.87,1209.38 1908.45,1209.38 1909.04,1209.38 1909.63,1209.38 1910.21,1209.38 1910.8,1209.38 1911.38,1209.38 1911.97,1209.38 1912.56,1209.38 1913.14,1209.38 1913.73,1209.38 1914.32,1209.38 1914.9,1209.38 1915.49,1209.38 1916.08,1209.38 1916.66,1209.38 1917.25,1209.38 1917.83,1209.38 1918.42,1209.38 1919.01,1209.38 1919.59,1209.38 1920.18,1209.38 1920.77,1209.38 1921.35,1209.38 1921.94,1209.38 1922.53,1209.38 1923.11,1209.38 1923.7,1209.38 1924.29,1209.38 1924.87,1209.38 1925.46,1209.38 1926.04,1209.38 1926.63,1209.38 1927.22,1209.38 1927.8,1209.38 1928.39,1209.38 1928.98,1209.38 1929.56,1209.38 1930.15,1209.38 1930.74,1209.38 1931.32,1209.38 1931.91,1209.38 1932.5,1209.38 1933.08,1209.38 1933.67,1209.38 1934.25,1209.38 1934.84,1209.38 1935.43,1209.38 1936.01,1209.38 1936.6,1209.38 1937.19,1209.38 1937.77,1209.38 1938.36,1209.38 1938.95,1209.38 1939.53,1209.38 1940.12,1209.38 1940.71,1209.38 1941.29,1209.38 1941.88,1209.38 1942.46,1209.38 1943.05,1209.38 1943.64,1209.38 1944.22,1209.38 1944.81,1209.38 1945.4,1209.38 1945.98,1209.38 1946.57,1209.38 1947.16,1209.38 1947.74,1209.38 1948.33,1209.38 1948.91,1209.38 1949.5,1209.38 1950.09,1209.38 1950.67,1209.38 1951.26,1209.38 1951.85,1209.38 1952.43,1209.38 1953.02,1209.38 1953.61,1209.38 1954.19,1209.38 1954.78,1209.38 1955.37,1209.38 1955.95,1209.38 1956.54,1209.38 1957.12,1209.38 1957.71,1209.38 1958.3,1209.38 1958.88,1209.38 1959.47,1209.38 1960.06,1209.38 1960.64,1209.38 1961.23,1209.38 1961.82,1209.38 1962.4,1209.38 1962.99,1209.38 1963.58,1209.38 1964.16,1209.38 1964.75,1209.38 1965.33,1209.38 1965.92,1209.38 1966.51,1209.38 1967.09,1209.38 1967.68,1209.38 1968.27,1209.38 1968.85,1209.38 1969.44,1209.38 1970.03,1209.38 1970.61,1209.38 1971.2,1209.38 1971.78,1209.38 1972.37,1209.38 1972.96,1209.38 1973.54,1209.38 1974.13,1209.38 1974.72,1209.38 1975.3,1209.38 1975.89,1209.38 1976.48,1209.38 1977.06,1209.38 1977.65,1209.38 1978.24,1209.38 1978.82,1209.38 1979.41,1209.38 1979.99,1209.38 1980.58,1209.38 1981.17,1209.38 1981.75,1209.38 1982.34,1209.38 1982.93,1209.38 1983.51,1209.38 1984.1,1209.38 1984.69,1209.38 1985.27,1209.38 1985.86,1209.38 1986.45,1209.38 1987.03,1209.38 1987.62,1209.38 1988.2,1209.38 1988.79,1209.38 1989.38,1209.38 1989.96,1209.38 1990.55,1209.38 1991.14,1209.38 1991.72,1209.38 1992.31,1209.38 1992.9,1209.38 1993.48,1209.38 1994.07,1209.38 1994.65,1209.38 1995.24,1209.38 1995.83,1209.38 1996.41,1209.38 1997,1209.38 1997.59,1209.38 1998.17,1209.38 1998.76,1209.38 1999.35,1209.38 1999.93,1209.38 2000.52,1209.38 2001.11,1209.38 2001.69,1209.38 2002.28,1209.38 2002.86,1209.38 2003.45,1209.38 2004.04,1209.38 2004.62,1209.38 2005.21,1209.38 2005.8,1209.38 2006.38,1209.38 2006.97,1209.38 2007.56,1209.38 2008.14,1209.38 2008.73,1209.38 2009.32,1209.38 2009.9,1209.38 2010.49,1209.38 2011.07,1209.38 2011.66,1209.38 2012.25,1209.38 2012.83,1209.38 2013.42,1209.38 2014.01,1209.38 2014.59,1209.38 2015.18,1209.38 2015.77,1209.38 2016.35,1209.38 2016.94,1209.38 2017.53,1209.38 2018.11,1209.38 2018.7,1209.38 2019.28,1209.38 2019.87,1209.38 2020.46,1209.38 2021.04,1209.38 2021.63,1209.38 2022.22,1209.38 2022.8,1209.38 2023.39,1209.38 2023.98,1209.38 2024.56,1209.38 2025.15,1209.38 2025.73,1209.38 2026.32,1209.38 2026.91,1209.38 2027.49,1209.38 2028.08,1209.38 2028.67,1209.38 2029.25,1209.38 2029.84,1209.38 2030.43,1209.38 2031.01,1209.38 2031.6,1209.38 2032.19,1209.38 2032.77,1209.38 2033.36,1209.38 2033.94,1209.38 2034.53,1209.38 2035.12,1209.38 2035.7,1209.38 2036.29,1209.38 2036.88,1209.38 2037.46,1209.38 2038.05,1209.38 2038.64,1209.38 2039.22,1209.38 2039.81,1209.38 2040.4,1209.38 2040.98,1209.38 2041.57,1209.38 2042.15,1209.38 2042.74,1209.38 2043.33,1209.38 2043.91,1209.38 2044.5,1209.38 2045.09,1209.38 2045.67,1209.38 2046.26,1209.38 2046.85,1209.38 2047.43,1209.38 2048.02,1209.38 2048.6,1209.38 2049.19,1209.38 2049.78,1209.38 2050.36,1209.38 2050.95,1209.38 2051.54,1209.38 2052.12,1209.38 2052.71,1209.38 2053.3,1209.38 2053.88,1209.38 2054.47,1209.38 2055.06,1209.38 2055.64,1209.38 2056.23,1209.38 2056.81,1209.38 2057.4,1209.38 2057.99,1209.38 2058.57,1209.38 2059.16,1209.38 2059.75,1209.38 2060.33,1209.38 2060.92,1209.38 2061.51,1209.38 2062.09,1209.38 2062.68,1209.38 2063.27,1209.38 2063.85,1209.38 2064.44,1209.38 2065.02,1209.38 2065.61,1209.38 2066.2,1209.38 2066.78,1209.38 2067.37,1209.38 2067.96,1209.38 2068.54,1209.38 2069.13,1209.38 2069.72,1209.38 2070.3,1209.38 2070.89,1209.38 2071.48,1209.38 2072.06,1209.38 2072.65,1209.38 2073.23,1209.38 2073.82,1209.38 2074.41,1209.38 2074.99,1209.38 2075.58,1209.38 2076.17,1209.38 2076.75,1209.38 2077.34,1209.38 2077.93,1209.38 2078.51,1209.38 2079.1,1209.38 2079.68,1209.38 2080.27,1209.38 2080.86,1209.38 2081.44,1209.38 2082.03,1209.38 2082.62,1209.38 2083.2,1209.38 2083.79,1209.38 2084.38,1209.38 2084.96,1209.38 2085.55,1209.38 2086.14,1209.38 2086.72,1209.38 2087.31,1209.38 2087.89,1209.38 2088.48,1209.38 2089.07,1209.38 2089.65,1209.38 2090.24,1209.38 2090.83,1209.38 2091.41,1209.38 2092,1209.38 2092.59,1209.38 2093.17,1209.38 2093.76,1209.38 2094.35,1209.38 2094.93,1209.38 2095.52,1209.38 2096.1,1209.38 2096.69,1209.38 2097.28,1209.38 2097.86,1209.38 2098.45,1209.38 2099.04,1209.38 2099.62,1209.38 2100.21,1209.38 2100.8,1209.38 2101.38,1209.38 2101.97,1209.38 2102.55,1209.38 2103.14,1209.38 2103.73,1209.38 2104.31,1209.38 2104.9,1209.38 2105.49,1209.38 2106.07,1209.38 2106.66,1209.38 2107.25,1209.38 2107.83,1209.38 2108.42,1209.38 2109.01,1209.38 2109.59,1209.38 2110.18,1209.38 2110.76,1209.38 2111.35,1209.38 2111.94,1209.38 2112.52,1209.38 2113.11,1209.38 2113.7,1209.38 2114.28,1209.38 2114.87,1209.38 2115.46,1209.38 2116.04,1209.38 2116.63,1209.38 2117.22,1209.38 2117.8,1209.38 2118.39,1209.38 2118.97,1209.38 2119.56,1209.38 2120.15,1209.38 2120.73,1209.38 2121.32,1209.38 2121.91,1209.38 2122.49,1209.38 2123.08,1209.38 2123.67,1209.38 2124.25,1209.38 2124.84,1209.38 2125.42,1209.38 2126.01,1209.38 2126.6,1209.38 2127.18,1209.38 2127.77,1209.38 2128.36,1209.38 2128.94,1209.38 2129.53,1209.38 2130.12,1209.38 2130.7,1209.38 2131.29,1209.38 2131.88,1209.38 2132.46,1209.38 2133.05,1209.38 2133.63,1209.38 2134.22,1209.38 2134.81,1209.38 2135.39,1209.38 2135.98,1209.38 2136.57,1209.38 2137.15,1209.38 2137.74,1209.38 2138.33,1209.38 2138.91,1209.38 2139.5,1209.38 2140.09,1209.38 2140.67,1209.38 2141.26,1209.38 2141.84,1209.38 2142.43,1209.38 2143.02,1209.38 2143.6,1209.38 2144.19,1209.38 2144.78,1209.38 2145.36,1209.38 2145.95,1209.38 2146.54,1209.38 2147.12,1209.38 2147.71,1209.38 2148.3,1209.38 2148.88,1209.38 2149.47,1209.38 2150.05,1209.38 2150.64,1209.38 2151.23,1209.38 2151.81,1209.38 2152.4,1209.38 2152.99,1209.38 2153.57,1209.38 2154.16,1209.38 2154.75,1209.38 2155.33,1209.38 2155.92,1209.38 2156.5,1209.38 2157.09,1209.38 2157.68,1209.38 2158.26,1209.38 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.09,1189.67 1400.03,899.083 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.52 985.439,1189.67 2158.26,1189.67 2158.26,1228.52 985.439,1228.52 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip163\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip163)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3848.08 163.232,-4977.56 163.792,-4675.86 164.351,-4498.06 164.91,-5460.74 165.469,-6320.67 166.029,-6089 166.588,-6886.53 167.147,-7599.7 167.706,-8245.74 168.266,-8815.06 168.825,-8550.57 169.384,-8340.48 169.943,-8833.96 170.503,-9288.17 171.062,-9692.88 171.621,-9447.35 172.18,-9777.53 172.74,-10067.3 173.299,-9852.48 173.858,-10065.5 174.417,-10279.3 174.977,-10446.3 175.536,-10213 176.095,-10006.2 176.655,-10130.7 177.214,-9922.35 177.773,-10022.6 178.332,-9819.96 178.892,-9888.5 179.451,-9697.05 180.01,-9507.4 180.569,-9542.18 181.129,-9172.12 181.688,-9179.05 182.247,-9186.02 182.806,-9014.42 183.366,-8668.5 183.925,-8497.43 184.484,-8328.96 185.043,-8297.46 185.603,-8255.59 186.162,-8079.67 186.721,-8020.89 187.28,-7743.68 187.84,-7678.01 188.399,-7602.52 188.958,-7423.99 189.517,-7349.1 190.077,-7167.91 190.636,-7075.79 191.195,-6875.62 191.754,-6694.25 192.314,-6517.65 192.873,-6270.61 193.432,-6176.72 193.991,-5939.55 194.551,-5769.19 195.11,-5601.58 195.669,-5376.55 196.228,-5282 196.788,-5185.82 197.347,-4865.74 197.906,-4615.76 198.465,-4532.46 199.025,-4342.12 199.584,-4201.65 200.143,-3890.34 200.702,-3776.83 201.262,-3704.57 201.821,-3548.8 202.38,-3282.14 202.939,-3102.79 203.499,-3004.89 204.058,-2909.15 204.617,-2850.93 205.176,-2649.56 205.736,-2593.65 206.295,-2499.75 206.854,-2312.64 207.413,-2231.9 207.973,-2183.49 208.532,-2075.04 209.091,-2028.44 209.65,-1985.51 210.21,-1879.59 210.769,-1833.41 211.328,-1700.58 211.887,-1597.73 212.447,-1525.69 213.006,-1424.34 213.565,-1328.91 214.124,-1240.39 214.684,-1154.13 215.243,-1043.46 215.802,-961.736 216.361,-885.633 216.921,-856.418 217.48,-803.822 218.039,-754.273 218.598,-704.249 219.158,-678.303 219.717,-602.516 220.276,-527.013 220.835,-457.114 221.395,-346.187 221.954,-281.059 222.513,-244.447 223.072,-163.36 223.632,-147.721 224.191,-198.82 224.75,-179.349 225.309,-139.88 225.869,-100.15 226.428,-41.4704 226.987,-23.1768 227.546,16.8245 228.106,13.4135 228.665,68.7987 229.224,104.404 229.783,138.231 230.343,152.883 230.902,161.059 231.461,176.953 232.02,211.261 232.58,243.187 233.139,256.481 233.698,274.229 234.257,307.377 234.817,334.393 235.376,365.028 235.935,436.782 236.494,501.051 237.054,529.616 237.613,551.123 238.172,597.773 238.731,584.082 239.291,629.391 239.85,629.524 240.409,615.734 240.968,621.29 241.528,627.507 242.087,653.073 242.646,638.761 243.205,681.357 243.765,718.781 244.324,757.911 244.883,738.611 245.442,755.336 246.002,753.399 246.561,771.896 247.12,811.313 247.679,898.571 248.239,896.85 248.798,909.412 249.357,924.042 249.916,954.282 250.476,1000.08 251.035,1042.65 251.594,1067.28 252.153,1090.45 252.713,1061.2 253.272,1082.42 253.831,1103.92 254.39,1053.27 254.95,1064.09 255.509,1033.72 256.068,1005.42 256.627,1012.7 257.187,989.368 257.746,1003.03 258.305,1030.07 258.864,1037.42 259.424,1011.68 259.983,1022.99 260.542,1048.5 261.101,1039.25 261.661,1029.02 262.22,1036.71 262.779,1026.56 263.338,1020.72 263.898,1014.79 264.457,1027.14 265.016,1040.18 265.575,1032.03 266.135,1069.11 266.694,1060.13 267.253,1035.18 267.812,1011.27 268.372,1090.01 268.931,1110.81 269.49,1065.46 270.049,1038.59 270.609,1029.14 271.168,1022.31 271.727,1018.37 272.286,978.084 272.846,974.492 273.405,954.897 273.964,989.278 274.523,951.443 275.083,966.94 275.642,966.421 276.201,947.396 276.76,944.687 277.32,960.375 277.879,1025 278.438,1033.44 278.997,1044.15 279.557,1086.93 280.116,1124.98 280.675,1146.64 281.234,1086.74 281.794,1092.3 282.353,1080.42 282.912,1071.49 283.471,1063.57 284.031,1036.35 284.59,995.867 285.149,1007.77 285.708,1023.11 286.268,1003.98 286.827,1000.78 287.386,997.231 287.945,1008.22 288.505,987.048 289.064,997.097 289.623,988.851 290.182,1003.07 290.742,976.754 291.301,957.138 291.86,938.54 292.419,958.143 292.979,954.636 293.538,966.872 294.097,994.188 294.656,972.435 295.216,969.235 295.775,962.787 296.334,955.603 296.893,970.866 297.453,986.176 298.012,963.98 298.571,942.018 299.13,952.259 299.69,934.277 300.249,919.455 300.808,934.024 301.368,955.047 301.927,1000.19 302.486,978.463 303.045,972.374 303.605,997.2 304.164,1007.96 304.723,1020.12 305.282,998.053 305.842,1007.95 306.401,984.926 306.96,963.133 307.519,974.999 308.079,955.928 308.638,953.959 309.197,949.885 309.756,932.521 310.316,912.835 310.875,943.799 311.434,922.484 311.993,934.864 312.553,932.637 313.112,947.046 313.671,945.631 314.23,959.519 314.79,956.637 315.349,935.973 315.908,933.774 316.467,940.172 317.027,918.724 317.586,932.452 318.145,897.96 318.704,882.803 319.264,894.242 319.823,892.037 320.382,903.962 320.941,903.79 321.501,918.469 322.06,950.83 322.619,960.289 323.178,972.922 323.738,965.258 324.297,980.298 324.856,976.439 325.415,984.767 325.975,963.912 326.534,991.27 327.093,983.668 327.652,977.75 328.212,990.031 328.771,1012.52 329.33,988.986 329.889,985.176 330.449,982.875 331.008,961.64 331.567,989.264 332.126,954.805 332.686,950.745 333.245,961.205 333.804,958.091 334.363,932.614 334.923,923.027 335.482,933.631 336.041,964.51 336.6,940.354 337.16,904.438 337.719,915.826 338.278,879.378 338.837,896.185 339.397,908.817 339.956,919.048 340.515,898.69 341.074,895.479 341.634,908.777 342.193,904.356 342.752,917.897 343.311,895.51 343.871,891.04 344.43,887.903 344.989,912.4 345.548,896.89 346.108,911.524 346.667,890.429 347.226,856.91 347.785,851.179 348.345,862.332 348.904,874.123 349.463,870.456 350.022,868.567 350.582,881.716 351.141,876.307 351.7,856.021 352.259,889.254 352.819,903.247 353.378,864.317 353.937,847.867 354.496,847.852 355.056,893.392 355.615,889.083 356.174,902.3 356.733,914.957 357.293,912.002 357.852,923.39 358.411,872.493 358.97,871.453 359.53,865.458 360.089,846.3 360.648,811.717 361.207,795.136 361.767,811.817 362.326,811.155 362.885,809.282 363.444,824.55 364.004,841.208 364.563,838.047 365.122,835.868 365.681,850.893 366.241,848 366.8,859.812 367.359,872.1 367.918,899.148 368.478,894.015 369.037,889.864 369.596,885.111 370.155,877.533 370.715,873.332 371.274,854.75 371.833,837.419 372.392,849.665 372.952,813.766 373.511,847.598 374.07,862.018 374.629,871.194 375.189,899.53 375.748,876.874 376.307,893.482 376.866,902.086 377.426,928.294 377.985,906.976 378.544,935.993 379.103,944.294 379.663,920.982 380.222,916.425 380.781,894.123 381.34,905.518 381.9,899.012 382.459,878.637 383.018,843.604 383.577,859.206 384.137,869.56 384.696,862.814 385.255,856.781 385.814,853.373 386.374,836.913 386.933,836.583 387.492,834.006 388.051,814.003 388.611,794.528 389.17,777.132 389.729,760.801 390.288,763.587 390.848,764.992 391.407,752.867 391.966,755.703 392.525,760.706 393.085,762.336 393.644,765.196 394.203,748.44 394.762,751.313 395.322,720.785 395.881,726.1 396.44,749.088 396.999,754.991 397.559,821.351 398.118,833.168 398.677,828.306 399.236,874.289 399.796,885.744 400.355,866.955 400.914,878.496 401.473,903.209 402.033,876.197 402.592,873.836 403.151,871.388 403.71,880.856 404.27,843.824 404.829,852.545 405.388,817.625 405.947,830.855 406.507,890.871 407.066,887.309 407.625,849.323 408.184,811.822 408.744,788.554 409.303,800.882 409.862,780.741 410.421,767.295 410.981,764.89 411.54,781.671 412.099,766.181 412.658,768.682 413.218,766.688 413.777,765.563 414.336,749.184 414.895,764.626 415.455,746.419 416.014,697.127 416.573,713.062 417.132,714.912 417.692,701.008 418.251,688.231 418.81,695.409 419.369,712.961 419.929,753.442 420.488,768.082 421.047,784.452 421.606,766.449 422.166,767.603 422.725,749.97 423.284,768.418 423.843,800.47 424.403,800.813 424.962,846.324 425.521,841.843 426.08,837.464 426.64,835.825 427.199,816.824 427.758,779.601 428.318,783.92 428.877,738.568 429.436,758.529 429.995,758.527 430.555,760.606 431.114,792.654 431.673,802.551 432.232,799.816 432.792,797.046 433.351,762.78 433.91,730.289 434.469,716.706 435.029,715.708 435.588,735.256 436.147,753.767 436.706,756.56 437.266,771.872 437.825,770.929 438.384,769.669 438.943,753.26 439.503,785.157 440.062,800.303 440.621,785.498 441.18,798.536 441.74,761.78 442.299,741.566 442.858,738.958 443.417,774.223 443.977,770.327 444.536,766.19 445.095,747.439 445.654,779.474 446.214,797.107 446.773,778.725 447.332,775.041 447.891,791.496 448.451,803.288 449.01,782.222 449.569,761.618 450.128,761.385 450.688,742.434 451.247,740.038 451.806,720.459 452.365,752.72 452.925,720.665 453.484,737.976 454.043,720.968 454.602,757.536 455.162,759.485 455.721,744.448 456.28,761.325 456.839,729.83 457.399,731.574 457.958,735.349 458.517,756.258 459.076,767.231 459.636,764.088 460.195,746.894 460.754,733.01 461.313,732.346 461.873,749.088 462.432,765.826 462.991,780.283 463.55,793.757 464.11,727.459 464.669,725.118 465.228,725.116 465.787,724.819 466.347,726.514 466.906,747.563 467.465,731.928 468.024,730.307 468.584,746.459 469.143,763.26 469.702,780.6 470.261,745.533 470.821,729.185 471.38,729.492 471.939,743.204 472.498,729.303 473.058,730.474 473.617,719.193 474.176,715.241 474.735,734.303 475.295,732.789 475.854,750.07 476.413,767.774 476.972,764.074 477.532,777.042 478.091,760.588 478.65,741.529 479.209,742.18 479.769,743.991 480.328,710.903 480.887,712.471 481.446,728.768 482.006,726.915 482.565,762.587 483.124,763.237 483.683,761.9 484.243,779.963 484.802,761.771 485.361,776.968 485.92,790.37 486.48,789.082 487.039,802.211 487.598,831.771 488.157,874.766 488.717,881.683 489.276,902.986 489.835,908.816 490.394,903.032 490.954,923.621 491.513,895.432 492.072,887.55 492.631,878.83 493.191,836.527 493.75,813.378 494.309,806.521 494.868,797.708 495.428,808.206 495.987,818.546 496.546,813.002 497.105,825.8 497.665,806.629 498.224,801.31 498.783,765.395 499.342,760.838 499.902,743.008 500.461,744.221 501.02,741.271 501.579,722.992 502.139,724.797 502.698,759.443 503.257,706.133 503.816,705.036 504.376,740.66 504.935,719.443 505.494,721.133 506.053,724.371 506.613,742.278 507.172,710.565 507.731,712.2 508.29,744.501 508.85,754.639 509.409,751.164 509.968,750.635 510.527,746.443 511.087,778.757 511.646,779.41 512.205,777.842 512.764,744.641 513.324,744.06 513.883,712.635 514.442,714.291 515.001,715.343 515.561,716.677 516.12,734.856 516.679,786.156 517.238,797.21 517.798,793.015 518.357,807.654 518.916,804.46 519.475,803.783 520.035,765.343 520.594,765.077 521.153,781.084 521.712,779.625 522.272,806.872 522.831,803.652 523.39,817.921 523.949,858.83 524.509,851.034 525.068,841.918 525.627,853.684 526.186,877.842 526.746,873.944 527.305,916.315 527.864,902.815 528.423,876.339 528.983,838.194 529.542,863.098 530.101,857.27 530.66,847.642 531.22,839.999 531.779,814.232 532.338,810.726 532.897,786.71 533.457,767.055 534.016,764.877 534.575,744.263 535.134,727.213 535.694,726.068 536.253,722.814 536.812,724.583 537.371,708.655 537.931,675.179 538.49,681.106 539.049,634.531 539.608,603.371 540.168,594.555 540.727,619.338 541.286,590.987 541.845,599.536 542.405,652.521 542.964,656.425 543.523,670.292 544.082,705.64 544.642,724.074 545.201,705.094 545.76,716.881 546.319,699.092 546.879,670.061 547.438,673.568 547.997,675.771 548.556,677.026 549.116,661.305 549.675,665.366 550.234,653.152 550.793,657.562 551.353,662.325 551.912,663.76 552.471,652.066 553.031,637.217 553.59,607.817 554.149,632.253 554.708,637.415 555.268,692.008 555.827,678.432 556.386,667.129 556.945,668.137 557.505,654.913 558.064,660.123 558.623,662.415 559.182,667.387 559.742,652.562 560.301,671.713 560.86,691.097 561.419,696.31 561.979,665.192 562.538,635.836 563.097,656.813 563.656,655.284 564.216,674.678 564.775,692.074 565.334,693.391 565.893,692.539 566.453,676.348 567.012,661.922 567.571,628.984 568.13,651.909 568.69,638.656 569.249,638.91 569.808,626.273 570.367,663.911 570.927,684.849 571.486,689.71 572.045,675.436 572.604,708.288 573.164,675.318 573.723,659.512 574.282,677.571 574.841,665.788 575.401,666.904 575.96,682.832 576.519,712.653 577.078,695.12 577.638,633.613 578.197,650.555 578.756,670.955 579.315,671.368 579.875,673.683 580.434,707.006 580.993,705.737 581.552,736.693 582.112,720.024 582.671,706.171 583.23,755.886 583.789,748.677 584.349,762.31 584.908,759.837 585.467,757.138 586.026,707.992 586.586,705.594 587.145,708.884 587.704,743.461 588.263,760.605 588.823,725.955 589.382,741.443 589.941,756.667 590.5,752.656 591.06,752.841 591.619,767.448 592.178,781.672 592.737,777.711 593.297,791.176 593.856,789.21 594.415,804.493 594.974,817.975 595.534,763.717 596.093,780.171 596.652,758.6 597.211,771.321 597.771,754.713 598.33,733.576 598.889,718.819 599.448,702.028 600.008,705.626 600.567,690.941 601.126,676.526 601.685,679.798 602.245,697.617 602.804,701.77 603.363,703.954 603.922,703.137 604.482,703.514 605.041,690.116 605.6,688.534 606.159,671.916 606.719,639.819 607.278,627.458 607.837,613.431 608.396,632.469 608.956,636.447 609.515,672.532 610.074,655.847 610.633,690.926 611.193,707.104 611.752,704.604 612.311,707.105 612.87,754.942 613.43,652.691 613.989,660.407 614.548,661.645 615.107,664.642 615.667,666.351 616.226,683.714 616.785,668.85 617.344,685.336 617.904,701.519 618.463,684.657 619.022,685.152 619.581,653.31 620.141,685.793 620.7,701.958 621.259,716.093 621.818,698.204 622.378,699.477 622.937,700.713 623.496,733.743 624.055,733.797 624.615,729.939 625.174,728.257 625.733,708.952 626.292,724.39 626.852,724.586 627.411,736.942 627.97,732.571 628.529,730.111 629.089,715.183 629.648,716.393 630.207,700.604 630.766,634.049 631.326,638.659 631.885,688.439 632.444,707.781 633.003,741.266 633.563,723.634 634.122,755.225 634.681,756.212 635.24,817.099 635.8,856.189 636.359,849.278 636.918,872.271 637.477,831.584 638.037,807.928 638.596,822.426 639.155,818.068 639.714,827.995 640.274,838.566 640.833,861.461 641.392,850.284 641.951,872.092 642.511,843.447 643.07,803.42 643.629,798.047 644.188,806.552 644.748,768.753 645.307,765.997 645.866,766.587 646.425,763.393 646.985,743.678 647.544,754.253 648.103,750.899 648.662,729.82 649.222,746.004 649.781,708.437 650.34,659.975 650.899,664.634 651.459,715.051 652.018,713.615 652.577,729.022 653.136,775.004 653.696,708.198 654.255,726.959 654.814,726.876 655.373,708.607 655.933,721.668 656.492,682.659 657.051,714.173 657.61,728.273 658.17,760.102 658.729,739.957 659.288,716.7 659.847,715.922 660.407,735.52 660.966,767.725 661.525,769.442 662.084,782.456 662.644,794.761 663.203,804.565 663.762,801.477 664.321,800.744 664.881,778.644 665.44,774.851 665.999,772.71 666.558,753.441 667.118,765.892 667.677,760.761 668.236,758.018 668.795,768.645 669.355,766.279 669.914,775.524 670.473,753.112 671.032,746.372 671.592,778.931 672.151,805.916 672.71,785.12 673.269,812.49 673.829,786.951 674.388,767.005 674.947,793.99 675.506,741.058 676.066,755.933 676.625,752.966 677.184,715.317 677.743,697.414 678.303,731.838 678.862,727.657 679.421,756.698 679.981,750.237 680.54,719.174 681.099,703.019 681.658,704.497 682.218,707.516 682.777,707.64 683.336,689.885 683.895,675.867 684.455,690.304 685.014,653.255 685.573,623.856 686.132,639.977 686.692,641.773 687.251,646.443 687.81,636.707 688.369,591.165 688.929,596.387 689.488,633.834 690.047,621.672 690.606,626.074 691.166,643.928 691.725,632.954 692.284,633.035 692.843,649.974 693.403,664.694 693.962,683.753 694.521,714.776 695.08,728.209 695.64,748.946 696.199,747.897 696.758,746.362 697.317,761.707 697.877,744.095 698.436,777.711 698.995,788.298 699.554,783.375 700.114,779.195 700.673,758.781 701.232,739.825 701.791,705.679 702.351,687.979 702.91,655.387 703.469,655.123 704.028,673.674 704.588,659.095 705.147,628.229 705.706,633.665 706.265,637.386 706.825,655.604 707.384,657.696 707.943,663.336 708.502,680.162 709.062,650.976 709.621,654.05 710.18,657.104 710.739,660.457 711.299,629.47 711.858,662.55 712.417,666.784 712.976,633.417 713.536,620.008 714.095,642.626 714.654,612.117 715.213,680.265 715.773,680.538 716.332,712.196 716.891,694.657 717.45,646.295 718.01,684.312 718.569,731.44 719.128,666.233 719.687,664.649 720.247,652.367 720.806,655.591 721.365,656.35 721.924,643.76 722.484,648.477 723.043,665.63 723.602,653.755 724.161,672.242 724.721,656.432 725.28,641.526 725.839,658.886 726.398,645.237 726.958,631.851 727.517,698.973 728.076,697.549 728.635,700.523 729.195,717.706 729.754,717.39 730.313,703.503 730.872,700.369 731.432,684.968 731.991,685.118 732.55,670.951 733.109,659.138 733.669,677.412 734.228,693.682 734.787,659.911 735.346,664.509 735.906,661.675 736.465,649.72 737.024,586.777 737.583,611.283 738.143,617.628 738.702,639.695 739.261,625.183 739.82,609.287 740.38,649.858 740.939,701.811 741.498,688.054 742.057,668.907 742.617,685.501 743.176,670.927 743.735,657.57 744.294,655.206 744.854,672.494 745.413,656.731 745.972,641.282 746.531,628.733 747.091,632.157 747.65,632.425 748.209,651.145 748.768,637.762 749.328,658.667 749.887,676.489 750.446,660.909 751.005,663.174 751.565,666.537 752.124,670.106 752.683,670.793 753.242,673.018 753.802,660.077 754.361,677.126 754.92,691.716 755.479,710.174 756.039,705.304 756.598,769.294 757.157,781.488 757.716,757.341 758.276,720.196 758.835,685.477 759.394,670.495 759.953,641.822 760.513,680.773 761.072,695.424 761.631,712.695 762.19,693.786 762.75,723.966 763.309,693.73 763.868,695.914 764.427,680.36 764.987,712.584 765.546,695.231 766.105,697.856 766.664,717.059 767.224,749.802 767.783,762.682 768.342,772.536 768.901,769.581 769.461,748.527 770.02,759.857 770.579,773.369 771.138,771.338 771.698,767.877 772.257,793.4 772.816,783.972 773.375,778.911 773.935,776.456 774.494,803.598 775.053,815.857 775.612,790.096 776.172,737.288 776.731,719.455 777.29,688.475 777.849,718.215 778.409,745.653 778.968,725.118 779.527,674.4 780.086,673.456 780.646,707.08 781.205,707.117 781.764,724.901 782.323,771.909 782.883,767.031 783.442,761.614 784.001,754.968 784.56,750.144 785.12,714.831 785.679,716.235 786.238,728.19 786.797,759.383 787.357,719.482 787.916,721.199 788.475,703.169 789.034,686.503 789.594,651.55 790.153,685.587 790.712,686.425 791.271,688.641 791.831,671.152 792.39,703.933 792.949,687.377 793.508,688.135 794.068,656.086 794.627,706.164 795.186,719.176 795.745,719.22 796.305,716.082 796.864,682.017 797.423,694.701 797.982,709.031 798.542,774.164 799.101,749.732 799.66,761.798 800.219,775.627 800.779,770.128 801.338,766.757 801.897,746.936 802.456,744.671 803.016,756.137 803.575,720.008 804.134,699.417 804.693,711.127 805.253,741.53 805.812,755.986 806.371,766.257 806.931,776.488 807.49,758.516 808.049,770.617 808.608,782.529 809.168,728.392 809.727,746.055 810.286,714.914 810.845,731.09 811.405,730.856 811.964,758.697 812.523,738.336 813.082,752.094 813.642,715.045 814.201,714.32 814.76,666.037 815.319,620.749 815.879,675.652 816.438,673.224 816.997,658.964 817.556,640.49 818.116,628.122 818.675,630.728 819.234,635.223 819.793,640.856 820.353,628.378 820.912,630.587 821.471,637.641 822.03,608.076 822.59,629.811 823.149,634.065 823.708,635.298 824.267,606.754 824.827,596.02 825.386,617.149 825.945,633.925 826.504,604.344 827.064,577.593 827.623,598.929 828.182,573.735 828.741,566.35 829.301,572.741 829.86,595.724 830.419,583.876 830.978,602.405 831.538,605.985 832.097,644.14 832.656,647.961 833.215,668.564 833.775,654.326 834.334,655.322 834.893,641.09 835.452,661.637 836.012,650.003 836.571,615.101 837.13,634.891 837.689,618.207 838.249,639.794 838.808,676.022 839.367,694.66 839.926,693.837 840.486,690.87 841.045,707.64 841.604,687.901 842.163,708.742 842.723,710.909 843.282,725.111 843.841,673.132 844.4,674.933 844.96,645.762 845.519,647.862 846.078,668.018 846.637,650.496 847.197,668.879 847.756,669.364 848.315,657.619 848.874,660.451 849.434,675.128 849.993,643.979 850.552,661.67 851.111,665.935 851.671,668.205 852.23,718.888 852.789,687.527 853.348,717.187 853.908,703.07 854.467,737.193 855.026,735.823 855.585,735.391 856.145,718.43 856.704,716.054 857.263,748.043 857.822,745.985 858.382,761.192 858.941,773.979 859.5,769.29 860.059,761.84 860.619,756.434 861.178,768.812 861.737,715.318 862.296,732.254 862.856,726.275 863.415,707.277 863.974,704.298 864.533,702.147 865.093,688.032 865.652,657.836 866.211,741.769 866.77,724.283 867.33,720.382 867.889,670.162 868.448,700.909 869.007,697.774 869.567,665.31 870.126,682.418 870.685,680.693 871.244,698.68 871.804,732.804 872.363,746.167 872.922,773.497 873.481,724.134 874.041,707.158 874.6,719.702 875.159,687.152 875.718,702.414 876.278,686.038 876.837,717.807 877.396,715.045 877.955,729.675 878.515,745.225 879.074,742.857 879.633,722.643 880.192,686.452 880.752,670.243 881.311,671.267 881.87,671.289 882.429,670.266 882.989,686.95 883.548,703.837 884.107,736.247 884.666,703.988 885.226,719.806 885.785,684.651 886.344,653.673 886.903,670.572 887.463,659.699 888.022,630.528 888.581,616.446 889.14,605.345 889.7,630.564 890.259,598.309 890.818,601.143 891.377,607.059 891.937,590.398 892.496,612.378 893.055,631.185 893.614,617.081 894.174,617.627 894.733,604.267 895.292,594.655 895.851,619.454 896.411,608.757 896.97,610.509 897.529,617.707 898.088,623.3 898.648,638.209 899.207,646.356 899.766,699.687 900.325,718.858 900.885,686.74 901.444,698.254 902.003,680.462 902.562,678.832 903.122,645.43 903.681,679.418 904.24,679.079 904.799,678.137 905.359,707.851 905.918,737.424 906.477,722.594 907.036,734.432 907.596,729.559 908.155,728.183 908.714,727.052 909.273,707.643 909.833,670.879 910.392,718.755 910.951,701.305 911.51,686.259 912.07,666.48 912.629,653.754 913.188,688.672 913.747,690.88 914.307,691.007 914.866,694.04 915.425,709.649 915.984,691.257 916.544,705.694 917.103,704.703 917.662,734.69 918.221,749.075 918.781,713.76 919.34,710.379 919.899,694.99 920.458,680.499 921.018,665.005 921.577,685.387 922.136,689.501 922.695,673.223 923.255,689.73 923.814,687.256 924.373,687.884 924.932,718.716 925.492,697.678 926.051,661.927 926.61,662.653 927.169,681.549 927.729,666.468 928.288,618.142 928.847,652.941 929.406,669.964 929.966,688.612 930.525,683.265 931.084,701.554 931.644,718.615 932.203,736.676 932.762,734.664 933.321,716.557 933.881,732.221 934.44,750.715 934.999,753.999 935.558,749.434 936.118,715.336 936.677,683.034 937.236,700.587 937.795,701.47 938.355,689.095 938.914,704.082 939.473,719.762 940.032,732.575 940.592,714.951 941.151,682.135 941.71,663.094 942.269,693.385 942.829,660.424 943.388,662.667 943.947,661.903 944.506,664.247 945.066,667.098 945.625,667.663 946.184,652.423 946.743,671.377 947.303,689.573 947.862,707.301 948.421,737.771 948.98,751.396 949.54,797.871 950.099,808.113 950.658,845.467 951.217,837.416 951.777,780.231 952.336,773.48 952.895,767.702 953.454,732.585 954.014,712.352 954.573,676.141 955.132,692.099 955.691,659.59 956.251,644.853 956.81,612.582 957.369,616.923 957.928,600.931 958.488,618.075 959.047,619.625 959.606,608.771 960.165,547.442 960.725,526.487 961.284,549.913 961.843,555.925 962.402,574.095 962.962,612.153 963.521,617.519 964.08,622.478 964.639,628.818 965.199,662.992 965.758,665.167 966.317,650.002 966.876,700.436 967.436,733.54 967.995,712.891 968.554,745.111 969.113,758.92 969.673,753.431 970.232,767.145 970.791,792.907 971.35,785.898 971.91,812.267 972.469,740.399 973.028,751.667 973.587,712.953 974.147,691.845 974.706,689.311 975.265,717.365 975.824,697.608 976.384,696.984 976.943,681.18 977.502,678.907 978.061,677.235 978.621,661.935 979.18,712.162 979.739,692.975 980.298,659.609 980.858,680.815 981.417,713.436 981.976,695.817 982.535,710.606 983.095,694.653 983.654,692.184 984.213,675.739 984.772,674.506 985.332,676.55 985.891,660.08 986.45,658.699 987.009,656.328 987.569,657.21 988.128,626.355 988.687,615.089 989.246,603.098 989.806,611.875 990.365,634.586 990.924,637.451 991.483,620.64 992.043,653.703 992.602,639.997 993.161,644.976 993.72,647.033 994.28,651.142 994.839,682.776 995.398,652.006 995.957,669.332 996.517,671.58 997.076,704.441 997.635,687.45 998.194,686.299 998.754,733.017 999.313,699.029 999.872,677.978 1000.43,675.682 1000.99,675.508 1001.55,656.856 1002.11,658.845 1002.67,694.04 1003.23,677.176 1003.79,695.519 1004.35,693.453 1004.91,690.862 1005.46,671.778 1006.02,655.584 1006.58,687.712 1007.14,703.566 1007.7,717.438 1008.26,748.678 1008.82,762.435 1009.38,758.888 1009.94,722.889 1010.5,686.419 1011.06,701.79 1011.62,686.407 1012.18,702.995 1012.73,703.565 1013.29,718.459 1013.85,735.652 1014.41,716.737 1014.97,716.836 1015.53,715.044 1016.09,731.83 1016.65,728.977 1017.21,714.349 1017.77,717.975 1018.33,731.523 1018.89,729.195 1019.45,713.365 1020.01,696.414 1020.56,694.397 1021.12,696.245 1021.68,678.55 1022.24,696.99 1022.8,692.02 1023.36,674.382 1023.92,638.996 1024.48,607.475 1025.04,660.367 1025.6,682.598 1026.16,698.473 1026.72,682.631 1027.28,682.274 1027.83,682.793 1028.39,715.803 1028.95,742.2 1029.51,741.176 1030.07,737.704 1030.63,734.876 1031.19,748.424 1031.75,743.437 1032.31,771.006 1032.87,766.941 1033.43,712.52 1033.99,711.168 1034.55,723.693 1035.1,754.294 1035.66,718.155 1036.22,751.553 1036.78,747.892 1037.34,762.091 1037.9,759.586 1038.46,774.552 1039.02,749.99 1039.58,699.458 1040.14,698.905 1040.7,731.415 1041.26,711.891 1041.82,710.28 1042.38,721.265 1042.93,718.597 1043.49,688.418 1044.05,685.911 1044.61,666.745 1045.17,682.466 1045.73,666.643 1046.29,698.013 1046.85,760.066 1047.41,690.8 1047.97,677.449 1048.53,698.035 1049.09,712.049 1049.65,663.499 1050.2,648.338 1050.76,670.245 1051.32,688.394 1051.88,740.827 1052.44,739.804 1053,719.254 1053.56,720.067 1054.12,732.362 1054.68,678.157 1055.24,663.373 1055.8,630.734 1056.36,615.647 1056.92,588.812 1057.48,591.528 1058.03,577.705 1058.59,567.996 1059.15,588.968 1059.71,595.089 1060.27,601.726 1060.83,608.008 1061.39,580.306 1061.95,586.305 1062.51,595.612 1063.07,633.75 1063.63,653.189 1064.19,657.4 1064.75,640.411 1065.3,632.02 1065.86,633.096 1066.42,640.51 1066.98,612.572 1067.54,630.262 1068.1,630.96 1068.66,597.6 1069.22,600.965 1069.78,622.479 1070.34,642.086 1070.9,708.834 1071.46,725.641 1072.02,724.843 1072.57,752.533 1073.13,738.603 1073.69,735.898 1074.25,733.83 1074.81,734.114 1075.37,767.127 1075.93,809.833 1076.49,803.343 1077.05,784.27 1077.61,746.642 1078.17,755.632 1078.73,736.947 1079.29,750.084 1079.85,712.512 1080.4,728.168 1080.96,743.002 1081.52,740.558 1082.08,735.709 1082.64,780.86 1083.2,790.084 1083.76,802.791 1084.32,750.357 1084.88,729.782 1085.44,726.218 1086,726.352 1086.56,754.829 1087.12,768.335 1087.67,746.775 1088.23,779.939 1088.79,772.891 1089.35,753.415 1089.91,736.366 1090.47,764.553 1091.03,711.325 1091.59,727.634 1092.15,709.515 1092.71,674.202 1093.27,655.691 1093.83,673.407 1094.39,669.72 1094.94,671.927 1095.5,655.913 1096.06,641.161 1096.62,660.917 1097.18,644.533 1097.74,615.144 1098.3,667.657 1098.86,687.183 1099.42,672.505 1099.98,672.236 1100.54,672.785 1101.1,657.651 1101.66,644.151 1102.22,645.241 1102.77,615.523 1103.33,573.311 1103.89,561.536 1104.45,602.209 1105.01,609.288 1105.57,577.783 1106.13,582.892 1106.69,584.368 1107.25,590.892 1107.81,616.13 1108.37,664.286 1108.93,664.952 1109.49,663.76 1110.04,666.952 1110.6,651.756 1111.16,636.183 1111.72,622.18 1112.28,609.763 1112.84,593.832 1113.4,580.711 1113.96,551.336 1114.52,556.375 1115.08,594.672 1115.64,518.032 1116.2,574.985 1116.76,563.094 1117.31,603.191 1117.87,607.501 1118.43,596.806 1118.99,603.634 1119.55,590.287 1120.11,611.865 1120.67,628.704 1121.23,645.354 1121.79,668.225 1122.35,717.568 1122.91,715.62 1123.47,711.305 1124.03,726.354 1124.59,738.2 1125.14,720.041 1125.7,685.948 1126.26,704.044 1126.82,688.583 1127.38,701.743 1127.94,702.06 1128.5,684.421 1129.06,703.594 1129.62,721.645 1130.18,768.496 1130.74,780.024 1131.3,743.746 1131.86,741.189 1132.41,742.1 1132.97,739.399 1133.53,734.977 1134.09,731.328 1134.65,727.798 1135.21,739.798 1135.77,722.277 1136.33,667.795 1136.89,711.729 1137.45,711.567 1138.01,709.861 1138.57,726.534 1139.13,725.584 1139.68,689.681 1140.24,718.087 1140.8,700.385 1141.36,649.534 1141.92,680.305 1142.48,690.865 1143.04,692.197 1143.6,691.988 1144.16,676.141 1144.72,678.566 1145.28,691.255 1145.84,672.282 1146.4,656.966 1146.96,653.98 1147.51,657.08 1148.07,658.785 1148.63,659.041 1149.19,692.101 1149.75,660.478 1150.31,628.158 1150.87,597.973 1151.43,602.934 1151.99,641.215 1152.55,625.649 1153.11,662.529 1153.67,679.365 1154.23,679.532 1154.78,694.135 1155.34,709.525 1155.9,706.912 1156.46,690.463 1157.02,693.123 1157.58,726.339 1158.14,708.577 1158.7,721.621 1159.26,720.308 1159.82,719.322 1160.38,702.928 1160.94,704.697 1161.5,689.08 1162.05,673.763 1162.61,658.46 1163.17,648.669 1163.73,654.033 1164.29,657.408 1164.85,674.94 1165.41,592.698 1165.97,595.738 1166.53,585.059 1167.09,625.357 1167.65,627.761 1168.21,680.974 1168.77,695.343 1169.33,712.792 1169.88,758.34 1170.44,689.263 1171,735.656 1171.56,717.975 1172.12,730.569 1172.68,696.342 1173.24,709.909 1173.8,710.205 1174.36,689.928 1174.92,705.478 1175.48,707.889 1176.04,676.065 1176.6,694.777 1177.15,694.859 1177.71,680.852 1178.27,665.673 1178.83,668.304 1179.39,671.091 1179.95,618.431 1180.51,605.513 1181.07,615.299 1181.63,587.928 1182.19,576.362 1182.75,600.778 1183.31,620.512 1183.87,624.21 1184.43,627.819 1184.98,631.104 1185.54,649.535 1186.1,653.341 1186.66,667.945 1187.22,637.407 1187.78,653.664 1188.34,669.114 1188.9,670.179 1189.46,703.668 1190.02,702.3 1190.58,695.698 1191.14,696.499 1191.7,676.684 1192.25,708.774 1192.81,672.57 1193.37,657.647 1193.93,676.687 1194.49,658.93 1195.05,677.404 1195.61,674.896 1196.17,696.237 1196.73,698.183 1197.29,697.167 1197.85,711.799 1198.41,641.421 1198.97,644.892 1199.52,696.538 1200.08,695.725 1200.64,677.594 1201.2,694.569 1201.76,709.053 1202.32,689.662 1202.88,656.557 1203.44,641.095 1204,626.686 1204.56,626.218 1205.12,630.365 1205.68,652.63 1206.24,687.695 1206.8,671.871 1207.35,676.005 1207.91,647.049 1208.47,646.612 1209.03,650.68 1209.59,652.135 1210.15,670.784 1210.71,671.018 1211.27,637.205 1211.83,653.434 1212.39,655.913 1212.95,623.447 1213.51,671.235 1214.07,602.4 1214.62,587.505 1215.18,625.293 1215.74,628.065 1216.3,680.593 1216.86,684.171 1217.42,700.985 1217.98,717.765 1218.54,747.592 1219.1,724.776 1219.66,736.531 1220.22,699.479 1220.78,713.861 1221.34,741.604 1221.89,754.13 1222.45,737.727 1223.01,733.269 1223.57,701.809 1224.13,687.099 1224.69,653.498 1225.25,638.667 1225.81,644.788 1226.37,648.075 1226.93,617.287 1227.49,622.09 1228.05,627.062 1228.61,646.433 1229.17,664.512 1229.72,650.663 1230.28,635.891 1230.84,639.015 1231.4,623.344 1231.96,608.618 1232.52,630.309 1233.08,617.503 1233.64,623.36 1234.2,612.511 1234.76,617.66 1235.32,687.043 1235.88,688.34 1236.44,686.826 1236.99,673.199 1237.55,690.054 1238.11,658.632 1238.67,660.419 1239.23,661.779 1239.79,648.268 1240.35,652.916 1240.91,640.531 1241.47,643.54 1242.03,612.592 1242.59,635.106 1243.15,637.011 1243.71,655.891 1244.26,643.837 1244.82,646.151 1245.38,658.59 1245.94,696.093 1246.5,710.367 1247.06,704.835 1247.62,704.197 1248.18,719.377 1248.74,717.489 1249.3,720.91 1249.86,765.824 1250.42,827.835 1250.98,837.025 1251.54,874.683 1252.09,900.903 1252.65,880.978 1253.21,887.913 1253.77,862.948 1254.33,852.983 1254.89,825.979 1255.45,817.614 1256.01,811.629 1256.57,804.897 1257.13,832.178 1257.69,791.292 1258.25,817.136 1258.81,790.749 1259.36,812.281 1259.92,821.979 1260.48,795.076 1261.04,801.256 1261.6,781.434 1262.16,788.453 1262.72,766.261 1263.28,763.674 1263.84,727.784 1264.4,694.15 1264.96,705.099 1265.52,717.08 1266.08,717.44 1266.63,684.142 1267.19,713.317 1267.75,726.921 1268.31,727.153 1268.87,695.97 1269.43,696.089 1269.99,695.794 1270.55,678.966 1271.11,647.115 1271.67,650.586 1272.23,632.306 1272.79,697.193 1273.35,745.722 1273.91,744.541 1274.46,728.392 1275.02,710.639 1275.58,692.807 1276.14,693.37 1276.7,708.652 1277.26,705.855 1277.82,703.128 1278.38,687.379 1278.94,653.296 1279.5,669.046 1280.06,682.636 1280.62,698.263 1281.18,703.691 1281.73,652.136 1282.29,604.833 1282.85,626.714 1283.41,644.836 1283.97,662.286 1284.53,695.044 1285.09,691.091 1285.65,654.685 1286.21,656.989 1286.77,673.317 1287.33,655.033 1287.89,623.309 1288.45,627.457 1289,629.846 1289.56,614.72 1290.12,635.497 1290.68,574.171 1291.24,581.195 1291.8,587.939 1292.36,608.258 1292.92,625.948 1293.48,629.095 1294.04,619.313 1294.6,619.956 1295.16,611.225 1295.72,602.988 1296.28,575.971 1296.83,597.918 1297.39,571.565 1297.95,560.607 1298.51,569.646 1299.07,593.905 1299.63,597.218 1300.19,601.177 1300.75,575.505 1301.31,599.34 1301.87,603.205 1302.43,577.438 1302.99,586.113 1303.55,592.724 1304.1,615.763 1304.66,636.273 1305.22,636.754 1305.78,643.6 1306.34,628.235 1306.9,598.228 1307.46,647.936 1308.02,716.249 1308.58,726.434 1309.14,755.02 1309.7,769.622 1310.26,746.406 1310.82,761.137 1311.38,772.055 1311.93,748.906 1312.49,729.027 1313.05,692.904 1313.61,712.367 1314.17,710.846 1314.73,723.479 1315.29,739.905 1315.85,755.724 1316.41,736.309 1316.97,751.184 1317.53,749.115 1318.09,749.974 1318.65,763.256 1319.2,775.259 1319.76,785.435 1320.32,792.593 1320.88,769.125 1321.44,729.778 1322,744.228 1322.56,771.07 1323.12,768.105 1323.68,764.067 1324.24,774.115 1324.8,756.91 1325.36,785.225 1325.92,794.76 1326.47,738.238 1327.03,736.498 1327.59,748.591 1328.15,723.981 1328.71,689.525 1329.27,672.222 1329.83,674.772 1330.39,692.857 1330.95,706.777 1331.51,673.57 1332.07,674.464 1332.63,673.984 1333.19,688.991 1333.75,654.811 1334.3,672.629 1334.86,658.235 1335.42,638.342 1335.98,624.97 1336.54,624.695 1337.1,610.505 1337.66,600.998 1338.22,570.99 1338.78,560.272 1339.34,586.602 1339.9,593.043 1340.46,628.97 1341.02,627.828 1341.57,613.148 1342.13,618.063 1342.69,638.986 1343.25,622.037 1343.81,625.321 1344.37,595.532 1344.93,584.165 1345.49,650.522 1346.05,639.288 1346.61,642.655 1347.17,626.744 1347.73,630.742 1348.29,666.358 1348.84,715.835 1349.4,734.701 1349.96,747.773 1350.52,746.754 1351.08,745.619 1351.64,758.673 1352.2,755.424 1352.76,770.332 1353.32,749.826 1353.88,713.865 1354.44,695.818 1355,710.06 1355.56,694.235 1356.12,726.945 1356.67,723.804 1357.23,689.709 1357.79,703.919 1358.35,704.383 1358.91,718.269 1359.47,717.049 1360.03,728.437 1360.59,728.893 1361.15,729.17 1361.71,727.082 1362.27,725.611 1362.83,736.133 1363.39,700.137 1363.94,686.615 1364.5,685.069 1365.06,731.438 1365.62,745.173 1366.18,725.404 1366.74,707.49 1367.3,704.913 1367.86,707.474 1368.42,738.829 1368.98,737.27 1369.54,719.55 1370.1,716.203 1370.66,713.309 1371.21,743.602 1371.77,725.486 1372.33,702.92 1372.89,720.284 1373.45,723.984 1374.01,738.895 1374.57,734.259 1375.13,748.337 1375.69,745.527 1376.25,757.46 1376.81,747.746 1377.37,728.029 1377.93,676.538 1378.49,662.308 1379.04,631.802 1379.6,647.514 1380.16,709.929 1380.72,674.952 1381.28,656.763 1381.84,623.072 1382.4,645.342 1382.96,663.207 1383.52,679.496 1384.08,661.881 1384.64,676.662 1385.2,663.62 1385.76,714.109 1386.31,743.324 1386.87,723.935 1387.43,720.381 1387.99,734.911 1388.55,745.712 1389.11,728.208 1389.67,772.15 1390.23,732.079 1390.79,744.851 1391.35,758.587 1391.91,749.463 1392.47,731.563 1393.03,744.203 1393.58,741.391 1394.14,721.949 1394.7,702.639 1395.26,733.704 1395.82,715.492 1396.38,698.328 1396.94,695.881 1397.5,698.333 1398.06,696.305 1398.62,729.075 1399.18,696.678 1399.74,695.843 1400.3,712.827 1400.86,713.093 1401.41,697.657 1401.97,728.951 1402.53,693.261 1403.09,725.006 1403.65,707.854 1404.21,708.617 1404.77,704.732 1405.33,671.864 1405.89,689.642 1406.45,672.906 1407.01,722.111 1407.57,752.967 1408.13,783.337 1408.68,775.743 1409.24,789.873 1409.8,767.717 1410.36,744.5 1410.92,761.125 1411.48,728.316 1412.04,680.275 1412.6,680.266 1413.16,668.025 1413.72,668.035 1414.28,685.255 1414.84,652.841 1415.4,655.67 1415.95,704.669 1416.51,685.582 1417.07,699.023 1417.63,696.556 1418.19,695.433 1418.75,697.356 1419.31,680.995 1419.87,665.728 1420.43,664.549 1420.99,699.728 1421.55,684.855 1422.11,683.789 1422.67,716.644 1423.23,715.32 1423.78,731.455 1424.34,746.967 1424.9,723.367 1425.46,688.239 1426.02,638.734 1426.58,641.197 1427.14,660.698 1427.7,646.049 1428.26,650.762 1428.82,599.275 1429.38,608.088 1429.94,611.454 1430.5,632.788 1431.05,607.248 1431.61,598.338 1432.17,585.876 1432.73,608.921 1433.29,612.639 1433.85,632.352 1434.41,599.34 1434.97,602.609 1435.53,591.926 1436.09,594.418 1436.65,552.54 1437.21,577.498 1437.77,614.55 1438.33,636.779 1438.88,639.965 1439.44,642.422 1440,646.285 1440.56,648.696 1441.12,651.132 1441.68,638.822 1442.24,625.468 1442.8,615.456 1443.36,586.058 1443.92,556.807 1444.48,549.572 1445.04,573.265 1445.6,610.842 1446.15,595.61 1446.71,601.379 1447.27,620.113 1447.83,639.72 1448.39,627.374 1448.95,627.271 1449.51,602.974 1450.07,636.888 1450.63,645.362 1451.19,635.325 1451.75,636.828 1452.31,639.732 1452.87,677.166 1453.42,728.197 1453.98,715.255 1454.54,714.034 1455.1,681.487 1455.66,665.884 1456.22,682.359 1456.78,665.702 1457.34,681.975 1457.9,683.149 1458.46,667.604 1459.02,686.512 1459.58,700.426 1460.14,685.473 1460.7,685.401 1461.25,687.458 1461.81,669.593 1462.37,636.466 1462.93,590.948 1463.49,596.131 1464.05,604.185 1464.61,611.355 1465.17,644.117 1465.73,630.326 1466.29,635.084 1466.85,637.647 1467.41,654.289 1467.97,639.144 1468.52,662.89 1469.08,680.445 1469.64,714.952 1470.2,730.528 1470.76,738.067 1471.32,749.954 1471.88,746.77 1472.44,729.168 1473,742.853 1473.56,740.592 1474.12,724.431 1474.68,720.623 1475.24,732.045 1475.79,744.154 1476.35,708.54 1476.91,742.766 1477.47,727.406 1478.03,725.81 1478.59,724.408 1479.15,738.162 1479.71,685.43 1480.27,667.128 1480.83,649.827 1481.39,664.115 1481.95,667.073 1482.51,646.76 1483.07,647.918 1483.62,668.344 1484.18,670.538 1484.74,682.659 1485.3,696.316 1485.86,679.113 1486.42,663.771 1486.98,651.033 1487.54,671.32 1488.1,672.916 1488.66,640.138 1489.22,692.241 1489.78,675.209 1490.34,661.472 1490.89,647.332 1491.45,653.877 1492.01,668.885 1492.57,671.063 1493.13,668.929 1493.69,654.429 1494.25,672.196 1494.81,671.561 1495.37,674.839 1495.93,661.437 1496.49,665.18 1497.05,713.99 1497.61,710.983 1498.16,710.91 1498.72,695.413 1499.28,695.785 1499.84,726.36 1500.4,711.526 1500.96,693.117 1501.52,690.5 1502.08,688.525 1502.64,687.421 1503.2,687.396 1503.76,735.868 1504.32,749.623 1504.88,715.187 1505.44,696.089 1505.99,663.769 1506.55,681.973 1507.11,680.773 1507.67,712.941 1508.23,697.23 1508.79,710.793 1509.35,708.517 1509.91,691.414 1510.47,721.514 1511.03,735.562 1511.59,734.201 1512.15,716.538 1512.71,713.861 1513.26,663.007 1513.82,680.456 1514.38,698.487 1514.94,714.994 1515.5,717.141 1516.06,763.851 1516.62,773.27 1517.18,751.15 1517.74,749.095 1518.3,728.895 1518.86,707.606 1519.42,708.132 1519.98,721.545 1520.53,751.518 1521.09,782.079 1521.65,810.625 1522.21,786.519 1522.77,778.343 1523.33,771.544 1523.89,800.968 1524.45,795.885 1525.01,789.027 1525.57,767.732 1526.13,744.101 1526.69,743.271 1527.25,776.828 1527.81,755.581 1528.36,753.877 1528.92,751.525 1529.48,765.092 1530.04,727.624 1530.6,723.441 1531.16,755.128 1531.72,753.662 1532.28,751.556 1532.84,749.663 1533.4,691.249 1533.96,691.391 1534.52,706.869 1535.08,705.656 1535.63,718.165 1536.19,731.694 1536.75,731.27 1537.31,730.767 1537.87,695.795 1538.43,694.178 1538.99,692.87 1539.55,677.16 1540.11,663.86 1540.67,648.317 1541.23,648.115 1541.79,665.097 1542.35,681.624 1542.9,681.508 1543.46,651.585 1544.02,673.699 1544.58,676.598 1545.14,642.85 1545.7,629.136 1546.26,616.978 1546.82,574.019 1547.38,530.576 1547.94,555.327 1548.5,545.871 1549.06,570.53 1549.62,592.546 1550.18,550.562 1550.73,541.616 1551.29,566.261 1551.85,609.914 1552.41,626.466 1552.97,645.888 1553.53,647.035 1554.09,631.731 1554.65,650.043 1555.21,665.247 1555.77,664.78 1556.33,715.877 1556.89,713.149 1557.45,711.252 1558,726.873 1558.56,708.762 1559.12,703.902 1559.68,673.849 1560.24,659.413 1560.8,676.76 1561.36,675.004 1561.92,675.952 1562.48,660.174 1563.04,678.835 1563.6,700.606 1564.16,732.92 1564.72,730.56 1565.28,759.505 1565.83,773.373 1566.39,769.313 1566.95,749.682 1567.51,744.665 1568.07,722.734 1568.63,701.964 1569.19,734.732 1569.75,731.741 1570.31,729.841 1570.87,712.625 1571.43,760.911 1571.99,740.545 1572.55,754.613 1573.1,768.14 1573.66,745.916 1574.22,693.828 1574.78,728.437 1575.34,740.838 1575.9,739.249 1576.46,733.571 1577.02,729 1577.58,678.645 1578.14,660.752 1578.7,633.269 1579.26,649.799 1579.82,651.258 1580.37,638.315 1580.93,687.6 1581.49,704.21 1582.05,718.717 1582.61,719.923 1583.17,717.654 1583.73,733.016 1584.29,682.842 1584.85,679.471 1585.41,678.445 1585.97,693.674 1586.53,676.765 1587.09,676.816 1587.65,690.785 1588.2,658.007 1588.76,675.71 1589.32,674.393 1589.88,691.138 1590.44,705.555 1591,706.03 1591.56,719.889 1592.12,716.574 1592.68,712.725 1593.24,743.162 1593.8,757.176 1594.36,799.032 1594.92,773.644 1595.47,767.415 1596.03,762.089 1596.59,740.279 1597.15,721.708 1597.71,732.165 1598.27,729.031 1598.83,742.983 1599.39,736.381 1599.95,751.197 1600.51,714.502 1601.07,713.739 1601.63,676.232 1602.19,676.111 1602.74,677.015 1603.3,692.885 1603.86,708.663 1604.42,737.987 1604.98,750.293 1605.54,762.349 1606.1,759.725 1606.66,740.938 1607.22,721.413 1607.78,622.161 1608.34,593.399 1608.9,597.122 1609.46,588.12 1610.02,592.386 1610.57,614.731 1611.13,617.78 1611.69,636.492 1612.25,639.539 1612.81,607.604 1613.37,594.488 1613.93,568.611 1614.49,559.236 1615.05,581.326 1615.61,599.904 1616.17,602.04 1616.73,605.575 1617.29,626.005 1617.84,692.839 1618.4,704.72 1618.96,637.417 1619.52,623.598 1620.08,610.251 1620.64,630.347 1621.2,649.786 1621.76,636.193 1622.32,653.874 1622.88,657.201 1623.44,673.37 1624,693.317 1624.56,689.91 1625.11,660.783 1625.67,677.754 1626.23,708.911 1626.79,709.165 1627.35,693.498 1627.91,693.903 1628.47,694.616 1629.03,694.214 1629.59,694.475 1630.15,676.468 1630.71,678.377 1631.27,710.484 1631.83,747.358 1632.39,744.258 1632.94,742.388 1633.5,726.295 1634.06,741.399 1634.62,674.613 1635.18,612.54 1635.74,630.778 1636.3,667.109 1636.86,668.22 1637.42,669.935 1637.98,664.839 1638.54,668.504 1639.1,683.207 1639.66,668.414 1640.21,633.572 1640.77,669.638 1641.33,670.549 1641.89,670.086 1642.45,688.753 1643.01,689.471 1643.57,753.76 1644.13,654.878 1644.69,639.358 1645.25,643.991 1645.81,661.826 1646.37,679.198 1646.93,679.756 1647.48,679.683 1648.04,694.942 1648.6,691.184 1649.16,692.152 1649.72,692.649 1650.28,692.465 1650.84,660.241 1651.4,646.998 1651.96,667.483 1652.52,702.522 1653.08,686.095 1653.64,670.817 1654.2,701.065 1654.76,666.647 1655.31,701.414 1655.87,672.978 1656.43,625.82 1656.99,629.988 1657.55,598.59 1658.11,583.433 1658.67,620.822 1659.23,606.131 1659.79,611.873 1660.35,598.412 1660.91,599.571 1661.47,592.485 1662.03,583.72 1662.58,591.443 1663.14,564.778 1663.7,604.023 1664.26,591.411 1664.82,598.868 1665.38,606.772 1665.94,611.095 1666.5,598.608 1667.06,604.587 1667.62,605.917 1668.18,611.335 1668.74,633.071 1669.3,637.211 1669.85,626.252 1670.41,631.024 1670.97,636.098 1671.53,654.86 1672.09,673.438 1672.65,677.97 1673.21,712.755 1673.77,711.835 1674.33,710.559 1674.89,693.868 1675.45,709.826 1676.01,694.206 1676.57,743.997 1677.13,721.83 1677.68,736.168 1678.24,734.66 1678.8,764.913 1679.36,743.951 1679.92,722.384 1680.48,735.539 1681.04,699.463 1681.6,734.07 1682.16,729.28 1682.72,726.576 1683.28,724.989 1683.84,754.601 1684.4,784.423 1684.95,791.948 1685.51,784.908 1686.07,781.361 1686.63,758.365 1687.19,753.925 1687.75,751.719 1688.31,748.833 1688.87,792.446 1689.43,819.247 1689.99,810.1 1690.55,767.964 1691.11,796.338 1691.67,757.162 1692.23,770.858 1692.78,734.502 1693.34,747.542 1693.9,712.706 1694.46,680.987 1695.02,693.854 1695.58,693.525 1696.14,691.322 1696.7,691.077 1697.26,650.43 1697.82,684.681 1698.38,715.66 1698.94,679.704 1699.5,678.248 1700.05,676.431 1700.61,693.083 1701.17,711.127 1701.73,706.489 1702.29,701.667 1702.85,700.043 1703.41,667.366 1703.97,700.786 1704.53,714.116 1705.09,708.556 1705.65,710.435 1706.21,710.062 1706.77,675.265 1707.32,673.407 1707.88,675.848 1708.44,691.45 1709,658.849 1709.56,679.05 1710.12,645.675 1710.68,618.177 1711.24,618.39 1711.8,636.458 1712.36,608.799 1712.92,598.529 1713.48,600.33 1714.04,569.553 1714.6,594.195 1715.15,563.835 1715.71,572.459 1716.27,595.575 1716.83,602.899 1717.39,606.119 1717.95,609.762 1718.51,633.063 1719.07,667.264 1719.63,635.993 1720.19,638.669 1720.75,642.805 1721.31,629.809 1721.87,668.776 1722.42,675.093 1722.98,689.111 1723.54,672.362 1724.1,673.13 1724.66,676.562 1725.22,693.523 1725.78,695.496 1726.34,677.624 1726.9,662.918 1727.46,649.051 1728.02,651.975 1728.58,621.715 1729.14,657.793 1729.69,624.85 1730.25,643.498 1730.81,633.046 1731.37,619.933 1731.93,639 1732.49,644.097 1733.05,663.255 1733.61,642.167 1734.17,644.234 1734.73,612.879 1735.29,616.801 1735.85,618.913 1736.41,623.043 1736.97,660.601 1737.52,645.602 1738.08,647.816 1738.64,665.939 1739.2,665.375 1739.76,651.283 1740.32,638.563 1740.88,641.206 1741.44,645.66 1742,679.754 1742.56,712.029 1743.12,742.103 1743.68,754 1744.24,766.725 1744.79,776.927 1745.35,775.265 1745.91,770.782 1746.47,764.986 1747.03,758.019 1747.59,766.588 1748.15,758.294 1748.71,773.183 1749.27,817.672 1749.83,812.756 1750.39,855.473 1750.95,845.148 1751.51,853.956 1752.06,847.314 1752.62,821.007 1753.18,830.594 1753.74,838.217 1754.3,811.407 1754.86,820.948 1755.42,814.767 1755.98,825.462 1756.54,802.857 1757.1,811.476 1757.66,788.163 1758.22,786.074 1758.78,767.788 1759.34,763.781 1759.89,758.791 1760.45,740.701 1761.01,785.11 1761.57,767.726 1762.13,710.674 1762.69,724.817 1763.25,719.808 1763.81,717.72 1764.37,699.859 1764.93,684.644 1765.49,667.261 1766.05,652.429 1766.61,668.527 1767.16,668.135 1767.72,670.313 1768.28,670.725 1768.84,672.521 1769.4,638.744 1769.96,654.841 1770.52,659.156 1771.08,673.5 1771.64,673.279 1772.2,706.215 1772.76,690.222 1773.32,703.781 1773.88,699.946 1774.43,730.496 1774.99,742.261 1775.55,770.543 1776.11,765.562 1776.67,730.097 1777.23,762.753 1777.79,726.778 1778.35,741.719 1778.91,738.461 1779.47,737.559 1780.03,749.051 1780.59,744.762 1781.15,726.757 1781.71,694.293 1782.26,679.474 1782.82,667.204 1783.38,651.026 1783.94,651.222 1784.5,655.361 1785.06,654.423 1785.62,639.581 1786.18,645.079 1786.74,627.975 1787.3,598.007 1787.86,618.728 1788.42,606.369 1788.98,608.656 1789.53,615.405 1790.09,619.879 1790.65,589.397 1791.21,580.156 1791.77,585.44 1792.33,578.177 1792.89,569.833 1793.45,545.734 1794.01,538.637 1794.57,547.763 1795.13,541.194 1795.69,547.491 1796.25,537.46 1796.8,542.767 1797.36,516.961 1797.92,527.696 1798.48,573.473 1799.04,597.388 1799.6,633.533 1800.16,637.819 1800.72,669.863 1801.28,687.211 1801.84,687.582 1802.4,703.545 1802.96,702.394 1803.52,705.023 1804.08,718.139 1804.63,734.224 1805.19,734.423 1805.75,745.116 1806.31,728.268 1806.87,707.182 1807.43,688.235 1807.99,723.048 1808.55,704.495 1809.11,673.792 1809.67,673.823 1810.23,656.093 1810.79,643.206 1811.35,628.974 1811.9,647.909 1812.46,665.927 1813.02,650.986 1813.58,703.772 1814.14,701.798 1814.7,705.094 1815.26,641.333 1815.82,674.534 1816.38,677.704 1816.94,660.189 1817.5,696.236 1818.06,697.238 1818.62,683.114 1819.18,653.405 1819.73,620.411 1820.29,609.409 1820.85,611.227 1821.41,613.14 1821.97,586.726 1822.53,608.196 1823.09,612.905 1823.65,648.954 1824.21,683.936 1824.77,667.216 1825.33,687.816 1825.89,685.544 1826.45,666.799 1827,647.525 1827.56,649.135 1828.12,662.842 1828.68,678.764 1829.24,695.609 1829.8,680.903 1830.36,679.71 1830.92,681.927 1831.48,684.79 1832.04,700.394 1832.6,668.836 1833.16,666.759 1833.72,648.664 1834.27,685.295 1834.83,680.908 1835.39,665.446 1835.95,678.925 1836.51,677.626 1837.07,676.553 1837.63,677.713 1838.19,663.11 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 690.099 L720.806 690.099 L721.365 690.099 L721.924 690.099 L722.484 690.099 L723.043 690.099 L723.602 690.099 L724.161 690.099 L724.721 690.099 L725.28 690.099 L725.839 690.099 L726.398 690.099 L726.958 690.099 L727.517 690.099 L728.076 690.099 L728.635 690.099 L729.195 690.099 L729.754 690.099 L730.313 690.099 L730.872 690.099 L731.432 690.099 L731.991 690.099 L732.55 690.099 L733.109 690.099 L733.669 690.099 L734.228 690.099 L734.787 690.099 L735.346 690.099 L735.906 690.099 L736.465 690.099 L737.024 690.099 L737.583 690.099 L738.143 690.099 L738.702 690.099 L739.261 690.099 L739.82 690.099 L740.38 690.099 L740.939 690.099 L741.498 690.099 L742.057 690.099 L742.617 690.099 L743.176 690.099 L743.735 690.099 L744.294 690.099 L744.854 690.099 L745.413 690.099 L745.972 690.099 L746.531 690.099 L747.091 690.099 L747.65 690.099 L748.209 690.099 L748.768 690.099 L749.328 690.099 L749.887 690.099 L750.446 690.099 L751.005 690.099 L751.565 690.099 L752.124 690.099 L752.683 690.099 L753.242 690.099 L753.802 690.099 L754.361 690.099 L754.92 690.099 L755.479 690.099 L756.039 690.099 L756.598 690.099 L757.157 690.099 L757.716 690.099 L758.276 690.099 L758.835 690.099 L759.394 690.099 L759.953 690.099 L760.513 690.099 L761.072 690.099 L761.631 690.099 L762.19 690.099 L762.75 690.099 L763.309 690.099 L763.868 690.099 L764.427 690.099 L764.987 690.099 L765.546 690.099 L766.105 690.099 L766.664 690.099 L767.224 690.099 L767.783 690.099 L768.342 690.099 L768.901 690.099 L769.461 690.099 L770.02 690.099 L770.579 690.099 L771.138 690.099 L771.698 690.099 L772.257 690.099 L772.816 690.099 L773.375 690.099 L773.935 690.099 L774.494 690.099 L775.053 690.099 L775.612 690.099 L776.172 690.099 L776.731 690.099 L777.29 690.099 L777.849 690.099 L778.409 690.099 L778.968 690.099 L779.527 690.099 L780.086 690.099 L780.646 690.099 L781.205 690.099 L781.764 690.099 L782.323 690.099 L782.883 690.099 L783.442 690.099 L784.001 690.099 L784.56 690.099 L785.12 690.099 L785.679 690.099 L786.238 690.099 L786.797 690.099 L787.357 690.099 L787.916 690.099 L788.475 690.099 L789.034 690.099 L789.594 690.099 L790.153 690.099 L790.712 690.099 L791.271 690.099 L791.831 690.099 L792.39 690.099 L792.949 690.099 L793.508 690.099 L794.068 690.099 L794.627 690.099 L795.186 690.099 L795.745 690.099 L796.305 690.099 L796.864 690.099 L797.423 690.099 L797.982 690.099 L798.542 690.099 L799.101 690.099 L799.66 690.099 L800.219 690.099 L800.779 690.099 L801.338 690.099 L801.897 690.099 L802.456 690.099 L803.016 690.099 L803.575 690.099 L804.134 690.099 L804.693 690.099 L805.253 690.099 L805.812 690.099 L806.371 690.099 L806.931 690.099 L807.49 690.099 L808.049 690.099 L808.608 690.099 L809.168 690.099 L809.727 690.099 L810.286 690.099 L810.845 690.099 L811.405 690.099 L811.964 690.099 L812.523 690.099 L813.082 690.099 L813.642 690.099 L814.201 690.099 L814.76 690.099 L815.319 690.099 L815.879 690.099 L816.438 690.099 L816.997 690.099 L817.556 690.099 L818.116 690.099 L818.675 690.099 L819.234 690.099 L819.793 690.099 L820.353 690.099 L820.912 690.099 L821.471 690.099 L822.03 690.099 L822.59 690.099 L823.149 690.099 L823.708 690.099 L824.267 690.099 L824.827 690.099 L825.386 690.099 L825.945 690.099 L826.504 690.099 L827.064 690.099 L827.623 690.099 L828.182 690.099 L828.741 690.099 L829.301 690.099 L829.86 690.099 L830.419 690.099 L830.978 690.099 L831.538 690.099 L832.097 690.099 L832.656 690.099 L833.215 690.099 L833.775 690.099 L834.334 690.099 L834.893 690.099 L835.452 690.099 L836.012 690.099 L836.571 690.099 L837.13 690.099 L837.689 690.099 L838.249 690.099 L838.808 690.099 L839.367 690.099 L839.926 690.099 L840.486 690.099 L841.045 690.099 L841.604 690.099 L842.163 690.099 L842.723 690.099 L843.282 690.099 L843.841 690.099 L844.4 690.099 L844.96 690.099 L845.519 690.099 L846.078 690.099 L846.637 690.099 L847.197 690.099 L847.756 690.099 L848.315 690.099 L848.874 690.099 L849.434 690.099 L849.993 690.099 L850.552 690.099 L851.111 690.099 L851.671 690.099 L852.23 690.099 L852.789 690.099 L853.348 690.099 L853.908 690.099 L854.467 690.099 L855.026 690.099 L855.585 690.099 L856.145 690.099 L856.704 690.099 L857.263 690.099 L857.822 690.099 L858.382 690.099 L858.941 690.099 L859.5 690.099 L860.059 690.099 L860.619 690.099 L861.178 690.099 L861.737 690.099 L862.296 690.099 L862.856 690.099 L863.415 690.099 L863.974 690.099 L864.533 690.099 L865.093 690.099 L865.652 690.099 L866.211 690.099 L866.77 690.099 L867.33 690.099 L867.889 690.099 L868.448 690.099 L869.007 690.099 L869.567 690.099 L870.126 690.099 L870.685 690.099 L871.244 690.099 L871.804 690.099 L872.363 690.099 L872.922 690.099 L873.481 690.099 L874.041 690.099 L874.6 690.099 L875.159 690.099 L875.718 690.099 L876.278 690.099 L876.837 690.099 L877.396 690.099 L877.955 690.099 L878.515 690.099 L879.074 690.099 L879.633 690.099 L880.192 690.099 L880.752 690.099 L881.311 690.099 L881.87 690.099 L882.429 690.099 L882.989 690.099 L883.548 690.099 L884.107 690.099 L884.666 690.099 L885.226 690.099 L885.785 690.099 L886.344 690.099 L886.903 690.099 L887.463 690.099 L888.022 690.099 L888.581 690.099 L889.14 690.099 L889.7 690.099 L890.259 690.099 L890.818 690.099 L891.377 690.099 L891.937 690.099 L892.496 690.099 L893.055 690.099 L893.614 690.099 L894.174 690.099 L894.733 690.099 L895.292 690.099 L895.851 690.099 L896.411 690.099 L896.97 690.099 L897.529 690.099 L898.088 690.099 L898.648 690.099 L899.207 690.099 L899.766 690.099 L900.325 690.099 L900.885 690.099 L901.444 690.099 L902.003 690.099 L902.562 690.099 L903.122 690.099 L903.681 690.099 L904.24 690.099 L904.799 690.099 L905.359 690.099 L905.918 690.099 L906.477 690.099 L907.036 690.099 L907.596 690.099 L908.155 690.099 L908.714 690.099 L909.273 690.099 L909.833 690.099 L910.392 690.099 L910.951 690.099 L911.51 690.099 L912.07 690.099 L912.629 690.099 L913.188 690.099 L913.747 690.099 L914.307 690.099 L914.866 690.099 L915.425 690.099 L915.984 690.099 L916.544 690.099 L917.103 690.099 L917.662 690.099 L918.221 690.099 L918.781 690.099 L919.34 690.099 L919.899 690.099 L920.458 690.099 L921.018 690.099 L921.577 690.099 L922.136 690.099 L922.695 690.099 L923.255 690.099 L923.814 690.099 L924.373 690.099 L924.932 690.099 L925.492 690.099 L926.051 690.099 L926.61 690.099 L927.169 690.099 L927.729 690.099 L928.288 690.099 L928.847 690.099 L929.406 690.099 L929.966 690.099 L930.525 690.099 L931.084 690.099 L931.644 690.099 L932.203 690.099 L932.762 690.099 L933.321 690.099 L933.881 690.099 L934.44 690.099 L934.999 690.099 L935.558 690.099 L936.118 690.099 L936.677 690.099 L937.236 690.099 L937.795 690.099 L938.355 690.099 L938.914 690.099 L939.473 690.099 L940.032 690.099 L940.592 690.099 L941.151 690.099 L941.71 690.099 L942.269 690.099 L942.829 690.099 L943.388 690.099 L943.947 690.099 L944.506 690.099 L945.066 690.099 L945.625 690.099 L946.184 690.099 L946.743 690.099 L947.303 690.099 L947.862 690.099 L948.421 690.099 L948.98 690.099 L949.54 690.099 L950.099 690.099 L950.658 690.099 L951.217 690.099 L951.777 690.099 L952.336 690.099 L952.895 690.099 L953.454 690.099 L954.014 690.099 L954.573 690.099 L955.132 690.099 L955.691 690.099 L956.251 690.099 L956.81 690.099 L957.369 690.099 L957.928 690.099 L958.488 690.099 L959.047 690.099 L959.606 690.099 L960.165 690.099 L960.725 690.099 L961.284 690.099 L961.843 690.099 L962.402 690.099 L962.962 690.099 L963.521 690.099 L964.08 690.099 L964.639 690.099 L965.199 690.099 L965.758 690.099 L966.317 690.099 L966.876 690.099 L967.436 690.099 L967.995 690.099 L968.554 690.099 L969.113 690.099 L969.673 690.099 L970.232 690.099 L970.791 690.099 L971.35 690.099 L971.91 690.099 L972.469 690.099 L973.028 690.099 L973.587 690.099 L974.147 690.099 L974.706 690.099 L975.265 690.099 L975.824 690.099 L976.384 690.099 L976.943 690.099 L977.502 690.099 L978.061 690.099 L978.621 690.099 L979.18 690.099 L979.739 690.099 L980.298 690.099 L980.858 690.099 L981.417 690.099 L981.976 690.099 L982.535 690.099 L983.095 690.099 L983.654 690.099 L984.213 690.099 L984.772 690.099 L985.332 690.099 L985.891 690.099 L986.45 690.099 L987.009 690.099 L987.569 690.099 L988.128 690.099 L988.687 690.099 L989.246 690.099 L989.806 690.099 L990.365 690.099 L990.924 690.099 L991.483 690.099 L992.043 690.099 L992.602 690.099 L993.161 690.099 L993.72 690.099 L994.28 690.099 L994.839 690.099 L995.398 690.099 L995.957 690.099 L996.517 690.099 L997.076 690.099 L997.635 690.099 L998.194 690.099 L998.754 690.099 L999.313 690.099 L999.872 690.099 L1000.43 690.099 L1000.99 690.099 L1001.55 690.099 L1002.11 690.099 L1002.67 690.099 L1003.23 690.099 L1003.79 690.099 L1004.35 690.099 L1004.91 690.099 L1005.46 690.099 L1006.02 690.099 L1006.58 690.099 L1007.14 690.099 L1007.7 690.099 L1008.26 690.099 L1008.82 690.099 L1009.38 690.099 L1009.94 690.099 L1010.5 690.099 L1011.06 690.099 L1011.62 690.099 L1012.18 690.099 L1012.73 690.099 L1013.29 690.099 L1013.85 690.099 L1014.41 690.099 L1014.97 690.099 L1015.53 690.099 L1016.09 690.099 L1016.65 690.099 L1017.21 690.099 L1017.77 690.099 L1018.33 690.099 L1018.89 690.099 L1019.45 690.099 L1020.01 690.099 L1020.56 690.099 L1021.12 690.099 L1021.68 690.099 L1022.24 690.099 L1022.8 690.099 L1023.36 690.099 L1023.92 690.099 L1024.48 690.099 L1025.04 690.099 L1025.6 690.099 L1026.16 690.099 L1026.72 690.099 L1027.28 690.099 L1027.83 690.099 L1028.39 690.099 L1028.95 690.099 L1029.51 690.099 L1030.07 690.099 L1030.63 690.099 L1031.19 690.099 L1031.75 690.099 L1032.31 690.099 L1032.87 690.099 L1033.43 690.099 L1033.99 690.099 L1034.55 690.099 L1035.1 690.099 L1035.66 690.099 L1036.22 690.099 L1036.78 690.099 L1037.34 690.099 L1037.9 690.099 L1038.46 690.099 L1039.02 690.099 L1039.58 690.099 L1040.14 690.099 L1040.7 690.099 L1041.26 690.099 L1041.82 690.099 L1042.38 690.099 L1042.93 690.099 L1043.49 690.099 L1044.05 690.099 L1044.61 690.099 L1045.17 690.099 L1045.73 690.099 L1046.29 690.099 L1046.85 690.099 L1047.41 690.099 L1047.97 690.099 L1048.53 690.099 L1049.09 690.099 L1049.65 690.099 L1050.2 690.099 L1050.76 690.099 L1051.32 690.099 L1051.88 690.099 L1052.44 690.099 L1053 690.099 L1053.56 690.099 L1054.12 690.099 L1054.68 690.099 L1055.24 690.099 L1055.8 690.099 L1056.36 690.099 L1056.92 690.099 L1057.48 690.099 L1058.03 690.099 L1058.59 690.099 L1059.15 690.099 L1059.71 690.099 L1060.27 690.099 L1060.83 690.099 L1061.39 690.099 L1061.95 690.099 L1062.51 690.099 L1063.07 690.099 L1063.63 690.099 L1064.19 690.099 L1064.75 690.099 L1065.3 690.099 L1065.86 690.099 L1066.42 690.099 L1066.98 690.099 L1067.54 690.099 L1068.1 690.099 L1068.66 690.099 L1069.22 690.099 L1069.78 690.099 L1070.34 690.099 L1070.9 690.099 L1071.46 690.099 L1072.02 690.099 L1072.57 690.099 L1073.13 690.099 L1073.69 690.099 L1074.25 690.099 L1074.81 690.099 L1075.37 690.099 L1075.93 690.099 L1076.49 690.099 L1077.05 690.099 L1077.61 690.099 L1078.17 690.099 L1078.73 690.099 L1079.29 690.099 L1079.85 690.099 L1080.4 690.099 L1080.96 690.099 L1081.52 690.099 L1082.08 690.099 L1082.64 690.099 L1083.2 690.099 L1083.76 690.099 L1084.32 690.099 L1084.88 690.099 L1085.44 690.099 L1086 690.099 L1086.56 690.099 L1087.12 690.099 L1087.67 690.099 L1088.23 690.099 L1088.79 690.099 L1089.35 690.099 L1089.91 690.099 L1090.47 690.099 L1091.03 690.099 L1091.59 690.099 L1092.15 690.099 L1092.71 690.099 L1093.27 690.099 L1093.83 690.099 L1094.39 690.099 L1094.94 690.099 L1095.5 690.099 L1096.06 690.099 L1096.62 690.099 L1097.18 690.099 L1097.74 690.099 L1098.3 690.099 L1098.86 690.099 L1099.42 690.099 L1099.98 690.099 L1100.54 690.099 L1101.1 690.099 L1101.66 690.099 L1102.22 690.099 L1102.77 690.099 L1103.33 690.099 L1103.89 690.099 L1104.45 690.099 L1105.01 690.099 L1105.57 690.099 L1106.13 690.099 L1106.69 690.099 L1107.25 690.099 L1107.81 690.099 L1108.37 690.099 L1108.93 690.099 L1109.49 690.099 L1110.04 690.099 L1110.6 690.099 L1111.16 690.099 L1111.72 690.099 L1112.28 690.099 L1112.84 690.099 L1113.4 690.099 L1113.96 690.099 L1114.52 690.099 L1115.08 690.099 L1115.64 690.099 L1116.2 690.099 L1116.76 690.099 L1117.31 690.099 L1117.87 690.099 L1118.43 690.099 L1118.99 690.099 L1119.55 690.099 L1120.11 690.099 L1120.67 690.099 L1121.23 690.099 L1121.79 690.099 L1122.35 690.099 L1122.91 690.099 L1123.47 690.099 L1124.03 690.099 L1124.59 690.099 L1125.14 690.099 L1125.7 690.099 L1126.26 690.099 L1126.82 690.099 L1127.38 690.099 L1127.94 690.099 L1128.5 690.099 L1129.06 690.099 L1129.62 690.099 L1130.18 690.099 L1130.74 690.099 L1131.3 690.099 L1131.86 690.099 L1132.41 690.099 L1132.97 690.099 L1133.53 690.099 L1134.09 690.099 L1134.65 690.099 L1135.21 690.099 L1135.77 690.099 L1136.33 690.099 L1136.89 690.099 L1137.45 690.099 L1138.01 690.099 L1138.57 690.099 L1139.13 690.099 L1139.68 690.099 L1140.24 690.099 L1140.8 690.099 L1141.36 690.099 L1141.92 690.099 L1142.48 690.099 L1143.04 690.099 L1143.6 690.099 L1144.16 690.099 L1144.72 690.099 L1145.28 690.099 L1145.84 690.099 L1146.4 690.099 L1146.96 690.099 L1147.51 690.099 L1148.07 690.099 L1148.63 690.099 L1149.19 690.099 L1149.75 690.099 L1150.31 690.099 L1150.87 690.099 L1151.43 690.099 L1151.99 690.099 L1152.55 690.099 L1153.11 690.099 L1153.67 690.099 L1154.23 690.099 L1154.78 690.099 L1155.34 690.099 L1155.9 690.099 L1156.46 690.099 L1157.02 690.099 L1157.58 690.099 L1158.14 690.099 L1158.7 690.099 L1159.26 690.099 L1159.82 690.099 L1160.38 690.099 L1160.94 690.099 L1161.5 690.099 L1162.05 690.099 L1162.61 690.099 L1163.17 690.099 L1163.73 690.099 L1164.29 690.099 L1164.85 690.099 L1165.41 690.099 L1165.97 690.099 L1166.53 690.099 L1167.09 690.099 L1167.65 690.099 L1168.21 690.099 L1168.77 690.099 L1169.33 690.099 L1169.88 690.099 L1170.44 690.099 L1171 690.099 L1171.56 690.099 L1172.12 690.099 L1172.68 690.099 L1173.24 690.099 L1173.8 690.099 L1174.36 690.099 L1174.92 690.099 L1175.48 690.099 L1176.04 690.099 L1176.6 690.099 L1177.15 690.099 L1177.71 690.099 L1178.27 690.099 L1178.83 690.099 L1179.39 690.099 L1179.95 690.099 L1180.51 690.099 L1181.07 690.099 L1181.63 690.099 L1182.19 690.099 L1182.75 690.099 L1183.31 690.099 L1183.87 690.099 L1184.43 690.099 L1184.98 690.099 L1185.54 690.099 L1186.1 690.099 L1186.66 690.099 L1187.22 690.099 L1187.78 690.099 L1188.34 690.099 L1188.9 690.099 L1189.46 690.099 L1190.02 690.099 L1190.58 690.099 L1191.14 690.099 L1191.7 690.099 L1192.25 690.099 L1192.81 690.099 L1193.37 690.099 L1193.93 690.099 L1194.49 690.099 L1195.05 690.099 L1195.61 690.099 L1196.17 690.099 L1196.73 690.099 L1197.29 690.099 L1197.85 690.099 L1198.41 690.099 L1198.97 690.099 L1199.52 690.099 L1200.08 690.099 L1200.64 690.099 L1201.2 690.099 L1201.76 690.099 L1202.32 690.099 L1202.88 690.099 L1203.44 690.099 L1204 690.099 L1204.56 690.099 L1205.12 690.099 L1205.68 690.099 L1206.24 690.099 L1206.8 690.099 L1207.35 690.099 L1207.91 690.099 L1208.47 690.099 L1209.03 690.099 L1209.59 690.099 L1210.15 690.099 L1210.71 690.099 L1211.27 690.099 L1211.83 690.099 L1212.39 690.099 L1212.95 690.099 L1213.51 690.099 L1214.07 690.099 L1214.62 690.099 L1215.18 690.099 L1215.74 690.099 L1216.3 690.099 L1216.86 690.099 L1217.42 690.099 L1217.98 690.099 L1218.54 690.099 L1219.1 690.099 L1219.66 690.099 L1220.22 690.099 L1220.78 690.099 L1221.34 690.099 L1221.89 690.099 L1222.45 690.099 L1223.01 690.099 L1223.57 690.099 L1224.13 690.099 L1224.69 690.099 L1225.25 690.099 L1225.81 690.099 L1226.37 690.099 L1226.93 690.099 L1227.49 690.099 L1228.05 690.099 L1228.61 690.099 L1229.17 690.099 L1229.72 690.099 L1230.28 690.099 L1230.84 690.099 L1231.4 690.099 L1231.96 690.099 L1232.52 690.099 L1233.08 690.099 L1233.64 690.099 L1234.2 690.099 L1234.76 690.099 L1235.32 690.099 L1235.88 690.099 L1236.44 690.099 L1236.99 690.099 L1237.55 690.099 L1238.11 690.099 L1238.67 690.099 L1239.23 690.099 L1239.79 690.099 L1240.35 690.099 L1240.91 690.099 L1241.47 690.099 L1242.03 690.099 L1242.59 690.099 L1243.15 690.099 L1243.71 690.099 L1244.26 690.099 L1244.82 690.099 L1245.38 690.099 L1245.94 690.099 L1246.5 690.099 L1247.06 690.099 L1247.62 690.099 L1248.18 690.099 L1248.74 690.099 L1249.3 690.099 L1249.86 690.099 L1250.42 690.099 L1250.98 690.099 L1251.54 690.099 L1252.09 690.099 L1252.65 690.099 L1253.21 690.099 L1253.77 690.099 L1254.33 690.099 L1254.89 690.099 L1255.45 690.099 L1256.01 690.099 L1256.57 690.099 L1257.13 690.099 L1257.69 690.099 L1258.25 690.099 L1258.81 690.099 L1259.36 690.099 L1259.92 690.099 L1260.48 690.099 L1261.04 690.099 L1261.6 690.099 L1262.16 690.099 L1262.72 690.099 L1263.28 690.099 L1263.84 690.099 L1264.4 690.099 L1264.96 690.099 L1265.52 690.099 L1266.08 690.099 L1266.63 690.099 L1267.19 690.099 L1267.75 690.099 L1268.31 690.099 L1268.87 690.099 L1269.43 690.099 L1269.99 690.099 L1270.55 690.099 L1271.11 690.099 L1271.67 690.099 L1272.23 690.099 L1272.79 690.099 L1273.35 690.099 L1273.91 690.099 L1274.46 690.099 L1275.02 690.099 L1275.58 690.099 L1276.14 690.099 L1276.7 690.099 L1277.26 690.099 L1277.82 690.099 L1278.38 690.099 L1278.94 690.099 L1279.5 690.099 L1280.06 690.099 L1280.62 690.099 L1281.18 690.099 L1281.73 690.099 L1282.29 690.099 L1282.85 690.099 L1283.41 690.099 L1283.97 690.099 L1284.53 690.099 L1285.09 690.099 L1285.65 690.099 L1286.21 690.099 L1286.77 690.099 L1287.33 690.099 L1287.89 690.099 L1288.45 690.099 L1289 690.099 L1289.56 690.099 L1290.12 690.099 L1290.68 690.099 L1291.24 690.099 L1291.8 690.099 L1292.36 690.099 L1292.92 690.099 L1293.48 690.099 L1294.04 690.099 L1294.6 690.099 L1295.16 690.099 L1295.72 690.099 L1296.28 690.099 L1296.83 690.099 L1297.39 690.099 L1297.95 690.099 L1298.51 690.099 L1299.07 690.099 L1299.63 690.099 L1300.19 690.099 L1300.75 690.099 L1301.31 690.099 L1301.87 690.099 L1302.43 690.099 L1302.99 690.099 L1303.55 690.099 L1304.1 690.099 L1304.66 690.099 L1305.22 690.099 L1305.78 690.099 L1306.34 690.099 L1306.9 690.099 L1307.46 690.099 L1308.02 690.099 L1308.58 690.099 L1309.14 690.099 L1309.7 690.099 L1310.26 690.099 L1310.82 690.099 L1311.38 690.099 L1311.93 690.099 L1312.49 690.099 L1313.05 690.099 L1313.61 690.099 L1314.17 690.099 L1314.73 690.099 L1315.29 690.099 L1315.85 690.099 L1316.41 690.099 L1316.97 690.099 L1317.53 690.099 L1318.09 690.099 L1318.65 690.099 L1319.2 690.099 L1319.76 690.099 L1320.32 690.099 L1320.88 690.099 L1321.44 690.099 L1322 690.099 L1322.56 690.099 L1323.12 690.099 L1323.68 690.099 L1324.24 690.099 L1324.8 690.099 L1325.36 690.099 L1325.92 690.099 L1326.47 690.099 L1327.03 690.099 L1327.59 690.099 L1328.15 690.099 L1328.71 690.099 L1329.27 690.099 L1329.83 690.099 L1330.39 690.099 L1330.95 690.099 L1331.51 690.099 L1332.07 690.099 L1332.63 690.099 L1333.19 690.099 L1333.75 690.099 L1334.3 690.099 L1334.86 690.099 L1335.42 690.099 L1335.98 690.099 L1336.54 690.099 L1337.1 690.099 L1337.66 690.099 L1338.22 690.099 L1338.78 690.099 L1339.34 690.099 L1339.9 690.099 L1340.46 690.099 L1341.02 690.099 L1341.57 690.099 L1342.13 690.099 L1342.69 690.099 L1343.25 690.099 L1343.81 690.099 L1344.37 690.099 L1344.93 690.099 L1345.49 690.099 L1346.05 690.099 L1346.61 690.099 L1347.17 690.099 L1347.73 690.099 L1348.29 690.099 L1348.84 690.099 L1349.4 690.099 L1349.96 690.099 L1350.52 690.099 L1351.08 690.099 L1351.64 690.099 L1352.2 690.099 L1352.76 690.099 L1353.32 690.099 L1353.88 690.099 L1354.44 690.099 L1355 690.099 L1355.56 690.099 L1356.12 690.099 L1356.67 690.099 L1357.23 690.099 L1357.79 690.099 L1358.35 690.099 L1358.91 690.099 L1359.47 690.099 L1360.03 690.099 L1360.59 690.099 L1361.15 690.099 L1361.71 690.099 L1362.27 690.099 L1362.83 690.099 L1363.39 690.099 L1363.94 690.099 L1364.5 690.099 L1365.06 690.099 L1365.62 690.099 L1366.18 690.099 L1366.74 690.099 L1367.3 690.099 L1367.86 690.099 L1368.42 690.099 L1368.98 690.099 L1369.54 690.099 L1370.1 690.099 L1370.66 690.099 L1371.21 690.099 L1371.77 690.099 L1372.33 690.099 L1372.89 690.099 L1373.45 690.099 L1374.01 690.099 L1374.57 690.099 L1375.13 690.099 L1375.69 690.099 L1376.25 690.099 L1376.81 690.099 L1377.37 690.099 L1377.93 690.099 L1378.49 690.099 L1379.04 690.099 L1379.6 690.099 L1380.16 690.099 L1380.72 690.099 L1381.28 690.099 L1381.84 690.099 L1382.4 690.099 L1382.96 690.099 L1383.52 690.099 L1384.08 690.099 L1384.64 690.099 L1385.2 690.099 L1385.76 690.099 L1386.31 690.099 L1386.87 690.099 L1387.43 690.099 L1387.99 690.099 L1388.55 690.099 L1389.11 690.099 L1389.67 690.099 L1390.23 690.099 L1390.79 690.099 L1391.35 690.099 L1391.91 690.099 L1392.47 690.099 L1393.03 690.099 L1393.58 690.099 L1394.14 690.099 L1394.7 690.099 L1395.26 690.099 L1395.82 690.099 L1396.38 690.099 L1396.94 690.099 L1397.5 690.099 L1398.06 690.099 L1398.62 690.099 L1399.18 690.099 L1399.74 690.099 L1400.3 690.099 L1400.86 690.099 L1401.41 690.099 L1401.97 690.099 L1402.53 690.099 L1403.09 690.099 L1403.65 690.099 L1404.21 690.099 L1404.77 690.099 L1405.33 690.099 L1405.89 690.099 L1406.45 690.099 L1407.01 690.099 L1407.57 690.099 L1408.13 690.099 L1408.68 690.099 L1409.24 690.099 L1409.8 690.099 L1410.36 690.099 L1410.92 690.099 L1411.48 690.099 L1412.04 690.099 L1412.6 690.099 L1413.16 690.099 L1413.72 690.099 L1414.28 690.099 L1414.84 690.099 L1415.4 690.099 L1415.95 690.099 L1416.51 690.099 L1417.07 690.099 L1417.63 690.099 L1418.19 690.099 L1418.75 690.099 L1419.31 690.099 L1419.87 690.099 L1420.43 690.099 L1420.99 690.099 L1421.55 690.099 L1422.11 690.099 L1422.67 690.099 L1423.23 690.099 L1423.78 690.099 L1424.34 690.099 L1424.9 690.099 L1425.46 690.099 L1426.02 690.099 L1426.58 690.099 L1427.14 690.099 L1427.7 690.099 L1428.26 690.099 L1428.82 690.099 L1429.38 690.099 L1429.94 690.099 L1430.5 690.099 L1431.05 690.099 L1431.61 690.099 L1432.17 690.099 L1432.73 690.099 L1433.29 690.099 L1433.85 690.099 L1434.41 690.099 L1434.97 690.099 L1435.53 690.099 L1436.09 690.099 L1436.65 690.099 L1437.21 690.099 L1437.77 690.099 L1438.33 690.099 L1438.88 690.099 L1439.44 690.099 L1440 690.099 L1440.56 690.099 L1441.12 690.099 L1441.68 690.099 L1442.24 690.099 L1442.8 690.099 L1443.36 690.099 L1443.92 690.099 L1444.48 690.099 L1445.04 690.099 L1445.6 690.099 L1446.15 690.099 L1446.71 690.099 L1447.27 690.099 L1447.83 690.099 L1448.39 690.099 L1448.95 690.099 L1449.51 690.099 L1450.07 690.099 L1450.63 690.099 L1451.19 690.099 L1451.75 690.099 L1452.31 690.099 L1452.87 690.099 L1453.42 690.099 L1453.98 690.099 L1454.54 690.099 L1455.1 690.099 L1455.66 690.099 L1456.22 690.099 L1456.78 690.099 L1457.34 690.099 L1457.9 690.099 L1458.46 690.099 L1459.02 690.099 L1459.58 690.099 L1460.14 690.099 L1460.7 690.099 L1461.25 690.099 L1461.81 690.099 L1462.37 690.099 L1462.93 690.099 L1463.49 690.099 L1464.05 690.099 L1464.61 690.099 L1465.17 690.099 L1465.73 690.099 L1466.29 690.099 L1466.85 690.099 L1467.41 690.099 L1467.97 690.099 L1468.52 690.099 L1469.08 690.099 L1469.64 690.099 L1470.2 690.099 L1470.76 690.099 L1471.32 690.099 L1471.88 690.099 L1472.44 690.099 L1473 690.099 L1473.56 690.099 L1474.12 690.099 L1474.68 690.099 L1475.24 690.099 L1475.79 690.099 L1476.35 690.099 L1476.91 690.099 L1477.47 690.099 L1478.03 690.099 L1478.59 690.099 L1479.15 690.099 L1479.71 690.099 L1480.27 690.099 L1480.83 690.099 L1481.39 690.099 L1481.95 690.099 L1482.51 690.099 L1483.07 690.099 L1483.62 690.099 L1484.18 690.099 L1484.74 690.099 L1485.3 690.099 L1485.86 690.099 L1486.42 690.099 L1486.98 690.099 L1487.54 690.099 L1488.1 690.099 L1488.66 690.099 L1489.22 690.099 L1489.78 690.099 L1490.34 690.099 L1490.89 690.099 L1491.45 690.099 L1492.01 690.099 L1492.57 690.099 L1493.13 690.099 L1493.69 690.099 L1494.25 690.099 L1494.81 690.099 L1495.37 690.099 L1495.93 690.099 L1496.49 690.099 L1497.05 690.099 L1497.61 690.099 L1498.16 690.099 L1498.72 690.099 L1499.28 690.099 L1499.84 690.099 L1500.4 690.099 L1500.96 690.099 L1501.52 690.099 L1502.08 690.099 L1502.64 690.099 L1503.2 690.099 L1503.76 690.099 L1504.32 690.099 L1504.88 690.099 L1505.44 690.099 L1505.99 690.099 L1506.55 690.099 L1507.11 690.099 L1507.67 690.099 L1508.23 690.099 L1508.79 690.099 L1509.35 690.099 L1509.91 690.099 L1510.47 690.099 L1511.03 690.099 L1511.59 690.099 L1512.15 690.099 L1512.71 690.099 L1513.26 690.099 L1513.82 690.099 L1514.38 690.099 L1514.94 690.099 L1515.5 690.099 L1516.06 690.099 L1516.62 690.099 L1517.18 690.099 L1517.74 690.099 L1518.3 690.099 L1518.86 690.099 L1519.42 690.099 L1519.98 690.099 L1520.53 690.099 L1521.09 690.099 L1521.65 690.099 L1522.21 690.099 L1522.77 690.099 L1523.33 690.099 L1523.89 690.099 L1524.45 690.099 L1525.01 690.099 L1525.57 690.099 L1526.13 690.099 L1526.69 690.099 L1527.25 690.099 L1527.81 690.099 L1528.36 690.099 L1528.92 690.099 L1529.48 690.099 L1530.04 690.099 L1530.6 690.099 L1531.16 690.099 L1531.72 690.099 L1532.28 690.099 L1532.84 690.099 L1533.4 690.099 L1533.96 690.099 L1534.52 690.099 L1535.08 690.099 L1535.63 690.099 L1536.19 690.099 L1536.75 690.099 L1537.31 690.099 L1537.87 690.099 L1538.43 690.099 L1538.99 690.099 L1539.55 690.099 L1540.11 690.099 L1540.67 690.099 L1541.23 690.099 L1541.79 690.099 L1542.35 690.099 L1542.9 690.099 L1543.46 690.099 L1544.02 690.099 L1544.58 690.099 L1545.14 690.099 L1545.7 690.099 L1546.26 690.099 L1546.82 690.099 L1547.38 690.099 L1547.94 690.099 L1548.5 690.099 L1549.06 690.099 L1549.62 690.099 L1550.18 690.099 L1550.73 690.099 L1551.29 690.099 L1551.85 690.099 L1552.41 690.099 L1552.97 690.099 L1553.53 690.099 L1554.09 690.099 L1554.65 690.099 L1555.21 690.099 L1555.77 690.099 L1556.33 690.099 L1556.89 690.099 L1557.45 690.099 L1558 690.099 L1558.56 690.099 L1559.12 690.099 L1559.68 690.099 L1560.24 690.099 L1560.8 690.099 L1561.36 690.099 L1561.92 690.099 L1562.48 690.099 L1563.04 690.099 L1563.6 690.099 L1564.16 690.099 L1564.72 690.099 L1565.28 690.099 L1565.83 690.099 L1566.39 690.099 L1566.95 690.099 L1567.51 690.099 L1568.07 690.099 L1568.63 690.099 L1569.19 690.099 L1569.75 690.099 L1570.31 690.099 L1570.87 690.099 L1571.43 690.099 L1571.99 690.099 L1572.55 690.099 L1573.1 690.099 L1573.66 690.099 L1574.22 690.099 L1574.78 690.099 L1575.34 690.099 L1575.9 690.099 L1576.46 690.099 L1577.02 690.099 L1577.58 690.099 L1578.14 690.099 L1578.7 690.099 L1579.26 690.099 L1579.82 690.099 L1580.37 690.099 L1580.93 690.099 L1581.49 690.099 L1582.05 690.099 L1582.61 690.099 L1583.17 690.099 L1583.73 690.099 L1584.29 690.099 L1584.85 690.099 L1585.41 690.099 L1585.97 690.099 L1586.53 690.099 L1587.09 690.099 L1587.65 690.099 L1588.2 690.099 L1588.76 690.099 L1589.32 690.099 L1589.88 690.099 L1590.44 690.099 L1591 690.099 L1591.56 690.099 L1592.12 690.099 L1592.68 690.099 L1593.24 690.099 L1593.8 690.099 L1594.36 690.099 L1594.92 690.099 L1595.47 690.099 L1596.03 690.099 L1596.59 690.099 L1597.15 690.099 L1597.71 690.099 L1598.27 690.099 L1598.83 690.099 L1599.39 690.099 L1599.95 690.099 L1600.51 690.099 L1601.07 690.099 L1601.63 690.099 L1602.19 690.099 L1602.74 690.099 L1603.3 690.099 L1603.86 690.099 L1604.42 690.099 L1604.98 690.099 L1605.54 690.099 L1606.1 690.099 L1606.66 690.099 L1607.22 690.099 L1607.78 690.099 L1608.34 690.099 L1608.9 690.099 L1609.46 690.099 L1610.02 690.099 L1610.57 690.099 L1611.13 690.099 L1611.69 690.099 L1612.25 690.099 L1612.81 690.099 L1613.37 690.099 L1613.93 690.099 L1614.49 690.099 L1615.05 690.099 L1615.61 690.099 L1616.17 690.099 L1616.73 690.099 L1617.29 690.099 L1617.84 690.099 L1618.4 690.099 L1618.96 690.099 L1619.52 690.099 L1620.08 690.099 L1620.64 690.099 L1621.2 690.099 L1621.76 690.099 L1622.32 690.099 L1622.88 690.099 L1623.44 690.099 L1624 690.099 L1624.56 690.099 L1625.11 690.099 L1625.67 690.099 L1626.23 690.099 L1626.79 690.099 L1627.35 690.099 L1627.91 690.099 L1628.47 690.099 L1629.03 690.099 L1629.59 690.099 L1630.15 690.099 L1630.71 690.099 L1631.27 690.099 L1631.83 690.099 L1632.39 690.099 L1632.94 690.099 L1633.5 690.099 L1634.06 690.099 L1634.62 690.099 L1635.18 690.099 L1635.74 690.099 L1636.3 690.099 L1636.86 690.099 L1637.42 690.099 L1637.98 690.099 L1638.54 690.099 L1639.1 690.099 L1639.66 690.099 L1640.21 690.099 L1640.77 690.099 L1641.33 690.099 L1641.89 690.099 L1642.45 690.099 L1643.01 690.099 L1643.57 690.099 L1644.13 690.099 L1644.69 690.099 L1645.25 690.099 L1645.81 690.099 L1646.37 690.099 L1646.93 690.099 L1647.48 690.099 L1648.04 690.099 L1648.6 690.099 L1649.16 690.099 L1649.72 690.099 L1650.28 690.099 L1650.84 690.099 L1651.4 690.099 L1651.96 690.099 L1652.52 690.099 L1653.08 690.099 L1653.64 690.099 L1654.2 690.099 L1654.76 690.099 L1655.31 690.099 L1655.87 690.099 L1656.43 690.099 L1656.99 690.099 L1657.55 690.099 L1658.11 690.099 L1658.67 690.099 L1659.23 690.099 L1659.79 690.099 L1660.35 690.099 L1660.91 690.099 L1661.47 690.099 L1662.03 690.099 L1662.58 690.099 L1663.14 690.099 L1663.7 690.099 L1664.26 690.099 L1664.82 690.099 L1665.38 690.099 L1665.94 690.099 L1666.5 690.099 L1667.06 690.099 L1667.62 690.099 L1668.18 690.099 L1668.74 690.099 L1669.3 690.099 L1669.85 690.099 L1670.41 690.099 L1670.97 690.099 L1671.53 690.099 L1672.09 690.099 L1672.65 690.099 L1673.21 690.099 L1673.77 690.099 L1674.33 690.099 L1674.89 690.099 L1675.45 690.099 L1676.01 690.099 L1676.57 690.099 L1677.13 690.099 L1677.68 690.099 L1678.24 690.099 L1678.8 690.099 L1679.36 690.099 L1679.92 690.099 L1680.48 690.099 L1681.04 690.099 L1681.6 690.099 L1682.16 690.099 L1682.72 690.099 L1683.28 690.099 L1683.84 690.099 L1684.4 690.099 L1684.95 690.099 L1685.51 690.099 L1686.07 690.099 L1686.63 690.099 L1687.19 690.099 L1687.75 690.099 L1688.31 690.099 L1688.87 690.099 L1689.43 690.099 L1689.99 690.099 L1690.55 690.099 L1691.11 690.099 L1691.67 690.099 L1692.23 690.099 L1692.78 690.099 L1693.34 690.099 L1693.9 690.099 L1694.46 690.099 L1695.02 690.099 L1695.58 690.099 L1696.14 690.099 L1696.7 690.099 L1697.26 690.099 L1697.82 690.099 L1698.38 690.099 L1698.94 690.099 L1699.5 690.099 L1700.05 690.099 L1700.61 690.099 L1701.17 690.099 L1701.73 690.099 L1702.29 690.099 L1702.85 690.099 L1703.41 690.099 L1703.97 690.099 L1704.53 690.099 L1705.09 690.099 L1705.65 690.099 L1706.21 690.099 L1706.77 690.099 L1707.32 690.099 L1707.88 690.099 L1708.44 690.099 L1709 690.099 L1709.56 690.099 L1710.12 690.099 L1710.68 690.099 L1711.24 690.099 L1711.8 690.099 L1712.36 690.099 L1712.92 690.099 L1713.48 690.099 L1714.04 690.099 L1714.6 690.099 L1715.15 690.099 L1715.71 690.099 L1716.27 690.099 L1716.83 690.099 L1717.39 690.099 L1717.95 690.099 L1718.51 690.099 L1719.07 690.099 L1719.63 690.099 L1720.19 690.099 L1720.75 690.099 L1721.31 690.099 L1721.87 690.099 L1722.42 690.099 L1722.98 690.099 L1723.54 690.099 L1724.1 690.099 L1724.66 690.099 L1725.22 690.099 L1725.78 690.099 L1726.34 690.099 L1726.9 690.099 L1727.46 690.099 L1728.02 690.099 L1728.58 690.099 L1729.14 690.099 L1729.69 690.099 L1730.25 690.099 L1730.81 690.099 L1731.37 690.099 L1731.93 690.099 L1732.49 690.099 L1733.05 690.099 L1733.61 690.099 L1734.17 690.099 L1734.73 690.099 L1735.29 690.099 L1735.85 690.099 L1736.41 690.099 L1736.97 690.099 L1737.52 690.099 L1738.08 690.099 L1738.64 690.099 L1739.2 690.099 L1739.76 690.099 L1740.32 690.099 L1740.88 690.099 L1741.44 690.099 L1742 690.099 L1742.56 690.099 L1743.12 690.099 L1743.68 690.099 L1744.24 690.099 L1744.79 690.099 L1745.35 690.099 L1745.91 690.099 L1746.47 690.099 L1747.03 690.099 L1747.59 690.099 L1748.15 690.099 L1748.71 690.099 L1749.27 690.099 L1749.83 690.099 L1750.39 690.099 L1750.95 690.099 L1751.51 690.099 L1752.06 690.099 L1752.62 690.099 L1753.18 690.099 L1753.74 690.099 L1754.3 690.099 L1754.86 690.099 L1755.42 690.099 L1755.98 690.099 L1756.54 690.099 L1757.1 690.099 L1757.66 690.099 L1758.22 690.099 L1758.78 690.099 L1759.34 690.099 L1759.89 690.099 L1760.45 690.099 L1761.01 690.099 L1761.57 690.099 L1762.13 690.099 L1762.69 690.099 L1763.25 690.099 L1763.81 690.099 L1764.37 690.099 L1764.93 690.099 L1765.49 690.099 L1766.05 690.099 L1766.61 690.099 L1767.16 690.099 L1767.72 690.099 L1768.28 690.099 L1768.84 690.099 L1769.4 690.099 L1769.96 690.099 L1770.52 690.099 L1771.08 690.099 L1771.64 690.099 L1772.2 690.099 L1772.76 690.099 L1773.32 690.099 L1773.88 690.099 L1774.43 690.099 L1774.99 690.099 L1775.55 690.099 L1776.11 690.099 L1776.67 690.099 L1777.23 690.099 L1777.79 690.099 L1778.35 690.099 L1778.91 690.099 L1779.47 690.099 L1780.03 690.099 L1780.59 690.099 L1781.15 690.099 L1781.71 690.099 L1782.26 690.099 L1782.82 690.099 L1783.38 690.099 L1783.94 690.099 L1784.5 690.099 L1785.06 690.099 L1785.62 690.099 L1786.18 690.099 L1786.74 690.099 L1787.3 690.099 L1787.86 690.099 L1788.42 690.099 L1788.98 690.099 L1789.53 690.099 L1790.09 690.099 L1790.65 690.099 L1791.21 690.099 L1791.77 690.099 L1792.33 690.099 L1792.89 690.099 L1793.45 690.099 L1794.01 690.099 L1794.57 690.099 L1795.13 690.099 L1795.69 690.099 L1796.25 690.099 L1796.8 690.099 L1797.36 690.099 L1797.92 690.099 L1798.48 690.099 L1799.04 690.099 L1799.6 690.099 L1800.16 690.099 L1800.72 690.099 L1801.28 690.099 L1801.84 690.099 L1802.4 690.099 L1802.96 690.099 L1803.52 690.099 L1804.08 690.099 L1804.63 690.099 L1805.19 690.099 L1805.75 690.099 L1806.31 690.099 L1806.87 690.099 L1807.43 690.099 L1807.99 690.099 L1808.55 690.099 L1809.11 690.099 L1809.67 690.099 L1810.23 690.099 L1810.79 690.099 L1811.35 690.099 L1811.9 690.099 L1812.46 690.099 L1813.02 690.099 L1813.58 690.099 L1814.14 690.099 L1814.7 690.099 L1815.26 690.099 L1815.82 690.099 L1816.38 690.099 L1816.94 690.099 L1817.5 690.099 L1818.06 690.099 L1818.62 690.099 L1819.18 690.099 L1819.73 690.099 L1820.29 690.099 L1820.85 690.099 L1821.41 690.099 L1821.97 690.099 L1822.53 690.099 L1823.09 690.099 L1823.65 690.099 L1824.21 690.099 L1824.77 690.099 L1825.33 690.099 L1825.89 690.099 L1826.45 690.099 L1827 690.099 L1827.56 690.099 L1828.12 690.099 L1828.68 690.099 L1829.24 690.099 L1829.8 690.099 L1830.36 690.099 L1830.92 690.099 L1831.48 690.099 L1832.04 690.099 L1832.6 690.099 L1833.16 690.099 L1833.72 690.099 L1834.27 690.099 L1834.83 690.099 L1835.39 690.099 L1835.95 690.099 L1836.51 690.099 L1837.07 690.099 L1837.63 690.099 L1838.19 690.099 L1838.19 680.922 L1837.63 680.922 L1837.07 680.922 L1836.51 680.922 L1835.95 680.922 L1835.39 680.922 L1834.83 680.922 L1834.27 680.922 L1833.72 680.922 L1833.16 680.922 L1832.6 680.922 L1832.04 680.922 L1831.48 680.922 L1830.92 680.922 L1830.36 680.922 L1829.8 680.922 L1829.24 680.922 L1828.68 680.922 L1828.12 680.922 L1827.56 680.922 L1827 680.922 L1826.45 680.922 L1825.89 680.922 L1825.33 680.922 L1824.77 680.922 L1824.21 680.922 L1823.65 680.922 L1823.09 680.922 L1822.53 680.922 L1821.97 680.922 L1821.41 680.922 L1820.85 680.922 L1820.29 680.922 L1819.73 680.922 L1819.18 680.922 L1818.62 680.922 L1818.06 680.922 L1817.5 680.922 L1816.94 680.922 L1816.38 680.922 L1815.82 680.922 L1815.26 680.922 L1814.7 680.922 L1814.14 680.922 L1813.58 680.922 L1813.02 680.922 L1812.46 680.922 L1811.9 680.922 L1811.35 680.922 L1810.79 680.922 L1810.23 680.922 L1809.67 680.922 L1809.11 680.922 L1808.55 680.922 L1807.99 680.922 L1807.43 680.922 L1806.87 680.922 L1806.31 680.922 L1805.75 680.922 L1805.19 680.922 L1804.63 680.922 L1804.08 680.922 L1803.52 680.922 L1802.96 680.922 L1802.4 680.922 L1801.84 680.922 L1801.28 680.922 L1800.72 680.922 L1800.16 680.922 L1799.6 680.922 L1799.04 680.922 L1798.48 680.922 L1797.92 680.922 L1797.36 680.922 L1796.8 680.922 L1796.25 680.922 L1795.69 680.922 L1795.13 680.922 L1794.57 680.922 L1794.01 680.922 L1793.45 680.922 L1792.89 680.922 L1792.33 680.922 L1791.77 680.922 L1791.21 680.922 L1790.65 680.922 L1790.09 680.922 L1789.53 680.922 L1788.98 680.922 L1788.42 680.922 L1787.86 680.922 L1787.3 680.922 L1786.74 680.922 L1786.18 680.922 L1785.62 680.922 L1785.06 680.922 L1784.5 680.922 L1783.94 680.922 L1783.38 680.922 L1782.82 680.922 L1782.26 680.922 L1781.71 680.922 L1781.15 680.922 L1780.59 680.922 L1780.03 680.922 L1779.47 680.922 L1778.91 680.922 L1778.35 680.922 L1777.79 680.922 L1777.23 680.922 L1776.67 680.922 L1776.11 680.922 L1775.55 680.922 L1774.99 680.922 L1774.43 680.922 L1773.88 680.922 L1773.32 680.922 L1772.76 680.922 L1772.2 680.922 L1771.64 680.922 L1771.08 680.922 L1770.52 680.922 L1769.96 680.922 L1769.4 680.922 L1768.84 680.922 L1768.28 680.922 L1767.72 680.922 L1767.16 680.922 L1766.61 680.922 L1766.05 680.922 L1765.49 680.922 L1764.93 680.922 L1764.37 680.922 L1763.81 680.922 L1763.25 680.922 L1762.69 680.922 L1762.13 680.922 L1761.57 680.922 L1761.01 680.922 L1760.45 680.922 L1759.89 680.922 L1759.34 680.922 L1758.78 680.922 L1758.22 680.922 L1757.66 680.922 L1757.1 680.922 L1756.54 680.922 L1755.98 680.922 L1755.42 680.922 L1754.86 680.922 L1754.3 680.922 L1753.74 680.922 L1753.18 680.922 L1752.62 680.922 L1752.06 680.922 L1751.51 680.922 L1750.95 680.922 L1750.39 680.922 L1749.83 680.922 L1749.27 680.922 L1748.71 680.922 L1748.15 680.922 L1747.59 680.922 L1747.03 680.922 L1746.47 680.922 L1745.91 680.922 L1745.35 680.922 L1744.79 680.922 L1744.24 680.922 L1743.68 680.922 L1743.12 680.922 L1742.56 680.922 L1742 680.922 L1741.44 680.922 L1740.88 680.922 L1740.32 680.922 L1739.76 680.922 L1739.2 680.922 L1738.64 680.922 L1738.08 680.922 L1737.52 680.922 L1736.97 680.922 L1736.41 680.922 L1735.85 680.922 L1735.29 680.922 L1734.73 680.922 L1734.17 680.922 L1733.61 680.922 L1733.05 680.922 L1732.49 680.922 L1731.93 680.922 L1731.37 680.922 L1730.81 680.922 L1730.25 680.922 L1729.69 680.922 L1729.14 680.922 L1728.58 680.922 L1728.02 680.922 L1727.46 680.922 L1726.9 680.922 L1726.34 680.922 L1725.78 680.922 L1725.22 680.922 L1724.66 680.922 L1724.1 680.922 L1723.54 680.922 L1722.98 680.922 L1722.42 680.922 L1721.87 680.922 L1721.31 680.922 L1720.75 680.922 L1720.19 680.922 L1719.63 680.922 L1719.07 680.922 L1718.51 680.922 L1717.95 680.922 L1717.39 680.922 L1716.83 680.922 L1716.27 680.922 L1715.71 680.922 L1715.15 680.922 L1714.6 680.922 L1714.04 680.922 L1713.48 680.922 L1712.92 680.922 L1712.36 680.922 L1711.8 680.922 L1711.24 680.922 L1710.68 680.922 L1710.12 680.922 L1709.56 680.922 L1709 680.922 L1708.44 680.922 L1707.88 680.922 L1707.32 680.922 L1706.77 680.922 L1706.21 680.922 L1705.65 680.922 L1705.09 680.922 L1704.53 680.922 L1703.97 680.922 L1703.41 680.922 L1702.85 680.922 L1702.29 680.922 L1701.73 680.922 L1701.17 680.922 L1700.61 680.922 L1700.05 680.922 L1699.5 680.922 L1698.94 680.922 L1698.38 680.922 L1697.82 680.922 L1697.26 680.922 L1696.7 680.922 L1696.14 680.922 L1695.58 680.922 L1695.02 680.922 L1694.46 680.922 L1693.9 680.922 L1693.34 680.922 L1692.78 680.922 L1692.23 680.922 L1691.67 680.922 L1691.11 680.922 L1690.55 680.922 L1689.99 680.922 L1689.43 680.922 L1688.87 680.922 L1688.31 680.922 L1687.75 680.922 L1687.19 680.922 L1686.63 680.922 L1686.07 680.922 L1685.51 680.922 L1684.95 680.922 L1684.4 680.922 L1683.84 680.922 L1683.28 680.922 L1682.72 680.922 L1682.16 680.922 L1681.6 680.922 L1681.04 680.922 L1680.48 680.922 L1679.92 680.922 L1679.36 680.922 L1678.8 680.922 L1678.24 680.922 L1677.68 680.922 L1677.13 680.922 L1676.57 680.922 L1676.01 680.922 L1675.45 680.922 L1674.89 680.922 L1674.33 680.922 L1673.77 680.922 L1673.21 680.922 L1672.65 680.922 L1672.09 680.922 L1671.53 680.922 L1670.97 680.922 L1670.41 680.922 L1669.85 680.922 L1669.3 680.922 L1668.74 680.922 L1668.18 680.922 L1667.62 680.922 L1667.06 680.922 L1666.5 680.922 L1665.94 680.922 L1665.38 680.922 L1664.82 680.922 L1664.26 680.922 L1663.7 680.922 L1663.14 680.922 L1662.58 680.922 L1662.03 680.922 L1661.47 680.922 L1660.91 680.922 L1660.35 680.922 L1659.79 680.922 L1659.23 680.922 L1658.67 680.922 L1658.11 680.922 L1657.55 680.922 L1656.99 680.922 L1656.43 680.922 L1655.87 680.922 L1655.31 680.922 L1654.76 680.922 L1654.2 680.922 L1653.64 680.922 L1653.08 680.922 L1652.52 680.922 L1651.96 680.922 L1651.4 680.922 L1650.84 680.922 L1650.28 680.922 L1649.72 680.922 L1649.16 680.922 L1648.6 680.922 L1648.04 680.922 L1647.48 680.922 L1646.93 680.922 L1646.37 680.922 L1645.81 680.922 L1645.25 680.922 L1644.69 680.922 L1644.13 680.922 L1643.57 680.922 L1643.01 680.922 L1642.45 680.922 L1641.89 680.922 L1641.33 680.922 L1640.77 680.922 L1640.21 680.922 L1639.66 680.922 L1639.1 680.922 L1638.54 680.922 L1637.98 680.922 L1637.42 680.922 L1636.86 680.922 L1636.3 680.922 L1635.74 680.922 L1635.18 680.922 L1634.62 680.922 L1634.06 680.922 L1633.5 680.922 L1632.94 680.922 L1632.39 680.922 L1631.83 680.922 L1631.27 680.922 L1630.71 680.922 L1630.15 680.922 L1629.59 680.922 L1629.03 680.922 L1628.47 680.922 L1627.91 680.922 L1627.35 680.922 L1626.79 680.922 L1626.23 680.922 L1625.67 680.922 L1625.11 680.922 L1624.56 680.922 L1624 680.922 L1623.44 680.922 L1622.88 680.922 L1622.32 680.922 L1621.76 680.922 L1621.2 680.922 L1620.64 680.922 L1620.08 680.922 L1619.52 680.922 L1618.96 680.922 L1618.4 680.922 L1617.84 680.922 L1617.29 680.922 L1616.73 680.922 L1616.17 680.922 L1615.61 680.922 L1615.05 680.922 L1614.49 680.922 L1613.93 680.922 L1613.37 680.922 L1612.81 680.922 L1612.25 680.922 L1611.69 680.922 L1611.13 680.922 L1610.57 680.922 L1610.02 680.922 L1609.46 680.922 L1608.9 680.922 L1608.34 680.922 L1607.78 680.922 L1607.22 680.922 L1606.66 680.922 L1606.1 680.922 L1605.54 680.922 L1604.98 680.922 L1604.42 680.922 L1603.86 680.922 L1603.3 680.922 L1602.74 680.922 L1602.19 680.922 L1601.63 680.922 L1601.07 680.922 L1600.51 680.922 L1599.95 680.922 L1599.39 680.922 L1598.83 680.922 L1598.27 680.922 L1597.71 680.922 L1597.15 680.922 L1596.59 680.922 L1596.03 680.922 L1595.47 680.922 L1594.92 680.922 L1594.36 680.922 L1593.8 680.922 L1593.24 680.922 L1592.68 680.922 L1592.12 680.922 L1591.56 680.922 L1591 680.922 L1590.44 680.922 L1589.88 680.922 L1589.32 680.922 L1588.76 680.922 L1588.2 680.922 L1587.65 680.922 L1587.09 680.922 L1586.53 680.922 L1585.97 680.922 L1585.41 680.922 L1584.85 680.922 L1584.29 680.922 L1583.73 680.922 L1583.17 680.922 L1582.61 680.922 L1582.05 680.922 L1581.49 680.922 L1580.93 680.922 L1580.37 680.922 L1579.82 680.922 L1579.26 680.922 L1578.7 680.922 L1578.14 680.922 L1577.58 680.922 L1577.02 680.922 L1576.46 680.922 L1575.9 680.922 L1575.34 680.922 L1574.78 680.922 L1574.22 680.922 L1573.66 680.922 L1573.1 680.922 L1572.55 680.922 L1571.99 680.922 L1571.43 680.922 L1570.87 680.922 L1570.31 680.922 L1569.75 680.922 L1569.19 680.922 L1568.63 680.922 L1568.07 680.922 L1567.51 680.922 L1566.95 680.922 L1566.39 680.922 L1565.83 680.922 L1565.28 680.922 L1564.72 680.922 L1564.16 680.922 L1563.6 680.922 L1563.04 680.922 L1562.48 680.922 L1561.92 680.922 L1561.36 680.922 L1560.8 680.922 L1560.24 680.922 L1559.68 680.922 L1559.12 680.922 L1558.56 680.922 L1558 680.922 L1557.45 680.922 L1556.89 680.922 L1556.33 680.922 L1555.77 680.922 L1555.21 680.922 L1554.65 680.922 L1554.09 680.922 L1553.53 680.922 L1552.97 680.922 L1552.41 680.922 L1551.85 680.922 L1551.29 680.922 L1550.73 680.922 L1550.18 680.922 L1549.62 680.922 L1549.06 680.922 L1548.5 680.922 L1547.94 680.922 L1547.38 680.922 L1546.82 680.922 L1546.26 680.922 L1545.7 680.922 L1545.14 680.922 L1544.58 680.922 L1544.02 680.922 L1543.46 680.922 L1542.9 680.922 L1542.35 680.922 L1541.79 680.922 L1541.23 680.922 L1540.67 680.922 L1540.11 680.922 L1539.55 680.922 L1538.99 680.922 L1538.43 680.922 L1537.87 680.922 L1537.31 680.922 L1536.75 680.922 L1536.19 680.922 L1535.63 680.922 L1535.08 680.922 L1534.52 680.922 L1533.96 680.922 L1533.4 680.922 L1532.84 680.922 L1532.28 680.922 L1531.72 680.922 L1531.16 680.922 L1530.6 680.922 L1530.04 680.922 L1529.48 680.922 L1528.92 680.922 L1528.36 680.922 L1527.81 680.922 L1527.25 680.922 L1526.69 680.922 L1526.13 680.922 L1525.57 680.922 L1525.01 680.922 L1524.45 680.922 L1523.89 680.922 L1523.33 680.922 L1522.77 680.922 L1522.21 680.922 L1521.65 680.922 L1521.09 680.922 L1520.53 680.922 L1519.98 680.922 L1519.42 680.922 L1518.86 680.922 L1518.3 680.922 L1517.74 680.922 L1517.18 680.922 L1516.62 680.922 L1516.06 680.922 L1515.5 680.922 L1514.94 680.922 L1514.38 680.922 L1513.82 680.922 L1513.26 680.922 L1512.71 680.922 L1512.15 680.922 L1511.59 680.922 L1511.03 680.922 L1510.47 680.922 L1509.91 680.922 L1509.35 680.922 L1508.79 680.922 L1508.23 680.922 L1507.67 680.922 L1507.11 680.922 L1506.55 680.922 L1505.99 680.922 L1505.44 680.922 L1504.88 680.922 L1504.32 680.922 L1503.76 680.922 L1503.2 680.922 L1502.64 680.922 L1502.08 680.922 L1501.52 680.922 L1500.96 680.922 L1500.4 680.922 L1499.84 680.922 L1499.28 680.922 L1498.72 680.922 L1498.16 680.922 L1497.61 680.922 L1497.05 680.922 L1496.49 680.922 L1495.93 680.922 L1495.37 680.922 L1494.81 680.922 L1494.25 680.922 L1493.69 680.922 L1493.13 680.922 L1492.57 680.922 L1492.01 680.922 L1491.45 680.922 L1490.89 680.922 L1490.34 680.922 L1489.78 680.922 L1489.22 680.922 L1488.66 680.922 L1488.1 680.922 L1487.54 680.922 L1486.98 680.922 L1486.42 680.922 L1485.86 680.922 L1485.3 680.922 L1484.74 680.922 L1484.18 680.922 L1483.62 680.922 L1483.07 680.922 L1482.51 680.922 L1481.95 680.922 L1481.39 680.922 L1480.83 680.922 L1480.27 680.922 L1479.71 680.922 L1479.15 680.922 L1478.59 680.922 L1478.03 680.922 L1477.47 680.922 L1476.91 680.922 L1476.35 680.922 L1475.79 680.922 L1475.24 680.922 L1474.68 680.922 L1474.12 680.922 L1473.56 680.922 L1473 680.922 L1472.44 680.922 L1471.88 680.922 L1471.32 680.922 L1470.76 680.922 L1470.2 680.922 L1469.64 680.922 L1469.08 680.922 L1468.52 680.922 L1467.97 680.922 L1467.41 680.922 L1466.85 680.922 L1466.29 680.922 L1465.73 680.922 L1465.17 680.922 L1464.61 680.922 L1464.05 680.922 L1463.49 680.922 L1462.93 680.922 L1462.37 680.922 L1461.81 680.922 L1461.25 680.922 L1460.7 680.922 L1460.14 680.922 L1459.58 680.922 L1459.02 680.922 L1458.46 680.922 L1457.9 680.922 L1457.34 680.922 L1456.78 680.922 L1456.22 680.922 L1455.66 680.922 L1455.1 680.922 L1454.54 680.922 L1453.98 680.922 L1453.42 680.922 L1452.87 680.922 L1452.31 680.922 L1451.75 680.922 L1451.19 680.922 L1450.63 680.922 L1450.07 680.922 L1449.51 680.922 L1448.95 680.922 L1448.39 680.922 L1447.83 680.922 L1447.27 680.922 L1446.71 680.922 L1446.15 680.922 L1445.6 680.922 L1445.04 680.922 L1444.48 680.922 L1443.92 680.922 L1443.36 680.922 L1442.8 680.922 L1442.24 680.922 L1441.68 680.922 L1441.12 680.922 L1440.56 680.922 L1440 680.922 L1439.44 680.922 L1438.88 680.922 L1438.33 680.922 L1437.77 680.922 L1437.21 680.922 L1436.65 680.922 L1436.09 680.922 L1435.53 680.922 L1434.97 680.922 L1434.41 680.922 L1433.85 680.922 L1433.29 680.922 L1432.73 680.922 L1432.17 680.922 L1431.61 680.922 L1431.05 680.922 L1430.5 680.922 L1429.94 680.922 L1429.38 680.922 L1428.82 680.922 L1428.26 680.922 L1427.7 680.922 L1427.14 680.922 L1426.58 680.922 L1426.02 680.922 L1425.46 680.922 L1424.9 680.922 L1424.34 680.922 L1423.78 680.922 L1423.23 680.922 L1422.67 680.922 L1422.11 680.922 L1421.55 680.922 L1420.99 680.922 L1420.43 680.922 L1419.87 680.922 L1419.31 680.922 L1418.75 680.922 L1418.19 680.922 L1417.63 680.922 L1417.07 680.922 L1416.51 680.922 L1415.95 680.922 L1415.4 680.922 L1414.84 680.922 L1414.28 680.922 L1413.72 680.922 L1413.16 680.922 L1412.6 680.922 L1412.04 680.922 L1411.48 680.922 L1410.92 680.922 L1410.36 680.922 L1409.8 680.922 L1409.24 680.922 L1408.68 680.922 L1408.13 680.922 L1407.57 680.922 L1407.01 680.922 L1406.45 680.922 L1405.89 680.922 L1405.33 680.922 L1404.77 680.922 L1404.21 680.922 L1403.65 680.922 L1403.09 680.922 L1402.53 680.922 L1401.97 680.922 L1401.41 680.922 L1400.86 680.922 L1400.3 680.922 L1399.74 680.922 L1399.18 680.922 L1398.62 680.922 L1398.06 680.922 L1397.5 680.922 L1396.94 680.922 L1396.38 680.922 L1395.82 680.922 L1395.26 680.922 L1394.7 680.922 L1394.14 680.922 L1393.58 680.922 L1393.03 680.922 L1392.47 680.922 L1391.91 680.922 L1391.35 680.922 L1390.79 680.922 L1390.23 680.922 L1389.67 680.922 L1389.11 680.922 L1388.55 680.922 L1387.99 680.922 L1387.43 680.922 L1386.87 680.922 L1386.31 680.922 L1385.76 680.922 L1385.2 680.922 L1384.64 680.922 L1384.08 680.922 L1383.52 680.922 L1382.96 680.922 L1382.4 680.922 L1381.84 680.922 L1381.28 680.922 L1380.72 680.922 L1380.16 680.922 L1379.6 680.922 L1379.04 680.922 L1378.49 680.922 L1377.93 680.922 L1377.37 680.922 L1376.81 680.922 L1376.25 680.922 L1375.69 680.922 L1375.13 680.922 L1374.57 680.922 L1374.01 680.922 L1373.45 680.922 L1372.89 680.922 L1372.33 680.922 L1371.77 680.922 L1371.21 680.922 L1370.66 680.922 L1370.1 680.922 L1369.54 680.922 L1368.98 680.922 L1368.42 680.922 L1367.86 680.922 L1367.3 680.922 L1366.74 680.922 L1366.18 680.922 L1365.62 680.922 L1365.06 680.922 L1364.5 680.922 L1363.94 680.922 L1363.39 680.922 L1362.83 680.922 L1362.27 680.922 L1361.71 680.922 L1361.15 680.922 L1360.59 680.922 L1360.03 680.922 L1359.47 680.922 L1358.91 680.922 L1358.35 680.922 L1357.79 680.922 L1357.23 680.922 L1356.67 680.922 L1356.12 680.922 L1355.56 680.922 L1355 680.922 L1354.44 680.922 L1353.88 680.922 L1353.32 680.922 L1352.76 680.922 L1352.2 680.922 L1351.64 680.922 L1351.08 680.922 L1350.52 680.922 L1349.96 680.922 L1349.4 680.922 L1348.84 680.922 L1348.29 680.922 L1347.73 680.922 L1347.17 680.922 L1346.61 680.922 L1346.05 680.922 L1345.49 680.922 L1344.93 680.922 L1344.37 680.922 L1343.81 680.922 L1343.25 680.922 L1342.69 680.922 L1342.13 680.922 L1341.57 680.922 L1341.02 680.922 L1340.46 680.922 L1339.9 680.922 L1339.34 680.922 L1338.78 680.922 L1338.22 680.922 L1337.66 680.922 L1337.1 680.922 L1336.54 680.922 L1335.98 680.922 L1335.42 680.922 L1334.86 680.922 L1334.3 680.922 L1333.75 680.922 L1333.19 680.922 L1332.63 680.922 L1332.07 680.922 L1331.51 680.922 L1330.95 680.922 L1330.39 680.922 L1329.83 680.922 L1329.27 680.922 L1328.71 680.922 L1328.15 680.922 L1327.59 680.922 L1327.03 680.922 L1326.47 680.922 L1325.92 680.922 L1325.36 680.922 L1324.8 680.922 L1324.24 680.922 L1323.68 680.922 L1323.12 680.922 L1322.56 680.922 L1322 680.922 L1321.44 680.922 L1320.88 680.922 L1320.32 680.922 L1319.76 680.922 L1319.2 680.922 L1318.65 680.922 L1318.09 680.922 L1317.53 680.922 L1316.97 680.922 L1316.41 680.922 L1315.85 680.922 L1315.29 680.922 L1314.73 680.922 L1314.17 680.922 L1313.61 680.922 L1313.05 680.922 L1312.49 680.922 L1311.93 680.922 L1311.38 680.922 L1310.82 680.922 L1310.26 680.922 L1309.7 680.922 L1309.14 680.922 L1308.58 680.922 L1308.02 680.922 L1307.46 680.922 L1306.9 680.922 L1306.34 680.922 L1305.78 680.922 L1305.22 680.922 L1304.66 680.922 L1304.1 680.922 L1303.55 680.922 L1302.99 680.922 L1302.43 680.922 L1301.87 680.922 L1301.31 680.922 L1300.75 680.922 L1300.19 680.922 L1299.63 680.922 L1299.07 680.922 L1298.51 680.922 L1297.95 680.922 L1297.39 680.922 L1296.83 680.922 L1296.28 680.922 L1295.72 680.922 L1295.16 680.922 L1294.6 680.922 L1294.04 680.922 L1293.48 680.922 L1292.92 680.922 L1292.36 680.922 L1291.8 680.922 L1291.24 680.922 L1290.68 680.922 L1290.12 680.922 L1289.56 680.922 L1289 680.922 L1288.45 680.922 L1287.89 680.922 L1287.33 680.922 L1286.77 680.922 L1286.21 680.922 L1285.65 680.922 L1285.09 680.922 L1284.53 680.922 L1283.97 680.922 L1283.41 680.922 L1282.85 680.922 L1282.29 680.922 L1281.73 680.922 L1281.18 680.922 L1280.62 680.922 L1280.06 680.922 L1279.5 680.922 L1278.94 680.922 L1278.38 680.922 L1277.82 680.922 L1277.26 680.922 L1276.7 680.922 L1276.14 680.922 L1275.58 680.922 L1275.02 680.922 L1274.46 680.922 L1273.91 680.922 L1273.35 680.922 L1272.79 680.922 L1272.23 680.922 L1271.67 680.922 L1271.11 680.922 L1270.55 680.922 L1269.99 680.922 L1269.43 680.922 L1268.87 680.922 L1268.31 680.922 L1267.75 680.922 L1267.19 680.922 L1266.63 680.922 L1266.08 680.922 L1265.52 680.922 L1264.96 680.922 L1264.4 680.922 L1263.84 680.922 L1263.28 680.922 L1262.72 680.922 L1262.16 680.922 L1261.6 680.922 L1261.04 680.922 L1260.48 680.922 L1259.92 680.922 L1259.36 680.922 L1258.81 680.922 L1258.25 680.922 L1257.69 680.922 L1257.13 680.922 L1256.57 680.922 L1256.01 680.922 L1255.45 680.922 L1254.89 680.922 L1254.33 680.922 L1253.77 680.922 L1253.21 680.922 L1252.65 680.922 L1252.09 680.922 L1251.54 680.922 L1250.98 680.922 L1250.42 680.922 L1249.86 680.922 L1249.3 680.922 L1248.74 680.922 L1248.18 680.922 L1247.62 680.922 L1247.06 680.922 L1246.5 680.922 L1245.94 680.922 L1245.38 680.922 L1244.82 680.922 L1244.26 680.922 L1243.71 680.922 L1243.15 680.922 L1242.59 680.922 L1242.03 680.922 L1241.47 680.922 L1240.91 680.922 L1240.35 680.922 L1239.79 680.922 L1239.23 680.922 L1238.67 680.922 L1238.11 680.922 L1237.55 680.922 L1236.99 680.922 L1236.44 680.922 L1235.88 680.922 L1235.32 680.922 L1234.76 680.922 L1234.2 680.922 L1233.64 680.922 L1233.08 680.922 L1232.52 680.922 L1231.96 680.922 L1231.4 680.922 L1230.84 680.922 L1230.28 680.922 L1229.72 680.922 L1229.17 680.922 L1228.61 680.922 L1228.05 680.922 L1227.49 680.922 L1226.93 680.922 L1226.37 680.922 L1225.81 680.922 L1225.25 680.922 L1224.69 680.922 L1224.13 680.922 L1223.57 680.922 L1223.01 680.922 L1222.45 680.922 L1221.89 680.922 L1221.34 680.922 L1220.78 680.922 L1220.22 680.922 L1219.66 680.922 L1219.1 680.922 L1218.54 680.922 L1217.98 680.922 L1217.42 680.922 L1216.86 680.922 L1216.3 680.922 L1215.74 680.922 L1215.18 680.922 L1214.62 680.922 L1214.07 680.922 L1213.51 680.922 L1212.95 680.922 L1212.39 680.922 L1211.83 680.922 L1211.27 680.922 L1210.71 680.922 L1210.15 680.922 L1209.59 680.922 L1209.03 680.922 L1208.47 680.922 L1207.91 680.922 L1207.35 680.922 L1206.8 680.922 L1206.24 680.922 L1205.68 680.922 L1205.12 680.922 L1204.56 680.922 L1204 680.922 L1203.44 680.922 L1202.88 680.922 L1202.32 680.922 L1201.76 680.922 L1201.2 680.922 L1200.64 680.922 L1200.08 680.922 L1199.52 680.922 L1198.97 680.922 L1198.41 680.922 L1197.85 680.922 L1197.29 680.922 L1196.73 680.922 L1196.17 680.922 L1195.61 680.922 L1195.05 680.922 L1194.49 680.922 L1193.93 680.922 L1193.37 680.922 L1192.81 680.922 L1192.25 680.922 L1191.7 680.922 L1191.14 680.922 L1190.58 680.922 L1190.02 680.922 L1189.46 680.922 L1188.9 680.922 L1188.34 680.922 L1187.78 680.922 L1187.22 680.922 L1186.66 680.922 L1186.1 680.922 L1185.54 680.922 L1184.98 680.922 L1184.43 680.922 L1183.87 680.922 L1183.31 680.922 L1182.75 680.922 L1182.19 680.922 L1181.63 680.922 L1181.07 680.922 L1180.51 680.922 L1179.95 680.922 L1179.39 680.922 L1178.83 680.922 L1178.27 680.922 L1177.71 680.922 L1177.15 680.922 L1176.6 680.922 L1176.04 680.922 L1175.48 680.922 L1174.92 680.922 L1174.36 680.922 L1173.8 680.922 L1173.24 680.922 L1172.68 680.922 L1172.12 680.922 L1171.56 680.922 L1171 680.922 L1170.44 680.922 L1169.88 680.922 L1169.33 680.922 L1168.77 680.922 L1168.21 680.922 L1167.65 680.922 L1167.09 680.922 L1166.53 680.922 L1165.97 680.922 L1165.41 680.922 L1164.85 680.922 L1164.29 680.922 L1163.73 680.922 L1163.17 680.922 L1162.61 680.922 L1162.05 680.922 L1161.5 680.922 L1160.94 680.922 L1160.38 680.922 L1159.82 680.922 L1159.26 680.922 L1158.7 680.922 L1158.14 680.922 L1157.58 680.922 L1157.02 680.922 L1156.46 680.922 L1155.9 680.922 L1155.34 680.922 L1154.78 680.922 L1154.23 680.922 L1153.67 680.922 L1153.11 680.922 L1152.55 680.922 L1151.99 680.922 L1151.43 680.922 L1150.87 680.922 L1150.31 680.922 L1149.75 680.922 L1149.19 680.922 L1148.63 680.922 L1148.07 680.922 L1147.51 680.922 L1146.96 680.922 L1146.4 680.922 L1145.84 680.922 L1145.28 680.922 L1144.72 680.922 L1144.16 680.922 L1143.6 680.922 L1143.04 680.922 L1142.48 680.922 L1141.92 680.922 L1141.36 680.922 L1140.8 680.922 L1140.24 680.922 L1139.68 680.922 L1139.13 680.922 L1138.57 680.922 L1138.01 680.922 L1137.45 680.922 L1136.89 680.922 L1136.33 680.922 L1135.77 680.922 L1135.21 680.922 L1134.65 680.922 L1134.09 680.922 L1133.53 680.922 L1132.97 680.922 L1132.41 680.922 L1131.86 680.922 L1131.3 680.922 L1130.74 680.922 L1130.18 680.922 L1129.62 680.922 L1129.06 680.922 L1128.5 680.922 L1127.94 680.922 L1127.38 680.922 L1126.82 680.922 L1126.26 680.922 L1125.7 680.922 L1125.14 680.922 L1124.59 680.922 L1124.03 680.922 L1123.47 680.922 L1122.91 680.922 L1122.35 680.922 L1121.79 680.922 L1121.23 680.922 L1120.67 680.922 L1120.11 680.922 L1119.55 680.922 L1118.99 680.922 L1118.43 680.922 L1117.87 680.922 L1117.31 680.922 L1116.76 680.922 L1116.2 680.922 L1115.64 680.922 L1115.08 680.922 L1114.52 680.922 L1113.96 680.922 L1113.4 680.922 L1112.84 680.922 L1112.28 680.922 L1111.72 680.922 L1111.16 680.922 L1110.6 680.922 L1110.04 680.922 L1109.49 680.922 L1108.93 680.922 L1108.37 680.922 L1107.81 680.922 L1107.25 680.922 L1106.69 680.922 L1106.13 680.922 L1105.57 680.922 L1105.01 680.922 L1104.45 680.922 L1103.89 680.922 L1103.33 680.922 L1102.77 680.922 L1102.22 680.922 L1101.66 680.922 L1101.1 680.922 L1100.54 680.922 L1099.98 680.922 L1099.42 680.922 L1098.86 680.922 L1098.3 680.922 L1097.74 680.922 L1097.18 680.922 L1096.62 680.922 L1096.06 680.922 L1095.5 680.922 L1094.94 680.922 L1094.39 680.922 L1093.83 680.922 L1093.27 680.922 L1092.71 680.922 L1092.15 680.922 L1091.59 680.922 L1091.03 680.922 L1090.47 680.922 L1089.91 680.922 L1089.35 680.922 L1088.79 680.922 L1088.23 680.922 L1087.67 680.922 L1087.12 680.922 L1086.56 680.922 L1086 680.922 L1085.44 680.922 L1084.88 680.922 L1084.32 680.922 L1083.76 680.922 L1083.2 680.922 L1082.64 680.922 L1082.08 680.922 L1081.52 680.922 L1080.96 680.922 L1080.4 680.922 L1079.85 680.922 L1079.29 680.922 L1078.73 680.922 L1078.17 680.922 L1077.61 680.922 L1077.05 680.922 L1076.49 680.922 L1075.93 680.922 L1075.37 680.922 L1074.81 680.922 L1074.25 680.922 L1073.69 680.922 L1073.13 680.922 L1072.57 680.922 L1072.02 680.922 L1071.46 680.922 L1070.9 680.922 L1070.34 680.922 L1069.78 680.922 L1069.22 680.922 L1068.66 680.922 L1068.1 680.922 L1067.54 680.922 L1066.98 680.922 L1066.42 680.922 L1065.86 680.922 L1065.3 680.922 L1064.75 680.922 L1064.19 680.922 L1063.63 680.922 L1063.07 680.922 L1062.51 680.922 L1061.95 680.922 L1061.39 680.922 L1060.83 680.922 L1060.27 680.922 L1059.71 680.922 L1059.15 680.922 L1058.59 680.922 L1058.03 680.922 L1057.48 680.922 L1056.92 680.922 L1056.36 680.922 L1055.8 680.922 L1055.24 680.922 L1054.68 680.922 L1054.12 680.922 L1053.56 680.922 L1053 680.922 L1052.44 680.922 L1051.88 680.922 L1051.32 680.922 L1050.76 680.922 L1050.2 680.922 L1049.65 680.922 L1049.09 680.922 L1048.53 680.922 L1047.97 680.922 L1047.41 680.922 L1046.85 680.922 L1046.29 680.922 L1045.73 680.922 L1045.17 680.922 L1044.61 680.922 L1044.05 680.922 L1043.49 680.922 L1042.93 680.922 L1042.38 680.922 L1041.82 680.922 L1041.26 680.922 L1040.7 680.922 L1040.14 680.922 L1039.58 680.922 L1039.02 680.922 L1038.46 680.922 L1037.9 680.922 L1037.34 680.922 L1036.78 680.922 L1036.22 680.922 L1035.66 680.922 L1035.1 680.922 L1034.55 680.922 L1033.99 680.922 L1033.43 680.922 L1032.87 680.922 L1032.31 680.922 L1031.75 680.922 L1031.19 680.922 L1030.63 680.922 L1030.07 680.922 L1029.51 680.922 L1028.95 680.922 L1028.39 680.922 L1027.83 680.922 L1027.28 680.922 L1026.72 680.922 L1026.16 680.922 L1025.6 680.922 L1025.04 680.922 L1024.48 680.922 L1023.92 680.922 L1023.36 680.922 L1022.8 680.922 L1022.24 680.922 L1021.68 680.922 L1021.12 680.922 L1020.56 680.922 L1020.01 680.922 L1019.45 680.922 L1018.89 680.922 L1018.33 680.922 L1017.77 680.922 L1017.21 680.922 L1016.65 680.922 L1016.09 680.922 L1015.53 680.922 L1014.97 680.922 L1014.41 680.922 L1013.85 680.922 L1013.29 680.922 L1012.73 680.922 L1012.18 680.922 L1011.62 680.922 L1011.06 680.922 L1010.5 680.922 L1009.94 680.922 L1009.38 680.922 L1008.82 680.922 L1008.26 680.922 L1007.7 680.922 L1007.14 680.922 L1006.58 680.922 L1006.02 680.922 L1005.46 680.922 L1004.91 680.922 L1004.35 680.922 L1003.79 680.922 L1003.23 680.922 L1002.67 680.922 L1002.11 680.922 L1001.55 680.922 L1000.99 680.922 L1000.43 680.922 L999.872 680.922 L999.313 680.922 L998.754 680.922 L998.194 680.922 L997.635 680.922 L997.076 680.922 L996.517 680.922 L995.957 680.922 L995.398 680.922 L994.839 680.922 L994.28 680.922 L993.72 680.922 L993.161 680.922 L992.602 680.922 L992.043 680.922 L991.483 680.922 L990.924 680.922 L990.365 680.922 L989.806 680.922 L989.246 680.922 L988.687 680.922 L988.128 680.922 L987.569 680.922 L987.009 680.922 L986.45 680.922 L985.891 680.922 L985.332 680.922 L984.772 680.922 L984.213 680.922 L983.654 680.922 L983.095 680.922 L982.535 680.922 L981.976 680.922 L981.417 680.922 L980.858 680.922 L980.298 680.922 L979.739 680.922 L979.18 680.922 L978.621 680.922 L978.061 680.922 L977.502 680.922 L976.943 680.922 L976.384 680.922 L975.824 680.922 L975.265 680.922 L974.706 680.922 L974.147 680.922 L973.587 680.922 L973.028 680.922 L972.469 680.922 L971.91 680.922 L971.35 680.922 L970.791 680.922 L970.232 680.922 L969.673 680.922 L969.113 680.922 L968.554 680.922 L967.995 680.922 L967.436 680.922 L966.876 680.922 L966.317 680.922 L965.758 680.922 L965.199 680.922 L964.639 680.922 L964.08 680.922 L963.521 680.922 L962.962 680.922 L962.402 680.922 L961.843 680.922 L961.284 680.922 L960.725 680.922 L960.165 680.922 L959.606 680.922 L959.047 680.922 L958.488 680.922 L957.928 680.922 L957.369 680.922 L956.81 680.922 L956.251 680.922 L955.691 680.922 L955.132 680.922 L954.573 680.922 L954.014 680.922 L953.454 680.922 L952.895 680.922 L952.336 680.922 L951.777 680.922 L951.217 680.922 L950.658 680.922 L950.099 680.922 L949.54 680.922 L948.98 680.922 L948.421 680.922 L947.862 680.922 L947.303 680.922 L946.743 680.922 L946.184 680.922 L945.625 680.922 L945.066 680.922 L944.506 680.922 L943.947 680.922 L943.388 680.922 L942.829 680.922 L942.269 680.922 L941.71 680.922 L941.151 680.922 L940.592 680.922 L940.032 680.922 L939.473 680.922 L938.914 680.922 L938.355 680.922 L937.795 680.922 L937.236 680.922 L936.677 680.922 L936.118 680.922 L935.558 680.922 L934.999 680.922 L934.44 680.922 L933.881 680.922 L933.321 680.922 L932.762 680.922 L932.203 680.922 L931.644 680.922 L931.084 680.922 L930.525 680.922 L929.966 680.922 L929.406 680.922 L928.847 680.922 L928.288 680.922 L927.729 680.922 L927.169 680.922 L926.61 680.922 L926.051 680.922 L925.492 680.922 L924.932 680.922 L924.373 680.922 L923.814 680.922 L923.255 680.922 L922.695 680.922 L922.136 680.922 L921.577 680.922 L921.018 680.922 L920.458 680.922 L919.899 680.922 L919.34 680.922 L918.781 680.922 L918.221 680.922 L917.662 680.922 L917.103 680.922 L916.544 680.922 L915.984 680.922 L915.425 680.922 L914.866 680.922 L914.307 680.922 L913.747 680.922 L913.188 680.922 L912.629 680.922 L912.07 680.922 L911.51 680.922 L910.951 680.922 L910.392 680.922 L909.833 680.922 L909.273 680.922 L908.714 680.922 L908.155 680.922 L907.596 680.922 L907.036 680.922 L906.477 680.922 L905.918 680.922 L905.359 680.922 L904.799 680.922 L904.24 680.922 L903.681 680.922 L903.122 680.922 L902.562 680.922 L902.003 680.922 L901.444 680.922 L900.885 680.922 L900.325 680.922 L899.766 680.922 L899.207 680.922 L898.648 680.922 L898.088 680.922 L897.529 680.922 L896.97 680.922 L896.411 680.922 L895.851 680.922 L895.292 680.922 L894.733 680.922 L894.174 680.922 L893.614 680.922 L893.055 680.922 L892.496 680.922 L891.937 680.922 L891.377 680.922 L890.818 680.922 L890.259 680.922 L889.7 680.922 L889.14 680.922 L888.581 680.922 L888.022 680.922 L887.463 680.922 L886.903 680.922 L886.344 680.922 L885.785 680.922 L885.226 680.922 L884.666 680.922 L884.107 680.922 L883.548 680.922 L882.989 680.922 L882.429 680.922 L881.87 680.922 L881.311 680.922 L880.752 680.922 L880.192 680.922 L879.633 680.922 L879.074 680.922 L878.515 680.922 L877.955 680.922 L877.396 680.922 L876.837 680.922 L876.278 680.922 L875.718 680.922 L875.159 680.922 L874.6 680.922 L874.041 680.922 L873.481 680.922 L872.922 680.922 L872.363 680.922 L871.804 680.922 L871.244 680.922 L870.685 680.922 L870.126 680.922 L869.567 680.922 L869.007 680.922 L868.448 680.922 L867.889 680.922 L867.33 680.922 L866.77 680.922 L866.211 680.922 L865.652 680.922 L865.093 680.922 L864.533 680.922 L863.974 680.922 L863.415 680.922 L862.856 680.922 L862.296 680.922 L861.737 680.922 L861.178 680.922 L860.619 680.922 L860.059 680.922 L859.5 680.922 L858.941 680.922 L858.382 680.922 L857.822 680.922 L857.263 680.922 L856.704 680.922 L856.145 680.922 L855.585 680.922 L855.026 680.922 L854.467 680.922 L853.908 680.922 L853.348 680.922 L852.789 680.922 L852.23 680.922 L851.671 680.922 L851.111 680.922 L850.552 680.922 L849.993 680.922 L849.434 680.922 L848.874 680.922 L848.315 680.922 L847.756 680.922 L847.197 680.922 L846.637 680.922 L846.078 680.922 L845.519 680.922 L844.96 680.922 L844.4 680.922 L843.841 680.922 L843.282 680.922 L842.723 680.922 L842.163 680.922 L841.604 680.922 L841.045 680.922 L840.486 680.922 L839.926 680.922 L839.367 680.922 L838.808 680.922 L838.249 680.922 L837.689 680.922 L837.13 680.922 L836.571 680.922 L836.012 680.922 L835.452 680.922 L834.893 680.922 L834.334 680.922 L833.775 680.922 L833.215 680.922 L832.656 680.922 L832.097 680.922 L831.538 680.922 L830.978 680.922 L830.419 680.922 L829.86 680.922 L829.301 680.922 L828.741 680.922 L828.182 680.922 L827.623 680.922 L827.064 680.922 L826.504 680.922 L825.945 680.922 L825.386 680.922 L824.827 680.922 L824.267 680.922 L823.708 680.922 L823.149 680.922 L822.59 680.922 L822.03 680.922 L821.471 680.922 L820.912 680.922 L820.353 680.922 L819.793 680.922 L819.234 680.922 L818.675 680.922 L818.116 680.922 L817.556 680.922 L816.997 680.922 L816.438 680.922 L815.879 680.922 L815.319 680.922 L814.76 680.922 L814.201 680.922 L813.642 680.922 L813.082 680.922 L812.523 680.922 L811.964 680.922 L811.405 680.922 L810.845 680.922 L810.286 680.922 L809.727 680.922 L809.168 680.922 L808.608 680.922 L808.049 680.922 L807.49 680.922 L806.931 680.922 L806.371 680.922 L805.812 680.922 L805.253 680.922 L804.693 680.922 L804.134 680.922 L803.575 680.922 L803.016 680.922 L802.456 680.922 L801.897 680.922 L801.338 680.922 L800.779 680.922 L800.219 680.922 L799.66 680.922 L799.101 680.922 L798.542 680.922 L797.982 680.922 L797.423 680.922 L796.864 680.922 L796.305 680.922 L795.745 680.922 L795.186 680.922 L794.627 680.922 L794.068 680.922 L793.508 680.922 L792.949 680.922 L792.39 680.922 L791.831 680.922 L791.271 680.922 L790.712 680.922 L790.153 680.922 L789.594 680.922 L789.034 680.922 L788.475 680.922 L787.916 680.922 L787.357 680.922 L786.797 680.922 L786.238 680.922 L785.679 680.922 L785.12 680.922 L784.56 680.922 L784.001 680.922 L783.442 680.922 L782.883 680.922 L782.323 680.922 L781.764 680.922 L781.205 680.922 L780.646 680.922 L780.086 680.922 L779.527 680.922 L778.968 680.922 L778.409 680.922 L777.849 680.922 L777.29 680.922 L776.731 680.922 L776.172 680.922 L775.612 680.922 L775.053 680.922 L774.494 680.922 L773.935 680.922 L773.375 680.922 L772.816 680.922 L772.257 680.922 L771.698 680.922 L771.138 680.922 L770.579 680.922 L770.02 680.922 L769.461 680.922 L768.901 680.922 L768.342 680.922 L767.783 680.922 L767.224 680.922 L766.664 680.922 L766.105 680.922 L765.546 680.922 L764.987 680.922 L764.427 680.922 L763.868 680.922 L763.309 680.922 L762.75 680.922 L762.19 680.922 L761.631 680.922 L761.072 680.922 L760.513 680.922 L759.953 680.922 L759.394 680.922 L758.835 680.922 L758.276 680.922 L757.716 680.922 L757.157 680.922 L756.598 680.922 L756.039 680.922 L755.479 680.922 L754.92 680.922 L754.361 680.922 L753.802 680.922 L753.242 680.922 L752.683 680.922 L752.124 680.922 L751.565 680.922 L751.005 680.922 L750.446 680.922 L749.887 680.922 L749.328 680.922 L748.768 680.922 L748.209 680.922 L747.65 680.922 L747.091 680.922 L746.531 680.922 L745.972 680.922 L745.413 680.922 L744.854 680.922 L744.294 680.922 L743.735 680.922 L743.176 680.922 L742.617 680.922 L742.057 680.922 L741.498 680.922 L740.939 680.922 L740.38 680.922 L739.82 680.922 L739.261 680.922 L738.702 680.922 L738.143 680.922 L737.583 680.922 L737.024 680.922 L736.465 680.922 L735.906 680.922 L735.346 680.922 L734.787 680.922 L734.228 680.922 L733.669 680.922 L733.109 680.922 L732.55 680.922 L731.991 680.922 L731.432 680.922 L730.872 680.922 L730.313 680.922 L729.754 680.922 L729.195 680.922 L728.635 680.922 L728.076 680.922 L727.517 680.922 L726.958 680.922 L726.398 680.922 L725.839 680.922 L725.28 680.922 L724.721 680.922 L724.161 680.922 L723.602 680.922 L723.043 680.922 L722.484 680.922 L721.924 680.922 L721.365 680.922 L720.806 680.922 L720.247 680.922  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.51 720.806,685.51 721.365,685.51 721.924,685.51 722.484,685.51 723.043,685.51 723.602,685.51 724.161,685.51 724.721,685.51 725.28,685.51 725.839,685.51 726.398,685.51 726.958,685.51 727.517,685.51 728.076,685.51 728.635,685.51 729.195,685.51 729.754,685.51 730.313,685.51 730.872,685.51 731.432,685.51 731.991,685.51 732.55,685.51 733.109,685.51 733.669,685.51 734.228,685.51 734.787,685.51 735.346,685.51 735.906,685.51 736.465,685.51 737.024,685.51 737.583,685.51 738.143,685.51 738.702,685.51 739.261,685.51 739.82,685.51 740.38,685.51 740.939,685.51 741.498,685.51 742.057,685.51 742.617,685.51 743.176,685.51 743.735,685.51 744.294,685.51 744.854,685.51 745.413,685.51 745.972,685.51 746.531,685.51 747.091,685.51 747.65,685.51 748.209,685.51 748.768,685.51 749.328,685.51 749.887,685.51 750.446,685.51 751.005,685.51 751.565,685.51 752.124,685.51 752.683,685.51 753.242,685.51 753.802,685.51 754.361,685.51 754.92,685.51 755.479,685.51 756.039,685.51 756.598,685.51 757.157,685.51 757.716,685.51 758.276,685.51 758.835,685.51 759.394,685.51 759.953,685.51 760.513,685.51 761.072,685.51 761.631,685.51 762.19,685.51 762.75,685.51 763.309,685.51 763.868,685.51 764.427,685.51 764.987,685.51 765.546,685.51 766.105,685.51 766.664,685.51 767.224,685.51 767.783,685.51 768.342,685.51 768.901,685.51 769.461,685.51 770.02,685.51 770.579,685.51 771.138,685.51 771.698,685.51 772.257,685.51 772.816,685.51 773.375,685.51 773.935,685.51 774.494,685.51 775.053,685.51 775.612,685.51 776.172,685.51 776.731,685.51 777.29,685.51 777.849,685.51 778.409,685.51 778.968,685.51 779.527,685.51 780.086,685.51 780.646,685.51 781.205,685.51 781.764,685.51 782.323,685.51 782.883,685.51 783.442,685.51 784.001,685.51 784.56,685.51 785.12,685.51 785.679,685.51 786.238,685.51 786.797,685.51 787.357,685.51 787.916,685.51 788.475,685.51 789.034,685.51 789.594,685.51 790.153,685.51 790.712,685.51 791.271,685.51 791.831,685.51 792.39,685.51 792.949,685.51 793.508,685.51 794.068,685.51 794.627,685.51 795.186,685.51 795.745,685.51 796.305,685.51 796.864,685.51 797.423,685.51 797.982,685.51 798.542,685.51 799.101,685.51 799.66,685.51 800.219,685.51 800.779,685.51 801.338,685.51 801.897,685.51 802.456,685.51 803.016,685.51 803.575,685.51 804.134,685.51 804.693,685.51 805.253,685.51 805.812,685.51 806.371,685.51 806.931,685.51 807.49,685.51 808.049,685.51 808.608,685.51 809.168,685.51 809.727,685.51 810.286,685.51 810.845,685.51 811.405,685.51 811.964,685.51 812.523,685.51 813.082,685.51 813.642,685.51 814.201,685.51 814.76,685.51 815.319,685.51 815.879,685.51 816.438,685.51 816.997,685.51 817.556,685.51 818.116,685.51 818.675,685.51 819.234,685.51 819.793,685.51 820.353,685.51 820.912,685.51 821.471,685.51 822.03,685.51 822.59,685.51 823.149,685.51 823.708,685.51 824.267,685.51 824.827,685.51 825.386,685.51 825.945,685.51 826.504,685.51 827.064,685.51 827.623,685.51 828.182,685.51 828.741,685.51 829.301,685.51 829.86,685.51 830.419,685.51 830.978,685.51 831.538,685.51 832.097,685.51 832.656,685.51 833.215,685.51 833.775,685.51 834.334,685.51 834.893,685.51 835.452,685.51 836.012,685.51 836.571,685.51 837.13,685.51 837.689,685.51 838.249,685.51 838.808,685.51 839.367,685.51 839.926,685.51 840.486,685.51 841.045,685.51 841.604,685.51 842.163,685.51 842.723,685.51 843.282,685.51 843.841,685.51 844.4,685.51 844.96,685.51 845.519,685.51 846.078,685.51 846.637,685.51 847.197,685.51 847.756,685.51 848.315,685.51 848.874,685.51 849.434,685.51 849.993,685.51 850.552,685.51 851.111,685.51 851.671,685.51 852.23,685.51 852.789,685.51 853.348,685.51 853.908,685.51 854.467,685.51 855.026,685.51 855.585,685.51 856.145,685.51 856.704,685.51 857.263,685.51 857.822,685.51 858.382,685.51 858.941,685.51 859.5,685.51 860.059,685.51 860.619,685.51 861.178,685.51 861.737,685.51 862.296,685.51 862.856,685.51 863.415,685.51 863.974,685.51 864.533,685.51 865.093,685.51 865.652,685.51 866.211,685.51 866.77,685.51 867.33,685.51 867.889,685.51 868.448,685.51 869.007,685.51 869.567,685.51 870.126,685.51 870.685,685.51 871.244,685.51 871.804,685.51 872.363,685.51 872.922,685.51 873.481,685.51 874.041,685.51 874.6,685.51 875.159,685.51 875.718,685.51 876.278,685.51 876.837,685.51 877.396,685.51 877.955,685.51 878.515,685.51 879.074,685.51 879.633,685.51 880.192,685.51 880.752,685.51 881.311,685.51 881.87,685.51 882.429,685.51 882.989,685.51 883.548,685.51 884.107,685.51 884.666,685.51 885.226,685.51 885.785,685.51 886.344,685.51 886.903,685.51 887.463,685.51 888.022,685.51 888.581,685.51 889.14,685.51 889.7,685.51 890.259,685.51 890.818,685.51 891.377,685.51 891.937,685.51 892.496,685.51 893.055,685.51 893.614,685.51 894.174,685.51 894.733,685.51 895.292,685.51 895.851,685.51 896.411,685.51 896.97,685.51 897.529,685.51 898.088,685.51 898.648,685.51 899.207,685.51 899.766,685.51 900.325,685.51 900.885,685.51 901.444,685.51 902.003,685.51 902.562,685.51 903.122,685.51 903.681,685.51 904.24,685.51 904.799,685.51 905.359,685.51 905.918,685.51 906.477,685.51 907.036,685.51 907.596,685.51 908.155,685.51 908.714,685.51 909.273,685.51 909.833,685.51 910.392,685.51 910.951,685.51 911.51,685.51 912.07,685.51 912.629,685.51 913.188,685.51 913.747,685.51 914.307,685.51 914.866,685.51 915.425,685.51 915.984,685.51 916.544,685.51 917.103,685.51 917.662,685.51 918.221,685.51 918.781,685.51 919.34,685.51 919.899,685.51 920.458,685.51 921.018,685.51 921.577,685.51 922.136,685.51 922.695,685.51 923.255,685.51 923.814,685.51 924.373,685.51 924.932,685.51 925.492,685.51 926.051,685.51 926.61,685.51 927.169,685.51 927.729,685.51 928.288,685.51 928.847,685.51 929.406,685.51 929.966,685.51 930.525,685.51 931.084,685.51 931.644,685.51 932.203,685.51 932.762,685.51 933.321,685.51 933.881,685.51 934.44,685.51 934.999,685.51 935.558,685.51 936.118,685.51 936.677,685.51 937.236,685.51 937.795,685.51 938.355,685.51 938.914,685.51 939.473,685.51 940.032,685.51 940.592,685.51 941.151,685.51 941.71,685.51 942.269,685.51 942.829,685.51 943.388,685.51 943.947,685.51 944.506,685.51 945.066,685.51 945.625,685.51 946.184,685.51 946.743,685.51 947.303,685.51 947.862,685.51 948.421,685.51 948.98,685.51 949.54,685.51 950.099,685.51 950.658,685.51 951.217,685.51 951.777,685.51 952.336,685.51 952.895,685.51 953.454,685.51 954.014,685.51 954.573,685.51 955.132,685.51 955.691,685.51 956.251,685.51 956.81,685.51 957.369,685.51 957.928,685.51 958.488,685.51 959.047,685.51 959.606,685.51 960.165,685.51 960.725,685.51 961.284,685.51 961.843,685.51 962.402,685.51 962.962,685.51 963.521,685.51 964.08,685.51 964.639,685.51 965.199,685.51 965.758,685.51 966.317,685.51 966.876,685.51 967.436,685.51 967.995,685.51 968.554,685.51 969.113,685.51 969.673,685.51 970.232,685.51 970.791,685.51 971.35,685.51 971.91,685.51 972.469,685.51 973.028,685.51 973.587,685.51 974.147,685.51 974.706,685.51 975.265,685.51 975.824,685.51 976.384,685.51 976.943,685.51 977.502,685.51 978.061,685.51 978.621,685.51 979.18,685.51 979.739,685.51 980.298,685.51 980.858,685.51 981.417,685.51 981.976,685.51 982.535,685.51 983.095,685.51 983.654,685.51 984.213,685.51 984.772,685.51 985.332,685.51 985.891,685.51 986.45,685.51 987.009,685.51 987.569,685.51 988.128,685.51 988.687,685.51 989.246,685.51 989.806,685.51 990.365,685.51 990.924,685.51 991.483,685.51 992.043,685.51 992.602,685.51 993.161,685.51 993.72,685.51 994.28,685.51 994.839,685.51 995.398,685.51 995.957,685.51 996.517,685.51 997.076,685.51 997.635,685.51 998.194,685.51 998.754,685.51 999.313,685.51 999.872,685.51 1000.43,685.51 1000.99,685.51 1001.55,685.51 1002.11,685.51 1002.67,685.51 1003.23,685.51 1003.79,685.51 1004.35,685.51 1004.91,685.51 1005.46,685.51 1006.02,685.51 1006.58,685.51 1007.14,685.51 1007.7,685.51 1008.26,685.51 1008.82,685.51 1009.38,685.51 1009.94,685.51 1010.5,685.51 1011.06,685.51 1011.62,685.51 1012.18,685.51 1012.73,685.51 1013.29,685.51 1013.85,685.51 1014.41,685.51 1014.97,685.51 1015.53,685.51 1016.09,685.51 1016.65,685.51 1017.21,685.51 1017.77,685.51 1018.33,685.51 1018.89,685.51 1019.45,685.51 1020.01,685.51 1020.56,685.51 1021.12,685.51 1021.68,685.51 1022.24,685.51 1022.8,685.51 1023.36,685.51 1023.92,685.51 1024.48,685.51 1025.04,685.51 1025.6,685.51 1026.16,685.51 1026.72,685.51 1027.28,685.51 1027.83,685.51 1028.39,685.51 1028.95,685.51 1029.51,685.51 1030.07,685.51 1030.63,685.51 1031.19,685.51 1031.75,685.51 1032.31,685.51 1032.87,685.51 1033.43,685.51 1033.99,685.51 1034.55,685.51 1035.1,685.51 1035.66,685.51 1036.22,685.51 1036.78,685.51 1037.34,685.51 1037.9,685.51 1038.46,685.51 1039.02,685.51 1039.58,685.51 1040.14,685.51 1040.7,685.51 1041.26,685.51 1041.82,685.51 1042.38,685.51 1042.93,685.51 1043.49,685.51 1044.05,685.51 1044.61,685.51 1045.17,685.51 1045.73,685.51 1046.29,685.51 1046.85,685.51 1047.41,685.51 1047.97,685.51 1048.53,685.51 1049.09,685.51 1049.65,685.51 1050.2,685.51 1050.76,685.51 1051.32,685.51 1051.88,685.51 1052.44,685.51 1053,685.51 1053.56,685.51 1054.12,685.51 1054.68,685.51 1055.24,685.51 1055.8,685.51 1056.36,685.51 1056.92,685.51 1057.48,685.51 1058.03,685.51 1058.59,685.51 1059.15,685.51 1059.71,685.51 1060.27,685.51 1060.83,685.51 1061.39,685.51 1061.95,685.51 1062.51,685.51 1063.07,685.51 1063.63,685.51 1064.19,685.51 1064.75,685.51 1065.3,685.51 1065.86,685.51 1066.42,685.51 1066.98,685.51 1067.54,685.51 1068.1,685.51 1068.66,685.51 1069.22,685.51 1069.78,685.51 1070.34,685.51 1070.9,685.51 1071.46,685.51 1072.02,685.51 1072.57,685.51 1073.13,685.51 1073.69,685.51 1074.25,685.51 1074.81,685.51 1075.37,685.51 1075.93,685.51 1076.49,685.51 1077.05,685.51 1077.61,685.51 1078.17,685.51 1078.73,685.51 1079.29,685.51 1079.85,685.51 1080.4,685.51 1080.96,685.51 1081.52,685.51 1082.08,685.51 1082.64,685.51 1083.2,685.51 1083.76,685.51 1084.32,685.51 1084.88,685.51 1085.44,685.51 1086,685.51 1086.56,685.51 1087.12,685.51 1087.67,685.51 1088.23,685.51 1088.79,685.51 1089.35,685.51 1089.91,685.51 1090.47,685.51 1091.03,685.51 1091.59,685.51 1092.15,685.51 1092.71,685.51 1093.27,685.51 1093.83,685.51 1094.39,685.51 1094.94,685.51 1095.5,685.51 1096.06,685.51 1096.62,685.51 1097.18,685.51 1097.74,685.51 1098.3,685.51 1098.86,685.51 1099.42,685.51 1099.98,685.51 1100.54,685.51 1101.1,685.51 1101.66,685.51 1102.22,685.51 1102.77,685.51 1103.33,685.51 1103.89,685.51 1104.45,685.51 1105.01,685.51 1105.57,685.51 1106.13,685.51 1106.69,685.51 1107.25,685.51 1107.81,685.51 1108.37,685.51 1108.93,685.51 1109.49,685.51 1110.04,685.51 1110.6,685.51 1111.16,685.51 1111.72,685.51 1112.28,685.51 1112.84,685.51 1113.4,685.51 1113.96,685.51 1114.52,685.51 1115.08,685.51 1115.64,685.51 1116.2,685.51 1116.76,685.51 1117.31,685.51 1117.87,685.51 1118.43,685.51 1118.99,685.51 1119.55,685.51 1120.11,685.51 1120.67,685.51 1121.23,685.51 1121.79,685.51 1122.35,685.51 1122.91,685.51 1123.47,685.51 1124.03,685.51 1124.59,685.51 1125.14,685.51 1125.7,685.51 1126.26,685.51 1126.82,685.51 1127.38,685.51 1127.94,685.51 1128.5,685.51 1129.06,685.51 1129.62,685.51 1130.18,685.51 1130.74,685.51 1131.3,685.51 1131.86,685.51 1132.41,685.51 1132.97,685.51 1133.53,685.51 1134.09,685.51 1134.65,685.51 1135.21,685.51 1135.77,685.51 1136.33,685.51 1136.89,685.51 1137.45,685.51 1138.01,685.51 1138.57,685.51 1139.13,685.51 1139.68,685.51 1140.24,685.51 1140.8,685.51 1141.36,685.51 1141.92,685.51 1142.48,685.51 1143.04,685.51 1143.6,685.51 1144.16,685.51 1144.72,685.51 1145.28,685.51 1145.84,685.51 1146.4,685.51 1146.96,685.51 1147.51,685.51 1148.07,685.51 1148.63,685.51 1149.19,685.51 1149.75,685.51 1150.31,685.51 1150.87,685.51 1151.43,685.51 1151.99,685.51 1152.55,685.51 1153.11,685.51 1153.67,685.51 1154.23,685.51 1154.78,685.51 1155.34,685.51 1155.9,685.51 1156.46,685.51 1157.02,685.51 1157.58,685.51 1158.14,685.51 1158.7,685.51 1159.26,685.51 1159.82,685.51 1160.38,685.51 1160.94,685.51 1161.5,685.51 1162.05,685.51 1162.61,685.51 1163.17,685.51 1163.73,685.51 1164.29,685.51 1164.85,685.51 1165.41,685.51 1165.97,685.51 1166.53,685.51 1167.09,685.51 1167.65,685.51 1168.21,685.51 1168.77,685.51 1169.33,685.51 1169.88,685.51 1170.44,685.51 1171,685.51 1171.56,685.51 1172.12,685.51 1172.68,685.51 1173.24,685.51 1173.8,685.51 1174.36,685.51 1174.92,685.51 1175.48,685.51 1176.04,685.51 1176.6,685.51 1177.15,685.51 1177.71,685.51 1178.27,685.51 1178.83,685.51 1179.39,685.51 1179.95,685.51 1180.51,685.51 1181.07,685.51 1181.63,685.51 1182.19,685.51 1182.75,685.51 1183.31,685.51 1183.87,685.51 1184.43,685.51 1184.98,685.51 1185.54,685.51 1186.1,685.51 1186.66,685.51 1187.22,685.51 1187.78,685.51 1188.34,685.51 1188.9,685.51 1189.46,685.51 1190.02,685.51 1190.58,685.51 1191.14,685.51 1191.7,685.51 1192.25,685.51 1192.81,685.51 1193.37,685.51 1193.93,685.51 1194.49,685.51 1195.05,685.51 1195.61,685.51 1196.17,685.51 1196.73,685.51 1197.29,685.51 1197.85,685.51 1198.41,685.51 1198.97,685.51 1199.52,685.51 1200.08,685.51 1200.64,685.51 1201.2,685.51 1201.76,685.51 1202.32,685.51 1202.88,685.51 1203.44,685.51 1204,685.51 1204.56,685.51 1205.12,685.51 1205.68,685.51 1206.24,685.51 1206.8,685.51 1207.35,685.51 1207.91,685.51 1208.47,685.51 1209.03,685.51 1209.59,685.51 1210.15,685.51 1210.71,685.51 1211.27,685.51 1211.83,685.51 1212.39,685.51 1212.95,685.51 1213.51,685.51 1214.07,685.51 1214.62,685.51 1215.18,685.51 1215.74,685.51 1216.3,685.51 1216.86,685.51 1217.42,685.51 1217.98,685.51 1218.54,685.51 1219.1,685.51 1219.66,685.51 1220.22,685.51 1220.78,685.51 1221.34,685.51 1221.89,685.51 1222.45,685.51 1223.01,685.51 1223.57,685.51 1224.13,685.51 1224.69,685.51 1225.25,685.51 1225.81,685.51 1226.37,685.51 1226.93,685.51 1227.49,685.51 1228.05,685.51 1228.61,685.51 1229.17,685.51 1229.72,685.51 1230.28,685.51 1230.84,685.51 1231.4,685.51 1231.96,685.51 1232.52,685.51 1233.08,685.51 1233.64,685.51 1234.2,685.51 1234.76,685.51 1235.32,685.51 1235.88,685.51 1236.44,685.51 1236.99,685.51 1237.55,685.51 1238.11,685.51 1238.67,685.51 1239.23,685.51 1239.79,685.51 1240.35,685.51 1240.91,685.51 1241.47,685.51 1242.03,685.51 1242.59,685.51 1243.15,685.51 1243.71,685.51 1244.26,685.51 1244.82,685.51 1245.38,685.51 1245.94,685.51 1246.5,685.51 1247.06,685.51 1247.62,685.51 1248.18,685.51 1248.74,685.51 1249.3,685.51 1249.86,685.51 1250.42,685.51 1250.98,685.51 1251.54,685.51 1252.09,685.51 1252.65,685.51 1253.21,685.51 1253.77,685.51 1254.33,685.51 1254.89,685.51 1255.45,685.51 1256.01,685.51 1256.57,685.51 1257.13,685.51 1257.69,685.51 1258.25,685.51 1258.81,685.51 1259.36,685.51 1259.92,685.51 1260.48,685.51 1261.04,685.51 1261.6,685.51 1262.16,685.51 1262.72,685.51 1263.28,685.51 1263.84,685.51 1264.4,685.51 1264.96,685.51 1265.52,685.51 1266.08,685.51 1266.63,685.51 1267.19,685.51 1267.75,685.51 1268.31,685.51 1268.87,685.51 1269.43,685.51 1269.99,685.51 1270.55,685.51 1271.11,685.51 1271.67,685.51 1272.23,685.51 1272.79,685.51 1273.35,685.51 1273.91,685.51 1274.46,685.51 1275.02,685.51 1275.58,685.51 1276.14,685.51 1276.7,685.51 1277.26,685.51 1277.82,685.51 1278.38,685.51 1278.94,685.51 1279.5,685.51 1280.06,685.51 1280.62,685.51 1281.18,685.51 1281.73,685.51 1282.29,685.51 1282.85,685.51 1283.41,685.51 1283.97,685.51 1284.53,685.51 1285.09,685.51 1285.65,685.51 1286.21,685.51 1286.77,685.51 1287.33,685.51 1287.89,685.51 1288.45,685.51 1289,685.51 1289.56,685.51 1290.12,685.51 1290.68,685.51 1291.24,685.51 1291.8,685.51 1292.36,685.51 1292.92,685.51 1293.48,685.51 1294.04,685.51 1294.6,685.51 1295.16,685.51 1295.72,685.51 1296.28,685.51 1296.83,685.51 1297.39,685.51 1297.95,685.51 1298.51,685.51 1299.07,685.51 1299.63,685.51 1300.19,685.51 1300.75,685.51 1301.31,685.51 1301.87,685.51 1302.43,685.51 1302.99,685.51 1303.55,685.51 1304.1,685.51 1304.66,685.51 1305.22,685.51 1305.78,685.51 1306.34,685.51 1306.9,685.51 1307.46,685.51 1308.02,685.51 1308.58,685.51 1309.14,685.51 1309.7,685.51 1310.26,685.51 1310.82,685.51 1311.38,685.51 1311.93,685.51 1312.49,685.51 1313.05,685.51 1313.61,685.51 1314.17,685.51 1314.73,685.51 1315.29,685.51 1315.85,685.51 1316.41,685.51 1316.97,685.51 1317.53,685.51 1318.09,685.51 1318.65,685.51 1319.2,685.51 1319.76,685.51 1320.32,685.51 1320.88,685.51 1321.44,685.51 1322,685.51 1322.56,685.51 1323.12,685.51 1323.68,685.51 1324.24,685.51 1324.8,685.51 1325.36,685.51 1325.92,685.51 1326.47,685.51 1327.03,685.51 1327.59,685.51 1328.15,685.51 1328.71,685.51 1329.27,685.51 1329.83,685.51 1330.39,685.51 1330.95,685.51 1331.51,685.51 1332.07,685.51 1332.63,685.51 1333.19,685.51 1333.75,685.51 1334.3,685.51 1334.86,685.51 1335.42,685.51 1335.98,685.51 1336.54,685.51 1337.1,685.51 1337.66,685.51 1338.22,685.51 1338.78,685.51 1339.34,685.51 1339.9,685.51 1340.46,685.51 1341.02,685.51 1341.57,685.51 1342.13,685.51 1342.69,685.51 1343.25,685.51 1343.81,685.51 1344.37,685.51 1344.93,685.51 1345.49,685.51 1346.05,685.51 1346.61,685.51 1347.17,685.51 1347.73,685.51 1348.29,685.51 1348.84,685.51 1349.4,685.51 1349.96,685.51 1350.52,685.51 1351.08,685.51 1351.64,685.51 1352.2,685.51 1352.76,685.51 1353.32,685.51 1353.88,685.51 1354.44,685.51 1355,685.51 1355.56,685.51 1356.12,685.51 1356.67,685.51 1357.23,685.51 1357.79,685.51 1358.35,685.51 1358.91,685.51 1359.47,685.51 1360.03,685.51 1360.59,685.51 1361.15,685.51 1361.71,685.51 1362.27,685.51 1362.83,685.51 1363.39,685.51 1363.94,685.51 1364.5,685.51 1365.06,685.51 1365.62,685.51 1366.18,685.51 1366.74,685.51 1367.3,685.51 1367.86,685.51 1368.42,685.51 1368.98,685.51 1369.54,685.51 1370.1,685.51 1370.66,685.51 1371.21,685.51 1371.77,685.51 1372.33,685.51 1372.89,685.51 1373.45,685.51 1374.01,685.51 1374.57,685.51 1375.13,685.51 1375.69,685.51 1376.25,685.51 1376.81,685.51 1377.37,685.51 1377.93,685.51 1378.49,685.51 1379.04,685.51 1379.6,685.51 1380.16,685.51 1380.72,685.51 1381.28,685.51 1381.84,685.51 1382.4,685.51 1382.96,685.51 1383.52,685.51 1384.08,685.51 1384.64,685.51 1385.2,685.51 1385.76,685.51 1386.31,685.51 1386.87,685.51 1387.43,685.51 1387.99,685.51 1388.55,685.51 1389.11,685.51 1389.67,685.51 1390.23,685.51 1390.79,685.51 1391.35,685.51 1391.91,685.51 1392.47,685.51 1393.03,685.51 1393.58,685.51 1394.14,685.51 1394.7,685.51 1395.26,685.51 1395.82,685.51 1396.38,685.51 1396.94,685.51 1397.5,685.51 1398.06,685.51 1398.62,685.51 1399.18,685.51 1399.74,685.51 1400.3,685.51 1400.86,685.51 1401.41,685.51 1401.97,685.51 1402.53,685.51 1403.09,685.51 1403.65,685.51 1404.21,685.51 1404.77,685.51 1405.33,685.51 1405.89,685.51 1406.45,685.51 1407.01,685.51 1407.57,685.51 1408.13,685.51 1408.68,685.51 1409.24,685.51 1409.8,685.51 1410.36,685.51 1410.92,685.51 1411.48,685.51 1412.04,685.51 1412.6,685.51 1413.16,685.51 1413.72,685.51 1414.28,685.51 1414.84,685.51 1415.4,685.51 1415.95,685.51 1416.51,685.51 1417.07,685.51 1417.63,685.51 1418.19,685.51 1418.75,685.51 1419.31,685.51 1419.87,685.51 1420.43,685.51 1420.99,685.51 1421.55,685.51 1422.11,685.51 1422.67,685.51 1423.23,685.51 1423.78,685.51 1424.34,685.51 1424.9,685.51 1425.46,685.51 1426.02,685.51 1426.58,685.51 1427.14,685.51 1427.7,685.51 1428.26,685.51 1428.82,685.51 1429.38,685.51 1429.94,685.51 1430.5,685.51 1431.05,685.51 1431.61,685.51 1432.17,685.51 1432.73,685.51 1433.29,685.51 1433.85,685.51 1434.41,685.51 1434.97,685.51 1435.53,685.51 1436.09,685.51 1436.65,685.51 1437.21,685.51 1437.77,685.51 1438.33,685.51 1438.88,685.51 1439.44,685.51 1440,685.51 1440.56,685.51 1441.12,685.51 1441.68,685.51 1442.24,685.51 1442.8,685.51 1443.36,685.51 1443.92,685.51 1444.48,685.51 1445.04,685.51 1445.6,685.51 1446.15,685.51 1446.71,685.51 1447.27,685.51 1447.83,685.51 1448.39,685.51 1448.95,685.51 1449.51,685.51 1450.07,685.51 1450.63,685.51 1451.19,685.51 1451.75,685.51 1452.31,685.51 1452.87,685.51 1453.42,685.51 1453.98,685.51 1454.54,685.51 1455.1,685.51 1455.66,685.51 1456.22,685.51 1456.78,685.51 1457.34,685.51 1457.9,685.51 1458.46,685.51 1459.02,685.51 1459.58,685.51 1460.14,685.51 1460.7,685.51 1461.25,685.51 1461.81,685.51 1462.37,685.51 1462.93,685.51 1463.49,685.51 1464.05,685.51 1464.61,685.51 1465.17,685.51 1465.73,685.51 1466.29,685.51 1466.85,685.51 1467.41,685.51 1467.97,685.51 1468.52,685.51 1469.08,685.51 1469.64,685.51 1470.2,685.51 1470.76,685.51 1471.32,685.51 1471.88,685.51 1472.44,685.51 1473,685.51 1473.56,685.51 1474.12,685.51 1474.68,685.51 1475.24,685.51 1475.79,685.51 1476.35,685.51 1476.91,685.51 1477.47,685.51 1478.03,685.51 1478.59,685.51 1479.15,685.51 1479.71,685.51 1480.27,685.51 1480.83,685.51 1481.39,685.51 1481.95,685.51 1482.51,685.51 1483.07,685.51 1483.62,685.51 1484.18,685.51 1484.74,685.51 1485.3,685.51 1485.86,685.51 1486.42,685.51 1486.98,685.51 1487.54,685.51 1488.1,685.51 1488.66,685.51 1489.22,685.51 1489.78,685.51 1490.34,685.51 1490.89,685.51 1491.45,685.51 1492.01,685.51 1492.57,685.51 1493.13,685.51 1493.69,685.51 1494.25,685.51 1494.81,685.51 1495.37,685.51 1495.93,685.51 1496.49,685.51 1497.05,685.51 1497.61,685.51 1498.16,685.51 1498.72,685.51 1499.28,685.51 1499.84,685.51 1500.4,685.51 1500.96,685.51 1501.52,685.51 1502.08,685.51 1502.64,685.51 1503.2,685.51 1503.76,685.51 1504.32,685.51 1504.88,685.51 1505.44,685.51 1505.99,685.51 1506.55,685.51 1507.11,685.51 1507.67,685.51 1508.23,685.51 1508.79,685.51 1509.35,685.51 1509.91,685.51 1510.47,685.51 1511.03,685.51 1511.59,685.51 1512.15,685.51 1512.71,685.51 1513.26,685.51 1513.82,685.51 1514.38,685.51 1514.94,685.51 1515.5,685.51 1516.06,685.51 1516.62,685.51 1517.18,685.51 1517.74,685.51 1518.3,685.51 1518.86,685.51 1519.42,685.51 1519.98,685.51 1520.53,685.51 1521.09,685.51 1521.65,685.51 1522.21,685.51 1522.77,685.51 1523.33,685.51 1523.89,685.51 1524.45,685.51 1525.01,685.51 1525.57,685.51 1526.13,685.51 1526.69,685.51 1527.25,685.51 1527.81,685.51 1528.36,685.51 1528.92,685.51 1529.48,685.51 1530.04,685.51 1530.6,685.51 1531.16,685.51 1531.72,685.51 1532.28,685.51 1532.84,685.51 1533.4,685.51 1533.96,685.51 1534.52,685.51 1535.08,685.51 1535.63,685.51 1536.19,685.51 1536.75,685.51 1537.31,685.51 1537.87,685.51 1538.43,685.51 1538.99,685.51 1539.55,685.51 1540.11,685.51 1540.67,685.51 1541.23,685.51 1541.79,685.51 1542.35,685.51 1542.9,685.51 1543.46,685.51 1544.02,685.51 1544.58,685.51 1545.14,685.51 1545.7,685.51 1546.26,685.51 1546.82,685.51 1547.38,685.51 1547.94,685.51 1548.5,685.51 1549.06,685.51 1549.62,685.51 1550.18,685.51 1550.73,685.51 1551.29,685.51 1551.85,685.51 1552.41,685.51 1552.97,685.51 1553.53,685.51 1554.09,685.51 1554.65,685.51 1555.21,685.51 1555.77,685.51 1556.33,685.51 1556.89,685.51 1557.45,685.51 1558,685.51 1558.56,685.51 1559.12,685.51 1559.68,685.51 1560.24,685.51 1560.8,685.51 1561.36,685.51 1561.92,685.51 1562.48,685.51 1563.04,685.51 1563.6,685.51 1564.16,685.51 1564.72,685.51 1565.28,685.51 1565.83,685.51 1566.39,685.51 1566.95,685.51 1567.51,685.51 1568.07,685.51 1568.63,685.51 1569.19,685.51 1569.75,685.51 1570.31,685.51 1570.87,685.51 1571.43,685.51 1571.99,685.51 1572.55,685.51 1573.1,685.51 1573.66,685.51 1574.22,685.51 1574.78,685.51 1575.34,685.51 1575.9,685.51 1576.46,685.51 1577.02,685.51 1577.58,685.51 1578.14,685.51 1578.7,685.51 1579.26,685.51 1579.82,685.51 1580.37,685.51 1580.93,685.51 1581.49,685.51 1582.05,685.51 1582.61,685.51 1583.17,685.51 1583.73,685.51 1584.29,685.51 1584.85,685.51 1585.41,685.51 1585.97,685.51 1586.53,685.51 1587.09,685.51 1587.65,685.51 1588.2,685.51 1588.76,685.51 1589.32,685.51 1589.88,685.51 1590.44,685.51 1591,685.51 1591.56,685.51 1592.12,685.51 1592.68,685.51 1593.24,685.51 1593.8,685.51 1594.36,685.51 1594.92,685.51 1595.47,685.51 1596.03,685.51 1596.59,685.51 1597.15,685.51 1597.71,685.51 1598.27,685.51 1598.83,685.51 1599.39,685.51 1599.95,685.51 1600.51,685.51 1601.07,685.51 1601.63,685.51 1602.19,685.51 1602.74,685.51 1603.3,685.51 1603.86,685.51 1604.42,685.51 1604.98,685.51 1605.54,685.51 1606.1,685.51 1606.66,685.51 1607.22,685.51 1607.78,685.51 1608.34,685.51 1608.9,685.51 1609.46,685.51 1610.02,685.51 1610.57,685.51 1611.13,685.51 1611.69,685.51 1612.25,685.51 1612.81,685.51 1613.37,685.51 1613.93,685.51 1614.49,685.51 1615.05,685.51 1615.61,685.51 1616.17,685.51 1616.73,685.51 1617.29,685.51 1617.84,685.51 1618.4,685.51 1618.96,685.51 1619.52,685.51 1620.08,685.51 1620.64,685.51 1621.2,685.51 1621.76,685.51 1622.32,685.51 1622.88,685.51 1623.44,685.51 1624,685.51 1624.56,685.51 1625.11,685.51 1625.67,685.51 1626.23,685.51 1626.79,685.51 1627.35,685.51 1627.91,685.51 1628.47,685.51 1629.03,685.51 1629.59,685.51 1630.15,685.51 1630.71,685.51 1631.27,685.51 1631.83,685.51 1632.39,685.51 1632.94,685.51 1633.5,685.51 1634.06,685.51 1634.62,685.51 1635.18,685.51 1635.74,685.51 1636.3,685.51 1636.86,685.51 1637.42,685.51 1637.98,685.51 1638.54,685.51 1639.1,685.51 1639.66,685.51 1640.21,685.51 1640.77,685.51 1641.33,685.51 1641.89,685.51 1642.45,685.51 1643.01,685.51 1643.57,685.51 1644.13,685.51 1644.69,685.51 1645.25,685.51 1645.81,685.51 1646.37,685.51 1646.93,685.51 1647.48,685.51 1648.04,685.51 1648.6,685.51 1649.16,685.51 1649.72,685.51 1650.28,685.51 1650.84,685.51 1651.4,685.51 1651.96,685.51 1652.52,685.51 1653.08,685.51 1653.64,685.51 1654.2,685.51 1654.76,685.51 1655.31,685.51 1655.87,685.51 1656.43,685.51 1656.99,685.51 1657.55,685.51 1658.11,685.51 1658.67,685.51 1659.23,685.51 1659.79,685.51 1660.35,685.51 1660.91,685.51 1661.47,685.51 1662.03,685.51 1662.58,685.51 1663.14,685.51 1663.7,685.51 1664.26,685.51 1664.82,685.51 1665.38,685.51 1665.94,685.51 1666.5,685.51 1667.06,685.51 1667.62,685.51 1668.18,685.51 1668.74,685.51 1669.3,685.51 1669.85,685.51 1670.41,685.51 1670.97,685.51 1671.53,685.51 1672.09,685.51 1672.65,685.51 1673.21,685.51 1673.77,685.51 1674.33,685.51 1674.89,685.51 1675.45,685.51 1676.01,685.51 1676.57,685.51 1677.13,685.51 1677.68,685.51 1678.24,685.51 1678.8,685.51 1679.36,685.51 1679.92,685.51 1680.48,685.51 1681.04,685.51 1681.6,685.51 1682.16,685.51 1682.72,685.51 1683.28,685.51 1683.84,685.51 1684.4,685.51 1684.95,685.51 1685.51,685.51 1686.07,685.51 1686.63,685.51 1687.19,685.51 1687.75,685.51 1688.31,685.51 1688.87,685.51 1689.43,685.51 1689.99,685.51 1690.55,685.51 1691.11,685.51 1691.67,685.51 1692.23,685.51 1692.78,685.51 1693.34,685.51 1693.9,685.51 1694.46,685.51 1695.02,685.51 1695.58,685.51 1696.14,685.51 1696.7,685.51 1697.26,685.51 1697.82,685.51 1698.38,685.51 1698.94,685.51 1699.5,685.51 1700.05,685.51 1700.61,685.51 1701.17,685.51 1701.73,685.51 1702.29,685.51 1702.85,685.51 1703.41,685.51 1703.97,685.51 1704.53,685.51 1705.09,685.51 1705.65,685.51 1706.21,685.51 1706.77,685.51 1707.32,685.51 1707.88,685.51 1708.44,685.51 1709,685.51 1709.56,685.51 1710.12,685.51 1710.68,685.51 1711.24,685.51 1711.8,685.51 1712.36,685.51 1712.92,685.51 1713.48,685.51 1714.04,685.51 1714.6,685.51 1715.15,685.51 1715.71,685.51 1716.27,685.51 1716.83,685.51 1717.39,685.51 1717.95,685.51 1718.51,685.51 1719.07,685.51 1719.63,685.51 1720.19,685.51 1720.75,685.51 1721.31,685.51 1721.87,685.51 1722.42,685.51 1722.98,685.51 1723.54,685.51 1724.1,685.51 1724.66,685.51 1725.22,685.51 1725.78,685.51 1726.34,685.51 1726.9,685.51 1727.46,685.51 1728.02,685.51 1728.58,685.51 1729.14,685.51 1729.69,685.51 1730.25,685.51 1730.81,685.51 1731.37,685.51 1731.93,685.51 1732.49,685.51 1733.05,685.51 1733.61,685.51 1734.17,685.51 1734.73,685.51 1735.29,685.51 1735.85,685.51 1736.41,685.51 1736.97,685.51 1737.52,685.51 1738.08,685.51 1738.64,685.51 1739.2,685.51 1739.76,685.51 1740.32,685.51 1740.88,685.51 1741.44,685.51 1742,685.51 1742.56,685.51 1743.12,685.51 1743.68,685.51 1744.24,685.51 1744.79,685.51 1745.35,685.51 1745.91,685.51 1746.47,685.51 1747.03,685.51 1747.59,685.51 1748.15,685.51 1748.71,685.51 1749.27,685.51 1749.83,685.51 1750.39,685.51 1750.95,685.51 1751.51,685.51 1752.06,685.51 1752.62,685.51 1753.18,685.51 1753.74,685.51 1754.3,685.51 1754.86,685.51 1755.42,685.51 1755.98,685.51 1756.54,685.51 1757.1,685.51 1757.66,685.51 1758.22,685.51 1758.78,685.51 1759.34,685.51 1759.89,685.51 1760.45,685.51 1761.01,685.51 1761.57,685.51 1762.13,685.51 1762.69,685.51 1763.25,685.51 1763.81,685.51 1764.37,685.51 1764.93,685.51 1765.49,685.51 1766.05,685.51 1766.61,685.51 1767.16,685.51 1767.72,685.51 1768.28,685.51 1768.84,685.51 1769.4,685.51 1769.96,685.51 1770.52,685.51 1771.08,685.51 1771.64,685.51 1772.2,685.51 1772.76,685.51 1773.32,685.51 1773.88,685.51 1774.43,685.51 1774.99,685.51 1775.55,685.51 1776.11,685.51 1776.67,685.51 1777.23,685.51 1777.79,685.51 1778.35,685.51 1778.91,685.51 1779.47,685.51 1780.03,685.51 1780.59,685.51 1781.15,685.51 1781.71,685.51 1782.26,685.51 1782.82,685.51 1783.38,685.51 1783.94,685.51 1784.5,685.51 1785.06,685.51 1785.62,685.51 1786.18,685.51 1786.74,685.51 1787.3,685.51 1787.86,685.51 1788.42,685.51 1788.98,685.51 1789.53,685.51 1790.09,685.51 1790.65,685.51 1791.21,685.51 1791.77,685.51 1792.33,685.51 1792.89,685.51 1793.45,685.51 1794.01,685.51 1794.57,685.51 1795.13,685.51 1795.69,685.51 1796.25,685.51 1796.8,685.51 1797.36,685.51 1797.92,685.51 1798.48,685.51 1799.04,685.51 1799.6,685.51 1800.16,685.51 1800.72,685.51 1801.28,685.51 1801.84,685.51 1802.4,685.51 1802.96,685.51 1803.52,685.51 1804.08,685.51 1804.63,685.51 1805.19,685.51 1805.75,685.51 1806.31,685.51 1806.87,685.51 1807.43,685.51 1807.99,685.51 1808.55,685.51 1809.11,685.51 1809.67,685.51 1810.23,685.51 1810.79,685.51 1811.35,685.51 1811.9,685.51 1812.46,685.51 1813.02,685.51 1813.58,685.51 1814.14,685.51 1814.7,685.51 1815.26,685.51 1815.82,685.51 1816.38,685.51 1816.94,685.51 1817.5,685.51 1818.06,685.51 1818.62,685.51 1819.18,685.51 1819.73,685.51 1820.29,685.51 1820.85,685.51 1821.41,685.51 1821.97,685.51 1822.53,685.51 1823.09,685.51 1823.65,685.51 1824.21,685.51 1824.77,685.51 1825.33,685.51 1825.89,685.51 1826.45,685.51 1827,685.51 1827.56,685.51 1828.12,685.51 1828.68,685.51 1829.24,685.51 1829.8,685.51 1830.36,685.51 1830.92,685.51 1831.48,685.51 1832.04,685.51 1832.6,685.51 1833.16,685.51 1833.72,685.51 1834.27,685.51 1834.83,685.51 1835.39,685.51 1835.95,685.51 1836.51,685.51 1837.07,685.51 1837.63,685.51 1838.19,685.51 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 684.472 L720.806 684.472 L721.365 684.472 L721.924 684.472 L722.484 684.472 L723.043 684.472 L723.602 684.472 L724.161 684.472 L724.721 684.472 L725.28 684.472 L725.839 684.472 L726.398 684.472 L726.958 684.472 L727.517 684.472 L728.076 684.472 L728.635 684.472 L729.195 684.472 L729.754 684.472 L730.313 684.472 L730.872 684.472 L731.432 684.472 L731.991 684.472 L732.55 684.472 L733.109 684.472 L733.669 684.472 L734.228 684.472 L734.787 684.472 L735.346 684.472 L735.906 684.472 L736.465 684.472 L737.024 684.472 L737.583 684.472 L738.143 684.472 L738.702 684.472 L739.261 684.472 L739.82 684.472 L740.38 684.472 L740.939 684.472 L741.498 684.472 L742.057 684.472 L742.617 684.472 L743.176 684.472 L743.735 684.472 L744.294 684.472 L744.854 684.472 L745.413 684.472 L745.972 684.472 L746.531 684.472 L747.091 684.472 L747.65 684.472 L748.209 684.472 L748.768 684.472 L749.328 684.472 L749.887 684.472 L750.446 684.472 L751.005 684.472 L751.565 684.472 L752.124 684.472 L752.683 684.472 L753.242 684.472 L753.802 684.472 L754.361 684.472 L754.92 684.472 L755.479 684.472 L756.039 684.472 L756.598 684.472 L757.157 684.472 L757.716 684.472 L758.276 684.472 L758.835 684.472 L759.394 684.472 L759.953 684.472 L760.513 684.472 L761.072 684.472 L761.631 684.472 L762.19 684.472 L762.75 684.472 L763.309 684.472 L763.868 684.472 L764.427 684.472 L764.987 684.472 L765.546 684.472 L766.105 684.472 L766.664 684.472 L767.224 684.472 L767.783 684.472 L768.342 684.472 L768.901 684.472 L769.461 684.472 L770.02 684.472 L770.579 684.472 L771.138 684.472 L771.698 684.472 L772.257 684.472 L772.816 684.472 L773.375 684.472 L773.935 684.472 L774.494 684.472 L775.053 684.472 L775.612 684.472 L776.172 684.472 L776.731 684.472 L777.29 684.472 L777.849 684.472 L778.409 684.472 L778.968 684.472 L779.527 684.472 L780.086 684.472 L780.646 684.472 L781.205 684.472 L781.764 684.472 L782.323 684.472 L782.883 684.472 L783.442 684.472 L784.001 684.472 L784.56 684.472 L785.12 684.472 L785.679 684.472 L786.238 684.472 L786.797 684.472 L787.357 684.472 L787.916 684.472 L788.475 684.472 L789.034 684.472 L789.594 684.472 L790.153 684.472 L790.712 684.472 L791.271 684.472 L791.831 684.472 L792.39 684.472 L792.949 684.472 L793.508 684.472 L794.068 684.472 L794.627 684.472 L795.186 684.472 L795.745 684.472 L796.305 684.472 L796.864 684.472 L797.423 684.472 L797.982 684.472 L798.542 684.472 L799.101 684.472 L799.66 684.472 L800.219 684.472 L800.779 684.472 L801.338 684.472 L801.897 684.472 L802.456 684.472 L803.016 684.472 L803.575 684.472 L804.134 684.472 L804.693 684.472 L805.253 684.472 L805.812 684.472 L806.371 684.472 L806.931 684.472 L807.49 684.472 L808.049 684.472 L808.608 684.472 L809.168 684.472 L809.727 684.472 L810.286 684.472 L810.845 684.472 L811.405 684.472 L811.964 684.472 L812.523 684.472 L813.082 684.472 L813.642 684.472 L814.201 684.472 L814.76 684.472 L815.319 684.472 L815.879 684.472 L816.438 684.472 L816.997 684.472 L817.556 684.472 L818.116 684.472 L818.675 684.472 L819.234 684.472 L819.793 684.472 L820.353 684.472 L820.912 684.472 L821.471 684.472 L822.03 684.472 L822.59 684.472 L823.149 684.472 L823.708 684.472 L824.267 684.472 L824.827 684.472 L825.386 684.472 L825.945 684.472 L826.504 684.472 L827.064 684.472 L827.623 684.472 L828.182 684.472 L828.741 684.472 L829.301 684.472 L829.86 684.472 L830.419 684.472 L830.978 684.472 L831.538 684.472 L832.097 684.472 L832.656 684.472 L833.215 684.472 L833.775 684.472 L834.334 684.472 L834.893 684.472 L835.452 684.472 L836.012 684.472 L836.571 684.472 L837.13 684.472 L837.689 684.472 L838.249 684.472 L838.808 684.472 L839.367 684.472 L839.926 684.472 L840.486 684.472 L841.045 684.472 L841.604 684.472 L842.163 684.472 L842.723 684.472 L843.282 684.472 L843.841 684.472 L844.4 684.472 L844.96 684.472 L845.519 684.472 L846.078 684.472 L846.637 684.472 L847.197 684.472 L847.756 684.472 L848.315 684.472 L848.874 684.472 L849.434 684.472 L849.993 684.472 L850.552 684.472 L851.111 684.472 L851.671 684.472 L852.23 684.472 L852.789 684.472 L853.348 684.472 L853.908 684.472 L854.467 684.472 L855.026 684.472 L855.585 684.472 L856.145 684.472 L856.704 684.472 L857.263 684.472 L857.822 684.472 L858.382 684.472 L858.941 684.472 L859.5 684.472 L860.059 684.472 L860.619 684.472 L861.178 684.472 L861.737 684.472 L862.296 684.472 L862.856 684.472 L863.415 684.472 L863.974 684.472 L864.533 684.472 L865.093 684.472 L865.652 684.472 L866.211 684.472 L866.77 684.472 L867.33 684.472 L867.889 684.472 L868.448 684.472 L869.007 684.472 L869.567 684.472 L870.126 684.472 L870.685 684.472 L871.244 684.472 L871.804 684.472 L872.363 684.472 L872.922 684.472 L873.481 684.472 L874.041 684.472 L874.6 684.472 L875.159 684.472 L875.718 684.472 L876.278 684.472 L876.837 684.472 L877.396 684.472 L877.955 684.472 L878.515 684.472 L879.074 684.472 L879.633 684.472 L880.192 684.472 L880.752 684.472 L881.311 684.472 L881.87 684.472 L882.429 684.472 L882.989 684.472 L883.548 684.472 L884.107 684.472 L884.666 684.472 L885.226 684.472 L885.785 684.472 L886.344 684.472 L886.903 684.472 L887.463 684.472 L888.022 684.472 L888.581 684.472 L889.14 684.472 L889.7 684.472 L890.259 684.472 L890.818 684.472 L891.377 684.472 L891.937 684.472 L892.496 684.472 L893.055 684.472 L893.614 684.472 L894.174 684.472 L894.733 684.472 L895.292 684.472 L895.851 684.472 L896.411 684.472 L896.97 684.472 L897.529 684.472 L898.088 684.472 L898.648 684.472 L899.207 684.472 L899.766 684.472 L900.325 684.472 L900.885 684.472 L901.444 684.472 L902.003 684.472 L902.562 684.472 L903.122 684.472 L903.681 684.472 L904.24 684.472 L904.799 684.472 L905.359 684.472 L905.918 684.472 L906.477 684.472 L907.036 684.472 L907.596 684.472 L908.155 684.472 L908.714 684.472 L909.273 684.472 L909.833 684.472 L910.392 684.472 L910.951 684.472 L911.51 684.472 L912.07 684.472 L912.629 684.472 L913.188 684.472 L913.747 684.472 L914.307 684.472 L914.866 684.472 L915.425 684.472 L915.984 684.472 L916.544 684.472 L917.103 684.472 L917.662 684.472 L918.221 684.472 L918.781 684.472 L919.34 684.472 L919.899 684.472 L920.458 684.472 L921.018 684.472 L921.577 684.472 L922.136 684.472 L922.695 684.472 L923.255 684.472 L923.814 684.472 L924.373 684.472 L924.932 684.472 L925.492 684.472 L926.051 684.472 L926.61 684.472 L927.169 684.472 L927.729 684.472 L928.288 684.472 L928.847 684.472 L929.406 684.472 L929.966 684.472 L930.525 684.472 L931.084 684.472 L931.644 684.472 L932.203 684.472 L932.762 684.472 L933.321 684.472 L933.881 684.472 L934.44 684.472 L934.999 684.472 L935.558 684.472 L936.118 684.472 L936.677 684.472 L937.236 684.472 L937.795 684.472 L938.355 684.472 L938.914 684.472 L939.473 684.472 L940.032 684.472 L940.592 684.472 L941.151 684.472 L941.71 684.472 L942.269 684.472 L942.829 684.472 L943.388 684.472 L943.947 684.472 L944.506 684.472 L945.066 684.472 L945.625 684.472 L946.184 684.472 L946.743 684.472 L947.303 684.472 L947.862 684.472 L948.421 684.472 L948.98 684.472 L949.54 684.472 L950.099 684.472 L950.658 684.472 L951.217 684.472 L951.777 684.472 L952.336 684.472 L952.895 684.472 L953.454 684.472 L954.014 684.472 L954.573 684.472 L955.132 684.472 L955.691 684.472 L956.251 684.472 L956.81 684.472 L957.369 684.472 L957.928 684.472 L958.488 684.472 L959.047 684.472 L959.606 684.472 L960.165 684.472 L960.725 684.472 L961.284 684.472 L961.843 684.472 L962.402 684.472 L962.962 684.472 L963.521 684.472 L964.08 684.472 L964.639 684.472 L965.199 684.472 L965.758 684.472 L966.317 684.472 L966.876 684.472 L967.436 684.472 L967.995 684.472 L968.554 684.472 L969.113 684.472 L969.673 684.472 L970.232 684.472 L970.791 684.472 L971.35 684.472 L971.91 684.472 L972.469 684.472 L973.028 684.472 L973.587 684.472 L974.147 684.472 L974.706 684.472 L975.265 684.472 L975.824 684.472 L976.384 684.472 L976.943 684.472 L977.502 684.472 L978.061 684.472 L978.621 684.472 L979.18 684.472 L979.739 684.472 L980.298 684.472 L980.858 684.472 L981.417 684.472 L981.976 684.472 L982.535 684.472 L983.095 684.472 L983.654 684.472 L984.213 684.472 L984.772 684.472 L985.332 684.472 L985.891 684.472 L986.45 684.472 L987.009 684.472 L987.569 684.472 L988.128 684.472 L988.687 684.472 L989.246 684.472 L989.806 684.472 L990.365 684.472 L990.924 684.472 L991.483 684.472 L992.043 684.472 L992.602 684.472 L993.161 684.472 L993.72 684.472 L994.28 684.472 L994.839 684.472 L995.398 684.472 L995.957 684.472 L996.517 684.472 L997.076 684.472 L997.635 684.472 L998.194 684.472 L998.754 684.472 L999.313 684.472 L999.872 684.472 L1000.43 684.472 L1000.99 684.472 L1001.55 684.472 L1002.11 684.472 L1002.67 684.472 L1003.23 684.472 L1003.79 684.472 L1004.35 684.472 L1004.91 684.472 L1005.46 684.472 L1006.02 684.472 L1006.58 684.472 L1007.14 684.472 L1007.7 684.472 L1008.26 684.472 L1008.82 684.472 L1009.38 684.472 L1009.94 684.472 L1010.5 684.472 L1011.06 684.472 L1011.62 684.472 L1012.18 684.472 L1012.73 684.472 L1013.29 684.472 L1013.85 684.472 L1014.41 684.472 L1014.97 684.472 L1015.53 684.472 L1016.09 684.472 L1016.65 684.472 L1017.21 684.472 L1017.77 684.472 L1018.33 684.472 L1018.89 684.472 L1019.45 684.472 L1020.01 684.472 L1020.56 684.472 L1021.12 684.472 L1021.68 684.472 L1022.24 684.472 L1022.8 684.472 L1023.36 684.472 L1023.92 684.472 L1024.48 684.472 L1025.04 684.472 L1025.6 684.472 L1026.16 684.472 L1026.72 684.472 L1027.28 684.472 L1027.83 684.472 L1028.39 684.472 L1028.95 684.472 L1029.51 684.472 L1030.07 684.472 L1030.63 684.472 L1031.19 684.472 L1031.75 684.472 L1032.31 684.472 L1032.87 684.472 L1033.43 684.472 L1033.99 684.472 L1034.55 684.472 L1035.1 684.472 L1035.66 684.472 L1036.22 684.472 L1036.78 684.472 L1037.34 684.472 L1037.9 684.472 L1038.46 684.472 L1039.02 684.472 L1039.58 684.472 L1040.14 684.472 L1040.7 684.472 L1041.26 684.472 L1041.82 684.472 L1042.38 684.472 L1042.93 684.472 L1043.49 684.472 L1044.05 684.472 L1044.61 684.472 L1045.17 684.472 L1045.73 684.472 L1046.29 684.472 L1046.85 684.472 L1047.41 684.472 L1047.97 684.472 L1048.53 684.472 L1049.09 684.472 L1049.65 684.472 L1050.2 684.472 L1050.76 684.472 L1051.32 684.472 L1051.88 684.472 L1052.44 684.472 L1053 684.472 L1053.56 684.472 L1054.12 684.472 L1054.68 684.472 L1055.24 684.472 L1055.8 684.472 L1056.36 684.472 L1056.92 684.472 L1057.48 684.472 L1058.03 684.472 L1058.59 684.472 L1059.15 684.472 L1059.71 684.472 L1060.27 684.472 L1060.83 684.472 L1061.39 684.472 L1061.95 684.472 L1062.51 684.472 L1063.07 684.472 L1063.63 684.472 L1064.19 684.472 L1064.75 684.472 L1065.3 684.472 L1065.86 684.472 L1066.42 684.472 L1066.98 684.472 L1067.54 684.472 L1068.1 684.472 L1068.66 684.472 L1069.22 684.472 L1069.78 684.472 L1070.34 684.472 L1070.9 684.472 L1071.46 684.472 L1072.02 684.472 L1072.57 684.472 L1073.13 684.472 L1073.69 684.472 L1074.25 684.472 L1074.81 684.472 L1075.37 684.472 L1075.93 684.472 L1076.49 684.472 L1077.05 684.472 L1077.61 684.472 L1078.17 684.472 L1078.73 684.472 L1079.29 684.472 L1079.85 684.472 L1080.4 684.472 L1080.96 684.472 L1081.52 684.472 L1082.08 684.472 L1082.64 684.472 L1083.2 684.472 L1083.76 684.472 L1084.32 684.472 L1084.88 684.472 L1085.44 684.472 L1086 684.472 L1086.56 684.472 L1087.12 684.472 L1087.67 684.472 L1088.23 684.472 L1088.79 684.472 L1089.35 684.472 L1089.91 684.472 L1090.47 684.472 L1091.03 684.472 L1091.59 684.472 L1092.15 684.472 L1092.71 684.472 L1093.27 684.472 L1093.83 684.472 L1094.39 684.472 L1094.94 684.472 L1095.5 684.472 L1096.06 684.472 L1096.62 684.472 L1097.18 684.472 L1097.74 684.472 L1098.3 684.472 L1098.86 684.472 L1099.42 684.472 L1099.98 684.472 L1100.54 684.472 L1101.1 684.472 L1101.66 684.472 L1102.22 684.472 L1102.77 684.472 L1103.33 684.472 L1103.89 684.472 L1104.45 684.472 L1105.01 684.472 L1105.57 684.472 L1106.13 684.472 L1106.69 684.472 L1107.25 684.472 L1107.81 684.472 L1108.37 684.472 L1108.93 684.472 L1109.49 684.472 L1110.04 684.472 L1110.6 684.472 L1111.16 684.472 L1111.72 684.472 L1112.28 684.472 L1112.84 684.472 L1113.4 684.472 L1113.96 684.472 L1114.52 684.472 L1115.08 684.472 L1115.64 684.472 L1116.2 684.472 L1116.76 684.472 L1117.31 684.472 L1117.87 684.472 L1118.43 684.472 L1118.99 684.472 L1119.55 684.472 L1120.11 684.472 L1120.67 684.472 L1121.23 684.472 L1121.79 684.472 L1122.35 684.472 L1122.91 684.472 L1123.47 684.472 L1124.03 684.472 L1124.59 684.472 L1125.14 684.472 L1125.7 684.472 L1126.26 684.472 L1126.82 684.472 L1127.38 684.472 L1127.94 684.472 L1128.5 684.472 L1129.06 684.472 L1129.62 684.472 L1130.18 684.472 L1130.74 684.472 L1131.3 684.472 L1131.86 684.472 L1132.41 684.472 L1132.97 684.472 L1133.53 684.472 L1134.09 684.472 L1134.65 684.472 L1135.21 684.472 L1135.77 684.472 L1136.33 684.472 L1136.89 684.472 L1137.45 684.472 L1138.01 684.472 L1138.57 684.472 L1139.13 684.472 L1139.68 684.472 L1140.24 684.472 L1140.8 684.472 L1141.36 684.472 L1141.92 684.472 L1142.48 684.472 L1143.04 684.472 L1143.6 684.472 L1144.16 684.472 L1144.72 684.472 L1145.28 684.472 L1145.84 684.472 L1146.4 684.472 L1146.96 684.472 L1147.51 684.472 L1148.07 684.472 L1148.63 684.472 L1149.19 684.472 L1149.75 684.472 L1150.31 684.472 L1150.87 684.472 L1151.43 684.472 L1151.99 684.472 L1152.55 684.472 L1153.11 684.472 L1153.67 684.472 L1154.23 684.472 L1154.78 684.472 L1155.34 684.472 L1155.9 684.472 L1156.46 684.472 L1157.02 684.472 L1157.58 684.472 L1158.14 684.472 L1158.7 684.472 L1159.26 684.472 L1159.82 684.472 L1160.38 684.472 L1160.94 684.472 L1161.5 684.472 L1162.05 684.472 L1162.61 684.472 L1163.17 684.472 L1163.73 684.472 L1164.29 684.472 L1164.85 684.472 L1165.41 684.472 L1165.97 684.472 L1166.53 684.472 L1167.09 684.472 L1167.65 684.472 L1168.21 684.472 L1168.77 684.472 L1169.33 684.472 L1169.88 684.472 L1170.44 684.472 L1171 684.472 L1171.56 684.472 L1172.12 684.472 L1172.68 684.472 L1173.24 684.472 L1173.8 684.472 L1174.36 684.472 L1174.92 684.472 L1175.48 684.472 L1176.04 684.472 L1176.6 684.472 L1177.15 684.472 L1177.71 684.472 L1178.27 684.472 L1178.83 684.472 L1179.39 684.472 L1179.95 684.472 L1180.51 684.472 L1181.07 684.472 L1181.63 684.472 L1182.19 684.472 L1182.75 684.472 L1183.31 684.472 L1183.87 684.472 L1184.43 684.472 L1184.98 684.472 L1185.54 684.472 L1186.1 684.472 L1186.66 684.472 L1187.22 684.472 L1187.78 684.472 L1188.34 684.472 L1188.9 684.472 L1189.46 684.472 L1190.02 684.472 L1190.58 684.472 L1191.14 684.472 L1191.7 684.472 L1192.25 684.472 L1192.81 684.472 L1193.37 684.472 L1193.93 684.472 L1194.49 684.472 L1195.05 684.472 L1195.61 684.472 L1196.17 684.472 L1196.73 684.472 L1197.29 684.472 L1197.85 684.472 L1198.41 684.472 L1198.97 684.472 L1199.52 684.472 L1200.08 684.472 L1200.64 684.472 L1201.2 684.472 L1201.76 684.472 L1202.32 684.472 L1202.88 684.472 L1203.44 684.472 L1204 684.472 L1204.56 684.472 L1205.12 684.472 L1205.68 684.472 L1206.24 684.472 L1206.8 684.472 L1207.35 684.472 L1207.91 684.472 L1208.47 684.472 L1209.03 684.472 L1209.59 684.472 L1210.15 684.472 L1210.71 684.472 L1211.27 684.472 L1211.83 684.472 L1212.39 684.472 L1212.95 684.472 L1213.51 684.472 L1214.07 684.472 L1214.62 684.472 L1215.18 684.472 L1215.74 684.472 L1216.3 684.472 L1216.86 684.472 L1217.42 684.472 L1217.98 684.472 L1218.54 684.472 L1219.1 684.472 L1219.66 684.472 L1220.22 684.472 L1220.78 684.472 L1221.34 684.472 L1221.89 684.472 L1222.45 684.472 L1223.01 684.472 L1223.57 684.472 L1224.13 684.472 L1224.69 684.472 L1225.25 684.472 L1225.81 684.472 L1226.37 684.472 L1226.93 684.472 L1227.49 684.472 L1228.05 684.472 L1228.61 684.472 L1229.17 684.472 L1229.72 684.472 L1230.28 684.472 L1230.84 684.472 L1231.4 684.472 L1231.96 684.472 L1232.52 684.472 L1233.08 684.472 L1233.64 684.472 L1234.2 684.472 L1234.76 684.472 L1235.32 684.472 L1235.88 684.472 L1236.44 684.472 L1236.99 684.472 L1237.55 684.472 L1238.11 684.472 L1238.67 684.472 L1239.23 684.472 L1239.79 684.472 L1240.35 684.472 L1240.91 684.472 L1241.47 684.472 L1242.03 684.472 L1242.59 684.472 L1243.15 684.472 L1243.71 684.472 L1244.26 684.472 L1244.82 684.472 L1245.38 684.472 L1245.94 684.472 L1246.5 684.472 L1247.06 684.472 L1247.62 684.472 L1248.18 684.472 L1248.74 684.472 L1249.3 684.472 L1249.86 684.472 L1250.42 684.472 L1250.98 684.472 L1251.54 684.472 L1252.09 684.472 L1252.65 684.472 L1253.21 684.472 L1253.77 684.472 L1254.33 684.472 L1254.89 684.472 L1255.45 684.472 L1256.01 684.472 L1256.57 684.472 L1257.13 684.472 L1257.69 684.472 L1258.25 684.472 L1258.81 684.472 L1259.36 684.472 L1259.92 684.472 L1260.48 684.472 L1261.04 684.472 L1261.6 684.472 L1262.16 684.472 L1262.72 684.472 L1263.28 684.472 L1263.84 684.472 L1264.4 684.472 L1264.96 684.472 L1265.52 684.472 L1266.08 684.472 L1266.63 684.472 L1267.19 684.472 L1267.75 684.472 L1268.31 684.472 L1268.87 684.472 L1269.43 684.472 L1269.99 684.472 L1270.55 684.472 L1271.11 684.472 L1271.67 684.472 L1272.23 684.472 L1272.79 684.472 L1273.35 684.472 L1273.91 684.472 L1274.46 684.472 L1275.02 684.472 L1275.58 684.472 L1276.14 684.472 L1276.7 684.472 L1277.26 684.472 L1277.82 684.472 L1278.38 684.472 L1278.94 684.472 L1279.5 684.472 L1280.06 684.472 L1280.62 684.472 L1281.18 684.472 L1281.73 684.472 L1282.29 684.472 L1282.85 684.472 L1283.41 684.472 L1283.97 684.472 L1284.53 684.472 L1285.09 684.472 L1285.65 684.472 L1286.21 684.472 L1286.77 684.472 L1287.33 684.472 L1287.89 684.472 L1288.45 684.472 L1289 684.472 L1289.56 684.472 L1290.12 684.472 L1290.68 684.472 L1291.24 684.472 L1291.8 684.472 L1292.36 684.472 L1292.92 684.472 L1293.48 684.472 L1294.04 684.472 L1294.6 684.472 L1295.16 684.472 L1295.72 684.472 L1296.28 684.472 L1296.83 684.472 L1297.39 684.472 L1297.95 684.472 L1298.51 684.472 L1299.07 684.472 L1299.63 684.472 L1300.19 684.472 L1300.75 684.472 L1301.31 684.472 L1301.87 684.472 L1302.43 684.472 L1302.99 684.472 L1303.55 684.472 L1304.1 684.472 L1304.66 684.472 L1305.22 684.472 L1305.78 684.472 L1306.34 684.472 L1306.9 684.472 L1307.46 684.472 L1308.02 684.472 L1308.58 684.472 L1309.14 684.472 L1309.7 684.472 L1310.26 684.472 L1310.82 684.472 L1311.38 684.472 L1311.93 684.472 L1312.49 684.472 L1313.05 684.472 L1313.61 684.472 L1314.17 684.472 L1314.73 684.472 L1315.29 684.472 L1315.85 684.472 L1316.41 684.472 L1316.97 684.472 L1317.53 684.472 L1318.09 684.472 L1318.65 684.472 L1319.2 684.472 L1319.76 684.472 L1320.32 684.472 L1320.88 684.472 L1321.44 684.472 L1322 684.472 L1322.56 684.472 L1323.12 684.472 L1323.68 684.472 L1324.24 684.472 L1324.8 684.472 L1325.36 684.472 L1325.92 684.472 L1326.47 684.472 L1327.03 684.472 L1327.59 684.472 L1328.15 684.472 L1328.71 684.472 L1329.27 684.472 L1329.83 684.472 L1330.39 684.472 L1330.95 684.472 L1331.51 684.472 L1332.07 684.472 L1332.63 684.472 L1333.19 684.472 L1333.75 684.472 L1334.3 684.472 L1334.86 684.472 L1335.42 684.472 L1335.98 684.472 L1336.54 684.472 L1337.1 684.472 L1337.66 684.472 L1338.22 684.472 L1338.78 684.472 L1339.34 684.472 L1339.9 684.472 L1340.46 684.472 L1341.02 684.472 L1341.57 684.472 L1342.13 684.472 L1342.69 684.472 L1343.25 684.472 L1343.81 684.472 L1344.37 684.472 L1344.93 684.472 L1345.49 684.472 L1346.05 684.472 L1346.61 684.472 L1347.17 684.472 L1347.73 684.472 L1348.29 684.472 L1348.84 684.472 L1349.4 684.472 L1349.96 684.472 L1350.52 684.472 L1351.08 684.472 L1351.64 684.472 L1352.2 684.472 L1352.76 684.472 L1353.32 684.472 L1353.88 684.472 L1354.44 684.472 L1355 684.472 L1355.56 684.472 L1356.12 684.472 L1356.67 684.472 L1357.23 684.472 L1357.79 684.472 L1358.35 684.472 L1358.91 684.472 L1359.47 684.472 L1360.03 684.472 L1360.59 684.472 L1361.15 684.472 L1361.71 684.472 L1362.27 684.472 L1362.83 684.472 L1363.39 684.472 L1363.94 684.472 L1364.5 684.472 L1365.06 684.472 L1365.62 684.472 L1366.18 684.472 L1366.74 684.472 L1367.3 684.472 L1367.86 684.472 L1368.42 684.472 L1368.98 684.472 L1369.54 684.472 L1370.1 684.472 L1370.66 684.472 L1371.21 684.472 L1371.77 684.472 L1372.33 684.472 L1372.89 684.472 L1373.45 684.472 L1374.01 684.472 L1374.57 684.472 L1375.13 684.472 L1375.69 684.472 L1376.25 684.472 L1376.81 684.472 L1377.37 684.472 L1377.93 684.472 L1378.49 684.472 L1379.04 684.472 L1379.6 684.472 L1380.16 684.472 L1380.72 684.472 L1381.28 684.472 L1381.84 684.472 L1382.4 684.472 L1382.96 684.472 L1383.52 684.472 L1384.08 684.472 L1384.64 684.472 L1385.2 684.472 L1385.76 684.472 L1386.31 684.472 L1386.87 684.472 L1387.43 684.472 L1387.99 684.472 L1388.55 684.472 L1389.11 684.472 L1389.67 684.472 L1390.23 684.472 L1390.79 684.472 L1391.35 684.472 L1391.91 684.472 L1392.47 684.472 L1393.03 684.472 L1393.58 684.472 L1394.14 684.472 L1394.7 684.472 L1395.26 684.472 L1395.82 684.472 L1396.38 684.472 L1396.94 684.472 L1397.5 684.472 L1398.06 684.472 L1398.62 684.472 L1399.18 684.472 L1399.74 684.472 L1400.3 684.472 L1400.86 684.472 L1401.41 684.472 L1401.97 684.472 L1402.53 684.472 L1403.09 684.472 L1403.65 684.472 L1404.21 684.472 L1404.77 684.472 L1405.33 684.472 L1405.89 684.472 L1406.45 684.472 L1407.01 684.472 L1407.57 684.472 L1408.13 684.472 L1408.68 684.472 L1409.24 684.472 L1409.8 684.472 L1410.36 684.472 L1410.92 684.472 L1411.48 684.472 L1412.04 684.472 L1412.6 684.472 L1413.16 684.472 L1413.72 684.472 L1414.28 684.472 L1414.84 684.472 L1415.4 684.472 L1415.95 684.472 L1416.51 684.472 L1417.07 684.472 L1417.63 684.472 L1418.19 684.472 L1418.75 684.472 L1419.31 684.472 L1419.87 684.472 L1420.43 684.472 L1420.99 684.472 L1421.55 684.472 L1422.11 684.472 L1422.67 684.472 L1423.23 684.472 L1423.78 684.472 L1424.34 684.472 L1424.9 684.472 L1425.46 684.472 L1426.02 684.472 L1426.58 684.472 L1427.14 684.472 L1427.7 684.472 L1428.26 684.472 L1428.82 684.472 L1429.38 684.472 L1429.94 684.472 L1430.5 684.472 L1431.05 684.472 L1431.61 684.472 L1432.17 684.472 L1432.73 684.472 L1433.29 684.472 L1433.85 684.472 L1434.41 684.472 L1434.97 684.472 L1435.53 684.472 L1436.09 684.472 L1436.65 684.472 L1437.21 684.472 L1437.77 684.472 L1438.33 684.472 L1438.88 684.472 L1439.44 684.472 L1440 684.472 L1440.56 684.472 L1441.12 684.472 L1441.68 684.472 L1442.24 684.472 L1442.8 684.472 L1443.36 684.472 L1443.92 684.472 L1444.48 684.472 L1445.04 684.472 L1445.6 684.472 L1446.15 684.472 L1446.71 684.472 L1447.27 684.472 L1447.83 684.472 L1448.39 684.472 L1448.95 684.472 L1449.51 684.472 L1450.07 684.472 L1450.63 684.472 L1451.19 684.472 L1451.75 684.472 L1452.31 684.472 L1452.87 684.472 L1453.42 684.472 L1453.98 684.472 L1454.54 684.472 L1455.1 684.472 L1455.66 684.472 L1456.22 684.472 L1456.78 684.472 L1457.34 684.472 L1457.9 684.472 L1458.46 684.472 L1459.02 684.472 L1459.58 684.472 L1460.14 684.472 L1460.7 684.472 L1461.25 684.472 L1461.81 684.472 L1462.37 684.472 L1462.93 684.472 L1463.49 684.472 L1464.05 684.472 L1464.61 684.472 L1465.17 684.472 L1465.73 684.472 L1466.29 684.472 L1466.85 684.472 L1467.41 684.472 L1467.97 684.472 L1468.52 684.472 L1469.08 684.472 L1469.64 684.472 L1470.2 684.472 L1470.76 684.472 L1471.32 684.472 L1471.88 684.472 L1472.44 684.472 L1473 684.472 L1473.56 684.472 L1474.12 684.472 L1474.68 684.472 L1475.24 684.472 L1475.79 684.472 L1476.35 684.472 L1476.91 684.472 L1477.47 684.472 L1478.03 684.472 L1478.59 684.472 L1479.15 684.472 L1479.71 684.472 L1480.27 684.472 L1480.83 684.472 L1481.39 684.472 L1481.95 684.472 L1482.51 684.472 L1483.07 684.472 L1483.62 684.472 L1484.18 684.472 L1484.74 684.472 L1485.3 684.472 L1485.86 684.472 L1486.42 684.472 L1486.98 684.472 L1487.54 684.472 L1488.1 684.472 L1488.66 684.472 L1489.22 684.472 L1489.78 684.472 L1490.34 684.472 L1490.89 684.472 L1491.45 684.472 L1492.01 684.472 L1492.57 684.472 L1493.13 684.472 L1493.69 684.472 L1494.25 684.472 L1494.81 684.472 L1495.37 684.472 L1495.93 684.472 L1496.49 684.472 L1497.05 684.472 L1497.61 684.472 L1498.16 684.472 L1498.72 684.472 L1499.28 684.472 L1499.84 684.472 L1500.4 684.472 L1500.96 684.472 L1501.52 684.472 L1502.08 684.472 L1502.64 684.472 L1503.2 684.472 L1503.76 684.472 L1504.32 684.472 L1504.88 684.472 L1505.44 684.472 L1505.99 684.472 L1506.55 684.472 L1507.11 684.472 L1507.67 684.472 L1508.23 684.472 L1508.79 684.472 L1509.35 684.472 L1509.91 684.472 L1510.47 684.472 L1511.03 684.472 L1511.59 684.472 L1512.15 684.472 L1512.71 684.472 L1513.26 684.472 L1513.82 684.472 L1514.38 684.472 L1514.94 684.472 L1515.5 684.472 L1516.06 684.472 L1516.62 684.472 L1517.18 684.472 L1517.74 684.472 L1518.3 684.472 L1518.86 684.472 L1519.42 684.472 L1519.98 684.472 L1520.53 684.472 L1521.09 684.472 L1521.65 684.472 L1522.21 684.472 L1522.77 684.472 L1523.33 684.472 L1523.89 684.472 L1524.45 684.472 L1525.01 684.472 L1525.57 684.472 L1526.13 684.472 L1526.69 684.472 L1527.25 684.472 L1527.81 684.472 L1528.36 684.472 L1528.92 684.472 L1529.48 684.472 L1530.04 684.472 L1530.6 684.472 L1531.16 684.472 L1531.72 684.472 L1532.28 684.472 L1532.84 684.472 L1533.4 684.472 L1533.96 684.472 L1534.52 684.472 L1535.08 684.472 L1535.63 684.472 L1536.19 684.472 L1536.75 684.472 L1537.31 684.472 L1537.87 684.472 L1538.43 684.472 L1538.99 684.472 L1539.55 684.472 L1540.11 684.472 L1540.67 684.472 L1541.23 684.472 L1541.79 684.472 L1542.35 684.472 L1542.9 684.472 L1543.46 684.472 L1544.02 684.472 L1544.58 684.472 L1545.14 684.472 L1545.7 684.472 L1546.26 684.472 L1546.82 684.472 L1547.38 684.472 L1547.94 684.472 L1548.5 684.472 L1549.06 684.472 L1549.62 684.472 L1550.18 684.472 L1550.73 684.472 L1551.29 684.472 L1551.85 684.472 L1552.41 684.472 L1552.97 684.472 L1553.53 684.472 L1554.09 684.472 L1554.65 684.472 L1555.21 684.472 L1555.77 684.472 L1556.33 684.472 L1556.89 684.472 L1557.45 684.472 L1558 684.472 L1558.56 684.472 L1559.12 684.472 L1559.68 684.472 L1560.24 684.472 L1560.8 684.472 L1561.36 684.472 L1561.92 684.472 L1562.48 684.472 L1563.04 684.472 L1563.6 684.472 L1564.16 684.472 L1564.72 684.472 L1565.28 684.472 L1565.83 684.472 L1566.39 684.472 L1566.95 684.472 L1567.51 684.472 L1568.07 684.472 L1568.63 684.472 L1569.19 684.472 L1569.75 684.472 L1570.31 684.472 L1570.87 684.472 L1571.43 684.472 L1571.99 684.472 L1572.55 684.472 L1573.1 684.472 L1573.66 684.472 L1574.22 684.472 L1574.78 684.472 L1575.34 684.472 L1575.9 684.472 L1576.46 684.472 L1577.02 684.472 L1577.58 684.472 L1578.14 684.472 L1578.7 684.472 L1579.26 684.472 L1579.82 684.472 L1580.37 684.472 L1580.93 684.472 L1581.49 684.472 L1582.05 684.472 L1582.61 684.472 L1583.17 684.472 L1583.73 684.472 L1584.29 684.472 L1584.85 684.472 L1585.41 684.472 L1585.97 684.472 L1586.53 684.472 L1587.09 684.472 L1587.65 684.472 L1588.2 684.472 L1588.76 684.472 L1589.32 684.472 L1589.88 684.472 L1590.44 684.472 L1591 684.472 L1591.56 684.472 L1592.12 684.472 L1592.68 684.472 L1593.24 684.472 L1593.8 684.472 L1594.36 684.472 L1594.92 684.472 L1595.47 684.472 L1596.03 684.472 L1596.59 684.472 L1597.15 684.472 L1597.71 684.472 L1598.27 684.472 L1598.83 684.472 L1599.39 684.472 L1599.95 684.472 L1600.51 684.472 L1601.07 684.472 L1601.63 684.472 L1602.19 684.472 L1602.74 684.472 L1603.3 684.472 L1603.86 684.472 L1604.42 684.472 L1604.98 684.472 L1605.54 684.472 L1606.1 684.472 L1606.66 684.472 L1607.22 684.472 L1607.78 684.472 L1608.34 684.472 L1608.9 684.472 L1609.46 684.472 L1610.02 684.472 L1610.57 684.472 L1611.13 684.472 L1611.69 684.472 L1612.25 684.472 L1612.81 684.472 L1613.37 684.472 L1613.93 684.472 L1614.49 684.472 L1615.05 684.472 L1615.61 684.472 L1616.17 684.472 L1616.73 684.472 L1617.29 684.472 L1617.84 684.472 L1618.4 684.472 L1618.96 684.472 L1619.52 684.472 L1620.08 684.472 L1620.64 684.472 L1621.2 684.472 L1621.76 684.472 L1622.32 684.472 L1622.88 684.472 L1623.44 684.472 L1624 684.472 L1624.56 684.472 L1625.11 684.472 L1625.67 684.472 L1626.23 684.472 L1626.79 684.472 L1627.35 684.472 L1627.91 684.472 L1628.47 684.472 L1629.03 684.472 L1629.59 684.472 L1630.15 684.472 L1630.71 684.472 L1631.27 684.472 L1631.83 684.472 L1632.39 684.472 L1632.94 684.472 L1633.5 684.472 L1634.06 684.472 L1634.62 684.472 L1635.18 684.472 L1635.74 684.472 L1636.3 684.472 L1636.86 684.472 L1637.42 684.472 L1637.98 684.472 L1638.54 684.472 L1639.1 684.472 L1639.66 684.472 L1640.21 684.472 L1640.77 684.472 L1641.33 684.472 L1641.89 684.472 L1642.45 684.472 L1643.01 684.472 L1643.57 684.472 L1644.13 684.472 L1644.69 684.472 L1645.25 684.472 L1645.81 684.472 L1646.37 684.472 L1646.93 684.472 L1647.48 684.472 L1648.04 684.472 L1648.6 684.472 L1649.16 684.472 L1649.72 684.472 L1650.28 684.472 L1650.84 684.472 L1651.4 684.472 L1651.96 684.472 L1652.52 684.472 L1653.08 684.472 L1653.64 684.472 L1654.2 684.472 L1654.76 684.472 L1655.31 684.472 L1655.87 684.472 L1656.43 684.472 L1656.99 684.472 L1657.55 684.472 L1658.11 684.472 L1658.67 684.472 L1659.23 684.472 L1659.79 684.472 L1660.35 684.472 L1660.91 684.472 L1661.47 684.472 L1662.03 684.472 L1662.58 684.472 L1663.14 684.472 L1663.7 684.472 L1664.26 684.472 L1664.82 684.472 L1665.38 684.472 L1665.94 684.472 L1666.5 684.472 L1667.06 684.472 L1667.62 684.472 L1668.18 684.472 L1668.74 684.472 L1669.3 684.472 L1669.85 684.472 L1670.41 684.472 L1670.97 684.472 L1671.53 684.472 L1672.09 684.472 L1672.65 684.472 L1673.21 684.472 L1673.77 684.472 L1674.33 684.472 L1674.89 684.472 L1675.45 684.472 L1676.01 684.472 L1676.57 684.472 L1677.13 684.472 L1677.68 684.472 L1678.24 684.472 L1678.8 684.472 L1679.36 684.472 L1679.92 684.472 L1680.48 684.472 L1681.04 684.472 L1681.6 684.472 L1682.16 684.472 L1682.72 684.472 L1683.28 684.472 L1683.84 684.472 L1684.4 684.472 L1684.95 684.472 L1685.51 684.472 L1686.07 684.472 L1686.63 684.472 L1687.19 684.472 L1687.75 684.472 L1688.31 684.472 L1688.87 684.472 L1689.43 684.472 L1689.99 684.472 L1690.55 684.472 L1691.11 684.472 L1691.67 684.472 L1692.23 684.472 L1692.78 684.472 L1693.34 684.472 L1693.9 684.472 L1694.46 684.472 L1695.02 684.472 L1695.58 684.472 L1696.14 684.472 L1696.7 684.472 L1697.26 684.472 L1697.82 684.472 L1698.38 684.472 L1698.94 684.472 L1699.5 684.472 L1700.05 684.472 L1700.61 684.472 L1701.17 684.472 L1701.73 684.472 L1702.29 684.472 L1702.85 684.472 L1703.41 684.472 L1703.97 684.472 L1704.53 684.472 L1705.09 684.472 L1705.65 684.472 L1706.21 684.472 L1706.77 684.472 L1707.32 684.472 L1707.88 684.472 L1708.44 684.472 L1709 684.472 L1709.56 684.472 L1710.12 684.472 L1710.68 684.472 L1711.24 684.472 L1711.8 684.472 L1712.36 684.472 L1712.92 684.472 L1713.48 684.472 L1714.04 684.472 L1714.6 684.472 L1715.15 684.472 L1715.71 684.472 L1716.27 684.472 L1716.83 684.472 L1717.39 684.472 L1717.95 684.472 L1718.51 684.472 L1719.07 684.472 L1719.63 684.472 L1720.19 684.472 L1720.75 684.472 L1721.31 684.472 L1721.87 684.472 L1722.42 684.472 L1722.98 684.472 L1723.54 684.472 L1724.1 684.472 L1724.66 684.472 L1725.22 684.472 L1725.78 684.472 L1726.34 684.472 L1726.9 684.472 L1727.46 684.472 L1728.02 684.472 L1728.58 684.472 L1729.14 684.472 L1729.69 684.472 L1730.25 684.472 L1730.81 684.472 L1731.37 684.472 L1731.93 684.472 L1732.49 684.472 L1733.05 684.472 L1733.61 684.472 L1734.17 684.472 L1734.73 684.472 L1735.29 684.472 L1735.85 684.472 L1736.41 684.472 L1736.97 684.472 L1737.52 684.472 L1738.08 684.472 L1738.64 684.472 L1739.2 684.472 L1739.76 684.472 L1740.32 684.472 L1740.88 684.472 L1741.44 684.472 L1742 684.472 L1742.56 684.472 L1743.12 684.472 L1743.68 684.472 L1744.24 684.472 L1744.79 684.472 L1745.35 684.472 L1745.91 684.472 L1746.47 684.472 L1747.03 684.472 L1747.59 684.472 L1748.15 684.472 L1748.71 684.472 L1749.27 684.472 L1749.83 684.472 L1750.39 684.472 L1750.95 684.472 L1751.51 684.472 L1752.06 684.472 L1752.62 684.472 L1753.18 684.472 L1753.74 684.472 L1754.3 684.472 L1754.86 684.472 L1755.42 684.472 L1755.98 684.472 L1756.54 684.472 L1757.1 684.472 L1757.66 684.472 L1758.22 684.472 L1758.78 684.472 L1759.34 684.472 L1759.89 684.472 L1760.45 684.472 L1761.01 684.472 L1761.57 684.472 L1762.13 684.472 L1762.69 684.472 L1763.25 684.472 L1763.81 684.472 L1764.37 684.472 L1764.93 684.472 L1765.49 684.472 L1766.05 684.472 L1766.61 684.472 L1767.16 684.472 L1767.72 684.472 L1768.28 684.472 L1768.84 684.472 L1769.4 684.472 L1769.96 684.472 L1770.52 684.472 L1771.08 684.472 L1771.64 684.472 L1772.2 684.472 L1772.76 684.472 L1773.32 684.472 L1773.88 684.472 L1774.43 684.472 L1774.99 684.472 L1775.55 684.472 L1776.11 684.472 L1776.67 684.472 L1777.23 684.472 L1777.79 684.472 L1778.35 684.472 L1778.91 684.472 L1779.47 684.472 L1780.03 684.472 L1780.59 684.472 L1781.15 684.472 L1781.71 684.472 L1782.26 684.472 L1782.82 684.472 L1783.38 684.472 L1783.94 684.472 L1784.5 684.472 L1785.06 684.472 L1785.62 684.472 L1786.18 684.472 L1786.74 684.472 L1787.3 684.472 L1787.86 684.472 L1788.42 684.472 L1788.98 684.472 L1789.53 684.472 L1790.09 684.472 L1790.65 684.472 L1791.21 684.472 L1791.77 684.472 L1792.33 684.472 L1792.89 684.472 L1793.45 684.472 L1794.01 684.472 L1794.57 684.472 L1795.13 684.472 L1795.69 684.472 L1796.25 684.472 L1796.8 684.472 L1797.36 684.472 L1797.92 684.472 L1798.48 684.472 L1799.04 684.472 L1799.6 684.472 L1800.16 684.472 L1800.72 684.472 L1801.28 684.472 L1801.84 684.472 L1802.4 684.472 L1802.96 684.472 L1803.52 684.472 L1804.08 684.472 L1804.63 684.472 L1805.19 684.472 L1805.75 684.472 L1806.31 684.472 L1806.87 684.472 L1807.43 684.472 L1807.99 684.472 L1808.55 684.472 L1809.11 684.472 L1809.67 684.472 L1810.23 684.472 L1810.79 684.472 L1811.35 684.472 L1811.9 684.472 L1812.46 684.472 L1813.02 684.472 L1813.58 684.472 L1814.14 684.472 L1814.7 684.472 L1815.26 684.472 L1815.82 684.472 L1816.38 684.472 L1816.94 684.472 L1817.5 684.472 L1818.06 684.472 L1818.62 684.472 L1819.18 684.472 L1819.73 684.472 L1820.29 684.472 L1820.85 684.472 L1821.41 684.472 L1821.97 684.472 L1822.53 684.472 L1823.09 684.472 L1823.65 684.472 L1824.21 684.472 L1824.77 684.472 L1825.33 684.472 L1825.89 684.472 L1826.45 684.472 L1827 684.472 L1827.56 684.472 L1828.12 684.472 L1828.68 684.472 L1829.24 684.472 L1829.8 684.472 L1830.36 684.472 L1830.92 684.472 L1831.48 684.472 L1832.04 684.472 L1832.6 684.472 L1833.16 684.472 L1833.72 684.472 L1834.27 684.472 L1834.83 684.472 L1835.39 684.472 L1835.95 684.472 L1836.51 684.472 L1837.07 684.472 L1837.63 684.472 L1838.19 684.472 L1838.19 683.191 L1837.63 683.191 L1837.07 683.191 L1836.51 683.191 L1835.95 683.191 L1835.39 683.191 L1834.83 683.191 L1834.27 683.191 L1833.72 683.191 L1833.16 683.191 L1832.6 683.191 L1832.04 683.191 L1831.48 683.191 L1830.92 683.191 L1830.36 683.191 L1829.8 683.191 L1829.24 683.191 L1828.68 683.191 L1828.12 683.191 L1827.56 683.191 L1827 683.191 L1826.45 683.191 L1825.89 683.191 L1825.33 683.191 L1824.77 683.191 L1824.21 683.191 L1823.65 683.191 L1823.09 683.191 L1822.53 683.191 L1821.97 683.191 L1821.41 683.191 L1820.85 683.191 L1820.29 683.191 L1819.73 683.191 L1819.18 683.191 L1818.62 683.191 L1818.06 683.191 L1817.5 683.191 L1816.94 683.191 L1816.38 683.191 L1815.82 683.191 L1815.26 683.191 L1814.7 683.191 L1814.14 683.191 L1813.58 683.191 L1813.02 683.191 L1812.46 683.191 L1811.9 683.191 L1811.35 683.191 L1810.79 683.191 L1810.23 683.191 L1809.67 683.191 L1809.11 683.191 L1808.55 683.191 L1807.99 683.191 L1807.43 683.191 L1806.87 683.191 L1806.31 683.191 L1805.75 683.191 L1805.19 683.191 L1804.63 683.191 L1804.08 683.191 L1803.52 683.191 L1802.96 683.191 L1802.4 683.191 L1801.84 683.191 L1801.28 683.191 L1800.72 683.191 L1800.16 683.191 L1799.6 683.191 L1799.04 683.191 L1798.48 683.191 L1797.92 683.191 L1797.36 683.191 L1796.8 683.191 L1796.25 683.191 L1795.69 683.191 L1795.13 683.191 L1794.57 683.191 L1794.01 683.191 L1793.45 683.191 L1792.89 683.191 L1792.33 683.191 L1791.77 683.191 L1791.21 683.191 L1790.65 683.191 L1790.09 683.191 L1789.53 683.191 L1788.98 683.191 L1788.42 683.191 L1787.86 683.191 L1787.3 683.191 L1786.74 683.191 L1786.18 683.191 L1785.62 683.191 L1785.06 683.191 L1784.5 683.191 L1783.94 683.191 L1783.38 683.191 L1782.82 683.191 L1782.26 683.191 L1781.71 683.191 L1781.15 683.191 L1780.59 683.191 L1780.03 683.191 L1779.47 683.191 L1778.91 683.191 L1778.35 683.191 L1777.79 683.191 L1777.23 683.191 L1776.67 683.191 L1776.11 683.191 L1775.55 683.191 L1774.99 683.191 L1774.43 683.191 L1773.88 683.191 L1773.32 683.191 L1772.76 683.191 L1772.2 683.191 L1771.64 683.191 L1771.08 683.191 L1770.52 683.191 L1769.96 683.191 L1769.4 683.191 L1768.84 683.191 L1768.28 683.191 L1767.72 683.191 L1767.16 683.191 L1766.61 683.191 L1766.05 683.191 L1765.49 683.191 L1764.93 683.191 L1764.37 683.191 L1763.81 683.191 L1763.25 683.191 L1762.69 683.191 L1762.13 683.191 L1761.57 683.191 L1761.01 683.191 L1760.45 683.191 L1759.89 683.191 L1759.34 683.191 L1758.78 683.191 L1758.22 683.191 L1757.66 683.191 L1757.1 683.191 L1756.54 683.191 L1755.98 683.191 L1755.42 683.191 L1754.86 683.191 L1754.3 683.191 L1753.74 683.191 L1753.18 683.191 L1752.62 683.191 L1752.06 683.191 L1751.51 683.191 L1750.95 683.191 L1750.39 683.191 L1749.83 683.191 L1749.27 683.191 L1748.71 683.191 L1748.15 683.191 L1747.59 683.191 L1747.03 683.191 L1746.47 683.191 L1745.91 683.191 L1745.35 683.191 L1744.79 683.191 L1744.24 683.191 L1743.68 683.191 L1743.12 683.191 L1742.56 683.191 L1742 683.191 L1741.44 683.191 L1740.88 683.191 L1740.32 683.191 L1739.76 683.191 L1739.2 683.191 L1738.64 683.191 L1738.08 683.191 L1737.52 683.191 L1736.97 683.191 L1736.41 683.191 L1735.85 683.191 L1735.29 683.191 L1734.73 683.191 L1734.17 683.191 L1733.61 683.191 L1733.05 683.191 L1732.49 683.191 L1731.93 683.191 L1731.37 683.191 L1730.81 683.191 L1730.25 683.191 L1729.69 683.191 L1729.14 683.191 L1728.58 683.191 L1728.02 683.191 L1727.46 683.191 L1726.9 683.191 L1726.34 683.191 L1725.78 683.191 L1725.22 683.191 L1724.66 683.191 L1724.1 683.191 L1723.54 683.191 L1722.98 683.191 L1722.42 683.191 L1721.87 683.191 L1721.31 683.191 L1720.75 683.191 L1720.19 683.191 L1719.63 683.191 L1719.07 683.191 L1718.51 683.191 L1717.95 683.191 L1717.39 683.191 L1716.83 683.191 L1716.27 683.191 L1715.71 683.191 L1715.15 683.191 L1714.6 683.191 L1714.04 683.191 L1713.48 683.191 L1712.92 683.191 L1712.36 683.191 L1711.8 683.191 L1711.24 683.191 L1710.68 683.191 L1710.12 683.191 L1709.56 683.191 L1709 683.191 L1708.44 683.191 L1707.88 683.191 L1707.32 683.191 L1706.77 683.191 L1706.21 683.191 L1705.65 683.191 L1705.09 683.191 L1704.53 683.191 L1703.97 683.191 L1703.41 683.191 L1702.85 683.191 L1702.29 683.191 L1701.73 683.191 L1701.17 683.191 L1700.61 683.191 L1700.05 683.191 L1699.5 683.191 L1698.94 683.191 L1698.38 683.191 L1697.82 683.191 L1697.26 683.191 L1696.7 683.191 L1696.14 683.191 L1695.58 683.191 L1695.02 683.191 L1694.46 683.191 L1693.9 683.191 L1693.34 683.191 L1692.78 683.191 L1692.23 683.191 L1691.67 683.191 L1691.11 683.191 L1690.55 683.191 L1689.99 683.191 L1689.43 683.191 L1688.87 683.191 L1688.31 683.191 L1687.75 683.191 L1687.19 683.191 L1686.63 683.191 L1686.07 683.191 L1685.51 683.191 L1684.95 683.191 L1684.4 683.191 L1683.84 683.191 L1683.28 683.191 L1682.72 683.191 L1682.16 683.191 L1681.6 683.191 L1681.04 683.191 L1680.48 683.191 L1679.92 683.191 L1679.36 683.191 L1678.8 683.191 L1678.24 683.191 L1677.68 683.191 L1677.13 683.191 L1676.57 683.191 L1676.01 683.191 L1675.45 683.191 L1674.89 683.191 L1674.33 683.191 L1673.77 683.191 L1673.21 683.191 L1672.65 683.191 L1672.09 683.191 L1671.53 683.191 L1670.97 683.191 L1670.41 683.191 L1669.85 683.191 L1669.3 683.191 L1668.74 683.191 L1668.18 683.191 L1667.62 683.191 L1667.06 683.191 L1666.5 683.191 L1665.94 683.191 L1665.38 683.191 L1664.82 683.191 L1664.26 683.191 L1663.7 683.191 L1663.14 683.191 L1662.58 683.191 L1662.03 683.191 L1661.47 683.191 L1660.91 683.191 L1660.35 683.191 L1659.79 683.191 L1659.23 683.191 L1658.67 683.191 L1658.11 683.191 L1657.55 683.191 L1656.99 683.191 L1656.43 683.191 L1655.87 683.191 L1655.31 683.191 L1654.76 683.191 L1654.2 683.191 L1653.64 683.191 L1653.08 683.191 L1652.52 683.191 L1651.96 683.191 L1651.4 683.191 L1650.84 683.191 L1650.28 683.191 L1649.72 683.191 L1649.16 683.191 L1648.6 683.191 L1648.04 683.191 L1647.48 683.191 L1646.93 683.191 L1646.37 683.191 L1645.81 683.191 L1645.25 683.191 L1644.69 683.191 L1644.13 683.191 L1643.57 683.191 L1643.01 683.191 L1642.45 683.191 L1641.89 683.191 L1641.33 683.191 L1640.77 683.191 L1640.21 683.191 L1639.66 683.191 L1639.1 683.191 L1638.54 683.191 L1637.98 683.191 L1637.42 683.191 L1636.86 683.191 L1636.3 683.191 L1635.74 683.191 L1635.18 683.191 L1634.62 683.191 L1634.06 683.191 L1633.5 683.191 L1632.94 683.191 L1632.39 683.191 L1631.83 683.191 L1631.27 683.191 L1630.71 683.191 L1630.15 683.191 L1629.59 683.191 L1629.03 683.191 L1628.47 683.191 L1627.91 683.191 L1627.35 683.191 L1626.79 683.191 L1626.23 683.191 L1625.67 683.191 L1625.11 683.191 L1624.56 683.191 L1624 683.191 L1623.44 683.191 L1622.88 683.191 L1622.32 683.191 L1621.76 683.191 L1621.2 683.191 L1620.64 683.191 L1620.08 683.191 L1619.52 683.191 L1618.96 683.191 L1618.4 683.191 L1617.84 683.191 L1617.29 683.191 L1616.73 683.191 L1616.17 683.191 L1615.61 683.191 L1615.05 683.191 L1614.49 683.191 L1613.93 683.191 L1613.37 683.191 L1612.81 683.191 L1612.25 683.191 L1611.69 683.191 L1611.13 683.191 L1610.57 683.191 L1610.02 683.191 L1609.46 683.191 L1608.9 683.191 L1608.34 683.191 L1607.78 683.191 L1607.22 683.191 L1606.66 683.191 L1606.1 683.191 L1605.54 683.191 L1604.98 683.191 L1604.42 683.191 L1603.86 683.191 L1603.3 683.191 L1602.74 683.191 L1602.19 683.191 L1601.63 683.191 L1601.07 683.191 L1600.51 683.191 L1599.95 683.191 L1599.39 683.191 L1598.83 683.191 L1598.27 683.191 L1597.71 683.191 L1597.15 683.191 L1596.59 683.191 L1596.03 683.191 L1595.47 683.191 L1594.92 683.191 L1594.36 683.191 L1593.8 683.191 L1593.24 683.191 L1592.68 683.191 L1592.12 683.191 L1591.56 683.191 L1591 683.191 L1590.44 683.191 L1589.88 683.191 L1589.32 683.191 L1588.76 683.191 L1588.2 683.191 L1587.65 683.191 L1587.09 683.191 L1586.53 683.191 L1585.97 683.191 L1585.41 683.191 L1584.85 683.191 L1584.29 683.191 L1583.73 683.191 L1583.17 683.191 L1582.61 683.191 L1582.05 683.191 L1581.49 683.191 L1580.93 683.191 L1580.37 683.191 L1579.82 683.191 L1579.26 683.191 L1578.7 683.191 L1578.14 683.191 L1577.58 683.191 L1577.02 683.191 L1576.46 683.191 L1575.9 683.191 L1575.34 683.191 L1574.78 683.191 L1574.22 683.191 L1573.66 683.191 L1573.1 683.191 L1572.55 683.191 L1571.99 683.191 L1571.43 683.191 L1570.87 683.191 L1570.31 683.191 L1569.75 683.191 L1569.19 683.191 L1568.63 683.191 L1568.07 683.191 L1567.51 683.191 L1566.95 683.191 L1566.39 683.191 L1565.83 683.191 L1565.28 683.191 L1564.72 683.191 L1564.16 683.191 L1563.6 683.191 L1563.04 683.191 L1562.48 683.191 L1561.92 683.191 L1561.36 683.191 L1560.8 683.191 L1560.24 683.191 L1559.68 683.191 L1559.12 683.191 L1558.56 683.191 L1558 683.191 L1557.45 683.191 L1556.89 683.191 L1556.33 683.191 L1555.77 683.191 L1555.21 683.191 L1554.65 683.191 L1554.09 683.191 L1553.53 683.191 L1552.97 683.191 L1552.41 683.191 L1551.85 683.191 L1551.29 683.191 L1550.73 683.191 L1550.18 683.191 L1549.62 683.191 L1549.06 683.191 L1548.5 683.191 L1547.94 683.191 L1547.38 683.191 L1546.82 683.191 L1546.26 683.191 L1545.7 683.191 L1545.14 683.191 L1544.58 683.191 L1544.02 683.191 L1543.46 683.191 L1542.9 683.191 L1542.35 683.191 L1541.79 683.191 L1541.23 683.191 L1540.67 683.191 L1540.11 683.191 L1539.55 683.191 L1538.99 683.191 L1538.43 683.191 L1537.87 683.191 L1537.31 683.191 L1536.75 683.191 L1536.19 683.191 L1535.63 683.191 L1535.08 683.191 L1534.52 683.191 L1533.96 683.191 L1533.4 683.191 L1532.84 683.191 L1532.28 683.191 L1531.72 683.191 L1531.16 683.191 L1530.6 683.191 L1530.04 683.191 L1529.48 683.191 L1528.92 683.191 L1528.36 683.191 L1527.81 683.191 L1527.25 683.191 L1526.69 683.191 L1526.13 683.191 L1525.57 683.191 L1525.01 683.191 L1524.45 683.191 L1523.89 683.191 L1523.33 683.191 L1522.77 683.191 L1522.21 683.191 L1521.65 683.191 L1521.09 683.191 L1520.53 683.191 L1519.98 683.191 L1519.42 683.191 L1518.86 683.191 L1518.3 683.191 L1517.74 683.191 L1517.18 683.191 L1516.62 683.191 L1516.06 683.191 L1515.5 683.191 L1514.94 683.191 L1514.38 683.191 L1513.82 683.191 L1513.26 683.191 L1512.71 683.191 L1512.15 683.191 L1511.59 683.191 L1511.03 683.191 L1510.47 683.191 L1509.91 683.191 L1509.35 683.191 L1508.79 683.191 L1508.23 683.191 L1507.67 683.191 L1507.11 683.191 L1506.55 683.191 L1505.99 683.191 L1505.44 683.191 L1504.88 683.191 L1504.32 683.191 L1503.76 683.191 L1503.2 683.191 L1502.64 683.191 L1502.08 683.191 L1501.52 683.191 L1500.96 683.191 L1500.4 683.191 L1499.84 683.191 L1499.28 683.191 L1498.72 683.191 L1498.16 683.191 L1497.61 683.191 L1497.05 683.191 L1496.49 683.191 L1495.93 683.191 L1495.37 683.191 L1494.81 683.191 L1494.25 683.191 L1493.69 683.191 L1493.13 683.191 L1492.57 683.191 L1492.01 683.191 L1491.45 683.191 L1490.89 683.191 L1490.34 683.191 L1489.78 683.191 L1489.22 683.191 L1488.66 683.191 L1488.1 683.191 L1487.54 683.191 L1486.98 683.191 L1486.42 683.191 L1485.86 683.191 L1485.3 683.191 L1484.74 683.191 L1484.18 683.191 L1483.62 683.191 L1483.07 683.191 L1482.51 683.191 L1481.95 683.191 L1481.39 683.191 L1480.83 683.191 L1480.27 683.191 L1479.71 683.191 L1479.15 683.191 L1478.59 683.191 L1478.03 683.191 L1477.47 683.191 L1476.91 683.191 L1476.35 683.191 L1475.79 683.191 L1475.24 683.191 L1474.68 683.191 L1474.12 683.191 L1473.56 683.191 L1473 683.191 L1472.44 683.191 L1471.88 683.191 L1471.32 683.191 L1470.76 683.191 L1470.2 683.191 L1469.64 683.191 L1469.08 683.191 L1468.52 683.191 L1467.97 683.191 L1467.41 683.191 L1466.85 683.191 L1466.29 683.191 L1465.73 683.191 L1465.17 683.191 L1464.61 683.191 L1464.05 683.191 L1463.49 683.191 L1462.93 683.191 L1462.37 683.191 L1461.81 683.191 L1461.25 683.191 L1460.7 683.191 L1460.14 683.191 L1459.58 683.191 L1459.02 683.191 L1458.46 683.191 L1457.9 683.191 L1457.34 683.191 L1456.78 683.191 L1456.22 683.191 L1455.66 683.191 L1455.1 683.191 L1454.54 683.191 L1453.98 683.191 L1453.42 683.191 L1452.87 683.191 L1452.31 683.191 L1451.75 683.191 L1451.19 683.191 L1450.63 683.191 L1450.07 683.191 L1449.51 683.191 L1448.95 683.191 L1448.39 683.191 L1447.83 683.191 L1447.27 683.191 L1446.71 683.191 L1446.15 683.191 L1445.6 683.191 L1445.04 683.191 L1444.48 683.191 L1443.92 683.191 L1443.36 683.191 L1442.8 683.191 L1442.24 683.191 L1441.68 683.191 L1441.12 683.191 L1440.56 683.191 L1440 683.191 L1439.44 683.191 L1438.88 683.191 L1438.33 683.191 L1437.77 683.191 L1437.21 683.191 L1436.65 683.191 L1436.09 683.191 L1435.53 683.191 L1434.97 683.191 L1434.41 683.191 L1433.85 683.191 L1433.29 683.191 L1432.73 683.191 L1432.17 683.191 L1431.61 683.191 L1431.05 683.191 L1430.5 683.191 L1429.94 683.191 L1429.38 683.191 L1428.82 683.191 L1428.26 683.191 L1427.7 683.191 L1427.14 683.191 L1426.58 683.191 L1426.02 683.191 L1425.46 683.191 L1424.9 683.191 L1424.34 683.191 L1423.78 683.191 L1423.23 683.191 L1422.67 683.191 L1422.11 683.191 L1421.55 683.191 L1420.99 683.191 L1420.43 683.191 L1419.87 683.191 L1419.31 683.191 L1418.75 683.191 L1418.19 683.191 L1417.63 683.191 L1417.07 683.191 L1416.51 683.191 L1415.95 683.191 L1415.4 683.191 L1414.84 683.191 L1414.28 683.191 L1413.72 683.191 L1413.16 683.191 L1412.6 683.191 L1412.04 683.191 L1411.48 683.191 L1410.92 683.191 L1410.36 683.191 L1409.8 683.191 L1409.24 683.191 L1408.68 683.191 L1408.13 683.191 L1407.57 683.191 L1407.01 683.191 L1406.45 683.191 L1405.89 683.191 L1405.33 683.191 L1404.77 683.191 L1404.21 683.191 L1403.65 683.191 L1403.09 683.191 L1402.53 683.191 L1401.97 683.191 L1401.41 683.191 L1400.86 683.191 L1400.3 683.191 L1399.74 683.191 L1399.18 683.191 L1398.62 683.191 L1398.06 683.191 L1397.5 683.191 L1396.94 683.191 L1396.38 683.191 L1395.82 683.191 L1395.26 683.191 L1394.7 683.191 L1394.14 683.191 L1393.58 683.191 L1393.03 683.191 L1392.47 683.191 L1391.91 683.191 L1391.35 683.191 L1390.79 683.191 L1390.23 683.191 L1389.67 683.191 L1389.11 683.191 L1388.55 683.191 L1387.99 683.191 L1387.43 683.191 L1386.87 683.191 L1386.31 683.191 L1385.76 683.191 L1385.2 683.191 L1384.64 683.191 L1384.08 683.191 L1383.52 683.191 L1382.96 683.191 L1382.4 683.191 L1381.84 683.191 L1381.28 683.191 L1380.72 683.191 L1380.16 683.191 L1379.6 683.191 L1379.04 683.191 L1378.49 683.191 L1377.93 683.191 L1377.37 683.191 L1376.81 683.191 L1376.25 683.191 L1375.69 683.191 L1375.13 683.191 L1374.57 683.191 L1374.01 683.191 L1373.45 683.191 L1372.89 683.191 L1372.33 683.191 L1371.77 683.191 L1371.21 683.191 L1370.66 683.191 L1370.1 683.191 L1369.54 683.191 L1368.98 683.191 L1368.42 683.191 L1367.86 683.191 L1367.3 683.191 L1366.74 683.191 L1366.18 683.191 L1365.62 683.191 L1365.06 683.191 L1364.5 683.191 L1363.94 683.191 L1363.39 683.191 L1362.83 683.191 L1362.27 683.191 L1361.71 683.191 L1361.15 683.191 L1360.59 683.191 L1360.03 683.191 L1359.47 683.191 L1358.91 683.191 L1358.35 683.191 L1357.79 683.191 L1357.23 683.191 L1356.67 683.191 L1356.12 683.191 L1355.56 683.191 L1355 683.191 L1354.44 683.191 L1353.88 683.191 L1353.32 683.191 L1352.76 683.191 L1352.2 683.191 L1351.64 683.191 L1351.08 683.191 L1350.52 683.191 L1349.96 683.191 L1349.4 683.191 L1348.84 683.191 L1348.29 683.191 L1347.73 683.191 L1347.17 683.191 L1346.61 683.191 L1346.05 683.191 L1345.49 683.191 L1344.93 683.191 L1344.37 683.191 L1343.81 683.191 L1343.25 683.191 L1342.69 683.191 L1342.13 683.191 L1341.57 683.191 L1341.02 683.191 L1340.46 683.191 L1339.9 683.191 L1339.34 683.191 L1338.78 683.191 L1338.22 683.191 L1337.66 683.191 L1337.1 683.191 L1336.54 683.191 L1335.98 683.191 L1335.42 683.191 L1334.86 683.191 L1334.3 683.191 L1333.75 683.191 L1333.19 683.191 L1332.63 683.191 L1332.07 683.191 L1331.51 683.191 L1330.95 683.191 L1330.39 683.191 L1329.83 683.191 L1329.27 683.191 L1328.71 683.191 L1328.15 683.191 L1327.59 683.191 L1327.03 683.191 L1326.47 683.191 L1325.92 683.191 L1325.36 683.191 L1324.8 683.191 L1324.24 683.191 L1323.68 683.191 L1323.12 683.191 L1322.56 683.191 L1322 683.191 L1321.44 683.191 L1320.88 683.191 L1320.32 683.191 L1319.76 683.191 L1319.2 683.191 L1318.65 683.191 L1318.09 683.191 L1317.53 683.191 L1316.97 683.191 L1316.41 683.191 L1315.85 683.191 L1315.29 683.191 L1314.73 683.191 L1314.17 683.191 L1313.61 683.191 L1313.05 683.191 L1312.49 683.191 L1311.93 683.191 L1311.38 683.191 L1310.82 683.191 L1310.26 683.191 L1309.7 683.191 L1309.14 683.191 L1308.58 683.191 L1308.02 683.191 L1307.46 683.191 L1306.9 683.191 L1306.34 683.191 L1305.78 683.191 L1305.22 683.191 L1304.66 683.191 L1304.1 683.191 L1303.55 683.191 L1302.99 683.191 L1302.43 683.191 L1301.87 683.191 L1301.31 683.191 L1300.75 683.191 L1300.19 683.191 L1299.63 683.191 L1299.07 683.191 L1298.51 683.191 L1297.95 683.191 L1297.39 683.191 L1296.83 683.191 L1296.28 683.191 L1295.72 683.191 L1295.16 683.191 L1294.6 683.191 L1294.04 683.191 L1293.48 683.191 L1292.92 683.191 L1292.36 683.191 L1291.8 683.191 L1291.24 683.191 L1290.68 683.191 L1290.12 683.191 L1289.56 683.191 L1289 683.191 L1288.45 683.191 L1287.89 683.191 L1287.33 683.191 L1286.77 683.191 L1286.21 683.191 L1285.65 683.191 L1285.09 683.191 L1284.53 683.191 L1283.97 683.191 L1283.41 683.191 L1282.85 683.191 L1282.29 683.191 L1281.73 683.191 L1281.18 683.191 L1280.62 683.191 L1280.06 683.191 L1279.5 683.191 L1278.94 683.191 L1278.38 683.191 L1277.82 683.191 L1277.26 683.191 L1276.7 683.191 L1276.14 683.191 L1275.58 683.191 L1275.02 683.191 L1274.46 683.191 L1273.91 683.191 L1273.35 683.191 L1272.79 683.191 L1272.23 683.191 L1271.67 683.191 L1271.11 683.191 L1270.55 683.191 L1269.99 683.191 L1269.43 683.191 L1268.87 683.191 L1268.31 683.191 L1267.75 683.191 L1267.19 683.191 L1266.63 683.191 L1266.08 683.191 L1265.52 683.191 L1264.96 683.191 L1264.4 683.191 L1263.84 683.191 L1263.28 683.191 L1262.72 683.191 L1262.16 683.191 L1261.6 683.191 L1261.04 683.191 L1260.48 683.191 L1259.92 683.191 L1259.36 683.191 L1258.81 683.191 L1258.25 683.191 L1257.69 683.191 L1257.13 683.191 L1256.57 683.191 L1256.01 683.191 L1255.45 683.191 L1254.89 683.191 L1254.33 683.191 L1253.77 683.191 L1253.21 683.191 L1252.65 683.191 L1252.09 683.191 L1251.54 683.191 L1250.98 683.191 L1250.42 683.191 L1249.86 683.191 L1249.3 683.191 L1248.74 683.191 L1248.18 683.191 L1247.62 683.191 L1247.06 683.191 L1246.5 683.191 L1245.94 683.191 L1245.38 683.191 L1244.82 683.191 L1244.26 683.191 L1243.71 683.191 L1243.15 683.191 L1242.59 683.191 L1242.03 683.191 L1241.47 683.191 L1240.91 683.191 L1240.35 683.191 L1239.79 683.191 L1239.23 683.191 L1238.67 683.191 L1238.11 683.191 L1237.55 683.191 L1236.99 683.191 L1236.44 683.191 L1235.88 683.191 L1235.32 683.191 L1234.76 683.191 L1234.2 683.191 L1233.64 683.191 L1233.08 683.191 L1232.52 683.191 L1231.96 683.191 L1231.4 683.191 L1230.84 683.191 L1230.28 683.191 L1229.72 683.191 L1229.17 683.191 L1228.61 683.191 L1228.05 683.191 L1227.49 683.191 L1226.93 683.191 L1226.37 683.191 L1225.81 683.191 L1225.25 683.191 L1224.69 683.191 L1224.13 683.191 L1223.57 683.191 L1223.01 683.191 L1222.45 683.191 L1221.89 683.191 L1221.34 683.191 L1220.78 683.191 L1220.22 683.191 L1219.66 683.191 L1219.1 683.191 L1218.54 683.191 L1217.98 683.191 L1217.42 683.191 L1216.86 683.191 L1216.3 683.191 L1215.74 683.191 L1215.18 683.191 L1214.62 683.191 L1214.07 683.191 L1213.51 683.191 L1212.95 683.191 L1212.39 683.191 L1211.83 683.191 L1211.27 683.191 L1210.71 683.191 L1210.15 683.191 L1209.59 683.191 L1209.03 683.191 L1208.47 683.191 L1207.91 683.191 L1207.35 683.191 L1206.8 683.191 L1206.24 683.191 L1205.68 683.191 L1205.12 683.191 L1204.56 683.191 L1204 683.191 L1203.44 683.191 L1202.88 683.191 L1202.32 683.191 L1201.76 683.191 L1201.2 683.191 L1200.64 683.191 L1200.08 683.191 L1199.52 683.191 L1198.97 683.191 L1198.41 683.191 L1197.85 683.191 L1197.29 683.191 L1196.73 683.191 L1196.17 683.191 L1195.61 683.191 L1195.05 683.191 L1194.49 683.191 L1193.93 683.191 L1193.37 683.191 L1192.81 683.191 L1192.25 683.191 L1191.7 683.191 L1191.14 683.191 L1190.58 683.191 L1190.02 683.191 L1189.46 683.191 L1188.9 683.191 L1188.34 683.191 L1187.78 683.191 L1187.22 683.191 L1186.66 683.191 L1186.1 683.191 L1185.54 683.191 L1184.98 683.191 L1184.43 683.191 L1183.87 683.191 L1183.31 683.191 L1182.75 683.191 L1182.19 683.191 L1181.63 683.191 L1181.07 683.191 L1180.51 683.191 L1179.95 683.191 L1179.39 683.191 L1178.83 683.191 L1178.27 683.191 L1177.71 683.191 L1177.15 683.191 L1176.6 683.191 L1176.04 683.191 L1175.48 683.191 L1174.92 683.191 L1174.36 683.191 L1173.8 683.191 L1173.24 683.191 L1172.68 683.191 L1172.12 683.191 L1171.56 683.191 L1171 683.191 L1170.44 683.191 L1169.88 683.191 L1169.33 683.191 L1168.77 683.191 L1168.21 683.191 L1167.65 683.191 L1167.09 683.191 L1166.53 683.191 L1165.97 683.191 L1165.41 683.191 L1164.85 683.191 L1164.29 683.191 L1163.73 683.191 L1163.17 683.191 L1162.61 683.191 L1162.05 683.191 L1161.5 683.191 L1160.94 683.191 L1160.38 683.191 L1159.82 683.191 L1159.26 683.191 L1158.7 683.191 L1158.14 683.191 L1157.58 683.191 L1157.02 683.191 L1156.46 683.191 L1155.9 683.191 L1155.34 683.191 L1154.78 683.191 L1154.23 683.191 L1153.67 683.191 L1153.11 683.191 L1152.55 683.191 L1151.99 683.191 L1151.43 683.191 L1150.87 683.191 L1150.31 683.191 L1149.75 683.191 L1149.19 683.191 L1148.63 683.191 L1148.07 683.191 L1147.51 683.191 L1146.96 683.191 L1146.4 683.191 L1145.84 683.191 L1145.28 683.191 L1144.72 683.191 L1144.16 683.191 L1143.6 683.191 L1143.04 683.191 L1142.48 683.191 L1141.92 683.191 L1141.36 683.191 L1140.8 683.191 L1140.24 683.191 L1139.68 683.191 L1139.13 683.191 L1138.57 683.191 L1138.01 683.191 L1137.45 683.191 L1136.89 683.191 L1136.33 683.191 L1135.77 683.191 L1135.21 683.191 L1134.65 683.191 L1134.09 683.191 L1133.53 683.191 L1132.97 683.191 L1132.41 683.191 L1131.86 683.191 L1131.3 683.191 L1130.74 683.191 L1130.18 683.191 L1129.62 683.191 L1129.06 683.191 L1128.5 683.191 L1127.94 683.191 L1127.38 683.191 L1126.82 683.191 L1126.26 683.191 L1125.7 683.191 L1125.14 683.191 L1124.59 683.191 L1124.03 683.191 L1123.47 683.191 L1122.91 683.191 L1122.35 683.191 L1121.79 683.191 L1121.23 683.191 L1120.67 683.191 L1120.11 683.191 L1119.55 683.191 L1118.99 683.191 L1118.43 683.191 L1117.87 683.191 L1117.31 683.191 L1116.76 683.191 L1116.2 683.191 L1115.64 683.191 L1115.08 683.191 L1114.52 683.191 L1113.96 683.191 L1113.4 683.191 L1112.84 683.191 L1112.28 683.191 L1111.72 683.191 L1111.16 683.191 L1110.6 683.191 L1110.04 683.191 L1109.49 683.191 L1108.93 683.191 L1108.37 683.191 L1107.81 683.191 L1107.25 683.191 L1106.69 683.191 L1106.13 683.191 L1105.57 683.191 L1105.01 683.191 L1104.45 683.191 L1103.89 683.191 L1103.33 683.191 L1102.77 683.191 L1102.22 683.191 L1101.66 683.191 L1101.1 683.191 L1100.54 683.191 L1099.98 683.191 L1099.42 683.191 L1098.86 683.191 L1098.3 683.191 L1097.74 683.191 L1097.18 683.191 L1096.62 683.191 L1096.06 683.191 L1095.5 683.191 L1094.94 683.191 L1094.39 683.191 L1093.83 683.191 L1093.27 683.191 L1092.71 683.191 L1092.15 683.191 L1091.59 683.191 L1091.03 683.191 L1090.47 683.191 L1089.91 683.191 L1089.35 683.191 L1088.79 683.191 L1088.23 683.191 L1087.67 683.191 L1087.12 683.191 L1086.56 683.191 L1086 683.191 L1085.44 683.191 L1084.88 683.191 L1084.32 683.191 L1083.76 683.191 L1083.2 683.191 L1082.64 683.191 L1082.08 683.191 L1081.52 683.191 L1080.96 683.191 L1080.4 683.191 L1079.85 683.191 L1079.29 683.191 L1078.73 683.191 L1078.17 683.191 L1077.61 683.191 L1077.05 683.191 L1076.49 683.191 L1075.93 683.191 L1075.37 683.191 L1074.81 683.191 L1074.25 683.191 L1073.69 683.191 L1073.13 683.191 L1072.57 683.191 L1072.02 683.191 L1071.46 683.191 L1070.9 683.191 L1070.34 683.191 L1069.78 683.191 L1069.22 683.191 L1068.66 683.191 L1068.1 683.191 L1067.54 683.191 L1066.98 683.191 L1066.42 683.191 L1065.86 683.191 L1065.3 683.191 L1064.75 683.191 L1064.19 683.191 L1063.63 683.191 L1063.07 683.191 L1062.51 683.191 L1061.95 683.191 L1061.39 683.191 L1060.83 683.191 L1060.27 683.191 L1059.71 683.191 L1059.15 683.191 L1058.59 683.191 L1058.03 683.191 L1057.48 683.191 L1056.92 683.191 L1056.36 683.191 L1055.8 683.191 L1055.24 683.191 L1054.68 683.191 L1054.12 683.191 L1053.56 683.191 L1053 683.191 L1052.44 683.191 L1051.88 683.191 L1051.32 683.191 L1050.76 683.191 L1050.2 683.191 L1049.65 683.191 L1049.09 683.191 L1048.53 683.191 L1047.97 683.191 L1047.41 683.191 L1046.85 683.191 L1046.29 683.191 L1045.73 683.191 L1045.17 683.191 L1044.61 683.191 L1044.05 683.191 L1043.49 683.191 L1042.93 683.191 L1042.38 683.191 L1041.82 683.191 L1041.26 683.191 L1040.7 683.191 L1040.14 683.191 L1039.58 683.191 L1039.02 683.191 L1038.46 683.191 L1037.9 683.191 L1037.34 683.191 L1036.78 683.191 L1036.22 683.191 L1035.66 683.191 L1035.1 683.191 L1034.55 683.191 L1033.99 683.191 L1033.43 683.191 L1032.87 683.191 L1032.31 683.191 L1031.75 683.191 L1031.19 683.191 L1030.63 683.191 L1030.07 683.191 L1029.51 683.191 L1028.95 683.191 L1028.39 683.191 L1027.83 683.191 L1027.28 683.191 L1026.72 683.191 L1026.16 683.191 L1025.6 683.191 L1025.04 683.191 L1024.48 683.191 L1023.92 683.191 L1023.36 683.191 L1022.8 683.191 L1022.24 683.191 L1021.68 683.191 L1021.12 683.191 L1020.56 683.191 L1020.01 683.191 L1019.45 683.191 L1018.89 683.191 L1018.33 683.191 L1017.77 683.191 L1017.21 683.191 L1016.65 683.191 L1016.09 683.191 L1015.53 683.191 L1014.97 683.191 L1014.41 683.191 L1013.85 683.191 L1013.29 683.191 L1012.73 683.191 L1012.18 683.191 L1011.62 683.191 L1011.06 683.191 L1010.5 683.191 L1009.94 683.191 L1009.38 683.191 L1008.82 683.191 L1008.26 683.191 L1007.7 683.191 L1007.14 683.191 L1006.58 683.191 L1006.02 683.191 L1005.46 683.191 L1004.91 683.191 L1004.35 683.191 L1003.79 683.191 L1003.23 683.191 L1002.67 683.191 L1002.11 683.191 L1001.55 683.191 L1000.99 683.191 L1000.43 683.191 L999.872 683.191 L999.313 683.191 L998.754 683.191 L998.194 683.191 L997.635 683.191 L997.076 683.191 L996.517 683.191 L995.957 683.191 L995.398 683.191 L994.839 683.191 L994.28 683.191 L993.72 683.191 L993.161 683.191 L992.602 683.191 L992.043 683.191 L991.483 683.191 L990.924 683.191 L990.365 683.191 L989.806 683.191 L989.246 683.191 L988.687 683.191 L988.128 683.191 L987.569 683.191 L987.009 683.191 L986.45 683.191 L985.891 683.191 L985.332 683.191 L984.772 683.191 L984.213 683.191 L983.654 683.191 L983.095 683.191 L982.535 683.191 L981.976 683.191 L981.417 683.191 L980.858 683.191 L980.298 683.191 L979.739 683.191 L979.18 683.191 L978.621 683.191 L978.061 683.191 L977.502 683.191 L976.943 683.191 L976.384 683.191 L975.824 683.191 L975.265 683.191 L974.706 683.191 L974.147 683.191 L973.587 683.191 L973.028 683.191 L972.469 683.191 L971.91 683.191 L971.35 683.191 L970.791 683.191 L970.232 683.191 L969.673 683.191 L969.113 683.191 L968.554 683.191 L967.995 683.191 L967.436 683.191 L966.876 683.191 L966.317 683.191 L965.758 683.191 L965.199 683.191 L964.639 683.191 L964.08 683.191 L963.521 683.191 L962.962 683.191 L962.402 683.191 L961.843 683.191 L961.284 683.191 L960.725 683.191 L960.165 683.191 L959.606 683.191 L959.047 683.191 L958.488 683.191 L957.928 683.191 L957.369 683.191 L956.81 683.191 L956.251 683.191 L955.691 683.191 L955.132 683.191 L954.573 683.191 L954.014 683.191 L953.454 683.191 L952.895 683.191 L952.336 683.191 L951.777 683.191 L951.217 683.191 L950.658 683.191 L950.099 683.191 L949.54 683.191 L948.98 683.191 L948.421 683.191 L947.862 683.191 L947.303 683.191 L946.743 683.191 L946.184 683.191 L945.625 683.191 L945.066 683.191 L944.506 683.191 L943.947 683.191 L943.388 683.191 L942.829 683.191 L942.269 683.191 L941.71 683.191 L941.151 683.191 L940.592 683.191 L940.032 683.191 L939.473 683.191 L938.914 683.191 L938.355 683.191 L937.795 683.191 L937.236 683.191 L936.677 683.191 L936.118 683.191 L935.558 683.191 L934.999 683.191 L934.44 683.191 L933.881 683.191 L933.321 683.191 L932.762 683.191 L932.203 683.191 L931.644 683.191 L931.084 683.191 L930.525 683.191 L929.966 683.191 L929.406 683.191 L928.847 683.191 L928.288 683.191 L927.729 683.191 L927.169 683.191 L926.61 683.191 L926.051 683.191 L925.492 683.191 L924.932 683.191 L924.373 683.191 L923.814 683.191 L923.255 683.191 L922.695 683.191 L922.136 683.191 L921.577 683.191 L921.018 683.191 L920.458 683.191 L919.899 683.191 L919.34 683.191 L918.781 683.191 L918.221 683.191 L917.662 683.191 L917.103 683.191 L916.544 683.191 L915.984 683.191 L915.425 683.191 L914.866 683.191 L914.307 683.191 L913.747 683.191 L913.188 683.191 L912.629 683.191 L912.07 683.191 L911.51 683.191 L910.951 683.191 L910.392 683.191 L909.833 683.191 L909.273 683.191 L908.714 683.191 L908.155 683.191 L907.596 683.191 L907.036 683.191 L906.477 683.191 L905.918 683.191 L905.359 683.191 L904.799 683.191 L904.24 683.191 L903.681 683.191 L903.122 683.191 L902.562 683.191 L902.003 683.191 L901.444 683.191 L900.885 683.191 L900.325 683.191 L899.766 683.191 L899.207 683.191 L898.648 683.191 L898.088 683.191 L897.529 683.191 L896.97 683.191 L896.411 683.191 L895.851 683.191 L895.292 683.191 L894.733 683.191 L894.174 683.191 L893.614 683.191 L893.055 683.191 L892.496 683.191 L891.937 683.191 L891.377 683.191 L890.818 683.191 L890.259 683.191 L889.7 683.191 L889.14 683.191 L888.581 683.191 L888.022 683.191 L887.463 683.191 L886.903 683.191 L886.344 683.191 L885.785 683.191 L885.226 683.191 L884.666 683.191 L884.107 683.191 L883.548 683.191 L882.989 683.191 L882.429 683.191 L881.87 683.191 L881.311 683.191 L880.752 683.191 L880.192 683.191 L879.633 683.191 L879.074 683.191 L878.515 683.191 L877.955 683.191 L877.396 683.191 L876.837 683.191 L876.278 683.191 L875.718 683.191 L875.159 683.191 L874.6 683.191 L874.041 683.191 L873.481 683.191 L872.922 683.191 L872.363 683.191 L871.804 683.191 L871.244 683.191 L870.685 683.191 L870.126 683.191 L869.567 683.191 L869.007 683.191 L868.448 683.191 L867.889 683.191 L867.33 683.191 L866.77 683.191 L866.211 683.191 L865.652 683.191 L865.093 683.191 L864.533 683.191 L863.974 683.191 L863.415 683.191 L862.856 683.191 L862.296 683.191 L861.737 683.191 L861.178 683.191 L860.619 683.191 L860.059 683.191 L859.5 683.191 L858.941 683.191 L858.382 683.191 L857.822 683.191 L857.263 683.191 L856.704 683.191 L856.145 683.191 L855.585 683.191 L855.026 683.191 L854.467 683.191 L853.908 683.191 L853.348 683.191 L852.789 683.191 L852.23 683.191 L851.671 683.191 L851.111 683.191 L850.552 683.191 L849.993 683.191 L849.434 683.191 L848.874 683.191 L848.315 683.191 L847.756 683.191 L847.197 683.191 L846.637 683.191 L846.078 683.191 L845.519 683.191 L844.96 683.191 L844.4 683.191 L843.841 683.191 L843.282 683.191 L842.723 683.191 L842.163 683.191 L841.604 683.191 L841.045 683.191 L840.486 683.191 L839.926 683.191 L839.367 683.191 L838.808 683.191 L838.249 683.191 L837.689 683.191 L837.13 683.191 L836.571 683.191 L836.012 683.191 L835.452 683.191 L834.893 683.191 L834.334 683.191 L833.775 683.191 L833.215 683.191 L832.656 683.191 L832.097 683.191 L831.538 683.191 L830.978 683.191 L830.419 683.191 L829.86 683.191 L829.301 683.191 L828.741 683.191 L828.182 683.191 L827.623 683.191 L827.064 683.191 L826.504 683.191 L825.945 683.191 L825.386 683.191 L824.827 683.191 L824.267 683.191 L823.708 683.191 L823.149 683.191 L822.59 683.191 L822.03 683.191 L821.471 683.191 L820.912 683.191 L820.353 683.191 L819.793 683.191 L819.234 683.191 L818.675 683.191 L818.116 683.191 L817.556 683.191 L816.997 683.191 L816.438 683.191 L815.879 683.191 L815.319 683.191 L814.76 683.191 L814.201 683.191 L813.642 683.191 L813.082 683.191 L812.523 683.191 L811.964 683.191 L811.405 683.191 L810.845 683.191 L810.286 683.191 L809.727 683.191 L809.168 683.191 L808.608 683.191 L808.049 683.191 L807.49 683.191 L806.931 683.191 L806.371 683.191 L805.812 683.191 L805.253 683.191 L804.693 683.191 L804.134 683.191 L803.575 683.191 L803.016 683.191 L802.456 683.191 L801.897 683.191 L801.338 683.191 L800.779 683.191 L800.219 683.191 L799.66 683.191 L799.101 683.191 L798.542 683.191 L797.982 683.191 L797.423 683.191 L796.864 683.191 L796.305 683.191 L795.745 683.191 L795.186 683.191 L794.627 683.191 L794.068 683.191 L793.508 683.191 L792.949 683.191 L792.39 683.191 L791.831 683.191 L791.271 683.191 L790.712 683.191 L790.153 683.191 L789.594 683.191 L789.034 683.191 L788.475 683.191 L787.916 683.191 L787.357 683.191 L786.797 683.191 L786.238 683.191 L785.679 683.191 L785.12 683.191 L784.56 683.191 L784.001 683.191 L783.442 683.191 L782.883 683.191 L782.323 683.191 L781.764 683.191 L781.205 683.191 L780.646 683.191 L780.086 683.191 L779.527 683.191 L778.968 683.191 L778.409 683.191 L777.849 683.191 L777.29 683.191 L776.731 683.191 L776.172 683.191 L775.612 683.191 L775.053 683.191 L774.494 683.191 L773.935 683.191 L773.375 683.191 L772.816 683.191 L772.257 683.191 L771.698 683.191 L771.138 683.191 L770.579 683.191 L770.02 683.191 L769.461 683.191 L768.901 683.191 L768.342 683.191 L767.783 683.191 L767.224 683.191 L766.664 683.191 L766.105 683.191 L765.546 683.191 L764.987 683.191 L764.427 683.191 L763.868 683.191 L763.309 683.191 L762.75 683.191 L762.19 683.191 L761.631 683.191 L761.072 683.191 L760.513 683.191 L759.953 683.191 L759.394 683.191 L758.835 683.191 L758.276 683.191 L757.716 683.191 L757.157 683.191 L756.598 683.191 L756.039 683.191 L755.479 683.191 L754.92 683.191 L754.361 683.191 L753.802 683.191 L753.242 683.191 L752.683 683.191 L752.124 683.191 L751.565 683.191 L751.005 683.191 L750.446 683.191 L749.887 683.191 L749.328 683.191 L748.768 683.191 L748.209 683.191 L747.65 683.191 L747.091 683.191 L746.531 683.191 L745.972 683.191 L745.413 683.191 L744.854 683.191 L744.294 683.191 L743.735 683.191 L743.176 683.191 L742.617 683.191 L742.057 683.191 L741.498 683.191 L740.939 683.191 L740.38 683.191 L739.82 683.191 L739.261 683.191 L738.702 683.191 L738.143 683.191 L737.583 683.191 L737.024 683.191 L736.465 683.191 L735.906 683.191 L735.346 683.191 L734.787 683.191 L734.228 683.191 L733.669 683.191 L733.109 683.191 L732.55 683.191 L731.991 683.191 L731.432 683.191 L730.872 683.191 L730.313 683.191 L729.754 683.191 L729.195 683.191 L728.635 683.191 L728.076 683.191 L727.517 683.191 L726.958 683.191 L726.398 683.191 L725.839 683.191 L725.28 683.191 L724.721 683.191 L724.161 683.191 L723.602 683.191 L723.043 683.191 L722.484 683.191 L721.924 683.191 L721.365 683.191 L720.806 683.191 L720.247 683.191  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.813 720.806,683.813 721.365,683.813 721.924,683.813 722.484,683.813 723.043,683.813 723.602,683.813 724.161,683.813 724.721,683.813 725.28,683.813 725.839,683.813 726.398,683.813 726.958,683.813 727.517,683.813 728.076,683.813 728.635,683.813 729.195,683.813 729.754,683.813 730.313,683.813 730.872,683.813 731.432,683.813 731.991,683.813 732.55,683.813 733.109,683.813 733.669,683.813 734.228,683.813 734.787,683.813 735.346,683.813 735.906,683.813 736.465,683.813 737.024,683.813 737.583,683.813 738.143,683.813 738.702,683.813 739.261,683.813 739.82,683.813 740.38,683.813 740.939,683.813 741.498,683.813 742.057,683.813 742.617,683.813 743.176,683.813 743.735,683.813 744.294,683.813 744.854,683.813 745.413,683.813 745.972,683.813 746.531,683.813 747.091,683.813 747.65,683.813 748.209,683.813 748.768,683.813 749.328,683.813 749.887,683.813 750.446,683.813 751.005,683.813 751.565,683.813 752.124,683.813 752.683,683.813 753.242,683.813 753.802,683.813 754.361,683.813 754.92,683.813 755.479,683.813 756.039,683.813 756.598,683.813 757.157,683.813 757.716,683.813 758.276,683.813 758.835,683.813 759.394,683.813 759.953,683.813 760.513,683.813 761.072,683.813 761.631,683.813 762.19,683.813 762.75,683.813 763.309,683.813 763.868,683.813 764.427,683.813 764.987,683.813 765.546,683.813 766.105,683.813 766.664,683.813 767.224,683.813 767.783,683.813 768.342,683.813 768.901,683.813 769.461,683.813 770.02,683.813 770.579,683.813 771.138,683.813 771.698,683.813 772.257,683.813 772.816,683.813 773.375,683.813 773.935,683.813 774.494,683.813 775.053,683.813 775.612,683.813 776.172,683.813 776.731,683.813 777.29,683.813 777.849,683.813 778.409,683.813 778.968,683.813 779.527,683.813 780.086,683.813 780.646,683.813 781.205,683.813 781.764,683.813 782.323,683.813 782.883,683.813 783.442,683.813 784.001,683.813 784.56,683.813 785.12,683.813 785.679,683.813 786.238,683.813 786.797,683.813 787.357,683.813 787.916,683.813 788.475,683.813 789.034,683.813 789.594,683.813 790.153,683.813 790.712,683.813 791.271,683.813 791.831,683.813 792.39,683.813 792.949,683.813 793.508,683.813 794.068,683.813 794.627,683.813 795.186,683.813 795.745,683.813 796.305,683.813 796.864,683.813 797.423,683.813 797.982,683.813 798.542,683.813 799.101,683.813 799.66,683.813 800.219,683.813 800.779,683.813 801.338,683.813 801.897,683.813 802.456,683.813 803.016,683.813 803.575,683.813 804.134,683.813 804.693,683.813 805.253,683.813 805.812,683.813 806.371,683.813 806.931,683.813 807.49,683.813 808.049,683.813 808.608,683.813 809.168,683.813 809.727,683.813 810.286,683.813 810.845,683.813 811.405,683.813 811.964,683.813 812.523,683.813 813.082,683.813 813.642,683.813 814.201,683.813 814.76,683.813 815.319,683.813 815.879,683.813 816.438,683.813 816.997,683.813 817.556,683.813 818.116,683.813 818.675,683.813 819.234,683.813 819.793,683.813 820.353,683.813 820.912,683.813 821.471,683.813 822.03,683.813 822.59,683.813 823.149,683.813 823.708,683.813 824.267,683.813 824.827,683.813 825.386,683.813 825.945,683.813 826.504,683.813 827.064,683.813 827.623,683.813 828.182,683.813 828.741,683.813 829.301,683.813 829.86,683.813 830.419,683.813 830.978,683.813 831.538,683.813 832.097,683.813 832.656,683.813 833.215,683.813 833.775,683.813 834.334,683.813 834.893,683.813 835.452,683.813 836.012,683.813 836.571,683.813 837.13,683.813 837.689,683.813 838.249,683.813 838.808,683.813 839.367,683.813 839.926,683.813 840.486,683.813 841.045,683.813 841.604,683.813 842.163,683.813 842.723,683.813 843.282,683.813 843.841,683.813 844.4,683.813 844.96,683.813 845.519,683.813 846.078,683.813 846.637,683.813 847.197,683.813 847.756,683.813 848.315,683.813 848.874,683.813 849.434,683.813 849.993,683.813 850.552,683.813 851.111,683.813 851.671,683.813 852.23,683.813 852.789,683.813 853.348,683.813 853.908,683.813 854.467,683.813 855.026,683.813 855.585,683.813 856.145,683.813 856.704,683.813 857.263,683.813 857.822,683.813 858.382,683.813 858.941,683.813 859.5,683.813 860.059,683.813 860.619,683.813 861.178,683.813 861.737,683.813 862.296,683.813 862.856,683.813 863.415,683.813 863.974,683.813 864.533,683.813 865.093,683.813 865.652,683.813 866.211,683.813 866.77,683.813 867.33,683.813 867.889,683.813 868.448,683.813 869.007,683.813 869.567,683.813 870.126,683.813 870.685,683.813 871.244,683.813 871.804,683.813 872.363,683.813 872.922,683.813 873.481,683.813 874.041,683.813 874.6,683.813 875.159,683.813 875.718,683.813 876.278,683.813 876.837,683.813 877.396,683.813 877.955,683.813 878.515,683.813 879.074,683.813 879.633,683.813 880.192,683.813 880.752,683.813 881.311,683.813 881.87,683.813 882.429,683.813 882.989,683.813 883.548,683.813 884.107,683.813 884.666,683.813 885.226,683.813 885.785,683.813 886.344,683.813 886.903,683.813 887.463,683.813 888.022,683.813 888.581,683.813 889.14,683.813 889.7,683.813 890.259,683.813 890.818,683.813 891.377,683.813 891.937,683.813 892.496,683.813 893.055,683.813 893.614,683.813 894.174,683.813 894.733,683.813 895.292,683.813 895.851,683.813 896.411,683.813 896.97,683.813 897.529,683.813 898.088,683.813 898.648,683.813 899.207,683.813 899.766,683.813 900.325,683.813 900.885,683.813 901.444,683.813 902.003,683.813 902.562,683.813 903.122,683.813 903.681,683.813 904.24,683.813 904.799,683.813 905.359,683.813 905.918,683.813 906.477,683.813 907.036,683.813 907.596,683.813 908.155,683.813 908.714,683.813 909.273,683.813 909.833,683.813 910.392,683.813 910.951,683.813 911.51,683.813 912.07,683.813 912.629,683.813 913.188,683.813 913.747,683.813 914.307,683.813 914.866,683.813 915.425,683.813 915.984,683.813 916.544,683.813 917.103,683.813 917.662,683.813 918.221,683.813 918.781,683.813 919.34,683.813 919.899,683.813 920.458,683.813 921.018,683.813 921.577,683.813 922.136,683.813 922.695,683.813 923.255,683.813 923.814,683.813 924.373,683.813 924.932,683.813 925.492,683.813 926.051,683.813 926.61,683.813 927.169,683.813 927.729,683.813 928.288,683.813 928.847,683.813 929.406,683.813 929.966,683.813 930.525,683.813 931.084,683.813 931.644,683.813 932.203,683.813 932.762,683.813 933.321,683.813 933.881,683.813 934.44,683.813 934.999,683.813 935.558,683.813 936.118,683.813 936.677,683.813 937.236,683.813 937.795,683.813 938.355,683.813 938.914,683.813 939.473,683.813 940.032,683.813 940.592,683.813 941.151,683.813 941.71,683.813 942.269,683.813 942.829,683.813 943.388,683.813 943.947,683.813 944.506,683.813 945.066,683.813 945.625,683.813 946.184,683.813 946.743,683.813 947.303,683.813 947.862,683.813 948.421,683.813 948.98,683.813 949.54,683.813 950.099,683.813 950.658,683.813 951.217,683.813 951.777,683.813 952.336,683.813 952.895,683.813 953.454,683.813 954.014,683.813 954.573,683.813 955.132,683.813 955.691,683.813 956.251,683.813 956.81,683.813 957.369,683.813 957.928,683.813 958.488,683.813 959.047,683.813 959.606,683.813 960.165,683.813 960.725,683.813 961.284,683.813 961.843,683.813 962.402,683.813 962.962,683.813 963.521,683.813 964.08,683.813 964.639,683.813 965.199,683.813 965.758,683.813 966.317,683.813 966.876,683.813 967.436,683.813 967.995,683.813 968.554,683.813 969.113,683.813 969.673,683.813 970.232,683.813 970.791,683.813 971.35,683.813 971.91,683.813 972.469,683.813 973.028,683.813 973.587,683.813 974.147,683.813 974.706,683.813 975.265,683.813 975.824,683.813 976.384,683.813 976.943,683.813 977.502,683.813 978.061,683.813 978.621,683.813 979.18,683.813 979.739,683.813 980.298,683.813 980.858,683.813 981.417,683.813 981.976,683.813 982.535,683.813 983.095,683.813 983.654,683.813 984.213,683.813 984.772,683.813 985.332,683.813 985.891,683.813 986.45,683.813 987.009,683.813 987.569,683.813 988.128,683.813 988.687,683.813 989.246,683.813 989.806,683.813 990.365,683.813 990.924,683.813 991.483,683.813 992.043,683.813 992.602,683.813 993.161,683.813 993.72,683.813 994.28,683.813 994.839,683.813 995.398,683.813 995.957,683.813 996.517,683.813 997.076,683.813 997.635,683.813 998.194,683.813 998.754,683.813 999.313,683.813 999.872,683.813 1000.43,683.813 1000.99,683.813 1001.55,683.813 1002.11,683.813 1002.67,683.813 1003.23,683.813 1003.79,683.813 1004.35,683.813 1004.91,683.813 1005.46,683.813 1006.02,683.813 1006.58,683.813 1007.14,683.813 1007.7,683.813 1008.26,683.813 1008.82,683.813 1009.38,683.813 1009.94,683.813 1010.5,683.813 1011.06,683.813 1011.62,683.813 1012.18,683.813 1012.73,683.813 1013.29,683.813 1013.85,683.813 1014.41,683.813 1014.97,683.813 1015.53,683.813 1016.09,683.813 1016.65,683.813 1017.21,683.813 1017.77,683.813 1018.33,683.813 1018.89,683.813 1019.45,683.813 1020.01,683.813 1020.56,683.813 1021.12,683.813 1021.68,683.813 1022.24,683.813 1022.8,683.813 1023.36,683.813 1023.92,683.813 1024.48,683.813 1025.04,683.813 1025.6,683.813 1026.16,683.813 1026.72,683.813 1027.28,683.813 1027.83,683.813 1028.39,683.813 1028.95,683.813 1029.51,683.813 1030.07,683.813 1030.63,683.813 1031.19,683.813 1031.75,683.813 1032.31,683.813 1032.87,683.813 1033.43,683.813 1033.99,683.813 1034.55,683.813 1035.1,683.813 1035.66,683.813 1036.22,683.813 1036.78,683.813 1037.34,683.813 1037.9,683.813 1038.46,683.813 1039.02,683.813 1039.58,683.813 1040.14,683.813 1040.7,683.813 1041.26,683.813 1041.82,683.813 1042.38,683.813 1042.93,683.813 1043.49,683.813 1044.05,683.813 1044.61,683.813 1045.17,683.813 1045.73,683.813 1046.29,683.813 1046.85,683.813 1047.41,683.813 1047.97,683.813 1048.53,683.813 1049.09,683.813 1049.65,683.813 1050.2,683.813 1050.76,683.813 1051.32,683.813 1051.88,683.813 1052.44,683.813 1053,683.813 1053.56,683.813 1054.12,683.813 1054.68,683.813 1055.24,683.813 1055.8,683.813 1056.36,683.813 1056.92,683.813 1057.48,683.813 1058.03,683.813 1058.59,683.813 1059.15,683.813 1059.71,683.813 1060.27,683.813 1060.83,683.813 1061.39,683.813 1061.95,683.813 1062.51,683.813 1063.07,683.813 1063.63,683.813 1064.19,683.813 1064.75,683.813 1065.3,683.813 1065.86,683.813 1066.42,683.813 1066.98,683.813 1067.54,683.813 1068.1,683.813 1068.66,683.813 1069.22,683.813 1069.78,683.813 1070.34,683.813 1070.9,683.813 1071.46,683.813 1072.02,683.813 1072.57,683.813 1073.13,683.813 1073.69,683.813 1074.25,683.813 1074.81,683.813 1075.37,683.813 1075.93,683.813 1076.49,683.813 1077.05,683.813 1077.61,683.813 1078.17,683.813 1078.73,683.813 1079.29,683.813 1079.85,683.813 1080.4,683.813 1080.96,683.813 1081.52,683.813 1082.08,683.813 1082.64,683.813 1083.2,683.813 1083.76,683.813 1084.32,683.813 1084.88,683.813 1085.44,683.813 1086,683.813 1086.56,683.813 1087.12,683.813 1087.67,683.813 1088.23,683.813 1088.79,683.813 1089.35,683.813 1089.91,683.813 1090.47,683.813 1091.03,683.813 1091.59,683.813 1092.15,683.813 1092.71,683.813 1093.27,683.813 1093.83,683.813 1094.39,683.813 1094.94,683.813 1095.5,683.813 1096.06,683.813 1096.62,683.813 1097.18,683.813 1097.74,683.813 1098.3,683.813 1098.86,683.813 1099.42,683.813 1099.98,683.813 1100.54,683.813 1101.1,683.813 1101.66,683.813 1102.22,683.813 1102.77,683.813 1103.33,683.813 1103.89,683.813 1104.45,683.813 1105.01,683.813 1105.57,683.813 1106.13,683.813 1106.69,683.813 1107.25,683.813 1107.81,683.813 1108.37,683.813 1108.93,683.813 1109.49,683.813 1110.04,683.813 1110.6,683.813 1111.16,683.813 1111.72,683.813 1112.28,683.813 1112.84,683.813 1113.4,683.813 1113.96,683.813 1114.52,683.813 1115.08,683.813 1115.64,683.813 1116.2,683.813 1116.76,683.813 1117.31,683.813 1117.87,683.813 1118.43,683.813 1118.99,683.813 1119.55,683.813 1120.11,683.813 1120.67,683.813 1121.23,683.813 1121.79,683.813 1122.35,683.813 1122.91,683.813 1123.47,683.813 1124.03,683.813 1124.59,683.813 1125.14,683.813 1125.7,683.813 1126.26,683.813 1126.82,683.813 1127.38,683.813 1127.94,683.813 1128.5,683.813 1129.06,683.813 1129.62,683.813 1130.18,683.813 1130.74,683.813 1131.3,683.813 1131.86,683.813 1132.41,683.813 1132.97,683.813 1133.53,683.813 1134.09,683.813 1134.65,683.813 1135.21,683.813 1135.77,683.813 1136.33,683.813 1136.89,683.813 1137.45,683.813 1138.01,683.813 1138.57,683.813 1139.13,683.813 1139.68,683.813 1140.24,683.813 1140.8,683.813 1141.36,683.813 1141.92,683.813 1142.48,683.813 1143.04,683.813 1143.6,683.813 1144.16,683.813 1144.72,683.813 1145.28,683.813 1145.84,683.813 1146.4,683.813 1146.96,683.813 1147.51,683.813 1148.07,683.813 1148.63,683.813 1149.19,683.813 1149.75,683.813 1150.31,683.813 1150.87,683.813 1151.43,683.813 1151.99,683.813 1152.55,683.813 1153.11,683.813 1153.67,683.813 1154.23,683.813 1154.78,683.813 1155.34,683.813 1155.9,683.813 1156.46,683.813 1157.02,683.813 1157.58,683.813 1158.14,683.813 1158.7,683.813 1159.26,683.813 1159.82,683.813 1160.38,683.813 1160.94,683.813 1161.5,683.813 1162.05,683.813 1162.61,683.813 1163.17,683.813 1163.73,683.813 1164.29,683.813 1164.85,683.813 1165.41,683.813 1165.97,683.813 1166.53,683.813 1167.09,683.813 1167.65,683.813 1168.21,683.813 1168.77,683.813 1169.33,683.813 1169.88,683.813 1170.44,683.813 1171,683.813 1171.56,683.813 1172.12,683.813 1172.68,683.813 1173.24,683.813 1173.8,683.813 1174.36,683.813 1174.92,683.813 1175.48,683.813 1176.04,683.813 1176.6,683.813 1177.15,683.813 1177.71,683.813 1178.27,683.813 1178.83,683.813 1179.39,683.813 1179.95,683.813 1180.51,683.813 1181.07,683.813 1181.63,683.813 1182.19,683.813 1182.75,683.813 1183.31,683.813 1183.87,683.813 1184.43,683.813 1184.98,683.813 1185.54,683.813 1186.1,683.813 1186.66,683.813 1187.22,683.813 1187.78,683.813 1188.34,683.813 1188.9,683.813 1189.46,683.813 1190.02,683.813 1190.58,683.813 1191.14,683.813 1191.7,683.813 1192.25,683.813 1192.81,683.813 1193.37,683.813 1193.93,683.813 1194.49,683.813 1195.05,683.813 1195.61,683.813 1196.17,683.813 1196.73,683.813 1197.29,683.813 1197.85,683.813 1198.41,683.813 1198.97,683.813 1199.52,683.813 1200.08,683.813 1200.64,683.813 1201.2,683.813 1201.76,683.813 1202.32,683.813 1202.88,683.813 1203.44,683.813 1204,683.813 1204.56,683.813 1205.12,683.813 1205.68,683.813 1206.24,683.813 1206.8,683.813 1207.35,683.813 1207.91,683.813 1208.47,683.813 1209.03,683.813 1209.59,683.813 1210.15,683.813 1210.71,683.813 1211.27,683.813 1211.83,683.813 1212.39,683.813 1212.95,683.813 1213.51,683.813 1214.07,683.813 1214.62,683.813 1215.18,683.813 1215.74,683.813 1216.3,683.813 1216.86,683.813 1217.42,683.813 1217.98,683.813 1218.54,683.813 1219.1,683.813 1219.66,683.813 1220.22,683.813 1220.78,683.813 1221.34,683.813 1221.89,683.813 1222.45,683.813 1223.01,683.813 1223.57,683.813 1224.13,683.813 1224.69,683.813 1225.25,683.813 1225.81,683.813 1226.37,683.813 1226.93,683.813 1227.49,683.813 1228.05,683.813 1228.61,683.813 1229.17,683.813 1229.72,683.813 1230.28,683.813 1230.84,683.813 1231.4,683.813 1231.96,683.813 1232.52,683.813 1233.08,683.813 1233.64,683.813 1234.2,683.813 1234.76,683.813 1235.32,683.813 1235.88,683.813 1236.44,683.813 1236.99,683.813 1237.55,683.813 1238.11,683.813 1238.67,683.813 1239.23,683.813 1239.79,683.813 1240.35,683.813 1240.91,683.813 1241.47,683.813 1242.03,683.813 1242.59,683.813 1243.15,683.813 1243.71,683.813 1244.26,683.813 1244.82,683.813 1245.38,683.813 1245.94,683.813 1246.5,683.813 1247.06,683.813 1247.62,683.813 1248.18,683.813 1248.74,683.813 1249.3,683.813 1249.86,683.813 1250.42,683.813 1250.98,683.813 1251.54,683.813 1252.09,683.813 1252.65,683.813 1253.21,683.813 1253.77,683.813 1254.33,683.813 1254.89,683.813 1255.45,683.813 1256.01,683.813 1256.57,683.813 1257.13,683.813 1257.69,683.813 1258.25,683.813 1258.81,683.813 1259.36,683.813 1259.92,683.813 1260.48,683.813 1261.04,683.813 1261.6,683.813 1262.16,683.813 1262.72,683.813 1263.28,683.813 1263.84,683.813 1264.4,683.813 1264.96,683.813 1265.52,683.813 1266.08,683.813 1266.63,683.813 1267.19,683.813 1267.75,683.813 1268.31,683.813 1268.87,683.813 1269.43,683.813 1269.99,683.813 1270.55,683.813 1271.11,683.813 1271.67,683.813 1272.23,683.813 1272.79,683.813 1273.35,683.813 1273.91,683.813 1274.46,683.813 1275.02,683.813 1275.58,683.813 1276.14,683.813 1276.7,683.813 1277.26,683.813 1277.82,683.813 1278.38,683.813 1278.94,683.813 1279.5,683.813 1280.06,683.813 1280.62,683.813 1281.18,683.813 1281.73,683.813 1282.29,683.813 1282.85,683.813 1283.41,683.813 1283.97,683.813 1284.53,683.813 1285.09,683.813 1285.65,683.813 1286.21,683.813 1286.77,683.813 1287.33,683.813 1287.89,683.813 1288.45,683.813 1289,683.813 1289.56,683.813 1290.12,683.813 1290.68,683.813 1291.24,683.813 1291.8,683.813 1292.36,683.813 1292.92,683.813 1293.48,683.813 1294.04,683.813 1294.6,683.813 1295.16,683.813 1295.72,683.813 1296.28,683.813 1296.83,683.813 1297.39,683.813 1297.95,683.813 1298.51,683.813 1299.07,683.813 1299.63,683.813 1300.19,683.813 1300.75,683.813 1301.31,683.813 1301.87,683.813 1302.43,683.813 1302.99,683.813 1303.55,683.813 1304.1,683.813 1304.66,683.813 1305.22,683.813 1305.78,683.813 1306.34,683.813 1306.9,683.813 1307.46,683.813 1308.02,683.813 1308.58,683.813 1309.14,683.813 1309.7,683.813 1310.26,683.813 1310.82,683.813 1311.38,683.813 1311.93,683.813 1312.49,683.813 1313.05,683.813 1313.61,683.813 1314.17,683.813 1314.73,683.813 1315.29,683.813 1315.85,683.813 1316.41,683.813 1316.97,683.813 1317.53,683.813 1318.09,683.813 1318.65,683.813 1319.2,683.813 1319.76,683.813 1320.32,683.813 1320.88,683.813 1321.44,683.813 1322,683.813 1322.56,683.813 1323.12,683.813 1323.68,683.813 1324.24,683.813 1324.8,683.813 1325.36,683.813 1325.92,683.813 1326.47,683.813 1327.03,683.813 1327.59,683.813 1328.15,683.813 1328.71,683.813 1329.27,683.813 1329.83,683.813 1330.39,683.813 1330.95,683.813 1331.51,683.813 1332.07,683.813 1332.63,683.813 1333.19,683.813 1333.75,683.813 1334.3,683.813 1334.86,683.813 1335.42,683.813 1335.98,683.813 1336.54,683.813 1337.1,683.813 1337.66,683.813 1338.22,683.813 1338.78,683.813 1339.34,683.813 1339.9,683.813 1340.46,683.813 1341.02,683.813 1341.57,683.813 1342.13,683.813 1342.69,683.813 1343.25,683.813 1343.81,683.813 1344.37,683.813 1344.93,683.813 1345.49,683.813 1346.05,683.813 1346.61,683.813 1347.17,683.813 1347.73,683.813 1348.29,683.813 1348.84,683.813 1349.4,683.813 1349.96,683.813 1350.52,683.813 1351.08,683.813 1351.64,683.813 1352.2,683.813 1352.76,683.813 1353.32,683.813 1353.88,683.813 1354.44,683.813 1355,683.813 1355.56,683.813 1356.12,683.813 1356.67,683.813 1357.23,683.813 1357.79,683.813 1358.35,683.813 1358.91,683.813 1359.47,683.813 1360.03,683.813 1360.59,683.813 1361.15,683.813 1361.71,683.813 1362.27,683.813 1362.83,683.813 1363.39,683.813 1363.94,683.813 1364.5,683.813 1365.06,683.813 1365.62,683.813 1366.18,683.813 1366.74,683.813 1367.3,683.813 1367.86,683.813 1368.42,683.813 1368.98,683.813 1369.54,683.813 1370.1,683.813 1370.66,683.813 1371.21,683.813 1371.77,683.813 1372.33,683.813 1372.89,683.813 1373.45,683.813 1374.01,683.813 1374.57,683.813 1375.13,683.813 1375.69,683.813 1376.25,683.813 1376.81,683.813 1377.37,683.813 1377.93,683.813 1378.49,683.813 1379.04,683.813 1379.6,683.813 1380.16,683.813 1380.72,683.813 1381.28,683.813 1381.84,683.813 1382.4,683.813 1382.96,683.813 1383.52,683.813 1384.08,683.813 1384.64,683.813 1385.2,683.813 1385.76,683.813 1386.31,683.813 1386.87,683.813 1387.43,683.813 1387.99,683.813 1388.55,683.813 1389.11,683.813 1389.67,683.813 1390.23,683.813 1390.79,683.813 1391.35,683.813 1391.91,683.813 1392.47,683.813 1393.03,683.813 1393.58,683.813 1394.14,683.813 1394.7,683.813 1395.26,683.813 1395.82,683.813 1396.38,683.813 1396.94,683.813 1397.5,683.813 1398.06,683.813 1398.62,683.813 1399.18,683.813 1399.74,683.813 1400.3,683.813 1400.86,683.813 1401.41,683.813 1401.97,683.813 1402.53,683.813 1403.09,683.813 1403.65,683.813 1404.21,683.813 1404.77,683.813 1405.33,683.813 1405.89,683.813 1406.45,683.813 1407.01,683.813 1407.57,683.813 1408.13,683.813 1408.68,683.813 1409.24,683.813 1409.8,683.813 1410.36,683.813 1410.92,683.813 1411.48,683.813 1412.04,683.813 1412.6,683.813 1413.16,683.813 1413.72,683.813 1414.28,683.813 1414.84,683.813 1415.4,683.813 1415.95,683.813 1416.51,683.813 1417.07,683.813 1417.63,683.813 1418.19,683.813 1418.75,683.813 1419.31,683.813 1419.87,683.813 1420.43,683.813 1420.99,683.813 1421.55,683.813 1422.11,683.813 1422.67,683.813 1423.23,683.813 1423.78,683.813 1424.34,683.813 1424.9,683.813 1425.46,683.813 1426.02,683.813 1426.58,683.813 1427.14,683.813 1427.7,683.813 1428.26,683.813 1428.82,683.813 1429.38,683.813 1429.94,683.813 1430.5,683.813 1431.05,683.813 1431.61,683.813 1432.17,683.813 1432.73,683.813 1433.29,683.813 1433.85,683.813 1434.41,683.813 1434.97,683.813 1435.53,683.813 1436.09,683.813 1436.65,683.813 1437.21,683.813 1437.77,683.813 1438.33,683.813 1438.88,683.813 1439.44,683.813 1440,683.813 1440.56,683.813 1441.12,683.813 1441.68,683.813 1442.24,683.813 1442.8,683.813 1443.36,683.813 1443.92,683.813 1444.48,683.813 1445.04,683.813 1445.6,683.813 1446.15,683.813 1446.71,683.813 1447.27,683.813 1447.83,683.813 1448.39,683.813 1448.95,683.813 1449.51,683.813 1450.07,683.813 1450.63,683.813 1451.19,683.813 1451.75,683.813 1452.31,683.813 1452.87,683.813 1453.42,683.813 1453.98,683.813 1454.54,683.813 1455.1,683.813 1455.66,683.813 1456.22,683.813 1456.78,683.813 1457.34,683.813 1457.9,683.813 1458.46,683.813 1459.02,683.813 1459.58,683.813 1460.14,683.813 1460.7,683.813 1461.25,683.813 1461.81,683.813 1462.37,683.813 1462.93,683.813 1463.49,683.813 1464.05,683.813 1464.61,683.813 1465.17,683.813 1465.73,683.813 1466.29,683.813 1466.85,683.813 1467.41,683.813 1467.97,683.813 1468.52,683.813 1469.08,683.813 1469.64,683.813 1470.2,683.813 1470.76,683.813 1471.32,683.813 1471.88,683.813 1472.44,683.813 1473,683.813 1473.56,683.813 1474.12,683.813 1474.68,683.813 1475.24,683.813 1475.79,683.813 1476.35,683.813 1476.91,683.813 1477.47,683.813 1478.03,683.813 1478.59,683.813 1479.15,683.813 1479.71,683.813 1480.27,683.813 1480.83,683.813 1481.39,683.813 1481.95,683.813 1482.51,683.813 1483.07,683.813 1483.62,683.813 1484.18,683.813 1484.74,683.813 1485.3,683.813 1485.86,683.813 1486.42,683.813 1486.98,683.813 1487.54,683.813 1488.1,683.813 1488.66,683.813 1489.22,683.813 1489.78,683.813 1490.34,683.813 1490.89,683.813 1491.45,683.813 1492.01,683.813 1492.57,683.813 1493.13,683.813 1493.69,683.813 1494.25,683.813 1494.81,683.813 1495.37,683.813 1495.93,683.813 1496.49,683.813 1497.05,683.813 1497.61,683.813 1498.16,683.813 1498.72,683.813 1499.28,683.813 1499.84,683.813 1500.4,683.813 1500.96,683.813 1501.52,683.813 1502.08,683.813 1502.64,683.813 1503.2,683.813 1503.76,683.813 1504.32,683.813 1504.88,683.813 1505.44,683.813 1505.99,683.813 1506.55,683.813 1507.11,683.813 1507.67,683.813 1508.23,683.813 1508.79,683.813 1509.35,683.813 1509.91,683.813 1510.47,683.813 1511.03,683.813 1511.59,683.813 1512.15,683.813 1512.71,683.813 1513.26,683.813 1513.82,683.813 1514.38,683.813 1514.94,683.813 1515.5,683.813 1516.06,683.813 1516.62,683.813 1517.18,683.813 1517.74,683.813 1518.3,683.813 1518.86,683.813 1519.42,683.813 1519.98,683.813 1520.53,683.813 1521.09,683.813 1521.65,683.813 1522.21,683.813 1522.77,683.813 1523.33,683.813 1523.89,683.813 1524.45,683.813 1525.01,683.813 1525.57,683.813 1526.13,683.813 1526.69,683.813 1527.25,683.813 1527.81,683.813 1528.36,683.813 1528.92,683.813 1529.48,683.813 1530.04,683.813 1530.6,683.813 1531.16,683.813 1531.72,683.813 1532.28,683.813 1532.84,683.813 1533.4,683.813 1533.96,683.813 1534.52,683.813 1535.08,683.813 1535.63,683.813 1536.19,683.813 1536.75,683.813 1537.31,683.813 1537.87,683.813 1538.43,683.813 1538.99,683.813 1539.55,683.813 1540.11,683.813 1540.67,683.813 1541.23,683.813 1541.79,683.813 1542.35,683.813 1542.9,683.813 1543.46,683.813 1544.02,683.813 1544.58,683.813 1545.14,683.813 1545.7,683.813 1546.26,683.813 1546.82,683.813 1547.38,683.813 1547.94,683.813 1548.5,683.813 1549.06,683.813 1549.62,683.813 1550.18,683.813 1550.73,683.813 1551.29,683.813 1551.85,683.813 1552.41,683.813 1552.97,683.813 1553.53,683.813 1554.09,683.813 1554.65,683.813 1555.21,683.813 1555.77,683.813 1556.33,683.813 1556.89,683.813 1557.45,683.813 1558,683.813 1558.56,683.813 1559.12,683.813 1559.68,683.813 1560.24,683.813 1560.8,683.813 1561.36,683.813 1561.92,683.813 1562.48,683.813 1563.04,683.813 1563.6,683.813 1564.16,683.813 1564.72,683.813 1565.28,683.813 1565.83,683.813 1566.39,683.813 1566.95,683.813 1567.51,683.813 1568.07,683.813 1568.63,683.813 1569.19,683.813 1569.75,683.813 1570.31,683.813 1570.87,683.813 1571.43,683.813 1571.99,683.813 1572.55,683.813 1573.1,683.813 1573.66,683.813 1574.22,683.813 1574.78,683.813 1575.34,683.813 1575.9,683.813 1576.46,683.813 1577.02,683.813 1577.58,683.813 1578.14,683.813 1578.7,683.813 1579.26,683.813 1579.82,683.813 1580.37,683.813 1580.93,683.813 1581.49,683.813 1582.05,683.813 1582.61,683.813 1583.17,683.813 1583.73,683.813 1584.29,683.813 1584.85,683.813 1585.41,683.813 1585.97,683.813 1586.53,683.813 1587.09,683.813 1587.65,683.813 1588.2,683.813 1588.76,683.813 1589.32,683.813 1589.88,683.813 1590.44,683.813 1591,683.813 1591.56,683.813 1592.12,683.813 1592.68,683.813 1593.24,683.813 1593.8,683.813 1594.36,683.813 1594.92,683.813 1595.47,683.813 1596.03,683.813 1596.59,683.813 1597.15,683.813 1597.71,683.813 1598.27,683.813 1598.83,683.813 1599.39,683.813 1599.95,683.813 1600.51,683.813 1601.07,683.813 1601.63,683.813 1602.19,683.813 1602.74,683.813 1603.3,683.813 1603.86,683.813 1604.42,683.813 1604.98,683.813 1605.54,683.813 1606.1,683.813 1606.66,683.813 1607.22,683.813 1607.78,683.813 1608.34,683.813 1608.9,683.813 1609.46,683.813 1610.02,683.813 1610.57,683.813 1611.13,683.813 1611.69,683.813 1612.25,683.813 1612.81,683.813 1613.37,683.813 1613.93,683.813 1614.49,683.813 1615.05,683.813 1615.61,683.813 1616.17,683.813 1616.73,683.813 1617.29,683.813 1617.84,683.813 1618.4,683.813 1618.96,683.813 1619.52,683.813 1620.08,683.813 1620.64,683.813 1621.2,683.813 1621.76,683.813 1622.32,683.813 1622.88,683.813 1623.44,683.813 1624,683.813 1624.56,683.813 1625.11,683.813 1625.67,683.813 1626.23,683.813 1626.79,683.813 1627.35,683.813 1627.91,683.813 1628.47,683.813 1629.03,683.813 1629.59,683.813 1630.15,683.813 1630.71,683.813 1631.27,683.813 1631.83,683.813 1632.39,683.813 1632.94,683.813 1633.5,683.813 1634.06,683.813 1634.62,683.813 1635.18,683.813 1635.74,683.813 1636.3,683.813 1636.86,683.813 1637.42,683.813 1637.98,683.813 1638.54,683.813 1639.1,683.813 1639.66,683.813 1640.21,683.813 1640.77,683.813 1641.33,683.813 1641.89,683.813 1642.45,683.813 1643.01,683.813 1643.57,683.813 1644.13,683.813 1644.69,683.813 1645.25,683.813 1645.81,683.813 1646.37,683.813 1646.93,683.813 1647.48,683.813 1648.04,683.813 1648.6,683.813 1649.16,683.813 1649.72,683.813 1650.28,683.813 1650.84,683.813 1651.4,683.813 1651.96,683.813 1652.52,683.813 1653.08,683.813 1653.64,683.813 1654.2,683.813 1654.76,683.813 1655.31,683.813 1655.87,683.813 1656.43,683.813 1656.99,683.813 1657.55,683.813 1658.11,683.813 1658.67,683.813 1659.23,683.813 1659.79,683.813 1660.35,683.813 1660.91,683.813 1661.47,683.813 1662.03,683.813 1662.58,683.813 1663.14,683.813 1663.7,683.813 1664.26,683.813 1664.82,683.813 1665.38,683.813 1665.94,683.813 1666.5,683.813 1667.06,683.813 1667.62,683.813 1668.18,683.813 1668.74,683.813 1669.3,683.813 1669.85,683.813 1670.41,683.813 1670.97,683.813 1671.53,683.813 1672.09,683.813 1672.65,683.813 1673.21,683.813 1673.77,683.813 1674.33,683.813 1674.89,683.813 1675.45,683.813 1676.01,683.813 1676.57,683.813 1677.13,683.813 1677.68,683.813 1678.24,683.813 1678.8,683.813 1679.36,683.813 1679.92,683.813 1680.48,683.813 1681.04,683.813 1681.6,683.813 1682.16,683.813 1682.72,683.813 1683.28,683.813 1683.84,683.813 1684.4,683.813 1684.95,683.813 1685.51,683.813 1686.07,683.813 1686.63,683.813 1687.19,683.813 1687.75,683.813 1688.31,683.813 1688.87,683.813 1689.43,683.813 1689.99,683.813 1690.55,683.813 1691.11,683.813 1691.67,683.813 1692.23,683.813 1692.78,683.813 1693.34,683.813 1693.9,683.813 1694.46,683.813 1695.02,683.813 1695.58,683.813 1696.14,683.813 1696.7,683.813 1697.26,683.813 1697.82,683.813 1698.38,683.813 1698.94,683.813 1699.5,683.813 1700.05,683.813 1700.61,683.813 1701.17,683.813 1701.73,683.813 1702.29,683.813 1702.85,683.813 1703.41,683.813 1703.97,683.813 1704.53,683.813 1705.09,683.813 1705.65,683.813 1706.21,683.813 1706.77,683.813 1707.32,683.813 1707.88,683.813 1708.44,683.813 1709,683.813 1709.56,683.813 1710.12,683.813 1710.68,683.813 1711.24,683.813 1711.8,683.813 1712.36,683.813 1712.92,683.813 1713.48,683.813 1714.04,683.813 1714.6,683.813 1715.15,683.813 1715.71,683.813 1716.27,683.813 1716.83,683.813 1717.39,683.813 1717.95,683.813 1718.51,683.813 1719.07,683.813 1719.63,683.813 1720.19,683.813 1720.75,683.813 1721.31,683.813 1721.87,683.813 1722.42,683.813 1722.98,683.813 1723.54,683.813 1724.1,683.813 1724.66,683.813 1725.22,683.813 1725.78,683.813 1726.34,683.813 1726.9,683.813 1727.46,683.813 1728.02,683.813 1728.58,683.813 1729.14,683.813 1729.69,683.813 1730.25,683.813 1730.81,683.813 1731.37,683.813 1731.93,683.813 1732.49,683.813 1733.05,683.813 1733.61,683.813 1734.17,683.813 1734.73,683.813 1735.29,683.813 1735.85,683.813 1736.41,683.813 1736.97,683.813 1737.52,683.813 1738.08,683.813 1738.64,683.813 1739.2,683.813 1739.76,683.813 1740.32,683.813 1740.88,683.813 1741.44,683.813 1742,683.813 1742.56,683.813 1743.12,683.813 1743.68,683.813 1744.24,683.813 1744.79,683.813 1745.35,683.813 1745.91,683.813 1746.47,683.813 1747.03,683.813 1747.59,683.813 1748.15,683.813 1748.71,683.813 1749.27,683.813 1749.83,683.813 1750.39,683.813 1750.95,683.813 1751.51,683.813 1752.06,683.813 1752.62,683.813 1753.18,683.813 1753.74,683.813 1754.3,683.813 1754.86,683.813 1755.42,683.813 1755.98,683.813 1756.54,683.813 1757.1,683.813 1757.66,683.813 1758.22,683.813 1758.78,683.813 1759.34,683.813 1759.89,683.813 1760.45,683.813 1761.01,683.813 1761.57,683.813 1762.13,683.813 1762.69,683.813 1763.25,683.813 1763.81,683.813 1764.37,683.813 1764.93,683.813 1765.49,683.813 1766.05,683.813 1766.61,683.813 1767.16,683.813 1767.72,683.813 1768.28,683.813 1768.84,683.813 1769.4,683.813 1769.96,683.813 1770.52,683.813 1771.08,683.813 1771.64,683.813 1772.2,683.813 1772.76,683.813 1773.32,683.813 1773.88,683.813 1774.43,683.813 1774.99,683.813 1775.55,683.813 1776.11,683.813 1776.67,683.813 1777.23,683.813 1777.79,683.813 1778.35,683.813 1778.91,683.813 1779.47,683.813 1780.03,683.813 1780.59,683.813 1781.15,683.813 1781.71,683.813 1782.26,683.813 1782.82,683.813 1783.38,683.813 1783.94,683.813 1784.5,683.813 1785.06,683.813 1785.62,683.813 1786.18,683.813 1786.74,683.813 1787.3,683.813 1787.86,683.813 1788.42,683.813 1788.98,683.813 1789.53,683.813 1790.09,683.813 1790.65,683.813 1791.21,683.813 1791.77,683.813 1792.33,683.813 1792.89,683.813 1793.45,683.813 1794.01,683.813 1794.57,683.813 1795.13,683.813 1795.69,683.813 1796.25,683.813 1796.8,683.813 1797.36,683.813 1797.92,683.813 1798.48,683.813 1799.04,683.813 1799.6,683.813 1800.16,683.813 1800.72,683.813 1801.28,683.813 1801.84,683.813 1802.4,683.813 1802.96,683.813 1803.52,683.813 1804.08,683.813 1804.63,683.813 1805.19,683.813 1805.75,683.813 1806.31,683.813 1806.87,683.813 1807.43,683.813 1807.99,683.813 1808.55,683.813 1809.11,683.813 1809.67,683.813 1810.23,683.813 1810.79,683.813 1811.35,683.813 1811.9,683.813 1812.46,683.813 1813.02,683.813 1813.58,683.813 1814.14,683.813 1814.7,683.813 1815.26,683.813 1815.82,683.813 1816.38,683.813 1816.94,683.813 1817.5,683.813 1818.06,683.813 1818.62,683.813 1819.18,683.813 1819.73,683.813 1820.29,683.813 1820.85,683.813 1821.41,683.813 1821.97,683.813 1822.53,683.813 1823.09,683.813 1823.65,683.813 1824.21,683.813 1824.77,683.813 1825.33,683.813 1825.89,683.813 1826.45,683.813 1827,683.813 1827.56,683.813 1828.12,683.813 1828.68,683.813 1829.24,683.813 1829.8,683.813 1830.36,683.813 1830.92,683.813 1831.48,683.813 1832.04,683.813 1832.6,683.813 1833.16,683.813 1833.72,683.813 1834.27,683.813 1834.83,683.813 1835.39,683.813 1835.95,683.813 1836.51,683.813 1837.07,683.813 1837.63,683.813 1838.19,683.813 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.02477835753138 ± 0.023100444776178803\nProjected Energy: -4.016232853477876 ± (0.003317749430692629, 0.003132530541309464)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.51663</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3195e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.074e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.076e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.342e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.216e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.768e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.363124291613346\n -0.759019192277071\n  0.13584182219622676\n  0.157899986946072\n  0.8767114411781343\n  1.5305929970973349\n  1.583573261186734\n  3.0728703303258706\n  3.1256726539518356\n  4.862107221562169\n  6.2606948503805935\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
