var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21143393921947937 ± 0.0012468249906117405\n   G2(1) = 0.9170778305169185 ± 0.0005984636882805039\n   G2(2) = 0.980861662478868 ± 0.0005924316786482364\n   G2(3) = 0.992687074788947 ± 0.0009058713364361798\n   G2(4) = 0.980861662478868 ± 0.0005924316786482364\n   G2(5) = 0.9170778305169185 ± 0.0005984636882805039\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.018408586735021 ± 0.1370954257274937\n   Replica 2: -4.0111403713416705 ± 0.13776543567485333\n   Replica 3: -3.977888422509843 ± 0.1430678172241411\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip300\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip301\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip302\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.75 2211.02,1003.75 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.69 2211.02,746.69 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.63 2211.02,489.63 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.57 2211.02,232.57 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.75 423.181,1003.75 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.69 423.181,746.69 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.63 423.181,489.63 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.57 423.181,232.57 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.85 Q363.608 1253.72 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.51 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.85 Q344.395 1252.1 347.45 1247.51 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M290.043 1017.1 L306.363 1017.1 L306.363 1021.03 L284.418 1021.03 L284.418 1017.1 Q287.08 1014.34 291.664 1009.71 Q296.27 1005.06 297.451 1003.72 Q299.696 1001.19 300.576 999.457 Q301.478 997.698 301.478 996.008 Q301.478 993.253 299.534 991.517 Q297.613 989.781 294.511 989.781 Q292.312 989.781 289.858 990.545 Q287.427 991.309 284.65 992.86 L284.65 988.137 Q287.474 987.003 289.927 986.424 Q292.381 985.846 294.418 985.846 Q299.789 985.846 302.983 988.531 Q306.177 991.216 306.177 995.707 Q306.177 997.836 305.367 999.758 Q304.58 1001.66 302.474 1004.25 Q301.895 1004.92 298.793 1008.14 Q295.691 1011.33 290.043 1017.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 986.471 L334.58 986.471 L334.58 990.406 L320.506 990.406 L320.506 998.878 Q321.524 998.531 322.543 998.369 Q323.562 998.184 324.58 998.184 Q330.367 998.184 333.747 1001.35 Q337.126 1004.53 337.126 1009.94 Q337.126 1015.52 333.654 1018.62 Q330.182 1021.7 323.862 1021.7 Q321.687 1021.7 319.418 1021.33 Q317.173 1020.96 314.765 1020.22 L314.765 1015.52 Q316.849 1016.66 319.071 1017.21 Q321.293 1017.77 323.77 1017.77 Q327.774 1017.77 330.112 1015.66 Q332.45 1013.55 332.45 1009.94 Q332.45 1006.33 330.112 1004.23 Q327.774 1002.12 323.77 1002.12 Q321.895 1002.12 320.02 1002.54 Q318.168 1002.95 316.224 1003.83 L316.224 986.471 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 989.549 Q352.728 989.549 350.899 993.114 Q349.094 996.656 349.094 1003.79 Q349.094 1010.89 350.899 1014.46 Q352.728 1018 356.339 1018 Q359.973 1018 361.779 1014.46 Q363.608 1010.89 363.608 1003.79 Q363.608 996.656 361.779 993.114 Q359.973 989.549 356.339 989.549 M356.339 985.846 Q362.149 985.846 365.205 990.452 Q368.284 995.036 368.284 1003.79 Q368.284 1012.51 365.205 1017.12 Q362.149 1021.7 356.339 1021.7 Q350.529 1021.7 347.45 1017.12 Q344.395 1012.51 344.395 1003.79 Q344.395 995.036 347.45 990.452 Q350.529 985.846 356.339 985.846 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M286.062 729.41 L304.418 729.41 L304.418 733.346 L290.344 733.346 L290.344 741.818 Q291.363 741.471 292.381 741.309 Q293.4 741.123 294.418 741.123 Q300.205 741.123 303.585 744.295 Q306.964 747.466 306.964 752.883 Q306.964 758.461 303.492 761.563 Q300.02 764.642 293.701 764.642 Q291.525 764.642 289.256 764.271 Q287.011 763.901 284.603 763.16 L284.603 758.461 Q286.687 759.596 288.909 760.151 Q291.131 760.707 293.608 760.707 Q297.613 760.707 299.951 758.6 Q302.288 756.494 302.288 752.883 Q302.288 749.271 299.951 747.165 Q297.613 745.059 293.608 745.059 Q291.733 745.059 289.858 745.475 Q288.006 745.892 286.062 746.772 L286.062 729.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 732.489 Q322.566 732.489 320.737 736.054 Q318.932 739.596 318.932 746.725 Q318.932 753.832 320.737 757.396 Q322.566 760.938 326.177 760.938 Q329.811 760.938 331.617 757.396 Q333.446 753.832 333.446 746.725 Q333.446 739.596 331.617 736.054 Q329.811 732.489 326.177 732.489 M326.177 728.785 Q331.987 728.785 335.043 733.392 Q338.122 737.975 338.122 746.725 Q338.122 755.452 335.043 760.058 Q331.987 764.642 326.177 764.642 Q320.367 764.642 317.288 760.058 Q314.233 755.452 314.233 746.725 Q314.233 737.975 317.288 733.392 Q320.367 728.785 326.177 728.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 732.489 Q352.728 732.489 350.899 736.054 Q349.094 739.596 349.094 746.725 Q349.094 753.832 350.899 757.396 Q352.728 760.938 356.339 760.938 Q359.973 760.938 361.779 757.396 Q363.608 753.832 363.608 746.725 Q363.608 739.596 361.779 736.054 Q359.973 732.489 356.339 732.489 M356.339 728.785 Q362.149 728.785 365.205 733.392 Q368.284 737.975 368.284 746.725 Q368.284 755.452 365.205 760.058 Q362.149 764.642 356.339 764.642 Q350.529 764.642 347.45 760.058 Q344.395 755.452 344.395 746.725 Q344.395 737.975 347.45 733.392 Q350.529 728.785 356.339 728.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M284.835 472.35 L307.057 472.35 L307.057 474.341 L294.511 506.91 L289.627 506.91 L301.432 476.285 L284.835 476.285 L284.835 472.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 472.35 L334.58 472.35 L334.58 476.285 L320.506 476.285 L320.506 484.758 Q321.524 484.41 322.543 484.248 Q323.562 484.063 324.58 484.063 Q330.367 484.063 333.747 487.234 Q337.126 490.406 337.126 495.822 Q337.126 501.401 333.654 504.503 Q330.182 507.582 323.862 507.582 Q321.687 507.582 319.418 507.211 Q317.173 506.841 314.765 506.1 L314.765 501.401 Q316.849 502.535 319.071 503.091 Q321.293 503.646 323.77 503.646 Q327.774 503.646 330.112 501.54 Q332.45 499.433 332.45 495.822 Q332.45 492.211 330.112 490.105 Q327.774 487.998 323.77 487.998 Q321.895 487.998 320.02 488.415 Q318.168 488.832 316.224 489.711 L316.224 472.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 475.429 Q352.728 475.429 350.899 478.994 Q349.094 482.535 349.094 489.665 Q349.094 496.771 350.899 500.336 Q352.728 503.878 356.339 503.878 Q359.973 503.878 361.779 500.336 Q363.608 496.771 363.608 489.665 Q363.608 482.535 361.779 478.994 Q359.973 475.429 356.339 475.429 M356.339 471.725 Q362.149 471.725 365.205 476.332 Q368.284 480.915 368.284 489.665 Q368.284 498.392 365.205 502.998 Q362.149 507.582 356.339 507.582 Q350.529 507.582 347.45 502.998 Q344.395 498.392 344.395 489.665 Q344.395 480.915 347.45 476.332 Q350.529 471.725 356.339 471.725 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M256.664 245.915 L264.303 245.915 L264.303 219.549 L255.992 221.216 L255.992 216.957 L264.256 215.29 L268.932 215.29 L268.932 245.915 L276.571 245.915 L276.571 249.85 L256.664 249.85 L256.664 245.915 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M296.015 218.369 Q292.404 218.369 290.576 221.933 Q288.77 225.475 288.77 232.605 Q288.77 239.711 290.576 243.276 Q292.404 246.818 296.015 246.818 Q299.65 246.818 301.455 243.276 Q303.284 239.711 303.284 232.605 Q303.284 225.475 301.455 221.933 Q299.65 218.369 296.015 218.369 M296.015 214.665 Q301.826 214.665 304.881 219.271 Q307.96 223.855 307.96 232.605 Q307.96 241.332 304.881 245.938 Q301.826 250.521 296.015 250.521 Q290.205 250.521 287.127 245.938 Q284.071 241.332 284.071 232.605 Q284.071 223.855 287.127 219.271 Q290.205 214.665 296.015 214.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 218.369 Q322.566 218.369 320.737 221.933 Q318.932 225.475 318.932 232.605 Q318.932 239.711 320.737 243.276 Q322.566 246.818 326.177 246.818 Q329.811 246.818 331.617 243.276 Q333.446 239.711 333.446 232.605 Q333.446 225.475 331.617 221.933 Q329.811 218.369 326.177 218.369 M326.177 214.665 Q331.987 214.665 335.043 219.271 Q338.122 223.855 338.122 232.605 Q338.122 241.332 335.043 245.938 Q331.987 250.521 326.177 250.521 Q320.367 250.521 317.288 245.938 Q314.233 241.332 314.233 232.605 Q314.233 223.855 317.288 219.271 Q320.367 214.665 326.177 214.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 218.369 Q352.728 218.369 350.899 221.933 Q349.094 225.475 349.094 232.605 Q349.094 239.711 350.899 243.276 Q352.728 246.818 356.339 246.818 Q359.973 246.818 361.779 243.276 Q363.608 239.711 363.608 232.605 Q363.608 225.475 361.779 221.933 Q359.973 218.369 356.339 218.369 M356.339 214.665 Q362.149 214.665 365.205 219.271 Q368.284 223.855 368.284 232.605 Q368.284 241.332 365.205 245.938 Q362.149 250.521 356.339 250.521 Q350.529 250.521 347.45 245.938 Q344.395 241.332 344.395 232.605 Q344.395 223.855 347.45 219.271 Q350.529 214.665 356.339 214.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.57 4017.76,232.57 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1245.99 460.533,1245.44 461.101,1244.81 461.669,1244.1 462.238,1243.3 462.806,1242.42 463.375,1241.45 463.943,1240.38 464.511,1239.22 465.08,1236.9 465.648,1235.53 466.216,1234.04 466.785,1231.37 467.353,1229.63 467.921,1227.76 468.49,1225.74 469.058,1223.58 469.626,1221.28 470.195,1216.76 470.763,1214.07 471.331,1211.28 471.9,1208.33 472.468,1205.17 473.036,1200.82 473.605,1197.33 474.173,1193.63 474.741,1188.66 475.31,1184.52 475.878,1180.14 476.446,1174.51 477.015,1168.6 477.583,1163.57 478.152,1158.28 478.72,1151.77 479.288,1141.88 479.857,1135.62 480.425,1128.16 480.993,1121.42 481.562,1114.45 482.13,1106.23 482.698,1096.85 483.267,1089.43 483.835,1080.77 484.403,1070.94 484.972,1061.99 485.54,1052.86 486.108,1044.72 486.677,1034.34 487.245,1022.74 487.813,1013.16 488.382,1003.61 488.95,992.875 489.518,984.213 490.087,973.336 490.655,964.482 491.224,952.461 491.792,943.352 492.36,931.132 492.929,921.881 493.497,910.772 494.065,900.455 494.634,890.186 495.202,878.848 495.77,867.443 496.339,855.221 496.907,846.222 497.475,834.887 498.044,824.822 498.612,814.762 499.18,804.62 499.749,794.522 500.317,783.305 500.885,773.106 501.454,764.149 502.022,753.142 502.59,743.256 503.159,730.329 503.727,720.779 504.295,710.178 504.864,699.688 505.432,689.307 506.001,678.027 506.569,668.15 507.137,657.403 507.706,650.743 508.274,641.129 508.842,630.611 509.411,623.38 509.979,615.053 510.547,602.72 511.116,595.821 511.684,587.917 512.252,581.248 512.821,570.553 513.389,562.26 513.957,553.113 514.526,547.214 515.094,539.177 515.662,533.598 516.231,526.745 516.799,520.16 517.367,511.69 517.936,503.49 518.504,495.305 519.072,489.403 519.641,484.708 520.209,479.063 520.778,474.27 521.346,468.616 521.914,463.117 522.483,458.683 523.051,452.38 523.619,448.216 524.188,444.17 524.756,441.159 525.324,436.805 525.893,430.742 526.461,425.232 527.029,418.244 527.598,413.828 528.166,408.516 528.734,404.239 529.303,398.932 529.871,396.032 530.439,392.084 531.008,390.182 531.576,384.138 532.144,379.461 532.713,376.717 533.281,373.172 533.85,368.801 534.418,364.752 534.986,362.639 535.555,359.378 536.123,353.241 536.691,348.425 537.26,346.719 537.828,344.874 538.396,343.235 538.965,343.466 539.533,340.51 540.101,338.706 540.67,336.93 541.238,334.216 541.806,332.267 542.375,328.548 542.943,326.986 543.511,324.329 544.08,320.789 544.648,317.405 545.216,315.089 545.785,314.889 546.353,312.762 546.921,310.62 547.49,309.623 548.058,307.576 548.627,305.715 549.195,303.697 549.763,299.788 550.332,298.15 550.9,298.385 551.468,296.605 552.037,297.883 552.605,296.928 553.173,296.078 553.742,297.231 554.31,295.151 554.878,294.316 555.447,294.488 556.015,292.47 556.583,292.492 557.152,290.511 557.72,288.462 558.288,288.573 558.857,287.776 559.425,284.619 559.993,283.925 560.562,284.496 561.13,283.449 561.698,281.481 562.267,277.689 562.835,275.271 563.404,274.683 563.972,273.203 564.54,273.579 565.109,273.268 565.677,273.708 566.245,273.091 566.814,271.408 567.382,268.753 567.95,269.351 568.519,268.874 569.087,265.26 569.655,263.84 570.224,263.419 570.792,265.294 571.36,264.903 571.929,263.768 572.497,264.667 573.065,266.408 573.634,263.897 574.202,262.505 574.77,261.073 575.339,260.974 575.907,259.484 576.476,260.406 577.044,258.255 577.612,258.161 578.181,257.997 578.749,256.846 579.317,257.73 579.886,257.491 580.454,255.194 581.022,255.123 581.591,254.981 582.159,254.586 582.727,255.804 583.296,253.83 583.864,253.831 584.432,252.81 585.001,248.575 585.569,249.055 586.137,250.439 586.706,246.382 587.274,249.061 587.842,249.201 588.411,250.23 588.979,246.164 589.547,247.482 590.116,249.799 590.684,251.044 591.253,253.095 591.821,250.828 592.389,249.661 592.958,251.569 593.526,252.388 594.094,253.325 594.663,254.009 595.231,250.601 595.799,251.392 596.368,250.166 596.936,250.963 597.504,250.648 598.073,249.493 598.641,249.243 599.209,248.035 599.778,245.943 600.346,245.045 600.914,246.255 601.483,246.207 602.051,244.18 602.619,245.263 603.188,245.244 603.756,242.079 604.325,240.118 604.893,239.598 605.461,239.877 606.03,241.336 606.598,241.456 607.166,240.686 607.735,242.036 608.303,242.149 608.871,242.557 609.44,242.925 610.008,243.06 610.576,243.945 611.145,243.89 611.713,243.215 612.281,244.316 612.85,244.412 613.418,244.486 613.986,242.449 614.555,241.483 615.123,241.508 615.691,241.777 616.26,240.977 616.828,242.372 617.396,242.502 617.965,241.52 618.533,238.687 619.102,238.891 619.67,240.188 620.238,239.477 620.807,238.812 621.375,238.242 621.943,238.721 622.512,239.101 623.08,239.659 623.648,240.052 624.217,240.033 624.785,240.347 625.353,240.393 625.922,239.528 626.49,240.829 627.058,240.143 627.627,243.621 628.195,243.598 628.763,242.586 629.332,244.635 629.9,244.379 630.468,247.413 631.037,246.783 631.605,246.473 632.173,246.282 632.742,242.769 633.31,243.507 633.879,243.369 634.447,242.403 635.015,243.222 635.584,244.057 636.152,244.726 636.72,244.418 637.289,244.089 637.857,244.831 638.425,244.209 638.994,243.827 639.562,242.556 640.13,242.37 640.699,241.017 641.267,240.931 641.835,240.853 642.404,239.793 642.972,237.76 643.54,238.092 644.109,236.913 644.677,237.125 645.245,235.195 645.814,234.546 646.382,233.675 646.951,232.027 647.519,234.577 648.087,233.018 648.656,234.514 649.224,234.711 649.792,233.038 650.361,230.456 650.929,230.983 651.497,229.794 652.066,230.662 652.634,230.309 653.202,230.931 653.771,233.475 654.339,231.975 654.907,234.547 655.476,235.003 656.044,234.667 656.612,233.964 657.181,235.385 657.749,235.741 658.317,236.045 658.886,235.14 659.454,235.802 660.022,236.219 660.591,236.456 661.159,237.677 661.728,236.752 662.296,236.13 662.864,236.569 663.433,236.064 664.001,236.292 664.569,236.641 665.138,236.744 665.706,236.992 666.274,238.113 666.843,236.247 667.411,235.481 667.979,232.728 668.548,231.403 669.116,232.114 669.684,232.759 670.253,232.063 670.821,231.573 671.389,230.111 671.958,230.686 672.526,232.488 673.094,233.069 673.663,233.748 674.231,237.334 674.799,240.756 675.368,240.816 675.936,241.719 676.505,241.586 677.073,238.302 677.641,235.228 678.21,235.552 678.778,236.722 679.346,237.743 679.915,239.874 680.483,238.92 681.051,237.908 681.62,239.13 682.188,240.451 682.756,241.328 683.325,240.017 683.893,241.896 684.461,240.72 685.03,241.529 685.598,242.426 686.166,242.059 686.735,239.788 687.303,241.76 687.871,241.506 688.44,240.086 689.008,240.929 689.577,239.637 690.145,237.629 690.713,237.756 691.282,239.95 691.85,238.687 692.418,237.672 692.987,236.741 693.555,235.897 694.123,236.054 694.692,233.995 695.26,234.341 695.828,236.684 696.397,236.868 696.965,237.801 697.533,237.789 698.102,236.646 698.67,234.666 699.238,235.85 699.807,236.808 700.375,235.74 700.943,234.871 701.512,236.207 702.08,237.183 702.648,237.06 703.217,235.004 703.785,234.832 704.354,235.799 704.922,236.781 705.49,236.718 706.059,237.593 706.627,236.566 707.195,237.579 707.764,236.466 708.332,238.37 708.9,238.432 709.469,238.218 710.037,236.847 710.605,236.909 711.174,237.971 711.742,236.747 712.31,237.785 712.879,237.784 713.447,235.494 714.015,237.489 714.584,237.543 715.152,236.318 715.72,236.452 716.289,234.099 716.857,234.232 717.425,235.393 717.994,235.23 718.562,235.355 719.131,235.493 719.699,237.548 720.267,236.383 720.836,237.245 721.404,236.048 721.972,235.059 722.541,235.244 723.109,235.441 723.677,235.504 724.246,237.577 724.814,237.217 725.382,237.917 725.951,237.606 726.519,240.489 727.087,238.996 727.656,239.631 728.224,237.192 728.792,236.945 729.361,234.728 729.929,235.56 730.497,235.4 731.066,235.487 731.634,235.176 732.203,232.034 732.771,233.199 733.339,234.403 733.908,234.283 734.476,235.318 735.044,234.274 735.613,234.244 736.181,232.42 736.749,232.693 737.318,230.675 737.886,229.803 738.454,231.147 739.023,229.381 739.591,229.862 740.159,232.356 740.728,231.555 741.296,230.663 741.864,233.155 742.433,235.327 743.001,235.553 743.569,235.606 744.138,235.352 744.706,235.355 745.274,234.194 745.843,233.103 746.411,234.241 746.98,234.205 747.548,234.225 748.116,231.355 748.685,231.799 749.253,233.042 749.821,233.006 750.39,232.104 750.958,232.382 751.526,232.632 752.095,236.037 752.663,235.916 753.231,236.696 753.8,236.683 754.368,234.332 754.936,233.202 755.505,234.393 756.073,234.321 756.641,236.556 757.21,235.608 757.778,234.521 758.346,235.287 758.915,235.272 759.483,234.231 760.052,233.315 760.62,233.802 761.188,232.761 761.757,233.778 762.325,233.841 762.893,231.897 763.462,232.929 764.03,233.135 764.598,234.219 765.167,234.177 765.735,235.309 766.303,235.246 766.872,235.183 767.44,232.997 768.008,230.88 768.577,228.978 769.145,230.511 769.713,231.942 770.282,232.169 770.85,233.498 771.418,233.633 771.987,234.909 772.555,234.953 773.123,236.007 773.692,237.815 774.26,236.604 774.829,235.381 775.397,234.398 775.965,236.502 776.534,236.325 777.102,236.157 777.67,233.911 778.239,234.978 778.807,233.787 779.375,230.621 779.944,231.835 780.512,235.17 781.08,234.967 781.649,235.987 782.217,235.809 782.785,233.471 783.354,232.685 783.922,232.803 784.49,231.962 785.059,233.073 785.627,235.079 786.195,238.005 786.764,237.908 787.332,237.513 787.9,236.267 788.469,234.216 789.037,233.292 789.606,233.338 790.174,231.409 790.742,232.819 791.311,232.1 791.879,231.442 792.447,231.667 793.016,231.814 793.584,231.952 794.152,233.396 794.721,234.64 795.289,234.843 795.857,232.707 796.426,231.671 796.994,228.897 797.562,228.251 798.131,227.661 798.699,227.081 799.267,227.635 799.836,227.131 800.404,228.679 800.972,228.08 801.541,228.526 802.109,230.773 802.678,229.886 803.246,230.208 803.814,232.547 804.383,230.644 804.951,232.999 805.519,233.189 806.088,233.11 806.656,233.191 807.224,232.317 807.793,232.522 808.361,233.621 808.929,235.765 809.498,235.728 810.066,233.712 810.634,236.012 811.203,234.054 811.771,234.251 812.339,234.297 812.908,234.392 813.476,231.294 814.044,232.695 814.613,232.855 815.181,233.013 815.749,232.423 816.318,233.714 816.886,233.829 817.455,233.915 818.023,231.553 818.591,234.885 819.16,235.897 819.728,236.828 820.296,236.641 820.865,236.494 821.433,236.273 822.001,235.066 822.57,236.886 823.138,235.856 823.706,233.726 824.275,233.753 824.843,232.655 825.411,230.719 825.98,231.873 826.548,231.94 827.116,231.983 827.685,234.471 828.253,234.484 828.821,236.652 829.39,236.712 829.958,236.813 830.526,235.828 831.095,235.85 831.663,234.728 832.232,236.671 832.8,234.335 833.368,234.61 833.937,234.808 834.505,234.81 835.073,235.868 835.642,234.96 836.21,234.874 836.778,234.892 837.347,237.079 837.915,232.792 838.483,231.781 839.052,232.157 839.62,232.326 840.188,232.412 840.757,231.472 841.325,229.374 841.893,229.647 842.462,231.087 843.03,233.418 843.598,233.465 844.167,234.708 844.735,234.689 845.304,235.841 845.872,235.651 846.44,236.648 847.009,237.343 847.577,235.218 848.145,236.087 848.714,236.111 849.282,234.963 849.85,234.734 850.419,232.537 850.987,232.707 851.555,232.702 852.124,233.703 852.692,232.814 853.26,233.864 853.829,234.867 854.397,235.859 854.965,234.712 855.534,233.675 856.102,232.565 856.67,230.761 857.239,233.07 857.807,233.026 858.375,234.146 858.944,232.29 859.512,233.171 860.081,231.252 860.649,232.332 861.217,233.503 861.786,231.32 862.354,231.357 862.922,232.549 863.491,232.574 864.059,232.419 864.627,234.692 865.196,237.923 865.764,235.54 866.332,234.351 866.901,236.366 867.469,235.033 868.037,233.771 868.606,234.959 869.174,232.859 869.742,234.944 870.311,236.582 870.879,235.08 871.447,237.156 872.016,234.775 872.584,234.619 873.152,235.425 873.721,237.483 874.289,236.889 874.858,235.415 875.426,235.149 875.994,234.045 876.563,235.985 877.131,234.378 877.699,235.187 878.268,234.079 878.836,235.943 879.404,236.546 879.973,236.218 880.541,234.142 881.109,235.917 881.678,234.576 882.246,233.501 882.814,236.428 883.383,233.975 883.951,233.773 884.519,234.705 885.088,234.679 885.656,232.579 886.224,231.717 886.793,230.588 887.361,229.66 887.93,230.024 888.498,229.28 889.066,229.435 889.635,228.532 890.203,226.693 890.771,227.124 891.34,226.302 891.908,226.804 892.476,225.394 893.045,226.966 893.613,229.358 894.181,232.6 894.75,230.569 895.318,230.787 895.886,231.941 896.455,230.976 897.023,232.314 897.591,233.217 898.16,233.401 898.728,233.28 899.296,231.929 899.865,231.153 900.433,231.313 901.001,232.397 901.57,232.529 902.138,232.716 902.707,232.891 903.275,233.141 903.843,234.249 904.412,235.25 904.98,234.148 905.548,233.346 906.117,233.336 906.685,232.248 907.253,231.249 907.822,231.381 908.39,232.571 908.958,231.637 909.527,232.832 910.095,230.859 910.663,229.988 911.232,223.059 911.8,222.933 912.368,226.917 912.937,226.271 913.505,226.879 914.073,225.485 914.642,225.861 915.21,226.284 915.779,230.068 916.347,229.486 916.915,231.864 917.484,232.113 918.052,233.249 918.62,231.482 919.189,232.58 919.757,233.758 920.325,232.698 920.894,233.084 921.462,233.205 922.03,232.223 922.599,232.697 923.167,232.652 923.735,233.918 924.304,233.944 924.872,232.08 925.44,232.137 926.009,234.692 926.577,233.533 927.145,231.558 927.714,231.798 928.282,230.902 928.85,229.048 929.419,230.484 929.987,230.944 930.556,229.376 931.124,229.831 931.692,230.037 932.261,232.616 932.829,233.029 933.397,234.427 933.966,233.511 934.534,233.574 935.102,235.545 935.671,236.54 936.239,231.467 936.807,229.404 937.376,228.764 937.944,229.142 938.512,231.684 939.081,233.004 939.649,232.889 940.217,235.216 940.786,239.354 941.354,236.992 941.922,235.949 942.491,235.728 943.059,234.63 943.627,234.677 944.196,237.64 944.764,238.469 945.333,238.297 945.901,238.207 946.469,239.084 947.038,240.747 947.606,241.133 948.174,242.648 948.743,242.994 949.311,241.319 949.879,240.804 950.448,239.388 951.016,237.86 951.584,239.467 952.153,237.987 952.721,237.766 953.289,238.561 953.858,240.091 954.426,235.449 954.994,236.347 955.563,235.096 956.131,234.83 956.699,233.48 957.268,233.383 957.836,236.263 958.405,235.093 958.973,237.073 959.541,235.626 960.11,234.295 960.678,233.263 961.246,232.232 961.815,231.25 962.383,231.289 962.951,230.354 963.52,231.439 964.088,231.528 964.656,232.602 965.225,236.37 965.793,236.111 966.361,236.032 966.93,235.783 967.498,234.304 968.066,236.081 968.635,235.802 969.203,237.719 969.771,238.478 970.34,236.809 970.908,236.438 971.476,238.081 972.045,236.672 972.613,235.22 973.182,234.091 973.75,233.962 974.318,234.93 974.887,233.698 975.455,231.367 976.023,231.504 976.592,230.5 977.16,229.687 977.728,228.749 978.297,230.025 978.865,225.998 979.433,226.366 980.002,226.742 980.57,229.301 981.138,228.371 981.707,229.619 982.275,228.966 982.843,231.487 983.412,231.468 983.98,233.519 984.548,232.485 985.117,232.653 985.685,232.597 986.253,233.532 986.822,235.281 987.39,236.103 987.959,235.815 988.527,235.369 989.095,233.405 989.664,234.316 990.232,236.254 990.8,236.956 991.369,236.62 991.937,234.397 992.505,235.215 993.074,238.074 993.642,239.788 994.21,241.301 994.779,240.495 995.347,240.014 995.915,238.23 996.484,235.817 997.052,237.69 997.62,237.095 998.189,235.853 998.757,236.425 999.325,236.258 999.894,234.803 1000.46,234.503 1001.03,235.507 1001.6,234.106 1002.17,232.656 1002.74,231.364 1003.3,230.291 1003.87,230.196 1004.44,229.202 1005.01,232.452 1005.58,232.379 1006.15,232.215 1006.71,234.093 1007.28,231.862 1007.85,232.794 1008.42,234.504 1008.99,235.085 1009.56,234.541 1010.12,234.044 1010.69,232.659 1011.26,231.605 1011.83,233.66 1012.4,233.344 1012.97,232.239 1013.53,230.035 1014.1,229.1 1014.67,228.327 1015.24,228.507 1015.81,228.599 1016.38,226.583 1016.94,226.753 1017.51,226.288 1018.08,226.855 1018.65,225.203 1019.22,224.534 1019.79,227.948 1020.35,228.375 1020.92,226.562 1021.49,227.959 1022.06,227.211 1022.63,226.593 1023.2,228.949 1023.76,226.205 1024.33,228.794 1024.9,231.237 1025.47,230.164 1026.04,230.386 1026.61,231.505 1027.17,229.49 1027.74,230.607 1028.31,231.755 1028.88,235.708 1029.45,235.544 1030.02,235.294 1030.58,235.32 1031.15,237.045 1031.72,237.816 1032.29,236.489 1032.86,237.077 1033.43,237.8 1033.99,235.128 1034.56,233.03 1035.13,232.822 1035.7,232.715 1036.27,231.863 1036.84,231.956 1037.4,232.899 1037.97,231.771 1038.54,232.989 1039.11,232.794 1039.68,230.765 1040.25,230.621 1040.81,228.671 1041.38,230.804 1041.95,231.027 1042.52,230.311 1043.09,230.28 1043.66,230.562 1044.22,230.631 1044.79,230.721 1045.36,231.85 1045.93,232.939 1046.5,235.138 1047.07,236.995 1047.63,234.563 1048.2,233.638 1048.77,231.489 1049.34,229.652 1049.91,229.887 1050.48,230.226 1051.05,231.331 1051.61,231.174 1052.18,232.292 1052.75,231.547 1053.32,231.726 1053.89,230.672 1054.46,231.979 1055.02,231.278 1055.59,231.476 1056.16,230.67 1056.73,229.715 1057.3,232.9 1057.87,233.885 1058.43,234.871 1059,233.597 1059.57,233.659 1060.14,233.461 1060.71,234.45 1061.28,236.163 1061.84,235.862 1062.41,233.239 1062.98,232.253 1063.55,234.414 1064.12,235.318 1064.69,233.125 1065.25,234.198 1065.82,232.978 1066.39,231.99 1066.96,233.078 1067.53,231.932 1068.1,228.054 1068.66,228.515 1069.23,227.918 1069.8,228.321 1070.37,228.561 1070.94,230.775 1071.51,230.971 1072.07,229.127 1072.64,227.424 1073.21,228.848 1073.78,226.382 1074.35,226.846 1074.92,227.197 1075.48,229.81 1076.05,230.141 1076.62,230.28 1077.19,231.559 1077.76,231.676 1078.33,231.564 1078.89,231.668 1079.46,231.808 1080.03,232.933 1080.6,232.841 1081.17,231.876 1081.74,233.028 1082.3,235.199 1082.87,232.074 1083.44,231.102 1084.01,231.193 1084.58,232.333 1085.15,233.55 1085.71,233.564 1086.28,231.46 1086.85,231.628 1087.42,231.581 1087.99,232.9 1088.56,232.117 1089.12,234.373 1089.69,234.616 1090.26,235.795 1090.83,235.611 1091.4,235.349 1091.97,236.149 1092.53,236.049 1093.1,233.717 1093.67,233.696 1094.24,231.337 1094.81,231.746 1095.38,230.867 1095.94,230.861 1096.51,228.957 1097.08,230.055 1097.65,229.343 1098.22,230.583 1098.79,228.839 1099.35,230.373 1099.92,229.745 1100.49,232.095 1101.06,232.228 1101.63,231.51 1102.2,232.615 1102.76,233.647 1103.33,229.55 1103.9,232.885 1104.47,231.913 1105.04,230.044 1105.61,228.312 1106.17,228.912 1106.74,230.342 1107.31,231.873 1107.88,232.98 1108.45,233.134 1109.02,233.097 1109.58,236.336 1110.15,236.223 1110.72,235.14 1111.29,235.109 1111.86,236.061 1112.43,236.725 1112.99,237.468 1113.56,240.068 1114.13,239.528 1114.7,240.071 1115.27,237.492 1115.84,238.151 1116.4,236.767 1116.97,237.321 1117.54,234.945 1118.11,234.687 1118.68,230.522 1119.25,229.707 1119.81,232.119 1120.38,231.306 1120.95,232.529 1121.52,232.658 1122.09,231.707 1122.66,232.769 1123.23,234.895 1123.79,234.757 1124.36,234.699 1124.93,234.483 1125.5,236.408 1126.07,235.272 1126.64,235.182 1127.2,232.93 1127.77,232.51 1128.34,233.701 1128.91,231.59 1129.48,232.8 1130.05,233.682 1130.61,232.637 1131.18,231.708 1131.75,232.789 1132.32,234.683 1132.89,233.631 1133.46,232.384 1134.02,232.415 1134.59,232.434 1135.16,231.191 1135.73,229.094 1136.3,230.353 1136.87,229.488 1137.43,231.638 1138,233.738 1138.57,233.359 1139.14,234.237 1139.71,231.987 1140.28,232.156 1140.84,231.066 1141.41,231.074 1141.98,229.343 1142.55,228.661 1143.12,228.932 1143.69,228.217 1144.25,229.606 1144.82,233.871 1145.39,233.774 1145.96,232.732 1146.53,232.769 1147.1,229.566 1147.66,230.865 1148.23,234.133 1148.8,234.018 1149.37,233.992 1149.94,236.004 1150.51,237.709 1151.07,237.351 1151.64,236.917 1152.21,237.652 1152.78,234.228 1153.35,234.451 1153.92,235.287 1154.48,235.257 1155.05,234.124 1155.62,235.125 1156.19,231.728 1156.76,230.762 1157.33,229.793 1157.89,228.886 1158.46,225.265 1159.03,226.618 1159.6,230.532 1160.17,229.854 1160.74,229.113 1161.3,230.396 1161.87,228.536 1162.44,230.071 1163.01,230.506 1163.58,230.663 1164.15,231.991 1164.71,233.101 1165.28,233.281 1165.85,233.189 1166.42,232.12 1166.99,232.165 1167.56,231.269 1168.12,234.51 1168.69,234.528 1169.26,234.658 1169.83,233.293 1170.4,233.14 1170.97,232.19 1171.53,233.405 1172.1,233.335 1172.67,233.263 1173.24,235.178 1173.81,234.267 1174.38,233.345 1174.94,233.18 1175.51,231.233 1176.08,229.336 1176.65,226.396 1177.22,225.589 1177.79,228.207 1178.35,229.522 1178.92,230.892 1179.49,230.124 1180.06,229.472 1180.63,231.811 1181.2,233.109 1181.76,232.124 1182.33,232.1 1182.9,232.147 1183.47,230.014 1184.04,231.466 1184.61,231.596 1185.17,229.76 1185.74,233.171 1186.31,229.319 1186.88,227.494 1187.45,228.781 1188.02,229.051 1188.58,231.424 1189.15,231.779 1189.72,234.143 1190.29,235.314 1190.86,235.189 1191.43,235.039 1192,231.875 1192.56,232.188 1193.13,231.993 1193.7,233.276 1194.27,234.281 1194.84,235.401 1195.41,235.515 1195.97,236.731 1196.54,236.372 1197.11,235.908 1197.68,234.689 1198.25,235.74 1198.82,233.621 1199.38,232.702 1199.95,232.747 1200.52,233.02 1201.09,234.998 1201.66,236.049 1202.23,235.728 1202.79,232.542 1203.36,231.482 1203.93,232.628 1204.5,232.573 1205.07,233.645 1205.64,235.782 1206.2,236.63 1206.77,236.33 1207.34,235.086 1207.91,232.884 1208.48,230.923 1209.05,231.845 1209.61,229.863 1210.18,229.947 1210.75,233.255 1211.32,234.153 1211.89,234.188 1212.46,233.315 1213.02,234.239 1213.59,232.057 1214.16,231.826 1214.73,230.795 1215.3,232.899 1215.87,230.781 1216.43,234.008 1217,233.042 1217.57,235.205 1218.14,236.045 1218.71,238.101 1219.28,237.73 1219.84,238.362 1220.41,240.997 1220.98,241.517 1221.55,240.878 1222.12,240.125 1222.69,240.676 1223.25,239.987 1223.82,239.424 1224.39,237.885 1224.96,238.436 1225.53,237.733 1226.1,237.157 1226.66,240.963 1227.23,239.202 1227.8,238.73 1228.37,240.292 1228.94,241.966 1229.51,241.085 1230.07,240.561 1230.64,238.966 1231.21,238.316 1231.78,237.649 1232.35,237.246 1232.92,235.811 1233.48,233.365 1234.05,233.962 1234.62,235.737 1235.19,235.27 1235.76,233.829 1236.33,234.695 1236.89,234.467 1237.46,233.75 1238.03,231.48 1238.6,231.296 1239.17,229.053 1239.74,229.067 1240.3,228.056 1240.87,229.429 1241.44,228.587 1242.01,227.785 1242.58,226.698 1243.15,228.031 1243.71,226.062 1244.28,226.563 1244.85,229.141 1245.42,229.284 1245.99,230.363 1246.56,229.401 1247.12,232.54 1247.69,231.241 1248.26,233.221 1248.83,232.972 1249.4,231.644 1249.97,230.43 1250.53,232.519 1251.1,233.356 1251.67,231.066 1252.24,231.012 1252.81,231.078 1253.38,230.079 1253.94,229.262 1254.51,229.547 1255.08,228.615 1255.65,227.744 1256.22,227.07 1256.79,226.517 1257.35,225.908 1257.92,226.3 1258.49,226.81 1259.06,225.147 1259.63,225.594 1260.2,225.296 1260.76,225.756 1261.33,222.143 1261.9,223.016 1262.47,220.479 1263.04,225.479 1263.61,227.145 1264.18,226.681 1264.74,228.191 1265.31,229.53 1265.88,228.792 1266.45,227.89 1267.02,228.071 1267.59,228.715 1268.15,228.027 1268.72,231.423 1269.29,231.597 1269.86,229.82 1270.43,230.019 1271,228.259 1271.56,230.578 1272.13,233.708 1272.7,232.769 1273.27,234.158 1273.84,234 1274.41,233.122 1274.97,234.256 1275.54,233.181 1276.11,230.094 1276.68,232.654 1277.25,232.634 1277.82,230.722 1278.38,232.069 1278.95,231.359 1279.52,231.56 1280.09,230.614 1280.66,230.869 1281.23,233.118 1281.79,232.195 1282.36,232.504 1282.93,233.779 1283.5,234.759 1284.07,233.684 1284.64,232.764 1285.2,232.958 1285.77,231.896 1286.34,232.092 1286.91,232.332 1287.48,232.448 1288.05,234.715 1288.61,233.633 1289.18,232.669 1289.75,232.657 1290.32,231.75 1290.89,232.856 1291.46,232.825 1292.02,232.003 1292.59,234.274 1293.16,235.075 1293.73,236.243 1294.3,235.895 1294.87,233.819 1295.43,236.732 1296,235.543 1296.57,236.29 1297.14,236.087 1297.71,234.894 1298.28,233.897 1298.84,233.722 1299.41,233.488 1299.98,232.342 1300.55,231.196 1301.12,231.388 1301.69,229.429 1302.25,229.768 1302.82,232.276 1303.39,233.587 1303.96,234.814 1304.53,235.572 1305.1,235.443 1305.66,237.037 1306.23,235.712 1306.8,235.597 1307.37,234.333 1307.94,235.324 1308.51,234.197 1309.07,234.742 1309.64,235.618 1310.21,235.698 1310.78,233.504 1311.35,232.642 1311.92,232.846 1312.48,232.961 1313.05,230.799 1313.62,233.027 1314.19,233.058 1314.76,233.107 1315.33,233.068 1315.89,235.217 1316.46,234.878 1317.03,234.643 1317.6,234.485 1318.17,236.47 1318.74,237.257 1319.3,235.801 1319.87,233.5 1320.44,233.457 1321.01,233.383 1321.58,232.115 1322.15,232.283 1322.71,232.314 1323.28,234.502 1323.85,233.415 1324.42,233.485 1324.99,233.525 1325.56,237.628 1326.12,237.075 1326.69,237.726 1327.26,237.256 1327.83,236.86 1328.4,238.608 1328.97,238.051 1329.53,237.643 1330.1,237.107 1330.67,234.746 1331.24,235.523 1331.81,233.212 1332.38,234.266 1332.94,236.086 1333.51,236.8 1334.08,236.257 1334.65,235.701 1335.22,235.329 1335.79,233.909 1336.36,230.509 1336.92,229.431 1337.49,228.559 1338.06,228.813 1338.63,228.854 1339.2,231.002 1339.77,231.9 1340.33,229.824 1340.9,229.876 1341.47,229.929 1342.04,228.121 1342.61,227.331 1343.18,226.526 1343.74,227.946 1344.31,226.103 1344.88,226.485 1345.45,225.867 1346.02,227.393 1346.59,227.645 1347.15,226.915 1347.72,228.279 1348.29,229.821 1348.86,231.036 1349.43,230.208 1350,230.538 1350.56,231.93 1351.13,231.727 1351.7,232.992 1352.27,233.083 1352.84,230.062 1353.41,229.256 1353.97,230.793 1354.54,231.045 1355.11,231.165 1355.68,231.287 1356.25,231.539 1356.82,230.568 1357.38,229.486 1357.95,234.004 1358.52,236.168 1359.09,235.234 1359.66,235.09 1360.23,234.137 1360.79,235.132 1361.36,236.166 1361.93,235.949 1362.5,235.496 1363.07,235.365 1363.64,233.854 1364.2,235.966 1364.77,237.773 1365.34,237.544 1365.91,236.099 1366.48,235.52 1367.05,235.101 1367.61,234.942 1368.18,233.704 1368.75,234.53 1369.32,234.324 1369.89,234.157 1370.46,234.938 1371.02,235.772 1371.59,236.623 1372.16,236.277 1372.73,236.006 1373.3,235.614 1373.87,236.38 1374.43,236.154 1375,238.996 1375.57,239.268 1376.14,236.465 1376.71,237.307 1377.28,236.768 1377.84,236.33 1378.41,235.953 1378.98,235.548 1379.55,234.174 1380.12,234.042 1380.69,234.03 1381.25,230.713 1381.82,232.688 1382.39,232.674 1382.96,230.488 1383.53,230.689 1384.1,230.702 1384.66,229.634 1385.23,229.645 1385.8,230.92 1386.37,229.975 1386.94,230.071 1387.51,230.882 1388.07,228.904 1388.64,227.93 1389.21,229.19 1389.78,230.509 1390.35,228.651 1390.92,227.895 1391.48,227.881 1392.05,227.157 1392.62,227.594 1393.19,227.97 1393.76,228.223 1394.33,231.55 1394.89,230.365 1395.46,230.494 1396.03,230.763 1396.6,228.761 1397.17,229.045 1397.74,229.264 1398.3,231.399 1398.87,231.369 1399.44,231.711 1400.01,234.613 1400.58,236.585 1401.15,236.248 1401.71,234.016 1402.28,234.911 1402.85,234.037 1403.42,233.955 1403.99,236.758 1404.56,236.277 1405.13,236.26 1405.69,234.036 1406.26,233.956 1406.83,234.874 1407.4,232.525 1407.97,233.491 1408.54,233.291 1409.1,232.997 1409.67,232.851 1410.24,234.769 1410.81,234.509 1411.38,234.21 1411.95,234.807 1412.51,235.831 1413.08,235.299 1413.65,235.069 1414.22,234.776 1414.79,234.392 1415.36,232.318 1415.92,233.464 1416.49,235.587 1417.06,235.203 1417.63,234.925 1418.2,234.77 1418.77,234.723 1419.33,232.494 1419.9,231.391 1420.47,232.346 1421.04,233.17 1421.61,232.839 1422.18,232.672 1422.74,233.405 1423.31,233.985 1423.88,233.653 1424.45,232.454 1425.02,232.124 1425.59,234.323 1426.15,233.352 1426.72,232.405 1427.29,233.441 1427.86,233.292 1428.43,233.389 1429,234.156 1429.56,231.797 1430.13,228.68 1430.7,228.987 1431.27,230.341 1431.84,230.603 1432.41,230.769 1432.97,232.087 1433.54,232.025 1434.11,232.002 1434.68,230.888 1435.25,231.857 1435.82,232.965 1436.38,232.603 1436.95,233.53 1437.52,234.274 1438.09,233.96 1438.66,231.506 1439.23,232.597 1439.79,231.329 1440.36,230.295 1440.93,230.184 1441.5,229.217 1442.07,229.598 1442.64,227.726 1443.2,228.092 1443.77,227.103 1444.34,226.674 1444.91,228.312 1445.48,227.671 1446.05,228.35 1446.61,230.918 1447.18,231.179 1447.75,231.542 1448.32,229.625 1448.89,228.849 1449.46,231.002 1450.02,233.183 1450.59,232.186 1451.16,231.1 1451.73,230.103 1452.3,231.21 1452.87,231.365 1453.43,234.515 1454,234.213 1454.57,234.92 1455.14,235.796 1455.71,237.65 1456.28,239.176 1456.84,237.768 1457.41,238.245 1457.98,238.945 1458.55,235.389 1459.12,237.37 1459.69,239.074 1460.25,236.68 1460.82,235.321 1461.39,236.228 1461.96,233.982 1462.53,232.945 1463.1,231.083 1463.66,230.197 1464.23,231.265 1464.8,231.146 1465.37,232.183 1465.94,230.361 1466.51,230.327 1467.07,228.58 1467.64,232.014 1468.21,232.173 1468.78,232.272 1469.35,231.147 1469.92,232.49 1470.48,232.584 1471.05,231.539 1471.62,231.596 1472.19,232.725 1472.76,232.73 1473.33,233.661 1473.89,233.475 1474.46,233.434 1475.03,231.212 1475.6,232.257 1476.17,232.242 1476.74,233.214 1477.31,233.971 1477.87,232.637 1478.44,232.505 1479.01,231.549 1479.58,232.403 1480.15,231.335 1480.72,232.22 1481.28,231.97 1481.85,231.829 1482.42,228.707 1482.99,228.824 1483.56,231.223 1484.13,231.56 1484.69,231.465 1485.26,231.548 1485.83,232.508 1486.4,231.298 1486.97,230.549 1487.54,231.858 1488.1,235.001 1488.67,234.677 1489.24,234.437 1489.81,234.201 1490.38,231.917 1490.95,230.798 1491.51,231.781 1492.08,231.603 1492.65,230.652 1493.22,231.641 1493.79,230.685 1494.36,230.807 1494.92,231.944 1495.49,230.994 1496.06,229.249 1496.63,231.396 1497.2,228.601 1497.77,230.973 1498.33,231.203 1498.9,230.148 1499.47,232.453 1500.04,233.276 1500.61,232.241 1501.18,232.175 1501.74,232.083 1502.31,234.127 1502.88,234.069 1503.45,234.983 1504.02,232.749 1504.59,231.579 1505.15,227.224 1505.72,226.714 1506.29,225.154 1506.86,224.655 1507.43,226.543 1508,225.744 1508.56,227.388 1509.13,228.78 1509.7,228.233 1510.27,226.551 1510.84,228.084 1511.41,228.529 1511.97,228.904 1512.54,229.337 1513.11,228.496 1513.68,226.891 1514.25,229.376 1514.82,227.689 1515.38,226.134 1515.95,224.758 1516.52,227.388 1517.09,226.71 1517.66,228.382 1518.23,225.642 1518.79,227.197 1519.36,227.863 1519.93,228.49 1520.5,229.95 1521.07,232.197 1521.64,233.404 1522.2,234.537 1522.77,235.732 1523.34,236.522 1523.91,238.709 1524.48,237.619 1525.05,239.45 1525.61,238.091 1526.18,236.839 1526.75,233.717 1527.32,231.665 1527.89,233.789 1528.46,233.944 1529.02,236.05 1529.59,235.956 1530.16,235.894 1530.73,236.593 1531.3,237.454 1531.87,236.037 1532.43,234.872 1533,234.649 1533.57,234.561 1534.14,236.512 1534.71,236.206 1535.28,236.06 1535.84,234.936 1536.41,234.846 1536.98,234.76 1537.55,235.871 1538.12,236.78 1538.69,236.514 1539.25,233.407 1539.82,230.168 1540.39,231.265 1540.96,231.493 1541.53,233.674 1542.1,231.672 1542.66,232.026 1543.23,231.953 1543.8,232.083 1544.37,230.117 1544.94,228.929 1545.51,230.235 1546.08,230.405 1546.64,230.484 1547.21,231.898 1547.78,232.114 1548.35,232.129 1548.92,232.096 1549.49,231.224 1550.05,232.855 1550.62,232.049 1551.19,235.156 1551.76,232.097 1552.33,234.235 1552.9,234.088 1553.46,232.985 1554.03,235.247 1554.6,235.183 1555.17,235.22 1555.74,233.881 1556.31,233.892 1556.87,232.764 1557.44,233.687 1558.01,234.835 1558.58,235.912 1559.15,235.827 1559.72,234.685 1560.28,235.614 1560.85,235.546 1561.42,236.581 1561.99,236.376 1562.56,238.006 1563.13,235.563 1563.69,235.362 1564.26,235.082 1564.83,235.105 1565.4,234.045 1565.97,234.653 1566.54,233.762 1567.1,233.726 1567.67,232.765 1568.24,232.737 1568.81,231.503 1569.38,232.546 1569.95,232.555 1570.51,229.555 1571.08,229.931 1571.65,229.884 1572.22,229.113 1572.79,230.318 1573.36,229.34 1573.92,228.68 1574.49,228.986 1575.06,227.995 1575.63,230.122 1576.2,233.546 1576.77,232.265 1577.33,232.376 1577.9,231.423 1578.47,233.317 1579.04,232.402 1579.61,230.461 1580.18,231.631 1580.74,231.648 1581.31,232.851 1581.88,231.776 1582.45,230.735 1583.02,228.97 1583.59,228.072 1584.15,228.458 1584.72,228.593 1585.29,230.027 1585.86,233.263 1586.43,231.358 1587,233.604 1587.56,233.403 1588.13,231.38 1588.7,231.628 1589.27,228.973 1589.84,229.378 1590.41,228.335 1590.97,227.683 1591.54,229.217 1592.11,229.561 1592.68,231.117 1593.25,230.377 1593.82,232.635 1594.38,232.762 1594.95,231.882 1595.52,233.211 1596.09,231.411 1596.66,232.402 1597.23,230.335 1597.79,231.602 1598.36,232.732 1598.93,232.806 1599.5,235.894 1600.07,233.667 1600.64,233.637 1601.2,234.676 1601.77,233.707 1602.34,235.579 1602.91,235.465 1603.48,231.157 1604.05,230.209 1604.61,231.759 1605.18,232.798 1605.75,234.92 1606.32,237.01 1606.89,239.955 1607.46,238.568 1608.02,239.095 1608.59,235.516 1609.16,237.315 1609.73,239.23 1610.3,239.962 1610.87,240.673 1611.43,241.083 1612,240.45 1612.57,239.963 1613.14,238.444 1613.71,238.026 1614.28,236.723 1614.84,238.214 1615.41,238.571 1615.98,236.958 1616.55,237.525 1617.12,237.046 1617.69,237.747 1618.26,237.342 1618.82,237.079 1619.39,234.74 1619.96,234.475 1620.53,234.352 1621.1,232.143 1621.67,231.994 1622.23,232.79 1622.8,231.693 1623.37,233.835 1623.94,230.645 1624.51,230.828 1625.08,231.021 1625.64,230.009 1626.21,230.165 1626.78,229.965 1627.35,230.094 1627.92,229.239 1628.49,227.529 1629.05,227.912 1629.62,227.227 1630.19,227.633 1630.76,225.848 1631.33,228.452 1631.9,230.57 1632.46,229.356 1633.03,229.549 1633.6,229.035 1634.17,228.248 1634.74,228.492 1635.31,228.872 1635.87,230.235 1636.44,230.688 1637.01,230.764 1637.58,229.9 1638.15,230.021 1638.72,232.216 1639.28,231.15 1639.85,232.17 1640.42,233.28 1640.99,231.104 1641.56,231.389 1642.13,233.419 1642.69,232.155 1643.26,230.37 1643.83,228.694 1644.4,228.839 1644.97,228.265 1645.54,228.714 1646.1,229.107 1646.67,230.446 1647.24,230.658 1647.81,232.931 1648.38,233.07 1648.95,233.297 1649.51,233.086 1650.08,233.288 1650.65,231.095 1651.22,231.219 1651.79,232.396 1652.36,231.488 1652.92,232.459 1653.49,231.558 1654.06,232.564 1654.63,231.545 1655.2,232.657 1655.77,233.925 1656.33,233.906 1656.9,234.961 1657.47,235.872 1658.04,236.666 1658.61,237.488 1659.18,238.212 1659.74,241.074 1660.31,241.68 1660.88,243.198 1661.45,242.331 1662.02,241.239 1662.59,239.553 1663.15,240.001 1663.72,239.411 1664.29,237.701 1664.86,239.252 1665.43,239.659 1666,239.008 1666.56,238.361 1667.13,236.708 1667.7,236.485 1668.27,236.137 1668.84,236.836 1669.41,235.406 1669.97,236.1 1670.54,232.564 1671.11,230.531 1671.68,228.538 1672.25,230.766 1672.82,232.136 1673.38,231.021 1673.95,229.794 1674.52,229.936 1675.09,230.894 1675.66,229.936 1676.23,230.224 1676.79,228.21 1677.36,227.5 1677.93,225.785 1678.5,223.934 1679.07,222.532 1679.64,225.403 1680.2,225.858 1680.77,224.241 1681.34,226.81 1681.91,227.139 1682.48,227.569 1683.05,228.94 1683.61,231.159 1684.18,232.228 1684.75,233.246 1685.32,234.124 1685.89,235.993 1686.46,234.627 1687.02,234.215 1687.59,235.988 1688.16,235.586 1688.73,234.265 1689.3,233.297 1689.87,233.101 1690.44,231.931 1691,231.845 1691.57,235.04 1692.14,234.841 1692.71,235.824 1693.28,235.594 1693.85,234.305 1694.41,233.184 1694.98,232.047 1695.55,230.907 1696.12,229.984 1696.69,229.958 1697.26,229.17 1697.82,229.379 1698.39,229.735 1698.96,228.835 1699.53,228.954 1700.1,229.328 1700.67,228.485 1701.23,229.645 1701.8,228.653 1702.37,227.731 1702.94,226.038 1703.51,226.412 1704.08,228.921 1704.64,230.419 1705.21,231.699 1705.78,232.662 1706.35,232.692 1706.92,232.752 1707.49,231.786 1708.05,234.833 1708.62,232.738 1709.19,231.655 1709.76,229.728 1710.33,230.188 1710.9,230.272 1711.46,226.406 1712.03,226.167 1712.6,226.714 1713.17,226.242 1713.74,229.876 1714.31,230.177 1714.87,230.743 1715.44,233.875 1716.01,234.754 1716.58,233.755 1717.15,232.866 1717.72,230.924 1718.28,231.099 1718.85,231.509 1719.42,231.736 1719.99,232.016 1720.56,233.273 1721.13,232.062 1721.69,232.151 1722.26,234.412 1722.83,235.336 1723.4,234.379 1723.97,233.316 1724.54,235.284 1725.1,233.36 1725.67,232.535 1726.24,232.561 1726.81,231.423 1727.38,230.642 1727.95,229.866 1728.51,231.186 1729.08,231.371 1729.65,233.511 1730.22,232.543 1730.79,234.867 1731.36,235.971 1731.92,237.874 1732.49,238.689 1733.06,239.399 1733.63,242.125 1734.2,241.63 1734.77,240.899 1735.33,240.329 1735.9,240.056 1736.47,239.646 1737.04,236.944 1737.61,236.605 1738.18,241.573 1738.74,240.961 1739.31,239.336 1739.88,237.753 1740.45,240.432 1741.02,238.966 1741.59,237.198 1742.15,235.683 1742.72,235.38 1743.29,236.289 1743.86,235.801 1744.43,234.323 1745,232.133 1745.56,232.175 1746.13,234.012 1746.7,234.628 1747.27,234.093 1747.84,232.727 1748.41,232.446 1748.97,231.344 1749.54,232.477 1750.11,230.466 1750.68,232.571 1751.25,232.283 1751.82,233.244 1752.38,233.883 1752.95,235.848 1753.52,234.464 1754.09,235.076 1754.66,236.618 1755.23,235.314 1755.79,233.902 1756.36,232.816 1756.93,233.787 1757.5,233.399 1758.07,232.295 1758.64,232.188 1759.21,231.12 1759.77,227.844 1760.34,228.073 1760.91,230.421 1761.48,231.305 1762.05,231.108 1762.62,230.274 1763.18,232.277 1763.75,232.144 1764.32,232.877 1764.89,233.659 1765.46,232.301 1766.03,230.34 1766.59,228.223 1767.16,229.636 1767.73,231.888 1768.3,231.802 1768.87,231.91 1769.44,233.772 1770,236.847 1770.57,237.598 1771.14,237.211 1771.71,232.642 1772.28,236.597 1772.85,236.164 1773.41,229.596 1773.98,228.623 1774.55,228.071 1775.12,226.977 1775.69,227.095 1776.26,225.323 1776.82,225.854 1777.39,224.427 1777.96,225.175 1778.53,225.78 1779.1,224.337 1779.67,219.895 1780.23,221.783 1780.8,223.726 1781.37,227.413 1781.94,227.709 1782.51,230.486 1783.08,228.636 1783.64,224.795 1784.21,225.27 1784.78,224.943 1785.35,225.715 1785.92,229.314 1786.49,231.704 1787.05,230.819 1787.62,230.014 1788.19,229.228 1788.76,230.614 1789.33,230.909 1789.9,232.229 1790.46,231.382 1791.03,232.79 1791.6,232.104 1792.17,234.161 1792.74,234.026 1793.31,232.851 1793.87,233.023 1794.44,234.142 1795.01,234.068 1795.58,233.978 1796.15,232.672 1796.72,232.755 1797.28,232.774 1797.85,231.868 1798.42,231.204 1798.99,228.112 1799.56,227.713 1800.13,229.393 1800.69,227.572 1801.26,228.018 1801.83,224.444 1802.4,225.068 1802.97,223.71 1803.54,224.462 1804.1,226.076 1804.67,228.791 1805.24,230.233 1805.81,228.341 1806.38,229.772 1806.95,229.119 1807.51,227.264 1808.08,225.672 1808.65,227.523 1809.22,228.962 1809.79,230.58 1810.36,231.055 1810.92,232.564 1811.49,234.805 1812.06,234.02 1812.63,236.146 1813.2,236.217 1813.77,234.362 1814.33,234.353 1814.9,234.202 1815.47,232.996 1816.04,234.351 1816.61,231.242 1817.18,233.29 1817.74,234.461 1818.31,234.596 1818.88,237.442 1819.45,238.065 1820.02,237.752 1820.59,240.637 1821.15,239.984 1821.72,241.464 1822.29,239.898 1822.86,239.428 1823.43,239.247 1824,237.77 1824.56,239.72 1825.13,241.142 1825.7,242.614 1826.27,246.023 1826.84,245.041 1827.41,244.213 1827.97,244.31 1828.54,241.353 1829.11,240.674 1829.68,240.112 1830.25,239.516 1830.82,240.913 1831.39,241.499 1831.95,241.859 1832.52,242.367 1833.09,241.502 1833.66,240.748 1834.23,237.886 1834.8,236.406 1835.36,236.002 1835.93,233.468 1836.5,233.398 1837.07,233.365 1837.64,235.381 1838.21,233.113 1838.77,231.907 1839.34,230.795 1839.91,230.803 1840.48,232.879 1841.05,232.719 1841.62,233.517 1842.18,235.164 1842.75,234.822 1843.32,235.549 1843.89,237.208 1844.46,235.464 1845.03,234.09 1845.59,232.903 1846.16,231.84 1846.73,231.731 1847.3,231.626 1847.87,229.682 1848.44,229.612 1849,231.628 1849.57,231.509 1850.14,232.435 1850.71,232.396 1851.28,231.233 1851.85,229.013 1852.41,230.179 1852.98,230.258 1853.55,229.429 1854.12,231.812 1854.69,230.799 1855.26,230.956 1855.82,232.778 1856.39,232.519 1856.96,231.185 1857.53,228.999 1858.1,229.011 1858.67,230.046 1859.23,230.23 1859.8,231.212 1860.37,232.019 1860.94,231.907 1861.51,231.904 1862.08,231.962 1862.64,231.806 1863.21,234.036 1863.78,233.723 1864.35,234.646 1864.92,234.473 1865.49,234.118 1866.05,233.938 1866.62,233.792 1867.19,231.295 1867.76,229.29 1868.33,229.386 1868.9,229.431 1869.46,230.492 1870.03,228.578 1870.6,229.897 1871.17,231.929 1871.74,233.038 1872.31,231.856 1872.87,232.739 1873.44,233.506 1874.01,231.981 1874.58,231.798 1875.15,228.796 1875.72,230.131 1876.28,230.205 1876.85,229.254 1877.42,231.428 1877.99,229.472 1878.56,230.697 1879.13,231.828 1879.69,235.807 1880.26,238.582 1880.83,237.827 1881.4,238.347 1881.97,238.759 1882.54,239.336 1883.1,238.724 1883.67,237.349 1884.24,236.134 1884.81,233.829 1885.38,232.772 1885.95,233.736 1886.51,234.465 1887.08,233.212 1887.65,234.179 1888.22,236.011 1888.79,234.623 1889.36,235.491 1889.92,235.922 1890.49,236.52 1891.06,235.009 1891.63,233.615 1892.2,231.331 1892.77,232.419 1893.33,233.132 1893.9,231.905 1894.47,231.97 1895.04,233.016 1895.61,233.741 1896.18,231.285 1896.74,229.183 1897.31,231.36 1897.88,231.469 1898.45,232.606 1899.02,231.757 1899.59,231.651 1900.16,231.706 1900.72,230.806 1901.29,229.8 1901.86,228.925 1902.43,227.882 1903,228.182 1903.57,226.302 1904.13,227.818 1904.7,228.267 1905.27,228.507 1905.84,228.755 1906.41,228.991 1906.98,228.948 1907.54,226.823 1908.11,224.129 1908.68,224.516 1909.25,225.038 1909.82,224.658 1910.39,225.139 1910.95,225.73 1911.52,228.275 1912.09,230.61 1912.66,230.748 1913.23,230.96 1913.8,234.2 1914.36,231.091 1914.93,232.285 1915.5,233.304 1916.07,231.097 1916.64,228.242 1917.21,224.3 1917.77,223.951 1918.34,224.673 1918.91,223.016 1919.48,222.838 1920.05,221.432 1920.62,221.471 1921.18,221.144 1921.75,223.875 1922.32,225.662 1922.89,226.176 1923.46,227.88 1924.03,229.045 1924.59,230.462 1925.16,230.507 1925.73,230.572 1926.3,230.78 1926.87,230.199 1927.44,229.262 1928,230.523 1928.57,229.875 1929.14,232.471 1929.71,232.483 1930.28,230.775 1930.85,231.214 1931.41,231.572 1931.98,231.899 1932.55,233.169 1933.12,231.074 1933.69,229.629 1934.26,229.96 1934.82,231.315 1935.39,234.601 1935.96,233.551 1936.53,234.527 1937.1,231.554 1937.67,230.748 1938.23,229.225 1938.8,227.658 1939.37,228.313 1939.94,226.805 1940.51,229.494 1941.08,230.033 1941.64,231.514 1942.21,231.858 1942.78,233.223 1943.35,233.466 1943.92,236.756 1944.49,235.643 1945.05,235.538 1945.62,233.41 1946.19,233.541 1946.76,235.545 1947.33,234.49 1947.9,235.424 1948.46,235.251 1949.03,234.203 1949.6,232.216 1950.17,232.584 1950.74,233.951 1951.31,231.795 1951.87,230.928 1952.44,234.074 1953.01,233.118 1953.58,236.222 1954.15,237.189 1954.72,238.017 1955.28,238.959 1955.85,238.667 1956.42,238.273 1956.99,237.97 1957.56,237.708 1958.13,238.642 1958.69,237.199 1959.26,236.861 1959.83,235.677 1960.4,234.647 1960.97,236.667 1961.54,234.297 1962.1,235.356 1962.67,236.149 1963.24,235.003 1963.81,236.915 1964.38,235.716 1964.95,234.22 1965.51,235.262 1966.08,235.12 1966.65,235.087 1967.22,233.915 1967.79,233.811 1968.36,232.752 1968.92,233.892 1969.49,233.928 1970.06,231.947 1970.63,232.044 1971.2,229.892 1971.77,231.105 1972.34,231.276 1972.9,232.192 1973.47,233.258 1974.04,235.187 1974.61,235.025 1975.18,235.328 1975.75,233.155 1976.31,234.1 1976.88,233.975 1977.45,231.94 1978.02,234.016 1978.59,233.983 1979.16,232.79 1979.72,233.871 1980.29,232.791 1980.86,231.755 1981.43,231.809 1982,231.792 1982.57,235.041 1983.13,235.559 1983.7,234.381 1984.27,235.291 1984.84,237.165 1985.41,239.85 1985.98,238.142 1986.54,237.554 1987.11,237.09 1987.68,236.853 1988.25,236.45 1988.82,239.206 1989.39,239.769 1989.95,241.255 1990.52,241.666 1991.09,239.98 1991.66,241.419 1992.23,240.674 1992.8,239.205 1993.36,238.751 1993.93,237.421 1994.5,237.049 1995.07,236.66 1995.64,237.456 1996.21,238.983 1996.77,237.339 1997.34,239.05 1997.91,237.508 1998.48,236.141 1999.05,236.461 1999.62,236.131 2000.18,233.685 2000.75,233.541 2001.32,235.404 2001.89,234.877 2002.46,232.723 2003.03,231.694 2003.59,231.452 2004.16,231.301 2004.73,230.354 2005.3,233.285 2005.87,232.94 2006.44,232.694 2007,235.546 2007.57,234.281 2008.14,234.054 2008.71,232.671 2009.28,232.321 2009.85,233.178 2010.41,231.747 2010.98,230.513 2011.55,231.531 2012.12,230.338 2012.69,228.181 2013.26,228.217 2013.82,230.392 2014.39,230.374 2014.96,228.198 2015.53,227.297 2016.1,226.55 2016.67,227.89 2017.23,232.171 2017.8,230.916 2018.37,230.694 2018.94,228.721 2019.51,228.969 2020.08,228.193 2020.64,229.652 2021.21,228.734 2021.78,228.889 2022.35,229.222 2022.92,228.416 2023.49,226.772 2024.05,227.305 2024.62,226.769 2025.19,228.228 2025.76,228.568 2026.33,229.003 2026.9,229.622 2027.46,229.712 2028.03,229.02 2028.6,228.323 2029.17,228.493 2029.74,227.759 2030.31,228.023 2030.87,228.27 2031.44,230.508 2032.01,228.713 2032.58,226.961 2033.15,226.347 2033.72,225.649 2034.28,228.398 2034.85,230.686 2035.42,229.993 2035.99,230.497 2036.56,231.72 2037.13,230.957 2037.69,232.433 2038.26,232.749 2038.83,233.916 2039.4,233.923 2039.97,231.805 2040.54,233.712 2041.11,233.431 2041.67,234.442 2042.24,234.449 2042.81,233.056 2043.38,233.093 2043.95,234.006 2044.52,235.863 2045.08,236.61 2045.65,235.387 2046.22,235.312 2046.79,234.188 2047.36,233.216 2047.93,231.226 2048.49,231.451 2049.06,231.479 2049.63,231.668 2050.2,232.006 2050.77,231.061 2051.34,230.406 2051.9,231.711 2052.47,231.776 2053.04,233.077 2053.61,233.034 2054.18,233.17 2054.75,233.217 2055.31,235.229 2055.88,235.226 2056.45,233.842 2057.02,232.916 2057.59,231.903 2058.16,232.977 2058.72,232.87 2059.29,234.819 2059.86,234.738 2060.43,235.747 2061,235.572 2061.57,234.282 2062.13,233.147 2062.7,232.961 2063.27,233.706 2063.84,233.526 2064.41,233.488 2064.98,232.452 2065.54,231.551 2066.11,229.551 2066.68,230.698 2067.25,229.503 2067.82,230.728 2068.39,231.956 2068.95,230.86 2069.52,231.159 2070.09,231.195 2070.66,231.257 2071.23,231.39 2071.8,229.343 2072.36,229.583 2072.93,227.854 2073.5,228.06 2074.07,228.525 2074.64,231.132 2075.21,232.407 2075.77,231.633 2076.34,232.818 2076.91,231.828 2077.48,232.956 2078.05,231.874 2078.62,230.929 2079.18,231.069 2079.75,231.368 2080.32,233.704 2080.89,231.657 2081.46,230.609 2082.03,231.705 2082.59,230.567 2083.16,232.844 2083.73,230.786 2084.3,233.151 2084.87,235.355 2085.44,237.161 2086,237.923 2086.57,236.488 2087.14,236.327 2087.71,237.211 2088.28,238.007 2088.85,237.586 2089.41,237.094 2089.98,237.589 2090.55,238.312 2091.12,238.918 2091.69,238.367 2092.26,236.178 2092.82,235.98 2093.39,235.629 2093.96,233.217 2094.53,231.117 2095.1,232.271 2095.67,233.195 2096.23,234.159 2096.8,233.957 2097.37,232.9 2097.94,231.758 2098.51,233.004 2099.08,234.901 2099.64,233.761 2100.21,232.649 2100.78,233.58 2101.35,234.465 2101.92,237.21 2102.49,234.738 2103.05,234.607 2103.62,233.323 2104.19,234.304 2104.76,235.047 2105.33,234.646 2105.9,234.103 2106.46,236.057 2107.03,234.711 2107.6,231.413 2108.17,232.254 2108.74,233.152 2109.31,234.925 2109.87,234.717 2110.44,234.499 2111.01,233.613 2111.58,233.585 2112.15,234.381 2112.72,233.319 2113.29,232.031 2113.85,231.234 2114.42,231.356 2114.99,231.243 2115.56,230.401 2116.13,230.414 2116.7,233.317 2117.26,231.956 2117.83,230.993 2118.4,231.304 2118.97,229.231 2119.54,229.502 2120.11,231.84 2120.67,232.75 2121.24,233.681 2121.81,232.344 2122.38,231.269 2122.95,231.324 2123.52,231.152 2124.08,233.196 2124.65,235.166 2125.22,234.651 2125.79,234.43 2126.36,231.053 2126.93,229.993 2127.49,230.095 2128.06,231.138 2128.63,233.333 2129.2,233.964 2129.77,236.236 2130.34,234.857 2130.9,232.538 2131.47,234.515 2132.04,233.434 2132.61,233.245 2133.18,234.269 2133.75,234.356 2134.31,232.928 2134.88,231.96 2135.45,232.915 2136.02,232.895 2136.59,234.881 2137.16,235.573 2137.72,235.45 2138.29,235.338 2138.86,236.263 2139.43,234.886 2140,235.581 2140.57,235.465 2141.13,234.149 2141.7,236.043 2142.27,232.65 2142.84,233.273 2143.41,232.114 2143.98,229.944 2144.54,229.802 2145.11,229.808 2145.68,230.972 2146.25,230.973 2146.82,230.069 2147.39,229.118 2147.95,229.328 2148.52,229.589 2149.09,225.447 2149.66,226.827 2150.23,227.182 2150.8,228.644 2151.36,226.003 2151.93,228.355 2152.5,229.51 2153.07,228.633 2153.64,228.803 2154.21,230.165 2154.77,230.314 2155.34,231.644 2155.91,236.059 2156.48,235.73 2157.05,234.459 2157.62,234.416 2158.18,232.302 2158.75,231.301 2159.32,231.504 2159.89,232.721 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.026\n  with uncertainty of ± 0.002323226658868783\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01058 ± (0.00203767, 0.00194476) (MC)\n  95% confidence interval: [-4.01453, -4.00679] (MC)\n  linear error propagation: -4.01068 ± 0.00200852\n  |δ_y| = |0.0018276| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.010581041926379, val_l = 0.003950406381460603, val_u = 0.0037957164512443242)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip330\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip331\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip332\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.71 2211.02,1151.71 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,994.724 2211.02,994.724 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,837.735 2211.02,837.735 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,680.745 2211.02,680.745 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,523.756 2211.02,523.756 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,366.767 2211.02,366.767 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,209.778 2211.02,209.778 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.71 365.751,1151.71 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,994.724 365.751,994.724 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,837.735 365.751,837.735 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,680.745 365.751,680.745 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,523.756 365.751,523.756 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,366.767 365.751,366.767 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,209.778 365.751,209.778 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M298.909 1137.51 Q295.298 1137.51 293.469 1141.08 Q291.664 1144.62 291.664 1151.75 Q291.664 1158.85 293.469 1162.42 Q295.298 1165.96 298.909 1165.96 Q302.543 1165.96 304.349 1162.42 Q306.177 1158.85 306.177 1151.75 Q306.177 1144.62 304.349 1141.08 Q302.543 1137.51 298.909 1137.51 M298.909 1133.81 Q304.719 1133.81 307.775 1138.41 Q310.853 1143 310.853 1151.75 Q310.853 1160.47 307.775 1165.08 Q304.719 1169.66 298.909 1169.66 Q293.099 1169.66 290.02 1165.08 Q286.964 1160.47 286.964 1151.75 Q286.964 1143 290.02 1138.41 Q293.099 1133.81 298.909 1133.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M259.557 1008.07 L267.196 1008.07 L267.196 981.703 L258.886 983.37 L258.886 979.111 L267.15 977.444 L271.826 977.444 L271.826 1008.07 L279.465 1008.07 L279.465 1012 L259.557 1012 L259.557 1008.07 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 980.523 Q295.298 980.523 293.469 984.087 Q291.664 987.629 291.664 994.759 Q291.664 1001.87 293.469 1005.43 Q295.298 1008.97 298.909 1008.97 Q302.543 1008.97 304.349 1005.43 Q306.177 1001.87 306.177 994.759 Q306.177 987.629 304.349 984.087 Q302.543 980.523 298.909 980.523 M298.909 976.819 Q304.719 976.819 307.775 981.425 Q310.853 986.009 310.853 994.759 Q310.853 1003.49 307.775 1008.09 Q304.719 1012.68 298.909 1012.68 Q293.099 1012.68 290.02 1008.09 Q286.964 1003.49 286.964 994.759 Q286.964 986.009 290.02 981.425 Q293.099 976.819 298.909 976.819 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M262.775 851.08 L279.094 851.08 L279.094 855.015 L257.15 855.015 L257.15 851.08 Q259.812 848.325 264.395 843.695 Q269.002 839.043 270.182 837.7 Q272.428 835.177 273.307 833.441 Q274.21 831.681 274.21 829.992 Q274.21 827.237 272.266 825.501 Q270.344 823.765 267.242 823.765 Q265.043 823.765 262.59 824.529 Q260.159 825.293 257.381 826.844 L257.381 822.121 Q260.205 820.987 262.659 820.408 Q265.113 819.83 267.15 819.83 Q272.52 819.83 275.715 822.515 Q278.909 825.2 278.909 829.691 Q278.909 831.82 278.099 833.742 Q277.312 835.64 275.205 838.232 Q274.627 838.904 271.525 842.121 Q268.423 845.316 262.775 851.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 823.533 Q295.298 823.533 293.469 827.098 Q291.664 830.64 291.664 837.769 Q291.664 844.876 293.469 848.441 Q295.298 851.982 298.909 851.982 Q302.543 851.982 304.349 848.441 Q306.177 844.876 306.177 837.769 Q306.177 830.64 304.349 827.098 Q302.543 823.533 298.909 823.533 M298.909 819.83 Q304.719 819.83 307.775 824.436 Q310.853 829.019 310.853 837.769 Q310.853 846.496 307.775 851.103 Q304.719 855.686 298.909 855.686 Q293.099 855.686 290.02 851.103 Q286.964 846.496 286.964 837.769 Q286.964 829.019 290.02 824.436 Q293.099 819.83 298.909 819.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M272.914 679.391 Q276.27 680.109 278.145 682.377 Q280.043 684.646 280.043 687.979 Q280.043 693.095 276.525 695.896 Q273.006 698.697 266.525 698.697 Q264.349 698.697 262.034 698.257 Q259.742 697.84 257.289 696.984 L257.289 692.47 Q259.233 693.604 261.548 694.183 Q263.863 694.762 266.386 694.762 Q270.784 694.762 273.076 693.025 Q275.39 691.289 275.39 687.979 Q275.39 684.924 273.238 683.211 Q271.108 681.475 267.289 681.475 L263.261 681.475 L263.261 677.632 L267.474 677.632 Q270.923 677.632 272.752 676.266 Q274.58 674.877 274.58 672.285 Q274.58 669.623 272.682 668.211 Q270.807 666.776 267.289 666.776 Q265.367 666.776 263.168 667.192 Q260.969 667.609 258.33 668.489 L258.33 664.322 Q260.992 663.581 263.307 663.211 Q265.645 662.84 267.705 662.84 Q273.029 662.84 276.131 665.271 Q279.233 667.678 279.233 671.799 Q279.233 674.669 277.59 676.66 Q275.946 678.627 272.914 679.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 666.544 Q295.298 666.544 293.469 670.109 Q291.664 673.651 291.664 680.78 Q291.664 687.887 293.469 691.451 Q295.298 694.993 298.909 694.993 Q302.543 694.993 304.349 691.451 Q306.177 687.887 306.177 680.78 Q306.177 673.651 304.349 670.109 Q302.543 666.544 298.909 666.544 M298.909 662.84 Q304.719 662.84 307.775 667.447 Q310.853 672.03 310.853 680.78 Q310.853 689.507 307.775 694.113 Q304.719 698.697 298.909 698.697 Q293.099 698.697 290.02 694.113 Q286.964 689.507 286.964 680.78 Q286.964 672.03 290.02 667.447 Q293.099 662.84 298.909 662.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M271.594 510.55 L259.789 528.999 L271.594 528.999 L271.594 510.55 M270.367 506.476 L276.247 506.476 L276.247 528.999 L281.177 528.999 L281.177 532.888 L276.247 532.888 L276.247 541.036 L271.594 541.036 L271.594 532.888 L255.992 532.888 L255.992 528.374 L270.367 506.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 509.555 Q295.298 509.555 293.469 513.12 Q291.664 516.661 291.664 523.791 Q291.664 530.897 293.469 534.462 Q295.298 538.004 298.909 538.004 Q302.543 538.004 304.349 534.462 Q306.177 530.897 306.177 523.791 Q306.177 516.661 304.349 513.12 Q302.543 509.555 298.909 509.555 M298.909 505.851 Q304.719 505.851 307.775 510.458 Q310.853 515.041 310.853 523.791 Q310.853 532.518 307.775 537.124 Q304.719 541.708 298.909 541.708 Q293.099 541.708 290.02 537.124 Q286.964 532.518 286.964 523.791 Q286.964 515.041 290.02 510.458 Q293.099 505.851 298.909 505.851 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M258.793 349.487 L277.15 349.487 L277.15 353.422 L263.076 353.422 L263.076 361.894 Q264.094 361.547 265.113 361.385 Q266.131 361.2 267.15 361.2 Q272.937 361.2 276.316 364.371 Q279.696 367.542 279.696 372.959 Q279.696 378.538 276.224 381.64 Q272.752 384.718 266.432 384.718 Q264.256 384.718 261.988 384.348 Q259.742 383.978 257.335 383.237 L257.335 378.538 Q259.418 379.672 261.641 380.228 Q263.863 380.783 266.34 380.783 Q270.344 380.783 272.682 378.677 Q275.02 376.57 275.02 372.959 Q275.02 369.348 272.682 367.242 Q270.344 365.135 266.34 365.135 Q264.465 365.135 262.59 365.552 Q260.738 365.968 258.793 366.848 L258.793 349.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 352.566 Q295.298 352.566 293.469 356.13 Q291.664 359.672 291.664 366.802 Q291.664 373.908 293.469 377.473 Q295.298 381.015 298.909 381.015 Q302.543 381.015 304.349 377.473 Q306.177 373.908 306.177 366.802 Q306.177 359.672 304.349 356.13 Q302.543 352.566 298.909 352.566 M298.909 348.862 Q304.719 348.862 307.775 353.468 Q310.853 358.052 310.853 366.802 Q310.853 375.529 307.775 380.135 Q304.719 384.718 298.909 384.718 Q293.099 384.718 290.02 380.135 Q286.964 375.529 286.964 366.802 Q286.964 358.052 290.02 353.468 Q293.099 348.862 298.909 348.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M269.326 207.914 Q266.178 207.914 264.326 210.067 Q262.497 212.22 262.497 215.97 Q262.497 219.697 264.326 221.873 Q266.178 224.025 269.326 224.025 Q272.474 224.025 274.303 221.873 Q276.154 219.697 276.154 215.97 Q276.154 212.22 274.303 210.067 Q272.474 207.914 269.326 207.914 M278.608 193.262 L278.608 197.521 Q276.849 196.688 275.043 196.248 Q273.261 195.808 271.502 195.808 Q266.872 195.808 264.418 198.933 Q261.988 202.058 261.641 208.377 Q263.006 206.363 265.066 205.299 Q267.127 204.211 269.603 204.211 Q274.812 204.211 277.821 207.382 Q280.853 210.53 280.853 215.97 Q280.853 221.294 277.705 224.511 Q274.557 227.729 269.326 227.729 Q263.33 227.729 260.159 223.146 Q256.988 218.539 256.988 209.812 Q256.988 201.618 260.877 196.757 Q264.766 191.873 271.316 191.873 Q273.076 191.873 274.858 192.22 Q276.664 192.567 278.608 193.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 195.576 Q295.298 195.576 293.469 199.141 Q291.664 202.683 291.664 209.812 Q291.664 216.919 293.469 220.484 Q295.298 224.025 298.909 224.025 Q302.543 224.025 304.349 220.484 Q306.177 216.919 306.177 209.812 Q306.177 202.683 304.349 199.141 Q302.543 195.576 298.909 195.576 M298.909 191.873 Q304.719 191.873 307.775 196.479 Q310.853 201.063 310.853 209.812 Q310.853 218.539 307.775 223.146 Q304.719 227.729 298.909 227.729 Q293.099 227.729 290.02 223.146 Q286.964 218.539 286.964 209.812 Q286.964 201.063 290.02 196.479 Q293.099 191.873 298.909 191.873 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip332)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1036.04 400.199,929.77 400.786,832.264 401.372,742.932 401.958,661.231 402.545,586.657 403.131,518.742 403.718,457.054 404.304,592.554 404.891,532.877 405.477,478.791 406.063,429.933 406.65,385.964 407.236,346.568 407.823,311.45 408.409,280.33 408.995,252.948 409.582,286.637 410.168,263.703 410.755,243.918 411.341,273.859 411.927,258.055 412.514,244.877 413.1,234.755 413.687,226.266 414.273,219.895 414.86,276.735 415.446,273.59 416.032,270.095 416.619,267.966 417.205,268.26 417.792,291.279 418.378,292.339 418.964,294.998 419.551,317.887 420.137,322.649 420.724,328.878 421.31,351.337 421.896,373.909 422.483,381.386 423.069,390.012 423.656,411.047 424.242,465.904 424.829,477.404 425.415,498.684 426.001,510.732 426.588,523.009 427.174,544.012 427.761,571.931 428.347,582.519 428.933,600.659 429.52,624.943 430.106,641.572 430.693,657.792 431.279,666.816 431.865,687.764 432.452,713.723 433.038,727.504 433.625,740.23 434.211,757.808 434.798,764.784 435.384,781.213 435.97,788.06 436.557,807.752 437.143,814.793 437.73,833.658 438.316,840.538 438.902,853.977 439.489,864.12 440.075,873.781 440.662,886.751 441.248,899.567 441.835,914.626 442.421,919.371 443.007,931.112 443.594,938.892 444.18,946.565 444.767,954.388 445.353,962.021 445.939,972.609 446.526,980.415 447.112,984.995 447.699,994.795 448.285,1001.77 448.871,1016.13 449.458,1022.37 450.044,1031.09 450.631,1039.58 451.217,1047.85 451.804,1058.14 452.39,1065.4 452.976,1074.59 453.563,1075.26 454.149,1082.18 454.736,1091.02 455.322,1093.34 455.908,1097.95 456.495,1110.5 457.081,1112.65 457.668,1116.84 458.254,1118.82 458.84,1128.43 459.427,1133.71 460.013,1140.67 460.6,1141.92 461.186,1147.09 461.773,1148.06 462.359,1151.38 462.945,1154.35 463.532,1160.68 464.118,1166.67 464.705,1172.76 465.291,1175.19 465.877,1175.74 466.464,1177.96 467.05,1178.9 467.637,1181.35 468.223,1183.66 468.809,1184.38 469.396,1188.17 469.982,1188.71 470.569,1189.16 471.155,1188.09 471.742,1189.18 472.328,1193.01 472.914,1196.11 473.501,1201.57 474.087,1203.26 474.674,1206.4 475.26,1208.1 475.846,1211.42 476.433,1211.29 477.019,1212.78 477.606,1211.34 478.192,1216.03 478.778,1218.84 479.365,1218.95 479.951,1220.28 480.538,1222.88 481.124,1225.11 481.711,1224.67 482.297,1225.92 482.883,1231.3 483.47,1234.95 484.056,1234.34 484.643,1233.97 485.229,1233.35 485.815,1230.17 486.402,1231.42 486.988,1231.15 487.575,1230.87 488.161,1231.94 488.748,1232.02 489.334,1234.58 489.92,1234.26 490.507,1235.48 491.093,1237.97 491.68,1240.32 492.266,1241.3 492.852,1239.47 493.439,1240.25 494.025,1241.1 494.612,1240.46 495.198,1241.26 495.784,1241.85 496.371,1242.7 496.957,1246.12 497.544,1246.61 498.13,1244.64 498.717,1245.34 499.303,1242.03 499.889,1241.65 500.476,1241.16 501.062,1238.03 501.649,1239.16 502.235,1238.69 502.821,1236.9 503.408,1238.01 503.994,1236.48 504.581,1237.59 505.167,1238.83 505.753,1237.28 506.34,1236.93 506.926,1239.69 507.513,1239.29 508.099,1237.26 508.686,1237.33 509.272,1238.63 509.858,1242.36 510.445,1244.38 511.031,1244.08 511.618,1244.95 512.204,1243.45 512.79,1242.83 513.377,1241.24 513.963,1241.02 514.55,1242.19 515.136,1244.66 515.722,1242.98 516.309,1242.68 516.895,1246.44 517.482,1247.45 518.068,1247.22 518.655,1244.04 519.241,1243.73 519.827,1244.39 520.414,1242.46 521,1239.42 521.587,1241.81 522.173,1242.82 522.759,1243.92 523.346,1243.34 523.932,1244.54 524.519,1242.7 525.105,1244.76 525.691,1244.24 526.278,1243.82 526.864,1244.66 527.451,1242.93 528.037,1242.62 528.624,1244.93 529.21,1244.46 529.796,1244.08 530.383,1244.03 530.969,1241.94 531.556,1243.88 532.142,1243.35 532.728,1244.13 533.315,1249 533.901,1247.99 534.488,1245.84 535.074,1250.53 535.661,1246.8 536.247,1246.22 536.833,1244.5 537.42,1249.21 538.006,1247.21 538.593,1243.91 539.179,1241.91 539.765,1238.85 540.352,1241.22 540.938,1242.25 541.525,1239.41 542.111,1237.9 542.697,1236.22 543.284,1234.84 543.87,1238.64 544.457,1237.19 545.043,1238.28 545.63,1236.84 546.216,1236.79 546.802,1237.81 547.389,1237.71 547.975,1238.82 548.562,1241.09 549.148,1241.89 549.734,1240.06 550.321,1239.78 550.907,1242 551.494,1240.35 552.08,1240.06 552.666,1243.74 553.253,1245.97 553.839,1246.44 554.426,1245.91 555.012,1243.9 555.599,1243.54 556.185,1244.29 556.771,1242.39 557.358,1242.02 557.944,1241.27 558.531,1240.56 559.117,1240.13 559.703,1238.76 560.29,1238.55 560.876,1239.12 561.463,1237.48 562.049,1237.07 562.635,1236.68 563.222,1238.96 563.808,1239.93 564.395,1239.68 564.981,1239.12 565.568,1239.9 566.154,1237.94 566.74,1237.54 567.327,1238.53 567.913,1241.86 568.5,1241.46 569.086,1239.67 569.672,1240.38 570.259,1241.04 570.845,1241.61 571.432,1240.87 572.018,1240.24 572.605,1239.38 573.191,1238.71 573.777,1238.55 574.364,1237.98 574.95,1237.73 575.537,1238.62 576.123,1236.82 576.709,1237.48 577.296,1232.92 577.882,1232.68 578.469,1233.68 579.055,1230.85 579.641,1230.88 580.228,1226.76 580.814,1227.19 581.401,1227.23 581.987,1227.13 582.574,1231.22 583.16,1230.04 583.746,1229.95 584.333,1230.9 584.919,1229.63 585.506,1228.31 586.092,1227.19 586.678,1227.28 587.265,1227.4 587.851,1226.18 588.438,1226.67 589.024,1226.86 589.61,1228.18 590.197,1228.17 590.783,1229.63 591.37,1229.53 591.956,1229.43 592.543,1230.55 593.129,1232.93 593.715,1232.38 594.302,1233.72 594.888,1233.35 595.475,1235.65 596.061,1236.4 596.647,1237.44 597.234,1239.46 597.82,1236.3 598.407,1238.19 598.993,1236.32 599.579,1236.02 600.166,1238.06 600.752,1241.26 601.339,1240.66 601.925,1242.17 602.512,1241.16 603.098,1241.65 603.684,1240.93 604.271,1237.8 604.857,1239.65 605.444,1236.46 606.03,1235.84 606.616,1236.2 607.203,1237.03 607.789,1235.22 608.376,1234.7 608.962,1234.25 609.548,1235.29 610.135,1234.4 610.721,1233.8 611.308,1233.42 611.894,1231.79 612.481,1232.83 613.067,1233.5 613.653,1232.86 614.24,1233.4 614.826,1233.03 615.413,1232.5 615.999,1232.27 616.585,1231.86 617.172,1230.35 617.758,1232.55 618.345,1233.41 618.931,1236.78 619.518,1238.42 620.104,1237.57 620.69,1236.78 621.277,1237.64 621.863,1238.26 622.45,1240.1 623.036,1239.45 623.622,1237.25 624.209,1236.53 624.795,1235.67 625.382,1231.16 625.968,1226.75 626.554,1226.48 627.141,1225.14 627.727,1225.08 628.314,1228.98 628.9,1232.69 629.487,1232.22 630.073,1230.68 630.659,1229.3 631.246,1226.51 631.832,1227.52 632.419,1228.64 633.005,1226.97 633.591,1225.16 634.178,1223.86 634.764,1225.29 635.351,1222.75 635.937,1224 636.523,1222.78 637.11,1221.43 637.696,1221.65 638.283,1224.27 638.869,1221.62 639.456,1221.71 640.042,1223.28 640.628,1222.03 641.215,1223.45 641.801,1225.8 642.388,1225.51 642.974,1222.64 643.56,1224.04 644.147,1225.16 644.733,1226.2 645.32,1227.15 645.906,1226.88 646.492,1229.36 647.079,1228.89 647.665,1225.92 648.252,1225.59 648.838,1224.32 649.425,1224.21 650.011,1225.51 650.597,1227.88 651.184,1226.35 651.77,1225.08 652.357,1226.31 652.943,1227.32 653.529,1225.59 654.116,1224.28 654.702,1224.32 655.289,1226.78 655.875,1226.94 656.462,1225.67 657.048,1224.37 657.634,1224.34 658.221,1223.15 658.807,1224.31 659.394,1222.94 659.98,1224.21 660.566,1221.73 661.153,1221.51 661.739,1221.64 662.326,1223.22 662.912,1223.03 663.498,1221.6 664.085,1223 664.671,1221.6 665.258,1221.47 665.844,1224.21 666.431,1221.64 667.017,1221.45 667.603,1222.86 668.19,1222.6 668.776,1225.45 669.363,1225.25 669.949,1223.76 670.535,1223.89 671.122,1223.67 671.708,1223.43 672.295,1220.79 672.881,1222.12 673.467,1220.95 674.054,1222.33 674.64,1223.48 675.227,1223.19 675.813,1222.88 676.4,1222.73 676.986,1220.07 677.572,1220.4 678.159,1219.41 678.745,1219.66 679.332,1215.92 679.918,1217.6 680.504,1216.65 681.091,1219.53 681.677,1219.73 682.264,1222.39 682.85,1221.3 683.436,1221.43 684.023,1221.25 684.609,1221.57 685.196,1225.42 685.782,1223.98 686.369,1222.47 686.955,1222.57 687.541,1221.24 688.128,1222.47 688.714,1222.47 689.301,1224.7 689.887,1224.37 690.473,1226.88 691.06,1228 691.646,1226.4 692.233,1228.63 692.819,1228.11 693.405,1225.08 693.992,1226.08 694.578,1227.21 695.165,1224.16 695.751,1221.43 696.338,1221.08 696.924,1220.94 697.51,1221.19 698.097,1221.11 698.683,1222.49 699.27,1223.82 699.856,1222.38 700.442,1222.39 701.029,1222.32 701.615,1225.86 702.202,1225.33 702.788,1223.81 703.375,1223.84 703.961,1224.95 704.547,1224.62 705.134,1224.31 705.72,1220.06 706.307,1220.13 706.893,1219.07 707.479,1218.98 708.066,1221.82 708.652,1223.19 709.239,1221.69 709.825,1221.73 710.411,1218.9 710.998,1219.98 711.584,1221.27 712.171,1220.26 712.757,1220.21 713.344,1221.45 713.93,1222.55 714.516,1221.93 715.103,1223.19 715.689,1221.92 716.276,1221.81 716.862,1224.2 717.448,1222.93 718.035,1222.67 718.621,1221.3 719.208,1221.32 719.794,1219.86 720.38,1219.88 720.967,1219.89 721.553,1222.55 722.14,1225.18 722.726,1227.58 723.313,1225.77 723.899,1224.03 724.485,1223.77 725.072,1222.12 725.658,1221.93 726.245,1220.31 726.831,1220.2 727.417,1218.82 728.004,1216.48 728.59,1217.87 729.177,1219.3 729.763,1220.45 730.349,1217.78 730.936,1217.91 731.522,1218.02 732.109,1220.74 732.695,1219.38 733.282,1220.8 733.868,1224.72 734.454,1223.25 735.041,1219.11 735.627,1219.3 736.214,1217.97 736.8,1218.11 737.386,1220.95 737.973,1221.91 738.559,1221.76 739.146,1222.8 739.732,1221.43 740.318,1218.91 740.905,1215.19 741.491,1215.18 742.078,1215.55 742.664,1216.98 743.251,1219.45 743.837,1220.57 744.423,1220.49 745.01,1222.88 745.596,1221.15 746.183,1222.04 746.769,1222.87 747.355,1222.62 747.942,1222.46 748.528,1222.3 749.115,1220.52 749.701,1218.95 750.288,1218.64 750.874,1221.25 751.46,1222.54 752.047,1226.01 752.633,1226.9 753.22,1227.74 753.806,1228.57 754.392,1228.02 754.979,1228.77 755.565,1226.98 756.152,1227.82 756.738,1227.37 757.324,1224.68 757.911,1225.83 758.497,1225.49 759.084,1222.64 759.67,1225.01 760.257,1222.12 760.843,1221.88 761.429,1221.96 762.016,1221.85 762.602,1222.92 763.189,1222.67 763.775,1221.3 764.361,1218.6 764.948,1218.57 765.534,1221.01 766.121,1218.11 766.707,1220.47 767.293,1220.19 767.88,1220.09 768.466,1219.93 769.053,1223.74 769.639,1222.03 770.226,1221.83 770.812,1221.62 771.398,1222.35 771.985,1220.74 772.571,1220.57 773.158,1220.43 773.744,1223.34 774.33,1219.21 774.917,1217.89 775.503,1216.65 776.09,1216.78 776.676,1216.86 777.262,1217.04 777.849,1218.46 778.435,1216.12 779.022,1217.31 779.608,1219.88 780.195,1219.82 780.781,1221.16 781.367,1223.57 781.954,1222.18 782.54,1222.11 783.127,1222.08 783.713,1218.99 784.299,1218.92 784.886,1216.17 785.472,1215.99 786.059,1215.77 786.645,1216.89 787.232,1216.79 787.818,1218.11 788.404,1215.63 788.991,1218.45 789.577,1218.06 790.164,1217.76 790.75,1217.7 791.336,1216.33 791.923,1217.38 792.509,1217.43 793.096,1217.35 793.682,1214.56 794.268,1219.81 794.855,1221.06 795.441,1220.61 796.028,1220.41 796.614,1220.31 797.201,1221.48 797.787,1224.12 798.373,1223.86 798.96,1222.14 799.546,1219.27 800.133,1219.19 800.719,1217.62 801.305,1217.59 801.892,1216.1 802.478,1216.26 803.065,1214.93 803.651,1213.97 804.237,1216.51 804.824,1215.35 805.41,1215.24 805.997,1216.59 806.583,1216.81 807.17,1219.5 807.756,1219.29 808.342,1219.29 808.929,1218.04 809.515,1219.12 810.102,1217.81 810.688,1216.52 811.274,1215.23 811.861,1216.58 812.447,1217.82 813.034,1219.18 813.62,1221.43 814.206,1218.59 814.793,1218.64 815.379,1217.23 815.966,1219.5 816.552,1218.41 817.139,1220.79 817.725,1219.48 818.311,1218.02 818.898,1220.72 819.484,1220.7 820.071,1219.25 820.657,1219.22 821.243,1219.41 821.83,1216.58 822.416,1212.49 823.003,1215.34 823.589,1216.75 824.175,1214.19 824.762,1215.76 825.348,1217.28 825.935,1215.76 826.521,1218.33 827.108,1215.72 827.694,1213.61 828.28,1215.39 828.867,1212.74 829.453,1215.6 830.04,1215.74 830.626,1214.68 831.212,1212.04 831.799,1212.66 832.385,1214.4 832.972,1214.66 833.558,1215.98 834.145,1213.52 834.731,1215.44 835.317,1214.39 835.904,1215.71 836.49,1213.34 837.077,1212.51 837.663,1212.82 838.249,1215.32 838.836,1213.07 839.422,1214.66 840.009,1215.95 840.595,1212.28 841.181,1215.24 841.768,1215.46 842.354,1214.27 842.941,1214.25 843.527,1216.82 844.114,1217.89 844.7,1219.32 845.286,1220.52 845.873,1220.14 846.459,1221.12 847.046,1221.01 847.632,1222.21 848.218,1224.59 848.805,1224.2 849.391,1225.35 849.978,1224.88 850.564,1226.76 851.15,1224.99 851.737,1222.16 852.323,1218.21 852.91,1220.73 853.496,1220.51 854.083,1219.12 854.669,1220.34 855.255,1218.71 855.842,1217.59 856.428,1217.35 857.015,1217.48 857.601,1219.14 858.187,1220.12 858.774,1219.96 859.36,1218.64 859.947,1218.48 860.533,1218.25 861.119,1218.03 861.706,1217.71 862.292,1216.31 862.879,1215.02 863.465,1216.33 864.052,1217.29 864.638,1217.29 865.224,1218.62 865.811,1219.87 866.397,1219.74 866.984,1218.29 867.57,1219.45 868.156,1217.99 868.743,1220.44 869.329,1221.56 869.916,1230.21 870.502,1230.59 871.089,1225.9 871.675,1226.84 872.261,1226.24 872.848,1228.1 873.434,1227.81 874.021,1227.45 874.607,1222.91 875.193,1223.69 875.78,1220.81 876.366,1220.52 876.953,1219.11 877.539,1221.3 878.125,1219.96 878.712,1218.49 879.298,1219.78 879.885,1219.3 880.471,1219.13 881.058,1220.34 881.644,1219.76 882.23,1219.81 882.817,1218.23 883.403,1218.17 883.99,1220.46 884.576,1220.4 885.162,1217.22 885.749,1218.62 886.335,1221.05 886.922,1220.78 887.508,1221.91 888.094,1224.26 888.681,1222.56 889.267,1222.04 889.854,1224.03 890.44,1223.54 891.027,1223.35 891.613,1220.2 892.199,1219.69 892.786,1217.93 893.372,1219.03 893.959,1218.93 894.545,1216.44 895.131,1215.13 895.718,1221.36 896.304,1223.95 896.891,1224.82 897.477,1224.45 898.063,1221.37 898.65,1219.75 899.236,1219.88 899.823,1216.97 900.409,1211.73 900.996,1214.52 901.582,1215.71 902.168,1215.91 902.755,1217.2 903.341,1217.09 903.928,1213.34 904.514,1212.17 905.1,1212.25 905.687,1212.22 906.273,1210.98 906.86,1208.73 907.446,1208.05 908.032,1205.93 908.619,1205.25 909.205,1207.1 909.792,1207.53 910.378,1209.11 910.965,1210.86 911.551,1208.71 912.137,1210.4 912.724,1210.54 913.31,1209.42 913.897,1207.35 914.483,1212.98 915.069,1211.79 915.656,1213.26 916.242,1213.53 916.829,1215.16 917.415,1215.26 918.002,1211.64 918.588,1213.02 919.174,1210.48 919.761,1212.18 920.347,1213.76 920.934,1215.01 921.52,1216.28 922.106,1217.51 922.693,1217.49 923.279,1218.69 923.866,1217.39 924.452,1217.31 925.038,1216 925.625,1211.29 926.211,1211.52 926.798,1211.53 927.384,1211.76 927.971,1213.53 928.557,1211.27 929.143,1211.53 929.73,1209.05 930.316,1207.98 930.903,1209.92 931.489,1210.28 932.075,1208.13 932.662,1209.76 933.248,1211.47 933.835,1212.82 934.421,1212.94 935.007,1211.7 935.594,1213.18 936.18,1216.06 936.767,1215.92 937.353,1217.19 937.94,1218.25 938.526,1219.49 939.112,1217.99 939.699,1223.05 940.285,1222.76 940.872,1222.44 941.458,1219.41 942.044,1220.64 942.631,1219.2 943.217,1220.08 943.804,1217.03 944.39,1217.08 944.976,1214.56 945.563,1215.82 946.149,1215.61 946.736,1215.68 947.322,1214.52 947.909,1212.31 948.495,1211.22 949.081,1211.49 949.668,1211.97 950.254,1214.35 950.841,1213.19 951.427,1210.73 952.013,1209.76 952.6,1210.07 953.186,1212.75 953.773,1211.69 954.359,1208.05 954.945,1205.76 955.532,1203.69 956.118,1204.48 956.705,1204.89 957.291,1206.95 957.878,1209.83 958.464,1207.41 959.05,1208.02 959.637,1209.47 960.223,1208.67 960.81,1208.79 961.396,1210.51 961.982,1210.83 962.569,1209.53 963.155,1211.21 963.742,1212.98 964.328,1214.59 964.915,1215.95 965.501,1216.13 966.087,1217.42 966.674,1213.46 967.26,1213.55 967.847,1213.76 968.433,1211.43 969.019,1214.17 969.606,1213.03 970.192,1210.89 970.779,1210.12 971.365,1210.73 971.951,1211.31 972.538,1213 973.124,1214.31 973.711,1211.77 974.297,1212.14 974.884,1213.5 975.47,1216.25 976.056,1217.47 976.643,1218.51 977.229,1218.39 977.816,1218.38 978.402,1220.98 978.988,1220.91 979.575,1221.63 980.161,1221.08 980.748,1223.26 981.334,1224.27 981.92,1220.24 982.507,1219.82 983.093,1222.17 983.68,1220.59 984.266,1221.63 984.853,1222.52 985.439,1219.75 986.025,1223.24 986.612,1220.18 987.198,1217.24 987.785,1218.6 988.371,1218.39 988.957,1217.05 989.544,1219.58 990.13,1218.27 990.717,1216.89 991.303,1211.98 991.889,1212.1 992.476,1212.34 993.062,1212.24 993.649,1210.02 994.235,1208.95 994.822,1210.48 995.408,1209.65 995.994,1208.63 996.581,1211.84 997.167,1214.4 997.754,1214.65 998.34,1214.78 998.926,1215.83 999.513,1215.73 1000.1,1214.57 1000.69,1215.97 1001.27,1214.47 1001.86,1214.71 1002.44,1217.23 1003.03,1217.45 1003.62,1219.92 1004.2,1217.36 1004.79,1217.13 1005.38,1218.06 1005.96,1218.15 1006.55,1217.86 1007.14,1217.82 1007.72,1217.76 1008.31,1216.4 1008.9,1215.06 1009.48,1212.31 1010.07,1209.92 1010.65,1212.85 1011.24,1213.96 1011.83,1216.61 1012.41,1218.92 1013,1218.7 1013.59,1218.34 1014.17,1217.03 1014.76,1217.25 1015.35,1215.89 1015.93,1216.83 1016.52,1216.63 1017.11,1217.96 1017.69,1216.38 1018.28,1217.27 1018.86,1217.05 1019.45,1218.08 1020.04,1219.32 1020.62,1215.42 1021.21,1214.19 1021.8,1212.92 1022.38,1214.46 1022.97,1214.36 1023.56,1214.58 1024.14,1213.32 1024.73,1211.14 1025.32,1211.42 1025.9,1214.62 1026.49,1215.83 1027.07,1213.14 1027.66,1211.97 1028.25,1214.64 1028.83,1213.29 1029.42,1214.77 1030.01,1215.99 1030.59,1214.65 1031.18,1216.06 1031.77,1220.9 1032.35,1220.44 1032.94,1221.28 1033.52,1220.89 1034.11,1220.69 1034.7,1218.04 1035.28,1217.84 1035.87,1220.17 1036.46,1222.37 1037.04,1220.73 1037.63,1223.88 1038.22,1223.45 1038.8,1223.16 1039.39,1220.05 1039.98,1219.7 1040.56,1219.59 1041.15,1218.05 1041.73,1217.93 1042.32,1218.09 1042.91,1217.99 1043.49,1217.84 1044.08,1216.45 1044.67,1216.56 1045.25,1217.75 1045.84,1216.34 1046.43,1213.62 1047.01,1217.45 1047.6,1218.67 1048.19,1218.59 1048.77,1217.21 1049.36,1215.7 1049.94,1215.66 1050.53,1218.25 1051.12,1218.07 1051.7,1218.15 1052.29,1216.53 1052.88,1217.5 1053.46,1214.7 1054.05,1214.35 1054.64,1212.83 1055.22,1212.98 1055.81,1213.23 1056.39,1212.17 1056.98,1212.2 1057.57,1215.03 1058.15,1215.03 1058.74,1217.94 1059.33,1217.46 1059.91,1218.57 1060.5,1218.62 1061.09,1221.03 1061.67,1219.75 1062.26,1220.7 1062.85,1219.24 1063.43,1221.45 1064.02,1219.64 1064.6,1220.47 1065.19,1217.62 1065.78,1217.46 1066.36,1218.37 1066.95,1217.02 1067.54,1215.73 1068.12,1220.8 1068.71,1216.73 1069.3,1217.93 1069.88,1220.27 1070.47,1222.48 1071.06,1221.84 1071.64,1220.16 1072.23,1218.31 1072.81,1216.94 1073.4,1216.74 1073.99,1216.77 1074.57,1212.72 1075.16,1212.77 1075.75,1214.03 1076.33,1214.01 1076.92,1212.75 1077.51,1211.84 1078.09,1210.81 1078.68,1207.43 1079.26,1207.92 1079.85,1207.07 1080.44,1210.12 1081.02,1209.17 1081.61,1210.77 1082.2,1209.97 1082.78,1212.83 1083.37,1213.09 1083.96,1218.23 1084.54,1219.29 1085.13,1216.36 1085.72,1217.38 1086.3,1215.89 1086.89,1215.73 1087.47,1216.91 1088.06,1215.61 1088.65,1212.96 1089.23,1213.07 1089.82,1213.09 1090.41,1213.31 1090.99,1210.86 1091.58,1212.18 1092.17,1212.23 1092.75,1214.98 1093.34,1215.49 1093.93,1214.01 1094.51,1216.61 1095.1,1215.13 1095.68,1214.02 1096.27,1215.3 1096.86,1216.45 1097.44,1215.13 1098.03,1212.76 1098.62,1214.02 1099.2,1215.55 1099.79,1215.51 1100.38,1215.49 1100.96,1217.04 1101.55,1219.68 1102.14,1218.21 1102.72,1219.33 1103.31,1216.74 1103.89,1214.14 1104.48,1214.59 1105.07,1213.47 1105.65,1216.24 1106.24,1216.04 1106.83,1217.41 1107.41,1217.43 1108,1219.62 1108.59,1220.55 1109.17,1220.31 1109.76,1221.28 1110.34,1219.66 1110.93,1214.43 1111.52,1214.52 1112.1,1215.78 1112.69,1215.74 1113.28,1219.72 1113.86,1218.17 1114.45,1214.14 1115.04,1214.25 1115.62,1214.25 1116.21,1211.7 1116.8,1209.48 1117.38,1209.8 1117.97,1210.23 1118.55,1209.2 1119.14,1213.36 1119.73,1213.04 1120.31,1211.95 1120.9,1211.92 1121.49,1213.27 1122.07,1211.98 1122.66,1216.16 1123.25,1217.38 1123.83,1218.63 1124.42,1219.82 1125.01,1224.4 1125.59,1222.9 1126.18,1218.19 1126.76,1219.08 1127.35,1220.07 1127.94,1218.56 1128.52,1220.92 1129.11,1219.11 1129.7,1218.63 1130.28,1218.49 1130.87,1216.88 1131.46,1215.51 1132.04,1215.28 1132.63,1215.37 1133.21,1216.69 1133.8,1216.65 1134.39,1217.77 1134.97,1213.76 1135.56,1213.69 1136.15,1213.48 1136.73,1215.14 1137.32,1215.31 1137.91,1216.48 1138.49,1214.97 1139.08,1215.04 1139.67,1215.11 1140.25,1212.7 1140.84,1213.78 1141.42,1214.89 1142.01,1215.07 1142.6,1217.48 1143.18,1219.88 1143.77,1223.6 1144.36,1224.75 1144.94,1221.68 1145.53,1220.15 1146.12,1218.52 1146.7,1219.52 1147.29,1220.39 1147.88,1217.55 1148.46,1215.95 1149.05,1217.17 1149.63,1217.21 1150.22,1217.16 1150.81,1219.83 1151.39,1218.08 1151.98,1217.95 1152.57,1220.26 1153.15,1216.08 1153.74,1220.86 1154.33,1223.2 1154.91,1221.73 1155.5,1221.49 1156.09,1218.62 1156.67,1218.21 1157.26,1215.28 1157.84,1213.78 1158.43,1213.87 1159.02,1213.99 1159.6,1217.88 1160.19,1217.5 1160.78,1217.76 1161.36,1216.17 1161.95,1214.9 1162.54,1213.46 1163.12,1213.25 1163.71,1211.66 1164.29,1212 1164.88,1212.49 1165.47,1213.93 1166.05,1212.57 1166.64,1215.14 1167.23,1216.26 1167.81,1216.2 1168.4,1215.85 1168.99,1213.37 1169.57,1212 1170.16,1212.32 1170.75,1216.21 1171.33,1217.54 1171.92,1216.13 1172.5,1216.2 1173.09,1214.87 1173.68,1212.17 1174.26,1211.03 1174.85,1211.31 1175.44,1212.77 1176.02,1215.46 1176.61,1217.89 1177.2,1216.78 1177.78,1219.27 1178.37,1219.23 1178.96,1215.17 1179.54,1214.04 1180.13,1213.95 1180.71,1215.01 1181.3,1213.83 1181.89,1216.51 1182.47,1216.81 1183.06,1218.11 1183.65,1215.54 1184.23,1218.17 1184.82,1214.19 1185.41,1215.36 1185.99,1212.65 1186.58,1211.54 1187.16,1208.88 1187.75,1209.21 1188.34,1208.29 1188.92,1204.84 1189.51,1203.98 1190.1,1204.56 1190.68,1205.31 1191.27,1204.43 1191.86,1205.1 1192.44,1205.62 1193.03,1207.38 1193.62,1206.56 1194.2,1207.3 1194.79,1207.89 1195.37,1203.01 1195.96,1205.01 1196.55,1205.44 1197.13,1203.33 1197.72,1201.04 1198.31,1201.92 1198.89,1202.37 1199.48,1204.17 1200.07,1204.83 1200.65,1205.52 1201.24,1205.9 1201.83,1207.58 1202.41,1210.56 1203,1209.79 1203.58,1207.54 1204.17,1208.05 1204.76,1209.78 1205.34,1208.67 1205.93,1208.9 1206.52,1209.75 1207.1,1212.55 1207.69,1212.8 1208.28,1215.62 1208.86,1215.69 1209.45,1217.03 1210.03,1215.44 1210.62,1216.56 1211.21,1217.65 1211.79,1219.12 1212.38,1217.61 1212.97,1220.16 1213.55,1219.7 1214.14,1216.65 1214.73,1216.55 1215.31,1215.29 1215.9,1216.54 1216.49,1212.71 1217.07,1214.33 1217.66,1211.9 1218.24,1212.19 1218.83,1213.84 1219.42,1215.37 1220,1212.82 1220.59,1211.78 1221.18,1214.61 1221.76,1214.72 1222.35,1214.67 1222.94,1215.95 1223.52,1217.03 1224.11,1216.75 1224.7,1217.98 1225.28,1219.16 1225.87,1220.11 1226.45,1220.93 1227.04,1221.83 1227.63,1221.51 1228.21,1221.03 1228.8,1223.23 1229.39,1222.86 1229.97,1223.4 1230.56,1223.01 1231.15,1227.64 1231.73,1226.81 1232.32,1230.17 1232.91,1224.29 1233.49,1222.4 1234.08,1223.11 1234.66,1221.38 1235.25,1219.83 1235.84,1220.82 1236.42,1222.03 1237.01,1221.92 1237.6,1221.23 1238.18,1222.18 1238.77,1218.07 1239.36,1217.88 1239.94,1220.11 1240.53,1219.93 1241.11,1222.18 1241.7,1219.4 1242.29,1215.56 1242.87,1216.7 1243.46,1214.96 1244.05,1215.12 1244.63,1216.18 1245.22,1214.75 1245.81,1216.05 1246.39,1219.88 1246.98,1216.75 1247.57,1216.78 1248.15,1219.15 1248.74,1217.52 1249.32,1218.42 1249.91,1218.2 1250.5,1219.4 1251.08,1219.13 1251.67,1216.37 1252.26,1217.51 1252.84,1217.13 1253.43,1215.55 1254.02,1214.29 1254.6,1215.58 1255.19,1216.7 1255.78,1216.45 1256.36,1217.77 1256.95,1217.54 1257.53,1217.25 1258.12,1217.11 1258.71,1214.29 1259.29,1215.59 1259.88,1216.76 1260.47,1216.78 1261.05,1217.9 1261.64,1216.55 1262.23,1216.58 1262.81,1217.6 1263.4,1214.78 1263.98,1213.74 1264.57,1212.22 1265.16,1212.56 1265.74,1215.07 1266.33,1211.4 1266.92,1212.79 1267.5,1211.78 1268.09,1211.94 1268.68,1213.35 1269.26,1214.54 1269.85,1214.72 1270.44,1214.99 1271.02,1216.39 1271.61,1217.82 1272.19,1217.62 1272.78,1220.08 1273.37,1219.74 1273.95,1216.69 1274.54,1215.06 1275.13,1213.5 1275.71,1212.5 1276.3,1212.59 1276.89,1210.53 1277.47,1212.07 1278.06,1212.14 1278.65,1213.65 1279.23,1212.36 1279.82,1213.7 1280.4,1212.98 1280.99,1211.84 1281.58,1211.66 1282.16,1214.32 1282.75,1215.38 1283.34,1215.12 1283.92,1214.97 1284.51,1217.65 1285.1,1214.92 1285.68,1214.87 1286.27,1214.8 1286.86,1214.83 1287.44,1212.14 1288.03,1212.5 1288.61,1212.74 1289.2,1212.88 1289.79,1210.36 1290.37,1209.28 1290.96,1210.98 1291.55,1213.78 1292.13,1213.81 1292.72,1213.88 1293.31,1215.44 1293.89,1215.24 1294.48,1215.21 1295.06,1212.49 1295.65,1213.79 1296.24,1213.69 1296.82,1213.61 1297.41,1208.46 1298,1209.03 1298.58,1208.11 1299.17,1208.57 1299.76,1208.95 1300.34,1206.66 1300.93,1207.21 1301.52,1207.58 1302.1,1208.13 1302.69,1210.97 1303.27,1209.95 1303.86,1212.76 1304.45,1211.43 1305.03,1209.11 1305.62,1208.13 1306.21,1208.71 1306.79,1209.31 1307.38,1209.7 1307.97,1211.41 1308.55,1215.61 1309.14,1217 1309.73,1218.16 1310.31,1217.94 1310.9,1217.98 1311.48,1215.4 1312.07,1214.32 1312.66,1216.92 1313.24,1216.92 1313.83,1216.92 1314.42,1219.23 1315,1220.32 1315.59,1221.45 1316.18,1219.83 1316.76,1222.23 1317.35,1221.91 1317.93,1222.83 1318.52,1221.1 1319.11,1220.92 1319.69,1221.94 1320.28,1220.39 1320.87,1218.58 1321.45,1217.13 1322.04,1218.2 1322.63,1217.85 1323.21,1216.16 1323.8,1216.43 1324.39,1214.88 1324.97,1214.75 1325.56,1218.5 1326.14,1219.57 1326.73,1217.74 1327.32,1217.47 1327.9,1217.35 1328.49,1217.24 1329.08,1216.95 1329.66,1218.19 1330.25,1219.58 1330.84,1214.03 1331.42,1211.29 1332.01,1212.37 1332.6,1212.49 1333.18,1213.62 1333.77,1212.34 1334.35,1210.98 1334.94,1211.16 1335.53,1211.65 1336.11,1211.74 1336.7,1213.56 1337.29,1210.89 1337.87,1208.54 1338.46,1208.7 1339.05,1210.39 1339.63,1211.03 1340.22,1211.48 1340.8,1211.62 1341.39,1213.1 1341.98,1212.04 1342.56,1212.25 1343.15,1212.42 1343.74,1211.4 1344.32,1210.3 1344.91,1209.16 1345.5,1209.5 1346.08,1209.74 1346.67,1210.15 1347.26,1209.12 1347.84,1209.31 1348.43,1205.66 1349.01,1205.16 1349.6,1208.51 1350.19,1207.36 1350.77,1207.92 1351.36,1208.36 1351.95,1208.74 1352.53,1209.17 1353.12,1210.81 1353.71,1210.93 1354.29,1210.91 1354.88,1215.01 1355.47,1212.6 1356.05,1212.61 1356.64,1215.33 1357.22,1215.13 1357.81,1215.16 1358.4,1216.53 1358.98,1216.59 1359.57,1215.08 1360.16,1216.29 1360.74,1216.24 1361.33,1215.29 1361.92,1217.79 1362.5,1219.09 1363.09,1217.64 1363.68,1216.08 1364.26,1218.44 1364.85,1219.47 1365.43,1219.6 1366.02,1220.61 1366.61,1220.2 1367.19,1219.86 1367.78,1219.66 1368.37,1215.63 1368.95,1217.13 1369.54,1217.02 1370.13,1216.74 1370.71,1219.27 1371.3,1219.01 1371.88,1218.82 1372.47,1216.25 1373.06,1216.32 1373.64,1215.92 1374.23,1212.32 1374.82,1209.81 1375.4,1210.13 1375.99,1212.83 1376.58,1211.68 1377.16,1212.71 1377.75,1212.78 1378.34,1209.24 1378.92,1209.74 1379.51,1209.67 1380.09,1212.36 1380.68,1212.42 1381.27,1211.24 1381.85,1214.12 1382.44,1212.91 1383.03,1213.14 1383.61,1213.49 1384.2,1213.66 1384.79,1211.26 1385.37,1211.53 1385.96,1211.86 1386.55,1211.07 1387.13,1209.74 1387.72,1210.33 1388.3,1210.55 1388.89,1210.85 1389.48,1211.28 1390.06,1213.82 1390.65,1212.4 1391.24,1209.72 1391.82,1210.13 1392.41,1210.41 1393,1210.55 1393.58,1210.55 1394.17,1213.28 1394.75,1214.65 1395.34,1213.49 1395.93,1212.47 1396.51,1212.87 1397.1,1213.07 1397.69,1212.16 1398.27,1211.41 1398.86,1211.79 1399.45,1213.26 1400.03,1213.67 1400.62,1210.94 1401.21,1212.11 1401.79,1213.27 1402.38,1211.99 1402.96,1212.15 1403.55,1212.01 1404.14,1211.04 1404.72,1213.94 1405.31,1217.83 1405.9,1217.54 1406.48,1215.95 1407.07,1215.68 1407.66,1215.52 1408.24,1213.92 1408.83,1214.01 1409.42,1214.05 1410,1215.45 1410.59,1214.29 1411.17,1212.93 1411.76,1213.37 1412.35,1212.21 1412.93,1211.26 1413.52,1211.61 1414.11,1214.63 1414.69,1213.3 1415.28,1214.88 1415.87,1216.2 1416.45,1216.39 1417.04,1217.65 1417.63,1217.26 1418.21,1219.65 1418.8,1219.32 1419.38,1220.65 1419.97,1221.32 1420.56,1219.43 1421.14,1220.33 1421.73,1219.61 1422.32,1216.52 1422.9,1216.24 1423.49,1215.82 1424.08,1218.23 1424.66,1219.26 1425.25,1216.68 1425.83,1214 1426.42,1215.23 1427.01,1216.59 1427.59,1217.86 1428.18,1216.55 1428.77,1216.39 1429.35,1212.49 1429.94,1212.82 1430.53,1211.9 1431.11,1210.75 1431.7,1208.35 1432.29,1206.31 1432.87,1207.91 1433.46,1207.19 1434.04,1206.17 1434.63,1210.47 1435.22,1207.92 1435.8,1205.67 1436.39,1208.51 1436.98,1210.11 1437.56,1208.9 1438.15,1211.62 1438.74,1212.88 1439.32,1215.19 1439.91,1216.33 1440.5,1215.06 1441.08,1215.24 1441.67,1213.98 1442.25,1216.26 1442.84,1216.35 1443.43,1218.58 1444.01,1214.4 1444.6,1214.22 1445.19,1214.11 1445.77,1215.51 1446.36,1213.88 1446.95,1213.76 1447.53,1215.06 1448.12,1215.02 1448.7,1213.64 1449.29,1213.63 1449.88,1212.46 1450.46,1212.67 1451.05,1212.69 1451.64,1215.44 1452.22,1214.17 1452.81,1214.2 1453.4,1213 1453.98,1212.04 1454.57,1213.67 1455.16,1213.83 1455.74,1215.02 1456.33,1213.98 1456.91,1215.32 1457.5,1214.24 1458.09,1214.56 1458.67,1214.75 1459.26,1218.65 1459.85,1218.6 1460.43,1215.71 1461.02,1215.33 1461.61,1215.47 1462.19,1215.39 1462.78,1214.22 1463.37,1215.73 1463.95,1216.69 1464.54,1215.11 1465.12,1211.21 1465.71,1211.56 1466.3,1211.8 1466.88,1212.05 1467.47,1214.86 1468.06,1216.27 1468.64,1215.09 1469.23,1215.33 1469.82,1216.54 1470.4,1215.35 1470.99,1216.57 1471.57,1216.46 1472.16,1215.09 1472.75,1216.29 1473.33,1218.49 1473.92,1215.91 1474.51,1219.41 1475.09,1216.56 1475.68,1216.31 1476.27,1217.65 1476.85,1214.85 1477.44,1213.82 1478.03,1215.1 1478.61,1215.19 1479.2,1215.31 1479.78,1212.77 1480.37,1212.81 1480.96,1211.63 1481.54,1214.36 1482.13,1215.81 1482.72,1221.24 1483.3,1222.01 1483.89,1224.08 1484.48,1224.88 1485.06,1222.73 1485.65,1223.87 1486.24,1222 1486.82,1220.4 1487.41,1221.17 1487.99,1223.36 1488.58,1221.61 1489.17,1221.17 1489.75,1220.8 1490.34,1220.35 1490.93,1221.47 1491.51,1223.56 1492.1,1220.62 1492.69,1222.79 1493.27,1224.84 1493.86,1226.69 1494.45,1223.63 1495.03,1224.6 1495.62,1222.66 1496.2,1226.16 1496.79,1224.41 1497.38,1223.71 1497.96,1223.05 1498.55,1221.33 1499.14,1218.6 1499.72,1217.11 1500.31,1215.67 1500.9,1214.13 1501.48,1213.07 1502.07,1210.23 1502.65,1211.45 1503.24,1209.03 1503.83,1210.57 1504.41,1212 1505,1215.79 1505.59,1218.32 1506.17,1215.7 1506.76,1215.47 1507.35,1212.81 1507.93,1212.84 1508.52,1212.84 1509.11,1211.88 1509.69,1210.71 1510.28,1212.36 1510.86,1213.73 1511.45,1213.95 1512.04,1214.01 1512.62,1211.52 1513.21,1211.81 1513.8,1211.9 1514.38,1213.22 1514.97,1213.28 1515.56,1213.33 1516.14,1211.89 1516.73,1210.67 1517.32,1210.9 1517.9,1214.68 1518.49,1218.69 1519.07,1217.39 1519.66,1217.14 1520.25,1214.45 1520.83,1216.91 1521.42,1216.49 1522.01,1216.6 1522.59,1216.45 1523.18,1218.91 1523.77,1220.45 1524.35,1218.91 1524.94,1218.76 1525.52,1218.71 1526.11,1217 1526.7,1216.75 1527.28,1216.74 1527.87,1216.8 1528.46,1217.89 1529.04,1215.89 1529.63,1216.89 1530.22,1213.03 1530.8,1216.78 1531.39,1214.13 1531.98,1214.27 1532.56,1215.61 1533.15,1212.78 1533.73,1212.79 1534.32,1212.68 1534.91,1214.29 1535.49,1214.24 1536.08,1215.62 1536.67,1214.46 1537.25,1213 1537.84,1211.6 1538.43,1211.62 1539.01,1212.97 1539.6,1211.76 1540.19,1211.77 1540.77,1210.4 1541.36,1210.56 1541.94,1208.43 1542.53,1211.35 1543.12,1211.53 1543.7,1211.81 1544.29,1211.72 1544.88,1212.98 1545.46,1212.19 1546.05,1213.25 1546.64,1213.26 1547.22,1214.43 1547.81,1214.46 1548.4,1216 1548.98,1214.72 1549.57,1214.71 1550.15,1218.45 1550.74,1218.05 1551.33,1218.17 1551.91,1219.2 1552.5,1217.78 1553.09,1219.05 1553.67,1219.95 1554.26,1219.67 1554.85,1220.98 1555.43,1218.45 1556.02,1214.25 1556.6,1215.82 1557.19,1215.69 1557.78,1216.89 1558.36,1214.55 1558.95,1215.68 1559.54,1218.1 1560.12,1216.69 1560.71,1216.69 1561.3,1215.22 1561.88,1216.55 1562.47,1217.86 1563.06,1220.1 1563.64,1221.31 1564.23,1220.94 1564.81,1220.87 1565.4,1219.18 1565.99,1215.22 1566.57,1217.57 1567.16,1214.81 1567.75,1215.03 1568.33,1217.53 1568.92,1217.25 1569.51,1220.57 1570.09,1220.16 1570.68,1221.53 1571.27,1222.44 1571.85,1220.66 1572.44,1220.31 1573.02,1218.45 1573.61,1219.41 1574.2,1216.65 1574.78,1216.49 1575.37,1217.58 1575.96,1215.94 1576.54,1218.17 1577.13,1216.97 1577.72,1219.54 1578.3,1218.02 1578.89,1216.64 1579.47,1216.54 1580.06,1212.68 1580.65,1215.38 1581.23,1215.39 1581.82,1214.07 1582.41,1215.23 1582.99,1212.86 1583.58,1212.93 1584.17,1218.23 1584.75,1219.44 1585.34,1217.57 1585.93,1216.3 1586.51,1213.65 1587.1,1210.98 1587.68,1207.18 1588.27,1208.74 1588.86,1207.93 1589.44,1212.25 1590.03,1209.93 1590.62,1207.41 1591.2,1206.33 1591.79,1205.26 1592.38,1204.54 1592.96,1205.13 1593.55,1205.55 1594.14,1207.27 1594.72,1207.65 1595.31,1209.15 1595.89,1207.18 1596.48,1206.59 1597.07,1208.47 1597.65,1207.65 1598.24,1208.13 1598.83,1207.14 1599.41,1207.52 1600,1207.73 1600.59,1210.55 1601.17,1210.82 1601.76,1210.93 1602.34,1213.64 1602.93,1213.84 1603.52,1212.86 1604.1,1214.22 1604.69,1211.57 1605.28,1215.51 1605.86,1215.33 1606.45,1215.14 1607.04,1216.43 1607.62,1216.3 1608.21,1216.61 1608.8,1216.51 1609.38,1217.63 1609.97,1219.84 1610.55,1219.49 1611.14,1220.45 1611.73,1220.07 1612.31,1222.41 1612.9,1219.34 1613.49,1216.81 1614.07,1218.37 1614.66,1218.21 1615.25,1218.92 1615.83,1219.98 1616.42,1219.79 1617.01,1219.41 1617.59,1217.81 1618.18,1217.3 1618.76,1217.26 1619.35,1218.37 1619.94,1218.29 1620.52,1215.62 1621.11,1216.96 1621.7,1215.72 1622.28,1214.35 1622.87,1217.04 1623.46,1216.72 1624.04,1214.22 1624.63,1215.78 1625.22,1218.01 1625.8,1220.14 1626.39,1220.06 1626.97,1220.86 1627.56,1220.41 1628.15,1220.01 1628.73,1218.43 1629.32,1218.22 1629.91,1215.44 1630.49,1215.26 1631.08,1214.96 1631.67,1215.21 1632.25,1214.94 1632.84,1217.66 1633.42,1217.54 1634.01,1216.11 1634.6,1217.24 1635.18,1216.06 1635.77,1217.18 1636.36,1215.96 1636.94,1217.22 1637.53,1215.86 1638.12,1214.28 1638.7,1214.27 1639.29,1212.92 1639.88,1211.73 1640.46,1210.65 1641.05,1209.52 1641.63,1208.5 1642.22,1204.77 1642.81,1203.8 1643.39,1201.67 1643.98,1202.5 1644.57,1203.63 1645.15,1205.53 1645.74,1204.8 1646.33,1205.36 1646.91,1207.33 1647.5,1205.26 1648.09,1204.59 1648.67,1205.23 1649.26,1205.88 1649.84,1207.81 1650.43,1207.99 1651.02,1208.33 1651.6,1207.37 1652.19,1209.05 1652.78,1208.11 1653.36,1212.44 1653.95,1214.97 1654.54,1217.5 1655.12,1214.83 1655.71,1213.17 1656.29,1214.56 1656.88,1216.13 1657.47,1216.02 1658.05,1214.89 1658.64,1216.12 1659.23,1215.83 1659.81,1218.39 1660.4,1219.38 1660.99,1221.62 1661.57,1224.08 1662.16,1226.02 1662.75,1222.72 1663.33,1222.33 1663.92,1224.49 1664.5,1221.51 1665.09,1221.25 1665.68,1220.85 1666.26,1219.27 1666.85,1216.6 1667.44,1215.3 1668.02,1214.04 1668.61,1212.93 1669.2,1210.56 1669.78,1212.18 1670.37,1212.64 1670.96,1210.39 1671.54,1210.81 1672.13,1212.38 1672.71,1213.55 1673.3,1213.78 1673.89,1215.22 1674.47,1215.34 1675.06,1211.38 1675.65,1211.57 1676.23,1210.28 1676.82,1210.49 1677.41,1212.03 1677.99,1213.38 1678.58,1214.78 1679.17,1216.21 1679.75,1217.4 1680.34,1217.5 1680.92,1218.54 1681.51,1218.36 1682.1,1218 1682.68,1219.19 1683.27,1219.13 1683.86,1218.75 1684.44,1219.88 1685.03,1218.54 1685.62,1219.84 1686.2,1221.08 1686.79,1223.3 1687.37,1222.99 1687.96,1220.03 1688.55,1218.26 1689.13,1216.72 1689.72,1215.54 1690.31,1215.5 1690.89,1215.42 1691.48,1216.62 1692.07,1212.84 1692.65,1215.4 1693.24,1216.75 1693.83,1219.16 1694.41,1218.66 1695,1218.62 1695.58,1223.47 1696.17,1223.92 1696.76,1223.39 1697.34,1224.12 1697.93,1219.77 1698.52,1219.46 1699.1,1218.81 1699.69,1214.96 1700.28,1213.83 1700.86,1215.02 1701.45,1216.1 1702.04,1218.51 1702.62,1218.33 1703.21,1217.86 1703.79,1217.6 1704.38,1217.27 1704.97,1215.72 1705.55,1217.21 1706.14,1217.12 1706.73,1214.31 1707.31,1213.11 1707.9,1214.24 1708.49,1215.52 1709.07,1213.04 1709.66,1215.38 1710.24,1216.39 1710.83,1216.35 1711.42,1217.77 1712,1218.77 1712.59,1219.78 1713.18,1218.21 1713.76,1218.01 1714.35,1215.37 1714.94,1216.56 1715.52,1213.66 1716.11,1212.23 1716.7,1209.76 1717.28,1208.61 1717.87,1207.57 1718.45,1203.98 1719.04,1204.37 1719.63,1205.06 1720.21,1205.58 1720.8,1205.73 1721.39,1206.06 1721.97,1209.27 1722.56,1209.59 1723.15,1203.26 1723.73,1203.81 1724.32,1205.64 1724.91,1207.46 1725.49,1203.97 1726.08,1205.62 1726.66,1207.68 1727.25,1209.46 1727.84,1209.76 1728.42,1208.56 1729.01,1209.07 1729.6,1210.84 1730.18,1213.53 1730.77,1213.49 1731.36,1211.21 1731.94,1210.4 1732.53,1211.02 1733.11,1212.69 1733.7,1213.03 1734.29,1214.41 1734.87,1213.03 1735.46,1215.53 1736.05,1212.96 1736.63,1213.32 1737.22,1212.13 1737.81,1211.32 1738.39,1208.83 1738.98,1210.48 1739.57,1209.67 1740.15,1207.68 1740.74,1209.21 1741.32,1210.91 1741.91,1212.23 1742.5,1211.01 1743.08,1211.47 1743.67,1212.82 1744.26,1212.96 1744.84,1214.3 1745.43,1218.41 1746.02,1218.24 1746.6,1215.43 1747.19,1214.38 1747.78,1214.66 1748.36,1215.73 1748.95,1213.3 1749.53,1213.47 1750.12,1212.57 1750.71,1211.58 1751.29,1213.25 1751.88,1215.7 1752.47,1218.38 1753.05,1216.73 1753.64,1214 1754.23,1214.13 1754.81,1214.01 1755.4,1211.71 1755.99,1207.84 1756.57,1206.79 1757.16,1207.15 1757.74,1212.75 1758.33,1207.81 1758.92,1208.25 1759.5,1216.35 1760.09,1217.63 1760.68,1218.41 1761.26,1219.87 1761.85,1219.86 1762.44,1222.19 1763.02,1221.71 1763.61,1223.64 1764.19,1222.91 1764.78,1222.34 1765.37,1224.29 1765.95,1229.97 1766.54,1227.96 1767.13,1225.82 1767.71,1221.47 1768.3,1221.23 1768.89,1217.9 1769.47,1220.25 1770.06,1225.1 1770.65,1224.71 1771.23,1225.29 1771.82,1224.52 1772.4,1220.22 1772.99,1217.33 1773.58,1218.45 1774.16,1219.5 1774.75,1220.54 1775.34,1218.9 1775.92,1218.58 1776.51,1216.97 1777.1,1218.04 1777.68,1216.31 1778.27,1217.16 1778.86,1214.61 1779.44,1214.74 1780.03,1216.17 1780.61,1215.95 1781.2,1214.54 1781.79,1214.59 1782.37,1214.67 1782.96,1216.26 1783.55,1216.16 1784.13,1216.13 1784.72,1217.25 1785.31,1218.1 1785.89,1221.97 1786.48,1222.57 1787.06,1220.61 1787.65,1222.94 1788.24,1222.51 1788.82,1227.05 1789.41,1226.48 1790,1228.34 1790.58,1227.62 1791.17,1225.82 1791.76,1222.62 1792.34,1220.92 1792.93,1223.32 1793.52,1221.65 1794.1,1222.53 1794.69,1224.92 1795.27,1227.02 1795.86,1224.89 1796.45,1223.23 1797.03,1221.31 1797.62,1220.77 1798.21,1218.92 1798.79,1216.13 1799.38,1217.05 1799.97,1214.36 1800.55,1214.19 1801.14,1216.41 1801.73,1216.38 1802.31,1216.53 1802.9,1217.99 1803.48,1216.29 1804.07,1220.12 1804.66,1217.6 1805.24,1216.12 1805.83,1215.91 1806.42,1212.3 1807,1211.4 1807.59,1211.66 1808.18,1207.92 1808.76,1208.54 1809.35,1206.5 1809.94,1208.25 1810.52,1208.66 1811.11,1208.72 1811.69,1210.4 1812.28,1207.83 1812.87,1205.87 1813.45,1203.81 1814.04,1199.27 1814.63,1200.17 1815.21,1200.91 1815.8,1200.5 1816.39,1203.94 1816.97,1204.57 1817.56,1205.08 1818.14,1205.64 1818.73,1203.72 1819.32,1202.78 1819.9,1202.11 1820.49,1201.24 1821.08,1202.09 1821.66,1202.82 1822.25,1206.2 1822.84,1207.93 1823.42,1208.34 1824.01,1211.42 1824.6,1211.48 1825.18,1211.5 1825.77,1208.97 1826.35,1211.73 1826.94,1213.22 1827.53,1214.62 1828.11,1214.65 1828.7,1212.11 1829.29,1212.3 1829.87,1211.3 1830.46,1209.22 1831.05,1209.59 1831.63,1208.63 1832.22,1206.48 1832.81,1208.55 1833.39,1210.19 1833.98,1211.63 1834.56,1212.95 1835.15,1213.1 1835.74,1213.25 1836.32,1215.69 1836.91,1215.85 1837.5,1213.42 1838.08,1213.59 1838.67,1212.46 1839.26,1212.51 1839.84,1213.97 1840.43,1216.76 1841.01,1215.4 1841.6,1215.36 1842.19,1216.44 1842.77,1213.56 1843.36,1214.83 1843.95,1214.68 1844.53,1212.45 1845.12,1212.77 1845.71,1214.43 1846.29,1217.18 1846.88,1217.26 1847.47,1216.06 1848.05,1215.89 1848.64,1214.73 1849.22,1213.75 1849.81,1213.91 1850.4,1213.93 1850.98,1213.87 1851.57,1214.08 1852.16,1211.32 1852.74,1211.67 1853.33,1210.49 1853.92,1210.66 1854.5,1211.06 1855.09,1211.24 1855.68,1211.39 1856.26,1214.47 1856.85,1217 1857.43,1216.96 1858.02,1216.98 1858.61,1215.74 1859.19,1218.16 1859.78,1216.62 1860.37,1214.16 1860.95,1212.8 1861.54,1214.26 1862.13,1213.17 1862.71,1212.21 1863.3,1214.09 1863.88,1214.33 1864.47,1218.08 1865.06,1216.52 1865.64,1216.49 1866.23,1217.73 1866.82,1215.1 1867.4,1217.56 1867.99,1216.12 1868.58,1214.76 1869.16,1209.81 1869.75,1206.26 1870.34,1207.06 1870.92,1206.28 1871.51,1205.62 1872.09,1204.74 1872.68,1205.34 1873.27,1206.92 1873.85,1208.32 1874.44,1211.11 1875.03,1212.4 1875.61,1211.19 1876.2,1210.25 1876.79,1211.77 1877.37,1210.55 1877.96,1208.22 1878.55,1209.87 1879.13,1208.74 1879.72,1208.13 1880.3,1207.3 1880.89,1209.09 1881.48,1210.77 1882.06,1213.59 1882.65,1212.26 1883.24,1211.38 1883.82,1212.89 1884.41,1212.83 1885,1211.54 1885.58,1210.63 1886.17,1213.66 1886.76,1216.3 1887.34,1213.68 1887.93,1213.57 1888.51,1212.18 1889.1,1213.24 1889.69,1213.39 1890.27,1213.34 1890.86,1214.48 1891.45,1215.78 1892.03,1216.93 1892.62,1218.32 1893.21,1218.06 1893.79,1220.5 1894.38,1218.77 1894.96,1218.33 1895.55,1218.13 1896.14,1217.93 1896.72,1217.73 1897.31,1217.87 1897.9,1220.59 1898.48,1224.06 1899.07,1223.79 1899.66,1223.34 1900.24,1223.99 1900.83,1223.59 1901.42,1223.04 1902,1220.05 1902.59,1217.26 1903.17,1217.14 1903.76,1216.92 1904.35,1212.92 1904.93,1216.75 1905.52,1215.3 1906.11,1214.04 1906.69,1216.77 1907.28,1220.35 1907.87,1225.34 1908.45,1225.97 1909.04,1225.29 1909.63,1227.53 1910.21,1227.98 1910.8,1229.95 1911.38,1230.17 1911.97,1230.85 1912.56,1227.76 1913.14,1225.76 1913.73,1225.29 1914.32,1223.33 1914.9,1222 1915.49,1220.33 1916.08,1220.32 1916.66,1220.29 1917.25,1220.08 1917.83,1220.85 1918.42,1222.07 1919.01,1220.58 1919.59,1221.44 1920.18,1218.28 1920.77,1218.26 1921.35,1220.39 1921.94,1219.89 1922.53,1219.48 1923.11,1219.09 1923.7,1217.53 1924.29,1220.12 1924.87,1221.96 1925.46,1221.62 1926.04,1220 1926.63,1215.93 1927.22,1217.19 1927.8,1215.95 1928.39,1219.61 1928.98,1220.63 1929.56,1222.57 1930.15,1224.6 1930.74,1223.9 1931.32,1225.88 1931.91,1222.68 1932.5,1222.09 1933.08,1220.31 1933.67,1219.91 1934.25,1218.22 1934.84,1217.9 1935.43,1213.77 1936.01,1215.06 1936.6,1215.12 1937.19,1217.7 1937.77,1217.52 1938.36,1214.99 1938.95,1216.24 1939.53,1215.02 1940.12,1215.17 1940.71,1216.41 1941.29,1218.85 1941.88,1218.4 1942.46,1216.7 1943.05,1219.35 1943.64,1220.45 1944.22,1216.57 1944.81,1217.72 1945.4,1213.83 1945.98,1212.53 1946.57,1211.39 1947.16,1210.07 1947.74,1210.28 1948.33,1210.63 1948.91,1210.87 1949.5,1211.06 1950.09,1209.76 1950.67,1211.42 1951.26,1211.73 1951.85,1213.11 1952.43,1214.32 1953.02,1211.74 1953.61,1214.6 1954.19,1213.24 1954.78,1212.18 1955.37,1213.53 1955.95,1211.08 1956.54,1212.47 1957.12,1214.26 1957.71,1212.92 1958.3,1213.03 1958.88,1213.01 1959.47,1214.41 1960.06,1214.51 1960.64,1215.8 1961.23,1214.37 1961.82,1214.29 1962.4,1216.73 1962.99,1216.62 1963.58,1219.31 1964.16,1217.87 1964.75,1217.69 1965.33,1216.59 1965.92,1215.27 1966.51,1212.84 1967.09,1212.98 1967.68,1212.54 1968.27,1215.19 1968.85,1213.99 1969.44,1214.11 1970.03,1216.61 1970.61,1214.04 1971.2,1214.05 1971.78,1215.5 1972.37,1214.15 1972.96,1215.46 1973.54,1216.75 1974.13,1216.7 1974.72,1216.74 1975.3,1212.71 1975.89,1212 1976.48,1213.4 1977.06,1212.22 1977.65,1209.81 1978.24,1206.33 1978.82,1208.29 1979.41,1208.89 1979.99,1209.35 1980.58,1209.54 1981.17,1209.94 1981.75,1206.39 1982.34,1205.52 1982.93,1203.48 1983.51,1202.75 1984.1,1204.64 1984.69,1202.66 1985.27,1203.37 1985.86,1205.02 1986.45,1205.43 1987.03,1206.94 1987.62,1207.29 1988.2,1207.66 1988.79,1206.57 1989.38,1204.54 1989.96,1206.44 1990.55,1204.18 1991.14,1205.95 1991.72,1207.54 1992.31,1207.05 1992.9,1207.37 1993.48,1210.34 1994.07,1210.49 1994.65,1208.14 1995.24,1208.73 1995.83,1211.36 1996.41,1212.64 1997,1212.96 1997.59,1213.18 1998.17,1214.38 1998.76,1210.79 1999.35,1211.2 1999.93,1211.5 2000.52,1207.94 2001.11,1209.44 2001.69,1209.69 2002.28,1211.37 2002.86,1211.81 2003.45,1210.75 2004.04,1212.51 2004.62,1214.07 2005.21,1212.85 2005.8,1214.36 2006.38,1217.1 2006.97,1217.16 2007.56,1214.56 2008.14,1214.64 2008.73,1217.39 2009.32,1218.62 2009.9,1219.67 2010.49,1218.16 2011.07,1212.95 2011.66,1214.52 2012.25,1214.84 2012.83,1217.34 2013.42,1217.12 2014.01,1218.17 2014.59,1216.47 2015.18,1217.68 2015.77,1217.58 2016.35,1217.26 2016.94,1218.34 2017.53,1220.48 2018.11,1219.96 2018.7,1220.75 2019.28,1219.08 2019.87,1218.77 2020.46,1218.33 2021.04,1217.64 2021.63,1217.6 2022.22,1218.53 2022.8,1219.49 2023.39,1219.38 2023.98,1220.39 2024.56,1220.18 2025.15,1219.98 2025.73,1217.31 2026.32,1219.59 2026.91,1221.85 2027.49,1222.75 2028.08,1223.77 2028.67,1220.53 2029.25,1217.79 2029.84,1218.7 2030.43,1218.13 2031.01,1216.66 2031.6,1217.63 2032.19,1215.83 2032.77,1215.44 2033.36,1213.98 2033.94,1213.94 2034.53,1216.55 2035.12,1214.19 2035.7,1214.51 2036.29,1213.23 2036.88,1213.18 2037.46,1214.87 2038.05,1214.81 2038.64,1213.66 2039.22,1211.31 2039.81,1210.29 2040.4,1211.72 2040.98,1211.75 2041.57,1213.08 2042.15,1214.25 2042.74,1216.72 2043.33,1216.47 2043.91,1216.46 2044.5,1216.25 2045.09,1215.85 2045.67,1217.04 2046.26,1217.9 2046.85,1216.33 2047.43,1216.27 2048.02,1214.66 2048.6,1214.71 2049.19,1214.53 2049.78,1214.45 2050.36,1211.93 2050.95,1211.86 2051.54,1213.53 2052.12,1214.65 2052.71,1215.9 2053.3,1214.58 2053.88,1214.7 2054.47,1212.27 2055.06,1212.31 2055.64,1211 2056.23,1211.14 2056.81,1212.68 2057.4,1214.05 2057.99,1214.27 2058.57,1213.33 2059.16,1213.53 2059.75,1213.55 2060.33,1214.82 2060.92,1215.95 2061.51,1218.46 2062.09,1217.11 2062.68,1218.64 2063.27,1217.19 2063.85,1215.71 2064.44,1217.08 2065.02,1216.75 2065.61,1216.74 2066.2,1216.7 2066.78,1216.57 2067.37,1219.14 2067.96,1218.92 2068.54,1221.14 2069.13,1221 2069.72,1220.53 2070.3,1217.39 2070.89,1215.84 2071.48,1216.81 2072.06,1215.35 2072.65,1216.58 2073.23,1215.19 2073.82,1216.53 2074.41,1217.73 2074.99,1217.59 2075.58,1217.26 2076.17,1214.38 2076.75,1216.9 2077.34,1218.22 2077.93,1216.91 2078.51,1218.35 2079.1,1215.56 2079.68,1218.11 2080.27,1215.21 2080.86,1212.45 2081.44,1210.12 2082.03,1209.06 2082.62,1210.72 2083.2,1210.83 2083.79,1209.63 2084.38,1208.52 2084.96,1208.91 2085.55,1209.41 2086.14,1208.68 2086.72,1207.65 2087.31,1206.75 2087.89,1207.28 2088.48,1209.88 2089.07,1210.04 2089.65,1210.39 2090.24,1213.33 2090.83,1215.93 2091.41,1214.53 2092,1213.38 2092.59,1212.17 2093.17,1212.38 2093.76,1213.66 2094.35,1215.08 2094.93,1213.55 2095.52,1211.17 2096.1,1212.53 2096.69,1213.89 2097.28,1212.73 2097.86,1211.6 2098.45,1208.12 2099.04,1211.1 2099.62,1211.21 2100.21,1212.76 2100.8,1211.52 2101.38,1210.55 2101.97,1210.99 2102.55,1211.62 2103.14,1209.14 2103.73,1210.74 2104.31,1214.79 2104.9,1213.78 2105.49,1212.66 2106.07,1210.44 2106.66,1210.64 2107.25,1210.86 2107.83,1211.92 2108.42,1211.93 2109.01,1210.91 2109.59,1212.19 2110.18,1213.78 2110.76,1214.78 2111.35,1214.66 2111.94,1214.83 2112.52,1215.91 2113.11,1215.95 2113.7,1212.39 2114.28,1214.07 2114.87,1215.28 2115.46,1214.93 2116.04,1217.54 2116.63,1217.28 2117.22,1214.45 2117.8,1213.33 2118.39,1212.17 2118.97,1213.81 2119.56,1215.15 2120.15,1215.12 2120.73,1215.36 2121.32,1212.85 2121.91,1210.38 2122.49,1210.96 2123.08,1211.18 2123.67,1215.34 2124.25,1216.7 2124.84,1216.63 2125.42,1215.4 2126.01,1212.7 2126.6,1211.89 2127.18,1209.02 2127.77,1210.65 2128.36,1213.49 2128.94,1211.03 2129.53,1212.33 2130.12,1212.54 2130.7,1211.25 2131.29,1211.1 2131.88,1212.84 2132.46,1214.03 2133.05,1212.86 2133.63,1212.87 2134.22,1210.39 2134.81,1209.47 2135.39,1209.55 2135.98,1209.62 2136.57,1208.39 2137.15,1210.02 2137.74,1209.1 2138.33,1209.17 2138.91,1210.74 2139.5,1208.34 2140.09,1212.49 2140.67,1211.71 2141.26,1213.14 2141.84,1215.85 2142.43,1216.09 2143.02,1216.15 2143.6,1214.77 2144.19,1214.81 2144.78,1215.97 2145.36,1217.21 2145.95,1217.03 2146.54,1216.79 2147.12,1222 2147.71,1220.46 2148.3,1220.16 2148.88,1218.48 2149.47,1221.85 2150.05,1219.09 2150.64,1217.76 2151.23,1218.93 2151.81,1218.81 2152.4,1217.21 2152.99,1217.09 2153.57,1215.49 2154.16,1210 2154.75,1210.33 2155.33,1211.84 2155.92,1211.84 2156.5,1214.44 2157.09,1215.69 2157.68,1215.47 2158.26,1213.98 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1215.31 L986.612 1215.31 L987.198 1215.31 L987.785 1215.31 L988.371 1215.31 L988.957 1215.31 L989.544 1215.31 L990.13 1215.31 L990.717 1215.31 L991.303 1215.31 L991.889 1215.31 L992.476 1215.31 L993.062 1215.31 L993.649 1215.31 L994.235 1215.31 L994.822 1215.31 L995.408 1215.31 L995.994 1215.31 L996.581 1215.31 L997.167 1215.31 L997.754 1215.31 L998.34 1215.31 L998.926 1215.31 L999.513 1215.31 L1000.1 1215.31 L1000.69 1215.31 L1001.27 1215.31 L1001.86 1215.31 L1002.44 1215.31 L1003.03 1215.31 L1003.62 1215.31 L1004.2 1215.31 L1004.79 1215.31 L1005.38 1215.31 L1005.96 1215.31 L1006.55 1215.31 L1007.14 1215.31 L1007.72 1215.31 L1008.31 1215.31 L1008.9 1215.31 L1009.48 1215.31 L1010.07 1215.31 L1010.65 1215.31 L1011.24 1215.31 L1011.83 1215.31 L1012.41 1215.31 L1013 1215.31 L1013.59 1215.31 L1014.17 1215.31 L1014.76 1215.31 L1015.35 1215.31 L1015.93 1215.31 L1016.52 1215.31 L1017.11 1215.31 L1017.69 1215.31 L1018.28 1215.31 L1018.86 1215.31 L1019.45 1215.31 L1020.04 1215.31 L1020.62 1215.31 L1021.21 1215.31 L1021.8 1215.31 L1022.38 1215.31 L1022.97 1215.31 L1023.56 1215.31 L1024.14 1215.31 L1024.73 1215.31 L1025.32 1215.31 L1025.9 1215.31 L1026.49 1215.31 L1027.07 1215.31 L1027.66 1215.31 L1028.25 1215.31 L1028.83 1215.31 L1029.42 1215.31 L1030.01 1215.31 L1030.59 1215.31 L1031.18 1215.31 L1031.77 1215.31 L1032.35 1215.31 L1032.94 1215.31 L1033.52 1215.31 L1034.11 1215.31 L1034.7 1215.31 L1035.28 1215.31 L1035.87 1215.31 L1036.46 1215.31 L1037.04 1215.31 L1037.63 1215.31 L1038.22 1215.31 L1038.8 1215.31 L1039.39 1215.31 L1039.98 1215.31 L1040.56 1215.31 L1041.15 1215.31 L1041.73 1215.31 L1042.32 1215.31 L1042.91 1215.31 L1043.49 1215.31 L1044.08 1215.31 L1044.67 1215.31 L1045.25 1215.31 L1045.84 1215.31 L1046.43 1215.31 L1047.01 1215.31 L1047.6 1215.31 L1048.19 1215.31 L1048.77 1215.31 L1049.36 1215.31 L1049.94 1215.31 L1050.53 1215.31 L1051.12 1215.31 L1051.7 1215.31 L1052.29 1215.31 L1052.88 1215.31 L1053.46 1215.31 L1054.05 1215.31 L1054.64 1215.31 L1055.22 1215.31 L1055.81 1215.31 L1056.39 1215.31 L1056.98 1215.31 L1057.57 1215.31 L1058.15 1215.31 L1058.74 1215.31 L1059.33 1215.31 L1059.91 1215.31 L1060.5 1215.31 L1061.09 1215.31 L1061.67 1215.31 L1062.26 1215.31 L1062.85 1215.31 L1063.43 1215.31 L1064.02 1215.31 L1064.6 1215.31 L1065.19 1215.31 L1065.78 1215.31 L1066.36 1215.31 L1066.95 1215.31 L1067.54 1215.31 L1068.12 1215.31 L1068.71 1215.31 L1069.3 1215.31 L1069.88 1215.31 L1070.47 1215.31 L1071.06 1215.31 L1071.64 1215.31 L1072.23 1215.31 L1072.81 1215.31 L1073.4 1215.31 L1073.99 1215.31 L1074.57 1215.31 L1075.16 1215.31 L1075.75 1215.31 L1076.33 1215.31 L1076.92 1215.31 L1077.51 1215.31 L1078.09 1215.31 L1078.68 1215.31 L1079.26 1215.31 L1079.85 1215.31 L1080.44 1215.31 L1081.02 1215.31 L1081.61 1215.31 L1082.2 1215.31 L1082.78 1215.31 L1083.37 1215.31 L1083.96 1215.31 L1084.54 1215.31 L1085.13 1215.31 L1085.72 1215.31 L1086.3 1215.31 L1086.89 1215.31 L1087.47 1215.31 L1088.06 1215.31 L1088.65 1215.31 L1089.23 1215.31 L1089.82 1215.31 L1090.41 1215.31 L1090.99 1215.31 L1091.58 1215.31 L1092.17 1215.31 L1092.75 1215.31 L1093.34 1215.31 L1093.93 1215.31 L1094.51 1215.31 L1095.1 1215.31 L1095.68 1215.31 L1096.27 1215.31 L1096.86 1215.31 L1097.44 1215.31 L1098.03 1215.31 L1098.62 1215.31 L1099.2 1215.31 L1099.79 1215.31 L1100.38 1215.31 L1100.96 1215.31 L1101.55 1215.31 L1102.14 1215.31 L1102.72 1215.31 L1103.31 1215.31 L1103.89 1215.31 L1104.48 1215.31 L1105.07 1215.31 L1105.65 1215.31 L1106.24 1215.31 L1106.83 1215.31 L1107.41 1215.31 L1108 1215.31 L1108.59 1215.31 L1109.17 1215.31 L1109.76 1215.31 L1110.34 1215.31 L1110.93 1215.31 L1111.52 1215.31 L1112.1 1215.31 L1112.69 1215.31 L1113.28 1215.31 L1113.86 1215.31 L1114.45 1215.31 L1115.04 1215.31 L1115.62 1215.31 L1116.21 1215.31 L1116.8 1215.31 L1117.38 1215.31 L1117.97 1215.31 L1118.55 1215.31 L1119.14 1215.31 L1119.73 1215.31 L1120.31 1215.31 L1120.9 1215.31 L1121.49 1215.31 L1122.07 1215.31 L1122.66 1215.31 L1123.25 1215.31 L1123.83 1215.31 L1124.42 1215.31 L1125.01 1215.31 L1125.59 1215.31 L1126.18 1215.31 L1126.76 1215.31 L1127.35 1215.31 L1127.94 1215.31 L1128.52 1215.31 L1129.11 1215.31 L1129.7 1215.31 L1130.28 1215.31 L1130.87 1215.31 L1131.46 1215.31 L1132.04 1215.31 L1132.63 1215.31 L1133.21 1215.31 L1133.8 1215.31 L1134.39 1215.31 L1134.97 1215.31 L1135.56 1215.31 L1136.15 1215.31 L1136.73 1215.31 L1137.32 1215.31 L1137.91 1215.31 L1138.49 1215.31 L1139.08 1215.31 L1139.67 1215.31 L1140.25 1215.31 L1140.84 1215.31 L1141.42 1215.31 L1142.01 1215.31 L1142.6 1215.31 L1143.18 1215.31 L1143.77 1215.31 L1144.36 1215.31 L1144.94 1215.31 L1145.53 1215.31 L1146.12 1215.31 L1146.7 1215.31 L1147.29 1215.31 L1147.88 1215.31 L1148.46 1215.31 L1149.05 1215.31 L1149.63 1215.31 L1150.22 1215.31 L1150.81 1215.31 L1151.39 1215.31 L1151.98 1215.31 L1152.57 1215.31 L1153.15 1215.31 L1153.74 1215.31 L1154.33 1215.31 L1154.91 1215.31 L1155.5 1215.31 L1156.09 1215.31 L1156.67 1215.31 L1157.26 1215.31 L1157.84 1215.31 L1158.43 1215.31 L1159.02 1215.31 L1159.6 1215.31 L1160.19 1215.31 L1160.78 1215.31 L1161.36 1215.31 L1161.95 1215.31 L1162.54 1215.31 L1163.12 1215.31 L1163.71 1215.31 L1164.29 1215.31 L1164.88 1215.31 L1165.47 1215.31 L1166.05 1215.31 L1166.64 1215.31 L1167.23 1215.31 L1167.81 1215.31 L1168.4 1215.31 L1168.99 1215.31 L1169.57 1215.31 L1170.16 1215.31 L1170.75 1215.31 L1171.33 1215.31 L1171.92 1215.31 L1172.5 1215.31 L1173.09 1215.31 L1173.68 1215.31 L1174.26 1215.31 L1174.85 1215.31 L1175.44 1215.31 L1176.02 1215.31 L1176.61 1215.31 L1177.2 1215.31 L1177.78 1215.31 L1178.37 1215.31 L1178.96 1215.31 L1179.54 1215.31 L1180.13 1215.31 L1180.71 1215.31 L1181.3 1215.31 L1181.89 1215.31 L1182.47 1215.31 L1183.06 1215.31 L1183.65 1215.31 L1184.23 1215.31 L1184.82 1215.31 L1185.41 1215.31 L1185.99 1215.31 L1186.58 1215.31 L1187.16 1215.31 L1187.75 1215.31 L1188.34 1215.31 L1188.92 1215.31 L1189.51 1215.31 L1190.1 1215.31 L1190.68 1215.31 L1191.27 1215.31 L1191.86 1215.31 L1192.44 1215.31 L1193.03 1215.31 L1193.62 1215.31 L1194.2 1215.31 L1194.79 1215.31 L1195.37 1215.31 L1195.96 1215.31 L1196.55 1215.31 L1197.13 1215.31 L1197.72 1215.31 L1198.31 1215.31 L1198.89 1215.31 L1199.48 1215.31 L1200.07 1215.31 L1200.65 1215.31 L1201.24 1215.31 L1201.83 1215.31 L1202.41 1215.31 L1203 1215.31 L1203.58 1215.31 L1204.17 1215.31 L1204.76 1215.31 L1205.34 1215.31 L1205.93 1215.31 L1206.52 1215.31 L1207.1 1215.31 L1207.69 1215.31 L1208.28 1215.31 L1208.86 1215.31 L1209.45 1215.31 L1210.03 1215.31 L1210.62 1215.31 L1211.21 1215.31 L1211.79 1215.31 L1212.38 1215.31 L1212.97 1215.31 L1213.55 1215.31 L1214.14 1215.31 L1214.73 1215.31 L1215.31 1215.31 L1215.9 1215.31 L1216.49 1215.31 L1217.07 1215.31 L1217.66 1215.31 L1218.24 1215.31 L1218.83 1215.31 L1219.42 1215.31 L1220 1215.31 L1220.59 1215.31 L1221.18 1215.31 L1221.76 1215.31 L1222.35 1215.31 L1222.94 1215.31 L1223.52 1215.31 L1224.11 1215.31 L1224.7 1215.31 L1225.28 1215.31 L1225.87 1215.31 L1226.45 1215.31 L1227.04 1215.31 L1227.63 1215.31 L1228.21 1215.31 L1228.8 1215.31 L1229.39 1215.31 L1229.97 1215.31 L1230.56 1215.31 L1231.15 1215.31 L1231.73 1215.31 L1232.32 1215.31 L1232.91 1215.31 L1233.49 1215.31 L1234.08 1215.31 L1234.66 1215.31 L1235.25 1215.31 L1235.84 1215.31 L1236.42 1215.31 L1237.01 1215.31 L1237.6 1215.31 L1238.18 1215.31 L1238.77 1215.31 L1239.36 1215.31 L1239.94 1215.31 L1240.53 1215.31 L1241.11 1215.31 L1241.7 1215.31 L1242.29 1215.31 L1242.87 1215.31 L1243.46 1215.31 L1244.05 1215.31 L1244.63 1215.31 L1245.22 1215.31 L1245.81 1215.31 L1246.39 1215.31 L1246.98 1215.31 L1247.57 1215.31 L1248.15 1215.31 L1248.74 1215.31 L1249.32 1215.31 L1249.91 1215.31 L1250.5 1215.31 L1251.08 1215.31 L1251.67 1215.31 L1252.26 1215.31 L1252.84 1215.31 L1253.43 1215.31 L1254.02 1215.31 L1254.6 1215.31 L1255.19 1215.31 L1255.78 1215.31 L1256.36 1215.31 L1256.95 1215.31 L1257.53 1215.31 L1258.12 1215.31 L1258.71 1215.31 L1259.29 1215.31 L1259.88 1215.31 L1260.47 1215.31 L1261.05 1215.31 L1261.64 1215.31 L1262.23 1215.31 L1262.81 1215.31 L1263.4 1215.31 L1263.98 1215.31 L1264.57 1215.31 L1265.16 1215.31 L1265.74 1215.31 L1266.33 1215.31 L1266.92 1215.31 L1267.5 1215.31 L1268.09 1215.31 L1268.68 1215.31 L1269.26 1215.31 L1269.85 1215.31 L1270.44 1215.31 L1271.02 1215.31 L1271.61 1215.31 L1272.19 1215.31 L1272.78 1215.31 L1273.37 1215.31 L1273.95 1215.31 L1274.54 1215.31 L1275.13 1215.31 L1275.71 1215.31 L1276.3 1215.31 L1276.89 1215.31 L1277.47 1215.31 L1278.06 1215.31 L1278.65 1215.31 L1279.23 1215.31 L1279.82 1215.31 L1280.4 1215.31 L1280.99 1215.31 L1281.58 1215.31 L1282.16 1215.31 L1282.75 1215.31 L1283.34 1215.31 L1283.92 1215.31 L1284.51 1215.31 L1285.1 1215.31 L1285.68 1215.31 L1286.27 1215.31 L1286.86 1215.31 L1287.44 1215.31 L1288.03 1215.31 L1288.61 1215.31 L1289.2 1215.31 L1289.79 1215.31 L1290.37 1215.31 L1290.96 1215.31 L1291.55 1215.31 L1292.13 1215.31 L1292.72 1215.31 L1293.31 1215.31 L1293.89 1215.31 L1294.48 1215.31 L1295.06 1215.31 L1295.65 1215.31 L1296.24 1215.31 L1296.82 1215.31 L1297.41 1215.31 L1298 1215.31 L1298.58 1215.31 L1299.17 1215.31 L1299.76 1215.31 L1300.34 1215.31 L1300.93 1215.31 L1301.52 1215.31 L1302.1 1215.31 L1302.69 1215.31 L1303.27 1215.31 L1303.86 1215.31 L1304.45 1215.31 L1305.03 1215.31 L1305.62 1215.31 L1306.21 1215.31 L1306.79 1215.31 L1307.38 1215.31 L1307.97 1215.31 L1308.55 1215.31 L1309.14 1215.31 L1309.73 1215.31 L1310.31 1215.31 L1310.9 1215.31 L1311.48 1215.31 L1312.07 1215.31 L1312.66 1215.31 L1313.24 1215.31 L1313.83 1215.31 L1314.42 1215.31 L1315 1215.31 L1315.59 1215.31 L1316.18 1215.31 L1316.76 1215.31 L1317.35 1215.31 L1317.93 1215.31 L1318.52 1215.31 L1319.11 1215.31 L1319.69 1215.31 L1320.28 1215.31 L1320.87 1215.31 L1321.45 1215.31 L1322.04 1215.31 L1322.63 1215.31 L1323.21 1215.31 L1323.8 1215.31 L1324.39 1215.31 L1324.97 1215.31 L1325.56 1215.31 L1326.14 1215.31 L1326.73 1215.31 L1327.32 1215.31 L1327.9 1215.31 L1328.49 1215.31 L1329.08 1215.31 L1329.66 1215.31 L1330.25 1215.31 L1330.84 1215.31 L1331.42 1215.31 L1332.01 1215.31 L1332.6 1215.31 L1333.18 1215.31 L1333.77 1215.31 L1334.35 1215.31 L1334.94 1215.31 L1335.53 1215.31 L1336.11 1215.31 L1336.7 1215.31 L1337.29 1215.31 L1337.87 1215.31 L1338.46 1215.31 L1339.05 1215.31 L1339.63 1215.31 L1340.22 1215.31 L1340.8 1215.31 L1341.39 1215.31 L1341.98 1215.31 L1342.56 1215.31 L1343.15 1215.31 L1343.74 1215.31 L1344.32 1215.31 L1344.91 1215.31 L1345.5 1215.31 L1346.08 1215.31 L1346.67 1215.31 L1347.26 1215.31 L1347.84 1215.31 L1348.43 1215.31 L1349.01 1215.31 L1349.6 1215.31 L1350.19 1215.31 L1350.77 1215.31 L1351.36 1215.31 L1351.95 1215.31 L1352.53 1215.31 L1353.12 1215.31 L1353.71 1215.31 L1354.29 1215.31 L1354.88 1215.31 L1355.47 1215.31 L1356.05 1215.31 L1356.64 1215.31 L1357.22 1215.31 L1357.81 1215.31 L1358.4 1215.31 L1358.98 1215.31 L1359.57 1215.31 L1360.16 1215.31 L1360.74 1215.31 L1361.33 1215.31 L1361.92 1215.31 L1362.5 1215.31 L1363.09 1215.31 L1363.68 1215.31 L1364.26 1215.31 L1364.85 1215.31 L1365.43 1215.31 L1366.02 1215.31 L1366.61 1215.31 L1367.19 1215.31 L1367.78 1215.31 L1368.37 1215.31 L1368.95 1215.31 L1369.54 1215.31 L1370.13 1215.31 L1370.71 1215.31 L1371.3 1215.31 L1371.88 1215.31 L1372.47 1215.31 L1373.06 1215.31 L1373.64 1215.31 L1374.23 1215.31 L1374.82 1215.31 L1375.4 1215.31 L1375.99 1215.31 L1376.58 1215.31 L1377.16 1215.31 L1377.75 1215.31 L1378.34 1215.31 L1378.92 1215.31 L1379.51 1215.31 L1380.09 1215.31 L1380.68 1215.31 L1381.27 1215.31 L1381.85 1215.31 L1382.44 1215.31 L1383.03 1215.31 L1383.61 1215.31 L1384.2 1215.31 L1384.79 1215.31 L1385.37 1215.31 L1385.96 1215.31 L1386.55 1215.31 L1387.13 1215.31 L1387.72 1215.31 L1388.3 1215.31 L1388.89 1215.31 L1389.48 1215.31 L1390.06 1215.31 L1390.65 1215.31 L1391.24 1215.31 L1391.82 1215.31 L1392.41 1215.31 L1393 1215.31 L1393.58 1215.31 L1394.17 1215.31 L1394.75 1215.31 L1395.34 1215.31 L1395.93 1215.31 L1396.51 1215.31 L1397.1 1215.31 L1397.69 1215.31 L1398.27 1215.31 L1398.86 1215.31 L1399.45 1215.31 L1400.03 1215.31 L1400.62 1215.31 L1401.21 1215.31 L1401.79 1215.31 L1402.38 1215.31 L1402.96 1215.31 L1403.55 1215.31 L1404.14 1215.31 L1404.72 1215.31 L1405.31 1215.31 L1405.9 1215.31 L1406.48 1215.31 L1407.07 1215.31 L1407.66 1215.31 L1408.24 1215.31 L1408.83 1215.31 L1409.42 1215.31 L1410 1215.31 L1410.59 1215.31 L1411.17 1215.31 L1411.76 1215.31 L1412.35 1215.31 L1412.93 1215.31 L1413.52 1215.31 L1414.11 1215.31 L1414.69 1215.31 L1415.28 1215.31 L1415.87 1215.31 L1416.45 1215.31 L1417.04 1215.31 L1417.63 1215.31 L1418.21 1215.31 L1418.8 1215.31 L1419.38 1215.31 L1419.97 1215.31 L1420.56 1215.31 L1421.14 1215.31 L1421.73 1215.31 L1422.32 1215.31 L1422.9 1215.31 L1423.49 1215.31 L1424.08 1215.31 L1424.66 1215.31 L1425.25 1215.31 L1425.83 1215.31 L1426.42 1215.31 L1427.01 1215.31 L1427.59 1215.31 L1428.18 1215.31 L1428.77 1215.31 L1429.35 1215.31 L1429.94 1215.31 L1430.53 1215.31 L1431.11 1215.31 L1431.7 1215.31 L1432.29 1215.31 L1432.87 1215.31 L1433.46 1215.31 L1434.04 1215.31 L1434.63 1215.31 L1435.22 1215.31 L1435.8 1215.31 L1436.39 1215.31 L1436.98 1215.31 L1437.56 1215.31 L1438.15 1215.31 L1438.74 1215.31 L1439.32 1215.31 L1439.91 1215.31 L1440.5 1215.31 L1441.08 1215.31 L1441.67 1215.31 L1442.25 1215.31 L1442.84 1215.31 L1443.43 1215.31 L1444.01 1215.31 L1444.6 1215.31 L1445.19 1215.31 L1445.77 1215.31 L1446.36 1215.31 L1446.95 1215.31 L1447.53 1215.31 L1448.12 1215.31 L1448.7 1215.31 L1449.29 1215.31 L1449.88 1215.31 L1450.46 1215.31 L1451.05 1215.31 L1451.64 1215.31 L1452.22 1215.31 L1452.81 1215.31 L1453.4 1215.31 L1453.98 1215.31 L1454.57 1215.31 L1455.16 1215.31 L1455.74 1215.31 L1456.33 1215.31 L1456.91 1215.31 L1457.5 1215.31 L1458.09 1215.31 L1458.67 1215.31 L1459.26 1215.31 L1459.85 1215.31 L1460.43 1215.31 L1461.02 1215.31 L1461.61 1215.31 L1462.19 1215.31 L1462.78 1215.31 L1463.37 1215.31 L1463.95 1215.31 L1464.54 1215.31 L1465.12 1215.31 L1465.71 1215.31 L1466.3 1215.31 L1466.88 1215.31 L1467.47 1215.31 L1468.06 1215.31 L1468.64 1215.31 L1469.23 1215.31 L1469.82 1215.31 L1470.4 1215.31 L1470.99 1215.31 L1471.57 1215.31 L1472.16 1215.31 L1472.75 1215.31 L1473.33 1215.31 L1473.92 1215.31 L1474.51 1215.31 L1475.09 1215.31 L1475.68 1215.31 L1476.27 1215.31 L1476.85 1215.31 L1477.44 1215.31 L1478.03 1215.31 L1478.61 1215.31 L1479.2 1215.31 L1479.78 1215.31 L1480.37 1215.31 L1480.96 1215.31 L1481.54 1215.31 L1482.13 1215.31 L1482.72 1215.31 L1483.3 1215.31 L1483.89 1215.31 L1484.48 1215.31 L1485.06 1215.31 L1485.65 1215.31 L1486.24 1215.31 L1486.82 1215.31 L1487.41 1215.31 L1487.99 1215.31 L1488.58 1215.31 L1489.17 1215.31 L1489.75 1215.31 L1490.34 1215.31 L1490.93 1215.31 L1491.51 1215.31 L1492.1 1215.31 L1492.69 1215.31 L1493.27 1215.31 L1493.86 1215.31 L1494.45 1215.31 L1495.03 1215.31 L1495.62 1215.31 L1496.2 1215.31 L1496.79 1215.31 L1497.38 1215.31 L1497.96 1215.31 L1498.55 1215.31 L1499.14 1215.31 L1499.72 1215.31 L1500.31 1215.31 L1500.9 1215.31 L1501.48 1215.31 L1502.07 1215.31 L1502.65 1215.31 L1503.24 1215.31 L1503.83 1215.31 L1504.41 1215.31 L1505 1215.31 L1505.59 1215.31 L1506.17 1215.31 L1506.76 1215.31 L1507.35 1215.31 L1507.93 1215.31 L1508.52 1215.31 L1509.11 1215.31 L1509.69 1215.31 L1510.28 1215.31 L1510.86 1215.31 L1511.45 1215.31 L1512.04 1215.31 L1512.62 1215.31 L1513.21 1215.31 L1513.8 1215.31 L1514.38 1215.31 L1514.97 1215.31 L1515.56 1215.31 L1516.14 1215.31 L1516.73 1215.31 L1517.32 1215.31 L1517.9 1215.31 L1518.49 1215.31 L1519.07 1215.31 L1519.66 1215.31 L1520.25 1215.31 L1520.83 1215.31 L1521.42 1215.31 L1522.01 1215.31 L1522.59 1215.31 L1523.18 1215.31 L1523.77 1215.31 L1524.35 1215.31 L1524.94 1215.31 L1525.52 1215.31 L1526.11 1215.31 L1526.7 1215.31 L1527.28 1215.31 L1527.87 1215.31 L1528.46 1215.31 L1529.04 1215.31 L1529.63 1215.31 L1530.22 1215.31 L1530.8 1215.31 L1531.39 1215.31 L1531.98 1215.31 L1532.56 1215.31 L1533.15 1215.31 L1533.73 1215.31 L1534.32 1215.31 L1534.91 1215.31 L1535.49 1215.31 L1536.08 1215.31 L1536.67 1215.31 L1537.25 1215.31 L1537.84 1215.31 L1538.43 1215.31 L1539.01 1215.31 L1539.6 1215.31 L1540.19 1215.31 L1540.77 1215.31 L1541.36 1215.31 L1541.94 1215.31 L1542.53 1215.31 L1543.12 1215.31 L1543.7 1215.31 L1544.29 1215.31 L1544.88 1215.31 L1545.46 1215.31 L1546.05 1215.31 L1546.64 1215.31 L1547.22 1215.31 L1547.81 1215.31 L1548.4 1215.31 L1548.98 1215.31 L1549.57 1215.31 L1550.15 1215.31 L1550.74 1215.31 L1551.33 1215.31 L1551.91 1215.31 L1552.5 1215.31 L1553.09 1215.31 L1553.67 1215.31 L1554.26 1215.31 L1554.85 1215.31 L1555.43 1215.31 L1556.02 1215.31 L1556.6 1215.31 L1557.19 1215.31 L1557.78 1215.31 L1558.36 1215.31 L1558.95 1215.31 L1559.54 1215.31 L1560.12 1215.31 L1560.71 1215.31 L1561.3 1215.31 L1561.88 1215.31 L1562.47 1215.31 L1563.06 1215.31 L1563.64 1215.31 L1564.23 1215.31 L1564.81 1215.31 L1565.4 1215.31 L1565.99 1215.31 L1566.57 1215.31 L1567.16 1215.31 L1567.75 1215.31 L1568.33 1215.31 L1568.92 1215.31 L1569.51 1215.31 L1570.09 1215.31 L1570.68 1215.31 L1571.27 1215.31 L1571.85 1215.31 L1572.44 1215.31 L1573.02 1215.31 L1573.61 1215.31 L1574.2 1215.31 L1574.78 1215.31 L1575.37 1215.31 L1575.96 1215.31 L1576.54 1215.31 L1577.13 1215.31 L1577.72 1215.31 L1578.3 1215.31 L1578.89 1215.31 L1579.47 1215.31 L1580.06 1215.31 L1580.65 1215.31 L1581.23 1215.31 L1581.82 1215.31 L1582.41 1215.31 L1582.99 1215.31 L1583.58 1215.31 L1584.17 1215.31 L1584.75 1215.31 L1585.34 1215.31 L1585.93 1215.31 L1586.51 1215.31 L1587.1 1215.31 L1587.68 1215.31 L1588.27 1215.31 L1588.86 1215.31 L1589.44 1215.31 L1590.03 1215.31 L1590.62 1215.31 L1591.2 1215.31 L1591.79 1215.31 L1592.38 1215.31 L1592.96 1215.31 L1593.55 1215.31 L1594.14 1215.31 L1594.72 1215.31 L1595.31 1215.31 L1595.89 1215.31 L1596.48 1215.31 L1597.07 1215.31 L1597.65 1215.31 L1598.24 1215.31 L1598.83 1215.31 L1599.41 1215.31 L1600 1215.31 L1600.59 1215.31 L1601.17 1215.31 L1601.76 1215.31 L1602.34 1215.31 L1602.93 1215.31 L1603.52 1215.31 L1604.1 1215.31 L1604.69 1215.31 L1605.28 1215.31 L1605.86 1215.31 L1606.45 1215.31 L1607.04 1215.31 L1607.62 1215.31 L1608.21 1215.31 L1608.8 1215.31 L1609.38 1215.31 L1609.97 1215.31 L1610.55 1215.31 L1611.14 1215.31 L1611.73 1215.31 L1612.31 1215.31 L1612.9 1215.31 L1613.49 1215.31 L1614.07 1215.31 L1614.66 1215.31 L1615.25 1215.31 L1615.83 1215.31 L1616.42 1215.31 L1617.01 1215.31 L1617.59 1215.31 L1618.18 1215.31 L1618.76 1215.31 L1619.35 1215.31 L1619.94 1215.31 L1620.52 1215.31 L1621.11 1215.31 L1621.7 1215.31 L1622.28 1215.31 L1622.87 1215.31 L1623.46 1215.31 L1624.04 1215.31 L1624.63 1215.31 L1625.22 1215.31 L1625.8 1215.31 L1626.39 1215.31 L1626.97 1215.31 L1627.56 1215.31 L1628.15 1215.31 L1628.73 1215.31 L1629.32 1215.31 L1629.91 1215.31 L1630.49 1215.31 L1631.08 1215.31 L1631.67 1215.31 L1632.25 1215.31 L1632.84 1215.31 L1633.42 1215.31 L1634.01 1215.31 L1634.6 1215.31 L1635.18 1215.31 L1635.77 1215.31 L1636.36 1215.31 L1636.94 1215.31 L1637.53 1215.31 L1638.12 1215.31 L1638.7 1215.31 L1639.29 1215.31 L1639.88 1215.31 L1640.46 1215.31 L1641.05 1215.31 L1641.63 1215.31 L1642.22 1215.31 L1642.81 1215.31 L1643.39 1215.31 L1643.98 1215.31 L1644.57 1215.31 L1645.15 1215.31 L1645.74 1215.31 L1646.33 1215.31 L1646.91 1215.31 L1647.5 1215.31 L1648.09 1215.31 L1648.67 1215.31 L1649.26 1215.31 L1649.84 1215.31 L1650.43 1215.31 L1651.02 1215.31 L1651.6 1215.31 L1652.19 1215.31 L1652.78 1215.31 L1653.36 1215.31 L1653.95 1215.31 L1654.54 1215.31 L1655.12 1215.31 L1655.71 1215.31 L1656.29 1215.31 L1656.88 1215.31 L1657.47 1215.31 L1658.05 1215.31 L1658.64 1215.31 L1659.23 1215.31 L1659.81 1215.31 L1660.4 1215.31 L1660.99 1215.31 L1661.57 1215.31 L1662.16 1215.31 L1662.75 1215.31 L1663.33 1215.31 L1663.92 1215.31 L1664.5 1215.31 L1665.09 1215.31 L1665.68 1215.31 L1666.26 1215.31 L1666.85 1215.31 L1667.44 1215.31 L1668.02 1215.31 L1668.61 1215.31 L1669.2 1215.31 L1669.78 1215.31 L1670.37 1215.31 L1670.96 1215.31 L1671.54 1215.31 L1672.13 1215.31 L1672.71 1215.31 L1673.3 1215.31 L1673.89 1215.31 L1674.47 1215.31 L1675.06 1215.31 L1675.65 1215.31 L1676.23 1215.31 L1676.82 1215.31 L1677.41 1215.31 L1677.99 1215.31 L1678.58 1215.31 L1679.17 1215.31 L1679.75 1215.31 L1680.34 1215.31 L1680.92 1215.31 L1681.51 1215.31 L1682.1 1215.31 L1682.68 1215.31 L1683.27 1215.31 L1683.86 1215.31 L1684.44 1215.31 L1685.03 1215.31 L1685.62 1215.31 L1686.2 1215.31 L1686.79 1215.31 L1687.37 1215.31 L1687.96 1215.31 L1688.55 1215.31 L1689.13 1215.31 L1689.72 1215.31 L1690.31 1215.31 L1690.89 1215.31 L1691.48 1215.31 L1692.07 1215.31 L1692.65 1215.31 L1693.24 1215.31 L1693.83 1215.31 L1694.41 1215.31 L1695 1215.31 L1695.58 1215.31 L1696.17 1215.31 L1696.76 1215.31 L1697.34 1215.31 L1697.93 1215.31 L1698.52 1215.31 L1699.1 1215.31 L1699.69 1215.31 L1700.28 1215.31 L1700.86 1215.31 L1701.45 1215.31 L1702.04 1215.31 L1702.62 1215.31 L1703.21 1215.31 L1703.79 1215.31 L1704.38 1215.31 L1704.97 1215.31 L1705.55 1215.31 L1706.14 1215.31 L1706.73 1215.31 L1707.31 1215.31 L1707.9 1215.31 L1708.49 1215.31 L1709.07 1215.31 L1709.66 1215.31 L1710.24 1215.31 L1710.83 1215.31 L1711.42 1215.31 L1712 1215.31 L1712.59 1215.31 L1713.18 1215.31 L1713.76 1215.31 L1714.35 1215.31 L1714.94 1215.31 L1715.52 1215.31 L1716.11 1215.31 L1716.7 1215.31 L1717.28 1215.31 L1717.87 1215.31 L1718.45 1215.31 L1719.04 1215.31 L1719.63 1215.31 L1720.21 1215.31 L1720.8 1215.31 L1721.39 1215.31 L1721.97 1215.31 L1722.56 1215.31 L1723.15 1215.31 L1723.73 1215.31 L1724.32 1215.31 L1724.91 1215.31 L1725.49 1215.31 L1726.08 1215.31 L1726.66 1215.31 L1727.25 1215.31 L1727.84 1215.31 L1728.42 1215.31 L1729.01 1215.31 L1729.6 1215.31 L1730.18 1215.31 L1730.77 1215.31 L1731.36 1215.31 L1731.94 1215.31 L1732.53 1215.31 L1733.11 1215.31 L1733.7 1215.31 L1734.29 1215.31 L1734.87 1215.31 L1735.46 1215.31 L1736.05 1215.31 L1736.63 1215.31 L1737.22 1215.31 L1737.81 1215.31 L1738.39 1215.31 L1738.98 1215.31 L1739.57 1215.31 L1740.15 1215.31 L1740.74 1215.31 L1741.32 1215.31 L1741.91 1215.31 L1742.5 1215.31 L1743.08 1215.31 L1743.67 1215.31 L1744.26 1215.31 L1744.84 1215.31 L1745.43 1215.31 L1746.02 1215.31 L1746.6 1215.31 L1747.19 1215.31 L1747.78 1215.31 L1748.36 1215.31 L1748.95 1215.31 L1749.53 1215.31 L1750.12 1215.31 L1750.71 1215.31 L1751.29 1215.31 L1751.88 1215.31 L1752.47 1215.31 L1753.05 1215.31 L1753.64 1215.31 L1754.23 1215.31 L1754.81 1215.31 L1755.4 1215.31 L1755.99 1215.31 L1756.57 1215.31 L1757.16 1215.31 L1757.74 1215.31 L1758.33 1215.31 L1758.92 1215.31 L1759.5 1215.31 L1760.09 1215.31 L1760.68 1215.31 L1761.26 1215.31 L1761.85 1215.31 L1762.44 1215.31 L1763.02 1215.31 L1763.61 1215.31 L1764.19 1215.31 L1764.78 1215.31 L1765.37 1215.31 L1765.95 1215.31 L1766.54 1215.31 L1767.13 1215.31 L1767.71 1215.31 L1768.3 1215.31 L1768.89 1215.31 L1769.47 1215.31 L1770.06 1215.31 L1770.65 1215.31 L1771.23 1215.31 L1771.82 1215.31 L1772.4 1215.31 L1772.99 1215.31 L1773.58 1215.31 L1774.16 1215.31 L1774.75 1215.31 L1775.34 1215.31 L1775.92 1215.31 L1776.51 1215.31 L1777.1 1215.31 L1777.68 1215.31 L1778.27 1215.31 L1778.86 1215.31 L1779.44 1215.31 L1780.03 1215.31 L1780.61 1215.31 L1781.2 1215.31 L1781.79 1215.31 L1782.37 1215.31 L1782.96 1215.31 L1783.55 1215.31 L1784.13 1215.31 L1784.72 1215.31 L1785.31 1215.31 L1785.89 1215.31 L1786.48 1215.31 L1787.06 1215.31 L1787.65 1215.31 L1788.24 1215.31 L1788.82 1215.31 L1789.41 1215.31 L1790 1215.31 L1790.58 1215.31 L1791.17 1215.31 L1791.76 1215.31 L1792.34 1215.31 L1792.93 1215.31 L1793.52 1215.31 L1794.1 1215.31 L1794.69 1215.31 L1795.27 1215.31 L1795.86 1215.31 L1796.45 1215.31 L1797.03 1215.31 L1797.62 1215.31 L1798.21 1215.31 L1798.79 1215.31 L1799.38 1215.31 L1799.97 1215.31 L1800.55 1215.31 L1801.14 1215.31 L1801.73 1215.31 L1802.31 1215.31 L1802.9 1215.31 L1803.48 1215.31 L1804.07 1215.31 L1804.66 1215.31 L1805.24 1215.31 L1805.83 1215.31 L1806.42 1215.31 L1807 1215.31 L1807.59 1215.31 L1808.18 1215.31 L1808.76 1215.31 L1809.35 1215.31 L1809.94 1215.31 L1810.52 1215.31 L1811.11 1215.31 L1811.69 1215.31 L1812.28 1215.31 L1812.87 1215.31 L1813.45 1215.31 L1814.04 1215.31 L1814.63 1215.31 L1815.21 1215.31 L1815.8 1215.31 L1816.39 1215.31 L1816.97 1215.31 L1817.56 1215.31 L1818.14 1215.31 L1818.73 1215.31 L1819.32 1215.31 L1819.9 1215.31 L1820.49 1215.31 L1821.08 1215.31 L1821.66 1215.31 L1822.25 1215.31 L1822.84 1215.31 L1823.42 1215.31 L1824.01 1215.31 L1824.6 1215.31 L1825.18 1215.31 L1825.77 1215.31 L1826.35 1215.31 L1826.94 1215.31 L1827.53 1215.31 L1828.11 1215.31 L1828.7 1215.31 L1829.29 1215.31 L1829.87 1215.31 L1830.46 1215.31 L1831.05 1215.31 L1831.63 1215.31 L1832.22 1215.31 L1832.81 1215.31 L1833.39 1215.31 L1833.98 1215.31 L1834.56 1215.31 L1835.15 1215.31 L1835.74 1215.31 L1836.32 1215.31 L1836.91 1215.31 L1837.5 1215.31 L1838.08 1215.31 L1838.67 1215.31 L1839.26 1215.31 L1839.84 1215.31 L1840.43 1215.31 L1841.01 1215.31 L1841.6 1215.31 L1842.19 1215.31 L1842.77 1215.31 L1843.36 1215.31 L1843.95 1215.31 L1844.53 1215.31 L1845.12 1215.31 L1845.71 1215.31 L1846.29 1215.31 L1846.88 1215.31 L1847.47 1215.31 L1848.05 1215.31 L1848.64 1215.31 L1849.22 1215.31 L1849.81 1215.31 L1850.4 1215.31 L1850.98 1215.31 L1851.57 1215.31 L1852.16 1215.31 L1852.74 1215.31 L1853.33 1215.31 L1853.92 1215.31 L1854.5 1215.31 L1855.09 1215.31 L1855.68 1215.31 L1856.26 1215.31 L1856.85 1215.31 L1857.43 1215.31 L1858.02 1215.31 L1858.61 1215.31 L1859.19 1215.31 L1859.78 1215.31 L1860.37 1215.31 L1860.95 1215.31 L1861.54 1215.31 L1862.13 1215.31 L1862.71 1215.31 L1863.3 1215.31 L1863.88 1215.31 L1864.47 1215.31 L1865.06 1215.31 L1865.64 1215.31 L1866.23 1215.31 L1866.82 1215.31 L1867.4 1215.31 L1867.99 1215.31 L1868.58 1215.31 L1869.16 1215.31 L1869.75 1215.31 L1870.34 1215.31 L1870.92 1215.31 L1871.51 1215.31 L1872.09 1215.31 L1872.68 1215.31 L1873.27 1215.31 L1873.85 1215.31 L1874.44 1215.31 L1875.03 1215.31 L1875.61 1215.31 L1876.2 1215.31 L1876.79 1215.31 L1877.37 1215.31 L1877.96 1215.31 L1878.55 1215.31 L1879.13 1215.31 L1879.72 1215.31 L1880.3 1215.31 L1880.89 1215.31 L1881.48 1215.31 L1882.06 1215.31 L1882.65 1215.31 L1883.24 1215.31 L1883.82 1215.31 L1884.41 1215.31 L1885 1215.31 L1885.58 1215.31 L1886.17 1215.31 L1886.76 1215.31 L1887.34 1215.31 L1887.93 1215.31 L1888.51 1215.31 L1889.1 1215.31 L1889.69 1215.31 L1890.27 1215.31 L1890.86 1215.31 L1891.45 1215.31 L1892.03 1215.31 L1892.62 1215.31 L1893.21 1215.31 L1893.79 1215.31 L1894.38 1215.31 L1894.96 1215.31 L1895.55 1215.31 L1896.14 1215.31 L1896.72 1215.31 L1897.31 1215.31 L1897.9 1215.31 L1898.48 1215.31 L1899.07 1215.31 L1899.66 1215.31 L1900.24 1215.31 L1900.83 1215.31 L1901.42 1215.31 L1902 1215.31 L1902.59 1215.31 L1903.17 1215.31 L1903.76 1215.31 L1904.35 1215.31 L1904.93 1215.31 L1905.52 1215.31 L1906.11 1215.31 L1906.69 1215.31 L1907.28 1215.31 L1907.87 1215.31 L1908.45 1215.31 L1909.04 1215.31 L1909.63 1215.31 L1910.21 1215.31 L1910.8 1215.31 L1911.38 1215.31 L1911.97 1215.31 L1912.56 1215.31 L1913.14 1215.31 L1913.73 1215.31 L1914.32 1215.31 L1914.9 1215.31 L1915.49 1215.31 L1916.08 1215.31 L1916.66 1215.31 L1917.25 1215.31 L1917.83 1215.31 L1918.42 1215.31 L1919.01 1215.31 L1919.59 1215.31 L1920.18 1215.31 L1920.77 1215.31 L1921.35 1215.31 L1921.94 1215.31 L1922.53 1215.31 L1923.11 1215.31 L1923.7 1215.31 L1924.29 1215.31 L1924.87 1215.31 L1925.46 1215.31 L1926.04 1215.31 L1926.63 1215.31 L1927.22 1215.31 L1927.8 1215.31 L1928.39 1215.31 L1928.98 1215.31 L1929.56 1215.31 L1930.15 1215.31 L1930.74 1215.31 L1931.32 1215.31 L1931.91 1215.31 L1932.5 1215.31 L1933.08 1215.31 L1933.67 1215.31 L1934.25 1215.31 L1934.84 1215.31 L1935.43 1215.31 L1936.01 1215.31 L1936.6 1215.31 L1937.19 1215.31 L1937.77 1215.31 L1938.36 1215.31 L1938.95 1215.31 L1939.53 1215.31 L1940.12 1215.31 L1940.71 1215.31 L1941.29 1215.31 L1941.88 1215.31 L1942.46 1215.31 L1943.05 1215.31 L1943.64 1215.31 L1944.22 1215.31 L1944.81 1215.31 L1945.4 1215.31 L1945.98 1215.31 L1946.57 1215.31 L1947.16 1215.31 L1947.74 1215.31 L1948.33 1215.31 L1948.91 1215.31 L1949.5 1215.31 L1950.09 1215.31 L1950.67 1215.31 L1951.26 1215.31 L1951.85 1215.31 L1952.43 1215.31 L1953.02 1215.31 L1953.61 1215.31 L1954.19 1215.31 L1954.78 1215.31 L1955.37 1215.31 L1955.95 1215.31 L1956.54 1215.31 L1957.12 1215.31 L1957.71 1215.31 L1958.3 1215.31 L1958.88 1215.31 L1959.47 1215.31 L1960.06 1215.31 L1960.64 1215.31 L1961.23 1215.31 L1961.82 1215.31 L1962.4 1215.31 L1962.99 1215.31 L1963.58 1215.31 L1964.16 1215.31 L1964.75 1215.31 L1965.33 1215.31 L1965.92 1215.31 L1966.51 1215.31 L1967.09 1215.31 L1967.68 1215.31 L1968.27 1215.31 L1968.85 1215.31 L1969.44 1215.31 L1970.03 1215.31 L1970.61 1215.31 L1971.2 1215.31 L1971.78 1215.31 L1972.37 1215.31 L1972.96 1215.31 L1973.54 1215.31 L1974.13 1215.31 L1974.72 1215.31 L1975.3 1215.31 L1975.89 1215.31 L1976.48 1215.31 L1977.06 1215.31 L1977.65 1215.31 L1978.24 1215.31 L1978.82 1215.31 L1979.41 1215.31 L1979.99 1215.31 L1980.58 1215.31 L1981.17 1215.31 L1981.75 1215.31 L1982.34 1215.31 L1982.93 1215.31 L1983.51 1215.31 L1984.1 1215.31 L1984.69 1215.31 L1985.27 1215.31 L1985.86 1215.31 L1986.45 1215.31 L1987.03 1215.31 L1987.62 1215.31 L1988.2 1215.31 L1988.79 1215.31 L1989.38 1215.31 L1989.96 1215.31 L1990.55 1215.31 L1991.14 1215.31 L1991.72 1215.31 L1992.31 1215.31 L1992.9 1215.31 L1993.48 1215.31 L1994.07 1215.31 L1994.65 1215.31 L1995.24 1215.31 L1995.83 1215.31 L1996.41 1215.31 L1997 1215.31 L1997.59 1215.31 L1998.17 1215.31 L1998.76 1215.31 L1999.35 1215.31 L1999.93 1215.31 L2000.52 1215.31 L2001.11 1215.31 L2001.69 1215.31 L2002.28 1215.31 L2002.86 1215.31 L2003.45 1215.31 L2004.04 1215.31 L2004.62 1215.31 L2005.21 1215.31 L2005.8 1215.31 L2006.38 1215.31 L2006.97 1215.31 L2007.56 1215.31 L2008.14 1215.31 L2008.73 1215.31 L2009.32 1215.31 L2009.9 1215.31 L2010.49 1215.31 L2011.07 1215.31 L2011.66 1215.31 L2012.25 1215.31 L2012.83 1215.31 L2013.42 1215.31 L2014.01 1215.31 L2014.59 1215.31 L2015.18 1215.31 L2015.77 1215.31 L2016.35 1215.31 L2016.94 1215.31 L2017.53 1215.31 L2018.11 1215.31 L2018.7 1215.31 L2019.28 1215.31 L2019.87 1215.31 L2020.46 1215.31 L2021.04 1215.31 L2021.63 1215.31 L2022.22 1215.31 L2022.8 1215.31 L2023.39 1215.31 L2023.98 1215.31 L2024.56 1215.31 L2025.15 1215.31 L2025.73 1215.31 L2026.32 1215.31 L2026.91 1215.31 L2027.49 1215.31 L2028.08 1215.31 L2028.67 1215.31 L2029.25 1215.31 L2029.84 1215.31 L2030.43 1215.31 L2031.01 1215.31 L2031.6 1215.31 L2032.19 1215.31 L2032.77 1215.31 L2033.36 1215.31 L2033.94 1215.31 L2034.53 1215.31 L2035.12 1215.31 L2035.7 1215.31 L2036.29 1215.31 L2036.88 1215.31 L2037.46 1215.31 L2038.05 1215.31 L2038.64 1215.31 L2039.22 1215.31 L2039.81 1215.31 L2040.4 1215.31 L2040.98 1215.31 L2041.57 1215.31 L2042.15 1215.31 L2042.74 1215.31 L2043.33 1215.31 L2043.91 1215.31 L2044.5 1215.31 L2045.09 1215.31 L2045.67 1215.31 L2046.26 1215.31 L2046.85 1215.31 L2047.43 1215.31 L2048.02 1215.31 L2048.6 1215.31 L2049.19 1215.31 L2049.78 1215.31 L2050.36 1215.31 L2050.95 1215.31 L2051.54 1215.31 L2052.12 1215.31 L2052.71 1215.31 L2053.3 1215.31 L2053.88 1215.31 L2054.47 1215.31 L2055.06 1215.31 L2055.64 1215.31 L2056.23 1215.31 L2056.81 1215.31 L2057.4 1215.31 L2057.99 1215.31 L2058.57 1215.31 L2059.16 1215.31 L2059.75 1215.31 L2060.33 1215.31 L2060.92 1215.31 L2061.51 1215.31 L2062.09 1215.31 L2062.68 1215.31 L2063.27 1215.31 L2063.85 1215.31 L2064.44 1215.31 L2065.02 1215.31 L2065.61 1215.31 L2066.2 1215.31 L2066.78 1215.31 L2067.37 1215.31 L2067.96 1215.31 L2068.54 1215.31 L2069.13 1215.31 L2069.72 1215.31 L2070.3 1215.31 L2070.89 1215.31 L2071.48 1215.31 L2072.06 1215.31 L2072.65 1215.31 L2073.23 1215.31 L2073.82 1215.31 L2074.41 1215.31 L2074.99 1215.31 L2075.58 1215.31 L2076.17 1215.31 L2076.75 1215.31 L2077.34 1215.31 L2077.93 1215.31 L2078.51 1215.31 L2079.1 1215.31 L2079.68 1215.31 L2080.27 1215.31 L2080.86 1215.31 L2081.44 1215.31 L2082.03 1215.31 L2082.62 1215.31 L2083.2 1215.31 L2083.79 1215.31 L2084.38 1215.31 L2084.96 1215.31 L2085.55 1215.31 L2086.14 1215.31 L2086.72 1215.31 L2087.31 1215.31 L2087.89 1215.31 L2088.48 1215.31 L2089.07 1215.31 L2089.65 1215.31 L2090.24 1215.31 L2090.83 1215.31 L2091.41 1215.31 L2092 1215.31 L2092.59 1215.31 L2093.17 1215.31 L2093.76 1215.31 L2094.35 1215.31 L2094.93 1215.31 L2095.52 1215.31 L2096.1 1215.31 L2096.69 1215.31 L2097.28 1215.31 L2097.86 1215.31 L2098.45 1215.31 L2099.04 1215.31 L2099.62 1215.31 L2100.21 1215.31 L2100.8 1215.31 L2101.38 1215.31 L2101.97 1215.31 L2102.55 1215.31 L2103.14 1215.31 L2103.73 1215.31 L2104.31 1215.31 L2104.9 1215.31 L2105.49 1215.31 L2106.07 1215.31 L2106.66 1215.31 L2107.25 1215.31 L2107.83 1215.31 L2108.42 1215.31 L2109.01 1215.31 L2109.59 1215.31 L2110.18 1215.31 L2110.76 1215.31 L2111.35 1215.31 L2111.94 1215.31 L2112.52 1215.31 L2113.11 1215.31 L2113.7 1215.31 L2114.28 1215.31 L2114.87 1215.31 L2115.46 1215.31 L2116.04 1215.31 L2116.63 1215.31 L2117.22 1215.31 L2117.8 1215.31 L2118.39 1215.31 L2118.97 1215.31 L2119.56 1215.31 L2120.15 1215.31 L2120.73 1215.31 L2121.32 1215.31 L2121.91 1215.31 L2122.49 1215.31 L2123.08 1215.31 L2123.67 1215.31 L2124.25 1215.31 L2124.84 1215.31 L2125.42 1215.31 L2126.01 1215.31 L2126.6 1215.31 L2127.18 1215.31 L2127.77 1215.31 L2128.36 1215.31 L2128.94 1215.31 L2129.53 1215.31 L2130.12 1215.31 L2130.7 1215.31 L2131.29 1215.31 L2131.88 1215.31 L2132.46 1215.31 L2133.05 1215.31 L2133.63 1215.31 L2134.22 1215.31 L2134.81 1215.31 L2135.39 1215.31 L2135.98 1215.31 L2136.57 1215.31 L2137.15 1215.31 L2137.74 1215.31 L2138.33 1215.31 L2138.91 1215.31 L2139.5 1215.31 L2140.09 1215.31 L2140.67 1215.31 L2141.26 1215.31 L2141.84 1215.31 L2142.43 1215.31 L2143.02 1215.31 L2143.6 1215.31 L2144.19 1215.31 L2144.78 1215.31 L2145.36 1215.31 L2145.95 1215.31 L2146.54 1215.31 L2147.12 1215.31 L2147.71 1215.31 L2148.3 1215.31 L2148.88 1215.31 L2149.47 1215.31 L2150.05 1215.31 L2150.64 1215.31 L2151.23 1215.31 L2151.81 1215.31 L2152.4 1215.31 L2152.99 1215.31 L2153.57 1215.31 L2154.16 1215.31 L2154.75 1215.31 L2155.33 1215.31 L2155.92 1215.31 L2156.5 1215.31 L2157.09 1215.31 L2157.68 1215.31 L2158.26 1215.31 L2158.26 1214.51 L2157.68 1214.51 L2157.09 1214.51 L2156.5 1214.51 L2155.92 1214.51 L2155.33 1214.51 L2154.75 1214.51 L2154.16 1214.51 L2153.57 1214.51 L2152.99 1214.51 L2152.4 1214.51 L2151.81 1214.51 L2151.23 1214.51 L2150.64 1214.51 L2150.05 1214.51 L2149.47 1214.51 L2148.88 1214.51 L2148.3 1214.51 L2147.71 1214.51 L2147.12 1214.51 L2146.54 1214.51 L2145.95 1214.51 L2145.36 1214.51 L2144.78 1214.51 L2144.19 1214.51 L2143.6 1214.51 L2143.02 1214.51 L2142.43 1214.51 L2141.84 1214.51 L2141.26 1214.51 L2140.67 1214.51 L2140.09 1214.51 L2139.5 1214.51 L2138.91 1214.51 L2138.33 1214.51 L2137.74 1214.51 L2137.15 1214.51 L2136.57 1214.51 L2135.98 1214.51 L2135.39 1214.51 L2134.81 1214.51 L2134.22 1214.51 L2133.63 1214.51 L2133.05 1214.51 L2132.46 1214.51 L2131.88 1214.51 L2131.29 1214.51 L2130.7 1214.51 L2130.12 1214.51 L2129.53 1214.51 L2128.94 1214.51 L2128.36 1214.51 L2127.77 1214.51 L2127.18 1214.51 L2126.6 1214.51 L2126.01 1214.51 L2125.42 1214.51 L2124.84 1214.51 L2124.25 1214.51 L2123.67 1214.51 L2123.08 1214.51 L2122.49 1214.51 L2121.91 1214.51 L2121.32 1214.51 L2120.73 1214.51 L2120.15 1214.51 L2119.56 1214.51 L2118.97 1214.51 L2118.39 1214.51 L2117.8 1214.51 L2117.22 1214.51 L2116.63 1214.51 L2116.04 1214.51 L2115.46 1214.51 L2114.87 1214.51 L2114.28 1214.51 L2113.7 1214.51 L2113.11 1214.51 L2112.52 1214.51 L2111.94 1214.51 L2111.35 1214.51 L2110.76 1214.51 L2110.18 1214.51 L2109.59 1214.51 L2109.01 1214.51 L2108.42 1214.51 L2107.83 1214.51 L2107.25 1214.51 L2106.66 1214.51 L2106.07 1214.51 L2105.49 1214.51 L2104.9 1214.51 L2104.31 1214.51 L2103.73 1214.51 L2103.14 1214.51 L2102.55 1214.51 L2101.97 1214.51 L2101.38 1214.51 L2100.8 1214.51 L2100.21 1214.51 L2099.62 1214.51 L2099.04 1214.51 L2098.45 1214.51 L2097.86 1214.51 L2097.28 1214.51 L2096.69 1214.51 L2096.1 1214.51 L2095.52 1214.51 L2094.93 1214.51 L2094.35 1214.51 L2093.76 1214.51 L2093.17 1214.51 L2092.59 1214.51 L2092 1214.51 L2091.41 1214.51 L2090.83 1214.51 L2090.24 1214.51 L2089.65 1214.51 L2089.07 1214.51 L2088.48 1214.51 L2087.89 1214.51 L2087.31 1214.51 L2086.72 1214.51 L2086.14 1214.51 L2085.55 1214.51 L2084.96 1214.51 L2084.38 1214.51 L2083.79 1214.51 L2083.2 1214.51 L2082.62 1214.51 L2082.03 1214.51 L2081.44 1214.51 L2080.86 1214.51 L2080.27 1214.51 L2079.68 1214.51 L2079.1 1214.51 L2078.51 1214.51 L2077.93 1214.51 L2077.34 1214.51 L2076.75 1214.51 L2076.17 1214.51 L2075.58 1214.51 L2074.99 1214.51 L2074.41 1214.51 L2073.82 1214.51 L2073.23 1214.51 L2072.65 1214.51 L2072.06 1214.51 L2071.48 1214.51 L2070.89 1214.51 L2070.3 1214.51 L2069.72 1214.51 L2069.13 1214.51 L2068.54 1214.51 L2067.96 1214.51 L2067.37 1214.51 L2066.78 1214.51 L2066.2 1214.51 L2065.61 1214.51 L2065.02 1214.51 L2064.44 1214.51 L2063.85 1214.51 L2063.27 1214.51 L2062.68 1214.51 L2062.09 1214.51 L2061.51 1214.51 L2060.92 1214.51 L2060.33 1214.51 L2059.75 1214.51 L2059.16 1214.51 L2058.57 1214.51 L2057.99 1214.51 L2057.4 1214.51 L2056.81 1214.51 L2056.23 1214.51 L2055.64 1214.51 L2055.06 1214.51 L2054.47 1214.51 L2053.88 1214.51 L2053.3 1214.51 L2052.71 1214.51 L2052.12 1214.51 L2051.54 1214.51 L2050.95 1214.51 L2050.36 1214.51 L2049.78 1214.51 L2049.19 1214.51 L2048.6 1214.51 L2048.02 1214.51 L2047.43 1214.51 L2046.85 1214.51 L2046.26 1214.51 L2045.67 1214.51 L2045.09 1214.51 L2044.5 1214.51 L2043.91 1214.51 L2043.33 1214.51 L2042.74 1214.51 L2042.15 1214.51 L2041.57 1214.51 L2040.98 1214.51 L2040.4 1214.51 L2039.81 1214.51 L2039.22 1214.51 L2038.64 1214.51 L2038.05 1214.51 L2037.46 1214.51 L2036.88 1214.51 L2036.29 1214.51 L2035.7 1214.51 L2035.12 1214.51 L2034.53 1214.51 L2033.94 1214.51 L2033.36 1214.51 L2032.77 1214.51 L2032.19 1214.51 L2031.6 1214.51 L2031.01 1214.51 L2030.43 1214.51 L2029.84 1214.51 L2029.25 1214.51 L2028.67 1214.51 L2028.08 1214.51 L2027.49 1214.51 L2026.91 1214.51 L2026.32 1214.51 L2025.73 1214.51 L2025.15 1214.51 L2024.56 1214.51 L2023.98 1214.51 L2023.39 1214.51 L2022.8 1214.51 L2022.22 1214.51 L2021.63 1214.51 L2021.04 1214.51 L2020.46 1214.51 L2019.87 1214.51 L2019.28 1214.51 L2018.7 1214.51 L2018.11 1214.51 L2017.53 1214.51 L2016.94 1214.51 L2016.35 1214.51 L2015.77 1214.51 L2015.18 1214.51 L2014.59 1214.51 L2014.01 1214.51 L2013.42 1214.51 L2012.83 1214.51 L2012.25 1214.51 L2011.66 1214.51 L2011.07 1214.51 L2010.49 1214.51 L2009.9 1214.51 L2009.32 1214.51 L2008.73 1214.51 L2008.14 1214.51 L2007.56 1214.51 L2006.97 1214.51 L2006.38 1214.51 L2005.8 1214.51 L2005.21 1214.51 L2004.62 1214.51 L2004.04 1214.51 L2003.45 1214.51 L2002.86 1214.51 L2002.28 1214.51 L2001.69 1214.51 L2001.11 1214.51 L2000.52 1214.51 L1999.93 1214.51 L1999.35 1214.51 L1998.76 1214.51 L1998.17 1214.51 L1997.59 1214.51 L1997 1214.51 L1996.41 1214.51 L1995.83 1214.51 L1995.24 1214.51 L1994.65 1214.51 L1994.07 1214.51 L1993.48 1214.51 L1992.9 1214.51 L1992.31 1214.51 L1991.72 1214.51 L1991.14 1214.51 L1990.55 1214.51 L1989.96 1214.51 L1989.38 1214.51 L1988.79 1214.51 L1988.2 1214.51 L1987.62 1214.51 L1987.03 1214.51 L1986.45 1214.51 L1985.86 1214.51 L1985.27 1214.51 L1984.69 1214.51 L1984.1 1214.51 L1983.51 1214.51 L1982.93 1214.51 L1982.34 1214.51 L1981.75 1214.51 L1981.17 1214.51 L1980.58 1214.51 L1979.99 1214.51 L1979.41 1214.51 L1978.82 1214.51 L1978.24 1214.51 L1977.65 1214.51 L1977.06 1214.51 L1976.48 1214.51 L1975.89 1214.51 L1975.3 1214.51 L1974.72 1214.51 L1974.13 1214.51 L1973.54 1214.51 L1972.96 1214.51 L1972.37 1214.51 L1971.78 1214.51 L1971.2 1214.51 L1970.61 1214.51 L1970.03 1214.51 L1969.44 1214.51 L1968.85 1214.51 L1968.27 1214.51 L1967.68 1214.51 L1967.09 1214.51 L1966.51 1214.51 L1965.92 1214.51 L1965.33 1214.51 L1964.75 1214.51 L1964.16 1214.51 L1963.58 1214.51 L1962.99 1214.51 L1962.4 1214.51 L1961.82 1214.51 L1961.23 1214.51 L1960.64 1214.51 L1960.06 1214.51 L1959.47 1214.51 L1958.88 1214.51 L1958.3 1214.51 L1957.71 1214.51 L1957.12 1214.51 L1956.54 1214.51 L1955.95 1214.51 L1955.37 1214.51 L1954.78 1214.51 L1954.19 1214.51 L1953.61 1214.51 L1953.02 1214.51 L1952.43 1214.51 L1951.85 1214.51 L1951.26 1214.51 L1950.67 1214.51 L1950.09 1214.51 L1949.5 1214.51 L1948.91 1214.51 L1948.33 1214.51 L1947.74 1214.51 L1947.16 1214.51 L1946.57 1214.51 L1945.98 1214.51 L1945.4 1214.51 L1944.81 1214.51 L1944.22 1214.51 L1943.64 1214.51 L1943.05 1214.51 L1942.46 1214.51 L1941.88 1214.51 L1941.29 1214.51 L1940.71 1214.51 L1940.12 1214.51 L1939.53 1214.51 L1938.95 1214.51 L1938.36 1214.51 L1937.77 1214.51 L1937.19 1214.51 L1936.6 1214.51 L1936.01 1214.51 L1935.43 1214.51 L1934.84 1214.51 L1934.25 1214.51 L1933.67 1214.51 L1933.08 1214.51 L1932.5 1214.51 L1931.91 1214.51 L1931.32 1214.51 L1930.74 1214.51 L1930.15 1214.51 L1929.56 1214.51 L1928.98 1214.51 L1928.39 1214.51 L1927.8 1214.51 L1927.22 1214.51 L1926.63 1214.51 L1926.04 1214.51 L1925.46 1214.51 L1924.87 1214.51 L1924.29 1214.51 L1923.7 1214.51 L1923.11 1214.51 L1922.53 1214.51 L1921.94 1214.51 L1921.35 1214.51 L1920.77 1214.51 L1920.18 1214.51 L1919.59 1214.51 L1919.01 1214.51 L1918.42 1214.51 L1917.83 1214.51 L1917.25 1214.51 L1916.66 1214.51 L1916.08 1214.51 L1915.49 1214.51 L1914.9 1214.51 L1914.32 1214.51 L1913.73 1214.51 L1913.14 1214.51 L1912.56 1214.51 L1911.97 1214.51 L1911.38 1214.51 L1910.8 1214.51 L1910.21 1214.51 L1909.63 1214.51 L1909.04 1214.51 L1908.45 1214.51 L1907.87 1214.51 L1907.28 1214.51 L1906.69 1214.51 L1906.11 1214.51 L1905.52 1214.51 L1904.93 1214.51 L1904.35 1214.51 L1903.76 1214.51 L1903.17 1214.51 L1902.59 1214.51 L1902 1214.51 L1901.42 1214.51 L1900.83 1214.51 L1900.24 1214.51 L1899.66 1214.51 L1899.07 1214.51 L1898.48 1214.51 L1897.9 1214.51 L1897.31 1214.51 L1896.72 1214.51 L1896.14 1214.51 L1895.55 1214.51 L1894.96 1214.51 L1894.38 1214.51 L1893.79 1214.51 L1893.21 1214.51 L1892.62 1214.51 L1892.03 1214.51 L1891.45 1214.51 L1890.86 1214.51 L1890.27 1214.51 L1889.69 1214.51 L1889.1 1214.51 L1888.51 1214.51 L1887.93 1214.51 L1887.34 1214.51 L1886.76 1214.51 L1886.17 1214.51 L1885.58 1214.51 L1885 1214.51 L1884.41 1214.51 L1883.82 1214.51 L1883.24 1214.51 L1882.65 1214.51 L1882.06 1214.51 L1881.48 1214.51 L1880.89 1214.51 L1880.3 1214.51 L1879.72 1214.51 L1879.13 1214.51 L1878.55 1214.51 L1877.96 1214.51 L1877.37 1214.51 L1876.79 1214.51 L1876.2 1214.51 L1875.61 1214.51 L1875.03 1214.51 L1874.44 1214.51 L1873.85 1214.51 L1873.27 1214.51 L1872.68 1214.51 L1872.09 1214.51 L1871.51 1214.51 L1870.92 1214.51 L1870.34 1214.51 L1869.75 1214.51 L1869.16 1214.51 L1868.58 1214.51 L1867.99 1214.51 L1867.4 1214.51 L1866.82 1214.51 L1866.23 1214.51 L1865.64 1214.51 L1865.06 1214.51 L1864.47 1214.51 L1863.88 1214.51 L1863.3 1214.51 L1862.71 1214.51 L1862.13 1214.51 L1861.54 1214.51 L1860.95 1214.51 L1860.37 1214.51 L1859.78 1214.51 L1859.19 1214.51 L1858.61 1214.51 L1858.02 1214.51 L1857.43 1214.51 L1856.85 1214.51 L1856.26 1214.51 L1855.68 1214.51 L1855.09 1214.51 L1854.5 1214.51 L1853.92 1214.51 L1853.33 1214.51 L1852.74 1214.51 L1852.16 1214.51 L1851.57 1214.51 L1850.98 1214.51 L1850.4 1214.51 L1849.81 1214.51 L1849.22 1214.51 L1848.64 1214.51 L1848.05 1214.51 L1847.47 1214.51 L1846.88 1214.51 L1846.29 1214.51 L1845.71 1214.51 L1845.12 1214.51 L1844.53 1214.51 L1843.95 1214.51 L1843.36 1214.51 L1842.77 1214.51 L1842.19 1214.51 L1841.6 1214.51 L1841.01 1214.51 L1840.43 1214.51 L1839.84 1214.51 L1839.26 1214.51 L1838.67 1214.51 L1838.08 1214.51 L1837.5 1214.51 L1836.91 1214.51 L1836.32 1214.51 L1835.74 1214.51 L1835.15 1214.51 L1834.56 1214.51 L1833.98 1214.51 L1833.39 1214.51 L1832.81 1214.51 L1832.22 1214.51 L1831.63 1214.51 L1831.05 1214.51 L1830.46 1214.51 L1829.87 1214.51 L1829.29 1214.51 L1828.7 1214.51 L1828.11 1214.51 L1827.53 1214.51 L1826.94 1214.51 L1826.35 1214.51 L1825.77 1214.51 L1825.18 1214.51 L1824.6 1214.51 L1824.01 1214.51 L1823.42 1214.51 L1822.84 1214.51 L1822.25 1214.51 L1821.66 1214.51 L1821.08 1214.51 L1820.49 1214.51 L1819.9 1214.51 L1819.32 1214.51 L1818.73 1214.51 L1818.14 1214.51 L1817.56 1214.51 L1816.97 1214.51 L1816.39 1214.51 L1815.8 1214.51 L1815.21 1214.51 L1814.63 1214.51 L1814.04 1214.51 L1813.45 1214.51 L1812.87 1214.51 L1812.28 1214.51 L1811.69 1214.51 L1811.11 1214.51 L1810.52 1214.51 L1809.94 1214.51 L1809.35 1214.51 L1808.76 1214.51 L1808.18 1214.51 L1807.59 1214.51 L1807 1214.51 L1806.42 1214.51 L1805.83 1214.51 L1805.24 1214.51 L1804.66 1214.51 L1804.07 1214.51 L1803.48 1214.51 L1802.9 1214.51 L1802.31 1214.51 L1801.73 1214.51 L1801.14 1214.51 L1800.55 1214.51 L1799.97 1214.51 L1799.38 1214.51 L1798.79 1214.51 L1798.21 1214.51 L1797.62 1214.51 L1797.03 1214.51 L1796.45 1214.51 L1795.86 1214.51 L1795.27 1214.51 L1794.69 1214.51 L1794.1 1214.51 L1793.52 1214.51 L1792.93 1214.51 L1792.34 1214.51 L1791.76 1214.51 L1791.17 1214.51 L1790.58 1214.51 L1790 1214.51 L1789.41 1214.51 L1788.82 1214.51 L1788.24 1214.51 L1787.65 1214.51 L1787.06 1214.51 L1786.48 1214.51 L1785.89 1214.51 L1785.31 1214.51 L1784.72 1214.51 L1784.13 1214.51 L1783.55 1214.51 L1782.96 1214.51 L1782.37 1214.51 L1781.79 1214.51 L1781.2 1214.51 L1780.61 1214.51 L1780.03 1214.51 L1779.44 1214.51 L1778.86 1214.51 L1778.27 1214.51 L1777.68 1214.51 L1777.1 1214.51 L1776.51 1214.51 L1775.92 1214.51 L1775.34 1214.51 L1774.75 1214.51 L1774.16 1214.51 L1773.58 1214.51 L1772.99 1214.51 L1772.4 1214.51 L1771.82 1214.51 L1771.23 1214.51 L1770.65 1214.51 L1770.06 1214.51 L1769.47 1214.51 L1768.89 1214.51 L1768.3 1214.51 L1767.71 1214.51 L1767.13 1214.51 L1766.54 1214.51 L1765.95 1214.51 L1765.37 1214.51 L1764.78 1214.51 L1764.19 1214.51 L1763.61 1214.51 L1763.02 1214.51 L1762.44 1214.51 L1761.85 1214.51 L1761.26 1214.51 L1760.68 1214.51 L1760.09 1214.51 L1759.5 1214.51 L1758.92 1214.51 L1758.33 1214.51 L1757.74 1214.51 L1757.16 1214.51 L1756.57 1214.51 L1755.99 1214.51 L1755.4 1214.51 L1754.81 1214.51 L1754.23 1214.51 L1753.64 1214.51 L1753.05 1214.51 L1752.47 1214.51 L1751.88 1214.51 L1751.29 1214.51 L1750.71 1214.51 L1750.12 1214.51 L1749.53 1214.51 L1748.95 1214.51 L1748.36 1214.51 L1747.78 1214.51 L1747.19 1214.51 L1746.6 1214.51 L1746.02 1214.51 L1745.43 1214.51 L1744.84 1214.51 L1744.26 1214.51 L1743.67 1214.51 L1743.08 1214.51 L1742.5 1214.51 L1741.91 1214.51 L1741.32 1214.51 L1740.74 1214.51 L1740.15 1214.51 L1739.57 1214.51 L1738.98 1214.51 L1738.39 1214.51 L1737.81 1214.51 L1737.22 1214.51 L1736.63 1214.51 L1736.05 1214.51 L1735.46 1214.51 L1734.87 1214.51 L1734.29 1214.51 L1733.7 1214.51 L1733.11 1214.51 L1732.53 1214.51 L1731.94 1214.51 L1731.36 1214.51 L1730.77 1214.51 L1730.18 1214.51 L1729.6 1214.51 L1729.01 1214.51 L1728.42 1214.51 L1727.84 1214.51 L1727.25 1214.51 L1726.66 1214.51 L1726.08 1214.51 L1725.49 1214.51 L1724.91 1214.51 L1724.32 1214.51 L1723.73 1214.51 L1723.15 1214.51 L1722.56 1214.51 L1721.97 1214.51 L1721.39 1214.51 L1720.8 1214.51 L1720.21 1214.51 L1719.63 1214.51 L1719.04 1214.51 L1718.45 1214.51 L1717.87 1214.51 L1717.28 1214.51 L1716.7 1214.51 L1716.11 1214.51 L1715.52 1214.51 L1714.94 1214.51 L1714.35 1214.51 L1713.76 1214.51 L1713.18 1214.51 L1712.59 1214.51 L1712 1214.51 L1711.42 1214.51 L1710.83 1214.51 L1710.24 1214.51 L1709.66 1214.51 L1709.07 1214.51 L1708.49 1214.51 L1707.9 1214.51 L1707.31 1214.51 L1706.73 1214.51 L1706.14 1214.51 L1705.55 1214.51 L1704.97 1214.51 L1704.38 1214.51 L1703.79 1214.51 L1703.21 1214.51 L1702.62 1214.51 L1702.04 1214.51 L1701.45 1214.51 L1700.86 1214.51 L1700.28 1214.51 L1699.69 1214.51 L1699.1 1214.51 L1698.52 1214.51 L1697.93 1214.51 L1697.34 1214.51 L1696.76 1214.51 L1696.17 1214.51 L1695.58 1214.51 L1695 1214.51 L1694.41 1214.51 L1693.83 1214.51 L1693.24 1214.51 L1692.65 1214.51 L1692.07 1214.51 L1691.48 1214.51 L1690.89 1214.51 L1690.31 1214.51 L1689.72 1214.51 L1689.13 1214.51 L1688.55 1214.51 L1687.96 1214.51 L1687.37 1214.51 L1686.79 1214.51 L1686.2 1214.51 L1685.62 1214.51 L1685.03 1214.51 L1684.44 1214.51 L1683.86 1214.51 L1683.27 1214.51 L1682.68 1214.51 L1682.1 1214.51 L1681.51 1214.51 L1680.92 1214.51 L1680.34 1214.51 L1679.75 1214.51 L1679.17 1214.51 L1678.58 1214.51 L1677.99 1214.51 L1677.41 1214.51 L1676.82 1214.51 L1676.23 1214.51 L1675.65 1214.51 L1675.06 1214.51 L1674.47 1214.51 L1673.89 1214.51 L1673.3 1214.51 L1672.71 1214.51 L1672.13 1214.51 L1671.54 1214.51 L1670.96 1214.51 L1670.37 1214.51 L1669.78 1214.51 L1669.2 1214.51 L1668.61 1214.51 L1668.02 1214.51 L1667.44 1214.51 L1666.85 1214.51 L1666.26 1214.51 L1665.68 1214.51 L1665.09 1214.51 L1664.5 1214.51 L1663.92 1214.51 L1663.33 1214.51 L1662.75 1214.51 L1662.16 1214.51 L1661.57 1214.51 L1660.99 1214.51 L1660.4 1214.51 L1659.81 1214.51 L1659.23 1214.51 L1658.64 1214.51 L1658.05 1214.51 L1657.47 1214.51 L1656.88 1214.51 L1656.29 1214.51 L1655.71 1214.51 L1655.12 1214.51 L1654.54 1214.51 L1653.95 1214.51 L1653.36 1214.51 L1652.78 1214.51 L1652.19 1214.51 L1651.6 1214.51 L1651.02 1214.51 L1650.43 1214.51 L1649.84 1214.51 L1649.26 1214.51 L1648.67 1214.51 L1648.09 1214.51 L1647.5 1214.51 L1646.91 1214.51 L1646.33 1214.51 L1645.74 1214.51 L1645.15 1214.51 L1644.57 1214.51 L1643.98 1214.51 L1643.39 1214.51 L1642.81 1214.51 L1642.22 1214.51 L1641.63 1214.51 L1641.05 1214.51 L1640.46 1214.51 L1639.88 1214.51 L1639.29 1214.51 L1638.7 1214.51 L1638.12 1214.51 L1637.53 1214.51 L1636.94 1214.51 L1636.36 1214.51 L1635.77 1214.51 L1635.18 1214.51 L1634.6 1214.51 L1634.01 1214.51 L1633.42 1214.51 L1632.84 1214.51 L1632.25 1214.51 L1631.67 1214.51 L1631.08 1214.51 L1630.49 1214.51 L1629.91 1214.51 L1629.32 1214.51 L1628.73 1214.51 L1628.15 1214.51 L1627.56 1214.51 L1626.97 1214.51 L1626.39 1214.51 L1625.8 1214.51 L1625.22 1214.51 L1624.63 1214.51 L1624.04 1214.51 L1623.46 1214.51 L1622.87 1214.51 L1622.28 1214.51 L1621.7 1214.51 L1621.11 1214.51 L1620.52 1214.51 L1619.94 1214.51 L1619.35 1214.51 L1618.76 1214.51 L1618.18 1214.51 L1617.59 1214.51 L1617.01 1214.51 L1616.42 1214.51 L1615.83 1214.51 L1615.25 1214.51 L1614.66 1214.51 L1614.07 1214.51 L1613.49 1214.51 L1612.9 1214.51 L1612.31 1214.51 L1611.73 1214.51 L1611.14 1214.51 L1610.55 1214.51 L1609.97 1214.51 L1609.38 1214.51 L1608.8 1214.51 L1608.21 1214.51 L1607.62 1214.51 L1607.04 1214.51 L1606.45 1214.51 L1605.86 1214.51 L1605.28 1214.51 L1604.69 1214.51 L1604.1 1214.51 L1603.52 1214.51 L1602.93 1214.51 L1602.34 1214.51 L1601.76 1214.51 L1601.17 1214.51 L1600.59 1214.51 L1600 1214.51 L1599.41 1214.51 L1598.83 1214.51 L1598.24 1214.51 L1597.65 1214.51 L1597.07 1214.51 L1596.48 1214.51 L1595.89 1214.51 L1595.31 1214.51 L1594.72 1214.51 L1594.14 1214.51 L1593.55 1214.51 L1592.96 1214.51 L1592.38 1214.51 L1591.79 1214.51 L1591.2 1214.51 L1590.62 1214.51 L1590.03 1214.51 L1589.44 1214.51 L1588.86 1214.51 L1588.27 1214.51 L1587.68 1214.51 L1587.1 1214.51 L1586.51 1214.51 L1585.93 1214.51 L1585.34 1214.51 L1584.75 1214.51 L1584.17 1214.51 L1583.58 1214.51 L1582.99 1214.51 L1582.41 1214.51 L1581.82 1214.51 L1581.23 1214.51 L1580.65 1214.51 L1580.06 1214.51 L1579.47 1214.51 L1578.89 1214.51 L1578.3 1214.51 L1577.72 1214.51 L1577.13 1214.51 L1576.54 1214.51 L1575.96 1214.51 L1575.37 1214.51 L1574.78 1214.51 L1574.2 1214.51 L1573.61 1214.51 L1573.02 1214.51 L1572.44 1214.51 L1571.85 1214.51 L1571.27 1214.51 L1570.68 1214.51 L1570.09 1214.51 L1569.51 1214.51 L1568.92 1214.51 L1568.33 1214.51 L1567.75 1214.51 L1567.16 1214.51 L1566.57 1214.51 L1565.99 1214.51 L1565.4 1214.51 L1564.81 1214.51 L1564.23 1214.51 L1563.64 1214.51 L1563.06 1214.51 L1562.47 1214.51 L1561.88 1214.51 L1561.3 1214.51 L1560.71 1214.51 L1560.12 1214.51 L1559.54 1214.51 L1558.95 1214.51 L1558.36 1214.51 L1557.78 1214.51 L1557.19 1214.51 L1556.6 1214.51 L1556.02 1214.51 L1555.43 1214.51 L1554.85 1214.51 L1554.26 1214.51 L1553.67 1214.51 L1553.09 1214.51 L1552.5 1214.51 L1551.91 1214.51 L1551.33 1214.51 L1550.74 1214.51 L1550.15 1214.51 L1549.57 1214.51 L1548.98 1214.51 L1548.4 1214.51 L1547.81 1214.51 L1547.22 1214.51 L1546.64 1214.51 L1546.05 1214.51 L1545.46 1214.51 L1544.88 1214.51 L1544.29 1214.51 L1543.7 1214.51 L1543.12 1214.51 L1542.53 1214.51 L1541.94 1214.51 L1541.36 1214.51 L1540.77 1214.51 L1540.19 1214.51 L1539.6 1214.51 L1539.01 1214.51 L1538.43 1214.51 L1537.84 1214.51 L1537.25 1214.51 L1536.67 1214.51 L1536.08 1214.51 L1535.49 1214.51 L1534.91 1214.51 L1534.32 1214.51 L1533.73 1214.51 L1533.15 1214.51 L1532.56 1214.51 L1531.98 1214.51 L1531.39 1214.51 L1530.8 1214.51 L1530.22 1214.51 L1529.63 1214.51 L1529.04 1214.51 L1528.46 1214.51 L1527.87 1214.51 L1527.28 1214.51 L1526.7 1214.51 L1526.11 1214.51 L1525.52 1214.51 L1524.94 1214.51 L1524.35 1214.51 L1523.77 1214.51 L1523.18 1214.51 L1522.59 1214.51 L1522.01 1214.51 L1521.42 1214.51 L1520.83 1214.51 L1520.25 1214.51 L1519.66 1214.51 L1519.07 1214.51 L1518.49 1214.51 L1517.9 1214.51 L1517.32 1214.51 L1516.73 1214.51 L1516.14 1214.51 L1515.56 1214.51 L1514.97 1214.51 L1514.38 1214.51 L1513.8 1214.51 L1513.21 1214.51 L1512.62 1214.51 L1512.04 1214.51 L1511.45 1214.51 L1510.86 1214.51 L1510.28 1214.51 L1509.69 1214.51 L1509.11 1214.51 L1508.52 1214.51 L1507.93 1214.51 L1507.35 1214.51 L1506.76 1214.51 L1506.17 1214.51 L1505.59 1214.51 L1505 1214.51 L1504.41 1214.51 L1503.83 1214.51 L1503.24 1214.51 L1502.65 1214.51 L1502.07 1214.51 L1501.48 1214.51 L1500.9 1214.51 L1500.31 1214.51 L1499.72 1214.51 L1499.14 1214.51 L1498.55 1214.51 L1497.96 1214.51 L1497.38 1214.51 L1496.79 1214.51 L1496.2 1214.51 L1495.62 1214.51 L1495.03 1214.51 L1494.45 1214.51 L1493.86 1214.51 L1493.27 1214.51 L1492.69 1214.51 L1492.1 1214.51 L1491.51 1214.51 L1490.93 1214.51 L1490.34 1214.51 L1489.75 1214.51 L1489.17 1214.51 L1488.58 1214.51 L1487.99 1214.51 L1487.41 1214.51 L1486.82 1214.51 L1486.24 1214.51 L1485.65 1214.51 L1485.06 1214.51 L1484.48 1214.51 L1483.89 1214.51 L1483.3 1214.51 L1482.72 1214.51 L1482.13 1214.51 L1481.54 1214.51 L1480.96 1214.51 L1480.37 1214.51 L1479.78 1214.51 L1479.2 1214.51 L1478.61 1214.51 L1478.03 1214.51 L1477.44 1214.51 L1476.85 1214.51 L1476.27 1214.51 L1475.68 1214.51 L1475.09 1214.51 L1474.51 1214.51 L1473.92 1214.51 L1473.33 1214.51 L1472.75 1214.51 L1472.16 1214.51 L1471.57 1214.51 L1470.99 1214.51 L1470.4 1214.51 L1469.82 1214.51 L1469.23 1214.51 L1468.64 1214.51 L1468.06 1214.51 L1467.47 1214.51 L1466.88 1214.51 L1466.3 1214.51 L1465.71 1214.51 L1465.12 1214.51 L1464.54 1214.51 L1463.95 1214.51 L1463.37 1214.51 L1462.78 1214.51 L1462.19 1214.51 L1461.61 1214.51 L1461.02 1214.51 L1460.43 1214.51 L1459.85 1214.51 L1459.26 1214.51 L1458.67 1214.51 L1458.09 1214.51 L1457.5 1214.51 L1456.91 1214.51 L1456.33 1214.51 L1455.74 1214.51 L1455.16 1214.51 L1454.57 1214.51 L1453.98 1214.51 L1453.4 1214.51 L1452.81 1214.51 L1452.22 1214.51 L1451.64 1214.51 L1451.05 1214.51 L1450.46 1214.51 L1449.88 1214.51 L1449.29 1214.51 L1448.7 1214.51 L1448.12 1214.51 L1447.53 1214.51 L1446.95 1214.51 L1446.36 1214.51 L1445.77 1214.51 L1445.19 1214.51 L1444.6 1214.51 L1444.01 1214.51 L1443.43 1214.51 L1442.84 1214.51 L1442.25 1214.51 L1441.67 1214.51 L1441.08 1214.51 L1440.5 1214.51 L1439.91 1214.51 L1439.32 1214.51 L1438.74 1214.51 L1438.15 1214.51 L1437.56 1214.51 L1436.98 1214.51 L1436.39 1214.51 L1435.8 1214.51 L1435.22 1214.51 L1434.63 1214.51 L1434.04 1214.51 L1433.46 1214.51 L1432.87 1214.51 L1432.29 1214.51 L1431.7 1214.51 L1431.11 1214.51 L1430.53 1214.51 L1429.94 1214.51 L1429.35 1214.51 L1428.77 1214.51 L1428.18 1214.51 L1427.59 1214.51 L1427.01 1214.51 L1426.42 1214.51 L1425.83 1214.51 L1425.25 1214.51 L1424.66 1214.51 L1424.08 1214.51 L1423.49 1214.51 L1422.9 1214.51 L1422.32 1214.51 L1421.73 1214.51 L1421.14 1214.51 L1420.56 1214.51 L1419.97 1214.51 L1419.38 1214.51 L1418.8 1214.51 L1418.21 1214.51 L1417.63 1214.51 L1417.04 1214.51 L1416.45 1214.51 L1415.87 1214.51 L1415.28 1214.51 L1414.69 1214.51 L1414.11 1214.51 L1413.52 1214.51 L1412.93 1214.51 L1412.35 1214.51 L1411.76 1214.51 L1411.17 1214.51 L1410.59 1214.51 L1410 1214.51 L1409.42 1214.51 L1408.83 1214.51 L1408.24 1214.51 L1407.66 1214.51 L1407.07 1214.51 L1406.48 1214.51 L1405.9 1214.51 L1405.31 1214.51 L1404.72 1214.51 L1404.14 1214.51 L1403.55 1214.51 L1402.96 1214.51 L1402.38 1214.51 L1401.79 1214.51 L1401.21 1214.51 L1400.62 1214.51 L1400.03 1214.51 L1399.45 1214.51 L1398.86 1214.51 L1398.27 1214.51 L1397.69 1214.51 L1397.1 1214.51 L1396.51 1214.51 L1395.93 1214.51 L1395.34 1214.51 L1394.75 1214.51 L1394.17 1214.51 L1393.58 1214.51 L1393 1214.51 L1392.41 1214.51 L1391.82 1214.51 L1391.24 1214.51 L1390.65 1214.51 L1390.06 1214.51 L1389.48 1214.51 L1388.89 1214.51 L1388.3 1214.51 L1387.72 1214.51 L1387.13 1214.51 L1386.55 1214.51 L1385.96 1214.51 L1385.37 1214.51 L1384.79 1214.51 L1384.2 1214.51 L1383.61 1214.51 L1383.03 1214.51 L1382.44 1214.51 L1381.85 1214.51 L1381.27 1214.51 L1380.68 1214.51 L1380.09 1214.51 L1379.51 1214.51 L1378.92 1214.51 L1378.34 1214.51 L1377.75 1214.51 L1377.16 1214.51 L1376.58 1214.51 L1375.99 1214.51 L1375.4 1214.51 L1374.82 1214.51 L1374.23 1214.51 L1373.64 1214.51 L1373.06 1214.51 L1372.47 1214.51 L1371.88 1214.51 L1371.3 1214.51 L1370.71 1214.51 L1370.13 1214.51 L1369.54 1214.51 L1368.95 1214.51 L1368.37 1214.51 L1367.78 1214.51 L1367.19 1214.51 L1366.61 1214.51 L1366.02 1214.51 L1365.43 1214.51 L1364.85 1214.51 L1364.26 1214.51 L1363.68 1214.51 L1363.09 1214.51 L1362.5 1214.51 L1361.92 1214.51 L1361.33 1214.51 L1360.74 1214.51 L1360.16 1214.51 L1359.57 1214.51 L1358.98 1214.51 L1358.4 1214.51 L1357.81 1214.51 L1357.22 1214.51 L1356.64 1214.51 L1356.05 1214.51 L1355.47 1214.51 L1354.88 1214.51 L1354.29 1214.51 L1353.71 1214.51 L1353.12 1214.51 L1352.53 1214.51 L1351.95 1214.51 L1351.36 1214.51 L1350.77 1214.51 L1350.19 1214.51 L1349.6 1214.51 L1349.01 1214.51 L1348.43 1214.51 L1347.84 1214.51 L1347.26 1214.51 L1346.67 1214.51 L1346.08 1214.51 L1345.5 1214.51 L1344.91 1214.51 L1344.32 1214.51 L1343.74 1214.51 L1343.15 1214.51 L1342.56 1214.51 L1341.98 1214.51 L1341.39 1214.51 L1340.8 1214.51 L1340.22 1214.51 L1339.63 1214.51 L1339.05 1214.51 L1338.46 1214.51 L1337.87 1214.51 L1337.29 1214.51 L1336.7 1214.51 L1336.11 1214.51 L1335.53 1214.51 L1334.94 1214.51 L1334.35 1214.51 L1333.77 1214.51 L1333.18 1214.51 L1332.6 1214.51 L1332.01 1214.51 L1331.42 1214.51 L1330.84 1214.51 L1330.25 1214.51 L1329.66 1214.51 L1329.08 1214.51 L1328.49 1214.51 L1327.9 1214.51 L1327.32 1214.51 L1326.73 1214.51 L1326.14 1214.51 L1325.56 1214.51 L1324.97 1214.51 L1324.39 1214.51 L1323.8 1214.51 L1323.21 1214.51 L1322.63 1214.51 L1322.04 1214.51 L1321.45 1214.51 L1320.87 1214.51 L1320.28 1214.51 L1319.69 1214.51 L1319.11 1214.51 L1318.52 1214.51 L1317.93 1214.51 L1317.35 1214.51 L1316.76 1214.51 L1316.18 1214.51 L1315.59 1214.51 L1315 1214.51 L1314.42 1214.51 L1313.83 1214.51 L1313.24 1214.51 L1312.66 1214.51 L1312.07 1214.51 L1311.48 1214.51 L1310.9 1214.51 L1310.31 1214.51 L1309.73 1214.51 L1309.14 1214.51 L1308.55 1214.51 L1307.97 1214.51 L1307.38 1214.51 L1306.79 1214.51 L1306.21 1214.51 L1305.62 1214.51 L1305.03 1214.51 L1304.45 1214.51 L1303.86 1214.51 L1303.27 1214.51 L1302.69 1214.51 L1302.1 1214.51 L1301.52 1214.51 L1300.93 1214.51 L1300.34 1214.51 L1299.76 1214.51 L1299.17 1214.51 L1298.58 1214.51 L1298 1214.51 L1297.41 1214.51 L1296.82 1214.51 L1296.24 1214.51 L1295.65 1214.51 L1295.06 1214.51 L1294.48 1214.51 L1293.89 1214.51 L1293.31 1214.51 L1292.72 1214.51 L1292.13 1214.51 L1291.55 1214.51 L1290.96 1214.51 L1290.37 1214.51 L1289.79 1214.51 L1289.2 1214.51 L1288.61 1214.51 L1288.03 1214.51 L1287.44 1214.51 L1286.86 1214.51 L1286.27 1214.51 L1285.68 1214.51 L1285.1 1214.51 L1284.51 1214.51 L1283.92 1214.51 L1283.34 1214.51 L1282.75 1214.51 L1282.16 1214.51 L1281.58 1214.51 L1280.99 1214.51 L1280.4 1214.51 L1279.82 1214.51 L1279.23 1214.51 L1278.65 1214.51 L1278.06 1214.51 L1277.47 1214.51 L1276.89 1214.51 L1276.3 1214.51 L1275.71 1214.51 L1275.13 1214.51 L1274.54 1214.51 L1273.95 1214.51 L1273.37 1214.51 L1272.78 1214.51 L1272.19 1214.51 L1271.61 1214.51 L1271.02 1214.51 L1270.44 1214.51 L1269.85 1214.51 L1269.26 1214.51 L1268.68 1214.51 L1268.09 1214.51 L1267.5 1214.51 L1266.92 1214.51 L1266.33 1214.51 L1265.74 1214.51 L1265.16 1214.51 L1264.57 1214.51 L1263.98 1214.51 L1263.4 1214.51 L1262.81 1214.51 L1262.23 1214.51 L1261.64 1214.51 L1261.05 1214.51 L1260.47 1214.51 L1259.88 1214.51 L1259.29 1214.51 L1258.71 1214.51 L1258.12 1214.51 L1257.53 1214.51 L1256.95 1214.51 L1256.36 1214.51 L1255.78 1214.51 L1255.19 1214.51 L1254.6 1214.51 L1254.02 1214.51 L1253.43 1214.51 L1252.84 1214.51 L1252.26 1214.51 L1251.67 1214.51 L1251.08 1214.51 L1250.5 1214.51 L1249.91 1214.51 L1249.32 1214.51 L1248.74 1214.51 L1248.15 1214.51 L1247.57 1214.51 L1246.98 1214.51 L1246.39 1214.51 L1245.81 1214.51 L1245.22 1214.51 L1244.63 1214.51 L1244.05 1214.51 L1243.46 1214.51 L1242.87 1214.51 L1242.29 1214.51 L1241.7 1214.51 L1241.11 1214.51 L1240.53 1214.51 L1239.94 1214.51 L1239.36 1214.51 L1238.77 1214.51 L1238.18 1214.51 L1237.6 1214.51 L1237.01 1214.51 L1236.42 1214.51 L1235.84 1214.51 L1235.25 1214.51 L1234.66 1214.51 L1234.08 1214.51 L1233.49 1214.51 L1232.91 1214.51 L1232.32 1214.51 L1231.73 1214.51 L1231.15 1214.51 L1230.56 1214.51 L1229.97 1214.51 L1229.39 1214.51 L1228.8 1214.51 L1228.21 1214.51 L1227.63 1214.51 L1227.04 1214.51 L1226.45 1214.51 L1225.87 1214.51 L1225.28 1214.51 L1224.7 1214.51 L1224.11 1214.51 L1223.52 1214.51 L1222.94 1214.51 L1222.35 1214.51 L1221.76 1214.51 L1221.18 1214.51 L1220.59 1214.51 L1220 1214.51 L1219.42 1214.51 L1218.83 1214.51 L1218.24 1214.51 L1217.66 1214.51 L1217.07 1214.51 L1216.49 1214.51 L1215.9 1214.51 L1215.31 1214.51 L1214.73 1214.51 L1214.14 1214.51 L1213.55 1214.51 L1212.97 1214.51 L1212.38 1214.51 L1211.79 1214.51 L1211.21 1214.51 L1210.62 1214.51 L1210.03 1214.51 L1209.45 1214.51 L1208.86 1214.51 L1208.28 1214.51 L1207.69 1214.51 L1207.1 1214.51 L1206.52 1214.51 L1205.93 1214.51 L1205.34 1214.51 L1204.76 1214.51 L1204.17 1214.51 L1203.58 1214.51 L1203 1214.51 L1202.41 1214.51 L1201.83 1214.51 L1201.24 1214.51 L1200.65 1214.51 L1200.07 1214.51 L1199.48 1214.51 L1198.89 1214.51 L1198.31 1214.51 L1197.72 1214.51 L1197.13 1214.51 L1196.55 1214.51 L1195.96 1214.51 L1195.37 1214.51 L1194.79 1214.51 L1194.2 1214.51 L1193.62 1214.51 L1193.03 1214.51 L1192.44 1214.51 L1191.86 1214.51 L1191.27 1214.51 L1190.68 1214.51 L1190.1 1214.51 L1189.51 1214.51 L1188.92 1214.51 L1188.34 1214.51 L1187.75 1214.51 L1187.16 1214.51 L1186.58 1214.51 L1185.99 1214.51 L1185.41 1214.51 L1184.82 1214.51 L1184.23 1214.51 L1183.65 1214.51 L1183.06 1214.51 L1182.47 1214.51 L1181.89 1214.51 L1181.3 1214.51 L1180.71 1214.51 L1180.13 1214.51 L1179.54 1214.51 L1178.96 1214.51 L1178.37 1214.51 L1177.78 1214.51 L1177.2 1214.51 L1176.61 1214.51 L1176.02 1214.51 L1175.44 1214.51 L1174.85 1214.51 L1174.26 1214.51 L1173.68 1214.51 L1173.09 1214.51 L1172.5 1214.51 L1171.92 1214.51 L1171.33 1214.51 L1170.75 1214.51 L1170.16 1214.51 L1169.57 1214.51 L1168.99 1214.51 L1168.4 1214.51 L1167.81 1214.51 L1167.23 1214.51 L1166.64 1214.51 L1166.05 1214.51 L1165.47 1214.51 L1164.88 1214.51 L1164.29 1214.51 L1163.71 1214.51 L1163.12 1214.51 L1162.54 1214.51 L1161.95 1214.51 L1161.36 1214.51 L1160.78 1214.51 L1160.19 1214.51 L1159.6 1214.51 L1159.02 1214.51 L1158.43 1214.51 L1157.84 1214.51 L1157.26 1214.51 L1156.67 1214.51 L1156.09 1214.51 L1155.5 1214.51 L1154.91 1214.51 L1154.33 1214.51 L1153.74 1214.51 L1153.15 1214.51 L1152.57 1214.51 L1151.98 1214.51 L1151.39 1214.51 L1150.81 1214.51 L1150.22 1214.51 L1149.63 1214.51 L1149.05 1214.51 L1148.46 1214.51 L1147.88 1214.51 L1147.29 1214.51 L1146.7 1214.51 L1146.12 1214.51 L1145.53 1214.51 L1144.94 1214.51 L1144.36 1214.51 L1143.77 1214.51 L1143.18 1214.51 L1142.6 1214.51 L1142.01 1214.51 L1141.42 1214.51 L1140.84 1214.51 L1140.25 1214.51 L1139.67 1214.51 L1139.08 1214.51 L1138.49 1214.51 L1137.91 1214.51 L1137.32 1214.51 L1136.73 1214.51 L1136.15 1214.51 L1135.56 1214.51 L1134.97 1214.51 L1134.39 1214.51 L1133.8 1214.51 L1133.21 1214.51 L1132.63 1214.51 L1132.04 1214.51 L1131.46 1214.51 L1130.87 1214.51 L1130.28 1214.51 L1129.7 1214.51 L1129.11 1214.51 L1128.52 1214.51 L1127.94 1214.51 L1127.35 1214.51 L1126.76 1214.51 L1126.18 1214.51 L1125.59 1214.51 L1125.01 1214.51 L1124.42 1214.51 L1123.83 1214.51 L1123.25 1214.51 L1122.66 1214.51 L1122.07 1214.51 L1121.49 1214.51 L1120.9 1214.51 L1120.31 1214.51 L1119.73 1214.51 L1119.14 1214.51 L1118.55 1214.51 L1117.97 1214.51 L1117.38 1214.51 L1116.8 1214.51 L1116.21 1214.51 L1115.62 1214.51 L1115.04 1214.51 L1114.45 1214.51 L1113.86 1214.51 L1113.28 1214.51 L1112.69 1214.51 L1112.1 1214.51 L1111.52 1214.51 L1110.93 1214.51 L1110.34 1214.51 L1109.76 1214.51 L1109.17 1214.51 L1108.59 1214.51 L1108 1214.51 L1107.41 1214.51 L1106.83 1214.51 L1106.24 1214.51 L1105.65 1214.51 L1105.07 1214.51 L1104.48 1214.51 L1103.89 1214.51 L1103.31 1214.51 L1102.72 1214.51 L1102.14 1214.51 L1101.55 1214.51 L1100.96 1214.51 L1100.38 1214.51 L1099.79 1214.51 L1099.2 1214.51 L1098.62 1214.51 L1098.03 1214.51 L1097.44 1214.51 L1096.86 1214.51 L1096.27 1214.51 L1095.68 1214.51 L1095.1 1214.51 L1094.51 1214.51 L1093.93 1214.51 L1093.34 1214.51 L1092.75 1214.51 L1092.17 1214.51 L1091.58 1214.51 L1090.99 1214.51 L1090.41 1214.51 L1089.82 1214.51 L1089.23 1214.51 L1088.65 1214.51 L1088.06 1214.51 L1087.47 1214.51 L1086.89 1214.51 L1086.3 1214.51 L1085.72 1214.51 L1085.13 1214.51 L1084.54 1214.51 L1083.96 1214.51 L1083.37 1214.51 L1082.78 1214.51 L1082.2 1214.51 L1081.61 1214.51 L1081.02 1214.51 L1080.44 1214.51 L1079.85 1214.51 L1079.26 1214.51 L1078.68 1214.51 L1078.09 1214.51 L1077.51 1214.51 L1076.92 1214.51 L1076.33 1214.51 L1075.75 1214.51 L1075.16 1214.51 L1074.57 1214.51 L1073.99 1214.51 L1073.4 1214.51 L1072.81 1214.51 L1072.23 1214.51 L1071.64 1214.51 L1071.06 1214.51 L1070.47 1214.51 L1069.88 1214.51 L1069.3 1214.51 L1068.71 1214.51 L1068.12 1214.51 L1067.54 1214.51 L1066.95 1214.51 L1066.36 1214.51 L1065.78 1214.51 L1065.19 1214.51 L1064.6 1214.51 L1064.02 1214.51 L1063.43 1214.51 L1062.85 1214.51 L1062.26 1214.51 L1061.67 1214.51 L1061.09 1214.51 L1060.5 1214.51 L1059.91 1214.51 L1059.33 1214.51 L1058.74 1214.51 L1058.15 1214.51 L1057.57 1214.51 L1056.98 1214.51 L1056.39 1214.51 L1055.81 1214.51 L1055.22 1214.51 L1054.64 1214.51 L1054.05 1214.51 L1053.46 1214.51 L1052.88 1214.51 L1052.29 1214.51 L1051.7 1214.51 L1051.12 1214.51 L1050.53 1214.51 L1049.94 1214.51 L1049.36 1214.51 L1048.77 1214.51 L1048.19 1214.51 L1047.6 1214.51 L1047.01 1214.51 L1046.43 1214.51 L1045.84 1214.51 L1045.25 1214.51 L1044.67 1214.51 L1044.08 1214.51 L1043.49 1214.51 L1042.91 1214.51 L1042.32 1214.51 L1041.73 1214.51 L1041.15 1214.51 L1040.56 1214.51 L1039.98 1214.51 L1039.39 1214.51 L1038.8 1214.51 L1038.22 1214.51 L1037.63 1214.51 L1037.04 1214.51 L1036.46 1214.51 L1035.87 1214.51 L1035.28 1214.51 L1034.7 1214.51 L1034.11 1214.51 L1033.52 1214.51 L1032.94 1214.51 L1032.35 1214.51 L1031.77 1214.51 L1031.18 1214.51 L1030.59 1214.51 L1030.01 1214.51 L1029.42 1214.51 L1028.83 1214.51 L1028.25 1214.51 L1027.66 1214.51 L1027.07 1214.51 L1026.49 1214.51 L1025.9 1214.51 L1025.32 1214.51 L1024.73 1214.51 L1024.14 1214.51 L1023.56 1214.51 L1022.97 1214.51 L1022.38 1214.51 L1021.8 1214.51 L1021.21 1214.51 L1020.62 1214.51 L1020.04 1214.51 L1019.45 1214.51 L1018.86 1214.51 L1018.28 1214.51 L1017.69 1214.51 L1017.11 1214.51 L1016.52 1214.51 L1015.93 1214.51 L1015.35 1214.51 L1014.76 1214.51 L1014.17 1214.51 L1013.59 1214.51 L1013 1214.51 L1012.41 1214.51 L1011.83 1214.51 L1011.24 1214.51 L1010.65 1214.51 L1010.07 1214.51 L1009.48 1214.51 L1008.9 1214.51 L1008.31 1214.51 L1007.72 1214.51 L1007.14 1214.51 L1006.55 1214.51 L1005.96 1214.51 L1005.38 1214.51 L1004.79 1214.51 L1004.2 1214.51 L1003.62 1214.51 L1003.03 1214.51 L1002.44 1214.51 L1001.86 1214.51 L1001.27 1214.51 L1000.69 1214.51 L1000.1 1214.51 L999.513 1214.51 L998.926 1214.51 L998.34 1214.51 L997.754 1214.51 L997.167 1214.51 L996.581 1214.51 L995.994 1214.51 L995.408 1214.51 L994.822 1214.51 L994.235 1214.51 L993.649 1214.51 L993.062 1214.51 L992.476 1214.51 L991.889 1214.51 L991.303 1214.51 L990.717 1214.51 L990.13 1214.51 L989.544 1214.51 L988.957 1214.51 L988.371 1214.51 L987.785 1214.51 L987.198 1214.51 L986.612 1214.51 L986.025 1214.51  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.91 986.612,1214.91 987.198,1214.91 987.785,1214.91 988.371,1214.91 988.957,1214.91 989.544,1214.91 990.13,1214.91 990.717,1214.91 991.303,1214.91 991.889,1214.91 992.476,1214.91 993.062,1214.91 993.649,1214.91 994.235,1214.91 994.822,1214.91 995.408,1214.91 995.994,1214.91 996.581,1214.91 997.167,1214.91 997.754,1214.91 998.34,1214.91 998.926,1214.91 999.513,1214.91 1000.1,1214.91 1000.69,1214.91 1001.27,1214.91 1001.86,1214.91 1002.44,1214.91 1003.03,1214.91 1003.62,1214.91 1004.2,1214.91 1004.79,1214.91 1005.38,1214.91 1005.96,1214.91 1006.55,1214.91 1007.14,1214.91 1007.72,1214.91 1008.31,1214.91 1008.9,1214.91 1009.48,1214.91 1010.07,1214.91 1010.65,1214.91 1011.24,1214.91 1011.83,1214.91 1012.41,1214.91 1013,1214.91 1013.59,1214.91 1014.17,1214.91 1014.76,1214.91 1015.35,1214.91 1015.93,1214.91 1016.52,1214.91 1017.11,1214.91 1017.69,1214.91 1018.28,1214.91 1018.86,1214.91 1019.45,1214.91 1020.04,1214.91 1020.62,1214.91 1021.21,1214.91 1021.8,1214.91 1022.38,1214.91 1022.97,1214.91 1023.56,1214.91 1024.14,1214.91 1024.73,1214.91 1025.32,1214.91 1025.9,1214.91 1026.49,1214.91 1027.07,1214.91 1027.66,1214.91 1028.25,1214.91 1028.83,1214.91 1029.42,1214.91 1030.01,1214.91 1030.59,1214.91 1031.18,1214.91 1031.77,1214.91 1032.35,1214.91 1032.94,1214.91 1033.52,1214.91 1034.11,1214.91 1034.7,1214.91 1035.28,1214.91 1035.87,1214.91 1036.46,1214.91 1037.04,1214.91 1037.63,1214.91 1038.22,1214.91 1038.8,1214.91 1039.39,1214.91 1039.98,1214.91 1040.56,1214.91 1041.15,1214.91 1041.73,1214.91 1042.32,1214.91 1042.91,1214.91 1043.49,1214.91 1044.08,1214.91 1044.67,1214.91 1045.25,1214.91 1045.84,1214.91 1046.43,1214.91 1047.01,1214.91 1047.6,1214.91 1048.19,1214.91 1048.77,1214.91 1049.36,1214.91 1049.94,1214.91 1050.53,1214.91 1051.12,1214.91 1051.7,1214.91 1052.29,1214.91 1052.88,1214.91 1053.46,1214.91 1054.05,1214.91 1054.64,1214.91 1055.22,1214.91 1055.81,1214.91 1056.39,1214.91 1056.98,1214.91 1057.57,1214.91 1058.15,1214.91 1058.74,1214.91 1059.33,1214.91 1059.91,1214.91 1060.5,1214.91 1061.09,1214.91 1061.67,1214.91 1062.26,1214.91 1062.85,1214.91 1063.43,1214.91 1064.02,1214.91 1064.6,1214.91 1065.19,1214.91 1065.78,1214.91 1066.36,1214.91 1066.95,1214.91 1067.54,1214.91 1068.12,1214.91 1068.71,1214.91 1069.3,1214.91 1069.88,1214.91 1070.47,1214.91 1071.06,1214.91 1071.64,1214.91 1072.23,1214.91 1072.81,1214.91 1073.4,1214.91 1073.99,1214.91 1074.57,1214.91 1075.16,1214.91 1075.75,1214.91 1076.33,1214.91 1076.92,1214.91 1077.51,1214.91 1078.09,1214.91 1078.68,1214.91 1079.26,1214.91 1079.85,1214.91 1080.44,1214.91 1081.02,1214.91 1081.61,1214.91 1082.2,1214.91 1082.78,1214.91 1083.37,1214.91 1083.96,1214.91 1084.54,1214.91 1085.13,1214.91 1085.72,1214.91 1086.3,1214.91 1086.89,1214.91 1087.47,1214.91 1088.06,1214.91 1088.65,1214.91 1089.23,1214.91 1089.82,1214.91 1090.41,1214.91 1090.99,1214.91 1091.58,1214.91 1092.17,1214.91 1092.75,1214.91 1093.34,1214.91 1093.93,1214.91 1094.51,1214.91 1095.1,1214.91 1095.68,1214.91 1096.27,1214.91 1096.86,1214.91 1097.44,1214.91 1098.03,1214.91 1098.62,1214.91 1099.2,1214.91 1099.79,1214.91 1100.38,1214.91 1100.96,1214.91 1101.55,1214.91 1102.14,1214.91 1102.72,1214.91 1103.31,1214.91 1103.89,1214.91 1104.48,1214.91 1105.07,1214.91 1105.65,1214.91 1106.24,1214.91 1106.83,1214.91 1107.41,1214.91 1108,1214.91 1108.59,1214.91 1109.17,1214.91 1109.76,1214.91 1110.34,1214.91 1110.93,1214.91 1111.52,1214.91 1112.1,1214.91 1112.69,1214.91 1113.28,1214.91 1113.86,1214.91 1114.45,1214.91 1115.04,1214.91 1115.62,1214.91 1116.21,1214.91 1116.8,1214.91 1117.38,1214.91 1117.97,1214.91 1118.55,1214.91 1119.14,1214.91 1119.73,1214.91 1120.31,1214.91 1120.9,1214.91 1121.49,1214.91 1122.07,1214.91 1122.66,1214.91 1123.25,1214.91 1123.83,1214.91 1124.42,1214.91 1125.01,1214.91 1125.59,1214.91 1126.18,1214.91 1126.76,1214.91 1127.35,1214.91 1127.94,1214.91 1128.52,1214.91 1129.11,1214.91 1129.7,1214.91 1130.28,1214.91 1130.87,1214.91 1131.46,1214.91 1132.04,1214.91 1132.63,1214.91 1133.21,1214.91 1133.8,1214.91 1134.39,1214.91 1134.97,1214.91 1135.56,1214.91 1136.15,1214.91 1136.73,1214.91 1137.32,1214.91 1137.91,1214.91 1138.49,1214.91 1139.08,1214.91 1139.67,1214.91 1140.25,1214.91 1140.84,1214.91 1141.42,1214.91 1142.01,1214.91 1142.6,1214.91 1143.18,1214.91 1143.77,1214.91 1144.36,1214.91 1144.94,1214.91 1145.53,1214.91 1146.12,1214.91 1146.7,1214.91 1147.29,1214.91 1147.88,1214.91 1148.46,1214.91 1149.05,1214.91 1149.63,1214.91 1150.22,1214.91 1150.81,1214.91 1151.39,1214.91 1151.98,1214.91 1152.57,1214.91 1153.15,1214.91 1153.74,1214.91 1154.33,1214.91 1154.91,1214.91 1155.5,1214.91 1156.09,1214.91 1156.67,1214.91 1157.26,1214.91 1157.84,1214.91 1158.43,1214.91 1159.02,1214.91 1159.6,1214.91 1160.19,1214.91 1160.78,1214.91 1161.36,1214.91 1161.95,1214.91 1162.54,1214.91 1163.12,1214.91 1163.71,1214.91 1164.29,1214.91 1164.88,1214.91 1165.47,1214.91 1166.05,1214.91 1166.64,1214.91 1167.23,1214.91 1167.81,1214.91 1168.4,1214.91 1168.99,1214.91 1169.57,1214.91 1170.16,1214.91 1170.75,1214.91 1171.33,1214.91 1171.92,1214.91 1172.5,1214.91 1173.09,1214.91 1173.68,1214.91 1174.26,1214.91 1174.85,1214.91 1175.44,1214.91 1176.02,1214.91 1176.61,1214.91 1177.2,1214.91 1177.78,1214.91 1178.37,1214.91 1178.96,1214.91 1179.54,1214.91 1180.13,1214.91 1180.71,1214.91 1181.3,1214.91 1181.89,1214.91 1182.47,1214.91 1183.06,1214.91 1183.65,1214.91 1184.23,1214.91 1184.82,1214.91 1185.41,1214.91 1185.99,1214.91 1186.58,1214.91 1187.16,1214.91 1187.75,1214.91 1188.34,1214.91 1188.92,1214.91 1189.51,1214.91 1190.1,1214.91 1190.68,1214.91 1191.27,1214.91 1191.86,1214.91 1192.44,1214.91 1193.03,1214.91 1193.62,1214.91 1194.2,1214.91 1194.79,1214.91 1195.37,1214.91 1195.96,1214.91 1196.55,1214.91 1197.13,1214.91 1197.72,1214.91 1198.31,1214.91 1198.89,1214.91 1199.48,1214.91 1200.07,1214.91 1200.65,1214.91 1201.24,1214.91 1201.83,1214.91 1202.41,1214.91 1203,1214.91 1203.58,1214.91 1204.17,1214.91 1204.76,1214.91 1205.34,1214.91 1205.93,1214.91 1206.52,1214.91 1207.1,1214.91 1207.69,1214.91 1208.28,1214.91 1208.86,1214.91 1209.45,1214.91 1210.03,1214.91 1210.62,1214.91 1211.21,1214.91 1211.79,1214.91 1212.38,1214.91 1212.97,1214.91 1213.55,1214.91 1214.14,1214.91 1214.73,1214.91 1215.31,1214.91 1215.9,1214.91 1216.49,1214.91 1217.07,1214.91 1217.66,1214.91 1218.24,1214.91 1218.83,1214.91 1219.42,1214.91 1220,1214.91 1220.59,1214.91 1221.18,1214.91 1221.76,1214.91 1222.35,1214.91 1222.94,1214.91 1223.52,1214.91 1224.11,1214.91 1224.7,1214.91 1225.28,1214.91 1225.87,1214.91 1226.45,1214.91 1227.04,1214.91 1227.63,1214.91 1228.21,1214.91 1228.8,1214.91 1229.39,1214.91 1229.97,1214.91 1230.56,1214.91 1231.15,1214.91 1231.73,1214.91 1232.32,1214.91 1232.91,1214.91 1233.49,1214.91 1234.08,1214.91 1234.66,1214.91 1235.25,1214.91 1235.84,1214.91 1236.42,1214.91 1237.01,1214.91 1237.6,1214.91 1238.18,1214.91 1238.77,1214.91 1239.36,1214.91 1239.94,1214.91 1240.53,1214.91 1241.11,1214.91 1241.7,1214.91 1242.29,1214.91 1242.87,1214.91 1243.46,1214.91 1244.05,1214.91 1244.63,1214.91 1245.22,1214.91 1245.81,1214.91 1246.39,1214.91 1246.98,1214.91 1247.57,1214.91 1248.15,1214.91 1248.74,1214.91 1249.32,1214.91 1249.91,1214.91 1250.5,1214.91 1251.08,1214.91 1251.67,1214.91 1252.26,1214.91 1252.84,1214.91 1253.43,1214.91 1254.02,1214.91 1254.6,1214.91 1255.19,1214.91 1255.78,1214.91 1256.36,1214.91 1256.95,1214.91 1257.53,1214.91 1258.12,1214.91 1258.71,1214.91 1259.29,1214.91 1259.88,1214.91 1260.47,1214.91 1261.05,1214.91 1261.64,1214.91 1262.23,1214.91 1262.81,1214.91 1263.4,1214.91 1263.98,1214.91 1264.57,1214.91 1265.16,1214.91 1265.74,1214.91 1266.33,1214.91 1266.92,1214.91 1267.5,1214.91 1268.09,1214.91 1268.68,1214.91 1269.26,1214.91 1269.85,1214.91 1270.44,1214.91 1271.02,1214.91 1271.61,1214.91 1272.19,1214.91 1272.78,1214.91 1273.37,1214.91 1273.95,1214.91 1274.54,1214.91 1275.13,1214.91 1275.71,1214.91 1276.3,1214.91 1276.89,1214.91 1277.47,1214.91 1278.06,1214.91 1278.65,1214.91 1279.23,1214.91 1279.82,1214.91 1280.4,1214.91 1280.99,1214.91 1281.58,1214.91 1282.16,1214.91 1282.75,1214.91 1283.34,1214.91 1283.92,1214.91 1284.51,1214.91 1285.1,1214.91 1285.68,1214.91 1286.27,1214.91 1286.86,1214.91 1287.44,1214.91 1288.03,1214.91 1288.61,1214.91 1289.2,1214.91 1289.79,1214.91 1290.37,1214.91 1290.96,1214.91 1291.55,1214.91 1292.13,1214.91 1292.72,1214.91 1293.31,1214.91 1293.89,1214.91 1294.48,1214.91 1295.06,1214.91 1295.65,1214.91 1296.24,1214.91 1296.82,1214.91 1297.41,1214.91 1298,1214.91 1298.58,1214.91 1299.17,1214.91 1299.76,1214.91 1300.34,1214.91 1300.93,1214.91 1301.52,1214.91 1302.1,1214.91 1302.69,1214.91 1303.27,1214.91 1303.86,1214.91 1304.45,1214.91 1305.03,1214.91 1305.62,1214.91 1306.21,1214.91 1306.79,1214.91 1307.38,1214.91 1307.97,1214.91 1308.55,1214.91 1309.14,1214.91 1309.73,1214.91 1310.31,1214.91 1310.9,1214.91 1311.48,1214.91 1312.07,1214.91 1312.66,1214.91 1313.24,1214.91 1313.83,1214.91 1314.42,1214.91 1315,1214.91 1315.59,1214.91 1316.18,1214.91 1316.76,1214.91 1317.35,1214.91 1317.93,1214.91 1318.52,1214.91 1319.11,1214.91 1319.69,1214.91 1320.28,1214.91 1320.87,1214.91 1321.45,1214.91 1322.04,1214.91 1322.63,1214.91 1323.21,1214.91 1323.8,1214.91 1324.39,1214.91 1324.97,1214.91 1325.56,1214.91 1326.14,1214.91 1326.73,1214.91 1327.32,1214.91 1327.9,1214.91 1328.49,1214.91 1329.08,1214.91 1329.66,1214.91 1330.25,1214.91 1330.84,1214.91 1331.42,1214.91 1332.01,1214.91 1332.6,1214.91 1333.18,1214.91 1333.77,1214.91 1334.35,1214.91 1334.94,1214.91 1335.53,1214.91 1336.11,1214.91 1336.7,1214.91 1337.29,1214.91 1337.87,1214.91 1338.46,1214.91 1339.05,1214.91 1339.63,1214.91 1340.22,1214.91 1340.8,1214.91 1341.39,1214.91 1341.98,1214.91 1342.56,1214.91 1343.15,1214.91 1343.74,1214.91 1344.32,1214.91 1344.91,1214.91 1345.5,1214.91 1346.08,1214.91 1346.67,1214.91 1347.26,1214.91 1347.84,1214.91 1348.43,1214.91 1349.01,1214.91 1349.6,1214.91 1350.19,1214.91 1350.77,1214.91 1351.36,1214.91 1351.95,1214.91 1352.53,1214.91 1353.12,1214.91 1353.71,1214.91 1354.29,1214.91 1354.88,1214.91 1355.47,1214.91 1356.05,1214.91 1356.64,1214.91 1357.22,1214.91 1357.81,1214.91 1358.4,1214.91 1358.98,1214.91 1359.57,1214.91 1360.16,1214.91 1360.74,1214.91 1361.33,1214.91 1361.92,1214.91 1362.5,1214.91 1363.09,1214.91 1363.68,1214.91 1364.26,1214.91 1364.85,1214.91 1365.43,1214.91 1366.02,1214.91 1366.61,1214.91 1367.19,1214.91 1367.78,1214.91 1368.37,1214.91 1368.95,1214.91 1369.54,1214.91 1370.13,1214.91 1370.71,1214.91 1371.3,1214.91 1371.88,1214.91 1372.47,1214.91 1373.06,1214.91 1373.64,1214.91 1374.23,1214.91 1374.82,1214.91 1375.4,1214.91 1375.99,1214.91 1376.58,1214.91 1377.16,1214.91 1377.75,1214.91 1378.34,1214.91 1378.92,1214.91 1379.51,1214.91 1380.09,1214.91 1380.68,1214.91 1381.27,1214.91 1381.85,1214.91 1382.44,1214.91 1383.03,1214.91 1383.61,1214.91 1384.2,1214.91 1384.79,1214.91 1385.37,1214.91 1385.96,1214.91 1386.55,1214.91 1387.13,1214.91 1387.72,1214.91 1388.3,1214.91 1388.89,1214.91 1389.48,1214.91 1390.06,1214.91 1390.65,1214.91 1391.24,1214.91 1391.82,1214.91 1392.41,1214.91 1393,1214.91 1393.58,1214.91 1394.17,1214.91 1394.75,1214.91 1395.34,1214.91 1395.93,1214.91 1396.51,1214.91 1397.1,1214.91 1397.69,1214.91 1398.27,1214.91 1398.86,1214.91 1399.45,1214.91 1400.03,1214.91 1400.62,1214.91 1401.21,1214.91 1401.79,1214.91 1402.38,1214.91 1402.96,1214.91 1403.55,1214.91 1404.14,1214.91 1404.72,1214.91 1405.31,1214.91 1405.9,1214.91 1406.48,1214.91 1407.07,1214.91 1407.66,1214.91 1408.24,1214.91 1408.83,1214.91 1409.42,1214.91 1410,1214.91 1410.59,1214.91 1411.17,1214.91 1411.76,1214.91 1412.35,1214.91 1412.93,1214.91 1413.52,1214.91 1414.11,1214.91 1414.69,1214.91 1415.28,1214.91 1415.87,1214.91 1416.45,1214.91 1417.04,1214.91 1417.63,1214.91 1418.21,1214.91 1418.8,1214.91 1419.38,1214.91 1419.97,1214.91 1420.56,1214.91 1421.14,1214.91 1421.73,1214.91 1422.32,1214.91 1422.9,1214.91 1423.49,1214.91 1424.08,1214.91 1424.66,1214.91 1425.25,1214.91 1425.83,1214.91 1426.42,1214.91 1427.01,1214.91 1427.59,1214.91 1428.18,1214.91 1428.77,1214.91 1429.35,1214.91 1429.94,1214.91 1430.53,1214.91 1431.11,1214.91 1431.7,1214.91 1432.29,1214.91 1432.87,1214.91 1433.46,1214.91 1434.04,1214.91 1434.63,1214.91 1435.22,1214.91 1435.8,1214.91 1436.39,1214.91 1436.98,1214.91 1437.56,1214.91 1438.15,1214.91 1438.74,1214.91 1439.32,1214.91 1439.91,1214.91 1440.5,1214.91 1441.08,1214.91 1441.67,1214.91 1442.25,1214.91 1442.84,1214.91 1443.43,1214.91 1444.01,1214.91 1444.6,1214.91 1445.19,1214.91 1445.77,1214.91 1446.36,1214.91 1446.95,1214.91 1447.53,1214.91 1448.12,1214.91 1448.7,1214.91 1449.29,1214.91 1449.88,1214.91 1450.46,1214.91 1451.05,1214.91 1451.64,1214.91 1452.22,1214.91 1452.81,1214.91 1453.4,1214.91 1453.98,1214.91 1454.57,1214.91 1455.16,1214.91 1455.74,1214.91 1456.33,1214.91 1456.91,1214.91 1457.5,1214.91 1458.09,1214.91 1458.67,1214.91 1459.26,1214.91 1459.85,1214.91 1460.43,1214.91 1461.02,1214.91 1461.61,1214.91 1462.19,1214.91 1462.78,1214.91 1463.37,1214.91 1463.95,1214.91 1464.54,1214.91 1465.12,1214.91 1465.71,1214.91 1466.3,1214.91 1466.88,1214.91 1467.47,1214.91 1468.06,1214.91 1468.64,1214.91 1469.23,1214.91 1469.82,1214.91 1470.4,1214.91 1470.99,1214.91 1471.57,1214.91 1472.16,1214.91 1472.75,1214.91 1473.33,1214.91 1473.92,1214.91 1474.51,1214.91 1475.09,1214.91 1475.68,1214.91 1476.27,1214.91 1476.85,1214.91 1477.44,1214.91 1478.03,1214.91 1478.61,1214.91 1479.2,1214.91 1479.78,1214.91 1480.37,1214.91 1480.96,1214.91 1481.54,1214.91 1482.13,1214.91 1482.72,1214.91 1483.3,1214.91 1483.89,1214.91 1484.48,1214.91 1485.06,1214.91 1485.65,1214.91 1486.24,1214.91 1486.82,1214.91 1487.41,1214.91 1487.99,1214.91 1488.58,1214.91 1489.17,1214.91 1489.75,1214.91 1490.34,1214.91 1490.93,1214.91 1491.51,1214.91 1492.1,1214.91 1492.69,1214.91 1493.27,1214.91 1493.86,1214.91 1494.45,1214.91 1495.03,1214.91 1495.62,1214.91 1496.2,1214.91 1496.79,1214.91 1497.38,1214.91 1497.96,1214.91 1498.55,1214.91 1499.14,1214.91 1499.72,1214.91 1500.31,1214.91 1500.9,1214.91 1501.48,1214.91 1502.07,1214.91 1502.65,1214.91 1503.24,1214.91 1503.83,1214.91 1504.41,1214.91 1505,1214.91 1505.59,1214.91 1506.17,1214.91 1506.76,1214.91 1507.35,1214.91 1507.93,1214.91 1508.52,1214.91 1509.11,1214.91 1509.69,1214.91 1510.28,1214.91 1510.86,1214.91 1511.45,1214.91 1512.04,1214.91 1512.62,1214.91 1513.21,1214.91 1513.8,1214.91 1514.38,1214.91 1514.97,1214.91 1515.56,1214.91 1516.14,1214.91 1516.73,1214.91 1517.32,1214.91 1517.9,1214.91 1518.49,1214.91 1519.07,1214.91 1519.66,1214.91 1520.25,1214.91 1520.83,1214.91 1521.42,1214.91 1522.01,1214.91 1522.59,1214.91 1523.18,1214.91 1523.77,1214.91 1524.35,1214.91 1524.94,1214.91 1525.52,1214.91 1526.11,1214.91 1526.7,1214.91 1527.28,1214.91 1527.87,1214.91 1528.46,1214.91 1529.04,1214.91 1529.63,1214.91 1530.22,1214.91 1530.8,1214.91 1531.39,1214.91 1531.98,1214.91 1532.56,1214.91 1533.15,1214.91 1533.73,1214.91 1534.32,1214.91 1534.91,1214.91 1535.49,1214.91 1536.08,1214.91 1536.67,1214.91 1537.25,1214.91 1537.84,1214.91 1538.43,1214.91 1539.01,1214.91 1539.6,1214.91 1540.19,1214.91 1540.77,1214.91 1541.36,1214.91 1541.94,1214.91 1542.53,1214.91 1543.12,1214.91 1543.7,1214.91 1544.29,1214.91 1544.88,1214.91 1545.46,1214.91 1546.05,1214.91 1546.64,1214.91 1547.22,1214.91 1547.81,1214.91 1548.4,1214.91 1548.98,1214.91 1549.57,1214.91 1550.15,1214.91 1550.74,1214.91 1551.33,1214.91 1551.91,1214.91 1552.5,1214.91 1553.09,1214.91 1553.67,1214.91 1554.26,1214.91 1554.85,1214.91 1555.43,1214.91 1556.02,1214.91 1556.6,1214.91 1557.19,1214.91 1557.78,1214.91 1558.36,1214.91 1558.95,1214.91 1559.54,1214.91 1560.12,1214.91 1560.71,1214.91 1561.3,1214.91 1561.88,1214.91 1562.47,1214.91 1563.06,1214.91 1563.64,1214.91 1564.23,1214.91 1564.81,1214.91 1565.4,1214.91 1565.99,1214.91 1566.57,1214.91 1567.16,1214.91 1567.75,1214.91 1568.33,1214.91 1568.92,1214.91 1569.51,1214.91 1570.09,1214.91 1570.68,1214.91 1571.27,1214.91 1571.85,1214.91 1572.44,1214.91 1573.02,1214.91 1573.61,1214.91 1574.2,1214.91 1574.78,1214.91 1575.37,1214.91 1575.96,1214.91 1576.54,1214.91 1577.13,1214.91 1577.72,1214.91 1578.3,1214.91 1578.89,1214.91 1579.47,1214.91 1580.06,1214.91 1580.65,1214.91 1581.23,1214.91 1581.82,1214.91 1582.41,1214.91 1582.99,1214.91 1583.58,1214.91 1584.17,1214.91 1584.75,1214.91 1585.34,1214.91 1585.93,1214.91 1586.51,1214.91 1587.1,1214.91 1587.68,1214.91 1588.27,1214.91 1588.86,1214.91 1589.44,1214.91 1590.03,1214.91 1590.62,1214.91 1591.2,1214.91 1591.79,1214.91 1592.38,1214.91 1592.96,1214.91 1593.55,1214.91 1594.14,1214.91 1594.72,1214.91 1595.31,1214.91 1595.89,1214.91 1596.48,1214.91 1597.07,1214.91 1597.65,1214.91 1598.24,1214.91 1598.83,1214.91 1599.41,1214.91 1600,1214.91 1600.59,1214.91 1601.17,1214.91 1601.76,1214.91 1602.34,1214.91 1602.93,1214.91 1603.52,1214.91 1604.1,1214.91 1604.69,1214.91 1605.28,1214.91 1605.86,1214.91 1606.45,1214.91 1607.04,1214.91 1607.62,1214.91 1608.21,1214.91 1608.8,1214.91 1609.38,1214.91 1609.97,1214.91 1610.55,1214.91 1611.14,1214.91 1611.73,1214.91 1612.31,1214.91 1612.9,1214.91 1613.49,1214.91 1614.07,1214.91 1614.66,1214.91 1615.25,1214.91 1615.83,1214.91 1616.42,1214.91 1617.01,1214.91 1617.59,1214.91 1618.18,1214.91 1618.76,1214.91 1619.35,1214.91 1619.94,1214.91 1620.52,1214.91 1621.11,1214.91 1621.7,1214.91 1622.28,1214.91 1622.87,1214.91 1623.46,1214.91 1624.04,1214.91 1624.63,1214.91 1625.22,1214.91 1625.8,1214.91 1626.39,1214.91 1626.97,1214.91 1627.56,1214.91 1628.15,1214.91 1628.73,1214.91 1629.32,1214.91 1629.91,1214.91 1630.49,1214.91 1631.08,1214.91 1631.67,1214.91 1632.25,1214.91 1632.84,1214.91 1633.42,1214.91 1634.01,1214.91 1634.6,1214.91 1635.18,1214.91 1635.77,1214.91 1636.36,1214.91 1636.94,1214.91 1637.53,1214.91 1638.12,1214.91 1638.7,1214.91 1639.29,1214.91 1639.88,1214.91 1640.46,1214.91 1641.05,1214.91 1641.63,1214.91 1642.22,1214.91 1642.81,1214.91 1643.39,1214.91 1643.98,1214.91 1644.57,1214.91 1645.15,1214.91 1645.74,1214.91 1646.33,1214.91 1646.91,1214.91 1647.5,1214.91 1648.09,1214.91 1648.67,1214.91 1649.26,1214.91 1649.84,1214.91 1650.43,1214.91 1651.02,1214.91 1651.6,1214.91 1652.19,1214.91 1652.78,1214.91 1653.36,1214.91 1653.95,1214.91 1654.54,1214.91 1655.12,1214.91 1655.71,1214.91 1656.29,1214.91 1656.88,1214.91 1657.47,1214.91 1658.05,1214.91 1658.64,1214.91 1659.23,1214.91 1659.81,1214.91 1660.4,1214.91 1660.99,1214.91 1661.57,1214.91 1662.16,1214.91 1662.75,1214.91 1663.33,1214.91 1663.92,1214.91 1664.5,1214.91 1665.09,1214.91 1665.68,1214.91 1666.26,1214.91 1666.85,1214.91 1667.44,1214.91 1668.02,1214.91 1668.61,1214.91 1669.2,1214.91 1669.78,1214.91 1670.37,1214.91 1670.96,1214.91 1671.54,1214.91 1672.13,1214.91 1672.71,1214.91 1673.3,1214.91 1673.89,1214.91 1674.47,1214.91 1675.06,1214.91 1675.65,1214.91 1676.23,1214.91 1676.82,1214.91 1677.41,1214.91 1677.99,1214.91 1678.58,1214.91 1679.17,1214.91 1679.75,1214.91 1680.34,1214.91 1680.92,1214.91 1681.51,1214.91 1682.1,1214.91 1682.68,1214.91 1683.27,1214.91 1683.86,1214.91 1684.44,1214.91 1685.03,1214.91 1685.62,1214.91 1686.2,1214.91 1686.79,1214.91 1687.37,1214.91 1687.96,1214.91 1688.55,1214.91 1689.13,1214.91 1689.72,1214.91 1690.31,1214.91 1690.89,1214.91 1691.48,1214.91 1692.07,1214.91 1692.65,1214.91 1693.24,1214.91 1693.83,1214.91 1694.41,1214.91 1695,1214.91 1695.58,1214.91 1696.17,1214.91 1696.76,1214.91 1697.34,1214.91 1697.93,1214.91 1698.52,1214.91 1699.1,1214.91 1699.69,1214.91 1700.28,1214.91 1700.86,1214.91 1701.45,1214.91 1702.04,1214.91 1702.62,1214.91 1703.21,1214.91 1703.79,1214.91 1704.38,1214.91 1704.97,1214.91 1705.55,1214.91 1706.14,1214.91 1706.73,1214.91 1707.31,1214.91 1707.9,1214.91 1708.49,1214.91 1709.07,1214.91 1709.66,1214.91 1710.24,1214.91 1710.83,1214.91 1711.42,1214.91 1712,1214.91 1712.59,1214.91 1713.18,1214.91 1713.76,1214.91 1714.35,1214.91 1714.94,1214.91 1715.52,1214.91 1716.11,1214.91 1716.7,1214.91 1717.28,1214.91 1717.87,1214.91 1718.45,1214.91 1719.04,1214.91 1719.63,1214.91 1720.21,1214.91 1720.8,1214.91 1721.39,1214.91 1721.97,1214.91 1722.56,1214.91 1723.15,1214.91 1723.73,1214.91 1724.32,1214.91 1724.91,1214.91 1725.49,1214.91 1726.08,1214.91 1726.66,1214.91 1727.25,1214.91 1727.84,1214.91 1728.42,1214.91 1729.01,1214.91 1729.6,1214.91 1730.18,1214.91 1730.77,1214.91 1731.36,1214.91 1731.94,1214.91 1732.53,1214.91 1733.11,1214.91 1733.7,1214.91 1734.29,1214.91 1734.87,1214.91 1735.46,1214.91 1736.05,1214.91 1736.63,1214.91 1737.22,1214.91 1737.81,1214.91 1738.39,1214.91 1738.98,1214.91 1739.57,1214.91 1740.15,1214.91 1740.74,1214.91 1741.32,1214.91 1741.91,1214.91 1742.5,1214.91 1743.08,1214.91 1743.67,1214.91 1744.26,1214.91 1744.84,1214.91 1745.43,1214.91 1746.02,1214.91 1746.6,1214.91 1747.19,1214.91 1747.78,1214.91 1748.36,1214.91 1748.95,1214.91 1749.53,1214.91 1750.12,1214.91 1750.71,1214.91 1751.29,1214.91 1751.88,1214.91 1752.47,1214.91 1753.05,1214.91 1753.64,1214.91 1754.23,1214.91 1754.81,1214.91 1755.4,1214.91 1755.99,1214.91 1756.57,1214.91 1757.16,1214.91 1757.74,1214.91 1758.33,1214.91 1758.92,1214.91 1759.5,1214.91 1760.09,1214.91 1760.68,1214.91 1761.26,1214.91 1761.85,1214.91 1762.44,1214.91 1763.02,1214.91 1763.61,1214.91 1764.19,1214.91 1764.78,1214.91 1765.37,1214.91 1765.95,1214.91 1766.54,1214.91 1767.13,1214.91 1767.71,1214.91 1768.3,1214.91 1768.89,1214.91 1769.47,1214.91 1770.06,1214.91 1770.65,1214.91 1771.23,1214.91 1771.82,1214.91 1772.4,1214.91 1772.99,1214.91 1773.58,1214.91 1774.16,1214.91 1774.75,1214.91 1775.34,1214.91 1775.92,1214.91 1776.51,1214.91 1777.1,1214.91 1777.68,1214.91 1778.27,1214.91 1778.86,1214.91 1779.44,1214.91 1780.03,1214.91 1780.61,1214.91 1781.2,1214.91 1781.79,1214.91 1782.37,1214.91 1782.96,1214.91 1783.55,1214.91 1784.13,1214.91 1784.72,1214.91 1785.31,1214.91 1785.89,1214.91 1786.48,1214.91 1787.06,1214.91 1787.65,1214.91 1788.24,1214.91 1788.82,1214.91 1789.41,1214.91 1790,1214.91 1790.58,1214.91 1791.17,1214.91 1791.76,1214.91 1792.34,1214.91 1792.93,1214.91 1793.52,1214.91 1794.1,1214.91 1794.69,1214.91 1795.27,1214.91 1795.86,1214.91 1796.45,1214.91 1797.03,1214.91 1797.62,1214.91 1798.21,1214.91 1798.79,1214.91 1799.38,1214.91 1799.97,1214.91 1800.55,1214.91 1801.14,1214.91 1801.73,1214.91 1802.31,1214.91 1802.9,1214.91 1803.48,1214.91 1804.07,1214.91 1804.66,1214.91 1805.24,1214.91 1805.83,1214.91 1806.42,1214.91 1807,1214.91 1807.59,1214.91 1808.18,1214.91 1808.76,1214.91 1809.35,1214.91 1809.94,1214.91 1810.52,1214.91 1811.11,1214.91 1811.69,1214.91 1812.28,1214.91 1812.87,1214.91 1813.45,1214.91 1814.04,1214.91 1814.63,1214.91 1815.21,1214.91 1815.8,1214.91 1816.39,1214.91 1816.97,1214.91 1817.56,1214.91 1818.14,1214.91 1818.73,1214.91 1819.32,1214.91 1819.9,1214.91 1820.49,1214.91 1821.08,1214.91 1821.66,1214.91 1822.25,1214.91 1822.84,1214.91 1823.42,1214.91 1824.01,1214.91 1824.6,1214.91 1825.18,1214.91 1825.77,1214.91 1826.35,1214.91 1826.94,1214.91 1827.53,1214.91 1828.11,1214.91 1828.7,1214.91 1829.29,1214.91 1829.87,1214.91 1830.46,1214.91 1831.05,1214.91 1831.63,1214.91 1832.22,1214.91 1832.81,1214.91 1833.39,1214.91 1833.98,1214.91 1834.56,1214.91 1835.15,1214.91 1835.74,1214.91 1836.32,1214.91 1836.91,1214.91 1837.5,1214.91 1838.08,1214.91 1838.67,1214.91 1839.26,1214.91 1839.84,1214.91 1840.43,1214.91 1841.01,1214.91 1841.6,1214.91 1842.19,1214.91 1842.77,1214.91 1843.36,1214.91 1843.95,1214.91 1844.53,1214.91 1845.12,1214.91 1845.71,1214.91 1846.29,1214.91 1846.88,1214.91 1847.47,1214.91 1848.05,1214.91 1848.64,1214.91 1849.22,1214.91 1849.81,1214.91 1850.4,1214.91 1850.98,1214.91 1851.57,1214.91 1852.16,1214.91 1852.74,1214.91 1853.33,1214.91 1853.92,1214.91 1854.5,1214.91 1855.09,1214.91 1855.68,1214.91 1856.26,1214.91 1856.85,1214.91 1857.43,1214.91 1858.02,1214.91 1858.61,1214.91 1859.19,1214.91 1859.78,1214.91 1860.37,1214.91 1860.95,1214.91 1861.54,1214.91 1862.13,1214.91 1862.71,1214.91 1863.3,1214.91 1863.88,1214.91 1864.47,1214.91 1865.06,1214.91 1865.64,1214.91 1866.23,1214.91 1866.82,1214.91 1867.4,1214.91 1867.99,1214.91 1868.58,1214.91 1869.16,1214.91 1869.75,1214.91 1870.34,1214.91 1870.92,1214.91 1871.51,1214.91 1872.09,1214.91 1872.68,1214.91 1873.27,1214.91 1873.85,1214.91 1874.44,1214.91 1875.03,1214.91 1875.61,1214.91 1876.2,1214.91 1876.79,1214.91 1877.37,1214.91 1877.96,1214.91 1878.55,1214.91 1879.13,1214.91 1879.72,1214.91 1880.3,1214.91 1880.89,1214.91 1881.48,1214.91 1882.06,1214.91 1882.65,1214.91 1883.24,1214.91 1883.82,1214.91 1884.41,1214.91 1885,1214.91 1885.58,1214.91 1886.17,1214.91 1886.76,1214.91 1887.34,1214.91 1887.93,1214.91 1888.51,1214.91 1889.1,1214.91 1889.69,1214.91 1890.27,1214.91 1890.86,1214.91 1891.45,1214.91 1892.03,1214.91 1892.62,1214.91 1893.21,1214.91 1893.79,1214.91 1894.38,1214.91 1894.96,1214.91 1895.55,1214.91 1896.14,1214.91 1896.72,1214.91 1897.31,1214.91 1897.9,1214.91 1898.48,1214.91 1899.07,1214.91 1899.66,1214.91 1900.24,1214.91 1900.83,1214.91 1901.42,1214.91 1902,1214.91 1902.59,1214.91 1903.17,1214.91 1903.76,1214.91 1904.35,1214.91 1904.93,1214.91 1905.52,1214.91 1906.11,1214.91 1906.69,1214.91 1907.28,1214.91 1907.87,1214.91 1908.45,1214.91 1909.04,1214.91 1909.63,1214.91 1910.21,1214.91 1910.8,1214.91 1911.38,1214.91 1911.97,1214.91 1912.56,1214.91 1913.14,1214.91 1913.73,1214.91 1914.32,1214.91 1914.9,1214.91 1915.49,1214.91 1916.08,1214.91 1916.66,1214.91 1917.25,1214.91 1917.83,1214.91 1918.42,1214.91 1919.01,1214.91 1919.59,1214.91 1920.18,1214.91 1920.77,1214.91 1921.35,1214.91 1921.94,1214.91 1922.53,1214.91 1923.11,1214.91 1923.7,1214.91 1924.29,1214.91 1924.87,1214.91 1925.46,1214.91 1926.04,1214.91 1926.63,1214.91 1927.22,1214.91 1927.8,1214.91 1928.39,1214.91 1928.98,1214.91 1929.56,1214.91 1930.15,1214.91 1930.74,1214.91 1931.32,1214.91 1931.91,1214.91 1932.5,1214.91 1933.08,1214.91 1933.67,1214.91 1934.25,1214.91 1934.84,1214.91 1935.43,1214.91 1936.01,1214.91 1936.6,1214.91 1937.19,1214.91 1937.77,1214.91 1938.36,1214.91 1938.95,1214.91 1939.53,1214.91 1940.12,1214.91 1940.71,1214.91 1941.29,1214.91 1941.88,1214.91 1942.46,1214.91 1943.05,1214.91 1943.64,1214.91 1944.22,1214.91 1944.81,1214.91 1945.4,1214.91 1945.98,1214.91 1946.57,1214.91 1947.16,1214.91 1947.74,1214.91 1948.33,1214.91 1948.91,1214.91 1949.5,1214.91 1950.09,1214.91 1950.67,1214.91 1951.26,1214.91 1951.85,1214.91 1952.43,1214.91 1953.02,1214.91 1953.61,1214.91 1954.19,1214.91 1954.78,1214.91 1955.37,1214.91 1955.95,1214.91 1956.54,1214.91 1957.12,1214.91 1957.71,1214.91 1958.3,1214.91 1958.88,1214.91 1959.47,1214.91 1960.06,1214.91 1960.64,1214.91 1961.23,1214.91 1961.82,1214.91 1962.4,1214.91 1962.99,1214.91 1963.58,1214.91 1964.16,1214.91 1964.75,1214.91 1965.33,1214.91 1965.92,1214.91 1966.51,1214.91 1967.09,1214.91 1967.68,1214.91 1968.27,1214.91 1968.85,1214.91 1969.44,1214.91 1970.03,1214.91 1970.61,1214.91 1971.2,1214.91 1971.78,1214.91 1972.37,1214.91 1972.96,1214.91 1973.54,1214.91 1974.13,1214.91 1974.72,1214.91 1975.3,1214.91 1975.89,1214.91 1976.48,1214.91 1977.06,1214.91 1977.65,1214.91 1978.24,1214.91 1978.82,1214.91 1979.41,1214.91 1979.99,1214.91 1980.58,1214.91 1981.17,1214.91 1981.75,1214.91 1982.34,1214.91 1982.93,1214.91 1983.51,1214.91 1984.1,1214.91 1984.69,1214.91 1985.27,1214.91 1985.86,1214.91 1986.45,1214.91 1987.03,1214.91 1987.62,1214.91 1988.2,1214.91 1988.79,1214.91 1989.38,1214.91 1989.96,1214.91 1990.55,1214.91 1991.14,1214.91 1991.72,1214.91 1992.31,1214.91 1992.9,1214.91 1993.48,1214.91 1994.07,1214.91 1994.65,1214.91 1995.24,1214.91 1995.83,1214.91 1996.41,1214.91 1997,1214.91 1997.59,1214.91 1998.17,1214.91 1998.76,1214.91 1999.35,1214.91 1999.93,1214.91 2000.52,1214.91 2001.11,1214.91 2001.69,1214.91 2002.28,1214.91 2002.86,1214.91 2003.45,1214.91 2004.04,1214.91 2004.62,1214.91 2005.21,1214.91 2005.8,1214.91 2006.38,1214.91 2006.97,1214.91 2007.56,1214.91 2008.14,1214.91 2008.73,1214.91 2009.32,1214.91 2009.9,1214.91 2010.49,1214.91 2011.07,1214.91 2011.66,1214.91 2012.25,1214.91 2012.83,1214.91 2013.42,1214.91 2014.01,1214.91 2014.59,1214.91 2015.18,1214.91 2015.77,1214.91 2016.35,1214.91 2016.94,1214.91 2017.53,1214.91 2018.11,1214.91 2018.7,1214.91 2019.28,1214.91 2019.87,1214.91 2020.46,1214.91 2021.04,1214.91 2021.63,1214.91 2022.22,1214.91 2022.8,1214.91 2023.39,1214.91 2023.98,1214.91 2024.56,1214.91 2025.15,1214.91 2025.73,1214.91 2026.32,1214.91 2026.91,1214.91 2027.49,1214.91 2028.08,1214.91 2028.67,1214.91 2029.25,1214.91 2029.84,1214.91 2030.43,1214.91 2031.01,1214.91 2031.6,1214.91 2032.19,1214.91 2032.77,1214.91 2033.36,1214.91 2033.94,1214.91 2034.53,1214.91 2035.12,1214.91 2035.7,1214.91 2036.29,1214.91 2036.88,1214.91 2037.46,1214.91 2038.05,1214.91 2038.64,1214.91 2039.22,1214.91 2039.81,1214.91 2040.4,1214.91 2040.98,1214.91 2041.57,1214.91 2042.15,1214.91 2042.74,1214.91 2043.33,1214.91 2043.91,1214.91 2044.5,1214.91 2045.09,1214.91 2045.67,1214.91 2046.26,1214.91 2046.85,1214.91 2047.43,1214.91 2048.02,1214.91 2048.6,1214.91 2049.19,1214.91 2049.78,1214.91 2050.36,1214.91 2050.95,1214.91 2051.54,1214.91 2052.12,1214.91 2052.71,1214.91 2053.3,1214.91 2053.88,1214.91 2054.47,1214.91 2055.06,1214.91 2055.64,1214.91 2056.23,1214.91 2056.81,1214.91 2057.4,1214.91 2057.99,1214.91 2058.57,1214.91 2059.16,1214.91 2059.75,1214.91 2060.33,1214.91 2060.92,1214.91 2061.51,1214.91 2062.09,1214.91 2062.68,1214.91 2063.27,1214.91 2063.85,1214.91 2064.44,1214.91 2065.02,1214.91 2065.61,1214.91 2066.2,1214.91 2066.78,1214.91 2067.37,1214.91 2067.96,1214.91 2068.54,1214.91 2069.13,1214.91 2069.72,1214.91 2070.3,1214.91 2070.89,1214.91 2071.48,1214.91 2072.06,1214.91 2072.65,1214.91 2073.23,1214.91 2073.82,1214.91 2074.41,1214.91 2074.99,1214.91 2075.58,1214.91 2076.17,1214.91 2076.75,1214.91 2077.34,1214.91 2077.93,1214.91 2078.51,1214.91 2079.1,1214.91 2079.68,1214.91 2080.27,1214.91 2080.86,1214.91 2081.44,1214.91 2082.03,1214.91 2082.62,1214.91 2083.2,1214.91 2083.79,1214.91 2084.38,1214.91 2084.96,1214.91 2085.55,1214.91 2086.14,1214.91 2086.72,1214.91 2087.31,1214.91 2087.89,1214.91 2088.48,1214.91 2089.07,1214.91 2089.65,1214.91 2090.24,1214.91 2090.83,1214.91 2091.41,1214.91 2092,1214.91 2092.59,1214.91 2093.17,1214.91 2093.76,1214.91 2094.35,1214.91 2094.93,1214.91 2095.52,1214.91 2096.1,1214.91 2096.69,1214.91 2097.28,1214.91 2097.86,1214.91 2098.45,1214.91 2099.04,1214.91 2099.62,1214.91 2100.21,1214.91 2100.8,1214.91 2101.38,1214.91 2101.97,1214.91 2102.55,1214.91 2103.14,1214.91 2103.73,1214.91 2104.31,1214.91 2104.9,1214.91 2105.49,1214.91 2106.07,1214.91 2106.66,1214.91 2107.25,1214.91 2107.83,1214.91 2108.42,1214.91 2109.01,1214.91 2109.59,1214.91 2110.18,1214.91 2110.76,1214.91 2111.35,1214.91 2111.94,1214.91 2112.52,1214.91 2113.11,1214.91 2113.7,1214.91 2114.28,1214.91 2114.87,1214.91 2115.46,1214.91 2116.04,1214.91 2116.63,1214.91 2117.22,1214.91 2117.8,1214.91 2118.39,1214.91 2118.97,1214.91 2119.56,1214.91 2120.15,1214.91 2120.73,1214.91 2121.32,1214.91 2121.91,1214.91 2122.49,1214.91 2123.08,1214.91 2123.67,1214.91 2124.25,1214.91 2124.84,1214.91 2125.42,1214.91 2126.01,1214.91 2126.6,1214.91 2127.18,1214.91 2127.77,1214.91 2128.36,1214.91 2128.94,1214.91 2129.53,1214.91 2130.12,1214.91 2130.7,1214.91 2131.29,1214.91 2131.88,1214.91 2132.46,1214.91 2133.05,1214.91 2133.63,1214.91 2134.22,1214.91 2134.81,1214.91 2135.39,1214.91 2135.98,1214.91 2136.57,1214.91 2137.15,1214.91 2137.74,1214.91 2138.33,1214.91 2138.91,1214.91 2139.5,1214.91 2140.09,1214.91 2140.67,1214.91 2141.26,1214.91 2141.84,1214.91 2142.43,1214.91 2143.02,1214.91 2143.6,1214.91 2144.19,1214.91 2144.78,1214.91 2145.36,1214.91 2145.95,1214.91 2146.54,1214.91 2147.12,1214.91 2147.71,1214.91 2148.3,1214.91 2148.88,1214.91 2149.47,1214.91 2150.05,1214.91 2150.64,1214.91 2151.23,1214.91 2151.81,1214.91 2152.4,1214.91 2152.99,1214.91 2153.57,1214.91 2154.16,1214.91 2154.75,1214.91 2155.33,1214.91 2155.92,1214.91 2156.5,1214.91 2157.09,1214.91 2157.68,1214.91 2158.26,1214.91 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1214.74 L986.612 1214.74 L987.198 1214.74 L987.785 1214.74 L988.371 1214.74 L988.957 1214.74 L989.544 1214.74 L990.13 1214.74 L990.717 1214.74 L991.303 1214.74 L991.889 1214.74 L992.476 1214.74 L993.062 1214.74 L993.649 1214.74 L994.235 1214.74 L994.822 1214.74 L995.408 1214.74 L995.994 1214.74 L996.581 1214.74 L997.167 1214.74 L997.754 1214.74 L998.34 1214.74 L998.926 1214.74 L999.513 1214.74 L1000.1 1214.74 L1000.69 1214.74 L1001.27 1214.74 L1001.86 1214.74 L1002.44 1214.74 L1003.03 1214.74 L1003.62 1214.74 L1004.2 1214.74 L1004.79 1214.74 L1005.38 1214.74 L1005.96 1214.74 L1006.55 1214.74 L1007.14 1214.74 L1007.72 1214.74 L1008.31 1214.74 L1008.9 1214.74 L1009.48 1214.74 L1010.07 1214.74 L1010.65 1214.74 L1011.24 1214.74 L1011.83 1214.74 L1012.41 1214.74 L1013 1214.74 L1013.59 1214.74 L1014.17 1214.74 L1014.76 1214.74 L1015.35 1214.74 L1015.93 1214.74 L1016.52 1214.74 L1017.11 1214.74 L1017.69 1214.74 L1018.28 1214.74 L1018.86 1214.74 L1019.45 1214.74 L1020.04 1214.74 L1020.62 1214.74 L1021.21 1214.74 L1021.8 1214.74 L1022.38 1214.74 L1022.97 1214.74 L1023.56 1214.74 L1024.14 1214.74 L1024.73 1214.74 L1025.32 1214.74 L1025.9 1214.74 L1026.49 1214.74 L1027.07 1214.74 L1027.66 1214.74 L1028.25 1214.74 L1028.83 1214.74 L1029.42 1214.74 L1030.01 1214.74 L1030.59 1214.74 L1031.18 1214.74 L1031.77 1214.74 L1032.35 1214.74 L1032.94 1214.74 L1033.52 1214.74 L1034.11 1214.74 L1034.7 1214.74 L1035.28 1214.74 L1035.87 1214.74 L1036.46 1214.74 L1037.04 1214.74 L1037.63 1214.74 L1038.22 1214.74 L1038.8 1214.74 L1039.39 1214.74 L1039.98 1214.74 L1040.56 1214.74 L1041.15 1214.74 L1041.73 1214.74 L1042.32 1214.74 L1042.91 1214.74 L1043.49 1214.74 L1044.08 1214.74 L1044.67 1214.74 L1045.25 1214.74 L1045.84 1214.74 L1046.43 1214.74 L1047.01 1214.74 L1047.6 1214.74 L1048.19 1214.74 L1048.77 1214.74 L1049.36 1214.74 L1049.94 1214.74 L1050.53 1214.74 L1051.12 1214.74 L1051.7 1214.74 L1052.29 1214.74 L1052.88 1214.74 L1053.46 1214.74 L1054.05 1214.74 L1054.64 1214.74 L1055.22 1214.74 L1055.81 1214.74 L1056.39 1214.74 L1056.98 1214.74 L1057.57 1214.74 L1058.15 1214.74 L1058.74 1214.74 L1059.33 1214.74 L1059.91 1214.74 L1060.5 1214.74 L1061.09 1214.74 L1061.67 1214.74 L1062.26 1214.74 L1062.85 1214.74 L1063.43 1214.74 L1064.02 1214.74 L1064.6 1214.74 L1065.19 1214.74 L1065.78 1214.74 L1066.36 1214.74 L1066.95 1214.74 L1067.54 1214.74 L1068.12 1214.74 L1068.71 1214.74 L1069.3 1214.74 L1069.88 1214.74 L1070.47 1214.74 L1071.06 1214.74 L1071.64 1214.74 L1072.23 1214.74 L1072.81 1214.74 L1073.4 1214.74 L1073.99 1214.74 L1074.57 1214.74 L1075.16 1214.74 L1075.75 1214.74 L1076.33 1214.74 L1076.92 1214.74 L1077.51 1214.74 L1078.09 1214.74 L1078.68 1214.74 L1079.26 1214.74 L1079.85 1214.74 L1080.44 1214.74 L1081.02 1214.74 L1081.61 1214.74 L1082.2 1214.74 L1082.78 1214.74 L1083.37 1214.74 L1083.96 1214.74 L1084.54 1214.74 L1085.13 1214.74 L1085.72 1214.74 L1086.3 1214.74 L1086.89 1214.74 L1087.47 1214.74 L1088.06 1214.74 L1088.65 1214.74 L1089.23 1214.74 L1089.82 1214.74 L1090.41 1214.74 L1090.99 1214.74 L1091.58 1214.74 L1092.17 1214.74 L1092.75 1214.74 L1093.34 1214.74 L1093.93 1214.74 L1094.51 1214.74 L1095.1 1214.74 L1095.68 1214.74 L1096.27 1214.74 L1096.86 1214.74 L1097.44 1214.74 L1098.03 1214.74 L1098.62 1214.74 L1099.2 1214.74 L1099.79 1214.74 L1100.38 1214.74 L1100.96 1214.74 L1101.55 1214.74 L1102.14 1214.74 L1102.72 1214.74 L1103.31 1214.74 L1103.89 1214.74 L1104.48 1214.74 L1105.07 1214.74 L1105.65 1214.74 L1106.24 1214.74 L1106.83 1214.74 L1107.41 1214.74 L1108 1214.74 L1108.59 1214.74 L1109.17 1214.74 L1109.76 1214.74 L1110.34 1214.74 L1110.93 1214.74 L1111.52 1214.74 L1112.1 1214.74 L1112.69 1214.74 L1113.28 1214.74 L1113.86 1214.74 L1114.45 1214.74 L1115.04 1214.74 L1115.62 1214.74 L1116.21 1214.74 L1116.8 1214.74 L1117.38 1214.74 L1117.97 1214.74 L1118.55 1214.74 L1119.14 1214.74 L1119.73 1214.74 L1120.31 1214.74 L1120.9 1214.74 L1121.49 1214.74 L1122.07 1214.74 L1122.66 1214.74 L1123.25 1214.74 L1123.83 1214.74 L1124.42 1214.74 L1125.01 1214.74 L1125.59 1214.74 L1126.18 1214.74 L1126.76 1214.74 L1127.35 1214.74 L1127.94 1214.74 L1128.52 1214.74 L1129.11 1214.74 L1129.7 1214.74 L1130.28 1214.74 L1130.87 1214.74 L1131.46 1214.74 L1132.04 1214.74 L1132.63 1214.74 L1133.21 1214.74 L1133.8 1214.74 L1134.39 1214.74 L1134.97 1214.74 L1135.56 1214.74 L1136.15 1214.74 L1136.73 1214.74 L1137.32 1214.74 L1137.91 1214.74 L1138.49 1214.74 L1139.08 1214.74 L1139.67 1214.74 L1140.25 1214.74 L1140.84 1214.74 L1141.42 1214.74 L1142.01 1214.74 L1142.6 1214.74 L1143.18 1214.74 L1143.77 1214.74 L1144.36 1214.74 L1144.94 1214.74 L1145.53 1214.74 L1146.12 1214.74 L1146.7 1214.74 L1147.29 1214.74 L1147.88 1214.74 L1148.46 1214.74 L1149.05 1214.74 L1149.63 1214.74 L1150.22 1214.74 L1150.81 1214.74 L1151.39 1214.74 L1151.98 1214.74 L1152.57 1214.74 L1153.15 1214.74 L1153.74 1214.74 L1154.33 1214.74 L1154.91 1214.74 L1155.5 1214.74 L1156.09 1214.74 L1156.67 1214.74 L1157.26 1214.74 L1157.84 1214.74 L1158.43 1214.74 L1159.02 1214.74 L1159.6 1214.74 L1160.19 1214.74 L1160.78 1214.74 L1161.36 1214.74 L1161.95 1214.74 L1162.54 1214.74 L1163.12 1214.74 L1163.71 1214.74 L1164.29 1214.74 L1164.88 1214.74 L1165.47 1214.74 L1166.05 1214.74 L1166.64 1214.74 L1167.23 1214.74 L1167.81 1214.74 L1168.4 1214.74 L1168.99 1214.74 L1169.57 1214.74 L1170.16 1214.74 L1170.75 1214.74 L1171.33 1214.74 L1171.92 1214.74 L1172.5 1214.74 L1173.09 1214.74 L1173.68 1214.74 L1174.26 1214.74 L1174.85 1214.74 L1175.44 1214.74 L1176.02 1214.74 L1176.61 1214.74 L1177.2 1214.74 L1177.78 1214.74 L1178.37 1214.74 L1178.96 1214.74 L1179.54 1214.74 L1180.13 1214.74 L1180.71 1214.74 L1181.3 1214.74 L1181.89 1214.74 L1182.47 1214.74 L1183.06 1214.74 L1183.65 1214.74 L1184.23 1214.74 L1184.82 1214.74 L1185.41 1214.74 L1185.99 1214.74 L1186.58 1214.74 L1187.16 1214.74 L1187.75 1214.74 L1188.34 1214.74 L1188.92 1214.74 L1189.51 1214.74 L1190.1 1214.74 L1190.68 1214.74 L1191.27 1214.74 L1191.86 1214.74 L1192.44 1214.74 L1193.03 1214.74 L1193.62 1214.74 L1194.2 1214.74 L1194.79 1214.74 L1195.37 1214.74 L1195.96 1214.74 L1196.55 1214.74 L1197.13 1214.74 L1197.72 1214.74 L1198.31 1214.74 L1198.89 1214.74 L1199.48 1214.74 L1200.07 1214.74 L1200.65 1214.74 L1201.24 1214.74 L1201.83 1214.74 L1202.41 1214.74 L1203 1214.74 L1203.58 1214.74 L1204.17 1214.74 L1204.76 1214.74 L1205.34 1214.74 L1205.93 1214.74 L1206.52 1214.74 L1207.1 1214.74 L1207.69 1214.74 L1208.28 1214.74 L1208.86 1214.74 L1209.45 1214.74 L1210.03 1214.74 L1210.62 1214.74 L1211.21 1214.74 L1211.79 1214.74 L1212.38 1214.74 L1212.97 1214.74 L1213.55 1214.74 L1214.14 1214.74 L1214.73 1214.74 L1215.31 1214.74 L1215.9 1214.74 L1216.49 1214.74 L1217.07 1214.74 L1217.66 1214.74 L1218.24 1214.74 L1218.83 1214.74 L1219.42 1214.74 L1220 1214.74 L1220.59 1214.74 L1221.18 1214.74 L1221.76 1214.74 L1222.35 1214.74 L1222.94 1214.74 L1223.52 1214.74 L1224.11 1214.74 L1224.7 1214.74 L1225.28 1214.74 L1225.87 1214.74 L1226.45 1214.74 L1227.04 1214.74 L1227.63 1214.74 L1228.21 1214.74 L1228.8 1214.74 L1229.39 1214.74 L1229.97 1214.74 L1230.56 1214.74 L1231.15 1214.74 L1231.73 1214.74 L1232.32 1214.74 L1232.91 1214.74 L1233.49 1214.74 L1234.08 1214.74 L1234.66 1214.74 L1235.25 1214.74 L1235.84 1214.74 L1236.42 1214.74 L1237.01 1214.74 L1237.6 1214.74 L1238.18 1214.74 L1238.77 1214.74 L1239.36 1214.74 L1239.94 1214.74 L1240.53 1214.74 L1241.11 1214.74 L1241.7 1214.74 L1242.29 1214.74 L1242.87 1214.74 L1243.46 1214.74 L1244.05 1214.74 L1244.63 1214.74 L1245.22 1214.74 L1245.81 1214.74 L1246.39 1214.74 L1246.98 1214.74 L1247.57 1214.74 L1248.15 1214.74 L1248.74 1214.74 L1249.32 1214.74 L1249.91 1214.74 L1250.5 1214.74 L1251.08 1214.74 L1251.67 1214.74 L1252.26 1214.74 L1252.84 1214.74 L1253.43 1214.74 L1254.02 1214.74 L1254.6 1214.74 L1255.19 1214.74 L1255.78 1214.74 L1256.36 1214.74 L1256.95 1214.74 L1257.53 1214.74 L1258.12 1214.74 L1258.71 1214.74 L1259.29 1214.74 L1259.88 1214.74 L1260.47 1214.74 L1261.05 1214.74 L1261.64 1214.74 L1262.23 1214.74 L1262.81 1214.74 L1263.4 1214.74 L1263.98 1214.74 L1264.57 1214.74 L1265.16 1214.74 L1265.74 1214.74 L1266.33 1214.74 L1266.92 1214.74 L1267.5 1214.74 L1268.09 1214.74 L1268.68 1214.74 L1269.26 1214.74 L1269.85 1214.74 L1270.44 1214.74 L1271.02 1214.74 L1271.61 1214.74 L1272.19 1214.74 L1272.78 1214.74 L1273.37 1214.74 L1273.95 1214.74 L1274.54 1214.74 L1275.13 1214.74 L1275.71 1214.74 L1276.3 1214.74 L1276.89 1214.74 L1277.47 1214.74 L1278.06 1214.74 L1278.65 1214.74 L1279.23 1214.74 L1279.82 1214.74 L1280.4 1214.74 L1280.99 1214.74 L1281.58 1214.74 L1282.16 1214.74 L1282.75 1214.74 L1283.34 1214.74 L1283.92 1214.74 L1284.51 1214.74 L1285.1 1214.74 L1285.68 1214.74 L1286.27 1214.74 L1286.86 1214.74 L1287.44 1214.74 L1288.03 1214.74 L1288.61 1214.74 L1289.2 1214.74 L1289.79 1214.74 L1290.37 1214.74 L1290.96 1214.74 L1291.55 1214.74 L1292.13 1214.74 L1292.72 1214.74 L1293.31 1214.74 L1293.89 1214.74 L1294.48 1214.74 L1295.06 1214.74 L1295.65 1214.74 L1296.24 1214.74 L1296.82 1214.74 L1297.41 1214.74 L1298 1214.74 L1298.58 1214.74 L1299.17 1214.74 L1299.76 1214.74 L1300.34 1214.74 L1300.93 1214.74 L1301.52 1214.74 L1302.1 1214.74 L1302.69 1214.74 L1303.27 1214.74 L1303.86 1214.74 L1304.45 1214.74 L1305.03 1214.74 L1305.62 1214.74 L1306.21 1214.74 L1306.79 1214.74 L1307.38 1214.74 L1307.97 1214.74 L1308.55 1214.74 L1309.14 1214.74 L1309.73 1214.74 L1310.31 1214.74 L1310.9 1214.74 L1311.48 1214.74 L1312.07 1214.74 L1312.66 1214.74 L1313.24 1214.74 L1313.83 1214.74 L1314.42 1214.74 L1315 1214.74 L1315.59 1214.74 L1316.18 1214.74 L1316.76 1214.74 L1317.35 1214.74 L1317.93 1214.74 L1318.52 1214.74 L1319.11 1214.74 L1319.69 1214.74 L1320.28 1214.74 L1320.87 1214.74 L1321.45 1214.74 L1322.04 1214.74 L1322.63 1214.74 L1323.21 1214.74 L1323.8 1214.74 L1324.39 1214.74 L1324.97 1214.74 L1325.56 1214.74 L1326.14 1214.74 L1326.73 1214.74 L1327.32 1214.74 L1327.9 1214.74 L1328.49 1214.74 L1329.08 1214.74 L1329.66 1214.74 L1330.25 1214.74 L1330.84 1214.74 L1331.42 1214.74 L1332.01 1214.74 L1332.6 1214.74 L1333.18 1214.74 L1333.77 1214.74 L1334.35 1214.74 L1334.94 1214.74 L1335.53 1214.74 L1336.11 1214.74 L1336.7 1214.74 L1337.29 1214.74 L1337.87 1214.74 L1338.46 1214.74 L1339.05 1214.74 L1339.63 1214.74 L1340.22 1214.74 L1340.8 1214.74 L1341.39 1214.74 L1341.98 1214.74 L1342.56 1214.74 L1343.15 1214.74 L1343.74 1214.74 L1344.32 1214.74 L1344.91 1214.74 L1345.5 1214.74 L1346.08 1214.74 L1346.67 1214.74 L1347.26 1214.74 L1347.84 1214.74 L1348.43 1214.74 L1349.01 1214.74 L1349.6 1214.74 L1350.19 1214.74 L1350.77 1214.74 L1351.36 1214.74 L1351.95 1214.74 L1352.53 1214.74 L1353.12 1214.74 L1353.71 1214.74 L1354.29 1214.74 L1354.88 1214.74 L1355.47 1214.74 L1356.05 1214.74 L1356.64 1214.74 L1357.22 1214.74 L1357.81 1214.74 L1358.4 1214.74 L1358.98 1214.74 L1359.57 1214.74 L1360.16 1214.74 L1360.74 1214.74 L1361.33 1214.74 L1361.92 1214.74 L1362.5 1214.74 L1363.09 1214.74 L1363.68 1214.74 L1364.26 1214.74 L1364.85 1214.74 L1365.43 1214.74 L1366.02 1214.74 L1366.61 1214.74 L1367.19 1214.74 L1367.78 1214.74 L1368.37 1214.74 L1368.95 1214.74 L1369.54 1214.74 L1370.13 1214.74 L1370.71 1214.74 L1371.3 1214.74 L1371.88 1214.74 L1372.47 1214.74 L1373.06 1214.74 L1373.64 1214.74 L1374.23 1214.74 L1374.82 1214.74 L1375.4 1214.74 L1375.99 1214.74 L1376.58 1214.74 L1377.16 1214.74 L1377.75 1214.74 L1378.34 1214.74 L1378.92 1214.74 L1379.51 1214.74 L1380.09 1214.74 L1380.68 1214.74 L1381.27 1214.74 L1381.85 1214.74 L1382.44 1214.74 L1383.03 1214.74 L1383.61 1214.74 L1384.2 1214.74 L1384.79 1214.74 L1385.37 1214.74 L1385.96 1214.74 L1386.55 1214.74 L1387.13 1214.74 L1387.72 1214.74 L1388.3 1214.74 L1388.89 1214.74 L1389.48 1214.74 L1390.06 1214.74 L1390.65 1214.74 L1391.24 1214.74 L1391.82 1214.74 L1392.41 1214.74 L1393 1214.74 L1393.58 1214.74 L1394.17 1214.74 L1394.75 1214.74 L1395.34 1214.74 L1395.93 1214.74 L1396.51 1214.74 L1397.1 1214.74 L1397.69 1214.74 L1398.27 1214.74 L1398.86 1214.74 L1399.45 1214.74 L1400.03 1214.74 L1400.62 1214.74 L1401.21 1214.74 L1401.79 1214.74 L1402.38 1214.74 L1402.96 1214.74 L1403.55 1214.74 L1404.14 1214.74 L1404.72 1214.74 L1405.31 1214.74 L1405.9 1214.74 L1406.48 1214.74 L1407.07 1214.74 L1407.66 1214.74 L1408.24 1214.74 L1408.83 1214.74 L1409.42 1214.74 L1410 1214.74 L1410.59 1214.74 L1411.17 1214.74 L1411.76 1214.74 L1412.35 1214.74 L1412.93 1214.74 L1413.52 1214.74 L1414.11 1214.74 L1414.69 1214.74 L1415.28 1214.74 L1415.87 1214.74 L1416.45 1214.74 L1417.04 1214.74 L1417.63 1214.74 L1418.21 1214.74 L1418.8 1214.74 L1419.38 1214.74 L1419.97 1214.74 L1420.56 1214.74 L1421.14 1214.74 L1421.73 1214.74 L1422.32 1214.74 L1422.9 1214.74 L1423.49 1214.74 L1424.08 1214.74 L1424.66 1214.74 L1425.25 1214.74 L1425.83 1214.74 L1426.42 1214.74 L1427.01 1214.74 L1427.59 1214.74 L1428.18 1214.74 L1428.77 1214.74 L1429.35 1214.74 L1429.94 1214.74 L1430.53 1214.74 L1431.11 1214.74 L1431.7 1214.74 L1432.29 1214.74 L1432.87 1214.74 L1433.46 1214.74 L1434.04 1214.74 L1434.63 1214.74 L1435.22 1214.74 L1435.8 1214.74 L1436.39 1214.74 L1436.98 1214.74 L1437.56 1214.74 L1438.15 1214.74 L1438.74 1214.74 L1439.32 1214.74 L1439.91 1214.74 L1440.5 1214.74 L1441.08 1214.74 L1441.67 1214.74 L1442.25 1214.74 L1442.84 1214.74 L1443.43 1214.74 L1444.01 1214.74 L1444.6 1214.74 L1445.19 1214.74 L1445.77 1214.74 L1446.36 1214.74 L1446.95 1214.74 L1447.53 1214.74 L1448.12 1214.74 L1448.7 1214.74 L1449.29 1214.74 L1449.88 1214.74 L1450.46 1214.74 L1451.05 1214.74 L1451.64 1214.74 L1452.22 1214.74 L1452.81 1214.74 L1453.4 1214.74 L1453.98 1214.74 L1454.57 1214.74 L1455.16 1214.74 L1455.74 1214.74 L1456.33 1214.74 L1456.91 1214.74 L1457.5 1214.74 L1458.09 1214.74 L1458.67 1214.74 L1459.26 1214.74 L1459.85 1214.74 L1460.43 1214.74 L1461.02 1214.74 L1461.61 1214.74 L1462.19 1214.74 L1462.78 1214.74 L1463.37 1214.74 L1463.95 1214.74 L1464.54 1214.74 L1465.12 1214.74 L1465.71 1214.74 L1466.3 1214.74 L1466.88 1214.74 L1467.47 1214.74 L1468.06 1214.74 L1468.64 1214.74 L1469.23 1214.74 L1469.82 1214.74 L1470.4 1214.74 L1470.99 1214.74 L1471.57 1214.74 L1472.16 1214.74 L1472.75 1214.74 L1473.33 1214.74 L1473.92 1214.74 L1474.51 1214.74 L1475.09 1214.74 L1475.68 1214.74 L1476.27 1214.74 L1476.85 1214.74 L1477.44 1214.74 L1478.03 1214.74 L1478.61 1214.74 L1479.2 1214.74 L1479.78 1214.74 L1480.37 1214.74 L1480.96 1214.74 L1481.54 1214.74 L1482.13 1214.74 L1482.72 1214.74 L1483.3 1214.74 L1483.89 1214.74 L1484.48 1214.74 L1485.06 1214.74 L1485.65 1214.74 L1486.24 1214.74 L1486.82 1214.74 L1487.41 1214.74 L1487.99 1214.74 L1488.58 1214.74 L1489.17 1214.74 L1489.75 1214.74 L1490.34 1214.74 L1490.93 1214.74 L1491.51 1214.74 L1492.1 1214.74 L1492.69 1214.74 L1493.27 1214.74 L1493.86 1214.74 L1494.45 1214.74 L1495.03 1214.74 L1495.62 1214.74 L1496.2 1214.74 L1496.79 1214.74 L1497.38 1214.74 L1497.96 1214.74 L1498.55 1214.74 L1499.14 1214.74 L1499.72 1214.74 L1500.31 1214.74 L1500.9 1214.74 L1501.48 1214.74 L1502.07 1214.74 L1502.65 1214.74 L1503.24 1214.74 L1503.83 1214.74 L1504.41 1214.74 L1505 1214.74 L1505.59 1214.74 L1506.17 1214.74 L1506.76 1214.74 L1507.35 1214.74 L1507.93 1214.74 L1508.52 1214.74 L1509.11 1214.74 L1509.69 1214.74 L1510.28 1214.74 L1510.86 1214.74 L1511.45 1214.74 L1512.04 1214.74 L1512.62 1214.74 L1513.21 1214.74 L1513.8 1214.74 L1514.38 1214.74 L1514.97 1214.74 L1515.56 1214.74 L1516.14 1214.74 L1516.73 1214.74 L1517.32 1214.74 L1517.9 1214.74 L1518.49 1214.74 L1519.07 1214.74 L1519.66 1214.74 L1520.25 1214.74 L1520.83 1214.74 L1521.42 1214.74 L1522.01 1214.74 L1522.59 1214.74 L1523.18 1214.74 L1523.77 1214.74 L1524.35 1214.74 L1524.94 1214.74 L1525.52 1214.74 L1526.11 1214.74 L1526.7 1214.74 L1527.28 1214.74 L1527.87 1214.74 L1528.46 1214.74 L1529.04 1214.74 L1529.63 1214.74 L1530.22 1214.74 L1530.8 1214.74 L1531.39 1214.74 L1531.98 1214.74 L1532.56 1214.74 L1533.15 1214.74 L1533.73 1214.74 L1534.32 1214.74 L1534.91 1214.74 L1535.49 1214.74 L1536.08 1214.74 L1536.67 1214.74 L1537.25 1214.74 L1537.84 1214.74 L1538.43 1214.74 L1539.01 1214.74 L1539.6 1214.74 L1540.19 1214.74 L1540.77 1214.74 L1541.36 1214.74 L1541.94 1214.74 L1542.53 1214.74 L1543.12 1214.74 L1543.7 1214.74 L1544.29 1214.74 L1544.88 1214.74 L1545.46 1214.74 L1546.05 1214.74 L1546.64 1214.74 L1547.22 1214.74 L1547.81 1214.74 L1548.4 1214.74 L1548.98 1214.74 L1549.57 1214.74 L1550.15 1214.74 L1550.74 1214.74 L1551.33 1214.74 L1551.91 1214.74 L1552.5 1214.74 L1553.09 1214.74 L1553.67 1214.74 L1554.26 1214.74 L1554.85 1214.74 L1555.43 1214.74 L1556.02 1214.74 L1556.6 1214.74 L1557.19 1214.74 L1557.78 1214.74 L1558.36 1214.74 L1558.95 1214.74 L1559.54 1214.74 L1560.12 1214.74 L1560.71 1214.74 L1561.3 1214.74 L1561.88 1214.74 L1562.47 1214.74 L1563.06 1214.74 L1563.64 1214.74 L1564.23 1214.74 L1564.81 1214.74 L1565.4 1214.74 L1565.99 1214.74 L1566.57 1214.74 L1567.16 1214.74 L1567.75 1214.74 L1568.33 1214.74 L1568.92 1214.74 L1569.51 1214.74 L1570.09 1214.74 L1570.68 1214.74 L1571.27 1214.74 L1571.85 1214.74 L1572.44 1214.74 L1573.02 1214.74 L1573.61 1214.74 L1574.2 1214.74 L1574.78 1214.74 L1575.37 1214.74 L1575.96 1214.74 L1576.54 1214.74 L1577.13 1214.74 L1577.72 1214.74 L1578.3 1214.74 L1578.89 1214.74 L1579.47 1214.74 L1580.06 1214.74 L1580.65 1214.74 L1581.23 1214.74 L1581.82 1214.74 L1582.41 1214.74 L1582.99 1214.74 L1583.58 1214.74 L1584.17 1214.74 L1584.75 1214.74 L1585.34 1214.74 L1585.93 1214.74 L1586.51 1214.74 L1587.1 1214.74 L1587.68 1214.74 L1588.27 1214.74 L1588.86 1214.74 L1589.44 1214.74 L1590.03 1214.74 L1590.62 1214.74 L1591.2 1214.74 L1591.79 1214.74 L1592.38 1214.74 L1592.96 1214.74 L1593.55 1214.74 L1594.14 1214.74 L1594.72 1214.74 L1595.31 1214.74 L1595.89 1214.74 L1596.48 1214.74 L1597.07 1214.74 L1597.65 1214.74 L1598.24 1214.74 L1598.83 1214.74 L1599.41 1214.74 L1600 1214.74 L1600.59 1214.74 L1601.17 1214.74 L1601.76 1214.74 L1602.34 1214.74 L1602.93 1214.74 L1603.52 1214.74 L1604.1 1214.74 L1604.69 1214.74 L1605.28 1214.74 L1605.86 1214.74 L1606.45 1214.74 L1607.04 1214.74 L1607.62 1214.74 L1608.21 1214.74 L1608.8 1214.74 L1609.38 1214.74 L1609.97 1214.74 L1610.55 1214.74 L1611.14 1214.74 L1611.73 1214.74 L1612.31 1214.74 L1612.9 1214.74 L1613.49 1214.74 L1614.07 1214.74 L1614.66 1214.74 L1615.25 1214.74 L1615.83 1214.74 L1616.42 1214.74 L1617.01 1214.74 L1617.59 1214.74 L1618.18 1214.74 L1618.76 1214.74 L1619.35 1214.74 L1619.94 1214.74 L1620.52 1214.74 L1621.11 1214.74 L1621.7 1214.74 L1622.28 1214.74 L1622.87 1214.74 L1623.46 1214.74 L1624.04 1214.74 L1624.63 1214.74 L1625.22 1214.74 L1625.8 1214.74 L1626.39 1214.74 L1626.97 1214.74 L1627.56 1214.74 L1628.15 1214.74 L1628.73 1214.74 L1629.32 1214.74 L1629.91 1214.74 L1630.49 1214.74 L1631.08 1214.74 L1631.67 1214.74 L1632.25 1214.74 L1632.84 1214.74 L1633.42 1214.74 L1634.01 1214.74 L1634.6 1214.74 L1635.18 1214.74 L1635.77 1214.74 L1636.36 1214.74 L1636.94 1214.74 L1637.53 1214.74 L1638.12 1214.74 L1638.7 1214.74 L1639.29 1214.74 L1639.88 1214.74 L1640.46 1214.74 L1641.05 1214.74 L1641.63 1214.74 L1642.22 1214.74 L1642.81 1214.74 L1643.39 1214.74 L1643.98 1214.74 L1644.57 1214.74 L1645.15 1214.74 L1645.74 1214.74 L1646.33 1214.74 L1646.91 1214.74 L1647.5 1214.74 L1648.09 1214.74 L1648.67 1214.74 L1649.26 1214.74 L1649.84 1214.74 L1650.43 1214.74 L1651.02 1214.74 L1651.6 1214.74 L1652.19 1214.74 L1652.78 1214.74 L1653.36 1214.74 L1653.95 1214.74 L1654.54 1214.74 L1655.12 1214.74 L1655.71 1214.74 L1656.29 1214.74 L1656.88 1214.74 L1657.47 1214.74 L1658.05 1214.74 L1658.64 1214.74 L1659.23 1214.74 L1659.81 1214.74 L1660.4 1214.74 L1660.99 1214.74 L1661.57 1214.74 L1662.16 1214.74 L1662.75 1214.74 L1663.33 1214.74 L1663.92 1214.74 L1664.5 1214.74 L1665.09 1214.74 L1665.68 1214.74 L1666.26 1214.74 L1666.85 1214.74 L1667.44 1214.74 L1668.02 1214.74 L1668.61 1214.74 L1669.2 1214.74 L1669.78 1214.74 L1670.37 1214.74 L1670.96 1214.74 L1671.54 1214.74 L1672.13 1214.74 L1672.71 1214.74 L1673.3 1214.74 L1673.89 1214.74 L1674.47 1214.74 L1675.06 1214.74 L1675.65 1214.74 L1676.23 1214.74 L1676.82 1214.74 L1677.41 1214.74 L1677.99 1214.74 L1678.58 1214.74 L1679.17 1214.74 L1679.75 1214.74 L1680.34 1214.74 L1680.92 1214.74 L1681.51 1214.74 L1682.1 1214.74 L1682.68 1214.74 L1683.27 1214.74 L1683.86 1214.74 L1684.44 1214.74 L1685.03 1214.74 L1685.62 1214.74 L1686.2 1214.74 L1686.79 1214.74 L1687.37 1214.74 L1687.96 1214.74 L1688.55 1214.74 L1689.13 1214.74 L1689.72 1214.74 L1690.31 1214.74 L1690.89 1214.74 L1691.48 1214.74 L1692.07 1214.74 L1692.65 1214.74 L1693.24 1214.74 L1693.83 1214.74 L1694.41 1214.74 L1695 1214.74 L1695.58 1214.74 L1696.17 1214.74 L1696.76 1214.74 L1697.34 1214.74 L1697.93 1214.74 L1698.52 1214.74 L1699.1 1214.74 L1699.69 1214.74 L1700.28 1214.74 L1700.86 1214.74 L1701.45 1214.74 L1702.04 1214.74 L1702.62 1214.74 L1703.21 1214.74 L1703.79 1214.74 L1704.38 1214.74 L1704.97 1214.74 L1705.55 1214.74 L1706.14 1214.74 L1706.73 1214.74 L1707.31 1214.74 L1707.9 1214.74 L1708.49 1214.74 L1709.07 1214.74 L1709.66 1214.74 L1710.24 1214.74 L1710.83 1214.74 L1711.42 1214.74 L1712 1214.74 L1712.59 1214.74 L1713.18 1214.74 L1713.76 1214.74 L1714.35 1214.74 L1714.94 1214.74 L1715.52 1214.74 L1716.11 1214.74 L1716.7 1214.74 L1717.28 1214.74 L1717.87 1214.74 L1718.45 1214.74 L1719.04 1214.74 L1719.63 1214.74 L1720.21 1214.74 L1720.8 1214.74 L1721.39 1214.74 L1721.97 1214.74 L1722.56 1214.74 L1723.15 1214.74 L1723.73 1214.74 L1724.32 1214.74 L1724.91 1214.74 L1725.49 1214.74 L1726.08 1214.74 L1726.66 1214.74 L1727.25 1214.74 L1727.84 1214.74 L1728.42 1214.74 L1729.01 1214.74 L1729.6 1214.74 L1730.18 1214.74 L1730.77 1214.74 L1731.36 1214.74 L1731.94 1214.74 L1732.53 1214.74 L1733.11 1214.74 L1733.7 1214.74 L1734.29 1214.74 L1734.87 1214.74 L1735.46 1214.74 L1736.05 1214.74 L1736.63 1214.74 L1737.22 1214.74 L1737.81 1214.74 L1738.39 1214.74 L1738.98 1214.74 L1739.57 1214.74 L1740.15 1214.74 L1740.74 1214.74 L1741.32 1214.74 L1741.91 1214.74 L1742.5 1214.74 L1743.08 1214.74 L1743.67 1214.74 L1744.26 1214.74 L1744.84 1214.74 L1745.43 1214.74 L1746.02 1214.74 L1746.6 1214.74 L1747.19 1214.74 L1747.78 1214.74 L1748.36 1214.74 L1748.95 1214.74 L1749.53 1214.74 L1750.12 1214.74 L1750.71 1214.74 L1751.29 1214.74 L1751.88 1214.74 L1752.47 1214.74 L1753.05 1214.74 L1753.64 1214.74 L1754.23 1214.74 L1754.81 1214.74 L1755.4 1214.74 L1755.99 1214.74 L1756.57 1214.74 L1757.16 1214.74 L1757.74 1214.74 L1758.33 1214.74 L1758.92 1214.74 L1759.5 1214.74 L1760.09 1214.74 L1760.68 1214.74 L1761.26 1214.74 L1761.85 1214.74 L1762.44 1214.74 L1763.02 1214.74 L1763.61 1214.74 L1764.19 1214.74 L1764.78 1214.74 L1765.37 1214.74 L1765.95 1214.74 L1766.54 1214.74 L1767.13 1214.74 L1767.71 1214.74 L1768.3 1214.74 L1768.89 1214.74 L1769.47 1214.74 L1770.06 1214.74 L1770.65 1214.74 L1771.23 1214.74 L1771.82 1214.74 L1772.4 1214.74 L1772.99 1214.74 L1773.58 1214.74 L1774.16 1214.74 L1774.75 1214.74 L1775.34 1214.74 L1775.92 1214.74 L1776.51 1214.74 L1777.1 1214.74 L1777.68 1214.74 L1778.27 1214.74 L1778.86 1214.74 L1779.44 1214.74 L1780.03 1214.74 L1780.61 1214.74 L1781.2 1214.74 L1781.79 1214.74 L1782.37 1214.74 L1782.96 1214.74 L1783.55 1214.74 L1784.13 1214.74 L1784.72 1214.74 L1785.31 1214.74 L1785.89 1214.74 L1786.48 1214.74 L1787.06 1214.74 L1787.65 1214.74 L1788.24 1214.74 L1788.82 1214.74 L1789.41 1214.74 L1790 1214.74 L1790.58 1214.74 L1791.17 1214.74 L1791.76 1214.74 L1792.34 1214.74 L1792.93 1214.74 L1793.52 1214.74 L1794.1 1214.74 L1794.69 1214.74 L1795.27 1214.74 L1795.86 1214.74 L1796.45 1214.74 L1797.03 1214.74 L1797.62 1214.74 L1798.21 1214.74 L1798.79 1214.74 L1799.38 1214.74 L1799.97 1214.74 L1800.55 1214.74 L1801.14 1214.74 L1801.73 1214.74 L1802.31 1214.74 L1802.9 1214.74 L1803.48 1214.74 L1804.07 1214.74 L1804.66 1214.74 L1805.24 1214.74 L1805.83 1214.74 L1806.42 1214.74 L1807 1214.74 L1807.59 1214.74 L1808.18 1214.74 L1808.76 1214.74 L1809.35 1214.74 L1809.94 1214.74 L1810.52 1214.74 L1811.11 1214.74 L1811.69 1214.74 L1812.28 1214.74 L1812.87 1214.74 L1813.45 1214.74 L1814.04 1214.74 L1814.63 1214.74 L1815.21 1214.74 L1815.8 1214.74 L1816.39 1214.74 L1816.97 1214.74 L1817.56 1214.74 L1818.14 1214.74 L1818.73 1214.74 L1819.32 1214.74 L1819.9 1214.74 L1820.49 1214.74 L1821.08 1214.74 L1821.66 1214.74 L1822.25 1214.74 L1822.84 1214.74 L1823.42 1214.74 L1824.01 1214.74 L1824.6 1214.74 L1825.18 1214.74 L1825.77 1214.74 L1826.35 1214.74 L1826.94 1214.74 L1827.53 1214.74 L1828.11 1214.74 L1828.7 1214.74 L1829.29 1214.74 L1829.87 1214.74 L1830.46 1214.74 L1831.05 1214.74 L1831.63 1214.74 L1832.22 1214.74 L1832.81 1214.74 L1833.39 1214.74 L1833.98 1214.74 L1834.56 1214.74 L1835.15 1214.74 L1835.74 1214.74 L1836.32 1214.74 L1836.91 1214.74 L1837.5 1214.74 L1838.08 1214.74 L1838.67 1214.74 L1839.26 1214.74 L1839.84 1214.74 L1840.43 1214.74 L1841.01 1214.74 L1841.6 1214.74 L1842.19 1214.74 L1842.77 1214.74 L1843.36 1214.74 L1843.95 1214.74 L1844.53 1214.74 L1845.12 1214.74 L1845.71 1214.74 L1846.29 1214.74 L1846.88 1214.74 L1847.47 1214.74 L1848.05 1214.74 L1848.64 1214.74 L1849.22 1214.74 L1849.81 1214.74 L1850.4 1214.74 L1850.98 1214.74 L1851.57 1214.74 L1852.16 1214.74 L1852.74 1214.74 L1853.33 1214.74 L1853.92 1214.74 L1854.5 1214.74 L1855.09 1214.74 L1855.68 1214.74 L1856.26 1214.74 L1856.85 1214.74 L1857.43 1214.74 L1858.02 1214.74 L1858.61 1214.74 L1859.19 1214.74 L1859.78 1214.74 L1860.37 1214.74 L1860.95 1214.74 L1861.54 1214.74 L1862.13 1214.74 L1862.71 1214.74 L1863.3 1214.74 L1863.88 1214.74 L1864.47 1214.74 L1865.06 1214.74 L1865.64 1214.74 L1866.23 1214.74 L1866.82 1214.74 L1867.4 1214.74 L1867.99 1214.74 L1868.58 1214.74 L1869.16 1214.74 L1869.75 1214.74 L1870.34 1214.74 L1870.92 1214.74 L1871.51 1214.74 L1872.09 1214.74 L1872.68 1214.74 L1873.27 1214.74 L1873.85 1214.74 L1874.44 1214.74 L1875.03 1214.74 L1875.61 1214.74 L1876.2 1214.74 L1876.79 1214.74 L1877.37 1214.74 L1877.96 1214.74 L1878.55 1214.74 L1879.13 1214.74 L1879.72 1214.74 L1880.3 1214.74 L1880.89 1214.74 L1881.48 1214.74 L1882.06 1214.74 L1882.65 1214.74 L1883.24 1214.74 L1883.82 1214.74 L1884.41 1214.74 L1885 1214.74 L1885.58 1214.74 L1886.17 1214.74 L1886.76 1214.74 L1887.34 1214.74 L1887.93 1214.74 L1888.51 1214.74 L1889.1 1214.74 L1889.69 1214.74 L1890.27 1214.74 L1890.86 1214.74 L1891.45 1214.74 L1892.03 1214.74 L1892.62 1214.74 L1893.21 1214.74 L1893.79 1214.74 L1894.38 1214.74 L1894.96 1214.74 L1895.55 1214.74 L1896.14 1214.74 L1896.72 1214.74 L1897.31 1214.74 L1897.9 1214.74 L1898.48 1214.74 L1899.07 1214.74 L1899.66 1214.74 L1900.24 1214.74 L1900.83 1214.74 L1901.42 1214.74 L1902 1214.74 L1902.59 1214.74 L1903.17 1214.74 L1903.76 1214.74 L1904.35 1214.74 L1904.93 1214.74 L1905.52 1214.74 L1906.11 1214.74 L1906.69 1214.74 L1907.28 1214.74 L1907.87 1214.74 L1908.45 1214.74 L1909.04 1214.74 L1909.63 1214.74 L1910.21 1214.74 L1910.8 1214.74 L1911.38 1214.74 L1911.97 1214.74 L1912.56 1214.74 L1913.14 1214.74 L1913.73 1214.74 L1914.32 1214.74 L1914.9 1214.74 L1915.49 1214.74 L1916.08 1214.74 L1916.66 1214.74 L1917.25 1214.74 L1917.83 1214.74 L1918.42 1214.74 L1919.01 1214.74 L1919.59 1214.74 L1920.18 1214.74 L1920.77 1214.74 L1921.35 1214.74 L1921.94 1214.74 L1922.53 1214.74 L1923.11 1214.74 L1923.7 1214.74 L1924.29 1214.74 L1924.87 1214.74 L1925.46 1214.74 L1926.04 1214.74 L1926.63 1214.74 L1927.22 1214.74 L1927.8 1214.74 L1928.39 1214.74 L1928.98 1214.74 L1929.56 1214.74 L1930.15 1214.74 L1930.74 1214.74 L1931.32 1214.74 L1931.91 1214.74 L1932.5 1214.74 L1933.08 1214.74 L1933.67 1214.74 L1934.25 1214.74 L1934.84 1214.74 L1935.43 1214.74 L1936.01 1214.74 L1936.6 1214.74 L1937.19 1214.74 L1937.77 1214.74 L1938.36 1214.74 L1938.95 1214.74 L1939.53 1214.74 L1940.12 1214.74 L1940.71 1214.74 L1941.29 1214.74 L1941.88 1214.74 L1942.46 1214.74 L1943.05 1214.74 L1943.64 1214.74 L1944.22 1214.74 L1944.81 1214.74 L1945.4 1214.74 L1945.98 1214.74 L1946.57 1214.74 L1947.16 1214.74 L1947.74 1214.74 L1948.33 1214.74 L1948.91 1214.74 L1949.5 1214.74 L1950.09 1214.74 L1950.67 1214.74 L1951.26 1214.74 L1951.85 1214.74 L1952.43 1214.74 L1953.02 1214.74 L1953.61 1214.74 L1954.19 1214.74 L1954.78 1214.74 L1955.37 1214.74 L1955.95 1214.74 L1956.54 1214.74 L1957.12 1214.74 L1957.71 1214.74 L1958.3 1214.74 L1958.88 1214.74 L1959.47 1214.74 L1960.06 1214.74 L1960.64 1214.74 L1961.23 1214.74 L1961.82 1214.74 L1962.4 1214.74 L1962.99 1214.74 L1963.58 1214.74 L1964.16 1214.74 L1964.75 1214.74 L1965.33 1214.74 L1965.92 1214.74 L1966.51 1214.74 L1967.09 1214.74 L1967.68 1214.74 L1968.27 1214.74 L1968.85 1214.74 L1969.44 1214.74 L1970.03 1214.74 L1970.61 1214.74 L1971.2 1214.74 L1971.78 1214.74 L1972.37 1214.74 L1972.96 1214.74 L1973.54 1214.74 L1974.13 1214.74 L1974.72 1214.74 L1975.3 1214.74 L1975.89 1214.74 L1976.48 1214.74 L1977.06 1214.74 L1977.65 1214.74 L1978.24 1214.74 L1978.82 1214.74 L1979.41 1214.74 L1979.99 1214.74 L1980.58 1214.74 L1981.17 1214.74 L1981.75 1214.74 L1982.34 1214.74 L1982.93 1214.74 L1983.51 1214.74 L1984.1 1214.74 L1984.69 1214.74 L1985.27 1214.74 L1985.86 1214.74 L1986.45 1214.74 L1987.03 1214.74 L1987.62 1214.74 L1988.2 1214.74 L1988.79 1214.74 L1989.38 1214.74 L1989.96 1214.74 L1990.55 1214.74 L1991.14 1214.74 L1991.72 1214.74 L1992.31 1214.74 L1992.9 1214.74 L1993.48 1214.74 L1994.07 1214.74 L1994.65 1214.74 L1995.24 1214.74 L1995.83 1214.74 L1996.41 1214.74 L1997 1214.74 L1997.59 1214.74 L1998.17 1214.74 L1998.76 1214.74 L1999.35 1214.74 L1999.93 1214.74 L2000.52 1214.74 L2001.11 1214.74 L2001.69 1214.74 L2002.28 1214.74 L2002.86 1214.74 L2003.45 1214.74 L2004.04 1214.74 L2004.62 1214.74 L2005.21 1214.74 L2005.8 1214.74 L2006.38 1214.74 L2006.97 1214.74 L2007.56 1214.74 L2008.14 1214.74 L2008.73 1214.74 L2009.32 1214.74 L2009.9 1214.74 L2010.49 1214.74 L2011.07 1214.74 L2011.66 1214.74 L2012.25 1214.74 L2012.83 1214.74 L2013.42 1214.74 L2014.01 1214.74 L2014.59 1214.74 L2015.18 1214.74 L2015.77 1214.74 L2016.35 1214.74 L2016.94 1214.74 L2017.53 1214.74 L2018.11 1214.74 L2018.7 1214.74 L2019.28 1214.74 L2019.87 1214.74 L2020.46 1214.74 L2021.04 1214.74 L2021.63 1214.74 L2022.22 1214.74 L2022.8 1214.74 L2023.39 1214.74 L2023.98 1214.74 L2024.56 1214.74 L2025.15 1214.74 L2025.73 1214.74 L2026.32 1214.74 L2026.91 1214.74 L2027.49 1214.74 L2028.08 1214.74 L2028.67 1214.74 L2029.25 1214.74 L2029.84 1214.74 L2030.43 1214.74 L2031.01 1214.74 L2031.6 1214.74 L2032.19 1214.74 L2032.77 1214.74 L2033.36 1214.74 L2033.94 1214.74 L2034.53 1214.74 L2035.12 1214.74 L2035.7 1214.74 L2036.29 1214.74 L2036.88 1214.74 L2037.46 1214.74 L2038.05 1214.74 L2038.64 1214.74 L2039.22 1214.74 L2039.81 1214.74 L2040.4 1214.74 L2040.98 1214.74 L2041.57 1214.74 L2042.15 1214.74 L2042.74 1214.74 L2043.33 1214.74 L2043.91 1214.74 L2044.5 1214.74 L2045.09 1214.74 L2045.67 1214.74 L2046.26 1214.74 L2046.85 1214.74 L2047.43 1214.74 L2048.02 1214.74 L2048.6 1214.74 L2049.19 1214.74 L2049.78 1214.74 L2050.36 1214.74 L2050.95 1214.74 L2051.54 1214.74 L2052.12 1214.74 L2052.71 1214.74 L2053.3 1214.74 L2053.88 1214.74 L2054.47 1214.74 L2055.06 1214.74 L2055.64 1214.74 L2056.23 1214.74 L2056.81 1214.74 L2057.4 1214.74 L2057.99 1214.74 L2058.57 1214.74 L2059.16 1214.74 L2059.75 1214.74 L2060.33 1214.74 L2060.92 1214.74 L2061.51 1214.74 L2062.09 1214.74 L2062.68 1214.74 L2063.27 1214.74 L2063.85 1214.74 L2064.44 1214.74 L2065.02 1214.74 L2065.61 1214.74 L2066.2 1214.74 L2066.78 1214.74 L2067.37 1214.74 L2067.96 1214.74 L2068.54 1214.74 L2069.13 1214.74 L2069.72 1214.74 L2070.3 1214.74 L2070.89 1214.74 L2071.48 1214.74 L2072.06 1214.74 L2072.65 1214.74 L2073.23 1214.74 L2073.82 1214.74 L2074.41 1214.74 L2074.99 1214.74 L2075.58 1214.74 L2076.17 1214.74 L2076.75 1214.74 L2077.34 1214.74 L2077.93 1214.74 L2078.51 1214.74 L2079.1 1214.74 L2079.68 1214.74 L2080.27 1214.74 L2080.86 1214.74 L2081.44 1214.74 L2082.03 1214.74 L2082.62 1214.74 L2083.2 1214.74 L2083.79 1214.74 L2084.38 1214.74 L2084.96 1214.74 L2085.55 1214.74 L2086.14 1214.74 L2086.72 1214.74 L2087.31 1214.74 L2087.89 1214.74 L2088.48 1214.74 L2089.07 1214.74 L2089.65 1214.74 L2090.24 1214.74 L2090.83 1214.74 L2091.41 1214.74 L2092 1214.74 L2092.59 1214.74 L2093.17 1214.74 L2093.76 1214.74 L2094.35 1214.74 L2094.93 1214.74 L2095.52 1214.74 L2096.1 1214.74 L2096.69 1214.74 L2097.28 1214.74 L2097.86 1214.74 L2098.45 1214.74 L2099.04 1214.74 L2099.62 1214.74 L2100.21 1214.74 L2100.8 1214.74 L2101.38 1214.74 L2101.97 1214.74 L2102.55 1214.74 L2103.14 1214.74 L2103.73 1214.74 L2104.31 1214.74 L2104.9 1214.74 L2105.49 1214.74 L2106.07 1214.74 L2106.66 1214.74 L2107.25 1214.74 L2107.83 1214.74 L2108.42 1214.74 L2109.01 1214.74 L2109.59 1214.74 L2110.18 1214.74 L2110.76 1214.74 L2111.35 1214.74 L2111.94 1214.74 L2112.52 1214.74 L2113.11 1214.74 L2113.7 1214.74 L2114.28 1214.74 L2114.87 1214.74 L2115.46 1214.74 L2116.04 1214.74 L2116.63 1214.74 L2117.22 1214.74 L2117.8 1214.74 L2118.39 1214.74 L2118.97 1214.74 L2119.56 1214.74 L2120.15 1214.74 L2120.73 1214.74 L2121.32 1214.74 L2121.91 1214.74 L2122.49 1214.74 L2123.08 1214.74 L2123.67 1214.74 L2124.25 1214.74 L2124.84 1214.74 L2125.42 1214.74 L2126.01 1214.74 L2126.6 1214.74 L2127.18 1214.74 L2127.77 1214.74 L2128.36 1214.74 L2128.94 1214.74 L2129.53 1214.74 L2130.12 1214.74 L2130.7 1214.74 L2131.29 1214.74 L2131.88 1214.74 L2132.46 1214.74 L2133.05 1214.74 L2133.63 1214.74 L2134.22 1214.74 L2134.81 1214.74 L2135.39 1214.74 L2135.98 1214.74 L2136.57 1214.74 L2137.15 1214.74 L2137.74 1214.74 L2138.33 1214.74 L2138.91 1214.74 L2139.5 1214.74 L2140.09 1214.74 L2140.67 1214.74 L2141.26 1214.74 L2141.84 1214.74 L2142.43 1214.74 L2143.02 1214.74 L2143.6 1214.74 L2144.19 1214.74 L2144.78 1214.74 L2145.36 1214.74 L2145.95 1214.74 L2146.54 1214.74 L2147.12 1214.74 L2147.71 1214.74 L2148.3 1214.74 L2148.88 1214.74 L2149.47 1214.74 L2150.05 1214.74 L2150.64 1214.74 L2151.23 1214.74 L2151.81 1214.74 L2152.4 1214.74 L2152.99 1214.74 L2153.57 1214.74 L2154.16 1214.74 L2154.75 1214.74 L2155.33 1214.74 L2155.92 1214.74 L2156.5 1214.74 L2157.09 1214.74 L2157.68 1214.74 L2158.26 1214.74 L2158.26 1214.62 L2157.68 1214.62 L2157.09 1214.62 L2156.5 1214.62 L2155.92 1214.62 L2155.33 1214.62 L2154.75 1214.62 L2154.16 1214.62 L2153.57 1214.62 L2152.99 1214.62 L2152.4 1214.62 L2151.81 1214.62 L2151.23 1214.62 L2150.64 1214.62 L2150.05 1214.62 L2149.47 1214.62 L2148.88 1214.62 L2148.3 1214.62 L2147.71 1214.62 L2147.12 1214.62 L2146.54 1214.62 L2145.95 1214.62 L2145.36 1214.62 L2144.78 1214.62 L2144.19 1214.62 L2143.6 1214.62 L2143.02 1214.62 L2142.43 1214.62 L2141.84 1214.62 L2141.26 1214.62 L2140.67 1214.62 L2140.09 1214.62 L2139.5 1214.62 L2138.91 1214.62 L2138.33 1214.62 L2137.74 1214.62 L2137.15 1214.62 L2136.57 1214.62 L2135.98 1214.62 L2135.39 1214.62 L2134.81 1214.62 L2134.22 1214.62 L2133.63 1214.62 L2133.05 1214.62 L2132.46 1214.62 L2131.88 1214.62 L2131.29 1214.62 L2130.7 1214.62 L2130.12 1214.62 L2129.53 1214.62 L2128.94 1214.62 L2128.36 1214.62 L2127.77 1214.62 L2127.18 1214.62 L2126.6 1214.62 L2126.01 1214.62 L2125.42 1214.62 L2124.84 1214.62 L2124.25 1214.62 L2123.67 1214.62 L2123.08 1214.62 L2122.49 1214.62 L2121.91 1214.62 L2121.32 1214.62 L2120.73 1214.62 L2120.15 1214.62 L2119.56 1214.62 L2118.97 1214.62 L2118.39 1214.62 L2117.8 1214.62 L2117.22 1214.62 L2116.63 1214.62 L2116.04 1214.62 L2115.46 1214.62 L2114.87 1214.62 L2114.28 1214.62 L2113.7 1214.62 L2113.11 1214.62 L2112.52 1214.62 L2111.94 1214.62 L2111.35 1214.62 L2110.76 1214.62 L2110.18 1214.62 L2109.59 1214.62 L2109.01 1214.62 L2108.42 1214.62 L2107.83 1214.62 L2107.25 1214.62 L2106.66 1214.62 L2106.07 1214.62 L2105.49 1214.62 L2104.9 1214.62 L2104.31 1214.62 L2103.73 1214.62 L2103.14 1214.62 L2102.55 1214.62 L2101.97 1214.62 L2101.38 1214.62 L2100.8 1214.62 L2100.21 1214.62 L2099.62 1214.62 L2099.04 1214.62 L2098.45 1214.62 L2097.86 1214.62 L2097.28 1214.62 L2096.69 1214.62 L2096.1 1214.62 L2095.52 1214.62 L2094.93 1214.62 L2094.35 1214.62 L2093.76 1214.62 L2093.17 1214.62 L2092.59 1214.62 L2092 1214.62 L2091.41 1214.62 L2090.83 1214.62 L2090.24 1214.62 L2089.65 1214.62 L2089.07 1214.62 L2088.48 1214.62 L2087.89 1214.62 L2087.31 1214.62 L2086.72 1214.62 L2086.14 1214.62 L2085.55 1214.62 L2084.96 1214.62 L2084.38 1214.62 L2083.79 1214.62 L2083.2 1214.62 L2082.62 1214.62 L2082.03 1214.62 L2081.44 1214.62 L2080.86 1214.62 L2080.27 1214.62 L2079.68 1214.62 L2079.1 1214.62 L2078.51 1214.62 L2077.93 1214.62 L2077.34 1214.62 L2076.75 1214.62 L2076.17 1214.62 L2075.58 1214.62 L2074.99 1214.62 L2074.41 1214.62 L2073.82 1214.62 L2073.23 1214.62 L2072.65 1214.62 L2072.06 1214.62 L2071.48 1214.62 L2070.89 1214.62 L2070.3 1214.62 L2069.72 1214.62 L2069.13 1214.62 L2068.54 1214.62 L2067.96 1214.62 L2067.37 1214.62 L2066.78 1214.62 L2066.2 1214.62 L2065.61 1214.62 L2065.02 1214.62 L2064.44 1214.62 L2063.85 1214.62 L2063.27 1214.62 L2062.68 1214.62 L2062.09 1214.62 L2061.51 1214.62 L2060.92 1214.62 L2060.33 1214.62 L2059.75 1214.62 L2059.16 1214.62 L2058.57 1214.62 L2057.99 1214.62 L2057.4 1214.62 L2056.81 1214.62 L2056.23 1214.62 L2055.64 1214.62 L2055.06 1214.62 L2054.47 1214.62 L2053.88 1214.62 L2053.3 1214.62 L2052.71 1214.62 L2052.12 1214.62 L2051.54 1214.62 L2050.95 1214.62 L2050.36 1214.62 L2049.78 1214.62 L2049.19 1214.62 L2048.6 1214.62 L2048.02 1214.62 L2047.43 1214.62 L2046.85 1214.62 L2046.26 1214.62 L2045.67 1214.62 L2045.09 1214.62 L2044.5 1214.62 L2043.91 1214.62 L2043.33 1214.62 L2042.74 1214.62 L2042.15 1214.62 L2041.57 1214.62 L2040.98 1214.62 L2040.4 1214.62 L2039.81 1214.62 L2039.22 1214.62 L2038.64 1214.62 L2038.05 1214.62 L2037.46 1214.62 L2036.88 1214.62 L2036.29 1214.62 L2035.7 1214.62 L2035.12 1214.62 L2034.53 1214.62 L2033.94 1214.62 L2033.36 1214.62 L2032.77 1214.62 L2032.19 1214.62 L2031.6 1214.62 L2031.01 1214.62 L2030.43 1214.62 L2029.84 1214.62 L2029.25 1214.62 L2028.67 1214.62 L2028.08 1214.62 L2027.49 1214.62 L2026.91 1214.62 L2026.32 1214.62 L2025.73 1214.62 L2025.15 1214.62 L2024.56 1214.62 L2023.98 1214.62 L2023.39 1214.62 L2022.8 1214.62 L2022.22 1214.62 L2021.63 1214.62 L2021.04 1214.62 L2020.46 1214.62 L2019.87 1214.62 L2019.28 1214.62 L2018.7 1214.62 L2018.11 1214.62 L2017.53 1214.62 L2016.94 1214.62 L2016.35 1214.62 L2015.77 1214.62 L2015.18 1214.62 L2014.59 1214.62 L2014.01 1214.62 L2013.42 1214.62 L2012.83 1214.62 L2012.25 1214.62 L2011.66 1214.62 L2011.07 1214.62 L2010.49 1214.62 L2009.9 1214.62 L2009.32 1214.62 L2008.73 1214.62 L2008.14 1214.62 L2007.56 1214.62 L2006.97 1214.62 L2006.38 1214.62 L2005.8 1214.62 L2005.21 1214.62 L2004.62 1214.62 L2004.04 1214.62 L2003.45 1214.62 L2002.86 1214.62 L2002.28 1214.62 L2001.69 1214.62 L2001.11 1214.62 L2000.52 1214.62 L1999.93 1214.62 L1999.35 1214.62 L1998.76 1214.62 L1998.17 1214.62 L1997.59 1214.62 L1997 1214.62 L1996.41 1214.62 L1995.83 1214.62 L1995.24 1214.62 L1994.65 1214.62 L1994.07 1214.62 L1993.48 1214.62 L1992.9 1214.62 L1992.31 1214.62 L1991.72 1214.62 L1991.14 1214.62 L1990.55 1214.62 L1989.96 1214.62 L1989.38 1214.62 L1988.79 1214.62 L1988.2 1214.62 L1987.62 1214.62 L1987.03 1214.62 L1986.45 1214.62 L1985.86 1214.62 L1985.27 1214.62 L1984.69 1214.62 L1984.1 1214.62 L1983.51 1214.62 L1982.93 1214.62 L1982.34 1214.62 L1981.75 1214.62 L1981.17 1214.62 L1980.58 1214.62 L1979.99 1214.62 L1979.41 1214.62 L1978.82 1214.62 L1978.24 1214.62 L1977.65 1214.62 L1977.06 1214.62 L1976.48 1214.62 L1975.89 1214.62 L1975.3 1214.62 L1974.72 1214.62 L1974.13 1214.62 L1973.54 1214.62 L1972.96 1214.62 L1972.37 1214.62 L1971.78 1214.62 L1971.2 1214.62 L1970.61 1214.62 L1970.03 1214.62 L1969.44 1214.62 L1968.85 1214.62 L1968.27 1214.62 L1967.68 1214.62 L1967.09 1214.62 L1966.51 1214.62 L1965.92 1214.62 L1965.33 1214.62 L1964.75 1214.62 L1964.16 1214.62 L1963.58 1214.62 L1962.99 1214.62 L1962.4 1214.62 L1961.82 1214.62 L1961.23 1214.62 L1960.64 1214.62 L1960.06 1214.62 L1959.47 1214.62 L1958.88 1214.62 L1958.3 1214.62 L1957.71 1214.62 L1957.12 1214.62 L1956.54 1214.62 L1955.95 1214.62 L1955.37 1214.62 L1954.78 1214.62 L1954.19 1214.62 L1953.61 1214.62 L1953.02 1214.62 L1952.43 1214.62 L1951.85 1214.62 L1951.26 1214.62 L1950.67 1214.62 L1950.09 1214.62 L1949.5 1214.62 L1948.91 1214.62 L1948.33 1214.62 L1947.74 1214.62 L1947.16 1214.62 L1946.57 1214.62 L1945.98 1214.62 L1945.4 1214.62 L1944.81 1214.62 L1944.22 1214.62 L1943.64 1214.62 L1943.05 1214.62 L1942.46 1214.62 L1941.88 1214.62 L1941.29 1214.62 L1940.71 1214.62 L1940.12 1214.62 L1939.53 1214.62 L1938.95 1214.62 L1938.36 1214.62 L1937.77 1214.62 L1937.19 1214.62 L1936.6 1214.62 L1936.01 1214.62 L1935.43 1214.62 L1934.84 1214.62 L1934.25 1214.62 L1933.67 1214.62 L1933.08 1214.62 L1932.5 1214.62 L1931.91 1214.62 L1931.32 1214.62 L1930.74 1214.62 L1930.15 1214.62 L1929.56 1214.62 L1928.98 1214.62 L1928.39 1214.62 L1927.8 1214.62 L1927.22 1214.62 L1926.63 1214.62 L1926.04 1214.62 L1925.46 1214.62 L1924.87 1214.62 L1924.29 1214.62 L1923.7 1214.62 L1923.11 1214.62 L1922.53 1214.62 L1921.94 1214.62 L1921.35 1214.62 L1920.77 1214.62 L1920.18 1214.62 L1919.59 1214.62 L1919.01 1214.62 L1918.42 1214.62 L1917.83 1214.62 L1917.25 1214.62 L1916.66 1214.62 L1916.08 1214.62 L1915.49 1214.62 L1914.9 1214.62 L1914.32 1214.62 L1913.73 1214.62 L1913.14 1214.62 L1912.56 1214.62 L1911.97 1214.62 L1911.38 1214.62 L1910.8 1214.62 L1910.21 1214.62 L1909.63 1214.62 L1909.04 1214.62 L1908.45 1214.62 L1907.87 1214.62 L1907.28 1214.62 L1906.69 1214.62 L1906.11 1214.62 L1905.52 1214.62 L1904.93 1214.62 L1904.35 1214.62 L1903.76 1214.62 L1903.17 1214.62 L1902.59 1214.62 L1902 1214.62 L1901.42 1214.62 L1900.83 1214.62 L1900.24 1214.62 L1899.66 1214.62 L1899.07 1214.62 L1898.48 1214.62 L1897.9 1214.62 L1897.31 1214.62 L1896.72 1214.62 L1896.14 1214.62 L1895.55 1214.62 L1894.96 1214.62 L1894.38 1214.62 L1893.79 1214.62 L1893.21 1214.62 L1892.62 1214.62 L1892.03 1214.62 L1891.45 1214.62 L1890.86 1214.62 L1890.27 1214.62 L1889.69 1214.62 L1889.1 1214.62 L1888.51 1214.62 L1887.93 1214.62 L1887.34 1214.62 L1886.76 1214.62 L1886.17 1214.62 L1885.58 1214.62 L1885 1214.62 L1884.41 1214.62 L1883.82 1214.62 L1883.24 1214.62 L1882.65 1214.62 L1882.06 1214.62 L1881.48 1214.62 L1880.89 1214.62 L1880.3 1214.62 L1879.72 1214.62 L1879.13 1214.62 L1878.55 1214.62 L1877.96 1214.62 L1877.37 1214.62 L1876.79 1214.62 L1876.2 1214.62 L1875.61 1214.62 L1875.03 1214.62 L1874.44 1214.62 L1873.85 1214.62 L1873.27 1214.62 L1872.68 1214.62 L1872.09 1214.62 L1871.51 1214.62 L1870.92 1214.62 L1870.34 1214.62 L1869.75 1214.62 L1869.16 1214.62 L1868.58 1214.62 L1867.99 1214.62 L1867.4 1214.62 L1866.82 1214.62 L1866.23 1214.62 L1865.64 1214.62 L1865.06 1214.62 L1864.47 1214.62 L1863.88 1214.62 L1863.3 1214.62 L1862.71 1214.62 L1862.13 1214.62 L1861.54 1214.62 L1860.95 1214.62 L1860.37 1214.62 L1859.78 1214.62 L1859.19 1214.62 L1858.61 1214.62 L1858.02 1214.62 L1857.43 1214.62 L1856.85 1214.62 L1856.26 1214.62 L1855.68 1214.62 L1855.09 1214.62 L1854.5 1214.62 L1853.92 1214.62 L1853.33 1214.62 L1852.74 1214.62 L1852.16 1214.62 L1851.57 1214.62 L1850.98 1214.62 L1850.4 1214.62 L1849.81 1214.62 L1849.22 1214.62 L1848.64 1214.62 L1848.05 1214.62 L1847.47 1214.62 L1846.88 1214.62 L1846.29 1214.62 L1845.71 1214.62 L1845.12 1214.62 L1844.53 1214.62 L1843.95 1214.62 L1843.36 1214.62 L1842.77 1214.62 L1842.19 1214.62 L1841.6 1214.62 L1841.01 1214.62 L1840.43 1214.62 L1839.84 1214.62 L1839.26 1214.62 L1838.67 1214.62 L1838.08 1214.62 L1837.5 1214.62 L1836.91 1214.62 L1836.32 1214.62 L1835.74 1214.62 L1835.15 1214.62 L1834.56 1214.62 L1833.98 1214.62 L1833.39 1214.62 L1832.81 1214.62 L1832.22 1214.62 L1831.63 1214.62 L1831.05 1214.62 L1830.46 1214.62 L1829.87 1214.62 L1829.29 1214.62 L1828.7 1214.62 L1828.11 1214.62 L1827.53 1214.62 L1826.94 1214.62 L1826.35 1214.62 L1825.77 1214.62 L1825.18 1214.62 L1824.6 1214.62 L1824.01 1214.62 L1823.42 1214.62 L1822.84 1214.62 L1822.25 1214.62 L1821.66 1214.62 L1821.08 1214.62 L1820.49 1214.62 L1819.9 1214.62 L1819.32 1214.62 L1818.73 1214.62 L1818.14 1214.62 L1817.56 1214.62 L1816.97 1214.62 L1816.39 1214.62 L1815.8 1214.62 L1815.21 1214.62 L1814.63 1214.62 L1814.04 1214.62 L1813.45 1214.62 L1812.87 1214.62 L1812.28 1214.62 L1811.69 1214.62 L1811.11 1214.62 L1810.52 1214.62 L1809.94 1214.62 L1809.35 1214.62 L1808.76 1214.62 L1808.18 1214.62 L1807.59 1214.62 L1807 1214.62 L1806.42 1214.62 L1805.83 1214.62 L1805.24 1214.62 L1804.66 1214.62 L1804.07 1214.62 L1803.48 1214.62 L1802.9 1214.62 L1802.31 1214.62 L1801.73 1214.62 L1801.14 1214.62 L1800.55 1214.62 L1799.97 1214.62 L1799.38 1214.62 L1798.79 1214.62 L1798.21 1214.62 L1797.62 1214.62 L1797.03 1214.62 L1796.45 1214.62 L1795.86 1214.62 L1795.27 1214.62 L1794.69 1214.62 L1794.1 1214.62 L1793.52 1214.62 L1792.93 1214.62 L1792.34 1214.62 L1791.76 1214.62 L1791.17 1214.62 L1790.58 1214.62 L1790 1214.62 L1789.41 1214.62 L1788.82 1214.62 L1788.24 1214.62 L1787.65 1214.62 L1787.06 1214.62 L1786.48 1214.62 L1785.89 1214.62 L1785.31 1214.62 L1784.72 1214.62 L1784.13 1214.62 L1783.55 1214.62 L1782.96 1214.62 L1782.37 1214.62 L1781.79 1214.62 L1781.2 1214.62 L1780.61 1214.62 L1780.03 1214.62 L1779.44 1214.62 L1778.86 1214.62 L1778.27 1214.62 L1777.68 1214.62 L1777.1 1214.62 L1776.51 1214.62 L1775.92 1214.62 L1775.34 1214.62 L1774.75 1214.62 L1774.16 1214.62 L1773.58 1214.62 L1772.99 1214.62 L1772.4 1214.62 L1771.82 1214.62 L1771.23 1214.62 L1770.65 1214.62 L1770.06 1214.62 L1769.47 1214.62 L1768.89 1214.62 L1768.3 1214.62 L1767.71 1214.62 L1767.13 1214.62 L1766.54 1214.62 L1765.95 1214.62 L1765.37 1214.62 L1764.78 1214.62 L1764.19 1214.62 L1763.61 1214.62 L1763.02 1214.62 L1762.44 1214.62 L1761.85 1214.62 L1761.26 1214.62 L1760.68 1214.62 L1760.09 1214.62 L1759.5 1214.62 L1758.92 1214.62 L1758.33 1214.62 L1757.74 1214.62 L1757.16 1214.62 L1756.57 1214.62 L1755.99 1214.62 L1755.4 1214.62 L1754.81 1214.62 L1754.23 1214.62 L1753.64 1214.62 L1753.05 1214.62 L1752.47 1214.62 L1751.88 1214.62 L1751.29 1214.62 L1750.71 1214.62 L1750.12 1214.62 L1749.53 1214.62 L1748.95 1214.62 L1748.36 1214.62 L1747.78 1214.62 L1747.19 1214.62 L1746.6 1214.62 L1746.02 1214.62 L1745.43 1214.62 L1744.84 1214.62 L1744.26 1214.62 L1743.67 1214.62 L1743.08 1214.62 L1742.5 1214.62 L1741.91 1214.62 L1741.32 1214.62 L1740.74 1214.62 L1740.15 1214.62 L1739.57 1214.62 L1738.98 1214.62 L1738.39 1214.62 L1737.81 1214.62 L1737.22 1214.62 L1736.63 1214.62 L1736.05 1214.62 L1735.46 1214.62 L1734.87 1214.62 L1734.29 1214.62 L1733.7 1214.62 L1733.11 1214.62 L1732.53 1214.62 L1731.94 1214.62 L1731.36 1214.62 L1730.77 1214.62 L1730.18 1214.62 L1729.6 1214.62 L1729.01 1214.62 L1728.42 1214.62 L1727.84 1214.62 L1727.25 1214.62 L1726.66 1214.62 L1726.08 1214.62 L1725.49 1214.62 L1724.91 1214.62 L1724.32 1214.62 L1723.73 1214.62 L1723.15 1214.62 L1722.56 1214.62 L1721.97 1214.62 L1721.39 1214.62 L1720.8 1214.62 L1720.21 1214.62 L1719.63 1214.62 L1719.04 1214.62 L1718.45 1214.62 L1717.87 1214.62 L1717.28 1214.62 L1716.7 1214.62 L1716.11 1214.62 L1715.52 1214.62 L1714.94 1214.62 L1714.35 1214.62 L1713.76 1214.62 L1713.18 1214.62 L1712.59 1214.62 L1712 1214.62 L1711.42 1214.62 L1710.83 1214.62 L1710.24 1214.62 L1709.66 1214.62 L1709.07 1214.62 L1708.49 1214.62 L1707.9 1214.62 L1707.31 1214.62 L1706.73 1214.62 L1706.14 1214.62 L1705.55 1214.62 L1704.97 1214.62 L1704.38 1214.62 L1703.79 1214.62 L1703.21 1214.62 L1702.62 1214.62 L1702.04 1214.62 L1701.45 1214.62 L1700.86 1214.62 L1700.28 1214.62 L1699.69 1214.62 L1699.1 1214.62 L1698.52 1214.62 L1697.93 1214.62 L1697.34 1214.62 L1696.76 1214.62 L1696.17 1214.62 L1695.58 1214.62 L1695 1214.62 L1694.41 1214.62 L1693.83 1214.62 L1693.24 1214.62 L1692.65 1214.62 L1692.07 1214.62 L1691.48 1214.62 L1690.89 1214.62 L1690.31 1214.62 L1689.72 1214.62 L1689.13 1214.62 L1688.55 1214.62 L1687.96 1214.62 L1687.37 1214.62 L1686.79 1214.62 L1686.2 1214.62 L1685.62 1214.62 L1685.03 1214.62 L1684.44 1214.62 L1683.86 1214.62 L1683.27 1214.62 L1682.68 1214.62 L1682.1 1214.62 L1681.51 1214.62 L1680.92 1214.62 L1680.34 1214.62 L1679.75 1214.62 L1679.17 1214.62 L1678.58 1214.62 L1677.99 1214.62 L1677.41 1214.62 L1676.82 1214.62 L1676.23 1214.62 L1675.65 1214.62 L1675.06 1214.62 L1674.47 1214.62 L1673.89 1214.62 L1673.3 1214.62 L1672.71 1214.62 L1672.13 1214.62 L1671.54 1214.62 L1670.96 1214.62 L1670.37 1214.62 L1669.78 1214.62 L1669.2 1214.62 L1668.61 1214.62 L1668.02 1214.62 L1667.44 1214.62 L1666.85 1214.62 L1666.26 1214.62 L1665.68 1214.62 L1665.09 1214.62 L1664.5 1214.62 L1663.92 1214.62 L1663.33 1214.62 L1662.75 1214.62 L1662.16 1214.62 L1661.57 1214.62 L1660.99 1214.62 L1660.4 1214.62 L1659.81 1214.62 L1659.23 1214.62 L1658.64 1214.62 L1658.05 1214.62 L1657.47 1214.62 L1656.88 1214.62 L1656.29 1214.62 L1655.71 1214.62 L1655.12 1214.62 L1654.54 1214.62 L1653.95 1214.62 L1653.36 1214.62 L1652.78 1214.62 L1652.19 1214.62 L1651.6 1214.62 L1651.02 1214.62 L1650.43 1214.62 L1649.84 1214.62 L1649.26 1214.62 L1648.67 1214.62 L1648.09 1214.62 L1647.5 1214.62 L1646.91 1214.62 L1646.33 1214.62 L1645.74 1214.62 L1645.15 1214.62 L1644.57 1214.62 L1643.98 1214.62 L1643.39 1214.62 L1642.81 1214.62 L1642.22 1214.62 L1641.63 1214.62 L1641.05 1214.62 L1640.46 1214.62 L1639.88 1214.62 L1639.29 1214.62 L1638.7 1214.62 L1638.12 1214.62 L1637.53 1214.62 L1636.94 1214.62 L1636.36 1214.62 L1635.77 1214.62 L1635.18 1214.62 L1634.6 1214.62 L1634.01 1214.62 L1633.42 1214.62 L1632.84 1214.62 L1632.25 1214.62 L1631.67 1214.62 L1631.08 1214.62 L1630.49 1214.62 L1629.91 1214.62 L1629.32 1214.62 L1628.73 1214.62 L1628.15 1214.62 L1627.56 1214.62 L1626.97 1214.62 L1626.39 1214.62 L1625.8 1214.62 L1625.22 1214.62 L1624.63 1214.62 L1624.04 1214.62 L1623.46 1214.62 L1622.87 1214.62 L1622.28 1214.62 L1621.7 1214.62 L1621.11 1214.62 L1620.52 1214.62 L1619.94 1214.62 L1619.35 1214.62 L1618.76 1214.62 L1618.18 1214.62 L1617.59 1214.62 L1617.01 1214.62 L1616.42 1214.62 L1615.83 1214.62 L1615.25 1214.62 L1614.66 1214.62 L1614.07 1214.62 L1613.49 1214.62 L1612.9 1214.62 L1612.31 1214.62 L1611.73 1214.62 L1611.14 1214.62 L1610.55 1214.62 L1609.97 1214.62 L1609.38 1214.62 L1608.8 1214.62 L1608.21 1214.62 L1607.62 1214.62 L1607.04 1214.62 L1606.45 1214.62 L1605.86 1214.62 L1605.28 1214.62 L1604.69 1214.62 L1604.1 1214.62 L1603.52 1214.62 L1602.93 1214.62 L1602.34 1214.62 L1601.76 1214.62 L1601.17 1214.62 L1600.59 1214.62 L1600 1214.62 L1599.41 1214.62 L1598.83 1214.62 L1598.24 1214.62 L1597.65 1214.62 L1597.07 1214.62 L1596.48 1214.62 L1595.89 1214.62 L1595.31 1214.62 L1594.72 1214.62 L1594.14 1214.62 L1593.55 1214.62 L1592.96 1214.62 L1592.38 1214.62 L1591.79 1214.62 L1591.2 1214.62 L1590.62 1214.62 L1590.03 1214.62 L1589.44 1214.62 L1588.86 1214.62 L1588.27 1214.62 L1587.68 1214.62 L1587.1 1214.62 L1586.51 1214.62 L1585.93 1214.62 L1585.34 1214.62 L1584.75 1214.62 L1584.17 1214.62 L1583.58 1214.62 L1582.99 1214.62 L1582.41 1214.62 L1581.82 1214.62 L1581.23 1214.62 L1580.65 1214.62 L1580.06 1214.62 L1579.47 1214.62 L1578.89 1214.62 L1578.3 1214.62 L1577.72 1214.62 L1577.13 1214.62 L1576.54 1214.62 L1575.96 1214.62 L1575.37 1214.62 L1574.78 1214.62 L1574.2 1214.62 L1573.61 1214.62 L1573.02 1214.62 L1572.44 1214.62 L1571.85 1214.62 L1571.27 1214.62 L1570.68 1214.62 L1570.09 1214.62 L1569.51 1214.62 L1568.92 1214.62 L1568.33 1214.62 L1567.75 1214.62 L1567.16 1214.62 L1566.57 1214.62 L1565.99 1214.62 L1565.4 1214.62 L1564.81 1214.62 L1564.23 1214.62 L1563.64 1214.62 L1563.06 1214.62 L1562.47 1214.62 L1561.88 1214.62 L1561.3 1214.62 L1560.71 1214.62 L1560.12 1214.62 L1559.54 1214.62 L1558.95 1214.62 L1558.36 1214.62 L1557.78 1214.62 L1557.19 1214.62 L1556.6 1214.62 L1556.02 1214.62 L1555.43 1214.62 L1554.85 1214.62 L1554.26 1214.62 L1553.67 1214.62 L1553.09 1214.62 L1552.5 1214.62 L1551.91 1214.62 L1551.33 1214.62 L1550.74 1214.62 L1550.15 1214.62 L1549.57 1214.62 L1548.98 1214.62 L1548.4 1214.62 L1547.81 1214.62 L1547.22 1214.62 L1546.64 1214.62 L1546.05 1214.62 L1545.46 1214.62 L1544.88 1214.62 L1544.29 1214.62 L1543.7 1214.62 L1543.12 1214.62 L1542.53 1214.62 L1541.94 1214.62 L1541.36 1214.62 L1540.77 1214.62 L1540.19 1214.62 L1539.6 1214.62 L1539.01 1214.62 L1538.43 1214.62 L1537.84 1214.62 L1537.25 1214.62 L1536.67 1214.62 L1536.08 1214.62 L1535.49 1214.62 L1534.91 1214.62 L1534.32 1214.62 L1533.73 1214.62 L1533.15 1214.62 L1532.56 1214.62 L1531.98 1214.62 L1531.39 1214.62 L1530.8 1214.62 L1530.22 1214.62 L1529.63 1214.62 L1529.04 1214.62 L1528.46 1214.62 L1527.87 1214.62 L1527.28 1214.62 L1526.7 1214.62 L1526.11 1214.62 L1525.52 1214.62 L1524.94 1214.62 L1524.35 1214.62 L1523.77 1214.62 L1523.18 1214.62 L1522.59 1214.62 L1522.01 1214.62 L1521.42 1214.62 L1520.83 1214.62 L1520.25 1214.62 L1519.66 1214.62 L1519.07 1214.62 L1518.49 1214.62 L1517.9 1214.62 L1517.32 1214.62 L1516.73 1214.62 L1516.14 1214.62 L1515.56 1214.62 L1514.97 1214.62 L1514.38 1214.62 L1513.8 1214.62 L1513.21 1214.62 L1512.62 1214.62 L1512.04 1214.62 L1511.45 1214.62 L1510.86 1214.62 L1510.28 1214.62 L1509.69 1214.62 L1509.11 1214.62 L1508.52 1214.62 L1507.93 1214.62 L1507.35 1214.62 L1506.76 1214.62 L1506.17 1214.62 L1505.59 1214.62 L1505 1214.62 L1504.41 1214.62 L1503.83 1214.62 L1503.24 1214.62 L1502.65 1214.62 L1502.07 1214.62 L1501.48 1214.62 L1500.9 1214.62 L1500.31 1214.62 L1499.72 1214.62 L1499.14 1214.62 L1498.55 1214.62 L1497.96 1214.62 L1497.38 1214.62 L1496.79 1214.62 L1496.2 1214.62 L1495.62 1214.62 L1495.03 1214.62 L1494.45 1214.62 L1493.86 1214.62 L1493.27 1214.62 L1492.69 1214.62 L1492.1 1214.62 L1491.51 1214.62 L1490.93 1214.62 L1490.34 1214.62 L1489.75 1214.62 L1489.17 1214.62 L1488.58 1214.62 L1487.99 1214.62 L1487.41 1214.62 L1486.82 1214.62 L1486.24 1214.62 L1485.65 1214.62 L1485.06 1214.62 L1484.48 1214.62 L1483.89 1214.62 L1483.3 1214.62 L1482.72 1214.62 L1482.13 1214.62 L1481.54 1214.62 L1480.96 1214.62 L1480.37 1214.62 L1479.78 1214.62 L1479.2 1214.62 L1478.61 1214.62 L1478.03 1214.62 L1477.44 1214.62 L1476.85 1214.62 L1476.27 1214.62 L1475.68 1214.62 L1475.09 1214.62 L1474.51 1214.62 L1473.92 1214.62 L1473.33 1214.62 L1472.75 1214.62 L1472.16 1214.62 L1471.57 1214.62 L1470.99 1214.62 L1470.4 1214.62 L1469.82 1214.62 L1469.23 1214.62 L1468.64 1214.62 L1468.06 1214.62 L1467.47 1214.62 L1466.88 1214.62 L1466.3 1214.62 L1465.71 1214.62 L1465.12 1214.62 L1464.54 1214.62 L1463.95 1214.62 L1463.37 1214.62 L1462.78 1214.62 L1462.19 1214.62 L1461.61 1214.62 L1461.02 1214.62 L1460.43 1214.62 L1459.85 1214.62 L1459.26 1214.62 L1458.67 1214.62 L1458.09 1214.62 L1457.5 1214.62 L1456.91 1214.62 L1456.33 1214.62 L1455.74 1214.62 L1455.16 1214.62 L1454.57 1214.62 L1453.98 1214.62 L1453.4 1214.62 L1452.81 1214.62 L1452.22 1214.62 L1451.64 1214.62 L1451.05 1214.62 L1450.46 1214.62 L1449.88 1214.62 L1449.29 1214.62 L1448.7 1214.62 L1448.12 1214.62 L1447.53 1214.62 L1446.95 1214.62 L1446.36 1214.62 L1445.77 1214.62 L1445.19 1214.62 L1444.6 1214.62 L1444.01 1214.62 L1443.43 1214.62 L1442.84 1214.62 L1442.25 1214.62 L1441.67 1214.62 L1441.08 1214.62 L1440.5 1214.62 L1439.91 1214.62 L1439.32 1214.62 L1438.74 1214.62 L1438.15 1214.62 L1437.56 1214.62 L1436.98 1214.62 L1436.39 1214.62 L1435.8 1214.62 L1435.22 1214.62 L1434.63 1214.62 L1434.04 1214.62 L1433.46 1214.62 L1432.87 1214.62 L1432.29 1214.62 L1431.7 1214.62 L1431.11 1214.62 L1430.53 1214.62 L1429.94 1214.62 L1429.35 1214.62 L1428.77 1214.62 L1428.18 1214.62 L1427.59 1214.62 L1427.01 1214.62 L1426.42 1214.62 L1425.83 1214.62 L1425.25 1214.62 L1424.66 1214.62 L1424.08 1214.62 L1423.49 1214.62 L1422.9 1214.62 L1422.32 1214.62 L1421.73 1214.62 L1421.14 1214.62 L1420.56 1214.62 L1419.97 1214.62 L1419.38 1214.62 L1418.8 1214.62 L1418.21 1214.62 L1417.63 1214.62 L1417.04 1214.62 L1416.45 1214.62 L1415.87 1214.62 L1415.28 1214.62 L1414.69 1214.62 L1414.11 1214.62 L1413.52 1214.62 L1412.93 1214.62 L1412.35 1214.62 L1411.76 1214.62 L1411.17 1214.62 L1410.59 1214.62 L1410 1214.62 L1409.42 1214.62 L1408.83 1214.62 L1408.24 1214.62 L1407.66 1214.62 L1407.07 1214.62 L1406.48 1214.62 L1405.9 1214.62 L1405.31 1214.62 L1404.72 1214.62 L1404.14 1214.62 L1403.55 1214.62 L1402.96 1214.62 L1402.38 1214.62 L1401.79 1214.62 L1401.21 1214.62 L1400.62 1214.62 L1400.03 1214.62 L1399.45 1214.62 L1398.86 1214.62 L1398.27 1214.62 L1397.69 1214.62 L1397.1 1214.62 L1396.51 1214.62 L1395.93 1214.62 L1395.34 1214.62 L1394.75 1214.62 L1394.17 1214.62 L1393.58 1214.62 L1393 1214.62 L1392.41 1214.62 L1391.82 1214.62 L1391.24 1214.62 L1390.65 1214.62 L1390.06 1214.62 L1389.48 1214.62 L1388.89 1214.62 L1388.3 1214.62 L1387.72 1214.62 L1387.13 1214.62 L1386.55 1214.62 L1385.96 1214.62 L1385.37 1214.62 L1384.79 1214.62 L1384.2 1214.62 L1383.61 1214.62 L1383.03 1214.62 L1382.44 1214.62 L1381.85 1214.62 L1381.27 1214.62 L1380.68 1214.62 L1380.09 1214.62 L1379.51 1214.62 L1378.92 1214.62 L1378.34 1214.62 L1377.75 1214.62 L1377.16 1214.62 L1376.58 1214.62 L1375.99 1214.62 L1375.4 1214.62 L1374.82 1214.62 L1374.23 1214.62 L1373.64 1214.62 L1373.06 1214.62 L1372.47 1214.62 L1371.88 1214.62 L1371.3 1214.62 L1370.71 1214.62 L1370.13 1214.62 L1369.54 1214.62 L1368.95 1214.62 L1368.37 1214.62 L1367.78 1214.62 L1367.19 1214.62 L1366.61 1214.62 L1366.02 1214.62 L1365.43 1214.62 L1364.85 1214.62 L1364.26 1214.62 L1363.68 1214.62 L1363.09 1214.62 L1362.5 1214.62 L1361.92 1214.62 L1361.33 1214.62 L1360.74 1214.62 L1360.16 1214.62 L1359.57 1214.62 L1358.98 1214.62 L1358.4 1214.62 L1357.81 1214.62 L1357.22 1214.62 L1356.64 1214.62 L1356.05 1214.62 L1355.47 1214.62 L1354.88 1214.62 L1354.29 1214.62 L1353.71 1214.62 L1353.12 1214.62 L1352.53 1214.62 L1351.95 1214.62 L1351.36 1214.62 L1350.77 1214.62 L1350.19 1214.62 L1349.6 1214.62 L1349.01 1214.62 L1348.43 1214.62 L1347.84 1214.62 L1347.26 1214.62 L1346.67 1214.62 L1346.08 1214.62 L1345.5 1214.62 L1344.91 1214.62 L1344.32 1214.62 L1343.74 1214.62 L1343.15 1214.62 L1342.56 1214.62 L1341.98 1214.62 L1341.39 1214.62 L1340.8 1214.62 L1340.22 1214.62 L1339.63 1214.62 L1339.05 1214.62 L1338.46 1214.62 L1337.87 1214.62 L1337.29 1214.62 L1336.7 1214.62 L1336.11 1214.62 L1335.53 1214.62 L1334.94 1214.62 L1334.35 1214.62 L1333.77 1214.62 L1333.18 1214.62 L1332.6 1214.62 L1332.01 1214.62 L1331.42 1214.62 L1330.84 1214.62 L1330.25 1214.62 L1329.66 1214.62 L1329.08 1214.62 L1328.49 1214.62 L1327.9 1214.62 L1327.32 1214.62 L1326.73 1214.62 L1326.14 1214.62 L1325.56 1214.62 L1324.97 1214.62 L1324.39 1214.62 L1323.8 1214.62 L1323.21 1214.62 L1322.63 1214.62 L1322.04 1214.62 L1321.45 1214.62 L1320.87 1214.62 L1320.28 1214.62 L1319.69 1214.62 L1319.11 1214.62 L1318.52 1214.62 L1317.93 1214.62 L1317.35 1214.62 L1316.76 1214.62 L1316.18 1214.62 L1315.59 1214.62 L1315 1214.62 L1314.42 1214.62 L1313.83 1214.62 L1313.24 1214.62 L1312.66 1214.62 L1312.07 1214.62 L1311.48 1214.62 L1310.9 1214.62 L1310.31 1214.62 L1309.73 1214.62 L1309.14 1214.62 L1308.55 1214.62 L1307.97 1214.62 L1307.38 1214.62 L1306.79 1214.62 L1306.21 1214.62 L1305.62 1214.62 L1305.03 1214.62 L1304.45 1214.62 L1303.86 1214.62 L1303.27 1214.62 L1302.69 1214.62 L1302.1 1214.62 L1301.52 1214.62 L1300.93 1214.62 L1300.34 1214.62 L1299.76 1214.62 L1299.17 1214.62 L1298.58 1214.62 L1298 1214.62 L1297.41 1214.62 L1296.82 1214.62 L1296.24 1214.62 L1295.65 1214.62 L1295.06 1214.62 L1294.48 1214.62 L1293.89 1214.62 L1293.31 1214.62 L1292.72 1214.62 L1292.13 1214.62 L1291.55 1214.62 L1290.96 1214.62 L1290.37 1214.62 L1289.79 1214.62 L1289.2 1214.62 L1288.61 1214.62 L1288.03 1214.62 L1287.44 1214.62 L1286.86 1214.62 L1286.27 1214.62 L1285.68 1214.62 L1285.1 1214.62 L1284.51 1214.62 L1283.92 1214.62 L1283.34 1214.62 L1282.75 1214.62 L1282.16 1214.62 L1281.58 1214.62 L1280.99 1214.62 L1280.4 1214.62 L1279.82 1214.62 L1279.23 1214.62 L1278.65 1214.62 L1278.06 1214.62 L1277.47 1214.62 L1276.89 1214.62 L1276.3 1214.62 L1275.71 1214.62 L1275.13 1214.62 L1274.54 1214.62 L1273.95 1214.62 L1273.37 1214.62 L1272.78 1214.62 L1272.19 1214.62 L1271.61 1214.62 L1271.02 1214.62 L1270.44 1214.62 L1269.85 1214.62 L1269.26 1214.62 L1268.68 1214.62 L1268.09 1214.62 L1267.5 1214.62 L1266.92 1214.62 L1266.33 1214.62 L1265.74 1214.62 L1265.16 1214.62 L1264.57 1214.62 L1263.98 1214.62 L1263.4 1214.62 L1262.81 1214.62 L1262.23 1214.62 L1261.64 1214.62 L1261.05 1214.62 L1260.47 1214.62 L1259.88 1214.62 L1259.29 1214.62 L1258.71 1214.62 L1258.12 1214.62 L1257.53 1214.62 L1256.95 1214.62 L1256.36 1214.62 L1255.78 1214.62 L1255.19 1214.62 L1254.6 1214.62 L1254.02 1214.62 L1253.43 1214.62 L1252.84 1214.62 L1252.26 1214.62 L1251.67 1214.62 L1251.08 1214.62 L1250.5 1214.62 L1249.91 1214.62 L1249.32 1214.62 L1248.74 1214.62 L1248.15 1214.62 L1247.57 1214.62 L1246.98 1214.62 L1246.39 1214.62 L1245.81 1214.62 L1245.22 1214.62 L1244.63 1214.62 L1244.05 1214.62 L1243.46 1214.62 L1242.87 1214.62 L1242.29 1214.62 L1241.7 1214.62 L1241.11 1214.62 L1240.53 1214.62 L1239.94 1214.62 L1239.36 1214.62 L1238.77 1214.62 L1238.18 1214.62 L1237.6 1214.62 L1237.01 1214.62 L1236.42 1214.62 L1235.84 1214.62 L1235.25 1214.62 L1234.66 1214.62 L1234.08 1214.62 L1233.49 1214.62 L1232.91 1214.62 L1232.32 1214.62 L1231.73 1214.62 L1231.15 1214.62 L1230.56 1214.62 L1229.97 1214.62 L1229.39 1214.62 L1228.8 1214.62 L1228.21 1214.62 L1227.63 1214.62 L1227.04 1214.62 L1226.45 1214.62 L1225.87 1214.62 L1225.28 1214.62 L1224.7 1214.62 L1224.11 1214.62 L1223.52 1214.62 L1222.94 1214.62 L1222.35 1214.62 L1221.76 1214.62 L1221.18 1214.62 L1220.59 1214.62 L1220 1214.62 L1219.42 1214.62 L1218.83 1214.62 L1218.24 1214.62 L1217.66 1214.62 L1217.07 1214.62 L1216.49 1214.62 L1215.9 1214.62 L1215.31 1214.62 L1214.73 1214.62 L1214.14 1214.62 L1213.55 1214.62 L1212.97 1214.62 L1212.38 1214.62 L1211.79 1214.62 L1211.21 1214.62 L1210.62 1214.62 L1210.03 1214.62 L1209.45 1214.62 L1208.86 1214.62 L1208.28 1214.62 L1207.69 1214.62 L1207.1 1214.62 L1206.52 1214.62 L1205.93 1214.62 L1205.34 1214.62 L1204.76 1214.62 L1204.17 1214.62 L1203.58 1214.62 L1203 1214.62 L1202.41 1214.62 L1201.83 1214.62 L1201.24 1214.62 L1200.65 1214.62 L1200.07 1214.62 L1199.48 1214.62 L1198.89 1214.62 L1198.31 1214.62 L1197.72 1214.62 L1197.13 1214.62 L1196.55 1214.62 L1195.96 1214.62 L1195.37 1214.62 L1194.79 1214.62 L1194.2 1214.62 L1193.62 1214.62 L1193.03 1214.62 L1192.44 1214.62 L1191.86 1214.62 L1191.27 1214.62 L1190.68 1214.62 L1190.1 1214.62 L1189.51 1214.62 L1188.92 1214.62 L1188.34 1214.62 L1187.75 1214.62 L1187.16 1214.62 L1186.58 1214.62 L1185.99 1214.62 L1185.41 1214.62 L1184.82 1214.62 L1184.23 1214.62 L1183.65 1214.62 L1183.06 1214.62 L1182.47 1214.62 L1181.89 1214.62 L1181.3 1214.62 L1180.71 1214.62 L1180.13 1214.62 L1179.54 1214.62 L1178.96 1214.62 L1178.37 1214.62 L1177.78 1214.62 L1177.2 1214.62 L1176.61 1214.62 L1176.02 1214.62 L1175.44 1214.62 L1174.85 1214.62 L1174.26 1214.62 L1173.68 1214.62 L1173.09 1214.62 L1172.5 1214.62 L1171.92 1214.62 L1171.33 1214.62 L1170.75 1214.62 L1170.16 1214.62 L1169.57 1214.62 L1168.99 1214.62 L1168.4 1214.62 L1167.81 1214.62 L1167.23 1214.62 L1166.64 1214.62 L1166.05 1214.62 L1165.47 1214.62 L1164.88 1214.62 L1164.29 1214.62 L1163.71 1214.62 L1163.12 1214.62 L1162.54 1214.62 L1161.95 1214.62 L1161.36 1214.62 L1160.78 1214.62 L1160.19 1214.62 L1159.6 1214.62 L1159.02 1214.62 L1158.43 1214.62 L1157.84 1214.62 L1157.26 1214.62 L1156.67 1214.62 L1156.09 1214.62 L1155.5 1214.62 L1154.91 1214.62 L1154.33 1214.62 L1153.74 1214.62 L1153.15 1214.62 L1152.57 1214.62 L1151.98 1214.62 L1151.39 1214.62 L1150.81 1214.62 L1150.22 1214.62 L1149.63 1214.62 L1149.05 1214.62 L1148.46 1214.62 L1147.88 1214.62 L1147.29 1214.62 L1146.7 1214.62 L1146.12 1214.62 L1145.53 1214.62 L1144.94 1214.62 L1144.36 1214.62 L1143.77 1214.62 L1143.18 1214.62 L1142.6 1214.62 L1142.01 1214.62 L1141.42 1214.62 L1140.84 1214.62 L1140.25 1214.62 L1139.67 1214.62 L1139.08 1214.62 L1138.49 1214.62 L1137.91 1214.62 L1137.32 1214.62 L1136.73 1214.62 L1136.15 1214.62 L1135.56 1214.62 L1134.97 1214.62 L1134.39 1214.62 L1133.8 1214.62 L1133.21 1214.62 L1132.63 1214.62 L1132.04 1214.62 L1131.46 1214.62 L1130.87 1214.62 L1130.28 1214.62 L1129.7 1214.62 L1129.11 1214.62 L1128.52 1214.62 L1127.94 1214.62 L1127.35 1214.62 L1126.76 1214.62 L1126.18 1214.62 L1125.59 1214.62 L1125.01 1214.62 L1124.42 1214.62 L1123.83 1214.62 L1123.25 1214.62 L1122.66 1214.62 L1122.07 1214.62 L1121.49 1214.62 L1120.9 1214.62 L1120.31 1214.62 L1119.73 1214.62 L1119.14 1214.62 L1118.55 1214.62 L1117.97 1214.62 L1117.38 1214.62 L1116.8 1214.62 L1116.21 1214.62 L1115.62 1214.62 L1115.04 1214.62 L1114.45 1214.62 L1113.86 1214.62 L1113.28 1214.62 L1112.69 1214.62 L1112.1 1214.62 L1111.52 1214.62 L1110.93 1214.62 L1110.34 1214.62 L1109.76 1214.62 L1109.17 1214.62 L1108.59 1214.62 L1108 1214.62 L1107.41 1214.62 L1106.83 1214.62 L1106.24 1214.62 L1105.65 1214.62 L1105.07 1214.62 L1104.48 1214.62 L1103.89 1214.62 L1103.31 1214.62 L1102.72 1214.62 L1102.14 1214.62 L1101.55 1214.62 L1100.96 1214.62 L1100.38 1214.62 L1099.79 1214.62 L1099.2 1214.62 L1098.62 1214.62 L1098.03 1214.62 L1097.44 1214.62 L1096.86 1214.62 L1096.27 1214.62 L1095.68 1214.62 L1095.1 1214.62 L1094.51 1214.62 L1093.93 1214.62 L1093.34 1214.62 L1092.75 1214.62 L1092.17 1214.62 L1091.58 1214.62 L1090.99 1214.62 L1090.41 1214.62 L1089.82 1214.62 L1089.23 1214.62 L1088.65 1214.62 L1088.06 1214.62 L1087.47 1214.62 L1086.89 1214.62 L1086.3 1214.62 L1085.72 1214.62 L1085.13 1214.62 L1084.54 1214.62 L1083.96 1214.62 L1083.37 1214.62 L1082.78 1214.62 L1082.2 1214.62 L1081.61 1214.62 L1081.02 1214.62 L1080.44 1214.62 L1079.85 1214.62 L1079.26 1214.62 L1078.68 1214.62 L1078.09 1214.62 L1077.51 1214.62 L1076.92 1214.62 L1076.33 1214.62 L1075.75 1214.62 L1075.16 1214.62 L1074.57 1214.62 L1073.99 1214.62 L1073.4 1214.62 L1072.81 1214.62 L1072.23 1214.62 L1071.64 1214.62 L1071.06 1214.62 L1070.47 1214.62 L1069.88 1214.62 L1069.3 1214.62 L1068.71 1214.62 L1068.12 1214.62 L1067.54 1214.62 L1066.95 1214.62 L1066.36 1214.62 L1065.78 1214.62 L1065.19 1214.62 L1064.6 1214.62 L1064.02 1214.62 L1063.43 1214.62 L1062.85 1214.62 L1062.26 1214.62 L1061.67 1214.62 L1061.09 1214.62 L1060.5 1214.62 L1059.91 1214.62 L1059.33 1214.62 L1058.74 1214.62 L1058.15 1214.62 L1057.57 1214.62 L1056.98 1214.62 L1056.39 1214.62 L1055.81 1214.62 L1055.22 1214.62 L1054.64 1214.62 L1054.05 1214.62 L1053.46 1214.62 L1052.88 1214.62 L1052.29 1214.62 L1051.7 1214.62 L1051.12 1214.62 L1050.53 1214.62 L1049.94 1214.62 L1049.36 1214.62 L1048.77 1214.62 L1048.19 1214.62 L1047.6 1214.62 L1047.01 1214.62 L1046.43 1214.62 L1045.84 1214.62 L1045.25 1214.62 L1044.67 1214.62 L1044.08 1214.62 L1043.49 1214.62 L1042.91 1214.62 L1042.32 1214.62 L1041.73 1214.62 L1041.15 1214.62 L1040.56 1214.62 L1039.98 1214.62 L1039.39 1214.62 L1038.8 1214.62 L1038.22 1214.62 L1037.63 1214.62 L1037.04 1214.62 L1036.46 1214.62 L1035.87 1214.62 L1035.28 1214.62 L1034.7 1214.62 L1034.11 1214.62 L1033.52 1214.62 L1032.94 1214.62 L1032.35 1214.62 L1031.77 1214.62 L1031.18 1214.62 L1030.59 1214.62 L1030.01 1214.62 L1029.42 1214.62 L1028.83 1214.62 L1028.25 1214.62 L1027.66 1214.62 L1027.07 1214.62 L1026.49 1214.62 L1025.9 1214.62 L1025.32 1214.62 L1024.73 1214.62 L1024.14 1214.62 L1023.56 1214.62 L1022.97 1214.62 L1022.38 1214.62 L1021.8 1214.62 L1021.21 1214.62 L1020.62 1214.62 L1020.04 1214.62 L1019.45 1214.62 L1018.86 1214.62 L1018.28 1214.62 L1017.69 1214.62 L1017.11 1214.62 L1016.52 1214.62 L1015.93 1214.62 L1015.35 1214.62 L1014.76 1214.62 L1014.17 1214.62 L1013.59 1214.62 L1013 1214.62 L1012.41 1214.62 L1011.83 1214.62 L1011.24 1214.62 L1010.65 1214.62 L1010.07 1214.62 L1009.48 1214.62 L1008.9 1214.62 L1008.31 1214.62 L1007.72 1214.62 L1007.14 1214.62 L1006.55 1214.62 L1005.96 1214.62 L1005.38 1214.62 L1004.79 1214.62 L1004.2 1214.62 L1003.62 1214.62 L1003.03 1214.62 L1002.44 1214.62 L1001.86 1214.62 L1001.27 1214.62 L1000.69 1214.62 L1000.1 1214.62 L999.513 1214.62 L998.926 1214.62 L998.34 1214.62 L997.754 1214.62 L997.167 1214.62 L996.581 1214.62 L995.994 1214.62 L995.408 1214.62 L994.822 1214.62 L994.235 1214.62 L993.649 1214.62 L993.062 1214.62 L992.476 1214.62 L991.889 1214.62 L991.303 1214.62 L990.717 1214.62 L990.13 1214.62 L989.544 1214.62 L988.957 1214.62 L988.371 1214.62 L987.785 1214.62 L987.198 1214.62 L986.612 1214.62 L986.025 1214.62  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.67 986.612,1214.67 987.198,1214.67 987.785,1214.67 988.371,1214.67 988.957,1214.67 989.544,1214.67 990.13,1214.67 990.717,1214.67 991.303,1214.67 991.889,1214.67 992.476,1214.67 993.062,1214.67 993.649,1214.67 994.235,1214.67 994.822,1214.67 995.408,1214.67 995.994,1214.67 996.581,1214.67 997.167,1214.67 997.754,1214.67 998.34,1214.67 998.926,1214.67 999.513,1214.67 1000.1,1214.67 1000.69,1214.67 1001.27,1214.67 1001.86,1214.67 1002.44,1214.67 1003.03,1214.67 1003.62,1214.67 1004.2,1214.67 1004.79,1214.67 1005.38,1214.67 1005.96,1214.67 1006.55,1214.67 1007.14,1214.67 1007.72,1214.67 1008.31,1214.67 1008.9,1214.67 1009.48,1214.67 1010.07,1214.67 1010.65,1214.67 1011.24,1214.67 1011.83,1214.67 1012.41,1214.67 1013,1214.67 1013.59,1214.67 1014.17,1214.67 1014.76,1214.67 1015.35,1214.67 1015.93,1214.67 1016.52,1214.67 1017.11,1214.67 1017.69,1214.67 1018.28,1214.67 1018.86,1214.67 1019.45,1214.67 1020.04,1214.67 1020.62,1214.67 1021.21,1214.67 1021.8,1214.67 1022.38,1214.67 1022.97,1214.67 1023.56,1214.67 1024.14,1214.67 1024.73,1214.67 1025.32,1214.67 1025.9,1214.67 1026.49,1214.67 1027.07,1214.67 1027.66,1214.67 1028.25,1214.67 1028.83,1214.67 1029.42,1214.67 1030.01,1214.67 1030.59,1214.67 1031.18,1214.67 1031.77,1214.67 1032.35,1214.67 1032.94,1214.67 1033.52,1214.67 1034.11,1214.67 1034.7,1214.67 1035.28,1214.67 1035.87,1214.67 1036.46,1214.67 1037.04,1214.67 1037.63,1214.67 1038.22,1214.67 1038.8,1214.67 1039.39,1214.67 1039.98,1214.67 1040.56,1214.67 1041.15,1214.67 1041.73,1214.67 1042.32,1214.67 1042.91,1214.67 1043.49,1214.67 1044.08,1214.67 1044.67,1214.67 1045.25,1214.67 1045.84,1214.67 1046.43,1214.67 1047.01,1214.67 1047.6,1214.67 1048.19,1214.67 1048.77,1214.67 1049.36,1214.67 1049.94,1214.67 1050.53,1214.67 1051.12,1214.67 1051.7,1214.67 1052.29,1214.67 1052.88,1214.67 1053.46,1214.67 1054.05,1214.67 1054.64,1214.67 1055.22,1214.67 1055.81,1214.67 1056.39,1214.67 1056.98,1214.67 1057.57,1214.67 1058.15,1214.67 1058.74,1214.67 1059.33,1214.67 1059.91,1214.67 1060.5,1214.67 1061.09,1214.67 1061.67,1214.67 1062.26,1214.67 1062.85,1214.67 1063.43,1214.67 1064.02,1214.67 1064.6,1214.67 1065.19,1214.67 1065.78,1214.67 1066.36,1214.67 1066.95,1214.67 1067.54,1214.67 1068.12,1214.67 1068.71,1214.67 1069.3,1214.67 1069.88,1214.67 1070.47,1214.67 1071.06,1214.67 1071.64,1214.67 1072.23,1214.67 1072.81,1214.67 1073.4,1214.67 1073.99,1214.67 1074.57,1214.67 1075.16,1214.67 1075.75,1214.67 1076.33,1214.67 1076.92,1214.67 1077.51,1214.67 1078.09,1214.67 1078.68,1214.67 1079.26,1214.67 1079.85,1214.67 1080.44,1214.67 1081.02,1214.67 1081.61,1214.67 1082.2,1214.67 1082.78,1214.67 1083.37,1214.67 1083.96,1214.67 1084.54,1214.67 1085.13,1214.67 1085.72,1214.67 1086.3,1214.67 1086.89,1214.67 1087.47,1214.67 1088.06,1214.67 1088.65,1214.67 1089.23,1214.67 1089.82,1214.67 1090.41,1214.67 1090.99,1214.67 1091.58,1214.67 1092.17,1214.67 1092.75,1214.67 1093.34,1214.67 1093.93,1214.67 1094.51,1214.67 1095.1,1214.67 1095.68,1214.67 1096.27,1214.67 1096.86,1214.67 1097.44,1214.67 1098.03,1214.67 1098.62,1214.67 1099.2,1214.67 1099.79,1214.67 1100.38,1214.67 1100.96,1214.67 1101.55,1214.67 1102.14,1214.67 1102.72,1214.67 1103.31,1214.67 1103.89,1214.67 1104.48,1214.67 1105.07,1214.67 1105.65,1214.67 1106.24,1214.67 1106.83,1214.67 1107.41,1214.67 1108,1214.67 1108.59,1214.67 1109.17,1214.67 1109.76,1214.67 1110.34,1214.67 1110.93,1214.67 1111.52,1214.67 1112.1,1214.67 1112.69,1214.67 1113.28,1214.67 1113.86,1214.67 1114.45,1214.67 1115.04,1214.67 1115.62,1214.67 1116.21,1214.67 1116.8,1214.67 1117.38,1214.67 1117.97,1214.67 1118.55,1214.67 1119.14,1214.67 1119.73,1214.67 1120.31,1214.67 1120.9,1214.67 1121.49,1214.67 1122.07,1214.67 1122.66,1214.67 1123.25,1214.67 1123.83,1214.67 1124.42,1214.67 1125.01,1214.67 1125.59,1214.67 1126.18,1214.67 1126.76,1214.67 1127.35,1214.67 1127.94,1214.67 1128.52,1214.67 1129.11,1214.67 1129.7,1214.67 1130.28,1214.67 1130.87,1214.67 1131.46,1214.67 1132.04,1214.67 1132.63,1214.67 1133.21,1214.67 1133.8,1214.67 1134.39,1214.67 1134.97,1214.67 1135.56,1214.67 1136.15,1214.67 1136.73,1214.67 1137.32,1214.67 1137.91,1214.67 1138.49,1214.67 1139.08,1214.67 1139.67,1214.67 1140.25,1214.67 1140.84,1214.67 1141.42,1214.67 1142.01,1214.67 1142.6,1214.67 1143.18,1214.67 1143.77,1214.67 1144.36,1214.67 1144.94,1214.67 1145.53,1214.67 1146.12,1214.67 1146.7,1214.67 1147.29,1214.67 1147.88,1214.67 1148.46,1214.67 1149.05,1214.67 1149.63,1214.67 1150.22,1214.67 1150.81,1214.67 1151.39,1214.67 1151.98,1214.67 1152.57,1214.67 1153.15,1214.67 1153.74,1214.67 1154.33,1214.67 1154.91,1214.67 1155.5,1214.67 1156.09,1214.67 1156.67,1214.67 1157.26,1214.67 1157.84,1214.67 1158.43,1214.67 1159.02,1214.67 1159.6,1214.67 1160.19,1214.67 1160.78,1214.67 1161.36,1214.67 1161.95,1214.67 1162.54,1214.67 1163.12,1214.67 1163.71,1214.67 1164.29,1214.67 1164.88,1214.67 1165.47,1214.67 1166.05,1214.67 1166.64,1214.67 1167.23,1214.67 1167.81,1214.67 1168.4,1214.67 1168.99,1214.67 1169.57,1214.67 1170.16,1214.67 1170.75,1214.67 1171.33,1214.67 1171.92,1214.67 1172.5,1214.67 1173.09,1214.67 1173.68,1214.67 1174.26,1214.67 1174.85,1214.67 1175.44,1214.67 1176.02,1214.67 1176.61,1214.67 1177.2,1214.67 1177.78,1214.67 1178.37,1214.67 1178.96,1214.67 1179.54,1214.67 1180.13,1214.67 1180.71,1214.67 1181.3,1214.67 1181.89,1214.67 1182.47,1214.67 1183.06,1214.67 1183.65,1214.67 1184.23,1214.67 1184.82,1214.67 1185.41,1214.67 1185.99,1214.67 1186.58,1214.67 1187.16,1214.67 1187.75,1214.67 1188.34,1214.67 1188.92,1214.67 1189.51,1214.67 1190.1,1214.67 1190.68,1214.67 1191.27,1214.67 1191.86,1214.67 1192.44,1214.67 1193.03,1214.67 1193.62,1214.67 1194.2,1214.67 1194.79,1214.67 1195.37,1214.67 1195.96,1214.67 1196.55,1214.67 1197.13,1214.67 1197.72,1214.67 1198.31,1214.67 1198.89,1214.67 1199.48,1214.67 1200.07,1214.67 1200.65,1214.67 1201.24,1214.67 1201.83,1214.67 1202.41,1214.67 1203,1214.67 1203.58,1214.67 1204.17,1214.67 1204.76,1214.67 1205.34,1214.67 1205.93,1214.67 1206.52,1214.67 1207.1,1214.67 1207.69,1214.67 1208.28,1214.67 1208.86,1214.67 1209.45,1214.67 1210.03,1214.67 1210.62,1214.67 1211.21,1214.67 1211.79,1214.67 1212.38,1214.67 1212.97,1214.67 1213.55,1214.67 1214.14,1214.67 1214.73,1214.67 1215.31,1214.67 1215.9,1214.67 1216.49,1214.67 1217.07,1214.67 1217.66,1214.67 1218.24,1214.67 1218.83,1214.67 1219.42,1214.67 1220,1214.67 1220.59,1214.67 1221.18,1214.67 1221.76,1214.67 1222.35,1214.67 1222.94,1214.67 1223.52,1214.67 1224.11,1214.67 1224.7,1214.67 1225.28,1214.67 1225.87,1214.67 1226.45,1214.67 1227.04,1214.67 1227.63,1214.67 1228.21,1214.67 1228.8,1214.67 1229.39,1214.67 1229.97,1214.67 1230.56,1214.67 1231.15,1214.67 1231.73,1214.67 1232.32,1214.67 1232.91,1214.67 1233.49,1214.67 1234.08,1214.67 1234.66,1214.67 1235.25,1214.67 1235.84,1214.67 1236.42,1214.67 1237.01,1214.67 1237.6,1214.67 1238.18,1214.67 1238.77,1214.67 1239.36,1214.67 1239.94,1214.67 1240.53,1214.67 1241.11,1214.67 1241.7,1214.67 1242.29,1214.67 1242.87,1214.67 1243.46,1214.67 1244.05,1214.67 1244.63,1214.67 1245.22,1214.67 1245.81,1214.67 1246.39,1214.67 1246.98,1214.67 1247.57,1214.67 1248.15,1214.67 1248.74,1214.67 1249.32,1214.67 1249.91,1214.67 1250.5,1214.67 1251.08,1214.67 1251.67,1214.67 1252.26,1214.67 1252.84,1214.67 1253.43,1214.67 1254.02,1214.67 1254.6,1214.67 1255.19,1214.67 1255.78,1214.67 1256.36,1214.67 1256.95,1214.67 1257.53,1214.67 1258.12,1214.67 1258.71,1214.67 1259.29,1214.67 1259.88,1214.67 1260.47,1214.67 1261.05,1214.67 1261.64,1214.67 1262.23,1214.67 1262.81,1214.67 1263.4,1214.67 1263.98,1214.67 1264.57,1214.67 1265.16,1214.67 1265.74,1214.67 1266.33,1214.67 1266.92,1214.67 1267.5,1214.67 1268.09,1214.67 1268.68,1214.67 1269.26,1214.67 1269.85,1214.67 1270.44,1214.67 1271.02,1214.67 1271.61,1214.67 1272.19,1214.67 1272.78,1214.67 1273.37,1214.67 1273.95,1214.67 1274.54,1214.67 1275.13,1214.67 1275.71,1214.67 1276.3,1214.67 1276.89,1214.67 1277.47,1214.67 1278.06,1214.67 1278.65,1214.67 1279.23,1214.67 1279.82,1214.67 1280.4,1214.67 1280.99,1214.67 1281.58,1214.67 1282.16,1214.67 1282.75,1214.67 1283.34,1214.67 1283.92,1214.67 1284.51,1214.67 1285.1,1214.67 1285.68,1214.67 1286.27,1214.67 1286.86,1214.67 1287.44,1214.67 1288.03,1214.67 1288.61,1214.67 1289.2,1214.67 1289.79,1214.67 1290.37,1214.67 1290.96,1214.67 1291.55,1214.67 1292.13,1214.67 1292.72,1214.67 1293.31,1214.67 1293.89,1214.67 1294.48,1214.67 1295.06,1214.67 1295.65,1214.67 1296.24,1214.67 1296.82,1214.67 1297.41,1214.67 1298,1214.67 1298.58,1214.67 1299.17,1214.67 1299.76,1214.67 1300.34,1214.67 1300.93,1214.67 1301.52,1214.67 1302.1,1214.67 1302.69,1214.67 1303.27,1214.67 1303.86,1214.67 1304.45,1214.67 1305.03,1214.67 1305.62,1214.67 1306.21,1214.67 1306.79,1214.67 1307.38,1214.67 1307.97,1214.67 1308.55,1214.67 1309.14,1214.67 1309.73,1214.67 1310.31,1214.67 1310.9,1214.67 1311.48,1214.67 1312.07,1214.67 1312.66,1214.67 1313.24,1214.67 1313.83,1214.67 1314.42,1214.67 1315,1214.67 1315.59,1214.67 1316.18,1214.67 1316.76,1214.67 1317.35,1214.67 1317.93,1214.67 1318.52,1214.67 1319.11,1214.67 1319.69,1214.67 1320.28,1214.67 1320.87,1214.67 1321.45,1214.67 1322.04,1214.67 1322.63,1214.67 1323.21,1214.67 1323.8,1214.67 1324.39,1214.67 1324.97,1214.67 1325.56,1214.67 1326.14,1214.67 1326.73,1214.67 1327.32,1214.67 1327.9,1214.67 1328.49,1214.67 1329.08,1214.67 1329.66,1214.67 1330.25,1214.67 1330.84,1214.67 1331.42,1214.67 1332.01,1214.67 1332.6,1214.67 1333.18,1214.67 1333.77,1214.67 1334.35,1214.67 1334.94,1214.67 1335.53,1214.67 1336.11,1214.67 1336.7,1214.67 1337.29,1214.67 1337.87,1214.67 1338.46,1214.67 1339.05,1214.67 1339.63,1214.67 1340.22,1214.67 1340.8,1214.67 1341.39,1214.67 1341.98,1214.67 1342.56,1214.67 1343.15,1214.67 1343.74,1214.67 1344.32,1214.67 1344.91,1214.67 1345.5,1214.67 1346.08,1214.67 1346.67,1214.67 1347.26,1214.67 1347.84,1214.67 1348.43,1214.67 1349.01,1214.67 1349.6,1214.67 1350.19,1214.67 1350.77,1214.67 1351.36,1214.67 1351.95,1214.67 1352.53,1214.67 1353.12,1214.67 1353.71,1214.67 1354.29,1214.67 1354.88,1214.67 1355.47,1214.67 1356.05,1214.67 1356.64,1214.67 1357.22,1214.67 1357.81,1214.67 1358.4,1214.67 1358.98,1214.67 1359.57,1214.67 1360.16,1214.67 1360.74,1214.67 1361.33,1214.67 1361.92,1214.67 1362.5,1214.67 1363.09,1214.67 1363.68,1214.67 1364.26,1214.67 1364.85,1214.67 1365.43,1214.67 1366.02,1214.67 1366.61,1214.67 1367.19,1214.67 1367.78,1214.67 1368.37,1214.67 1368.95,1214.67 1369.54,1214.67 1370.13,1214.67 1370.71,1214.67 1371.3,1214.67 1371.88,1214.67 1372.47,1214.67 1373.06,1214.67 1373.64,1214.67 1374.23,1214.67 1374.82,1214.67 1375.4,1214.67 1375.99,1214.67 1376.58,1214.67 1377.16,1214.67 1377.75,1214.67 1378.34,1214.67 1378.92,1214.67 1379.51,1214.67 1380.09,1214.67 1380.68,1214.67 1381.27,1214.67 1381.85,1214.67 1382.44,1214.67 1383.03,1214.67 1383.61,1214.67 1384.2,1214.67 1384.79,1214.67 1385.37,1214.67 1385.96,1214.67 1386.55,1214.67 1387.13,1214.67 1387.72,1214.67 1388.3,1214.67 1388.89,1214.67 1389.48,1214.67 1390.06,1214.67 1390.65,1214.67 1391.24,1214.67 1391.82,1214.67 1392.41,1214.67 1393,1214.67 1393.58,1214.67 1394.17,1214.67 1394.75,1214.67 1395.34,1214.67 1395.93,1214.67 1396.51,1214.67 1397.1,1214.67 1397.69,1214.67 1398.27,1214.67 1398.86,1214.67 1399.45,1214.67 1400.03,1214.67 1400.62,1214.67 1401.21,1214.67 1401.79,1214.67 1402.38,1214.67 1402.96,1214.67 1403.55,1214.67 1404.14,1214.67 1404.72,1214.67 1405.31,1214.67 1405.9,1214.67 1406.48,1214.67 1407.07,1214.67 1407.66,1214.67 1408.24,1214.67 1408.83,1214.67 1409.42,1214.67 1410,1214.67 1410.59,1214.67 1411.17,1214.67 1411.76,1214.67 1412.35,1214.67 1412.93,1214.67 1413.52,1214.67 1414.11,1214.67 1414.69,1214.67 1415.28,1214.67 1415.87,1214.67 1416.45,1214.67 1417.04,1214.67 1417.63,1214.67 1418.21,1214.67 1418.8,1214.67 1419.38,1214.67 1419.97,1214.67 1420.56,1214.67 1421.14,1214.67 1421.73,1214.67 1422.32,1214.67 1422.9,1214.67 1423.49,1214.67 1424.08,1214.67 1424.66,1214.67 1425.25,1214.67 1425.83,1214.67 1426.42,1214.67 1427.01,1214.67 1427.59,1214.67 1428.18,1214.67 1428.77,1214.67 1429.35,1214.67 1429.94,1214.67 1430.53,1214.67 1431.11,1214.67 1431.7,1214.67 1432.29,1214.67 1432.87,1214.67 1433.46,1214.67 1434.04,1214.67 1434.63,1214.67 1435.22,1214.67 1435.8,1214.67 1436.39,1214.67 1436.98,1214.67 1437.56,1214.67 1438.15,1214.67 1438.74,1214.67 1439.32,1214.67 1439.91,1214.67 1440.5,1214.67 1441.08,1214.67 1441.67,1214.67 1442.25,1214.67 1442.84,1214.67 1443.43,1214.67 1444.01,1214.67 1444.6,1214.67 1445.19,1214.67 1445.77,1214.67 1446.36,1214.67 1446.95,1214.67 1447.53,1214.67 1448.12,1214.67 1448.7,1214.67 1449.29,1214.67 1449.88,1214.67 1450.46,1214.67 1451.05,1214.67 1451.64,1214.67 1452.22,1214.67 1452.81,1214.67 1453.4,1214.67 1453.98,1214.67 1454.57,1214.67 1455.16,1214.67 1455.74,1214.67 1456.33,1214.67 1456.91,1214.67 1457.5,1214.67 1458.09,1214.67 1458.67,1214.67 1459.26,1214.67 1459.85,1214.67 1460.43,1214.67 1461.02,1214.67 1461.61,1214.67 1462.19,1214.67 1462.78,1214.67 1463.37,1214.67 1463.95,1214.67 1464.54,1214.67 1465.12,1214.67 1465.71,1214.67 1466.3,1214.67 1466.88,1214.67 1467.47,1214.67 1468.06,1214.67 1468.64,1214.67 1469.23,1214.67 1469.82,1214.67 1470.4,1214.67 1470.99,1214.67 1471.57,1214.67 1472.16,1214.67 1472.75,1214.67 1473.33,1214.67 1473.92,1214.67 1474.51,1214.67 1475.09,1214.67 1475.68,1214.67 1476.27,1214.67 1476.85,1214.67 1477.44,1214.67 1478.03,1214.67 1478.61,1214.67 1479.2,1214.67 1479.78,1214.67 1480.37,1214.67 1480.96,1214.67 1481.54,1214.67 1482.13,1214.67 1482.72,1214.67 1483.3,1214.67 1483.89,1214.67 1484.48,1214.67 1485.06,1214.67 1485.65,1214.67 1486.24,1214.67 1486.82,1214.67 1487.41,1214.67 1487.99,1214.67 1488.58,1214.67 1489.17,1214.67 1489.75,1214.67 1490.34,1214.67 1490.93,1214.67 1491.51,1214.67 1492.1,1214.67 1492.69,1214.67 1493.27,1214.67 1493.86,1214.67 1494.45,1214.67 1495.03,1214.67 1495.62,1214.67 1496.2,1214.67 1496.79,1214.67 1497.38,1214.67 1497.96,1214.67 1498.55,1214.67 1499.14,1214.67 1499.72,1214.67 1500.31,1214.67 1500.9,1214.67 1501.48,1214.67 1502.07,1214.67 1502.65,1214.67 1503.24,1214.67 1503.83,1214.67 1504.41,1214.67 1505,1214.67 1505.59,1214.67 1506.17,1214.67 1506.76,1214.67 1507.35,1214.67 1507.93,1214.67 1508.52,1214.67 1509.11,1214.67 1509.69,1214.67 1510.28,1214.67 1510.86,1214.67 1511.45,1214.67 1512.04,1214.67 1512.62,1214.67 1513.21,1214.67 1513.8,1214.67 1514.38,1214.67 1514.97,1214.67 1515.56,1214.67 1516.14,1214.67 1516.73,1214.67 1517.32,1214.67 1517.9,1214.67 1518.49,1214.67 1519.07,1214.67 1519.66,1214.67 1520.25,1214.67 1520.83,1214.67 1521.42,1214.67 1522.01,1214.67 1522.59,1214.67 1523.18,1214.67 1523.77,1214.67 1524.35,1214.67 1524.94,1214.67 1525.52,1214.67 1526.11,1214.67 1526.7,1214.67 1527.28,1214.67 1527.87,1214.67 1528.46,1214.67 1529.04,1214.67 1529.63,1214.67 1530.22,1214.67 1530.8,1214.67 1531.39,1214.67 1531.98,1214.67 1532.56,1214.67 1533.15,1214.67 1533.73,1214.67 1534.32,1214.67 1534.91,1214.67 1535.49,1214.67 1536.08,1214.67 1536.67,1214.67 1537.25,1214.67 1537.84,1214.67 1538.43,1214.67 1539.01,1214.67 1539.6,1214.67 1540.19,1214.67 1540.77,1214.67 1541.36,1214.67 1541.94,1214.67 1542.53,1214.67 1543.12,1214.67 1543.7,1214.67 1544.29,1214.67 1544.88,1214.67 1545.46,1214.67 1546.05,1214.67 1546.64,1214.67 1547.22,1214.67 1547.81,1214.67 1548.4,1214.67 1548.98,1214.67 1549.57,1214.67 1550.15,1214.67 1550.74,1214.67 1551.33,1214.67 1551.91,1214.67 1552.5,1214.67 1553.09,1214.67 1553.67,1214.67 1554.26,1214.67 1554.85,1214.67 1555.43,1214.67 1556.02,1214.67 1556.6,1214.67 1557.19,1214.67 1557.78,1214.67 1558.36,1214.67 1558.95,1214.67 1559.54,1214.67 1560.12,1214.67 1560.71,1214.67 1561.3,1214.67 1561.88,1214.67 1562.47,1214.67 1563.06,1214.67 1563.64,1214.67 1564.23,1214.67 1564.81,1214.67 1565.4,1214.67 1565.99,1214.67 1566.57,1214.67 1567.16,1214.67 1567.75,1214.67 1568.33,1214.67 1568.92,1214.67 1569.51,1214.67 1570.09,1214.67 1570.68,1214.67 1571.27,1214.67 1571.85,1214.67 1572.44,1214.67 1573.02,1214.67 1573.61,1214.67 1574.2,1214.67 1574.78,1214.67 1575.37,1214.67 1575.96,1214.67 1576.54,1214.67 1577.13,1214.67 1577.72,1214.67 1578.3,1214.67 1578.89,1214.67 1579.47,1214.67 1580.06,1214.67 1580.65,1214.67 1581.23,1214.67 1581.82,1214.67 1582.41,1214.67 1582.99,1214.67 1583.58,1214.67 1584.17,1214.67 1584.75,1214.67 1585.34,1214.67 1585.93,1214.67 1586.51,1214.67 1587.1,1214.67 1587.68,1214.67 1588.27,1214.67 1588.86,1214.67 1589.44,1214.67 1590.03,1214.67 1590.62,1214.67 1591.2,1214.67 1591.79,1214.67 1592.38,1214.67 1592.96,1214.67 1593.55,1214.67 1594.14,1214.67 1594.72,1214.67 1595.31,1214.67 1595.89,1214.67 1596.48,1214.67 1597.07,1214.67 1597.65,1214.67 1598.24,1214.67 1598.83,1214.67 1599.41,1214.67 1600,1214.67 1600.59,1214.67 1601.17,1214.67 1601.76,1214.67 1602.34,1214.67 1602.93,1214.67 1603.52,1214.67 1604.1,1214.67 1604.69,1214.67 1605.28,1214.67 1605.86,1214.67 1606.45,1214.67 1607.04,1214.67 1607.62,1214.67 1608.21,1214.67 1608.8,1214.67 1609.38,1214.67 1609.97,1214.67 1610.55,1214.67 1611.14,1214.67 1611.73,1214.67 1612.31,1214.67 1612.9,1214.67 1613.49,1214.67 1614.07,1214.67 1614.66,1214.67 1615.25,1214.67 1615.83,1214.67 1616.42,1214.67 1617.01,1214.67 1617.59,1214.67 1618.18,1214.67 1618.76,1214.67 1619.35,1214.67 1619.94,1214.67 1620.52,1214.67 1621.11,1214.67 1621.7,1214.67 1622.28,1214.67 1622.87,1214.67 1623.46,1214.67 1624.04,1214.67 1624.63,1214.67 1625.22,1214.67 1625.8,1214.67 1626.39,1214.67 1626.97,1214.67 1627.56,1214.67 1628.15,1214.67 1628.73,1214.67 1629.32,1214.67 1629.91,1214.67 1630.49,1214.67 1631.08,1214.67 1631.67,1214.67 1632.25,1214.67 1632.84,1214.67 1633.42,1214.67 1634.01,1214.67 1634.6,1214.67 1635.18,1214.67 1635.77,1214.67 1636.36,1214.67 1636.94,1214.67 1637.53,1214.67 1638.12,1214.67 1638.7,1214.67 1639.29,1214.67 1639.88,1214.67 1640.46,1214.67 1641.05,1214.67 1641.63,1214.67 1642.22,1214.67 1642.81,1214.67 1643.39,1214.67 1643.98,1214.67 1644.57,1214.67 1645.15,1214.67 1645.74,1214.67 1646.33,1214.67 1646.91,1214.67 1647.5,1214.67 1648.09,1214.67 1648.67,1214.67 1649.26,1214.67 1649.84,1214.67 1650.43,1214.67 1651.02,1214.67 1651.6,1214.67 1652.19,1214.67 1652.78,1214.67 1653.36,1214.67 1653.95,1214.67 1654.54,1214.67 1655.12,1214.67 1655.71,1214.67 1656.29,1214.67 1656.88,1214.67 1657.47,1214.67 1658.05,1214.67 1658.64,1214.67 1659.23,1214.67 1659.81,1214.67 1660.4,1214.67 1660.99,1214.67 1661.57,1214.67 1662.16,1214.67 1662.75,1214.67 1663.33,1214.67 1663.92,1214.67 1664.5,1214.67 1665.09,1214.67 1665.68,1214.67 1666.26,1214.67 1666.85,1214.67 1667.44,1214.67 1668.02,1214.67 1668.61,1214.67 1669.2,1214.67 1669.78,1214.67 1670.37,1214.67 1670.96,1214.67 1671.54,1214.67 1672.13,1214.67 1672.71,1214.67 1673.3,1214.67 1673.89,1214.67 1674.47,1214.67 1675.06,1214.67 1675.65,1214.67 1676.23,1214.67 1676.82,1214.67 1677.41,1214.67 1677.99,1214.67 1678.58,1214.67 1679.17,1214.67 1679.75,1214.67 1680.34,1214.67 1680.92,1214.67 1681.51,1214.67 1682.1,1214.67 1682.68,1214.67 1683.27,1214.67 1683.86,1214.67 1684.44,1214.67 1685.03,1214.67 1685.62,1214.67 1686.2,1214.67 1686.79,1214.67 1687.37,1214.67 1687.96,1214.67 1688.55,1214.67 1689.13,1214.67 1689.72,1214.67 1690.31,1214.67 1690.89,1214.67 1691.48,1214.67 1692.07,1214.67 1692.65,1214.67 1693.24,1214.67 1693.83,1214.67 1694.41,1214.67 1695,1214.67 1695.58,1214.67 1696.17,1214.67 1696.76,1214.67 1697.34,1214.67 1697.93,1214.67 1698.52,1214.67 1699.1,1214.67 1699.69,1214.67 1700.28,1214.67 1700.86,1214.67 1701.45,1214.67 1702.04,1214.67 1702.62,1214.67 1703.21,1214.67 1703.79,1214.67 1704.38,1214.67 1704.97,1214.67 1705.55,1214.67 1706.14,1214.67 1706.73,1214.67 1707.31,1214.67 1707.9,1214.67 1708.49,1214.67 1709.07,1214.67 1709.66,1214.67 1710.24,1214.67 1710.83,1214.67 1711.42,1214.67 1712,1214.67 1712.59,1214.67 1713.18,1214.67 1713.76,1214.67 1714.35,1214.67 1714.94,1214.67 1715.52,1214.67 1716.11,1214.67 1716.7,1214.67 1717.28,1214.67 1717.87,1214.67 1718.45,1214.67 1719.04,1214.67 1719.63,1214.67 1720.21,1214.67 1720.8,1214.67 1721.39,1214.67 1721.97,1214.67 1722.56,1214.67 1723.15,1214.67 1723.73,1214.67 1724.32,1214.67 1724.91,1214.67 1725.49,1214.67 1726.08,1214.67 1726.66,1214.67 1727.25,1214.67 1727.84,1214.67 1728.42,1214.67 1729.01,1214.67 1729.6,1214.67 1730.18,1214.67 1730.77,1214.67 1731.36,1214.67 1731.94,1214.67 1732.53,1214.67 1733.11,1214.67 1733.7,1214.67 1734.29,1214.67 1734.87,1214.67 1735.46,1214.67 1736.05,1214.67 1736.63,1214.67 1737.22,1214.67 1737.81,1214.67 1738.39,1214.67 1738.98,1214.67 1739.57,1214.67 1740.15,1214.67 1740.74,1214.67 1741.32,1214.67 1741.91,1214.67 1742.5,1214.67 1743.08,1214.67 1743.67,1214.67 1744.26,1214.67 1744.84,1214.67 1745.43,1214.67 1746.02,1214.67 1746.6,1214.67 1747.19,1214.67 1747.78,1214.67 1748.36,1214.67 1748.95,1214.67 1749.53,1214.67 1750.12,1214.67 1750.71,1214.67 1751.29,1214.67 1751.88,1214.67 1752.47,1214.67 1753.05,1214.67 1753.64,1214.67 1754.23,1214.67 1754.81,1214.67 1755.4,1214.67 1755.99,1214.67 1756.57,1214.67 1757.16,1214.67 1757.74,1214.67 1758.33,1214.67 1758.92,1214.67 1759.5,1214.67 1760.09,1214.67 1760.68,1214.67 1761.26,1214.67 1761.85,1214.67 1762.44,1214.67 1763.02,1214.67 1763.61,1214.67 1764.19,1214.67 1764.78,1214.67 1765.37,1214.67 1765.95,1214.67 1766.54,1214.67 1767.13,1214.67 1767.71,1214.67 1768.3,1214.67 1768.89,1214.67 1769.47,1214.67 1770.06,1214.67 1770.65,1214.67 1771.23,1214.67 1771.82,1214.67 1772.4,1214.67 1772.99,1214.67 1773.58,1214.67 1774.16,1214.67 1774.75,1214.67 1775.34,1214.67 1775.92,1214.67 1776.51,1214.67 1777.1,1214.67 1777.68,1214.67 1778.27,1214.67 1778.86,1214.67 1779.44,1214.67 1780.03,1214.67 1780.61,1214.67 1781.2,1214.67 1781.79,1214.67 1782.37,1214.67 1782.96,1214.67 1783.55,1214.67 1784.13,1214.67 1784.72,1214.67 1785.31,1214.67 1785.89,1214.67 1786.48,1214.67 1787.06,1214.67 1787.65,1214.67 1788.24,1214.67 1788.82,1214.67 1789.41,1214.67 1790,1214.67 1790.58,1214.67 1791.17,1214.67 1791.76,1214.67 1792.34,1214.67 1792.93,1214.67 1793.52,1214.67 1794.1,1214.67 1794.69,1214.67 1795.27,1214.67 1795.86,1214.67 1796.45,1214.67 1797.03,1214.67 1797.62,1214.67 1798.21,1214.67 1798.79,1214.67 1799.38,1214.67 1799.97,1214.67 1800.55,1214.67 1801.14,1214.67 1801.73,1214.67 1802.31,1214.67 1802.9,1214.67 1803.48,1214.67 1804.07,1214.67 1804.66,1214.67 1805.24,1214.67 1805.83,1214.67 1806.42,1214.67 1807,1214.67 1807.59,1214.67 1808.18,1214.67 1808.76,1214.67 1809.35,1214.67 1809.94,1214.67 1810.52,1214.67 1811.11,1214.67 1811.69,1214.67 1812.28,1214.67 1812.87,1214.67 1813.45,1214.67 1814.04,1214.67 1814.63,1214.67 1815.21,1214.67 1815.8,1214.67 1816.39,1214.67 1816.97,1214.67 1817.56,1214.67 1818.14,1214.67 1818.73,1214.67 1819.32,1214.67 1819.9,1214.67 1820.49,1214.67 1821.08,1214.67 1821.66,1214.67 1822.25,1214.67 1822.84,1214.67 1823.42,1214.67 1824.01,1214.67 1824.6,1214.67 1825.18,1214.67 1825.77,1214.67 1826.35,1214.67 1826.94,1214.67 1827.53,1214.67 1828.11,1214.67 1828.7,1214.67 1829.29,1214.67 1829.87,1214.67 1830.46,1214.67 1831.05,1214.67 1831.63,1214.67 1832.22,1214.67 1832.81,1214.67 1833.39,1214.67 1833.98,1214.67 1834.56,1214.67 1835.15,1214.67 1835.74,1214.67 1836.32,1214.67 1836.91,1214.67 1837.5,1214.67 1838.08,1214.67 1838.67,1214.67 1839.26,1214.67 1839.84,1214.67 1840.43,1214.67 1841.01,1214.67 1841.6,1214.67 1842.19,1214.67 1842.77,1214.67 1843.36,1214.67 1843.95,1214.67 1844.53,1214.67 1845.12,1214.67 1845.71,1214.67 1846.29,1214.67 1846.88,1214.67 1847.47,1214.67 1848.05,1214.67 1848.64,1214.67 1849.22,1214.67 1849.81,1214.67 1850.4,1214.67 1850.98,1214.67 1851.57,1214.67 1852.16,1214.67 1852.74,1214.67 1853.33,1214.67 1853.92,1214.67 1854.5,1214.67 1855.09,1214.67 1855.68,1214.67 1856.26,1214.67 1856.85,1214.67 1857.43,1214.67 1858.02,1214.67 1858.61,1214.67 1859.19,1214.67 1859.78,1214.67 1860.37,1214.67 1860.95,1214.67 1861.54,1214.67 1862.13,1214.67 1862.71,1214.67 1863.3,1214.67 1863.88,1214.67 1864.47,1214.67 1865.06,1214.67 1865.64,1214.67 1866.23,1214.67 1866.82,1214.67 1867.4,1214.67 1867.99,1214.67 1868.58,1214.67 1869.16,1214.67 1869.75,1214.67 1870.34,1214.67 1870.92,1214.67 1871.51,1214.67 1872.09,1214.67 1872.68,1214.67 1873.27,1214.67 1873.85,1214.67 1874.44,1214.67 1875.03,1214.67 1875.61,1214.67 1876.2,1214.67 1876.79,1214.67 1877.37,1214.67 1877.96,1214.67 1878.55,1214.67 1879.13,1214.67 1879.72,1214.67 1880.3,1214.67 1880.89,1214.67 1881.48,1214.67 1882.06,1214.67 1882.65,1214.67 1883.24,1214.67 1883.82,1214.67 1884.41,1214.67 1885,1214.67 1885.58,1214.67 1886.17,1214.67 1886.76,1214.67 1887.34,1214.67 1887.93,1214.67 1888.51,1214.67 1889.1,1214.67 1889.69,1214.67 1890.27,1214.67 1890.86,1214.67 1891.45,1214.67 1892.03,1214.67 1892.62,1214.67 1893.21,1214.67 1893.79,1214.67 1894.38,1214.67 1894.96,1214.67 1895.55,1214.67 1896.14,1214.67 1896.72,1214.67 1897.31,1214.67 1897.9,1214.67 1898.48,1214.67 1899.07,1214.67 1899.66,1214.67 1900.24,1214.67 1900.83,1214.67 1901.42,1214.67 1902,1214.67 1902.59,1214.67 1903.17,1214.67 1903.76,1214.67 1904.35,1214.67 1904.93,1214.67 1905.52,1214.67 1906.11,1214.67 1906.69,1214.67 1907.28,1214.67 1907.87,1214.67 1908.45,1214.67 1909.04,1214.67 1909.63,1214.67 1910.21,1214.67 1910.8,1214.67 1911.38,1214.67 1911.97,1214.67 1912.56,1214.67 1913.14,1214.67 1913.73,1214.67 1914.32,1214.67 1914.9,1214.67 1915.49,1214.67 1916.08,1214.67 1916.66,1214.67 1917.25,1214.67 1917.83,1214.67 1918.42,1214.67 1919.01,1214.67 1919.59,1214.67 1920.18,1214.67 1920.77,1214.67 1921.35,1214.67 1921.94,1214.67 1922.53,1214.67 1923.11,1214.67 1923.7,1214.67 1924.29,1214.67 1924.87,1214.67 1925.46,1214.67 1926.04,1214.67 1926.63,1214.67 1927.22,1214.67 1927.8,1214.67 1928.39,1214.67 1928.98,1214.67 1929.56,1214.67 1930.15,1214.67 1930.74,1214.67 1931.32,1214.67 1931.91,1214.67 1932.5,1214.67 1933.08,1214.67 1933.67,1214.67 1934.25,1214.67 1934.84,1214.67 1935.43,1214.67 1936.01,1214.67 1936.6,1214.67 1937.19,1214.67 1937.77,1214.67 1938.36,1214.67 1938.95,1214.67 1939.53,1214.67 1940.12,1214.67 1940.71,1214.67 1941.29,1214.67 1941.88,1214.67 1942.46,1214.67 1943.05,1214.67 1943.64,1214.67 1944.22,1214.67 1944.81,1214.67 1945.4,1214.67 1945.98,1214.67 1946.57,1214.67 1947.16,1214.67 1947.74,1214.67 1948.33,1214.67 1948.91,1214.67 1949.5,1214.67 1950.09,1214.67 1950.67,1214.67 1951.26,1214.67 1951.85,1214.67 1952.43,1214.67 1953.02,1214.67 1953.61,1214.67 1954.19,1214.67 1954.78,1214.67 1955.37,1214.67 1955.95,1214.67 1956.54,1214.67 1957.12,1214.67 1957.71,1214.67 1958.3,1214.67 1958.88,1214.67 1959.47,1214.67 1960.06,1214.67 1960.64,1214.67 1961.23,1214.67 1961.82,1214.67 1962.4,1214.67 1962.99,1214.67 1963.58,1214.67 1964.16,1214.67 1964.75,1214.67 1965.33,1214.67 1965.92,1214.67 1966.51,1214.67 1967.09,1214.67 1967.68,1214.67 1968.27,1214.67 1968.85,1214.67 1969.44,1214.67 1970.03,1214.67 1970.61,1214.67 1971.2,1214.67 1971.78,1214.67 1972.37,1214.67 1972.96,1214.67 1973.54,1214.67 1974.13,1214.67 1974.72,1214.67 1975.3,1214.67 1975.89,1214.67 1976.48,1214.67 1977.06,1214.67 1977.65,1214.67 1978.24,1214.67 1978.82,1214.67 1979.41,1214.67 1979.99,1214.67 1980.58,1214.67 1981.17,1214.67 1981.75,1214.67 1982.34,1214.67 1982.93,1214.67 1983.51,1214.67 1984.1,1214.67 1984.69,1214.67 1985.27,1214.67 1985.86,1214.67 1986.45,1214.67 1987.03,1214.67 1987.62,1214.67 1988.2,1214.67 1988.79,1214.67 1989.38,1214.67 1989.96,1214.67 1990.55,1214.67 1991.14,1214.67 1991.72,1214.67 1992.31,1214.67 1992.9,1214.67 1993.48,1214.67 1994.07,1214.67 1994.65,1214.67 1995.24,1214.67 1995.83,1214.67 1996.41,1214.67 1997,1214.67 1997.59,1214.67 1998.17,1214.67 1998.76,1214.67 1999.35,1214.67 1999.93,1214.67 2000.52,1214.67 2001.11,1214.67 2001.69,1214.67 2002.28,1214.67 2002.86,1214.67 2003.45,1214.67 2004.04,1214.67 2004.62,1214.67 2005.21,1214.67 2005.8,1214.67 2006.38,1214.67 2006.97,1214.67 2007.56,1214.67 2008.14,1214.67 2008.73,1214.67 2009.32,1214.67 2009.9,1214.67 2010.49,1214.67 2011.07,1214.67 2011.66,1214.67 2012.25,1214.67 2012.83,1214.67 2013.42,1214.67 2014.01,1214.67 2014.59,1214.67 2015.18,1214.67 2015.77,1214.67 2016.35,1214.67 2016.94,1214.67 2017.53,1214.67 2018.11,1214.67 2018.7,1214.67 2019.28,1214.67 2019.87,1214.67 2020.46,1214.67 2021.04,1214.67 2021.63,1214.67 2022.22,1214.67 2022.8,1214.67 2023.39,1214.67 2023.98,1214.67 2024.56,1214.67 2025.15,1214.67 2025.73,1214.67 2026.32,1214.67 2026.91,1214.67 2027.49,1214.67 2028.08,1214.67 2028.67,1214.67 2029.25,1214.67 2029.84,1214.67 2030.43,1214.67 2031.01,1214.67 2031.6,1214.67 2032.19,1214.67 2032.77,1214.67 2033.36,1214.67 2033.94,1214.67 2034.53,1214.67 2035.12,1214.67 2035.7,1214.67 2036.29,1214.67 2036.88,1214.67 2037.46,1214.67 2038.05,1214.67 2038.64,1214.67 2039.22,1214.67 2039.81,1214.67 2040.4,1214.67 2040.98,1214.67 2041.57,1214.67 2042.15,1214.67 2042.74,1214.67 2043.33,1214.67 2043.91,1214.67 2044.5,1214.67 2045.09,1214.67 2045.67,1214.67 2046.26,1214.67 2046.85,1214.67 2047.43,1214.67 2048.02,1214.67 2048.6,1214.67 2049.19,1214.67 2049.78,1214.67 2050.36,1214.67 2050.95,1214.67 2051.54,1214.67 2052.12,1214.67 2052.71,1214.67 2053.3,1214.67 2053.88,1214.67 2054.47,1214.67 2055.06,1214.67 2055.64,1214.67 2056.23,1214.67 2056.81,1214.67 2057.4,1214.67 2057.99,1214.67 2058.57,1214.67 2059.16,1214.67 2059.75,1214.67 2060.33,1214.67 2060.92,1214.67 2061.51,1214.67 2062.09,1214.67 2062.68,1214.67 2063.27,1214.67 2063.85,1214.67 2064.44,1214.67 2065.02,1214.67 2065.61,1214.67 2066.2,1214.67 2066.78,1214.67 2067.37,1214.67 2067.96,1214.67 2068.54,1214.67 2069.13,1214.67 2069.72,1214.67 2070.3,1214.67 2070.89,1214.67 2071.48,1214.67 2072.06,1214.67 2072.65,1214.67 2073.23,1214.67 2073.82,1214.67 2074.41,1214.67 2074.99,1214.67 2075.58,1214.67 2076.17,1214.67 2076.75,1214.67 2077.34,1214.67 2077.93,1214.67 2078.51,1214.67 2079.1,1214.67 2079.68,1214.67 2080.27,1214.67 2080.86,1214.67 2081.44,1214.67 2082.03,1214.67 2082.62,1214.67 2083.2,1214.67 2083.79,1214.67 2084.38,1214.67 2084.96,1214.67 2085.55,1214.67 2086.14,1214.67 2086.72,1214.67 2087.31,1214.67 2087.89,1214.67 2088.48,1214.67 2089.07,1214.67 2089.65,1214.67 2090.24,1214.67 2090.83,1214.67 2091.41,1214.67 2092,1214.67 2092.59,1214.67 2093.17,1214.67 2093.76,1214.67 2094.35,1214.67 2094.93,1214.67 2095.52,1214.67 2096.1,1214.67 2096.69,1214.67 2097.28,1214.67 2097.86,1214.67 2098.45,1214.67 2099.04,1214.67 2099.62,1214.67 2100.21,1214.67 2100.8,1214.67 2101.38,1214.67 2101.97,1214.67 2102.55,1214.67 2103.14,1214.67 2103.73,1214.67 2104.31,1214.67 2104.9,1214.67 2105.49,1214.67 2106.07,1214.67 2106.66,1214.67 2107.25,1214.67 2107.83,1214.67 2108.42,1214.67 2109.01,1214.67 2109.59,1214.67 2110.18,1214.67 2110.76,1214.67 2111.35,1214.67 2111.94,1214.67 2112.52,1214.67 2113.11,1214.67 2113.7,1214.67 2114.28,1214.67 2114.87,1214.67 2115.46,1214.67 2116.04,1214.67 2116.63,1214.67 2117.22,1214.67 2117.8,1214.67 2118.39,1214.67 2118.97,1214.67 2119.56,1214.67 2120.15,1214.67 2120.73,1214.67 2121.32,1214.67 2121.91,1214.67 2122.49,1214.67 2123.08,1214.67 2123.67,1214.67 2124.25,1214.67 2124.84,1214.67 2125.42,1214.67 2126.01,1214.67 2126.6,1214.67 2127.18,1214.67 2127.77,1214.67 2128.36,1214.67 2128.94,1214.67 2129.53,1214.67 2130.12,1214.67 2130.7,1214.67 2131.29,1214.67 2131.88,1214.67 2132.46,1214.67 2133.05,1214.67 2133.63,1214.67 2134.22,1214.67 2134.81,1214.67 2135.39,1214.67 2135.98,1214.67 2136.57,1214.67 2137.15,1214.67 2137.74,1214.67 2138.33,1214.67 2138.91,1214.67 2139.5,1214.67 2140.09,1214.67 2140.67,1214.67 2141.26,1214.67 2141.84,1214.67 2142.43,1214.67 2143.02,1214.67 2143.6,1214.67 2144.19,1214.67 2144.78,1214.67 2145.36,1214.67 2145.95,1214.67 2146.54,1214.67 2147.12,1214.67 2147.71,1214.67 2148.3,1214.67 2148.88,1214.67 2149.47,1214.67 2150.05,1214.67 2150.64,1214.67 2151.23,1214.67 2151.81,1214.67 2152.4,1214.67 2152.99,1214.67 2153.57,1214.67 2154.16,1214.67 2154.75,1214.67 2155.33,1214.67 2155.92,1214.67 2156.5,1214.67 2157.09,1214.67 2157.68,1214.67 2158.26,1214.67 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.38,1197.24 1398.81,899.083 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.78 985.439,1197.24 2158.26,1197.24 2158.26,1231.78 985.439,1231.78 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip333\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip333)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-7188.72 166.029,-7943.77 166.588,-8628.1 167.147,-9246.29 167.706,-9802.6 168.266,-10301.1 168.825,-10745.4 169.384,-11139.1 169.943,-11485.6 170.503,-11059.3 171.062,-11349.5 171.621,-11599.8 172.18,-11221 172.74,-11421 173.299,-11587.7 173.858,-11715.8 174.417,-11823.2 174.977,-11903.8 175.536,-11184.6 176.095,-11224.4 176.655,-11268.6 177.214,-11295.6 177.773,-11291.9 178.332,-11000.6 178.892,-10987.2 179.451,-10953.5 180.01,-10663.9 180.569,-10603.7 181.129,-10524.9 181.688,-10240.7 182.247,-9955.12 182.806,-9860.53 183.366,-9751.38 183.925,-9485.23 184.484,-8791.16 185.043,-8645.65 185.603,-8376.4 186.162,-8223.97 186.721,-8068.63 187.28,-7802.9 187.84,-7449.65 188.399,-7315.69 188.958,-7086.17 189.517,-6778.91 190.077,-6568.51 190.636,-6363.28 191.195,-6249.11 191.754,-5984.07 192.314,-5655.62 192.873,-5481.25 193.432,-5320.24 193.991,-5097.84 194.551,-5009.57 195.11,-4801.7 195.669,-4715.07 196.228,-4465.92 196.788,-4376.83 197.347,-4138.14 197.906,-4051.09 198.465,-3881.06 199.025,-3752.72 199.584,-3630.48 200.143,-3466.38 200.702,-3304.22 201.262,-3113.69 201.821,-3053.65 202.38,-2905.1 202.939,-2806.66 203.499,-2709.58 204.058,-2610.6 204.617,-2514.02 205.176,-2380.06 205.736,-2281.3 206.295,-2223.34 206.854,-2099.35 207.413,-2011.06 207.973,-1829.36 208.532,-1750.51 209.091,-1640.08 209.65,-1532.68 210.21,-1428.05 210.769,-1297.91 211.328,-1205.96 211.887,-1089.79 212.447,-1081.26 213.006,-993.748 213.565,-881.881 214.124,-852.558 214.684,-794.163 215.243,-635.354 215.802,-608.158 216.361,-555.163 216.921,-530.068 217.48,-408.583 218.039,-341.662 218.598,-253.679 219.158,-237.866 219.717,-172.425 220.276,-160.122 220.835,-118.195 221.395,-80.5422 221.954,-0.514805 222.513,75.2895 223.072,152.34 223.632,183.058 224.191,190.075 224.75,218.127 225.309,230.093 225.869,261.026 226.428,290.269 226.987,299.423 227.546,347.365 228.106,354.2 228.665,359.906 229.224,346.333 229.783,360.146 230.343,408.594 230.902,447.782 231.461,516.838 232.02,538.265 232.58,577.97 233.139,599.46 233.698,641.529 234.257,639.872 234.817,658.673 235.376,640.557 235.935,699.796 236.494,735.356 237.054,736.767 237.613,753.622 238.172,786.512 238.731,814.738 239.291,809.187 239.85,824.955 240.409,893.088 240.968,939.194 241.528,931.494 242.087,926.774 242.646,918.993 243.205,878.72 243.765,894.597 244.324,891.095 244.883,887.647 245.442,901.193 246.002,902.156 246.561,934.532 247.12,930.536 247.679,945.969 248.239,977.41 248.798,1007.15 249.357,1019.53 249.916,996.364 250.476,1006.26 251.035,1017.03 251.594,1008.93 252.153,1019.03 252.713,1026.57 253.272,1037.33 253.831,1080.6 254.39,1086.73 254.95,1061.83 255.509,1070.74 256.068,1028.81 256.627,1024.02 257.187,1017.77 257.746,978.127 258.305,992.438 258.864,986.482 259.424,963.918 259.983,977.989 260.542,958.549 261.101,972.589 261.661,988.349 262.22,968.732 262.779,964.218 263.338,999.193 263.898,994.192 264.457,968.437 265.016,969.337 265.575,985.823 266.135,1032.96 266.694,1058.52 267.253,1054.71 267.812,1065.72 268.372,1046.75 268.931,1038.91 269.49,1018.85 270.049,1016 270.609,1030.82 271.168,1062.02 271.727,1040.86 272.286,1037.08 272.846,1084.6 273.405,1097.44 273.964,1094.46 274.523,1054.28 275.083,1050.37 275.642,1058.68 276.201,1034.26 276.76,995.838 277.32,1026.08 277.879,1038.86 278.438,1052.7 278.997,1045.38 279.557,1060.6 280.116,1037.25 280.675,1063.34 281.234,1056.81 281.794,1051.45 282.353,1062.09 282.912,1040.22 283.471,1036.21 284.031,1065.47 284.59,1059.55 285.149,1054.79 285.708,1054.15 286.268,1027.63 286.827,1052.18 287.386,1045.53 287.945,1055.32 288.505,1116.95 289.064,1104.27 289.623,1076.95 290.182,1136.33 290.742,1089.17 291.301,1081.8 291.86,1060.11 292.419,1119.69 292.979,1094.39 293.538,1052.64 294.097,1027.3 294.656,988.584 295.216,1018.6 295.775,1031.63 296.334,995.679 296.893,976.595 297.453,955.347 298.012,937.863 298.571,985.925 299.13,967.622 299.69,981.416 300.249,963.15 300.808,962.46 301.368,975.352 301.927,974.082 302.486,988.225 303.045,1016.86 303.605,1027.03 304.164,1003.83 304.723,1000.35 305.282,1028.45 305.842,1007.57 306.401,1003.93 306.96,1050.41 307.519,1078.63 308.079,1084.54 308.638,1077.94 309.197,1052.48 309.756,1047.87 310.316,1057.35 310.875,1033.36 311.434,1028.63 311.993,1019.15 312.553,1010.19 313.112,1004.82 313.671,987.466 314.23,984.815 314.79,992.041 315.349,971.195 315.908,966.011 316.467,961.144 317.027,989.905 317.586,1002.19 318.145,999.025 318.704,991.978 319.264,1001.84 319.823,977.042 320.382,971.935 320.941,984.462 321.501,1026.68 322.06,1021.55 322.619,998.998 323.178,1007.93 323.738,1016.33 324.297,1023.44 324.856,1014.08 325.415,1006.15 325.975,995.264 326.534,986.835 327.093,984.807 327.652,977.511 328.212,974.373 328.771,985.678 329.33,962.856 329.889,971.195 330.449,913.516 331.008,910.445 331.567,923.141 332.126,887.383 332.686,887.709 333.245,835.581 333.804,841.042 334.363,841.563 334.923,840.297 335.482,892.054 336.041,877.136 336.6,875.938 337.16,887.96 337.719,871.868 338.278,855.253 338.837,841.017 339.397,842.147 339.956,843.702 340.515,828.299 341.074,834.4 341.634,836.869 342.193,853.615 342.752,853.485 343.311,871.954 343.871,870.702 344.43,869.343 344.989,883.611 345.548,913.602 346.108,906.74 346.667,923.706 347.226,918.999 347.785,948.113 348.345,957.552 348.904,970.7 349.463,996.342 350.022,956.284 350.582,980.267 351.141,956.525 351.7,952.813 352.259,978.55 352.819,1019.07 353.378,1011.43 353.937,1030.63 354.496,1017.84 355.056,1023.97 355.615,1014.89 356.174,975.301 356.733,998.667 357.293,958.287 357.852,950.468 358.411,955.025 358.97,965.486 359.53,942.598 360.089,936.101 360.648,930.307 361.207,943.552 361.767,932.285 362.326,924.697 362.885,919.804 363.444,899.277 364.004,912.345 364.563,920.882 365.122,912.832 365.681,919.583 366.241,914.909 366.8,908.225 367.359,905.331 367.918,900.116 368.478,880.987 369.037,908.825 369.596,919.791 370.155,962.353 370.715,983.181 371.274,972.34 371.833,962.317 372.392,973.224 372.952,981.107 373.511,1004.42 374.07,996.132 374.629,968.342 375.189,959.203 375.748,948.338 376.307,891.285 376.866,835.524 377.426,832.025 377.985,815.113 378.544,814.395 379.103,863.729 379.663,910.606 380.222,904.658 380.781,885.234 381.34,867.781 381.9,832.385 382.459,845.251 383.018,859.336 383.577,838.295 384.137,815.295 384.696,798.918 385.255,817.021 385.814,784.849 386.374,800.657 386.933,785.268 387.492,768.217 388.051,770.994 388.611,804.131 389.17,770.566 389.729,771.756 390.288,791.534 390.848,775.812 391.407,793.734 391.966,823.388 392.525,819.807 393.085,783.413 393.644,801.152 394.203,815.351 394.762,828.511 395.322,840.577 395.881,837.066 396.44,868.515 396.999,862.606 397.559,825.024 398.118,820.832 398.677,804.736 399.236,803.299 399.796,819.787 400.355,849.825 400.914,830.471 401.473,814.296 402.033,829.871 402.592,842.621 403.151,820.799 403.71,804.223 404.27,804.734 404.829,835.872 405.388,837.828 405.947,821.857 406.507,805.316 407.066,805.006 407.625,789.874 408.184,804.577 408.744,787.299 409.303,803.372 409.862,772.003 410.421,769.224 410.981,770.796 411.54,790.767 412.099,788.461 412.658,770.293 413.218,788.003 413.777,770.27 414.336,768.673 414.895,803.297 415.455,770.823 416.014,768.45 416.573,786.298 417.132,783.018 417.692,819.008 418.251,816.434 418.81,797.577 419.369,799.276 419.929,796.472 420.488,793.432 421.047,760.009 421.606,776.912 422.166,762.091 422.725,779.584 423.284,794.143 423.843,790.45 424.403,786.512 424.962,784.626 425.521,750.908 426.08,755.067 426.64,742.539 427.199,745.806 427.758,698.503 428.318,719.758 428.877,707.691 429.436,744.162 429.995,746.644 430.555,780.346 431.114,766.527 431.673,768.126 432.232,765.884 432.792,769.889 433.351,818.666 433.91,800.459 434.469,781.266 435.029,782.591 435.588,765.722 436.147,781.351 436.706,781.3 437.266,809.566 437.825,805.309 438.384,837.055 438.943,851.347 439.503,831.053 440.062,859.273 440.621,852.69 441.18,814.282 441.74,826.962 442.299,841.308 442.858,802.64 443.417,768.172 443.977,763.743 444.536,761.981 445.095,765.068 445.654,764.156 446.214,781.631 446.773,798.348 447.332,780.225 447.891,780.281 448.451,779.45 449.01,824.197 449.569,817.566 450.128,798.227 450.688,798.639 451.247,812.731 451.806,808.488 452.365,804.601 452.925,750.828 453.484,751.658 454.043,738.284 454.602,737.221 455.162,773.101 455.721,790.398 456.28,771.407 456.839,771.983 457.399,736.113 457.958,749.863 458.517,766.094 459.076,753.391 459.636,752.784 460.195,768.407 460.754,782.341 461.313,774.43 461.873,790.474 462.432,774.358 462.991,773.002 463.55,803.251 464.11,787.198 464.669,783.844 465.228,766.561 465.787,766.713 466.347,748.329 466.906,748.489 467.465,748.644 468.024,782.356 468.584,815.57 469.143,845.996 469.702,823.013 470.261,801.116 470.821,797.724 471.38,776.898 471.939,774.485 472.498,754.013 473.058,752.584 473.617,735.192 474.176,705.511 474.735,723.052 475.295,741.152 475.854,755.808 476.413,721.992 476.972,723.57 477.532,725.065 478.091,759.448 478.65,742.175 479.209,760.241 479.769,809.747 480.328,791.247 480.887,738.858 481.446,741.258 482.006,724.382 482.565,726.137 483.124,762.072 483.683,774.19 484.243,772.288 484.802,785.48 485.361,768.144 485.92,736.326 486.48,689.242 487.039,689.103 487.598,693.709 488.157,711.897 488.717,743.168 489.276,757.24 489.835,756.295 490.394,786.451 490.954,764.602 491.513,775.846 492.072,786.37 492.631,783.165 493.191,781.131 493.75,779.186 494.309,756.611 494.868,736.718 495.428,732.872 495.987,765.887 496.546,782.167 497.105,826.074 497.665,837.349 498.224,847.943 498.783,858.558 499.342,851.559 499.902,860.978 500.461,838.373 501.02,848.976 501.579,843.355 502.139,809.288 502.698,823.793 503.257,819.561 503.816,783.45 504.376,813.432 504.935,776.939 505.494,773.802 506.053,774.863 506.613,773.422 507.172,786.995 507.731,783.842 508.29,766.532 508.85,732.338 509.409,731.93 509.968,762.806 510.527,726.118 511.087,755.984 511.646,752.422 512.205,751.171 512.764,749.144 513.324,797.424 513.883,775.742 514.442,773.175 515.001,770.597 515.561,779.772 516.12,759.456 516.679,757.283 517.238,755.533 517.798,792.359 518.357,740.116 518.916,723.409 519.475,707.646 520.035,709.294 520.594,710.346 521.153,712.64 521.712,730.571 522.272,701.013 522.831,715.977 523.39,748.609 523.949,747.819 524.509,764.772 525.068,795.244 525.627,777.635 526.186,776.796 526.746,776.321 527.305,737.259 527.864,736.456 528.423,701.592 528.983,699.382 529.542,696.5 530.101,710.77 530.66,709.418 531.22,726.137 531.779,694.74 532.338,730.403 532.897,725.513 533.457,721.756 534.016,721.026 534.575,703.608 535.134,716.938 535.694,717.561 536.253,716.56 536.812,681.254 537.371,747.601 537.931,763.458 538.49,757.786 539.049,755.244 539.608,753.972 540.168,768.827 540.727,802.168 541.286,798.853 541.845,777.116 542.405,740.829 542.964,739.837 543.523,719.931 544.082,719.574 544.642,700.715 545.201,702.7 545.76,685.978 546.319,673.717 546.879,705.857 547.438,691.29 547.997,689.816 548.556,706.868 549.116,709.748 549.675,743.754 550.234,741.074 550.793,741.122 551.353,725.285 551.912,738.953 552.471,722.317 553.031,706.083 553.59,689.686 554.149,706.808 554.708,722.505 555.268,739.67 555.827,768.095 556.386,732.279 556.945,732.815 557.505,714.998 558.064,743.79 558.623,729.985 559.182,760.031 559.742,743.433 560.301,725.043 560.86,759.156 561.419,758.959 561.979,740.562 562.538,740.177 563.097,742.605 563.656,706.8 564.216,655.022 564.775,691.072 565.334,708.94 565.893,676.553 566.453,696.454 567.012,715.618 567.571,696.479 568.13,728.891 568.69,695.897 569.249,669.264 569.808,691.764 570.367,658.146 570.927,694.381 571.486,696.172 572.045,682.8 572.604,649.347 573.164,657.241 573.723,679.209 574.282,682.532 574.841,699.169 575.401,668.061 575.96,692.413 576.519,679.069 577.078,695.756 577.638,665.84 578.197,655.251 578.756,659.211 579.315,690.895 579.875,662.356 580.434,682.511 580.993,698.859 581.552,652.337 582.112,689.898 582.671,692.661 583.23,677.564 583.789,677.311 584.349,709.804 584.908,723.381 585.467,741.424 586.026,756.624 586.586,751.798 587.145,764.281 587.704,762.856 588.263,778.011 588.823,808.112 589.382,803.165 589.941,817.73 590.5,811.785 591.06,835.659 591.619,813.238 592.178,777.423 592.737,727.384 593.297,759.354 593.856,756.539 594.415,738.934 594.974,754.323 595.534,733.743 596.093,719.576 596.652,716.484 597.211,718.136 597.771,739.211 598.33,751.618 598.889,749.542 599.448,732.859 600.008,730.826 600.567,727.893 601.126,725.084 601.685,721.05 602.245,703.394 602.804,687.054 603.363,703.626 603.922,715.798 604.482,715.726 605.041,732.632 605.6,748.466 606.159,746.796 606.719,728.418 607.278,743.135 607.837,724.592 608.396,755.591 608.956,769.828 609.515,879.195 610.074,884.098 610.633,824.717 611.193,836.59 611.752,829.001 612.311,852.588 612.87,848.884 613.43,844.324 613.989,786.875 614.548,796.795 615.107,760.325 615.667,756.624 616.226,738.86 616.785,766.495 617.344,749.533 617.904,730.955 618.463,747.305 619.022,741.182 619.581,739.109 620.141,754.398 620.7,747.035 621.259,747.697 621.818,727.715 622.378,726.887 622.937,755.843 623.496,755.097 624.055,714.929 624.615,732.577 625.174,763.401 625.733,759.933 626.292,774.278 626.852,803.944 627.411,782.464 627.97,775.862 628.529,801.03 629.089,794.866 629.648,792.471 630.207,752.646 630.766,746.127 631.326,723.91 631.885,737.802 632.444,736.509 633.003,705.074 633.563,688.422 634.122,767.265 634.681,800.056 635.24,811.088 635.8,806.328 636.359,767.397 636.918,746.871 637.477,748.551 638.037,711.717 638.596,645.374 639.155,680.701 639.714,695.841 640.274,698.285 640.833,714.656 641.392,713.272 641.951,665.762 642.511,651.048 643.07,651.947 643.629,651.598 644.188,635.952 644.748,607.52 645.307,598.851 645.866,572.088 646.425,563.455 646.985,586.87 647.544,592.333 648.103,612.262 648.662,634.387 649.222,607.264 649.781,628.592 650.34,630.421 650.899,616.198 651.459,590.065 652.018,661.288 652.577,646.189 653.136,664.792 653.696,668.214 654.255,688.838 654.814,690.085 655.373,644.33 655.933,661.691 656.492,629.583 657.051,651.095 657.61,671.167 658.17,686.932 658.729,702.969 659.288,718.534 659.847,718.33 660.407,733.447 660.966,717.046 661.525,716.005 662.084,699.405 662.644,639.885 663.203,642.795 663.762,642.959 664.321,645.815 664.881,668.203 665.44,639.573 665.999,642.908 666.558,611.564 667.118,597.934 667.677,622.547 668.236,627.1 668.795,599.895 669.355,620.49 669.914,642.193 670.473,659.198 671.032,660.76 671.592,645.057 672.151,663.773 672.71,700.165 673.269,698.386 673.829,714.516 674.388,727.942 674.947,743.57 675.506,724.69 676.066,788.678 676.625,784.941 677.184,780.953 677.743,742.586 678.303,758.2 678.862,739.893 679.421,751.062 679.981,712.528 680.54,713.164 681.099,681.175 681.658,697.196 682.218,694.575 682.777,695.425 683.336,680.672 683.895,652.753 684.455,638.917 685.014,642.385 685.573,648.423 686.132,678.58 686.692,663.939 687.251,632.765 687.81,620.51 688.369,624.479 688.929,658.358 689.488,644.872 690.047,598.814 690.606,569.925 691.166,543.648 691.725,553.743 692.284,558.925 692.843,584.924 693.403,621.362 693.962,590.717 694.521,598.547 695.08,616.806 695.64,606.733 696.199,608.191 696.758,630.044 697.317,634.092 697.877,617.628 698.436,638.859 698.995,661.251 699.554,681.582 700.114,698.84 700.673,701.045 701.232,717.392 701.791,667.294 702.351,668.472 702.91,671.119 703.469,641.616 704.028,676.317 704.588,661.85 705.147,634.802 705.706,625.026 706.265,632.833 706.825,640.07 707.384,661.475 707.943,678.046 708.502,645.957 709.062,650.599 709.621,667.781 710.18,702.578 710.739,718.065 711.299,731.271 711.858,729.746 712.417,729.56 712.976,762.415 713.536,761.587 714.095,770.665 714.654,763.726 715.213,791.362 715.773,804.096 716.332,753.076 716.891,747.802 717.45,777.54 718.01,757.473 718.569,770.636 719.128,781.969 719.687,746.846 720.247,791.009 720.806,752.368 721.365,715.11 721.924,732.404 722.484,729.668 723.043,712.725 723.602,744.751 724.161,728.139 724.721,710.678 725.28,648.544 725.839,650.162 726.398,653.203 726.958,651.937 727.517,623.799 728.076,610.205 728.635,629.587 729.195,619.072 729.754,606.223 730.313,646.876 730.872,679.212 731.432,682.356 731.991,683.966 732.55,697.344 733.109,696.096 733.669,681.413 734.228,699.101 734.787,680.151 735.346,683.1 735.906,714.979 736.465,717.8 737.024,749.064 737.583,716.725 738.143,713.759 738.702,725.514 739.261,726.688 739.82,722.968 740.38,722.497 740.939,721.676 741.498,704.47 742.057,687.533 742.617,652.715 743.176,622.539 743.735,659.631 744.294,673.609 744.854,707.152 745.413,736.387 745.972,733.599 746.531,729.095 747.091,712.436 747.65,715.282 748.209,698.117 748.768,709.938 749.328,707.431 749.887,724.285 750.446,704.292 751.005,715.51 751.565,712.796 752.124,725.826 752.683,741.422 753.242,692.162 753.802,676.518 754.361,660.547 754.92,679.951 755.479,678.659 756.039,681.446 756.598,665.549 757.157,637.901 757.716,641.54 758.276,681.951 758.835,697.29 759.394,663.293 759.953,648.452 760.513,682.218 761.072,665.116 761.631,683.866 762.19,699.318 762.75,682.337 763.309,700.241 763.868,761.426 764.427,755.574 764.987,766.201 765.546,761.308 766.105,758.845 766.664,725.282 767.224,722.749 767.783,752.241 768.342,780.045 768.901,759.284 769.461,799.108 770.02,793.738 770.579,790.001 771.138,750.638 771.698,746.284 772.257,744.849 772.816,725.419 773.375,723.897 773.935,725.939 774.494,724.604 775.053,722.678 775.612,705.192 776.172,706.527 776.731,721.644 777.29,703.709 777.849,669.288 778.409,717.784 778.968,733.252 779.527,732.273 780.086,714.734 780.646,695.625 781.205,695.101 781.764,727.948 782.323,725.651 782.883,726.676 783.442,706.205 784.001,718.437 784.56,683.003 785.12,678.61 785.679,659.342 786.238,661.25 786.797,664.451 787.357,650.934 787.916,651.416 788.475,687.183 789.034,687.159 789.594,723.984 790.153,717.931 790.712,732.019 791.271,732.646 791.831,763.114 792.39,746.96 792.949,758.931 793.508,740.433 794.068,768.461 794.627,745.501 795.186,756.063 795.745,719.941 796.305,717.991 796.864,729.412 797.423,712.334 797.982,696.038 798.542,760.222 799.101,708.663 799.66,723.873 800.219,753.492 800.779,781.491 801.338,773.382 801.897,752.032 802.456,728.62 803.016,711.392 803.575,708.834 804.134,709.245 804.693,657.914 805.253,658.53 805.812,674.524 806.371,674.23 806.931,658.393 807.49,646.806 808.049,633.75 808.608,591.003 809.168,597.245 809.727,586.474 810.286,625.036 810.845,613.07 811.405,633.272 811.964,623.202 812.523,659.308 813.082,662.642 813.642,727.644 814.201,741.093 814.76,704.025 815.319,716.97 815.879,698.098 816.438,696.063 816.997,711.027 817.556,694.567 818.116,660.945 818.675,662.41 819.234,662.648 819.793,665.394 820.353,634.375 820.912,651.156 821.471,651.744 822.03,686.486 822.59,692.984 823.149,674.229 823.708,707.148 824.267,688.393 824.827,674.414 825.386,690.544 825.945,705.17 826.504,688.394 827.064,658.435 827.623,674.387 828.182,693.734 828.741,693.306 829.301,693.045 829.86,712.668 830.419,746.065 830.978,727.358 831.538,741.642 832.097,708.771 832.656,675.94 833.215,681.562 833.775,667.47 834.334,702.43 834.893,699.958 835.452,717.253 836.012,717.588 836.571,745.272 837.13,756.979 837.689,753.931 838.249,766.273 838.808,745.801 839.367,679.535 839.926,680.666 840.486,696.728 841.045,696.106 841.604,746.462 842.163,726.957 842.723,675.981 843.282,677.304 843.841,677.267 844.4,645.042 844.96,616.98 845.519,621.069 846.078,626.458 846.637,613.462 847.197,666.04 847.756,662.016 848.315,648.215 848.874,647.853 849.434,664.922 849.993,648.627 850.552,701.423 851.111,716.903 851.671,732.692 852.23,747.799 852.789,805.715 853.348,786.769 853.908,727.153 854.467,738.447 855.026,750.925 855.585,731.828 856.145,761.733 856.704,738.854 857.263,732.781 857.822,730.946 858.382,710.623 858.941,693.316 859.5,690.312 860.059,691.541 860.619,708.209 861.178,707.636 861.737,721.865 862.296,671.169 862.856,670.281 863.415,667.623 863.974,688.531 864.533,690.717 865.093,705.509 865.652,686.471 866.211,687.326 866.77,688.216 867.33,657.763 867.889,671.347 868.448,685.373 869.007,687.741 869.567,718.238 870.126,748.491 870.685,795.612 871.244,810.151 871.804,771.261 872.363,751.958 872.922,731.348 873.481,743.954 874.041,754.955 874.6,719.107 875.159,698.886 875.718,714.245 876.278,714.757 876.837,714.174 877.396,747.879 877.955,725.811 878.515,724.102 879.074,753.304 879.633,700.453 880.192,760.907 880.752,790.562 881.311,771.932 881.87,768.858 882.429,732.616 882.989,727.392 883.548,690.349 884.107,671.372 884.666,672.488 885.226,674.053 885.785,723.208 886.344,718.491 886.903,721.679 887.463,701.635 888.022,685.553 888.581,667.328 889.14,664.657 889.7,644.513 890.259,648.896 890.818,655.059 891.377,673.296 891.937,656.031 892.496,688.514 893.055,702.688 893.614,701.932 894.174,697.575 894.733,666.225 895.292,648.859 895.851,652.85 896.411,702.174 896.97,718.885 897.529,701.153 898.088,702.015 898.648,685.098 899.207,651.021 899.766,636.6 900.325,640.092 900.885,658.604 901.444,692.573 902.003,723.377 902.562,709.362 903.122,740.779 903.681,740.301 904.24,689.016 904.799,674.62 905.359,673.577 905.918,686.867 906.477,672.052 907.036,705.947 907.596,709.747 908.155,726.199 908.714,693.609 909.273,726.871 909.833,676.566 910.392,691.361 910.951,657.075 911.51,642.974 912.07,609.346 912.629,613.513 913.188,601.901 913.747,558.269 914.307,547.398 914.866,554.767 915.425,564.159 915.984,553.068 916.544,561.486 917.103,568.123 917.662,590.409 918.221,580.029 918.781,589.354 919.34,596.878 919.899,535.073 920.458,560.433 921.018,565.87 921.577,539.16 922.136,510.16 922.695,521.255 923.255,526.938 923.814,549.775 924.373,558.102 924.932,566.891 925.492,571.689 926.051,592.96 926.61,630.593 927.169,620.918 927.729,592.442 928.288,598.849 928.847,620.776 929.406,606.708 929.966,609.648 930.525,620.39 931.084,655.805 931.644,659.03 932.203,694.704 932.762,695.574 933.321,712.524 933.881,692.363 934.44,706.55 934.999,720.363 935.558,738.892 936.118,719.796 936.677,752.067 937.236,746.224 937.795,707.621 938.355,706.435 938.914,690.486 939.473,706.286 940.032,657.863 940.592,678.341 941.151,647.552 941.71,651.268 942.269,672.075 942.829,691.47 943.388,659.24 943.947,646.054 944.506,681.897 945.066,683.203 945.625,682.653 946.184,698.83 946.743,712.439 947.303,708.988 947.862,724.557 948.421,739.451 948.98,751.51 949.54,761.865 950.099,773.273 950.658,769.189 951.217,763.128 951.777,790.945 952.336,786.235 952.895,793.059 953.454,788.099 954.014,846.671 954.573,836.25 955.132,878.765 955.691,804.385 956.251,780.472 956.81,789.416 957.369,767.545 957.928,747.872 958.488,760.407 959.047,775.735 959.606,774.326 960.165,765.601 960.725,777.603 961.284,725.622 961.843,723.236 962.402,751.485 962.962,749.212 963.521,777.651 964.08,742.53 964.639,693.825 965.199,708.288 965.758,686.324 966.317,688.321 966.876,701.725 967.436,683.667 967.995,700.114 968.554,748.535 969.113,708.993 969.673,709.28 970.232,739.371 970.791,718.734 971.35,730.079 971.91,727.285 972.469,742.48 973.028,739.083 973.587,704.172 974.147,718.548 974.706,713.799 975.265,693.705 975.824,677.861 976.384,694.155 976.943,708.329 977.502,705.21 978.061,721.821 978.621,718.945 979.18,715.305 979.739,713.552 980.298,677.825 980.858,694.241 981.417,709.119 981.976,709.274 982.535,723.543 983.095,706.369 983.654,706.771 984.213,719.64 984.772,684 985.332,670.823 985.891,651.576 986.45,655.943 987.009,687.715 987.569,641.286 988.128,658.807 988.687,646.069 989.246,648.133 989.806,665.896 990.365,680.929 990.924,683.276 991.483,686.618 992.043,704.404 992.602,722.521 993.161,719.92 993.72,751.108 994.28,746.74 994.839,708.142 995.398,687.548 995.957,667.862 996.517,655.188 997.076,656.301 997.635,630.196 998.194,649.775 998.754,650.621 999.313,669.664 999.872,653.457 1000.43,670.405 1000.99,661.296 1001.55,646.775 1002.11,644.575 1002.67,678.25 1003.23,691.562 1003.79,688.324 1004.35,686.42 1004.91,720.365 1005.46,685.814 1006.02,685.18 1006.58,684.25 1007.14,684.707 1007.7,650.626 1008.26,655.164 1008.82,658.153 1009.38,660.01 1009.94,628.051 1010.5,614.381 1011.06,635.961 1011.62,671.306 1012.18,671.699 1012.73,672.602 1013.29,692.342 1013.85,689.825 1014.41,689.429 1014.97,654.993 1015.53,671.551 1016.09,670.177 1016.65,669.272 1017.21,604.109 1017.77,611.3 1018.33,599.594 1018.89,605.437 1019.45,610.254 1020.01,581.242 1020.56,588.192 1021.12,592.96 1021.68,599.879 1022.24,635.814 1022.8,622.86 1023.36,658.441 1023.92,641.612 1024.48,612.326 1025.04,599.937 1025.6,607.208 1026.16,614.868 1026.72,619.779 1027.28,641.346 1027.83,694.516 1028.39,712.107 1028.95,726.76 1029.51,724.013 1030.07,724.528 1030.63,691.906 1031.19,678.255 1031.75,711.126 1032.31,711.155 1032.87,711.148 1033.43,740.379 1033.99,754.136 1034.55,768.375 1035.1,747.965 1035.66,778.286 1036.22,774.292 1036.78,785.849 1037.34,763.997 1037.9,761.644 1038.46,774.62 1039.02,754.964 1039.58,732.063 1040.14,713.787 1040.7,727.3 1041.26,722.834 1041.82,701.541 1042.38,704.947 1042.93,685.271 1043.49,683.698 1044.05,731.12 1044.61,744.565 1045.17,721.409 1045.73,717.992 1046.29,716.577 1046.85,715.088 1047.41,711.527 1047.97,727.131 1048.53,744.759 1049.09,674.543 1049.65,639.903 1050.2,653.558 1050.76,655.014 1051.32,669.28 1051.88,653.087 1052.44,635.938 1053,638.254 1053.56,644.371 1054.12,645.545 1054.68,668.546 1055.24,634.772 1055.8,605.121 1056.36,607.145 1056.92,628.477 1057.48,636.532 1058.03,642.236 1058.59,643.978 1059.15,662.78 1059.71,649.395 1060.27,652.042 1060.83,654.134 1061.39,641.314 1061.95,627.393 1062.51,612.95 1063.07,617.161 1063.63,620.297 1064.19,625.43 1064.75,612.382 1065.3,614.78 1065.86,568.655 1066.42,562.338 1066.98,604.671 1067.54,590.146 1068.1,597.212 1068.66,602.842 1069.22,607.638 1069.78,612.986 1070.34,633.778 1070.9,635.361 1071.46,635.105 1072.02,686.918 1072.57,656.397 1073.13,656.579 1073.69,690.974 1074.25,688.447 1074.81,688.833 1075.37,706.202 1075.93,706.935 1076.49,687.78 1077.05,703.156 1077.61,702.451 1078.17,690.468 1078.73,722.079 1079.29,738.509 1079.85,720.156 1080.4,700.459 1080.96,730.299 1081.52,743.379 1082.08,745.032 1082.64,757.845 1083.2,752.651 1083.76,748.292 1084.32,745.73 1084.88,694.773 1085.44,713.739 1086,712.381 1086.56,708.789 1087.12,740.824 1087.67,737.542 1088.23,735.179 1088.79,702.632 1089.35,703.463 1089.91,698.439 1090.47,652.945 1091.03,621.136 1091.59,625.215 1092.15,659.357 1092.71,644.772 1093.27,657.854 1093.83,658.685 1094.39,613.959 1094.94,620.271 1095.5,619.386 1096.06,653.392 1096.62,654.202 1097.18,639.276 1097.74,675.63 1098.3,660.406 1098.86,663.288 1099.42,667.699 1099.98,669.873 1100.54,639.51 1101.1,642.938 1101.66,647.053 1102.22,637.123 1102.77,620.254 1103.33,627.652 1103.89,630.44 1104.45,634.296 1105.01,639.68 1105.57,671.837 1106.13,653.843 1106.69,620.031 1107.25,625.168 1107.81,628.739 1108.37,630.467 1108.93,630.534 1109.49,665.036 1110.04,682.437 1110.6,667.758 1111.16,654.827 1111.72,659.87 1112.28,662.416 1112.84,650.83 1113.4,641.42 1113.96,646.224 1114.52,664.788 1115.08,670.032 1115.64,635.486 1116.2,650.269 1116.76,664.953 1117.31,648.661 1117.87,650.746 1118.43,649 1118.99,636.642 1119.55,673.342 1120.11,722.602 1120.67,718.99 1121.23,698.811 1121.79,695.379 1122.35,693.376 1122.91,673.169 1123.47,674.295 1124.03,674.833 1124.59,692.542 1125.14,677.805 1125.7,660.575 1126.26,666.154 1126.82,651.52 1127.38,639.482 1127.94,643.908 1128.5,682.17 1129.06,665.313 1129.62,685.285 1130.18,701.935 1130.74,704.381 1131.3,720.321 1131.86,715.37 1132.41,745.675 1132.97,741.436 1133.53,758.324 1134.09,766.736 1134.65,742.864 1135.21,754.231 1135.77,745.094 1136.33,706.023 1136.89,702.43 1137.45,697.149 1138.01,727.62 1138.57,740.724 1139.13,708.016 1139.68,674.138 1140.24,689.669 1140.8,706.892 1141.36,723.025 1141.92,706.374 1142.48,704.349 1143.04,655.061 1143.6,659.227 1144.16,647.54 1144.72,632.97 1145.28,602.631 1145.84,576.858 1146.4,597.144 1146.96,587.973 1147.51,575.108 1148.07,629.447 1148.63,597.219 1149.19,568.729 1149.75,604.653 1150.31,624.869 1150.87,609.679 1151.43,644.027 1151.99,659.948 1152.55,689.179 1153.11,703.572 1153.67,687.504 1154.23,689.78 1154.78,673.889 1155.34,702.684 1155.9,703.91 1156.46,732.054 1157.02,679.27 1157.58,676.938 1158.14,675.5 1158.7,693.318 1159.26,672.606 1159.82,671.15 1160.38,687.595 1160.94,687.027 1161.5,669.536 1162.05,669.413 1162.61,654.678 1163.17,657.265 1163.73,657.636 1164.29,692.382 1164.85,676.352 1165.41,676.681 1165.97,661.454 1166.53,649.316 1167.09,669.933 1167.65,671.98 1168.21,687.064 1168.77,673.924 1169.33,690.81 1169.88,677.248 1170.44,681.294 1171,683.7 1171.56,733.027 1172.12,732.379 1172.68,695.82 1173.24,690.936 1173.8,692.735 1174.36,691.778 1174.92,676.962 1175.48,696.035 1176.04,708.229 1176.6,688.236 1177.15,638.879 1177.71,643.244 1178.27,646.374 1178.83,649.534 1179.39,685.046 1179.95,702.862 1180.51,687.941 1181.07,690.985 1181.63,706.247 1182.19,691.283 1182.75,706.613 1183.31,705.266 1183.87,687.919 1184.43,703.073 1184.98,730.999 1185.54,698.255 1186.1,742.564 1186.66,706.501 1187.22,703.375 1187.78,720.389 1188.34,684.85 1188.9,671.915 1189.46,688.005 1190.02,689.156 1190.58,690.729 1191.14,658.633 1191.7,659.072 1192.25,644.181 1192.81,678.689 1193.37,697.072 1193.93,765.807 1194.49,775.447 1195.05,801.687 1195.61,811.775 1196.17,784.667 1196.73,799.028 1197.29,775.371 1197.85,755.126 1198.41,764.875 1198.97,792.606 1199.52,770.411 1200.08,764.814 1200.64,760.173 1201.2,754.496 1201.76,768.711 1202.32,795.146 1202.88,757.883 1203.44,785.359 1204,811.242 1204.56,834.77 1205.12,795.984 1205.68,808.207 1206.24,783.784 1206.8,828.035 1207.35,805.804 1207.91,797.015 1208.47,788.622 1209.03,766.943 1209.59,732.387 1210.15,713.463 1210.71,695.32 1211.27,675.83 1211.83,662.352 1212.39,626.495 1212.95,641.854 1213.51,611.272 1214.07,630.691 1214.62,648.807 1215.18,696.83 1215.74,728.817 1216.3,695.618 1216.86,692.785 1217.42,659.092 1217.98,659.491 1218.54,659.424 1219.1,647.344 1219.66,632.47 1220.22,653.385 1220.78,670.725 1221.34,673.531 1221.89,674.276 1222.45,642.82 1223.01,646.437 1223.57,647.618 1224.13,664.307 1224.69,665 1225.25,665.651 1225.81,647.416 1226.37,632.017 1226.93,634.928 1227.49,682.796 1228.05,733.545 1228.61,717.037 1229.17,713.847 1229.72,679.802 1230.28,711.019 1230.84,705.716 1231.4,707.042 1231.96,705.177 1232.52,736.279 1233.08,755.71 1233.64,736.301 1234.2,734.351 1234.76,733.77 1235.32,712.153 1235.88,708.967 1236.44,708.869 1236.99,709.524 1237.55,723.406 1238.11,698.124 1238.67,710.736 1239.23,661.868 1239.79,709.348 1240.35,675.766 1240.91,677.567 1241.47,694.5 1242.03,658.666 1242.59,658.849 1243.15,657.456 1243.71,677.792 1244.26,677.212 1244.82,694.587 1245.38,679.967 1245.94,661.508 1246.5,643.781 1247.06,644.08 1247.62,661.126 1248.18,645.785 1248.74,645.929 1249.3,628.631 1249.86,630.637 1250.42,603.654 1250.98,640.624 1251.54,642.881 1252.09,646.444 1252.65,645.305 1253.21,661.26 1253.77,651.199 1254.33,664.621 1254.89,664.821 1255.45,679.629 1256.01,680.012 1256.57,699.403 1257.13,683.294 1257.69,683.165 1258.25,730.392 1258.81,725.412 1259.36,726.96 1259.92,739.91 1260.48,722.024 1261.04,738.096 1261.6,749.457 1262.16,745.86 1262.72,762.528 1263.28,730.513 1263.84,677.342 1264.4,697.237 1264.96,695.583 1265.52,710.659 1266.08,681.159 1266.63,695.364 1267.19,725.972 1267.75,708.214 1268.31,708.226 1268.87,689.553 1269.43,706.411 1269.99,723.044 1270.55,751.365 1271.11,766.579 1271.67,761.9 1272.23,761.042 1272.79,739.744 1273.35,689.569 1273.91,719.373 1274.46,684.347 1275.02,687.189 1275.58,718.818 1276.14,715.285 1276.7,757.334 1277.26,752.075 1277.82,769.45 1278.38,780.981 1278.94,758.413 1279.5,754.035 1280.06,730.498 1280.62,742.584 1281.18,707.705 1281.73,705.681 1282.29,719.484 1282.85,698.749 1283.41,726.931 1283.97,711.666 1284.53,744.273 1285.09,725.013 1285.65,707.514 1286.21,706.286 1286.77,657.458 1287.33,691.603 1287.89,691.75 1288.45,675.005 1289,689.662 1289.56,659.739 1290.12,660.617 1290.68,727.672 1291.24,743.023 1291.8,719.356 1292.36,703.241 1292.92,669.673 1293.48,635.883 1294.04,587.831 1294.6,607.535 1295.16,597.323 1295.72,651.984 1296.28,622.604 1296.83,590.784 1297.39,577.099 1297.95,563.512 1298.51,554.471 1299.07,561.899 1299.63,567.186 1300.19,588.986 1300.75,593.789 1301.31,612.743 1301.87,587.839 1302.43,580.434 1302.99,604.123 1303.55,593.793 1304.1,599.832 1304.66,587.355 1305.22,592.158 1305.78,594.844 1306.34,630.44 1306.9,633.952 1307.46,635.306 1308.02,669.601 1308.58,672.076 1309.14,659.71 1309.7,676.931 1310.26,643.423 1310.82,693.298 1311.38,691.014 1311.93,688.519 1312.49,704.925 1313.05,703.258 1313.61,707.145 1314.17,705.916 1314.73,720.12 1315.29,747.993 1315.85,743.549 1316.41,755.718 1316.97,751.012 1317.53,780.498 1318.09,741.751 1318.65,709.734 1319.2,729.431 1319.76,727.398 1320.32,736.403 1320.88,749.842 1321.44,747.353 1322,742.65 1322.56,722.362 1323.12,715.95 1323.68,715.338 1324.24,729.482 1324.8,728.403 1325.36,694.642 1325.92,711.538 1326.47,695.914 1327.03,678.546 1327.59,712.608 1328.15,708.576 1328.71,676.95 1329.27,696.619 1329.83,724.838 1330.39,751.868 1330.95,750.787 1331.51,760.951 1332.07,755.225 1332.63,750.243 1333.19,730.255 1333.75,727.574 1334.3,692.367 1334.86,690.07 1335.42,686.323 1335.98,689.428 1336.54,686.091 1337.1,720.423 1337.66,718.925 1338.22,700.796 1338.78,715.165 1339.34,700.205 1339.9,714.429 1340.46,698.895 1341.02,714.949 1341.57,697.737 1342.13,677.717 1342.69,677.596 1343.25,660.523 1343.81,645.387 1344.37,631.804 1344.93,617.51 1345.49,604.52 1346.05,557.344 1346.61,545.066 1347.17,518.088 1347.73,528.591 1348.29,542.923 1348.84,567.014 1349.4,557.73 1349.96,564.798 1350.52,589.785 1351.08,563.613 1351.64,555.072 1352.2,563.213 1352.76,571.463 1353.32,595.857 1353.88,598.099 1354.44,602.398 1355,590.24 1355.56,611.536 1356.12,599.681 1356.67,654.427 1357.23,686.443 1357.79,718.394 1358.35,684.608 1358.91,663.604 1359.47,681.286 1360.03,701.064 1360.59,699.692 1361.15,685.435 1361.71,701.022 1362.27,697.303 1362.83,729.682 1363.39,742.171 1363.94,770.612 1364.5,801.65 1365.06,826.222 1365.62,784.428 1366.18,779.51 1366.74,806.877 1367.3,769.226 1367.86,765.845 1368.42,760.77 1368.98,740.799 1369.54,707.012 1370.1,690.611 1370.66,674.676 1371.21,660.608 1371.77,630.594 1372.33,651.124 1372.89,657 1373.45,628.464 1374.01,633.772 1374.57,653.711 1375.13,668.453 1375.69,671.327 1376.25,689.609 1376.81,691.157 1377.37,640.969 1377.93,643.355 1378.49,627.119 1379.04,629.735 1379.6,649.165 1380.16,666.322 1380.72,684.064 1381.28,702.17 1381.84,717.206 1382.4,718.406 1382.96,731.604 1383.52,729.366 1384.08,724.752 1384.64,739.77 1385.2,739.058 1385.76,734.305 1386.31,748.545 1386.87,731.579 1387.43,748.072 1387.99,763.746 1388.55,791.774 1389.11,787.93 1389.67,750.463 1390.23,728.05 1390.79,708.562 1391.35,693.654 1391.91,693.158 1392.47,692.173 1393.03,707.336 1393.58,659.52 1394.14,691.872 1394.7,708.885 1395.26,739.489 1395.82,733.14 1396.38,732.559 1396.94,793.951 1397.5,799.602 1398.06,793.001 1398.62,802.195 1399.18,747.121 1399.74,743.219 1400.3,735.054 1400.86,686.251 1401.41,671.976 1401.97,687.072 1402.53,700.735 1403.09,731.222 1403.65,728.987 1404.21,722.985 1404.77,719.742 1405.33,715.582 1405.89,695.94 1406.45,714.819 1407.01,713.573 1407.57,678.029 1408.13,662.865 1408.68,677.133 1409.24,693.345 1409.8,662.035 1410.36,691.577 1410.92,704.347 1411.48,703.943 1412.04,721.874 1412.6,734.519 1413.16,747.33 1413.72,727.391 1414.28,724.906 1414.84,691.542 1415.4,706.524 1415.95,669.853 1416.51,651.699 1417.07,620.515 1417.63,605.962 1418.19,592.793 1418.75,547.369 1419.31,552.276 1419.87,561.077 1420.43,567.553 1420.99,569.484 1421.55,573.673 1422.11,614.3 1422.67,618.312 1423.23,538.248 1423.78,545.18 1424.34,568.389 1424.9,591.389 1425.46,547.281 1426.02,568.111 1426.58,594.154 1427.14,616.685 1427.7,620.508 1428.26,605.273 1428.82,611.832 1429.38,634.196 1429.94,668.192 1430.5,667.664 1431.05,638.808 1431.61,628.642 1432.17,636.447 1432.73,657.533 1433.29,661.916 1433.85,679.309 1434.41,661.841 1434.97,693.542 1435.53,661.031 1436.09,665.58 1436.65,650.523 1437.21,640.225 1437.77,608.775 1438.33,629.635 1438.88,619.383 1439.44,594.214 1440,613.583 1440.56,635.047 1441.12,651.759 1441.68,636.361 1442.24,642.106 1442.8,659.269 1443.36,661.03 1443.92,677.968 1444.48,729.899 1445.04,727.776 1445.6,692.269 1446.15,679.02 1446.71,682.504 1447.27,696.076 1447.83,665.256 1448.39,667.45 1448.95,656.024 1449.51,643.591 1450.07,664.667 1450.63,695.622 1451.19,729.586 1451.75,708.73 1452.31,674.19 1452.87,675.757 1453.42,674.301 1453.98,645.148 1454.54,596.17 1455.1,582.95 1455.66,587.522 1456.22,658.279 1456.78,595.788 1457.34,601.379 1457.9,703.839 1458.46,720.048 1459.02,729.924 1459.58,748.474 1460.14,748.348 1460.7,777.797 1461.25,771.708 1461.81,796.115 1462.37,786.921 1462.93,779.72 1463.49,804.395 1464.05,876.243 1464.61,850.724 1465.17,823.698 1465.73,768.69 1466.29,765.641 1466.85,723.511 1467.41,753.227 1467.97,814.649 1468.52,809.607 1469.08,816.976 1469.64,807.233 1470.2,752.893 1470.76,716.304 1471.32,730.505 1471.88,743.711 1472.44,756.854 1473,736.089 1473.56,732.052 1474.12,711.783 1474.68,725.223 1475.24,703.411 1475.79,714.156 1476.35,681.853 1476.91,683.499 1477.47,701.587 1478.03,698.786 1478.59,680.991 1479.15,681.666 1479.71,682.618 1480.27,702.791 1480.83,701.455 1481.39,701.089 1481.95,715.301 1482.51,725.978 1483.07,775.006 1483.62,782.639 1484.18,757.756 1484.74,787.324 1485.3,781.872 1485.86,839.27 1486.42,832.003 1486.98,855.554 1487.54,846.52 1488.1,823.765 1488.66,783.177 1489.22,761.676 1489.78,792.127 1490.34,770.96 1490.89,782.079 1491.45,812.266 1492.01,838.849 1492.57,811.954 1493.13,790.934 1493.69,766.607 1494.25,759.751 1494.81,736.446 1495.37,701.078 1495.93,712.791 1496.49,678.742 1497.05,676.516 1497.61,704.703 1498.16,704.286 1498.72,706.121 1499.28,724.646 1499.84,703.142 1500.4,751.599 1500.96,719.735 1501.52,701.027 1502.08,698.324 1502.64,652.671 1503.2,641.298 1503.76,644.556 1504.32,597.183 1504.88,605.042 1505.44,579.229 1505.99,601.349 1506.55,606.534 1507.11,607.286 1507.67,628.633 1508.23,596.088 1508.79,571.292 1509.35,545.22 1509.91,487.729 1510.47,499.223 1511.03,508.556 1511.59,503.386 1512.15,546.826 1512.71,554.886 1513.26,561.304 1513.82,568.421 1514.38,544.076 1514.94,532.183 1515.5,523.683 1516.06,512.708 1516.62,523.43 1517.18,532.649 1517.74,575.515 1518.3,597.297 1518.86,602.512 1519.42,641.478 1519.98,642.302 1520.53,642.564 1521.09,610.488 1521.65,645.422 1522.21,664.267 1522.77,681.981 1523.33,682.396 1523.89,650.251 1524.45,652.665 1525.01,640.039 1525.57,613.732 1526.13,618.336 1526.69,606.154 1527.25,578.982 1527.81,605.146 1528.36,625.942 1528.92,644.201 1529.48,660.859 1530.04,662.799 1530.6,664.709 1531.16,695.594 1531.72,697.579 1532.28,666.772 1532.84,668.935 1533.4,654.677 1533.96,655.331 1534.52,673.71 1535.08,709.034 1535.63,691.806 1536.19,691.298 1536.75,705.046 1537.31,668.525 1537.87,684.71 1538.43,682.79 1538.99,654.581 1539.55,658.604 1540.11,679.624 1540.67,714.437 1541.23,715.346 1541.79,700.17 1542.35,698.059 1542.9,683.339 1543.46,671.035 1544.02,672.982 1544.58,673.229 1545.14,672.522 1545.7,675.166 1546.26,640.237 1546.82,644.721 1547.38,629.802 1547.94,631.88 1548.5,636.897 1549.06,639.259 1549.62,641.151 1550.18,680.134 1550.73,712.054 1551.29,711.554 1551.85,711.83 1552.41,696.119 1552.97,726.841 1553.53,707.351 1554.09,676.201 1554.65,658.917 1555.21,677.405 1555.77,663.711 1556.33,651.555 1556.89,675.309 1557.45,678.373 1558,725.827 1558.56,706.021 1559.12,705.604 1559.68,721.282 1560.24,688.119 1560.8,719.235 1561.36,700.928 1561.92,683.709 1562.48,621.125 1563.04,576.184 1563.6,586.289 1564.16,576.421 1564.72,568.095 1565.28,557.025 1565.83,564.638 1566.39,584.514 1566.95,602.271 1567.51,637.578 1568.07,653.875 1568.63,638.608 1569.19,626.733 1569.75,645.918 1570.31,630.461 1570.87,601.022 1571.43,621.892 1571.99,607.541 1572.55,599.825 1573.1,589.317 1573.66,611.989 1574.22,633.248 1574.78,668.93 1575.34,652.171 1575.9,640.968 1576.46,660.133 1577.02,659.328 1577.58,643.025 1578.14,631.452 1578.7,669.797 1579.26,703.255 1579.82,670.061 1580.37,668.715 1580.93,651.147 1581.49,664.507 1582.05,666.422 1582.61,665.844 1583.17,680.278 1583.73,696.648 1584.29,711.251 1584.85,728.753 1585.41,725.495 1585.97,756.332 1586.53,734.496 1587.09,728.913 1587.65,726.468 1588.2,723.824 1588.76,721.291 1589.32,723.071 1589.88,757.542 1590.44,801.478 1591,798.025 1591.56,792.337 1592.12,800.606 1592.68,795.519 1593.24,788.553 1593.8,750.759 1594.36,715.387 1594.92,713.825 1595.47,711.055 1596.03,660.469 1596.59,708.989 1597.15,690.628 1597.71,674.663 1598.27,709.205 1598.83,754.542 1599.39,817.636 1599.95,825.637 1600.51,816.992 1601.07,845.331 1601.63,851.04 1602.19,875.975 1602.74,878.799 1603.3,887.307 1603.86,848.187 1604.42,822.91 1604.98,816.98 1605.54,792.244 1606.1,775.392 1606.66,754.21 1607.22,754.155 1607.78,753.765 1608.34,751.107 1608.9,760.808 1609.46,776.262 1610.02,757.452 1610.57,768.28 1611.13,728.248 1611.69,728.091 1612.25,755.018 1612.81,748.666 1613.37,743.44 1613.93,738.593 1614.49,718.789 1615.05,751.605 1615.61,774.809 1616.17,770.511 1616.73,750.002 1617.29,698.558 1617.84,714.504 1618.4,698.796 1618.96,745.084 1619.52,758.076 1620.08,782.593 1620.64,808.234 1621.2,799.466 1621.76,824.436 1622.32,784.002 1622.88,776.481 1623.44,753.954 1624,748.868 1624.56,727.575 1625.11,723.535 1625.67,671.267 1626.23,687.572 1626.79,688.292 1627.35,720.976 1627.91,718.64 1628.47,686.693 1629.03,702.44 1629.59,687.09 1630.15,688.948 1630.71,704.675 1631.27,735.502 1631.83,729.815 1632.39,708.249 1632.94,741.819 1633.5,755.713 1634.06,706.63 1634.62,721.243 1635.18,672.043 1635.74,655.614 1636.3,641.072 1636.86,624.449 1637.42,627.096 1637.98,631.45 1638.54,634.487 1639.1,636.959 1639.66,620.562 1640.21,641.552 1640.77,645.462 1641.33,662.862 1641.89,678.183 1642.45,645.609 1643.01,681.798 1643.57,664.532 1644.13,651.134 1644.69,668.151 1645.25,637.154 1645.81,654.777 1646.37,677.439 1646.93,660.473 1647.48,661.88 1648.04,661.605 1648.6,679.344 1649.16,680.561 1649.72,696.881 1650.28,678.851 1650.84,677.872 1651.4,708.692 1651.96,707.351 1652.52,741.38 1653.08,723.135 1653.64,720.89 1654.2,706.863 1654.76,690.168 1655.31,659.507 1655.87,661.248 1656.43,655.713 1656.99,689.164 1657.55,674.066 1658.11,675.571 1658.67,707.22 1659.23,674.676 1659.79,674.76 1660.35,693.14 1660.91,676.017 1661.47,692.66 1662.03,708.904 1662.58,708.312 1663.14,708.82 1663.7,657.802 1664.26,648.851 1664.82,666.537 1665.38,651.598 1665.94,621.109 1666.5,577.12 1667.06,601.953 1667.62,609.543 1668.18,615.342 1668.74,617.7 1669.3,622.747 1669.85,577.879 1670.41,566.89 1670.97,541.053 1671.53,531.814 1672.09,555.779 1672.65,530.622 1673.21,539.71 1673.77,560.524 1674.33,565.674 1674.89,584.83 1675.45,589.219 1676.01,593.994 1676.57,580.117 1677.13,554.399 1677.68,578.47 1678.24,549.877 1678.8,572.313 1679.36,592.409 1679.92,586.24 1680.48,590.264 1681.04,627.804 1681.6,629.74 1682.16,600.005 1682.72,607.465 1683.28,640.743 1683.84,656.914 1684.4,660.992 1684.95,663.722 1685.51,679.004 1686.07,633.525 1686.63,638.738 1687.19,642.511 1687.75,597.446 1688.31,616.514 1688.87,619.561 1689.43,640.928 1689.99,646.406 1690.55,632.973 1691.11,655.339 1691.67,675.015 1692.23,659.64 1692.78,678.725 1693.34,713.312 1693.9,714.097 1694.46,681.26 1695.02,682.221 1695.58,717.086 1696.14,732.582 1696.7,745.91 1697.26,726.755 1697.82,660.885 1698.38,680.763 1698.94,684.773 1699.5,716.367 1700.05,713.656 1700.61,726.953 1701.17,705.387 1701.73,720.708 1702.29,719.456 1702.85,715.359 1703.41,729.052 1703.97,756.119 1704.53,749.554 1705.09,759.578 1705.65,738.487 1706.21,734.48 1706.77,728.888 1707.32,720.262 1707.88,719.755 1708.44,731.518 1709,743.561 1709.56,742.193 1710.12,754.975 1710.68,752.314 1711.24,749.842 1711.8,715.998 1712.36,744.844 1712.92,773.53 1713.48,784.885 1714.04,797.731 1714.6,756.763 1715.15,722.097 1715.71,733.57 1716.27,726.436 1716.83,707.835 1717.39,720.107 1717.95,697.359 1718.51,692.412 1719.07,673.947 1719.63,673.427 1720.19,706.411 1720.75,676.569 1721.31,680.663 1721.87,664.429 1722.42,663.739 1722.98,685.142 1723.54,684.405 1724.1,669.841 1724.66,640.056 1725.22,627.228 1725.78,645.307 1726.34,645.624 1726.9,662.53 1727.46,677.366 1728.02,708.532 1728.58,705.408 1729.14,705.306 1729.69,702.666 1730.25,697.616 1730.81,712.676 1731.37,723.444 1731.93,703.581 1732.49,702.825 1733.05,682.561 1733.61,683.09 1734.17,680.797 1734.73,679.865 1735.29,647.904 1735.85,647.12 1736.41,668.166 1736.97,682.381 1737.52,698.231 1738.08,681.509 1738.64,683.069 1739.2,652.213 1739.76,652.803 1740.32,636.192 1740.88,637.973 1741.44,657.417 1742,674.808 1742.56,677.554 1743.12,665.685 1743.68,668.176 1744.24,668.481 1744.79,684.533 1745.35,698.765 1745.91,730.538 1746.47,713.439 1747.03,732.8 1747.59,714.484 1748.15,695.73 1748.71,713.169 1749.27,708.995 1749.83,708.865 1750.39,708.305 1750.95,706.617 1751.51,739.19 1752.06,736.415 1752.62,764.489 1753.18,762.702 1753.74,756.799 1754.3,717.061 1754.86,697.424 1755.42,709.658 1755.98,691.276 1756.54,706.808 1757.1,689.261 1757.66,706.193 1758.22,721.282 1758.78,719.594 1759.34,715.341 1759.89,678.896 1760.45,710.814 1761.01,727.595 1761.57,710.945 1762.13,729.131 1762.69,693.889 1763.25,726.213 1763.81,689.512 1764.37,654.529 1764.93,625.094 1765.49,611.598 1766.05,632.668 1766.61,634.002 1767.16,618.847 1767.72,604.797 1768.28,609.784 1768.84,616.026 1769.4,606.79 1769.96,593.772 1770.52,582.378 1771.08,589.16 1771.64,622.022 1772.2,624.029 1772.76,628.523 1773.32,665.672 1773.88,698.558 1774.43,680.842 1774.99,666.366 1775.55,650.948 1776.11,653.649 1776.67,669.893 1777.23,687.791 1777.79,668.406 1778.35,638.333 1778.91,655.612 1779.47,672.785 1780.03,658.071 1780.59,643.789 1781.15,599.792 1781.71,637.46 1782.26,638.848 1782.82,658.489 1783.38,642.77 1783.94,630.503 1784.5,636.07 1785.06,644.011 1785.62,612.661 1786.18,632.856 1786.74,684.2 1787.3,671.307 1787.86,657.255 1788.42,629.08 1788.98,631.636 1789.53,634.425 1790.09,647.8 1790.65,647.921 1791.21,635.041 1791.77,651.246 1792.33,671.322 1792.89,684.033 1793.45,682.539 1794.01,684.692 1794.57,698.347 1795.13,698.815 1795.69,653.741 1796.25,674.975 1796.8,690.321 1797.36,685.911 1797.92,718.905 1798.48,715.684 1799.04,679.848 1799.6,665.731 1800.16,650.987 1800.72,671.735 1801.28,688.728 1801.84,688.268 1802.4,691.356 1802.96,659.596 1803.52,628.3 1804.08,635.636 1804.63,638.481 1805.19,691.146 1805.75,708.289 1806.31,707.478 1806.87,691.831 1807.43,657.682 1807.99,647.496 1808.55,611.155 1809.11,631.827 1809.67,667.71 1810.23,636.535 1810.79,652.991 1811.35,655.703 1811.9,639.34 1812.46,637.443 1813.02,659.415 1813.58,674.57 1814.14,659.707 1814.7,659.915 1815.26,628.469 1815.82,616.815 1816.38,617.82 1816.94,618.703 1817.5,603.224 1818.06,623.847 1818.62,612.147 1819.18,613.044 1819.73,632.95 1820.29,602.53 1820.85,655.033 1821.41,645.177 1821.97,663.234 1822.53,697.524 1823.09,700.573 1823.65,701.326 1824.21,683.869 1824.77,684.352 1825.33,699.07 1825.89,714.791 1826.45,712.546 1827,709.447 1827.56,775.348 1828.12,755.914 1828.68,752.131 1829.24,730.84 1829.8,773.471 1830.36,738.607 1830.92,721.778 1831.48,736.493 1832.04,735.043 1832.6,714.797 1833.16,713.2 1833.72,692.951 1834.27,623.565 1834.83,627.68 1835.39,646.795 1835.95,646.882 1836.51,679.668 1837.07,695.513 1837.63,692.711 1838.19,673.867 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 690.734 L720.806 690.734 L721.365 690.734 L721.924 690.734 L722.484 690.734 L723.043 690.734 L723.602 690.734 L724.161 690.734 L724.721 690.734 L725.28 690.734 L725.839 690.734 L726.398 690.734 L726.958 690.734 L727.517 690.734 L728.076 690.734 L728.635 690.734 L729.195 690.734 L729.754 690.734 L730.313 690.734 L730.872 690.734 L731.432 690.734 L731.991 690.734 L732.55 690.734 L733.109 690.734 L733.669 690.734 L734.228 690.734 L734.787 690.734 L735.346 690.734 L735.906 690.734 L736.465 690.734 L737.024 690.734 L737.583 690.734 L738.143 690.734 L738.702 690.734 L739.261 690.734 L739.82 690.734 L740.38 690.734 L740.939 690.734 L741.498 690.734 L742.057 690.734 L742.617 690.734 L743.176 690.734 L743.735 690.734 L744.294 690.734 L744.854 690.734 L745.413 690.734 L745.972 690.734 L746.531 690.734 L747.091 690.734 L747.65 690.734 L748.209 690.734 L748.768 690.734 L749.328 690.734 L749.887 690.734 L750.446 690.734 L751.005 690.734 L751.565 690.734 L752.124 690.734 L752.683 690.734 L753.242 690.734 L753.802 690.734 L754.361 690.734 L754.92 690.734 L755.479 690.734 L756.039 690.734 L756.598 690.734 L757.157 690.734 L757.716 690.734 L758.276 690.734 L758.835 690.734 L759.394 690.734 L759.953 690.734 L760.513 690.734 L761.072 690.734 L761.631 690.734 L762.19 690.734 L762.75 690.734 L763.309 690.734 L763.868 690.734 L764.427 690.734 L764.987 690.734 L765.546 690.734 L766.105 690.734 L766.664 690.734 L767.224 690.734 L767.783 690.734 L768.342 690.734 L768.901 690.734 L769.461 690.734 L770.02 690.734 L770.579 690.734 L771.138 690.734 L771.698 690.734 L772.257 690.734 L772.816 690.734 L773.375 690.734 L773.935 690.734 L774.494 690.734 L775.053 690.734 L775.612 690.734 L776.172 690.734 L776.731 690.734 L777.29 690.734 L777.849 690.734 L778.409 690.734 L778.968 690.734 L779.527 690.734 L780.086 690.734 L780.646 690.734 L781.205 690.734 L781.764 690.734 L782.323 690.734 L782.883 690.734 L783.442 690.734 L784.001 690.734 L784.56 690.734 L785.12 690.734 L785.679 690.734 L786.238 690.734 L786.797 690.734 L787.357 690.734 L787.916 690.734 L788.475 690.734 L789.034 690.734 L789.594 690.734 L790.153 690.734 L790.712 690.734 L791.271 690.734 L791.831 690.734 L792.39 690.734 L792.949 690.734 L793.508 690.734 L794.068 690.734 L794.627 690.734 L795.186 690.734 L795.745 690.734 L796.305 690.734 L796.864 690.734 L797.423 690.734 L797.982 690.734 L798.542 690.734 L799.101 690.734 L799.66 690.734 L800.219 690.734 L800.779 690.734 L801.338 690.734 L801.897 690.734 L802.456 690.734 L803.016 690.734 L803.575 690.734 L804.134 690.734 L804.693 690.734 L805.253 690.734 L805.812 690.734 L806.371 690.734 L806.931 690.734 L807.49 690.734 L808.049 690.734 L808.608 690.734 L809.168 690.734 L809.727 690.734 L810.286 690.734 L810.845 690.734 L811.405 690.734 L811.964 690.734 L812.523 690.734 L813.082 690.734 L813.642 690.734 L814.201 690.734 L814.76 690.734 L815.319 690.734 L815.879 690.734 L816.438 690.734 L816.997 690.734 L817.556 690.734 L818.116 690.734 L818.675 690.734 L819.234 690.734 L819.793 690.734 L820.353 690.734 L820.912 690.734 L821.471 690.734 L822.03 690.734 L822.59 690.734 L823.149 690.734 L823.708 690.734 L824.267 690.734 L824.827 690.734 L825.386 690.734 L825.945 690.734 L826.504 690.734 L827.064 690.734 L827.623 690.734 L828.182 690.734 L828.741 690.734 L829.301 690.734 L829.86 690.734 L830.419 690.734 L830.978 690.734 L831.538 690.734 L832.097 690.734 L832.656 690.734 L833.215 690.734 L833.775 690.734 L834.334 690.734 L834.893 690.734 L835.452 690.734 L836.012 690.734 L836.571 690.734 L837.13 690.734 L837.689 690.734 L838.249 690.734 L838.808 690.734 L839.367 690.734 L839.926 690.734 L840.486 690.734 L841.045 690.734 L841.604 690.734 L842.163 690.734 L842.723 690.734 L843.282 690.734 L843.841 690.734 L844.4 690.734 L844.96 690.734 L845.519 690.734 L846.078 690.734 L846.637 690.734 L847.197 690.734 L847.756 690.734 L848.315 690.734 L848.874 690.734 L849.434 690.734 L849.993 690.734 L850.552 690.734 L851.111 690.734 L851.671 690.734 L852.23 690.734 L852.789 690.734 L853.348 690.734 L853.908 690.734 L854.467 690.734 L855.026 690.734 L855.585 690.734 L856.145 690.734 L856.704 690.734 L857.263 690.734 L857.822 690.734 L858.382 690.734 L858.941 690.734 L859.5 690.734 L860.059 690.734 L860.619 690.734 L861.178 690.734 L861.737 690.734 L862.296 690.734 L862.856 690.734 L863.415 690.734 L863.974 690.734 L864.533 690.734 L865.093 690.734 L865.652 690.734 L866.211 690.734 L866.77 690.734 L867.33 690.734 L867.889 690.734 L868.448 690.734 L869.007 690.734 L869.567 690.734 L870.126 690.734 L870.685 690.734 L871.244 690.734 L871.804 690.734 L872.363 690.734 L872.922 690.734 L873.481 690.734 L874.041 690.734 L874.6 690.734 L875.159 690.734 L875.718 690.734 L876.278 690.734 L876.837 690.734 L877.396 690.734 L877.955 690.734 L878.515 690.734 L879.074 690.734 L879.633 690.734 L880.192 690.734 L880.752 690.734 L881.311 690.734 L881.87 690.734 L882.429 690.734 L882.989 690.734 L883.548 690.734 L884.107 690.734 L884.666 690.734 L885.226 690.734 L885.785 690.734 L886.344 690.734 L886.903 690.734 L887.463 690.734 L888.022 690.734 L888.581 690.734 L889.14 690.734 L889.7 690.734 L890.259 690.734 L890.818 690.734 L891.377 690.734 L891.937 690.734 L892.496 690.734 L893.055 690.734 L893.614 690.734 L894.174 690.734 L894.733 690.734 L895.292 690.734 L895.851 690.734 L896.411 690.734 L896.97 690.734 L897.529 690.734 L898.088 690.734 L898.648 690.734 L899.207 690.734 L899.766 690.734 L900.325 690.734 L900.885 690.734 L901.444 690.734 L902.003 690.734 L902.562 690.734 L903.122 690.734 L903.681 690.734 L904.24 690.734 L904.799 690.734 L905.359 690.734 L905.918 690.734 L906.477 690.734 L907.036 690.734 L907.596 690.734 L908.155 690.734 L908.714 690.734 L909.273 690.734 L909.833 690.734 L910.392 690.734 L910.951 690.734 L911.51 690.734 L912.07 690.734 L912.629 690.734 L913.188 690.734 L913.747 690.734 L914.307 690.734 L914.866 690.734 L915.425 690.734 L915.984 690.734 L916.544 690.734 L917.103 690.734 L917.662 690.734 L918.221 690.734 L918.781 690.734 L919.34 690.734 L919.899 690.734 L920.458 690.734 L921.018 690.734 L921.577 690.734 L922.136 690.734 L922.695 690.734 L923.255 690.734 L923.814 690.734 L924.373 690.734 L924.932 690.734 L925.492 690.734 L926.051 690.734 L926.61 690.734 L927.169 690.734 L927.729 690.734 L928.288 690.734 L928.847 690.734 L929.406 690.734 L929.966 690.734 L930.525 690.734 L931.084 690.734 L931.644 690.734 L932.203 690.734 L932.762 690.734 L933.321 690.734 L933.881 690.734 L934.44 690.734 L934.999 690.734 L935.558 690.734 L936.118 690.734 L936.677 690.734 L937.236 690.734 L937.795 690.734 L938.355 690.734 L938.914 690.734 L939.473 690.734 L940.032 690.734 L940.592 690.734 L941.151 690.734 L941.71 690.734 L942.269 690.734 L942.829 690.734 L943.388 690.734 L943.947 690.734 L944.506 690.734 L945.066 690.734 L945.625 690.734 L946.184 690.734 L946.743 690.734 L947.303 690.734 L947.862 690.734 L948.421 690.734 L948.98 690.734 L949.54 690.734 L950.099 690.734 L950.658 690.734 L951.217 690.734 L951.777 690.734 L952.336 690.734 L952.895 690.734 L953.454 690.734 L954.014 690.734 L954.573 690.734 L955.132 690.734 L955.691 690.734 L956.251 690.734 L956.81 690.734 L957.369 690.734 L957.928 690.734 L958.488 690.734 L959.047 690.734 L959.606 690.734 L960.165 690.734 L960.725 690.734 L961.284 690.734 L961.843 690.734 L962.402 690.734 L962.962 690.734 L963.521 690.734 L964.08 690.734 L964.639 690.734 L965.199 690.734 L965.758 690.734 L966.317 690.734 L966.876 690.734 L967.436 690.734 L967.995 690.734 L968.554 690.734 L969.113 690.734 L969.673 690.734 L970.232 690.734 L970.791 690.734 L971.35 690.734 L971.91 690.734 L972.469 690.734 L973.028 690.734 L973.587 690.734 L974.147 690.734 L974.706 690.734 L975.265 690.734 L975.824 690.734 L976.384 690.734 L976.943 690.734 L977.502 690.734 L978.061 690.734 L978.621 690.734 L979.18 690.734 L979.739 690.734 L980.298 690.734 L980.858 690.734 L981.417 690.734 L981.976 690.734 L982.535 690.734 L983.095 690.734 L983.654 690.734 L984.213 690.734 L984.772 690.734 L985.332 690.734 L985.891 690.734 L986.45 690.734 L987.009 690.734 L987.569 690.734 L988.128 690.734 L988.687 690.734 L989.246 690.734 L989.806 690.734 L990.365 690.734 L990.924 690.734 L991.483 690.734 L992.043 690.734 L992.602 690.734 L993.161 690.734 L993.72 690.734 L994.28 690.734 L994.839 690.734 L995.398 690.734 L995.957 690.734 L996.517 690.734 L997.076 690.734 L997.635 690.734 L998.194 690.734 L998.754 690.734 L999.313 690.734 L999.872 690.734 L1000.43 690.734 L1000.99 690.734 L1001.55 690.734 L1002.11 690.734 L1002.67 690.734 L1003.23 690.734 L1003.79 690.734 L1004.35 690.734 L1004.91 690.734 L1005.46 690.734 L1006.02 690.734 L1006.58 690.734 L1007.14 690.734 L1007.7 690.734 L1008.26 690.734 L1008.82 690.734 L1009.38 690.734 L1009.94 690.734 L1010.5 690.734 L1011.06 690.734 L1011.62 690.734 L1012.18 690.734 L1012.73 690.734 L1013.29 690.734 L1013.85 690.734 L1014.41 690.734 L1014.97 690.734 L1015.53 690.734 L1016.09 690.734 L1016.65 690.734 L1017.21 690.734 L1017.77 690.734 L1018.33 690.734 L1018.89 690.734 L1019.45 690.734 L1020.01 690.734 L1020.56 690.734 L1021.12 690.734 L1021.68 690.734 L1022.24 690.734 L1022.8 690.734 L1023.36 690.734 L1023.92 690.734 L1024.48 690.734 L1025.04 690.734 L1025.6 690.734 L1026.16 690.734 L1026.72 690.734 L1027.28 690.734 L1027.83 690.734 L1028.39 690.734 L1028.95 690.734 L1029.51 690.734 L1030.07 690.734 L1030.63 690.734 L1031.19 690.734 L1031.75 690.734 L1032.31 690.734 L1032.87 690.734 L1033.43 690.734 L1033.99 690.734 L1034.55 690.734 L1035.1 690.734 L1035.66 690.734 L1036.22 690.734 L1036.78 690.734 L1037.34 690.734 L1037.9 690.734 L1038.46 690.734 L1039.02 690.734 L1039.58 690.734 L1040.14 690.734 L1040.7 690.734 L1041.26 690.734 L1041.82 690.734 L1042.38 690.734 L1042.93 690.734 L1043.49 690.734 L1044.05 690.734 L1044.61 690.734 L1045.17 690.734 L1045.73 690.734 L1046.29 690.734 L1046.85 690.734 L1047.41 690.734 L1047.97 690.734 L1048.53 690.734 L1049.09 690.734 L1049.65 690.734 L1050.2 690.734 L1050.76 690.734 L1051.32 690.734 L1051.88 690.734 L1052.44 690.734 L1053 690.734 L1053.56 690.734 L1054.12 690.734 L1054.68 690.734 L1055.24 690.734 L1055.8 690.734 L1056.36 690.734 L1056.92 690.734 L1057.48 690.734 L1058.03 690.734 L1058.59 690.734 L1059.15 690.734 L1059.71 690.734 L1060.27 690.734 L1060.83 690.734 L1061.39 690.734 L1061.95 690.734 L1062.51 690.734 L1063.07 690.734 L1063.63 690.734 L1064.19 690.734 L1064.75 690.734 L1065.3 690.734 L1065.86 690.734 L1066.42 690.734 L1066.98 690.734 L1067.54 690.734 L1068.1 690.734 L1068.66 690.734 L1069.22 690.734 L1069.78 690.734 L1070.34 690.734 L1070.9 690.734 L1071.46 690.734 L1072.02 690.734 L1072.57 690.734 L1073.13 690.734 L1073.69 690.734 L1074.25 690.734 L1074.81 690.734 L1075.37 690.734 L1075.93 690.734 L1076.49 690.734 L1077.05 690.734 L1077.61 690.734 L1078.17 690.734 L1078.73 690.734 L1079.29 690.734 L1079.85 690.734 L1080.4 690.734 L1080.96 690.734 L1081.52 690.734 L1082.08 690.734 L1082.64 690.734 L1083.2 690.734 L1083.76 690.734 L1084.32 690.734 L1084.88 690.734 L1085.44 690.734 L1086 690.734 L1086.56 690.734 L1087.12 690.734 L1087.67 690.734 L1088.23 690.734 L1088.79 690.734 L1089.35 690.734 L1089.91 690.734 L1090.47 690.734 L1091.03 690.734 L1091.59 690.734 L1092.15 690.734 L1092.71 690.734 L1093.27 690.734 L1093.83 690.734 L1094.39 690.734 L1094.94 690.734 L1095.5 690.734 L1096.06 690.734 L1096.62 690.734 L1097.18 690.734 L1097.74 690.734 L1098.3 690.734 L1098.86 690.734 L1099.42 690.734 L1099.98 690.734 L1100.54 690.734 L1101.1 690.734 L1101.66 690.734 L1102.22 690.734 L1102.77 690.734 L1103.33 690.734 L1103.89 690.734 L1104.45 690.734 L1105.01 690.734 L1105.57 690.734 L1106.13 690.734 L1106.69 690.734 L1107.25 690.734 L1107.81 690.734 L1108.37 690.734 L1108.93 690.734 L1109.49 690.734 L1110.04 690.734 L1110.6 690.734 L1111.16 690.734 L1111.72 690.734 L1112.28 690.734 L1112.84 690.734 L1113.4 690.734 L1113.96 690.734 L1114.52 690.734 L1115.08 690.734 L1115.64 690.734 L1116.2 690.734 L1116.76 690.734 L1117.31 690.734 L1117.87 690.734 L1118.43 690.734 L1118.99 690.734 L1119.55 690.734 L1120.11 690.734 L1120.67 690.734 L1121.23 690.734 L1121.79 690.734 L1122.35 690.734 L1122.91 690.734 L1123.47 690.734 L1124.03 690.734 L1124.59 690.734 L1125.14 690.734 L1125.7 690.734 L1126.26 690.734 L1126.82 690.734 L1127.38 690.734 L1127.94 690.734 L1128.5 690.734 L1129.06 690.734 L1129.62 690.734 L1130.18 690.734 L1130.74 690.734 L1131.3 690.734 L1131.86 690.734 L1132.41 690.734 L1132.97 690.734 L1133.53 690.734 L1134.09 690.734 L1134.65 690.734 L1135.21 690.734 L1135.77 690.734 L1136.33 690.734 L1136.89 690.734 L1137.45 690.734 L1138.01 690.734 L1138.57 690.734 L1139.13 690.734 L1139.68 690.734 L1140.24 690.734 L1140.8 690.734 L1141.36 690.734 L1141.92 690.734 L1142.48 690.734 L1143.04 690.734 L1143.6 690.734 L1144.16 690.734 L1144.72 690.734 L1145.28 690.734 L1145.84 690.734 L1146.4 690.734 L1146.96 690.734 L1147.51 690.734 L1148.07 690.734 L1148.63 690.734 L1149.19 690.734 L1149.75 690.734 L1150.31 690.734 L1150.87 690.734 L1151.43 690.734 L1151.99 690.734 L1152.55 690.734 L1153.11 690.734 L1153.67 690.734 L1154.23 690.734 L1154.78 690.734 L1155.34 690.734 L1155.9 690.734 L1156.46 690.734 L1157.02 690.734 L1157.58 690.734 L1158.14 690.734 L1158.7 690.734 L1159.26 690.734 L1159.82 690.734 L1160.38 690.734 L1160.94 690.734 L1161.5 690.734 L1162.05 690.734 L1162.61 690.734 L1163.17 690.734 L1163.73 690.734 L1164.29 690.734 L1164.85 690.734 L1165.41 690.734 L1165.97 690.734 L1166.53 690.734 L1167.09 690.734 L1167.65 690.734 L1168.21 690.734 L1168.77 690.734 L1169.33 690.734 L1169.88 690.734 L1170.44 690.734 L1171 690.734 L1171.56 690.734 L1172.12 690.734 L1172.68 690.734 L1173.24 690.734 L1173.8 690.734 L1174.36 690.734 L1174.92 690.734 L1175.48 690.734 L1176.04 690.734 L1176.6 690.734 L1177.15 690.734 L1177.71 690.734 L1178.27 690.734 L1178.83 690.734 L1179.39 690.734 L1179.95 690.734 L1180.51 690.734 L1181.07 690.734 L1181.63 690.734 L1182.19 690.734 L1182.75 690.734 L1183.31 690.734 L1183.87 690.734 L1184.43 690.734 L1184.98 690.734 L1185.54 690.734 L1186.1 690.734 L1186.66 690.734 L1187.22 690.734 L1187.78 690.734 L1188.34 690.734 L1188.9 690.734 L1189.46 690.734 L1190.02 690.734 L1190.58 690.734 L1191.14 690.734 L1191.7 690.734 L1192.25 690.734 L1192.81 690.734 L1193.37 690.734 L1193.93 690.734 L1194.49 690.734 L1195.05 690.734 L1195.61 690.734 L1196.17 690.734 L1196.73 690.734 L1197.29 690.734 L1197.85 690.734 L1198.41 690.734 L1198.97 690.734 L1199.52 690.734 L1200.08 690.734 L1200.64 690.734 L1201.2 690.734 L1201.76 690.734 L1202.32 690.734 L1202.88 690.734 L1203.44 690.734 L1204 690.734 L1204.56 690.734 L1205.12 690.734 L1205.68 690.734 L1206.24 690.734 L1206.8 690.734 L1207.35 690.734 L1207.91 690.734 L1208.47 690.734 L1209.03 690.734 L1209.59 690.734 L1210.15 690.734 L1210.71 690.734 L1211.27 690.734 L1211.83 690.734 L1212.39 690.734 L1212.95 690.734 L1213.51 690.734 L1214.07 690.734 L1214.62 690.734 L1215.18 690.734 L1215.74 690.734 L1216.3 690.734 L1216.86 690.734 L1217.42 690.734 L1217.98 690.734 L1218.54 690.734 L1219.1 690.734 L1219.66 690.734 L1220.22 690.734 L1220.78 690.734 L1221.34 690.734 L1221.89 690.734 L1222.45 690.734 L1223.01 690.734 L1223.57 690.734 L1224.13 690.734 L1224.69 690.734 L1225.25 690.734 L1225.81 690.734 L1226.37 690.734 L1226.93 690.734 L1227.49 690.734 L1228.05 690.734 L1228.61 690.734 L1229.17 690.734 L1229.72 690.734 L1230.28 690.734 L1230.84 690.734 L1231.4 690.734 L1231.96 690.734 L1232.52 690.734 L1233.08 690.734 L1233.64 690.734 L1234.2 690.734 L1234.76 690.734 L1235.32 690.734 L1235.88 690.734 L1236.44 690.734 L1236.99 690.734 L1237.55 690.734 L1238.11 690.734 L1238.67 690.734 L1239.23 690.734 L1239.79 690.734 L1240.35 690.734 L1240.91 690.734 L1241.47 690.734 L1242.03 690.734 L1242.59 690.734 L1243.15 690.734 L1243.71 690.734 L1244.26 690.734 L1244.82 690.734 L1245.38 690.734 L1245.94 690.734 L1246.5 690.734 L1247.06 690.734 L1247.62 690.734 L1248.18 690.734 L1248.74 690.734 L1249.3 690.734 L1249.86 690.734 L1250.42 690.734 L1250.98 690.734 L1251.54 690.734 L1252.09 690.734 L1252.65 690.734 L1253.21 690.734 L1253.77 690.734 L1254.33 690.734 L1254.89 690.734 L1255.45 690.734 L1256.01 690.734 L1256.57 690.734 L1257.13 690.734 L1257.69 690.734 L1258.25 690.734 L1258.81 690.734 L1259.36 690.734 L1259.92 690.734 L1260.48 690.734 L1261.04 690.734 L1261.6 690.734 L1262.16 690.734 L1262.72 690.734 L1263.28 690.734 L1263.84 690.734 L1264.4 690.734 L1264.96 690.734 L1265.52 690.734 L1266.08 690.734 L1266.63 690.734 L1267.19 690.734 L1267.75 690.734 L1268.31 690.734 L1268.87 690.734 L1269.43 690.734 L1269.99 690.734 L1270.55 690.734 L1271.11 690.734 L1271.67 690.734 L1272.23 690.734 L1272.79 690.734 L1273.35 690.734 L1273.91 690.734 L1274.46 690.734 L1275.02 690.734 L1275.58 690.734 L1276.14 690.734 L1276.7 690.734 L1277.26 690.734 L1277.82 690.734 L1278.38 690.734 L1278.94 690.734 L1279.5 690.734 L1280.06 690.734 L1280.62 690.734 L1281.18 690.734 L1281.73 690.734 L1282.29 690.734 L1282.85 690.734 L1283.41 690.734 L1283.97 690.734 L1284.53 690.734 L1285.09 690.734 L1285.65 690.734 L1286.21 690.734 L1286.77 690.734 L1287.33 690.734 L1287.89 690.734 L1288.45 690.734 L1289 690.734 L1289.56 690.734 L1290.12 690.734 L1290.68 690.734 L1291.24 690.734 L1291.8 690.734 L1292.36 690.734 L1292.92 690.734 L1293.48 690.734 L1294.04 690.734 L1294.6 690.734 L1295.16 690.734 L1295.72 690.734 L1296.28 690.734 L1296.83 690.734 L1297.39 690.734 L1297.95 690.734 L1298.51 690.734 L1299.07 690.734 L1299.63 690.734 L1300.19 690.734 L1300.75 690.734 L1301.31 690.734 L1301.87 690.734 L1302.43 690.734 L1302.99 690.734 L1303.55 690.734 L1304.1 690.734 L1304.66 690.734 L1305.22 690.734 L1305.78 690.734 L1306.34 690.734 L1306.9 690.734 L1307.46 690.734 L1308.02 690.734 L1308.58 690.734 L1309.14 690.734 L1309.7 690.734 L1310.26 690.734 L1310.82 690.734 L1311.38 690.734 L1311.93 690.734 L1312.49 690.734 L1313.05 690.734 L1313.61 690.734 L1314.17 690.734 L1314.73 690.734 L1315.29 690.734 L1315.85 690.734 L1316.41 690.734 L1316.97 690.734 L1317.53 690.734 L1318.09 690.734 L1318.65 690.734 L1319.2 690.734 L1319.76 690.734 L1320.32 690.734 L1320.88 690.734 L1321.44 690.734 L1322 690.734 L1322.56 690.734 L1323.12 690.734 L1323.68 690.734 L1324.24 690.734 L1324.8 690.734 L1325.36 690.734 L1325.92 690.734 L1326.47 690.734 L1327.03 690.734 L1327.59 690.734 L1328.15 690.734 L1328.71 690.734 L1329.27 690.734 L1329.83 690.734 L1330.39 690.734 L1330.95 690.734 L1331.51 690.734 L1332.07 690.734 L1332.63 690.734 L1333.19 690.734 L1333.75 690.734 L1334.3 690.734 L1334.86 690.734 L1335.42 690.734 L1335.98 690.734 L1336.54 690.734 L1337.1 690.734 L1337.66 690.734 L1338.22 690.734 L1338.78 690.734 L1339.34 690.734 L1339.9 690.734 L1340.46 690.734 L1341.02 690.734 L1341.57 690.734 L1342.13 690.734 L1342.69 690.734 L1343.25 690.734 L1343.81 690.734 L1344.37 690.734 L1344.93 690.734 L1345.49 690.734 L1346.05 690.734 L1346.61 690.734 L1347.17 690.734 L1347.73 690.734 L1348.29 690.734 L1348.84 690.734 L1349.4 690.734 L1349.96 690.734 L1350.52 690.734 L1351.08 690.734 L1351.64 690.734 L1352.2 690.734 L1352.76 690.734 L1353.32 690.734 L1353.88 690.734 L1354.44 690.734 L1355 690.734 L1355.56 690.734 L1356.12 690.734 L1356.67 690.734 L1357.23 690.734 L1357.79 690.734 L1358.35 690.734 L1358.91 690.734 L1359.47 690.734 L1360.03 690.734 L1360.59 690.734 L1361.15 690.734 L1361.71 690.734 L1362.27 690.734 L1362.83 690.734 L1363.39 690.734 L1363.94 690.734 L1364.5 690.734 L1365.06 690.734 L1365.62 690.734 L1366.18 690.734 L1366.74 690.734 L1367.3 690.734 L1367.86 690.734 L1368.42 690.734 L1368.98 690.734 L1369.54 690.734 L1370.1 690.734 L1370.66 690.734 L1371.21 690.734 L1371.77 690.734 L1372.33 690.734 L1372.89 690.734 L1373.45 690.734 L1374.01 690.734 L1374.57 690.734 L1375.13 690.734 L1375.69 690.734 L1376.25 690.734 L1376.81 690.734 L1377.37 690.734 L1377.93 690.734 L1378.49 690.734 L1379.04 690.734 L1379.6 690.734 L1380.16 690.734 L1380.72 690.734 L1381.28 690.734 L1381.84 690.734 L1382.4 690.734 L1382.96 690.734 L1383.52 690.734 L1384.08 690.734 L1384.64 690.734 L1385.2 690.734 L1385.76 690.734 L1386.31 690.734 L1386.87 690.734 L1387.43 690.734 L1387.99 690.734 L1388.55 690.734 L1389.11 690.734 L1389.67 690.734 L1390.23 690.734 L1390.79 690.734 L1391.35 690.734 L1391.91 690.734 L1392.47 690.734 L1393.03 690.734 L1393.58 690.734 L1394.14 690.734 L1394.7 690.734 L1395.26 690.734 L1395.82 690.734 L1396.38 690.734 L1396.94 690.734 L1397.5 690.734 L1398.06 690.734 L1398.62 690.734 L1399.18 690.734 L1399.74 690.734 L1400.3 690.734 L1400.86 690.734 L1401.41 690.734 L1401.97 690.734 L1402.53 690.734 L1403.09 690.734 L1403.65 690.734 L1404.21 690.734 L1404.77 690.734 L1405.33 690.734 L1405.89 690.734 L1406.45 690.734 L1407.01 690.734 L1407.57 690.734 L1408.13 690.734 L1408.68 690.734 L1409.24 690.734 L1409.8 690.734 L1410.36 690.734 L1410.92 690.734 L1411.48 690.734 L1412.04 690.734 L1412.6 690.734 L1413.16 690.734 L1413.72 690.734 L1414.28 690.734 L1414.84 690.734 L1415.4 690.734 L1415.95 690.734 L1416.51 690.734 L1417.07 690.734 L1417.63 690.734 L1418.19 690.734 L1418.75 690.734 L1419.31 690.734 L1419.87 690.734 L1420.43 690.734 L1420.99 690.734 L1421.55 690.734 L1422.11 690.734 L1422.67 690.734 L1423.23 690.734 L1423.78 690.734 L1424.34 690.734 L1424.9 690.734 L1425.46 690.734 L1426.02 690.734 L1426.58 690.734 L1427.14 690.734 L1427.7 690.734 L1428.26 690.734 L1428.82 690.734 L1429.38 690.734 L1429.94 690.734 L1430.5 690.734 L1431.05 690.734 L1431.61 690.734 L1432.17 690.734 L1432.73 690.734 L1433.29 690.734 L1433.85 690.734 L1434.41 690.734 L1434.97 690.734 L1435.53 690.734 L1436.09 690.734 L1436.65 690.734 L1437.21 690.734 L1437.77 690.734 L1438.33 690.734 L1438.88 690.734 L1439.44 690.734 L1440 690.734 L1440.56 690.734 L1441.12 690.734 L1441.68 690.734 L1442.24 690.734 L1442.8 690.734 L1443.36 690.734 L1443.92 690.734 L1444.48 690.734 L1445.04 690.734 L1445.6 690.734 L1446.15 690.734 L1446.71 690.734 L1447.27 690.734 L1447.83 690.734 L1448.39 690.734 L1448.95 690.734 L1449.51 690.734 L1450.07 690.734 L1450.63 690.734 L1451.19 690.734 L1451.75 690.734 L1452.31 690.734 L1452.87 690.734 L1453.42 690.734 L1453.98 690.734 L1454.54 690.734 L1455.1 690.734 L1455.66 690.734 L1456.22 690.734 L1456.78 690.734 L1457.34 690.734 L1457.9 690.734 L1458.46 690.734 L1459.02 690.734 L1459.58 690.734 L1460.14 690.734 L1460.7 690.734 L1461.25 690.734 L1461.81 690.734 L1462.37 690.734 L1462.93 690.734 L1463.49 690.734 L1464.05 690.734 L1464.61 690.734 L1465.17 690.734 L1465.73 690.734 L1466.29 690.734 L1466.85 690.734 L1467.41 690.734 L1467.97 690.734 L1468.52 690.734 L1469.08 690.734 L1469.64 690.734 L1470.2 690.734 L1470.76 690.734 L1471.32 690.734 L1471.88 690.734 L1472.44 690.734 L1473 690.734 L1473.56 690.734 L1474.12 690.734 L1474.68 690.734 L1475.24 690.734 L1475.79 690.734 L1476.35 690.734 L1476.91 690.734 L1477.47 690.734 L1478.03 690.734 L1478.59 690.734 L1479.15 690.734 L1479.71 690.734 L1480.27 690.734 L1480.83 690.734 L1481.39 690.734 L1481.95 690.734 L1482.51 690.734 L1483.07 690.734 L1483.62 690.734 L1484.18 690.734 L1484.74 690.734 L1485.3 690.734 L1485.86 690.734 L1486.42 690.734 L1486.98 690.734 L1487.54 690.734 L1488.1 690.734 L1488.66 690.734 L1489.22 690.734 L1489.78 690.734 L1490.34 690.734 L1490.89 690.734 L1491.45 690.734 L1492.01 690.734 L1492.57 690.734 L1493.13 690.734 L1493.69 690.734 L1494.25 690.734 L1494.81 690.734 L1495.37 690.734 L1495.93 690.734 L1496.49 690.734 L1497.05 690.734 L1497.61 690.734 L1498.16 690.734 L1498.72 690.734 L1499.28 690.734 L1499.84 690.734 L1500.4 690.734 L1500.96 690.734 L1501.52 690.734 L1502.08 690.734 L1502.64 690.734 L1503.2 690.734 L1503.76 690.734 L1504.32 690.734 L1504.88 690.734 L1505.44 690.734 L1505.99 690.734 L1506.55 690.734 L1507.11 690.734 L1507.67 690.734 L1508.23 690.734 L1508.79 690.734 L1509.35 690.734 L1509.91 690.734 L1510.47 690.734 L1511.03 690.734 L1511.59 690.734 L1512.15 690.734 L1512.71 690.734 L1513.26 690.734 L1513.82 690.734 L1514.38 690.734 L1514.94 690.734 L1515.5 690.734 L1516.06 690.734 L1516.62 690.734 L1517.18 690.734 L1517.74 690.734 L1518.3 690.734 L1518.86 690.734 L1519.42 690.734 L1519.98 690.734 L1520.53 690.734 L1521.09 690.734 L1521.65 690.734 L1522.21 690.734 L1522.77 690.734 L1523.33 690.734 L1523.89 690.734 L1524.45 690.734 L1525.01 690.734 L1525.57 690.734 L1526.13 690.734 L1526.69 690.734 L1527.25 690.734 L1527.81 690.734 L1528.36 690.734 L1528.92 690.734 L1529.48 690.734 L1530.04 690.734 L1530.6 690.734 L1531.16 690.734 L1531.72 690.734 L1532.28 690.734 L1532.84 690.734 L1533.4 690.734 L1533.96 690.734 L1534.52 690.734 L1535.08 690.734 L1535.63 690.734 L1536.19 690.734 L1536.75 690.734 L1537.31 690.734 L1537.87 690.734 L1538.43 690.734 L1538.99 690.734 L1539.55 690.734 L1540.11 690.734 L1540.67 690.734 L1541.23 690.734 L1541.79 690.734 L1542.35 690.734 L1542.9 690.734 L1543.46 690.734 L1544.02 690.734 L1544.58 690.734 L1545.14 690.734 L1545.7 690.734 L1546.26 690.734 L1546.82 690.734 L1547.38 690.734 L1547.94 690.734 L1548.5 690.734 L1549.06 690.734 L1549.62 690.734 L1550.18 690.734 L1550.73 690.734 L1551.29 690.734 L1551.85 690.734 L1552.41 690.734 L1552.97 690.734 L1553.53 690.734 L1554.09 690.734 L1554.65 690.734 L1555.21 690.734 L1555.77 690.734 L1556.33 690.734 L1556.89 690.734 L1557.45 690.734 L1558 690.734 L1558.56 690.734 L1559.12 690.734 L1559.68 690.734 L1560.24 690.734 L1560.8 690.734 L1561.36 690.734 L1561.92 690.734 L1562.48 690.734 L1563.04 690.734 L1563.6 690.734 L1564.16 690.734 L1564.72 690.734 L1565.28 690.734 L1565.83 690.734 L1566.39 690.734 L1566.95 690.734 L1567.51 690.734 L1568.07 690.734 L1568.63 690.734 L1569.19 690.734 L1569.75 690.734 L1570.31 690.734 L1570.87 690.734 L1571.43 690.734 L1571.99 690.734 L1572.55 690.734 L1573.1 690.734 L1573.66 690.734 L1574.22 690.734 L1574.78 690.734 L1575.34 690.734 L1575.9 690.734 L1576.46 690.734 L1577.02 690.734 L1577.58 690.734 L1578.14 690.734 L1578.7 690.734 L1579.26 690.734 L1579.82 690.734 L1580.37 690.734 L1580.93 690.734 L1581.49 690.734 L1582.05 690.734 L1582.61 690.734 L1583.17 690.734 L1583.73 690.734 L1584.29 690.734 L1584.85 690.734 L1585.41 690.734 L1585.97 690.734 L1586.53 690.734 L1587.09 690.734 L1587.65 690.734 L1588.2 690.734 L1588.76 690.734 L1589.32 690.734 L1589.88 690.734 L1590.44 690.734 L1591 690.734 L1591.56 690.734 L1592.12 690.734 L1592.68 690.734 L1593.24 690.734 L1593.8 690.734 L1594.36 690.734 L1594.92 690.734 L1595.47 690.734 L1596.03 690.734 L1596.59 690.734 L1597.15 690.734 L1597.71 690.734 L1598.27 690.734 L1598.83 690.734 L1599.39 690.734 L1599.95 690.734 L1600.51 690.734 L1601.07 690.734 L1601.63 690.734 L1602.19 690.734 L1602.74 690.734 L1603.3 690.734 L1603.86 690.734 L1604.42 690.734 L1604.98 690.734 L1605.54 690.734 L1606.1 690.734 L1606.66 690.734 L1607.22 690.734 L1607.78 690.734 L1608.34 690.734 L1608.9 690.734 L1609.46 690.734 L1610.02 690.734 L1610.57 690.734 L1611.13 690.734 L1611.69 690.734 L1612.25 690.734 L1612.81 690.734 L1613.37 690.734 L1613.93 690.734 L1614.49 690.734 L1615.05 690.734 L1615.61 690.734 L1616.17 690.734 L1616.73 690.734 L1617.29 690.734 L1617.84 690.734 L1618.4 690.734 L1618.96 690.734 L1619.52 690.734 L1620.08 690.734 L1620.64 690.734 L1621.2 690.734 L1621.76 690.734 L1622.32 690.734 L1622.88 690.734 L1623.44 690.734 L1624 690.734 L1624.56 690.734 L1625.11 690.734 L1625.67 690.734 L1626.23 690.734 L1626.79 690.734 L1627.35 690.734 L1627.91 690.734 L1628.47 690.734 L1629.03 690.734 L1629.59 690.734 L1630.15 690.734 L1630.71 690.734 L1631.27 690.734 L1631.83 690.734 L1632.39 690.734 L1632.94 690.734 L1633.5 690.734 L1634.06 690.734 L1634.62 690.734 L1635.18 690.734 L1635.74 690.734 L1636.3 690.734 L1636.86 690.734 L1637.42 690.734 L1637.98 690.734 L1638.54 690.734 L1639.1 690.734 L1639.66 690.734 L1640.21 690.734 L1640.77 690.734 L1641.33 690.734 L1641.89 690.734 L1642.45 690.734 L1643.01 690.734 L1643.57 690.734 L1644.13 690.734 L1644.69 690.734 L1645.25 690.734 L1645.81 690.734 L1646.37 690.734 L1646.93 690.734 L1647.48 690.734 L1648.04 690.734 L1648.6 690.734 L1649.16 690.734 L1649.72 690.734 L1650.28 690.734 L1650.84 690.734 L1651.4 690.734 L1651.96 690.734 L1652.52 690.734 L1653.08 690.734 L1653.64 690.734 L1654.2 690.734 L1654.76 690.734 L1655.31 690.734 L1655.87 690.734 L1656.43 690.734 L1656.99 690.734 L1657.55 690.734 L1658.11 690.734 L1658.67 690.734 L1659.23 690.734 L1659.79 690.734 L1660.35 690.734 L1660.91 690.734 L1661.47 690.734 L1662.03 690.734 L1662.58 690.734 L1663.14 690.734 L1663.7 690.734 L1664.26 690.734 L1664.82 690.734 L1665.38 690.734 L1665.94 690.734 L1666.5 690.734 L1667.06 690.734 L1667.62 690.734 L1668.18 690.734 L1668.74 690.734 L1669.3 690.734 L1669.85 690.734 L1670.41 690.734 L1670.97 690.734 L1671.53 690.734 L1672.09 690.734 L1672.65 690.734 L1673.21 690.734 L1673.77 690.734 L1674.33 690.734 L1674.89 690.734 L1675.45 690.734 L1676.01 690.734 L1676.57 690.734 L1677.13 690.734 L1677.68 690.734 L1678.24 690.734 L1678.8 690.734 L1679.36 690.734 L1679.92 690.734 L1680.48 690.734 L1681.04 690.734 L1681.6 690.734 L1682.16 690.734 L1682.72 690.734 L1683.28 690.734 L1683.84 690.734 L1684.4 690.734 L1684.95 690.734 L1685.51 690.734 L1686.07 690.734 L1686.63 690.734 L1687.19 690.734 L1687.75 690.734 L1688.31 690.734 L1688.87 690.734 L1689.43 690.734 L1689.99 690.734 L1690.55 690.734 L1691.11 690.734 L1691.67 690.734 L1692.23 690.734 L1692.78 690.734 L1693.34 690.734 L1693.9 690.734 L1694.46 690.734 L1695.02 690.734 L1695.58 690.734 L1696.14 690.734 L1696.7 690.734 L1697.26 690.734 L1697.82 690.734 L1698.38 690.734 L1698.94 690.734 L1699.5 690.734 L1700.05 690.734 L1700.61 690.734 L1701.17 690.734 L1701.73 690.734 L1702.29 690.734 L1702.85 690.734 L1703.41 690.734 L1703.97 690.734 L1704.53 690.734 L1705.09 690.734 L1705.65 690.734 L1706.21 690.734 L1706.77 690.734 L1707.32 690.734 L1707.88 690.734 L1708.44 690.734 L1709 690.734 L1709.56 690.734 L1710.12 690.734 L1710.68 690.734 L1711.24 690.734 L1711.8 690.734 L1712.36 690.734 L1712.92 690.734 L1713.48 690.734 L1714.04 690.734 L1714.6 690.734 L1715.15 690.734 L1715.71 690.734 L1716.27 690.734 L1716.83 690.734 L1717.39 690.734 L1717.95 690.734 L1718.51 690.734 L1719.07 690.734 L1719.63 690.734 L1720.19 690.734 L1720.75 690.734 L1721.31 690.734 L1721.87 690.734 L1722.42 690.734 L1722.98 690.734 L1723.54 690.734 L1724.1 690.734 L1724.66 690.734 L1725.22 690.734 L1725.78 690.734 L1726.34 690.734 L1726.9 690.734 L1727.46 690.734 L1728.02 690.734 L1728.58 690.734 L1729.14 690.734 L1729.69 690.734 L1730.25 690.734 L1730.81 690.734 L1731.37 690.734 L1731.93 690.734 L1732.49 690.734 L1733.05 690.734 L1733.61 690.734 L1734.17 690.734 L1734.73 690.734 L1735.29 690.734 L1735.85 690.734 L1736.41 690.734 L1736.97 690.734 L1737.52 690.734 L1738.08 690.734 L1738.64 690.734 L1739.2 690.734 L1739.76 690.734 L1740.32 690.734 L1740.88 690.734 L1741.44 690.734 L1742 690.734 L1742.56 690.734 L1743.12 690.734 L1743.68 690.734 L1744.24 690.734 L1744.79 690.734 L1745.35 690.734 L1745.91 690.734 L1746.47 690.734 L1747.03 690.734 L1747.59 690.734 L1748.15 690.734 L1748.71 690.734 L1749.27 690.734 L1749.83 690.734 L1750.39 690.734 L1750.95 690.734 L1751.51 690.734 L1752.06 690.734 L1752.62 690.734 L1753.18 690.734 L1753.74 690.734 L1754.3 690.734 L1754.86 690.734 L1755.42 690.734 L1755.98 690.734 L1756.54 690.734 L1757.1 690.734 L1757.66 690.734 L1758.22 690.734 L1758.78 690.734 L1759.34 690.734 L1759.89 690.734 L1760.45 690.734 L1761.01 690.734 L1761.57 690.734 L1762.13 690.734 L1762.69 690.734 L1763.25 690.734 L1763.81 690.734 L1764.37 690.734 L1764.93 690.734 L1765.49 690.734 L1766.05 690.734 L1766.61 690.734 L1767.16 690.734 L1767.72 690.734 L1768.28 690.734 L1768.84 690.734 L1769.4 690.734 L1769.96 690.734 L1770.52 690.734 L1771.08 690.734 L1771.64 690.734 L1772.2 690.734 L1772.76 690.734 L1773.32 690.734 L1773.88 690.734 L1774.43 690.734 L1774.99 690.734 L1775.55 690.734 L1776.11 690.734 L1776.67 690.734 L1777.23 690.734 L1777.79 690.734 L1778.35 690.734 L1778.91 690.734 L1779.47 690.734 L1780.03 690.734 L1780.59 690.734 L1781.15 690.734 L1781.71 690.734 L1782.26 690.734 L1782.82 690.734 L1783.38 690.734 L1783.94 690.734 L1784.5 690.734 L1785.06 690.734 L1785.62 690.734 L1786.18 690.734 L1786.74 690.734 L1787.3 690.734 L1787.86 690.734 L1788.42 690.734 L1788.98 690.734 L1789.53 690.734 L1790.09 690.734 L1790.65 690.734 L1791.21 690.734 L1791.77 690.734 L1792.33 690.734 L1792.89 690.734 L1793.45 690.734 L1794.01 690.734 L1794.57 690.734 L1795.13 690.734 L1795.69 690.734 L1796.25 690.734 L1796.8 690.734 L1797.36 690.734 L1797.92 690.734 L1798.48 690.734 L1799.04 690.734 L1799.6 690.734 L1800.16 690.734 L1800.72 690.734 L1801.28 690.734 L1801.84 690.734 L1802.4 690.734 L1802.96 690.734 L1803.52 690.734 L1804.08 690.734 L1804.63 690.734 L1805.19 690.734 L1805.75 690.734 L1806.31 690.734 L1806.87 690.734 L1807.43 690.734 L1807.99 690.734 L1808.55 690.734 L1809.11 690.734 L1809.67 690.734 L1810.23 690.734 L1810.79 690.734 L1811.35 690.734 L1811.9 690.734 L1812.46 690.734 L1813.02 690.734 L1813.58 690.734 L1814.14 690.734 L1814.7 690.734 L1815.26 690.734 L1815.82 690.734 L1816.38 690.734 L1816.94 690.734 L1817.5 690.734 L1818.06 690.734 L1818.62 690.734 L1819.18 690.734 L1819.73 690.734 L1820.29 690.734 L1820.85 690.734 L1821.41 690.734 L1821.97 690.734 L1822.53 690.734 L1823.09 690.734 L1823.65 690.734 L1824.21 690.734 L1824.77 690.734 L1825.33 690.734 L1825.89 690.734 L1826.45 690.734 L1827 690.734 L1827.56 690.734 L1828.12 690.734 L1828.68 690.734 L1829.24 690.734 L1829.8 690.734 L1830.36 690.734 L1830.92 690.734 L1831.48 690.734 L1832.04 690.734 L1832.6 690.734 L1833.16 690.734 L1833.72 690.734 L1834.27 690.734 L1834.83 690.734 L1835.39 690.734 L1835.95 690.734 L1836.51 690.734 L1837.07 690.734 L1837.63 690.734 L1838.19 690.734 L1838.19 680.54 L1837.63 680.54 L1837.07 680.54 L1836.51 680.54 L1835.95 680.54 L1835.39 680.54 L1834.83 680.54 L1834.27 680.54 L1833.72 680.54 L1833.16 680.54 L1832.6 680.54 L1832.04 680.54 L1831.48 680.54 L1830.92 680.54 L1830.36 680.54 L1829.8 680.54 L1829.24 680.54 L1828.68 680.54 L1828.12 680.54 L1827.56 680.54 L1827 680.54 L1826.45 680.54 L1825.89 680.54 L1825.33 680.54 L1824.77 680.54 L1824.21 680.54 L1823.65 680.54 L1823.09 680.54 L1822.53 680.54 L1821.97 680.54 L1821.41 680.54 L1820.85 680.54 L1820.29 680.54 L1819.73 680.54 L1819.18 680.54 L1818.62 680.54 L1818.06 680.54 L1817.5 680.54 L1816.94 680.54 L1816.38 680.54 L1815.82 680.54 L1815.26 680.54 L1814.7 680.54 L1814.14 680.54 L1813.58 680.54 L1813.02 680.54 L1812.46 680.54 L1811.9 680.54 L1811.35 680.54 L1810.79 680.54 L1810.23 680.54 L1809.67 680.54 L1809.11 680.54 L1808.55 680.54 L1807.99 680.54 L1807.43 680.54 L1806.87 680.54 L1806.31 680.54 L1805.75 680.54 L1805.19 680.54 L1804.63 680.54 L1804.08 680.54 L1803.52 680.54 L1802.96 680.54 L1802.4 680.54 L1801.84 680.54 L1801.28 680.54 L1800.72 680.54 L1800.16 680.54 L1799.6 680.54 L1799.04 680.54 L1798.48 680.54 L1797.92 680.54 L1797.36 680.54 L1796.8 680.54 L1796.25 680.54 L1795.69 680.54 L1795.13 680.54 L1794.57 680.54 L1794.01 680.54 L1793.45 680.54 L1792.89 680.54 L1792.33 680.54 L1791.77 680.54 L1791.21 680.54 L1790.65 680.54 L1790.09 680.54 L1789.53 680.54 L1788.98 680.54 L1788.42 680.54 L1787.86 680.54 L1787.3 680.54 L1786.74 680.54 L1786.18 680.54 L1785.62 680.54 L1785.06 680.54 L1784.5 680.54 L1783.94 680.54 L1783.38 680.54 L1782.82 680.54 L1782.26 680.54 L1781.71 680.54 L1781.15 680.54 L1780.59 680.54 L1780.03 680.54 L1779.47 680.54 L1778.91 680.54 L1778.35 680.54 L1777.79 680.54 L1777.23 680.54 L1776.67 680.54 L1776.11 680.54 L1775.55 680.54 L1774.99 680.54 L1774.43 680.54 L1773.88 680.54 L1773.32 680.54 L1772.76 680.54 L1772.2 680.54 L1771.64 680.54 L1771.08 680.54 L1770.52 680.54 L1769.96 680.54 L1769.4 680.54 L1768.84 680.54 L1768.28 680.54 L1767.72 680.54 L1767.16 680.54 L1766.61 680.54 L1766.05 680.54 L1765.49 680.54 L1764.93 680.54 L1764.37 680.54 L1763.81 680.54 L1763.25 680.54 L1762.69 680.54 L1762.13 680.54 L1761.57 680.54 L1761.01 680.54 L1760.45 680.54 L1759.89 680.54 L1759.34 680.54 L1758.78 680.54 L1758.22 680.54 L1757.66 680.54 L1757.1 680.54 L1756.54 680.54 L1755.98 680.54 L1755.42 680.54 L1754.86 680.54 L1754.3 680.54 L1753.74 680.54 L1753.18 680.54 L1752.62 680.54 L1752.06 680.54 L1751.51 680.54 L1750.95 680.54 L1750.39 680.54 L1749.83 680.54 L1749.27 680.54 L1748.71 680.54 L1748.15 680.54 L1747.59 680.54 L1747.03 680.54 L1746.47 680.54 L1745.91 680.54 L1745.35 680.54 L1744.79 680.54 L1744.24 680.54 L1743.68 680.54 L1743.12 680.54 L1742.56 680.54 L1742 680.54 L1741.44 680.54 L1740.88 680.54 L1740.32 680.54 L1739.76 680.54 L1739.2 680.54 L1738.64 680.54 L1738.08 680.54 L1737.52 680.54 L1736.97 680.54 L1736.41 680.54 L1735.85 680.54 L1735.29 680.54 L1734.73 680.54 L1734.17 680.54 L1733.61 680.54 L1733.05 680.54 L1732.49 680.54 L1731.93 680.54 L1731.37 680.54 L1730.81 680.54 L1730.25 680.54 L1729.69 680.54 L1729.14 680.54 L1728.58 680.54 L1728.02 680.54 L1727.46 680.54 L1726.9 680.54 L1726.34 680.54 L1725.78 680.54 L1725.22 680.54 L1724.66 680.54 L1724.1 680.54 L1723.54 680.54 L1722.98 680.54 L1722.42 680.54 L1721.87 680.54 L1721.31 680.54 L1720.75 680.54 L1720.19 680.54 L1719.63 680.54 L1719.07 680.54 L1718.51 680.54 L1717.95 680.54 L1717.39 680.54 L1716.83 680.54 L1716.27 680.54 L1715.71 680.54 L1715.15 680.54 L1714.6 680.54 L1714.04 680.54 L1713.48 680.54 L1712.92 680.54 L1712.36 680.54 L1711.8 680.54 L1711.24 680.54 L1710.68 680.54 L1710.12 680.54 L1709.56 680.54 L1709 680.54 L1708.44 680.54 L1707.88 680.54 L1707.32 680.54 L1706.77 680.54 L1706.21 680.54 L1705.65 680.54 L1705.09 680.54 L1704.53 680.54 L1703.97 680.54 L1703.41 680.54 L1702.85 680.54 L1702.29 680.54 L1701.73 680.54 L1701.17 680.54 L1700.61 680.54 L1700.05 680.54 L1699.5 680.54 L1698.94 680.54 L1698.38 680.54 L1697.82 680.54 L1697.26 680.54 L1696.7 680.54 L1696.14 680.54 L1695.58 680.54 L1695.02 680.54 L1694.46 680.54 L1693.9 680.54 L1693.34 680.54 L1692.78 680.54 L1692.23 680.54 L1691.67 680.54 L1691.11 680.54 L1690.55 680.54 L1689.99 680.54 L1689.43 680.54 L1688.87 680.54 L1688.31 680.54 L1687.75 680.54 L1687.19 680.54 L1686.63 680.54 L1686.07 680.54 L1685.51 680.54 L1684.95 680.54 L1684.4 680.54 L1683.84 680.54 L1683.28 680.54 L1682.72 680.54 L1682.16 680.54 L1681.6 680.54 L1681.04 680.54 L1680.48 680.54 L1679.92 680.54 L1679.36 680.54 L1678.8 680.54 L1678.24 680.54 L1677.68 680.54 L1677.13 680.54 L1676.57 680.54 L1676.01 680.54 L1675.45 680.54 L1674.89 680.54 L1674.33 680.54 L1673.77 680.54 L1673.21 680.54 L1672.65 680.54 L1672.09 680.54 L1671.53 680.54 L1670.97 680.54 L1670.41 680.54 L1669.85 680.54 L1669.3 680.54 L1668.74 680.54 L1668.18 680.54 L1667.62 680.54 L1667.06 680.54 L1666.5 680.54 L1665.94 680.54 L1665.38 680.54 L1664.82 680.54 L1664.26 680.54 L1663.7 680.54 L1663.14 680.54 L1662.58 680.54 L1662.03 680.54 L1661.47 680.54 L1660.91 680.54 L1660.35 680.54 L1659.79 680.54 L1659.23 680.54 L1658.67 680.54 L1658.11 680.54 L1657.55 680.54 L1656.99 680.54 L1656.43 680.54 L1655.87 680.54 L1655.31 680.54 L1654.76 680.54 L1654.2 680.54 L1653.64 680.54 L1653.08 680.54 L1652.52 680.54 L1651.96 680.54 L1651.4 680.54 L1650.84 680.54 L1650.28 680.54 L1649.72 680.54 L1649.16 680.54 L1648.6 680.54 L1648.04 680.54 L1647.48 680.54 L1646.93 680.54 L1646.37 680.54 L1645.81 680.54 L1645.25 680.54 L1644.69 680.54 L1644.13 680.54 L1643.57 680.54 L1643.01 680.54 L1642.45 680.54 L1641.89 680.54 L1641.33 680.54 L1640.77 680.54 L1640.21 680.54 L1639.66 680.54 L1639.1 680.54 L1638.54 680.54 L1637.98 680.54 L1637.42 680.54 L1636.86 680.54 L1636.3 680.54 L1635.74 680.54 L1635.18 680.54 L1634.62 680.54 L1634.06 680.54 L1633.5 680.54 L1632.94 680.54 L1632.39 680.54 L1631.83 680.54 L1631.27 680.54 L1630.71 680.54 L1630.15 680.54 L1629.59 680.54 L1629.03 680.54 L1628.47 680.54 L1627.91 680.54 L1627.35 680.54 L1626.79 680.54 L1626.23 680.54 L1625.67 680.54 L1625.11 680.54 L1624.56 680.54 L1624 680.54 L1623.44 680.54 L1622.88 680.54 L1622.32 680.54 L1621.76 680.54 L1621.2 680.54 L1620.64 680.54 L1620.08 680.54 L1619.52 680.54 L1618.96 680.54 L1618.4 680.54 L1617.84 680.54 L1617.29 680.54 L1616.73 680.54 L1616.17 680.54 L1615.61 680.54 L1615.05 680.54 L1614.49 680.54 L1613.93 680.54 L1613.37 680.54 L1612.81 680.54 L1612.25 680.54 L1611.69 680.54 L1611.13 680.54 L1610.57 680.54 L1610.02 680.54 L1609.46 680.54 L1608.9 680.54 L1608.34 680.54 L1607.78 680.54 L1607.22 680.54 L1606.66 680.54 L1606.1 680.54 L1605.54 680.54 L1604.98 680.54 L1604.42 680.54 L1603.86 680.54 L1603.3 680.54 L1602.74 680.54 L1602.19 680.54 L1601.63 680.54 L1601.07 680.54 L1600.51 680.54 L1599.95 680.54 L1599.39 680.54 L1598.83 680.54 L1598.27 680.54 L1597.71 680.54 L1597.15 680.54 L1596.59 680.54 L1596.03 680.54 L1595.47 680.54 L1594.92 680.54 L1594.36 680.54 L1593.8 680.54 L1593.24 680.54 L1592.68 680.54 L1592.12 680.54 L1591.56 680.54 L1591 680.54 L1590.44 680.54 L1589.88 680.54 L1589.32 680.54 L1588.76 680.54 L1588.2 680.54 L1587.65 680.54 L1587.09 680.54 L1586.53 680.54 L1585.97 680.54 L1585.41 680.54 L1584.85 680.54 L1584.29 680.54 L1583.73 680.54 L1583.17 680.54 L1582.61 680.54 L1582.05 680.54 L1581.49 680.54 L1580.93 680.54 L1580.37 680.54 L1579.82 680.54 L1579.26 680.54 L1578.7 680.54 L1578.14 680.54 L1577.58 680.54 L1577.02 680.54 L1576.46 680.54 L1575.9 680.54 L1575.34 680.54 L1574.78 680.54 L1574.22 680.54 L1573.66 680.54 L1573.1 680.54 L1572.55 680.54 L1571.99 680.54 L1571.43 680.54 L1570.87 680.54 L1570.31 680.54 L1569.75 680.54 L1569.19 680.54 L1568.63 680.54 L1568.07 680.54 L1567.51 680.54 L1566.95 680.54 L1566.39 680.54 L1565.83 680.54 L1565.28 680.54 L1564.72 680.54 L1564.16 680.54 L1563.6 680.54 L1563.04 680.54 L1562.48 680.54 L1561.92 680.54 L1561.36 680.54 L1560.8 680.54 L1560.24 680.54 L1559.68 680.54 L1559.12 680.54 L1558.56 680.54 L1558 680.54 L1557.45 680.54 L1556.89 680.54 L1556.33 680.54 L1555.77 680.54 L1555.21 680.54 L1554.65 680.54 L1554.09 680.54 L1553.53 680.54 L1552.97 680.54 L1552.41 680.54 L1551.85 680.54 L1551.29 680.54 L1550.73 680.54 L1550.18 680.54 L1549.62 680.54 L1549.06 680.54 L1548.5 680.54 L1547.94 680.54 L1547.38 680.54 L1546.82 680.54 L1546.26 680.54 L1545.7 680.54 L1545.14 680.54 L1544.58 680.54 L1544.02 680.54 L1543.46 680.54 L1542.9 680.54 L1542.35 680.54 L1541.79 680.54 L1541.23 680.54 L1540.67 680.54 L1540.11 680.54 L1539.55 680.54 L1538.99 680.54 L1538.43 680.54 L1537.87 680.54 L1537.31 680.54 L1536.75 680.54 L1536.19 680.54 L1535.63 680.54 L1535.08 680.54 L1534.52 680.54 L1533.96 680.54 L1533.4 680.54 L1532.84 680.54 L1532.28 680.54 L1531.72 680.54 L1531.16 680.54 L1530.6 680.54 L1530.04 680.54 L1529.48 680.54 L1528.92 680.54 L1528.36 680.54 L1527.81 680.54 L1527.25 680.54 L1526.69 680.54 L1526.13 680.54 L1525.57 680.54 L1525.01 680.54 L1524.45 680.54 L1523.89 680.54 L1523.33 680.54 L1522.77 680.54 L1522.21 680.54 L1521.65 680.54 L1521.09 680.54 L1520.53 680.54 L1519.98 680.54 L1519.42 680.54 L1518.86 680.54 L1518.3 680.54 L1517.74 680.54 L1517.18 680.54 L1516.62 680.54 L1516.06 680.54 L1515.5 680.54 L1514.94 680.54 L1514.38 680.54 L1513.82 680.54 L1513.26 680.54 L1512.71 680.54 L1512.15 680.54 L1511.59 680.54 L1511.03 680.54 L1510.47 680.54 L1509.91 680.54 L1509.35 680.54 L1508.79 680.54 L1508.23 680.54 L1507.67 680.54 L1507.11 680.54 L1506.55 680.54 L1505.99 680.54 L1505.44 680.54 L1504.88 680.54 L1504.32 680.54 L1503.76 680.54 L1503.2 680.54 L1502.64 680.54 L1502.08 680.54 L1501.52 680.54 L1500.96 680.54 L1500.4 680.54 L1499.84 680.54 L1499.28 680.54 L1498.72 680.54 L1498.16 680.54 L1497.61 680.54 L1497.05 680.54 L1496.49 680.54 L1495.93 680.54 L1495.37 680.54 L1494.81 680.54 L1494.25 680.54 L1493.69 680.54 L1493.13 680.54 L1492.57 680.54 L1492.01 680.54 L1491.45 680.54 L1490.89 680.54 L1490.34 680.54 L1489.78 680.54 L1489.22 680.54 L1488.66 680.54 L1488.1 680.54 L1487.54 680.54 L1486.98 680.54 L1486.42 680.54 L1485.86 680.54 L1485.3 680.54 L1484.74 680.54 L1484.18 680.54 L1483.62 680.54 L1483.07 680.54 L1482.51 680.54 L1481.95 680.54 L1481.39 680.54 L1480.83 680.54 L1480.27 680.54 L1479.71 680.54 L1479.15 680.54 L1478.59 680.54 L1478.03 680.54 L1477.47 680.54 L1476.91 680.54 L1476.35 680.54 L1475.79 680.54 L1475.24 680.54 L1474.68 680.54 L1474.12 680.54 L1473.56 680.54 L1473 680.54 L1472.44 680.54 L1471.88 680.54 L1471.32 680.54 L1470.76 680.54 L1470.2 680.54 L1469.64 680.54 L1469.08 680.54 L1468.52 680.54 L1467.97 680.54 L1467.41 680.54 L1466.85 680.54 L1466.29 680.54 L1465.73 680.54 L1465.17 680.54 L1464.61 680.54 L1464.05 680.54 L1463.49 680.54 L1462.93 680.54 L1462.37 680.54 L1461.81 680.54 L1461.25 680.54 L1460.7 680.54 L1460.14 680.54 L1459.58 680.54 L1459.02 680.54 L1458.46 680.54 L1457.9 680.54 L1457.34 680.54 L1456.78 680.54 L1456.22 680.54 L1455.66 680.54 L1455.1 680.54 L1454.54 680.54 L1453.98 680.54 L1453.42 680.54 L1452.87 680.54 L1452.31 680.54 L1451.75 680.54 L1451.19 680.54 L1450.63 680.54 L1450.07 680.54 L1449.51 680.54 L1448.95 680.54 L1448.39 680.54 L1447.83 680.54 L1447.27 680.54 L1446.71 680.54 L1446.15 680.54 L1445.6 680.54 L1445.04 680.54 L1444.48 680.54 L1443.92 680.54 L1443.36 680.54 L1442.8 680.54 L1442.24 680.54 L1441.68 680.54 L1441.12 680.54 L1440.56 680.54 L1440 680.54 L1439.44 680.54 L1438.88 680.54 L1438.33 680.54 L1437.77 680.54 L1437.21 680.54 L1436.65 680.54 L1436.09 680.54 L1435.53 680.54 L1434.97 680.54 L1434.41 680.54 L1433.85 680.54 L1433.29 680.54 L1432.73 680.54 L1432.17 680.54 L1431.61 680.54 L1431.05 680.54 L1430.5 680.54 L1429.94 680.54 L1429.38 680.54 L1428.82 680.54 L1428.26 680.54 L1427.7 680.54 L1427.14 680.54 L1426.58 680.54 L1426.02 680.54 L1425.46 680.54 L1424.9 680.54 L1424.34 680.54 L1423.78 680.54 L1423.23 680.54 L1422.67 680.54 L1422.11 680.54 L1421.55 680.54 L1420.99 680.54 L1420.43 680.54 L1419.87 680.54 L1419.31 680.54 L1418.75 680.54 L1418.19 680.54 L1417.63 680.54 L1417.07 680.54 L1416.51 680.54 L1415.95 680.54 L1415.4 680.54 L1414.84 680.54 L1414.28 680.54 L1413.72 680.54 L1413.16 680.54 L1412.6 680.54 L1412.04 680.54 L1411.48 680.54 L1410.92 680.54 L1410.36 680.54 L1409.8 680.54 L1409.24 680.54 L1408.68 680.54 L1408.13 680.54 L1407.57 680.54 L1407.01 680.54 L1406.45 680.54 L1405.89 680.54 L1405.33 680.54 L1404.77 680.54 L1404.21 680.54 L1403.65 680.54 L1403.09 680.54 L1402.53 680.54 L1401.97 680.54 L1401.41 680.54 L1400.86 680.54 L1400.3 680.54 L1399.74 680.54 L1399.18 680.54 L1398.62 680.54 L1398.06 680.54 L1397.5 680.54 L1396.94 680.54 L1396.38 680.54 L1395.82 680.54 L1395.26 680.54 L1394.7 680.54 L1394.14 680.54 L1393.58 680.54 L1393.03 680.54 L1392.47 680.54 L1391.91 680.54 L1391.35 680.54 L1390.79 680.54 L1390.23 680.54 L1389.67 680.54 L1389.11 680.54 L1388.55 680.54 L1387.99 680.54 L1387.43 680.54 L1386.87 680.54 L1386.31 680.54 L1385.76 680.54 L1385.2 680.54 L1384.64 680.54 L1384.08 680.54 L1383.52 680.54 L1382.96 680.54 L1382.4 680.54 L1381.84 680.54 L1381.28 680.54 L1380.72 680.54 L1380.16 680.54 L1379.6 680.54 L1379.04 680.54 L1378.49 680.54 L1377.93 680.54 L1377.37 680.54 L1376.81 680.54 L1376.25 680.54 L1375.69 680.54 L1375.13 680.54 L1374.57 680.54 L1374.01 680.54 L1373.45 680.54 L1372.89 680.54 L1372.33 680.54 L1371.77 680.54 L1371.21 680.54 L1370.66 680.54 L1370.1 680.54 L1369.54 680.54 L1368.98 680.54 L1368.42 680.54 L1367.86 680.54 L1367.3 680.54 L1366.74 680.54 L1366.18 680.54 L1365.62 680.54 L1365.06 680.54 L1364.5 680.54 L1363.94 680.54 L1363.39 680.54 L1362.83 680.54 L1362.27 680.54 L1361.71 680.54 L1361.15 680.54 L1360.59 680.54 L1360.03 680.54 L1359.47 680.54 L1358.91 680.54 L1358.35 680.54 L1357.79 680.54 L1357.23 680.54 L1356.67 680.54 L1356.12 680.54 L1355.56 680.54 L1355 680.54 L1354.44 680.54 L1353.88 680.54 L1353.32 680.54 L1352.76 680.54 L1352.2 680.54 L1351.64 680.54 L1351.08 680.54 L1350.52 680.54 L1349.96 680.54 L1349.4 680.54 L1348.84 680.54 L1348.29 680.54 L1347.73 680.54 L1347.17 680.54 L1346.61 680.54 L1346.05 680.54 L1345.49 680.54 L1344.93 680.54 L1344.37 680.54 L1343.81 680.54 L1343.25 680.54 L1342.69 680.54 L1342.13 680.54 L1341.57 680.54 L1341.02 680.54 L1340.46 680.54 L1339.9 680.54 L1339.34 680.54 L1338.78 680.54 L1338.22 680.54 L1337.66 680.54 L1337.1 680.54 L1336.54 680.54 L1335.98 680.54 L1335.42 680.54 L1334.86 680.54 L1334.3 680.54 L1333.75 680.54 L1333.19 680.54 L1332.63 680.54 L1332.07 680.54 L1331.51 680.54 L1330.95 680.54 L1330.39 680.54 L1329.83 680.54 L1329.27 680.54 L1328.71 680.54 L1328.15 680.54 L1327.59 680.54 L1327.03 680.54 L1326.47 680.54 L1325.92 680.54 L1325.36 680.54 L1324.8 680.54 L1324.24 680.54 L1323.68 680.54 L1323.12 680.54 L1322.56 680.54 L1322 680.54 L1321.44 680.54 L1320.88 680.54 L1320.32 680.54 L1319.76 680.54 L1319.2 680.54 L1318.65 680.54 L1318.09 680.54 L1317.53 680.54 L1316.97 680.54 L1316.41 680.54 L1315.85 680.54 L1315.29 680.54 L1314.73 680.54 L1314.17 680.54 L1313.61 680.54 L1313.05 680.54 L1312.49 680.54 L1311.93 680.54 L1311.38 680.54 L1310.82 680.54 L1310.26 680.54 L1309.7 680.54 L1309.14 680.54 L1308.58 680.54 L1308.02 680.54 L1307.46 680.54 L1306.9 680.54 L1306.34 680.54 L1305.78 680.54 L1305.22 680.54 L1304.66 680.54 L1304.1 680.54 L1303.55 680.54 L1302.99 680.54 L1302.43 680.54 L1301.87 680.54 L1301.31 680.54 L1300.75 680.54 L1300.19 680.54 L1299.63 680.54 L1299.07 680.54 L1298.51 680.54 L1297.95 680.54 L1297.39 680.54 L1296.83 680.54 L1296.28 680.54 L1295.72 680.54 L1295.16 680.54 L1294.6 680.54 L1294.04 680.54 L1293.48 680.54 L1292.92 680.54 L1292.36 680.54 L1291.8 680.54 L1291.24 680.54 L1290.68 680.54 L1290.12 680.54 L1289.56 680.54 L1289 680.54 L1288.45 680.54 L1287.89 680.54 L1287.33 680.54 L1286.77 680.54 L1286.21 680.54 L1285.65 680.54 L1285.09 680.54 L1284.53 680.54 L1283.97 680.54 L1283.41 680.54 L1282.85 680.54 L1282.29 680.54 L1281.73 680.54 L1281.18 680.54 L1280.62 680.54 L1280.06 680.54 L1279.5 680.54 L1278.94 680.54 L1278.38 680.54 L1277.82 680.54 L1277.26 680.54 L1276.7 680.54 L1276.14 680.54 L1275.58 680.54 L1275.02 680.54 L1274.46 680.54 L1273.91 680.54 L1273.35 680.54 L1272.79 680.54 L1272.23 680.54 L1271.67 680.54 L1271.11 680.54 L1270.55 680.54 L1269.99 680.54 L1269.43 680.54 L1268.87 680.54 L1268.31 680.54 L1267.75 680.54 L1267.19 680.54 L1266.63 680.54 L1266.08 680.54 L1265.52 680.54 L1264.96 680.54 L1264.4 680.54 L1263.84 680.54 L1263.28 680.54 L1262.72 680.54 L1262.16 680.54 L1261.6 680.54 L1261.04 680.54 L1260.48 680.54 L1259.92 680.54 L1259.36 680.54 L1258.81 680.54 L1258.25 680.54 L1257.69 680.54 L1257.13 680.54 L1256.57 680.54 L1256.01 680.54 L1255.45 680.54 L1254.89 680.54 L1254.33 680.54 L1253.77 680.54 L1253.21 680.54 L1252.65 680.54 L1252.09 680.54 L1251.54 680.54 L1250.98 680.54 L1250.42 680.54 L1249.86 680.54 L1249.3 680.54 L1248.74 680.54 L1248.18 680.54 L1247.62 680.54 L1247.06 680.54 L1246.5 680.54 L1245.94 680.54 L1245.38 680.54 L1244.82 680.54 L1244.26 680.54 L1243.71 680.54 L1243.15 680.54 L1242.59 680.54 L1242.03 680.54 L1241.47 680.54 L1240.91 680.54 L1240.35 680.54 L1239.79 680.54 L1239.23 680.54 L1238.67 680.54 L1238.11 680.54 L1237.55 680.54 L1236.99 680.54 L1236.44 680.54 L1235.88 680.54 L1235.32 680.54 L1234.76 680.54 L1234.2 680.54 L1233.64 680.54 L1233.08 680.54 L1232.52 680.54 L1231.96 680.54 L1231.4 680.54 L1230.84 680.54 L1230.28 680.54 L1229.72 680.54 L1229.17 680.54 L1228.61 680.54 L1228.05 680.54 L1227.49 680.54 L1226.93 680.54 L1226.37 680.54 L1225.81 680.54 L1225.25 680.54 L1224.69 680.54 L1224.13 680.54 L1223.57 680.54 L1223.01 680.54 L1222.45 680.54 L1221.89 680.54 L1221.34 680.54 L1220.78 680.54 L1220.22 680.54 L1219.66 680.54 L1219.1 680.54 L1218.54 680.54 L1217.98 680.54 L1217.42 680.54 L1216.86 680.54 L1216.3 680.54 L1215.74 680.54 L1215.18 680.54 L1214.62 680.54 L1214.07 680.54 L1213.51 680.54 L1212.95 680.54 L1212.39 680.54 L1211.83 680.54 L1211.27 680.54 L1210.71 680.54 L1210.15 680.54 L1209.59 680.54 L1209.03 680.54 L1208.47 680.54 L1207.91 680.54 L1207.35 680.54 L1206.8 680.54 L1206.24 680.54 L1205.68 680.54 L1205.12 680.54 L1204.56 680.54 L1204 680.54 L1203.44 680.54 L1202.88 680.54 L1202.32 680.54 L1201.76 680.54 L1201.2 680.54 L1200.64 680.54 L1200.08 680.54 L1199.52 680.54 L1198.97 680.54 L1198.41 680.54 L1197.85 680.54 L1197.29 680.54 L1196.73 680.54 L1196.17 680.54 L1195.61 680.54 L1195.05 680.54 L1194.49 680.54 L1193.93 680.54 L1193.37 680.54 L1192.81 680.54 L1192.25 680.54 L1191.7 680.54 L1191.14 680.54 L1190.58 680.54 L1190.02 680.54 L1189.46 680.54 L1188.9 680.54 L1188.34 680.54 L1187.78 680.54 L1187.22 680.54 L1186.66 680.54 L1186.1 680.54 L1185.54 680.54 L1184.98 680.54 L1184.43 680.54 L1183.87 680.54 L1183.31 680.54 L1182.75 680.54 L1182.19 680.54 L1181.63 680.54 L1181.07 680.54 L1180.51 680.54 L1179.95 680.54 L1179.39 680.54 L1178.83 680.54 L1178.27 680.54 L1177.71 680.54 L1177.15 680.54 L1176.6 680.54 L1176.04 680.54 L1175.48 680.54 L1174.92 680.54 L1174.36 680.54 L1173.8 680.54 L1173.24 680.54 L1172.68 680.54 L1172.12 680.54 L1171.56 680.54 L1171 680.54 L1170.44 680.54 L1169.88 680.54 L1169.33 680.54 L1168.77 680.54 L1168.21 680.54 L1167.65 680.54 L1167.09 680.54 L1166.53 680.54 L1165.97 680.54 L1165.41 680.54 L1164.85 680.54 L1164.29 680.54 L1163.73 680.54 L1163.17 680.54 L1162.61 680.54 L1162.05 680.54 L1161.5 680.54 L1160.94 680.54 L1160.38 680.54 L1159.82 680.54 L1159.26 680.54 L1158.7 680.54 L1158.14 680.54 L1157.58 680.54 L1157.02 680.54 L1156.46 680.54 L1155.9 680.54 L1155.34 680.54 L1154.78 680.54 L1154.23 680.54 L1153.67 680.54 L1153.11 680.54 L1152.55 680.54 L1151.99 680.54 L1151.43 680.54 L1150.87 680.54 L1150.31 680.54 L1149.75 680.54 L1149.19 680.54 L1148.63 680.54 L1148.07 680.54 L1147.51 680.54 L1146.96 680.54 L1146.4 680.54 L1145.84 680.54 L1145.28 680.54 L1144.72 680.54 L1144.16 680.54 L1143.6 680.54 L1143.04 680.54 L1142.48 680.54 L1141.92 680.54 L1141.36 680.54 L1140.8 680.54 L1140.24 680.54 L1139.68 680.54 L1139.13 680.54 L1138.57 680.54 L1138.01 680.54 L1137.45 680.54 L1136.89 680.54 L1136.33 680.54 L1135.77 680.54 L1135.21 680.54 L1134.65 680.54 L1134.09 680.54 L1133.53 680.54 L1132.97 680.54 L1132.41 680.54 L1131.86 680.54 L1131.3 680.54 L1130.74 680.54 L1130.18 680.54 L1129.62 680.54 L1129.06 680.54 L1128.5 680.54 L1127.94 680.54 L1127.38 680.54 L1126.82 680.54 L1126.26 680.54 L1125.7 680.54 L1125.14 680.54 L1124.59 680.54 L1124.03 680.54 L1123.47 680.54 L1122.91 680.54 L1122.35 680.54 L1121.79 680.54 L1121.23 680.54 L1120.67 680.54 L1120.11 680.54 L1119.55 680.54 L1118.99 680.54 L1118.43 680.54 L1117.87 680.54 L1117.31 680.54 L1116.76 680.54 L1116.2 680.54 L1115.64 680.54 L1115.08 680.54 L1114.52 680.54 L1113.96 680.54 L1113.4 680.54 L1112.84 680.54 L1112.28 680.54 L1111.72 680.54 L1111.16 680.54 L1110.6 680.54 L1110.04 680.54 L1109.49 680.54 L1108.93 680.54 L1108.37 680.54 L1107.81 680.54 L1107.25 680.54 L1106.69 680.54 L1106.13 680.54 L1105.57 680.54 L1105.01 680.54 L1104.45 680.54 L1103.89 680.54 L1103.33 680.54 L1102.77 680.54 L1102.22 680.54 L1101.66 680.54 L1101.1 680.54 L1100.54 680.54 L1099.98 680.54 L1099.42 680.54 L1098.86 680.54 L1098.3 680.54 L1097.74 680.54 L1097.18 680.54 L1096.62 680.54 L1096.06 680.54 L1095.5 680.54 L1094.94 680.54 L1094.39 680.54 L1093.83 680.54 L1093.27 680.54 L1092.71 680.54 L1092.15 680.54 L1091.59 680.54 L1091.03 680.54 L1090.47 680.54 L1089.91 680.54 L1089.35 680.54 L1088.79 680.54 L1088.23 680.54 L1087.67 680.54 L1087.12 680.54 L1086.56 680.54 L1086 680.54 L1085.44 680.54 L1084.88 680.54 L1084.32 680.54 L1083.76 680.54 L1083.2 680.54 L1082.64 680.54 L1082.08 680.54 L1081.52 680.54 L1080.96 680.54 L1080.4 680.54 L1079.85 680.54 L1079.29 680.54 L1078.73 680.54 L1078.17 680.54 L1077.61 680.54 L1077.05 680.54 L1076.49 680.54 L1075.93 680.54 L1075.37 680.54 L1074.81 680.54 L1074.25 680.54 L1073.69 680.54 L1073.13 680.54 L1072.57 680.54 L1072.02 680.54 L1071.46 680.54 L1070.9 680.54 L1070.34 680.54 L1069.78 680.54 L1069.22 680.54 L1068.66 680.54 L1068.1 680.54 L1067.54 680.54 L1066.98 680.54 L1066.42 680.54 L1065.86 680.54 L1065.3 680.54 L1064.75 680.54 L1064.19 680.54 L1063.63 680.54 L1063.07 680.54 L1062.51 680.54 L1061.95 680.54 L1061.39 680.54 L1060.83 680.54 L1060.27 680.54 L1059.71 680.54 L1059.15 680.54 L1058.59 680.54 L1058.03 680.54 L1057.48 680.54 L1056.92 680.54 L1056.36 680.54 L1055.8 680.54 L1055.24 680.54 L1054.68 680.54 L1054.12 680.54 L1053.56 680.54 L1053 680.54 L1052.44 680.54 L1051.88 680.54 L1051.32 680.54 L1050.76 680.54 L1050.2 680.54 L1049.65 680.54 L1049.09 680.54 L1048.53 680.54 L1047.97 680.54 L1047.41 680.54 L1046.85 680.54 L1046.29 680.54 L1045.73 680.54 L1045.17 680.54 L1044.61 680.54 L1044.05 680.54 L1043.49 680.54 L1042.93 680.54 L1042.38 680.54 L1041.82 680.54 L1041.26 680.54 L1040.7 680.54 L1040.14 680.54 L1039.58 680.54 L1039.02 680.54 L1038.46 680.54 L1037.9 680.54 L1037.34 680.54 L1036.78 680.54 L1036.22 680.54 L1035.66 680.54 L1035.1 680.54 L1034.55 680.54 L1033.99 680.54 L1033.43 680.54 L1032.87 680.54 L1032.31 680.54 L1031.75 680.54 L1031.19 680.54 L1030.63 680.54 L1030.07 680.54 L1029.51 680.54 L1028.95 680.54 L1028.39 680.54 L1027.83 680.54 L1027.28 680.54 L1026.72 680.54 L1026.16 680.54 L1025.6 680.54 L1025.04 680.54 L1024.48 680.54 L1023.92 680.54 L1023.36 680.54 L1022.8 680.54 L1022.24 680.54 L1021.68 680.54 L1021.12 680.54 L1020.56 680.54 L1020.01 680.54 L1019.45 680.54 L1018.89 680.54 L1018.33 680.54 L1017.77 680.54 L1017.21 680.54 L1016.65 680.54 L1016.09 680.54 L1015.53 680.54 L1014.97 680.54 L1014.41 680.54 L1013.85 680.54 L1013.29 680.54 L1012.73 680.54 L1012.18 680.54 L1011.62 680.54 L1011.06 680.54 L1010.5 680.54 L1009.94 680.54 L1009.38 680.54 L1008.82 680.54 L1008.26 680.54 L1007.7 680.54 L1007.14 680.54 L1006.58 680.54 L1006.02 680.54 L1005.46 680.54 L1004.91 680.54 L1004.35 680.54 L1003.79 680.54 L1003.23 680.54 L1002.67 680.54 L1002.11 680.54 L1001.55 680.54 L1000.99 680.54 L1000.43 680.54 L999.872 680.54 L999.313 680.54 L998.754 680.54 L998.194 680.54 L997.635 680.54 L997.076 680.54 L996.517 680.54 L995.957 680.54 L995.398 680.54 L994.839 680.54 L994.28 680.54 L993.72 680.54 L993.161 680.54 L992.602 680.54 L992.043 680.54 L991.483 680.54 L990.924 680.54 L990.365 680.54 L989.806 680.54 L989.246 680.54 L988.687 680.54 L988.128 680.54 L987.569 680.54 L987.009 680.54 L986.45 680.54 L985.891 680.54 L985.332 680.54 L984.772 680.54 L984.213 680.54 L983.654 680.54 L983.095 680.54 L982.535 680.54 L981.976 680.54 L981.417 680.54 L980.858 680.54 L980.298 680.54 L979.739 680.54 L979.18 680.54 L978.621 680.54 L978.061 680.54 L977.502 680.54 L976.943 680.54 L976.384 680.54 L975.824 680.54 L975.265 680.54 L974.706 680.54 L974.147 680.54 L973.587 680.54 L973.028 680.54 L972.469 680.54 L971.91 680.54 L971.35 680.54 L970.791 680.54 L970.232 680.54 L969.673 680.54 L969.113 680.54 L968.554 680.54 L967.995 680.54 L967.436 680.54 L966.876 680.54 L966.317 680.54 L965.758 680.54 L965.199 680.54 L964.639 680.54 L964.08 680.54 L963.521 680.54 L962.962 680.54 L962.402 680.54 L961.843 680.54 L961.284 680.54 L960.725 680.54 L960.165 680.54 L959.606 680.54 L959.047 680.54 L958.488 680.54 L957.928 680.54 L957.369 680.54 L956.81 680.54 L956.251 680.54 L955.691 680.54 L955.132 680.54 L954.573 680.54 L954.014 680.54 L953.454 680.54 L952.895 680.54 L952.336 680.54 L951.777 680.54 L951.217 680.54 L950.658 680.54 L950.099 680.54 L949.54 680.54 L948.98 680.54 L948.421 680.54 L947.862 680.54 L947.303 680.54 L946.743 680.54 L946.184 680.54 L945.625 680.54 L945.066 680.54 L944.506 680.54 L943.947 680.54 L943.388 680.54 L942.829 680.54 L942.269 680.54 L941.71 680.54 L941.151 680.54 L940.592 680.54 L940.032 680.54 L939.473 680.54 L938.914 680.54 L938.355 680.54 L937.795 680.54 L937.236 680.54 L936.677 680.54 L936.118 680.54 L935.558 680.54 L934.999 680.54 L934.44 680.54 L933.881 680.54 L933.321 680.54 L932.762 680.54 L932.203 680.54 L931.644 680.54 L931.084 680.54 L930.525 680.54 L929.966 680.54 L929.406 680.54 L928.847 680.54 L928.288 680.54 L927.729 680.54 L927.169 680.54 L926.61 680.54 L926.051 680.54 L925.492 680.54 L924.932 680.54 L924.373 680.54 L923.814 680.54 L923.255 680.54 L922.695 680.54 L922.136 680.54 L921.577 680.54 L921.018 680.54 L920.458 680.54 L919.899 680.54 L919.34 680.54 L918.781 680.54 L918.221 680.54 L917.662 680.54 L917.103 680.54 L916.544 680.54 L915.984 680.54 L915.425 680.54 L914.866 680.54 L914.307 680.54 L913.747 680.54 L913.188 680.54 L912.629 680.54 L912.07 680.54 L911.51 680.54 L910.951 680.54 L910.392 680.54 L909.833 680.54 L909.273 680.54 L908.714 680.54 L908.155 680.54 L907.596 680.54 L907.036 680.54 L906.477 680.54 L905.918 680.54 L905.359 680.54 L904.799 680.54 L904.24 680.54 L903.681 680.54 L903.122 680.54 L902.562 680.54 L902.003 680.54 L901.444 680.54 L900.885 680.54 L900.325 680.54 L899.766 680.54 L899.207 680.54 L898.648 680.54 L898.088 680.54 L897.529 680.54 L896.97 680.54 L896.411 680.54 L895.851 680.54 L895.292 680.54 L894.733 680.54 L894.174 680.54 L893.614 680.54 L893.055 680.54 L892.496 680.54 L891.937 680.54 L891.377 680.54 L890.818 680.54 L890.259 680.54 L889.7 680.54 L889.14 680.54 L888.581 680.54 L888.022 680.54 L887.463 680.54 L886.903 680.54 L886.344 680.54 L885.785 680.54 L885.226 680.54 L884.666 680.54 L884.107 680.54 L883.548 680.54 L882.989 680.54 L882.429 680.54 L881.87 680.54 L881.311 680.54 L880.752 680.54 L880.192 680.54 L879.633 680.54 L879.074 680.54 L878.515 680.54 L877.955 680.54 L877.396 680.54 L876.837 680.54 L876.278 680.54 L875.718 680.54 L875.159 680.54 L874.6 680.54 L874.041 680.54 L873.481 680.54 L872.922 680.54 L872.363 680.54 L871.804 680.54 L871.244 680.54 L870.685 680.54 L870.126 680.54 L869.567 680.54 L869.007 680.54 L868.448 680.54 L867.889 680.54 L867.33 680.54 L866.77 680.54 L866.211 680.54 L865.652 680.54 L865.093 680.54 L864.533 680.54 L863.974 680.54 L863.415 680.54 L862.856 680.54 L862.296 680.54 L861.737 680.54 L861.178 680.54 L860.619 680.54 L860.059 680.54 L859.5 680.54 L858.941 680.54 L858.382 680.54 L857.822 680.54 L857.263 680.54 L856.704 680.54 L856.145 680.54 L855.585 680.54 L855.026 680.54 L854.467 680.54 L853.908 680.54 L853.348 680.54 L852.789 680.54 L852.23 680.54 L851.671 680.54 L851.111 680.54 L850.552 680.54 L849.993 680.54 L849.434 680.54 L848.874 680.54 L848.315 680.54 L847.756 680.54 L847.197 680.54 L846.637 680.54 L846.078 680.54 L845.519 680.54 L844.96 680.54 L844.4 680.54 L843.841 680.54 L843.282 680.54 L842.723 680.54 L842.163 680.54 L841.604 680.54 L841.045 680.54 L840.486 680.54 L839.926 680.54 L839.367 680.54 L838.808 680.54 L838.249 680.54 L837.689 680.54 L837.13 680.54 L836.571 680.54 L836.012 680.54 L835.452 680.54 L834.893 680.54 L834.334 680.54 L833.775 680.54 L833.215 680.54 L832.656 680.54 L832.097 680.54 L831.538 680.54 L830.978 680.54 L830.419 680.54 L829.86 680.54 L829.301 680.54 L828.741 680.54 L828.182 680.54 L827.623 680.54 L827.064 680.54 L826.504 680.54 L825.945 680.54 L825.386 680.54 L824.827 680.54 L824.267 680.54 L823.708 680.54 L823.149 680.54 L822.59 680.54 L822.03 680.54 L821.471 680.54 L820.912 680.54 L820.353 680.54 L819.793 680.54 L819.234 680.54 L818.675 680.54 L818.116 680.54 L817.556 680.54 L816.997 680.54 L816.438 680.54 L815.879 680.54 L815.319 680.54 L814.76 680.54 L814.201 680.54 L813.642 680.54 L813.082 680.54 L812.523 680.54 L811.964 680.54 L811.405 680.54 L810.845 680.54 L810.286 680.54 L809.727 680.54 L809.168 680.54 L808.608 680.54 L808.049 680.54 L807.49 680.54 L806.931 680.54 L806.371 680.54 L805.812 680.54 L805.253 680.54 L804.693 680.54 L804.134 680.54 L803.575 680.54 L803.016 680.54 L802.456 680.54 L801.897 680.54 L801.338 680.54 L800.779 680.54 L800.219 680.54 L799.66 680.54 L799.101 680.54 L798.542 680.54 L797.982 680.54 L797.423 680.54 L796.864 680.54 L796.305 680.54 L795.745 680.54 L795.186 680.54 L794.627 680.54 L794.068 680.54 L793.508 680.54 L792.949 680.54 L792.39 680.54 L791.831 680.54 L791.271 680.54 L790.712 680.54 L790.153 680.54 L789.594 680.54 L789.034 680.54 L788.475 680.54 L787.916 680.54 L787.357 680.54 L786.797 680.54 L786.238 680.54 L785.679 680.54 L785.12 680.54 L784.56 680.54 L784.001 680.54 L783.442 680.54 L782.883 680.54 L782.323 680.54 L781.764 680.54 L781.205 680.54 L780.646 680.54 L780.086 680.54 L779.527 680.54 L778.968 680.54 L778.409 680.54 L777.849 680.54 L777.29 680.54 L776.731 680.54 L776.172 680.54 L775.612 680.54 L775.053 680.54 L774.494 680.54 L773.935 680.54 L773.375 680.54 L772.816 680.54 L772.257 680.54 L771.698 680.54 L771.138 680.54 L770.579 680.54 L770.02 680.54 L769.461 680.54 L768.901 680.54 L768.342 680.54 L767.783 680.54 L767.224 680.54 L766.664 680.54 L766.105 680.54 L765.546 680.54 L764.987 680.54 L764.427 680.54 L763.868 680.54 L763.309 680.54 L762.75 680.54 L762.19 680.54 L761.631 680.54 L761.072 680.54 L760.513 680.54 L759.953 680.54 L759.394 680.54 L758.835 680.54 L758.276 680.54 L757.716 680.54 L757.157 680.54 L756.598 680.54 L756.039 680.54 L755.479 680.54 L754.92 680.54 L754.361 680.54 L753.802 680.54 L753.242 680.54 L752.683 680.54 L752.124 680.54 L751.565 680.54 L751.005 680.54 L750.446 680.54 L749.887 680.54 L749.328 680.54 L748.768 680.54 L748.209 680.54 L747.65 680.54 L747.091 680.54 L746.531 680.54 L745.972 680.54 L745.413 680.54 L744.854 680.54 L744.294 680.54 L743.735 680.54 L743.176 680.54 L742.617 680.54 L742.057 680.54 L741.498 680.54 L740.939 680.54 L740.38 680.54 L739.82 680.54 L739.261 680.54 L738.702 680.54 L738.143 680.54 L737.583 680.54 L737.024 680.54 L736.465 680.54 L735.906 680.54 L735.346 680.54 L734.787 680.54 L734.228 680.54 L733.669 680.54 L733.109 680.54 L732.55 680.54 L731.991 680.54 L731.432 680.54 L730.872 680.54 L730.313 680.54 L729.754 680.54 L729.195 680.54 L728.635 680.54 L728.076 680.54 L727.517 680.54 L726.958 680.54 L726.398 680.54 L725.839 680.54 L725.28 680.54 L724.721 680.54 L724.161 680.54 L723.602 680.54 L723.043 680.54 L722.484 680.54 L721.924 680.54 L721.365 680.54 L720.806 680.54 L720.247 680.54  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.637 720.806,685.637 721.365,685.637 721.924,685.637 722.484,685.637 723.043,685.637 723.602,685.637 724.161,685.637 724.721,685.637 725.28,685.637 725.839,685.637 726.398,685.637 726.958,685.637 727.517,685.637 728.076,685.637 728.635,685.637 729.195,685.637 729.754,685.637 730.313,685.637 730.872,685.637 731.432,685.637 731.991,685.637 732.55,685.637 733.109,685.637 733.669,685.637 734.228,685.637 734.787,685.637 735.346,685.637 735.906,685.637 736.465,685.637 737.024,685.637 737.583,685.637 738.143,685.637 738.702,685.637 739.261,685.637 739.82,685.637 740.38,685.637 740.939,685.637 741.498,685.637 742.057,685.637 742.617,685.637 743.176,685.637 743.735,685.637 744.294,685.637 744.854,685.637 745.413,685.637 745.972,685.637 746.531,685.637 747.091,685.637 747.65,685.637 748.209,685.637 748.768,685.637 749.328,685.637 749.887,685.637 750.446,685.637 751.005,685.637 751.565,685.637 752.124,685.637 752.683,685.637 753.242,685.637 753.802,685.637 754.361,685.637 754.92,685.637 755.479,685.637 756.039,685.637 756.598,685.637 757.157,685.637 757.716,685.637 758.276,685.637 758.835,685.637 759.394,685.637 759.953,685.637 760.513,685.637 761.072,685.637 761.631,685.637 762.19,685.637 762.75,685.637 763.309,685.637 763.868,685.637 764.427,685.637 764.987,685.637 765.546,685.637 766.105,685.637 766.664,685.637 767.224,685.637 767.783,685.637 768.342,685.637 768.901,685.637 769.461,685.637 770.02,685.637 770.579,685.637 771.138,685.637 771.698,685.637 772.257,685.637 772.816,685.637 773.375,685.637 773.935,685.637 774.494,685.637 775.053,685.637 775.612,685.637 776.172,685.637 776.731,685.637 777.29,685.637 777.849,685.637 778.409,685.637 778.968,685.637 779.527,685.637 780.086,685.637 780.646,685.637 781.205,685.637 781.764,685.637 782.323,685.637 782.883,685.637 783.442,685.637 784.001,685.637 784.56,685.637 785.12,685.637 785.679,685.637 786.238,685.637 786.797,685.637 787.357,685.637 787.916,685.637 788.475,685.637 789.034,685.637 789.594,685.637 790.153,685.637 790.712,685.637 791.271,685.637 791.831,685.637 792.39,685.637 792.949,685.637 793.508,685.637 794.068,685.637 794.627,685.637 795.186,685.637 795.745,685.637 796.305,685.637 796.864,685.637 797.423,685.637 797.982,685.637 798.542,685.637 799.101,685.637 799.66,685.637 800.219,685.637 800.779,685.637 801.338,685.637 801.897,685.637 802.456,685.637 803.016,685.637 803.575,685.637 804.134,685.637 804.693,685.637 805.253,685.637 805.812,685.637 806.371,685.637 806.931,685.637 807.49,685.637 808.049,685.637 808.608,685.637 809.168,685.637 809.727,685.637 810.286,685.637 810.845,685.637 811.405,685.637 811.964,685.637 812.523,685.637 813.082,685.637 813.642,685.637 814.201,685.637 814.76,685.637 815.319,685.637 815.879,685.637 816.438,685.637 816.997,685.637 817.556,685.637 818.116,685.637 818.675,685.637 819.234,685.637 819.793,685.637 820.353,685.637 820.912,685.637 821.471,685.637 822.03,685.637 822.59,685.637 823.149,685.637 823.708,685.637 824.267,685.637 824.827,685.637 825.386,685.637 825.945,685.637 826.504,685.637 827.064,685.637 827.623,685.637 828.182,685.637 828.741,685.637 829.301,685.637 829.86,685.637 830.419,685.637 830.978,685.637 831.538,685.637 832.097,685.637 832.656,685.637 833.215,685.637 833.775,685.637 834.334,685.637 834.893,685.637 835.452,685.637 836.012,685.637 836.571,685.637 837.13,685.637 837.689,685.637 838.249,685.637 838.808,685.637 839.367,685.637 839.926,685.637 840.486,685.637 841.045,685.637 841.604,685.637 842.163,685.637 842.723,685.637 843.282,685.637 843.841,685.637 844.4,685.637 844.96,685.637 845.519,685.637 846.078,685.637 846.637,685.637 847.197,685.637 847.756,685.637 848.315,685.637 848.874,685.637 849.434,685.637 849.993,685.637 850.552,685.637 851.111,685.637 851.671,685.637 852.23,685.637 852.789,685.637 853.348,685.637 853.908,685.637 854.467,685.637 855.026,685.637 855.585,685.637 856.145,685.637 856.704,685.637 857.263,685.637 857.822,685.637 858.382,685.637 858.941,685.637 859.5,685.637 860.059,685.637 860.619,685.637 861.178,685.637 861.737,685.637 862.296,685.637 862.856,685.637 863.415,685.637 863.974,685.637 864.533,685.637 865.093,685.637 865.652,685.637 866.211,685.637 866.77,685.637 867.33,685.637 867.889,685.637 868.448,685.637 869.007,685.637 869.567,685.637 870.126,685.637 870.685,685.637 871.244,685.637 871.804,685.637 872.363,685.637 872.922,685.637 873.481,685.637 874.041,685.637 874.6,685.637 875.159,685.637 875.718,685.637 876.278,685.637 876.837,685.637 877.396,685.637 877.955,685.637 878.515,685.637 879.074,685.637 879.633,685.637 880.192,685.637 880.752,685.637 881.311,685.637 881.87,685.637 882.429,685.637 882.989,685.637 883.548,685.637 884.107,685.637 884.666,685.637 885.226,685.637 885.785,685.637 886.344,685.637 886.903,685.637 887.463,685.637 888.022,685.637 888.581,685.637 889.14,685.637 889.7,685.637 890.259,685.637 890.818,685.637 891.377,685.637 891.937,685.637 892.496,685.637 893.055,685.637 893.614,685.637 894.174,685.637 894.733,685.637 895.292,685.637 895.851,685.637 896.411,685.637 896.97,685.637 897.529,685.637 898.088,685.637 898.648,685.637 899.207,685.637 899.766,685.637 900.325,685.637 900.885,685.637 901.444,685.637 902.003,685.637 902.562,685.637 903.122,685.637 903.681,685.637 904.24,685.637 904.799,685.637 905.359,685.637 905.918,685.637 906.477,685.637 907.036,685.637 907.596,685.637 908.155,685.637 908.714,685.637 909.273,685.637 909.833,685.637 910.392,685.637 910.951,685.637 911.51,685.637 912.07,685.637 912.629,685.637 913.188,685.637 913.747,685.637 914.307,685.637 914.866,685.637 915.425,685.637 915.984,685.637 916.544,685.637 917.103,685.637 917.662,685.637 918.221,685.637 918.781,685.637 919.34,685.637 919.899,685.637 920.458,685.637 921.018,685.637 921.577,685.637 922.136,685.637 922.695,685.637 923.255,685.637 923.814,685.637 924.373,685.637 924.932,685.637 925.492,685.637 926.051,685.637 926.61,685.637 927.169,685.637 927.729,685.637 928.288,685.637 928.847,685.637 929.406,685.637 929.966,685.637 930.525,685.637 931.084,685.637 931.644,685.637 932.203,685.637 932.762,685.637 933.321,685.637 933.881,685.637 934.44,685.637 934.999,685.637 935.558,685.637 936.118,685.637 936.677,685.637 937.236,685.637 937.795,685.637 938.355,685.637 938.914,685.637 939.473,685.637 940.032,685.637 940.592,685.637 941.151,685.637 941.71,685.637 942.269,685.637 942.829,685.637 943.388,685.637 943.947,685.637 944.506,685.637 945.066,685.637 945.625,685.637 946.184,685.637 946.743,685.637 947.303,685.637 947.862,685.637 948.421,685.637 948.98,685.637 949.54,685.637 950.099,685.637 950.658,685.637 951.217,685.637 951.777,685.637 952.336,685.637 952.895,685.637 953.454,685.637 954.014,685.637 954.573,685.637 955.132,685.637 955.691,685.637 956.251,685.637 956.81,685.637 957.369,685.637 957.928,685.637 958.488,685.637 959.047,685.637 959.606,685.637 960.165,685.637 960.725,685.637 961.284,685.637 961.843,685.637 962.402,685.637 962.962,685.637 963.521,685.637 964.08,685.637 964.639,685.637 965.199,685.637 965.758,685.637 966.317,685.637 966.876,685.637 967.436,685.637 967.995,685.637 968.554,685.637 969.113,685.637 969.673,685.637 970.232,685.637 970.791,685.637 971.35,685.637 971.91,685.637 972.469,685.637 973.028,685.637 973.587,685.637 974.147,685.637 974.706,685.637 975.265,685.637 975.824,685.637 976.384,685.637 976.943,685.637 977.502,685.637 978.061,685.637 978.621,685.637 979.18,685.637 979.739,685.637 980.298,685.637 980.858,685.637 981.417,685.637 981.976,685.637 982.535,685.637 983.095,685.637 983.654,685.637 984.213,685.637 984.772,685.637 985.332,685.637 985.891,685.637 986.45,685.637 987.009,685.637 987.569,685.637 988.128,685.637 988.687,685.637 989.246,685.637 989.806,685.637 990.365,685.637 990.924,685.637 991.483,685.637 992.043,685.637 992.602,685.637 993.161,685.637 993.72,685.637 994.28,685.637 994.839,685.637 995.398,685.637 995.957,685.637 996.517,685.637 997.076,685.637 997.635,685.637 998.194,685.637 998.754,685.637 999.313,685.637 999.872,685.637 1000.43,685.637 1000.99,685.637 1001.55,685.637 1002.11,685.637 1002.67,685.637 1003.23,685.637 1003.79,685.637 1004.35,685.637 1004.91,685.637 1005.46,685.637 1006.02,685.637 1006.58,685.637 1007.14,685.637 1007.7,685.637 1008.26,685.637 1008.82,685.637 1009.38,685.637 1009.94,685.637 1010.5,685.637 1011.06,685.637 1011.62,685.637 1012.18,685.637 1012.73,685.637 1013.29,685.637 1013.85,685.637 1014.41,685.637 1014.97,685.637 1015.53,685.637 1016.09,685.637 1016.65,685.637 1017.21,685.637 1017.77,685.637 1018.33,685.637 1018.89,685.637 1019.45,685.637 1020.01,685.637 1020.56,685.637 1021.12,685.637 1021.68,685.637 1022.24,685.637 1022.8,685.637 1023.36,685.637 1023.92,685.637 1024.48,685.637 1025.04,685.637 1025.6,685.637 1026.16,685.637 1026.72,685.637 1027.28,685.637 1027.83,685.637 1028.39,685.637 1028.95,685.637 1029.51,685.637 1030.07,685.637 1030.63,685.637 1031.19,685.637 1031.75,685.637 1032.31,685.637 1032.87,685.637 1033.43,685.637 1033.99,685.637 1034.55,685.637 1035.1,685.637 1035.66,685.637 1036.22,685.637 1036.78,685.637 1037.34,685.637 1037.9,685.637 1038.46,685.637 1039.02,685.637 1039.58,685.637 1040.14,685.637 1040.7,685.637 1041.26,685.637 1041.82,685.637 1042.38,685.637 1042.93,685.637 1043.49,685.637 1044.05,685.637 1044.61,685.637 1045.17,685.637 1045.73,685.637 1046.29,685.637 1046.85,685.637 1047.41,685.637 1047.97,685.637 1048.53,685.637 1049.09,685.637 1049.65,685.637 1050.2,685.637 1050.76,685.637 1051.32,685.637 1051.88,685.637 1052.44,685.637 1053,685.637 1053.56,685.637 1054.12,685.637 1054.68,685.637 1055.24,685.637 1055.8,685.637 1056.36,685.637 1056.92,685.637 1057.48,685.637 1058.03,685.637 1058.59,685.637 1059.15,685.637 1059.71,685.637 1060.27,685.637 1060.83,685.637 1061.39,685.637 1061.95,685.637 1062.51,685.637 1063.07,685.637 1063.63,685.637 1064.19,685.637 1064.75,685.637 1065.3,685.637 1065.86,685.637 1066.42,685.637 1066.98,685.637 1067.54,685.637 1068.1,685.637 1068.66,685.637 1069.22,685.637 1069.78,685.637 1070.34,685.637 1070.9,685.637 1071.46,685.637 1072.02,685.637 1072.57,685.637 1073.13,685.637 1073.69,685.637 1074.25,685.637 1074.81,685.637 1075.37,685.637 1075.93,685.637 1076.49,685.637 1077.05,685.637 1077.61,685.637 1078.17,685.637 1078.73,685.637 1079.29,685.637 1079.85,685.637 1080.4,685.637 1080.96,685.637 1081.52,685.637 1082.08,685.637 1082.64,685.637 1083.2,685.637 1083.76,685.637 1084.32,685.637 1084.88,685.637 1085.44,685.637 1086,685.637 1086.56,685.637 1087.12,685.637 1087.67,685.637 1088.23,685.637 1088.79,685.637 1089.35,685.637 1089.91,685.637 1090.47,685.637 1091.03,685.637 1091.59,685.637 1092.15,685.637 1092.71,685.637 1093.27,685.637 1093.83,685.637 1094.39,685.637 1094.94,685.637 1095.5,685.637 1096.06,685.637 1096.62,685.637 1097.18,685.637 1097.74,685.637 1098.3,685.637 1098.86,685.637 1099.42,685.637 1099.98,685.637 1100.54,685.637 1101.1,685.637 1101.66,685.637 1102.22,685.637 1102.77,685.637 1103.33,685.637 1103.89,685.637 1104.45,685.637 1105.01,685.637 1105.57,685.637 1106.13,685.637 1106.69,685.637 1107.25,685.637 1107.81,685.637 1108.37,685.637 1108.93,685.637 1109.49,685.637 1110.04,685.637 1110.6,685.637 1111.16,685.637 1111.72,685.637 1112.28,685.637 1112.84,685.637 1113.4,685.637 1113.96,685.637 1114.52,685.637 1115.08,685.637 1115.64,685.637 1116.2,685.637 1116.76,685.637 1117.31,685.637 1117.87,685.637 1118.43,685.637 1118.99,685.637 1119.55,685.637 1120.11,685.637 1120.67,685.637 1121.23,685.637 1121.79,685.637 1122.35,685.637 1122.91,685.637 1123.47,685.637 1124.03,685.637 1124.59,685.637 1125.14,685.637 1125.7,685.637 1126.26,685.637 1126.82,685.637 1127.38,685.637 1127.94,685.637 1128.5,685.637 1129.06,685.637 1129.62,685.637 1130.18,685.637 1130.74,685.637 1131.3,685.637 1131.86,685.637 1132.41,685.637 1132.97,685.637 1133.53,685.637 1134.09,685.637 1134.65,685.637 1135.21,685.637 1135.77,685.637 1136.33,685.637 1136.89,685.637 1137.45,685.637 1138.01,685.637 1138.57,685.637 1139.13,685.637 1139.68,685.637 1140.24,685.637 1140.8,685.637 1141.36,685.637 1141.92,685.637 1142.48,685.637 1143.04,685.637 1143.6,685.637 1144.16,685.637 1144.72,685.637 1145.28,685.637 1145.84,685.637 1146.4,685.637 1146.96,685.637 1147.51,685.637 1148.07,685.637 1148.63,685.637 1149.19,685.637 1149.75,685.637 1150.31,685.637 1150.87,685.637 1151.43,685.637 1151.99,685.637 1152.55,685.637 1153.11,685.637 1153.67,685.637 1154.23,685.637 1154.78,685.637 1155.34,685.637 1155.9,685.637 1156.46,685.637 1157.02,685.637 1157.58,685.637 1158.14,685.637 1158.7,685.637 1159.26,685.637 1159.82,685.637 1160.38,685.637 1160.94,685.637 1161.5,685.637 1162.05,685.637 1162.61,685.637 1163.17,685.637 1163.73,685.637 1164.29,685.637 1164.85,685.637 1165.41,685.637 1165.97,685.637 1166.53,685.637 1167.09,685.637 1167.65,685.637 1168.21,685.637 1168.77,685.637 1169.33,685.637 1169.88,685.637 1170.44,685.637 1171,685.637 1171.56,685.637 1172.12,685.637 1172.68,685.637 1173.24,685.637 1173.8,685.637 1174.36,685.637 1174.92,685.637 1175.48,685.637 1176.04,685.637 1176.6,685.637 1177.15,685.637 1177.71,685.637 1178.27,685.637 1178.83,685.637 1179.39,685.637 1179.95,685.637 1180.51,685.637 1181.07,685.637 1181.63,685.637 1182.19,685.637 1182.75,685.637 1183.31,685.637 1183.87,685.637 1184.43,685.637 1184.98,685.637 1185.54,685.637 1186.1,685.637 1186.66,685.637 1187.22,685.637 1187.78,685.637 1188.34,685.637 1188.9,685.637 1189.46,685.637 1190.02,685.637 1190.58,685.637 1191.14,685.637 1191.7,685.637 1192.25,685.637 1192.81,685.637 1193.37,685.637 1193.93,685.637 1194.49,685.637 1195.05,685.637 1195.61,685.637 1196.17,685.637 1196.73,685.637 1197.29,685.637 1197.85,685.637 1198.41,685.637 1198.97,685.637 1199.52,685.637 1200.08,685.637 1200.64,685.637 1201.2,685.637 1201.76,685.637 1202.32,685.637 1202.88,685.637 1203.44,685.637 1204,685.637 1204.56,685.637 1205.12,685.637 1205.68,685.637 1206.24,685.637 1206.8,685.637 1207.35,685.637 1207.91,685.637 1208.47,685.637 1209.03,685.637 1209.59,685.637 1210.15,685.637 1210.71,685.637 1211.27,685.637 1211.83,685.637 1212.39,685.637 1212.95,685.637 1213.51,685.637 1214.07,685.637 1214.62,685.637 1215.18,685.637 1215.74,685.637 1216.3,685.637 1216.86,685.637 1217.42,685.637 1217.98,685.637 1218.54,685.637 1219.1,685.637 1219.66,685.637 1220.22,685.637 1220.78,685.637 1221.34,685.637 1221.89,685.637 1222.45,685.637 1223.01,685.637 1223.57,685.637 1224.13,685.637 1224.69,685.637 1225.25,685.637 1225.81,685.637 1226.37,685.637 1226.93,685.637 1227.49,685.637 1228.05,685.637 1228.61,685.637 1229.17,685.637 1229.72,685.637 1230.28,685.637 1230.84,685.637 1231.4,685.637 1231.96,685.637 1232.52,685.637 1233.08,685.637 1233.64,685.637 1234.2,685.637 1234.76,685.637 1235.32,685.637 1235.88,685.637 1236.44,685.637 1236.99,685.637 1237.55,685.637 1238.11,685.637 1238.67,685.637 1239.23,685.637 1239.79,685.637 1240.35,685.637 1240.91,685.637 1241.47,685.637 1242.03,685.637 1242.59,685.637 1243.15,685.637 1243.71,685.637 1244.26,685.637 1244.82,685.637 1245.38,685.637 1245.94,685.637 1246.5,685.637 1247.06,685.637 1247.62,685.637 1248.18,685.637 1248.74,685.637 1249.3,685.637 1249.86,685.637 1250.42,685.637 1250.98,685.637 1251.54,685.637 1252.09,685.637 1252.65,685.637 1253.21,685.637 1253.77,685.637 1254.33,685.637 1254.89,685.637 1255.45,685.637 1256.01,685.637 1256.57,685.637 1257.13,685.637 1257.69,685.637 1258.25,685.637 1258.81,685.637 1259.36,685.637 1259.92,685.637 1260.48,685.637 1261.04,685.637 1261.6,685.637 1262.16,685.637 1262.72,685.637 1263.28,685.637 1263.84,685.637 1264.4,685.637 1264.96,685.637 1265.52,685.637 1266.08,685.637 1266.63,685.637 1267.19,685.637 1267.75,685.637 1268.31,685.637 1268.87,685.637 1269.43,685.637 1269.99,685.637 1270.55,685.637 1271.11,685.637 1271.67,685.637 1272.23,685.637 1272.79,685.637 1273.35,685.637 1273.91,685.637 1274.46,685.637 1275.02,685.637 1275.58,685.637 1276.14,685.637 1276.7,685.637 1277.26,685.637 1277.82,685.637 1278.38,685.637 1278.94,685.637 1279.5,685.637 1280.06,685.637 1280.62,685.637 1281.18,685.637 1281.73,685.637 1282.29,685.637 1282.85,685.637 1283.41,685.637 1283.97,685.637 1284.53,685.637 1285.09,685.637 1285.65,685.637 1286.21,685.637 1286.77,685.637 1287.33,685.637 1287.89,685.637 1288.45,685.637 1289,685.637 1289.56,685.637 1290.12,685.637 1290.68,685.637 1291.24,685.637 1291.8,685.637 1292.36,685.637 1292.92,685.637 1293.48,685.637 1294.04,685.637 1294.6,685.637 1295.16,685.637 1295.72,685.637 1296.28,685.637 1296.83,685.637 1297.39,685.637 1297.95,685.637 1298.51,685.637 1299.07,685.637 1299.63,685.637 1300.19,685.637 1300.75,685.637 1301.31,685.637 1301.87,685.637 1302.43,685.637 1302.99,685.637 1303.55,685.637 1304.1,685.637 1304.66,685.637 1305.22,685.637 1305.78,685.637 1306.34,685.637 1306.9,685.637 1307.46,685.637 1308.02,685.637 1308.58,685.637 1309.14,685.637 1309.7,685.637 1310.26,685.637 1310.82,685.637 1311.38,685.637 1311.93,685.637 1312.49,685.637 1313.05,685.637 1313.61,685.637 1314.17,685.637 1314.73,685.637 1315.29,685.637 1315.85,685.637 1316.41,685.637 1316.97,685.637 1317.53,685.637 1318.09,685.637 1318.65,685.637 1319.2,685.637 1319.76,685.637 1320.32,685.637 1320.88,685.637 1321.44,685.637 1322,685.637 1322.56,685.637 1323.12,685.637 1323.68,685.637 1324.24,685.637 1324.8,685.637 1325.36,685.637 1325.92,685.637 1326.47,685.637 1327.03,685.637 1327.59,685.637 1328.15,685.637 1328.71,685.637 1329.27,685.637 1329.83,685.637 1330.39,685.637 1330.95,685.637 1331.51,685.637 1332.07,685.637 1332.63,685.637 1333.19,685.637 1333.75,685.637 1334.3,685.637 1334.86,685.637 1335.42,685.637 1335.98,685.637 1336.54,685.637 1337.1,685.637 1337.66,685.637 1338.22,685.637 1338.78,685.637 1339.34,685.637 1339.9,685.637 1340.46,685.637 1341.02,685.637 1341.57,685.637 1342.13,685.637 1342.69,685.637 1343.25,685.637 1343.81,685.637 1344.37,685.637 1344.93,685.637 1345.49,685.637 1346.05,685.637 1346.61,685.637 1347.17,685.637 1347.73,685.637 1348.29,685.637 1348.84,685.637 1349.4,685.637 1349.96,685.637 1350.52,685.637 1351.08,685.637 1351.64,685.637 1352.2,685.637 1352.76,685.637 1353.32,685.637 1353.88,685.637 1354.44,685.637 1355,685.637 1355.56,685.637 1356.12,685.637 1356.67,685.637 1357.23,685.637 1357.79,685.637 1358.35,685.637 1358.91,685.637 1359.47,685.637 1360.03,685.637 1360.59,685.637 1361.15,685.637 1361.71,685.637 1362.27,685.637 1362.83,685.637 1363.39,685.637 1363.94,685.637 1364.5,685.637 1365.06,685.637 1365.62,685.637 1366.18,685.637 1366.74,685.637 1367.3,685.637 1367.86,685.637 1368.42,685.637 1368.98,685.637 1369.54,685.637 1370.1,685.637 1370.66,685.637 1371.21,685.637 1371.77,685.637 1372.33,685.637 1372.89,685.637 1373.45,685.637 1374.01,685.637 1374.57,685.637 1375.13,685.637 1375.69,685.637 1376.25,685.637 1376.81,685.637 1377.37,685.637 1377.93,685.637 1378.49,685.637 1379.04,685.637 1379.6,685.637 1380.16,685.637 1380.72,685.637 1381.28,685.637 1381.84,685.637 1382.4,685.637 1382.96,685.637 1383.52,685.637 1384.08,685.637 1384.64,685.637 1385.2,685.637 1385.76,685.637 1386.31,685.637 1386.87,685.637 1387.43,685.637 1387.99,685.637 1388.55,685.637 1389.11,685.637 1389.67,685.637 1390.23,685.637 1390.79,685.637 1391.35,685.637 1391.91,685.637 1392.47,685.637 1393.03,685.637 1393.58,685.637 1394.14,685.637 1394.7,685.637 1395.26,685.637 1395.82,685.637 1396.38,685.637 1396.94,685.637 1397.5,685.637 1398.06,685.637 1398.62,685.637 1399.18,685.637 1399.74,685.637 1400.3,685.637 1400.86,685.637 1401.41,685.637 1401.97,685.637 1402.53,685.637 1403.09,685.637 1403.65,685.637 1404.21,685.637 1404.77,685.637 1405.33,685.637 1405.89,685.637 1406.45,685.637 1407.01,685.637 1407.57,685.637 1408.13,685.637 1408.68,685.637 1409.24,685.637 1409.8,685.637 1410.36,685.637 1410.92,685.637 1411.48,685.637 1412.04,685.637 1412.6,685.637 1413.16,685.637 1413.72,685.637 1414.28,685.637 1414.84,685.637 1415.4,685.637 1415.95,685.637 1416.51,685.637 1417.07,685.637 1417.63,685.637 1418.19,685.637 1418.75,685.637 1419.31,685.637 1419.87,685.637 1420.43,685.637 1420.99,685.637 1421.55,685.637 1422.11,685.637 1422.67,685.637 1423.23,685.637 1423.78,685.637 1424.34,685.637 1424.9,685.637 1425.46,685.637 1426.02,685.637 1426.58,685.637 1427.14,685.637 1427.7,685.637 1428.26,685.637 1428.82,685.637 1429.38,685.637 1429.94,685.637 1430.5,685.637 1431.05,685.637 1431.61,685.637 1432.17,685.637 1432.73,685.637 1433.29,685.637 1433.85,685.637 1434.41,685.637 1434.97,685.637 1435.53,685.637 1436.09,685.637 1436.65,685.637 1437.21,685.637 1437.77,685.637 1438.33,685.637 1438.88,685.637 1439.44,685.637 1440,685.637 1440.56,685.637 1441.12,685.637 1441.68,685.637 1442.24,685.637 1442.8,685.637 1443.36,685.637 1443.92,685.637 1444.48,685.637 1445.04,685.637 1445.6,685.637 1446.15,685.637 1446.71,685.637 1447.27,685.637 1447.83,685.637 1448.39,685.637 1448.95,685.637 1449.51,685.637 1450.07,685.637 1450.63,685.637 1451.19,685.637 1451.75,685.637 1452.31,685.637 1452.87,685.637 1453.42,685.637 1453.98,685.637 1454.54,685.637 1455.1,685.637 1455.66,685.637 1456.22,685.637 1456.78,685.637 1457.34,685.637 1457.9,685.637 1458.46,685.637 1459.02,685.637 1459.58,685.637 1460.14,685.637 1460.7,685.637 1461.25,685.637 1461.81,685.637 1462.37,685.637 1462.93,685.637 1463.49,685.637 1464.05,685.637 1464.61,685.637 1465.17,685.637 1465.73,685.637 1466.29,685.637 1466.85,685.637 1467.41,685.637 1467.97,685.637 1468.52,685.637 1469.08,685.637 1469.64,685.637 1470.2,685.637 1470.76,685.637 1471.32,685.637 1471.88,685.637 1472.44,685.637 1473,685.637 1473.56,685.637 1474.12,685.637 1474.68,685.637 1475.24,685.637 1475.79,685.637 1476.35,685.637 1476.91,685.637 1477.47,685.637 1478.03,685.637 1478.59,685.637 1479.15,685.637 1479.71,685.637 1480.27,685.637 1480.83,685.637 1481.39,685.637 1481.95,685.637 1482.51,685.637 1483.07,685.637 1483.62,685.637 1484.18,685.637 1484.74,685.637 1485.3,685.637 1485.86,685.637 1486.42,685.637 1486.98,685.637 1487.54,685.637 1488.1,685.637 1488.66,685.637 1489.22,685.637 1489.78,685.637 1490.34,685.637 1490.89,685.637 1491.45,685.637 1492.01,685.637 1492.57,685.637 1493.13,685.637 1493.69,685.637 1494.25,685.637 1494.81,685.637 1495.37,685.637 1495.93,685.637 1496.49,685.637 1497.05,685.637 1497.61,685.637 1498.16,685.637 1498.72,685.637 1499.28,685.637 1499.84,685.637 1500.4,685.637 1500.96,685.637 1501.52,685.637 1502.08,685.637 1502.64,685.637 1503.2,685.637 1503.76,685.637 1504.32,685.637 1504.88,685.637 1505.44,685.637 1505.99,685.637 1506.55,685.637 1507.11,685.637 1507.67,685.637 1508.23,685.637 1508.79,685.637 1509.35,685.637 1509.91,685.637 1510.47,685.637 1511.03,685.637 1511.59,685.637 1512.15,685.637 1512.71,685.637 1513.26,685.637 1513.82,685.637 1514.38,685.637 1514.94,685.637 1515.5,685.637 1516.06,685.637 1516.62,685.637 1517.18,685.637 1517.74,685.637 1518.3,685.637 1518.86,685.637 1519.42,685.637 1519.98,685.637 1520.53,685.637 1521.09,685.637 1521.65,685.637 1522.21,685.637 1522.77,685.637 1523.33,685.637 1523.89,685.637 1524.45,685.637 1525.01,685.637 1525.57,685.637 1526.13,685.637 1526.69,685.637 1527.25,685.637 1527.81,685.637 1528.36,685.637 1528.92,685.637 1529.48,685.637 1530.04,685.637 1530.6,685.637 1531.16,685.637 1531.72,685.637 1532.28,685.637 1532.84,685.637 1533.4,685.637 1533.96,685.637 1534.52,685.637 1535.08,685.637 1535.63,685.637 1536.19,685.637 1536.75,685.637 1537.31,685.637 1537.87,685.637 1538.43,685.637 1538.99,685.637 1539.55,685.637 1540.11,685.637 1540.67,685.637 1541.23,685.637 1541.79,685.637 1542.35,685.637 1542.9,685.637 1543.46,685.637 1544.02,685.637 1544.58,685.637 1545.14,685.637 1545.7,685.637 1546.26,685.637 1546.82,685.637 1547.38,685.637 1547.94,685.637 1548.5,685.637 1549.06,685.637 1549.62,685.637 1550.18,685.637 1550.73,685.637 1551.29,685.637 1551.85,685.637 1552.41,685.637 1552.97,685.637 1553.53,685.637 1554.09,685.637 1554.65,685.637 1555.21,685.637 1555.77,685.637 1556.33,685.637 1556.89,685.637 1557.45,685.637 1558,685.637 1558.56,685.637 1559.12,685.637 1559.68,685.637 1560.24,685.637 1560.8,685.637 1561.36,685.637 1561.92,685.637 1562.48,685.637 1563.04,685.637 1563.6,685.637 1564.16,685.637 1564.72,685.637 1565.28,685.637 1565.83,685.637 1566.39,685.637 1566.95,685.637 1567.51,685.637 1568.07,685.637 1568.63,685.637 1569.19,685.637 1569.75,685.637 1570.31,685.637 1570.87,685.637 1571.43,685.637 1571.99,685.637 1572.55,685.637 1573.1,685.637 1573.66,685.637 1574.22,685.637 1574.78,685.637 1575.34,685.637 1575.9,685.637 1576.46,685.637 1577.02,685.637 1577.58,685.637 1578.14,685.637 1578.7,685.637 1579.26,685.637 1579.82,685.637 1580.37,685.637 1580.93,685.637 1581.49,685.637 1582.05,685.637 1582.61,685.637 1583.17,685.637 1583.73,685.637 1584.29,685.637 1584.85,685.637 1585.41,685.637 1585.97,685.637 1586.53,685.637 1587.09,685.637 1587.65,685.637 1588.2,685.637 1588.76,685.637 1589.32,685.637 1589.88,685.637 1590.44,685.637 1591,685.637 1591.56,685.637 1592.12,685.637 1592.68,685.637 1593.24,685.637 1593.8,685.637 1594.36,685.637 1594.92,685.637 1595.47,685.637 1596.03,685.637 1596.59,685.637 1597.15,685.637 1597.71,685.637 1598.27,685.637 1598.83,685.637 1599.39,685.637 1599.95,685.637 1600.51,685.637 1601.07,685.637 1601.63,685.637 1602.19,685.637 1602.74,685.637 1603.3,685.637 1603.86,685.637 1604.42,685.637 1604.98,685.637 1605.54,685.637 1606.1,685.637 1606.66,685.637 1607.22,685.637 1607.78,685.637 1608.34,685.637 1608.9,685.637 1609.46,685.637 1610.02,685.637 1610.57,685.637 1611.13,685.637 1611.69,685.637 1612.25,685.637 1612.81,685.637 1613.37,685.637 1613.93,685.637 1614.49,685.637 1615.05,685.637 1615.61,685.637 1616.17,685.637 1616.73,685.637 1617.29,685.637 1617.84,685.637 1618.4,685.637 1618.96,685.637 1619.52,685.637 1620.08,685.637 1620.64,685.637 1621.2,685.637 1621.76,685.637 1622.32,685.637 1622.88,685.637 1623.44,685.637 1624,685.637 1624.56,685.637 1625.11,685.637 1625.67,685.637 1626.23,685.637 1626.79,685.637 1627.35,685.637 1627.91,685.637 1628.47,685.637 1629.03,685.637 1629.59,685.637 1630.15,685.637 1630.71,685.637 1631.27,685.637 1631.83,685.637 1632.39,685.637 1632.94,685.637 1633.5,685.637 1634.06,685.637 1634.62,685.637 1635.18,685.637 1635.74,685.637 1636.3,685.637 1636.86,685.637 1637.42,685.637 1637.98,685.637 1638.54,685.637 1639.1,685.637 1639.66,685.637 1640.21,685.637 1640.77,685.637 1641.33,685.637 1641.89,685.637 1642.45,685.637 1643.01,685.637 1643.57,685.637 1644.13,685.637 1644.69,685.637 1645.25,685.637 1645.81,685.637 1646.37,685.637 1646.93,685.637 1647.48,685.637 1648.04,685.637 1648.6,685.637 1649.16,685.637 1649.72,685.637 1650.28,685.637 1650.84,685.637 1651.4,685.637 1651.96,685.637 1652.52,685.637 1653.08,685.637 1653.64,685.637 1654.2,685.637 1654.76,685.637 1655.31,685.637 1655.87,685.637 1656.43,685.637 1656.99,685.637 1657.55,685.637 1658.11,685.637 1658.67,685.637 1659.23,685.637 1659.79,685.637 1660.35,685.637 1660.91,685.637 1661.47,685.637 1662.03,685.637 1662.58,685.637 1663.14,685.637 1663.7,685.637 1664.26,685.637 1664.82,685.637 1665.38,685.637 1665.94,685.637 1666.5,685.637 1667.06,685.637 1667.62,685.637 1668.18,685.637 1668.74,685.637 1669.3,685.637 1669.85,685.637 1670.41,685.637 1670.97,685.637 1671.53,685.637 1672.09,685.637 1672.65,685.637 1673.21,685.637 1673.77,685.637 1674.33,685.637 1674.89,685.637 1675.45,685.637 1676.01,685.637 1676.57,685.637 1677.13,685.637 1677.68,685.637 1678.24,685.637 1678.8,685.637 1679.36,685.637 1679.92,685.637 1680.48,685.637 1681.04,685.637 1681.6,685.637 1682.16,685.637 1682.72,685.637 1683.28,685.637 1683.84,685.637 1684.4,685.637 1684.95,685.637 1685.51,685.637 1686.07,685.637 1686.63,685.637 1687.19,685.637 1687.75,685.637 1688.31,685.637 1688.87,685.637 1689.43,685.637 1689.99,685.637 1690.55,685.637 1691.11,685.637 1691.67,685.637 1692.23,685.637 1692.78,685.637 1693.34,685.637 1693.9,685.637 1694.46,685.637 1695.02,685.637 1695.58,685.637 1696.14,685.637 1696.7,685.637 1697.26,685.637 1697.82,685.637 1698.38,685.637 1698.94,685.637 1699.5,685.637 1700.05,685.637 1700.61,685.637 1701.17,685.637 1701.73,685.637 1702.29,685.637 1702.85,685.637 1703.41,685.637 1703.97,685.637 1704.53,685.637 1705.09,685.637 1705.65,685.637 1706.21,685.637 1706.77,685.637 1707.32,685.637 1707.88,685.637 1708.44,685.637 1709,685.637 1709.56,685.637 1710.12,685.637 1710.68,685.637 1711.24,685.637 1711.8,685.637 1712.36,685.637 1712.92,685.637 1713.48,685.637 1714.04,685.637 1714.6,685.637 1715.15,685.637 1715.71,685.637 1716.27,685.637 1716.83,685.637 1717.39,685.637 1717.95,685.637 1718.51,685.637 1719.07,685.637 1719.63,685.637 1720.19,685.637 1720.75,685.637 1721.31,685.637 1721.87,685.637 1722.42,685.637 1722.98,685.637 1723.54,685.637 1724.1,685.637 1724.66,685.637 1725.22,685.637 1725.78,685.637 1726.34,685.637 1726.9,685.637 1727.46,685.637 1728.02,685.637 1728.58,685.637 1729.14,685.637 1729.69,685.637 1730.25,685.637 1730.81,685.637 1731.37,685.637 1731.93,685.637 1732.49,685.637 1733.05,685.637 1733.61,685.637 1734.17,685.637 1734.73,685.637 1735.29,685.637 1735.85,685.637 1736.41,685.637 1736.97,685.637 1737.52,685.637 1738.08,685.637 1738.64,685.637 1739.2,685.637 1739.76,685.637 1740.32,685.637 1740.88,685.637 1741.44,685.637 1742,685.637 1742.56,685.637 1743.12,685.637 1743.68,685.637 1744.24,685.637 1744.79,685.637 1745.35,685.637 1745.91,685.637 1746.47,685.637 1747.03,685.637 1747.59,685.637 1748.15,685.637 1748.71,685.637 1749.27,685.637 1749.83,685.637 1750.39,685.637 1750.95,685.637 1751.51,685.637 1752.06,685.637 1752.62,685.637 1753.18,685.637 1753.74,685.637 1754.3,685.637 1754.86,685.637 1755.42,685.637 1755.98,685.637 1756.54,685.637 1757.1,685.637 1757.66,685.637 1758.22,685.637 1758.78,685.637 1759.34,685.637 1759.89,685.637 1760.45,685.637 1761.01,685.637 1761.57,685.637 1762.13,685.637 1762.69,685.637 1763.25,685.637 1763.81,685.637 1764.37,685.637 1764.93,685.637 1765.49,685.637 1766.05,685.637 1766.61,685.637 1767.16,685.637 1767.72,685.637 1768.28,685.637 1768.84,685.637 1769.4,685.637 1769.96,685.637 1770.52,685.637 1771.08,685.637 1771.64,685.637 1772.2,685.637 1772.76,685.637 1773.32,685.637 1773.88,685.637 1774.43,685.637 1774.99,685.637 1775.55,685.637 1776.11,685.637 1776.67,685.637 1777.23,685.637 1777.79,685.637 1778.35,685.637 1778.91,685.637 1779.47,685.637 1780.03,685.637 1780.59,685.637 1781.15,685.637 1781.71,685.637 1782.26,685.637 1782.82,685.637 1783.38,685.637 1783.94,685.637 1784.5,685.637 1785.06,685.637 1785.62,685.637 1786.18,685.637 1786.74,685.637 1787.3,685.637 1787.86,685.637 1788.42,685.637 1788.98,685.637 1789.53,685.637 1790.09,685.637 1790.65,685.637 1791.21,685.637 1791.77,685.637 1792.33,685.637 1792.89,685.637 1793.45,685.637 1794.01,685.637 1794.57,685.637 1795.13,685.637 1795.69,685.637 1796.25,685.637 1796.8,685.637 1797.36,685.637 1797.92,685.637 1798.48,685.637 1799.04,685.637 1799.6,685.637 1800.16,685.637 1800.72,685.637 1801.28,685.637 1801.84,685.637 1802.4,685.637 1802.96,685.637 1803.52,685.637 1804.08,685.637 1804.63,685.637 1805.19,685.637 1805.75,685.637 1806.31,685.637 1806.87,685.637 1807.43,685.637 1807.99,685.637 1808.55,685.637 1809.11,685.637 1809.67,685.637 1810.23,685.637 1810.79,685.637 1811.35,685.637 1811.9,685.637 1812.46,685.637 1813.02,685.637 1813.58,685.637 1814.14,685.637 1814.7,685.637 1815.26,685.637 1815.82,685.637 1816.38,685.637 1816.94,685.637 1817.5,685.637 1818.06,685.637 1818.62,685.637 1819.18,685.637 1819.73,685.637 1820.29,685.637 1820.85,685.637 1821.41,685.637 1821.97,685.637 1822.53,685.637 1823.09,685.637 1823.65,685.637 1824.21,685.637 1824.77,685.637 1825.33,685.637 1825.89,685.637 1826.45,685.637 1827,685.637 1827.56,685.637 1828.12,685.637 1828.68,685.637 1829.24,685.637 1829.8,685.637 1830.36,685.637 1830.92,685.637 1831.48,685.637 1832.04,685.637 1832.6,685.637 1833.16,685.637 1833.72,685.637 1834.27,685.637 1834.83,685.637 1835.39,685.637 1835.95,685.637 1836.51,685.637 1837.07,685.637 1837.63,685.637 1838.19,685.637 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 683.475 L720.806 683.475 L721.365 683.475 L721.924 683.475 L722.484 683.475 L723.043 683.475 L723.602 683.475 L724.161 683.475 L724.721 683.475 L725.28 683.475 L725.839 683.475 L726.398 683.475 L726.958 683.475 L727.517 683.475 L728.076 683.475 L728.635 683.475 L729.195 683.475 L729.754 683.475 L730.313 683.475 L730.872 683.475 L731.432 683.475 L731.991 683.475 L732.55 683.475 L733.109 683.475 L733.669 683.475 L734.228 683.475 L734.787 683.475 L735.346 683.475 L735.906 683.475 L736.465 683.475 L737.024 683.475 L737.583 683.475 L738.143 683.475 L738.702 683.475 L739.261 683.475 L739.82 683.475 L740.38 683.475 L740.939 683.475 L741.498 683.475 L742.057 683.475 L742.617 683.475 L743.176 683.475 L743.735 683.475 L744.294 683.475 L744.854 683.475 L745.413 683.475 L745.972 683.475 L746.531 683.475 L747.091 683.475 L747.65 683.475 L748.209 683.475 L748.768 683.475 L749.328 683.475 L749.887 683.475 L750.446 683.475 L751.005 683.475 L751.565 683.475 L752.124 683.475 L752.683 683.475 L753.242 683.475 L753.802 683.475 L754.361 683.475 L754.92 683.475 L755.479 683.475 L756.039 683.475 L756.598 683.475 L757.157 683.475 L757.716 683.475 L758.276 683.475 L758.835 683.475 L759.394 683.475 L759.953 683.475 L760.513 683.475 L761.072 683.475 L761.631 683.475 L762.19 683.475 L762.75 683.475 L763.309 683.475 L763.868 683.475 L764.427 683.475 L764.987 683.475 L765.546 683.475 L766.105 683.475 L766.664 683.475 L767.224 683.475 L767.783 683.475 L768.342 683.475 L768.901 683.475 L769.461 683.475 L770.02 683.475 L770.579 683.475 L771.138 683.475 L771.698 683.475 L772.257 683.475 L772.816 683.475 L773.375 683.475 L773.935 683.475 L774.494 683.475 L775.053 683.475 L775.612 683.475 L776.172 683.475 L776.731 683.475 L777.29 683.475 L777.849 683.475 L778.409 683.475 L778.968 683.475 L779.527 683.475 L780.086 683.475 L780.646 683.475 L781.205 683.475 L781.764 683.475 L782.323 683.475 L782.883 683.475 L783.442 683.475 L784.001 683.475 L784.56 683.475 L785.12 683.475 L785.679 683.475 L786.238 683.475 L786.797 683.475 L787.357 683.475 L787.916 683.475 L788.475 683.475 L789.034 683.475 L789.594 683.475 L790.153 683.475 L790.712 683.475 L791.271 683.475 L791.831 683.475 L792.39 683.475 L792.949 683.475 L793.508 683.475 L794.068 683.475 L794.627 683.475 L795.186 683.475 L795.745 683.475 L796.305 683.475 L796.864 683.475 L797.423 683.475 L797.982 683.475 L798.542 683.475 L799.101 683.475 L799.66 683.475 L800.219 683.475 L800.779 683.475 L801.338 683.475 L801.897 683.475 L802.456 683.475 L803.016 683.475 L803.575 683.475 L804.134 683.475 L804.693 683.475 L805.253 683.475 L805.812 683.475 L806.371 683.475 L806.931 683.475 L807.49 683.475 L808.049 683.475 L808.608 683.475 L809.168 683.475 L809.727 683.475 L810.286 683.475 L810.845 683.475 L811.405 683.475 L811.964 683.475 L812.523 683.475 L813.082 683.475 L813.642 683.475 L814.201 683.475 L814.76 683.475 L815.319 683.475 L815.879 683.475 L816.438 683.475 L816.997 683.475 L817.556 683.475 L818.116 683.475 L818.675 683.475 L819.234 683.475 L819.793 683.475 L820.353 683.475 L820.912 683.475 L821.471 683.475 L822.03 683.475 L822.59 683.475 L823.149 683.475 L823.708 683.475 L824.267 683.475 L824.827 683.475 L825.386 683.475 L825.945 683.475 L826.504 683.475 L827.064 683.475 L827.623 683.475 L828.182 683.475 L828.741 683.475 L829.301 683.475 L829.86 683.475 L830.419 683.475 L830.978 683.475 L831.538 683.475 L832.097 683.475 L832.656 683.475 L833.215 683.475 L833.775 683.475 L834.334 683.475 L834.893 683.475 L835.452 683.475 L836.012 683.475 L836.571 683.475 L837.13 683.475 L837.689 683.475 L838.249 683.475 L838.808 683.475 L839.367 683.475 L839.926 683.475 L840.486 683.475 L841.045 683.475 L841.604 683.475 L842.163 683.475 L842.723 683.475 L843.282 683.475 L843.841 683.475 L844.4 683.475 L844.96 683.475 L845.519 683.475 L846.078 683.475 L846.637 683.475 L847.197 683.475 L847.756 683.475 L848.315 683.475 L848.874 683.475 L849.434 683.475 L849.993 683.475 L850.552 683.475 L851.111 683.475 L851.671 683.475 L852.23 683.475 L852.789 683.475 L853.348 683.475 L853.908 683.475 L854.467 683.475 L855.026 683.475 L855.585 683.475 L856.145 683.475 L856.704 683.475 L857.263 683.475 L857.822 683.475 L858.382 683.475 L858.941 683.475 L859.5 683.475 L860.059 683.475 L860.619 683.475 L861.178 683.475 L861.737 683.475 L862.296 683.475 L862.856 683.475 L863.415 683.475 L863.974 683.475 L864.533 683.475 L865.093 683.475 L865.652 683.475 L866.211 683.475 L866.77 683.475 L867.33 683.475 L867.889 683.475 L868.448 683.475 L869.007 683.475 L869.567 683.475 L870.126 683.475 L870.685 683.475 L871.244 683.475 L871.804 683.475 L872.363 683.475 L872.922 683.475 L873.481 683.475 L874.041 683.475 L874.6 683.475 L875.159 683.475 L875.718 683.475 L876.278 683.475 L876.837 683.475 L877.396 683.475 L877.955 683.475 L878.515 683.475 L879.074 683.475 L879.633 683.475 L880.192 683.475 L880.752 683.475 L881.311 683.475 L881.87 683.475 L882.429 683.475 L882.989 683.475 L883.548 683.475 L884.107 683.475 L884.666 683.475 L885.226 683.475 L885.785 683.475 L886.344 683.475 L886.903 683.475 L887.463 683.475 L888.022 683.475 L888.581 683.475 L889.14 683.475 L889.7 683.475 L890.259 683.475 L890.818 683.475 L891.377 683.475 L891.937 683.475 L892.496 683.475 L893.055 683.475 L893.614 683.475 L894.174 683.475 L894.733 683.475 L895.292 683.475 L895.851 683.475 L896.411 683.475 L896.97 683.475 L897.529 683.475 L898.088 683.475 L898.648 683.475 L899.207 683.475 L899.766 683.475 L900.325 683.475 L900.885 683.475 L901.444 683.475 L902.003 683.475 L902.562 683.475 L903.122 683.475 L903.681 683.475 L904.24 683.475 L904.799 683.475 L905.359 683.475 L905.918 683.475 L906.477 683.475 L907.036 683.475 L907.596 683.475 L908.155 683.475 L908.714 683.475 L909.273 683.475 L909.833 683.475 L910.392 683.475 L910.951 683.475 L911.51 683.475 L912.07 683.475 L912.629 683.475 L913.188 683.475 L913.747 683.475 L914.307 683.475 L914.866 683.475 L915.425 683.475 L915.984 683.475 L916.544 683.475 L917.103 683.475 L917.662 683.475 L918.221 683.475 L918.781 683.475 L919.34 683.475 L919.899 683.475 L920.458 683.475 L921.018 683.475 L921.577 683.475 L922.136 683.475 L922.695 683.475 L923.255 683.475 L923.814 683.475 L924.373 683.475 L924.932 683.475 L925.492 683.475 L926.051 683.475 L926.61 683.475 L927.169 683.475 L927.729 683.475 L928.288 683.475 L928.847 683.475 L929.406 683.475 L929.966 683.475 L930.525 683.475 L931.084 683.475 L931.644 683.475 L932.203 683.475 L932.762 683.475 L933.321 683.475 L933.881 683.475 L934.44 683.475 L934.999 683.475 L935.558 683.475 L936.118 683.475 L936.677 683.475 L937.236 683.475 L937.795 683.475 L938.355 683.475 L938.914 683.475 L939.473 683.475 L940.032 683.475 L940.592 683.475 L941.151 683.475 L941.71 683.475 L942.269 683.475 L942.829 683.475 L943.388 683.475 L943.947 683.475 L944.506 683.475 L945.066 683.475 L945.625 683.475 L946.184 683.475 L946.743 683.475 L947.303 683.475 L947.862 683.475 L948.421 683.475 L948.98 683.475 L949.54 683.475 L950.099 683.475 L950.658 683.475 L951.217 683.475 L951.777 683.475 L952.336 683.475 L952.895 683.475 L953.454 683.475 L954.014 683.475 L954.573 683.475 L955.132 683.475 L955.691 683.475 L956.251 683.475 L956.81 683.475 L957.369 683.475 L957.928 683.475 L958.488 683.475 L959.047 683.475 L959.606 683.475 L960.165 683.475 L960.725 683.475 L961.284 683.475 L961.843 683.475 L962.402 683.475 L962.962 683.475 L963.521 683.475 L964.08 683.475 L964.639 683.475 L965.199 683.475 L965.758 683.475 L966.317 683.475 L966.876 683.475 L967.436 683.475 L967.995 683.475 L968.554 683.475 L969.113 683.475 L969.673 683.475 L970.232 683.475 L970.791 683.475 L971.35 683.475 L971.91 683.475 L972.469 683.475 L973.028 683.475 L973.587 683.475 L974.147 683.475 L974.706 683.475 L975.265 683.475 L975.824 683.475 L976.384 683.475 L976.943 683.475 L977.502 683.475 L978.061 683.475 L978.621 683.475 L979.18 683.475 L979.739 683.475 L980.298 683.475 L980.858 683.475 L981.417 683.475 L981.976 683.475 L982.535 683.475 L983.095 683.475 L983.654 683.475 L984.213 683.475 L984.772 683.475 L985.332 683.475 L985.891 683.475 L986.45 683.475 L987.009 683.475 L987.569 683.475 L988.128 683.475 L988.687 683.475 L989.246 683.475 L989.806 683.475 L990.365 683.475 L990.924 683.475 L991.483 683.475 L992.043 683.475 L992.602 683.475 L993.161 683.475 L993.72 683.475 L994.28 683.475 L994.839 683.475 L995.398 683.475 L995.957 683.475 L996.517 683.475 L997.076 683.475 L997.635 683.475 L998.194 683.475 L998.754 683.475 L999.313 683.475 L999.872 683.475 L1000.43 683.475 L1000.99 683.475 L1001.55 683.475 L1002.11 683.475 L1002.67 683.475 L1003.23 683.475 L1003.79 683.475 L1004.35 683.475 L1004.91 683.475 L1005.46 683.475 L1006.02 683.475 L1006.58 683.475 L1007.14 683.475 L1007.7 683.475 L1008.26 683.475 L1008.82 683.475 L1009.38 683.475 L1009.94 683.475 L1010.5 683.475 L1011.06 683.475 L1011.62 683.475 L1012.18 683.475 L1012.73 683.475 L1013.29 683.475 L1013.85 683.475 L1014.41 683.475 L1014.97 683.475 L1015.53 683.475 L1016.09 683.475 L1016.65 683.475 L1017.21 683.475 L1017.77 683.475 L1018.33 683.475 L1018.89 683.475 L1019.45 683.475 L1020.01 683.475 L1020.56 683.475 L1021.12 683.475 L1021.68 683.475 L1022.24 683.475 L1022.8 683.475 L1023.36 683.475 L1023.92 683.475 L1024.48 683.475 L1025.04 683.475 L1025.6 683.475 L1026.16 683.475 L1026.72 683.475 L1027.28 683.475 L1027.83 683.475 L1028.39 683.475 L1028.95 683.475 L1029.51 683.475 L1030.07 683.475 L1030.63 683.475 L1031.19 683.475 L1031.75 683.475 L1032.31 683.475 L1032.87 683.475 L1033.43 683.475 L1033.99 683.475 L1034.55 683.475 L1035.1 683.475 L1035.66 683.475 L1036.22 683.475 L1036.78 683.475 L1037.34 683.475 L1037.9 683.475 L1038.46 683.475 L1039.02 683.475 L1039.58 683.475 L1040.14 683.475 L1040.7 683.475 L1041.26 683.475 L1041.82 683.475 L1042.38 683.475 L1042.93 683.475 L1043.49 683.475 L1044.05 683.475 L1044.61 683.475 L1045.17 683.475 L1045.73 683.475 L1046.29 683.475 L1046.85 683.475 L1047.41 683.475 L1047.97 683.475 L1048.53 683.475 L1049.09 683.475 L1049.65 683.475 L1050.2 683.475 L1050.76 683.475 L1051.32 683.475 L1051.88 683.475 L1052.44 683.475 L1053 683.475 L1053.56 683.475 L1054.12 683.475 L1054.68 683.475 L1055.24 683.475 L1055.8 683.475 L1056.36 683.475 L1056.92 683.475 L1057.48 683.475 L1058.03 683.475 L1058.59 683.475 L1059.15 683.475 L1059.71 683.475 L1060.27 683.475 L1060.83 683.475 L1061.39 683.475 L1061.95 683.475 L1062.51 683.475 L1063.07 683.475 L1063.63 683.475 L1064.19 683.475 L1064.75 683.475 L1065.3 683.475 L1065.86 683.475 L1066.42 683.475 L1066.98 683.475 L1067.54 683.475 L1068.1 683.475 L1068.66 683.475 L1069.22 683.475 L1069.78 683.475 L1070.34 683.475 L1070.9 683.475 L1071.46 683.475 L1072.02 683.475 L1072.57 683.475 L1073.13 683.475 L1073.69 683.475 L1074.25 683.475 L1074.81 683.475 L1075.37 683.475 L1075.93 683.475 L1076.49 683.475 L1077.05 683.475 L1077.61 683.475 L1078.17 683.475 L1078.73 683.475 L1079.29 683.475 L1079.85 683.475 L1080.4 683.475 L1080.96 683.475 L1081.52 683.475 L1082.08 683.475 L1082.64 683.475 L1083.2 683.475 L1083.76 683.475 L1084.32 683.475 L1084.88 683.475 L1085.44 683.475 L1086 683.475 L1086.56 683.475 L1087.12 683.475 L1087.67 683.475 L1088.23 683.475 L1088.79 683.475 L1089.35 683.475 L1089.91 683.475 L1090.47 683.475 L1091.03 683.475 L1091.59 683.475 L1092.15 683.475 L1092.71 683.475 L1093.27 683.475 L1093.83 683.475 L1094.39 683.475 L1094.94 683.475 L1095.5 683.475 L1096.06 683.475 L1096.62 683.475 L1097.18 683.475 L1097.74 683.475 L1098.3 683.475 L1098.86 683.475 L1099.42 683.475 L1099.98 683.475 L1100.54 683.475 L1101.1 683.475 L1101.66 683.475 L1102.22 683.475 L1102.77 683.475 L1103.33 683.475 L1103.89 683.475 L1104.45 683.475 L1105.01 683.475 L1105.57 683.475 L1106.13 683.475 L1106.69 683.475 L1107.25 683.475 L1107.81 683.475 L1108.37 683.475 L1108.93 683.475 L1109.49 683.475 L1110.04 683.475 L1110.6 683.475 L1111.16 683.475 L1111.72 683.475 L1112.28 683.475 L1112.84 683.475 L1113.4 683.475 L1113.96 683.475 L1114.52 683.475 L1115.08 683.475 L1115.64 683.475 L1116.2 683.475 L1116.76 683.475 L1117.31 683.475 L1117.87 683.475 L1118.43 683.475 L1118.99 683.475 L1119.55 683.475 L1120.11 683.475 L1120.67 683.475 L1121.23 683.475 L1121.79 683.475 L1122.35 683.475 L1122.91 683.475 L1123.47 683.475 L1124.03 683.475 L1124.59 683.475 L1125.14 683.475 L1125.7 683.475 L1126.26 683.475 L1126.82 683.475 L1127.38 683.475 L1127.94 683.475 L1128.5 683.475 L1129.06 683.475 L1129.62 683.475 L1130.18 683.475 L1130.74 683.475 L1131.3 683.475 L1131.86 683.475 L1132.41 683.475 L1132.97 683.475 L1133.53 683.475 L1134.09 683.475 L1134.65 683.475 L1135.21 683.475 L1135.77 683.475 L1136.33 683.475 L1136.89 683.475 L1137.45 683.475 L1138.01 683.475 L1138.57 683.475 L1139.13 683.475 L1139.68 683.475 L1140.24 683.475 L1140.8 683.475 L1141.36 683.475 L1141.92 683.475 L1142.48 683.475 L1143.04 683.475 L1143.6 683.475 L1144.16 683.475 L1144.72 683.475 L1145.28 683.475 L1145.84 683.475 L1146.4 683.475 L1146.96 683.475 L1147.51 683.475 L1148.07 683.475 L1148.63 683.475 L1149.19 683.475 L1149.75 683.475 L1150.31 683.475 L1150.87 683.475 L1151.43 683.475 L1151.99 683.475 L1152.55 683.475 L1153.11 683.475 L1153.67 683.475 L1154.23 683.475 L1154.78 683.475 L1155.34 683.475 L1155.9 683.475 L1156.46 683.475 L1157.02 683.475 L1157.58 683.475 L1158.14 683.475 L1158.7 683.475 L1159.26 683.475 L1159.82 683.475 L1160.38 683.475 L1160.94 683.475 L1161.5 683.475 L1162.05 683.475 L1162.61 683.475 L1163.17 683.475 L1163.73 683.475 L1164.29 683.475 L1164.85 683.475 L1165.41 683.475 L1165.97 683.475 L1166.53 683.475 L1167.09 683.475 L1167.65 683.475 L1168.21 683.475 L1168.77 683.475 L1169.33 683.475 L1169.88 683.475 L1170.44 683.475 L1171 683.475 L1171.56 683.475 L1172.12 683.475 L1172.68 683.475 L1173.24 683.475 L1173.8 683.475 L1174.36 683.475 L1174.92 683.475 L1175.48 683.475 L1176.04 683.475 L1176.6 683.475 L1177.15 683.475 L1177.71 683.475 L1178.27 683.475 L1178.83 683.475 L1179.39 683.475 L1179.95 683.475 L1180.51 683.475 L1181.07 683.475 L1181.63 683.475 L1182.19 683.475 L1182.75 683.475 L1183.31 683.475 L1183.87 683.475 L1184.43 683.475 L1184.98 683.475 L1185.54 683.475 L1186.1 683.475 L1186.66 683.475 L1187.22 683.475 L1187.78 683.475 L1188.34 683.475 L1188.9 683.475 L1189.46 683.475 L1190.02 683.475 L1190.58 683.475 L1191.14 683.475 L1191.7 683.475 L1192.25 683.475 L1192.81 683.475 L1193.37 683.475 L1193.93 683.475 L1194.49 683.475 L1195.05 683.475 L1195.61 683.475 L1196.17 683.475 L1196.73 683.475 L1197.29 683.475 L1197.85 683.475 L1198.41 683.475 L1198.97 683.475 L1199.52 683.475 L1200.08 683.475 L1200.64 683.475 L1201.2 683.475 L1201.76 683.475 L1202.32 683.475 L1202.88 683.475 L1203.44 683.475 L1204 683.475 L1204.56 683.475 L1205.12 683.475 L1205.68 683.475 L1206.24 683.475 L1206.8 683.475 L1207.35 683.475 L1207.91 683.475 L1208.47 683.475 L1209.03 683.475 L1209.59 683.475 L1210.15 683.475 L1210.71 683.475 L1211.27 683.475 L1211.83 683.475 L1212.39 683.475 L1212.95 683.475 L1213.51 683.475 L1214.07 683.475 L1214.62 683.475 L1215.18 683.475 L1215.74 683.475 L1216.3 683.475 L1216.86 683.475 L1217.42 683.475 L1217.98 683.475 L1218.54 683.475 L1219.1 683.475 L1219.66 683.475 L1220.22 683.475 L1220.78 683.475 L1221.34 683.475 L1221.89 683.475 L1222.45 683.475 L1223.01 683.475 L1223.57 683.475 L1224.13 683.475 L1224.69 683.475 L1225.25 683.475 L1225.81 683.475 L1226.37 683.475 L1226.93 683.475 L1227.49 683.475 L1228.05 683.475 L1228.61 683.475 L1229.17 683.475 L1229.72 683.475 L1230.28 683.475 L1230.84 683.475 L1231.4 683.475 L1231.96 683.475 L1232.52 683.475 L1233.08 683.475 L1233.64 683.475 L1234.2 683.475 L1234.76 683.475 L1235.32 683.475 L1235.88 683.475 L1236.44 683.475 L1236.99 683.475 L1237.55 683.475 L1238.11 683.475 L1238.67 683.475 L1239.23 683.475 L1239.79 683.475 L1240.35 683.475 L1240.91 683.475 L1241.47 683.475 L1242.03 683.475 L1242.59 683.475 L1243.15 683.475 L1243.71 683.475 L1244.26 683.475 L1244.82 683.475 L1245.38 683.475 L1245.94 683.475 L1246.5 683.475 L1247.06 683.475 L1247.62 683.475 L1248.18 683.475 L1248.74 683.475 L1249.3 683.475 L1249.86 683.475 L1250.42 683.475 L1250.98 683.475 L1251.54 683.475 L1252.09 683.475 L1252.65 683.475 L1253.21 683.475 L1253.77 683.475 L1254.33 683.475 L1254.89 683.475 L1255.45 683.475 L1256.01 683.475 L1256.57 683.475 L1257.13 683.475 L1257.69 683.475 L1258.25 683.475 L1258.81 683.475 L1259.36 683.475 L1259.92 683.475 L1260.48 683.475 L1261.04 683.475 L1261.6 683.475 L1262.16 683.475 L1262.72 683.475 L1263.28 683.475 L1263.84 683.475 L1264.4 683.475 L1264.96 683.475 L1265.52 683.475 L1266.08 683.475 L1266.63 683.475 L1267.19 683.475 L1267.75 683.475 L1268.31 683.475 L1268.87 683.475 L1269.43 683.475 L1269.99 683.475 L1270.55 683.475 L1271.11 683.475 L1271.67 683.475 L1272.23 683.475 L1272.79 683.475 L1273.35 683.475 L1273.91 683.475 L1274.46 683.475 L1275.02 683.475 L1275.58 683.475 L1276.14 683.475 L1276.7 683.475 L1277.26 683.475 L1277.82 683.475 L1278.38 683.475 L1278.94 683.475 L1279.5 683.475 L1280.06 683.475 L1280.62 683.475 L1281.18 683.475 L1281.73 683.475 L1282.29 683.475 L1282.85 683.475 L1283.41 683.475 L1283.97 683.475 L1284.53 683.475 L1285.09 683.475 L1285.65 683.475 L1286.21 683.475 L1286.77 683.475 L1287.33 683.475 L1287.89 683.475 L1288.45 683.475 L1289 683.475 L1289.56 683.475 L1290.12 683.475 L1290.68 683.475 L1291.24 683.475 L1291.8 683.475 L1292.36 683.475 L1292.92 683.475 L1293.48 683.475 L1294.04 683.475 L1294.6 683.475 L1295.16 683.475 L1295.72 683.475 L1296.28 683.475 L1296.83 683.475 L1297.39 683.475 L1297.95 683.475 L1298.51 683.475 L1299.07 683.475 L1299.63 683.475 L1300.19 683.475 L1300.75 683.475 L1301.31 683.475 L1301.87 683.475 L1302.43 683.475 L1302.99 683.475 L1303.55 683.475 L1304.1 683.475 L1304.66 683.475 L1305.22 683.475 L1305.78 683.475 L1306.34 683.475 L1306.9 683.475 L1307.46 683.475 L1308.02 683.475 L1308.58 683.475 L1309.14 683.475 L1309.7 683.475 L1310.26 683.475 L1310.82 683.475 L1311.38 683.475 L1311.93 683.475 L1312.49 683.475 L1313.05 683.475 L1313.61 683.475 L1314.17 683.475 L1314.73 683.475 L1315.29 683.475 L1315.85 683.475 L1316.41 683.475 L1316.97 683.475 L1317.53 683.475 L1318.09 683.475 L1318.65 683.475 L1319.2 683.475 L1319.76 683.475 L1320.32 683.475 L1320.88 683.475 L1321.44 683.475 L1322 683.475 L1322.56 683.475 L1323.12 683.475 L1323.68 683.475 L1324.24 683.475 L1324.8 683.475 L1325.36 683.475 L1325.92 683.475 L1326.47 683.475 L1327.03 683.475 L1327.59 683.475 L1328.15 683.475 L1328.71 683.475 L1329.27 683.475 L1329.83 683.475 L1330.39 683.475 L1330.95 683.475 L1331.51 683.475 L1332.07 683.475 L1332.63 683.475 L1333.19 683.475 L1333.75 683.475 L1334.3 683.475 L1334.86 683.475 L1335.42 683.475 L1335.98 683.475 L1336.54 683.475 L1337.1 683.475 L1337.66 683.475 L1338.22 683.475 L1338.78 683.475 L1339.34 683.475 L1339.9 683.475 L1340.46 683.475 L1341.02 683.475 L1341.57 683.475 L1342.13 683.475 L1342.69 683.475 L1343.25 683.475 L1343.81 683.475 L1344.37 683.475 L1344.93 683.475 L1345.49 683.475 L1346.05 683.475 L1346.61 683.475 L1347.17 683.475 L1347.73 683.475 L1348.29 683.475 L1348.84 683.475 L1349.4 683.475 L1349.96 683.475 L1350.52 683.475 L1351.08 683.475 L1351.64 683.475 L1352.2 683.475 L1352.76 683.475 L1353.32 683.475 L1353.88 683.475 L1354.44 683.475 L1355 683.475 L1355.56 683.475 L1356.12 683.475 L1356.67 683.475 L1357.23 683.475 L1357.79 683.475 L1358.35 683.475 L1358.91 683.475 L1359.47 683.475 L1360.03 683.475 L1360.59 683.475 L1361.15 683.475 L1361.71 683.475 L1362.27 683.475 L1362.83 683.475 L1363.39 683.475 L1363.94 683.475 L1364.5 683.475 L1365.06 683.475 L1365.62 683.475 L1366.18 683.475 L1366.74 683.475 L1367.3 683.475 L1367.86 683.475 L1368.42 683.475 L1368.98 683.475 L1369.54 683.475 L1370.1 683.475 L1370.66 683.475 L1371.21 683.475 L1371.77 683.475 L1372.33 683.475 L1372.89 683.475 L1373.45 683.475 L1374.01 683.475 L1374.57 683.475 L1375.13 683.475 L1375.69 683.475 L1376.25 683.475 L1376.81 683.475 L1377.37 683.475 L1377.93 683.475 L1378.49 683.475 L1379.04 683.475 L1379.6 683.475 L1380.16 683.475 L1380.72 683.475 L1381.28 683.475 L1381.84 683.475 L1382.4 683.475 L1382.96 683.475 L1383.52 683.475 L1384.08 683.475 L1384.64 683.475 L1385.2 683.475 L1385.76 683.475 L1386.31 683.475 L1386.87 683.475 L1387.43 683.475 L1387.99 683.475 L1388.55 683.475 L1389.11 683.475 L1389.67 683.475 L1390.23 683.475 L1390.79 683.475 L1391.35 683.475 L1391.91 683.475 L1392.47 683.475 L1393.03 683.475 L1393.58 683.475 L1394.14 683.475 L1394.7 683.475 L1395.26 683.475 L1395.82 683.475 L1396.38 683.475 L1396.94 683.475 L1397.5 683.475 L1398.06 683.475 L1398.62 683.475 L1399.18 683.475 L1399.74 683.475 L1400.3 683.475 L1400.86 683.475 L1401.41 683.475 L1401.97 683.475 L1402.53 683.475 L1403.09 683.475 L1403.65 683.475 L1404.21 683.475 L1404.77 683.475 L1405.33 683.475 L1405.89 683.475 L1406.45 683.475 L1407.01 683.475 L1407.57 683.475 L1408.13 683.475 L1408.68 683.475 L1409.24 683.475 L1409.8 683.475 L1410.36 683.475 L1410.92 683.475 L1411.48 683.475 L1412.04 683.475 L1412.6 683.475 L1413.16 683.475 L1413.72 683.475 L1414.28 683.475 L1414.84 683.475 L1415.4 683.475 L1415.95 683.475 L1416.51 683.475 L1417.07 683.475 L1417.63 683.475 L1418.19 683.475 L1418.75 683.475 L1419.31 683.475 L1419.87 683.475 L1420.43 683.475 L1420.99 683.475 L1421.55 683.475 L1422.11 683.475 L1422.67 683.475 L1423.23 683.475 L1423.78 683.475 L1424.34 683.475 L1424.9 683.475 L1425.46 683.475 L1426.02 683.475 L1426.58 683.475 L1427.14 683.475 L1427.7 683.475 L1428.26 683.475 L1428.82 683.475 L1429.38 683.475 L1429.94 683.475 L1430.5 683.475 L1431.05 683.475 L1431.61 683.475 L1432.17 683.475 L1432.73 683.475 L1433.29 683.475 L1433.85 683.475 L1434.41 683.475 L1434.97 683.475 L1435.53 683.475 L1436.09 683.475 L1436.65 683.475 L1437.21 683.475 L1437.77 683.475 L1438.33 683.475 L1438.88 683.475 L1439.44 683.475 L1440 683.475 L1440.56 683.475 L1441.12 683.475 L1441.68 683.475 L1442.24 683.475 L1442.8 683.475 L1443.36 683.475 L1443.92 683.475 L1444.48 683.475 L1445.04 683.475 L1445.6 683.475 L1446.15 683.475 L1446.71 683.475 L1447.27 683.475 L1447.83 683.475 L1448.39 683.475 L1448.95 683.475 L1449.51 683.475 L1450.07 683.475 L1450.63 683.475 L1451.19 683.475 L1451.75 683.475 L1452.31 683.475 L1452.87 683.475 L1453.42 683.475 L1453.98 683.475 L1454.54 683.475 L1455.1 683.475 L1455.66 683.475 L1456.22 683.475 L1456.78 683.475 L1457.34 683.475 L1457.9 683.475 L1458.46 683.475 L1459.02 683.475 L1459.58 683.475 L1460.14 683.475 L1460.7 683.475 L1461.25 683.475 L1461.81 683.475 L1462.37 683.475 L1462.93 683.475 L1463.49 683.475 L1464.05 683.475 L1464.61 683.475 L1465.17 683.475 L1465.73 683.475 L1466.29 683.475 L1466.85 683.475 L1467.41 683.475 L1467.97 683.475 L1468.52 683.475 L1469.08 683.475 L1469.64 683.475 L1470.2 683.475 L1470.76 683.475 L1471.32 683.475 L1471.88 683.475 L1472.44 683.475 L1473 683.475 L1473.56 683.475 L1474.12 683.475 L1474.68 683.475 L1475.24 683.475 L1475.79 683.475 L1476.35 683.475 L1476.91 683.475 L1477.47 683.475 L1478.03 683.475 L1478.59 683.475 L1479.15 683.475 L1479.71 683.475 L1480.27 683.475 L1480.83 683.475 L1481.39 683.475 L1481.95 683.475 L1482.51 683.475 L1483.07 683.475 L1483.62 683.475 L1484.18 683.475 L1484.74 683.475 L1485.3 683.475 L1485.86 683.475 L1486.42 683.475 L1486.98 683.475 L1487.54 683.475 L1488.1 683.475 L1488.66 683.475 L1489.22 683.475 L1489.78 683.475 L1490.34 683.475 L1490.89 683.475 L1491.45 683.475 L1492.01 683.475 L1492.57 683.475 L1493.13 683.475 L1493.69 683.475 L1494.25 683.475 L1494.81 683.475 L1495.37 683.475 L1495.93 683.475 L1496.49 683.475 L1497.05 683.475 L1497.61 683.475 L1498.16 683.475 L1498.72 683.475 L1499.28 683.475 L1499.84 683.475 L1500.4 683.475 L1500.96 683.475 L1501.52 683.475 L1502.08 683.475 L1502.64 683.475 L1503.2 683.475 L1503.76 683.475 L1504.32 683.475 L1504.88 683.475 L1505.44 683.475 L1505.99 683.475 L1506.55 683.475 L1507.11 683.475 L1507.67 683.475 L1508.23 683.475 L1508.79 683.475 L1509.35 683.475 L1509.91 683.475 L1510.47 683.475 L1511.03 683.475 L1511.59 683.475 L1512.15 683.475 L1512.71 683.475 L1513.26 683.475 L1513.82 683.475 L1514.38 683.475 L1514.94 683.475 L1515.5 683.475 L1516.06 683.475 L1516.62 683.475 L1517.18 683.475 L1517.74 683.475 L1518.3 683.475 L1518.86 683.475 L1519.42 683.475 L1519.98 683.475 L1520.53 683.475 L1521.09 683.475 L1521.65 683.475 L1522.21 683.475 L1522.77 683.475 L1523.33 683.475 L1523.89 683.475 L1524.45 683.475 L1525.01 683.475 L1525.57 683.475 L1526.13 683.475 L1526.69 683.475 L1527.25 683.475 L1527.81 683.475 L1528.36 683.475 L1528.92 683.475 L1529.48 683.475 L1530.04 683.475 L1530.6 683.475 L1531.16 683.475 L1531.72 683.475 L1532.28 683.475 L1532.84 683.475 L1533.4 683.475 L1533.96 683.475 L1534.52 683.475 L1535.08 683.475 L1535.63 683.475 L1536.19 683.475 L1536.75 683.475 L1537.31 683.475 L1537.87 683.475 L1538.43 683.475 L1538.99 683.475 L1539.55 683.475 L1540.11 683.475 L1540.67 683.475 L1541.23 683.475 L1541.79 683.475 L1542.35 683.475 L1542.9 683.475 L1543.46 683.475 L1544.02 683.475 L1544.58 683.475 L1545.14 683.475 L1545.7 683.475 L1546.26 683.475 L1546.82 683.475 L1547.38 683.475 L1547.94 683.475 L1548.5 683.475 L1549.06 683.475 L1549.62 683.475 L1550.18 683.475 L1550.73 683.475 L1551.29 683.475 L1551.85 683.475 L1552.41 683.475 L1552.97 683.475 L1553.53 683.475 L1554.09 683.475 L1554.65 683.475 L1555.21 683.475 L1555.77 683.475 L1556.33 683.475 L1556.89 683.475 L1557.45 683.475 L1558 683.475 L1558.56 683.475 L1559.12 683.475 L1559.68 683.475 L1560.24 683.475 L1560.8 683.475 L1561.36 683.475 L1561.92 683.475 L1562.48 683.475 L1563.04 683.475 L1563.6 683.475 L1564.16 683.475 L1564.72 683.475 L1565.28 683.475 L1565.83 683.475 L1566.39 683.475 L1566.95 683.475 L1567.51 683.475 L1568.07 683.475 L1568.63 683.475 L1569.19 683.475 L1569.75 683.475 L1570.31 683.475 L1570.87 683.475 L1571.43 683.475 L1571.99 683.475 L1572.55 683.475 L1573.1 683.475 L1573.66 683.475 L1574.22 683.475 L1574.78 683.475 L1575.34 683.475 L1575.9 683.475 L1576.46 683.475 L1577.02 683.475 L1577.58 683.475 L1578.14 683.475 L1578.7 683.475 L1579.26 683.475 L1579.82 683.475 L1580.37 683.475 L1580.93 683.475 L1581.49 683.475 L1582.05 683.475 L1582.61 683.475 L1583.17 683.475 L1583.73 683.475 L1584.29 683.475 L1584.85 683.475 L1585.41 683.475 L1585.97 683.475 L1586.53 683.475 L1587.09 683.475 L1587.65 683.475 L1588.2 683.475 L1588.76 683.475 L1589.32 683.475 L1589.88 683.475 L1590.44 683.475 L1591 683.475 L1591.56 683.475 L1592.12 683.475 L1592.68 683.475 L1593.24 683.475 L1593.8 683.475 L1594.36 683.475 L1594.92 683.475 L1595.47 683.475 L1596.03 683.475 L1596.59 683.475 L1597.15 683.475 L1597.71 683.475 L1598.27 683.475 L1598.83 683.475 L1599.39 683.475 L1599.95 683.475 L1600.51 683.475 L1601.07 683.475 L1601.63 683.475 L1602.19 683.475 L1602.74 683.475 L1603.3 683.475 L1603.86 683.475 L1604.42 683.475 L1604.98 683.475 L1605.54 683.475 L1606.1 683.475 L1606.66 683.475 L1607.22 683.475 L1607.78 683.475 L1608.34 683.475 L1608.9 683.475 L1609.46 683.475 L1610.02 683.475 L1610.57 683.475 L1611.13 683.475 L1611.69 683.475 L1612.25 683.475 L1612.81 683.475 L1613.37 683.475 L1613.93 683.475 L1614.49 683.475 L1615.05 683.475 L1615.61 683.475 L1616.17 683.475 L1616.73 683.475 L1617.29 683.475 L1617.84 683.475 L1618.4 683.475 L1618.96 683.475 L1619.52 683.475 L1620.08 683.475 L1620.64 683.475 L1621.2 683.475 L1621.76 683.475 L1622.32 683.475 L1622.88 683.475 L1623.44 683.475 L1624 683.475 L1624.56 683.475 L1625.11 683.475 L1625.67 683.475 L1626.23 683.475 L1626.79 683.475 L1627.35 683.475 L1627.91 683.475 L1628.47 683.475 L1629.03 683.475 L1629.59 683.475 L1630.15 683.475 L1630.71 683.475 L1631.27 683.475 L1631.83 683.475 L1632.39 683.475 L1632.94 683.475 L1633.5 683.475 L1634.06 683.475 L1634.62 683.475 L1635.18 683.475 L1635.74 683.475 L1636.3 683.475 L1636.86 683.475 L1637.42 683.475 L1637.98 683.475 L1638.54 683.475 L1639.1 683.475 L1639.66 683.475 L1640.21 683.475 L1640.77 683.475 L1641.33 683.475 L1641.89 683.475 L1642.45 683.475 L1643.01 683.475 L1643.57 683.475 L1644.13 683.475 L1644.69 683.475 L1645.25 683.475 L1645.81 683.475 L1646.37 683.475 L1646.93 683.475 L1647.48 683.475 L1648.04 683.475 L1648.6 683.475 L1649.16 683.475 L1649.72 683.475 L1650.28 683.475 L1650.84 683.475 L1651.4 683.475 L1651.96 683.475 L1652.52 683.475 L1653.08 683.475 L1653.64 683.475 L1654.2 683.475 L1654.76 683.475 L1655.31 683.475 L1655.87 683.475 L1656.43 683.475 L1656.99 683.475 L1657.55 683.475 L1658.11 683.475 L1658.67 683.475 L1659.23 683.475 L1659.79 683.475 L1660.35 683.475 L1660.91 683.475 L1661.47 683.475 L1662.03 683.475 L1662.58 683.475 L1663.14 683.475 L1663.7 683.475 L1664.26 683.475 L1664.82 683.475 L1665.38 683.475 L1665.94 683.475 L1666.5 683.475 L1667.06 683.475 L1667.62 683.475 L1668.18 683.475 L1668.74 683.475 L1669.3 683.475 L1669.85 683.475 L1670.41 683.475 L1670.97 683.475 L1671.53 683.475 L1672.09 683.475 L1672.65 683.475 L1673.21 683.475 L1673.77 683.475 L1674.33 683.475 L1674.89 683.475 L1675.45 683.475 L1676.01 683.475 L1676.57 683.475 L1677.13 683.475 L1677.68 683.475 L1678.24 683.475 L1678.8 683.475 L1679.36 683.475 L1679.92 683.475 L1680.48 683.475 L1681.04 683.475 L1681.6 683.475 L1682.16 683.475 L1682.72 683.475 L1683.28 683.475 L1683.84 683.475 L1684.4 683.475 L1684.95 683.475 L1685.51 683.475 L1686.07 683.475 L1686.63 683.475 L1687.19 683.475 L1687.75 683.475 L1688.31 683.475 L1688.87 683.475 L1689.43 683.475 L1689.99 683.475 L1690.55 683.475 L1691.11 683.475 L1691.67 683.475 L1692.23 683.475 L1692.78 683.475 L1693.34 683.475 L1693.9 683.475 L1694.46 683.475 L1695.02 683.475 L1695.58 683.475 L1696.14 683.475 L1696.7 683.475 L1697.26 683.475 L1697.82 683.475 L1698.38 683.475 L1698.94 683.475 L1699.5 683.475 L1700.05 683.475 L1700.61 683.475 L1701.17 683.475 L1701.73 683.475 L1702.29 683.475 L1702.85 683.475 L1703.41 683.475 L1703.97 683.475 L1704.53 683.475 L1705.09 683.475 L1705.65 683.475 L1706.21 683.475 L1706.77 683.475 L1707.32 683.475 L1707.88 683.475 L1708.44 683.475 L1709 683.475 L1709.56 683.475 L1710.12 683.475 L1710.68 683.475 L1711.24 683.475 L1711.8 683.475 L1712.36 683.475 L1712.92 683.475 L1713.48 683.475 L1714.04 683.475 L1714.6 683.475 L1715.15 683.475 L1715.71 683.475 L1716.27 683.475 L1716.83 683.475 L1717.39 683.475 L1717.95 683.475 L1718.51 683.475 L1719.07 683.475 L1719.63 683.475 L1720.19 683.475 L1720.75 683.475 L1721.31 683.475 L1721.87 683.475 L1722.42 683.475 L1722.98 683.475 L1723.54 683.475 L1724.1 683.475 L1724.66 683.475 L1725.22 683.475 L1725.78 683.475 L1726.34 683.475 L1726.9 683.475 L1727.46 683.475 L1728.02 683.475 L1728.58 683.475 L1729.14 683.475 L1729.69 683.475 L1730.25 683.475 L1730.81 683.475 L1731.37 683.475 L1731.93 683.475 L1732.49 683.475 L1733.05 683.475 L1733.61 683.475 L1734.17 683.475 L1734.73 683.475 L1735.29 683.475 L1735.85 683.475 L1736.41 683.475 L1736.97 683.475 L1737.52 683.475 L1738.08 683.475 L1738.64 683.475 L1739.2 683.475 L1739.76 683.475 L1740.32 683.475 L1740.88 683.475 L1741.44 683.475 L1742 683.475 L1742.56 683.475 L1743.12 683.475 L1743.68 683.475 L1744.24 683.475 L1744.79 683.475 L1745.35 683.475 L1745.91 683.475 L1746.47 683.475 L1747.03 683.475 L1747.59 683.475 L1748.15 683.475 L1748.71 683.475 L1749.27 683.475 L1749.83 683.475 L1750.39 683.475 L1750.95 683.475 L1751.51 683.475 L1752.06 683.475 L1752.62 683.475 L1753.18 683.475 L1753.74 683.475 L1754.3 683.475 L1754.86 683.475 L1755.42 683.475 L1755.98 683.475 L1756.54 683.475 L1757.1 683.475 L1757.66 683.475 L1758.22 683.475 L1758.78 683.475 L1759.34 683.475 L1759.89 683.475 L1760.45 683.475 L1761.01 683.475 L1761.57 683.475 L1762.13 683.475 L1762.69 683.475 L1763.25 683.475 L1763.81 683.475 L1764.37 683.475 L1764.93 683.475 L1765.49 683.475 L1766.05 683.475 L1766.61 683.475 L1767.16 683.475 L1767.72 683.475 L1768.28 683.475 L1768.84 683.475 L1769.4 683.475 L1769.96 683.475 L1770.52 683.475 L1771.08 683.475 L1771.64 683.475 L1772.2 683.475 L1772.76 683.475 L1773.32 683.475 L1773.88 683.475 L1774.43 683.475 L1774.99 683.475 L1775.55 683.475 L1776.11 683.475 L1776.67 683.475 L1777.23 683.475 L1777.79 683.475 L1778.35 683.475 L1778.91 683.475 L1779.47 683.475 L1780.03 683.475 L1780.59 683.475 L1781.15 683.475 L1781.71 683.475 L1782.26 683.475 L1782.82 683.475 L1783.38 683.475 L1783.94 683.475 L1784.5 683.475 L1785.06 683.475 L1785.62 683.475 L1786.18 683.475 L1786.74 683.475 L1787.3 683.475 L1787.86 683.475 L1788.42 683.475 L1788.98 683.475 L1789.53 683.475 L1790.09 683.475 L1790.65 683.475 L1791.21 683.475 L1791.77 683.475 L1792.33 683.475 L1792.89 683.475 L1793.45 683.475 L1794.01 683.475 L1794.57 683.475 L1795.13 683.475 L1795.69 683.475 L1796.25 683.475 L1796.8 683.475 L1797.36 683.475 L1797.92 683.475 L1798.48 683.475 L1799.04 683.475 L1799.6 683.475 L1800.16 683.475 L1800.72 683.475 L1801.28 683.475 L1801.84 683.475 L1802.4 683.475 L1802.96 683.475 L1803.52 683.475 L1804.08 683.475 L1804.63 683.475 L1805.19 683.475 L1805.75 683.475 L1806.31 683.475 L1806.87 683.475 L1807.43 683.475 L1807.99 683.475 L1808.55 683.475 L1809.11 683.475 L1809.67 683.475 L1810.23 683.475 L1810.79 683.475 L1811.35 683.475 L1811.9 683.475 L1812.46 683.475 L1813.02 683.475 L1813.58 683.475 L1814.14 683.475 L1814.7 683.475 L1815.26 683.475 L1815.82 683.475 L1816.38 683.475 L1816.94 683.475 L1817.5 683.475 L1818.06 683.475 L1818.62 683.475 L1819.18 683.475 L1819.73 683.475 L1820.29 683.475 L1820.85 683.475 L1821.41 683.475 L1821.97 683.475 L1822.53 683.475 L1823.09 683.475 L1823.65 683.475 L1824.21 683.475 L1824.77 683.475 L1825.33 683.475 L1825.89 683.475 L1826.45 683.475 L1827 683.475 L1827.56 683.475 L1828.12 683.475 L1828.68 683.475 L1829.24 683.475 L1829.8 683.475 L1830.36 683.475 L1830.92 683.475 L1831.48 683.475 L1832.04 683.475 L1832.6 683.475 L1833.16 683.475 L1833.72 683.475 L1834.27 683.475 L1834.83 683.475 L1835.39 683.475 L1835.95 683.475 L1836.51 683.475 L1837.07 683.475 L1837.63 683.475 L1838.19 683.475 L1838.19 681.936 L1837.63 681.936 L1837.07 681.936 L1836.51 681.936 L1835.95 681.936 L1835.39 681.936 L1834.83 681.936 L1834.27 681.936 L1833.72 681.936 L1833.16 681.936 L1832.6 681.936 L1832.04 681.936 L1831.48 681.936 L1830.92 681.936 L1830.36 681.936 L1829.8 681.936 L1829.24 681.936 L1828.68 681.936 L1828.12 681.936 L1827.56 681.936 L1827 681.936 L1826.45 681.936 L1825.89 681.936 L1825.33 681.936 L1824.77 681.936 L1824.21 681.936 L1823.65 681.936 L1823.09 681.936 L1822.53 681.936 L1821.97 681.936 L1821.41 681.936 L1820.85 681.936 L1820.29 681.936 L1819.73 681.936 L1819.18 681.936 L1818.62 681.936 L1818.06 681.936 L1817.5 681.936 L1816.94 681.936 L1816.38 681.936 L1815.82 681.936 L1815.26 681.936 L1814.7 681.936 L1814.14 681.936 L1813.58 681.936 L1813.02 681.936 L1812.46 681.936 L1811.9 681.936 L1811.35 681.936 L1810.79 681.936 L1810.23 681.936 L1809.67 681.936 L1809.11 681.936 L1808.55 681.936 L1807.99 681.936 L1807.43 681.936 L1806.87 681.936 L1806.31 681.936 L1805.75 681.936 L1805.19 681.936 L1804.63 681.936 L1804.08 681.936 L1803.52 681.936 L1802.96 681.936 L1802.4 681.936 L1801.84 681.936 L1801.28 681.936 L1800.72 681.936 L1800.16 681.936 L1799.6 681.936 L1799.04 681.936 L1798.48 681.936 L1797.92 681.936 L1797.36 681.936 L1796.8 681.936 L1796.25 681.936 L1795.69 681.936 L1795.13 681.936 L1794.57 681.936 L1794.01 681.936 L1793.45 681.936 L1792.89 681.936 L1792.33 681.936 L1791.77 681.936 L1791.21 681.936 L1790.65 681.936 L1790.09 681.936 L1789.53 681.936 L1788.98 681.936 L1788.42 681.936 L1787.86 681.936 L1787.3 681.936 L1786.74 681.936 L1786.18 681.936 L1785.62 681.936 L1785.06 681.936 L1784.5 681.936 L1783.94 681.936 L1783.38 681.936 L1782.82 681.936 L1782.26 681.936 L1781.71 681.936 L1781.15 681.936 L1780.59 681.936 L1780.03 681.936 L1779.47 681.936 L1778.91 681.936 L1778.35 681.936 L1777.79 681.936 L1777.23 681.936 L1776.67 681.936 L1776.11 681.936 L1775.55 681.936 L1774.99 681.936 L1774.43 681.936 L1773.88 681.936 L1773.32 681.936 L1772.76 681.936 L1772.2 681.936 L1771.64 681.936 L1771.08 681.936 L1770.52 681.936 L1769.96 681.936 L1769.4 681.936 L1768.84 681.936 L1768.28 681.936 L1767.72 681.936 L1767.16 681.936 L1766.61 681.936 L1766.05 681.936 L1765.49 681.936 L1764.93 681.936 L1764.37 681.936 L1763.81 681.936 L1763.25 681.936 L1762.69 681.936 L1762.13 681.936 L1761.57 681.936 L1761.01 681.936 L1760.45 681.936 L1759.89 681.936 L1759.34 681.936 L1758.78 681.936 L1758.22 681.936 L1757.66 681.936 L1757.1 681.936 L1756.54 681.936 L1755.98 681.936 L1755.42 681.936 L1754.86 681.936 L1754.3 681.936 L1753.74 681.936 L1753.18 681.936 L1752.62 681.936 L1752.06 681.936 L1751.51 681.936 L1750.95 681.936 L1750.39 681.936 L1749.83 681.936 L1749.27 681.936 L1748.71 681.936 L1748.15 681.936 L1747.59 681.936 L1747.03 681.936 L1746.47 681.936 L1745.91 681.936 L1745.35 681.936 L1744.79 681.936 L1744.24 681.936 L1743.68 681.936 L1743.12 681.936 L1742.56 681.936 L1742 681.936 L1741.44 681.936 L1740.88 681.936 L1740.32 681.936 L1739.76 681.936 L1739.2 681.936 L1738.64 681.936 L1738.08 681.936 L1737.52 681.936 L1736.97 681.936 L1736.41 681.936 L1735.85 681.936 L1735.29 681.936 L1734.73 681.936 L1734.17 681.936 L1733.61 681.936 L1733.05 681.936 L1732.49 681.936 L1731.93 681.936 L1731.37 681.936 L1730.81 681.936 L1730.25 681.936 L1729.69 681.936 L1729.14 681.936 L1728.58 681.936 L1728.02 681.936 L1727.46 681.936 L1726.9 681.936 L1726.34 681.936 L1725.78 681.936 L1725.22 681.936 L1724.66 681.936 L1724.1 681.936 L1723.54 681.936 L1722.98 681.936 L1722.42 681.936 L1721.87 681.936 L1721.31 681.936 L1720.75 681.936 L1720.19 681.936 L1719.63 681.936 L1719.07 681.936 L1718.51 681.936 L1717.95 681.936 L1717.39 681.936 L1716.83 681.936 L1716.27 681.936 L1715.71 681.936 L1715.15 681.936 L1714.6 681.936 L1714.04 681.936 L1713.48 681.936 L1712.92 681.936 L1712.36 681.936 L1711.8 681.936 L1711.24 681.936 L1710.68 681.936 L1710.12 681.936 L1709.56 681.936 L1709 681.936 L1708.44 681.936 L1707.88 681.936 L1707.32 681.936 L1706.77 681.936 L1706.21 681.936 L1705.65 681.936 L1705.09 681.936 L1704.53 681.936 L1703.97 681.936 L1703.41 681.936 L1702.85 681.936 L1702.29 681.936 L1701.73 681.936 L1701.17 681.936 L1700.61 681.936 L1700.05 681.936 L1699.5 681.936 L1698.94 681.936 L1698.38 681.936 L1697.82 681.936 L1697.26 681.936 L1696.7 681.936 L1696.14 681.936 L1695.58 681.936 L1695.02 681.936 L1694.46 681.936 L1693.9 681.936 L1693.34 681.936 L1692.78 681.936 L1692.23 681.936 L1691.67 681.936 L1691.11 681.936 L1690.55 681.936 L1689.99 681.936 L1689.43 681.936 L1688.87 681.936 L1688.31 681.936 L1687.75 681.936 L1687.19 681.936 L1686.63 681.936 L1686.07 681.936 L1685.51 681.936 L1684.95 681.936 L1684.4 681.936 L1683.84 681.936 L1683.28 681.936 L1682.72 681.936 L1682.16 681.936 L1681.6 681.936 L1681.04 681.936 L1680.48 681.936 L1679.92 681.936 L1679.36 681.936 L1678.8 681.936 L1678.24 681.936 L1677.68 681.936 L1677.13 681.936 L1676.57 681.936 L1676.01 681.936 L1675.45 681.936 L1674.89 681.936 L1674.33 681.936 L1673.77 681.936 L1673.21 681.936 L1672.65 681.936 L1672.09 681.936 L1671.53 681.936 L1670.97 681.936 L1670.41 681.936 L1669.85 681.936 L1669.3 681.936 L1668.74 681.936 L1668.18 681.936 L1667.62 681.936 L1667.06 681.936 L1666.5 681.936 L1665.94 681.936 L1665.38 681.936 L1664.82 681.936 L1664.26 681.936 L1663.7 681.936 L1663.14 681.936 L1662.58 681.936 L1662.03 681.936 L1661.47 681.936 L1660.91 681.936 L1660.35 681.936 L1659.79 681.936 L1659.23 681.936 L1658.67 681.936 L1658.11 681.936 L1657.55 681.936 L1656.99 681.936 L1656.43 681.936 L1655.87 681.936 L1655.31 681.936 L1654.76 681.936 L1654.2 681.936 L1653.64 681.936 L1653.08 681.936 L1652.52 681.936 L1651.96 681.936 L1651.4 681.936 L1650.84 681.936 L1650.28 681.936 L1649.72 681.936 L1649.16 681.936 L1648.6 681.936 L1648.04 681.936 L1647.48 681.936 L1646.93 681.936 L1646.37 681.936 L1645.81 681.936 L1645.25 681.936 L1644.69 681.936 L1644.13 681.936 L1643.57 681.936 L1643.01 681.936 L1642.45 681.936 L1641.89 681.936 L1641.33 681.936 L1640.77 681.936 L1640.21 681.936 L1639.66 681.936 L1639.1 681.936 L1638.54 681.936 L1637.98 681.936 L1637.42 681.936 L1636.86 681.936 L1636.3 681.936 L1635.74 681.936 L1635.18 681.936 L1634.62 681.936 L1634.06 681.936 L1633.5 681.936 L1632.94 681.936 L1632.39 681.936 L1631.83 681.936 L1631.27 681.936 L1630.71 681.936 L1630.15 681.936 L1629.59 681.936 L1629.03 681.936 L1628.47 681.936 L1627.91 681.936 L1627.35 681.936 L1626.79 681.936 L1626.23 681.936 L1625.67 681.936 L1625.11 681.936 L1624.56 681.936 L1624 681.936 L1623.44 681.936 L1622.88 681.936 L1622.32 681.936 L1621.76 681.936 L1621.2 681.936 L1620.64 681.936 L1620.08 681.936 L1619.52 681.936 L1618.96 681.936 L1618.4 681.936 L1617.84 681.936 L1617.29 681.936 L1616.73 681.936 L1616.17 681.936 L1615.61 681.936 L1615.05 681.936 L1614.49 681.936 L1613.93 681.936 L1613.37 681.936 L1612.81 681.936 L1612.25 681.936 L1611.69 681.936 L1611.13 681.936 L1610.57 681.936 L1610.02 681.936 L1609.46 681.936 L1608.9 681.936 L1608.34 681.936 L1607.78 681.936 L1607.22 681.936 L1606.66 681.936 L1606.1 681.936 L1605.54 681.936 L1604.98 681.936 L1604.42 681.936 L1603.86 681.936 L1603.3 681.936 L1602.74 681.936 L1602.19 681.936 L1601.63 681.936 L1601.07 681.936 L1600.51 681.936 L1599.95 681.936 L1599.39 681.936 L1598.83 681.936 L1598.27 681.936 L1597.71 681.936 L1597.15 681.936 L1596.59 681.936 L1596.03 681.936 L1595.47 681.936 L1594.92 681.936 L1594.36 681.936 L1593.8 681.936 L1593.24 681.936 L1592.68 681.936 L1592.12 681.936 L1591.56 681.936 L1591 681.936 L1590.44 681.936 L1589.88 681.936 L1589.32 681.936 L1588.76 681.936 L1588.2 681.936 L1587.65 681.936 L1587.09 681.936 L1586.53 681.936 L1585.97 681.936 L1585.41 681.936 L1584.85 681.936 L1584.29 681.936 L1583.73 681.936 L1583.17 681.936 L1582.61 681.936 L1582.05 681.936 L1581.49 681.936 L1580.93 681.936 L1580.37 681.936 L1579.82 681.936 L1579.26 681.936 L1578.7 681.936 L1578.14 681.936 L1577.58 681.936 L1577.02 681.936 L1576.46 681.936 L1575.9 681.936 L1575.34 681.936 L1574.78 681.936 L1574.22 681.936 L1573.66 681.936 L1573.1 681.936 L1572.55 681.936 L1571.99 681.936 L1571.43 681.936 L1570.87 681.936 L1570.31 681.936 L1569.75 681.936 L1569.19 681.936 L1568.63 681.936 L1568.07 681.936 L1567.51 681.936 L1566.95 681.936 L1566.39 681.936 L1565.83 681.936 L1565.28 681.936 L1564.72 681.936 L1564.16 681.936 L1563.6 681.936 L1563.04 681.936 L1562.48 681.936 L1561.92 681.936 L1561.36 681.936 L1560.8 681.936 L1560.24 681.936 L1559.68 681.936 L1559.12 681.936 L1558.56 681.936 L1558 681.936 L1557.45 681.936 L1556.89 681.936 L1556.33 681.936 L1555.77 681.936 L1555.21 681.936 L1554.65 681.936 L1554.09 681.936 L1553.53 681.936 L1552.97 681.936 L1552.41 681.936 L1551.85 681.936 L1551.29 681.936 L1550.73 681.936 L1550.18 681.936 L1549.62 681.936 L1549.06 681.936 L1548.5 681.936 L1547.94 681.936 L1547.38 681.936 L1546.82 681.936 L1546.26 681.936 L1545.7 681.936 L1545.14 681.936 L1544.58 681.936 L1544.02 681.936 L1543.46 681.936 L1542.9 681.936 L1542.35 681.936 L1541.79 681.936 L1541.23 681.936 L1540.67 681.936 L1540.11 681.936 L1539.55 681.936 L1538.99 681.936 L1538.43 681.936 L1537.87 681.936 L1537.31 681.936 L1536.75 681.936 L1536.19 681.936 L1535.63 681.936 L1535.08 681.936 L1534.52 681.936 L1533.96 681.936 L1533.4 681.936 L1532.84 681.936 L1532.28 681.936 L1531.72 681.936 L1531.16 681.936 L1530.6 681.936 L1530.04 681.936 L1529.48 681.936 L1528.92 681.936 L1528.36 681.936 L1527.81 681.936 L1527.25 681.936 L1526.69 681.936 L1526.13 681.936 L1525.57 681.936 L1525.01 681.936 L1524.45 681.936 L1523.89 681.936 L1523.33 681.936 L1522.77 681.936 L1522.21 681.936 L1521.65 681.936 L1521.09 681.936 L1520.53 681.936 L1519.98 681.936 L1519.42 681.936 L1518.86 681.936 L1518.3 681.936 L1517.74 681.936 L1517.18 681.936 L1516.62 681.936 L1516.06 681.936 L1515.5 681.936 L1514.94 681.936 L1514.38 681.936 L1513.82 681.936 L1513.26 681.936 L1512.71 681.936 L1512.15 681.936 L1511.59 681.936 L1511.03 681.936 L1510.47 681.936 L1509.91 681.936 L1509.35 681.936 L1508.79 681.936 L1508.23 681.936 L1507.67 681.936 L1507.11 681.936 L1506.55 681.936 L1505.99 681.936 L1505.44 681.936 L1504.88 681.936 L1504.32 681.936 L1503.76 681.936 L1503.2 681.936 L1502.64 681.936 L1502.08 681.936 L1501.52 681.936 L1500.96 681.936 L1500.4 681.936 L1499.84 681.936 L1499.28 681.936 L1498.72 681.936 L1498.16 681.936 L1497.61 681.936 L1497.05 681.936 L1496.49 681.936 L1495.93 681.936 L1495.37 681.936 L1494.81 681.936 L1494.25 681.936 L1493.69 681.936 L1493.13 681.936 L1492.57 681.936 L1492.01 681.936 L1491.45 681.936 L1490.89 681.936 L1490.34 681.936 L1489.78 681.936 L1489.22 681.936 L1488.66 681.936 L1488.1 681.936 L1487.54 681.936 L1486.98 681.936 L1486.42 681.936 L1485.86 681.936 L1485.3 681.936 L1484.74 681.936 L1484.18 681.936 L1483.62 681.936 L1483.07 681.936 L1482.51 681.936 L1481.95 681.936 L1481.39 681.936 L1480.83 681.936 L1480.27 681.936 L1479.71 681.936 L1479.15 681.936 L1478.59 681.936 L1478.03 681.936 L1477.47 681.936 L1476.91 681.936 L1476.35 681.936 L1475.79 681.936 L1475.24 681.936 L1474.68 681.936 L1474.12 681.936 L1473.56 681.936 L1473 681.936 L1472.44 681.936 L1471.88 681.936 L1471.32 681.936 L1470.76 681.936 L1470.2 681.936 L1469.64 681.936 L1469.08 681.936 L1468.52 681.936 L1467.97 681.936 L1467.41 681.936 L1466.85 681.936 L1466.29 681.936 L1465.73 681.936 L1465.17 681.936 L1464.61 681.936 L1464.05 681.936 L1463.49 681.936 L1462.93 681.936 L1462.37 681.936 L1461.81 681.936 L1461.25 681.936 L1460.7 681.936 L1460.14 681.936 L1459.58 681.936 L1459.02 681.936 L1458.46 681.936 L1457.9 681.936 L1457.34 681.936 L1456.78 681.936 L1456.22 681.936 L1455.66 681.936 L1455.1 681.936 L1454.54 681.936 L1453.98 681.936 L1453.42 681.936 L1452.87 681.936 L1452.31 681.936 L1451.75 681.936 L1451.19 681.936 L1450.63 681.936 L1450.07 681.936 L1449.51 681.936 L1448.95 681.936 L1448.39 681.936 L1447.83 681.936 L1447.27 681.936 L1446.71 681.936 L1446.15 681.936 L1445.6 681.936 L1445.04 681.936 L1444.48 681.936 L1443.92 681.936 L1443.36 681.936 L1442.8 681.936 L1442.24 681.936 L1441.68 681.936 L1441.12 681.936 L1440.56 681.936 L1440 681.936 L1439.44 681.936 L1438.88 681.936 L1438.33 681.936 L1437.77 681.936 L1437.21 681.936 L1436.65 681.936 L1436.09 681.936 L1435.53 681.936 L1434.97 681.936 L1434.41 681.936 L1433.85 681.936 L1433.29 681.936 L1432.73 681.936 L1432.17 681.936 L1431.61 681.936 L1431.05 681.936 L1430.5 681.936 L1429.94 681.936 L1429.38 681.936 L1428.82 681.936 L1428.26 681.936 L1427.7 681.936 L1427.14 681.936 L1426.58 681.936 L1426.02 681.936 L1425.46 681.936 L1424.9 681.936 L1424.34 681.936 L1423.78 681.936 L1423.23 681.936 L1422.67 681.936 L1422.11 681.936 L1421.55 681.936 L1420.99 681.936 L1420.43 681.936 L1419.87 681.936 L1419.31 681.936 L1418.75 681.936 L1418.19 681.936 L1417.63 681.936 L1417.07 681.936 L1416.51 681.936 L1415.95 681.936 L1415.4 681.936 L1414.84 681.936 L1414.28 681.936 L1413.72 681.936 L1413.16 681.936 L1412.6 681.936 L1412.04 681.936 L1411.48 681.936 L1410.92 681.936 L1410.36 681.936 L1409.8 681.936 L1409.24 681.936 L1408.68 681.936 L1408.13 681.936 L1407.57 681.936 L1407.01 681.936 L1406.45 681.936 L1405.89 681.936 L1405.33 681.936 L1404.77 681.936 L1404.21 681.936 L1403.65 681.936 L1403.09 681.936 L1402.53 681.936 L1401.97 681.936 L1401.41 681.936 L1400.86 681.936 L1400.3 681.936 L1399.74 681.936 L1399.18 681.936 L1398.62 681.936 L1398.06 681.936 L1397.5 681.936 L1396.94 681.936 L1396.38 681.936 L1395.82 681.936 L1395.26 681.936 L1394.7 681.936 L1394.14 681.936 L1393.58 681.936 L1393.03 681.936 L1392.47 681.936 L1391.91 681.936 L1391.35 681.936 L1390.79 681.936 L1390.23 681.936 L1389.67 681.936 L1389.11 681.936 L1388.55 681.936 L1387.99 681.936 L1387.43 681.936 L1386.87 681.936 L1386.31 681.936 L1385.76 681.936 L1385.2 681.936 L1384.64 681.936 L1384.08 681.936 L1383.52 681.936 L1382.96 681.936 L1382.4 681.936 L1381.84 681.936 L1381.28 681.936 L1380.72 681.936 L1380.16 681.936 L1379.6 681.936 L1379.04 681.936 L1378.49 681.936 L1377.93 681.936 L1377.37 681.936 L1376.81 681.936 L1376.25 681.936 L1375.69 681.936 L1375.13 681.936 L1374.57 681.936 L1374.01 681.936 L1373.45 681.936 L1372.89 681.936 L1372.33 681.936 L1371.77 681.936 L1371.21 681.936 L1370.66 681.936 L1370.1 681.936 L1369.54 681.936 L1368.98 681.936 L1368.42 681.936 L1367.86 681.936 L1367.3 681.936 L1366.74 681.936 L1366.18 681.936 L1365.62 681.936 L1365.06 681.936 L1364.5 681.936 L1363.94 681.936 L1363.39 681.936 L1362.83 681.936 L1362.27 681.936 L1361.71 681.936 L1361.15 681.936 L1360.59 681.936 L1360.03 681.936 L1359.47 681.936 L1358.91 681.936 L1358.35 681.936 L1357.79 681.936 L1357.23 681.936 L1356.67 681.936 L1356.12 681.936 L1355.56 681.936 L1355 681.936 L1354.44 681.936 L1353.88 681.936 L1353.32 681.936 L1352.76 681.936 L1352.2 681.936 L1351.64 681.936 L1351.08 681.936 L1350.52 681.936 L1349.96 681.936 L1349.4 681.936 L1348.84 681.936 L1348.29 681.936 L1347.73 681.936 L1347.17 681.936 L1346.61 681.936 L1346.05 681.936 L1345.49 681.936 L1344.93 681.936 L1344.37 681.936 L1343.81 681.936 L1343.25 681.936 L1342.69 681.936 L1342.13 681.936 L1341.57 681.936 L1341.02 681.936 L1340.46 681.936 L1339.9 681.936 L1339.34 681.936 L1338.78 681.936 L1338.22 681.936 L1337.66 681.936 L1337.1 681.936 L1336.54 681.936 L1335.98 681.936 L1335.42 681.936 L1334.86 681.936 L1334.3 681.936 L1333.75 681.936 L1333.19 681.936 L1332.63 681.936 L1332.07 681.936 L1331.51 681.936 L1330.95 681.936 L1330.39 681.936 L1329.83 681.936 L1329.27 681.936 L1328.71 681.936 L1328.15 681.936 L1327.59 681.936 L1327.03 681.936 L1326.47 681.936 L1325.92 681.936 L1325.36 681.936 L1324.8 681.936 L1324.24 681.936 L1323.68 681.936 L1323.12 681.936 L1322.56 681.936 L1322 681.936 L1321.44 681.936 L1320.88 681.936 L1320.32 681.936 L1319.76 681.936 L1319.2 681.936 L1318.65 681.936 L1318.09 681.936 L1317.53 681.936 L1316.97 681.936 L1316.41 681.936 L1315.85 681.936 L1315.29 681.936 L1314.73 681.936 L1314.17 681.936 L1313.61 681.936 L1313.05 681.936 L1312.49 681.936 L1311.93 681.936 L1311.38 681.936 L1310.82 681.936 L1310.26 681.936 L1309.7 681.936 L1309.14 681.936 L1308.58 681.936 L1308.02 681.936 L1307.46 681.936 L1306.9 681.936 L1306.34 681.936 L1305.78 681.936 L1305.22 681.936 L1304.66 681.936 L1304.1 681.936 L1303.55 681.936 L1302.99 681.936 L1302.43 681.936 L1301.87 681.936 L1301.31 681.936 L1300.75 681.936 L1300.19 681.936 L1299.63 681.936 L1299.07 681.936 L1298.51 681.936 L1297.95 681.936 L1297.39 681.936 L1296.83 681.936 L1296.28 681.936 L1295.72 681.936 L1295.16 681.936 L1294.6 681.936 L1294.04 681.936 L1293.48 681.936 L1292.92 681.936 L1292.36 681.936 L1291.8 681.936 L1291.24 681.936 L1290.68 681.936 L1290.12 681.936 L1289.56 681.936 L1289 681.936 L1288.45 681.936 L1287.89 681.936 L1287.33 681.936 L1286.77 681.936 L1286.21 681.936 L1285.65 681.936 L1285.09 681.936 L1284.53 681.936 L1283.97 681.936 L1283.41 681.936 L1282.85 681.936 L1282.29 681.936 L1281.73 681.936 L1281.18 681.936 L1280.62 681.936 L1280.06 681.936 L1279.5 681.936 L1278.94 681.936 L1278.38 681.936 L1277.82 681.936 L1277.26 681.936 L1276.7 681.936 L1276.14 681.936 L1275.58 681.936 L1275.02 681.936 L1274.46 681.936 L1273.91 681.936 L1273.35 681.936 L1272.79 681.936 L1272.23 681.936 L1271.67 681.936 L1271.11 681.936 L1270.55 681.936 L1269.99 681.936 L1269.43 681.936 L1268.87 681.936 L1268.31 681.936 L1267.75 681.936 L1267.19 681.936 L1266.63 681.936 L1266.08 681.936 L1265.52 681.936 L1264.96 681.936 L1264.4 681.936 L1263.84 681.936 L1263.28 681.936 L1262.72 681.936 L1262.16 681.936 L1261.6 681.936 L1261.04 681.936 L1260.48 681.936 L1259.92 681.936 L1259.36 681.936 L1258.81 681.936 L1258.25 681.936 L1257.69 681.936 L1257.13 681.936 L1256.57 681.936 L1256.01 681.936 L1255.45 681.936 L1254.89 681.936 L1254.33 681.936 L1253.77 681.936 L1253.21 681.936 L1252.65 681.936 L1252.09 681.936 L1251.54 681.936 L1250.98 681.936 L1250.42 681.936 L1249.86 681.936 L1249.3 681.936 L1248.74 681.936 L1248.18 681.936 L1247.62 681.936 L1247.06 681.936 L1246.5 681.936 L1245.94 681.936 L1245.38 681.936 L1244.82 681.936 L1244.26 681.936 L1243.71 681.936 L1243.15 681.936 L1242.59 681.936 L1242.03 681.936 L1241.47 681.936 L1240.91 681.936 L1240.35 681.936 L1239.79 681.936 L1239.23 681.936 L1238.67 681.936 L1238.11 681.936 L1237.55 681.936 L1236.99 681.936 L1236.44 681.936 L1235.88 681.936 L1235.32 681.936 L1234.76 681.936 L1234.2 681.936 L1233.64 681.936 L1233.08 681.936 L1232.52 681.936 L1231.96 681.936 L1231.4 681.936 L1230.84 681.936 L1230.28 681.936 L1229.72 681.936 L1229.17 681.936 L1228.61 681.936 L1228.05 681.936 L1227.49 681.936 L1226.93 681.936 L1226.37 681.936 L1225.81 681.936 L1225.25 681.936 L1224.69 681.936 L1224.13 681.936 L1223.57 681.936 L1223.01 681.936 L1222.45 681.936 L1221.89 681.936 L1221.34 681.936 L1220.78 681.936 L1220.22 681.936 L1219.66 681.936 L1219.1 681.936 L1218.54 681.936 L1217.98 681.936 L1217.42 681.936 L1216.86 681.936 L1216.3 681.936 L1215.74 681.936 L1215.18 681.936 L1214.62 681.936 L1214.07 681.936 L1213.51 681.936 L1212.95 681.936 L1212.39 681.936 L1211.83 681.936 L1211.27 681.936 L1210.71 681.936 L1210.15 681.936 L1209.59 681.936 L1209.03 681.936 L1208.47 681.936 L1207.91 681.936 L1207.35 681.936 L1206.8 681.936 L1206.24 681.936 L1205.68 681.936 L1205.12 681.936 L1204.56 681.936 L1204 681.936 L1203.44 681.936 L1202.88 681.936 L1202.32 681.936 L1201.76 681.936 L1201.2 681.936 L1200.64 681.936 L1200.08 681.936 L1199.52 681.936 L1198.97 681.936 L1198.41 681.936 L1197.85 681.936 L1197.29 681.936 L1196.73 681.936 L1196.17 681.936 L1195.61 681.936 L1195.05 681.936 L1194.49 681.936 L1193.93 681.936 L1193.37 681.936 L1192.81 681.936 L1192.25 681.936 L1191.7 681.936 L1191.14 681.936 L1190.58 681.936 L1190.02 681.936 L1189.46 681.936 L1188.9 681.936 L1188.34 681.936 L1187.78 681.936 L1187.22 681.936 L1186.66 681.936 L1186.1 681.936 L1185.54 681.936 L1184.98 681.936 L1184.43 681.936 L1183.87 681.936 L1183.31 681.936 L1182.75 681.936 L1182.19 681.936 L1181.63 681.936 L1181.07 681.936 L1180.51 681.936 L1179.95 681.936 L1179.39 681.936 L1178.83 681.936 L1178.27 681.936 L1177.71 681.936 L1177.15 681.936 L1176.6 681.936 L1176.04 681.936 L1175.48 681.936 L1174.92 681.936 L1174.36 681.936 L1173.8 681.936 L1173.24 681.936 L1172.68 681.936 L1172.12 681.936 L1171.56 681.936 L1171 681.936 L1170.44 681.936 L1169.88 681.936 L1169.33 681.936 L1168.77 681.936 L1168.21 681.936 L1167.65 681.936 L1167.09 681.936 L1166.53 681.936 L1165.97 681.936 L1165.41 681.936 L1164.85 681.936 L1164.29 681.936 L1163.73 681.936 L1163.17 681.936 L1162.61 681.936 L1162.05 681.936 L1161.5 681.936 L1160.94 681.936 L1160.38 681.936 L1159.82 681.936 L1159.26 681.936 L1158.7 681.936 L1158.14 681.936 L1157.58 681.936 L1157.02 681.936 L1156.46 681.936 L1155.9 681.936 L1155.34 681.936 L1154.78 681.936 L1154.23 681.936 L1153.67 681.936 L1153.11 681.936 L1152.55 681.936 L1151.99 681.936 L1151.43 681.936 L1150.87 681.936 L1150.31 681.936 L1149.75 681.936 L1149.19 681.936 L1148.63 681.936 L1148.07 681.936 L1147.51 681.936 L1146.96 681.936 L1146.4 681.936 L1145.84 681.936 L1145.28 681.936 L1144.72 681.936 L1144.16 681.936 L1143.6 681.936 L1143.04 681.936 L1142.48 681.936 L1141.92 681.936 L1141.36 681.936 L1140.8 681.936 L1140.24 681.936 L1139.68 681.936 L1139.13 681.936 L1138.57 681.936 L1138.01 681.936 L1137.45 681.936 L1136.89 681.936 L1136.33 681.936 L1135.77 681.936 L1135.21 681.936 L1134.65 681.936 L1134.09 681.936 L1133.53 681.936 L1132.97 681.936 L1132.41 681.936 L1131.86 681.936 L1131.3 681.936 L1130.74 681.936 L1130.18 681.936 L1129.62 681.936 L1129.06 681.936 L1128.5 681.936 L1127.94 681.936 L1127.38 681.936 L1126.82 681.936 L1126.26 681.936 L1125.7 681.936 L1125.14 681.936 L1124.59 681.936 L1124.03 681.936 L1123.47 681.936 L1122.91 681.936 L1122.35 681.936 L1121.79 681.936 L1121.23 681.936 L1120.67 681.936 L1120.11 681.936 L1119.55 681.936 L1118.99 681.936 L1118.43 681.936 L1117.87 681.936 L1117.31 681.936 L1116.76 681.936 L1116.2 681.936 L1115.64 681.936 L1115.08 681.936 L1114.52 681.936 L1113.96 681.936 L1113.4 681.936 L1112.84 681.936 L1112.28 681.936 L1111.72 681.936 L1111.16 681.936 L1110.6 681.936 L1110.04 681.936 L1109.49 681.936 L1108.93 681.936 L1108.37 681.936 L1107.81 681.936 L1107.25 681.936 L1106.69 681.936 L1106.13 681.936 L1105.57 681.936 L1105.01 681.936 L1104.45 681.936 L1103.89 681.936 L1103.33 681.936 L1102.77 681.936 L1102.22 681.936 L1101.66 681.936 L1101.1 681.936 L1100.54 681.936 L1099.98 681.936 L1099.42 681.936 L1098.86 681.936 L1098.3 681.936 L1097.74 681.936 L1097.18 681.936 L1096.62 681.936 L1096.06 681.936 L1095.5 681.936 L1094.94 681.936 L1094.39 681.936 L1093.83 681.936 L1093.27 681.936 L1092.71 681.936 L1092.15 681.936 L1091.59 681.936 L1091.03 681.936 L1090.47 681.936 L1089.91 681.936 L1089.35 681.936 L1088.79 681.936 L1088.23 681.936 L1087.67 681.936 L1087.12 681.936 L1086.56 681.936 L1086 681.936 L1085.44 681.936 L1084.88 681.936 L1084.32 681.936 L1083.76 681.936 L1083.2 681.936 L1082.64 681.936 L1082.08 681.936 L1081.52 681.936 L1080.96 681.936 L1080.4 681.936 L1079.85 681.936 L1079.29 681.936 L1078.73 681.936 L1078.17 681.936 L1077.61 681.936 L1077.05 681.936 L1076.49 681.936 L1075.93 681.936 L1075.37 681.936 L1074.81 681.936 L1074.25 681.936 L1073.69 681.936 L1073.13 681.936 L1072.57 681.936 L1072.02 681.936 L1071.46 681.936 L1070.9 681.936 L1070.34 681.936 L1069.78 681.936 L1069.22 681.936 L1068.66 681.936 L1068.1 681.936 L1067.54 681.936 L1066.98 681.936 L1066.42 681.936 L1065.86 681.936 L1065.3 681.936 L1064.75 681.936 L1064.19 681.936 L1063.63 681.936 L1063.07 681.936 L1062.51 681.936 L1061.95 681.936 L1061.39 681.936 L1060.83 681.936 L1060.27 681.936 L1059.71 681.936 L1059.15 681.936 L1058.59 681.936 L1058.03 681.936 L1057.48 681.936 L1056.92 681.936 L1056.36 681.936 L1055.8 681.936 L1055.24 681.936 L1054.68 681.936 L1054.12 681.936 L1053.56 681.936 L1053 681.936 L1052.44 681.936 L1051.88 681.936 L1051.32 681.936 L1050.76 681.936 L1050.2 681.936 L1049.65 681.936 L1049.09 681.936 L1048.53 681.936 L1047.97 681.936 L1047.41 681.936 L1046.85 681.936 L1046.29 681.936 L1045.73 681.936 L1045.17 681.936 L1044.61 681.936 L1044.05 681.936 L1043.49 681.936 L1042.93 681.936 L1042.38 681.936 L1041.82 681.936 L1041.26 681.936 L1040.7 681.936 L1040.14 681.936 L1039.58 681.936 L1039.02 681.936 L1038.46 681.936 L1037.9 681.936 L1037.34 681.936 L1036.78 681.936 L1036.22 681.936 L1035.66 681.936 L1035.1 681.936 L1034.55 681.936 L1033.99 681.936 L1033.43 681.936 L1032.87 681.936 L1032.31 681.936 L1031.75 681.936 L1031.19 681.936 L1030.63 681.936 L1030.07 681.936 L1029.51 681.936 L1028.95 681.936 L1028.39 681.936 L1027.83 681.936 L1027.28 681.936 L1026.72 681.936 L1026.16 681.936 L1025.6 681.936 L1025.04 681.936 L1024.48 681.936 L1023.92 681.936 L1023.36 681.936 L1022.8 681.936 L1022.24 681.936 L1021.68 681.936 L1021.12 681.936 L1020.56 681.936 L1020.01 681.936 L1019.45 681.936 L1018.89 681.936 L1018.33 681.936 L1017.77 681.936 L1017.21 681.936 L1016.65 681.936 L1016.09 681.936 L1015.53 681.936 L1014.97 681.936 L1014.41 681.936 L1013.85 681.936 L1013.29 681.936 L1012.73 681.936 L1012.18 681.936 L1011.62 681.936 L1011.06 681.936 L1010.5 681.936 L1009.94 681.936 L1009.38 681.936 L1008.82 681.936 L1008.26 681.936 L1007.7 681.936 L1007.14 681.936 L1006.58 681.936 L1006.02 681.936 L1005.46 681.936 L1004.91 681.936 L1004.35 681.936 L1003.79 681.936 L1003.23 681.936 L1002.67 681.936 L1002.11 681.936 L1001.55 681.936 L1000.99 681.936 L1000.43 681.936 L999.872 681.936 L999.313 681.936 L998.754 681.936 L998.194 681.936 L997.635 681.936 L997.076 681.936 L996.517 681.936 L995.957 681.936 L995.398 681.936 L994.839 681.936 L994.28 681.936 L993.72 681.936 L993.161 681.936 L992.602 681.936 L992.043 681.936 L991.483 681.936 L990.924 681.936 L990.365 681.936 L989.806 681.936 L989.246 681.936 L988.687 681.936 L988.128 681.936 L987.569 681.936 L987.009 681.936 L986.45 681.936 L985.891 681.936 L985.332 681.936 L984.772 681.936 L984.213 681.936 L983.654 681.936 L983.095 681.936 L982.535 681.936 L981.976 681.936 L981.417 681.936 L980.858 681.936 L980.298 681.936 L979.739 681.936 L979.18 681.936 L978.621 681.936 L978.061 681.936 L977.502 681.936 L976.943 681.936 L976.384 681.936 L975.824 681.936 L975.265 681.936 L974.706 681.936 L974.147 681.936 L973.587 681.936 L973.028 681.936 L972.469 681.936 L971.91 681.936 L971.35 681.936 L970.791 681.936 L970.232 681.936 L969.673 681.936 L969.113 681.936 L968.554 681.936 L967.995 681.936 L967.436 681.936 L966.876 681.936 L966.317 681.936 L965.758 681.936 L965.199 681.936 L964.639 681.936 L964.08 681.936 L963.521 681.936 L962.962 681.936 L962.402 681.936 L961.843 681.936 L961.284 681.936 L960.725 681.936 L960.165 681.936 L959.606 681.936 L959.047 681.936 L958.488 681.936 L957.928 681.936 L957.369 681.936 L956.81 681.936 L956.251 681.936 L955.691 681.936 L955.132 681.936 L954.573 681.936 L954.014 681.936 L953.454 681.936 L952.895 681.936 L952.336 681.936 L951.777 681.936 L951.217 681.936 L950.658 681.936 L950.099 681.936 L949.54 681.936 L948.98 681.936 L948.421 681.936 L947.862 681.936 L947.303 681.936 L946.743 681.936 L946.184 681.936 L945.625 681.936 L945.066 681.936 L944.506 681.936 L943.947 681.936 L943.388 681.936 L942.829 681.936 L942.269 681.936 L941.71 681.936 L941.151 681.936 L940.592 681.936 L940.032 681.936 L939.473 681.936 L938.914 681.936 L938.355 681.936 L937.795 681.936 L937.236 681.936 L936.677 681.936 L936.118 681.936 L935.558 681.936 L934.999 681.936 L934.44 681.936 L933.881 681.936 L933.321 681.936 L932.762 681.936 L932.203 681.936 L931.644 681.936 L931.084 681.936 L930.525 681.936 L929.966 681.936 L929.406 681.936 L928.847 681.936 L928.288 681.936 L927.729 681.936 L927.169 681.936 L926.61 681.936 L926.051 681.936 L925.492 681.936 L924.932 681.936 L924.373 681.936 L923.814 681.936 L923.255 681.936 L922.695 681.936 L922.136 681.936 L921.577 681.936 L921.018 681.936 L920.458 681.936 L919.899 681.936 L919.34 681.936 L918.781 681.936 L918.221 681.936 L917.662 681.936 L917.103 681.936 L916.544 681.936 L915.984 681.936 L915.425 681.936 L914.866 681.936 L914.307 681.936 L913.747 681.936 L913.188 681.936 L912.629 681.936 L912.07 681.936 L911.51 681.936 L910.951 681.936 L910.392 681.936 L909.833 681.936 L909.273 681.936 L908.714 681.936 L908.155 681.936 L907.596 681.936 L907.036 681.936 L906.477 681.936 L905.918 681.936 L905.359 681.936 L904.799 681.936 L904.24 681.936 L903.681 681.936 L903.122 681.936 L902.562 681.936 L902.003 681.936 L901.444 681.936 L900.885 681.936 L900.325 681.936 L899.766 681.936 L899.207 681.936 L898.648 681.936 L898.088 681.936 L897.529 681.936 L896.97 681.936 L896.411 681.936 L895.851 681.936 L895.292 681.936 L894.733 681.936 L894.174 681.936 L893.614 681.936 L893.055 681.936 L892.496 681.936 L891.937 681.936 L891.377 681.936 L890.818 681.936 L890.259 681.936 L889.7 681.936 L889.14 681.936 L888.581 681.936 L888.022 681.936 L887.463 681.936 L886.903 681.936 L886.344 681.936 L885.785 681.936 L885.226 681.936 L884.666 681.936 L884.107 681.936 L883.548 681.936 L882.989 681.936 L882.429 681.936 L881.87 681.936 L881.311 681.936 L880.752 681.936 L880.192 681.936 L879.633 681.936 L879.074 681.936 L878.515 681.936 L877.955 681.936 L877.396 681.936 L876.837 681.936 L876.278 681.936 L875.718 681.936 L875.159 681.936 L874.6 681.936 L874.041 681.936 L873.481 681.936 L872.922 681.936 L872.363 681.936 L871.804 681.936 L871.244 681.936 L870.685 681.936 L870.126 681.936 L869.567 681.936 L869.007 681.936 L868.448 681.936 L867.889 681.936 L867.33 681.936 L866.77 681.936 L866.211 681.936 L865.652 681.936 L865.093 681.936 L864.533 681.936 L863.974 681.936 L863.415 681.936 L862.856 681.936 L862.296 681.936 L861.737 681.936 L861.178 681.936 L860.619 681.936 L860.059 681.936 L859.5 681.936 L858.941 681.936 L858.382 681.936 L857.822 681.936 L857.263 681.936 L856.704 681.936 L856.145 681.936 L855.585 681.936 L855.026 681.936 L854.467 681.936 L853.908 681.936 L853.348 681.936 L852.789 681.936 L852.23 681.936 L851.671 681.936 L851.111 681.936 L850.552 681.936 L849.993 681.936 L849.434 681.936 L848.874 681.936 L848.315 681.936 L847.756 681.936 L847.197 681.936 L846.637 681.936 L846.078 681.936 L845.519 681.936 L844.96 681.936 L844.4 681.936 L843.841 681.936 L843.282 681.936 L842.723 681.936 L842.163 681.936 L841.604 681.936 L841.045 681.936 L840.486 681.936 L839.926 681.936 L839.367 681.936 L838.808 681.936 L838.249 681.936 L837.689 681.936 L837.13 681.936 L836.571 681.936 L836.012 681.936 L835.452 681.936 L834.893 681.936 L834.334 681.936 L833.775 681.936 L833.215 681.936 L832.656 681.936 L832.097 681.936 L831.538 681.936 L830.978 681.936 L830.419 681.936 L829.86 681.936 L829.301 681.936 L828.741 681.936 L828.182 681.936 L827.623 681.936 L827.064 681.936 L826.504 681.936 L825.945 681.936 L825.386 681.936 L824.827 681.936 L824.267 681.936 L823.708 681.936 L823.149 681.936 L822.59 681.936 L822.03 681.936 L821.471 681.936 L820.912 681.936 L820.353 681.936 L819.793 681.936 L819.234 681.936 L818.675 681.936 L818.116 681.936 L817.556 681.936 L816.997 681.936 L816.438 681.936 L815.879 681.936 L815.319 681.936 L814.76 681.936 L814.201 681.936 L813.642 681.936 L813.082 681.936 L812.523 681.936 L811.964 681.936 L811.405 681.936 L810.845 681.936 L810.286 681.936 L809.727 681.936 L809.168 681.936 L808.608 681.936 L808.049 681.936 L807.49 681.936 L806.931 681.936 L806.371 681.936 L805.812 681.936 L805.253 681.936 L804.693 681.936 L804.134 681.936 L803.575 681.936 L803.016 681.936 L802.456 681.936 L801.897 681.936 L801.338 681.936 L800.779 681.936 L800.219 681.936 L799.66 681.936 L799.101 681.936 L798.542 681.936 L797.982 681.936 L797.423 681.936 L796.864 681.936 L796.305 681.936 L795.745 681.936 L795.186 681.936 L794.627 681.936 L794.068 681.936 L793.508 681.936 L792.949 681.936 L792.39 681.936 L791.831 681.936 L791.271 681.936 L790.712 681.936 L790.153 681.936 L789.594 681.936 L789.034 681.936 L788.475 681.936 L787.916 681.936 L787.357 681.936 L786.797 681.936 L786.238 681.936 L785.679 681.936 L785.12 681.936 L784.56 681.936 L784.001 681.936 L783.442 681.936 L782.883 681.936 L782.323 681.936 L781.764 681.936 L781.205 681.936 L780.646 681.936 L780.086 681.936 L779.527 681.936 L778.968 681.936 L778.409 681.936 L777.849 681.936 L777.29 681.936 L776.731 681.936 L776.172 681.936 L775.612 681.936 L775.053 681.936 L774.494 681.936 L773.935 681.936 L773.375 681.936 L772.816 681.936 L772.257 681.936 L771.698 681.936 L771.138 681.936 L770.579 681.936 L770.02 681.936 L769.461 681.936 L768.901 681.936 L768.342 681.936 L767.783 681.936 L767.224 681.936 L766.664 681.936 L766.105 681.936 L765.546 681.936 L764.987 681.936 L764.427 681.936 L763.868 681.936 L763.309 681.936 L762.75 681.936 L762.19 681.936 L761.631 681.936 L761.072 681.936 L760.513 681.936 L759.953 681.936 L759.394 681.936 L758.835 681.936 L758.276 681.936 L757.716 681.936 L757.157 681.936 L756.598 681.936 L756.039 681.936 L755.479 681.936 L754.92 681.936 L754.361 681.936 L753.802 681.936 L753.242 681.936 L752.683 681.936 L752.124 681.936 L751.565 681.936 L751.005 681.936 L750.446 681.936 L749.887 681.936 L749.328 681.936 L748.768 681.936 L748.209 681.936 L747.65 681.936 L747.091 681.936 L746.531 681.936 L745.972 681.936 L745.413 681.936 L744.854 681.936 L744.294 681.936 L743.735 681.936 L743.176 681.936 L742.617 681.936 L742.057 681.936 L741.498 681.936 L740.939 681.936 L740.38 681.936 L739.82 681.936 L739.261 681.936 L738.702 681.936 L738.143 681.936 L737.583 681.936 L737.024 681.936 L736.465 681.936 L735.906 681.936 L735.346 681.936 L734.787 681.936 L734.228 681.936 L733.669 681.936 L733.109 681.936 L732.55 681.936 L731.991 681.936 L731.432 681.936 L730.872 681.936 L730.313 681.936 L729.754 681.936 L729.195 681.936 L728.635 681.936 L728.076 681.936 L727.517 681.936 L726.958 681.936 L726.398 681.936 L725.839 681.936 L725.28 681.936 L724.721 681.936 L724.161 681.936 L723.602 681.936 L723.043 681.936 L722.484 681.936 L721.924 681.936 L721.365 681.936 L720.806 681.936 L720.247 681.936  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.69 720.806,682.69 721.365,682.69 721.924,682.69 722.484,682.69 723.043,682.69 723.602,682.69 724.161,682.69 724.721,682.69 725.28,682.69 725.839,682.69 726.398,682.69 726.958,682.69 727.517,682.69 728.076,682.69 728.635,682.69 729.195,682.69 729.754,682.69 730.313,682.69 730.872,682.69 731.432,682.69 731.991,682.69 732.55,682.69 733.109,682.69 733.669,682.69 734.228,682.69 734.787,682.69 735.346,682.69 735.906,682.69 736.465,682.69 737.024,682.69 737.583,682.69 738.143,682.69 738.702,682.69 739.261,682.69 739.82,682.69 740.38,682.69 740.939,682.69 741.498,682.69 742.057,682.69 742.617,682.69 743.176,682.69 743.735,682.69 744.294,682.69 744.854,682.69 745.413,682.69 745.972,682.69 746.531,682.69 747.091,682.69 747.65,682.69 748.209,682.69 748.768,682.69 749.328,682.69 749.887,682.69 750.446,682.69 751.005,682.69 751.565,682.69 752.124,682.69 752.683,682.69 753.242,682.69 753.802,682.69 754.361,682.69 754.92,682.69 755.479,682.69 756.039,682.69 756.598,682.69 757.157,682.69 757.716,682.69 758.276,682.69 758.835,682.69 759.394,682.69 759.953,682.69 760.513,682.69 761.072,682.69 761.631,682.69 762.19,682.69 762.75,682.69 763.309,682.69 763.868,682.69 764.427,682.69 764.987,682.69 765.546,682.69 766.105,682.69 766.664,682.69 767.224,682.69 767.783,682.69 768.342,682.69 768.901,682.69 769.461,682.69 770.02,682.69 770.579,682.69 771.138,682.69 771.698,682.69 772.257,682.69 772.816,682.69 773.375,682.69 773.935,682.69 774.494,682.69 775.053,682.69 775.612,682.69 776.172,682.69 776.731,682.69 777.29,682.69 777.849,682.69 778.409,682.69 778.968,682.69 779.527,682.69 780.086,682.69 780.646,682.69 781.205,682.69 781.764,682.69 782.323,682.69 782.883,682.69 783.442,682.69 784.001,682.69 784.56,682.69 785.12,682.69 785.679,682.69 786.238,682.69 786.797,682.69 787.357,682.69 787.916,682.69 788.475,682.69 789.034,682.69 789.594,682.69 790.153,682.69 790.712,682.69 791.271,682.69 791.831,682.69 792.39,682.69 792.949,682.69 793.508,682.69 794.068,682.69 794.627,682.69 795.186,682.69 795.745,682.69 796.305,682.69 796.864,682.69 797.423,682.69 797.982,682.69 798.542,682.69 799.101,682.69 799.66,682.69 800.219,682.69 800.779,682.69 801.338,682.69 801.897,682.69 802.456,682.69 803.016,682.69 803.575,682.69 804.134,682.69 804.693,682.69 805.253,682.69 805.812,682.69 806.371,682.69 806.931,682.69 807.49,682.69 808.049,682.69 808.608,682.69 809.168,682.69 809.727,682.69 810.286,682.69 810.845,682.69 811.405,682.69 811.964,682.69 812.523,682.69 813.082,682.69 813.642,682.69 814.201,682.69 814.76,682.69 815.319,682.69 815.879,682.69 816.438,682.69 816.997,682.69 817.556,682.69 818.116,682.69 818.675,682.69 819.234,682.69 819.793,682.69 820.353,682.69 820.912,682.69 821.471,682.69 822.03,682.69 822.59,682.69 823.149,682.69 823.708,682.69 824.267,682.69 824.827,682.69 825.386,682.69 825.945,682.69 826.504,682.69 827.064,682.69 827.623,682.69 828.182,682.69 828.741,682.69 829.301,682.69 829.86,682.69 830.419,682.69 830.978,682.69 831.538,682.69 832.097,682.69 832.656,682.69 833.215,682.69 833.775,682.69 834.334,682.69 834.893,682.69 835.452,682.69 836.012,682.69 836.571,682.69 837.13,682.69 837.689,682.69 838.249,682.69 838.808,682.69 839.367,682.69 839.926,682.69 840.486,682.69 841.045,682.69 841.604,682.69 842.163,682.69 842.723,682.69 843.282,682.69 843.841,682.69 844.4,682.69 844.96,682.69 845.519,682.69 846.078,682.69 846.637,682.69 847.197,682.69 847.756,682.69 848.315,682.69 848.874,682.69 849.434,682.69 849.993,682.69 850.552,682.69 851.111,682.69 851.671,682.69 852.23,682.69 852.789,682.69 853.348,682.69 853.908,682.69 854.467,682.69 855.026,682.69 855.585,682.69 856.145,682.69 856.704,682.69 857.263,682.69 857.822,682.69 858.382,682.69 858.941,682.69 859.5,682.69 860.059,682.69 860.619,682.69 861.178,682.69 861.737,682.69 862.296,682.69 862.856,682.69 863.415,682.69 863.974,682.69 864.533,682.69 865.093,682.69 865.652,682.69 866.211,682.69 866.77,682.69 867.33,682.69 867.889,682.69 868.448,682.69 869.007,682.69 869.567,682.69 870.126,682.69 870.685,682.69 871.244,682.69 871.804,682.69 872.363,682.69 872.922,682.69 873.481,682.69 874.041,682.69 874.6,682.69 875.159,682.69 875.718,682.69 876.278,682.69 876.837,682.69 877.396,682.69 877.955,682.69 878.515,682.69 879.074,682.69 879.633,682.69 880.192,682.69 880.752,682.69 881.311,682.69 881.87,682.69 882.429,682.69 882.989,682.69 883.548,682.69 884.107,682.69 884.666,682.69 885.226,682.69 885.785,682.69 886.344,682.69 886.903,682.69 887.463,682.69 888.022,682.69 888.581,682.69 889.14,682.69 889.7,682.69 890.259,682.69 890.818,682.69 891.377,682.69 891.937,682.69 892.496,682.69 893.055,682.69 893.614,682.69 894.174,682.69 894.733,682.69 895.292,682.69 895.851,682.69 896.411,682.69 896.97,682.69 897.529,682.69 898.088,682.69 898.648,682.69 899.207,682.69 899.766,682.69 900.325,682.69 900.885,682.69 901.444,682.69 902.003,682.69 902.562,682.69 903.122,682.69 903.681,682.69 904.24,682.69 904.799,682.69 905.359,682.69 905.918,682.69 906.477,682.69 907.036,682.69 907.596,682.69 908.155,682.69 908.714,682.69 909.273,682.69 909.833,682.69 910.392,682.69 910.951,682.69 911.51,682.69 912.07,682.69 912.629,682.69 913.188,682.69 913.747,682.69 914.307,682.69 914.866,682.69 915.425,682.69 915.984,682.69 916.544,682.69 917.103,682.69 917.662,682.69 918.221,682.69 918.781,682.69 919.34,682.69 919.899,682.69 920.458,682.69 921.018,682.69 921.577,682.69 922.136,682.69 922.695,682.69 923.255,682.69 923.814,682.69 924.373,682.69 924.932,682.69 925.492,682.69 926.051,682.69 926.61,682.69 927.169,682.69 927.729,682.69 928.288,682.69 928.847,682.69 929.406,682.69 929.966,682.69 930.525,682.69 931.084,682.69 931.644,682.69 932.203,682.69 932.762,682.69 933.321,682.69 933.881,682.69 934.44,682.69 934.999,682.69 935.558,682.69 936.118,682.69 936.677,682.69 937.236,682.69 937.795,682.69 938.355,682.69 938.914,682.69 939.473,682.69 940.032,682.69 940.592,682.69 941.151,682.69 941.71,682.69 942.269,682.69 942.829,682.69 943.388,682.69 943.947,682.69 944.506,682.69 945.066,682.69 945.625,682.69 946.184,682.69 946.743,682.69 947.303,682.69 947.862,682.69 948.421,682.69 948.98,682.69 949.54,682.69 950.099,682.69 950.658,682.69 951.217,682.69 951.777,682.69 952.336,682.69 952.895,682.69 953.454,682.69 954.014,682.69 954.573,682.69 955.132,682.69 955.691,682.69 956.251,682.69 956.81,682.69 957.369,682.69 957.928,682.69 958.488,682.69 959.047,682.69 959.606,682.69 960.165,682.69 960.725,682.69 961.284,682.69 961.843,682.69 962.402,682.69 962.962,682.69 963.521,682.69 964.08,682.69 964.639,682.69 965.199,682.69 965.758,682.69 966.317,682.69 966.876,682.69 967.436,682.69 967.995,682.69 968.554,682.69 969.113,682.69 969.673,682.69 970.232,682.69 970.791,682.69 971.35,682.69 971.91,682.69 972.469,682.69 973.028,682.69 973.587,682.69 974.147,682.69 974.706,682.69 975.265,682.69 975.824,682.69 976.384,682.69 976.943,682.69 977.502,682.69 978.061,682.69 978.621,682.69 979.18,682.69 979.739,682.69 980.298,682.69 980.858,682.69 981.417,682.69 981.976,682.69 982.535,682.69 983.095,682.69 983.654,682.69 984.213,682.69 984.772,682.69 985.332,682.69 985.891,682.69 986.45,682.69 987.009,682.69 987.569,682.69 988.128,682.69 988.687,682.69 989.246,682.69 989.806,682.69 990.365,682.69 990.924,682.69 991.483,682.69 992.043,682.69 992.602,682.69 993.161,682.69 993.72,682.69 994.28,682.69 994.839,682.69 995.398,682.69 995.957,682.69 996.517,682.69 997.076,682.69 997.635,682.69 998.194,682.69 998.754,682.69 999.313,682.69 999.872,682.69 1000.43,682.69 1000.99,682.69 1001.55,682.69 1002.11,682.69 1002.67,682.69 1003.23,682.69 1003.79,682.69 1004.35,682.69 1004.91,682.69 1005.46,682.69 1006.02,682.69 1006.58,682.69 1007.14,682.69 1007.7,682.69 1008.26,682.69 1008.82,682.69 1009.38,682.69 1009.94,682.69 1010.5,682.69 1011.06,682.69 1011.62,682.69 1012.18,682.69 1012.73,682.69 1013.29,682.69 1013.85,682.69 1014.41,682.69 1014.97,682.69 1015.53,682.69 1016.09,682.69 1016.65,682.69 1017.21,682.69 1017.77,682.69 1018.33,682.69 1018.89,682.69 1019.45,682.69 1020.01,682.69 1020.56,682.69 1021.12,682.69 1021.68,682.69 1022.24,682.69 1022.8,682.69 1023.36,682.69 1023.92,682.69 1024.48,682.69 1025.04,682.69 1025.6,682.69 1026.16,682.69 1026.72,682.69 1027.28,682.69 1027.83,682.69 1028.39,682.69 1028.95,682.69 1029.51,682.69 1030.07,682.69 1030.63,682.69 1031.19,682.69 1031.75,682.69 1032.31,682.69 1032.87,682.69 1033.43,682.69 1033.99,682.69 1034.55,682.69 1035.1,682.69 1035.66,682.69 1036.22,682.69 1036.78,682.69 1037.34,682.69 1037.9,682.69 1038.46,682.69 1039.02,682.69 1039.58,682.69 1040.14,682.69 1040.7,682.69 1041.26,682.69 1041.82,682.69 1042.38,682.69 1042.93,682.69 1043.49,682.69 1044.05,682.69 1044.61,682.69 1045.17,682.69 1045.73,682.69 1046.29,682.69 1046.85,682.69 1047.41,682.69 1047.97,682.69 1048.53,682.69 1049.09,682.69 1049.65,682.69 1050.2,682.69 1050.76,682.69 1051.32,682.69 1051.88,682.69 1052.44,682.69 1053,682.69 1053.56,682.69 1054.12,682.69 1054.68,682.69 1055.24,682.69 1055.8,682.69 1056.36,682.69 1056.92,682.69 1057.48,682.69 1058.03,682.69 1058.59,682.69 1059.15,682.69 1059.71,682.69 1060.27,682.69 1060.83,682.69 1061.39,682.69 1061.95,682.69 1062.51,682.69 1063.07,682.69 1063.63,682.69 1064.19,682.69 1064.75,682.69 1065.3,682.69 1065.86,682.69 1066.42,682.69 1066.98,682.69 1067.54,682.69 1068.1,682.69 1068.66,682.69 1069.22,682.69 1069.78,682.69 1070.34,682.69 1070.9,682.69 1071.46,682.69 1072.02,682.69 1072.57,682.69 1073.13,682.69 1073.69,682.69 1074.25,682.69 1074.81,682.69 1075.37,682.69 1075.93,682.69 1076.49,682.69 1077.05,682.69 1077.61,682.69 1078.17,682.69 1078.73,682.69 1079.29,682.69 1079.85,682.69 1080.4,682.69 1080.96,682.69 1081.52,682.69 1082.08,682.69 1082.64,682.69 1083.2,682.69 1083.76,682.69 1084.32,682.69 1084.88,682.69 1085.44,682.69 1086,682.69 1086.56,682.69 1087.12,682.69 1087.67,682.69 1088.23,682.69 1088.79,682.69 1089.35,682.69 1089.91,682.69 1090.47,682.69 1091.03,682.69 1091.59,682.69 1092.15,682.69 1092.71,682.69 1093.27,682.69 1093.83,682.69 1094.39,682.69 1094.94,682.69 1095.5,682.69 1096.06,682.69 1096.62,682.69 1097.18,682.69 1097.74,682.69 1098.3,682.69 1098.86,682.69 1099.42,682.69 1099.98,682.69 1100.54,682.69 1101.1,682.69 1101.66,682.69 1102.22,682.69 1102.77,682.69 1103.33,682.69 1103.89,682.69 1104.45,682.69 1105.01,682.69 1105.57,682.69 1106.13,682.69 1106.69,682.69 1107.25,682.69 1107.81,682.69 1108.37,682.69 1108.93,682.69 1109.49,682.69 1110.04,682.69 1110.6,682.69 1111.16,682.69 1111.72,682.69 1112.28,682.69 1112.84,682.69 1113.4,682.69 1113.96,682.69 1114.52,682.69 1115.08,682.69 1115.64,682.69 1116.2,682.69 1116.76,682.69 1117.31,682.69 1117.87,682.69 1118.43,682.69 1118.99,682.69 1119.55,682.69 1120.11,682.69 1120.67,682.69 1121.23,682.69 1121.79,682.69 1122.35,682.69 1122.91,682.69 1123.47,682.69 1124.03,682.69 1124.59,682.69 1125.14,682.69 1125.7,682.69 1126.26,682.69 1126.82,682.69 1127.38,682.69 1127.94,682.69 1128.5,682.69 1129.06,682.69 1129.62,682.69 1130.18,682.69 1130.74,682.69 1131.3,682.69 1131.86,682.69 1132.41,682.69 1132.97,682.69 1133.53,682.69 1134.09,682.69 1134.65,682.69 1135.21,682.69 1135.77,682.69 1136.33,682.69 1136.89,682.69 1137.45,682.69 1138.01,682.69 1138.57,682.69 1139.13,682.69 1139.68,682.69 1140.24,682.69 1140.8,682.69 1141.36,682.69 1141.92,682.69 1142.48,682.69 1143.04,682.69 1143.6,682.69 1144.16,682.69 1144.72,682.69 1145.28,682.69 1145.84,682.69 1146.4,682.69 1146.96,682.69 1147.51,682.69 1148.07,682.69 1148.63,682.69 1149.19,682.69 1149.75,682.69 1150.31,682.69 1150.87,682.69 1151.43,682.69 1151.99,682.69 1152.55,682.69 1153.11,682.69 1153.67,682.69 1154.23,682.69 1154.78,682.69 1155.34,682.69 1155.9,682.69 1156.46,682.69 1157.02,682.69 1157.58,682.69 1158.14,682.69 1158.7,682.69 1159.26,682.69 1159.82,682.69 1160.38,682.69 1160.94,682.69 1161.5,682.69 1162.05,682.69 1162.61,682.69 1163.17,682.69 1163.73,682.69 1164.29,682.69 1164.85,682.69 1165.41,682.69 1165.97,682.69 1166.53,682.69 1167.09,682.69 1167.65,682.69 1168.21,682.69 1168.77,682.69 1169.33,682.69 1169.88,682.69 1170.44,682.69 1171,682.69 1171.56,682.69 1172.12,682.69 1172.68,682.69 1173.24,682.69 1173.8,682.69 1174.36,682.69 1174.92,682.69 1175.48,682.69 1176.04,682.69 1176.6,682.69 1177.15,682.69 1177.71,682.69 1178.27,682.69 1178.83,682.69 1179.39,682.69 1179.95,682.69 1180.51,682.69 1181.07,682.69 1181.63,682.69 1182.19,682.69 1182.75,682.69 1183.31,682.69 1183.87,682.69 1184.43,682.69 1184.98,682.69 1185.54,682.69 1186.1,682.69 1186.66,682.69 1187.22,682.69 1187.78,682.69 1188.34,682.69 1188.9,682.69 1189.46,682.69 1190.02,682.69 1190.58,682.69 1191.14,682.69 1191.7,682.69 1192.25,682.69 1192.81,682.69 1193.37,682.69 1193.93,682.69 1194.49,682.69 1195.05,682.69 1195.61,682.69 1196.17,682.69 1196.73,682.69 1197.29,682.69 1197.85,682.69 1198.41,682.69 1198.97,682.69 1199.52,682.69 1200.08,682.69 1200.64,682.69 1201.2,682.69 1201.76,682.69 1202.32,682.69 1202.88,682.69 1203.44,682.69 1204,682.69 1204.56,682.69 1205.12,682.69 1205.68,682.69 1206.24,682.69 1206.8,682.69 1207.35,682.69 1207.91,682.69 1208.47,682.69 1209.03,682.69 1209.59,682.69 1210.15,682.69 1210.71,682.69 1211.27,682.69 1211.83,682.69 1212.39,682.69 1212.95,682.69 1213.51,682.69 1214.07,682.69 1214.62,682.69 1215.18,682.69 1215.74,682.69 1216.3,682.69 1216.86,682.69 1217.42,682.69 1217.98,682.69 1218.54,682.69 1219.1,682.69 1219.66,682.69 1220.22,682.69 1220.78,682.69 1221.34,682.69 1221.89,682.69 1222.45,682.69 1223.01,682.69 1223.57,682.69 1224.13,682.69 1224.69,682.69 1225.25,682.69 1225.81,682.69 1226.37,682.69 1226.93,682.69 1227.49,682.69 1228.05,682.69 1228.61,682.69 1229.17,682.69 1229.72,682.69 1230.28,682.69 1230.84,682.69 1231.4,682.69 1231.96,682.69 1232.52,682.69 1233.08,682.69 1233.64,682.69 1234.2,682.69 1234.76,682.69 1235.32,682.69 1235.88,682.69 1236.44,682.69 1236.99,682.69 1237.55,682.69 1238.11,682.69 1238.67,682.69 1239.23,682.69 1239.79,682.69 1240.35,682.69 1240.91,682.69 1241.47,682.69 1242.03,682.69 1242.59,682.69 1243.15,682.69 1243.71,682.69 1244.26,682.69 1244.82,682.69 1245.38,682.69 1245.94,682.69 1246.5,682.69 1247.06,682.69 1247.62,682.69 1248.18,682.69 1248.74,682.69 1249.3,682.69 1249.86,682.69 1250.42,682.69 1250.98,682.69 1251.54,682.69 1252.09,682.69 1252.65,682.69 1253.21,682.69 1253.77,682.69 1254.33,682.69 1254.89,682.69 1255.45,682.69 1256.01,682.69 1256.57,682.69 1257.13,682.69 1257.69,682.69 1258.25,682.69 1258.81,682.69 1259.36,682.69 1259.92,682.69 1260.48,682.69 1261.04,682.69 1261.6,682.69 1262.16,682.69 1262.72,682.69 1263.28,682.69 1263.84,682.69 1264.4,682.69 1264.96,682.69 1265.52,682.69 1266.08,682.69 1266.63,682.69 1267.19,682.69 1267.75,682.69 1268.31,682.69 1268.87,682.69 1269.43,682.69 1269.99,682.69 1270.55,682.69 1271.11,682.69 1271.67,682.69 1272.23,682.69 1272.79,682.69 1273.35,682.69 1273.91,682.69 1274.46,682.69 1275.02,682.69 1275.58,682.69 1276.14,682.69 1276.7,682.69 1277.26,682.69 1277.82,682.69 1278.38,682.69 1278.94,682.69 1279.5,682.69 1280.06,682.69 1280.62,682.69 1281.18,682.69 1281.73,682.69 1282.29,682.69 1282.85,682.69 1283.41,682.69 1283.97,682.69 1284.53,682.69 1285.09,682.69 1285.65,682.69 1286.21,682.69 1286.77,682.69 1287.33,682.69 1287.89,682.69 1288.45,682.69 1289,682.69 1289.56,682.69 1290.12,682.69 1290.68,682.69 1291.24,682.69 1291.8,682.69 1292.36,682.69 1292.92,682.69 1293.48,682.69 1294.04,682.69 1294.6,682.69 1295.16,682.69 1295.72,682.69 1296.28,682.69 1296.83,682.69 1297.39,682.69 1297.95,682.69 1298.51,682.69 1299.07,682.69 1299.63,682.69 1300.19,682.69 1300.75,682.69 1301.31,682.69 1301.87,682.69 1302.43,682.69 1302.99,682.69 1303.55,682.69 1304.1,682.69 1304.66,682.69 1305.22,682.69 1305.78,682.69 1306.34,682.69 1306.9,682.69 1307.46,682.69 1308.02,682.69 1308.58,682.69 1309.14,682.69 1309.7,682.69 1310.26,682.69 1310.82,682.69 1311.38,682.69 1311.93,682.69 1312.49,682.69 1313.05,682.69 1313.61,682.69 1314.17,682.69 1314.73,682.69 1315.29,682.69 1315.85,682.69 1316.41,682.69 1316.97,682.69 1317.53,682.69 1318.09,682.69 1318.65,682.69 1319.2,682.69 1319.76,682.69 1320.32,682.69 1320.88,682.69 1321.44,682.69 1322,682.69 1322.56,682.69 1323.12,682.69 1323.68,682.69 1324.24,682.69 1324.8,682.69 1325.36,682.69 1325.92,682.69 1326.47,682.69 1327.03,682.69 1327.59,682.69 1328.15,682.69 1328.71,682.69 1329.27,682.69 1329.83,682.69 1330.39,682.69 1330.95,682.69 1331.51,682.69 1332.07,682.69 1332.63,682.69 1333.19,682.69 1333.75,682.69 1334.3,682.69 1334.86,682.69 1335.42,682.69 1335.98,682.69 1336.54,682.69 1337.1,682.69 1337.66,682.69 1338.22,682.69 1338.78,682.69 1339.34,682.69 1339.9,682.69 1340.46,682.69 1341.02,682.69 1341.57,682.69 1342.13,682.69 1342.69,682.69 1343.25,682.69 1343.81,682.69 1344.37,682.69 1344.93,682.69 1345.49,682.69 1346.05,682.69 1346.61,682.69 1347.17,682.69 1347.73,682.69 1348.29,682.69 1348.84,682.69 1349.4,682.69 1349.96,682.69 1350.52,682.69 1351.08,682.69 1351.64,682.69 1352.2,682.69 1352.76,682.69 1353.32,682.69 1353.88,682.69 1354.44,682.69 1355,682.69 1355.56,682.69 1356.12,682.69 1356.67,682.69 1357.23,682.69 1357.79,682.69 1358.35,682.69 1358.91,682.69 1359.47,682.69 1360.03,682.69 1360.59,682.69 1361.15,682.69 1361.71,682.69 1362.27,682.69 1362.83,682.69 1363.39,682.69 1363.94,682.69 1364.5,682.69 1365.06,682.69 1365.62,682.69 1366.18,682.69 1366.74,682.69 1367.3,682.69 1367.86,682.69 1368.42,682.69 1368.98,682.69 1369.54,682.69 1370.1,682.69 1370.66,682.69 1371.21,682.69 1371.77,682.69 1372.33,682.69 1372.89,682.69 1373.45,682.69 1374.01,682.69 1374.57,682.69 1375.13,682.69 1375.69,682.69 1376.25,682.69 1376.81,682.69 1377.37,682.69 1377.93,682.69 1378.49,682.69 1379.04,682.69 1379.6,682.69 1380.16,682.69 1380.72,682.69 1381.28,682.69 1381.84,682.69 1382.4,682.69 1382.96,682.69 1383.52,682.69 1384.08,682.69 1384.64,682.69 1385.2,682.69 1385.76,682.69 1386.31,682.69 1386.87,682.69 1387.43,682.69 1387.99,682.69 1388.55,682.69 1389.11,682.69 1389.67,682.69 1390.23,682.69 1390.79,682.69 1391.35,682.69 1391.91,682.69 1392.47,682.69 1393.03,682.69 1393.58,682.69 1394.14,682.69 1394.7,682.69 1395.26,682.69 1395.82,682.69 1396.38,682.69 1396.94,682.69 1397.5,682.69 1398.06,682.69 1398.62,682.69 1399.18,682.69 1399.74,682.69 1400.3,682.69 1400.86,682.69 1401.41,682.69 1401.97,682.69 1402.53,682.69 1403.09,682.69 1403.65,682.69 1404.21,682.69 1404.77,682.69 1405.33,682.69 1405.89,682.69 1406.45,682.69 1407.01,682.69 1407.57,682.69 1408.13,682.69 1408.68,682.69 1409.24,682.69 1409.8,682.69 1410.36,682.69 1410.92,682.69 1411.48,682.69 1412.04,682.69 1412.6,682.69 1413.16,682.69 1413.72,682.69 1414.28,682.69 1414.84,682.69 1415.4,682.69 1415.95,682.69 1416.51,682.69 1417.07,682.69 1417.63,682.69 1418.19,682.69 1418.75,682.69 1419.31,682.69 1419.87,682.69 1420.43,682.69 1420.99,682.69 1421.55,682.69 1422.11,682.69 1422.67,682.69 1423.23,682.69 1423.78,682.69 1424.34,682.69 1424.9,682.69 1425.46,682.69 1426.02,682.69 1426.58,682.69 1427.14,682.69 1427.7,682.69 1428.26,682.69 1428.82,682.69 1429.38,682.69 1429.94,682.69 1430.5,682.69 1431.05,682.69 1431.61,682.69 1432.17,682.69 1432.73,682.69 1433.29,682.69 1433.85,682.69 1434.41,682.69 1434.97,682.69 1435.53,682.69 1436.09,682.69 1436.65,682.69 1437.21,682.69 1437.77,682.69 1438.33,682.69 1438.88,682.69 1439.44,682.69 1440,682.69 1440.56,682.69 1441.12,682.69 1441.68,682.69 1442.24,682.69 1442.8,682.69 1443.36,682.69 1443.92,682.69 1444.48,682.69 1445.04,682.69 1445.6,682.69 1446.15,682.69 1446.71,682.69 1447.27,682.69 1447.83,682.69 1448.39,682.69 1448.95,682.69 1449.51,682.69 1450.07,682.69 1450.63,682.69 1451.19,682.69 1451.75,682.69 1452.31,682.69 1452.87,682.69 1453.42,682.69 1453.98,682.69 1454.54,682.69 1455.1,682.69 1455.66,682.69 1456.22,682.69 1456.78,682.69 1457.34,682.69 1457.9,682.69 1458.46,682.69 1459.02,682.69 1459.58,682.69 1460.14,682.69 1460.7,682.69 1461.25,682.69 1461.81,682.69 1462.37,682.69 1462.93,682.69 1463.49,682.69 1464.05,682.69 1464.61,682.69 1465.17,682.69 1465.73,682.69 1466.29,682.69 1466.85,682.69 1467.41,682.69 1467.97,682.69 1468.52,682.69 1469.08,682.69 1469.64,682.69 1470.2,682.69 1470.76,682.69 1471.32,682.69 1471.88,682.69 1472.44,682.69 1473,682.69 1473.56,682.69 1474.12,682.69 1474.68,682.69 1475.24,682.69 1475.79,682.69 1476.35,682.69 1476.91,682.69 1477.47,682.69 1478.03,682.69 1478.59,682.69 1479.15,682.69 1479.71,682.69 1480.27,682.69 1480.83,682.69 1481.39,682.69 1481.95,682.69 1482.51,682.69 1483.07,682.69 1483.62,682.69 1484.18,682.69 1484.74,682.69 1485.3,682.69 1485.86,682.69 1486.42,682.69 1486.98,682.69 1487.54,682.69 1488.1,682.69 1488.66,682.69 1489.22,682.69 1489.78,682.69 1490.34,682.69 1490.89,682.69 1491.45,682.69 1492.01,682.69 1492.57,682.69 1493.13,682.69 1493.69,682.69 1494.25,682.69 1494.81,682.69 1495.37,682.69 1495.93,682.69 1496.49,682.69 1497.05,682.69 1497.61,682.69 1498.16,682.69 1498.72,682.69 1499.28,682.69 1499.84,682.69 1500.4,682.69 1500.96,682.69 1501.52,682.69 1502.08,682.69 1502.64,682.69 1503.2,682.69 1503.76,682.69 1504.32,682.69 1504.88,682.69 1505.44,682.69 1505.99,682.69 1506.55,682.69 1507.11,682.69 1507.67,682.69 1508.23,682.69 1508.79,682.69 1509.35,682.69 1509.91,682.69 1510.47,682.69 1511.03,682.69 1511.59,682.69 1512.15,682.69 1512.71,682.69 1513.26,682.69 1513.82,682.69 1514.38,682.69 1514.94,682.69 1515.5,682.69 1516.06,682.69 1516.62,682.69 1517.18,682.69 1517.74,682.69 1518.3,682.69 1518.86,682.69 1519.42,682.69 1519.98,682.69 1520.53,682.69 1521.09,682.69 1521.65,682.69 1522.21,682.69 1522.77,682.69 1523.33,682.69 1523.89,682.69 1524.45,682.69 1525.01,682.69 1525.57,682.69 1526.13,682.69 1526.69,682.69 1527.25,682.69 1527.81,682.69 1528.36,682.69 1528.92,682.69 1529.48,682.69 1530.04,682.69 1530.6,682.69 1531.16,682.69 1531.72,682.69 1532.28,682.69 1532.84,682.69 1533.4,682.69 1533.96,682.69 1534.52,682.69 1535.08,682.69 1535.63,682.69 1536.19,682.69 1536.75,682.69 1537.31,682.69 1537.87,682.69 1538.43,682.69 1538.99,682.69 1539.55,682.69 1540.11,682.69 1540.67,682.69 1541.23,682.69 1541.79,682.69 1542.35,682.69 1542.9,682.69 1543.46,682.69 1544.02,682.69 1544.58,682.69 1545.14,682.69 1545.7,682.69 1546.26,682.69 1546.82,682.69 1547.38,682.69 1547.94,682.69 1548.5,682.69 1549.06,682.69 1549.62,682.69 1550.18,682.69 1550.73,682.69 1551.29,682.69 1551.85,682.69 1552.41,682.69 1552.97,682.69 1553.53,682.69 1554.09,682.69 1554.65,682.69 1555.21,682.69 1555.77,682.69 1556.33,682.69 1556.89,682.69 1557.45,682.69 1558,682.69 1558.56,682.69 1559.12,682.69 1559.68,682.69 1560.24,682.69 1560.8,682.69 1561.36,682.69 1561.92,682.69 1562.48,682.69 1563.04,682.69 1563.6,682.69 1564.16,682.69 1564.72,682.69 1565.28,682.69 1565.83,682.69 1566.39,682.69 1566.95,682.69 1567.51,682.69 1568.07,682.69 1568.63,682.69 1569.19,682.69 1569.75,682.69 1570.31,682.69 1570.87,682.69 1571.43,682.69 1571.99,682.69 1572.55,682.69 1573.1,682.69 1573.66,682.69 1574.22,682.69 1574.78,682.69 1575.34,682.69 1575.9,682.69 1576.46,682.69 1577.02,682.69 1577.58,682.69 1578.14,682.69 1578.7,682.69 1579.26,682.69 1579.82,682.69 1580.37,682.69 1580.93,682.69 1581.49,682.69 1582.05,682.69 1582.61,682.69 1583.17,682.69 1583.73,682.69 1584.29,682.69 1584.85,682.69 1585.41,682.69 1585.97,682.69 1586.53,682.69 1587.09,682.69 1587.65,682.69 1588.2,682.69 1588.76,682.69 1589.32,682.69 1589.88,682.69 1590.44,682.69 1591,682.69 1591.56,682.69 1592.12,682.69 1592.68,682.69 1593.24,682.69 1593.8,682.69 1594.36,682.69 1594.92,682.69 1595.47,682.69 1596.03,682.69 1596.59,682.69 1597.15,682.69 1597.71,682.69 1598.27,682.69 1598.83,682.69 1599.39,682.69 1599.95,682.69 1600.51,682.69 1601.07,682.69 1601.63,682.69 1602.19,682.69 1602.74,682.69 1603.3,682.69 1603.86,682.69 1604.42,682.69 1604.98,682.69 1605.54,682.69 1606.1,682.69 1606.66,682.69 1607.22,682.69 1607.78,682.69 1608.34,682.69 1608.9,682.69 1609.46,682.69 1610.02,682.69 1610.57,682.69 1611.13,682.69 1611.69,682.69 1612.25,682.69 1612.81,682.69 1613.37,682.69 1613.93,682.69 1614.49,682.69 1615.05,682.69 1615.61,682.69 1616.17,682.69 1616.73,682.69 1617.29,682.69 1617.84,682.69 1618.4,682.69 1618.96,682.69 1619.52,682.69 1620.08,682.69 1620.64,682.69 1621.2,682.69 1621.76,682.69 1622.32,682.69 1622.88,682.69 1623.44,682.69 1624,682.69 1624.56,682.69 1625.11,682.69 1625.67,682.69 1626.23,682.69 1626.79,682.69 1627.35,682.69 1627.91,682.69 1628.47,682.69 1629.03,682.69 1629.59,682.69 1630.15,682.69 1630.71,682.69 1631.27,682.69 1631.83,682.69 1632.39,682.69 1632.94,682.69 1633.5,682.69 1634.06,682.69 1634.62,682.69 1635.18,682.69 1635.74,682.69 1636.3,682.69 1636.86,682.69 1637.42,682.69 1637.98,682.69 1638.54,682.69 1639.1,682.69 1639.66,682.69 1640.21,682.69 1640.77,682.69 1641.33,682.69 1641.89,682.69 1642.45,682.69 1643.01,682.69 1643.57,682.69 1644.13,682.69 1644.69,682.69 1645.25,682.69 1645.81,682.69 1646.37,682.69 1646.93,682.69 1647.48,682.69 1648.04,682.69 1648.6,682.69 1649.16,682.69 1649.72,682.69 1650.28,682.69 1650.84,682.69 1651.4,682.69 1651.96,682.69 1652.52,682.69 1653.08,682.69 1653.64,682.69 1654.2,682.69 1654.76,682.69 1655.31,682.69 1655.87,682.69 1656.43,682.69 1656.99,682.69 1657.55,682.69 1658.11,682.69 1658.67,682.69 1659.23,682.69 1659.79,682.69 1660.35,682.69 1660.91,682.69 1661.47,682.69 1662.03,682.69 1662.58,682.69 1663.14,682.69 1663.7,682.69 1664.26,682.69 1664.82,682.69 1665.38,682.69 1665.94,682.69 1666.5,682.69 1667.06,682.69 1667.62,682.69 1668.18,682.69 1668.74,682.69 1669.3,682.69 1669.85,682.69 1670.41,682.69 1670.97,682.69 1671.53,682.69 1672.09,682.69 1672.65,682.69 1673.21,682.69 1673.77,682.69 1674.33,682.69 1674.89,682.69 1675.45,682.69 1676.01,682.69 1676.57,682.69 1677.13,682.69 1677.68,682.69 1678.24,682.69 1678.8,682.69 1679.36,682.69 1679.92,682.69 1680.48,682.69 1681.04,682.69 1681.6,682.69 1682.16,682.69 1682.72,682.69 1683.28,682.69 1683.84,682.69 1684.4,682.69 1684.95,682.69 1685.51,682.69 1686.07,682.69 1686.63,682.69 1687.19,682.69 1687.75,682.69 1688.31,682.69 1688.87,682.69 1689.43,682.69 1689.99,682.69 1690.55,682.69 1691.11,682.69 1691.67,682.69 1692.23,682.69 1692.78,682.69 1693.34,682.69 1693.9,682.69 1694.46,682.69 1695.02,682.69 1695.58,682.69 1696.14,682.69 1696.7,682.69 1697.26,682.69 1697.82,682.69 1698.38,682.69 1698.94,682.69 1699.5,682.69 1700.05,682.69 1700.61,682.69 1701.17,682.69 1701.73,682.69 1702.29,682.69 1702.85,682.69 1703.41,682.69 1703.97,682.69 1704.53,682.69 1705.09,682.69 1705.65,682.69 1706.21,682.69 1706.77,682.69 1707.32,682.69 1707.88,682.69 1708.44,682.69 1709,682.69 1709.56,682.69 1710.12,682.69 1710.68,682.69 1711.24,682.69 1711.8,682.69 1712.36,682.69 1712.92,682.69 1713.48,682.69 1714.04,682.69 1714.6,682.69 1715.15,682.69 1715.71,682.69 1716.27,682.69 1716.83,682.69 1717.39,682.69 1717.95,682.69 1718.51,682.69 1719.07,682.69 1719.63,682.69 1720.19,682.69 1720.75,682.69 1721.31,682.69 1721.87,682.69 1722.42,682.69 1722.98,682.69 1723.54,682.69 1724.1,682.69 1724.66,682.69 1725.22,682.69 1725.78,682.69 1726.34,682.69 1726.9,682.69 1727.46,682.69 1728.02,682.69 1728.58,682.69 1729.14,682.69 1729.69,682.69 1730.25,682.69 1730.81,682.69 1731.37,682.69 1731.93,682.69 1732.49,682.69 1733.05,682.69 1733.61,682.69 1734.17,682.69 1734.73,682.69 1735.29,682.69 1735.85,682.69 1736.41,682.69 1736.97,682.69 1737.52,682.69 1738.08,682.69 1738.64,682.69 1739.2,682.69 1739.76,682.69 1740.32,682.69 1740.88,682.69 1741.44,682.69 1742,682.69 1742.56,682.69 1743.12,682.69 1743.68,682.69 1744.24,682.69 1744.79,682.69 1745.35,682.69 1745.91,682.69 1746.47,682.69 1747.03,682.69 1747.59,682.69 1748.15,682.69 1748.71,682.69 1749.27,682.69 1749.83,682.69 1750.39,682.69 1750.95,682.69 1751.51,682.69 1752.06,682.69 1752.62,682.69 1753.18,682.69 1753.74,682.69 1754.3,682.69 1754.86,682.69 1755.42,682.69 1755.98,682.69 1756.54,682.69 1757.1,682.69 1757.66,682.69 1758.22,682.69 1758.78,682.69 1759.34,682.69 1759.89,682.69 1760.45,682.69 1761.01,682.69 1761.57,682.69 1762.13,682.69 1762.69,682.69 1763.25,682.69 1763.81,682.69 1764.37,682.69 1764.93,682.69 1765.49,682.69 1766.05,682.69 1766.61,682.69 1767.16,682.69 1767.72,682.69 1768.28,682.69 1768.84,682.69 1769.4,682.69 1769.96,682.69 1770.52,682.69 1771.08,682.69 1771.64,682.69 1772.2,682.69 1772.76,682.69 1773.32,682.69 1773.88,682.69 1774.43,682.69 1774.99,682.69 1775.55,682.69 1776.11,682.69 1776.67,682.69 1777.23,682.69 1777.79,682.69 1778.35,682.69 1778.91,682.69 1779.47,682.69 1780.03,682.69 1780.59,682.69 1781.15,682.69 1781.71,682.69 1782.26,682.69 1782.82,682.69 1783.38,682.69 1783.94,682.69 1784.5,682.69 1785.06,682.69 1785.62,682.69 1786.18,682.69 1786.74,682.69 1787.3,682.69 1787.86,682.69 1788.42,682.69 1788.98,682.69 1789.53,682.69 1790.09,682.69 1790.65,682.69 1791.21,682.69 1791.77,682.69 1792.33,682.69 1792.89,682.69 1793.45,682.69 1794.01,682.69 1794.57,682.69 1795.13,682.69 1795.69,682.69 1796.25,682.69 1796.8,682.69 1797.36,682.69 1797.92,682.69 1798.48,682.69 1799.04,682.69 1799.6,682.69 1800.16,682.69 1800.72,682.69 1801.28,682.69 1801.84,682.69 1802.4,682.69 1802.96,682.69 1803.52,682.69 1804.08,682.69 1804.63,682.69 1805.19,682.69 1805.75,682.69 1806.31,682.69 1806.87,682.69 1807.43,682.69 1807.99,682.69 1808.55,682.69 1809.11,682.69 1809.67,682.69 1810.23,682.69 1810.79,682.69 1811.35,682.69 1811.9,682.69 1812.46,682.69 1813.02,682.69 1813.58,682.69 1814.14,682.69 1814.7,682.69 1815.26,682.69 1815.82,682.69 1816.38,682.69 1816.94,682.69 1817.5,682.69 1818.06,682.69 1818.62,682.69 1819.18,682.69 1819.73,682.69 1820.29,682.69 1820.85,682.69 1821.41,682.69 1821.97,682.69 1822.53,682.69 1823.09,682.69 1823.65,682.69 1824.21,682.69 1824.77,682.69 1825.33,682.69 1825.89,682.69 1826.45,682.69 1827,682.69 1827.56,682.69 1828.12,682.69 1828.68,682.69 1829.24,682.69 1829.8,682.69 1830.36,682.69 1830.92,682.69 1831.48,682.69 1832.04,682.69 1832.6,682.69 1833.16,682.69 1833.72,682.69 1834.27,682.69 1834.83,682.69 1835.39,682.69 1835.95,682.69 1836.51,682.69 1837.07,682.69 1837.63,682.69 1838.19,682.69 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025416075488037 ± 0.025660877171959466\nProjected Energy: -4.010581041926379 ± (0.003950406381460603, 0.0037957164512443242)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.51671</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3045e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1993e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.989e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.363e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.886e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.066e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613369\n -0.7590191922770941\n  0.1358418221962161\n  0.15789998694607732\n  0.876711441178136\n  1.5305929970973358\n  1.583573261186733\n  3.0728703303258467\n  3.125672653951849\n  4.862107221562171\n  6.260694850380594\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(addr::SingleComponentFockAddress; n = 1) <: AbstractOperator\n\nRepresent the n-particle reduced density matrix:\n\nρ^(n)_j_1j_1k_1k_n =  prod_i^n a^_j_i prod_i^n a_n+1-k\n\nWhere j_i and k_i (all <: Int) specify the single particle sites on a lattice. Additionally, the indices run in the following manners:\n\nj_n   j_i+1  j_i    j_1 and k_n   k_i+1  k_i    k_1\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
