var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21392467717188435 ± 0.0008829608962283277\n   G2(1) = 0.9161045241059212 ± 0.000484002602803967\n   G2(2) = 0.9819420222013476 ± 0.000494091152168488\n   G2(3) = 0.9899822302135785 ± 0.000664199067270935\n   G2(4) = 0.9819420222013476 ± 0.000494091152168488\n   G2(5) = 0.9161045241059212 ± 0.000484002602803967\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.05218754320606 ± 0.13751870721865112\n   Replica 2: -4.028564363142694 ± 0.1270220293758065\n   Replica 3: -4.009819161408437 ± 0.12856376856093885\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip800\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip801\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip802\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.19 2211.02,1003.19 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.542 2211.02,745.542 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.897 2211.02,487.897 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.251 2211.02,230.251 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.19 423.181,1003.19 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.542 423.181,745.542 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.897 423.181,487.897 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.251 423.181,230.251 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M290.043 1016.53 L306.363 1016.53 L306.363 1020.47 L284.418 1020.47 L284.418 1016.53 Q287.08 1013.78 291.664 1009.15 Q296.27 1004.5 297.451 1003.15 Q299.696 1000.63 300.576 998.894 Q301.478 997.135 301.478 995.445 Q301.478 992.691 299.534 990.955 Q297.613 989.219 294.511 989.219 Q292.312 989.219 289.858 989.982 Q287.427 990.746 284.65 992.297 L284.65 987.575 Q287.474 986.441 289.927 985.862 Q292.381 985.283 294.418 985.283 Q299.789 985.283 302.983 987.969 Q306.177 990.654 306.177 995.145 Q306.177 997.274 305.367 999.195 Q304.58 1001.09 302.474 1003.69 Q301.895 1004.36 298.793 1007.57 Q295.691 1010.77 290.043 1016.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M316.224 985.908 L334.58 985.908 L334.58 989.844 L320.506 989.844 L320.506 998.316 Q321.524 997.969 322.543 997.807 Q323.562 997.621 324.58 997.621 Q330.367 997.621 333.747 1000.79 Q337.126 1003.96 337.126 1009.38 Q337.126 1014.96 333.654 1018.06 Q330.182 1021.14 323.862 1021.14 Q321.687 1021.14 319.418 1020.77 Q317.173 1020.4 314.765 1019.66 L314.765 1014.96 Q316.849 1016.09 319.071 1016.65 Q321.293 1017.2 323.77 1017.2 Q327.774 1017.2 330.112 1015.1 Q332.45 1012.99 332.45 1009.38 Q332.45 1005.77 330.112 1003.66 Q327.774 1001.56 323.77 1001.56 Q321.895 1001.56 320.02 1001.97 Q318.168 1002.39 316.224 1003.27 L316.224 985.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 988.987 Q352.728 988.987 350.899 992.552 Q349.094 996.094 349.094 1003.22 Q349.094 1010.33 350.899 1013.89 Q352.728 1017.44 356.339 1017.44 Q359.973 1017.44 361.779 1013.89 Q363.608 1010.33 363.608 1003.22 Q363.608 996.094 361.779 992.552 Q359.973 988.987 356.339 988.987 M356.339 985.283 Q362.149 985.283 365.205 989.89 Q368.284 994.473 368.284 1003.22 Q368.284 1011.95 365.205 1016.56 Q362.149 1021.14 356.339 1021.14 Q350.529 1021.14 347.45 1016.56 Q344.395 1011.95 344.395 1003.22 Q344.395 994.473 347.45 989.89 Q350.529 985.283 356.339 985.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M286.062 728.262 L304.418 728.262 L304.418 732.198 L290.344 732.198 L290.344 740.67 Q291.363 740.323 292.381 740.161 Q293.4 739.975 294.418 739.975 Q300.205 739.975 303.585 743.147 Q306.964 746.318 306.964 751.735 Q306.964 757.313 303.492 760.415 Q300.02 763.494 293.701 763.494 Q291.525 763.494 289.256 763.123 Q287.011 762.753 284.603 762.012 L284.603 757.313 Q286.687 758.448 288.909 759.003 Q291.131 759.559 293.608 759.559 Q297.613 759.559 299.951 757.452 Q302.288 755.346 302.288 751.735 Q302.288 748.123 299.951 746.017 Q297.613 743.911 293.608 743.911 Q291.733 743.911 289.858 744.327 Q288.006 744.744 286.062 745.624 L286.062 728.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M326.177 731.341 Q322.566 731.341 320.737 734.906 Q318.932 738.448 318.932 745.577 Q318.932 752.684 320.737 756.248 Q322.566 759.79 326.177 759.79 Q329.811 759.79 331.617 756.248 Q333.446 752.684 333.446 745.577 Q333.446 738.448 331.617 734.906 Q329.811 731.341 326.177 731.341 M326.177 727.637 Q331.987 727.637 335.043 732.244 Q338.122 736.827 338.122 745.577 Q338.122 754.304 335.043 758.91 Q331.987 763.494 326.177 763.494 Q320.367 763.494 317.288 758.91 Q314.233 754.304 314.233 745.577 Q314.233 736.827 317.288 732.244 Q320.367 727.637 326.177 727.637 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 731.341 Q352.728 731.341 350.899 734.906 Q349.094 738.448 349.094 745.577 Q349.094 752.684 350.899 756.248 Q352.728 759.79 356.339 759.79 Q359.973 759.79 361.779 756.248 Q363.608 752.684 363.608 745.577 Q363.608 738.448 361.779 734.906 Q359.973 731.341 356.339 731.341 M356.339 727.637 Q362.149 727.637 365.205 732.244 Q368.284 736.827 368.284 745.577 Q368.284 754.304 365.205 758.91 Q362.149 763.494 356.339 763.494 Q350.529 763.494 347.45 758.91 Q344.395 754.304 344.395 745.577 Q344.395 736.827 347.45 732.244 Q350.529 727.637 356.339 727.637 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M284.835 470.617 L307.057 470.617 L307.057 472.607 L294.511 505.177 L289.627 505.177 L301.432 474.552 L284.835 474.552 L284.835 470.617 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M316.224 470.617 L334.58 470.617 L334.58 474.552 L320.506 474.552 L320.506 483.024 Q321.524 482.677 322.543 482.515 Q323.562 482.329 324.58 482.329 Q330.367 482.329 333.747 485.501 Q337.126 488.672 337.126 494.089 Q337.126 499.667 333.654 502.769 Q330.182 505.848 323.862 505.848 Q321.687 505.848 319.418 505.477 Q317.173 505.107 314.765 504.366 L314.765 499.667 Q316.849 500.802 319.071 501.357 Q321.293 501.913 323.77 501.913 Q327.774 501.913 330.112 499.806 Q332.45 497.7 332.45 494.089 Q332.45 490.478 330.112 488.371 Q327.774 486.265 323.77 486.265 Q321.895 486.265 320.02 486.681 Q318.168 487.098 316.224 487.978 L316.224 470.617 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 473.695 Q352.728 473.695 350.899 477.26 Q349.094 480.802 349.094 487.931 Q349.094 495.038 350.899 498.602 Q352.728 502.144 356.339 502.144 Q359.973 502.144 361.779 498.602 Q363.608 495.038 363.608 487.931 Q363.608 480.802 361.779 477.26 Q359.973 473.695 356.339 473.695 M356.339 469.992 Q362.149 469.992 365.205 474.598 Q368.284 479.181 368.284 487.931 Q368.284 496.658 365.205 501.265 Q362.149 505.848 356.339 505.848 Q350.529 505.848 347.45 501.265 Q344.395 496.658 344.395 487.931 Q344.395 479.181 347.45 474.598 Q350.529 469.992 356.339 469.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M256.664 243.595 L264.303 243.595 L264.303 217.23 L255.992 218.896 L255.992 214.637 L264.256 212.971 L268.932 212.971 L268.932 243.595 L276.571 243.595 L276.571 247.531 L256.664 247.531 L256.664 243.595 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M296.015 216.049 Q292.404 216.049 290.576 219.614 Q288.77 223.156 288.77 230.285 Q288.77 237.392 290.576 240.957 Q292.404 244.498 296.015 244.498 Q299.65 244.498 301.455 240.957 Q303.284 237.392 303.284 230.285 Q303.284 223.156 301.455 219.614 Q299.65 216.049 296.015 216.049 M296.015 212.346 Q301.826 212.346 304.881 216.952 Q307.96 221.535 307.96 230.285 Q307.96 239.012 304.881 243.619 Q301.826 248.202 296.015 248.202 Q290.205 248.202 287.127 243.619 Q284.071 239.012 284.071 230.285 Q284.071 221.535 287.127 216.952 Q290.205 212.346 296.015 212.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M326.177 216.049 Q322.566 216.049 320.737 219.614 Q318.932 223.156 318.932 230.285 Q318.932 237.392 320.737 240.957 Q322.566 244.498 326.177 244.498 Q329.811 244.498 331.617 240.957 Q333.446 237.392 333.446 230.285 Q333.446 223.156 331.617 219.614 Q329.811 216.049 326.177 216.049 M326.177 212.346 Q331.987 212.346 335.043 216.952 Q338.122 221.535 338.122 230.285 Q338.122 239.012 335.043 243.619 Q331.987 248.202 326.177 248.202 Q320.367 248.202 317.288 243.619 Q314.233 239.012 314.233 230.285 Q314.233 221.535 317.288 216.952 Q320.367 212.346 326.177 212.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M356.339 216.049 Q352.728 216.049 350.899 219.614 Q349.094 223.156 349.094 230.285 Q349.094 237.392 350.899 240.957 Q352.728 244.498 356.339 244.498 Q359.973 244.498 361.779 240.957 Q363.608 237.392 363.608 230.285 Q363.608 223.156 361.779 219.614 Q359.973 216.049 356.339 216.049 M356.339 212.346 Q362.149 212.346 365.205 216.952 Q368.284 221.535 368.284 230.285 Q368.284 239.012 365.205 243.619 Q362.149 248.202 356.339 248.202 Q350.529 248.202 347.45 243.619 Q344.395 239.012 344.395 230.285 Q344.395 221.535 347.45 216.952 Q350.529 212.346 356.339 212.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip802)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.251 4017.76,230.251 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.34 457.123,1249.19 457.691,1248.96 458.259,1248.66 458.828,1248.28 459.396,1246.81 459.964,1245.3 460.533,1244.77 461.101,1244.17 461.669,1243.49 462.238,1241.7 462.806,1240.86 463.375,1239.94 463.943,1238.93 464.511,1235.75 465.08,1234.57 465.648,1232.24 466.216,1230.82 466.785,1228.31 467.353,1226.71 467.921,1223.93 468.49,1222.1 469.058,1220.13 469.626,1217.98 470.195,1214.67 470.763,1211.24 471.331,1208.62 471.9,1204.83 472.468,1202 473.036,1197.93 473.605,1194.59 474.173,1191.23 474.741,1187.6 475.31,1183.76 475.878,1178.79 476.446,1173.56 477.015,1166.95 477.583,1162.26 478.152,1156.41 478.72,1149.34 479.288,1143.09 479.857,1137.81 480.425,1130.13 480.993,1123.25 481.562,1115.17 482.13,1107.06 482.698,1099.87 483.267,1090.22 483.835,1082.62 484.403,1075.93 484.972,1068.89 485.54,1060.82 486.108,1052.54 486.677,1044.12 487.245,1034.46 487.813,1026.86 488.382,1019.04 488.95,1008.93 489.518,1000.89 490.087,991.417 490.655,981.845 491.224,972.188 491.792,961.44 492.36,949.55 492.929,939.797 493.497,929.068 494.065,918.15 494.634,909.25 495.202,900.277 495.77,888.107 496.339,879.04 496.907,868.842 497.475,856.636 498.044,848.54 498.612,837.143 499.18,827.884 499.749,817.719 500.317,805.371 500.885,792.128 501.454,778.938 502.022,770.109 502.59,760.371 503.159,749.659 503.727,740.909 504.295,730.187 504.864,720.554 505.432,711.795 506.001,703.088 506.569,694.64 507.137,682.96 507.706,671.446 508.274,660.357 508.842,652.509 509.411,643.532 509.979,634.692 510.547,626.125 511.116,618.321 511.684,606.866 512.252,598.738 512.821,590.778 513.389,582.798 513.957,570.716 514.526,564.243 515.094,557.609 515.662,550.135 516.231,540.809 516.799,534.684 517.367,528.65 517.936,521.531 518.504,511.424 519.072,503.733 519.641,495.193 520.209,487.06 520.778,480.98 521.346,473.995 521.914,469.362 522.483,464.702 523.051,456.081 523.619,451.944 524.188,446.576 524.756,440.355 525.324,436.3 525.893,433.407 526.461,428.441 527.029,423.691 527.598,418.716 528.166,412.82 528.734,408.287 529.303,402.575 529.871,399.388 530.439,396 531.008,391.637 531.576,387.42 532.144,384.211 532.713,381.011 533.281,377.955 533.85,372.862 534.418,370.086 534.986,367.455 535.555,363.779 536.123,360.237 536.691,357.596 537.26,355.045 537.828,352.657 538.396,349.05 538.965,346.798 539.533,343.344 540.101,339.964 540.67,337.953 541.238,334.731 541.806,328.679 542.375,327.036 542.943,324.242 543.511,323.421 544.08,320.476 544.648,319.984 545.216,317.223 545.785,315.875 546.353,314.31 546.921,309.402 547.49,308.814 548.058,307.376 548.627,304.79 549.195,302.488 549.763,299.931 550.332,299.655 550.9,298.126 551.468,292.555 552.037,289.331 552.605,285.65 553.173,283.838 553.742,282.605 554.31,277.168 554.878,278.001 555.447,277.457 556.015,277.009 556.583,277.595 557.152,277.123 557.72,277.713 558.288,276.963 558.857,273.243 559.425,271.739 559.993,272.384 560.562,270.941 561.13,269.706 561.698,266.274 562.267,265.212 562.835,265.286 563.404,265.223 563.972,264.066 564.54,264.007 565.109,262.074 565.677,261.905 566.245,261.882 566.814,262.945 567.382,262.76 567.95,259.477 568.519,258.767 569.087,258.933 569.655,259.22 570.224,259.166 570.792,258.141 571.36,258.038 571.929,256.859 572.497,258.831 573.065,258.501 573.634,257.21 574.202,259.17 574.77,257.757 575.339,256.441 575.907,255.473 576.476,255.348 577.044,254.302 577.612,253.107 578.181,249.713 578.749,249.892 579.317,251.059 579.886,249.94 580.454,251.229 581.022,251.113 581.591,253.254 582.159,251.977 582.727,254.901 583.296,253.516 583.864,253.103 584.432,253.951 585.001,251.547 585.569,250.202 586.137,251.242 586.706,250.059 587.274,249.842 587.842,248.825 588.411,247.653 588.979,247.616 589.547,247.612 590.116,246.381 590.684,246.427 591.253,244.541 591.821,243.707 592.389,245.059 592.958,245.053 593.526,245.223 594.094,245.239 594.663,246.367 595.231,246.198 595.799,245.365 596.368,244.536 596.936,243.344 597.504,243.471 598.073,242.437 598.641,241.721 599.209,240.757 599.778,242.077 600.346,242.413 600.914,240.412 601.483,242.899 602.051,243.959 602.619,244.061 603.188,245.067 603.756,242.833 604.325,242.783 604.893,240.755 605.461,242.125 606.03,242.393 606.598,241.549 607.166,241.941 607.735,242.05 608.303,243.944 608.871,243.929 609.44,242.772 610.008,242.813 610.576,242.82 611.145,243.765 611.713,244.656 612.281,244.304 612.85,242.301 613.418,240.38 613.986,239.522 614.555,235.686 615.123,233.906 615.691,234.347 616.26,235.937 616.828,236.293 617.396,237.643 617.965,237.914 618.533,238.946 619.102,238.178 619.67,238.095 620.238,238.236 620.807,237.248 621.375,237.477 621.943,237.644 622.512,237.729 623.08,237.776 623.648,240.034 624.217,239.005 624.785,237.929 625.353,237.008 625.922,236.13 626.49,236.455 627.058,236.543 627.627,239.906 628.195,237.845 628.763,237.859 629.332,239.01 629.9,238.051 630.468,236.993 631.037,237.924 631.605,239.092 632.173,236.985 632.742,236.061 633.31,236.165 633.879,234.346 634.447,234.766 635.015,233.832 635.584,235.231 636.152,234.381 636.72,233.799 637.289,235.384 637.857,237.685 638.425,239.977 638.994,239.648 639.562,242.724 640.13,243.503 640.699,244.14 641.267,241.304 641.835,239.713 642.404,239.683 642.972,238.31 643.54,239.435 644.109,240.304 644.677,238.063 645.245,236.939 645.814,237.796 646.382,237.709 646.951,237.567 647.519,236.378 648.087,236.236 648.656,236.189 649.224,235.247 649.792,234.405 650.361,234.493 650.929,234.673 651.497,233.604 652.066,233.672 652.634,232.678 653.202,233.068 653.771,233.289 654.339,234.697 654.907,234.635 655.476,234.759 656.044,232.838 656.612,233.272 657.181,232.506 657.749,232.949 658.317,233.216 658.886,231.388 659.454,233.663 660.022,232.762 660.591,232.087 661.159,233.316 661.728,234.728 662.296,234.715 662.864,234.874 663.433,234.993 664.001,235.08 664.569,236.379 665.138,236.407 665.706,236.337 666.274,237.403 666.843,239.316 667.411,239.039 667.979,238.825 668.548,238.618 669.116,237.318 669.684,237.187 670.253,238.106 670.821,240.932 671.389,240.446 671.958,239.17 672.526,238.606 673.094,239.148 673.663,238.768 674.231,239.631 674.799,236.522 675.368,238.422 675.936,239.132 676.505,237.669 677.073,237.483 677.641,236.071 678.21,235.861 678.778,234.518 679.346,233.509 679.915,233.652 680.483,230.503 681.051,230.69 681.62,229.733 682.188,230.034 682.756,232.194 683.325,229.134 683.893,229.614 684.461,228.838 685.03,229.341 685.598,231.729 686.166,230.734 686.735,230.993 687.303,231.332 687.871,230.492 688.44,229.733 689.008,231.11 689.577,231.359 690.145,233.554 690.713,231.362 691.282,230.483 691.85,231.816 692.418,232.817 692.987,232.759 693.555,231.948 694.123,231.823 694.692,231.096 695.26,232.158 695.828,233.336 696.397,232.214 696.965,231.099 697.533,231.202 698.102,231.257 698.67,230.35 699.238,229.146 699.807,228.31 700.375,228.648 700.943,229.976 701.512,231.33 702.08,231.358 702.648,231.382 703.217,231.44 703.785,232.587 704.354,231.621 704.922,230.62 705.49,229.809 706.059,229.897 706.627,229.172 707.195,226.276 707.764,227.96 708.332,227.422 708.9,227.74 709.469,229.209 710.037,230.56 710.605,228.866 711.174,230.282 711.742,229.362 712.31,232.774 712.879,233.752 713.447,233.905 714.015,232.853 714.584,231.895 715.152,233.006 715.72,234.321 716.289,234.323 716.857,234.416 717.425,234.483 717.994,235.541 718.562,234.511 719.131,233.362 719.699,233.467 720.267,233.577 720.836,233.631 721.404,232.472 721.972,232.649 722.541,231.684 723.109,229.624 723.677,226.769 724.246,225.161 724.814,224.663 725.382,225.288 725.951,227.093 726.519,227.423 727.087,229.166 727.656,227.653 728.224,227.176 728.792,229.846 729.361,229.377 729.929,228.604 730.497,230.137 731.066,229.43 731.634,228.758 732.203,230.31 732.771,231.519 733.339,230.609 733.908,231.965 734.476,232.169 735.044,235.476 735.613,233.382 736.181,235.463 736.749,236.329 737.318,235.074 737.886,238.305 738.454,238.983 739.023,238.667 739.591,236.284 740.159,237.004 740.728,236.761 741.296,237.61 741.864,236.266 742.433,236.171 743.001,235.984 743.569,237.032 744.138,238.076 744.706,237.744 745.274,236.388 745.843,235.202 746.411,235.072 746.98,234.745 747.548,233.615 748.116,232.582 748.685,232.503 749.253,233.471 749.821,231.306 750.39,231.423 750.958,230.491 751.526,230.682 752.095,231.755 752.663,231.725 753.231,230.941 753.8,230.052 754.368,230.261 754.936,231.585 755.505,229.673 756.073,232.133 756.641,232.107 757.21,231.942 757.778,232.805 758.346,233.578 758.915,233.602 759.483,230.361 760.052,227.355 760.62,227.672 761.188,228.047 761.757,227.367 762.325,227.666 762.893,227.047 763.462,229.63 764.03,232.015 764.598,233.98 765.167,235.11 765.735,233.902 766.303,231.592 766.872,232.492 767.44,231.374 768.008,229.171 768.577,228.186 769.145,226.458 769.713,225.643 770.282,227.351 770.85,228.773 771.418,228.088 771.987,229.554 772.555,229.796 773.123,229.983 773.692,228.125 774.26,230.722 774.829,230.867 775.397,230.064 775.965,232.189 776.534,231.035 777.102,235.428 777.67,237.244 778.239,239.111 778.807,239.414 779.375,237.87 779.944,235.495 780.512,236.013 781.08,235.733 781.649,236.157 782.217,235.731 782.785,235.493 783.354,235.222 783.922,235.821 784.49,234.515 785.059,234.509 785.627,232.141 786.195,233.225 786.764,233.104 787.332,230.847 787.9,230.808 788.469,230.829 789.037,230.89 789.606,232.149 790.174,232.37 790.742,231.001 791.311,229.03 791.879,227.262 792.447,226.737 793.016,228.231 793.584,227.333 794.152,230.706 794.721,230.87 795.289,232.909 795.857,232.666 796.426,235.48 796.994,234.113 797.562,230.854 798.131,231.19 798.699,230.186 799.267,230.211 799.836,229.269 800.404,229.315 800.972,228.478 801.541,227.641 802.109,227.942 802.678,228.046 803.246,227.226 803.814,228.321 804.383,226.646 804.951,227.15 805.519,226.721 806.088,226.988 806.656,227.429 807.224,227.676 807.793,226.825 808.361,227.071 808.929,227.532 809.498,228.996 810.066,232.271 810.634,231.326 811.203,232.522 811.771,232.523 812.339,232.492 812.908,230.641 813.476,229.694 814.044,228.943 814.613,229.064 815.181,228.195 815.749,227.595 816.318,227.931 816.886,230.317 817.455,230.472 818.023,231.669 818.591,228.668 819.16,226.798 819.728,227.024 820.296,228.35 820.865,232.772 821.433,231.697 822.001,231.924 822.57,231.879 823.138,230.726 823.706,231.012 824.275,231.018 824.843,231.242 825.411,231.263 825.98,235.428 826.548,235.332 827.116,235.171 827.685,233.057 828.253,234.134 828.821,235.102 829.39,234.097 829.958,235.088 830.526,233.847 831.095,234.924 831.663,232.829 832.232,231.814 832.8,231.515 833.368,234.527 833.937,235.358 834.505,232.028 835.073,231.848 835.642,231.707 836.21,231.889 836.778,232.964 837.347,232.924 837.915,233.992 838.483,233.77 839.052,234.468 839.62,231.153 840.188,231.279 840.757,232.301 841.325,231.32 841.893,232.705 842.462,235.572 843.03,234.262 843.598,233.983 844.167,233.698 844.735,234.609 845.304,234.131 845.872,234.984 846.44,231.663 847.009,231.679 847.577,231.803 848.145,233.478 848.714,234.319 849.282,233.833 849.85,231.535 850.419,231.656 850.987,232.86 851.555,233.543 852.124,233.3 852.692,235.388 853.26,234.248 853.829,234.945 854.397,238.377 854.965,235.701 855.534,234.108 856.102,233.74 856.67,232.481 857.239,230.275 857.807,232.204 858.375,229.134 858.944,230.33 859.512,232.555 860.081,234.319 860.649,234.289 861.217,235.195 861.786,233.87 862.354,233.597 862.922,232.412 863.491,231.358 864.059,232.031 864.627,231.026 865.196,230.823 865.764,230.66 866.332,229.602 866.901,229.86 867.469,230.844 868.037,229.818 868.606,230.765 869.174,230.693 869.742,231.647 870.311,232.615 870.879,232.391 871.447,230.225 872.016,231.075 872.584,231.956 873.152,231.843 873.721,231.771 874.289,232.421 874.858,233.202 875.426,231.78 875.994,230.486 876.563,230.374 877.131,230.333 877.699,227.103 878.268,226.408 878.836,224.657 879.404,225.991 879.973,225.256 880.541,226.523 881.109,225.897 881.678,225 882.246,225.394 882.814,226.736 883.383,229.106 883.951,228.834 884.519,227.946 885.088,227.246 885.656,229.45 886.224,229.484 886.793,227.298 887.361,227.541 887.93,227.81 888.498,228.102 889.066,230.301 889.635,228.301 890.203,229.672 890.771,228.653 891.34,229.906 891.908,228.96 892.476,228.089 893.045,228.485 893.613,225.399 894.181,222.767 894.75,223.378 895.318,224.083 895.886,225.688 896.455,227.032 897.023,228.386 897.591,228.581 898.16,226.693 898.728,228.107 899.296,228.318 899.865,228.448 900.433,230.864 901.001,233.983 901.57,232.935 902.138,232.714 902.707,230.521 903.275,228.535 903.843,227.613 904.412,227.77 904.98,227.132 905.548,226.64 906.117,228.163 906.685,227.609 907.253,227.691 907.822,227.072 908.39,227.52 908.958,228.011 909.527,227.098 910.095,228.608 910.663,230.037 911.232,231.282 911.8,231.417 912.368,229.301 912.937,230.591 913.505,231.557 914.073,229.426 914.642,230.692 915.21,230.743 915.779,228.786 916.347,226.826 916.915,227.356 917.484,227.716 918.052,227.936 918.62,227.433 919.189,228.781 919.757,230.141 920.325,230.37 920.894,230.591 921.462,231.895 922.03,231.017 922.599,230.123 923.167,231.33 923.735,232.376 924.304,233.394 924.872,233.238 925.44,235.297 926.009,235.244 926.577,236.081 927.145,234.619 927.714,235.309 928.282,233.857 928.85,233.924 929.419,232.736 929.987,232.595 930.556,233.297 931.124,233.214 931.692,232.029 932.261,230.974 932.829,231.014 933.397,231.892 933.966,230.781 934.534,231.909 935.102,229.949 935.671,228.099 936.239,227.214 936.807,226.715 937.376,226.903 937.944,227.256 938.512,227.584 939.081,226.946 939.649,226.259 940.217,229.632 940.786,226.581 941.354,226.883 941.922,226.218 942.491,227.721 943.059,228.871 943.627,232.139 944.196,235.341 944.764,234.223 945.333,234.079 945.901,233.868 946.469,233.432 947.038,235.313 947.606,234.037 948.174,233.871 948.743,230.581 949.311,230.456 949.879,231.239 950.448,232.279 951.016,232.292 951.584,234.039 952.153,232.965 952.721,231.031 953.289,229.942 953.858,230.126 954.426,232.133 954.994,231.874 955.563,231.693 956.131,233.75 956.699,234.59 957.268,234.222 957.836,230.969 958.405,230.026 958.973,229.027 959.541,228.296 960.11,229.308 960.678,230.668 961.246,229.887 961.815,229.99 962.383,232.345 962.951,233.307 963.52,233.372 964.088,233.375 964.656,232.23 965.225,230.225 965.793,231.366 966.361,231.493 966.93,234.672 967.498,235.501 968.066,236.164 968.635,236.991 969.203,237.846 969.771,235.116 970.34,232.815 970.908,233.762 971.476,231.423 972.045,230.363 972.613,229.446 973.182,229.392 973.75,229.267 974.318,231.419 974.887,230.271 975.455,229.24 976.023,230.352 976.592,229.381 977.16,231.558 977.728,231.423 978.297,230.33 978.865,229.451 979.433,228.521 980.002,229.888 980.57,229.896 981.138,231.052 981.707,230.711 982.275,230.764 982.843,228.649 983.412,229.829 983.98,230.209 984.548,230.103 985.117,232.088 985.685,230.681 986.253,230.651 986.822,228.699 987.39,229.901 987.959,227.884 988.527,228.025 989.095,227.171 989.664,226.631 990.232,227.758 990.8,229.129 991.369,230.316 991.937,230.558 992.505,230.624 993.074,231.426 993.642,232.191 994.21,231.767 994.779,231.825 995.347,229.54 995.915,231.675 996.484,229.533 997.052,231.682 997.62,230.693 998.189,231.921 998.757,228.708 999.325,228.876 999.894,229.041 1000.46,228.008 1001.03,228.032 1001.6,230.184 1002.17,230.22 1002.74,230.394 1003.3,230.181 1003.87,228.326 1004.44,230.464 1005.01,230.653 1005.58,229.557 1006.15,228.762 1006.71,233.097 1007.28,235.063 1007.85,234.831 1008.42,233.545 1008.99,232.173 1009.56,232.211 1010.12,231.947 1010.69,228.876 1011.26,227.929 1011.83,224.847 1012.4,227.224 1012.97,228.625 1013.53,228.637 1014.1,228.979 1014.67,231.202 1015.24,230.19 1015.81,230.005 1016.38,229.956 1016.94,229.803 1017.51,227.718 1018.08,229.906 1018.65,229.963 1019.22,231.182 1019.79,229.294 1020.35,231.373 1020.92,232.296 1021.49,232.248 1022.06,230.992 1022.63,232.785 1023.2,232.522 1023.76,234.498 1024.33,234.333 1024.9,236.262 1025.47,236.76 1026.04,234.305 1026.61,236.113 1027.17,234.783 1027.74,234.169 1028.31,234.09 1028.88,232.705 1029.45,233.521 1030.02,232.309 1030.58,232.146 1031.15,227.956 1031.72,228.021 1032.29,230.237 1032.86,230.089 1033.43,230.08 1033.99,230.385 1034.56,230.523 1035.13,231.549 1035.7,232.326 1036.27,234.325 1036.84,234.001 1037.4,233.806 1037.97,234.431 1038.54,234.152 1039.11,231.676 1039.68,231.425 1040.25,234.506 1040.81,234.237 1041.38,230.892 1041.95,231.674 1042.52,231.569 1043.09,230.171 1043.66,230.071 1044.22,227.833 1044.79,231.161 1045.36,230.853 1045.93,230.929 1046.5,231.81 1047.07,231.943 1047.63,232.711 1048.2,231.62 1048.77,230.442 1049.34,228.477 1049.91,228.462 1050.48,226.551 1051.05,226.592 1051.61,228.592 1052.18,229.628 1052.75,230.583 1053.32,232.478 1053.89,231.382 1054.46,231.234 1055.02,233.184 1055.59,232.071 1056.16,230.939 1056.73,231.994 1057.3,230.706 1057.87,229.676 1058.43,228.733 1059,230.173 1059.57,230.302 1060.14,231.284 1060.71,230.989 1061.28,229.911 1061.84,228.073 1062.41,227.061 1062.98,222.828 1063.55,224.487 1064.12,223.908 1064.69,223.356 1065.25,222.854 1065.82,221.463 1066.39,221.174 1066.96,221.928 1067.53,222.743 1068.1,226.475 1068.66,226.732 1069.23,226.934 1069.8,228.24 1070.37,229.419 1070.94,230.45 1071.51,232.635 1072.07,233.668 1072.64,233.098 1073.21,232.929 1073.78,233.747 1074.35,236.666 1074.92,236.401 1075.48,235.98 1076.05,236.392 1076.62,236.151 1077.19,232.643 1077.76,234.652 1078.33,235.49 1078.89,236.004 1079.46,236.582 1080.03,234.855 1080.6,236.364 1081.17,235.883 1081.74,234.436 1082.3,235.101 1082.87,233.512 1083.44,232.156 1084.01,229.615 1084.58,229.504 1085.15,228.385 1085.71,227.301 1086.28,227.36 1086.85,225.428 1087.42,223.614 1087.99,224.119 1088.56,222.452 1089.12,223.905 1089.69,222.098 1090.26,221.616 1090.83,221.342 1091.4,222.85 1091.97,225.33 1092.53,224.427 1093.1,224.842 1093.67,224.208 1094.24,222.703 1094.81,225.583 1095.38,225.903 1095.94,223.115 1096.51,220.547 1097.08,221.223 1097.65,219.924 1098.22,221.927 1098.79,223.391 1099.35,225.092 1099.92,226.528 1100.49,228.144 1101.06,229.521 1101.63,230.576 1102.2,231.598 1102.76,232.783 1103.33,232.739 1103.9,231.741 1104.47,233.777 1105.04,234.739 1105.61,234.764 1106.17,232.33 1106.74,233.651 1107.31,233.665 1107.88,234.556 1108.45,233.291 1109.02,232.168 1109.58,232.111 1110.15,231.081 1110.72,231.255 1111.29,229.179 1111.86,232.432 1112.43,233.389 1112.99,234.381 1113.56,237.203 1114.13,238.817 1114.7,241.473 1115.27,241.838 1115.84,242.006 1116.4,241.053 1116.97,242.471 1117.54,241.546 1118.11,238.794 1118.68,239.137 1119.25,237.444 1119.81,238.115 1120.38,236.521 1120.95,234.069 1121.52,233.917 1122.09,234.804 1122.66,234.427 1123.23,232.179 1123.79,233.949 1124.36,233.668 1124.93,232.423 1125.5,232.181 1126.07,231.773 1126.64,232.534 1127.2,230.013 1127.77,230.081 1128.34,228.015 1128.91,229.091 1129.48,227.978 1130.05,229.152 1130.61,226.149 1131.18,226.413 1131.75,224.732 1132.32,225.053 1132.89,228.453 1133.46,227.69 1134.02,231.037 1134.59,229.866 1135.16,228.721 1135.73,229.67 1136.3,228.533 1136.87,227.466 1137.43,227.638 1138,222.703 1138.57,223.189 1139.14,224.655 1139.71,223.989 1140.28,225.593 1140.84,223.806 1141.41,226.602 1141.98,226.798 1142.55,228.195 1143.12,229.398 1143.69,229.412 1144.25,230.541 1144.82,229.394 1145.39,229.476 1145.96,229.62 1146.53,229.749 1147.1,230.702 1147.66,228.855 1148.23,228.982 1148.8,229.091 1149.37,231.03 1149.94,233.094 1150.51,233.9 1151.07,231.71 1151.64,231.616 1152.21,231.543 1152.78,230.291 1153.35,230.41 1153.92,230.274 1154.48,230.222 1155.05,230.075 1155.62,231.032 1156.19,231.893 1156.76,233.798 1157.33,233.722 1157.89,234.534 1158.46,238.356 1159.03,237.844 1159.6,236.951 1160.17,237.333 1160.74,239.813 1161.3,239.983 1161.87,240.401 1162.44,239.683 1163.01,237.892 1163.58,238.31 1164.15,237.379 1164.71,235.672 1165.28,236.016 1165.85,233.335 1166.42,232.817 1166.99,229.561 1167.56,230.54 1168.12,231.472 1168.69,228.991 1169.26,229.899 1169.83,227.761 1170.4,227.773 1170.97,227.766 1171.53,227.901 1172.1,225.934 1172.67,226.191 1173.24,225.187 1173.81,224.524 1174.38,221.85 1174.94,221.055 1175.51,221.74 1176.08,224.294 1176.65,225.769 1177.22,226.105 1177.79,227.21 1178.35,227.498 1178.92,225.62 1179.49,228.05 1180.06,228.201 1180.63,229.329 1181.2,228.326 1181.76,226.334 1182.33,224.357 1182.9,223.835 1183.47,222.285 1184.04,222.859 1184.61,222.233 1185.17,222.758 1185.74,222.214 1186.31,222.816 1186.88,223.461 1187.45,226.051 1188.02,226.341 1188.58,228.846 1189.15,226.621 1189.72,226.904 1190.29,228.295 1190.86,228.642 1191.43,229.03 1192,230.091 1192.56,230.231 1193.13,231.331 1193.7,233.538 1194.27,235.296 1194.84,235.949 1195.41,235.659 1195.97,235.376 1196.54,235.041 1197.11,233.784 1197.68,231.495 1198.25,232.569 1198.82,232.508 1199.38,232.302 1199.95,233.33 1200.52,231.01 1201.09,234.007 1201.66,233.941 1202.23,232.73 1202.79,231.348 1203.36,230.081 1203.93,229.211 1204.5,229.245 1205.07,229.347 1205.64,227.181 1206.2,228.592 1206.77,230.81 1207.34,229.625 1207.91,229.022 1208.48,231.427 1209.05,230.316 1209.61,227.289 1210.18,228.758 1210.75,229.999 1211.32,231.016 1211.89,231.812 1212.46,229.814 1213.02,230.93 1213.59,231.07 1214.16,232.127 1214.73,232.17 1215.3,233.309 1215.87,237.184 1216.43,235.622 1217,234.304 1217.57,233.933 1218.14,234.589 1218.71,232.221 1219.28,233.069 1219.84,232.988 1220.41,236.138 1220.98,235.657 1221.55,235.016 1222.12,236.641 1222.69,236.247 1223.25,236.848 1223.82,237.206 1224.39,235.622 1224.96,235.037 1225.53,235.837 1226.1,237.386 1226.66,236.031 1227.23,237.437 1227.8,237.895 1228.37,235.094 1228.94,233.47 1229.51,233.264 1230.07,230.871 1230.64,231.581 1231.21,230.208 1231.78,231.265 1232.35,233.275 1232.92,234.679 1233.48,233.969 1234.05,233.664 1234.62,234.255 1235.19,233.716 1235.76,233.191 1236.33,231.751 1236.89,231.349 1237.46,230.087 1238.03,231.037 1238.6,229.616 1239.17,229.589 1239.74,227.626 1240.3,227.814 1240.87,226.629 1241.44,226.666 1242.01,225.807 1242.58,226.925 1243.15,224.718 1243.71,227.065 1244.28,225.257 1244.85,223.461 1245.42,225.72 1245.99,227.04 1246.56,227 1247.12,229.245 1247.69,230.526 1248.26,230.357 1248.83,232.419 1249.4,230.247 1249.97,231.07 1250.53,230.934 1251.1,231.964 1251.67,231.534 1252.24,230.192 1252.81,231.306 1253.38,230.169 1253.94,230.042 1254.51,230.958 1255.08,230.772 1255.65,229.78 1256.22,228.54 1256.79,227.509 1257.35,228.666 1257.92,229.813 1258.49,228.629 1259.06,226.666 1259.63,225.731 1260.2,227.81 1260.76,228.125 1261.33,226.015 1261.9,225.063 1262.47,226.548 1263.04,226.762 1263.61,226.753 1264.18,224.903 1264.74,224.288 1265.31,228.727 1265.88,228.613 1266.45,227.723 1267.02,228.844 1267.59,228.801 1268.15,228.872 1268.72,230.908 1269.29,229.63 1269.86,228.743 1270.43,228.963 1271,227.981 1271.56,228.075 1272.13,227.068 1272.7,225.417 1273.27,223.608 1273.84,221.378 1274.41,219.895 1274.97,221.521 1275.54,221.329 1276.11,222.918 1276.68,223.24 1277.25,223.737 1277.82,223.282 1278.38,225.093 1278.95,225.542 1279.52,225.933 1280.09,227.254 1280.66,228.642 1281.23,227.839 1281.79,226.99 1282.36,229.419 1282.93,228.688 1283.5,228.017 1284.07,230.214 1284.64,231.398 1285.2,230.404 1285.77,229.391 1286.34,228.646 1286.91,227.852 1287.48,227.085 1288.05,228.451 1288.61,227.701 1289.18,229.167 1289.75,229.349 1290.32,228.635 1290.89,230.954 1291.46,230.97 1292.02,234.215 1292.59,232.884 1293.16,233.975 1293.73,232.822 1294.3,230.848 1294.87,230.916 1295.43,231.743 1296,229.821 1296.57,229.727 1297.14,230.156 1297.71,229.357 1298.28,229.376 1298.84,229.479 1299.41,228.63 1299.98,227.685 1300.55,226.107 1301.12,227.502 1301.69,228.746 1302.25,229.991 1302.82,230.044 1303.39,229.152 1303.96,228.167 1304.53,229.481 1305.1,229.917 1305.66,229.986 1306.23,228.949 1306.8,229.058 1307.37,231.229 1307.94,232.235 1308.51,232.124 1309.07,233.217 1309.64,233.087 1310.21,234.152 1310.78,234.136 1311.35,233.898 1311.92,234.645 1312.48,234.337 1313.05,233.798 1313.62,231.694 1314.19,230.421 1314.76,230.461 1315.33,228.297 1315.89,227.587 1316.46,227.854 1317.03,226.099 1317.6,225.398 1318.17,225.733 1318.74,223.977 1319.3,225.61 1319.87,226.31 1320.44,226.721 1321.01,229.406 1321.58,228.587 1322.15,228.963 1322.71,228.104 1323.28,228.218 1323.85,228.461 1324.42,231.813 1324.99,232.976 1325.56,231.641 1326.12,231.734 1326.69,231.77 1327.26,232.82 1327.83,232.905 1328.4,233.876 1328.97,234.645 1329.53,235.423 1330.1,234.217 1330.67,234.077 1331.24,234.042 1331.81,236.003 1332.38,237.812 1332.94,237.422 1333.51,238.049 1334.08,237.632 1334.65,238.097 1335.22,237.696 1335.79,238.182 1336.36,238.531 1336.92,237.781 1337.49,238.196 1338.06,237.577 1338.63,237.011 1339.2,234.317 1339.77,233.838 1340.33,232.511 1340.9,233.326 1341.47,232.954 1342.04,231.607 1342.61,232.375 1343.18,233.422 1343.74,232.908 1344.31,231.655 1344.88,230.583 1345.45,231.303 1346.02,229.446 1346.59,227.555 1347.15,227.579 1347.72,227.642 1348.29,224.527 1348.86,226.916 1349.43,227.001 1350,226.98 1350.56,228.255 1351.13,229.231 1351.7,231.146 1352.27,229.914 1352.84,229.888 1353.41,227.764 1353.97,228.031 1354.54,227.87 1355.11,228.025 1355.68,231.273 1356.25,232.323 1356.82,230.999 1357.38,231.842 1357.95,231.685 1358.52,229.59 1359.09,229.471 1359.66,229.36 1360.23,229.279 1360.79,229.311 1361.36,226.96 1361.93,226.098 1362.5,226.456 1363.07,225.646 1363.64,229.976 1364.2,226.893 1364.77,227.169 1365.34,227.361 1365.91,226.733 1366.48,228.177 1367.05,226.37 1367.61,228.612 1368.18,228.793 1368.75,228.731 1369.32,228.742 1369.89,228.905 1370.46,230.911 1371.02,231.927 1371.59,231.882 1372.16,232.848 1372.73,231.792 1373.3,231.728 1373.87,232.793 1374.43,232.628 1375,234.521 1375.57,234.304 1376.14,232.839 1376.71,232.608 1377.28,233.428 1377.84,233.345 1378.41,233.294 1378.98,232.93 1379.55,234.76 1380.12,233.56 1380.69,231.287 1381.25,232.201 1381.82,232.853 1382.39,232.635 1382.96,232.428 1383.53,231.272 1384.1,230.12 1384.66,227.05 1385.23,227.472 1385.8,228.419 1386.37,234.67 1386.94,232.487 1387.51,234.413 1388.07,232.312 1388.64,232.215 1389.21,231.171 1389.78,230.133 1390.35,231.103 1390.92,233.035 1391.48,233.779 1392.05,231.467 1392.62,230.164 1393.19,228.244 1393.76,228.214 1394.33,228.282 1394.89,229.625 1395.46,229.649 1396.03,228.51 1396.6,228.727 1397.17,228.716 1397.74,227.746 1398.3,229.105 1398.87,224.085 1399.44,224.406 1400.01,226.733 1400.58,227.847 1401.15,226.907 1401.71,227.082 1402.28,228.253 1402.85,226.407 1403.42,225.508 1403.99,227.717 1404.56,228.24 1405.13,229.522 1405.69,229.562 1406.26,227.47 1406.83,227.643 1407.4,229.071 1407.97,228.952 1408.54,230.065 1409.1,230.08 1409.67,231.139 1410.24,230.085 1410.81,228.023 1411.38,226.13 1411.95,225.539 1412.51,225.811 1413.08,227.379 1413.65,227.702 1414.22,230.034 1414.79,229.981 1415.36,228.902 1415.92,227.964 1416.49,227.979 1417.06,227.288 1417.63,229.865 1418.2,228.887 1418.77,229.994 1419.33,231.095 1419.9,230.218 1420.47,230.264 1421.04,231.326 1421.61,232.243 1422.18,231.287 1422.74,232.072 1423.31,232.993 1423.88,232.805 1424.45,233.033 1425.02,233.944 1425.59,232.737 1426.15,233.536 1426.72,234.389 1427.29,233.991 1427.86,233.661 1428.43,234.31 1429,232.889 1429.56,230.706 1430.13,230.705 1430.7,231.588 1431.27,232.422 1431.84,232.222 1432.41,231.151 1432.97,231.922 1433.54,234.771 1434.11,232.403 1434.68,233.537 1435.25,234.194 1435.82,233.071 1436.38,231.796 1436.95,232.692 1437.52,233.612 1438.09,232.156 1438.66,232.127 1439.23,235.999 1439.79,232.614 1440.36,232.426 1440.93,234.252 1441.5,233.876 1442.07,232.419 1442.64,228.927 1443.2,226.888 1443.77,228.025 1444.34,227.134 1444.91,228.172 1445.48,228.281 1446.05,228.372 1446.61,227.276 1447.18,229.342 1447.75,228.318 1448.32,230.484 1448.89,228.493 1449.46,230.679 1450.02,230.541 1450.59,230.403 1451.16,230.363 1451.73,229.329 1452.3,228.303 1452.87,228.359 1453.43,229.58 1454,229.639 1454.57,231.903 1455.14,234.865 1455.71,234.541 1456.28,234.084 1456.84,230.608 1457.41,231.681 1457.98,230.455 1458.55,229.297 1459.12,229.197 1459.69,229.091 1460.25,228.119 1460.82,229.444 1461.39,230.562 1461.96,229.49 1462.53,228.427 1463.1,229.493 1463.66,230.508 1464.23,230.323 1464.8,229.408 1465.37,228.491 1465.94,224.6 1466.51,225.878 1467.07,224.96 1467.64,224.154 1468.21,224.353 1468.78,226.958 1469.35,228.227 1469.92,229.511 1470.48,229.405 1471.05,227.236 1471.62,228.589 1472.19,226.709 1472.76,226.057 1473.33,224.285 1473.89,224.527 1474.46,224.977 1475.03,228.479 1475.6,226.606 1476.17,228.03 1476.74,226.298 1477.31,229.723 1477.87,229.808 1478.44,230.967 1479.01,231.014 1479.58,230.003 1480.15,229.972 1480.72,229.879 1481.28,229.656 1481.85,227.693 1482.42,225.893 1482.99,228.249 1483.56,229.549 1484.13,230.616 1484.69,231.616 1485.26,232.588 1485.83,230.442 1486.4,228.276 1486.97,228.621 1487.54,227.722 1488.1,225.782 1488.67,228.184 1489.24,226.309 1489.81,226.605 1490.38,227.712 1490.95,227.948 1491.51,227.067 1492.08,228.403 1492.65,227.635 1493.22,225.193 1493.79,225.637 1494.36,229.204 1494.92,228.32 1495.49,229.705 1496.06,229.729 1496.63,231.06 1497.2,228.956 1497.77,228.397 1498.33,228.593 1498.9,226.659 1499.47,228.078 1500.04,228.363 1500.61,227.5 1501.18,230.786 1501.74,230.814 1502.31,229.906 1502.88,228.853 1503.45,228.993 1504.02,229.193 1504.59,229.668 1505.15,228.825 1505.72,228.961 1506.29,228.007 1506.86,228.293 1507.43,227.538 1508,228.951 1508.56,231.66 1509.13,231.618 1509.7,232.517 1510.27,230.401 1510.84,230.51 1511.41,229.794 1511.97,230.084 1512.54,230.22 1513.11,229.452 1513.68,231.589 1514.25,229.47 1514.82,231.773 1515.38,233.807 1515.95,232.608 1516.52,232.766 1517.09,233.837 1517.66,235.954 1518.23,233.754 1518.79,233.7 1519.36,233.747 1519.93,234.781 1520.5,236.476 1521.07,236.111 1521.64,234.758 1522.2,235.692 1522.77,234.516 1523.34,233.454 1523.91,235.195 1524.48,233.909 1525.05,232.961 1525.61,233.75 1526.18,235.589 1526.75,235.116 1527.32,232.777 1527.89,232.656 1528.46,231.346 1529.02,233.072 1529.59,232.803 1530.16,230.573 1530.73,230.594 1531.3,231.648 1531.87,229.163 1532.43,229.04 1533,228.172 1533.57,227.536 1534.14,227.652 1534.71,227.94 1535.28,227.932 1535.84,227.13 1536.41,227.516 1536.98,226.767 1537.55,227.117 1538.12,227.288 1538.69,228.454 1539.25,228.582 1539.82,228.739 1540.39,228.92 1540.96,229.989 1541.53,227.949 1542.1,230.21 1542.66,229.431 1543.23,228.426 1543.8,228.581 1544.37,229.089 1544.94,232.387 1545.51,234.283 1546.08,233.03 1546.64,234.705 1547.21,236.546 1547.78,236.357 1548.35,236.212 1548.92,237.035 1549.49,237.722 1550.05,236.142 1550.62,234.748 1551.19,237.361 1551.76,238.909 1552.33,239.285 1552.9,238.565 1553.46,237.886 1554.03,238.367 1554.6,237.38 1555.17,237.722 1555.74,237.273 1556.31,235.662 1556.87,234.298 1557.44,234.75 1558.01,234.224 1558.58,230.576 1559.15,230.46 1559.72,230.286 1560.28,228.277 1560.85,232.428 1561.42,232.233 1561.99,231.849 1562.56,230.649 1563.13,230.695 1563.69,229.427 1564.26,229.517 1564.83,229.609 1565.4,230.611 1565.97,229.652 1566.54,228.55 1567.1,230.73 1567.67,230.47 1568.24,230.486 1568.81,228.309 1569.38,228.357 1569.95,228.239 1570.51,229.438 1571.08,226.182 1571.65,227.636 1572.22,227.896 1572.79,228.908 1573.36,229.013 1573.92,229.079 1574.49,227.859 1575.06,229.824 1575.63,229.885 1576.2,228.872 1576.77,226.775 1577.33,221.672 1577.9,222.155 1578.47,222.683 1579.04,223.124 1579.61,224.603 1580.18,222.975 1580.74,224.302 1581.31,222.692 1581.88,224.296 1582.45,224.535 1583.02,225.128 1583.59,226.742 1584.15,227.022 1584.72,227.153 1585.29,224.359 1585.86,223.77 1586.43,225.297 1587,226.763 1587.56,227.294 1588.13,227.457 1588.7,223.696 1589.27,224.125 1589.84,224.896 1590.41,226.565 1590.97,224.817 1591.54,224.184 1592.11,222.671 1592.68,225.122 1593.25,226.606 1593.82,225.86 1594.38,228.189 1594.95,229.396 1595.52,231.617 1596.09,232.541 1596.66,233.401 1597.23,233.206 1597.79,233.917 1598.36,233.704 1598.93,233.462 1599.5,235.399 1600.07,235.379 1600.64,235.969 1601.2,235.511 1601.77,237.285 1602.34,236.758 1602.91,237.224 1603.48,239.871 1604.05,238.295 1604.61,235.694 1605.18,235.361 1605.75,233.05 1606.32,233.99 1606.89,232.667 1607.46,233.714 1608.02,235.426 1608.59,236.225 1609.16,236.871 1609.73,237.633 1610.3,240.304 1610.87,238.331 1611.43,240.427 1612,237.413 1612.57,236.804 1613.14,237.126 1613.71,234.382 1614.28,234.008 1614.84,234.635 1615.41,234.307 1615.98,234.064 1616.55,234.673 1617.12,234.228 1617.69,232.81 1618.26,230.534 1618.82,230.373 1619.39,230.265 1619.96,225.991 1620.53,226.161 1621.1,227.347 1621.67,227.467 1622.23,227.535 1622.8,227.526 1623.37,227.668 1623.94,227.814 1624.51,227.881 1625.08,228.084 1625.64,230.044 1626.21,228.118 1626.78,230.317 1627.35,230.047 1627.92,230.89 1628.49,232.824 1629.05,231.471 1629.62,231.153 1630.19,231.74 1630.76,233.556 1631.33,231.93 1631.9,229.712 1632.46,230.652 1633.03,228.558 1633.6,229.579 1634.17,230.294 1634.74,226.991 1635.31,228.314 1635.87,229.601 1636.44,230.551 1637.01,230.204 1637.58,230.221 1638.15,230.121 1638.72,227.053 1639.28,226.258 1639.85,229.668 1640.42,228.647 1640.99,227.466 1641.56,228.408 1642.13,228.171 1642.69,228.162 1643.26,225.228 1643.83,222.39 1644.4,223.945 1644.97,224.184 1645.54,225.492 1646.1,226.058 1646.67,225.29 1647.24,227.626 1647.81,226.703 1648.38,224.741 1648.95,223.219 1649.51,224.658 1650.08,224.254 1650.65,225.745 1651.22,226.184 1651.79,228.22 1652.36,228.299 1652.92,228.443 1653.49,228.578 1654.06,225.817 1654.63,225.145 1655.2,227.463 1655.77,228.772 1656.33,228.799 1656.9,233.306 1657.47,233.062 1658.04,233.126 1658.61,234.97 1659.18,234.448 1659.74,234.274 1660.31,234.965 1660.88,233.566 1661.45,233.187 1662.02,231.816 1662.59,231.697 1663.15,231.472 1663.72,231.402 1664.29,231.352 1664.86,230.2 1665.43,228.312 1666,228.594 1666.56,227.534 1667.13,226.955 1667.7,225.97 1668.27,225.364 1668.84,227.65 1669.41,228.987 1669.97,232.097 1670.54,230.842 1671.11,228.954 1671.68,229.175 1672.25,226.448 1672.82,225.767 1673.38,225.028 1673.95,224.246 1674.52,224.813 1675.09,224.318 1675.66,224.875 1676.23,226.315 1676.79,228.651 1677.36,229.112 1677.93,229.184 1678.5,232.238 1679.07,232.199 1679.64,234.252 1680.2,233.98 1680.77,232.576 1681.34,233.627 1681.91,235.432 1682.48,234.15 1683.05,236.031 1683.61,237.6 1684.18,236.094 1684.75,235.651 1685.32,234.263 1685.89,235.02 1686.46,233.862 1687.02,234.634 1687.59,233.382 1688.16,232.214 1688.73,231.204 1689.3,231.329 1689.87,232.229 1690.44,233.097 1691,231.985 1691.57,231.884 1692.14,230.958 1692.71,229.887 1693.28,231.953 1693.85,230.691 1694.41,230.639 1694.98,232.492 1695.55,232.313 1696.12,231.153 1696.69,229.948 1697.26,228.015 1697.82,228.061 1698.39,229.348 1698.96,229.441 1699.53,228.594 1700.1,229.652 1700.67,235.51 1701.23,235.972 1701.8,236.653 1702.37,235.274 1702.94,238.832 1703.51,236.071 1704.08,232.297 1704.64,232.002 1705.21,233.84 1705.78,232.588 1706.35,232.254 1706.92,231.868 1707.49,232.673 1708.05,231.436 1708.62,231.27 1709.19,230.403 1709.76,229.172 1710.33,229.259 1710.9,228.162 1711.46,226.342 1712.03,226.487 1712.6,226.823 1713.17,228.042 1713.74,227.09 1714.31,227.295 1714.87,226.31 1715.44,226.501 1716.01,227.662 1716.58,228.618 1717.15,228.721 1717.72,230.099 1718.28,230.256 1718.85,229.37 1719.42,229.398 1719.99,229.457 1720.56,229.523 1721.13,229.415 1721.69,231.425 1722.26,231.217 1722.83,231.104 1723.4,232.954 1723.97,231.67 1724.54,230.576 1725.1,229.643 1725.67,227.522 1726.24,224.758 1726.81,227.279 1727.38,226.667 1727.95,227.087 1728.51,227.397 1729.08,228.622 1729.65,226.719 1730.22,227.947 1730.79,227.214 1731.36,228.352 1731.92,228.313 1732.49,229.568 1733.06,230.636 1733.63,230.491 1734.2,231.329 1734.77,232.197 1735.33,233.087 1735.9,232.924 1736.47,234.816 1737.04,234.457 1737.61,234.162 1738.18,234.735 1738.74,233.217 1739.31,232.101 1739.88,231.806 1740.45,231.608 1741.02,231.5 1741.59,229.348 1742.15,228.397 1742.72,229.496 1743.29,228.589 1743.86,227.8 1744.43,227.087 1745,226.332 1745.56,226.647 1746.13,226.085 1746.7,224.154 1747.27,224.543 1747.84,226.087 1748.41,225.506 1748.97,226.968 1749.54,226.073 1750.11,227.76 1750.68,228.809 1751.25,229.974 1751.82,231.054 1752.38,230.176 1752.95,230.126 1753.52,227.843 1754.09,231.241 1754.66,229.223 1755.23,228.229 1755.79,228.455 1756.36,228.696 1756.93,232.004 1757.5,231.005 1758.07,230.05 1758.64,226.731 1759.21,229.014 1759.77,229.44 1760.34,230.755 1760.91,227.7 1761.48,227.634 1762.05,228.932 1762.62,227.024 1763.18,229.763 1763.75,230.75 1764.32,232.818 1764.89,232.679 1765.46,233.542 1766.03,233.154 1766.59,232.945 1767.16,231.75 1767.73,231.668 1768.3,230.475 1768.87,230.381 1769.44,230.509 1770,232.684 1770.57,232.49 1771.14,232.126 1771.71,231.074 1772.28,234.221 1772.85,235.95 1773.41,235.445 1773.98,233.897 1774.55,232.45 1775.12,232.397 1775.69,232.297 1776.26,234.147 1776.82,237.925 1777.39,235.285 1777.96,229.933 1778.53,227.933 1779.1,226.967 1779.67,227.12 1780.23,226.192 1780.8,224.27 1781.37,224.626 1781.94,224.973 1782.51,223.993 1783.08,225.253 1783.64,225.678 1784.21,224.772 1784.78,223.083 1785.35,228.165 1785.92,230.406 1786.49,228.284 1787.05,229.712 1787.62,230.911 1788.19,231.988 1788.76,230.807 1789.33,229.703 1789.9,231.623 1790.46,231.851 1791.03,232.979 1791.6,232.887 1792.17,232.81 1792.74,231.673 1793.31,230.628 1793.87,231.731 1794.44,230.616 1795.01,232.801 1795.58,233.533 1796.15,234.557 1796.72,234.334 1797.28,233.1 1797.85,232.924 1798.42,233.842 1798.99,232.4 1799.56,232.106 1800.13,232.061 1800.69,231.068 1801.26,232.789 1801.83,232.248 1802.4,232.103 1802.97,232.031 1803.54,232.145 1804.1,231.905 1804.67,230.91 1805.24,225.765 1805.81,225.064 1806.38,224.456 1806.95,225.756 1807.51,226.939 1808.08,227.986 1808.65,227.142 1809.22,226.35 1809.79,228.361 1810.36,228.422 1810.92,228.329 1811.49,227.263 1812.06,230.533 1812.63,228.501 1813.2,228.904 1813.77,225.119 1814.33,225.469 1814.9,224.904 1815.47,222.182 1816.04,222.913 1816.61,225.537 1817.18,227.102 1817.74,228.709 1818.31,230.226 1818.88,232.551 1819.45,233.506 1820.02,234.41 1820.59,235.345 1821.15,233.927 1821.72,232.607 1822.29,233.571 1822.86,233.255 1823.43,232.273 1824,233.164 1824.56,233.046 1825.13,232.923 1825.7,231.964 1826.27,230.778 1826.84,229.832 1827.41,230.978 1827.97,228.874 1828.54,228.031 1829.11,230.38 1829.68,232.44 1830.25,232.198 1830.82,232.268 1831.39,233.082 1831.95,232.787 1832.52,232.447 1833.09,232.311 1833.66,230.093 1834.23,230.022 1834.8,229.954 1835.36,230.031 1835.93,227.934 1836.5,227.9 1837.07,226.922 1837.64,228.238 1838.21,228.449 1838.77,228.583 1839.34,228.654 1839.91,226.7 1840.48,228.802 1841.05,230.972 1841.62,230.925 1842.18,229.969 1842.75,228.994 1843.32,230.145 1843.89,231.118 1844.46,233.364 1845.03,232.941 1845.59,234.848 1846.16,235.465 1846.73,235 1847.3,236.847 1847.87,236.452 1848.44,235.239 1849,233.73 1849.57,233.476 1850.14,232.266 1850.71,230.882 1851.28,230.581 1851.85,231.454 1852.41,231.303 1852.98,231.13 1853.55,233.163 1854.12,232.537 1854.69,233.328 1855.26,233.239 1855.82,229.945 1856.39,230.742 1856.96,229.676 1857.53,229.644 1858.1,230.629 1858.67,229.509 1859.23,229.532 1859.8,229.526 1860.37,231.378 1860.94,231.21 1861.51,231.093 1862.08,232.146 1862.64,231.84 1863.21,233.4 1863.78,235.297 1864.35,233.847 1864.92,234.399 1865.49,233.055 1866.05,233.729 1866.62,234.438 1867.19,235.016 1867.76,235.593 1868.33,235.126 1868.9,235.821 1869.46,235.423 1870.03,234.833 1870.6,235.461 1871.17,234.879 1871.74,234.354 1872.31,232.92 1872.87,233.547 1873.44,232.931 1874.01,233.576 1874.58,233.141 1875.15,231.843 1875.72,233.39 1876.28,234.127 1876.85,233.523 1877.42,232.967 1877.99,231.576 1878.56,230.264 1879.13,231.131 1879.69,232.152 1880.26,233.931 1880.83,234.661 1881.4,234.265 1881.97,233.897 1882.54,233.588 1883.1,229.91 1883.67,228.605 1884.24,227.633 1884.81,227.627 1885.38,226.636 1885.95,225.583 1886.51,224.758 1887.08,225.214 1887.65,226.439 1888.22,224.722 1888.79,224.963 1889.36,225.972 1889.92,226.156 1890.49,226.425 1891.06,228.579 1891.63,226.591 1892.2,224.733 1892.77,224.235 1893.33,225.88 1893.9,226.139 1894.47,226.283 1895.04,227.642 1895.61,225.808 1896.18,225.879 1896.74,226.517 1897.31,226.815 1897.88,226.942 1898.45,227.092 1899.02,229.378 1899.59,227.349 1900.16,228.441 1900.72,228.201 1901.29,229.128 1901.86,227.374 1902.43,227.576 1903,229.863 1903.57,228.862 1904.13,229.197 1904.7,227.224 1905.27,227.507 1905.84,227.984 1906.41,226.951 1906.98,227.291 1907.54,227.476 1908.11,227.655 1908.68,227.875 1909.25,226.183 1909.82,226.698 1910.39,226.125 1910.95,227.523 1911.52,227.653 1912.09,227.845 1912.66,229.064 1913.23,232.482 1913.8,233.336 1914.36,233.227 1914.93,233.023 1915.5,234.803 1916.07,232.423 1916.64,232.038 1917.21,231.006 1917.77,228.893 1918.34,228.748 1918.91,229.926 1919.48,230.923 1920.05,230.951 1920.62,229.835 1921.18,229.806 1921.75,231.148 1922.32,230.135 1922.89,232.057 1923.46,231.88 1924.03,234.006 1924.59,233.988 1925.16,234.602 1925.73,232.052 1926.3,231.996 1926.87,234.644 1927.44,234.028 1928,231.882 1928.57,230.476 1929.14,229.352 1929.71,230.404 1930.28,230.451 1930.85,229.554 1931.41,228.503 1931.98,229.666 1932.55,227.822 1933.12,226.932 1933.69,225.13 1934.26,226.482 1934.82,225.681 1935.39,226.949 1935.96,226.1 1936.53,228.227 1937.1,229.465 1937.67,227.484 1938.23,225.62 1938.8,225.94 1939.37,223.938 1939.94,226.27 1940.51,227.508 1941.08,227.784 1941.64,227.975 1942.21,227.034 1942.78,228.446 1943.35,229.851 1943.92,228.693 1944.49,226.785 1945.05,227.037 1945.62,227.256 1946.19,229.505 1946.76,228.498 1947.33,229.809 1947.9,227.733 1948.46,229.014 1949.03,228.379 1949.6,226.471 1950.17,226.771 1950.74,228.089 1951.31,228.303 1951.87,227.53 1952.44,226.838 1953.01,228.229 1953.58,228.795 1954.15,228.933 1954.72,229.196 1955.28,233.577 1955.85,234.249 1956.42,233.049 1956.99,232.74 1957.56,232.676 1958.13,231.65 1958.69,231.594 1959.26,233.677 1959.83,232.761 1960.4,234.724 1960.97,234.466 1961.54,235.264 1962.1,234.958 1962.67,235.828 1963.24,236.451 1963.81,235.207 1964.38,233.986 1964.95,233.683 1965.51,235.368 1966.08,233.911 1966.65,235.77 1967.22,237.656 1967.79,234.973 1968.36,234.711 1968.92,235.27 1969.49,231.923 1970.06,229.807 1970.63,229.72 1971.2,227.651 1971.77,229.7 1972.34,228.713 1972.9,229.827 1973.47,229.651 1974.04,230.813 1974.61,228.867 1975.18,228.045 1975.75,227.208 1976.31,227.222 1976.88,225.389 1977.45,224.559 1978.02,227.793 1978.59,228.863 1979.16,229.807 1979.72,229.919 1980.29,230.852 1980.86,231.568 1981.43,232.418 1982,232.326 1982.57,232.257 1983.13,232.395 1983.7,231.15 1984.27,228.884 1984.84,229.889 1985.41,230.126 1985.98,229.203 1986.54,229.275 1987.11,229.384 1987.68,230.57 1988.25,231.496 1988.82,231.474 1989.39,233.568 1989.95,234.15 1990.52,232.784 1991.09,232.437 1991.66,234.269 1992.23,235.09 1992.8,233.424 1993.36,231.014 1993.93,232.106 1994.5,232.093 1995.07,231.864 1995.64,231.843 1996.21,231.909 1996.77,230.792 1997.34,229.724 1997.91,227.574 1998.48,226.68 1999.05,226.92 1999.62,226.072 2000.18,226.361 2000.75,224.465 2001.32,228.046 2001.89,228.304 2002.46,226.682 2003.03,226.872 2003.59,228.092 2004.16,230.433 2004.73,226.358 2005.3,225.652 2005.87,225.915 2006.44,226.272 2007,226.566 2007.57,224.803 2008.14,225.258 2008.71,225.731 2009.28,224.155 2009.85,224.786 2010.41,227.395 2010.98,226.581 2011.55,227.191 2012.12,229.479 2012.69,231.583 2013.26,230.661 2013.82,230.638 2014.39,229.648 2014.96,230.772 2015.53,229.669 2016.1,229.814 2016.67,232.036 2017.23,231.993 2017.8,235.091 2018.37,234.797 2018.94,235.64 2019.51,234.371 2020.08,234.03 2020.64,234.02 2021.21,232.827 2021.78,232.758 2022.35,232.633 2022.92,232.604 2023.49,233.465 2024.05,233.282 2024.62,234.242 2025.19,235.218 2025.76,234.917 2026.33,233.595 2026.9,233.664 2027.46,232.273 2028.03,231.042 2028.6,232.896 2029.17,231.655 2029.74,231.592 2030.31,229.537 2030.87,229.779 2031.44,228.939 2032.01,227.197 2032.58,227.385 2033.15,228.771 2033.72,226.814 2034.28,226.954 2034.85,228.233 2035.42,229.562 2035.99,230.584 2036.56,232.702 2037.13,231.277 2037.69,232.211 2038.26,231.09 2038.83,229.037 2039.4,230.155 2039.97,232.143 2040.54,234.242 2041.11,234.835 2041.67,233.676 2042.24,233.449 2042.81,235.09 2043.38,233.82 2043.95,231.683 2044.52,231.575 2045.08,233.651 2045.65,233.349 2046.22,234.015 2046.79,233.66 2047.36,232.246 2047.93,232.873 2048.49,232.564 2049.06,230.563 2049.63,230.472 2050.2,230.385 2050.77,229.543 2051.34,228.449 2051.9,228.533 2052.47,228.608 2053.04,228.647 2053.61,229.912 2054.18,228.929 2054.75,229.986 2055.31,230.902 2055.88,228.722 2056.45,227.607 2057.02,226.849 2057.59,226.066 2058.16,226.314 2058.72,227.398 2059.29,227.331 2059.86,227.403 2060.43,223.349 2061,224.895 2061.57,224.107 2062.13,224.585 2062.7,227.119 2063.27,230.198 2063.84,229.033 2064.41,226.588 2064.98,227.929 2065.54,225.804 2066.11,225.128 2066.68,226.518 2067.25,226.723 2067.82,226.955 2068.39,227.249 2068.95,228.792 2069.52,229.964 2070.09,230.189 2070.66,232.535 2071.23,233.502 2071.8,233.159 2072.36,233.835 2072.93,234.495 2073.5,234.168 2074.07,231.639 2074.64,231.315 2075.21,231.203 2075.77,229.901 2076.34,229.749 2076.91,230.905 2077.48,229.615 2078.05,228.668 2078.62,229.652 2079.18,228.959 2079.75,225.973 2080.32,226.4 2080.89,225.681 2081.46,227.177 2082.03,226.367 2082.59,226.888 2083.16,227.159 2083.73,228.383 2084.3,226.406 2084.87,226.526 2085.44,228.788 2086,231.026 2086.57,232.855 2087.14,232.89 2087.71,232.675 2088.28,233.528 2088.85,233.519 2089.41,234.458 2089.98,233.243 2090.55,235.001 2091.12,234.819 2091.69,232.6 2092.26,232.334 2092.82,235.207 2093.39,233.83 2093.96,233.728 2094.53,233.621 2095.1,231.324 2095.67,231.281 2096.23,233.25 2096.8,234.042 2097.37,234.704 2097.94,234.386 2098.51,234.577 2099.08,233.153 2099.64,232.711 2100.21,229.342 2100.78,229.287 2101.35,228.401 2101.92,229.242 2102.49,229.088 2103.05,227.123 2103.62,227.148 2104.19,225.213 2104.76,225.368 2105.33,225.704 2105.9,225.306 2106.46,226.951 2107.03,227.047 2107.6,226.418 2108.17,226.699 2108.74,228.119 2109.31,227.339 2109.87,227.559 2110.44,229.813 2111.01,227.755 2111.58,226.995 2112.15,230.312 2112.72,230.471 2113.29,230.52 2113.85,230.648 2114.42,228.544 2114.99,226.72 2115.56,227.954 2116.13,229.197 2116.7,229.125 2117.26,228.537 2117.83,228.649 2118.4,230.114 2118.97,229.245 2119.54,230.318 2120.11,230.243 2120.67,229.228 2121.24,230.328 2121.81,229.38 2122.38,230.727 2122.95,231.811 2123.52,232.893 2124.08,234.058 2124.65,235.009 2125.22,234.739 2125.79,233.433 2126.36,232.29 2126.93,232.193 2127.49,231.978 2128.06,232.87 2128.63,233.409 2129.2,231.066 2129.77,230.16 2130.34,229.125 2130.9,231.595 2131.47,233.405 2132.04,235.169 2132.61,233.858 2133.18,234.886 2133.75,232.521 2134.31,230.179 2134.88,231.083 2135.45,232.278 2136.02,232.16 2136.59,230.199 2137.16,231.316 2137.72,232.252 2138.29,234.194 2138.86,234.101 2139.43,233.832 2140,231.531 2140.57,230.25 2141.13,231.291 2141.7,234.327 2142.27,234.084 2142.84,233.959 2143.41,233.673 2143.98,234.393 2144.54,234.011 2145.11,233.538 2145.68,231.964 2146.25,231.719 2146.82,232.731 2147.39,232.278 2147.95,231.024 2148.52,231.791 2149.09,229.6 2149.66,227.623 2150.23,229.657 2150.8,227.597 2151.36,226.829 2151.93,227.02 2152.5,229.241 2153.07,231.356 2153.64,230.092 2154.21,228.88 2154.77,227.026 2155.34,228.161 2155.91,229.976 2156.48,230.029 2157.05,231.848 2157.62,231.709 2158.18,233.643 2158.75,232.315 2159.32,232.18 2159.89,229.964 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.021 ± 0.023\n  with uncertainty of ± 0.0020554301865051694\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01736 ± (0.00286482, 0.00279452) (MC)\n  95% confidence interval: [-4.02304, -4.01165] (MC)\n  linear error propagation: -4.01729 ± 0.00290251\n  |δ_y| = |0.00155689| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017359603257529, val_l = 0.005679491817635274, val_u = 0.005711414505775281)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip830\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip831\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip832\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.24 2211.02,1138.24 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,953.566 2211.02,953.566 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,768.892 2211.02,768.892 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,584.219 2211.02,584.219 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,399.545 2211.02,399.545 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,214.872 2211.02,214.872 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.24 365.751,1138.24 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,953.566 365.751,953.566 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,768.892 365.751,768.892 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,584.219 365.751,584.219 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,399.545 365.751,399.545 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,214.872 365.751,214.872 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M298.909 1124.04 Q295.298 1124.04 293.469 1127.6 Q291.664 1131.14 291.664 1138.27 Q291.664 1145.38 293.469 1148.94 Q295.298 1152.49 298.909 1152.49 Q302.543 1152.49 304.349 1148.94 Q306.177 1145.38 306.177 1138.27 Q306.177 1131.14 304.349 1127.6 Q302.543 1124.04 298.909 1124.04 M298.909 1120.33 Q304.719 1120.33 307.775 1124.94 Q310.853 1129.52 310.853 1138.27 Q310.853 1147 307.775 1151.61 Q304.719 1156.19 298.909 1156.19 Q293.099 1156.19 290.02 1151.61 Q286.964 1147 286.964 1138.27 Q286.964 1129.52 290.02 1124.94 Q293.099 1120.33 298.909 1120.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M259.557 966.91 L267.196 966.91 L267.196 940.545 L258.886 942.211 L258.886 937.952 L267.15 936.286 L271.826 936.286 L271.826 966.91 L279.465 966.91 L279.465 970.846 L259.557 970.846 L259.557 966.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 939.364 Q295.298 939.364 293.469 942.929 Q291.664 946.471 291.664 953.6 Q291.664 960.707 293.469 964.272 Q295.298 967.813 298.909 967.813 Q302.543 967.813 304.349 964.272 Q306.177 960.707 306.177 953.6 Q306.177 946.471 304.349 942.929 Q302.543 939.364 298.909 939.364 M298.909 935.661 Q304.719 935.661 307.775 940.267 Q310.853 944.85 310.853 953.6 Q310.853 962.327 307.775 966.934 Q304.719 971.517 298.909 971.517 Q293.099 971.517 290.02 966.934 Q286.964 962.327 286.964 953.6 Q286.964 944.85 290.02 940.267 Q293.099 935.661 298.909 935.661 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M262.775 782.237 L279.094 782.237 L279.094 786.172 L257.15 786.172 L257.15 782.237 Q259.812 779.482 264.395 774.853 Q269.002 770.2 270.182 768.857 Q272.428 766.334 273.307 764.598 Q274.21 762.839 274.21 761.149 Q274.21 758.395 272.266 756.658 Q270.344 754.922 267.242 754.922 Q265.043 754.922 262.59 755.686 Q260.159 756.45 257.381 758.001 L257.381 753.279 Q260.205 752.145 262.659 751.566 Q265.113 750.987 267.15 750.987 Q272.52 750.987 275.715 753.672 Q278.909 756.358 278.909 760.848 Q278.909 762.978 278.099 764.899 Q277.312 766.797 275.205 769.39 Q274.627 770.061 271.525 773.279 Q268.423 776.473 262.775 782.237 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 754.691 Q295.298 754.691 293.469 758.256 Q291.664 761.797 291.664 768.927 Q291.664 776.033 293.469 779.598 Q295.298 783.14 298.909 783.14 Q302.543 783.14 304.349 779.598 Q306.177 776.033 306.177 768.927 Q306.177 761.797 304.349 758.256 Q302.543 754.691 298.909 754.691 M298.909 750.987 Q304.719 750.987 307.775 755.594 Q310.853 760.177 310.853 768.927 Q310.853 777.654 307.775 782.26 Q304.719 786.843 298.909 786.843 Q293.099 786.843 290.02 782.26 Q286.964 777.654 286.964 768.927 Q286.964 760.177 290.02 755.594 Q293.099 750.987 298.909 750.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M272.914 582.865 Q276.27 583.582 278.145 585.851 Q280.043 588.119 280.043 591.453 Q280.043 596.568 276.525 599.369 Q273.006 602.17 266.525 602.17 Q264.349 602.17 262.034 601.73 Q259.742 601.314 257.289 600.457 L257.289 595.943 Q259.233 597.078 261.548 597.656 Q263.863 598.235 266.386 598.235 Q270.784 598.235 273.076 596.499 Q275.39 594.763 275.39 591.453 Q275.39 588.397 273.238 586.684 Q271.108 584.948 267.289 584.948 L263.261 584.948 L263.261 581.105 L267.474 581.105 Q270.923 581.105 272.752 579.74 Q274.58 578.351 274.58 575.758 Q274.58 573.096 272.682 571.684 Q270.807 570.249 267.289 570.249 Q265.367 570.249 263.168 570.666 Q260.969 571.082 258.33 571.962 L258.33 567.795 Q260.992 567.055 263.307 566.684 Q265.645 566.314 267.705 566.314 Q273.029 566.314 276.131 568.744 Q279.233 571.152 279.233 575.272 Q279.233 578.142 277.59 580.133 Q275.946 582.101 272.914 582.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 570.018 Q295.298 570.018 293.469 573.582 Q291.664 577.124 291.664 584.254 Q291.664 591.36 293.469 594.925 Q295.298 598.466 298.909 598.466 Q302.543 598.466 304.349 594.925 Q306.177 591.36 306.177 584.254 Q306.177 577.124 304.349 573.582 Q302.543 570.018 298.909 570.018 M298.909 566.314 Q304.719 566.314 307.775 570.92 Q310.853 575.504 310.853 584.254 Q310.853 592.98 307.775 597.587 Q304.719 602.17 298.909 602.17 Q293.099 602.17 290.02 597.587 Q286.964 592.98 286.964 584.254 Q286.964 575.504 290.02 570.92 Q293.099 566.314 298.909 566.314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M271.594 386.339 L259.789 404.788 L271.594 404.788 L271.594 386.339 M270.367 382.265 L276.247 382.265 L276.247 404.788 L281.177 404.788 L281.177 408.677 L276.247 408.677 L276.247 416.825 L271.594 416.825 L271.594 408.677 L255.992 408.677 L255.992 404.163 L270.367 382.265 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 385.344 Q295.298 385.344 293.469 388.909 Q291.664 392.451 291.664 399.58 Q291.664 406.687 293.469 410.251 Q295.298 413.793 298.909 413.793 Q302.543 413.793 304.349 410.251 Q306.177 406.687 306.177 399.58 Q306.177 392.451 304.349 388.909 Q302.543 385.344 298.909 385.344 M298.909 381.64 Q304.719 381.64 307.775 386.247 Q310.853 390.83 310.853 399.58 Q310.853 408.307 307.775 412.913 Q304.719 417.497 298.909 417.497 Q293.099 417.497 290.02 412.913 Q286.964 408.307 286.964 399.58 Q286.964 390.83 290.02 386.247 Q293.099 381.64 298.909 381.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M258.793 197.592 L277.15 197.592 L277.15 201.527 L263.076 201.527 L263.076 209.999 Q264.094 209.652 265.113 209.49 Q266.131 209.305 267.15 209.305 Q272.937 209.305 276.316 212.476 Q279.696 215.648 279.696 221.064 Q279.696 226.643 276.224 229.745 Q272.752 232.823 266.432 232.823 Q264.256 232.823 261.988 232.453 Q259.742 232.083 257.335 231.342 L257.335 226.643 Q259.418 227.777 261.641 228.333 Q263.863 228.888 266.34 228.888 Q270.344 228.888 272.682 226.782 Q275.02 224.675 275.02 221.064 Q275.02 217.453 272.682 215.347 Q270.344 213.24 266.34 213.24 Q264.465 213.24 262.59 213.657 Q260.738 214.073 258.793 214.953 L258.793 197.592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M298.909 200.671 Q295.298 200.671 293.469 204.236 Q291.664 207.777 291.664 214.907 Q291.664 222.013 293.469 225.578 Q295.298 229.12 298.909 229.12 Q302.543 229.12 304.349 225.578 Q306.177 222.013 306.177 214.907 Q306.177 207.777 304.349 204.236 Q302.543 200.671 298.909 200.671 M298.909 196.967 Q304.719 196.967 307.775 201.574 Q310.853 206.157 310.853 214.907 Q310.853 223.634 307.775 228.24 Q304.719 232.823 298.909 232.823 Q293.099 232.823 290.02 228.24 Q286.964 223.634 286.964 214.907 Q286.964 206.157 290.02 201.574 Q293.099 196.967 298.909 196.967 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip832)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1002.17 400.199,1019.78 400.786,897.857 401.372,783.691 401.958,681.349 402.545,587.391 403.131,502 403.718,539.03 404.304,566.008 404.891,492.853 405.477,424.594 406.063,362.746 406.65,390.335 407.236,337.453 407.823,288.592 408.409,244.834 408.995,335.068 409.582,294.75 410.168,314.204 410.755,281.321 411.341,298.073 411.927,268.422 412.514,285.665 413.1,260.271 413.687,237.759 414.273,219.895 414.86,238.046 415.446,254.521 416.032,242.365 416.619,259.755 417.205,247.908 417.792,264.312 418.378,259.525 418.964,253.047 419.551,249.977 420.137,248.958 420.724,266.357 421.31,284.745 421.896,321.852 422.483,324.471 423.069,342.093 423.656,373.088 424.242,389.529 424.829,391.606 425.415,420.078 426.001,436.373 426.588,462.849 427.174,486.676 427.761,499.337 428.347,532.184 428.933,544.705 429.52,548.427 430.106,553.931 430.693,566.325 431.279,579.057 431.865,591.491 432.452,611.173 433.038,616.111 433.625,621.86 434.211,640.753 434.798,646.447 435.384,659.708 435.97,672.676 436.557,685.346 437.143,702.834 437.73,724.994 438.316,736.112 438.902,751.186 439.489,766.487 440.075,772.595 440.662,778.794 441.248,797.785 441.835,803.953 442.421,814.334 443.007,831.98 443.594,834.212 444.18,848.233 444.767,854.544 445.353,863.891 445.939,880.368 446.526,899.432 447.112,917.973 447.699,922.872 448.285,930.557 448.871,941.128 449.458,945.985 450.044,956.53 450.631,964.027 451.217,969.181 451.804,974.285 452.39,978.796 452.976,991.87 453.563,1004.5 454.149,1016.08 454.736,1019.69 455.322,1026.19 455.908,1032.47 456.495,1038.23 457.081,1042.32 457.668,1054.99 458.254,1060.16 458.84,1065.1 459.427,1070.22 460.013,1084.46 460.6,1086.68 461.186,1089.39 461.773,1094.03 462.359,1102.69 462.945,1104.86 463.532,1106.99 464.118,1111.47 464.705,1122.11 465.291,1128.09 465.877,1135.88 466.464,1143.02 467.05,1146.35 467.637,1151.55 468.223,1152.42 468.809,1153.47 469.396,1162.07 469.982,1162.49 470.569,1165.3 471.155,1169.81 471.742,1170.5 472.328,1169.19 472.914,1171.72 473.501,1173.98 474.087,1176.77 474.674,1181.31 475.26,1183.59 475.846,1188.05 476.433,1188.22 477.019,1188.84 477.606,1191.24 478.192,1193.51 478.778,1194.14 479.365,1194.85 479.951,1195.4 480.538,1199.5 481.124,1199.81 481.711,1199.94 482.297,1201.91 482.883,1203.74 483.47,1204.17 484.056,1204.53 484.643,1204.68 485.229,1206.92 485.815,1207.02 486.402,1209.15 486.988,1211.26 487.575,1211.22 488.161,1213.21 488.748,1219.87 489.334,1219.56 489.92,1221.15 490.507,1219.64 491.093,1221.57 491.68,1219.65 492.266,1221.37 492.852,1220.92 493.439,1220.85 494.025,1226.13 494.612,1224.7 495.198,1224.63 495.784,1226.41 496.371,1227.82 496.957,1229.69 497.544,1228.05 498.13,1228.39 498.717,1235.07 499.303,1238.24 499.889,1242.19 500.476,1243.35 501.062,1243.68 501.649,1250.49 502.235,1247.83 502.821,1247.27 503.408,1246.57 503.994,1244.3 504.581,1243.63 505.167,1241.35 505.753,1241.11 506.34,1245.43 506.926,1246.46 507.513,1244.26 508.099,1245.23 508.686,1245.92 509.272,1249.97 509.858,1250.53 510.445,1249.4 511.031,1248.47 511.618,1249.2 512.204,1248.3 512.79,1250.24 513.377,1249.57 513.963,1248.68 514.55,1246.15 515.136,1245.48 515.722,1249.48 516.309,1249.7 516.895,1248.62 517.482,1247.36 518.068,1246.59 518.655,1247.3 519.241,1246.64 519.827,1247.6 520.414,1243.87 521,1243.53 521.587,1244.65 522.173,1240.92 522.759,1242.2 523.346,1243.38 523.932,1244.07 524.519,1243.53 525.105,1244.37 525.691,1245.46 526.278,1249.86 526.864,1249.03 527.451,1246.72 528.037,1247.79 528.624,1245.29 529.21,1244.86 529.796,1241.06 530.383,1242.3 530.969,1237.3 531.556,1238.65 532.142,1238.6 532.728,1236.66 533.315,1239.57 533.901,1240.96 534.488,1238.83 535.074,1239.99 535.661,1239.74 536.247,1240.69 536.833,1241.89 537.42,1241.45 538.006,1240.95 538.593,1242.28 539.179,1241.74 539.765,1244.07 540.352,1244.9 540.938,1242.5 541.525,1242.09 542.111,1241.41 542.697,1240.95 543.284,1238.84 543.87,1238.63 544.457,1239.4 545.043,1240.2 545.63,1241.55 546.216,1240.98 546.802,1242.13 547.389,1242.84 547.975,1243.94 548.562,1241.68 549.148,1240.84 549.734,1243.45 550.321,1239.48 550.907,1237.55 551.494,1237 552.08,1235.11 552.666,1237.99 553.253,1237.7 553.839,1240.34 554.426,1238.01 555.012,1237.27 555.599,1238.17 556.185,1237.27 556.771,1236.77 557.358,1233.62 557.944,1233.25 558.531,1234.57 559.117,1234.15 559.703,1233.77 560.29,1232.01 560.876,1230.3 561.463,1230.41 562.049,1232.97 562.635,1235.46 563.222,1236.43 563.808,1241.82 564.395,1244.28 564.981,1243.52 565.568,1241.07 566.154,1240.38 566.74,1238.22 567.327,1237.61 567.913,1235.87 568.5,1236.75 569.086,1236.64 569.672,1236.21 570.259,1237.44 570.845,1236.9 571.432,1236.44 572.018,1236.11 572.605,1235.82 573.191,1232.27 573.777,1233.51 574.364,1234.84 574.95,1235.98 575.537,1237.08 576.123,1236.43 576.709,1236.12 577.296,1230.99 577.882,1233.75 578.469,1233.51 579.055,1231.59 579.641,1232.75 580.228,1234.09 580.814,1232.52 581.401,1230.58 581.987,1233.43 582.574,1234.6 583.16,1234.28 583.746,1236.78 584.333,1236.04 584.919,1237.29 585.506,1235.13 586.092,1236.23 586.678,1236.97 587.265,1234.54 587.851,1231.01 588.438,1227.41 589.024,1227.62 589.61,1222.8 590.197,1221.29 590.783,1219.96 591.37,1223.76 591.956,1225.79 592.543,1225.56 593.129,1227.32 593.715,1225.42 594.302,1223.88 594.888,1226.89 595.475,1228.32 596.061,1226.87 596.647,1226.78 597.234,1226.77 597.82,1228.31 598.407,1228.35 598.993,1228.24 599.579,1229.46 600.166,1230.55 600.752,1230.3 601.339,1229.92 601.925,1231.36 602.512,1231.16 603.098,1232.52 603.684,1231.88 604.271,1231.48 604.857,1229.32 605.444,1229.28 606.03,1228.98 606.616,1231.67 607.203,1230.95 607.789,1231.99 608.376,1231.28 608.962,1230.81 609.548,1233.4 610.135,1230.04 610.721,1231.26 611.308,1232.18 611.894,1230.32 612.481,1228.16 613.067,1228.05 613.653,1227.69 614.24,1227.38 614.826,1227.12 615.413,1225.07 615.999,1224.85 616.585,1224.78 617.172,1223.03 617.758,1220.01 618.345,1220.16 618.931,1220.22 619.518,1220.28 620.104,1221.95 620.69,1221.94 621.277,1220.39 621.863,1215.99 622.45,1216.4 623.036,1217.99 623.622,1218.57 624.209,1217.53 624.795,1217.83 625.382,1216.31 625.968,1220.62 626.554,1217.65 627.141,1216.36 627.727,1218.26 628.314,1218.32 628.9,1220.19 629.487,1220.33 630.073,1222.15 630.659,1223.5 631.246,1223.2 631.832,1227.72 632.419,1227.44 633.005,1228.82 633.591,1228.4 634.178,1225.24 634.764,1229.66 635.351,1228.99 635.937,1230.15 636.523,1229.45 637.11,1225.99 637.696,1227.4 638.283,1227.01 638.869,1226.49 639.456,1227.69 640.042,1228.79 640.628,1226.79 641.215,1226.4 641.801,1223.15 642.388,1226.27 642.974,1227.52 643.56,1225.57 644.147,1224.06 644.733,1224.07 645.32,1225.18 645.906,1225.32 646.492,1226.34 647.079,1224.76 647.665,1222.98 648.252,1224.53 648.838,1226.11 649.425,1225.93 650.011,1225.83 650.597,1227.12 651.184,1228.88 651.77,1230.13 652.357,1229.7 652.943,1227.8 653.529,1225.83 654.116,1225.76 654.702,1225.69 655.289,1225.57 655.875,1223.86 656.462,1225.21 657.048,1226.63 657.634,1227.81 658.221,1227.69 658.807,1228.76 659.394,1233.01 659.98,1230.67 660.566,1231.52 661.153,1231.14 661.739,1229.07 662.326,1227.12 662.912,1229.59 663.498,1227.56 664.085,1228.91 664.671,1223.94 665.258,1222.43 665.844,1222.11 666.431,1223.54 667.017,1224.87 667.603,1223.2 668.19,1221.19 668.776,1221.07 669.363,1220.82 669.949,1220.6 670.535,1218.92 671.122,1220.28 671.708,1221.85 672.295,1221.6 672.881,1221.35 673.467,1221.17 674.054,1222.78 674.64,1222.45 675.227,1223.8 675.813,1226.77 676.4,1230.96 676.986,1233.4 677.572,1234.27 678.159,1233.52 678.745,1231.03 679.332,1230.64 679.918,1228.18 680.504,1230.42 681.091,1231.19 681.677,1227.38 682.264,1228.07 682.85,1229.23 683.436,1227.03 684.023,1228.07 684.609,1229.08 685.196,1226.85 685.782,1225.08 686.369,1226.38 686.955,1224.38 687.541,1224.03 688.128,1219.13 688.714,1222.05 689.301,1218.9 689.887,1217.48 690.473,1219.15 691.06,1214.26 691.646,1213.03 692.233,1213.24 692.819,1216.51 693.405,1215.28 693.992,1215.44 694.578,1214 695.165,1215.77 695.751,1215.74 696.338,1215.84 696.924,1214.13 697.51,1212.4 698.097,1212.67 698.683,1214.44 699.27,1216.01 699.856,1216.06 700.442,1216.4 701.029,1217.93 701.615,1219.35 702.202,1219.4 702.788,1217.92 703.375,1220.99 703.961,1220.79 704.547,1222.12 705.134,1221.84 705.72,1220.25 706.307,1220.26 706.893,1221.36 707.479,1222.64 708.066,1222.34 708.652,1220.4 709.239,1223.16 709.825,1219.58 710.411,1219.56 710.998,1219.75 711.584,1218.44 712.171,1217.23 712.757,1217.1 713.344,1221.75 713.93,1226.14 714.516,1225.76 715.103,1225.28 715.689,1226.34 716.276,1225.99 716.862,1226.96 717.448,1223.29 718.035,1219.81 718.621,1216.88 719.208,1215.12 719.794,1216.75 720.38,1220.03 720.967,1218.67 721.553,1220.25 722.14,1223.44 722.726,1224.91 723.313,1227.48 723.899,1228.78 724.485,1226.42 725.072,1224.43 725.658,1225.47 726.245,1223.39 726.831,1223.06 727.417,1222.8 728.004,1225.52 728.59,1221.79 729.177,1221.56 729.763,1222.72 730.349,1219.62 730.936,1221.25 731.522,1214.78 732.109,1211.96 732.695,1209.01 733.282,1208.31 733.868,1210.32 734.454,1213.6 735.041,1212.68 735.627,1212.93 736.214,1212.15 736.8,1212.61 737.386,1212.8 737.973,1213.05 738.559,1212.02 739.146,1213.78 739.732,1213.67 740.318,1217.02 740.905,1215.38 741.491,1215.47 742.078,1218.69 742.664,1218.73 743.251,1218.69 743.837,1218.58 744.423,1216.72 745.01,1216.34 745.596,1218.28 746.183,1221.14 746.769,1223.76 747.355,1224.61 747.942,1222.53 748.528,1223.9 749.115,1219.06 749.701,1218.8 750.288,1215.8 750.874,1216.08 751.46,1211.88 752.047,1213.74 752.633,1218.4 753.22,1217.89 753.806,1219.33 754.392,1219.3 754.979,1220.68 755.565,1220.64 756.152,1221.89 756.738,1223.16 757.324,1222.79 757.911,1222.71 758.497,1223.97 759.084,1222.46 759.67,1224.96 760.257,1224.32 760.843,1225.04 761.429,1224.75 762.016,1224.2 762.602,1223.92 763.189,1225.24 763.775,1224.98 764.361,1224.39 764.948,1222.34 765.534,1217.58 766.121,1218.91 766.707,1217.12 767.293,1217.06 767.88,1217.04 768.466,1219.68 769.053,1221.06 769.639,1222.17 770.226,1222.03 770.812,1223.33 771.398,1224.27 771.985,1223.85 772.571,1220.43 773.158,1220.21 773.744,1218.45 774.33,1222.8 774.917,1225.57 775.503,1225.34 776.09,1223.5 776.676,1217.08 777.262,1218.59 777.849,1218.21 778.435,1218.23 779.022,1219.87 779.608,1219.44 780.195,1219.41 780.781,1219.06 781.367,1219 781.954,1212.86 782.54,1212.85 783.127,1212.94 783.713,1215.9 784.299,1214.24 784.886,1212.71 785.472,1214.05 786.059,1212.48 786.645,1214.16 787.232,1212.48 787.818,1215.42 788.404,1216.83 788.991,1217.23 789.577,1212.77 790.164,1211.43 790.75,1216.17 791.336,1216.38 791.923,1216.54 792.509,1216.23 793.096,1214.61 793.682,1214.59 794.268,1212.95 794.855,1213.17 795.441,1212.04 796.028,1216.78 796.614,1216.57 797.201,1215.04 797.787,1216.42 798.373,1214.36 798.96,1210.08 799.546,1211.85 800.133,1212.15 800.719,1212.46 801.305,1211.02 801.892,1211.6 802.478,1210.24 803.065,1214.97 803.651,1214.91 804.237,1214.68 804.824,1212.19 805.41,1210.86 805.997,1211.45 806.583,1214.72 807.17,1214.51 807.756,1212.7 808.342,1211.63 808.929,1211.89 809.515,1208.73 810.102,1210.26 810.688,1209.12 811.274,1203.94 811.861,1207.64 812.447,1209.83 813.034,1210.26 813.62,1212 814.206,1215.17 814.793,1212.34 815.379,1216.78 815.966,1215.06 816.552,1211.8 817.139,1209.15 817.725,1209.08 818.311,1207.63 818.898,1209.43 819.484,1209.73 820.071,1211.37 820.657,1212.85 821.243,1211.83 821.83,1213.25 822.416,1213.53 823.003,1213.75 823.589,1215.29 824.175,1214.93 824.762,1213.5 825.348,1214.98 825.935,1213.61 826.521,1213.7 827.108,1212.29 827.694,1210.84 828.28,1211.1 828.867,1214.2 829.453,1212.96 830.04,1211.65 830.626,1211.77 831.212,1211.82 831.799,1210.83 832.385,1209.62 832.972,1211.62 833.558,1213.47 834.145,1213.63 834.731,1213.68 835.317,1218.4 835.904,1219.5 836.49,1222.16 837.077,1220.38 837.663,1221.57 838.249,1219.87 838.836,1220.89 839.422,1222.32 840.009,1221.89 840.595,1220.08 841.181,1216.72 841.768,1217.15 842.354,1218.49 842.941,1219.57 843.527,1216.44 844.114,1216.42 844.7,1219.63 845.286,1219.36 845.873,1219.05 846.459,1218.69 847.046,1215.54 847.632,1218.46 848.218,1216.51 848.805,1218.02 849.391,1216.23 849.978,1217.63 850.564,1218.93 851.15,1218.42 851.737,1222.97 852.323,1226.93 852.91,1226.26 853.496,1225.43 854.083,1223.27 854.669,1221.44 855.255,1219.56 855.842,1219.33 856.428,1222.13 857.015,1220.17 857.601,1219.92 858.187,1219.79 858.774,1216.31 859.36,1211.72 859.947,1213.15 860.533,1213.4 861.119,1216.54 861.706,1219.43 862.292,1220.83 862.879,1220.67 863.465,1221.68 864.052,1222.48 864.638,1220.37 865.224,1221.23 865.811,1221.19 866.397,1222.16 866.984,1221.6 867.57,1220.97 868.156,1222.36 868.743,1220.25 869.329,1218.21 869.916,1216.39 870.502,1216.17 871.089,1219.23 871.675,1217.37 872.261,1215.94 872.848,1219.02 873.434,1217.2 874.021,1217.11 874.607,1219.95 875.193,1222.86 875.78,1222.18 876.366,1221.74 876.953,1221.49 877.539,1222.29 878.125,1220.4 878.712,1218.46 879.298,1218.13 879.885,1217.8 880.471,1215.88 881.058,1217.12 881.644,1218.41 882.23,1216.65 882.817,1215.08 883.403,1213.53 883.99,1213.67 884.576,1210.56 885.162,1210.49 885.749,1209.12 886.335,1211.1 886.922,1209.96 887.508,1211.95 888.094,1211.74 888.681,1213.38 889.267,1213.52 889.854,1212.42 890.44,1212.45 891.027,1214.11 891.613,1215.6 892.199,1215.52 892.786,1214.21 893.372,1215.79 893.959,1214.13 894.545,1216.95 895.131,1219.66 895.718,1221.01 896.304,1221.82 896.891,1221.65 897.477,1221.23 898.063,1220.84 898.65,1221.85 899.236,1222.94 899.823,1218.13 900.409,1222.6 900.996,1222.27 901.582,1223.33 902.168,1221.26 902.755,1219.65 903.341,1214.91 903.928,1210.16 904.514,1211.66 905.1,1211.75 905.687,1211.95 906.273,1212.49 906.86,1209.64 907.446,1211.37 908.032,1211.5 908.619,1216.21 909.205,1216.39 909.792,1215.24 910.378,1213.69 910.965,1213.61 911.551,1210.99 912.137,1212.45 912.724,1215.21 913.31,1216.78 913.897,1216.52 914.483,1213.59 915.069,1213.91 915.656,1214.13 916.242,1211.07 916.829,1209.74 917.415,1210.16 918.002,1214.81 918.588,1216.17 919.174,1217.63 919.761,1218.74 920.347,1217.32 920.934,1215.35 921.52,1216.48 922.106,1216.34 922.693,1212.9 923.279,1211.43 923.866,1211.25 924.452,1211.16 925.038,1212.75 925.625,1215.62 926.211,1213.95 926.798,1213.74 927.384,1209.04 927.971,1207.7 928.557,1206.57 929.143,1205.18 929.73,1203.73 930.316,1207.53 930.903,1210.76 931.489,1209.3 932.075,1212.63 932.662,1214.15 933.248,1215.48 933.835,1215.59 934.421,1215.79 935.007,1212.67 935.594,1214.32 936.18,1215.83 936.767,1214.23 937.353,1215.65 937.94,1212.49 938.526,1212.65 939.112,1214.21 939.699,1215.5 940.285,1216.88 940.872,1214.93 941.458,1214.93 942.044,1213.25 942.631,1213.72 943.217,1213.63 943.804,1216.71 944.39,1215.03 944.976,1214.49 945.563,1214.64 946.149,1211.74 946.736,1213.75 947.322,1213.78 947.909,1216.62 948.495,1214.91 949.081,1217.87 949.668,1217.73 950.254,1219.04 950.841,1219.91 951.427,1218.37 952.013,1216.44 952.6,1214.74 953.186,1214.39 953.773,1214.28 954.359,1213.1 954.945,1211.94 955.532,1212.51 956.118,1212.38 956.705,1215.68 957.291,1212.57 957.878,1215.67 958.464,1212.54 959.05,1213.95 959.637,1212.14 960.223,1216.79 960.81,1216.59 961.396,1216.39 961.982,1217.93 962.569,1217.96 963.155,1214.88 963.742,1214.83 964.328,1214.58 964.915,1214.88 965.501,1217.59 966.087,1214.53 966.674,1214.24 967.26,1215.83 967.847,1217.01 968.433,1210.72 969.019,1207.75 969.606,1207.95 970.192,1209.71 970.779,1211.62 971.365,1211.51 971.951,1211.84 972.538,1216.28 973.124,1217.71 973.711,1222.26 974.297,1218.96 974.884,1217 975.47,1217.03 976.056,1216.57 976.643,1213.36 977.229,1214.81 977.816,1215.09 978.402,1215.16 978.988,1215.4 979.575,1218.45 980.161,1215.33 980.748,1215.26 981.334,1213.48 981.92,1216.22 982.507,1213.2 983.093,1211.82 983.68,1211.83 984.266,1213.61 984.853,1210.97 985.439,1211.28 986.025,1208.32 986.612,1208.44 987.198,1205.48 987.785,1204.58 988.371,1208 988.957,1205.23 989.544,1207.01 990.13,1207.78 990.717,1207.79 991.303,1209.71 991.889,1208.44 992.476,1210.12 993.062,1210.3 993.649,1216.38 994.235,1216.35 994.822,1213.17 995.408,1213.39 995.994,1213.41 996.581,1212.97 997.167,1212.76 997.754,1211.25 998.34,1210.08 998.926,1207.09 999.513,1207.44 1000.1,1207.62 1000.69,1206.6 1001.27,1206.89 1001.86,1210.41 1002.44,1210.74 1003.03,1206.19 1003.62,1206.46 1004.2,1211.25 1004.79,1210.08 1005.38,1210.2 1005.96,1212.2 1006.55,1212.35 1007.14,1215.62 1007.72,1210.83 1008.31,1211.26 1008.9,1211.13 1009.48,1209.82 1010.07,1209.58 1010.65,1208.41 1011.24,1209.93 1011.83,1211.62 1012.41,1214.48 1013,1214.56 1013.59,1217.39 1014.17,1217.44 1014.76,1214.63 1015.35,1213.16 1015.93,1211.78 1016.52,1209 1017.11,1210.54 1017.69,1210.73 1018.28,1207.84 1018.86,1209.39 1019.45,1210.99 1020.04,1209.43 1020.62,1211.26 1021.21,1212.76 1021.8,1214.15 1022.38,1212.09 1022.97,1211.9 1023.56,1210.47 1024.14,1210.87 1024.73,1212.42 1025.32,1215.12 1025.9,1216.65 1026.49,1222.91 1027.07,1220.71 1027.66,1221.71 1028.25,1222.7 1028.83,1223.62 1029.42,1225.85 1030.01,1226.52 1030.59,1225.69 1031.18,1224.74 1031.77,1219.53 1032.35,1219.26 1032.94,1219.07 1033.52,1217.26 1034.11,1215.6 1034.7,1214.11 1035.28,1210.91 1035.87,1209.32 1036.46,1210.06 1037.04,1210.23 1037.63,1208.95 1038.22,1204.56 1038.8,1204.77 1039.39,1205.21 1039.98,1204.44 1040.56,1204.62 1041.15,1209.6 1041.73,1206.58 1042.32,1205.22 1042.91,1204.32 1043.49,1203.3 1044.08,1205.66 1044.67,1203.31 1045.25,1203.84 1045.84,1205.8 1046.43,1204.71 1047.01,1206.9 1047.6,1208.79 1048.19,1212.46 1048.77,1212.64 1049.36,1214.29 1049.94,1215.93 1050.53,1215.93 1051.12,1218.82 1051.7,1221.6 1052.29,1221.06 1052.88,1223.65 1053.46,1221.76 1054.05,1224.57 1054.64,1225.5 1055.22,1226.15 1055.81,1224.21 1056.39,1220.82 1056.98,1222.27 1057.57,1221.84 1058.15,1222.91 1058.74,1225.27 1059.33,1221.3 1059.91,1220.97 1060.5,1225.15 1061.09,1229.08 1061.67,1228.37 1062.26,1230.51 1062.85,1227.9 1063.43,1226.02 1064.02,1223.74 1064.6,1221.8 1065.19,1219.55 1065.78,1217.6 1066.36,1216.08 1066.95,1214.57 1067.54,1212.8 1068.12,1212.79 1068.71,1214.18 1069.3,1211.15 1069.88,1209.64 1070.47,1209.47 1071.06,1212.91 1071.64,1210.92 1072.23,1210.8 1072.81,1209.39 1073.4,1211.13 1073.99,1212.68 1074.57,1212.71 1075.16,1214.17 1075.75,1213.89 1076.33,1216.9 1076.92,1212.17 1077.51,1210.7 1078.09,1209.15 1078.68,1204.89 1079.26,1202.31 1079.85,1198.14 1080.44,1197.28 1081.02,1196.7 1081.61,1197.77 1082.2,1195.36 1082.78,1196.37 1083.37,1200.11 1083.96,1199.36 1084.54,1201.6 1085.13,1200.4 1085.72,1202.52 1086.3,1205.95 1086.89,1206.06 1087.47,1204.65 1088.06,1205.08 1088.65,1208.25 1089.23,1205.6 1089.82,1205.91 1090.41,1207.64 1090.99,1207.93 1091.58,1208.47 1092.17,1207.31 1092.75,1210.94 1093.34,1210.84 1093.93,1213.86 1094.51,1212.36 1095.1,1214.02 1095.68,1212.37 1096.27,1216.78 1096.86,1216.51 1097.44,1219.07 1098.03,1218.76 1098.62,1213.95 1099.2,1215.12 1099.79,1210.3 1100.38,1211.99 1100.96,1213.68 1101.55,1212.33 1102.14,1214.01 1102.72,1215.62 1103.31,1215.44 1103.89,1222.7 1104.48,1222.21 1105.07,1220.28 1105.65,1221.41 1106.24,1219.26 1106.83,1221.99 1107.41,1218.1 1108,1217.92 1108.59,1215.98 1109.17,1214.29 1109.76,1214.29 1110.34,1212.66 1110.93,1214.33 1111.52,1214.24 1112.1,1214.05 1112.69,1213.88 1113.28,1212.5 1113.86,1215.19 1114.45,1215.04 1115.04,1214.92 1115.62,1212.12 1116.21,1209.07 1116.8,1207.81 1117.38,1210.91 1117.97,1211.01 1118.55,1211.07 1119.14,1212.87 1119.73,1212.69 1120.31,1212.89 1120.9,1212.96 1121.49,1213.18 1122.07,1211.79 1122.66,1210.5 1123.25,1207.66 1123.83,1207.67 1124.42,1206.38 1125.01,1200.64 1125.59,1201.16 1126.18,1202.25 1126.76,1201.5 1127.35,1197.64 1127.94,1197.11 1128.52,1196.22 1129.11,1196.98 1129.7,1199.35 1130.28,1198.52 1130.87,1199.66 1131.46,1201.96 1132.04,1201.3 1132.63,1205.07 1133.21,1205.74 1133.8,1210.43 1134.39,1209.02 1134.97,1207.65 1135.56,1211.24 1136.15,1209.95 1136.73,1213.08 1137.32,1213.14 1137.91,1213.22 1138.49,1213.09 1139.08,1216.03 1139.67,1215.78 1140.25,1217.35 1140.84,1218.46 1141.42,1222.51 1142.01,1223.9 1142.6,1223.17 1143.18,1219.71 1143.77,1217.73 1144.36,1217.37 1144.94,1215.88 1145.53,1215.55 1146.12,1218.36 1146.7,1214.95 1147.29,1214.8 1147.88,1213.21 1148.46,1214.7 1149.05,1217.66 1149.63,1220.65 1150.22,1221.57 1150.81,1224.01 1151.39,1223.4 1151.98,1224.52 1152.57,1223.99 1153.15,1224.99 1153.74,1224.35 1154.33,1223.62 1154.91,1220.05 1155.5,1219.75 1156.09,1216.21 1156.67,1219.49 1157.26,1219.18 1157.84,1217.25 1158.43,1216.8 1159.02,1216.28 1159.6,1214.77 1160.19,1214.57 1160.78,1212.96 1161.36,1209.69 1161.95,1207.02 1162.54,1205.91 1163.12,1206.17 1163.71,1206.43 1164.29,1206.78 1164.88,1208.49 1165.47,1211.74 1166.05,1210.13 1166.64,1210.15 1167.23,1210.39 1167.81,1208.82 1168.4,1212.14 1168.99,1207.72 1169.57,1207.71 1170.16,1209.38 1170.75,1211.33 1171.33,1213.16 1171.92,1214.43 1172.5,1214.41 1173.09,1214.29 1173.68,1217.48 1174.26,1215.51 1174.85,1212.31 1175.44,1214.03 1176.02,1214.93 1176.61,1211.45 1177.2,1213.04 1177.78,1217.46 1178.37,1215.4 1178.96,1213.63 1179.54,1212.15 1180.13,1210.96 1180.71,1213.84 1181.3,1212.22 1181.89,1212 1182.47,1210.43 1183.06,1210.31 1183.65,1208.58 1184.23,1202.8 1184.82,1204.9 1185.41,1206.68 1185.99,1207.11 1186.58,1206.04 1187.16,1209.39 1187.75,1208.09 1188.34,1208.13 1188.92,1203.42 1189.51,1203.96 1190.1,1204.75 1190.68,1202.22 1191.27,1202.62 1191.86,1201.56 1192.44,1200.85 1193.03,1202.98 1193.62,1203.68 1194.2,1202.37 1194.79,1199.93 1195.37,1201.72 1195.96,1199.48 1196.55,1198.6 1197.13,1202.5 1197.72,1204.75 1198.31,1204.96 1198.89,1208.37 1199.48,1207.32 1200.07,1209.29 1200.65,1207.74 1201.24,1204.77 1201.83,1202.62 1202.41,1203.54 1203,1203.88 1203.58,1202.91 1204.17,1203.59 1204.76,1204.26 1205.34,1206.28 1205.93,1206.83 1206.52,1208.64 1207.1,1207.26 1207.69,1209.32 1208.28,1209.37 1208.86,1212.26 1209.45,1212.06 1210.03,1213.86 1210.62,1213.91 1211.21,1215.26 1211.79,1213.76 1212.38,1217.07 1212.97,1213.81 1213.55,1216.53 1214.14,1219.29 1214.73,1216.19 1215.31,1214.4 1215.9,1214.55 1216.49,1211.37 1217.07,1209.52 1217.66,1209.76 1218.24,1206.74 1218.83,1209.86 1219.42,1208.66 1220,1208.83 1220.59,1207.3 1221.18,1207.88 1221.76,1209.81 1222.35,1208.18 1222.94,1209.82 1223.52,1210 1224.11,1208.67 1224.7,1208.92 1225.28,1210.36 1225.87,1212.18 1226.45,1213.74 1227.04,1212.13 1227.63,1210.5 1228.21,1212.24 1228.8,1215.15 1229.39,1216.61 1229.97,1213.71 1230.56,1213.32 1231.15,1216.46 1231.73,1217.96 1232.32,1215.95 1232.91,1215.75 1233.49,1215.86 1234.08,1218.65 1234.66,1219.7 1235.25,1213.4 1235.84,1213.61 1236.42,1214.96 1237.01,1213.39 1237.6,1213.5 1238.18,1213.44 1238.77,1210.5 1239.36,1212.35 1239.94,1213.66 1240.53,1213.38 1241.11,1214.86 1241.7,1214.78 1242.29,1216.31 1242.87,1218.81 1243.46,1221.58 1244.05,1225 1244.63,1227.41 1245.22,1225.35 1245.81,1225.87 1246.39,1223.82 1246.98,1223.56 1247.57,1223.04 1248.15,1223.89 1248.74,1221.46 1249.32,1220.95 1249.91,1220.52 1250.5,1218.71 1251.08,1216.78 1251.67,1217.99 1252.26,1219.3 1252.84,1215.85 1253.43,1216.94 1254.02,1217.96 1254.6,1214.82 1255.19,1213.09 1255.78,1214.51 1256.36,1215.99 1256.95,1217.1 1257.53,1218.3 1258.12,1219.49 1258.71,1217.59 1259.29,1218.74 1259.88,1216.67 1260.47,1216.43 1261.05,1217.5 1261.64,1214.16 1262.23,1214.12 1262.81,1209.34 1263.4,1211.18 1263.98,1209.5 1264.57,1211.09 1265.16,1213.9 1265.74,1213.79 1266.33,1212.56 1266.92,1215.33 1267.5,1215.48 1268.09,1214.86 1268.68,1216.03 1269.26,1216.03 1269.85,1215.91 1270.44,1217.17 1271.02,1218.59 1271.61,1220.97 1272.19,1219.05 1272.78,1217.32 1273.37,1215.54 1273.95,1215.47 1274.54,1216.78 1275.13,1218.25 1275.71,1216.39 1276.3,1215.78 1276.89,1215.68 1277.47,1217.21 1278.06,1217.08 1278.65,1213.95 1279.23,1212.44 1279.82,1212.55 1280.4,1210.89 1280.99,1211 1281.58,1209.36 1282.16,1209.27 1282.75,1209.51 1283.34,1208.3 1283.92,1208.63 1284.51,1209.3 1285.1,1212.29 1285.68,1214.11 1286.27,1214.04 1286.86,1217.2 1287.44,1218.29 1288.03,1217.98 1288.61,1220.6 1289.2,1221.74 1289.79,1221.39 1290.37,1224.08 1290.96,1221.88 1291.55,1221 1292.13,1220.51 1292.72,1216.69 1293.31,1217.91 1293.89,1217.41 1294.48,1218.7 1295.06,1218.6 1295.65,1218.3 1296.24,1213.45 1296.82,1211.7 1297.41,1213.58 1298,1213.41 1298.58,1213.31 1299.17,1211.73 1299.76,1211.53 1300.34,1210.03 1300.93,1208.8 1301.52,1207.53 1302.1,1209.15 1302.69,1209.24 1303.27,1209.18 1303.86,1206.19 1304.45,1203.36 1305.03,1203.72 1305.62,1202.59 1306.21,1202.98 1306.79,1202.08 1307.38,1202.45 1307.97,1201.52 1308.55,1200.78 1309.14,1201.64 1309.73,1200.82 1310.31,1201.5 1310.9,1202.12 1311.48,1205.89 1312.07,1206.47 1312.66,1208.32 1313.24,1207.05 1313.83,1207.51 1314.42,1209.41 1315,1208.24 1315.59,1206.65 1316.18,1207.31 1316.76,1209.07 1317.35,1210.6 1317.93,1209.54 1318.52,1212.22 1319.11,1215.01 1319.69,1215.05 1320.28,1215.03 1320.87,1219.64 1321.45,1216.33 1322.04,1216.3 1322.63,1216.42 1323.21,1214.66 1323.8,1213.29 1324.39,1210.52 1324.97,1212.3 1325.56,1212.34 1326.14,1215.45 1326.73,1215.14 1327.32,1215.44 1327.9,1215.28 1328.49,1210.6 1329.08,1209.03 1329.66,1210.91 1330.25,1209.65 1330.84,1209.84 1331.42,1212.86 1332.01,1213.05 1332.6,1213.24 1333.18,1213.38 1333.77,1213.36 1334.35,1216.82 1334.94,1218.17 1335.53,1217.77 1336.11,1219.05 1336.7,1212.87 1337.29,1217.38 1337.87,1217.07 1338.46,1216.88 1339.05,1217.88 1339.63,1215.87 1340.22,1218.57 1340.8,1215.41 1341.39,1215.19 1341.98,1215.32 1342.56,1215.35 1343.15,1215.16 1343.74,1212.26 1344.32,1210.76 1344.91,1210.77 1345.5,1209.31 1346.08,1210.78 1346.67,1210.83 1347.26,1209.23 1347.84,1209.4 1348.43,1206.55 1349.01,1206.75 1349.6,1208.78 1350.19,1209.05 1350.77,1207.78 1351.36,1207.81 1351.95,1207.79 1352.53,1208.24 1353.12,1205.48 1353.71,1207.11 1354.29,1210.35 1354.88,1208.98 1355.47,1207.97 1356.05,1208.21 1356.64,1208.45 1357.22,1210.08 1357.81,1211.73 1358.4,1216.22 1358.98,1215.69 1359.57,1214.39 1360.16,1205.29 1360.74,1208.37 1361.33,1205.48 1361.92,1208.44 1362.5,1208.52 1363.09,1210 1363.68,1211.49 1364.26,1210.07 1364.85,1207.22 1365.43,1206.05 1366.02,1209.33 1366.61,1211.21 1367.19,1214.01 1367.78,1214.11 1368.37,1214.07 1368.95,1212.17 1369.54,1212.15 1370.13,1213.83 1370.71,1213.56 1371.3,1213.62 1371.88,1215.08 1372.47,1213.17 1373.06,1220.52 1373.64,1220.23 1374.23,1217.01 1374.82,1215.48 1375.4,1216.92 1375.99,1216.77 1376.58,1215.15 1377.16,1217.9 1377.75,1219.32 1378.34,1216.23 1378.92,1215.54 1379.51,1213.73 1380.09,1213.69 1380.68,1216.76 1381.27,1216.59 1381.85,1214.58 1382.44,1214.79 1383.03,1213.2 1383.61,1213.18 1384.2,1211.64 1384.79,1213.16 1385.37,1216.17 1385.96,1219 1386.55,1219.97 1387.13,1219.71 1387.72,1217.56 1388.3,1217.17 1388.89,1213.83 1389.48,1213.92 1390.06,1215.5 1390.65,1216.91 1391.24,1216.95 1391.82,1218.03 1392.41,1214.35 1393,1215.79 1393.58,1214.21 1394.17,1212.61 1394.75,1213.87 1395.34,1213.8 1395.93,1212.25 1396.51,1210.87 1397.1,1212.21 1397.69,1211.03 1398.27,1209.63 1398.86,1209.83 1399.45,1209.42 1400.03,1208.01 1400.62,1209.67 1401.21,1208.43 1401.79,1207.08 1402.38,1207.55 1402.96,1207.92 1403.55,1206.87 1404.14,1208.84 1404.72,1211.96 1405.31,1211.95 1405.9,1210.65 1406.48,1209.39 1407.07,1209.62 1407.66,1211.13 1408.24,1209.97 1408.83,1205.75 1409.42,1209.09 1410,1207.37 1410.59,1206.31 1411.17,1207.84 1411.76,1209.63 1412.35,1208.27 1412.93,1206.85 1413.52,1208.89 1414.11,1208.88 1414.69,1203.14 1415.28,1207.95 1415.87,1208.15 1416.45,1205.41 1417.04,1205.85 1417.63,1207.88 1418.21,1212.93 1418.8,1215.94 1419.38,1214.38 1419.97,1215.74 1420.56,1214.32 1421.14,1214.22 1421.73,1214.14 1422.32,1215.79 1422.9,1212.86 1423.49,1214.39 1424.08,1211.28 1424.66,1214.18 1425.25,1211.04 1425.83,1211.23 1426.42,1211.42 1427.01,1211.47 1427.59,1212.98 1428.18,1214.51 1428.77,1214.48 1429.35,1212.75 1429.94,1212.68 1430.53,1209.39 1431.11,1205 1431.7,1205.34 1432.29,1205.89 1432.87,1210.87 1433.46,1209.29 1434.04,1211.04 1434.63,1212.73 1435.22,1212.9 1435.8,1213.09 1436.39,1214.54 1436.98,1212.67 1437.56,1211.06 1438.15,1212.61 1438.74,1214.19 1439.32,1212.68 1439.91,1211.22 1440.5,1211.48 1441.08,1212.82 1441.67,1214.18 1442.25,1219.9 1442.84,1218.2 1443.43,1219.67 1444.01,1220.99 1444.6,1220.87 1445.19,1217.25 1445.77,1215.49 1446.36,1213.68 1446.95,1213.85 1447.53,1217.04 1448.12,1215.16 1448.7,1217.94 1449.29,1219 1449.88,1221.69 1450.46,1221.51 1451.05,1221.02 1451.64,1216.07 1452.22,1218.85 1452.81,1216.88 1453.4,1219.47 1453.98,1214.59 1454.57,1214.48 1455.16,1212.79 1455.74,1212.7 1456.33,1214.16 1456.91,1214.21 1457.5,1214.36 1458.09,1214.69 1458.67,1217.58 1459.26,1220.27 1459.85,1216.96 1460.43,1215.12 1461.02,1213.58 1461.61,1212.11 1462.19,1210.65 1462.78,1213.72 1463.37,1216.88 1463.95,1216.43 1464.54,1217.79 1465.12,1220.69 1465.71,1217.32 1466.3,1220.11 1466.88,1219.79 1467.47,1218.28 1468.06,1218.01 1468.64,1219.36 1469.23,1217.5 1469.82,1218.68 1470.4,1222.31 1470.99,1221.81 1471.57,1216.74 1472.16,1218.06 1472.75,1216.09 1473.33,1216.07 1473.92,1214.14 1474.51,1217.19 1475.09,1218.05 1475.68,1217.81 1476.27,1220.68 1476.85,1218.72 1477.44,1218.36 1478.03,1219.67 1478.61,1214.95 1479.2,1214.9 1479.78,1216.21 1480.37,1217.76 1480.96,1217.59 1481.54,1217.34 1482.13,1216.67 1482.72,1217.92 1483.3,1217.76 1483.89,1219.19 1484.48,1218.84 1485.06,1220 1485.65,1218.01 1486.24,1214.09 1486.82,1214.11 1487.41,1212.75 1487.99,1215.79 1488.58,1215.62 1489.17,1216.66 1489.75,1216.25 1490.34,1216.06 1490.93,1217.18 1491.51,1214.08 1492.1,1217.14 1492.69,1213.79 1493.27,1210.77 1493.86,1212.42 1494.45,1212.12 1495.03,1210.48 1495.62,1207.27 1496.2,1210.34 1496.79,1210.31 1497.38,1210.15 1497.96,1208.53 1498.55,1205.91 1499.14,1206.26 1499.72,1208.09 1500.31,1206.58 1500.9,1208.15 1501.48,1209.59 1502.07,1206.94 1502.65,1208.69 1503.24,1209.97 1503.83,1208.74 1504.41,1205.94 1505,1206.48 1505.59,1209.77 1506.17,1209.88 1506.76,1211.73 1507.35,1209.17 1507.93,1209.48 1508.52,1212.67 1509.11,1212.63 1509.69,1211.08 1510.28,1214.67 1510.86,1214.89 1511.45,1216.19 1512.04,1217.17 1512.62,1217.08 1513.21,1216.74 1513.8,1216.81 1514.38,1218.05 1514.97,1217.58 1515.56,1218.75 1516.14,1218.34 1516.73,1218.18 1517.32,1216.56 1517.9,1216.43 1518.49,1216.24 1519.07,1216.02 1519.66,1214.5 1520.25,1217.49 1520.83,1214.25 1521.42,1215.39 1522.01,1216.88 1522.59,1216.71 1523.18,1216.01 1523.77,1211.22 1524.35,1208.38 1524.94,1210.1 1525.52,1207.56 1526.11,1204.73 1526.7,1204.83 1527.28,1204.87 1527.87,1203.48 1528.46,1202.28 1529.04,1204.39 1529.63,1206.27 1530.22,1202.29 1530.8,1199.81 1531.39,1199 1531.98,1199.81 1532.56,1200.57 1533.15,1199.64 1533.73,1200.86 1534.32,1200.15 1534.91,1200.6 1535.49,1202.76 1536.08,1204.61 1536.67,1203.83 1537.25,1204.48 1537.84,1209.71 1538.43,1209.87 1539.01,1210.12 1539.6,1213.05 1540.19,1207.04 1540.77,1207.26 1541.36,1207.76 1541.94,1209.47 1542.53,1209.4 1543.12,1211.24 1543.7,1211.13 1544.29,1211.02 1544.88,1209.57 1545.46,1210.96 1546.05,1212.59 1546.64,1209.45 1547.22,1209.82 1547.81,1209.79 1548.4,1212.96 1548.98,1212.95 1549.57,1213.17 1550.15,1211.48 1550.74,1216.25 1551.33,1214.25 1551.91,1213.95 1552.5,1212.54 1553.09,1212.42 1553.67,1212.36 1554.26,1214.18 1554.85,1211.37 1555.43,1211.3 1556.02,1212.79 1556.6,1215.89 1557.19,1223.4 1557.78,1222.95 1558.36,1222.41 1558.95,1221.99 1559.54,1220.04 1560.12,1222.57 1560.71,1220.85 1561.3,1223.36 1561.88,1221.25 1562.47,1221.07 1563.06,1220.37 1563.64,1218.17 1564.23,1217.86 1564.81,1217.76 1565.4,1221.92 1565.99,1222.94 1566.57,1220.91 1567.16,1218.91 1567.75,1218.24 1568.33,1218.08 1568.92,1223.64 1569.51,1223.2 1570.09,1222.26 1570.68,1219.98 1571.27,1222.63 1571.85,1223.71 1572.44,1226.08 1573.02,1222.73 1573.61,1220.72 1574.2,1221.91 1574.78,1218.64 1575.37,1216.94 1575.96,1213.71 1576.54,1212.32 1577.13,1210.99 1577.72,1211.19 1578.3,1210.06 1578.89,1210.27 1579.47,1210.52 1580.06,1207.59 1580.65,1207.47 1581.23,1206.45 1581.82,1206.96 1582.41,1204.2 1582.99,1204.78 1583.58,1203.9 1584.17,1199.8 1584.75,1201.85 1585.34,1205.44 1585.93,1205.78 1586.51,1209.02 1587.1,1207.56 1587.68,1209.4 1588.27,1207.79 1588.86,1205.18 1589.44,1203.86 1590.03,1202.73 1590.62,1201.42 1591.2,1197.27 1591.79,1199.89 1592.38,1196.56 1592.96,1200.72 1593.55,1201.41 1594.14,1200.74 1594.72,1204.58 1595.31,1205.01 1595.89,1203.98 1596.48,1204.34 1597.07,1204.58 1597.65,1203.57 1598.24,1204.1 1598.83,1206.07 1599.41,1209.33 1600,1209.55 1600.59,1209.71 1601.17,1215.94 1601.76,1215.82 1602.34,1214.21 1602.93,1214.11 1603.52,1214.09 1604.1,1214.19 1604.69,1214.06 1605.28,1213.92 1605.86,1213.89 1606.45,1213.66 1607.04,1210.86 1607.62,1213.68 1608.21,1210.53 1608.8,1210.92 1609.38,1209.69 1609.97,1206.84 1610.55,1208.75 1611.14,1209.18 1611.73,1208.3 1612.31,1205.59 1612.9,1207.88 1613.49,1211.08 1614.07,1209.72 1614.66,1212.77 1615.25,1211.32 1615.83,1210.3 1616.42,1215.12 1617.01,1213.28 1617.59,1211.46 1618.18,1210.09 1618.76,1210.59 1619.35,1210.56 1619.94,1210.71 1620.52,1215.19 1621.11,1216.44 1621.7,1211.58 1622.28,1213.09 1622.87,1214.86 1623.46,1213.57 1624.04,1213.96 1624.63,1214.04 1625.22,1218.37 1625.8,1222.64 1626.39,1220.61 1626.97,1220.44 1627.56,1218.71 1628.15,1218.02 1628.73,1219.26 1629.32,1216 1629.91,1217.42 1630.49,1220.38 1631.08,1222.75 1631.67,1220.86 1632.25,1221.6 1632.84,1219.61 1633.42,1219.1 1634.01,1216.24 1634.6,1216.19 1635.18,1216.03 1635.77,1215.89 1636.36,1219.96 1636.94,1221.07 1637.53,1217.84 1638.12,1216.01 1638.7,1216.01 1639.29,1209.45 1639.88,1209.72 1640.46,1209.55 1641.05,1206.76 1641.63,1207.39 1642.22,1207.53 1642.81,1206.4 1643.39,1208.31 1643.98,1208.77 1644.57,1210.7 1645.15,1210.83 1645.74,1211.12 1646.33,1211.19 1646.91,1211.22 1647.5,1212.88 1648.09,1215.64 1648.67,1215.28 1649.26,1216.88 1649.84,1217.8 1650.43,1219.33 1651.02,1220.33 1651.6,1217.14 1652.19,1215.26 1652.78,1210.75 1653.36,1212.54 1653.95,1215.28 1654.54,1214.99 1655.12,1219 1655.71,1220.1 1656.29,1221.31 1656.88,1222.59 1657.47,1221.94 1658.05,1222.82 1658.64,1222.18 1659.23,1220.23 1659.81,1216.94 1660.4,1216.31 1660.99,1216.24 1661.57,1211.8 1662.16,1211.8 1662.75,1208.74 1663.33,1209.02 1663.92,1210.97 1664.5,1209.36 1665.09,1206.62 1665.68,1208.35 1666.26,1205.47 1666.85,1203 1667.44,1205.01 1668.02,1205.49 1668.61,1207.37 1669.2,1206.14 1669.78,1207.71 1670.37,1206.47 1670.96,1208.18 1671.54,1209.8 1672.13,1211.23 1672.71,1211.02 1673.3,1209.67 1673.89,1208.34 1674.47,1209.89 1675.06,1209.99 1675.65,1211.29 1676.23,1212.84 1676.82,1209.83 1677.41,1211.63 1677.99,1211.69 1678.58,1208.96 1679.17,1209.16 1679.75,1210.8 1680.34,1212.54 1680.92,1215.37 1681.51,1215.37 1682.1,1213.55 1682.68,1213.44 1683.27,1214.7 1683.86,1213.2 1684.44,1204.64 1685.03,1203.81 1685.62,1202.64 1686.2,1204.48 1686.79,1199.1 1687.37,1202.92 1687.96,1208.29 1688.55,1208.66 1689.13,1205.92 1689.72,1207.65 1690.31,1208.08 1690.89,1208.58 1691.48,1207.36 1692.07,1209.1 1692.65,1209.31 1693.24,1210.55 1693.83,1212.34 1694.41,1212.25 1695,1213.88 1695.58,1216.59 1696.17,1216.49 1696.76,1216.11 1697.34,1214.43 1697.93,1215.88 1698.52,1215.67 1699.1,1217.19 1699.69,1217.03 1700.28,1215.44 1700.86,1214.12 1701.45,1214.02 1702.04,1212.05 1702.62,1211.82 1703.21,1213.12 1703.79,1213.1 1704.38,1213.04 1704.97,1212.97 1705.55,1213.15 1706.14,1210.23 1706.73,1210.5 1707.31,1210.64 1707.9,1207.9 1708.49,1209.71 1709.07,1211.27 1709.66,1212.62 1710.24,1215.74 1710.83,1219.84 1711.42,1216.33 1712,1217.3 1712.59,1216.79 1713.18,1216.43 1713.76,1214.73 1714.35,1217.55 1714.94,1215.86 1715.52,1216.99 1716.11,1215.42 1716.7,1215.53 1717.28,1213.76 1717.87,1212.21 1718.45,1212.42 1719.04,1211.18 1719.63,1209.88 1720.21,1208.52 1720.8,1208.68 1721.39,1205.82 1721.97,1206.22 1722.56,1206.53 1723.15,1205.58 1723.73,1207.68 1724.32,1209.23 1724.91,1209.61 1725.49,1209.85 1726.08,1209.97 1726.66,1213.08 1727.25,1214.5 1727.84,1212.95 1728.42,1214.29 1729.01,1215.49 1729.6,1216.6 1730.18,1217.79 1730.77,1217.44 1731.36,1218.37 1731.94,1221.29 1732.53,1220.9 1733.11,1218.82 1733.7,1219.79 1734.29,1217.79 1734.87,1219.19 1735.46,1216.85 1736.05,1215.39 1736.63,1213.73 1737.22,1212.16 1737.81,1213.42 1738.39,1213.49 1738.98,1216.83 1739.57,1211.94 1740.15,1214.86 1740.74,1216.34 1741.32,1216.07 1741.91,1215.77 1742.5,1210.97 1743.08,1212.38 1743.67,1213.76 1744.26,1218.61 1744.84,1215.38 1745.43,1214.79 1746.02,1212.9 1746.6,1217.34 1747.19,1217.51 1747.78,1215.69 1748.36,1218.51 1748.95,1214.61 1749.53,1213.18 1750.12,1210.14 1750.71,1210.27 1751.29,1208.93 1751.88,1209.41 1752.47,1209.63 1753.05,1211.3 1753.64,1211.38 1754.23,1213.09 1754.81,1213.22 1755.4,1213.03 1755.99,1209.83 1756.57,1210.05 1757.16,1210.52 1757.74,1212 1758.33,1207.37 1758.92,1204.71 1759.5,1205.29 1760.09,1207.42 1760.68,1209.43 1761.26,1209.45 1761.85,1209.53 1762.44,1206.76 1763.02,1201.09 1763.61,1204.76 1764.19,1212.46 1764.78,1215.39 1765.37,1216.86 1765.95,1216.73 1766.54,1218.17 1767.13,1221.09 1767.71,1220.74 1768.3,1220.4 1768.89,1221.97 1769.47,1220.32 1770.06,1219.84 1770.65,1221.29 1771.23,1223.9 1771.82,1216.71 1772.4,1213.5 1772.99,1216.59 1773.58,1214.56 1774.16,1212.83 1774.75,1211.23 1775.34,1212.91 1775.92,1214.51 1776.51,1211.71 1777.1,1211.34 1777.68,1209.64 1778.27,1209.7 1778.86,1209.74 1779.44,1211.33 1780.03,1212.82 1780.61,1211.19 1781.2,1212.78 1781.79,1209.57 1782.37,1208.42 1782.96,1206.83 1783.55,1207.03 1784.13,1208.72 1784.72,1208.9 1785.31,1207.48 1785.89,1209.49 1786.48,1209.86 1787.06,1209.87 1787.65,1211.27 1788.24,1208.73 1788.82,1209.45 1789.41,1209.6 1790,1209.65 1790.58,1209.44 1791.17,1209.73 1791.76,1211.14 1792.34,1218.63 1792.93,1219.78 1793.52,1220.81 1794.1,1219.09 1794.69,1217.49 1795.27,1216.06 1795.86,1217.36 1796.45,1218.6 1797.03,1215.78 1797.62,1215.75 1798.21,1215.93 1798.79,1217.54 1799.38,1212.85 1799.97,1215.81 1800.55,1215.28 1801.14,1220.83 1801.73,1220.47 1802.31,1221.43 1802.9,1225.54 1803.48,1224.7 1804.07,1221.1 1804.66,1218.96 1805.24,1216.7 1805.83,1214.53 1806.42,1211.13 1807,1209.66 1807.59,1208.24 1808.18,1206.75 1808.76,1208.68 1809.35,1210.51 1809.94,1209.03 1810.52,1209.4 1811.11,1210.75 1811.69,1209.39 1812.28,1209.48 1812.87,1209.58 1813.45,1210.91 1814.04,1212.59 1814.63,1213.96 1815.21,1212.3 1815.8,1215.35 1816.39,1216.62 1816.97,1213.26 1817.56,1210.24 1818.14,1210.53 1818.73,1210.37 1819.32,1209.12 1819.9,1209.47 1820.49,1209.9 1821.08,1210.03 1821.66,1213.22 1822.25,1213.33 1822.84,1213.43 1823.42,1213.33 1824.01,1216.4 1824.6,1216.51 1825.18,1218.01 1825.77,1216.18 1826.35,1215.93 1826.94,1215.79 1827.53,1215.73 1828.11,1218.63 1828.7,1215.66 1829.29,1212.53 1829.87,1212.58 1830.46,1213.96 1831.05,1215.39 1831.63,1213.75 1832.22,1212.33 1832.81,1209.01 1833.39,1209.54 1833.98,1206.67 1834.56,1205.63 1835.15,1206.16 1835.74,1203.31 1836.32,1203.7 1836.91,1205.31 1837.5,1207.38 1838.08,1207.65 1838.67,1209.33 1839.26,1211.3 1839.84,1211.72 1840.43,1210.44 1841.01,1210.62 1841.6,1210.85 1842.19,1207.84 1842.77,1208.68 1843.36,1207.45 1843.95,1207.49 1844.53,1212.23 1845.12,1211.07 1845.71,1212.62 1846.29,1212.68 1846.88,1211.26 1847.47,1212.88 1848.05,1212.87 1848.64,1212.9 1849.22,1210.21 1849.81,1210.43 1850.4,1210.57 1850.98,1209 1851.57,1209.4 1852.16,1207.07 1852.74,1204.19 1853.33,1206.18 1853.92,1205.26 1854.5,1207.11 1855.09,1206.05 1855.68,1204.91 1856.26,1203.94 1856.85,1202.95 1857.43,1203.49 1858.02,1202.32 1858.61,1202.75 1859.19,1203.47 1859.78,1202.41 1860.37,1203.12 1860.95,1203.75 1861.54,1205.74 1862.13,1204.74 1862.71,1205.55 1863.3,1204.53 1863.88,1205.07 1864.47,1206.89 1865.06,1204.58 1865.64,1203.41 1866.23,1204.18 1866.82,1204.9 1867.4,1206.86 1867.99,1208.75 1868.58,1207.48 1869.16,1205.96 1869.75,1203.29 1870.34,1202.12 1870.92,1202.57 1871.51,1203 1872.09,1203.34 1872.68,1208.63 1873.27,1210.55 1873.85,1212.02 1874.44,1212.1 1875.03,1213.62 1875.61,1215.26 1876.2,1216.59 1876.79,1216.08 1877.37,1214.44 1877.96,1217.05 1878.55,1216.86 1879.13,1215.54 1879.72,1215.4 1880.3,1215.12 1880.89,1212.09 1881.48,1215.04 1882.06,1217.85 1882.65,1218.73 1883.24,1216.51 1883.82,1216.26 1884.41,1216.16 1885,1214.3 1885.58,1217.04 1886.17,1217.07 1886.76,1216.26 1887.34,1215.94 1887.93,1215.85 1888.51,1215.73 1889.1,1212.48 1889.69,1215.47 1890.27,1213.96 1890.86,1214.36 1891.45,1213.06 1892.03,1215.66 1892.62,1215.44 1893.21,1212.18 1893.79,1213.65 1894.38,1213.21 1894.96,1216.12 1895.55,1215.79 1896.14,1215.17 1896.72,1216.74 1897.31,1216.34 1897.9,1216.16 1898.48,1215.97 1899.07,1215.73 1899.66,1218.26 1900.24,1217.63 1900.83,1218.56 1901.42,1216.65 1902,1216.53 1902.59,1216.33 1903.17,1214.62 1903.76,1209.65 1904.35,1208.34 1904.93,1208.41 1905.52,1208.62 1906.11,1205.93 1906.69,1209.29 1907.28,1209.79 1907.87,1211.25 1908.45,1214.32 1909.04,1214.57 1909.63,1212.89 1910.21,1211.44 1910.8,1211.38 1911.38,1212.99 1911.97,1213.05 1912.56,1211.1 1913.14,1212.55 1913.73,1209.75 1914.32,1209.95 1914.9,1206.79 1915.49,1206.71 1916.08,1205.7 1916.66,1209.31 1917.25,1209.34 1917.83,1205.41 1918.42,1206.19 1919.01,1209.23 1919.59,1211.24 1920.18,1212.87 1920.77,1211.36 1921.35,1211.29 1921.94,1212.59 1922.53,1214.15 1923.11,1212.5 1923.7,1215.21 1924.29,1216.58 1924.87,1219.29 1925.46,1217.47 1926.04,1218.75 1926.63,1217.03 1927.22,1218.36 1927.8,1215.38 1928.39,1213.63 1928.98,1216.55 1929.56,1219.34 1930.15,1219.01 1930.74,1222.04 1931.32,1218.83 1931.91,1217.14 1932.5,1216.82 1933.08,1216.61 1933.67,1218.05 1934.25,1216.08 1934.84,1214.08 1935.43,1215.78 1936.01,1218.61 1936.6,1218.34 1937.19,1218.11 1937.77,1214.92 1938.36,1216.41 1938.95,1214.54 1939.53,1217.59 1940.12,1215.79 1940.71,1216.75 1941.29,1219.59 1941.88,1219.26 1942.46,1217.44 1943.05,1217.19 1943.64,1218.37 1944.22,1219.46 1944.81,1217.53 1945.4,1216.76 1945.98,1216.6 1946.57,1216.25 1947.16,1209.87 1947.74,1208.79 1948.33,1210.43 1948.91,1210.81 1949.5,1210.83 1950.09,1212.26 1950.67,1212.3 1951.26,1209.21 1951.85,1210.46 1952.43,1207.5 1953.02,1207.75 1953.61,1206.46 1954.19,1206.77 1954.78,1205.35 1955.37,1204.28 1955.95,1205.93 1956.54,1207.58 1957.12,1207.91 1957.71,1205.34 1958.3,1207.33 1958.88,1204.5 1959.47,1201.57 1960.06,1205.3 1960.64,1205.55 1961.23,1204.6 1961.82,1209.36 1962.4,1212.41 1962.99,1212.55 1963.58,1215.59 1964.16,1212.67 1964.75,1214.13 1965.33,1212.54 1965.92,1212.81 1966.51,1211.13 1967.09,1213.96 1967.68,1215.2 1968.27,1216.48 1968.85,1216.55 1969.44,1219.31 1970.03,1220.65 1970.61,1216.11 1971.2,1214.61 1971.78,1213.28 1972.37,1213.12 1972.96,1211.77 1973.54,1210.7 1974.13,1209.42 1974.72,1209.49 1975.3,1209.54 1975.89,1209.28 1976.48,1211.04 1977.06,1214.32 1977.65,1212.9 1978.24,1212.56 1978.82,1213.91 1979.41,1213.84 1979.99,1213.7 1980.58,1212 1981.17,1210.63 1981.75,1210.63 1982.34,1207.52 1982.93,1206.58 1983.51,1208.47 1984.1,1208.9 1984.69,1206.15 1985.27,1204.83 1985.86,1207.14 1986.45,1210.58 1987.03,1208.96 1987.62,1208.92 1988.2,1209.21 1988.79,1209.19 1989.38,1209.05 1989.96,1210.64 1990.55,1212.18 1991.14,1215.34 1991.72,1216.72 1992.31,1216.47 1992.9,1217.8 1993.48,1217.5 1994.07,1220.37 1994.65,1215.32 1995.24,1215 1995.83,1217.43 1996.41,1217.25 1997,1215.57 1997.59,1212.21 1998.17,1218.15 1998.76,1219.29 1999.35,1219.04 1999.93,1218.64 2000.52,1218.33 2001.11,1221 2001.69,1220.5 2002.28,1219.95 2002.86,1222.37 2003.45,1221.63 2004.04,1217.99 2004.62,1219.25 2005.21,1218.47 2005.8,1215.22 2006.38,1212.16 2006.97,1213.47 2007.56,1213.5 2008.14,1214.93 2008.73,1213.31 2009.32,1214.9 2009.9,1214.71 2010.49,1211.47 2011.07,1211.48 2011.66,1206.89 2012.25,1207.18 2012.83,1205.81 2013.42,1207.52 2014.01,1207.9 2014.59,1207.81 2015.18,1209.45 2015.77,1209.48 2016.35,1209.59 2016.94,1209.56 2017.53,1208.23 2018.11,1208.41 2018.7,1206.91 2019.28,1205.37 2019.87,1205.67 2020.46,1207.47 2021.04,1207.27 2021.63,1209.22 2022.22,1210.96 2022.8,1208.22 2023.39,1209.96 2023.98,1210.02 2024.56,1212.98 2025.15,1212.65 2025.73,1213.89 2026.32,1216.47 2026.91,1216.28 2027.49,1214.34 2028.08,1217.24 2028.67,1217.13 2029.25,1215.36 2029.84,1213.48 2030.43,1212.01 2031.01,1208.9 2031.6,1210.91 2032.19,1209.52 2032.77,1211.1 2033.36,1214.08 2033.94,1212.48 2034.53,1209.57 2035.12,1206.44 2035.7,1205.45 2036.29,1207.02 2036.88,1207.26 2037.46,1204.76 2038.05,1206.48 2038.64,1209.51 2039.22,1209.63 2039.81,1206.55 2040.4,1206.89 2040.98,1205.83 2041.57,1206.24 2042.15,1208.22 2042.74,1207.24 2043.33,1207.62 2043.91,1210.48 2044.5,1210.61 2045.09,1210.73 2045.67,1211.95 2046.26,1213.57 2046.85,1213.5 2047.43,1213.44 2048.02,1213.43 2048.6,1211.63 2049.19,1213.07 2049.78,1211.57 2050.36,1210.24 2050.95,1213.4 2051.54,1215.07 2052.12,1216.25 2052.71,1217.49 2053.3,1217.25 2053.88,1215.78 2054.47,1215.96 2055.06,1215.94 2055.64,1221.92 2056.23,1219.87 2056.81,1221.17 2057.4,1220.65 2057.99,1217.13 2058.57,1212.72 2059.16,1214.42 2059.75,1218.03 2060.33,1216.18 2060.92,1219.34 2061.51,1220.45 2062.09,1218.57 2062.68,1218.38 2063.27,1218.14 2063.85,1217.81 2064.44,1215.64 2065.02,1213.97 2065.61,1213.65 2066.2,1210.22 2066.78,1208.74 2067.37,1209.15 2067.96,1208.07 2068.54,1207 2069.13,1207.36 2069.72,1210.95 2070.3,1211.39 2070.89,1211.52 2071.48,1213.4 2072.06,1213.63 2072.65,1211.95 2073.23,1213.82 2073.82,1215.22 2074.41,1213.83 2074.99,1214.86 2075.58,1219.25 2076.17,1218.75 2076.75,1219.91 2077.34,1217.86 2077.93,1219.13 2078.51,1218.48 2079.1,1218.18 2079.68,1216.49 2080.27,1219.42 2080.86,1219.36 2081.44,1216.16 2082.03,1212.94 2082.62,1210.23 2083.2,1210.11 2083.79,1210.35 2084.38,1209.03 2084.96,1208.95 2085.55,1207.47 2086.14,1209.14 2086.72,1206.47 2087.31,1206.6 2087.89,1209.73 2088.48,1210.05 2089.07,1205.77 2089.65,1207.65 2090.24,1207.7 2090.83,1207.76 2091.41,1211.02 2092,1211.06 2092.59,1208.14 2093.17,1206.9 2093.76,1205.81 2094.35,1206.15 2094.93,1205.75 2095.52,1207.72 2096.1,1208.28 2096.69,1213.14 2097.28,1213.25 2097.86,1214.57 2098.45,1213.4 2099.04,1213.65 2099.62,1216.55 2100.21,1216.6 2100.8,1219.51 2101.38,1219.43 2101.97,1219.08 2102.55,1219.79 2103.14,1217.53 2103.73,1217.49 2104.31,1218.5 2104.9,1218.2 2105.49,1216.23 2106.07,1217.43 2106.66,1217.19 2107.25,1213.98 2107.83,1216.99 2108.42,1218.17 2109.01,1213.42 2109.59,1213.19 2110.18,1213.11 2110.76,1212.92 2111.35,1215.98 2111.94,1218.69 2112.52,1216.99 2113.11,1215.24 2113.7,1215.38 2114.28,1216.27 2114.87,1216.15 2115.46,1214.06 2116.04,1215.33 2116.63,1213.79 2117.22,1213.9 2117.8,1215.39 2118.39,1213.81 2118.97,1215.19 2119.56,1213.25 2120.15,1211.65 2120.73,1210.02 2121.32,1208.23 2121.91,1206.72 2122.49,1206.99 2123.08,1208.77 2123.67,1210.36 2124.25,1210.44 2124.84,1210.7 2125.42,1209.34 2126.01,1208.48 2126.6,1211.82 2127.18,1213.12 2127.77,1214.64 2128.36,1211.06 2128.94,1208.37 2129.53,1205.69 2130.12,1207.47 2130.7,1205.86 2131.29,1209.19 2131.88,1212.56 2132.46,1211.24 2133.05,1209.46 2133.63,1209.58 2134.22,1212.39 2134.81,1210.76 2135.39,1209.36 2135.98,1206.45 2136.57,1206.48 2137.15,1206.76 2137.74,1210.03 2138.33,1211.87 2138.91,1210.34 2139.5,1205.86 2140.09,1206.1 2140.67,1206.18 2141.26,1206.49 2141.84,1205.34 2142.43,1205.78 2143.02,1206.36 2143.6,1208.58 2144.19,1208.89 2144.78,1207.36 2145.36,1207.95 2145.95,1209.73 2146.54,1208.59 2147.12,1211.75 2147.71,1214.65 2148.3,1211.76 2148.88,1214.78 2149.47,1215.98 2150.05,1215.8 2150.64,1212.65 2151.23,1209.58 2151.81,1211.4 2152.4,1213.18 2152.99,1215.92 2153.57,1214.36 2154.16,1211.77 2154.75,1211.7 2155.33,1209.04 2155.92,1209.2 2156.5,1206.33 2157.09,1208.17 2157.68,1208.31 2158.26,1211.5 \"/>\n<path clip-path=\"url(#clip832)\" d=\"M986.025 1212.91 L986.612 1212.91 L987.198 1212.91 L987.785 1212.91 L988.371 1212.91 L988.957 1212.91 L989.544 1212.91 L990.13 1212.91 L990.717 1212.91 L991.303 1212.91 L991.889 1212.91 L992.476 1212.91 L993.062 1212.91 L993.649 1212.91 L994.235 1212.91 L994.822 1212.91 L995.408 1212.91 L995.994 1212.91 L996.581 1212.91 L997.167 1212.91 L997.754 1212.91 L998.34 1212.91 L998.926 1212.91 L999.513 1212.91 L1000.1 1212.91 L1000.69 1212.91 L1001.27 1212.91 L1001.86 1212.91 L1002.44 1212.91 L1003.03 1212.91 L1003.62 1212.91 L1004.2 1212.91 L1004.79 1212.91 L1005.38 1212.91 L1005.96 1212.91 L1006.55 1212.91 L1007.14 1212.91 L1007.72 1212.91 L1008.31 1212.91 L1008.9 1212.91 L1009.48 1212.91 L1010.07 1212.91 L1010.65 1212.91 L1011.24 1212.91 L1011.83 1212.91 L1012.41 1212.91 L1013 1212.91 L1013.59 1212.91 L1014.17 1212.91 L1014.76 1212.91 L1015.35 1212.91 L1015.93 1212.91 L1016.52 1212.91 L1017.11 1212.91 L1017.69 1212.91 L1018.28 1212.91 L1018.86 1212.91 L1019.45 1212.91 L1020.04 1212.91 L1020.62 1212.91 L1021.21 1212.91 L1021.8 1212.91 L1022.38 1212.91 L1022.97 1212.91 L1023.56 1212.91 L1024.14 1212.91 L1024.73 1212.91 L1025.32 1212.91 L1025.9 1212.91 L1026.49 1212.91 L1027.07 1212.91 L1027.66 1212.91 L1028.25 1212.91 L1028.83 1212.91 L1029.42 1212.91 L1030.01 1212.91 L1030.59 1212.91 L1031.18 1212.91 L1031.77 1212.91 L1032.35 1212.91 L1032.94 1212.91 L1033.52 1212.91 L1034.11 1212.91 L1034.7 1212.91 L1035.28 1212.91 L1035.87 1212.91 L1036.46 1212.91 L1037.04 1212.91 L1037.63 1212.91 L1038.22 1212.91 L1038.8 1212.91 L1039.39 1212.91 L1039.98 1212.91 L1040.56 1212.91 L1041.15 1212.91 L1041.73 1212.91 L1042.32 1212.91 L1042.91 1212.91 L1043.49 1212.91 L1044.08 1212.91 L1044.67 1212.91 L1045.25 1212.91 L1045.84 1212.91 L1046.43 1212.91 L1047.01 1212.91 L1047.6 1212.91 L1048.19 1212.91 L1048.77 1212.91 L1049.36 1212.91 L1049.94 1212.91 L1050.53 1212.91 L1051.12 1212.91 L1051.7 1212.91 L1052.29 1212.91 L1052.88 1212.91 L1053.46 1212.91 L1054.05 1212.91 L1054.64 1212.91 L1055.22 1212.91 L1055.81 1212.91 L1056.39 1212.91 L1056.98 1212.91 L1057.57 1212.91 L1058.15 1212.91 L1058.74 1212.91 L1059.33 1212.91 L1059.91 1212.91 L1060.5 1212.91 L1061.09 1212.91 L1061.67 1212.91 L1062.26 1212.91 L1062.85 1212.91 L1063.43 1212.91 L1064.02 1212.91 L1064.6 1212.91 L1065.19 1212.91 L1065.78 1212.91 L1066.36 1212.91 L1066.95 1212.91 L1067.54 1212.91 L1068.12 1212.91 L1068.71 1212.91 L1069.3 1212.91 L1069.88 1212.91 L1070.47 1212.91 L1071.06 1212.91 L1071.64 1212.91 L1072.23 1212.91 L1072.81 1212.91 L1073.4 1212.91 L1073.99 1212.91 L1074.57 1212.91 L1075.16 1212.91 L1075.75 1212.91 L1076.33 1212.91 L1076.92 1212.91 L1077.51 1212.91 L1078.09 1212.91 L1078.68 1212.91 L1079.26 1212.91 L1079.85 1212.91 L1080.44 1212.91 L1081.02 1212.91 L1081.61 1212.91 L1082.2 1212.91 L1082.78 1212.91 L1083.37 1212.91 L1083.96 1212.91 L1084.54 1212.91 L1085.13 1212.91 L1085.72 1212.91 L1086.3 1212.91 L1086.89 1212.91 L1087.47 1212.91 L1088.06 1212.91 L1088.65 1212.91 L1089.23 1212.91 L1089.82 1212.91 L1090.41 1212.91 L1090.99 1212.91 L1091.58 1212.91 L1092.17 1212.91 L1092.75 1212.91 L1093.34 1212.91 L1093.93 1212.91 L1094.51 1212.91 L1095.1 1212.91 L1095.68 1212.91 L1096.27 1212.91 L1096.86 1212.91 L1097.44 1212.91 L1098.03 1212.91 L1098.62 1212.91 L1099.2 1212.91 L1099.79 1212.91 L1100.38 1212.91 L1100.96 1212.91 L1101.55 1212.91 L1102.14 1212.91 L1102.72 1212.91 L1103.31 1212.91 L1103.89 1212.91 L1104.48 1212.91 L1105.07 1212.91 L1105.65 1212.91 L1106.24 1212.91 L1106.83 1212.91 L1107.41 1212.91 L1108 1212.91 L1108.59 1212.91 L1109.17 1212.91 L1109.76 1212.91 L1110.34 1212.91 L1110.93 1212.91 L1111.52 1212.91 L1112.1 1212.91 L1112.69 1212.91 L1113.28 1212.91 L1113.86 1212.91 L1114.45 1212.91 L1115.04 1212.91 L1115.62 1212.91 L1116.21 1212.91 L1116.8 1212.91 L1117.38 1212.91 L1117.97 1212.91 L1118.55 1212.91 L1119.14 1212.91 L1119.73 1212.91 L1120.31 1212.91 L1120.9 1212.91 L1121.49 1212.91 L1122.07 1212.91 L1122.66 1212.91 L1123.25 1212.91 L1123.83 1212.91 L1124.42 1212.91 L1125.01 1212.91 L1125.59 1212.91 L1126.18 1212.91 L1126.76 1212.91 L1127.35 1212.91 L1127.94 1212.91 L1128.52 1212.91 L1129.11 1212.91 L1129.7 1212.91 L1130.28 1212.91 L1130.87 1212.91 L1131.46 1212.91 L1132.04 1212.91 L1132.63 1212.91 L1133.21 1212.91 L1133.8 1212.91 L1134.39 1212.91 L1134.97 1212.91 L1135.56 1212.91 L1136.15 1212.91 L1136.73 1212.91 L1137.32 1212.91 L1137.91 1212.91 L1138.49 1212.91 L1139.08 1212.91 L1139.67 1212.91 L1140.25 1212.91 L1140.84 1212.91 L1141.42 1212.91 L1142.01 1212.91 L1142.6 1212.91 L1143.18 1212.91 L1143.77 1212.91 L1144.36 1212.91 L1144.94 1212.91 L1145.53 1212.91 L1146.12 1212.91 L1146.7 1212.91 L1147.29 1212.91 L1147.88 1212.91 L1148.46 1212.91 L1149.05 1212.91 L1149.63 1212.91 L1150.22 1212.91 L1150.81 1212.91 L1151.39 1212.91 L1151.98 1212.91 L1152.57 1212.91 L1153.15 1212.91 L1153.74 1212.91 L1154.33 1212.91 L1154.91 1212.91 L1155.5 1212.91 L1156.09 1212.91 L1156.67 1212.91 L1157.26 1212.91 L1157.84 1212.91 L1158.43 1212.91 L1159.02 1212.91 L1159.6 1212.91 L1160.19 1212.91 L1160.78 1212.91 L1161.36 1212.91 L1161.95 1212.91 L1162.54 1212.91 L1163.12 1212.91 L1163.71 1212.91 L1164.29 1212.91 L1164.88 1212.91 L1165.47 1212.91 L1166.05 1212.91 L1166.64 1212.91 L1167.23 1212.91 L1167.81 1212.91 L1168.4 1212.91 L1168.99 1212.91 L1169.57 1212.91 L1170.16 1212.91 L1170.75 1212.91 L1171.33 1212.91 L1171.92 1212.91 L1172.5 1212.91 L1173.09 1212.91 L1173.68 1212.91 L1174.26 1212.91 L1174.85 1212.91 L1175.44 1212.91 L1176.02 1212.91 L1176.61 1212.91 L1177.2 1212.91 L1177.78 1212.91 L1178.37 1212.91 L1178.96 1212.91 L1179.54 1212.91 L1180.13 1212.91 L1180.71 1212.91 L1181.3 1212.91 L1181.89 1212.91 L1182.47 1212.91 L1183.06 1212.91 L1183.65 1212.91 L1184.23 1212.91 L1184.82 1212.91 L1185.41 1212.91 L1185.99 1212.91 L1186.58 1212.91 L1187.16 1212.91 L1187.75 1212.91 L1188.34 1212.91 L1188.92 1212.91 L1189.51 1212.91 L1190.1 1212.91 L1190.68 1212.91 L1191.27 1212.91 L1191.86 1212.91 L1192.44 1212.91 L1193.03 1212.91 L1193.62 1212.91 L1194.2 1212.91 L1194.79 1212.91 L1195.37 1212.91 L1195.96 1212.91 L1196.55 1212.91 L1197.13 1212.91 L1197.72 1212.91 L1198.31 1212.91 L1198.89 1212.91 L1199.48 1212.91 L1200.07 1212.91 L1200.65 1212.91 L1201.24 1212.91 L1201.83 1212.91 L1202.41 1212.91 L1203 1212.91 L1203.58 1212.91 L1204.17 1212.91 L1204.76 1212.91 L1205.34 1212.91 L1205.93 1212.91 L1206.52 1212.91 L1207.1 1212.91 L1207.69 1212.91 L1208.28 1212.91 L1208.86 1212.91 L1209.45 1212.91 L1210.03 1212.91 L1210.62 1212.91 L1211.21 1212.91 L1211.79 1212.91 L1212.38 1212.91 L1212.97 1212.91 L1213.55 1212.91 L1214.14 1212.91 L1214.73 1212.91 L1215.31 1212.91 L1215.9 1212.91 L1216.49 1212.91 L1217.07 1212.91 L1217.66 1212.91 L1218.24 1212.91 L1218.83 1212.91 L1219.42 1212.91 L1220 1212.91 L1220.59 1212.91 L1221.18 1212.91 L1221.76 1212.91 L1222.35 1212.91 L1222.94 1212.91 L1223.52 1212.91 L1224.11 1212.91 L1224.7 1212.91 L1225.28 1212.91 L1225.87 1212.91 L1226.45 1212.91 L1227.04 1212.91 L1227.63 1212.91 L1228.21 1212.91 L1228.8 1212.91 L1229.39 1212.91 L1229.97 1212.91 L1230.56 1212.91 L1231.15 1212.91 L1231.73 1212.91 L1232.32 1212.91 L1232.91 1212.91 L1233.49 1212.91 L1234.08 1212.91 L1234.66 1212.91 L1235.25 1212.91 L1235.84 1212.91 L1236.42 1212.91 L1237.01 1212.91 L1237.6 1212.91 L1238.18 1212.91 L1238.77 1212.91 L1239.36 1212.91 L1239.94 1212.91 L1240.53 1212.91 L1241.11 1212.91 L1241.7 1212.91 L1242.29 1212.91 L1242.87 1212.91 L1243.46 1212.91 L1244.05 1212.91 L1244.63 1212.91 L1245.22 1212.91 L1245.81 1212.91 L1246.39 1212.91 L1246.98 1212.91 L1247.57 1212.91 L1248.15 1212.91 L1248.74 1212.91 L1249.32 1212.91 L1249.91 1212.91 L1250.5 1212.91 L1251.08 1212.91 L1251.67 1212.91 L1252.26 1212.91 L1252.84 1212.91 L1253.43 1212.91 L1254.02 1212.91 L1254.6 1212.91 L1255.19 1212.91 L1255.78 1212.91 L1256.36 1212.91 L1256.95 1212.91 L1257.53 1212.91 L1258.12 1212.91 L1258.71 1212.91 L1259.29 1212.91 L1259.88 1212.91 L1260.47 1212.91 L1261.05 1212.91 L1261.64 1212.91 L1262.23 1212.91 L1262.81 1212.91 L1263.4 1212.91 L1263.98 1212.91 L1264.57 1212.91 L1265.16 1212.91 L1265.74 1212.91 L1266.33 1212.91 L1266.92 1212.91 L1267.5 1212.91 L1268.09 1212.91 L1268.68 1212.91 L1269.26 1212.91 L1269.85 1212.91 L1270.44 1212.91 L1271.02 1212.91 L1271.61 1212.91 L1272.19 1212.91 L1272.78 1212.91 L1273.37 1212.91 L1273.95 1212.91 L1274.54 1212.91 L1275.13 1212.91 L1275.71 1212.91 L1276.3 1212.91 L1276.89 1212.91 L1277.47 1212.91 L1278.06 1212.91 L1278.65 1212.91 L1279.23 1212.91 L1279.82 1212.91 L1280.4 1212.91 L1280.99 1212.91 L1281.58 1212.91 L1282.16 1212.91 L1282.75 1212.91 L1283.34 1212.91 L1283.92 1212.91 L1284.51 1212.91 L1285.1 1212.91 L1285.68 1212.91 L1286.27 1212.91 L1286.86 1212.91 L1287.44 1212.91 L1288.03 1212.91 L1288.61 1212.91 L1289.2 1212.91 L1289.79 1212.91 L1290.37 1212.91 L1290.96 1212.91 L1291.55 1212.91 L1292.13 1212.91 L1292.72 1212.91 L1293.31 1212.91 L1293.89 1212.91 L1294.48 1212.91 L1295.06 1212.91 L1295.65 1212.91 L1296.24 1212.91 L1296.82 1212.91 L1297.41 1212.91 L1298 1212.91 L1298.58 1212.91 L1299.17 1212.91 L1299.76 1212.91 L1300.34 1212.91 L1300.93 1212.91 L1301.52 1212.91 L1302.1 1212.91 L1302.69 1212.91 L1303.27 1212.91 L1303.86 1212.91 L1304.45 1212.91 L1305.03 1212.91 L1305.62 1212.91 L1306.21 1212.91 L1306.79 1212.91 L1307.38 1212.91 L1307.97 1212.91 L1308.55 1212.91 L1309.14 1212.91 L1309.73 1212.91 L1310.31 1212.91 L1310.9 1212.91 L1311.48 1212.91 L1312.07 1212.91 L1312.66 1212.91 L1313.24 1212.91 L1313.83 1212.91 L1314.42 1212.91 L1315 1212.91 L1315.59 1212.91 L1316.18 1212.91 L1316.76 1212.91 L1317.35 1212.91 L1317.93 1212.91 L1318.52 1212.91 L1319.11 1212.91 L1319.69 1212.91 L1320.28 1212.91 L1320.87 1212.91 L1321.45 1212.91 L1322.04 1212.91 L1322.63 1212.91 L1323.21 1212.91 L1323.8 1212.91 L1324.39 1212.91 L1324.97 1212.91 L1325.56 1212.91 L1326.14 1212.91 L1326.73 1212.91 L1327.32 1212.91 L1327.9 1212.91 L1328.49 1212.91 L1329.08 1212.91 L1329.66 1212.91 L1330.25 1212.91 L1330.84 1212.91 L1331.42 1212.91 L1332.01 1212.91 L1332.6 1212.91 L1333.18 1212.91 L1333.77 1212.91 L1334.35 1212.91 L1334.94 1212.91 L1335.53 1212.91 L1336.11 1212.91 L1336.7 1212.91 L1337.29 1212.91 L1337.87 1212.91 L1338.46 1212.91 L1339.05 1212.91 L1339.63 1212.91 L1340.22 1212.91 L1340.8 1212.91 L1341.39 1212.91 L1341.98 1212.91 L1342.56 1212.91 L1343.15 1212.91 L1343.74 1212.91 L1344.32 1212.91 L1344.91 1212.91 L1345.5 1212.91 L1346.08 1212.91 L1346.67 1212.91 L1347.26 1212.91 L1347.84 1212.91 L1348.43 1212.91 L1349.01 1212.91 L1349.6 1212.91 L1350.19 1212.91 L1350.77 1212.91 L1351.36 1212.91 L1351.95 1212.91 L1352.53 1212.91 L1353.12 1212.91 L1353.71 1212.91 L1354.29 1212.91 L1354.88 1212.91 L1355.47 1212.91 L1356.05 1212.91 L1356.64 1212.91 L1357.22 1212.91 L1357.81 1212.91 L1358.4 1212.91 L1358.98 1212.91 L1359.57 1212.91 L1360.16 1212.91 L1360.74 1212.91 L1361.33 1212.91 L1361.92 1212.91 L1362.5 1212.91 L1363.09 1212.91 L1363.68 1212.91 L1364.26 1212.91 L1364.85 1212.91 L1365.43 1212.91 L1366.02 1212.91 L1366.61 1212.91 L1367.19 1212.91 L1367.78 1212.91 L1368.37 1212.91 L1368.95 1212.91 L1369.54 1212.91 L1370.13 1212.91 L1370.71 1212.91 L1371.3 1212.91 L1371.88 1212.91 L1372.47 1212.91 L1373.06 1212.91 L1373.64 1212.91 L1374.23 1212.91 L1374.82 1212.91 L1375.4 1212.91 L1375.99 1212.91 L1376.58 1212.91 L1377.16 1212.91 L1377.75 1212.91 L1378.34 1212.91 L1378.92 1212.91 L1379.51 1212.91 L1380.09 1212.91 L1380.68 1212.91 L1381.27 1212.91 L1381.85 1212.91 L1382.44 1212.91 L1383.03 1212.91 L1383.61 1212.91 L1384.2 1212.91 L1384.79 1212.91 L1385.37 1212.91 L1385.96 1212.91 L1386.55 1212.91 L1387.13 1212.91 L1387.72 1212.91 L1388.3 1212.91 L1388.89 1212.91 L1389.48 1212.91 L1390.06 1212.91 L1390.65 1212.91 L1391.24 1212.91 L1391.82 1212.91 L1392.41 1212.91 L1393 1212.91 L1393.58 1212.91 L1394.17 1212.91 L1394.75 1212.91 L1395.34 1212.91 L1395.93 1212.91 L1396.51 1212.91 L1397.1 1212.91 L1397.69 1212.91 L1398.27 1212.91 L1398.86 1212.91 L1399.45 1212.91 L1400.03 1212.91 L1400.62 1212.91 L1401.21 1212.91 L1401.79 1212.91 L1402.38 1212.91 L1402.96 1212.91 L1403.55 1212.91 L1404.14 1212.91 L1404.72 1212.91 L1405.31 1212.91 L1405.9 1212.91 L1406.48 1212.91 L1407.07 1212.91 L1407.66 1212.91 L1408.24 1212.91 L1408.83 1212.91 L1409.42 1212.91 L1410 1212.91 L1410.59 1212.91 L1411.17 1212.91 L1411.76 1212.91 L1412.35 1212.91 L1412.93 1212.91 L1413.52 1212.91 L1414.11 1212.91 L1414.69 1212.91 L1415.28 1212.91 L1415.87 1212.91 L1416.45 1212.91 L1417.04 1212.91 L1417.63 1212.91 L1418.21 1212.91 L1418.8 1212.91 L1419.38 1212.91 L1419.97 1212.91 L1420.56 1212.91 L1421.14 1212.91 L1421.73 1212.91 L1422.32 1212.91 L1422.9 1212.91 L1423.49 1212.91 L1424.08 1212.91 L1424.66 1212.91 L1425.25 1212.91 L1425.83 1212.91 L1426.42 1212.91 L1427.01 1212.91 L1427.59 1212.91 L1428.18 1212.91 L1428.77 1212.91 L1429.35 1212.91 L1429.94 1212.91 L1430.53 1212.91 L1431.11 1212.91 L1431.7 1212.91 L1432.29 1212.91 L1432.87 1212.91 L1433.46 1212.91 L1434.04 1212.91 L1434.63 1212.91 L1435.22 1212.91 L1435.8 1212.91 L1436.39 1212.91 L1436.98 1212.91 L1437.56 1212.91 L1438.15 1212.91 L1438.74 1212.91 L1439.32 1212.91 L1439.91 1212.91 L1440.5 1212.91 L1441.08 1212.91 L1441.67 1212.91 L1442.25 1212.91 L1442.84 1212.91 L1443.43 1212.91 L1444.01 1212.91 L1444.6 1212.91 L1445.19 1212.91 L1445.77 1212.91 L1446.36 1212.91 L1446.95 1212.91 L1447.53 1212.91 L1448.12 1212.91 L1448.7 1212.91 L1449.29 1212.91 L1449.88 1212.91 L1450.46 1212.91 L1451.05 1212.91 L1451.64 1212.91 L1452.22 1212.91 L1452.81 1212.91 L1453.4 1212.91 L1453.98 1212.91 L1454.57 1212.91 L1455.16 1212.91 L1455.74 1212.91 L1456.33 1212.91 L1456.91 1212.91 L1457.5 1212.91 L1458.09 1212.91 L1458.67 1212.91 L1459.26 1212.91 L1459.85 1212.91 L1460.43 1212.91 L1461.02 1212.91 L1461.61 1212.91 L1462.19 1212.91 L1462.78 1212.91 L1463.37 1212.91 L1463.95 1212.91 L1464.54 1212.91 L1465.12 1212.91 L1465.71 1212.91 L1466.3 1212.91 L1466.88 1212.91 L1467.47 1212.91 L1468.06 1212.91 L1468.64 1212.91 L1469.23 1212.91 L1469.82 1212.91 L1470.4 1212.91 L1470.99 1212.91 L1471.57 1212.91 L1472.16 1212.91 L1472.75 1212.91 L1473.33 1212.91 L1473.92 1212.91 L1474.51 1212.91 L1475.09 1212.91 L1475.68 1212.91 L1476.27 1212.91 L1476.85 1212.91 L1477.44 1212.91 L1478.03 1212.91 L1478.61 1212.91 L1479.2 1212.91 L1479.78 1212.91 L1480.37 1212.91 L1480.96 1212.91 L1481.54 1212.91 L1482.13 1212.91 L1482.72 1212.91 L1483.3 1212.91 L1483.89 1212.91 L1484.48 1212.91 L1485.06 1212.91 L1485.65 1212.91 L1486.24 1212.91 L1486.82 1212.91 L1487.41 1212.91 L1487.99 1212.91 L1488.58 1212.91 L1489.17 1212.91 L1489.75 1212.91 L1490.34 1212.91 L1490.93 1212.91 L1491.51 1212.91 L1492.1 1212.91 L1492.69 1212.91 L1493.27 1212.91 L1493.86 1212.91 L1494.45 1212.91 L1495.03 1212.91 L1495.62 1212.91 L1496.2 1212.91 L1496.79 1212.91 L1497.38 1212.91 L1497.96 1212.91 L1498.55 1212.91 L1499.14 1212.91 L1499.72 1212.91 L1500.31 1212.91 L1500.9 1212.91 L1501.48 1212.91 L1502.07 1212.91 L1502.65 1212.91 L1503.24 1212.91 L1503.83 1212.91 L1504.41 1212.91 L1505 1212.91 L1505.59 1212.91 L1506.17 1212.91 L1506.76 1212.91 L1507.35 1212.91 L1507.93 1212.91 L1508.52 1212.91 L1509.11 1212.91 L1509.69 1212.91 L1510.28 1212.91 L1510.86 1212.91 L1511.45 1212.91 L1512.04 1212.91 L1512.62 1212.91 L1513.21 1212.91 L1513.8 1212.91 L1514.38 1212.91 L1514.97 1212.91 L1515.56 1212.91 L1516.14 1212.91 L1516.73 1212.91 L1517.32 1212.91 L1517.9 1212.91 L1518.49 1212.91 L1519.07 1212.91 L1519.66 1212.91 L1520.25 1212.91 L1520.83 1212.91 L1521.42 1212.91 L1522.01 1212.91 L1522.59 1212.91 L1523.18 1212.91 L1523.77 1212.91 L1524.35 1212.91 L1524.94 1212.91 L1525.52 1212.91 L1526.11 1212.91 L1526.7 1212.91 L1527.28 1212.91 L1527.87 1212.91 L1528.46 1212.91 L1529.04 1212.91 L1529.63 1212.91 L1530.22 1212.91 L1530.8 1212.91 L1531.39 1212.91 L1531.98 1212.91 L1532.56 1212.91 L1533.15 1212.91 L1533.73 1212.91 L1534.32 1212.91 L1534.91 1212.91 L1535.49 1212.91 L1536.08 1212.91 L1536.67 1212.91 L1537.25 1212.91 L1537.84 1212.91 L1538.43 1212.91 L1539.01 1212.91 L1539.6 1212.91 L1540.19 1212.91 L1540.77 1212.91 L1541.36 1212.91 L1541.94 1212.91 L1542.53 1212.91 L1543.12 1212.91 L1543.7 1212.91 L1544.29 1212.91 L1544.88 1212.91 L1545.46 1212.91 L1546.05 1212.91 L1546.64 1212.91 L1547.22 1212.91 L1547.81 1212.91 L1548.4 1212.91 L1548.98 1212.91 L1549.57 1212.91 L1550.15 1212.91 L1550.74 1212.91 L1551.33 1212.91 L1551.91 1212.91 L1552.5 1212.91 L1553.09 1212.91 L1553.67 1212.91 L1554.26 1212.91 L1554.85 1212.91 L1555.43 1212.91 L1556.02 1212.91 L1556.6 1212.91 L1557.19 1212.91 L1557.78 1212.91 L1558.36 1212.91 L1558.95 1212.91 L1559.54 1212.91 L1560.12 1212.91 L1560.71 1212.91 L1561.3 1212.91 L1561.88 1212.91 L1562.47 1212.91 L1563.06 1212.91 L1563.64 1212.91 L1564.23 1212.91 L1564.81 1212.91 L1565.4 1212.91 L1565.99 1212.91 L1566.57 1212.91 L1567.16 1212.91 L1567.75 1212.91 L1568.33 1212.91 L1568.92 1212.91 L1569.51 1212.91 L1570.09 1212.91 L1570.68 1212.91 L1571.27 1212.91 L1571.85 1212.91 L1572.44 1212.91 L1573.02 1212.91 L1573.61 1212.91 L1574.2 1212.91 L1574.78 1212.91 L1575.37 1212.91 L1575.96 1212.91 L1576.54 1212.91 L1577.13 1212.91 L1577.72 1212.91 L1578.3 1212.91 L1578.89 1212.91 L1579.47 1212.91 L1580.06 1212.91 L1580.65 1212.91 L1581.23 1212.91 L1581.82 1212.91 L1582.41 1212.91 L1582.99 1212.91 L1583.58 1212.91 L1584.17 1212.91 L1584.75 1212.91 L1585.34 1212.91 L1585.93 1212.91 L1586.51 1212.91 L1587.1 1212.91 L1587.68 1212.91 L1588.27 1212.91 L1588.86 1212.91 L1589.44 1212.91 L1590.03 1212.91 L1590.62 1212.91 L1591.2 1212.91 L1591.79 1212.91 L1592.38 1212.91 L1592.96 1212.91 L1593.55 1212.91 L1594.14 1212.91 L1594.72 1212.91 L1595.31 1212.91 L1595.89 1212.91 L1596.48 1212.91 L1597.07 1212.91 L1597.65 1212.91 L1598.24 1212.91 L1598.83 1212.91 L1599.41 1212.91 L1600 1212.91 L1600.59 1212.91 L1601.17 1212.91 L1601.76 1212.91 L1602.34 1212.91 L1602.93 1212.91 L1603.52 1212.91 L1604.1 1212.91 L1604.69 1212.91 L1605.28 1212.91 L1605.86 1212.91 L1606.45 1212.91 L1607.04 1212.91 L1607.62 1212.91 L1608.21 1212.91 L1608.8 1212.91 L1609.38 1212.91 L1609.97 1212.91 L1610.55 1212.91 L1611.14 1212.91 L1611.73 1212.91 L1612.31 1212.91 L1612.9 1212.91 L1613.49 1212.91 L1614.07 1212.91 L1614.66 1212.91 L1615.25 1212.91 L1615.83 1212.91 L1616.42 1212.91 L1617.01 1212.91 L1617.59 1212.91 L1618.18 1212.91 L1618.76 1212.91 L1619.35 1212.91 L1619.94 1212.91 L1620.52 1212.91 L1621.11 1212.91 L1621.7 1212.91 L1622.28 1212.91 L1622.87 1212.91 L1623.46 1212.91 L1624.04 1212.91 L1624.63 1212.91 L1625.22 1212.91 L1625.8 1212.91 L1626.39 1212.91 L1626.97 1212.91 L1627.56 1212.91 L1628.15 1212.91 L1628.73 1212.91 L1629.32 1212.91 L1629.91 1212.91 L1630.49 1212.91 L1631.08 1212.91 L1631.67 1212.91 L1632.25 1212.91 L1632.84 1212.91 L1633.42 1212.91 L1634.01 1212.91 L1634.6 1212.91 L1635.18 1212.91 L1635.77 1212.91 L1636.36 1212.91 L1636.94 1212.91 L1637.53 1212.91 L1638.12 1212.91 L1638.7 1212.91 L1639.29 1212.91 L1639.88 1212.91 L1640.46 1212.91 L1641.05 1212.91 L1641.63 1212.91 L1642.22 1212.91 L1642.81 1212.91 L1643.39 1212.91 L1643.98 1212.91 L1644.57 1212.91 L1645.15 1212.91 L1645.74 1212.91 L1646.33 1212.91 L1646.91 1212.91 L1647.5 1212.91 L1648.09 1212.91 L1648.67 1212.91 L1649.26 1212.91 L1649.84 1212.91 L1650.43 1212.91 L1651.02 1212.91 L1651.6 1212.91 L1652.19 1212.91 L1652.78 1212.91 L1653.36 1212.91 L1653.95 1212.91 L1654.54 1212.91 L1655.12 1212.91 L1655.71 1212.91 L1656.29 1212.91 L1656.88 1212.91 L1657.47 1212.91 L1658.05 1212.91 L1658.64 1212.91 L1659.23 1212.91 L1659.81 1212.91 L1660.4 1212.91 L1660.99 1212.91 L1661.57 1212.91 L1662.16 1212.91 L1662.75 1212.91 L1663.33 1212.91 L1663.92 1212.91 L1664.5 1212.91 L1665.09 1212.91 L1665.68 1212.91 L1666.26 1212.91 L1666.85 1212.91 L1667.44 1212.91 L1668.02 1212.91 L1668.61 1212.91 L1669.2 1212.91 L1669.78 1212.91 L1670.37 1212.91 L1670.96 1212.91 L1671.54 1212.91 L1672.13 1212.91 L1672.71 1212.91 L1673.3 1212.91 L1673.89 1212.91 L1674.47 1212.91 L1675.06 1212.91 L1675.65 1212.91 L1676.23 1212.91 L1676.82 1212.91 L1677.41 1212.91 L1677.99 1212.91 L1678.58 1212.91 L1679.17 1212.91 L1679.75 1212.91 L1680.34 1212.91 L1680.92 1212.91 L1681.51 1212.91 L1682.1 1212.91 L1682.68 1212.91 L1683.27 1212.91 L1683.86 1212.91 L1684.44 1212.91 L1685.03 1212.91 L1685.62 1212.91 L1686.2 1212.91 L1686.79 1212.91 L1687.37 1212.91 L1687.96 1212.91 L1688.55 1212.91 L1689.13 1212.91 L1689.72 1212.91 L1690.31 1212.91 L1690.89 1212.91 L1691.48 1212.91 L1692.07 1212.91 L1692.65 1212.91 L1693.24 1212.91 L1693.83 1212.91 L1694.41 1212.91 L1695 1212.91 L1695.58 1212.91 L1696.17 1212.91 L1696.76 1212.91 L1697.34 1212.91 L1697.93 1212.91 L1698.52 1212.91 L1699.1 1212.91 L1699.69 1212.91 L1700.28 1212.91 L1700.86 1212.91 L1701.45 1212.91 L1702.04 1212.91 L1702.62 1212.91 L1703.21 1212.91 L1703.79 1212.91 L1704.38 1212.91 L1704.97 1212.91 L1705.55 1212.91 L1706.14 1212.91 L1706.73 1212.91 L1707.31 1212.91 L1707.9 1212.91 L1708.49 1212.91 L1709.07 1212.91 L1709.66 1212.91 L1710.24 1212.91 L1710.83 1212.91 L1711.42 1212.91 L1712 1212.91 L1712.59 1212.91 L1713.18 1212.91 L1713.76 1212.91 L1714.35 1212.91 L1714.94 1212.91 L1715.52 1212.91 L1716.11 1212.91 L1716.7 1212.91 L1717.28 1212.91 L1717.87 1212.91 L1718.45 1212.91 L1719.04 1212.91 L1719.63 1212.91 L1720.21 1212.91 L1720.8 1212.91 L1721.39 1212.91 L1721.97 1212.91 L1722.56 1212.91 L1723.15 1212.91 L1723.73 1212.91 L1724.32 1212.91 L1724.91 1212.91 L1725.49 1212.91 L1726.08 1212.91 L1726.66 1212.91 L1727.25 1212.91 L1727.84 1212.91 L1728.42 1212.91 L1729.01 1212.91 L1729.6 1212.91 L1730.18 1212.91 L1730.77 1212.91 L1731.36 1212.91 L1731.94 1212.91 L1732.53 1212.91 L1733.11 1212.91 L1733.7 1212.91 L1734.29 1212.91 L1734.87 1212.91 L1735.46 1212.91 L1736.05 1212.91 L1736.63 1212.91 L1737.22 1212.91 L1737.81 1212.91 L1738.39 1212.91 L1738.98 1212.91 L1739.57 1212.91 L1740.15 1212.91 L1740.74 1212.91 L1741.32 1212.91 L1741.91 1212.91 L1742.5 1212.91 L1743.08 1212.91 L1743.67 1212.91 L1744.26 1212.91 L1744.84 1212.91 L1745.43 1212.91 L1746.02 1212.91 L1746.6 1212.91 L1747.19 1212.91 L1747.78 1212.91 L1748.36 1212.91 L1748.95 1212.91 L1749.53 1212.91 L1750.12 1212.91 L1750.71 1212.91 L1751.29 1212.91 L1751.88 1212.91 L1752.47 1212.91 L1753.05 1212.91 L1753.64 1212.91 L1754.23 1212.91 L1754.81 1212.91 L1755.4 1212.91 L1755.99 1212.91 L1756.57 1212.91 L1757.16 1212.91 L1757.74 1212.91 L1758.33 1212.91 L1758.92 1212.91 L1759.5 1212.91 L1760.09 1212.91 L1760.68 1212.91 L1761.26 1212.91 L1761.85 1212.91 L1762.44 1212.91 L1763.02 1212.91 L1763.61 1212.91 L1764.19 1212.91 L1764.78 1212.91 L1765.37 1212.91 L1765.95 1212.91 L1766.54 1212.91 L1767.13 1212.91 L1767.71 1212.91 L1768.3 1212.91 L1768.89 1212.91 L1769.47 1212.91 L1770.06 1212.91 L1770.65 1212.91 L1771.23 1212.91 L1771.82 1212.91 L1772.4 1212.91 L1772.99 1212.91 L1773.58 1212.91 L1774.16 1212.91 L1774.75 1212.91 L1775.34 1212.91 L1775.92 1212.91 L1776.51 1212.91 L1777.1 1212.91 L1777.68 1212.91 L1778.27 1212.91 L1778.86 1212.91 L1779.44 1212.91 L1780.03 1212.91 L1780.61 1212.91 L1781.2 1212.91 L1781.79 1212.91 L1782.37 1212.91 L1782.96 1212.91 L1783.55 1212.91 L1784.13 1212.91 L1784.72 1212.91 L1785.31 1212.91 L1785.89 1212.91 L1786.48 1212.91 L1787.06 1212.91 L1787.65 1212.91 L1788.24 1212.91 L1788.82 1212.91 L1789.41 1212.91 L1790 1212.91 L1790.58 1212.91 L1791.17 1212.91 L1791.76 1212.91 L1792.34 1212.91 L1792.93 1212.91 L1793.52 1212.91 L1794.1 1212.91 L1794.69 1212.91 L1795.27 1212.91 L1795.86 1212.91 L1796.45 1212.91 L1797.03 1212.91 L1797.62 1212.91 L1798.21 1212.91 L1798.79 1212.91 L1799.38 1212.91 L1799.97 1212.91 L1800.55 1212.91 L1801.14 1212.91 L1801.73 1212.91 L1802.31 1212.91 L1802.9 1212.91 L1803.48 1212.91 L1804.07 1212.91 L1804.66 1212.91 L1805.24 1212.91 L1805.83 1212.91 L1806.42 1212.91 L1807 1212.91 L1807.59 1212.91 L1808.18 1212.91 L1808.76 1212.91 L1809.35 1212.91 L1809.94 1212.91 L1810.52 1212.91 L1811.11 1212.91 L1811.69 1212.91 L1812.28 1212.91 L1812.87 1212.91 L1813.45 1212.91 L1814.04 1212.91 L1814.63 1212.91 L1815.21 1212.91 L1815.8 1212.91 L1816.39 1212.91 L1816.97 1212.91 L1817.56 1212.91 L1818.14 1212.91 L1818.73 1212.91 L1819.32 1212.91 L1819.9 1212.91 L1820.49 1212.91 L1821.08 1212.91 L1821.66 1212.91 L1822.25 1212.91 L1822.84 1212.91 L1823.42 1212.91 L1824.01 1212.91 L1824.6 1212.91 L1825.18 1212.91 L1825.77 1212.91 L1826.35 1212.91 L1826.94 1212.91 L1827.53 1212.91 L1828.11 1212.91 L1828.7 1212.91 L1829.29 1212.91 L1829.87 1212.91 L1830.46 1212.91 L1831.05 1212.91 L1831.63 1212.91 L1832.22 1212.91 L1832.81 1212.91 L1833.39 1212.91 L1833.98 1212.91 L1834.56 1212.91 L1835.15 1212.91 L1835.74 1212.91 L1836.32 1212.91 L1836.91 1212.91 L1837.5 1212.91 L1838.08 1212.91 L1838.67 1212.91 L1839.26 1212.91 L1839.84 1212.91 L1840.43 1212.91 L1841.01 1212.91 L1841.6 1212.91 L1842.19 1212.91 L1842.77 1212.91 L1843.36 1212.91 L1843.95 1212.91 L1844.53 1212.91 L1845.12 1212.91 L1845.71 1212.91 L1846.29 1212.91 L1846.88 1212.91 L1847.47 1212.91 L1848.05 1212.91 L1848.64 1212.91 L1849.22 1212.91 L1849.81 1212.91 L1850.4 1212.91 L1850.98 1212.91 L1851.57 1212.91 L1852.16 1212.91 L1852.74 1212.91 L1853.33 1212.91 L1853.92 1212.91 L1854.5 1212.91 L1855.09 1212.91 L1855.68 1212.91 L1856.26 1212.91 L1856.85 1212.91 L1857.43 1212.91 L1858.02 1212.91 L1858.61 1212.91 L1859.19 1212.91 L1859.78 1212.91 L1860.37 1212.91 L1860.95 1212.91 L1861.54 1212.91 L1862.13 1212.91 L1862.71 1212.91 L1863.3 1212.91 L1863.88 1212.91 L1864.47 1212.91 L1865.06 1212.91 L1865.64 1212.91 L1866.23 1212.91 L1866.82 1212.91 L1867.4 1212.91 L1867.99 1212.91 L1868.58 1212.91 L1869.16 1212.91 L1869.75 1212.91 L1870.34 1212.91 L1870.92 1212.91 L1871.51 1212.91 L1872.09 1212.91 L1872.68 1212.91 L1873.27 1212.91 L1873.85 1212.91 L1874.44 1212.91 L1875.03 1212.91 L1875.61 1212.91 L1876.2 1212.91 L1876.79 1212.91 L1877.37 1212.91 L1877.96 1212.91 L1878.55 1212.91 L1879.13 1212.91 L1879.72 1212.91 L1880.3 1212.91 L1880.89 1212.91 L1881.48 1212.91 L1882.06 1212.91 L1882.65 1212.91 L1883.24 1212.91 L1883.82 1212.91 L1884.41 1212.91 L1885 1212.91 L1885.58 1212.91 L1886.17 1212.91 L1886.76 1212.91 L1887.34 1212.91 L1887.93 1212.91 L1888.51 1212.91 L1889.1 1212.91 L1889.69 1212.91 L1890.27 1212.91 L1890.86 1212.91 L1891.45 1212.91 L1892.03 1212.91 L1892.62 1212.91 L1893.21 1212.91 L1893.79 1212.91 L1894.38 1212.91 L1894.96 1212.91 L1895.55 1212.91 L1896.14 1212.91 L1896.72 1212.91 L1897.31 1212.91 L1897.9 1212.91 L1898.48 1212.91 L1899.07 1212.91 L1899.66 1212.91 L1900.24 1212.91 L1900.83 1212.91 L1901.42 1212.91 L1902 1212.91 L1902.59 1212.91 L1903.17 1212.91 L1903.76 1212.91 L1904.35 1212.91 L1904.93 1212.91 L1905.52 1212.91 L1906.11 1212.91 L1906.69 1212.91 L1907.28 1212.91 L1907.87 1212.91 L1908.45 1212.91 L1909.04 1212.91 L1909.63 1212.91 L1910.21 1212.91 L1910.8 1212.91 L1911.38 1212.91 L1911.97 1212.91 L1912.56 1212.91 L1913.14 1212.91 L1913.73 1212.91 L1914.32 1212.91 L1914.9 1212.91 L1915.49 1212.91 L1916.08 1212.91 L1916.66 1212.91 L1917.25 1212.91 L1917.83 1212.91 L1918.42 1212.91 L1919.01 1212.91 L1919.59 1212.91 L1920.18 1212.91 L1920.77 1212.91 L1921.35 1212.91 L1921.94 1212.91 L1922.53 1212.91 L1923.11 1212.91 L1923.7 1212.91 L1924.29 1212.91 L1924.87 1212.91 L1925.46 1212.91 L1926.04 1212.91 L1926.63 1212.91 L1927.22 1212.91 L1927.8 1212.91 L1928.39 1212.91 L1928.98 1212.91 L1929.56 1212.91 L1930.15 1212.91 L1930.74 1212.91 L1931.32 1212.91 L1931.91 1212.91 L1932.5 1212.91 L1933.08 1212.91 L1933.67 1212.91 L1934.25 1212.91 L1934.84 1212.91 L1935.43 1212.91 L1936.01 1212.91 L1936.6 1212.91 L1937.19 1212.91 L1937.77 1212.91 L1938.36 1212.91 L1938.95 1212.91 L1939.53 1212.91 L1940.12 1212.91 L1940.71 1212.91 L1941.29 1212.91 L1941.88 1212.91 L1942.46 1212.91 L1943.05 1212.91 L1943.64 1212.91 L1944.22 1212.91 L1944.81 1212.91 L1945.4 1212.91 L1945.98 1212.91 L1946.57 1212.91 L1947.16 1212.91 L1947.74 1212.91 L1948.33 1212.91 L1948.91 1212.91 L1949.5 1212.91 L1950.09 1212.91 L1950.67 1212.91 L1951.26 1212.91 L1951.85 1212.91 L1952.43 1212.91 L1953.02 1212.91 L1953.61 1212.91 L1954.19 1212.91 L1954.78 1212.91 L1955.37 1212.91 L1955.95 1212.91 L1956.54 1212.91 L1957.12 1212.91 L1957.71 1212.91 L1958.3 1212.91 L1958.88 1212.91 L1959.47 1212.91 L1960.06 1212.91 L1960.64 1212.91 L1961.23 1212.91 L1961.82 1212.91 L1962.4 1212.91 L1962.99 1212.91 L1963.58 1212.91 L1964.16 1212.91 L1964.75 1212.91 L1965.33 1212.91 L1965.92 1212.91 L1966.51 1212.91 L1967.09 1212.91 L1967.68 1212.91 L1968.27 1212.91 L1968.85 1212.91 L1969.44 1212.91 L1970.03 1212.91 L1970.61 1212.91 L1971.2 1212.91 L1971.78 1212.91 L1972.37 1212.91 L1972.96 1212.91 L1973.54 1212.91 L1974.13 1212.91 L1974.72 1212.91 L1975.3 1212.91 L1975.89 1212.91 L1976.48 1212.91 L1977.06 1212.91 L1977.65 1212.91 L1978.24 1212.91 L1978.82 1212.91 L1979.41 1212.91 L1979.99 1212.91 L1980.58 1212.91 L1981.17 1212.91 L1981.75 1212.91 L1982.34 1212.91 L1982.93 1212.91 L1983.51 1212.91 L1984.1 1212.91 L1984.69 1212.91 L1985.27 1212.91 L1985.86 1212.91 L1986.45 1212.91 L1987.03 1212.91 L1987.62 1212.91 L1988.2 1212.91 L1988.79 1212.91 L1989.38 1212.91 L1989.96 1212.91 L1990.55 1212.91 L1991.14 1212.91 L1991.72 1212.91 L1992.31 1212.91 L1992.9 1212.91 L1993.48 1212.91 L1994.07 1212.91 L1994.65 1212.91 L1995.24 1212.91 L1995.83 1212.91 L1996.41 1212.91 L1997 1212.91 L1997.59 1212.91 L1998.17 1212.91 L1998.76 1212.91 L1999.35 1212.91 L1999.93 1212.91 L2000.52 1212.91 L2001.11 1212.91 L2001.69 1212.91 L2002.28 1212.91 L2002.86 1212.91 L2003.45 1212.91 L2004.04 1212.91 L2004.62 1212.91 L2005.21 1212.91 L2005.8 1212.91 L2006.38 1212.91 L2006.97 1212.91 L2007.56 1212.91 L2008.14 1212.91 L2008.73 1212.91 L2009.32 1212.91 L2009.9 1212.91 L2010.49 1212.91 L2011.07 1212.91 L2011.66 1212.91 L2012.25 1212.91 L2012.83 1212.91 L2013.42 1212.91 L2014.01 1212.91 L2014.59 1212.91 L2015.18 1212.91 L2015.77 1212.91 L2016.35 1212.91 L2016.94 1212.91 L2017.53 1212.91 L2018.11 1212.91 L2018.7 1212.91 L2019.28 1212.91 L2019.87 1212.91 L2020.46 1212.91 L2021.04 1212.91 L2021.63 1212.91 L2022.22 1212.91 L2022.8 1212.91 L2023.39 1212.91 L2023.98 1212.91 L2024.56 1212.91 L2025.15 1212.91 L2025.73 1212.91 L2026.32 1212.91 L2026.91 1212.91 L2027.49 1212.91 L2028.08 1212.91 L2028.67 1212.91 L2029.25 1212.91 L2029.84 1212.91 L2030.43 1212.91 L2031.01 1212.91 L2031.6 1212.91 L2032.19 1212.91 L2032.77 1212.91 L2033.36 1212.91 L2033.94 1212.91 L2034.53 1212.91 L2035.12 1212.91 L2035.7 1212.91 L2036.29 1212.91 L2036.88 1212.91 L2037.46 1212.91 L2038.05 1212.91 L2038.64 1212.91 L2039.22 1212.91 L2039.81 1212.91 L2040.4 1212.91 L2040.98 1212.91 L2041.57 1212.91 L2042.15 1212.91 L2042.74 1212.91 L2043.33 1212.91 L2043.91 1212.91 L2044.5 1212.91 L2045.09 1212.91 L2045.67 1212.91 L2046.26 1212.91 L2046.85 1212.91 L2047.43 1212.91 L2048.02 1212.91 L2048.6 1212.91 L2049.19 1212.91 L2049.78 1212.91 L2050.36 1212.91 L2050.95 1212.91 L2051.54 1212.91 L2052.12 1212.91 L2052.71 1212.91 L2053.3 1212.91 L2053.88 1212.91 L2054.47 1212.91 L2055.06 1212.91 L2055.64 1212.91 L2056.23 1212.91 L2056.81 1212.91 L2057.4 1212.91 L2057.99 1212.91 L2058.57 1212.91 L2059.16 1212.91 L2059.75 1212.91 L2060.33 1212.91 L2060.92 1212.91 L2061.51 1212.91 L2062.09 1212.91 L2062.68 1212.91 L2063.27 1212.91 L2063.85 1212.91 L2064.44 1212.91 L2065.02 1212.91 L2065.61 1212.91 L2066.2 1212.91 L2066.78 1212.91 L2067.37 1212.91 L2067.96 1212.91 L2068.54 1212.91 L2069.13 1212.91 L2069.72 1212.91 L2070.3 1212.91 L2070.89 1212.91 L2071.48 1212.91 L2072.06 1212.91 L2072.65 1212.91 L2073.23 1212.91 L2073.82 1212.91 L2074.41 1212.91 L2074.99 1212.91 L2075.58 1212.91 L2076.17 1212.91 L2076.75 1212.91 L2077.34 1212.91 L2077.93 1212.91 L2078.51 1212.91 L2079.1 1212.91 L2079.68 1212.91 L2080.27 1212.91 L2080.86 1212.91 L2081.44 1212.91 L2082.03 1212.91 L2082.62 1212.91 L2083.2 1212.91 L2083.79 1212.91 L2084.38 1212.91 L2084.96 1212.91 L2085.55 1212.91 L2086.14 1212.91 L2086.72 1212.91 L2087.31 1212.91 L2087.89 1212.91 L2088.48 1212.91 L2089.07 1212.91 L2089.65 1212.91 L2090.24 1212.91 L2090.83 1212.91 L2091.41 1212.91 L2092 1212.91 L2092.59 1212.91 L2093.17 1212.91 L2093.76 1212.91 L2094.35 1212.91 L2094.93 1212.91 L2095.52 1212.91 L2096.1 1212.91 L2096.69 1212.91 L2097.28 1212.91 L2097.86 1212.91 L2098.45 1212.91 L2099.04 1212.91 L2099.62 1212.91 L2100.21 1212.91 L2100.8 1212.91 L2101.38 1212.91 L2101.97 1212.91 L2102.55 1212.91 L2103.14 1212.91 L2103.73 1212.91 L2104.31 1212.91 L2104.9 1212.91 L2105.49 1212.91 L2106.07 1212.91 L2106.66 1212.91 L2107.25 1212.91 L2107.83 1212.91 L2108.42 1212.91 L2109.01 1212.91 L2109.59 1212.91 L2110.18 1212.91 L2110.76 1212.91 L2111.35 1212.91 L2111.94 1212.91 L2112.52 1212.91 L2113.11 1212.91 L2113.7 1212.91 L2114.28 1212.91 L2114.87 1212.91 L2115.46 1212.91 L2116.04 1212.91 L2116.63 1212.91 L2117.22 1212.91 L2117.8 1212.91 L2118.39 1212.91 L2118.97 1212.91 L2119.56 1212.91 L2120.15 1212.91 L2120.73 1212.91 L2121.32 1212.91 L2121.91 1212.91 L2122.49 1212.91 L2123.08 1212.91 L2123.67 1212.91 L2124.25 1212.91 L2124.84 1212.91 L2125.42 1212.91 L2126.01 1212.91 L2126.6 1212.91 L2127.18 1212.91 L2127.77 1212.91 L2128.36 1212.91 L2128.94 1212.91 L2129.53 1212.91 L2130.12 1212.91 L2130.7 1212.91 L2131.29 1212.91 L2131.88 1212.91 L2132.46 1212.91 L2133.05 1212.91 L2133.63 1212.91 L2134.22 1212.91 L2134.81 1212.91 L2135.39 1212.91 L2135.98 1212.91 L2136.57 1212.91 L2137.15 1212.91 L2137.74 1212.91 L2138.33 1212.91 L2138.91 1212.91 L2139.5 1212.91 L2140.09 1212.91 L2140.67 1212.91 L2141.26 1212.91 L2141.84 1212.91 L2142.43 1212.91 L2143.02 1212.91 L2143.6 1212.91 L2144.19 1212.91 L2144.78 1212.91 L2145.36 1212.91 L2145.95 1212.91 L2146.54 1212.91 L2147.12 1212.91 L2147.71 1212.91 L2148.3 1212.91 L2148.88 1212.91 L2149.47 1212.91 L2150.05 1212.91 L2150.64 1212.91 L2151.23 1212.91 L2151.81 1212.91 L2152.4 1212.91 L2152.99 1212.91 L2153.57 1212.91 L2154.16 1212.91 L2154.75 1212.91 L2155.33 1212.91 L2155.92 1212.91 L2156.5 1212.91 L2157.09 1212.91 L2157.68 1212.91 L2158.26 1212.91 L2158.26 1212.07 L2157.68 1212.07 L2157.09 1212.07 L2156.5 1212.07 L2155.92 1212.07 L2155.33 1212.07 L2154.75 1212.07 L2154.16 1212.07 L2153.57 1212.07 L2152.99 1212.07 L2152.4 1212.07 L2151.81 1212.07 L2151.23 1212.07 L2150.64 1212.07 L2150.05 1212.07 L2149.47 1212.07 L2148.88 1212.07 L2148.3 1212.07 L2147.71 1212.07 L2147.12 1212.07 L2146.54 1212.07 L2145.95 1212.07 L2145.36 1212.07 L2144.78 1212.07 L2144.19 1212.07 L2143.6 1212.07 L2143.02 1212.07 L2142.43 1212.07 L2141.84 1212.07 L2141.26 1212.07 L2140.67 1212.07 L2140.09 1212.07 L2139.5 1212.07 L2138.91 1212.07 L2138.33 1212.07 L2137.74 1212.07 L2137.15 1212.07 L2136.57 1212.07 L2135.98 1212.07 L2135.39 1212.07 L2134.81 1212.07 L2134.22 1212.07 L2133.63 1212.07 L2133.05 1212.07 L2132.46 1212.07 L2131.88 1212.07 L2131.29 1212.07 L2130.7 1212.07 L2130.12 1212.07 L2129.53 1212.07 L2128.94 1212.07 L2128.36 1212.07 L2127.77 1212.07 L2127.18 1212.07 L2126.6 1212.07 L2126.01 1212.07 L2125.42 1212.07 L2124.84 1212.07 L2124.25 1212.07 L2123.67 1212.07 L2123.08 1212.07 L2122.49 1212.07 L2121.91 1212.07 L2121.32 1212.07 L2120.73 1212.07 L2120.15 1212.07 L2119.56 1212.07 L2118.97 1212.07 L2118.39 1212.07 L2117.8 1212.07 L2117.22 1212.07 L2116.63 1212.07 L2116.04 1212.07 L2115.46 1212.07 L2114.87 1212.07 L2114.28 1212.07 L2113.7 1212.07 L2113.11 1212.07 L2112.52 1212.07 L2111.94 1212.07 L2111.35 1212.07 L2110.76 1212.07 L2110.18 1212.07 L2109.59 1212.07 L2109.01 1212.07 L2108.42 1212.07 L2107.83 1212.07 L2107.25 1212.07 L2106.66 1212.07 L2106.07 1212.07 L2105.49 1212.07 L2104.9 1212.07 L2104.31 1212.07 L2103.73 1212.07 L2103.14 1212.07 L2102.55 1212.07 L2101.97 1212.07 L2101.38 1212.07 L2100.8 1212.07 L2100.21 1212.07 L2099.62 1212.07 L2099.04 1212.07 L2098.45 1212.07 L2097.86 1212.07 L2097.28 1212.07 L2096.69 1212.07 L2096.1 1212.07 L2095.52 1212.07 L2094.93 1212.07 L2094.35 1212.07 L2093.76 1212.07 L2093.17 1212.07 L2092.59 1212.07 L2092 1212.07 L2091.41 1212.07 L2090.83 1212.07 L2090.24 1212.07 L2089.65 1212.07 L2089.07 1212.07 L2088.48 1212.07 L2087.89 1212.07 L2087.31 1212.07 L2086.72 1212.07 L2086.14 1212.07 L2085.55 1212.07 L2084.96 1212.07 L2084.38 1212.07 L2083.79 1212.07 L2083.2 1212.07 L2082.62 1212.07 L2082.03 1212.07 L2081.44 1212.07 L2080.86 1212.07 L2080.27 1212.07 L2079.68 1212.07 L2079.1 1212.07 L2078.51 1212.07 L2077.93 1212.07 L2077.34 1212.07 L2076.75 1212.07 L2076.17 1212.07 L2075.58 1212.07 L2074.99 1212.07 L2074.41 1212.07 L2073.82 1212.07 L2073.23 1212.07 L2072.65 1212.07 L2072.06 1212.07 L2071.48 1212.07 L2070.89 1212.07 L2070.3 1212.07 L2069.72 1212.07 L2069.13 1212.07 L2068.54 1212.07 L2067.96 1212.07 L2067.37 1212.07 L2066.78 1212.07 L2066.2 1212.07 L2065.61 1212.07 L2065.02 1212.07 L2064.44 1212.07 L2063.85 1212.07 L2063.27 1212.07 L2062.68 1212.07 L2062.09 1212.07 L2061.51 1212.07 L2060.92 1212.07 L2060.33 1212.07 L2059.75 1212.07 L2059.16 1212.07 L2058.57 1212.07 L2057.99 1212.07 L2057.4 1212.07 L2056.81 1212.07 L2056.23 1212.07 L2055.64 1212.07 L2055.06 1212.07 L2054.47 1212.07 L2053.88 1212.07 L2053.3 1212.07 L2052.71 1212.07 L2052.12 1212.07 L2051.54 1212.07 L2050.95 1212.07 L2050.36 1212.07 L2049.78 1212.07 L2049.19 1212.07 L2048.6 1212.07 L2048.02 1212.07 L2047.43 1212.07 L2046.85 1212.07 L2046.26 1212.07 L2045.67 1212.07 L2045.09 1212.07 L2044.5 1212.07 L2043.91 1212.07 L2043.33 1212.07 L2042.74 1212.07 L2042.15 1212.07 L2041.57 1212.07 L2040.98 1212.07 L2040.4 1212.07 L2039.81 1212.07 L2039.22 1212.07 L2038.64 1212.07 L2038.05 1212.07 L2037.46 1212.07 L2036.88 1212.07 L2036.29 1212.07 L2035.7 1212.07 L2035.12 1212.07 L2034.53 1212.07 L2033.94 1212.07 L2033.36 1212.07 L2032.77 1212.07 L2032.19 1212.07 L2031.6 1212.07 L2031.01 1212.07 L2030.43 1212.07 L2029.84 1212.07 L2029.25 1212.07 L2028.67 1212.07 L2028.08 1212.07 L2027.49 1212.07 L2026.91 1212.07 L2026.32 1212.07 L2025.73 1212.07 L2025.15 1212.07 L2024.56 1212.07 L2023.98 1212.07 L2023.39 1212.07 L2022.8 1212.07 L2022.22 1212.07 L2021.63 1212.07 L2021.04 1212.07 L2020.46 1212.07 L2019.87 1212.07 L2019.28 1212.07 L2018.7 1212.07 L2018.11 1212.07 L2017.53 1212.07 L2016.94 1212.07 L2016.35 1212.07 L2015.77 1212.07 L2015.18 1212.07 L2014.59 1212.07 L2014.01 1212.07 L2013.42 1212.07 L2012.83 1212.07 L2012.25 1212.07 L2011.66 1212.07 L2011.07 1212.07 L2010.49 1212.07 L2009.9 1212.07 L2009.32 1212.07 L2008.73 1212.07 L2008.14 1212.07 L2007.56 1212.07 L2006.97 1212.07 L2006.38 1212.07 L2005.8 1212.07 L2005.21 1212.07 L2004.62 1212.07 L2004.04 1212.07 L2003.45 1212.07 L2002.86 1212.07 L2002.28 1212.07 L2001.69 1212.07 L2001.11 1212.07 L2000.52 1212.07 L1999.93 1212.07 L1999.35 1212.07 L1998.76 1212.07 L1998.17 1212.07 L1997.59 1212.07 L1997 1212.07 L1996.41 1212.07 L1995.83 1212.07 L1995.24 1212.07 L1994.65 1212.07 L1994.07 1212.07 L1993.48 1212.07 L1992.9 1212.07 L1992.31 1212.07 L1991.72 1212.07 L1991.14 1212.07 L1990.55 1212.07 L1989.96 1212.07 L1989.38 1212.07 L1988.79 1212.07 L1988.2 1212.07 L1987.62 1212.07 L1987.03 1212.07 L1986.45 1212.07 L1985.86 1212.07 L1985.27 1212.07 L1984.69 1212.07 L1984.1 1212.07 L1983.51 1212.07 L1982.93 1212.07 L1982.34 1212.07 L1981.75 1212.07 L1981.17 1212.07 L1980.58 1212.07 L1979.99 1212.07 L1979.41 1212.07 L1978.82 1212.07 L1978.24 1212.07 L1977.65 1212.07 L1977.06 1212.07 L1976.48 1212.07 L1975.89 1212.07 L1975.3 1212.07 L1974.72 1212.07 L1974.13 1212.07 L1973.54 1212.07 L1972.96 1212.07 L1972.37 1212.07 L1971.78 1212.07 L1971.2 1212.07 L1970.61 1212.07 L1970.03 1212.07 L1969.44 1212.07 L1968.85 1212.07 L1968.27 1212.07 L1967.68 1212.07 L1967.09 1212.07 L1966.51 1212.07 L1965.92 1212.07 L1965.33 1212.07 L1964.75 1212.07 L1964.16 1212.07 L1963.58 1212.07 L1962.99 1212.07 L1962.4 1212.07 L1961.82 1212.07 L1961.23 1212.07 L1960.64 1212.07 L1960.06 1212.07 L1959.47 1212.07 L1958.88 1212.07 L1958.3 1212.07 L1957.71 1212.07 L1957.12 1212.07 L1956.54 1212.07 L1955.95 1212.07 L1955.37 1212.07 L1954.78 1212.07 L1954.19 1212.07 L1953.61 1212.07 L1953.02 1212.07 L1952.43 1212.07 L1951.85 1212.07 L1951.26 1212.07 L1950.67 1212.07 L1950.09 1212.07 L1949.5 1212.07 L1948.91 1212.07 L1948.33 1212.07 L1947.74 1212.07 L1947.16 1212.07 L1946.57 1212.07 L1945.98 1212.07 L1945.4 1212.07 L1944.81 1212.07 L1944.22 1212.07 L1943.64 1212.07 L1943.05 1212.07 L1942.46 1212.07 L1941.88 1212.07 L1941.29 1212.07 L1940.71 1212.07 L1940.12 1212.07 L1939.53 1212.07 L1938.95 1212.07 L1938.36 1212.07 L1937.77 1212.07 L1937.19 1212.07 L1936.6 1212.07 L1936.01 1212.07 L1935.43 1212.07 L1934.84 1212.07 L1934.25 1212.07 L1933.67 1212.07 L1933.08 1212.07 L1932.5 1212.07 L1931.91 1212.07 L1931.32 1212.07 L1930.74 1212.07 L1930.15 1212.07 L1929.56 1212.07 L1928.98 1212.07 L1928.39 1212.07 L1927.8 1212.07 L1927.22 1212.07 L1926.63 1212.07 L1926.04 1212.07 L1925.46 1212.07 L1924.87 1212.07 L1924.29 1212.07 L1923.7 1212.07 L1923.11 1212.07 L1922.53 1212.07 L1921.94 1212.07 L1921.35 1212.07 L1920.77 1212.07 L1920.18 1212.07 L1919.59 1212.07 L1919.01 1212.07 L1918.42 1212.07 L1917.83 1212.07 L1917.25 1212.07 L1916.66 1212.07 L1916.08 1212.07 L1915.49 1212.07 L1914.9 1212.07 L1914.32 1212.07 L1913.73 1212.07 L1913.14 1212.07 L1912.56 1212.07 L1911.97 1212.07 L1911.38 1212.07 L1910.8 1212.07 L1910.21 1212.07 L1909.63 1212.07 L1909.04 1212.07 L1908.45 1212.07 L1907.87 1212.07 L1907.28 1212.07 L1906.69 1212.07 L1906.11 1212.07 L1905.52 1212.07 L1904.93 1212.07 L1904.35 1212.07 L1903.76 1212.07 L1903.17 1212.07 L1902.59 1212.07 L1902 1212.07 L1901.42 1212.07 L1900.83 1212.07 L1900.24 1212.07 L1899.66 1212.07 L1899.07 1212.07 L1898.48 1212.07 L1897.9 1212.07 L1897.31 1212.07 L1896.72 1212.07 L1896.14 1212.07 L1895.55 1212.07 L1894.96 1212.07 L1894.38 1212.07 L1893.79 1212.07 L1893.21 1212.07 L1892.62 1212.07 L1892.03 1212.07 L1891.45 1212.07 L1890.86 1212.07 L1890.27 1212.07 L1889.69 1212.07 L1889.1 1212.07 L1888.51 1212.07 L1887.93 1212.07 L1887.34 1212.07 L1886.76 1212.07 L1886.17 1212.07 L1885.58 1212.07 L1885 1212.07 L1884.41 1212.07 L1883.82 1212.07 L1883.24 1212.07 L1882.65 1212.07 L1882.06 1212.07 L1881.48 1212.07 L1880.89 1212.07 L1880.3 1212.07 L1879.72 1212.07 L1879.13 1212.07 L1878.55 1212.07 L1877.96 1212.07 L1877.37 1212.07 L1876.79 1212.07 L1876.2 1212.07 L1875.61 1212.07 L1875.03 1212.07 L1874.44 1212.07 L1873.85 1212.07 L1873.27 1212.07 L1872.68 1212.07 L1872.09 1212.07 L1871.51 1212.07 L1870.92 1212.07 L1870.34 1212.07 L1869.75 1212.07 L1869.16 1212.07 L1868.58 1212.07 L1867.99 1212.07 L1867.4 1212.07 L1866.82 1212.07 L1866.23 1212.07 L1865.64 1212.07 L1865.06 1212.07 L1864.47 1212.07 L1863.88 1212.07 L1863.3 1212.07 L1862.71 1212.07 L1862.13 1212.07 L1861.54 1212.07 L1860.95 1212.07 L1860.37 1212.07 L1859.78 1212.07 L1859.19 1212.07 L1858.61 1212.07 L1858.02 1212.07 L1857.43 1212.07 L1856.85 1212.07 L1856.26 1212.07 L1855.68 1212.07 L1855.09 1212.07 L1854.5 1212.07 L1853.92 1212.07 L1853.33 1212.07 L1852.74 1212.07 L1852.16 1212.07 L1851.57 1212.07 L1850.98 1212.07 L1850.4 1212.07 L1849.81 1212.07 L1849.22 1212.07 L1848.64 1212.07 L1848.05 1212.07 L1847.47 1212.07 L1846.88 1212.07 L1846.29 1212.07 L1845.71 1212.07 L1845.12 1212.07 L1844.53 1212.07 L1843.95 1212.07 L1843.36 1212.07 L1842.77 1212.07 L1842.19 1212.07 L1841.6 1212.07 L1841.01 1212.07 L1840.43 1212.07 L1839.84 1212.07 L1839.26 1212.07 L1838.67 1212.07 L1838.08 1212.07 L1837.5 1212.07 L1836.91 1212.07 L1836.32 1212.07 L1835.74 1212.07 L1835.15 1212.07 L1834.56 1212.07 L1833.98 1212.07 L1833.39 1212.07 L1832.81 1212.07 L1832.22 1212.07 L1831.63 1212.07 L1831.05 1212.07 L1830.46 1212.07 L1829.87 1212.07 L1829.29 1212.07 L1828.7 1212.07 L1828.11 1212.07 L1827.53 1212.07 L1826.94 1212.07 L1826.35 1212.07 L1825.77 1212.07 L1825.18 1212.07 L1824.6 1212.07 L1824.01 1212.07 L1823.42 1212.07 L1822.84 1212.07 L1822.25 1212.07 L1821.66 1212.07 L1821.08 1212.07 L1820.49 1212.07 L1819.9 1212.07 L1819.32 1212.07 L1818.73 1212.07 L1818.14 1212.07 L1817.56 1212.07 L1816.97 1212.07 L1816.39 1212.07 L1815.8 1212.07 L1815.21 1212.07 L1814.63 1212.07 L1814.04 1212.07 L1813.45 1212.07 L1812.87 1212.07 L1812.28 1212.07 L1811.69 1212.07 L1811.11 1212.07 L1810.52 1212.07 L1809.94 1212.07 L1809.35 1212.07 L1808.76 1212.07 L1808.18 1212.07 L1807.59 1212.07 L1807 1212.07 L1806.42 1212.07 L1805.83 1212.07 L1805.24 1212.07 L1804.66 1212.07 L1804.07 1212.07 L1803.48 1212.07 L1802.9 1212.07 L1802.31 1212.07 L1801.73 1212.07 L1801.14 1212.07 L1800.55 1212.07 L1799.97 1212.07 L1799.38 1212.07 L1798.79 1212.07 L1798.21 1212.07 L1797.62 1212.07 L1797.03 1212.07 L1796.45 1212.07 L1795.86 1212.07 L1795.27 1212.07 L1794.69 1212.07 L1794.1 1212.07 L1793.52 1212.07 L1792.93 1212.07 L1792.34 1212.07 L1791.76 1212.07 L1791.17 1212.07 L1790.58 1212.07 L1790 1212.07 L1789.41 1212.07 L1788.82 1212.07 L1788.24 1212.07 L1787.65 1212.07 L1787.06 1212.07 L1786.48 1212.07 L1785.89 1212.07 L1785.31 1212.07 L1784.72 1212.07 L1784.13 1212.07 L1783.55 1212.07 L1782.96 1212.07 L1782.37 1212.07 L1781.79 1212.07 L1781.2 1212.07 L1780.61 1212.07 L1780.03 1212.07 L1779.44 1212.07 L1778.86 1212.07 L1778.27 1212.07 L1777.68 1212.07 L1777.1 1212.07 L1776.51 1212.07 L1775.92 1212.07 L1775.34 1212.07 L1774.75 1212.07 L1774.16 1212.07 L1773.58 1212.07 L1772.99 1212.07 L1772.4 1212.07 L1771.82 1212.07 L1771.23 1212.07 L1770.65 1212.07 L1770.06 1212.07 L1769.47 1212.07 L1768.89 1212.07 L1768.3 1212.07 L1767.71 1212.07 L1767.13 1212.07 L1766.54 1212.07 L1765.95 1212.07 L1765.37 1212.07 L1764.78 1212.07 L1764.19 1212.07 L1763.61 1212.07 L1763.02 1212.07 L1762.44 1212.07 L1761.85 1212.07 L1761.26 1212.07 L1760.68 1212.07 L1760.09 1212.07 L1759.5 1212.07 L1758.92 1212.07 L1758.33 1212.07 L1757.74 1212.07 L1757.16 1212.07 L1756.57 1212.07 L1755.99 1212.07 L1755.4 1212.07 L1754.81 1212.07 L1754.23 1212.07 L1753.64 1212.07 L1753.05 1212.07 L1752.47 1212.07 L1751.88 1212.07 L1751.29 1212.07 L1750.71 1212.07 L1750.12 1212.07 L1749.53 1212.07 L1748.95 1212.07 L1748.36 1212.07 L1747.78 1212.07 L1747.19 1212.07 L1746.6 1212.07 L1746.02 1212.07 L1745.43 1212.07 L1744.84 1212.07 L1744.26 1212.07 L1743.67 1212.07 L1743.08 1212.07 L1742.5 1212.07 L1741.91 1212.07 L1741.32 1212.07 L1740.74 1212.07 L1740.15 1212.07 L1739.57 1212.07 L1738.98 1212.07 L1738.39 1212.07 L1737.81 1212.07 L1737.22 1212.07 L1736.63 1212.07 L1736.05 1212.07 L1735.46 1212.07 L1734.87 1212.07 L1734.29 1212.07 L1733.7 1212.07 L1733.11 1212.07 L1732.53 1212.07 L1731.94 1212.07 L1731.36 1212.07 L1730.77 1212.07 L1730.18 1212.07 L1729.6 1212.07 L1729.01 1212.07 L1728.42 1212.07 L1727.84 1212.07 L1727.25 1212.07 L1726.66 1212.07 L1726.08 1212.07 L1725.49 1212.07 L1724.91 1212.07 L1724.32 1212.07 L1723.73 1212.07 L1723.15 1212.07 L1722.56 1212.07 L1721.97 1212.07 L1721.39 1212.07 L1720.8 1212.07 L1720.21 1212.07 L1719.63 1212.07 L1719.04 1212.07 L1718.45 1212.07 L1717.87 1212.07 L1717.28 1212.07 L1716.7 1212.07 L1716.11 1212.07 L1715.52 1212.07 L1714.94 1212.07 L1714.35 1212.07 L1713.76 1212.07 L1713.18 1212.07 L1712.59 1212.07 L1712 1212.07 L1711.42 1212.07 L1710.83 1212.07 L1710.24 1212.07 L1709.66 1212.07 L1709.07 1212.07 L1708.49 1212.07 L1707.9 1212.07 L1707.31 1212.07 L1706.73 1212.07 L1706.14 1212.07 L1705.55 1212.07 L1704.97 1212.07 L1704.38 1212.07 L1703.79 1212.07 L1703.21 1212.07 L1702.62 1212.07 L1702.04 1212.07 L1701.45 1212.07 L1700.86 1212.07 L1700.28 1212.07 L1699.69 1212.07 L1699.1 1212.07 L1698.52 1212.07 L1697.93 1212.07 L1697.34 1212.07 L1696.76 1212.07 L1696.17 1212.07 L1695.58 1212.07 L1695 1212.07 L1694.41 1212.07 L1693.83 1212.07 L1693.24 1212.07 L1692.65 1212.07 L1692.07 1212.07 L1691.48 1212.07 L1690.89 1212.07 L1690.31 1212.07 L1689.72 1212.07 L1689.13 1212.07 L1688.55 1212.07 L1687.96 1212.07 L1687.37 1212.07 L1686.79 1212.07 L1686.2 1212.07 L1685.62 1212.07 L1685.03 1212.07 L1684.44 1212.07 L1683.86 1212.07 L1683.27 1212.07 L1682.68 1212.07 L1682.1 1212.07 L1681.51 1212.07 L1680.92 1212.07 L1680.34 1212.07 L1679.75 1212.07 L1679.17 1212.07 L1678.58 1212.07 L1677.99 1212.07 L1677.41 1212.07 L1676.82 1212.07 L1676.23 1212.07 L1675.65 1212.07 L1675.06 1212.07 L1674.47 1212.07 L1673.89 1212.07 L1673.3 1212.07 L1672.71 1212.07 L1672.13 1212.07 L1671.54 1212.07 L1670.96 1212.07 L1670.37 1212.07 L1669.78 1212.07 L1669.2 1212.07 L1668.61 1212.07 L1668.02 1212.07 L1667.44 1212.07 L1666.85 1212.07 L1666.26 1212.07 L1665.68 1212.07 L1665.09 1212.07 L1664.5 1212.07 L1663.92 1212.07 L1663.33 1212.07 L1662.75 1212.07 L1662.16 1212.07 L1661.57 1212.07 L1660.99 1212.07 L1660.4 1212.07 L1659.81 1212.07 L1659.23 1212.07 L1658.64 1212.07 L1658.05 1212.07 L1657.47 1212.07 L1656.88 1212.07 L1656.29 1212.07 L1655.71 1212.07 L1655.12 1212.07 L1654.54 1212.07 L1653.95 1212.07 L1653.36 1212.07 L1652.78 1212.07 L1652.19 1212.07 L1651.6 1212.07 L1651.02 1212.07 L1650.43 1212.07 L1649.84 1212.07 L1649.26 1212.07 L1648.67 1212.07 L1648.09 1212.07 L1647.5 1212.07 L1646.91 1212.07 L1646.33 1212.07 L1645.74 1212.07 L1645.15 1212.07 L1644.57 1212.07 L1643.98 1212.07 L1643.39 1212.07 L1642.81 1212.07 L1642.22 1212.07 L1641.63 1212.07 L1641.05 1212.07 L1640.46 1212.07 L1639.88 1212.07 L1639.29 1212.07 L1638.7 1212.07 L1638.12 1212.07 L1637.53 1212.07 L1636.94 1212.07 L1636.36 1212.07 L1635.77 1212.07 L1635.18 1212.07 L1634.6 1212.07 L1634.01 1212.07 L1633.42 1212.07 L1632.84 1212.07 L1632.25 1212.07 L1631.67 1212.07 L1631.08 1212.07 L1630.49 1212.07 L1629.91 1212.07 L1629.32 1212.07 L1628.73 1212.07 L1628.15 1212.07 L1627.56 1212.07 L1626.97 1212.07 L1626.39 1212.07 L1625.8 1212.07 L1625.22 1212.07 L1624.63 1212.07 L1624.04 1212.07 L1623.46 1212.07 L1622.87 1212.07 L1622.28 1212.07 L1621.7 1212.07 L1621.11 1212.07 L1620.52 1212.07 L1619.94 1212.07 L1619.35 1212.07 L1618.76 1212.07 L1618.18 1212.07 L1617.59 1212.07 L1617.01 1212.07 L1616.42 1212.07 L1615.83 1212.07 L1615.25 1212.07 L1614.66 1212.07 L1614.07 1212.07 L1613.49 1212.07 L1612.9 1212.07 L1612.31 1212.07 L1611.73 1212.07 L1611.14 1212.07 L1610.55 1212.07 L1609.97 1212.07 L1609.38 1212.07 L1608.8 1212.07 L1608.21 1212.07 L1607.62 1212.07 L1607.04 1212.07 L1606.45 1212.07 L1605.86 1212.07 L1605.28 1212.07 L1604.69 1212.07 L1604.1 1212.07 L1603.52 1212.07 L1602.93 1212.07 L1602.34 1212.07 L1601.76 1212.07 L1601.17 1212.07 L1600.59 1212.07 L1600 1212.07 L1599.41 1212.07 L1598.83 1212.07 L1598.24 1212.07 L1597.65 1212.07 L1597.07 1212.07 L1596.48 1212.07 L1595.89 1212.07 L1595.31 1212.07 L1594.72 1212.07 L1594.14 1212.07 L1593.55 1212.07 L1592.96 1212.07 L1592.38 1212.07 L1591.79 1212.07 L1591.2 1212.07 L1590.62 1212.07 L1590.03 1212.07 L1589.44 1212.07 L1588.86 1212.07 L1588.27 1212.07 L1587.68 1212.07 L1587.1 1212.07 L1586.51 1212.07 L1585.93 1212.07 L1585.34 1212.07 L1584.75 1212.07 L1584.17 1212.07 L1583.58 1212.07 L1582.99 1212.07 L1582.41 1212.07 L1581.82 1212.07 L1581.23 1212.07 L1580.65 1212.07 L1580.06 1212.07 L1579.47 1212.07 L1578.89 1212.07 L1578.3 1212.07 L1577.72 1212.07 L1577.13 1212.07 L1576.54 1212.07 L1575.96 1212.07 L1575.37 1212.07 L1574.78 1212.07 L1574.2 1212.07 L1573.61 1212.07 L1573.02 1212.07 L1572.44 1212.07 L1571.85 1212.07 L1571.27 1212.07 L1570.68 1212.07 L1570.09 1212.07 L1569.51 1212.07 L1568.92 1212.07 L1568.33 1212.07 L1567.75 1212.07 L1567.16 1212.07 L1566.57 1212.07 L1565.99 1212.07 L1565.4 1212.07 L1564.81 1212.07 L1564.23 1212.07 L1563.64 1212.07 L1563.06 1212.07 L1562.47 1212.07 L1561.88 1212.07 L1561.3 1212.07 L1560.71 1212.07 L1560.12 1212.07 L1559.54 1212.07 L1558.95 1212.07 L1558.36 1212.07 L1557.78 1212.07 L1557.19 1212.07 L1556.6 1212.07 L1556.02 1212.07 L1555.43 1212.07 L1554.85 1212.07 L1554.26 1212.07 L1553.67 1212.07 L1553.09 1212.07 L1552.5 1212.07 L1551.91 1212.07 L1551.33 1212.07 L1550.74 1212.07 L1550.15 1212.07 L1549.57 1212.07 L1548.98 1212.07 L1548.4 1212.07 L1547.81 1212.07 L1547.22 1212.07 L1546.64 1212.07 L1546.05 1212.07 L1545.46 1212.07 L1544.88 1212.07 L1544.29 1212.07 L1543.7 1212.07 L1543.12 1212.07 L1542.53 1212.07 L1541.94 1212.07 L1541.36 1212.07 L1540.77 1212.07 L1540.19 1212.07 L1539.6 1212.07 L1539.01 1212.07 L1538.43 1212.07 L1537.84 1212.07 L1537.25 1212.07 L1536.67 1212.07 L1536.08 1212.07 L1535.49 1212.07 L1534.91 1212.07 L1534.32 1212.07 L1533.73 1212.07 L1533.15 1212.07 L1532.56 1212.07 L1531.98 1212.07 L1531.39 1212.07 L1530.8 1212.07 L1530.22 1212.07 L1529.63 1212.07 L1529.04 1212.07 L1528.46 1212.07 L1527.87 1212.07 L1527.28 1212.07 L1526.7 1212.07 L1526.11 1212.07 L1525.52 1212.07 L1524.94 1212.07 L1524.35 1212.07 L1523.77 1212.07 L1523.18 1212.07 L1522.59 1212.07 L1522.01 1212.07 L1521.42 1212.07 L1520.83 1212.07 L1520.25 1212.07 L1519.66 1212.07 L1519.07 1212.07 L1518.49 1212.07 L1517.9 1212.07 L1517.32 1212.07 L1516.73 1212.07 L1516.14 1212.07 L1515.56 1212.07 L1514.97 1212.07 L1514.38 1212.07 L1513.8 1212.07 L1513.21 1212.07 L1512.62 1212.07 L1512.04 1212.07 L1511.45 1212.07 L1510.86 1212.07 L1510.28 1212.07 L1509.69 1212.07 L1509.11 1212.07 L1508.52 1212.07 L1507.93 1212.07 L1507.35 1212.07 L1506.76 1212.07 L1506.17 1212.07 L1505.59 1212.07 L1505 1212.07 L1504.41 1212.07 L1503.83 1212.07 L1503.24 1212.07 L1502.65 1212.07 L1502.07 1212.07 L1501.48 1212.07 L1500.9 1212.07 L1500.31 1212.07 L1499.72 1212.07 L1499.14 1212.07 L1498.55 1212.07 L1497.96 1212.07 L1497.38 1212.07 L1496.79 1212.07 L1496.2 1212.07 L1495.62 1212.07 L1495.03 1212.07 L1494.45 1212.07 L1493.86 1212.07 L1493.27 1212.07 L1492.69 1212.07 L1492.1 1212.07 L1491.51 1212.07 L1490.93 1212.07 L1490.34 1212.07 L1489.75 1212.07 L1489.17 1212.07 L1488.58 1212.07 L1487.99 1212.07 L1487.41 1212.07 L1486.82 1212.07 L1486.24 1212.07 L1485.65 1212.07 L1485.06 1212.07 L1484.48 1212.07 L1483.89 1212.07 L1483.3 1212.07 L1482.72 1212.07 L1482.13 1212.07 L1481.54 1212.07 L1480.96 1212.07 L1480.37 1212.07 L1479.78 1212.07 L1479.2 1212.07 L1478.61 1212.07 L1478.03 1212.07 L1477.44 1212.07 L1476.85 1212.07 L1476.27 1212.07 L1475.68 1212.07 L1475.09 1212.07 L1474.51 1212.07 L1473.92 1212.07 L1473.33 1212.07 L1472.75 1212.07 L1472.16 1212.07 L1471.57 1212.07 L1470.99 1212.07 L1470.4 1212.07 L1469.82 1212.07 L1469.23 1212.07 L1468.64 1212.07 L1468.06 1212.07 L1467.47 1212.07 L1466.88 1212.07 L1466.3 1212.07 L1465.71 1212.07 L1465.12 1212.07 L1464.54 1212.07 L1463.95 1212.07 L1463.37 1212.07 L1462.78 1212.07 L1462.19 1212.07 L1461.61 1212.07 L1461.02 1212.07 L1460.43 1212.07 L1459.85 1212.07 L1459.26 1212.07 L1458.67 1212.07 L1458.09 1212.07 L1457.5 1212.07 L1456.91 1212.07 L1456.33 1212.07 L1455.74 1212.07 L1455.16 1212.07 L1454.57 1212.07 L1453.98 1212.07 L1453.4 1212.07 L1452.81 1212.07 L1452.22 1212.07 L1451.64 1212.07 L1451.05 1212.07 L1450.46 1212.07 L1449.88 1212.07 L1449.29 1212.07 L1448.7 1212.07 L1448.12 1212.07 L1447.53 1212.07 L1446.95 1212.07 L1446.36 1212.07 L1445.77 1212.07 L1445.19 1212.07 L1444.6 1212.07 L1444.01 1212.07 L1443.43 1212.07 L1442.84 1212.07 L1442.25 1212.07 L1441.67 1212.07 L1441.08 1212.07 L1440.5 1212.07 L1439.91 1212.07 L1439.32 1212.07 L1438.74 1212.07 L1438.15 1212.07 L1437.56 1212.07 L1436.98 1212.07 L1436.39 1212.07 L1435.8 1212.07 L1435.22 1212.07 L1434.63 1212.07 L1434.04 1212.07 L1433.46 1212.07 L1432.87 1212.07 L1432.29 1212.07 L1431.7 1212.07 L1431.11 1212.07 L1430.53 1212.07 L1429.94 1212.07 L1429.35 1212.07 L1428.77 1212.07 L1428.18 1212.07 L1427.59 1212.07 L1427.01 1212.07 L1426.42 1212.07 L1425.83 1212.07 L1425.25 1212.07 L1424.66 1212.07 L1424.08 1212.07 L1423.49 1212.07 L1422.9 1212.07 L1422.32 1212.07 L1421.73 1212.07 L1421.14 1212.07 L1420.56 1212.07 L1419.97 1212.07 L1419.38 1212.07 L1418.8 1212.07 L1418.21 1212.07 L1417.63 1212.07 L1417.04 1212.07 L1416.45 1212.07 L1415.87 1212.07 L1415.28 1212.07 L1414.69 1212.07 L1414.11 1212.07 L1413.52 1212.07 L1412.93 1212.07 L1412.35 1212.07 L1411.76 1212.07 L1411.17 1212.07 L1410.59 1212.07 L1410 1212.07 L1409.42 1212.07 L1408.83 1212.07 L1408.24 1212.07 L1407.66 1212.07 L1407.07 1212.07 L1406.48 1212.07 L1405.9 1212.07 L1405.31 1212.07 L1404.72 1212.07 L1404.14 1212.07 L1403.55 1212.07 L1402.96 1212.07 L1402.38 1212.07 L1401.79 1212.07 L1401.21 1212.07 L1400.62 1212.07 L1400.03 1212.07 L1399.45 1212.07 L1398.86 1212.07 L1398.27 1212.07 L1397.69 1212.07 L1397.1 1212.07 L1396.51 1212.07 L1395.93 1212.07 L1395.34 1212.07 L1394.75 1212.07 L1394.17 1212.07 L1393.58 1212.07 L1393 1212.07 L1392.41 1212.07 L1391.82 1212.07 L1391.24 1212.07 L1390.65 1212.07 L1390.06 1212.07 L1389.48 1212.07 L1388.89 1212.07 L1388.3 1212.07 L1387.72 1212.07 L1387.13 1212.07 L1386.55 1212.07 L1385.96 1212.07 L1385.37 1212.07 L1384.79 1212.07 L1384.2 1212.07 L1383.61 1212.07 L1383.03 1212.07 L1382.44 1212.07 L1381.85 1212.07 L1381.27 1212.07 L1380.68 1212.07 L1380.09 1212.07 L1379.51 1212.07 L1378.92 1212.07 L1378.34 1212.07 L1377.75 1212.07 L1377.16 1212.07 L1376.58 1212.07 L1375.99 1212.07 L1375.4 1212.07 L1374.82 1212.07 L1374.23 1212.07 L1373.64 1212.07 L1373.06 1212.07 L1372.47 1212.07 L1371.88 1212.07 L1371.3 1212.07 L1370.71 1212.07 L1370.13 1212.07 L1369.54 1212.07 L1368.95 1212.07 L1368.37 1212.07 L1367.78 1212.07 L1367.19 1212.07 L1366.61 1212.07 L1366.02 1212.07 L1365.43 1212.07 L1364.85 1212.07 L1364.26 1212.07 L1363.68 1212.07 L1363.09 1212.07 L1362.5 1212.07 L1361.92 1212.07 L1361.33 1212.07 L1360.74 1212.07 L1360.16 1212.07 L1359.57 1212.07 L1358.98 1212.07 L1358.4 1212.07 L1357.81 1212.07 L1357.22 1212.07 L1356.64 1212.07 L1356.05 1212.07 L1355.47 1212.07 L1354.88 1212.07 L1354.29 1212.07 L1353.71 1212.07 L1353.12 1212.07 L1352.53 1212.07 L1351.95 1212.07 L1351.36 1212.07 L1350.77 1212.07 L1350.19 1212.07 L1349.6 1212.07 L1349.01 1212.07 L1348.43 1212.07 L1347.84 1212.07 L1347.26 1212.07 L1346.67 1212.07 L1346.08 1212.07 L1345.5 1212.07 L1344.91 1212.07 L1344.32 1212.07 L1343.74 1212.07 L1343.15 1212.07 L1342.56 1212.07 L1341.98 1212.07 L1341.39 1212.07 L1340.8 1212.07 L1340.22 1212.07 L1339.63 1212.07 L1339.05 1212.07 L1338.46 1212.07 L1337.87 1212.07 L1337.29 1212.07 L1336.7 1212.07 L1336.11 1212.07 L1335.53 1212.07 L1334.94 1212.07 L1334.35 1212.07 L1333.77 1212.07 L1333.18 1212.07 L1332.6 1212.07 L1332.01 1212.07 L1331.42 1212.07 L1330.84 1212.07 L1330.25 1212.07 L1329.66 1212.07 L1329.08 1212.07 L1328.49 1212.07 L1327.9 1212.07 L1327.32 1212.07 L1326.73 1212.07 L1326.14 1212.07 L1325.56 1212.07 L1324.97 1212.07 L1324.39 1212.07 L1323.8 1212.07 L1323.21 1212.07 L1322.63 1212.07 L1322.04 1212.07 L1321.45 1212.07 L1320.87 1212.07 L1320.28 1212.07 L1319.69 1212.07 L1319.11 1212.07 L1318.52 1212.07 L1317.93 1212.07 L1317.35 1212.07 L1316.76 1212.07 L1316.18 1212.07 L1315.59 1212.07 L1315 1212.07 L1314.42 1212.07 L1313.83 1212.07 L1313.24 1212.07 L1312.66 1212.07 L1312.07 1212.07 L1311.48 1212.07 L1310.9 1212.07 L1310.31 1212.07 L1309.73 1212.07 L1309.14 1212.07 L1308.55 1212.07 L1307.97 1212.07 L1307.38 1212.07 L1306.79 1212.07 L1306.21 1212.07 L1305.62 1212.07 L1305.03 1212.07 L1304.45 1212.07 L1303.86 1212.07 L1303.27 1212.07 L1302.69 1212.07 L1302.1 1212.07 L1301.52 1212.07 L1300.93 1212.07 L1300.34 1212.07 L1299.76 1212.07 L1299.17 1212.07 L1298.58 1212.07 L1298 1212.07 L1297.41 1212.07 L1296.82 1212.07 L1296.24 1212.07 L1295.65 1212.07 L1295.06 1212.07 L1294.48 1212.07 L1293.89 1212.07 L1293.31 1212.07 L1292.72 1212.07 L1292.13 1212.07 L1291.55 1212.07 L1290.96 1212.07 L1290.37 1212.07 L1289.79 1212.07 L1289.2 1212.07 L1288.61 1212.07 L1288.03 1212.07 L1287.44 1212.07 L1286.86 1212.07 L1286.27 1212.07 L1285.68 1212.07 L1285.1 1212.07 L1284.51 1212.07 L1283.92 1212.07 L1283.34 1212.07 L1282.75 1212.07 L1282.16 1212.07 L1281.58 1212.07 L1280.99 1212.07 L1280.4 1212.07 L1279.82 1212.07 L1279.23 1212.07 L1278.65 1212.07 L1278.06 1212.07 L1277.47 1212.07 L1276.89 1212.07 L1276.3 1212.07 L1275.71 1212.07 L1275.13 1212.07 L1274.54 1212.07 L1273.95 1212.07 L1273.37 1212.07 L1272.78 1212.07 L1272.19 1212.07 L1271.61 1212.07 L1271.02 1212.07 L1270.44 1212.07 L1269.85 1212.07 L1269.26 1212.07 L1268.68 1212.07 L1268.09 1212.07 L1267.5 1212.07 L1266.92 1212.07 L1266.33 1212.07 L1265.74 1212.07 L1265.16 1212.07 L1264.57 1212.07 L1263.98 1212.07 L1263.4 1212.07 L1262.81 1212.07 L1262.23 1212.07 L1261.64 1212.07 L1261.05 1212.07 L1260.47 1212.07 L1259.88 1212.07 L1259.29 1212.07 L1258.71 1212.07 L1258.12 1212.07 L1257.53 1212.07 L1256.95 1212.07 L1256.36 1212.07 L1255.78 1212.07 L1255.19 1212.07 L1254.6 1212.07 L1254.02 1212.07 L1253.43 1212.07 L1252.84 1212.07 L1252.26 1212.07 L1251.67 1212.07 L1251.08 1212.07 L1250.5 1212.07 L1249.91 1212.07 L1249.32 1212.07 L1248.74 1212.07 L1248.15 1212.07 L1247.57 1212.07 L1246.98 1212.07 L1246.39 1212.07 L1245.81 1212.07 L1245.22 1212.07 L1244.63 1212.07 L1244.05 1212.07 L1243.46 1212.07 L1242.87 1212.07 L1242.29 1212.07 L1241.7 1212.07 L1241.11 1212.07 L1240.53 1212.07 L1239.94 1212.07 L1239.36 1212.07 L1238.77 1212.07 L1238.18 1212.07 L1237.6 1212.07 L1237.01 1212.07 L1236.42 1212.07 L1235.84 1212.07 L1235.25 1212.07 L1234.66 1212.07 L1234.08 1212.07 L1233.49 1212.07 L1232.91 1212.07 L1232.32 1212.07 L1231.73 1212.07 L1231.15 1212.07 L1230.56 1212.07 L1229.97 1212.07 L1229.39 1212.07 L1228.8 1212.07 L1228.21 1212.07 L1227.63 1212.07 L1227.04 1212.07 L1226.45 1212.07 L1225.87 1212.07 L1225.28 1212.07 L1224.7 1212.07 L1224.11 1212.07 L1223.52 1212.07 L1222.94 1212.07 L1222.35 1212.07 L1221.76 1212.07 L1221.18 1212.07 L1220.59 1212.07 L1220 1212.07 L1219.42 1212.07 L1218.83 1212.07 L1218.24 1212.07 L1217.66 1212.07 L1217.07 1212.07 L1216.49 1212.07 L1215.9 1212.07 L1215.31 1212.07 L1214.73 1212.07 L1214.14 1212.07 L1213.55 1212.07 L1212.97 1212.07 L1212.38 1212.07 L1211.79 1212.07 L1211.21 1212.07 L1210.62 1212.07 L1210.03 1212.07 L1209.45 1212.07 L1208.86 1212.07 L1208.28 1212.07 L1207.69 1212.07 L1207.1 1212.07 L1206.52 1212.07 L1205.93 1212.07 L1205.34 1212.07 L1204.76 1212.07 L1204.17 1212.07 L1203.58 1212.07 L1203 1212.07 L1202.41 1212.07 L1201.83 1212.07 L1201.24 1212.07 L1200.65 1212.07 L1200.07 1212.07 L1199.48 1212.07 L1198.89 1212.07 L1198.31 1212.07 L1197.72 1212.07 L1197.13 1212.07 L1196.55 1212.07 L1195.96 1212.07 L1195.37 1212.07 L1194.79 1212.07 L1194.2 1212.07 L1193.62 1212.07 L1193.03 1212.07 L1192.44 1212.07 L1191.86 1212.07 L1191.27 1212.07 L1190.68 1212.07 L1190.1 1212.07 L1189.51 1212.07 L1188.92 1212.07 L1188.34 1212.07 L1187.75 1212.07 L1187.16 1212.07 L1186.58 1212.07 L1185.99 1212.07 L1185.41 1212.07 L1184.82 1212.07 L1184.23 1212.07 L1183.65 1212.07 L1183.06 1212.07 L1182.47 1212.07 L1181.89 1212.07 L1181.3 1212.07 L1180.71 1212.07 L1180.13 1212.07 L1179.54 1212.07 L1178.96 1212.07 L1178.37 1212.07 L1177.78 1212.07 L1177.2 1212.07 L1176.61 1212.07 L1176.02 1212.07 L1175.44 1212.07 L1174.85 1212.07 L1174.26 1212.07 L1173.68 1212.07 L1173.09 1212.07 L1172.5 1212.07 L1171.92 1212.07 L1171.33 1212.07 L1170.75 1212.07 L1170.16 1212.07 L1169.57 1212.07 L1168.99 1212.07 L1168.4 1212.07 L1167.81 1212.07 L1167.23 1212.07 L1166.64 1212.07 L1166.05 1212.07 L1165.47 1212.07 L1164.88 1212.07 L1164.29 1212.07 L1163.71 1212.07 L1163.12 1212.07 L1162.54 1212.07 L1161.95 1212.07 L1161.36 1212.07 L1160.78 1212.07 L1160.19 1212.07 L1159.6 1212.07 L1159.02 1212.07 L1158.43 1212.07 L1157.84 1212.07 L1157.26 1212.07 L1156.67 1212.07 L1156.09 1212.07 L1155.5 1212.07 L1154.91 1212.07 L1154.33 1212.07 L1153.74 1212.07 L1153.15 1212.07 L1152.57 1212.07 L1151.98 1212.07 L1151.39 1212.07 L1150.81 1212.07 L1150.22 1212.07 L1149.63 1212.07 L1149.05 1212.07 L1148.46 1212.07 L1147.88 1212.07 L1147.29 1212.07 L1146.7 1212.07 L1146.12 1212.07 L1145.53 1212.07 L1144.94 1212.07 L1144.36 1212.07 L1143.77 1212.07 L1143.18 1212.07 L1142.6 1212.07 L1142.01 1212.07 L1141.42 1212.07 L1140.84 1212.07 L1140.25 1212.07 L1139.67 1212.07 L1139.08 1212.07 L1138.49 1212.07 L1137.91 1212.07 L1137.32 1212.07 L1136.73 1212.07 L1136.15 1212.07 L1135.56 1212.07 L1134.97 1212.07 L1134.39 1212.07 L1133.8 1212.07 L1133.21 1212.07 L1132.63 1212.07 L1132.04 1212.07 L1131.46 1212.07 L1130.87 1212.07 L1130.28 1212.07 L1129.7 1212.07 L1129.11 1212.07 L1128.52 1212.07 L1127.94 1212.07 L1127.35 1212.07 L1126.76 1212.07 L1126.18 1212.07 L1125.59 1212.07 L1125.01 1212.07 L1124.42 1212.07 L1123.83 1212.07 L1123.25 1212.07 L1122.66 1212.07 L1122.07 1212.07 L1121.49 1212.07 L1120.9 1212.07 L1120.31 1212.07 L1119.73 1212.07 L1119.14 1212.07 L1118.55 1212.07 L1117.97 1212.07 L1117.38 1212.07 L1116.8 1212.07 L1116.21 1212.07 L1115.62 1212.07 L1115.04 1212.07 L1114.45 1212.07 L1113.86 1212.07 L1113.28 1212.07 L1112.69 1212.07 L1112.1 1212.07 L1111.52 1212.07 L1110.93 1212.07 L1110.34 1212.07 L1109.76 1212.07 L1109.17 1212.07 L1108.59 1212.07 L1108 1212.07 L1107.41 1212.07 L1106.83 1212.07 L1106.24 1212.07 L1105.65 1212.07 L1105.07 1212.07 L1104.48 1212.07 L1103.89 1212.07 L1103.31 1212.07 L1102.72 1212.07 L1102.14 1212.07 L1101.55 1212.07 L1100.96 1212.07 L1100.38 1212.07 L1099.79 1212.07 L1099.2 1212.07 L1098.62 1212.07 L1098.03 1212.07 L1097.44 1212.07 L1096.86 1212.07 L1096.27 1212.07 L1095.68 1212.07 L1095.1 1212.07 L1094.51 1212.07 L1093.93 1212.07 L1093.34 1212.07 L1092.75 1212.07 L1092.17 1212.07 L1091.58 1212.07 L1090.99 1212.07 L1090.41 1212.07 L1089.82 1212.07 L1089.23 1212.07 L1088.65 1212.07 L1088.06 1212.07 L1087.47 1212.07 L1086.89 1212.07 L1086.3 1212.07 L1085.72 1212.07 L1085.13 1212.07 L1084.54 1212.07 L1083.96 1212.07 L1083.37 1212.07 L1082.78 1212.07 L1082.2 1212.07 L1081.61 1212.07 L1081.02 1212.07 L1080.44 1212.07 L1079.85 1212.07 L1079.26 1212.07 L1078.68 1212.07 L1078.09 1212.07 L1077.51 1212.07 L1076.92 1212.07 L1076.33 1212.07 L1075.75 1212.07 L1075.16 1212.07 L1074.57 1212.07 L1073.99 1212.07 L1073.4 1212.07 L1072.81 1212.07 L1072.23 1212.07 L1071.64 1212.07 L1071.06 1212.07 L1070.47 1212.07 L1069.88 1212.07 L1069.3 1212.07 L1068.71 1212.07 L1068.12 1212.07 L1067.54 1212.07 L1066.95 1212.07 L1066.36 1212.07 L1065.78 1212.07 L1065.19 1212.07 L1064.6 1212.07 L1064.02 1212.07 L1063.43 1212.07 L1062.85 1212.07 L1062.26 1212.07 L1061.67 1212.07 L1061.09 1212.07 L1060.5 1212.07 L1059.91 1212.07 L1059.33 1212.07 L1058.74 1212.07 L1058.15 1212.07 L1057.57 1212.07 L1056.98 1212.07 L1056.39 1212.07 L1055.81 1212.07 L1055.22 1212.07 L1054.64 1212.07 L1054.05 1212.07 L1053.46 1212.07 L1052.88 1212.07 L1052.29 1212.07 L1051.7 1212.07 L1051.12 1212.07 L1050.53 1212.07 L1049.94 1212.07 L1049.36 1212.07 L1048.77 1212.07 L1048.19 1212.07 L1047.6 1212.07 L1047.01 1212.07 L1046.43 1212.07 L1045.84 1212.07 L1045.25 1212.07 L1044.67 1212.07 L1044.08 1212.07 L1043.49 1212.07 L1042.91 1212.07 L1042.32 1212.07 L1041.73 1212.07 L1041.15 1212.07 L1040.56 1212.07 L1039.98 1212.07 L1039.39 1212.07 L1038.8 1212.07 L1038.22 1212.07 L1037.63 1212.07 L1037.04 1212.07 L1036.46 1212.07 L1035.87 1212.07 L1035.28 1212.07 L1034.7 1212.07 L1034.11 1212.07 L1033.52 1212.07 L1032.94 1212.07 L1032.35 1212.07 L1031.77 1212.07 L1031.18 1212.07 L1030.59 1212.07 L1030.01 1212.07 L1029.42 1212.07 L1028.83 1212.07 L1028.25 1212.07 L1027.66 1212.07 L1027.07 1212.07 L1026.49 1212.07 L1025.9 1212.07 L1025.32 1212.07 L1024.73 1212.07 L1024.14 1212.07 L1023.56 1212.07 L1022.97 1212.07 L1022.38 1212.07 L1021.8 1212.07 L1021.21 1212.07 L1020.62 1212.07 L1020.04 1212.07 L1019.45 1212.07 L1018.86 1212.07 L1018.28 1212.07 L1017.69 1212.07 L1017.11 1212.07 L1016.52 1212.07 L1015.93 1212.07 L1015.35 1212.07 L1014.76 1212.07 L1014.17 1212.07 L1013.59 1212.07 L1013 1212.07 L1012.41 1212.07 L1011.83 1212.07 L1011.24 1212.07 L1010.65 1212.07 L1010.07 1212.07 L1009.48 1212.07 L1008.9 1212.07 L1008.31 1212.07 L1007.72 1212.07 L1007.14 1212.07 L1006.55 1212.07 L1005.96 1212.07 L1005.38 1212.07 L1004.79 1212.07 L1004.2 1212.07 L1003.62 1212.07 L1003.03 1212.07 L1002.44 1212.07 L1001.86 1212.07 L1001.27 1212.07 L1000.69 1212.07 L1000.1 1212.07 L999.513 1212.07 L998.926 1212.07 L998.34 1212.07 L997.754 1212.07 L997.167 1212.07 L996.581 1212.07 L995.994 1212.07 L995.408 1212.07 L994.822 1212.07 L994.235 1212.07 L993.649 1212.07 L993.062 1212.07 L992.476 1212.07 L991.889 1212.07 L991.303 1212.07 L990.717 1212.07 L990.13 1212.07 L989.544 1212.07 L988.957 1212.07 L988.371 1212.07 L987.785 1212.07 L987.198 1212.07 L986.612 1212.07 L986.025 1212.07  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.49 986.612,1212.49 987.198,1212.49 987.785,1212.49 988.371,1212.49 988.957,1212.49 989.544,1212.49 990.13,1212.49 990.717,1212.49 991.303,1212.49 991.889,1212.49 992.476,1212.49 993.062,1212.49 993.649,1212.49 994.235,1212.49 994.822,1212.49 995.408,1212.49 995.994,1212.49 996.581,1212.49 997.167,1212.49 997.754,1212.49 998.34,1212.49 998.926,1212.49 999.513,1212.49 1000.1,1212.49 1000.69,1212.49 1001.27,1212.49 1001.86,1212.49 1002.44,1212.49 1003.03,1212.49 1003.62,1212.49 1004.2,1212.49 1004.79,1212.49 1005.38,1212.49 1005.96,1212.49 1006.55,1212.49 1007.14,1212.49 1007.72,1212.49 1008.31,1212.49 1008.9,1212.49 1009.48,1212.49 1010.07,1212.49 1010.65,1212.49 1011.24,1212.49 1011.83,1212.49 1012.41,1212.49 1013,1212.49 1013.59,1212.49 1014.17,1212.49 1014.76,1212.49 1015.35,1212.49 1015.93,1212.49 1016.52,1212.49 1017.11,1212.49 1017.69,1212.49 1018.28,1212.49 1018.86,1212.49 1019.45,1212.49 1020.04,1212.49 1020.62,1212.49 1021.21,1212.49 1021.8,1212.49 1022.38,1212.49 1022.97,1212.49 1023.56,1212.49 1024.14,1212.49 1024.73,1212.49 1025.32,1212.49 1025.9,1212.49 1026.49,1212.49 1027.07,1212.49 1027.66,1212.49 1028.25,1212.49 1028.83,1212.49 1029.42,1212.49 1030.01,1212.49 1030.59,1212.49 1031.18,1212.49 1031.77,1212.49 1032.35,1212.49 1032.94,1212.49 1033.52,1212.49 1034.11,1212.49 1034.7,1212.49 1035.28,1212.49 1035.87,1212.49 1036.46,1212.49 1037.04,1212.49 1037.63,1212.49 1038.22,1212.49 1038.8,1212.49 1039.39,1212.49 1039.98,1212.49 1040.56,1212.49 1041.15,1212.49 1041.73,1212.49 1042.32,1212.49 1042.91,1212.49 1043.49,1212.49 1044.08,1212.49 1044.67,1212.49 1045.25,1212.49 1045.84,1212.49 1046.43,1212.49 1047.01,1212.49 1047.6,1212.49 1048.19,1212.49 1048.77,1212.49 1049.36,1212.49 1049.94,1212.49 1050.53,1212.49 1051.12,1212.49 1051.7,1212.49 1052.29,1212.49 1052.88,1212.49 1053.46,1212.49 1054.05,1212.49 1054.64,1212.49 1055.22,1212.49 1055.81,1212.49 1056.39,1212.49 1056.98,1212.49 1057.57,1212.49 1058.15,1212.49 1058.74,1212.49 1059.33,1212.49 1059.91,1212.49 1060.5,1212.49 1061.09,1212.49 1061.67,1212.49 1062.26,1212.49 1062.85,1212.49 1063.43,1212.49 1064.02,1212.49 1064.6,1212.49 1065.19,1212.49 1065.78,1212.49 1066.36,1212.49 1066.95,1212.49 1067.54,1212.49 1068.12,1212.49 1068.71,1212.49 1069.3,1212.49 1069.88,1212.49 1070.47,1212.49 1071.06,1212.49 1071.64,1212.49 1072.23,1212.49 1072.81,1212.49 1073.4,1212.49 1073.99,1212.49 1074.57,1212.49 1075.16,1212.49 1075.75,1212.49 1076.33,1212.49 1076.92,1212.49 1077.51,1212.49 1078.09,1212.49 1078.68,1212.49 1079.26,1212.49 1079.85,1212.49 1080.44,1212.49 1081.02,1212.49 1081.61,1212.49 1082.2,1212.49 1082.78,1212.49 1083.37,1212.49 1083.96,1212.49 1084.54,1212.49 1085.13,1212.49 1085.72,1212.49 1086.3,1212.49 1086.89,1212.49 1087.47,1212.49 1088.06,1212.49 1088.65,1212.49 1089.23,1212.49 1089.82,1212.49 1090.41,1212.49 1090.99,1212.49 1091.58,1212.49 1092.17,1212.49 1092.75,1212.49 1093.34,1212.49 1093.93,1212.49 1094.51,1212.49 1095.1,1212.49 1095.68,1212.49 1096.27,1212.49 1096.86,1212.49 1097.44,1212.49 1098.03,1212.49 1098.62,1212.49 1099.2,1212.49 1099.79,1212.49 1100.38,1212.49 1100.96,1212.49 1101.55,1212.49 1102.14,1212.49 1102.72,1212.49 1103.31,1212.49 1103.89,1212.49 1104.48,1212.49 1105.07,1212.49 1105.65,1212.49 1106.24,1212.49 1106.83,1212.49 1107.41,1212.49 1108,1212.49 1108.59,1212.49 1109.17,1212.49 1109.76,1212.49 1110.34,1212.49 1110.93,1212.49 1111.52,1212.49 1112.1,1212.49 1112.69,1212.49 1113.28,1212.49 1113.86,1212.49 1114.45,1212.49 1115.04,1212.49 1115.62,1212.49 1116.21,1212.49 1116.8,1212.49 1117.38,1212.49 1117.97,1212.49 1118.55,1212.49 1119.14,1212.49 1119.73,1212.49 1120.31,1212.49 1120.9,1212.49 1121.49,1212.49 1122.07,1212.49 1122.66,1212.49 1123.25,1212.49 1123.83,1212.49 1124.42,1212.49 1125.01,1212.49 1125.59,1212.49 1126.18,1212.49 1126.76,1212.49 1127.35,1212.49 1127.94,1212.49 1128.52,1212.49 1129.11,1212.49 1129.7,1212.49 1130.28,1212.49 1130.87,1212.49 1131.46,1212.49 1132.04,1212.49 1132.63,1212.49 1133.21,1212.49 1133.8,1212.49 1134.39,1212.49 1134.97,1212.49 1135.56,1212.49 1136.15,1212.49 1136.73,1212.49 1137.32,1212.49 1137.91,1212.49 1138.49,1212.49 1139.08,1212.49 1139.67,1212.49 1140.25,1212.49 1140.84,1212.49 1141.42,1212.49 1142.01,1212.49 1142.6,1212.49 1143.18,1212.49 1143.77,1212.49 1144.36,1212.49 1144.94,1212.49 1145.53,1212.49 1146.12,1212.49 1146.7,1212.49 1147.29,1212.49 1147.88,1212.49 1148.46,1212.49 1149.05,1212.49 1149.63,1212.49 1150.22,1212.49 1150.81,1212.49 1151.39,1212.49 1151.98,1212.49 1152.57,1212.49 1153.15,1212.49 1153.74,1212.49 1154.33,1212.49 1154.91,1212.49 1155.5,1212.49 1156.09,1212.49 1156.67,1212.49 1157.26,1212.49 1157.84,1212.49 1158.43,1212.49 1159.02,1212.49 1159.6,1212.49 1160.19,1212.49 1160.78,1212.49 1161.36,1212.49 1161.95,1212.49 1162.54,1212.49 1163.12,1212.49 1163.71,1212.49 1164.29,1212.49 1164.88,1212.49 1165.47,1212.49 1166.05,1212.49 1166.64,1212.49 1167.23,1212.49 1167.81,1212.49 1168.4,1212.49 1168.99,1212.49 1169.57,1212.49 1170.16,1212.49 1170.75,1212.49 1171.33,1212.49 1171.92,1212.49 1172.5,1212.49 1173.09,1212.49 1173.68,1212.49 1174.26,1212.49 1174.85,1212.49 1175.44,1212.49 1176.02,1212.49 1176.61,1212.49 1177.2,1212.49 1177.78,1212.49 1178.37,1212.49 1178.96,1212.49 1179.54,1212.49 1180.13,1212.49 1180.71,1212.49 1181.3,1212.49 1181.89,1212.49 1182.47,1212.49 1183.06,1212.49 1183.65,1212.49 1184.23,1212.49 1184.82,1212.49 1185.41,1212.49 1185.99,1212.49 1186.58,1212.49 1187.16,1212.49 1187.75,1212.49 1188.34,1212.49 1188.92,1212.49 1189.51,1212.49 1190.1,1212.49 1190.68,1212.49 1191.27,1212.49 1191.86,1212.49 1192.44,1212.49 1193.03,1212.49 1193.62,1212.49 1194.2,1212.49 1194.79,1212.49 1195.37,1212.49 1195.96,1212.49 1196.55,1212.49 1197.13,1212.49 1197.72,1212.49 1198.31,1212.49 1198.89,1212.49 1199.48,1212.49 1200.07,1212.49 1200.65,1212.49 1201.24,1212.49 1201.83,1212.49 1202.41,1212.49 1203,1212.49 1203.58,1212.49 1204.17,1212.49 1204.76,1212.49 1205.34,1212.49 1205.93,1212.49 1206.52,1212.49 1207.1,1212.49 1207.69,1212.49 1208.28,1212.49 1208.86,1212.49 1209.45,1212.49 1210.03,1212.49 1210.62,1212.49 1211.21,1212.49 1211.79,1212.49 1212.38,1212.49 1212.97,1212.49 1213.55,1212.49 1214.14,1212.49 1214.73,1212.49 1215.31,1212.49 1215.9,1212.49 1216.49,1212.49 1217.07,1212.49 1217.66,1212.49 1218.24,1212.49 1218.83,1212.49 1219.42,1212.49 1220,1212.49 1220.59,1212.49 1221.18,1212.49 1221.76,1212.49 1222.35,1212.49 1222.94,1212.49 1223.52,1212.49 1224.11,1212.49 1224.7,1212.49 1225.28,1212.49 1225.87,1212.49 1226.45,1212.49 1227.04,1212.49 1227.63,1212.49 1228.21,1212.49 1228.8,1212.49 1229.39,1212.49 1229.97,1212.49 1230.56,1212.49 1231.15,1212.49 1231.73,1212.49 1232.32,1212.49 1232.91,1212.49 1233.49,1212.49 1234.08,1212.49 1234.66,1212.49 1235.25,1212.49 1235.84,1212.49 1236.42,1212.49 1237.01,1212.49 1237.6,1212.49 1238.18,1212.49 1238.77,1212.49 1239.36,1212.49 1239.94,1212.49 1240.53,1212.49 1241.11,1212.49 1241.7,1212.49 1242.29,1212.49 1242.87,1212.49 1243.46,1212.49 1244.05,1212.49 1244.63,1212.49 1245.22,1212.49 1245.81,1212.49 1246.39,1212.49 1246.98,1212.49 1247.57,1212.49 1248.15,1212.49 1248.74,1212.49 1249.32,1212.49 1249.91,1212.49 1250.5,1212.49 1251.08,1212.49 1251.67,1212.49 1252.26,1212.49 1252.84,1212.49 1253.43,1212.49 1254.02,1212.49 1254.6,1212.49 1255.19,1212.49 1255.78,1212.49 1256.36,1212.49 1256.95,1212.49 1257.53,1212.49 1258.12,1212.49 1258.71,1212.49 1259.29,1212.49 1259.88,1212.49 1260.47,1212.49 1261.05,1212.49 1261.64,1212.49 1262.23,1212.49 1262.81,1212.49 1263.4,1212.49 1263.98,1212.49 1264.57,1212.49 1265.16,1212.49 1265.74,1212.49 1266.33,1212.49 1266.92,1212.49 1267.5,1212.49 1268.09,1212.49 1268.68,1212.49 1269.26,1212.49 1269.85,1212.49 1270.44,1212.49 1271.02,1212.49 1271.61,1212.49 1272.19,1212.49 1272.78,1212.49 1273.37,1212.49 1273.95,1212.49 1274.54,1212.49 1275.13,1212.49 1275.71,1212.49 1276.3,1212.49 1276.89,1212.49 1277.47,1212.49 1278.06,1212.49 1278.65,1212.49 1279.23,1212.49 1279.82,1212.49 1280.4,1212.49 1280.99,1212.49 1281.58,1212.49 1282.16,1212.49 1282.75,1212.49 1283.34,1212.49 1283.92,1212.49 1284.51,1212.49 1285.1,1212.49 1285.68,1212.49 1286.27,1212.49 1286.86,1212.49 1287.44,1212.49 1288.03,1212.49 1288.61,1212.49 1289.2,1212.49 1289.79,1212.49 1290.37,1212.49 1290.96,1212.49 1291.55,1212.49 1292.13,1212.49 1292.72,1212.49 1293.31,1212.49 1293.89,1212.49 1294.48,1212.49 1295.06,1212.49 1295.65,1212.49 1296.24,1212.49 1296.82,1212.49 1297.41,1212.49 1298,1212.49 1298.58,1212.49 1299.17,1212.49 1299.76,1212.49 1300.34,1212.49 1300.93,1212.49 1301.52,1212.49 1302.1,1212.49 1302.69,1212.49 1303.27,1212.49 1303.86,1212.49 1304.45,1212.49 1305.03,1212.49 1305.62,1212.49 1306.21,1212.49 1306.79,1212.49 1307.38,1212.49 1307.97,1212.49 1308.55,1212.49 1309.14,1212.49 1309.73,1212.49 1310.31,1212.49 1310.9,1212.49 1311.48,1212.49 1312.07,1212.49 1312.66,1212.49 1313.24,1212.49 1313.83,1212.49 1314.42,1212.49 1315,1212.49 1315.59,1212.49 1316.18,1212.49 1316.76,1212.49 1317.35,1212.49 1317.93,1212.49 1318.52,1212.49 1319.11,1212.49 1319.69,1212.49 1320.28,1212.49 1320.87,1212.49 1321.45,1212.49 1322.04,1212.49 1322.63,1212.49 1323.21,1212.49 1323.8,1212.49 1324.39,1212.49 1324.97,1212.49 1325.56,1212.49 1326.14,1212.49 1326.73,1212.49 1327.32,1212.49 1327.9,1212.49 1328.49,1212.49 1329.08,1212.49 1329.66,1212.49 1330.25,1212.49 1330.84,1212.49 1331.42,1212.49 1332.01,1212.49 1332.6,1212.49 1333.18,1212.49 1333.77,1212.49 1334.35,1212.49 1334.94,1212.49 1335.53,1212.49 1336.11,1212.49 1336.7,1212.49 1337.29,1212.49 1337.87,1212.49 1338.46,1212.49 1339.05,1212.49 1339.63,1212.49 1340.22,1212.49 1340.8,1212.49 1341.39,1212.49 1341.98,1212.49 1342.56,1212.49 1343.15,1212.49 1343.74,1212.49 1344.32,1212.49 1344.91,1212.49 1345.5,1212.49 1346.08,1212.49 1346.67,1212.49 1347.26,1212.49 1347.84,1212.49 1348.43,1212.49 1349.01,1212.49 1349.6,1212.49 1350.19,1212.49 1350.77,1212.49 1351.36,1212.49 1351.95,1212.49 1352.53,1212.49 1353.12,1212.49 1353.71,1212.49 1354.29,1212.49 1354.88,1212.49 1355.47,1212.49 1356.05,1212.49 1356.64,1212.49 1357.22,1212.49 1357.81,1212.49 1358.4,1212.49 1358.98,1212.49 1359.57,1212.49 1360.16,1212.49 1360.74,1212.49 1361.33,1212.49 1361.92,1212.49 1362.5,1212.49 1363.09,1212.49 1363.68,1212.49 1364.26,1212.49 1364.85,1212.49 1365.43,1212.49 1366.02,1212.49 1366.61,1212.49 1367.19,1212.49 1367.78,1212.49 1368.37,1212.49 1368.95,1212.49 1369.54,1212.49 1370.13,1212.49 1370.71,1212.49 1371.3,1212.49 1371.88,1212.49 1372.47,1212.49 1373.06,1212.49 1373.64,1212.49 1374.23,1212.49 1374.82,1212.49 1375.4,1212.49 1375.99,1212.49 1376.58,1212.49 1377.16,1212.49 1377.75,1212.49 1378.34,1212.49 1378.92,1212.49 1379.51,1212.49 1380.09,1212.49 1380.68,1212.49 1381.27,1212.49 1381.85,1212.49 1382.44,1212.49 1383.03,1212.49 1383.61,1212.49 1384.2,1212.49 1384.79,1212.49 1385.37,1212.49 1385.96,1212.49 1386.55,1212.49 1387.13,1212.49 1387.72,1212.49 1388.3,1212.49 1388.89,1212.49 1389.48,1212.49 1390.06,1212.49 1390.65,1212.49 1391.24,1212.49 1391.82,1212.49 1392.41,1212.49 1393,1212.49 1393.58,1212.49 1394.17,1212.49 1394.75,1212.49 1395.34,1212.49 1395.93,1212.49 1396.51,1212.49 1397.1,1212.49 1397.69,1212.49 1398.27,1212.49 1398.86,1212.49 1399.45,1212.49 1400.03,1212.49 1400.62,1212.49 1401.21,1212.49 1401.79,1212.49 1402.38,1212.49 1402.96,1212.49 1403.55,1212.49 1404.14,1212.49 1404.72,1212.49 1405.31,1212.49 1405.9,1212.49 1406.48,1212.49 1407.07,1212.49 1407.66,1212.49 1408.24,1212.49 1408.83,1212.49 1409.42,1212.49 1410,1212.49 1410.59,1212.49 1411.17,1212.49 1411.76,1212.49 1412.35,1212.49 1412.93,1212.49 1413.52,1212.49 1414.11,1212.49 1414.69,1212.49 1415.28,1212.49 1415.87,1212.49 1416.45,1212.49 1417.04,1212.49 1417.63,1212.49 1418.21,1212.49 1418.8,1212.49 1419.38,1212.49 1419.97,1212.49 1420.56,1212.49 1421.14,1212.49 1421.73,1212.49 1422.32,1212.49 1422.9,1212.49 1423.49,1212.49 1424.08,1212.49 1424.66,1212.49 1425.25,1212.49 1425.83,1212.49 1426.42,1212.49 1427.01,1212.49 1427.59,1212.49 1428.18,1212.49 1428.77,1212.49 1429.35,1212.49 1429.94,1212.49 1430.53,1212.49 1431.11,1212.49 1431.7,1212.49 1432.29,1212.49 1432.87,1212.49 1433.46,1212.49 1434.04,1212.49 1434.63,1212.49 1435.22,1212.49 1435.8,1212.49 1436.39,1212.49 1436.98,1212.49 1437.56,1212.49 1438.15,1212.49 1438.74,1212.49 1439.32,1212.49 1439.91,1212.49 1440.5,1212.49 1441.08,1212.49 1441.67,1212.49 1442.25,1212.49 1442.84,1212.49 1443.43,1212.49 1444.01,1212.49 1444.6,1212.49 1445.19,1212.49 1445.77,1212.49 1446.36,1212.49 1446.95,1212.49 1447.53,1212.49 1448.12,1212.49 1448.7,1212.49 1449.29,1212.49 1449.88,1212.49 1450.46,1212.49 1451.05,1212.49 1451.64,1212.49 1452.22,1212.49 1452.81,1212.49 1453.4,1212.49 1453.98,1212.49 1454.57,1212.49 1455.16,1212.49 1455.74,1212.49 1456.33,1212.49 1456.91,1212.49 1457.5,1212.49 1458.09,1212.49 1458.67,1212.49 1459.26,1212.49 1459.85,1212.49 1460.43,1212.49 1461.02,1212.49 1461.61,1212.49 1462.19,1212.49 1462.78,1212.49 1463.37,1212.49 1463.95,1212.49 1464.54,1212.49 1465.12,1212.49 1465.71,1212.49 1466.3,1212.49 1466.88,1212.49 1467.47,1212.49 1468.06,1212.49 1468.64,1212.49 1469.23,1212.49 1469.82,1212.49 1470.4,1212.49 1470.99,1212.49 1471.57,1212.49 1472.16,1212.49 1472.75,1212.49 1473.33,1212.49 1473.92,1212.49 1474.51,1212.49 1475.09,1212.49 1475.68,1212.49 1476.27,1212.49 1476.85,1212.49 1477.44,1212.49 1478.03,1212.49 1478.61,1212.49 1479.2,1212.49 1479.78,1212.49 1480.37,1212.49 1480.96,1212.49 1481.54,1212.49 1482.13,1212.49 1482.72,1212.49 1483.3,1212.49 1483.89,1212.49 1484.48,1212.49 1485.06,1212.49 1485.65,1212.49 1486.24,1212.49 1486.82,1212.49 1487.41,1212.49 1487.99,1212.49 1488.58,1212.49 1489.17,1212.49 1489.75,1212.49 1490.34,1212.49 1490.93,1212.49 1491.51,1212.49 1492.1,1212.49 1492.69,1212.49 1493.27,1212.49 1493.86,1212.49 1494.45,1212.49 1495.03,1212.49 1495.62,1212.49 1496.2,1212.49 1496.79,1212.49 1497.38,1212.49 1497.96,1212.49 1498.55,1212.49 1499.14,1212.49 1499.72,1212.49 1500.31,1212.49 1500.9,1212.49 1501.48,1212.49 1502.07,1212.49 1502.65,1212.49 1503.24,1212.49 1503.83,1212.49 1504.41,1212.49 1505,1212.49 1505.59,1212.49 1506.17,1212.49 1506.76,1212.49 1507.35,1212.49 1507.93,1212.49 1508.52,1212.49 1509.11,1212.49 1509.69,1212.49 1510.28,1212.49 1510.86,1212.49 1511.45,1212.49 1512.04,1212.49 1512.62,1212.49 1513.21,1212.49 1513.8,1212.49 1514.38,1212.49 1514.97,1212.49 1515.56,1212.49 1516.14,1212.49 1516.73,1212.49 1517.32,1212.49 1517.9,1212.49 1518.49,1212.49 1519.07,1212.49 1519.66,1212.49 1520.25,1212.49 1520.83,1212.49 1521.42,1212.49 1522.01,1212.49 1522.59,1212.49 1523.18,1212.49 1523.77,1212.49 1524.35,1212.49 1524.94,1212.49 1525.52,1212.49 1526.11,1212.49 1526.7,1212.49 1527.28,1212.49 1527.87,1212.49 1528.46,1212.49 1529.04,1212.49 1529.63,1212.49 1530.22,1212.49 1530.8,1212.49 1531.39,1212.49 1531.98,1212.49 1532.56,1212.49 1533.15,1212.49 1533.73,1212.49 1534.32,1212.49 1534.91,1212.49 1535.49,1212.49 1536.08,1212.49 1536.67,1212.49 1537.25,1212.49 1537.84,1212.49 1538.43,1212.49 1539.01,1212.49 1539.6,1212.49 1540.19,1212.49 1540.77,1212.49 1541.36,1212.49 1541.94,1212.49 1542.53,1212.49 1543.12,1212.49 1543.7,1212.49 1544.29,1212.49 1544.88,1212.49 1545.46,1212.49 1546.05,1212.49 1546.64,1212.49 1547.22,1212.49 1547.81,1212.49 1548.4,1212.49 1548.98,1212.49 1549.57,1212.49 1550.15,1212.49 1550.74,1212.49 1551.33,1212.49 1551.91,1212.49 1552.5,1212.49 1553.09,1212.49 1553.67,1212.49 1554.26,1212.49 1554.85,1212.49 1555.43,1212.49 1556.02,1212.49 1556.6,1212.49 1557.19,1212.49 1557.78,1212.49 1558.36,1212.49 1558.95,1212.49 1559.54,1212.49 1560.12,1212.49 1560.71,1212.49 1561.3,1212.49 1561.88,1212.49 1562.47,1212.49 1563.06,1212.49 1563.64,1212.49 1564.23,1212.49 1564.81,1212.49 1565.4,1212.49 1565.99,1212.49 1566.57,1212.49 1567.16,1212.49 1567.75,1212.49 1568.33,1212.49 1568.92,1212.49 1569.51,1212.49 1570.09,1212.49 1570.68,1212.49 1571.27,1212.49 1571.85,1212.49 1572.44,1212.49 1573.02,1212.49 1573.61,1212.49 1574.2,1212.49 1574.78,1212.49 1575.37,1212.49 1575.96,1212.49 1576.54,1212.49 1577.13,1212.49 1577.72,1212.49 1578.3,1212.49 1578.89,1212.49 1579.47,1212.49 1580.06,1212.49 1580.65,1212.49 1581.23,1212.49 1581.82,1212.49 1582.41,1212.49 1582.99,1212.49 1583.58,1212.49 1584.17,1212.49 1584.75,1212.49 1585.34,1212.49 1585.93,1212.49 1586.51,1212.49 1587.1,1212.49 1587.68,1212.49 1588.27,1212.49 1588.86,1212.49 1589.44,1212.49 1590.03,1212.49 1590.62,1212.49 1591.2,1212.49 1591.79,1212.49 1592.38,1212.49 1592.96,1212.49 1593.55,1212.49 1594.14,1212.49 1594.72,1212.49 1595.31,1212.49 1595.89,1212.49 1596.48,1212.49 1597.07,1212.49 1597.65,1212.49 1598.24,1212.49 1598.83,1212.49 1599.41,1212.49 1600,1212.49 1600.59,1212.49 1601.17,1212.49 1601.76,1212.49 1602.34,1212.49 1602.93,1212.49 1603.52,1212.49 1604.1,1212.49 1604.69,1212.49 1605.28,1212.49 1605.86,1212.49 1606.45,1212.49 1607.04,1212.49 1607.62,1212.49 1608.21,1212.49 1608.8,1212.49 1609.38,1212.49 1609.97,1212.49 1610.55,1212.49 1611.14,1212.49 1611.73,1212.49 1612.31,1212.49 1612.9,1212.49 1613.49,1212.49 1614.07,1212.49 1614.66,1212.49 1615.25,1212.49 1615.83,1212.49 1616.42,1212.49 1617.01,1212.49 1617.59,1212.49 1618.18,1212.49 1618.76,1212.49 1619.35,1212.49 1619.94,1212.49 1620.52,1212.49 1621.11,1212.49 1621.7,1212.49 1622.28,1212.49 1622.87,1212.49 1623.46,1212.49 1624.04,1212.49 1624.63,1212.49 1625.22,1212.49 1625.8,1212.49 1626.39,1212.49 1626.97,1212.49 1627.56,1212.49 1628.15,1212.49 1628.73,1212.49 1629.32,1212.49 1629.91,1212.49 1630.49,1212.49 1631.08,1212.49 1631.67,1212.49 1632.25,1212.49 1632.84,1212.49 1633.42,1212.49 1634.01,1212.49 1634.6,1212.49 1635.18,1212.49 1635.77,1212.49 1636.36,1212.49 1636.94,1212.49 1637.53,1212.49 1638.12,1212.49 1638.7,1212.49 1639.29,1212.49 1639.88,1212.49 1640.46,1212.49 1641.05,1212.49 1641.63,1212.49 1642.22,1212.49 1642.81,1212.49 1643.39,1212.49 1643.98,1212.49 1644.57,1212.49 1645.15,1212.49 1645.74,1212.49 1646.33,1212.49 1646.91,1212.49 1647.5,1212.49 1648.09,1212.49 1648.67,1212.49 1649.26,1212.49 1649.84,1212.49 1650.43,1212.49 1651.02,1212.49 1651.6,1212.49 1652.19,1212.49 1652.78,1212.49 1653.36,1212.49 1653.95,1212.49 1654.54,1212.49 1655.12,1212.49 1655.71,1212.49 1656.29,1212.49 1656.88,1212.49 1657.47,1212.49 1658.05,1212.49 1658.64,1212.49 1659.23,1212.49 1659.81,1212.49 1660.4,1212.49 1660.99,1212.49 1661.57,1212.49 1662.16,1212.49 1662.75,1212.49 1663.33,1212.49 1663.92,1212.49 1664.5,1212.49 1665.09,1212.49 1665.68,1212.49 1666.26,1212.49 1666.85,1212.49 1667.44,1212.49 1668.02,1212.49 1668.61,1212.49 1669.2,1212.49 1669.78,1212.49 1670.37,1212.49 1670.96,1212.49 1671.54,1212.49 1672.13,1212.49 1672.71,1212.49 1673.3,1212.49 1673.89,1212.49 1674.47,1212.49 1675.06,1212.49 1675.65,1212.49 1676.23,1212.49 1676.82,1212.49 1677.41,1212.49 1677.99,1212.49 1678.58,1212.49 1679.17,1212.49 1679.75,1212.49 1680.34,1212.49 1680.92,1212.49 1681.51,1212.49 1682.1,1212.49 1682.68,1212.49 1683.27,1212.49 1683.86,1212.49 1684.44,1212.49 1685.03,1212.49 1685.62,1212.49 1686.2,1212.49 1686.79,1212.49 1687.37,1212.49 1687.96,1212.49 1688.55,1212.49 1689.13,1212.49 1689.72,1212.49 1690.31,1212.49 1690.89,1212.49 1691.48,1212.49 1692.07,1212.49 1692.65,1212.49 1693.24,1212.49 1693.83,1212.49 1694.41,1212.49 1695,1212.49 1695.58,1212.49 1696.17,1212.49 1696.76,1212.49 1697.34,1212.49 1697.93,1212.49 1698.52,1212.49 1699.1,1212.49 1699.69,1212.49 1700.28,1212.49 1700.86,1212.49 1701.45,1212.49 1702.04,1212.49 1702.62,1212.49 1703.21,1212.49 1703.79,1212.49 1704.38,1212.49 1704.97,1212.49 1705.55,1212.49 1706.14,1212.49 1706.73,1212.49 1707.31,1212.49 1707.9,1212.49 1708.49,1212.49 1709.07,1212.49 1709.66,1212.49 1710.24,1212.49 1710.83,1212.49 1711.42,1212.49 1712,1212.49 1712.59,1212.49 1713.18,1212.49 1713.76,1212.49 1714.35,1212.49 1714.94,1212.49 1715.52,1212.49 1716.11,1212.49 1716.7,1212.49 1717.28,1212.49 1717.87,1212.49 1718.45,1212.49 1719.04,1212.49 1719.63,1212.49 1720.21,1212.49 1720.8,1212.49 1721.39,1212.49 1721.97,1212.49 1722.56,1212.49 1723.15,1212.49 1723.73,1212.49 1724.32,1212.49 1724.91,1212.49 1725.49,1212.49 1726.08,1212.49 1726.66,1212.49 1727.25,1212.49 1727.84,1212.49 1728.42,1212.49 1729.01,1212.49 1729.6,1212.49 1730.18,1212.49 1730.77,1212.49 1731.36,1212.49 1731.94,1212.49 1732.53,1212.49 1733.11,1212.49 1733.7,1212.49 1734.29,1212.49 1734.87,1212.49 1735.46,1212.49 1736.05,1212.49 1736.63,1212.49 1737.22,1212.49 1737.81,1212.49 1738.39,1212.49 1738.98,1212.49 1739.57,1212.49 1740.15,1212.49 1740.74,1212.49 1741.32,1212.49 1741.91,1212.49 1742.5,1212.49 1743.08,1212.49 1743.67,1212.49 1744.26,1212.49 1744.84,1212.49 1745.43,1212.49 1746.02,1212.49 1746.6,1212.49 1747.19,1212.49 1747.78,1212.49 1748.36,1212.49 1748.95,1212.49 1749.53,1212.49 1750.12,1212.49 1750.71,1212.49 1751.29,1212.49 1751.88,1212.49 1752.47,1212.49 1753.05,1212.49 1753.64,1212.49 1754.23,1212.49 1754.81,1212.49 1755.4,1212.49 1755.99,1212.49 1756.57,1212.49 1757.16,1212.49 1757.74,1212.49 1758.33,1212.49 1758.92,1212.49 1759.5,1212.49 1760.09,1212.49 1760.68,1212.49 1761.26,1212.49 1761.85,1212.49 1762.44,1212.49 1763.02,1212.49 1763.61,1212.49 1764.19,1212.49 1764.78,1212.49 1765.37,1212.49 1765.95,1212.49 1766.54,1212.49 1767.13,1212.49 1767.71,1212.49 1768.3,1212.49 1768.89,1212.49 1769.47,1212.49 1770.06,1212.49 1770.65,1212.49 1771.23,1212.49 1771.82,1212.49 1772.4,1212.49 1772.99,1212.49 1773.58,1212.49 1774.16,1212.49 1774.75,1212.49 1775.34,1212.49 1775.92,1212.49 1776.51,1212.49 1777.1,1212.49 1777.68,1212.49 1778.27,1212.49 1778.86,1212.49 1779.44,1212.49 1780.03,1212.49 1780.61,1212.49 1781.2,1212.49 1781.79,1212.49 1782.37,1212.49 1782.96,1212.49 1783.55,1212.49 1784.13,1212.49 1784.72,1212.49 1785.31,1212.49 1785.89,1212.49 1786.48,1212.49 1787.06,1212.49 1787.65,1212.49 1788.24,1212.49 1788.82,1212.49 1789.41,1212.49 1790,1212.49 1790.58,1212.49 1791.17,1212.49 1791.76,1212.49 1792.34,1212.49 1792.93,1212.49 1793.52,1212.49 1794.1,1212.49 1794.69,1212.49 1795.27,1212.49 1795.86,1212.49 1796.45,1212.49 1797.03,1212.49 1797.62,1212.49 1798.21,1212.49 1798.79,1212.49 1799.38,1212.49 1799.97,1212.49 1800.55,1212.49 1801.14,1212.49 1801.73,1212.49 1802.31,1212.49 1802.9,1212.49 1803.48,1212.49 1804.07,1212.49 1804.66,1212.49 1805.24,1212.49 1805.83,1212.49 1806.42,1212.49 1807,1212.49 1807.59,1212.49 1808.18,1212.49 1808.76,1212.49 1809.35,1212.49 1809.94,1212.49 1810.52,1212.49 1811.11,1212.49 1811.69,1212.49 1812.28,1212.49 1812.87,1212.49 1813.45,1212.49 1814.04,1212.49 1814.63,1212.49 1815.21,1212.49 1815.8,1212.49 1816.39,1212.49 1816.97,1212.49 1817.56,1212.49 1818.14,1212.49 1818.73,1212.49 1819.32,1212.49 1819.9,1212.49 1820.49,1212.49 1821.08,1212.49 1821.66,1212.49 1822.25,1212.49 1822.84,1212.49 1823.42,1212.49 1824.01,1212.49 1824.6,1212.49 1825.18,1212.49 1825.77,1212.49 1826.35,1212.49 1826.94,1212.49 1827.53,1212.49 1828.11,1212.49 1828.7,1212.49 1829.29,1212.49 1829.87,1212.49 1830.46,1212.49 1831.05,1212.49 1831.63,1212.49 1832.22,1212.49 1832.81,1212.49 1833.39,1212.49 1833.98,1212.49 1834.56,1212.49 1835.15,1212.49 1835.74,1212.49 1836.32,1212.49 1836.91,1212.49 1837.5,1212.49 1838.08,1212.49 1838.67,1212.49 1839.26,1212.49 1839.84,1212.49 1840.43,1212.49 1841.01,1212.49 1841.6,1212.49 1842.19,1212.49 1842.77,1212.49 1843.36,1212.49 1843.95,1212.49 1844.53,1212.49 1845.12,1212.49 1845.71,1212.49 1846.29,1212.49 1846.88,1212.49 1847.47,1212.49 1848.05,1212.49 1848.64,1212.49 1849.22,1212.49 1849.81,1212.49 1850.4,1212.49 1850.98,1212.49 1851.57,1212.49 1852.16,1212.49 1852.74,1212.49 1853.33,1212.49 1853.92,1212.49 1854.5,1212.49 1855.09,1212.49 1855.68,1212.49 1856.26,1212.49 1856.85,1212.49 1857.43,1212.49 1858.02,1212.49 1858.61,1212.49 1859.19,1212.49 1859.78,1212.49 1860.37,1212.49 1860.95,1212.49 1861.54,1212.49 1862.13,1212.49 1862.71,1212.49 1863.3,1212.49 1863.88,1212.49 1864.47,1212.49 1865.06,1212.49 1865.64,1212.49 1866.23,1212.49 1866.82,1212.49 1867.4,1212.49 1867.99,1212.49 1868.58,1212.49 1869.16,1212.49 1869.75,1212.49 1870.34,1212.49 1870.92,1212.49 1871.51,1212.49 1872.09,1212.49 1872.68,1212.49 1873.27,1212.49 1873.85,1212.49 1874.44,1212.49 1875.03,1212.49 1875.61,1212.49 1876.2,1212.49 1876.79,1212.49 1877.37,1212.49 1877.96,1212.49 1878.55,1212.49 1879.13,1212.49 1879.72,1212.49 1880.3,1212.49 1880.89,1212.49 1881.48,1212.49 1882.06,1212.49 1882.65,1212.49 1883.24,1212.49 1883.82,1212.49 1884.41,1212.49 1885,1212.49 1885.58,1212.49 1886.17,1212.49 1886.76,1212.49 1887.34,1212.49 1887.93,1212.49 1888.51,1212.49 1889.1,1212.49 1889.69,1212.49 1890.27,1212.49 1890.86,1212.49 1891.45,1212.49 1892.03,1212.49 1892.62,1212.49 1893.21,1212.49 1893.79,1212.49 1894.38,1212.49 1894.96,1212.49 1895.55,1212.49 1896.14,1212.49 1896.72,1212.49 1897.31,1212.49 1897.9,1212.49 1898.48,1212.49 1899.07,1212.49 1899.66,1212.49 1900.24,1212.49 1900.83,1212.49 1901.42,1212.49 1902,1212.49 1902.59,1212.49 1903.17,1212.49 1903.76,1212.49 1904.35,1212.49 1904.93,1212.49 1905.52,1212.49 1906.11,1212.49 1906.69,1212.49 1907.28,1212.49 1907.87,1212.49 1908.45,1212.49 1909.04,1212.49 1909.63,1212.49 1910.21,1212.49 1910.8,1212.49 1911.38,1212.49 1911.97,1212.49 1912.56,1212.49 1913.14,1212.49 1913.73,1212.49 1914.32,1212.49 1914.9,1212.49 1915.49,1212.49 1916.08,1212.49 1916.66,1212.49 1917.25,1212.49 1917.83,1212.49 1918.42,1212.49 1919.01,1212.49 1919.59,1212.49 1920.18,1212.49 1920.77,1212.49 1921.35,1212.49 1921.94,1212.49 1922.53,1212.49 1923.11,1212.49 1923.7,1212.49 1924.29,1212.49 1924.87,1212.49 1925.46,1212.49 1926.04,1212.49 1926.63,1212.49 1927.22,1212.49 1927.8,1212.49 1928.39,1212.49 1928.98,1212.49 1929.56,1212.49 1930.15,1212.49 1930.74,1212.49 1931.32,1212.49 1931.91,1212.49 1932.5,1212.49 1933.08,1212.49 1933.67,1212.49 1934.25,1212.49 1934.84,1212.49 1935.43,1212.49 1936.01,1212.49 1936.6,1212.49 1937.19,1212.49 1937.77,1212.49 1938.36,1212.49 1938.95,1212.49 1939.53,1212.49 1940.12,1212.49 1940.71,1212.49 1941.29,1212.49 1941.88,1212.49 1942.46,1212.49 1943.05,1212.49 1943.64,1212.49 1944.22,1212.49 1944.81,1212.49 1945.4,1212.49 1945.98,1212.49 1946.57,1212.49 1947.16,1212.49 1947.74,1212.49 1948.33,1212.49 1948.91,1212.49 1949.5,1212.49 1950.09,1212.49 1950.67,1212.49 1951.26,1212.49 1951.85,1212.49 1952.43,1212.49 1953.02,1212.49 1953.61,1212.49 1954.19,1212.49 1954.78,1212.49 1955.37,1212.49 1955.95,1212.49 1956.54,1212.49 1957.12,1212.49 1957.71,1212.49 1958.3,1212.49 1958.88,1212.49 1959.47,1212.49 1960.06,1212.49 1960.64,1212.49 1961.23,1212.49 1961.82,1212.49 1962.4,1212.49 1962.99,1212.49 1963.58,1212.49 1964.16,1212.49 1964.75,1212.49 1965.33,1212.49 1965.92,1212.49 1966.51,1212.49 1967.09,1212.49 1967.68,1212.49 1968.27,1212.49 1968.85,1212.49 1969.44,1212.49 1970.03,1212.49 1970.61,1212.49 1971.2,1212.49 1971.78,1212.49 1972.37,1212.49 1972.96,1212.49 1973.54,1212.49 1974.13,1212.49 1974.72,1212.49 1975.3,1212.49 1975.89,1212.49 1976.48,1212.49 1977.06,1212.49 1977.65,1212.49 1978.24,1212.49 1978.82,1212.49 1979.41,1212.49 1979.99,1212.49 1980.58,1212.49 1981.17,1212.49 1981.75,1212.49 1982.34,1212.49 1982.93,1212.49 1983.51,1212.49 1984.1,1212.49 1984.69,1212.49 1985.27,1212.49 1985.86,1212.49 1986.45,1212.49 1987.03,1212.49 1987.62,1212.49 1988.2,1212.49 1988.79,1212.49 1989.38,1212.49 1989.96,1212.49 1990.55,1212.49 1991.14,1212.49 1991.72,1212.49 1992.31,1212.49 1992.9,1212.49 1993.48,1212.49 1994.07,1212.49 1994.65,1212.49 1995.24,1212.49 1995.83,1212.49 1996.41,1212.49 1997,1212.49 1997.59,1212.49 1998.17,1212.49 1998.76,1212.49 1999.35,1212.49 1999.93,1212.49 2000.52,1212.49 2001.11,1212.49 2001.69,1212.49 2002.28,1212.49 2002.86,1212.49 2003.45,1212.49 2004.04,1212.49 2004.62,1212.49 2005.21,1212.49 2005.8,1212.49 2006.38,1212.49 2006.97,1212.49 2007.56,1212.49 2008.14,1212.49 2008.73,1212.49 2009.32,1212.49 2009.9,1212.49 2010.49,1212.49 2011.07,1212.49 2011.66,1212.49 2012.25,1212.49 2012.83,1212.49 2013.42,1212.49 2014.01,1212.49 2014.59,1212.49 2015.18,1212.49 2015.77,1212.49 2016.35,1212.49 2016.94,1212.49 2017.53,1212.49 2018.11,1212.49 2018.7,1212.49 2019.28,1212.49 2019.87,1212.49 2020.46,1212.49 2021.04,1212.49 2021.63,1212.49 2022.22,1212.49 2022.8,1212.49 2023.39,1212.49 2023.98,1212.49 2024.56,1212.49 2025.15,1212.49 2025.73,1212.49 2026.32,1212.49 2026.91,1212.49 2027.49,1212.49 2028.08,1212.49 2028.67,1212.49 2029.25,1212.49 2029.84,1212.49 2030.43,1212.49 2031.01,1212.49 2031.6,1212.49 2032.19,1212.49 2032.77,1212.49 2033.36,1212.49 2033.94,1212.49 2034.53,1212.49 2035.12,1212.49 2035.7,1212.49 2036.29,1212.49 2036.88,1212.49 2037.46,1212.49 2038.05,1212.49 2038.64,1212.49 2039.22,1212.49 2039.81,1212.49 2040.4,1212.49 2040.98,1212.49 2041.57,1212.49 2042.15,1212.49 2042.74,1212.49 2043.33,1212.49 2043.91,1212.49 2044.5,1212.49 2045.09,1212.49 2045.67,1212.49 2046.26,1212.49 2046.85,1212.49 2047.43,1212.49 2048.02,1212.49 2048.6,1212.49 2049.19,1212.49 2049.78,1212.49 2050.36,1212.49 2050.95,1212.49 2051.54,1212.49 2052.12,1212.49 2052.71,1212.49 2053.3,1212.49 2053.88,1212.49 2054.47,1212.49 2055.06,1212.49 2055.64,1212.49 2056.23,1212.49 2056.81,1212.49 2057.4,1212.49 2057.99,1212.49 2058.57,1212.49 2059.16,1212.49 2059.75,1212.49 2060.33,1212.49 2060.92,1212.49 2061.51,1212.49 2062.09,1212.49 2062.68,1212.49 2063.27,1212.49 2063.85,1212.49 2064.44,1212.49 2065.02,1212.49 2065.61,1212.49 2066.2,1212.49 2066.78,1212.49 2067.37,1212.49 2067.96,1212.49 2068.54,1212.49 2069.13,1212.49 2069.72,1212.49 2070.3,1212.49 2070.89,1212.49 2071.48,1212.49 2072.06,1212.49 2072.65,1212.49 2073.23,1212.49 2073.82,1212.49 2074.41,1212.49 2074.99,1212.49 2075.58,1212.49 2076.17,1212.49 2076.75,1212.49 2077.34,1212.49 2077.93,1212.49 2078.51,1212.49 2079.1,1212.49 2079.68,1212.49 2080.27,1212.49 2080.86,1212.49 2081.44,1212.49 2082.03,1212.49 2082.62,1212.49 2083.2,1212.49 2083.79,1212.49 2084.38,1212.49 2084.96,1212.49 2085.55,1212.49 2086.14,1212.49 2086.72,1212.49 2087.31,1212.49 2087.89,1212.49 2088.48,1212.49 2089.07,1212.49 2089.65,1212.49 2090.24,1212.49 2090.83,1212.49 2091.41,1212.49 2092,1212.49 2092.59,1212.49 2093.17,1212.49 2093.76,1212.49 2094.35,1212.49 2094.93,1212.49 2095.52,1212.49 2096.1,1212.49 2096.69,1212.49 2097.28,1212.49 2097.86,1212.49 2098.45,1212.49 2099.04,1212.49 2099.62,1212.49 2100.21,1212.49 2100.8,1212.49 2101.38,1212.49 2101.97,1212.49 2102.55,1212.49 2103.14,1212.49 2103.73,1212.49 2104.31,1212.49 2104.9,1212.49 2105.49,1212.49 2106.07,1212.49 2106.66,1212.49 2107.25,1212.49 2107.83,1212.49 2108.42,1212.49 2109.01,1212.49 2109.59,1212.49 2110.18,1212.49 2110.76,1212.49 2111.35,1212.49 2111.94,1212.49 2112.52,1212.49 2113.11,1212.49 2113.7,1212.49 2114.28,1212.49 2114.87,1212.49 2115.46,1212.49 2116.04,1212.49 2116.63,1212.49 2117.22,1212.49 2117.8,1212.49 2118.39,1212.49 2118.97,1212.49 2119.56,1212.49 2120.15,1212.49 2120.73,1212.49 2121.32,1212.49 2121.91,1212.49 2122.49,1212.49 2123.08,1212.49 2123.67,1212.49 2124.25,1212.49 2124.84,1212.49 2125.42,1212.49 2126.01,1212.49 2126.6,1212.49 2127.18,1212.49 2127.77,1212.49 2128.36,1212.49 2128.94,1212.49 2129.53,1212.49 2130.12,1212.49 2130.7,1212.49 2131.29,1212.49 2131.88,1212.49 2132.46,1212.49 2133.05,1212.49 2133.63,1212.49 2134.22,1212.49 2134.81,1212.49 2135.39,1212.49 2135.98,1212.49 2136.57,1212.49 2137.15,1212.49 2137.74,1212.49 2138.33,1212.49 2138.91,1212.49 2139.5,1212.49 2140.09,1212.49 2140.67,1212.49 2141.26,1212.49 2141.84,1212.49 2142.43,1212.49 2143.02,1212.49 2143.6,1212.49 2144.19,1212.49 2144.78,1212.49 2145.36,1212.49 2145.95,1212.49 2146.54,1212.49 2147.12,1212.49 2147.71,1212.49 2148.3,1212.49 2148.88,1212.49 2149.47,1212.49 2150.05,1212.49 2150.64,1212.49 2151.23,1212.49 2151.81,1212.49 2152.4,1212.49 2152.99,1212.49 2153.57,1212.49 2154.16,1212.49 2154.75,1212.49 2155.33,1212.49 2155.92,1212.49 2156.5,1212.49 2157.09,1212.49 2157.68,1212.49 2158.26,1212.49 \"/>\n<path clip-path=\"url(#clip832)\" d=\"M986.025 1212.53 L986.612 1212.53 L987.198 1212.53 L987.785 1212.53 L988.371 1212.53 L988.957 1212.53 L989.544 1212.53 L990.13 1212.53 L990.717 1212.53 L991.303 1212.53 L991.889 1212.53 L992.476 1212.53 L993.062 1212.53 L993.649 1212.53 L994.235 1212.53 L994.822 1212.53 L995.408 1212.53 L995.994 1212.53 L996.581 1212.53 L997.167 1212.53 L997.754 1212.53 L998.34 1212.53 L998.926 1212.53 L999.513 1212.53 L1000.1 1212.53 L1000.69 1212.53 L1001.27 1212.53 L1001.86 1212.53 L1002.44 1212.53 L1003.03 1212.53 L1003.62 1212.53 L1004.2 1212.53 L1004.79 1212.53 L1005.38 1212.53 L1005.96 1212.53 L1006.55 1212.53 L1007.14 1212.53 L1007.72 1212.53 L1008.31 1212.53 L1008.9 1212.53 L1009.48 1212.53 L1010.07 1212.53 L1010.65 1212.53 L1011.24 1212.53 L1011.83 1212.53 L1012.41 1212.53 L1013 1212.53 L1013.59 1212.53 L1014.17 1212.53 L1014.76 1212.53 L1015.35 1212.53 L1015.93 1212.53 L1016.52 1212.53 L1017.11 1212.53 L1017.69 1212.53 L1018.28 1212.53 L1018.86 1212.53 L1019.45 1212.53 L1020.04 1212.53 L1020.62 1212.53 L1021.21 1212.53 L1021.8 1212.53 L1022.38 1212.53 L1022.97 1212.53 L1023.56 1212.53 L1024.14 1212.53 L1024.73 1212.53 L1025.32 1212.53 L1025.9 1212.53 L1026.49 1212.53 L1027.07 1212.53 L1027.66 1212.53 L1028.25 1212.53 L1028.83 1212.53 L1029.42 1212.53 L1030.01 1212.53 L1030.59 1212.53 L1031.18 1212.53 L1031.77 1212.53 L1032.35 1212.53 L1032.94 1212.53 L1033.52 1212.53 L1034.11 1212.53 L1034.7 1212.53 L1035.28 1212.53 L1035.87 1212.53 L1036.46 1212.53 L1037.04 1212.53 L1037.63 1212.53 L1038.22 1212.53 L1038.8 1212.53 L1039.39 1212.53 L1039.98 1212.53 L1040.56 1212.53 L1041.15 1212.53 L1041.73 1212.53 L1042.32 1212.53 L1042.91 1212.53 L1043.49 1212.53 L1044.08 1212.53 L1044.67 1212.53 L1045.25 1212.53 L1045.84 1212.53 L1046.43 1212.53 L1047.01 1212.53 L1047.6 1212.53 L1048.19 1212.53 L1048.77 1212.53 L1049.36 1212.53 L1049.94 1212.53 L1050.53 1212.53 L1051.12 1212.53 L1051.7 1212.53 L1052.29 1212.53 L1052.88 1212.53 L1053.46 1212.53 L1054.05 1212.53 L1054.64 1212.53 L1055.22 1212.53 L1055.81 1212.53 L1056.39 1212.53 L1056.98 1212.53 L1057.57 1212.53 L1058.15 1212.53 L1058.74 1212.53 L1059.33 1212.53 L1059.91 1212.53 L1060.5 1212.53 L1061.09 1212.53 L1061.67 1212.53 L1062.26 1212.53 L1062.85 1212.53 L1063.43 1212.53 L1064.02 1212.53 L1064.6 1212.53 L1065.19 1212.53 L1065.78 1212.53 L1066.36 1212.53 L1066.95 1212.53 L1067.54 1212.53 L1068.12 1212.53 L1068.71 1212.53 L1069.3 1212.53 L1069.88 1212.53 L1070.47 1212.53 L1071.06 1212.53 L1071.64 1212.53 L1072.23 1212.53 L1072.81 1212.53 L1073.4 1212.53 L1073.99 1212.53 L1074.57 1212.53 L1075.16 1212.53 L1075.75 1212.53 L1076.33 1212.53 L1076.92 1212.53 L1077.51 1212.53 L1078.09 1212.53 L1078.68 1212.53 L1079.26 1212.53 L1079.85 1212.53 L1080.44 1212.53 L1081.02 1212.53 L1081.61 1212.53 L1082.2 1212.53 L1082.78 1212.53 L1083.37 1212.53 L1083.96 1212.53 L1084.54 1212.53 L1085.13 1212.53 L1085.72 1212.53 L1086.3 1212.53 L1086.89 1212.53 L1087.47 1212.53 L1088.06 1212.53 L1088.65 1212.53 L1089.23 1212.53 L1089.82 1212.53 L1090.41 1212.53 L1090.99 1212.53 L1091.58 1212.53 L1092.17 1212.53 L1092.75 1212.53 L1093.34 1212.53 L1093.93 1212.53 L1094.51 1212.53 L1095.1 1212.53 L1095.68 1212.53 L1096.27 1212.53 L1096.86 1212.53 L1097.44 1212.53 L1098.03 1212.53 L1098.62 1212.53 L1099.2 1212.53 L1099.79 1212.53 L1100.38 1212.53 L1100.96 1212.53 L1101.55 1212.53 L1102.14 1212.53 L1102.72 1212.53 L1103.31 1212.53 L1103.89 1212.53 L1104.48 1212.53 L1105.07 1212.53 L1105.65 1212.53 L1106.24 1212.53 L1106.83 1212.53 L1107.41 1212.53 L1108 1212.53 L1108.59 1212.53 L1109.17 1212.53 L1109.76 1212.53 L1110.34 1212.53 L1110.93 1212.53 L1111.52 1212.53 L1112.1 1212.53 L1112.69 1212.53 L1113.28 1212.53 L1113.86 1212.53 L1114.45 1212.53 L1115.04 1212.53 L1115.62 1212.53 L1116.21 1212.53 L1116.8 1212.53 L1117.38 1212.53 L1117.97 1212.53 L1118.55 1212.53 L1119.14 1212.53 L1119.73 1212.53 L1120.31 1212.53 L1120.9 1212.53 L1121.49 1212.53 L1122.07 1212.53 L1122.66 1212.53 L1123.25 1212.53 L1123.83 1212.53 L1124.42 1212.53 L1125.01 1212.53 L1125.59 1212.53 L1126.18 1212.53 L1126.76 1212.53 L1127.35 1212.53 L1127.94 1212.53 L1128.52 1212.53 L1129.11 1212.53 L1129.7 1212.53 L1130.28 1212.53 L1130.87 1212.53 L1131.46 1212.53 L1132.04 1212.53 L1132.63 1212.53 L1133.21 1212.53 L1133.8 1212.53 L1134.39 1212.53 L1134.97 1212.53 L1135.56 1212.53 L1136.15 1212.53 L1136.73 1212.53 L1137.32 1212.53 L1137.91 1212.53 L1138.49 1212.53 L1139.08 1212.53 L1139.67 1212.53 L1140.25 1212.53 L1140.84 1212.53 L1141.42 1212.53 L1142.01 1212.53 L1142.6 1212.53 L1143.18 1212.53 L1143.77 1212.53 L1144.36 1212.53 L1144.94 1212.53 L1145.53 1212.53 L1146.12 1212.53 L1146.7 1212.53 L1147.29 1212.53 L1147.88 1212.53 L1148.46 1212.53 L1149.05 1212.53 L1149.63 1212.53 L1150.22 1212.53 L1150.81 1212.53 L1151.39 1212.53 L1151.98 1212.53 L1152.57 1212.53 L1153.15 1212.53 L1153.74 1212.53 L1154.33 1212.53 L1154.91 1212.53 L1155.5 1212.53 L1156.09 1212.53 L1156.67 1212.53 L1157.26 1212.53 L1157.84 1212.53 L1158.43 1212.53 L1159.02 1212.53 L1159.6 1212.53 L1160.19 1212.53 L1160.78 1212.53 L1161.36 1212.53 L1161.95 1212.53 L1162.54 1212.53 L1163.12 1212.53 L1163.71 1212.53 L1164.29 1212.53 L1164.88 1212.53 L1165.47 1212.53 L1166.05 1212.53 L1166.64 1212.53 L1167.23 1212.53 L1167.81 1212.53 L1168.4 1212.53 L1168.99 1212.53 L1169.57 1212.53 L1170.16 1212.53 L1170.75 1212.53 L1171.33 1212.53 L1171.92 1212.53 L1172.5 1212.53 L1173.09 1212.53 L1173.68 1212.53 L1174.26 1212.53 L1174.85 1212.53 L1175.44 1212.53 L1176.02 1212.53 L1176.61 1212.53 L1177.2 1212.53 L1177.78 1212.53 L1178.37 1212.53 L1178.96 1212.53 L1179.54 1212.53 L1180.13 1212.53 L1180.71 1212.53 L1181.3 1212.53 L1181.89 1212.53 L1182.47 1212.53 L1183.06 1212.53 L1183.65 1212.53 L1184.23 1212.53 L1184.82 1212.53 L1185.41 1212.53 L1185.99 1212.53 L1186.58 1212.53 L1187.16 1212.53 L1187.75 1212.53 L1188.34 1212.53 L1188.92 1212.53 L1189.51 1212.53 L1190.1 1212.53 L1190.68 1212.53 L1191.27 1212.53 L1191.86 1212.53 L1192.44 1212.53 L1193.03 1212.53 L1193.62 1212.53 L1194.2 1212.53 L1194.79 1212.53 L1195.37 1212.53 L1195.96 1212.53 L1196.55 1212.53 L1197.13 1212.53 L1197.72 1212.53 L1198.31 1212.53 L1198.89 1212.53 L1199.48 1212.53 L1200.07 1212.53 L1200.65 1212.53 L1201.24 1212.53 L1201.83 1212.53 L1202.41 1212.53 L1203 1212.53 L1203.58 1212.53 L1204.17 1212.53 L1204.76 1212.53 L1205.34 1212.53 L1205.93 1212.53 L1206.52 1212.53 L1207.1 1212.53 L1207.69 1212.53 L1208.28 1212.53 L1208.86 1212.53 L1209.45 1212.53 L1210.03 1212.53 L1210.62 1212.53 L1211.21 1212.53 L1211.79 1212.53 L1212.38 1212.53 L1212.97 1212.53 L1213.55 1212.53 L1214.14 1212.53 L1214.73 1212.53 L1215.31 1212.53 L1215.9 1212.53 L1216.49 1212.53 L1217.07 1212.53 L1217.66 1212.53 L1218.24 1212.53 L1218.83 1212.53 L1219.42 1212.53 L1220 1212.53 L1220.59 1212.53 L1221.18 1212.53 L1221.76 1212.53 L1222.35 1212.53 L1222.94 1212.53 L1223.52 1212.53 L1224.11 1212.53 L1224.7 1212.53 L1225.28 1212.53 L1225.87 1212.53 L1226.45 1212.53 L1227.04 1212.53 L1227.63 1212.53 L1228.21 1212.53 L1228.8 1212.53 L1229.39 1212.53 L1229.97 1212.53 L1230.56 1212.53 L1231.15 1212.53 L1231.73 1212.53 L1232.32 1212.53 L1232.91 1212.53 L1233.49 1212.53 L1234.08 1212.53 L1234.66 1212.53 L1235.25 1212.53 L1235.84 1212.53 L1236.42 1212.53 L1237.01 1212.53 L1237.6 1212.53 L1238.18 1212.53 L1238.77 1212.53 L1239.36 1212.53 L1239.94 1212.53 L1240.53 1212.53 L1241.11 1212.53 L1241.7 1212.53 L1242.29 1212.53 L1242.87 1212.53 L1243.46 1212.53 L1244.05 1212.53 L1244.63 1212.53 L1245.22 1212.53 L1245.81 1212.53 L1246.39 1212.53 L1246.98 1212.53 L1247.57 1212.53 L1248.15 1212.53 L1248.74 1212.53 L1249.32 1212.53 L1249.91 1212.53 L1250.5 1212.53 L1251.08 1212.53 L1251.67 1212.53 L1252.26 1212.53 L1252.84 1212.53 L1253.43 1212.53 L1254.02 1212.53 L1254.6 1212.53 L1255.19 1212.53 L1255.78 1212.53 L1256.36 1212.53 L1256.95 1212.53 L1257.53 1212.53 L1258.12 1212.53 L1258.71 1212.53 L1259.29 1212.53 L1259.88 1212.53 L1260.47 1212.53 L1261.05 1212.53 L1261.64 1212.53 L1262.23 1212.53 L1262.81 1212.53 L1263.4 1212.53 L1263.98 1212.53 L1264.57 1212.53 L1265.16 1212.53 L1265.74 1212.53 L1266.33 1212.53 L1266.92 1212.53 L1267.5 1212.53 L1268.09 1212.53 L1268.68 1212.53 L1269.26 1212.53 L1269.85 1212.53 L1270.44 1212.53 L1271.02 1212.53 L1271.61 1212.53 L1272.19 1212.53 L1272.78 1212.53 L1273.37 1212.53 L1273.95 1212.53 L1274.54 1212.53 L1275.13 1212.53 L1275.71 1212.53 L1276.3 1212.53 L1276.89 1212.53 L1277.47 1212.53 L1278.06 1212.53 L1278.65 1212.53 L1279.23 1212.53 L1279.82 1212.53 L1280.4 1212.53 L1280.99 1212.53 L1281.58 1212.53 L1282.16 1212.53 L1282.75 1212.53 L1283.34 1212.53 L1283.92 1212.53 L1284.51 1212.53 L1285.1 1212.53 L1285.68 1212.53 L1286.27 1212.53 L1286.86 1212.53 L1287.44 1212.53 L1288.03 1212.53 L1288.61 1212.53 L1289.2 1212.53 L1289.79 1212.53 L1290.37 1212.53 L1290.96 1212.53 L1291.55 1212.53 L1292.13 1212.53 L1292.72 1212.53 L1293.31 1212.53 L1293.89 1212.53 L1294.48 1212.53 L1295.06 1212.53 L1295.65 1212.53 L1296.24 1212.53 L1296.82 1212.53 L1297.41 1212.53 L1298 1212.53 L1298.58 1212.53 L1299.17 1212.53 L1299.76 1212.53 L1300.34 1212.53 L1300.93 1212.53 L1301.52 1212.53 L1302.1 1212.53 L1302.69 1212.53 L1303.27 1212.53 L1303.86 1212.53 L1304.45 1212.53 L1305.03 1212.53 L1305.62 1212.53 L1306.21 1212.53 L1306.79 1212.53 L1307.38 1212.53 L1307.97 1212.53 L1308.55 1212.53 L1309.14 1212.53 L1309.73 1212.53 L1310.31 1212.53 L1310.9 1212.53 L1311.48 1212.53 L1312.07 1212.53 L1312.66 1212.53 L1313.24 1212.53 L1313.83 1212.53 L1314.42 1212.53 L1315 1212.53 L1315.59 1212.53 L1316.18 1212.53 L1316.76 1212.53 L1317.35 1212.53 L1317.93 1212.53 L1318.52 1212.53 L1319.11 1212.53 L1319.69 1212.53 L1320.28 1212.53 L1320.87 1212.53 L1321.45 1212.53 L1322.04 1212.53 L1322.63 1212.53 L1323.21 1212.53 L1323.8 1212.53 L1324.39 1212.53 L1324.97 1212.53 L1325.56 1212.53 L1326.14 1212.53 L1326.73 1212.53 L1327.32 1212.53 L1327.9 1212.53 L1328.49 1212.53 L1329.08 1212.53 L1329.66 1212.53 L1330.25 1212.53 L1330.84 1212.53 L1331.42 1212.53 L1332.01 1212.53 L1332.6 1212.53 L1333.18 1212.53 L1333.77 1212.53 L1334.35 1212.53 L1334.94 1212.53 L1335.53 1212.53 L1336.11 1212.53 L1336.7 1212.53 L1337.29 1212.53 L1337.87 1212.53 L1338.46 1212.53 L1339.05 1212.53 L1339.63 1212.53 L1340.22 1212.53 L1340.8 1212.53 L1341.39 1212.53 L1341.98 1212.53 L1342.56 1212.53 L1343.15 1212.53 L1343.74 1212.53 L1344.32 1212.53 L1344.91 1212.53 L1345.5 1212.53 L1346.08 1212.53 L1346.67 1212.53 L1347.26 1212.53 L1347.84 1212.53 L1348.43 1212.53 L1349.01 1212.53 L1349.6 1212.53 L1350.19 1212.53 L1350.77 1212.53 L1351.36 1212.53 L1351.95 1212.53 L1352.53 1212.53 L1353.12 1212.53 L1353.71 1212.53 L1354.29 1212.53 L1354.88 1212.53 L1355.47 1212.53 L1356.05 1212.53 L1356.64 1212.53 L1357.22 1212.53 L1357.81 1212.53 L1358.4 1212.53 L1358.98 1212.53 L1359.57 1212.53 L1360.16 1212.53 L1360.74 1212.53 L1361.33 1212.53 L1361.92 1212.53 L1362.5 1212.53 L1363.09 1212.53 L1363.68 1212.53 L1364.26 1212.53 L1364.85 1212.53 L1365.43 1212.53 L1366.02 1212.53 L1366.61 1212.53 L1367.19 1212.53 L1367.78 1212.53 L1368.37 1212.53 L1368.95 1212.53 L1369.54 1212.53 L1370.13 1212.53 L1370.71 1212.53 L1371.3 1212.53 L1371.88 1212.53 L1372.47 1212.53 L1373.06 1212.53 L1373.64 1212.53 L1374.23 1212.53 L1374.82 1212.53 L1375.4 1212.53 L1375.99 1212.53 L1376.58 1212.53 L1377.16 1212.53 L1377.75 1212.53 L1378.34 1212.53 L1378.92 1212.53 L1379.51 1212.53 L1380.09 1212.53 L1380.68 1212.53 L1381.27 1212.53 L1381.85 1212.53 L1382.44 1212.53 L1383.03 1212.53 L1383.61 1212.53 L1384.2 1212.53 L1384.79 1212.53 L1385.37 1212.53 L1385.96 1212.53 L1386.55 1212.53 L1387.13 1212.53 L1387.72 1212.53 L1388.3 1212.53 L1388.89 1212.53 L1389.48 1212.53 L1390.06 1212.53 L1390.65 1212.53 L1391.24 1212.53 L1391.82 1212.53 L1392.41 1212.53 L1393 1212.53 L1393.58 1212.53 L1394.17 1212.53 L1394.75 1212.53 L1395.34 1212.53 L1395.93 1212.53 L1396.51 1212.53 L1397.1 1212.53 L1397.69 1212.53 L1398.27 1212.53 L1398.86 1212.53 L1399.45 1212.53 L1400.03 1212.53 L1400.62 1212.53 L1401.21 1212.53 L1401.79 1212.53 L1402.38 1212.53 L1402.96 1212.53 L1403.55 1212.53 L1404.14 1212.53 L1404.72 1212.53 L1405.31 1212.53 L1405.9 1212.53 L1406.48 1212.53 L1407.07 1212.53 L1407.66 1212.53 L1408.24 1212.53 L1408.83 1212.53 L1409.42 1212.53 L1410 1212.53 L1410.59 1212.53 L1411.17 1212.53 L1411.76 1212.53 L1412.35 1212.53 L1412.93 1212.53 L1413.52 1212.53 L1414.11 1212.53 L1414.69 1212.53 L1415.28 1212.53 L1415.87 1212.53 L1416.45 1212.53 L1417.04 1212.53 L1417.63 1212.53 L1418.21 1212.53 L1418.8 1212.53 L1419.38 1212.53 L1419.97 1212.53 L1420.56 1212.53 L1421.14 1212.53 L1421.73 1212.53 L1422.32 1212.53 L1422.9 1212.53 L1423.49 1212.53 L1424.08 1212.53 L1424.66 1212.53 L1425.25 1212.53 L1425.83 1212.53 L1426.42 1212.53 L1427.01 1212.53 L1427.59 1212.53 L1428.18 1212.53 L1428.77 1212.53 L1429.35 1212.53 L1429.94 1212.53 L1430.53 1212.53 L1431.11 1212.53 L1431.7 1212.53 L1432.29 1212.53 L1432.87 1212.53 L1433.46 1212.53 L1434.04 1212.53 L1434.63 1212.53 L1435.22 1212.53 L1435.8 1212.53 L1436.39 1212.53 L1436.98 1212.53 L1437.56 1212.53 L1438.15 1212.53 L1438.74 1212.53 L1439.32 1212.53 L1439.91 1212.53 L1440.5 1212.53 L1441.08 1212.53 L1441.67 1212.53 L1442.25 1212.53 L1442.84 1212.53 L1443.43 1212.53 L1444.01 1212.53 L1444.6 1212.53 L1445.19 1212.53 L1445.77 1212.53 L1446.36 1212.53 L1446.95 1212.53 L1447.53 1212.53 L1448.12 1212.53 L1448.7 1212.53 L1449.29 1212.53 L1449.88 1212.53 L1450.46 1212.53 L1451.05 1212.53 L1451.64 1212.53 L1452.22 1212.53 L1452.81 1212.53 L1453.4 1212.53 L1453.98 1212.53 L1454.57 1212.53 L1455.16 1212.53 L1455.74 1212.53 L1456.33 1212.53 L1456.91 1212.53 L1457.5 1212.53 L1458.09 1212.53 L1458.67 1212.53 L1459.26 1212.53 L1459.85 1212.53 L1460.43 1212.53 L1461.02 1212.53 L1461.61 1212.53 L1462.19 1212.53 L1462.78 1212.53 L1463.37 1212.53 L1463.95 1212.53 L1464.54 1212.53 L1465.12 1212.53 L1465.71 1212.53 L1466.3 1212.53 L1466.88 1212.53 L1467.47 1212.53 L1468.06 1212.53 L1468.64 1212.53 L1469.23 1212.53 L1469.82 1212.53 L1470.4 1212.53 L1470.99 1212.53 L1471.57 1212.53 L1472.16 1212.53 L1472.75 1212.53 L1473.33 1212.53 L1473.92 1212.53 L1474.51 1212.53 L1475.09 1212.53 L1475.68 1212.53 L1476.27 1212.53 L1476.85 1212.53 L1477.44 1212.53 L1478.03 1212.53 L1478.61 1212.53 L1479.2 1212.53 L1479.78 1212.53 L1480.37 1212.53 L1480.96 1212.53 L1481.54 1212.53 L1482.13 1212.53 L1482.72 1212.53 L1483.3 1212.53 L1483.89 1212.53 L1484.48 1212.53 L1485.06 1212.53 L1485.65 1212.53 L1486.24 1212.53 L1486.82 1212.53 L1487.41 1212.53 L1487.99 1212.53 L1488.58 1212.53 L1489.17 1212.53 L1489.75 1212.53 L1490.34 1212.53 L1490.93 1212.53 L1491.51 1212.53 L1492.1 1212.53 L1492.69 1212.53 L1493.27 1212.53 L1493.86 1212.53 L1494.45 1212.53 L1495.03 1212.53 L1495.62 1212.53 L1496.2 1212.53 L1496.79 1212.53 L1497.38 1212.53 L1497.96 1212.53 L1498.55 1212.53 L1499.14 1212.53 L1499.72 1212.53 L1500.31 1212.53 L1500.9 1212.53 L1501.48 1212.53 L1502.07 1212.53 L1502.65 1212.53 L1503.24 1212.53 L1503.83 1212.53 L1504.41 1212.53 L1505 1212.53 L1505.59 1212.53 L1506.17 1212.53 L1506.76 1212.53 L1507.35 1212.53 L1507.93 1212.53 L1508.52 1212.53 L1509.11 1212.53 L1509.69 1212.53 L1510.28 1212.53 L1510.86 1212.53 L1511.45 1212.53 L1512.04 1212.53 L1512.62 1212.53 L1513.21 1212.53 L1513.8 1212.53 L1514.38 1212.53 L1514.97 1212.53 L1515.56 1212.53 L1516.14 1212.53 L1516.73 1212.53 L1517.32 1212.53 L1517.9 1212.53 L1518.49 1212.53 L1519.07 1212.53 L1519.66 1212.53 L1520.25 1212.53 L1520.83 1212.53 L1521.42 1212.53 L1522.01 1212.53 L1522.59 1212.53 L1523.18 1212.53 L1523.77 1212.53 L1524.35 1212.53 L1524.94 1212.53 L1525.52 1212.53 L1526.11 1212.53 L1526.7 1212.53 L1527.28 1212.53 L1527.87 1212.53 L1528.46 1212.53 L1529.04 1212.53 L1529.63 1212.53 L1530.22 1212.53 L1530.8 1212.53 L1531.39 1212.53 L1531.98 1212.53 L1532.56 1212.53 L1533.15 1212.53 L1533.73 1212.53 L1534.32 1212.53 L1534.91 1212.53 L1535.49 1212.53 L1536.08 1212.53 L1536.67 1212.53 L1537.25 1212.53 L1537.84 1212.53 L1538.43 1212.53 L1539.01 1212.53 L1539.6 1212.53 L1540.19 1212.53 L1540.77 1212.53 L1541.36 1212.53 L1541.94 1212.53 L1542.53 1212.53 L1543.12 1212.53 L1543.7 1212.53 L1544.29 1212.53 L1544.88 1212.53 L1545.46 1212.53 L1546.05 1212.53 L1546.64 1212.53 L1547.22 1212.53 L1547.81 1212.53 L1548.4 1212.53 L1548.98 1212.53 L1549.57 1212.53 L1550.15 1212.53 L1550.74 1212.53 L1551.33 1212.53 L1551.91 1212.53 L1552.5 1212.53 L1553.09 1212.53 L1553.67 1212.53 L1554.26 1212.53 L1554.85 1212.53 L1555.43 1212.53 L1556.02 1212.53 L1556.6 1212.53 L1557.19 1212.53 L1557.78 1212.53 L1558.36 1212.53 L1558.95 1212.53 L1559.54 1212.53 L1560.12 1212.53 L1560.71 1212.53 L1561.3 1212.53 L1561.88 1212.53 L1562.47 1212.53 L1563.06 1212.53 L1563.64 1212.53 L1564.23 1212.53 L1564.81 1212.53 L1565.4 1212.53 L1565.99 1212.53 L1566.57 1212.53 L1567.16 1212.53 L1567.75 1212.53 L1568.33 1212.53 L1568.92 1212.53 L1569.51 1212.53 L1570.09 1212.53 L1570.68 1212.53 L1571.27 1212.53 L1571.85 1212.53 L1572.44 1212.53 L1573.02 1212.53 L1573.61 1212.53 L1574.2 1212.53 L1574.78 1212.53 L1575.37 1212.53 L1575.96 1212.53 L1576.54 1212.53 L1577.13 1212.53 L1577.72 1212.53 L1578.3 1212.53 L1578.89 1212.53 L1579.47 1212.53 L1580.06 1212.53 L1580.65 1212.53 L1581.23 1212.53 L1581.82 1212.53 L1582.41 1212.53 L1582.99 1212.53 L1583.58 1212.53 L1584.17 1212.53 L1584.75 1212.53 L1585.34 1212.53 L1585.93 1212.53 L1586.51 1212.53 L1587.1 1212.53 L1587.68 1212.53 L1588.27 1212.53 L1588.86 1212.53 L1589.44 1212.53 L1590.03 1212.53 L1590.62 1212.53 L1591.2 1212.53 L1591.79 1212.53 L1592.38 1212.53 L1592.96 1212.53 L1593.55 1212.53 L1594.14 1212.53 L1594.72 1212.53 L1595.31 1212.53 L1595.89 1212.53 L1596.48 1212.53 L1597.07 1212.53 L1597.65 1212.53 L1598.24 1212.53 L1598.83 1212.53 L1599.41 1212.53 L1600 1212.53 L1600.59 1212.53 L1601.17 1212.53 L1601.76 1212.53 L1602.34 1212.53 L1602.93 1212.53 L1603.52 1212.53 L1604.1 1212.53 L1604.69 1212.53 L1605.28 1212.53 L1605.86 1212.53 L1606.45 1212.53 L1607.04 1212.53 L1607.62 1212.53 L1608.21 1212.53 L1608.8 1212.53 L1609.38 1212.53 L1609.97 1212.53 L1610.55 1212.53 L1611.14 1212.53 L1611.73 1212.53 L1612.31 1212.53 L1612.9 1212.53 L1613.49 1212.53 L1614.07 1212.53 L1614.66 1212.53 L1615.25 1212.53 L1615.83 1212.53 L1616.42 1212.53 L1617.01 1212.53 L1617.59 1212.53 L1618.18 1212.53 L1618.76 1212.53 L1619.35 1212.53 L1619.94 1212.53 L1620.52 1212.53 L1621.11 1212.53 L1621.7 1212.53 L1622.28 1212.53 L1622.87 1212.53 L1623.46 1212.53 L1624.04 1212.53 L1624.63 1212.53 L1625.22 1212.53 L1625.8 1212.53 L1626.39 1212.53 L1626.97 1212.53 L1627.56 1212.53 L1628.15 1212.53 L1628.73 1212.53 L1629.32 1212.53 L1629.91 1212.53 L1630.49 1212.53 L1631.08 1212.53 L1631.67 1212.53 L1632.25 1212.53 L1632.84 1212.53 L1633.42 1212.53 L1634.01 1212.53 L1634.6 1212.53 L1635.18 1212.53 L1635.77 1212.53 L1636.36 1212.53 L1636.94 1212.53 L1637.53 1212.53 L1638.12 1212.53 L1638.7 1212.53 L1639.29 1212.53 L1639.88 1212.53 L1640.46 1212.53 L1641.05 1212.53 L1641.63 1212.53 L1642.22 1212.53 L1642.81 1212.53 L1643.39 1212.53 L1643.98 1212.53 L1644.57 1212.53 L1645.15 1212.53 L1645.74 1212.53 L1646.33 1212.53 L1646.91 1212.53 L1647.5 1212.53 L1648.09 1212.53 L1648.67 1212.53 L1649.26 1212.53 L1649.84 1212.53 L1650.43 1212.53 L1651.02 1212.53 L1651.6 1212.53 L1652.19 1212.53 L1652.78 1212.53 L1653.36 1212.53 L1653.95 1212.53 L1654.54 1212.53 L1655.12 1212.53 L1655.71 1212.53 L1656.29 1212.53 L1656.88 1212.53 L1657.47 1212.53 L1658.05 1212.53 L1658.64 1212.53 L1659.23 1212.53 L1659.81 1212.53 L1660.4 1212.53 L1660.99 1212.53 L1661.57 1212.53 L1662.16 1212.53 L1662.75 1212.53 L1663.33 1212.53 L1663.92 1212.53 L1664.5 1212.53 L1665.09 1212.53 L1665.68 1212.53 L1666.26 1212.53 L1666.85 1212.53 L1667.44 1212.53 L1668.02 1212.53 L1668.61 1212.53 L1669.2 1212.53 L1669.78 1212.53 L1670.37 1212.53 L1670.96 1212.53 L1671.54 1212.53 L1672.13 1212.53 L1672.71 1212.53 L1673.3 1212.53 L1673.89 1212.53 L1674.47 1212.53 L1675.06 1212.53 L1675.65 1212.53 L1676.23 1212.53 L1676.82 1212.53 L1677.41 1212.53 L1677.99 1212.53 L1678.58 1212.53 L1679.17 1212.53 L1679.75 1212.53 L1680.34 1212.53 L1680.92 1212.53 L1681.51 1212.53 L1682.1 1212.53 L1682.68 1212.53 L1683.27 1212.53 L1683.86 1212.53 L1684.44 1212.53 L1685.03 1212.53 L1685.62 1212.53 L1686.2 1212.53 L1686.79 1212.53 L1687.37 1212.53 L1687.96 1212.53 L1688.55 1212.53 L1689.13 1212.53 L1689.72 1212.53 L1690.31 1212.53 L1690.89 1212.53 L1691.48 1212.53 L1692.07 1212.53 L1692.65 1212.53 L1693.24 1212.53 L1693.83 1212.53 L1694.41 1212.53 L1695 1212.53 L1695.58 1212.53 L1696.17 1212.53 L1696.76 1212.53 L1697.34 1212.53 L1697.93 1212.53 L1698.52 1212.53 L1699.1 1212.53 L1699.69 1212.53 L1700.28 1212.53 L1700.86 1212.53 L1701.45 1212.53 L1702.04 1212.53 L1702.62 1212.53 L1703.21 1212.53 L1703.79 1212.53 L1704.38 1212.53 L1704.97 1212.53 L1705.55 1212.53 L1706.14 1212.53 L1706.73 1212.53 L1707.31 1212.53 L1707.9 1212.53 L1708.49 1212.53 L1709.07 1212.53 L1709.66 1212.53 L1710.24 1212.53 L1710.83 1212.53 L1711.42 1212.53 L1712 1212.53 L1712.59 1212.53 L1713.18 1212.53 L1713.76 1212.53 L1714.35 1212.53 L1714.94 1212.53 L1715.52 1212.53 L1716.11 1212.53 L1716.7 1212.53 L1717.28 1212.53 L1717.87 1212.53 L1718.45 1212.53 L1719.04 1212.53 L1719.63 1212.53 L1720.21 1212.53 L1720.8 1212.53 L1721.39 1212.53 L1721.97 1212.53 L1722.56 1212.53 L1723.15 1212.53 L1723.73 1212.53 L1724.32 1212.53 L1724.91 1212.53 L1725.49 1212.53 L1726.08 1212.53 L1726.66 1212.53 L1727.25 1212.53 L1727.84 1212.53 L1728.42 1212.53 L1729.01 1212.53 L1729.6 1212.53 L1730.18 1212.53 L1730.77 1212.53 L1731.36 1212.53 L1731.94 1212.53 L1732.53 1212.53 L1733.11 1212.53 L1733.7 1212.53 L1734.29 1212.53 L1734.87 1212.53 L1735.46 1212.53 L1736.05 1212.53 L1736.63 1212.53 L1737.22 1212.53 L1737.81 1212.53 L1738.39 1212.53 L1738.98 1212.53 L1739.57 1212.53 L1740.15 1212.53 L1740.74 1212.53 L1741.32 1212.53 L1741.91 1212.53 L1742.5 1212.53 L1743.08 1212.53 L1743.67 1212.53 L1744.26 1212.53 L1744.84 1212.53 L1745.43 1212.53 L1746.02 1212.53 L1746.6 1212.53 L1747.19 1212.53 L1747.78 1212.53 L1748.36 1212.53 L1748.95 1212.53 L1749.53 1212.53 L1750.12 1212.53 L1750.71 1212.53 L1751.29 1212.53 L1751.88 1212.53 L1752.47 1212.53 L1753.05 1212.53 L1753.64 1212.53 L1754.23 1212.53 L1754.81 1212.53 L1755.4 1212.53 L1755.99 1212.53 L1756.57 1212.53 L1757.16 1212.53 L1757.74 1212.53 L1758.33 1212.53 L1758.92 1212.53 L1759.5 1212.53 L1760.09 1212.53 L1760.68 1212.53 L1761.26 1212.53 L1761.85 1212.53 L1762.44 1212.53 L1763.02 1212.53 L1763.61 1212.53 L1764.19 1212.53 L1764.78 1212.53 L1765.37 1212.53 L1765.95 1212.53 L1766.54 1212.53 L1767.13 1212.53 L1767.71 1212.53 L1768.3 1212.53 L1768.89 1212.53 L1769.47 1212.53 L1770.06 1212.53 L1770.65 1212.53 L1771.23 1212.53 L1771.82 1212.53 L1772.4 1212.53 L1772.99 1212.53 L1773.58 1212.53 L1774.16 1212.53 L1774.75 1212.53 L1775.34 1212.53 L1775.92 1212.53 L1776.51 1212.53 L1777.1 1212.53 L1777.68 1212.53 L1778.27 1212.53 L1778.86 1212.53 L1779.44 1212.53 L1780.03 1212.53 L1780.61 1212.53 L1781.2 1212.53 L1781.79 1212.53 L1782.37 1212.53 L1782.96 1212.53 L1783.55 1212.53 L1784.13 1212.53 L1784.72 1212.53 L1785.31 1212.53 L1785.89 1212.53 L1786.48 1212.53 L1787.06 1212.53 L1787.65 1212.53 L1788.24 1212.53 L1788.82 1212.53 L1789.41 1212.53 L1790 1212.53 L1790.58 1212.53 L1791.17 1212.53 L1791.76 1212.53 L1792.34 1212.53 L1792.93 1212.53 L1793.52 1212.53 L1794.1 1212.53 L1794.69 1212.53 L1795.27 1212.53 L1795.86 1212.53 L1796.45 1212.53 L1797.03 1212.53 L1797.62 1212.53 L1798.21 1212.53 L1798.79 1212.53 L1799.38 1212.53 L1799.97 1212.53 L1800.55 1212.53 L1801.14 1212.53 L1801.73 1212.53 L1802.31 1212.53 L1802.9 1212.53 L1803.48 1212.53 L1804.07 1212.53 L1804.66 1212.53 L1805.24 1212.53 L1805.83 1212.53 L1806.42 1212.53 L1807 1212.53 L1807.59 1212.53 L1808.18 1212.53 L1808.76 1212.53 L1809.35 1212.53 L1809.94 1212.53 L1810.52 1212.53 L1811.11 1212.53 L1811.69 1212.53 L1812.28 1212.53 L1812.87 1212.53 L1813.45 1212.53 L1814.04 1212.53 L1814.63 1212.53 L1815.21 1212.53 L1815.8 1212.53 L1816.39 1212.53 L1816.97 1212.53 L1817.56 1212.53 L1818.14 1212.53 L1818.73 1212.53 L1819.32 1212.53 L1819.9 1212.53 L1820.49 1212.53 L1821.08 1212.53 L1821.66 1212.53 L1822.25 1212.53 L1822.84 1212.53 L1823.42 1212.53 L1824.01 1212.53 L1824.6 1212.53 L1825.18 1212.53 L1825.77 1212.53 L1826.35 1212.53 L1826.94 1212.53 L1827.53 1212.53 L1828.11 1212.53 L1828.7 1212.53 L1829.29 1212.53 L1829.87 1212.53 L1830.46 1212.53 L1831.05 1212.53 L1831.63 1212.53 L1832.22 1212.53 L1832.81 1212.53 L1833.39 1212.53 L1833.98 1212.53 L1834.56 1212.53 L1835.15 1212.53 L1835.74 1212.53 L1836.32 1212.53 L1836.91 1212.53 L1837.5 1212.53 L1838.08 1212.53 L1838.67 1212.53 L1839.26 1212.53 L1839.84 1212.53 L1840.43 1212.53 L1841.01 1212.53 L1841.6 1212.53 L1842.19 1212.53 L1842.77 1212.53 L1843.36 1212.53 L1843.95 1212.53 L1844.53 1212.53 L1845.12 1212.53 L1845.71 1212.53 L1846.29 1212.53 L1846.88 1212.53 L1847.47 1212.53 L1848.05 1212.53 L1848.64 1212.53 L1849.22 1212.53 L1849.81 1212.53 L1850.4 1212.53 L1850.98 1212.53 L1851.57 1212.53 L1852.16 1212.53 L1852.74 1212.53 L1853.33 1212.53 L1853.92 1212.53 L1854.5 1212.53 L1855.09 1212.53 L1855.68 1212.53 L1856.26 1212.53 L1856.85 1212.53 L1857.43 1212.53 L1858.02 1212.53 L1858.61 1212.53 L1859.19 1212.53 L1859.78 1212.53 L1860.37 1212.53 L1860.95 1212.53 L1861.54 1212.53 L1862.13 1212.53 L1862.71 1212.53 L1863.3 1212.53 L1863.88 1212.53 L1864.47 1212.53 L1865.06 1212.53 L1865.64 1212.53 L1866.23 1212.53 L1866.82 1212.53 L1867.4 1212.53 L1867.99 1212.53 L1868.58 1212.53 L1869.16 1212.53 L1869.75 1212.53 L1870.34 1212.53 L1870.92 1212.53 L1871.51 1212.53 L1872.09 1212.53 L1872.68 1212.53 L1873.27 1212.53 L1873.85 1212.53 L1874.44 1212.53 L1875.03 1212.53 L1875.61 1212.53 L1876.2 1212.53 L1876.79 1212.53 L1877.37 1212.53 L1877.96 1212.53 L1878.55 1212.53 L1879.13 1212.53 L1879.72 1212.53 L1880.3 1212.53 L1880.89 1212.53 L1881.48 1212.53 L1882.06 1212.53 L1882.65 1212.53 L1883.24 1212.53 L1883.82 1212.53 L1884.41 1212.53 L1885 1212.53 L1885.58 1212.53 L1886.17 1212.53 L1886.76 1212.53 L1887.34 1212.53 L1887.93 1212.53 L1888.51 1212.53 L1889.1 1212.53 L1889.69 1212.53 L1890.27 1212.53 L1890.86 1212.53 L1891.45 1212.53 L1892.03 1212.53 L1892.62 1212.53 L1893.21 1212.53 L1893.79 1212.53 L1894.38 1212.53 L1894.96 1212.53 L1895.55 1212.53 L1896.14 1212.53 L1896.72 1212.53 L1897.31 1212.53 L1897.9 1212.53 L1898.48 1212.53 L1899.07 1212.53 L1899.66 1212.53 L1900.24 1212.53 L1900.83 1212.53 L1901.42 1212.53 L1902 1212.53 L1902.59 1212.53 L1903.17 1212.53 L1903.76 1212.53 L1904.35 1212.53 L1904.93 1212.53 L1905.52 1212.53 L1906.11 1212.53 L1906.69 1212.53 L1907.28 1212.53 L1907.87 1212.53 L1908.45 1212.53 L1909.04 1212.53 L1909.63 1212.53 L1910.21 1212.53 L1910.8 1212.53 L1911.38 1212.53 L1911.97 1212.53 L1912.56 1212.53 L1913.14 1212.53 L1913.73 1212.53 L1914.32 1212.53 L1914.9 1212.53 L1915.49 1212.53 L1916.08 1212.53 L1916.66 1212.53 L1917.25 1212.53 L1917.83 1212.53 L1918.42 1212.53 L1919.01 1212.53 L1919.59 1212.53 L1920.18 1212.53 L1920.77 1212.53 L1921.35 1212.53 L1921.94 1212.53 L1922.53 1212.53 L1923.11 1212.53 L1923.7 1212.53 L1924.29 1212.53 L1924.87 1212.53 L1925.46 1212.53 L1926.04 1212.53 L1926.63 1212.53 L1927.22 1212.53 L1927.8 1212.53 L1928.39 1212.53 L1928.98 1212.53 L1929.56 1212.53 L1930.15 1212.53 L1930.74 1212.53 L1931.32 1212.53 L1931.91 1212.53 L1932.5 1212.53 L1933.08 1212.53 L1933.67 1212.53 L1934.25 1212.53 L1934.84 1212.53 L1935.43 1212.53 L1936.01 1212.53 L1936.6 1212.53 L1937.19 1212.53 L1937.77 1212.53 L1938.36 1212.53 L1938.95 1212.53 L1939.53 1212.53 L1940.12 1212.53 L1940.71 1212.53 L1941.29 1212.53 L1941.88 1212.53 L1942.46 1212.53 L1943.05 1212.53 L1943.64 1212.53 L1944.22 1212.53 L1944.81 1212.53 L1945.4 1212.53 L1945.98 1212.53 L1946.57 1212.53 L1947.16 1212.53 L1947.74 1212.53 L1948.33 1212.53 L1948.91 1212.53 L1949.5 1212.53 L1950.09 1212.53 L1950.67 1212.53 L1951.26 1212.53 L1951.85 1212.53 L1952.43 1212.53 L1953.02 1212.53 L1953.61 1212.53 L1954.19 1212.53 L1954.78 1212.53 L1955.37 1212.53 L1955.95 1212.53 L1956.54 1212.53 L1957.12 1212.53 L1957.71 1212.53 L1958.3 1212.53 L1958.88 1212.53 L1959.47 1212.53 L1960.06 1212.53 L1960.64 1212.53 L1961.23 1212.53 L1961.82 1212.53 L1962.4 1212.53 L1962.99 1212.53 L1963.58 1212.53 L1964.16 1212.53 L1964.75 1212.53 L1965.33 1212.53 L1965.92 1212.53 L1966.51 1212.53 L1967.09 1212.53 L1967.68 1212.53 L1968.27 1212.53 L1968.85 1212.53 L1969.44 1212.53 L1970.03 1212.53 L1970.61 1212.53 L1971.2 1212.53 L1971.78 1212.53 L1972.37 1212.53 L1972.96 1212.53 L1973.54 1212.53 L1974.13 1212.53 L1974.72 1212.53 L1975.3 1212.53 L1975.89 1212.53 L1976.48 1212.53 L1977.06 1212.53 L1977.65 1212.53 L1978.24 1212.53 L1978.82 1212.53 L1979.41 1212.53 L1979.99 1212.53 L1980.58 1212.53 L1981.17 1212.53 L1981.75 1212.53 L1982.34 1212.53 L1982.93 1212.53 L1983.51 1212.53 L1984.1 1212.53 L1984.69 1212.53 L1985.27 1212.53 L1985.86 1212.53 L1986.45 1212.53 L1987.03 1212.53 L1987.62 1212.53 L1988.2 1212.53 L1988.79 1212.53 L1989.38 1212.53 L1989.96 1212.53 L1990.55 1212.53 L1991.14 1212.53 L1991.72 1212.53 L1992.31 1212.53 L1992.9 1212.53 L1993.48 1212.53 L1994.07 1212.53 L1994.65 1212.53 L1995.24 1212.53 L1995.83 1212.53 L1996.41 1212.53 L1997 1212.53 L1997.59 1212.53 L1998.17 1212.53 L1998.76 1212.53 L1999.35 1212.53 L1999.93 1212.53 L2000.52 1212.53 L2001.11 1212.53 L2001.69 1212.53 L2002.28 1212.53 L2002.86 1212.53 L2003.45 1212.53 L2004.04 1212.53 L2004.62 1212.53 L2005.21 1212.53 L2005.8 1212.53 L2006.38 1212.53 L2006.97 1212.53 L2007.56 1212.53 L2008.14 1212.53 L2008.73 1212.53 L2009.32 1212.53 L2009.9 1212.53 L2010.49 1212.53 L2011.07 1212.53 L2011.66 1212.53 L2012.25 1212.53 L2012.83 1212.53 L2013.42 1212.53 L2014.01 1212.53 L2014.59 1212.53 L2015.18 1212.53 L2015.77 1212.53 L2016.35 1212.53 L2016.94 1212.53 L2017.53 1212.53 L2018.11 1212.53 L2018.7 1212.53 L2019.28 1212.53 L2019.87 1212.53 L2020.46 1212.53 L2021.04 1212.53 L2021.63 1212.53 L2022.22 1212.53 L2022.8 1212.53 L2023.39 1212.53 L2023.98 1212.53 L2024.56 1212.53 L2025.15 1212.53 L2025.73 1212.53 L2026.32 1212.53 L2026.91 1212.53 L2027.49 1212.53 L2028.08 1212.53 L2028.67 1212.53 L2029.25 1212.53 L2029.84 1212.53 L2030.43 1212.53 L2031.01 1212.53 L2031.6 1212.53 L2032.19 1212.53 L2032.77 1212.53 L2033.36 1212.53 L2033.94 1212.53 L2034.53 1212.53 L2035.12 1212.53 L2035.7 1212.53 L2036.29 1212.53 L2036.88 1212.53 L2037.46 1212.53 L2038.05 1212.53 L2038.64 1212.53 L2039.22 1212.53 L2039.81 1212.53 L2040.4 1212.53 L2040.98 1212.53 L2041.57 1212.53 L2042.15 1212.53 L2042.74 1212.53 L2043.33 1212.53 L2043.91 1212.53 L2044.5 1212.53 L2045.09 1212.53 L2045.67 1212.53 L2046.26 1212.53 L2046.85 1212.53 L2047.43 1212.53 L2048.02 1212.53 L2048.6 1212.53 L2049.19 1212.53 L2049.78 1212.53 L2050.36 1212.53 L2050.95 1212.53 L2051.54 1212.53 L2052.12 1212.53 L2052.71 1212.53 L2053.3 1212.53 L2053.88 1212.53 L2054.47 1212.53 L2055.06 1212.53 L2055.64 1212.53 L2056.23 1212.53 L2056.81 1212.53 L2057.4 1212.53 L2057.99 1212.53 L2058.57 1212.53 L2059.16 1212.53 L2059.75 1212.53 L2060.33 1212.53 L2060.92 1212.53 L2061.51 1212.53 L2062.09 1212.53 L2062.68 1212.53 L2063.27 1212.53 L2063.85 1212.53 L2064.44 1212.53 L2065.02 1212.53 L2065.61 1212.53 L2066.2 1212.53 L2066.78 1212.53 L2067.37 1212.53 L2067.96 1212.53 L2068.54 1212.53 L2069.13 1212.53 L2069.72 1212.53 L2070.3 1212.53 L2070.89 1212.53 L2071.48 1212.53 L2072.06 1212.53 L2072.65 1212.53 L2073.23 1212.53 L2073.82 1212.53 L2074.41 1212.53 L2074.99 1212.53 L2075.58 1212.53 L2076.17 1212.53 L2076.75 1212.53 L2077.34 1212.53 L2077.93 1212.53 L2078.51 1212.53 L2079.1 1212.53 L2079.68 1212.53 L2080.27 1212.53 L2080.86 1212.53 L2081.44 1212.53 L2082.03 1212.53 L2082.62 1212.53 L2083.2 1212.53 L2083.79 1212.53 L2084.38 1212.53 L2084.96 1212.53 L2085.55 1212.53 L2086.14 1212.53 L2086.72 1212.53 L2087.31 1212.53 L2087.89 1212.53 L2088.48 1212.53 L2089.07 1212.53 L2089.65 1212.53 L2090.24 1212.53 L2090.83 1212.53 L2091.41 1212.53 L2092 1212.53 L2092.59 1212.53 L2093.17 1212.53 L2093.76 1212.53 L2094.35 1212.53 L2094.93 1212.53 L2095.52 1212.53 L2096.1 1212.53 L2096.69 1212.53 L2097.28 1212.53 L2097.86 1212.53 L2098.45 1212.53 L2099.04 1212.53 L2099.62 1212.53 L2100.21 1212.53 L2100.8 1212.53 L2101.38 1212.53 L2101.97 1212.53 L2102.55 1212.53 L2103.14 1212.53 L2103.73 1212.53 L2104.31 1212.53 L2104.9 1212.53 L2105.49 1212.53 L2106.07 1212.53 L2106.66 1212.53 L2107.25 1212.53 L2107.83 1212.53 L2108.42 1212.53 L2109.01 1212.53 L2109.59 1212.53 L2110.18 1212.53 L2110.76 1212.53 L2111.35 1212.53 L2111.94 1212.53 L2112.52 1212.53 L2113.11 1212.53 L2113.7 1212.53 L2114.28 1212.53 L2114.87 1212.53 L2115.46 1212.53 L2116.04 1212.53 L2116.63 1212.53 L2117.22 1212.53 L2117.8 1212.53 L2118.39 1212.53 L2118.97 1212.53 L2119.56 1212.53 L2120.15 1212.53 L2120.73 1212.53 L2121.32 1212.53 L2121.91 1212.53 L2122.49 1212.53 L2123.08 1212.53 L2123.67 1212.53 L2124.25 1212.53 L2124.84 1212.53 L2125.42 1212.53 L2126.01 1212.53 L2126.6 1212.53 L2127.18 1212.53 L2127.77 1212.53 L2128.36 1212.53 L2128.94 1212.53 L2129.53 1212.53 L2130.12 1212.53 L2130.7 1212.53 L2131.29 1212.53 L2131.88 1212.53 L2132.46 1212.53 L2133.05 1212.53 L2133.63 1212.53 L2134.22 1212.53 L2134.81 1212.53 L2135.39 1212.53 L2135.98 1212.53 L2136.57 1212.53 L2137.15 1212.53 L2137.74 1212.53 L2138.33 1212.53 L2138.91 1212.53 L2139.5 1212.53 L2140.09 1212.53 L2140.67 1212.53 L2141.26 1212.53 L2141.84 1212.53 L2142.43 1212.53 L2143.02 1212.53 L2143.6 1212.53 L2144.19 1212.53 L2144.78 1212.53 L2145.36 1212.53 L2145.95 1212.53 L2146.54 1212.53 L2147.12 1212.53 L2147.71 1212.53 L2148.3 1212.53 L2148.88 1212.53 L2149.47 1212.53 L2150.05 1212.53 L2150.64 1212.53 L2151.23 1212.53 L2151.81 1212.53 L2152.4 1212.53 L2152.99 1212.53 L2153.57 1212.53 L2154.16 1212.53 L2154.75 1212.53 L2155.33 1212.53 L2155.92 1212.53 L2156.5 1212.53 L2157.09 1212.53 L2157.68 1212.53 L2158.26 1212.53 L2158.26 1212.32 L2157.68 1212.32 L2157.09 1212.32 L2156.5 1212.32 L2155.92 1212.32 L2155.33 1212.32 L2154.75 1212.32 L2154.16 1212.32 L2153.57 1212.32 L2152.99 1212.32 L2152.4 1212.32 L2151.81 1212.32 L2151.23 1212.32 L2150.64 1212.32 L2150.05 1212.32 L2149.47 1212.32 L2148.88 1212.32 L2148.3 1212.32 L2147.71 1212.32 L2147.12 1212.32 L2146.54 1212.32 L2145.95 1212.32 L2145.36 1212.32 L2144.78 1212.32 L2144.19 1212.32 L2143.6 1212.32 L2143.02 1212.32 L2142.43 1212.32 L2141.84 1212.32 L2141.26 1212.32 L2140.67 1212.32 L2140.09 1212.32 L2139.5 1212.32 L2138.91 1212.32 L2138.33 1212.32 L2137.74 1212.32 L2137.15 1212.32 L2136.57 1212.32 L2135.98 1212.32 L2135.39 1212.32 L2134.81 1212.32 L2134.22 1212.32 L2133.63 1212.32 L2133.05 1212.32 L2132.46 1212.32 L2131.88 1212.32 L2131.29 1212.32 L2130.7 1212.32 L2130.12 1212.32 L2129.53 1212.32 L2128.94 1212.32 L2128.36 1212.32 L2127.77 1212.32 L2127.18 1212.32 L2126.6 1212.32 L2126.01 1212.32 L2125.42 1212.32 L2124.84 1212.32 L2124.25 1212.32 L2123.67 1212.32 L2123.08 1212.32 L2122.49 1212.32 L2121.91 1212.32 L2121.32 1212.32 L2120.73 1212.32 L2120.15 1212.32 L2119.56 1212.32 L2118.97 1212.32 L2118.39 1212.32 L2117.8 1212.32 L2117.22 1212.32 L2116.63 1212.32 L2116.04 1212.32 L2115.46 1212.32 L2114.87 1212.32 L2114.28 1212.32 L2113.7 1212.32 L2113.11 1212.32 L2112.52 1212.32 L2111.94 1212.32 L2111.35 1212.32 L2110.76 1212.32 L2110.18 1212.32 L2109.59 1212.32 L2109.01 1212.32 L2108.42 1212.32 L2107.83 1212.32 L2107.25 1212.32 L2106.66 1212.32 L2106.07 1212.32 L2105.49 1212.32 L2104.9 1212.32 L2104.31 1212.32 L2103.73 1212.32 L2103.14 1212.32 L2102.55 1212.32 L2101.97 1212.32 L2101.38 1212.32 L2100.8 1212.32 L2100.21 1212.32 L2099.62 1212.32 L2099.04 1212.32 L2098.45 1212.32 L2097.86 1212.32 L2097.28 1212.32 L2096.69 1212.32 L2096.1 1212.32 L2095.52 1212.32 L2094.93 1212.32 L2094.35 1212.32 L2093.76 1212.32 L2093.17 1212.32 L2092.59 1212.32 L2092 1212.32 L2091.41 1212.32 L2090.83 1212.32 L2090.24 1212.32 L2089.65 1212.32 L2089.07 1212.32 L2088.48 1212.32 L2087.89 1212.32 L2087.31 1212.32 L2086.72 1212.32 L2086.14 1212.32 L2085.55 1212.32 L2084.96 1212.32 L2084.38 1212.32 L2083.79 1212.32 L2083.2 1212.32 L2082.62 1212.32 L2082.03 1212.32 L2081.44 1212.32 L2080.86 1212.32 L2080.27 1212.32 L2079.68 1212.32 L2079.1 1212.32 L2078.51 1212.32 L2077.93 1212.32 L2077.34 1212.32 L2076.75 1212.32 L2076.17 1212.32 L2075.58 1212.32 L2074.99 1212.32 L2074.41 1212.32 L2073.82 1212.32 L2073.23 1212.32 L2072.65 1212.32 L2072.06 1212.32 L2071.48 1212.32 L2070.89 1212.32 L2070.3 1212.32 L2069.72 1212.32 L2069.13 1212.32 L2068.54 1212.32 L2067.96 1212.32 L2067.37 1212.32 L2066.78 1212.32 L2066.2 1212.32 L2065.61 1212.32 L2065.02 1212.32 L2064.44 1212.32 L2063.85 1212.32 L2063.27 1212.32 L2062.68 1212.32 L2062.09 1212.32 L2061.51 1212.32 L2060.92 1212.32 L2060.33 1212.32 L2059.75 1212.32 L2059.16 1212.32 L2058.57 1212.32 L2057.99 1212.32 L2057.4 1212.32 L2056.81 1212.32 L2056.23 1212.32 L2055.64 1212.32 L2055.06 1212.32 L2054.47 1212.32 L2053.88 1212.32 L2053.3 1212.32 L2052.71 1212.32 L2052.12 1212.32 L2051.54 1212.32 L2050.95 1212.32 L2050.36 1212.32 L2049.78 1212.32 L2049.19 1212.32 L2048.6 1212.32 L2048.02 1212.32 L2047.43 1212.32 L2046.85 1212.32 L2046.26 1212.32 L2045.67 1212.32 L2045.09 1212.32 L2044.5 1212.32 L2043.91 1212.32 L2043.33 1212.32 L2042.74 1212.32 L2042.15 1212.32 L2041.57 1212.32 L2040.98 1212.32 L2040.4 1212.32 L2039.81 1212.32 L2039.22 1212.32 L2038.64 1212.32 L2038.05 1212.32 L2037.46 1212.32 L2036.88 1212.32 L2036.29 1212.32 L2035.7 1212.32 L2035.12 1212.32 L2034.53 1212.32 L2033.94 1212.32 L2033.36 1212.32 L2032.77 1212.32 L2032.19 1212.32 L2031.6 1212.32 L2031.01 1212.32 L2030.43 1212.32 L2029.84 1212.32 L2029.25 1212.32 L2028.67 1212.32 L2028.08 1212.32 L2027.49 1212.32 L2026.91 1212.32 L2026.32 1212.32 L2025.73 1212.32 L2025.15 1212.32 L2024.56 1212.32 L2023.98 1212.32 L2023.39 1212.32 L2022.8 1212.32 L2022.22 1212.32 L2021.63 1212.32 L2021.04 1212.32 L2020.46 1212.32 L2019.87 1212.32 L2019.28 1212.32 L2018.7 1212.32 L2018.11 1212.32 L2017.53 1212.32 L2016.94 1212.32 L2016.35 1212.32 L2015.77 1212.32 L2015.18 1212.32 L2014.59 1212.32 L2014.01 1212.32 L2013.42 1212.32 L2012.83 1212.32 L2012.25 1212.32 L2011.66 1212.32 L2011.07 1212.32 L2010.49 1212.32 L2009.9 1212.32 L2009.32 1212.32 L2008.73 1212.32 L2008.14 1212.32 L2007.56 1212.32 L2006.97 1212.32 L2006.38 1212.32 L2005.8 1212.32 L2005.21 1212.32 L2004.62 1212.32 L2004.04 1212.32 L2003.45 1212.32 L2002.86 1212.32 L2002.28 1212.32 L2001.69 1212.32 L2001.11 1212.32 L2000.52 1212.32 L1999.93 1212.32 L1999.35 1212.32 L1998.76 1212.32 L1998.17 1212.32 L1997.59 1212.32 L1997 1212.32 L1996.41 1212.32 L1995.83 1212.32 L1995.24 1212.32 L1994.65 1212.32 L1994.07 1212.32 L1993.48 1212.32 L1992.9 1212.32 L1992.31 1212.32 L1991.72 1212.32 L1991.14 1212.32 L1990.55 1212.32 L1989.96 1212.32 L1989.38 1212.32 L1988.79 1212.32 L1988.2 1212.32 L1987.62 1212.32 L1987.03 1212.32 L1986.45 1212.32 L1985.86 1212.32 L1985.27 1212.32 L1984.69 1212.32 L1984.1 1212.32 L1983.51 1212.32 L1982.93 1212.32 L1982.34 1212.32 L1981.75 1212.32 L1981.17 1212.32 L1980.58 1212.32 L1979.99 1212.32 L1979.41 1212.32 L1978.82 1212.32 L1978.24 1212.32 L1977.65 1212.32 L1977.06 1212.32 L1976.48 1212.32 L1975.89 1212.32 L1975.3 1212.32 L1974.72 1212.32 L1974.13 1212.32 L1973.54 1212.32 L1972.96 1212.32 L1972.37 1212.32 L1971.78 1212.32 L1971.2 1212.32 L1970.61 1212.32 L1970.03 1212.32 L1969.44 1212.32 L1968.85 1212.32 L1968.27 1212.32 L1967.68 1212.32 L1967.09 1212.32 L1966.51 1212.32 L1965.92 1212.32 L1965.33 1212.32 L1964.75 1212.32 L1964.16 1212.32 L1963.58 1212.32 L1962.99 1212.32 L1962.4 1212.32 L1961.82 1212.32 L1961.23 1212.32 L1960.64 1212.32 L1960.06 1212.32 L1959.47 1212.32 L1958.88 1212.32 L1958.3 1212.32 L1957.71 1212.32 L1957.12 1212.32 L1956.54 1212.32 L1955.95 1212.32 L1955.37 1212.32 L1954.78 1212.32 L1954.19 1212.32 L1953.61 1212.32 L1953.02 1212.32 L1952.43 1212.32 L1951.85 1212.32 L1951.26 1212.32 L1950.67 1212.32 L1950.09 1212.32 L1949.5 1212.32 L1948.91 1212.32 L1948.33 1212.32 L1947.74 1212.32 L1947.16 1212.32 L1946.57 1212.32 L1945.98 1212.32 L1945.4 1212.32 L1944.81 1212.32 L1944.22 1212.32 L1943.64 1212.32 L1943.05 1212.32 L1942.46 1212.32 L1941.88 1212.32 L1941.29 1212.32 L1940.71 1212.32 L1940.12 1212.32 L1939.53 1212.32 L1938.95 1212.32 L1938.36 1212.32 L1937.77 1212.32 L1937.19 1212.32 L1936.6 1212.32 L1936.01 1212.32 L1935.43 1212.32 L1934.84 1212.32 L1934.25 1212.32 L1933.67 1212.32 L1933.08 1212.32 L1932.5 1212.32 L1931.91 1212.32 L1931.32 1212.32 L1930.74 1212.32 L1930.15 1212.32 L1929.56 1212.32 L1928.98 1212.32 L1928.39 1212.32 L1927.8 1212.32 L1927.22 1212.32 L1926.63 1212.32 L1926.04 1212.32 L1925.46 1212.32 L1924.87 1212.32 L1924.29 1212.32 L1923.7 1212.32 L1923.11 1212.32 L1922.53 1212.32 L1921.94 1212.32 L1921.35 1212.32 L1920.77 1212.32 L1920.18 1212.32 L1919.59 1212.32 L1919.01 1212.32 L1918.42 1212.32 L1917.83 1212.32 L1917.25 1212.32 L1916.66 1212.32 L1916.08 1212.32 L1915.49 1212.32 L1914.9 1212.32 L1914.32 1212.32 L1913.73 1212.32 L1913.14 1212.32 L1912.56 1212.32 L1911.97 1212.32 L1911.38 1212.32 L1910.8 1212.32 L1910.21 1212.32 L1909.63 1212.32 L1909.04 1212.32 L1908.45 1212.32 L1907.87 1212.32 L1907.28 1212.32 L1906.69 1212.32 L1906.11 1212.32 L1905.52 1212.32 L1904.93 1212.32 L1904.35 1212.32 L1903.76 1212.32 L1903.17 1212.32 L1902.59 1212.32 L1902 1212.32 L1901.42 1212.32 L1900.83 1212.32 L1900.24 1212.32 L1899.66 1212.32 L1899.07 1212.32 L1898.48 1212.32 L1897.9 1212.32 L1897.31 1212.32 L1896.72 1212.32 L1896.14 1212.32 L1895.55 1212.32 L1894.96 1212.32 L1894.38 1212.32 L1893.79 1212.32 L1893.21 1212.32 L1892.62 1212.32 L1892.03 1212.32 L1891.45 1212.32 L1890.86 1212.32 L1890.27 1212.32 L1889.69 1212.32 L1889.1 1212.32 L1888.51 1212.32 L1887.93 1212.32 L1887.34 1212.32 L1886.76 1212.32 L1886.17 1212.32 L1885.58 1212.32 L1885 1212.32 L1884.41 1212.32 L1883.82 1212.32 L1883.24 1212.32 L1882.65 1212.32 L1882.06 1212.32 L1881.48 1212.32 L1880.89 1212.32 L1880.3 1212.32 L1879.72 1212.32 L1879.13 1212.32 L1878.55 1212.32 L1877.96 1212.32 L1877.37 1212.32 L1876.79 1212.32 L1876.2 1212.32 L1875.61 1212.32 L1875.03 1212.32 L1874.44 1212.32 L1873.85 1212.32 L1873.27 1212.32 L1872.68 1212.32 L1872.09 1212.32 L1871.51 1212.32 L1870.92 1212.32 L1870.34 1212.32 L1869.75 1212.32 L1869.16 1212.32 L1868.58 1212.32 L1867.99 1212.32 L1867.4 1212.32 L1866.82 1212.32 L1866.23 1212.32 L1865.64 1212.32 L1865.06 1212.32 L1864.47 1212.32 L1863.88 1212.32 L1863.3 1212.32 L1862.71 1212.32 L1862.13 1212.32 L1861.54 1212.32 L1860.95 1212.32 L1860.37 1212.32 L1859.78 1212.32 L1859.19 1212.32 L1858.61 1212.32 L1858.02 1212.32 L1857.43 1212.32 L1856.85 1212.32 L1856.26 1212.32 L1855.68 1212.32 L1855.09 1212.32 L1854.5 1212.32 L1853.92 1212.32 L1853.33 1212.32 L1852.74 1212.32 L1852.16 1212.32 L1851.57 1212.32 L1850.98 1212.32 L1850.4 1212.32 L1849.81 1212.32 L1849.22 1212.32 L1848.64 1212.32 L1848.05 1212.32 L1847.47 1212.32 L1846.88 1212.32 L1846.29 1212.32 L1845.71 1212.32 L1845.12 1212.32 L1844.53 1212.32 L1843.95 1212.32 L1843.36 1212.32 L1842.77 1212.32 L1842.19 1212.32 L1841.6 1212.32 L1841.01 1212.32 L1840.43 1212.32 L1839.84 1212.32 L1839.26 1212.32 L1838.67 1212.32 L1838.08 1212.32 L1837.5 1212.32 L1836.91 1212.32 L1836.32 1212.32 L1835.74 1212.32 L1835.15 1212.32 L1834.56 1212.32 L1833.98 1212.32 L1833.39 1212.32 L1832.81 1212.32 L1832.22 1212.32 L1831.63 1212.32 L1831.05 1212.32 L1830.46 1212.32 L1829.87 1212.32 L1829.29 1212.32 L1828.7 1212.32 L1828.11 1212.32 L1827.53 1212.32 L1826.94 1212.32 L1826.35 1212.32 L1825.77 1212.32 L1825.18 1212.32 L1824.6 1212.32 L1824.01 1212.32 L1823.42 1212.32 L1822.84 1212.32 L1822.25 1212.32 L1821.66 1212.32 L1821.08 1212.32 L1820.49 1212.32 L1819.9 1212.32 L1819.32 1212.32 L1818.73 1212.32 L1818.14 1212.32 L1817.56 1212.32 L1816.97 1212.32 L1816.39 1212.32 L1815.8 1212.32 L1815.21 1212.32 L1814.63 1212.32 L1814.04 1212.32 L1813.45 1212.32 L1812.87 1212.32 L1812.28 1212.32 L1811.69 1212.32 L1811.11 1212.32 L1810.52 1212.32 L1809.94 1212.32 L1809.35 1212.32 L1808.76 1212.32 L1808.18 1212.32 L1807.59 1212.32 L1807 1212.32 L1806.42 1212.32 L1805.83 1212.32 L1805.24 1212.32 L1804.66 1212.32 L1804.07 1212.32 L1803.48 1212.32 L1802.9 1212.32 L1802.31 1212.32 L1801.73 1212.32 L1801.14 1212.32 L1800.55 1212.32 L1799.97 1212.32 L1799.38 1212.32 L1798.79 1212.32 L1798.21 1212.32 L1797.62 1212.32 L1797.03 1212.32 L1796.45 1212.32 L1795.86 1212.32 L1795.27 1212.32 L1794.69 1212.32 L1794.1 1212.32 L1793.52 1212.32 L1792.93 1212.32 L1792.34 1212.32 L1791.76 1212.32 L1791.17 1212.32 L1790.58 1212.32 L1790 1212.32 L1789.41 1212.32 L1788.82 1212.32 L1788.24 1212.32 L1787.65 1212.32 L1787.06 1212.32 L1786.48 1212.32 L1785.89 1212.32 L1785.31 1212.32 L1784.72 1212.32 L1784.13 1212.32 L1783.55 1212.32 L1782.96 1212.32 L1782.37 1212.32 L1781.79 1212.32 L1781.2 1212.32 L1780.61 1212.32 L1780.03 1212.32 L1779.44 1212.32 L1778.86 1212.32 L1778.27 1212.32 L1777.68 1212.32 L1777.1 1212.32 L1776.51 1212.32 L1775.92 1212.32 L1775.34 1212.32 L1774.75 1212.32 L1774.16 1212.32 L1773.58 1212.32 L1772.99 1212.32 L1772.4 1212.32 L1771.82 1212.32 L1771.23 1212.32 L1770.65 1212.32 L1770.06 1212.32 L1769.47 1212.32 L1768.89 1212.32 L1768.3 1212.32 L1767.71 1212.32 L1767.13 1212.32 L1766.54 1212.32 L1765.95 1212.32 L1765.37 1212.32 L1764.78 1212.32 L1764.19 1212.32 L1763.61 1212.32 L1763.02 1212.32 L1762.44 1212.32 L1761.85 1212.32 L1761.26 1212.32 L1760.68 1212.32 L1760.09 1212.32 L1759.5 1212.32 L1758.92 1212.32 L1758.33 1212.32 L1757.74 1212.32 L1757.16 1212.32 L1756.57 1212.32 L1755.99 1212.32 L1755.4 1212.32 L1754.81 1212.32 L1754.23 1212.32 L1753.64 1212.32 L1753.05 1212.32 L1752.47 1212.32 L1751.88 1212.32 L1751.29 1212.32 L1750.71 1212.32 L1750.12 1212.32 L1749.53 1212.32 L1748.95 1212.32 L1748.36 1212.32 L1747.78 1212.32 L1747.19 1212.32 L1746.6 1212.32 L1746.02 1212.32 L1745.43 1212.32 L1744.84 1212.32 L1744.26 1212.32 L1743.67 1212.32 L1743.08 1212.32 L1742.5 1212.32 L1741.91 1212.32 L1741.32 1212.32 L1740.74 1212.32 L1740.15 1212.32 L1739.57 1212.32 L1738.98 1212.32 L1738.39 1212.32 L1737.81 1212.32 L1737.22 1212.32 L1736.63 1212.32 L1736.05 1212.32 L1735.46 1212.32 L1734.87 1212.32 L1734.29 1212.32 L1733.7 1212.32 L1733.11 1212.32 L1732.53 1212.32 L1731.94 1212.32 L1731.36 1212.32 L1730.77 1212.32 L1730.18 1212.32 L1729.6 1212.32 L1729.01 1212.32 L1728.42 1212.32 L1727.84 1212.32 L1727.25 1212.32 L1726.66 1212.32 L1726.08 1212.32 L1725.49 1212.32 L1724.91 1212.32 L1724.32 1212.32 L1723.73 1212.32 L1723.15 1212.32 L1722.56 1212.32 L1721.97 1212.32 L1721.39 1212.32 L1720.8 1212.32 L1720.21 1212.32 L1719.63 1212.32 L1719.04 1212.32 L1718.45 1212.32 L1717.87 1212.32 L1717.28 1212.32 L1716.7 1212.32 L1716.11 1212.32 L1715.52 1212.32 L1714.94 1212.32 L1714.35 1212.32 L1713.76 1212.32 L1713.18 1212.32 L1712.59 1212.32 L1712 1212.32 L1711.42 1212.32 L1710.83 1212.32 L1710.24 1212.32 L1709.66 1212.32 L1709.07 1212.32 L1708.49 1212.32 L1707.9 1212.32 L1707.31 1212.32 L1706.73 1212.32 L1706.14 1212.32 L1705.55 1212.32 L1704.97 1212.32 L1704.38 1212.32 L1703.79 1212.32 L1703.21 1212.32 L1702.62 1212.32 L1702.04 1212.32 L1701.45 1212.32 L1700.86 1212.32 L1700.28 1212.32 L1699.69 1212.32 L1699.1 1212.32 L1698.52 1212.32 L1697.93 1212.32 L1697.34 1212.32 L1696.76 1212.32 L1696.17 1212.32 L1695.58 1212.32 L1695 1212.32 L1694.41 1212.32 L1693.83 1212.32 L1693.24 1212.32 L1692.65 1212.32 L1692.07 1212.32 L1691.48 1212.32 L1690.89 1212.32 L1690.31 1212.32 L1689.72 1212.32 L1689.13 1212.32 L1688.55 1212.32 L1687.96 1212.32 L1687.37 1212.32 L1686.79 1212.32 L1686.2 1212.32 L1685.62 1212.32 L1685.03 1212.32 L1684.44 1212.32 L1683.86 1212.32 L1683.27 1212.32 L1682.68 1212.32 L1682.1 1212.32 L1681.51 1212.32 L1680.92 1212.32 L1680.34 1212.32 L1679.75 1212.32 L1679.17 1212.32 L1678.58 1212.32 L1677.99 1212.32 L1677.41 1212.32 L1676.82 1212.32 L1676.23 1212.32 L1675.65 1212.32 L1675.06 1212.32 L1674.47 1212.32 L1673.89 1212.32 L1673.3 1212.32 L1672.71 1212.32 L1672.13 1212.32 L1671.54 1212.32 L1670.96 1212.32 L1670.37 1212.32 L1669.78 1212.32 L1669.2 1212.32 L1668.61 1212.32 L1668.02 1212.32 L1667.44 1212.32 L1666.85 1212.32 L1666.26 1212.32 L1665.68 1212.32 L1665.09 1212.32 L1664.5 1212.32 L1663.92 1212.32 L1663.33 1212.32 L1662.75 1212.32 L1662.16 1212.32 L1661.57 1212.32 L1660.99 1212.32 L1660.4 1212.32 L1659.81 1212.32 L1659.23 1212.32 L1658.64 1212.32 L1658.05 1212.32 L1657.47 1212.32 L1656.88 1212.32 L1656.29 1212.32 L1655.71 1212.32 L1655.12 1212.32 L1654.54 1212.32 L1653.95 1212.32 L1653.36 1212.32 L1652.78 1212.32 L1652.19 1212.32 L1651.6 1212.32 L1651.02 1212.32 L1650.43 1212.32 L1649.84 1212.32 L1649.26 1212.32 L1648.67 1212.32 L1648.09 1212.32 L1647.5 1212.32 L1646.91 1212.32 L1646.33 1212.32 L1645.74 1212.32 L1645.15 1212.32 L1644.57 1212.32 L1643.98 1212.32 L1643.39 1212.32 L1642.81 1212.32 L1642.22 1212.32 L1641.63 1212.32 L1641.05 1212.32 L1640.46 1212.32 L1639.88 1212.32 L1639.29 1212.32 L1638.7 1212.32 L1638.12 1212.32 L1637.53 1212.32 L1636.94 1212.32 L1636.36 1212.32 L1635.77 1212.32 L1635.18 1212.32 L1634.6 1212.32 L1634.01 1212.32 L1633.42 1212.32 L1632.84 1212.32 L1632.25 1212.32 L1631.67 1212.32 L1631.08 1212.32 L1630.49 1212.32 L1629.91 1212.32 L1629.32 1212.32 L1628.73 1212.32 L1628.15 1212.32 L1627.56 1212.32 L1626.97 1212.32 L1626.39 1212.32 L1625.8 1212.32 L1625.22 1212.32 L1624.63 1212.32 L1624.04 1212.32 L1623.46 1212.32 L1622.87 1212.32 L1622.28 1212.32 L1621.7 1212.32 L1621.11 1212.32 L1620.52 1212.32 L1619.94 1212.32 L1619.35 1212.32 L1618.76 1212.32 L1618.18 1212.32 L1617.59 1212.32 L1617.01 1212.32 L1616.42 1212.32 L1615.83 1212.32 L1615.25 1212.32 L1614.66 1212.32 L1614.07 1212.32 L1613.49 1212.32 L1612.9 1212.32 L1612.31 1212.32 L1611.73 1212.32 L1611.14 1212.32 L1610.55 1212.32 L1609.97 1212.32 L1609.38 1212.32 L1608.8 1212.32 L1608.21 1212.32 L1607.62 1212.32 L1607.04 1212.32 L1606.45 1212.32 L1605.86 1212.32 L1605.28 1212.32 L1604.69 1212.32 L1604.1 1212.32 L1603.52 1212.32 L1602.93 1212.32 L1602.34 1212.32 L1601.76 1212.32 L1601.17 1212.32 L1600.59 1212.32 L1600 1212.32 L1599.41 1212.32 L1598.83 1212.32 L1598.24 1212.32 L1597.65 1212.32 L1597.07 1212.32 L1596.48 1212.32 L1595.89 1212.32 L1595.31 1212.32 L1594.72 1212.32 L1594.14 1212.32 L1593.55 1212.32 L1592.96 1212.32 L1592.38 1212.32 L1591.79 1212.32 L1591.2 1212.32 L1590.62 1212.32 L1590.03 1212.32 L1589.44 1212.32 L1588.86 1212.32 L1588.27 1212.32 L1587.68 1212.32 L1587.1 1212.32 L1586.51 1212.32 L1585.93 1212.32 L1585.34 1212.32 L1584.75 1212.32 L1584.17 1212.32 L1583.58 1212.32 L1582.99 1212.32 L1582.41 1212.32 L1581.82 1212.32 L1581.23 1212.32 L1580.65 1212.32 L1580.06 1212.32 L1579.47 1212.32 L1578.89 1212.32 L1578.3 1212.32 L1577.72 1212.32 L1577.13 1212.32 L1576.54 1212.32 L1575.96 1212.32 L1575.37 1212.32 L1574.78 1212.32 L1574.2 1212.32 L1573.61 1212.32 L1573.02 1212.32 L1572.44 1212.32 L1571.85 1212.32 L1571.27 1212.32 L1570.68 1212.32 L1570.09 1212.32 L1569.51 1212.32 L1568.92 1212.32 L1568.33 1212.32 L1567.75 1212.32 L1567.16 1212.32 L1566.57 1212.32 L1565.99 1212.32 L1565.4 1212.32 L1564.81 1212.32 L1564.23 1212.32 L1563.64 1212.32 L1563.06 1212.32 L1562.47 1212.32 L1561.88 1212.32 L1561.3 1212.32 L1560.71 1212.32 L1560.12 1212.32 L1559.54 1212.32 L1558.95 1212.32 L1558.36 1212.32 L1557.78 1212.32 L1557.19 1212.32 L1556.6 1212.32 L1556.02 1212.32 L1555.43 1212.32 L1554.85 1212.32 L1554.26 1212.32 L1553.67 1212.32 L1553.09 1212.32 L1552.5 1212.32 L1551.91 1212.32 L1551.33 1212.32 L1550.74 1212.32 L1550.15 1212.32 L1549.57 1212.32 L1548.98 1212.32 L1548.4 1212.32 L1547.81 1212.32 L1547.22 1212.32 L1546.64 1212.32 L1546.05 1212.32 L1545.46 1212.32 L1544.88 1212.32 L1544.29 1212.32 L1543.7 1212.32 L1543.12 1212.32 L1542.53 1212.32 L1541.94 1212.32 L1541.36 1212.32 L1540.77 1212.32 L1540.19 1212.32 L1539.6 1212.32 L1539.01 1212.32 L1538.43 1212.32 L1537.84 1212.32 L1537.25 1212.32 L1536.67 1212.32 L1536.08 1212.32 L1535.49 1212.32 L1534.91 1212.32 L1534.32 1212.32 L1533.73 1212.32 L1533.15 1212.32 L1532.56 1212.32 L1531.98 1212.32 L1531.39 1212.32 L1530.8 1212.32 L1530.22 1212.32 L1529.63 1212.32 L1529.04 1212.32 L1528.46 1212.32 L1527.87 1212.32 L1527.28 1212.32 L1526.7 1212.32 L1526.11 1212.32 L1525.52 1212.32 L1524.94 1212.32 L1524.35 1212.32 L1523.77 1212.32 L1523.18 1212.32 L1522.59 1212.32 L1522.01 1212.32 L1521.42 1212.32 L1520.83 1212.32 L1520.25 1212.32 L1519.66 1212.32 L1519.07 1212.32 L1518.49 1212.32 L1517.9 1212.32 L1517.32 1212.32 L1516.73 1212.32 L1516.14 1212.32 L1515.56 1212.32 L1514.97 1212.32 L1514.38 1212.32 L1513.8 1212.32 L1513.21 1212.32 L1512.62 1212.32 L1512.04 1212.32 L1511.45 1212.32 L1510.86 1212.32 L1510.28 1212.32 L1509.69 1212.32 L1509.11 1212.32 L1508.52 1212.32 L1507.93 1212.32 L1507.35 1212.32 L1506.76 1212.32 L1506.17 1212.32 L1505.59 1212.32 L1505 1212.32 L1504.41 1212.32 L1503.83 1212.32 L1503.24 1212.32 L1502.65 1212.32 L1502.07 1212.32 L1501.48 1212.32 L1500.9 1212.32 L1500.31 1212.32 L1499.72 1212.32 L1499.14 1212.32 L1498.55 1212.32 L1497.96 1212.32 L1497.38 1212.32 L1496.79 1212.32 L1496.2 1212.32 L1495.62 1212.32 L1495.03 1212.32 L1494.45 1212.32 L1493.86 1212.32 L1493.27 1212.32 L1492.69 1212.32 L1492.1 1212.32 L1491.51 1212.32 L1490.93 1212.32 L1490.34 1212.32 L1489.75 1212.32 L1489.17 1212.32 L1488.58 1212.32 L1487.99 1212.32 L1487.41 1212.32 L1486.82 1212.32 L1486.24 1212.32 L1485.65 1212.32 L1485.06 1212.32 L1484.48 1212.32 L1483.89 1212.32 L1483.3 1212.32 L1482.72 1212.32 L1482.13 1212.32 L1481.54 1212.32 L1480.96 1212.32 L1480.37 1212.32 L1479.78 1212.32 L1479.2 1212.32 L1478.61 1212.32 L1478.03 1212.32 L1477.44 1212.32 L1476.85 1212.32 L1476.27 1212.32 L1475.68 1212.32 L1475.09 1212.32 L1474.51 1212.32 L1473.92 1212.32 L1473.33 1212.32 L1472.75 1212.32 L1472.16 1212.32 L1471.57 1212.32 L1470.99 1212.32 L1470.4 1212.32 L1469.82 1212.32 L1469.23 1212.32 L1468.64 1212.32 L1468.06 1212.32 L1467.47 1212.32 L1466.88 1212.32 L1466.3 1212.32 L1465.71 1212.32 L1465.12 1212.32 L1464.54 1212.32 L1463.95 1212.32 L1463.37 1212.32 L1462.78 1212.32 L1462.19 1212.32 L1461.61 1212.32 L1461.02 1212.32 L1460.43 1212.32 L1459.85 1212.32 L1459.26 1212.32 L1458.67 1212.32 L1458.09 1212.32 L1457.5 1212.32 L1456.91 1212.32 L1456.33 1212.32 L1455.74 1212.32 L1455.16 1212.32 L1454.57 1212.32 L1453.98 1212.32 L1453.4 1212.32 L1452.81 1212.32 L1452.22 1212.32 L1451.64 1212.32 L1451.05 1212.32 L1450.46 1212.32 L1449.88 1212.32 L1449.29 1212.32 L1448.7 1212.32 L1448.12 1212.32 L1447.53 1212.32 L1446.95 1212.32 L1446.36 1212.32 L1445.77 1212.32 L1445.19 1212.32 L1444.6 1212.32 L1444.01 1212.32 L1443.43 1212.32 L1442.84 1212.32 L1442.25 1212.32 L1441.67 1212.32 L1441.08 1212.32 L1440.5 1212.32 L1439.91 1212.32 L1439.32 1212.32 L1438.74 1212.32 L1438.15 1212.32 L1437.56 1212.32 L1436.98 1212.32 L1436.39 1212.32 L1435.8 1212.32 L1435.22 1212.32 L1434.63 1212.32 L1434.04 1212.32 L1433.46 1212.32 L1432.87 1212.32 L1432.29 1212.32 L1431.7 1212.32 L1431.11 1212.32 L1430.53 1212.32 L1429.94 1212.32 L1429.35 1212.32 L1428.77 1212.32 L1428.18 1212.32 L1427.59 1212.32 L1427.01 1212.32 L1426.42 1212.32 L1425.83 1212.32 L1425.25 1212.32 L1424.66 1212.32 L1424.08 1212.32 L1423.49 1212.32 L1422.9 1212.32 L1422.32 1212.32 L1421.73 1212.32 L1421.14 1212.32 L1420.56 1212.32 L1419.97 1212.32 L1419.38 1212.32 L1418.8 1212.32 L1418.21 1212.32 L1417.63 1212.32 L1417.04 1212.32 L1416.45 1212.32 L1415.87 1212.32 L1415.28 1212.32 L1414.69 1212.32 L1414.11 1212.32 L1413.52 1212.32 L1412.93 1212.32 L1412.35 1212.32 L1411.76 1212.32 L1411.17 1212.32 L1410.59 1212.32 L1410 1212.32 L1409.42 1212.32 L1408.83 1212.32 L1408.24 1212.32 L1407.66 1212.32 L1407.07 1212.32 L1406.48 1212.32 L1405.9 1212.32 L1405.31 1212.32 L1404.72 1212.32 L1404.14 1212.32 L1403.55 1212.32 L1402.96 1212.32 L1402.38 1212.32 L1401.79 1212.32 L1401.21 1212.32 L1400.62 1212.32 L1400.03 1212.32 L1399.45 1212.32 L1398.86 1212.32 L1398.27 1212.32 L1397.69 1212.32 L1397.1 1212.32 L1396.51 1212.32 L1395.93 1212.32 L1395.34 1212.32 L1394.75 1212.32 L1394.17 1212.32 L1393.58 1212.32 L1393 1212.32 L1392.41 1212.32 L1391.82 1212.32 L1391.24 1212.32 L1390.65 1212.32 L1390.06 1212.32 L1389.48 1212.32 L1388.89 1212.32 L1388.3 1212.32 L1387.72 1212.32 L1387.13 1212.32 L1386.55 1212.32 L1385.96 1212.32 L1385.37 1212.32 L1384.79 1212.32 L1384.2 1212.32 L1383.61 1212.32 L1383.03 1212.32 L1382.44 1212.32 L1381.85 1212.32 L1381.27 1212.32 L1380.68 1212.32 L1380.09 1212.32 L1379.51 1212.32 L1378.92 1212.32 L1378.34 1212.32 L1377.75 1212.32 L1377.16 1212.32 L1376.58 1212.32 L1375.99 1212.32 L1375.4 1212.32 L1374.82 1212.32 L1374.23 1212.32 L1373.64 1212.32 L1373.06 1212.32 L1372.47 1212.32 L1371.88 1212.32 L1371.3 1212.32 L1370.71 1212.32 L1370.13 1212.32 L1369.54 1212.32 L1368.95 1212.32 L1368.37 1212.32 L1367.78 1212.32 L1367.19 1212.32 L1366.61 1212.32 L1366.02 1212.32 L1365.43 1212.32 L1364.85 1212.32 L1364.26 1212.32 L1363.68 1212.32 L1363.09 1212.32 L1362.5 1212.32 L1361.92 1212.32 L1361.33 1212.32 L1360.74 1212.32 L1360.16 1212.32 L1359.57 1212.32 L1358.98 1212.32 L1358.4 1212.32 L1357.81 1212.32 L1357.22 1212.32 L1356.64 1212.32 L1356.05 1212.32 L1355.47 1212.32 L1354.88 1212.32 L1354.29 1212.32 L1353.71 1212.32 L1353.12 1212.32 L1352.53 1212.32 L1351.95 1212.32 L1351.36 1212.32 L1350.77 1212.32 L1350.19 1212.32 L1349.6 1212.32 L1349.01 1212.32 L1348.43 1212.32 L1347.84 1212.32 L1347.26 1212.32 L1346.67 1212.32 L1346.08 1212.32 L1345.5 1212.32 L1344.91 1212.32 L1344.32 1212.32 L1343.74 1212.32 L1343.15 1212.32 L1342.56 1212.32 L1341.98 1212.32 L1341.39 1212.32 L1340.8 1212.32 L1340.22 1212.32 L1339.63 1212.32 L1339.05 1212.32 L1338.46 1212.32 L1337.87 1212.32 L1337.29 1212.32 L1336.7 1212.32 L1336.11 1212.32 L1335.53 1212.32 L1334.94 1212.32 L1334.35 1212.32 L1333.77 1212.32 L1333.18 1212.32 L1332.6 1212.32 L1332.01 1212.32 L1331.42 1212.32 L1330.84 1212.32 L1330.25 1212.32 L1329.66 1212.32 L1329.08 1212.32 L1328.49 1212.32 L1327.9 1212.32 L1327.32 1212.32 L1326.73 1212.32 L1326.14 1212.32 L1325.56 1212.32 L1324.97 1212.32 L1324.39 1212.32 L1323.8 1212.32 L1323.21 1212.32 L1322.63 1212.32 L1322.04 1212.32 L1321.45 1212.32 L1320.87 1212.32 L1320.28 1212.32 L1319.69 1212.32 L1319.11 1212.32 L1318.52 1212.32 L1317.93 1212.32 L1317.35 1212.32 L1316.76 1212.32 L1316.18 1212.32 L1315.59 1212.32 L1315 1212.32 L1314.42 1212.32 L1313.83 1212.32 L1313.24 1212.32 L1312.66 1212.32 L1312.07 1212.32 L1311.48 1212.32 L1310.9 1212.32 L1310.31 1212.32 L1309.73 1212.32 L1309.14 1212.32 L1308.55 1212.32 L1307.97 1212.32 L1307.38 1212.32 L1306.79 1212.32 L1306.21 1212.32 L1305.62 1212.32 L1305.03 1212.32 L1304.45 1212.32 L1303.86 1212.32 L1303.27 1212.32 L1302.69 1212.32 L1302.1 1212.32 L1301.52 1212.32 L1300.93 1212.32 L1300.34 1212.32 L1299.76 1212.32 L1299.17 1212.32 L1298.58 1212.32 L1298 1212.32 L1297.41 1212.32 L1296.82 1212.32 L1296.24 1212.32 L1295.65 1212.32 L1295.06 1212.32 L1294.48 1212.32 L1293.89 1212.32 L1293.31 1212.32 L1292.72 1212.32 L1292.13 1212.32 L1291.55 1212.32 L1290.96 1212.32 L1290.37 1212.32 L1289.79 1212.32 L1289.2 1212.32 L1288.61 1212.32 L1288.03 1212.32 L1287.44 1212.32 L1286.86 1212.32 L1286.27 1212.32 L1285.68 1212.32 L1285.1 1212.32 L1284.51 1212.32 L1283.92 1212.32 L1283.34 1212.32 L1282.75 1212.32 L1282.16 1212.32 L1281.58 1212.32 L1280.99 1212.32 L1280.4 1212.32 L1279.82 1212.32 L1279.23 1212.32 L1278.65 1212.32 L1278.06 1212.32 L1277.47 1212.32 L1276.89 1212.32 L1276.3 1212.32 L1275.71 1212.32 L1275.13 1212.32 L1274.54 1212.32 L1273.95 1212.32 L1273.37 1212.32 L1272.78 1212.32 L1272.19 1212.32 L1271.61 1212.32 L1271.02 1212.32 L1270.44 1212.32 L1269.85 1212.32 L1269.26 1212.32 L1268.68 1212.32 L1268.09 1212.32 L1267.5 1212.32 L1266.92 1212.32 L1266.33 1212.32 L1265.74 1212.32 L1265.16 1212.32 L1264.57 1212.32 L1263.98 1212.32 L1263.4 1212.32 L1262.81 1212.32 L1262.23 1212.32 L1261.64 1212.32 L1261.05 1212.32 L1260.47 1212.32 L1259.88 1212.32 L1259.29 1212.32 L1258.71 1212.32 L1258.12 1212.32 L1257.53 1212.32 L1256.95 1212.32 L1256.36 1212.32 L1255.78 1212.32 L1255.19 1212.32 L1254.6 1212.32 L1254.02 1212.32 L1253.43 1212.32 L1252.84 1212.32 L1252.26 1212.32 L1251.67 1212.32 L1251.08 1212.32 L1250.5 1212.32 L1249.91 1212.32 L1249.32 1212.32 L1248.74 1212.32 L1248.15 1212.32 L1247.57 1212.32 L1246.98 1212.32 L1246.39 1212.32 L1245.81 1212.32 L1245.22 1212.32 L1244.63 1212.32 L1244.05 1212.32 L1243.46 1212.32 L1242.87 1212.32 L1242.29 1212.32 L1241.7 1212.32 L1241.11 1212.32 L1240.53 1212.32 L1239.94 1212.32 L1239.36 1212.32 L1238.77 1212.32 L1238.18 1212.32 L1237.6 1212.32 L1237.01 1212.32 L1236.42 1212.32 L1235.84 1212.32 L1235.25 1212.32 L1234.66 1212.32 L1234.08 1212.32 L1233.49 1212.32 L1232.91 1212.32 L1232.32 1212.32 L1231.73 1212.32 L1231.15 1212.32 L1230.56 1212.32 L1229.97 1212.32 L1229.39 1212.32 L1228.8 1212.32 L1228.21 1212.32 L1227.63 1212.32 L1227.04 1212.32 L1226.45 1212.32 L1225.87 1212.32 L1225.28 1212.32 L1224.7 1212.32 L1224.11 1212.32 L1223.52 1212.32 L1222.94 1212.32 L1222.35 1212.32 L1221.76 1212.32 L1221.18 1212.32 L1220.59 1212.32 L1220 1212.32 L1219.42 1212.32 L1218.83 1212.32 L1218.24 1212.32 L1217.66 1212.32 L1217.07 1212.32 L1216.49 1212.32 L1215.9 1212.32 L1215.31 1212.32 L1214.73 1212.32 L1214.14 1212.32 L1213.55 1212.32 L1212.97 1212.32 L1212.38 1212.32 L1211.79 1212.32 L1211.21 1212.32 L1210.62 1212.32 L1210.03 1212.32 L1209.45 1212.32 L1208.86 1212.32 L1208.28 1212.32 L1207.69 1212.32 L1207.1 1212.32 L1206.52 1212.32 L1205.93 1212.32 L1205.34 1212.32 L1204.76 1212.32 L1204.17 1212.32 L1203.58 1212.32 L1203 1212.32 L1202.41 1212.32 L1201.83 1212.32 L1201.24 1212.32 L1200.65 1212.32 L1200.07 1212.32 L1199.48 1212.32 L1198.89 1212.32 L1198.31 1212.32 L1197.72 1212.32 L1197.13 1212.32 L1196.55 1212.32 L1195.96 1212.32 L1195.37 1212.32 L1194.79 1212.32 L1194.2 1212.32 L1193.62 1212.32 L1193.03 1212.32 L1192.44 1212.32 L1191.86 1212.32 L1191.27 1212.32 L1190.68 1212.32 L1190.1 1212.32 L1189.51 1212.32 L1188.92 1212.32 L1188.34 1212.32 L1187.75 1212.32 L1187.16 1212.32 L1186.58 1212.32 L1185.99 1212.32 L1185.41 1212.32 L1184.82 1212.32 L1184.23 1212.32 L1183.65 1212.32 L1183.06 1212.32 L1182.47 1212.32 L1181.89 1212.32 L1181.3 1212.32 L1180.71 1212.32 L1180.13 1212.32 L1179.54 1212.32 L1178.96 1212.32 L1178.37 1212.32 L1177.78 1212.32 L1177.2 1212.32 L1176.61 1212.32 L1176.02 1212.32 L1175.44 1212.32 L1174.85 1212.32 L1174.26 1212.32 L1173.68 1212.32 L1173.09 1212.32 L1172.5 1212.32 L1171.92 1212.32 L1171.33 1212.32 L1170.75 1212.32 L1170.16 1212.32 L1169.57 1212.32 L1168.99 1212.32 L1168.4 1212.32 L1167.81 1212.32 L1167.23 1212.32 L1166.64 1212.32 L1166.05 1212.32 L1165.47 1212.32 L1164.88 1212.32 L1164.29 1212.32 L1163.71 1212.32 L1163.12 1212.32 L1162.54 1212.32 L1161.95 1212.32 L1161.36 1212.32 L1160.78 1212.32 L1160.19 1212.32 L1159.6 1212.32 L1159.02 1212.32 L1158.43 1212.32 L1157.84 1212.32 L1157.26 1212.32 L1156.67 1212.32 L1156.09 1212.32 L1155.5 1212.32 L1154.91 1212.32 L1154.33 1212.32 L1153.74 1212.32 L1153.15 1212.32 L1152.57 1212.32 L1151.98 1212.32 L1151.39 1212.32 L1150.81 1212.32 L1150.22 1212.32 L1149.63 1212.32 L1149.05 1212.32 L1148.46 1212.32 L1147.88 1212.32 L1147.29 1212.32 L1146.7 1212.32 L1146.12 1212.32 L1145.53 1212.32 L1144.94 1212.32 L1144.36 1212.32 L1143.77 1212.32 L1143.18 1212.32 L1142.6 1212.32 L1142.01 1212.32 L1141.42 1212.32 L1140.84 1212.32 L1140.25 1212.32 L1139.67 1212.32 L1139.08 1212.32 L1138.49 1212.32 L1137.91 1212.32 L1137.32 1212.32 L1136.73 1212.32 L1136.15 1212.32 L1135.56 1212.32 L1134.97 1212.32 L1134.39 1212.32 L1133.8 1212.32 L1133.21 1212.32 L1132.63 1212.32 L1132.04 1212.32 L1131.46 1212.32 L1130.87 1212.32 L1130.28 1212.32 L1129.7 1212.32 L1129.11 1212.32 L1128.52 1212.32 L1127.94 1212.32 L1127.35 1212.32 L1126.76 1212.32 L1126.18 1212.32 L1125.59 1212.32 L1125.01 1212.32 L1124.42 1212.32 L1123.83 1212.32 L1123.25 1212.32 L1122.66 1212.32 L1122.07 1212.32 L1121.49 1212.32 L1120.9 1212.32 L1120.31 1212.32 L1119.73 1212.32 L1119.14 1212.32 L1118.55 1212.32 L1117.97 1212.32 L1117.38 1212.32 L1116.8 1212.32 L1116.21 1212.32 L1115.62 1212.32 L1115.04 1212.32 L1114.45 1212.32 L1113.86 1212.32 L1113.28 1212.32 L1112.69 1212.32 L1112.1 1212.32 L1111.52 1212.32 L1110.93 1212.32 L1110.34 1212.32 L1109.76 1212.32 L1109.17 1212.32 L1108.59 1212.32 L1108 1212.32 L1107.41 1212.32 L1106.83 1212.32 L1106.24 1212.32 L1105.65 1212.32 L1105.07 1212.32 L1104.48 1212.32 L1103.89 1212.32 L1103.31 1212.32 L1102.72 1212.32 L1102.14 1212.32 L1101.55 1212.32 L1100.96 1212.32 L1100.38 1212.32 L1099.79 1212.32 L1099.2 1212.32 L1098.62 1212.32 L1098.03 1212.32 L1097.44 1212.32 L1096.86 1212.32 L1096.27 1212.32 L1095.68 1212.32 L1095.1 1212.32 L1094.51 1212.32 L1093.93 1212.32 L1093.34 1212.32 L1092.75 1212.32 L1092.17 1212.32 L1091.58 1212.32 L1090.99 1212.32 L1090.41 1212.32 L1089.82 1212.32 L1089.23 1212.32 L1088.65 1212.32 L1088.06 1212.32 L1087.47 1212.32 L1086.89 1212.32 L1086.3 1212.32 L1085.72 1212.32 L1085.13 1212.32 L1084.54 1212.32 L1083.96 1212.32 L1083.37 1212.32 L1082.78 1212.32 L1082.2 1212.32 L1081.61 1212.32 L1081.02 1212.32 L1080.44 1212.32 L1079.85 1212.32 L1079.26 1212.32 L1078.68 1212.32 L1078.09 1212.32 L1077.51 1212.32 L1076.92 1212.32 L1076.33 1212.32 L1075.75 1212.32 L1075.16 1212.32 L1074.57 1212.32 L1073.99 1212.32 L1073.4 1212.32 L1072.81 1212.32 L1072.23 1212.32 L1071.64 1212.32 L1071.06 1212.32 L1070.47 1212.32 L1069.88 1212.32 L1069.3 1212.32 L1068.71 1212.32 L1068.12 1212.32 L1067.54 1212.32 L1066.95 1212.32 L1066.36 1212.32 L1065.78 1212.32 L1065.19 1212.32 L1064.6 1212.32 L1064.02 1212.32 L1063.43 1212.32 L1062.85 1212.32 L1062.26 1212.32 L1061.67 1212.32 L1061.09 1212.32 L1060.5 1212.32 L1059.91 1212.32 L1059.33 1212.32 L1058.74 1212.32 L1058.15 1212.32 L1057.57 1212.32 L1056.98 1212.32 L1056.39 1212.32 L1055.81 1212.32 L1055.22 1212.32 L1054.64 1212.32 L1054.05 1212.32 L1053.46 1212.32 L1052.88 1212.32 L1052.29 1212.32 L1051.7 1212.32 L1051.12 1212.32 L1050.53 1212.32 L1049.94 1212.32 L1049.36 1212.32 L1048.77 1212.32 L1048.19 1212.32 L1047.6 1212.32 L1047.01 1212.32 L1046.43 1212.32 L1045.84 1212.32 L1045.25 1212.32 L1044.67 1212.32 L1044.08 1212.32 L1043.49 1212.32 L1042.91 1212.32 L1042.32 1212.32 L1041.73 1212.32 L1041.15 1212.32 L1040.56 1212.32 L1039.98 1212.32 L1039.39 1212.32 L1038.8 1212.32 L1038.22 1212.32 L1037.63 1212.32 L1037.04 1212.32 L1036.46 1212.32 L1035.87 1212.32 L1035.28 1212.32 L1034.7 1212.32 L1034.11 1212.32 L1033.52 1212.32 L1032.94 1212.32 L1032.35 1212.32 L1031.77 1212.32 L1031.18 1212.32 L1030.59 1212.32 L1030.01 1212.32 L1029.42 1212.32 L1028.83 1212.32 L1028.25 1212.32 L1027.66 1212.32 L1027.07 1212.32 L1026.49 1212.32 L1025.9 1212.32 L1025.32 1212.32 L1024.73 1212.32 L1024.14 1212.32 L1023.56 1212.32 L1022.97 1212.32 L1022.38 1212.32 L1021.8 1212.32 L1021.21 1212.32 L1020.62 1212.32 L1020.04 1212.32 L1019.45 1212.32 L1018.86 1212.32 L1018.28 1212.32 L1017.69 1212.32 L1017.11 1212.32 L1016.52 1212.32 L1015.93 1212.32 L1015.35 1212.32 L1014.76 1212.32 L1014.17 1212.32 L1013.59 1212.32 L1013 1212.32 L1012.41 1212.32 L1011.83 1212.32 L1011.24 1212.32 L1010.65 1212.32 L1010.07 1212.32 L1009.48 1212.32 L1008.9 1212.32 L1008.31 1212.32 L1007.72 1212.32 L1007.14 1212.32 L1006.55 1212.32 L1005.96 1212.32 L1005.38 1212.32 L1004.79 1212.32 L1004.2 1212.32 L1003.62 1212.32 L1003.03 1212.32 L1002.44 1212.32 L1001.86 1212.32 L1001.27 1212.32 L1000.69 1212.32 L1000.1 1212.32 L999.513 1212.32 L998.926 1212.32 L998.34 1212.32 L997.754 1212.32 L997.167 1212.32 L996.581 1212.32 L995.994 1212.32 L995.408 1212.32 L994.822 1212.32 L994.235 1212.32 L993.649 1212.32 L993.062 1212.32 L992.476 1212.32 L991.889 1212.32 L991.303 1212.32 L990.717 1212.32 L990.13 1212.32 L989.544 1212.32 L988.957 1212.32 L988.371 1212.32 L987.785 1212.32 L987.198 1212.32 L986.612 1212.32 L986.025 1212.32  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.43 986.612,1212.43 987.198,1212.43 987.785,1212.43 988.371,1212.43 988.957,1212.43 989.544,1212.43 990.13,1212.43 990.717,1212.43 991.303,1212.43 991.889,1212.43 992.476,1212.43 993.062,1212.43 993.649,1212.43 994.235,1212.43 994.822,1212.43 995.408,1212.43 995.994,1212.43 996.581,1212.43 997.167,1212.43 997.754,1212.43 998.34,1212.43 998.926,1212.43 999.513,1212.43 1000.1,1212.43 1000.69,1212.43 1001.27,1212.43 1001.86,1212.43 1002.44,1212.43 1003.03,1212.43 1003.62,1212.43 1004.2,1212.43 1004.79,1212.43 1005.38,1212.43 1005.96,1212.43 1006.55,1212.43 1007.14,1212.43 1007.72,1212.43 1008.31,1212.43 1008.9,1212.43 1009.48,1212.43 1010.07,1212.43 1010.65,1212.43 1011.24,1212.43 1011.83,1212.43 1012.41,1212.43 1013,1212.43 1013.59,1212.43 1014.17,1212.43 1014.76,1212.43 1015.35,1212.43 1015.93,1212.43 1016.52,1212.43 1017.11,1212.43 1017.69,1212.43 1018.28,1212.43 1018.86,1212.43 1019.45,1212.43 1020.04,1212.43 1020.62,1212.43 1021.21,1212.43 1021.8,1212.43 1022.38,1212.43 1022.97,1212.43 1023.56,1212.43 1024.14,1212.43 1024.73,1212.43 1025.32,1212.43 1025.9,1212.43 1026.49,1212.43 1027.07,1212.43 1027.66,1212.43 1028.25,1212.43 1028.83,1212.43 1029.42,1212.43 1030.01,1212.43 1030.59,1212.43 1031.18,1212.43 1031.77,1212.43 1032.35,1212.43 1032.94,1212.43 1033.52,1212.43 1034.11,1212.43 1034.7,1212.43 1035.28,1212.43 1035.87,1212.43 1036.46,1212.43 1037.04,1212.43 1037.63,1212.43 1038.22,1212.43 1038.8,1212.43 1039.39,1212.43 1039.98,1212.43 1040.56,1212.43 1041.15,1212.43 1041.73,1212.43 1042.32,1212.43 1042.91,1212.43 1043.49,1212.43 1044.08,1212.43 1044.67,1212.43 1045.25,1212.43 1045.84,1212.43 1046.43,1212.43 1047.01,1212.43 1047.6,1212.43 1048.19,1212.43 1048.77,1212.43 1049.36,1212.43 1049.94,1212.43 1050.53,1212.43 1051.12,1212.43 1051.7,1212.43 1052.29,1212.43 1052.88,1212.43 1053.46,1212.43 1054.05,1212.43 1054.64,1212.43 1055.22,1212.43 1055.81,1212.43 1056.39,1212.43 1056.98,1212.43 1057.57,1212.43 1058.15,1212.43 1058.74,1212.43 1059.33,1212.43 1059.91,1212.43 1060.5,1212.43 1061.09,1212.43 1061.67,1212.43 1062.26,1212.43 1062.85,1212.43 1063.43,1212.43 1064.02,1212.43 1064.6,1212.43 1065.19,1212.43 1065.78,1212.43 1066.36,1212.43 1066.95,1212.43 1067.54,1212.43 1068.12,1212.43 1068.71,1212.43 1069.3,1212.43 1069.88,1212.43 1070.47,1212.43 1071.06,1212.43 1071.64,1212.43 1072.23,1212.43 1072.81,1212.43 1073.4,1212.43 1073.99,1212.43 1074.57,1212.43 1075.16,1212.43 1075.75,1212.43 1076.33,1212.43 1076.92,1212.43 1077.51,1212.43 1078.09,1212.43 1078.68,1212.43 1079.26,1212.43 1079.85,1212.43 1080.44,1212.43 1081.02,1212.43 1081.61,1212.43 1082.2,1212.43 1082.78,1212.43 1083.37,1212.43 1083.96,1212.43 1084.54,1212.43 1085.13,1212.43 1085.72,1212.43 1086.3,1212.43 1086.89,1212.43 1087.47,1212.43 1088.06,1212.43 1088.65,1212.43 1089.23,1212.43 1089.82,1212.43 1090.41,1212.43 1090.99,1212.43 1091.58,1212.43 1092.17,1212.43 1092.75,1212.43 1093.34,1212.43 1093.93,1212.43 1094.51,1212.43 1095.1,1212.43 1095.68,1212.43 1096.27,1212.43 1096.86,1212.43 1097.44,1212.43 1098.03,1212.43 1098.62,1212.43 1099.2,1212.43 1099.79,1212.43 1100.38,1212.43 1100.96,1212.43 1101.55,1212.43 1102.14,1212.43 1102.72,1212.43 1103.31,1212.43 1103.89,1212.43 1104.48,1212.43 1105.07,1212.43 1105.65,1212.43 1106.24,1212.43 1106.83,1212.43 1107.41,1212.43 1108,1212.43 1108.59,1212.43 1109.17,1212.43 1109.76,1212.43 1110.34,1212.43 1110.93,1212.43 1111.52,1212.43 1112.1,1212.43 1112.69,1212.43 1113.28,1212.43 1113.86,1212.43 1114.45,1212.43 1115.04,1212.43 1115.62,1212.43 1116.21,1212.43 1116.8,1212.43 1117.38,1212.43 1117.97,1212.43 1118.55,1212.43 1119.14,1212.43 1119.73,1212.43 1120.31,1212.43 1120.9,1212.43 1121.49,1212.43 1122.07,1212.43 1122.66,1212.43 1123.25,1212.43 1123.83,1212.43 1124.42,1212.43 1125.01,1212.43 1125.59,1212.43 1126.18,1212.43 1126.76,1212.43 1127.35,1212.43 1127.94,1212.43 1128.52,1212.43 1129.11,1212.43 1129.7,1212.43 1130.28,1212.43 1130.87,1212.43 1131.46,1212.43 1132.04,1212.43 1132.63,1212.43 1133.21,1212.43 1133.8,1212.43 1134.39,1212.43 1134.97,1212.43 1135.56,1212.43 1136.15,1212.43 1136.73,1212.43 1137.32,1212.43 1137.91,1212.43 1138.49,1212.43 1139.08,1212.43 1139.67,1212.43 1140.25,1212.43 1140.84,1212.43 1141.42,1212.43 1142.01,1212.43 1142.6,1212.43 1143.18,1212.43 1143.77,1212.43 1144.36,1212.43 1144.94,1212.43 1145.53,1212.43 1146.12,1212.43 1146.7,1212.43 1147.29,1212.43 1147.88,1212.43 1148.46,1212.43 1149.05,1212.43 1149.63,1212.43 1150.22,1212.43 1150.81,1212.43 1151.39,1212.43 1151.98,1212.43 1152.57,1212.43 1153.15,1212.43 1153.74,1212.43 1154.33,1212.43 1154.91,1212.43 1155.5,1212.43 1156.09,1212.43 1156.67,1212.43 1157.26,1212.43 1157.84,1212.43 1158.43,1212.43 1159.02,1212.43 1159.6,1212.43 1160.19,1212.43 1160.78,1212.43 1161.36,1212.43 1161.95,1212.43 1162.54,1212.43 1163.12,1212.43 1163.71,1212.43 1164.29,1212.43 1164.88,1212.43 1165.47,1212.43 1166.05,1212.43 1166.64,1212.43 1167.23,1212.43 1167.81,1212.43 1168.4,1212.43 1168.99,1212.43 1169.57,1212.43 1170.16,1212.43 1170.75,1212.43 1171.33,1212.43 1171.92,1212.43 1172.5,1212.43 1173.09,1212.43 1173.68,1212.43 1174.26,1212.43 1174.85,1212.43 1175.44,1212.43 1176.02,1212.43 1176.61,1212.43 1177.2,1212.43 1177.78,1212.43 1178.37,1212.43 1178.96,1212.43 1179.54,1212.43 1180.13,1212.43 1180.71,1212.43 1181.3,1212.43 1181.89,1212.43 1182.47,1212.43 1183.06,1212.43 1183.65,1212.43 1184.23,1212.43 1184.82,1212.43 1185.41,1212.43 1185.99,1212.43 1186.58,1212.43 1187.16,1212.43 1187.75,1212.43 1188.34,1212.43 1188.92,1212.43 1189.51,1212.43 1190.1,1212.43 1190.68,1212.43 1191.27,1212.43 1191.86,1212.43 1192.44,1212.43 1193.03,1212.43 1193.62,1212.43 1194.2,1212.43 1194.79,1212.43 1195.37,1212.43 1195.96,1212.43 1196.55,1212.43 1197.13,1212.43 1197.72,1212.43 1198.31,1212.43 1198.89,1212.43 1199.48,1212.43 1200.07,1212.43 1200.65,1212.43 1201.24,1212.43 1201.83,1212.43 1202.41,1212.43 1203,1212.43 1203.58,1212.43 1204.17,1212.43 1204.76,1212.43 1205.34,1212.43 1205.93,1212.43 1206.52,1212.43 1207.1,1212.43 1207.69,1212.43 1208.28,1212.43 1208.86,1212.43 1209.45,1212.43 1210.03,1212.43 1210.62,1212.43 1211.21,1212.43 1211.79,1212.43 1212.38,1212.43 1212.97,1212.43 1213.55,1212.43 1214.14,1212.43 1214.73,1212.43 1215.31,1212.43 1215.9,1212.43 1216.49,1212.43 1217.07,1212.43 1217.66,1212.43 1218.24,1212.43 1218.83,1212.43 1219.42,1212.43 1220,1212.43 1220.59,1212.43 1221.18,1212.43 1221.76,1212.43 1222.35,1212.43 1222.94,1212.43 1223.52,1212.43 1224.11,1212.43 1224.7,1212.43 1225.28,1212.43 1225.87,1212.43 1226.45,1212.43 1227.04,1212.43 1227.63,1212.43 1228.21,1212.43 1228.8,1212.43 1229.39,1212.43 1229.97,1212.43 1230.56,1212.43 1231.15,1212.43 1231.73,1212.43 1232.32,1212.43 1232.91,1212.43 1233.49,1212.43 1234.08,1212.43 1234.66,1212.43 1235.25,1212.43 1235.84,1212.43 1236.42,1212.43 1237.01,1212.43 1237.6,1212.43 1238.18,1212.43 1238.77,1212.43 1239.36,1212.43 1239.94,1212.43 1240.53,1212.43 1241.11,1212.43 1241.7,1212.43 1242.29,1212.43 1242.87,1212.43 1243.46,1212.43 1244.05,1212.43 1244.63,1212.43 1245.22,1212.43 1245.81,1212.43 1246.39,1212.43 1246.98,1212.43 1247.57,1212.43 1248.15,1212.43 1248.74,1212.43 1249.32,1212.43 1249.91,1212.43 1250.5,1212.43 1251.08,1212.43 1251.67,1212.43 1252.26,1212.43 1252.84,1212.43 1253.43,1212.43 1254.02,1212.43 1254.6,1212.43 1255.19,1212.43 1255.78,1212.43 1256.36,1212.43 1256.95,1212.43 1257.53,1212.43 1258.12,1212.43 1258.71,1212.43 1259.29,1212.43 1259.88,1212.43 1260.47,1212.43 1261.05,1212.43 1261.64,1212.43 1262.23,1212.43 1262.81,1212.43 1263.4,1212.43 1263.98,1212.43 1264.57,1212.43 1265.16,1212.43 1265.74,1212.43 1266.33,1212.43 1266.92,1212.43 1267.5,1212.43 1268.09,1212.43 1268.68,1212.43 1269.26,1212.43 1269.85,1212.43 1270.44,1212.43 1271.02,1212.43 1271.61,1212.43 1272.19,1212.43 1272.78,1212.43 1273.37,1212.43 1273.95,1212.43 1274.54,1212.43 1275.13,1212.43 1275.71,1212.43 1276.3,1212.43 1276.89,1212.43 1277.47,1212.43 1278.06,1212.43 1278.65,1212.43 1279.23,1212.43 1279.82,1212.43 1280.4,1212.43 1280.99,1212.43 1281.58,1212.43 1282.16,1212.43 1282.75,1212.43 1283.34,1212.43 1283.92,1212.43 1284.51,1212.43 1285.1,1212.43 1285.68,1212.43 1286.27,1212.43 1286.86,1212.43 1287.44,1212.43 1288.03,1212.43 1288.61,1212.43 1289.2,1212.43 1289.79,1212.43 1290.37,1212.43 1290.96,1212.43 1291.55,1212.43 1292.13,1212.43 1292.72,1212.43 1293.31,1212.43 1293.89,1212.43 1294.48,1212.43 1295.06,1212.43 1295.65,1212.43 1296.24,1212.43 1296.82,1212.43 1297.41,1212.43 1298,1212.43 1298.58,1212.43 1299.17,1212.43 1299.76,1212.43 1300.34,1212.43 1300.93,1212.43 1301.52,1212.43 1302.1,1212.43 1302.69,1212.43 1303.27,1212.43 1303.86,1212.43 1304.45,1212.43 1305.03,1212.43 1305.62,1212.43 1306.21,1212.43 1306.79,1212.43 1307.38,1212.43 1307.97,1212.43 1308.55,1212.43 1309.14,1212.43 1309.73,1212.43 1310.31,1212.43 1310.9,1212.43 1311.48,1212.43 1312.07,1212.43 1312.66,1212.43 1313.24,1212.43 1313.83,1212.43 1314.42,1212.43 1315,1212.43 1315.59,1212.43 1316.18,1212.43 1316.76,1212.43 1317.35,1212.43 1317.93,1212.43 1318.52,1212.43 1319.11,1212.43 1319.69,1212.43 1320.28,1212.43 1320.87,1212.43 1321.45,1212.43 1322.04,1212.43 1322.63,1212.43 1323.21,1212.43 1323.8,1212.43 1324.39,1212.43 1324.97,1212.43 1325.56,1212.43 1326.14,1212.43 1326.73,1212.43 1327.32,1212.43 1327.9,1212.43 1328.49,1212.43 1329.08,1212.43 1329.66,1212.43 1330.25,1212.43 1330.84,1212.43 1331.42,1212.43 1332.01,1212.43 1332.6,1212.43 1333.18,1212.43 1333.77,1212.43 1334.35,1212.43 1334.94,1212.43 1335.53,1212.43 1336.11,1212.43 1336.7,1212.43 1337.29,1212.43 1337.87,1212.43 1338.46,1212.43 1339.05,1212.43 1339.63,1212.43 1340.22,1212.43 1340.8,1212.43 1341.39,1212.43 1341.98,1212.43 1342.56,1212.43 1343.15,1212.43 1343.74,1212.43 1344.32,1212.43 1344.91,1212.43 1345.5,1212.43 1346.08,1212.43 1346.67,1212.43 1347.26,1212.43 1347.84,1212.43 1348.43,1212.43 1349.01,1212.43 1349.6,1212.43 1350.19,1212.43 1350.77,1212.43 1351.36,1212.43 1351.95,1212.43 1352.53,1212.43 1353.12,1212.43 1353.71,1212.43 1354.29,1212.43 1354.88,1212.43 1355.47,1212.43 1356.05,1212.43 1356.64,1212.43 1357.22,1212.43 1357.81,1212.43 1358.4,1212.43 1358.98,1212.43 1359.57,1212.43 1360.16,1212.43 1360.74,1212.43 1361.33,1212.43 1361.92,1212.43 1362.5,1212.43 1363.09,1212.43 1363.68,1212.43 1364.26,1212.43 1364.85,1212.43 1365.43,1212.43 1366.02,1212.43 1366.61,1212.43 1367.19,1212.43 1367.78,1212.43 1368.37,1212.43 1368.95,1212.43 1369.54,1212.43 1370.13,1212.43 1370.71,1212.43 1371.3,1212.43 1371.88,1212.43 1372.47,1212.43 1373.06,1212.43 1373.64,1212.43 1374.23,1212.43 1374.82,1212.43 1375.4,1212.43 1375.99,1212.43 1376.58,1212.43 1377.16,1212.43 1377.75,1212.43 1378.34,1212.43 1378.92,1212.43 1379.51,1212.43 1380.09,1212.43 1380.68,1212.43 1381.27,1212.43 1381.85,1212.43 1382.44,1212.43 1383.03,1212.43 1383.61,1212.43 1384.2,1212.43 1384.79,1212.43 1385.37,1212.43 1385.96,1212.43 1386.55,1212.43 1387.13,1212.43 1387.72,1212.43 1388.3,1212.43 1388.89,1212.43 1389.48,1212.43 1390.06,1212.43 1390.65,1212.43 1391.24,1212.43 1391.82,1212.43 1392.41,1212.43 1393,1212.43 1393.58,1212.43 1394.17,1212.43 1394.75,1212.43 1395.34,1212.43 1395.93,1212.43 1396.51,1212.43 1397.1,1212.43 1397.69,1212.43 1398.27,1212.43 1398.86,1212.43 1399.45,1212.43 1400.03,1212.43 1400.62,1212.43 1401.21,1212.43 1401.79,1212.43 1402.38,1212.43 1402.96,1212.43 1403.55,1212.43 1404.14,1212.43 1404.72,1212.43 1405.31,1212.43 1405.9,1212.43 1406.48,1212.43 1407.07,1212.43 1407.66,1212.43 1408.24,1212.43 1408.83,1212.43 1409.42,1212.43 1410,1212.43 1410.59,1212.43 1411.17,1212.43 1411.76,1212.43 1412.35,1212.43 1412.93,1212.43 1413.52,1212.43 1414.11,1212.43 1414.69,1212.43 1415.28,1212.43 1415.87,1212.43 1416.45,1212.43 1417.04,1212.43 1417.63,1212.43 1418.21,1212.43 1418.8,1212.43 1419.38,1212.43 1419.97,1212.43 1420.56,1212.43 1421.14,1212.43 1421.73,1212.43 1422.32,1212.43 1422.9,1212.43 1423.49,1212.43 1424.08,1212.43 1424.66,1212.43 1425.25,1212.43 1425.83,1212.43 1426.42,1212.43 1427.01,1212.43 1427.59,1212.43 1428.18,1212.43 1428.77,1212.43 1429.35,1212.43 1429.94,1212.43 1430.53,1212.43 1431.11,1212.43 1431.7,1212.43 1432.29,1212.43 1432.87,1212.43 1433.46,1212.43 1434.04,1212.43 1434.63,1212.43 1435.22,1212.43 1435.8,1212.43 1436.39,1212.43 1436.98,1212.43 1437.56,1212.43 1438.15,1212.43 1438.74,1212.43 1439.32,1212.43 1439.91,1212.43 1440.5,1212.43 1441.08,1212.43 1441.67,1212.43 1442.25,1212.43 1442.84,1212.43 1443.43,1212.43 1444.01,1212.43 1444.6,1212.43 1445.19,1212.43 1445.77,1212.43 1446.36,1212.43 1446.95,1212.43 1447.53,1212.43 1448.12,1212.43 1448.7,1212.43 1449.29,1212.43 1449.88,1212.43 1450.46,1212.43 1451.05,1212.43 1451.64,1212.43 1452.22,1212.43 1452.81,1212.43 1453.4,1212.43 1453.98,1212.43 1454.57,1212.43 1455.16,1212.43 1455.74,1212.43 1456.33,1212.43 1456.91,1212.43 1457.5,1212.43 1458.09,1212.43 1458.67,1212.43 1459.26,1212.43 1459.85,1212.43 1460.43,1212.43 1461.02,1212.43 1461.61,1212.43 1462.19,1212.43 1462.78,1212.43 1463.37,1212.43 1463.95,1212.43 1464.54,1212.43 1465.12,1212.43 1465.71,1212.43 1466.3,1212.43 1466.88,1212.43 1467.47,1212.43 1468.06,1212.43 1468.64,1212.43 1469.23,1212.43 1469.82,1212.43 1470.4,1212.43 1470.99,1212.43 1471.57,1212.43 1472.16,1212.43 1472.75,1212.43 1473.33,1212.43 1473.92,1212.43 1474.51,1212.43 1475.09,1212.43 1475.68,1212.43 1476.27,1212.43 1476.85,1212.43 1477.44,1212.43 1478.03,1212.43 1478.61,1212.43 1479.2,1212.43 1479.78,1212.43 1480.37,1212.43 1480.96,1212.43 1481.54,1212.43 1482.13,1212.43 1482.72,1212.43 1483.3,1212.43 1483.89,1212.43 1484.48,1212.43 1485.06,1212.43 1485.65,1212.43 1486.24,1212.43 1486.82,1212.43 1487.41,1212.43 1487.99,1212.43 1488.58,1212.43 1489.17,1212.43 1489.75,1212.43 1490.34,1212.43 1490.93,1212.43 1491.51,1212.43 1492.1,1212.43 1492.69,1212.43 1493.27,1212.43 1493.86,1212.43 1494.45,1212.43 1495.03,1212.43 1495.62,1212.43 1496.2,1212.43 1496.79,1212.43 1497.38,1212.43 1497.96,1212.43 1498.55,1212.43 1499.14,1212.43 1499.72,1212.43 1500.31,1212.43 1500.9,1212.43 1501.48,1212.43 1502.07,1212.43 1502.65,1212.43 1503.24,1212.43 1503.83,1212.43 1504.41,1212.43 1505,1212.43 1505.59,1212.43 1506.17,1212.43 1506.76,1212.43 1507.35,1212.43 1507.93,1212.43 1508.52,1212.43 1509.11,1212.43 1509.69,1212.43 1510.28,1212.43 1510.86,1212.43 1511.45,1212.43 1512.04,1212.43 1512.62,1212.43 1513.21,1212.43 1513.8,1212.43 1514.38,1212.43 1514.97,1212.43 1515.56,1212.43 1516.14,1212.43 1516.73,1212.43 1517.32,1212.43 1517.9,1212.43 1518.49,1212.43 1519.07,1212.43 1519.66,1212.43 1520.25,1212.43 1520.83,1212.43 1521.42,1212.43 1522.01,1212.43 1522.59,1212.43 1523.18,1212.43 1523.77,1212.43 1524.35,1212.43 1524.94,1212.43 1525.52,1212.43 1526.11,1212.43 1526.7,1212.43 1527.28,1212.43 1527.87,1212.43 1528.46,1212.43 1529.04,1212.43 1529.63,1212.43 1530.22,1212.43 1530.8,1212.43 1531.39,1212.43 1531.98,1212.43 1532.56,1212.43 1533.15,1212.43 1533.73,1212.43 1534.32,1212.43 1534.91,1212.43 1535.49,1212.43 1536.08,1212.43 1536.67,1212.43 1537.25,1212.43 1537.84,1212.43 1538.43,1212.43 1539.01,1212.43 1539.6,1212.43 1540.19,1212.43 1540.77,1212.43 1541.36,1212.43 1541.94,1212.43 1542.53,1212.43 1543.12,1212.43 1543.7,1212.43 1544.29,1212.43 1544.88,1212.43 1545.46,1212.43 1546.05,1212.43 1546.64,1212.43 1547.22,1212.43 1547.81,1212.43 1548.4,1212.43 1548.98,1212.43 1549.57,1212.43 1550.15,1212.43 1550.74,1212.43 1551.33,1212.43 1551.91,1212.43 1552.5,1212.43 1553.09,1212.43 1553.67,1212.43 1554.26,1212.43 1554.85,1212.43 1555.43,1212.43 1556.02,1212.43 1556.6,1212.43 1557.19,1212.43 1557.78,1212.43 1558.36,1212.43 1558.95,1212.43 1559.54,1212.43 1560.12,1212.43 1560.71,1212.43 1561.3,1212.43 1561.88,1212.43 1562.47,1212.43 1563.06,1212.43 1563.64,1212.43 1564.23,1212.43 1564.81,1212.43 1565.4,1212.43 1565.99,1212.43 1566.57,1212.43 1567.16,1212.43 1567.75,1212.43 1568.33,1212.43 1568.92,1212.43 1569.51,1212.43 1570.09,1212.43 1570.68,1212.43 1571.27,1212.43 1571.85,1212.43 1572.44,1212.43 1573.02,1212.43 1573.61,1212.43 1574.2,1212.43 1574.78,1212.43 1575.37,1212.43 1575.96,1212.43 1576.54,1212.43 1577.13,1212.43 1577.72,1212.43 1578.3,1212.43 1578.89,1212.43 1579.47,1212.43 1580.06,1212.43 1580.65,1212.43 1581.23,1212.43 1581.82,1212.43 1582.41,1212.43 1582.99,1212.43 1583.58,1212.43 1584.17,1212.43 1584.75,1212.43 1585.34,1212.43 1585.93,1212.43 1586.51,1212.43 1587.1,1212.43 1587.68,1212.43 1588.27,1212.43 1588.86,1212.43 1589.44,1212.43 1590.03,1212.43 1590.62,1212.43 1591.2,1212.43 1591.79,1212.43 1592.38,1212.43 1592.96,1212.43 1593.55,1212.43 1594.14,1212.43 1594.72,1212.43 1595.31,1212.43 1595.89,1212.43 1596.48,1212.43 1597.07,1212.43 1597.65,1212.43 1598.24,1212.43 1598.83,1212.43 1599.41,1212.43 1600,1212.43 1600.59,1212.43 1601.17,1212.43 1601.76,1212.43 1602.34,1212.43 1602.93,1212.43 1603.52,1212.43 1604.1,1212.43 1604.69,1212.43 1605.28,1212.43 1605.86,1212.43 1606.45,1212.43 1607.04,1212.43 1607.62,1212.43 1608.21,1212.43 1608.8,1212.43 1609.38,1212.43 1609.97,1212.43 1610.55,1212.43 1611.14,1212.43 1611.73,1212.43 1612.31,1212.43 1612.9,1212.43 1613.49,1212.43 1614.07,1212.43 1614.66,1212.43 1615.25,1212.43 1615.83,1212.43 1616.42,1212.43 1617.01,1212.43 1617.59,1212.43 1618.18,1212.43 1618.76,1212.43 1619.35,1212.43 1619.94,1212.43 1620.52,1212.43 1621.11,1212.43 1621.7,1212.43 1622.28,1212.43 1622.87,1212.43 1623.46,1212.43 1624.04,1212.43 1624.63,1212.43 1625.22,1212.43 1625.8,1212.43 1626.39,1212.43 1626.97,1212.43 1627.56,1212.43 1628.15,1212.43 1628.73,1212.43 1629.32,1212.43 1629.91,1212.43 1630.49,1212.43 1631.08,1212.43 1631.67,1212.43 1632.25,1212.43 1632.84,1212.43 1633.42,1212.43 1634.01,1212.43 1634.6,1212.43 1635.18,1212.43 1635.77,1212.43 1636.36,1212.43 1636.94,1212.43 1637.53,1212.43 1638.12,1212.43 1638.7,1212.43 1639.29,1212.43 1639.88,1212.43 1640.46,1212.43 1641.05,1212.43 1641.63,1212.43 1642.22,1212.43 1642.81,1212.43 1643.39,1212.43 1643.98,1212.43 1644.57,1212.43 1645.15,1212.43 1645.74,1212.43 1646.33,1212.43 1646.91,1212.43 1647.5,1212.43 1648.09,1212.43 1648.67,1212.43 1649.26,1212.43 1649.84,1212.43 1650.43,1212.43 1651.02,1212.43 1651.6,1212.43 1652.19,1212.43 1652.78,1212.43 1653.36,1212.43 1653.95,1212.43 1654.54,1212.43 1655.12,1212.43 1655.71,1212.43 1656.29,1212.43 1656.88,1212.43 1657.47,1212.43 1658.05,1212.43 1658.64,1212.43 1659.23,1212.43 1659.81,1212.43 1660.4,1212.43 1660.99,1212.43 1661.57,1212.43 1662.16,1212.43 1662.75,1212.43 1663.33,1212.43 1663.92,1212.43 1664.5,1212.43 1665.09,1212.43 1665.68,1212.43 1666.26,1212.43 1666.85,1212.43 1667.44,1212.43 1668.02,1212.43 1668.61,1212.43 1669.2,1212.43 1669.78,1212.43 1670.37,1212.43 1670.96,1212.43 1671.54,1212.43 1672.13,1212.43 1672.71,1212.43 1673.3,1212.43 1673.89,1212.43 1674.47,1212.43 1675.06,1212.43 1675.65,1212.43 1676.23,1212.43 1676.82,1212.43 1677.41,1212.43 1677.99,1212.43 1678.58,1212.43 1679.17,1212.43 1679.75,1212.43 1680.34,1212.43 1680.92,1212.43 1681.51,1212.43 1682.1,1212.43 1682.68,1212.43 1683.27,1212.43 1683.86,1212.43 1684.44,1212.43 1685.03,1212.43 1685.62,1212.43 1686.2,1212.43 1686.79,1212.43 1687.37,1212.43 1687.96,1212.43 1688.55,1212.43 1689.13,1212.43 1689.72,1212.43 1690.31,1212.43 1690.89,1212.43 1691.48,1212.43 1692.07,1212.43 1692.65,1212.43 1693.24,1212.43 1693.83,1212.43 1694.41,1212.43 1695,1212.43 1695.58,1212.43 1696.17,1212.43 1696.76,1212.43 1697.34,1212.43 1697.93,1212.43 1698.52,1212.43 1699.1,1212.43 1699.69,1212.43 1700.28,1212.43 1700.86,1212.43 1701.45,1212.43 1702.04,1212.43 1702.62,1212.43 1703.21,1212.43 1703.79,1212.43 1704.38,1212.43 1704.97,1212.43 1705.55,1212.43 1706.14,1212.43 1706.73,1212.43 1707.31,1212.43 1707.9,1212.43 1708.49,1212.43 1709.07,1212.43 1709.66,1212.43 1710.24,1212.43 1710.83,1212.43 1711.42,1212.43 1712,1212.43 1712.59,1212.43 1713.18,1212.43 1713.76,1212.43 1714.35,1212.43 1714.94,1212.43 1715.52,1212.43 1716.11,1212.43 1716.7,1212.43 1717.28,1212.43 1717.87,1212.43 1718.45,1212.43 1719.04,1212.43 1719.63,1212.43 1720.21,1212.43 1720.8,1212.43 1721.39,1212.43 1721.97,1212.43 1722.56,1212.43 1723.15,1212.43 1723.73,1212.43 1724.32,1212.43 1724.91,1212.43 1725.49,1212.43 1726.08,1212.43 1726.66,1212.43 1727.25,1212.43 1727.84,1212.43 1728.42,1212.43 1729.01,1212.43 1729.6,1212.43 1730.18,1212.43 1730.77,1212.43 1731.36,1212.43 1731.94,1212.43 1732.53,1212.43 1733.11,1212.43 1733.7,1212.43 1734.29,1212.43 1734.87,1212.43 1735.46,1212.43 1736.05,1212.43 1736.63,1212.43 1737.22,1212.43 1737.81,1212.43 1738.39,1212.43 1738.98,1212.43 1739.57,1212.43 1740.15,1212.43 1740.74,1212.43 1741.32,1212.43 1741.91,1212.43 1742.5,1212.43 1743.08,1212.43 1743.67,1212.43 1744.26,1212.43 1744.84,1212.43 1745.43,1212.43 1746.02,1212.43 1746.6,1212.43 1747.19,1212.43 1747.78,1212.43 1748.36,1212.43 1748.95,1212.43 1749.53,1212.43 1750.12,1212.43 1750.71,1212.43 1751.29,1212.43 1751.88,1212.43 1752.47,1212.43 1753.05,1212.43 1753.64,1212.43 1754.23,1212.43 1754.81,1212.43 1755.4,1212.43 1755.99,1212.43 1756.57,1212.43 1757.16,1212.43 1757.74,1212.43 1758.33,1212.43 1758.92,1212.43 1759.5,1212.43 1760.09,1212.43 1760.68,1212.43 1761.26,1212.43 1761.85,1212.43 1762.44,1212.43 1763.02,1212.43 1763.61,1212.43 1764.19,1212.43 1764.78,1212.43 1765.37,1212.43 1765.95,1212.43 1766.54,1212.43 1767.13,1212.43 1767.71,1212.43 1768.3,1212.43 1768.89,1212.43 1769.47,1212.43 1770.06,1212.43 1770.65,1212.43 1771.23,1212.43 1771.82,1212.43 1772.4,1212.43 1772.99,1212.43 1773.58,1212.43 1774.16,1212.43 1774.75,1212.43 1775.34,1212.43 1775.92,1212.43 1776.51,1212.43 1777.1,1212.43 1777.68,1212.43 1778.27,1212.43 1778.86,1212.43 1779.44,1212.43 1780.03,1212.43 1780.61,1212.43 1781.2,1212.43 1781.79,1212.43 1782.37,1212.43 1782.96,1212.43 1783.55,1212.43 1784.13,1212.43 1784.72,1212.43 1785.31,1212.43 1785.89,1212.43 1786.48,1212.43 1787.06,1212.43 1787.65,1212.43 1788.24,1212.43 1788.82,1212.43 1789.41,1212.43 1790,1212.43 1790.58,1212.43 1791.17,1212.43 1791.76,1212.43 1792.34,1212.43 1792.93,1212.43 1793.52,1212.43 1794.1,1212.43 1794.69,1212.43 1795.27,1212.43 1795.86,1212.43 1796.45,1212.43 1797.03,1212.43 1797.62,1212.43 1798.21,1212.43 1798.79,1212.43 1799.38,1212.43 1799.97,1212.43 1800.55,1212.43 1801.14,1212.43 1801.73,1212.43 1802.31,1212.43 1802.9,1212.43 1803.48,1212.43 1804.07,1212.43 1804.66,1212.43 1805.24,1212.43 1805.83,1212.43 1806.42,1212.43 1807,1212.43 1807.59,1212.43 1808.18,1212.43 1808.76,1212.43 1809.35,1212.43 1809.94,1212.43 1810.52,1212.43 1811.11,1212.43 1811.69,1212.43 1812.28,1212.43 1812.87,1212.43 1813.45,1212.43 1814.04,1212.43 1814.63,1212.43 1815.21,1212.43 1815.8,1212.43 1816.39,1212.43 1816.97,1212.43 1817.56,1212.43 1818.14,1212.43 1818.73,1212.43 1819.32,1212.43 1819.9,1212.43 1820.49,1212.43 1821.08,1212.43 1821.66,1212.43 1822.25,1212.43 1822.84,1212.43 1823.42,1212.43 1824.01,1212.43 1824.6,1212.43 1825.18,1212.43 1825.77,1212.43 1826.35,1212.43 1826.94,1212.43 1827.53,1212.43 1828.11,1212.43 1828.7,1212.43 1829.29,1212.43 1829.87,1212.43 1830.46,1212.43 1831.05,1212.43 1831.63,1212.43 1832.22,1212.43 1832.81,1212.43 1833.39,1212.43 1833.98,1212.43 1834.56,1212.43 1835.15,1212.43 1835.74,1212.43 1836.32,1212.43 1836.91,1212.43 1837.5,1212.43 1838.08,1212.43 1838.67,1212.43 1839.26,1212.43 1839.84,1212.43 1840.43,1212.43 1841.01,1212.43 1841.6,1212.43 1842.19,1212.43 1842.77,1212.43 1843.36,1212.43 1843.95,1212.43 1844.53,1212.43 1845.12,1212.43 1845.71,1212.43 1846.29,1212.43 1846.88,1212.43 1847.47,1212.43 1848.05,1212.43 1848.64,1212.43 1849.22,1212.43 1849.81,1212.43 1850.4,1212.43 1850.98,1212.43 1851.57,1212.43 1852.16,1212.43 1852.74,1212.43 1853.33,1212.43 1853.92,1212.43 1854.5,1212.43 1855.09,1212.43 1855.68,1212.43 1856.26,1212.43 1856.85,1212.43 1857.43,1212.43 1858.02,1212.43 1858.61,1212.43 1859.19,1212.43 1859.78,1212.43 1860.37,1212.43 1860.95,1212.43 1861.54,1212.43 1862.13,1212.43 1862.71,1212.43 1863.3,1212.43 1863.88,1212.43 1864.47,1212.43 1865.06,1212.43 1865.64,1212.43 1866.23,1212.43 1866.82,1212.43 1867.4,1212.43 1867.99,1212.43 1868.58,1212.43 1869.16,1212.43 1869.75,1212.43 1870.34,1212.43 1870.92,1212.43 1871.51,1212.43 1872.09,1212.43 1872.68,1212.43 1873.27,1212.43 1873.85,1212.43 1874.44,1212.43 1875.03,1212.43 1875.61,1212.43 1876.2,1212.43 1876.79,1212.43 1877.37,1212.43 1877.96,1212.43 1878.55,1212.43 1879.13,1212.43 1879.72,1212.43 1880.3,1212.43 1880.89,1212.43 1881.48,1212.43 1882.06,1212.43 1882.65,1212.43 1883.24,1212.43 1883.82,1212.43 1884.41,1212.43 1885,1212.43 1885.58,1212.43 1886.17,1212.43 1886.76,1212.43 1887.34,1212.43 1887.93,1212.43 1888.51,1212.43 1889.1,1212.43 1889.69,1212.43 1890.27,1212.43 1890.86,1212.43 1891.45,1212.43 1892.03,1212.43 1892.62,1212.43 1893.21,1212.43 1893.79,1212.43 1894.38,1212.43 1894.96,1212.43 1895.55,1212.43 1896.14,1212.43 1896.72,1212.43 1897.31,1212.43 1897.9,1212.43 1898.48,1212.43 1899.07,1212.43 1899.66,1212.43 1900.24,1212.43 1900.83,1212.43 1901.42,1212.43 1902,1212.43 1902.59,1212.43 1903.17,1212.43 1903.76,1212.43 1904.35,1212.43 1904.93,1212.43 1905.52,1212.43 1906.11,1212.43 1906.69,1212.43 1907.28,1212.43 1907.87,1212.43 1908.45,1212.43 1909.04,1212.43 1909.63,1212.43 1910.21,1212.43 1910.8,1212.43 1911.38,1212.43 1911.97,1212.43 1912.56,1212.43 1913.14,1212.43 1913.73,1212.43 1914.32,1212.43 1914.9,1212.43 1915.49,1212.43 1916.08,1212.43 1916.66,1212.43 1917.25,1212.43 1917.83,1212.43 1918.42,1212.43 1919.01,1212.43 1919.59,1212.43 1920.18,1212.43 1920.77,1212.43 1921.35,1212.43 1921.94,1212.43 1922.53,1212.43 1923.11,1212.43 1923.7,1212.43 1924.29,1212.43 1924.87,1212.43 1925.46,1212.43 1926.04,1212.43 1926.63,1212.43 1927.22,1212.43 1927.8,1212.43 1928.39,1212.43 1928.98,1212.43 1929.56,1212.43 1930.15,1212.43 1930.74,1212.43 1931.32,1212.43 1931.91,1212.43 1932.5,1212.43 1933.08,1212.43 1933.67,1212.43 1934.25,1212.43 1934.84,1212.43 1935.43,1212.43 1936.01,1212.43 1936.6,1212.43 1937.19,1212.43 1937.77,1212.43 1938.36,1212.43 1938.95,1212.43 1939.53,1212.43 1940.12,1212.43 1940.71,1212.43 1941.29,1212.43 1941.88,1212.43 1942.46,1212.43 1943.05,1212.43 1943.64,1212.43 1944.22,1212.43 1944.81,1212.43 1945.4,1212.43 1945.98,1212.43 1946.57,1212.43 1947.16,1212.43 1947.74,1212.43 1948.33,1212.43 1948.91,1212.43 1949.5,1212.43 1950.09,1212.43 1950.67,1212.43 1951.26,1212.43 1951.85,1212.43 1952.43,1212.43 1953.02,1212.43 1953.61,1212.43 1954.19,1212.43 1954.78,1212.43 1955.37,1212.43 1955.95,1212.43 1956.54,1212.43 1957.12,1212.43 1957.71,1212.43 1958.3,1212.43 1958.88,1212.43 1959.47,1212.43 1960.06,1212.43 1960.64,1212.43 1961.23,1212.43 1961.82,1212.43 1962.4,1212.43 1962.99,1212.43 1963.58,1212.43 1964.16,1212.43 1964.75,1212.43 1965.33,1212.43 1965.92,1212.43 1966.51,1212.43 1967.09,1212.43 1967.68,1212.43 1968.27,1212.43 1968.85,1212.43 1969.44,1212.43 1970.03,1212.43 1970.61,1212.43 1971.2,1212.43 1971.78,1212.43 1972.37,1212.43 1972.96,1212.43 1973.54,1212.43 1974.13,1212.43 1974.72,1212.43 1975.3,1212.43 1975.89,1212.43 1976.48,1212.43 1977.06,1212.43 1977.65,1212.43 1978.24,1212.43 1978.82,1212.43 1979.41,1212.43 1979.99,1212.43 1980.58,1212.43 1981.17,1212.43 1981.75,1212.43 1982.34,1212.43 1982.93,1212.43 1983.51,1212.43 1984.1,1212.43 1984.69,1212.43 1985.27,1212.43 1985.86,1212.43 1986.45,1212.43 1987.03,1212.43 1987.62,1212.43 1988.2,1212.43 1988.79,1212.43 1989.38,1212.43 1989.96,1212.43 1990.55,1212.43 1991.14,1212.43 1991.72,1212.43 1992.31,1212.43 1992.9,1212.43 1993.48,1212.43 1994.07,1212.43 1994.65,1212.43 1995.24,1212.43 1995.83,1212.43 1996.41,1212.43 1997,1212.43 1997.59,1212.43 1998.17,1212.43 1998.76,1212.43 1999.35,1212.43 1999.93,1212.43 2000.52,1212.43 2001.11,1212.43 2001.69,1212.43 2002.28,1212.43 2002.86,1212.43 2003.45,1212.43 2004.04,1212.43 2004.62,1212.43 2005.21,1212.43 2005.8,1212.43 2006.38,1212.43 2006.97,1212.43 2007.56,1212.43 2008.14,1212.43 2008.73,1212.43 2009.32,1212.43 2009.9,1212.43 2010.49,1212.43 2011.07,1212.43 2011.66,1212.43 2012.25,1212.43 2012.83,1212.43 2013.42,1212.43 2014.01,1212.43 2014.59,1212.43 2015.18,1212.43 2015.77,1212.43 2016.35,1212.43 2016.94,1212.43 2017.53,1212.43 2018.11,1212.43 2018.7,1212.43 2019.28,1212.43 2019.87,1212.43 2020.46,1212.43 2021.04,1212.43 2021.63,1212.43 2022.22,1212.43 2022.8,1212.43 2023.39,1212.43 2023.98,1212.43 2024.56,1212.43 2025.15,1212.43 2025.73,1212.43 2026.32,1212.43 2026.91,1212.43 2027.49,1212.43 2028.08,1212.43 2028.67,1212.43 2029.25,1212.43 2029.84,1212.43 2030.43,1212.43 2031.01,1212.43 2031.6,1212.43 2032.19,1212.43 2032.77,1212.43 2033.36,1212.43 2033.94,1212.43 2034.53,1212.43 2035.12,1212.43 2035.7,1212.43 2036.29,1212.43 2036.88,1212.43 2037.46,1212.43 2038.05,1212.43 2038.64,1212.43 2039.22,1212.43 2039.81,1212.43 2040.4,1212.43 2040.98,1212.43 2041.57,1212.43 2042.15,1212.43 2042.74,1212.43 2043.33,1212.43 2043.91,1212.43 2044.5,1212.43 2045.09,1212.43 2045.67,1212.43 2046.26,1212.43 2046.85,1212.43 2047.43,1212.43 2048.02,1212.43 2048.6,1212.43 2049.19,1212.43 2049.78,1212.43 2050.36,1212.43 2050.95,1212.43 2051.54,1212.43 2052.12,1212.43 2052.71,1212.43 2053.3,1212.43 2053.88,1212.43 2054.47,1212.43 2055.06,1212.43 2055.64,1212.43 2056.23,1212.43 2056.81,1212.43 2057.4,1212.43 2057.99,1212.43 2058.57,1212.43 2059.16,1212.43 2059.75,1212.43 2060.33,1212.43 2060.92,1212.43 2061.51,1212.43 2062.09,1212.43 2062.68,1212.43 2063.27,1212.43 2063.85,1212.43 2064.44,1212.43 2065.02,1212.43 2065.61,1212.43 2066.2,1212.43 2066.78,1212.43 2067.37,1212.43 2067.96,1212.43 2068.54,1212.43 2069.13,1212.43 2069.72,1212.43 2070.3,1212.43 2070.89,1212.43 2071.48,1212.43 2072.06,1212.43 2072.65,1212.43 2073.23,1212.43 2073.82,1212.43 2074.41,1212.43 2074.99,1212.43 2075.58,1212.43 2076.17,1212.43 2076.75,1212.43 2077.34,1212.43 2077.93,1212.43 2078.51,1212.43 2079.1,1212.43 2079.68,1212.43 2080.27,1212.43 2080.86,1212.43 2081.44,1212.43 2082.03,1212.43 2082.62,1212.43 2083.2,1212.43 2083.79,1212.43 2084.38,1212.43 2084.96,1212.43 2085.55,1212.43 2086.14,1212.43 2086.72,1212.43 2087.31,1212.43 2087.89,1212.43 2088.48,1212.43 2089.07,1212.43 2089.65,1212.43 2090.24,1212.43 2090.83,1212.43 2091.41,1212.43 2092,1212.43 2092.59,1212.43 2093.17,1212.43 2093.76,1212.43 2094.35,1212.43 2094.93,1212.43 2095.52,1212.43 2096.1,1212.43 2096.69,1212.43 2097.28,1212.43 2097.86,1212.43 2098.45,1212.43 2099.04,1212.43 2099.62,1212.43 2100.21,1212.43 2100.8,1212.43 2101.38,1212.43 2101.97,1212.43 2102.55,1212.43 2103.14,1212.43 2103.73,1212.43 2104.31,1212.43 2104.9,1212.43 2105.49,1212.43 2106.07,1212.43 2106.66,1212.43 2107.25,1212.43 2107.83,1212.43 2108.42,1212.43 2109.01,1212.43 2109.59,1212.43 2110.18,1212.43 2110.76,1212.43 2111.35,1212.43 2111.94,1212.43 2112.52,1212.43 2113.11,1212.43 2113.7,1212.43 2114.28,1212.43 2114.87,1212.43 2115.46,1212.43 2116.04,1212.43 2116.63,1212.43 2117.22,1212.43 2117.8,1212.43 2118.39,1212.43 2118.97,1212.43 2119.56,1212.43 2120.15,1212.43 2120.73,1212.43 2121.32,1212.43 2121.91,1212.43 2122.49,1212.43 2123.08,1212.43 2123.67,1212.43 2124.25,1212.43 2124.84,1212.43 2125.42,1212.43 2126.01,1212.43 2126.6,1212.43 2127.18,1212.43 2127.77,1212.43 2128.36,1212.43 2128.94,1212.43 2129.53,1212.43 2130.12,1212.43 2130.7,1212.43 2131.29,1212.43 2131.88,1212.43 2132.46,1212.43 2133.05,1212.43 2133.63,1212.43 2134.22,1212.43 2134.81,1212.43 2135.39,1212.43 2135.98,1212.43 2136.57,1212.43 2137.15,1212.43 2137.74,1212.43 2138.33,1212.43 2138.91,1212.43 2139.5,1212.43 2140.09,1212.43 2140.67,1212.43 2141.26,1212.43 2141.84,1212.43 2142.43,1212.43 2143.02,1212.43 2143.6,1212.43 2144.19,1212.43 2144.78,1212.43 2145.36,1212.43 2145.95,1212.43 2146.54,1212.43 2147.12,1212.43 2147.71,1212.43 2148.3,1212.43 2148.88,1212.43 2149.47,1212.43 2150.05,1212.43 2150.64,1212.43 2151.23,1212.43 2151.81,1212.43 2152.4,1212.43 2152.99,1212.43 2153.57,1212.43 2154.16,1212.43 2154.75,1212.43 2155.33,1212.43 2155.92,1212.43 2156.5,1212.43 2157.09,1212.43 2157.68,1212.43 2158.26,1212.43 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.66,1191.79 1399.35,899.083 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.42 985.439,1191.79 2158.26,1191.79 2158.26,1232.42 985.439,1232.42 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip833\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip833)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3927.39 163.232,-5028.16 163.792,-6038.76 164.351,-6957.2 164.91,-6558.91 165.469,-6268.74 166.029,-7055.58 166.588,-7789.76 167.147,-8454.98 167.706,-8158.24 168.266,-8727.03 168.825,-9252.58 169.384,-9723.23 169.943,-8752.69 170.503,-9186.34 171.062,-8977.1 171.621,-9330.78 172.18,-9150.6 172.74,-9469.52 173.299,-9284.05 173.858,-9557.19 174.417,-9799.32 174.977,-9991.46 175.536,-9796.23 176.095,-9619.04 176.655,-9749.79 177.214,-9562.74 177.773,-9690.16 178.332,-9513.73 178.892,-9565.22 179.451,-9634.89 180.01,-9667.91 180.569,-9678.88 181.129,-9491.73 181.688,-9293.96 182.247,-8894.84 182.806,-8866.67 183.366,-8677.13 183.925,-8343.75 184.484,-8166.92 185.043,-8144.58 185.603,-7838.34 186.162,-7663.08 186.721,-7378.3 187.28,-7122.02 187.84,-6985.84 188.399,-6632.54 188.958,-6497.87 189.517,-6457.84 190.077,-6398.64 190.636,-6265.33 191.195,-6128.39 191.754,-5994.65 192.314,-5782.96 192.873,-5729.84 193.432,-5668.01 193.991,-5464.8 194.551,-5403.55 195.11,-5260.92 195.669,-5121.44 196.228,-4985.17 196.788,-4797.07 197.347,-4558.72 197.906,-4439.14 198.465,-4277 199.025,-4112.42 199.584,-4046.74 200.143,-3980.06 200.702,-3775.79 201.262,-3709.46 201.821,-3597.79 202.38,-3408 202.939,-3383.99 203.499,-3233.19 204.058,-3165.3 204.617,-3064.77 205.176,-2887.54 205.736,-2682.5 206.295,-2483.08 206.854,-2430.38 207.413,-2347.72 207.973,-2234.03 208.532,-2181.78 209.091,-2068.36 209.65,-1987.73 210.21,-1932.29 210.769,-1877.4 211.328,-1828.88 211.887,-1688.26 212.447,-1552.37 213.006,-1427.82 213.565,-1389.03 214.124,-1319.14 214.684,-1251.54 215.243,-1189.65 215.802,-1145.62 216.361,-1009.37 216.921,-953.722 217.48,-900.623 218.039,-845.565 218.598,-692.356 219.158,-668.488 219.717,-639.342 220.276,-589.434 220.835,-496.243 221.395,-472.918 221.954,-450.058 222.513,-401.861 223.072,-287.364 223.632,-223.114 224.191,-139.318 224.75,-62.487 225.309,-26.718 225.869,29.2029 226.428,38.5979 226.987,49.858 227.546,142.404 228.106,146.896 228.665,177.119 229.224,225.614 229.783,233.051 230.343,218.932 230.902,246.153 231.461,270.498 232.02,300.466 232.58,349.373 233.139,373.803 233.698,421.771 234.257,423.687 234.817,430.344 235.376,456.184 235.935,480.496 236.494,487.355 237.054,494.997 237.613,500.925 238.172,544.995 238.731,548.258 239.291,549.72 239.85,570.86 240.409,590.633 240.968,595.254 241.528,599.044 242.087,600.696 242.646,624.762 243.205,625.812 243.765,648.805 244.324,671.463 244.883,671.061 245.442,692.462 246.002,764.065 246.561,760.713 247.12,777.789 247.679,761.594 248.239,782.321 248.798,761.689 249.357,780.23 249.916,775.342 250.476,774.603 251.035,831.394 251.594,815.997 252.153,815.273 252.713,834.455 253.272,849.575 253.831,869.653 254.39,852.062 254.95,855.666 255.509,927.538 256.068,961.608 256.627,1004.13 257.187,1016.66 257.746,1020.14 258.305,1093.41 258.864,1064.86 259.424,1058.76 259.983,1051.24 260.542,1026.82 261.101,1019.65 261.661,995.131 262.22,992.518 262.779,1038.94 263.338,1050.06 263.898,1026.43 264.457,1036.8 265.016,1044.22 265.575,1087.84 266.135,1093.83 266.694,1081.65 267.253,1071.68 267.812,1079.54 268.372,1069.89 268.931,1090.71 269.49,1083.49 270.049,1073.95 270.609,1046.78 271.168,1039.53 271.727,1082.58 272.286,1084.93 272.846,1073.32 273.405,1059.7 273.964,1051.51 274.523,1059.06 275.083,1052 275.642,1062.36 276.201,1022.17 276.76,1018.57 277.32,1030.61 277.879,990.495 278.438,1004.3 278.997,1016.96 279.557,1024.38 280.116,1018.52 280.675,1027.54 281.234,1039.27 281.794,1086.63 282.353,1077.71 282.912,1052.87 283.471,1064.34 284.031,1037.54 284.59,1032.85 285.149,991.961 285.708,1005.3 286.268,951.495 286.827,966.095 287.386,965.486 287.945,944.715 288.505,975.967 289.064,990.92 289.623,968.018 290.182,980.455 290.742,977.769 291.301,987.968 291.86,1000.94 292.419,996.129 292.979,990.791 293.538,1005.07 294.097,999.318 294.656,1024.39 295.216,1033.26 295.775,1007.52 296.334,1003.03 296.893,995.707 297.453,990.803 298.012,968.138 298.571,965.821 299.13,974.165 299.69,982.7 300.249,997.267 300.808,991.179 301.368,1003.54 301.927,1011.15 302.486,1022.91 303.045,998.675 303.605,989.667 304.164,1017.71 304.723,975.002 305.282,954.191 305.842,948.309 306.401,927.981 306.96,958.987 307.519,955.88 308.079,984.239 308.638,959.203 309.197,951.255 309.756,960.909 310.316,951.172 310.875,945.822 311.434,912.004 311.993,907.98 312.553,922.169 313.112,917.628 313.671,913.622 314.23,894.671 314.79,876.262 315.349,877.408 315.908,904.955 316.467,931.75 317.027,942.238 317.586,1000.12 318.145,1026.57 318.704,1018.48 319.264,992.085 319.823,984.687 320.382,961.453 320.941,954.877 321.501,936.141 322.06,945.627 322.619,944.479 323.178,939.826 323.738,953.001 324.297,947.21 324.856,942.332 325.415,938.695 325.975,935.637 326.534,897.495 327.093,910.785 327.652,925.138 328.212,937.349 328.771,949.153 329.33,942.188 329.889,938.883 330.449,883.637 331.008,913.323 331.567,910.762 332.126,890.146 332.686,902.646 333.245,916.983 333.804,900.153 334.363,879.267 334.923,909.922 335.482,922.459 336.041,919.018 336.6,945.928 337.16,938.032 337.719,951.386 338.278,928.189 338.837,940.073 339.397,947.975 339.956,921.855 340.515,883.847 341.074,845.2 341.634,847.421 342.193,795.605 342.752,779.331 343.311,765.064 343.871,805.899 344.43,827.754 344.989,825.294 345.548,844.155 346.108,823.818 346.667,807.166 347.226,839.602 347.785,854.998 348.345,839.351 348.904,838.386 349.463,838.331 350.022,854.9 350.582,855.252 351.141,854.143 351.7,867.192 352.259,878.955 352.819,876.273 353.378,872.123 353.937,887.63 354.496,885.532 355.056,900.144 355.615,893.249 356.174,888.898 356.733,865.721 357.293,865.331 357.852,862.023 358.411,890.948 358.97,883.296 359.53,894.44 360.089,886.768 360.648,881.72 361.207,909.619 361.767,873.407 362.326,886.563 362.885,896.429 363.444,876.474 364.004,853.25 364.563,852.063 365.122,848.175 365.681,844.863 366.241,842.026 366.8,819.99 367.359,817.653 367.918,816.857 368.478,798.107 369.037,765.567 369.596,767.144 370.155,767.82 370.715,768.458 371.274,786.466 371.833,786.351 372.392,769.639 372.952,722.361 373.511,726.774 374.07,743.875 374.629,750.052 375.189,738.866 375.748,742.137 376.307,725.81 376.866,772.174 377.426,740.142 377.985,726.357 378.544,746.792 379.103,747.441 379.663,767.561 380.222,769.071 380.781,788.559 381.34,803.166 381.9,799.906 382.459,848.47 383.018,845.46 383.577,860.373 384.137,855.79 384.696,821.869 385.255,869.402 385.814,862.204 386.374,874.601 386.933,867.124 387.492,829.846 388.051,845.05 388.611,840.82 389.17,835.268 389.729,848.141 390.288,860.001 390.848,838.508 391.407,834.328 391.966,799.384 392.525,832.911 393.085,846.396 393.644,825.355 394.203,809.095 394.762,809.216 395.322,821.22 395.881,822.663 396.44,833.621 396.999,816.635 397.559,797.486 398.118,814.217 398.677,831.176 399.236,829.28 399.796,828.132 400.355,842.094 400.914,860.98 401.473,874.462 402.033,869.751 402.592,849.37 403.151,828.154 403.71,827.387 404.27,826.659 404.829,825.395 405.388,806.966 405.947,821.459 406.507,836.791 407.066,849.437 407.625,848.186 408.184,859.683 408.744,905.452 409.303,880.272 409.862,889.418 410.421,885.302 410.981,863.019 411.54,842.096 412.099,868.628 412.658,846.794 413.218,861.253 413.777,807.818 414.336,791.61 414.895,788.126 415.455,803.58 416.014,817.886 416.573,799.867 417.132,778.266 417.692,776.981 418.251,774.253 418.81,771.903 419.369,753.88 419.929,768.512 420.488,785.331 421.047,782.719 421.606,779.993 422.166,778.103 422.725,795.339 423.284,791.871 423.843,806.325 424.403,838.301 424.962,883.312 425.521,909.569 426.08,918.925 426.64,910.862 427.199,884.106 427.758,879.906 428.318,853.424 428.877,877.499 429.436,885.78 429.995,844.804 430.555,852.31 431.114,864.716 431.673,841.136 432.232,852.278 432.792,863.096 433.351,839.165 433.91,820.114 434.469,834.045 435.029,812.587 435.588,808.855 436.147,756.07 436.706,787.521 437.266,753.687 437.825,738.377 438.384,756.342 438.943,703.713 439.503,690.468 440.062,692.78 440.621,727.923 441.18,714.656 441.74,716.417 442.299,700.955 442.858,719.96 443.417,719.601 443.977,720.732 444.536,702.366 445.095,683.742 445.654,686.577 446.214,705.716 446.773,722.576 447.332,723.107 447.891,726.771 448.451,743.23 449.01,758.482 449.569,759.005 450.128,743.049 450.688,776.165 451.247,774 451.806,788.302 452.365,785.228 452.925,768.204 453.484,768.217 454.043,780.096 454.602,793.882 455.162,790.657 455.721,769.812 456.28,799.478 456.839,760.938 457.399,760.769 457.958,762.797 458.517,748.669 459.076,735.695 459.636,734.293 460.195,784.316 460.754,831.496 461.313,827.414 461.873,822.313 462.432,833.662 462.991,829.864 463.55,840.366 464.11,800.81 464.669,763.46 465.228,731.929 465.787,712.932 466.347,730.505 466.906,765.797 467.465,751.214 468.024,768.128 468.584,802.438 469.143,818.236 469.702,845.965 470.261,859.894 470.821,834.56 471.38,813.136 471.939,824.345 472.498,801.984 473.058,798.393 473.617,795.591 474.176,824.859 474.735,784.71 475.295,782.286 475.854,794.72 476.413,761.333 476.972,778.905 477.532,709.371 478.091,679.037 478.65,647.289 479.209,639.74 479.769,661.381 480.328,696.6 480.887,686.788 481.446,689.447 482.006,681.045 482.565,685.957 483.124,688.026 483.683,690.682 484.243,679.676 484.802,698.591 485.361,697.371 485.92,733.411 486.48,715.73 487.039,716.721 487.598,751.401 488.157,751.835 488.717,751.327 489.276,750.188 489.835,730.164 490.394,726.1 490.954,746.998 491.513,777.768 492.072,805.882 492.631,815.034 493.191,792.691 493.75,807.393 494.309,755.318 494.868,752.596 495.428,720.284 495.987,723.285 496.546,678.131 497.105,698.096 497.665,748.276 498.224,742.801 498.783,758.308 499.342,757.94 499.902,772.75 500.461,772.34 501.02,785.774 501.579,799.445 502.139,795.526 502.698,794.613 503.257,808.158 503.816,791.899 504.376,818.77 504.935,811.976 505.494,819.661 506.053,816.56 506.613,810.66 507.172,807.648 507.731,821.787 508.29,818.987 508.85,812.733 509.409,790.586 509.968,739.442 510.527,753.711 511.087,734.542 511.646,733.818 512.205,733.608 512.764,762.059 513.324,776.843 513.883,788.807 514.442,787.313 515.001,801.317 515.561,811.364 516.12,806.912 516.679,770.144 517.238,767.69 517.798,748.786 518.357,795.536 518.916,825.361 519.475,822.889 520.035,803.078 520.594,734.091 521.153,750.251 521.712,746.233 522.272,746.427 522.831,764.069 523.39,759.431 523.949,759.102 524.509,755.34 525.068,754.701 525.627,688.681 526.186,688.602 526.746,689.57 527.305,721.422 527.864,703.562 528.423,687.072 528.983,701.444 529.542,684.616 530.101,702.706 530.66,684.589 531.22,716.208 531.779,731.413 532.338,735.644 532.897,687.752 533.457,673.304 534.016,724.272 534.575,726.561 535.134,728.281 535.694,724.973 536.253,707.527 536.812,707.31 537.371,689.644 537.931,691.987 538.49,679.874 539.049,730.837 539.608,728.58 540.168,712.158 540.727,726.98 541.286,704.841 541.845,658.817 542.405,677.86 542.964,681.038 543.523,684.37 544.082,668.933 544.642,675.135 545.201,660.454 545.76,711.385 546.319,710.696 546.879,708.296 547.438,681.421 547.997,667.156 548.556,673.56 549.116,708.683 549.675,706.38 550.234,686.974 550.793,675.39 551.353,678.218 551.912,644.301 552.471,660.722 553.031,648.476 553.59,592.709 554.149,632.57 554.708,656.051 555.268,660.657 555.827,679.434 556.386,713.487 556.945,683.107 557.505,730.814 558.064,712.351 558.623,677.302 559.182,648.751 559.742,647.963 560.301,632.405 560.86,651.812 561.419,655.006 561.979,672.652 562.538,688.589 563.097,677.648 563.656,692.916 564.216,695.886 564.775,698.259 565.334,714.771 565.893,710.929 566.453,695.571 567.012,711.527 567.571,696.762 568.13,697.725 568.69,682.583 569.249,666.9 569.808,669.705 570.367,703.137 570.927,689.771 571.486,675.639 572.045,676.896 572.604,677.536 573.164,666.83 573.723,653.842 574.282,675.342 574.841,695.249 575.401,696.939 575.96,697.543 576.519,748.232 577.078,760.101 577.638,788.7 578.197,769.545 578.756,782.363 579.315,764.055 579.875,775.003 580.434,790.391 580.993,785.833 581.552,766.31 582.112,730.199 582.671,734.823 583.23,749.203 583.789,760.891 584.349,727.221 584.908,726.938 585.467,761.489 586.026,758.58 586.586,755.205 587.145,751.371 587.704,717.479 588.263,748.892 588.823,727.962 589.382,744.147 589.941,724.943 590.5,739.926 591.06,753.997 591.619,748.446 592.178,797.37 592.737,840.012 593.297,832.768 593.856,823.863 594.415,800.64 594.974,780.997 595.534,760.745 596.093,758.259 596.652,788.386 597.211,767.305 597.771,764.649 598.33,763.207 598.889,725.782 599.448,676.444 600.008,691.828 600.567,694.476 601.126,728.254 601.685,759.373 602.245,774.384 602.804,772.723 603.363,783.495 603.922,792.165 604.482,769.403 605.041,778.734 605.6,778.263 606.159,788.755 606.719,782.709 607.278,775.854 607.837,790.855 608.396,768.138 608.956,746.191 609.515,726.663 610.074,724.226 610.633,757.14 611.193,737.151 611.752,721.852 612.311,754.97 612.87,735.311 613.43,734.376 613.989,764.98 614.548,796.19 615.107,788.929 615.667,784.17 616.226,781.511 616.785,790.116 617.344,769.824 617.904,748.905 618.463,745.342 619.022,741.827 619.581,721.184 620.141,734.512 620.7,748.33 621.259,729.387 621.818,712.575 622.378,695.861 622.937,697.351 623.496,663.925 624.055,663.195 624.615,648.428 625.174,669.73 625.733,657.477 626.292,678.841 626.852,676.673 627.411,694.273 627.97,695.738 628.529,683.94 629.089,684.307 629.648,702.075 630.207,718.133 630.766,717.282 631.326,703.224 631.885,720.216 632.444,702.284 633.003,732.612 633.563,761.778 634.122,776.322 634.681,785.076 635.24,783.227 635.8,778.722 636.359,774.494 636.918,785.322 637.477,797.103 638.037,745.408 638.596,793.481 639.155,789.869 639.714,801.333 640.274,779.015 640.833,761.73 641.392,710.756 641.951,659.638 642.511,675.732 643.07,676.772 643.629,678.928 644.188,684.687 644.748,653.998 645.307,672.595 645.866,674.039 646.425,724.759 646.985,726.629 647.544,714.235 648.103,697.556 648.662,696.721 649.222,668.544 649.781,684.311 650.34,713.949 650.899,730.837 651.459,728.04 652.018,696.484 652.577,699.988 653.136,702.327 653.696,669.467 654.255,655.117 654.814,659.583 655.373,709.646 655.933,724.254 656.492,740.025 657.051,751.881 657.61,736.591 658.17,715.487 658.729,727.651 659.288,726.143 659.847,689.144 660.407,673.336 660.966,671.371 661.525,670.356 662.084,687.44 662.644,718.396 663.203,700.441 663.762,698.098 664.321,647.583 664.881,633.127 665.44,621.017 665.999,606.096 666.558,590.476 667.118,631.323 667.677,666.135 668.236,650.406 668.795,686.185 669.355,702.504 669.914,716.892 670.473,717.984 671.032,720.217 671.592,686.667 672.151,704.372 672.71,720.581 673.269,703.402 673.829,718.648 674.388,684.668 674.947,686.391 675.506,703.23 676.066,717.025 676.625,731.879 677.184,710.935 677.743,710.921 678.303,692.837 678.862,697.961 679.421,696.987 679.981,730.077 680.54,712.018 681.099,706.184 681.658,707.863 682.218,676.665 682.777,698.241 683.336,698.58 683.895,729.145 684.455,710.735 685.014,742.518 685.573,741.038 686.132,755.126 686.692,764.539 687.251,747.984 687.81,727.216 688.369,708.903 688.929,705.087 689.488,703.943 690.047,691.217 690.606,678.792 691.166,684.886 691.725,683.501 692.284,718.967 692.843,685.59 693.403,718.849 693.962,685.261 694.521,700.398 695.08,680.927 695.64,730.935 696.199,728.771 696.758,726.609 697.317,743.204 697.877,743.521 698.436,710.398 698.995,709.84 699.554,707.126 700.114,710.431 700.673,739.585 701.232,706.595 701.791,703.557 702.351,720.664 702.91,733.359 703.469,665.606 704.028,633.683 704.588,635.865 705.147,654.753 705.706,675.361 706.265,674.175 706.825,677.724 707.384,725.503 707.943,740.797 708.502,789.801 709.062,754.236 709.621,733.183 710.18,733.502 710.739,728.616 711.299,694.05 711.858,709.688 712.417,712.609 712.976,713.465 713.536,715.952 714.095,748.841 714.654,715.258 715.213,714.459 715.773,695.374 716.332,724.777 716.891,692.373 717.45,677.495 718.01,677.616 718.569,696.787 719.128,668.315 719.687,671.665 720.247,639.792 720.806,641.082 721.365,609.339 721.924,599.598 722.484,636.387 723.043,606.576 723.602,625.78 724.161,634.076 724.721,634.118 725.28,654.782 725.839,641.145 726.398,659.256 726.958,661.184 727.517,726.488 728.076,726.173 728.635,692.037 729.195,694.375 729.754,694.562 730.313,689.827 730.872,687.606 731.432,671.375 731.991,658.74 732.55,626.563 733.109,630.413 733.669,632.334 734.228,621.371 734.787,624.491 735.346,662.319 735.906,665.828 736.465,616.886 737.024,619.827 737.583,671.308 738.143,658.803 738.702,660.02 739.261,681.611 739.82,683.204 740.38,718.412 740.939,666.866 741.498,671.432 742.057,670.047 742.617,655.972 743.176,653.391 743.735,640.767 744.294,657.2 744.854,675.31 745.413,706.133 745.972,706.922 746.531,737.438 747.091,737.944 747.65,707.696 748.209,691.926 748.768,677.095 749.328,647.154 749.887,663.744 750.446,665.724 751.005,634.695 751.565,651.327 752.124,668.592 752.683,651.76 753.242,671.509 753.802,687.556 754.361,702.553 754.92,680.388 755.479,678.393 756.039,662.929 756.598,667.242 757.157,683.979 757.716,712.952 758.276,729.491 758.835,796.719 759.394,773.063 759.953,783.9 760.513,794.475 761.072,804.43 761.631,828.407 762.19,835.616 762.75,826.643 763.309,816.477 763.868,760.41 764.427,757.54 764.987,755.463 765.546,735.998 766.105,718.097 766.664,702.145 767.224,667.668 767.783,650.649 768.342,658.579 768.901,660.362 769.461,646.639 770.02,599.433 770.579,601.632 771.138,606.399 771.698,598.106 772.257,600.016 772.816,653.586 773.375,621.141 773.935,606.547 774.494,596.791 775.053,585.878 775.612,611.227 776.172,585.938 776.731,591.659 777.29,612.779 777.849,600.984 778.409,624.579 778.968,644.946 779.527,684.345 780.086,686.284 780.646,704.092 781.205,721.674 781.764,721.669 782.323,752.818 782.883,782.682 783.442,776.828 784.001,804.751 784.56,784.448 785.12,814.627 785.679,824.651 786.238,831.569 786.797,810.777 787.357,774.286 787.916,789.918 788.475,785.215 789.034,796.796 789.594,822.18 790.153,779.469 790.712,775.896 791.271,820.829 791.831,863.087 792.39,855.529 792.949,878.54 793.508,850.483 794.068,830.185 794.627,805.694 795.186,784.805 795.745,760.607 796.305,739.622 796.864,723.26 797.423,707.069 797.982,687.98 798.542,687.892 799.101,702.85 799.66,670.294 800.219,654.011 800.779,652.228 801.338,689.238 801.897,667.775 802.456,666.506 803.016,651.375 803.575,670.022 804.134,686.777 804.693,687.081 805.253,702.731 805.812,699.736 806.371,732.074 806.931,681.223 807.49,665.45 808.049,648.823 808.608,602.922 809.168,575.194 809.727,530.377 810.286,521.081 810.845,514.819 811.405,526.33 811.964,500.421 812.523,511.351 813.082,551.548 813.642,543.466 814.201,567.549 814.76,554.694 815.319,577.506 815.879,614.312 816.438,615.537 816.997,600.39 817.556,604.943 818.116,639.11 818.675,610.601 819.234,613.891 819.793,632.478 820.353,635.618 820.912,641.449 821.471,628.985 822.03,667.973 822.59,666.975 823.149,699.478 823.708,683.27 824.267,701.106 824.827,683.374 825.386,730.823 825.945,727.951 826.504,755.456 827.064,752.125 827.623,700.426 828.182,712.956 828.741,661.15 829.301,679.334 829.86,697.446 830.419,683.001 830.978,701.043 831.538,718.311 832.097,716.474 832.656,794.511 833.215,789.242 833.775,768.497 834.334,780.639 834.893,757.465 835.452,786.855 836.012,745.068 836.571,743.131 837.13,722.273 837.689,704.013 838.249,704.06 838.808,686.571 839.367,704.51 839.926,703.485 840.486,701.462 841.045,699.626 841.604,684.799 842.163,713.686 842.723,712.13 843.282,710.798 843.841,680.67 844.4,647.908 844.96,634.32 845.519,667.728 846.078,668.744 846.637,669.474 847.197,688.776 847.756,686.891 848.315,688.985 848.874,689.794 849.434,692.119 849.993,677.112 850.552,663.323 851.111,632.773 851.671,632.875 852.23,618.991 852.789,557.199 853.348,562.794 853.908,574.584 854.467,566.472 855.026,524.958 855.585,519.292 856.145,509.645 856.704,517.897 857.263,543.377 857.822,534.393 858.382,546.648 858.941,571.449 859.5,564.328 860.059,604.889 860.619,612.109 861.178,662.58 861.737,647.39 862.296,632.641 862.856,671.272 863.415,657.389 863.974,691.079 864.533,691.662 865.093,692.536 865.652,691.177 866.211,722.738 866.77,720.043 867.33,737.019 867.889,748.948 868.448,792.481 869.007,807.458 869.567,799.593 870.126,762.32 870.685,741.072 871.244,737.187 871.804,721.14 872.363,717.571 872.922,747.847 873.481,711.18 874.041,709.488 874.6,692.393 875.159,708.433 875.718,740.275 876.278,772.42 876.837,782.393 877.396,808.582 877.955,802.063 878.515,814.105 879.074,808.38 879.633,819.166 880.192,812.241 880.752,804.456 881.311,766.018 881.87,762.77 882.429,724.681 882.989,760.013 883.548,756.704 884.107,735.912 884.666,731.057 885.226,725.457 885.785,709.164 886.344,707.013 886.903,689.713 887.463,654.597 888.022,625.809 888.581,613.925 889.14,616.752 889.7,619.561 890.259,623.261 890.818,641.627 891.377,676.62 891.937,659.33 892.496,659.564 893.055,662.116 893.614,645.271 894.174,680.881 894.733,633.412 895.292,633.297 895.851,651.251 896.411,672.253 896.97,691.857 897.529,705.58 898.088,705.364 898.648,704.076 899.207,738.357 899.766,717.166 900.325,682.806 900.885,701.27 901.444,710.94 902.003,673.488 902.562,690.607 903.122,738.138 903.681,715.998 904.24,696.945 904.799,681.027 905.359,668.254 905.918,699.214 906.477,681.802 907.036,679.391 907.596,662.484 908.155,661.229 908.714,642.688 909.273,580.491 909.833,603.062 910.392,622.229 910.951,626.839 911.51,615.337 912.07,651.359 912.629,637.372 913.188,637.778 913.747,587.189 914.307,592.979 914.866,601.44 915.425,574.274 915.984,578.53 916.544,567.153 917.103,559.452 917.662,582.368 918.221,589.94 918.781,575.814 919.34,549.584 919.899,568.816 920.458,544.771 921.018,535.299 921.577,577.25 922.136,601.403 922.695,603.656 923.255,640.431 923.814,629.053 924.373,650.255 924.932,633.641 925.492,601.639 926.051,578.544 926.61,588.387 927.169,592.062 927.729,581.681 928.288,588.942 928.847,596.157 929.406,617.948 929.966,623.809 930.525,643.329 931.084,628.435 931.644,650.549 932.203,651.163 932.762,682.185 933.321,680.05 933.881,699.379 934.44,699.921 934.999,714.474 935.558,698.327 936.118,733.92 936.677,698.86 937.236,728.163 937.795,757.784 938.355,724.53 938.914,705.256 939.473,706.871 940.032,672.626 940.592,652.798 941.151,655.382 941.71,622.878 942.269,656.402 942.829,643.453 943.388,645.349 943.947,628.916 944.506,635.153 945.066,655.886 945.625,638.369 946.184,655.931 946.743,657.961 947.303,643.605 947.862,646.316 948.421,661.757 948.98,681.382 949.54,698.087 950.099,680.777 950.658,663.249 951.217,681.983 951.777,713.273 952.336,729.031 952.895,697.828 953.454,693.635 954.014,727.378 954.573,743.581 955.132,721.93 955.691,719.721 956.251,720.934 956.81,750.975 957.369,762.234 957.928,694.52 958.488,696.777 959.047,711.252 959.606,694.427 960.165,695.532 960.725,694.872 961.284,663.278 961.843,683.185 962.402,697.301 962.962,694.318 963.521,710.132 964.08,709.351 964.639,725.823 965.199,752.671 965.758,782.447 966.317,819.301 966.876,845.126 967.436,822.969 967.995,828.643 968.554,806.598 969.113,803.806 969.673,798.205 970.232,807.316 970.791,781.146 971.35,775.696 971.91,771.029 972.469,751.648 973.028,730.789 973.587,743.892 974.147,757.958 974.706,720.835 975.265,732.576 975.824,743.579 976.384,709.761 976.943,691.146 977.502,706.433 978.061,722.303 978.621,734.281 979.18,747.232 979.739,760.008 980.298,739.548 980.858,751.874 981.417,729.644 981.976,727.12 982.535,738.608 983.095,702.657 983.654,702.181 984.213,650.81 984.772,670.585 985.332,652.565 985.891,669.597 986.45,699.897 987.009,698.642 987.569,685.409 988.128,715.202 988.687,716.816 989.246,710.233 989.806,722.815 990.365,722.8 990.924,721.447 991.483,735.011 992.043,750.357 992.602,775.872 993.161,755.293 993.72,736.615 994.28,717.509 994.839,716.753 995.398,730.839 995.957,746.637 996.517,726.652 997.076,720.037 997.635,719.054 998.194,735.429 998.754,734.113 999.313,700.35 999.872,684.198 1000.43,685.329 1000.99,667.524 1001.55,668.658 1002.11,650.977 1002.67,650.034 1003.23,652.59 1003.79,639.66 1004.35,643.163 1004.91,650.416 1005.46,682.495 1006.02,702.085 1006.58,701.404 1007.14,735.334 1007.7,747.09 1008.26,743.719 1008.82,771.964 1009.38,784.218 1009.94,780.471 1010.5,809.327 1011.06,785.713 1011.62,776.18 1012.18,770.943 1012.73,729.893 1013.29,743.021 1013.85,737.638 1014.41,751.516 1014.97,750.387 1015.53,747.196 1016.09,695.042 1016.65,676.234 1017.21,696.432 1017.77,694.537 1018.33,693.51 1018.89,676.486 1019.45,674.355 1020.01,658.215 1020.56,644.955 1021.12,631.313 1021.68,648.756 1022.24,649.746 1022.8,649.111 1023.36,616.951 1023.92,586.545 1024.48,590.388 1025.04,578.222 1025.6,582.423 1026.16,572.765 1026.72,576.692 1027.28,566.69 1027.83,558.699 1028.39,568.021 1028.95,559.121 1029.51,566.465 1030.07,573.164 1030.63,613.659 1031.19,619.973 1031.75,639.793 1032.31,626.234 1032.87,631.159 1033.43,651.542 1033.99,639.03 1034.55,621.872 1035.1,628.992 1035.66,647.916 1036.22,664.362 1036.78,652.917 1037.34,681.804 1037.9,711.755 1038.46,712.201 1039.02,712.032 1039.58,761.633 1040.14,725.99 1040.7,725.676 1041.26,727.009 1041.82,708.008 1042.38,693.306 1042.93,663.497 1043.49,682.607 1044.05,683.118 1044.61,716.584 1045.17,713.166 1045.73,716.382 1046.29,714.677 1046.85,664.312 1047.41,647.45 1047.97,667.66 1048.53,654.163 1049.09,656.138 1049.65,688.658 1050.2,690.743 1050.76,692.725 1051.32,694.262 1051.88,694.066 1052.44,731.257 1053,745.775 1053.56,741.436 1054.12,755.294 1054.68,688.773 1055.24,737.27 1055.8,733.972 1056.36,731.907 1056.92,742.652 1057.48,721.085 1058.03,750.047 1058.59,716.089 1059.15,713.741 1059.71,715.166 1060.27,715.471 1060.83,713.368 1061.39,682.239 1061.95,666.048 1062.51,666.237 1063.07,650.501 1063.63,666.348 1064.19,666.874 1064.75,649.648 1065.3,651.459 1065.86,620.851 1066.42,622.965 1066.98,644.821 1067.54,647.674 1068.1,634.005 1068.66,634.336 1069.22,634.181 1069.78,638.993 1070.34,609.274 1070.9,626.831 1071.46,661.637 1072.02,646.921 1072.57,636.042 1073.13,638.672 1073.69,641.201 1074.25,658.727 1074.81,676.551 1075.37,724.782 1075.93,719.16 1076.49,705.152 1077.05,607.276 1077.61,640.361 1078.17,609.279 1078.73,641.143 1079.29,642.038 1079.85,657.869 1080.4,673.919 1080.96,658.691 1081.52,627.99 1082.08,615.392 1082.64,650.747 1083.2,670.876 1083.76,701.061 1084.32,702.159 1084.88,701.711 1085.44,681.234 1086,681.044 1086.56,699.127 1087.12,696.246 1087.67,696.889 1088.23,712.588 1088.79,692.026 1089.35,771.058 1089.91,767.925 1090.47,733.29 1091.03,716.903 1091.59,732.386 1092.15,730.684 1092.71,713.275 1093.27,742.847 1093.83,758.105 1094.39,724.955 1094.94,717.52 1095.5,698 1096.06,697.605 1096.62,730.665 1097.18,728.799 1097.74,707.184 1098.3,709.421 1098.86,692.329 1099.42,692.155 1099.98,675.549 1100.54,691.856 1101.1,724.297 1101.66,754.665 1102.22,765.183 1102.77,762.372 1103.33,739.177 1103.89,734.992 1104.45,699.15 1105.01,700.05 1105.57,717.084 1106.13,732.223 1106.69,732.695 1107.25,744.23 1107.81,704.692 1108.37,720.165 1108.93,703.195 1109.49,685.952 1110.04,699.487 1110.6,698.777 1111.16,682.066 1111.72,667.293 1112.28,681.735 1112.84,669.04 1113.4,653.962 1113.96,656.093 1114.52,651.705 1115.08,636.467 1115.64,654.371 1116.2,640.992 1116.76,626.527 1117.31,631.529 1117.87,635.574 1118.43,624.284 1118.99,645.447 1119.55,679.023 1120.11,678.9 1120.67,664.854 1121.23,651.3 1121.79,653.791 1122.35,670.041 1122.91,657.624 1123.47,612.165 1124.03,648.128 1124.59,629.579 1125.14,618.194 1125.7,634.707 1126.26,653.928 1126.82,639.337 1127.38,624.061 1127.94,645.982 1128.5,645.857 1129.06,584.156 1129.62,635.829 1130.18,638.049 1130.74,608.574 1131.3,613.284 1131.86,635.132 1132.41,689.405 1132.97,721.812 1133.53,705.011 1134.09,719.682 1134.65,704.358 1135.21,703.28 1135.77,702.456 1136.33,720.233 1136.89,688.726 1137.45,705.088 1138.01,671.638 1138.57,702.858 1139.13,669.051 1139.68,671.089 1140.24,673.164 1140.8,673.742 1141.36,689.973 1141.92,706.373 1142.48,706.091 1143.04,687.485 1143.6,686.764 1144.16,651.337 1144.72,604.092 1145.28,607.795 1145.84,613.675 1146.4,667.274 1146.96,650.266 1147.51,669.135 1148.07,687.268 1148.63,689.142 1149.19,691.134 1149.75,706.753 1150.31,686.601 1150.87,669.268 1151.43,686.032 1151.99,702.949 1152.55,686.773 1153.11,671.052 1153.67,673.874 1154.23,688.236 1154.78,702.906 1155.34,764.415 1155.9,746.151 1156.46,761.869 1157.02,776.111 1157.58,774.87 1158.14,735.903 1158.7,716.998 1159.26,697.465 1159.82,699.359 1160.38,733.664 1160.94,713.365 1161.5,743.363 1162.05,754.673 1162.61,783.698 1163.17,781.747 1163.73,776.466 1164.29,723.194 1164.85,753.118 1165.41,731.92 1165.97,759.758 1166.53,707.229 1167.09,706.047 1167.65,687.955 1168.21,687 1168.77,702.665 1169.33,703.229 1169.88,704.772 1170.44,708.39 1171,739.397 1171.56,768.413 1172.12,732.803 1172.68,713.011 1173.24,696.44 1173.8,680.597 1174.36,664.852 1174.92,697.928 1175.48,731.903 1176.04,727.096 1176.6,741.712 1177.15,772.895 1177.71,736.608 1178.27,766.648 1178.83,763.228 1179.39,746.997 1179.95,744.066 1180.51,758.6 1181.07,738.613 1181.63,751.235 1182.19,790.306 1182.75,784.913 1183.31,730.39 1183.87,744.598 1184.43,723.438 1184.98,723.22 1185.54,702.455 1186.1,735.286 1186.66,744.454 1187.22,741.953 1187.78,772.796 1188.34,751.65 1188.9,747.842 1189.46,761.969 1190.02,711.197 1190.58,710.591 1191.14,724.698 1191.7,741.348 1192.25,739.574 1192.81,736.831 1193.37,729.685 1193.93,743.12 1194.49,741.417 1195.05,756.789 1195.61,752.987 1196.17,765.452 1196.73,744.105 1197.29,701.886 1197.85,702.112 1198.41,687.541 1198.97,720.159 1199.52,718.388 1200.08,729.567 1200.64,725.157 1201.2,723.063 1201.76,735.141 1202.32,701.771 1202.88,734.691 1203.44,698.711 1204,666.175 1204.56,683.986 1205.12,680.761 1205.68,663.093 1206.24,628.537 1206.8,661.531 1207.35,661.298 1207.91,659.498 1208.47,642.088 1209.03,613.894 1209.59,617.732 1210.15,637.318 1210.71,621.165 1211.27,638.058 1211.83,653.503 1212.39,625.024 1212.95,643.8 1213.51,657.638 1214.07,644.353 1214.62,614.215 1215.18,620.051 1215.74,655.467 1216.3,656.594 1216.86,676.487 1217.42,648.952 1217.98,652.326 1218.54,686.656 1219.1,686.227 1219.66,669.522 1220.22,708.181 1220.78,710.457 1221.34,724.457 1221.89,735.078 1222.45,734.082 1223.01,730.364 1223.57,731.203 1224.13,744.504 1224.69,739.415 1225.25,751.993 1225.81,747.577 1226.37,745.87 1226.93,728.476 1227.49,727.033 1228.05,725.068 1228.61,722.689 1229.17,706.309 1229.72,738.425 1230.28,703.615 1230.84,715.887 1231.4,731.915 1231.96,730.048 1232.52,722.585 1233.08,671.053 1233.64,640.483 1234.2,659.008 1234.76,631.714 1235.32,601.234 1235.88,602.267 1236.44,602.685 1236.99,587.814 1237.55,574.835 1238.11,597.534 1238.67,617.75 1239.23,575.032 1239.79,548.292 1240.35,539.647 1240.91,548.26 1241.47,556.459 1242.03,546.461 1242.59,559.586 1243.15,551.975 1243.71,556.763 1244.26,580.085 1244.82,599.97 1245.38,591.575 1245.94,598.493 1246.5,654.761 1247.06,656.483 1247.62,659.155 1248.18,690.706 1248.74,626.03 1249.3,628.422 1249.86,633.87 1250.42,652.259 1250.98,651.419 1251.54,671.225 1252.09,670.064 1252.65,668.833 1253.21,653.284 1253.77,668.255 1254.33,685.753 1254.89,652.01 1255.45,655.942 1256.01,655.628 1256.57,689.759 1257.13,689.615 1257.69,692.051 1258.25,673.834 1258.81,725.166 1259.36,703.625 1259.92,700.358 1260.48,685.188 1261.04,683.952 1261.6,683.296 1262.16,702.825 1262.72,672.696 1263.28,671.868 1263.84,687.9 1264.4,721.22 1264.96,802.08 1265.52,797.177 1266.08,791.431 1266.63,786.863 1267.19,765.942 1267.75,793.114 1268.31,774.613 1268.87,801.599 1269.43,778.872 1269.99,776.959 1270.55,769.446 1271.11,745.742 1271.67,742.425 1272.23,741.37 1272.79,786.072 1273.35,797.096 1273.91,775.206 1274.46,753.76 1275.02,746.516 1275.58,744.869 1276.14,804.613 1276.7,799.912 1277.26,789.737 1277.82,765.259 1278.38,793.767 1278.94,805.33 1279.5,830.831 1280.06,794.847 1280.62,773.185 1281.18,785.992 1281.73,750.842 1282.29,732.516 1282.85,697.837 1283.41,682.859 1283.97,668.585 1284.53,670.688 1285.09,658.56 1285.65,660.794 1286.21,663.544 1286.77,631.964 1287.33,630.688 1287.89,619.776 1288.45,625.251 1289,595.555 1289.56,601.726 1290.12,592.337 1290.68,548.212 1291.24,570.221 1291.8,608.909 1292.36,612.494 1292.92,647.399 1293.48,631.71 1294.04,651.414 1294.6,634.158 1295.16,606.055 1295.72,591.817 1296.28,579.752 1296.83,565.624 1297.39,520.972 1297.95,549.164 1298.51,513.406 1299.07,558.058 1299.63,565.482 1300.19,558.354 1300.75,599.616 1301.31,604.245 1301.87,593.181 1302.43,597.014 1302.99,599.589 1303.55,588.796 1304.1,594.461 1304.66,615.596 1305.22,650.655 1305.78,653.098 1306.34,654.769 1306.9,721.837 1307.46,720.492 1308.02,703.152 1308.58,702.165 1309.14,701.954 1309.7,702.931 1310.26,701.553 1310.82,700.054 1311.38,699.749 1311.93,697.298 1312.49,667.174 1313.05,697.492 1313.61,663.604 1314.17,667.82 1314.73,654.625 1315.29,623.963 1315.85,644.486 1316.41,649.124 1316.97,639.594 1317.53,610.511 1318.09,635.128 1318.65,669.515 1319.2,654.89 1319.76,687.676 1320.32,672.158 1320.88,661.133 1321.44,712.979 1322,693.227 1322.56,673.611 1323.12,658.868 1323.68,664.237 1324.24,663.982 1324.8,665.575 1325.36,713.781 1325.92,727.233 1326.47,674.946 1327.03,691.167 1327.59,710.188 1328.15,696.263 1328.71,700.558 1329.27,701.343 1329.83,747.964 1330.39,793.866 1330.95,771.997 1331.51,770.204 1332.07,751.605 1332.63,744.204 1333.19,757.523 1333.75,722.435 1334.3,737.723 1334.86,769.533 1335.42,795.021 1335.98,774.681 1336.54,782.723 1337.1,761.244 1337.66,755.748 1338.22,725.071 1338.78,724.464 1339.34,722.796 1339.9,721.24 1340.46,765.04 1341.02,776.935 1341.57,742.192 1342.13,722.506 1342.69,722.527 1343.25,652.035 1343.81,654.948 1344.37,653.07 1344.93,623.074 1345.49,629.862 1346.05,631.302 1346.61,619.151 1347.17,639.782 1347.73,644.73 1348.29,665.442 1348.84,666.828 1349.4,669.926 1349.96,670.659 1350.52,671.079 1351.08,688.867 1351.64,718.558 1352.2,714.728 1352.76,731.864 1353.32,741.789 1353.88,758.24 1354.44,769.032 1355,734.724 1355.56,714.528 1356.12,665.995 1356.67,685.192 1357.23,714.695 1357.79,711.621 1358.35,754.743 1358.91,766.567 1359.47,779.517 1360.03,793.365 1360.59,786.345 1361.15,795.751 1361.71,788.871 1362.27,767.971 1362.83,732.543 1363.39,725.799 1363.94,725.019 1364.5,677.289 1365.06,677.293 1365.62,644.315 1366.18,647.363 1366.74,668.356 1367.3,651.061 1367.86,621.523 1368.42,640.163 1368.98,609.234 1369.54,582.613 1370.1,604.187 1370.66,609.376 1371.21,629.637 1371.77,616.439 1372.33,633.256 1372.89,619.949 1373.45,638.355 1374.01,655.812 1374.57,671.111 1375.13,668.847 1375.69,654.342 1376.25,640.044 1376.81,656.688 1377.37,657.751 1377.93,671.831 1378.49,688.459 1379.04,656.052 1379.6,675.394 1380.16,676.076 1380.72,646.776 1381.28,648.908 1381.84,666.539 1382.4,685.218 1382.96,715.67 1383.52,715.635 1384.08,696.102 1384.64,694.919 1385.2,708.479 1385.76,692.371 1386.31,600.211 1386.87,591.282 1387.43,578.73 1387.99,598.563 1388.55,540.685 1389.11,581.755 1389.67,639.54 1390.23,643.55 1390.79,614.035 1391.35,632.671 1391.91,637.211 1392.47,642.678 1393.03,629.496 1393.58,648.223 1394.14,650.478 1394.7,663.802 1395.26,683.105 1395.82,682.083 1396.38,699.608 1396.94,728.801 1397.5,727.72 1398.06,723.622 1398.62,705.557 1399.18,721.161 1399.74,718.933 1400.3,735.282 1400.86,733.501 1401.41,716.443 1401.97,702.233 1402.53,701.123 1403.09,679.943 1403.65,677.514 1404.21,691.446 1404.77,691.286 1405.33,690.607 1405.89,689.815 1406.45,691.745 1407.01,660.376 1407.57,663.287 1408.13,664.771 1408.68,635.36 1409.24,654.773 1409.8,671.549 1410.36,686.115 1410.92,719.615 1411.48,763.75 1412.04,725.953 1412.6,736.462 1413.16,730.988 1413.72,727.092 1414.28,708.751 1414.84,739.107 1415.4,720.927 1415.95,733.143 1416.51,716.218 1417.07,717.423 1417.63,698.303 1418.19,681.711 1418.75,683.887 1419.31,670.62 1419.87,656.611 1420.43,641.977 1420.99,643.677 1421.55,612.998 1422.11,617.25 1422.67,620.614 1423.23,610.358 1423.78,632.92 1424.34,649.602 1424.9,653.681 1425.46,656.312 1426.02,657.597 1426.58,691.065 1427.14,706.283 1427.7,689.596 1428.26,704.069 1428.82,716.971 1429.38,728.903 1429.94,741.709 1430.5,737.977 1431.05,747.892 1431.61,779.389 1432.17,775.186 1432.73,752.777 1433.29,763.161 1433.85,741.708 1434.41,756.742 1434.97,731.585 1435.53,715.887 1436.09,698.028 1436.65,681.12 1437.21,694.679 1437.77,695.501 1438.33,731.397 1438.88,678.731 1439.44,710.156 1440,726.093 1440.56,723.164 1441.12,719.927 1441.68,668.381 1442.24,683.564 1442.8,698.361 1443.36,750.525 1443.92,715.796 1444.48,709.472 1445.04,689.05 1445.6,736.893 1446.15,738.714 1446.71,719.139 1447.27,749.496 1447.83,707.483 1448.39,692.113 1448.95,659.391 1449.51,660.781 1450.07,646.432 1450.63,651.534 1451.19,653.936 1451.75,671.933 1452.31,672.764 1452.87,691.099 1453.42,692.514 1453.98,690.457 1454.54,656.12 1455.1,658.437 1455.66,663.478 1456.22,679.466 1456.78,629.594 1457.34,601.046 1457.9,607.272 1458.46,630.122 1459.02,651.817 1459.58,651.967 1460.14,652.89 1460.7,623.07 1461.25,562.119 1461.81,601.519 1462.37,684.334 1462.93,715.842 1463.49,731.712 1464.05,730.312 1464.61,745.819 1465.17,777.152 1465.73,773.423 1466.29,769.723 1466.85,786.674 1467.41,768.9 1467.97,763.774 1468.52,779.371 1469.08,807.454 1469.64,730.083 1470.2,695.519 1470.76,728.812 1471.32,706.988 1471.88,688.299 1472.44,671.138 1473,689.192 1473.56,706.389 1474.12,676.343 1474.68,672.336 1475.24,654.051 1475.79,654.663 1476.35,655.067 1476.91,672.193 1477.47,688.207 1478.03,670.725 1478.59,687.815 1479.15,653.285 1479.71,640.966 1480.27,623.774 1480.83,625.978 1481.39,644.182 1481.95,646.086 1482.51,630.776 1483.07,652.408 1483.62,656.374 1484.18,656.502 1484.74,671.585 1485.3,644.22 1485.86,651.962 1486.42,653.631 1486.98,654.198 1487.54,651.852 1488.1,655.052 1488.66,670.204 1489.22,750.766 1489.78,763.116 1490.34,774.224 1490.89,755.66 1491.45,738.512 1492.01,723.119 1492.57,737.042 1493.13,750.42 1493.69,720.086 1494.25,719.706 1494.81,721.728 1495.37,739.043 1495.93,688.61 1496.49,720.456 1497.05,714.659 1497.61,774.424 1498.16,770.523 1498.72,780.839 1499.28,825.016 1499.84,816.076 1500.4,777.308 1500.96,754.24 1501.52,729.987 1502.08,706.631 1502.64,670.023 1503.2,654.253 1503.76,638.985 1504.32,622.929 1504.88,643.753 1505.44,663.433 1505.99,647.499 1506.55,651.465 1507.11,666.018 1507.67,651.35 1508.23,652.303 1508.79,653.375 1509.35,667.678 1509.91,685.819 1510.47,700.528 1511.03,682.636 1511.59,715.495 1512.15,729.148 1512.71,692.933 1513.26,660.459 1513.82,663.588 1514.38,661.881 1514.94,648.433 1515.5,652.206 1516.06,656.786 1516.62,658.256 1517.18,692.529 1517.74,693.688 1518.3,694.828 1518.86,693.717 1519.42,726.725 1519.98,727.972 1520.53,744.036 1521.09,724.417 1521.65,721.719 1522.21,720.167 1522.77,719.564 1523.33,750.712 1523.89,718.828 1524.45,685.169 1525.01,685.679 1525.57,700.503 1526.13,715.925 1526.69,698.223 1527.25,682.948 1527.81,647.284 1528.36,652.985 1528.92,622.055 1529.48,610.895 1530.04,616.63 1530.6,585.958 1531.16,590.163 1531.72,607.417 1532.28,629.716 1532.84,632.65 1533.4,650.734 1533.96,671.893 1534.52,676.444 1535.08,662.6 1535.63,664.601 1536.19,667.008 1536.75,634.694 1537.31,643.674 1537.87,630.496 1538.43,630.946 1538.99,681.898 1539.55,669.447 1540.11,686.065 1540.67,686.75 1541.23,671.444 1541.79,688.938 1542.35,688.813 1542.9,689.122 1543.46,660.207 1544.02,662.517 1544.58,664.062 1545.14,647.209 1545.7,651.447 1546.26,626.363 1546.82,595.439 1547.38,616.774 1547.94,606.948 1548.5,626.875 1549.06,615.38 1549.62,603.113 1550.18,592.699 1550.73,582.102 1551.29,587.838 1551.85,575.331 1552.41,579.913 1552.97,587.637 1553.53,576.292 1554.09,583.871 1554.65,590.733 1555.21,612.106 1555.77,601.386 1556.33,610.076 1556.89,599.083 1557.45,604.912 1558,624.482 1558.56,599.609 1559.12,587.006 1559.68,595.34 1560.24,603.099 1560.8,624.181 1561.36,644.425 1561.92,630.766 1562.48,614.427 1563.04,585.777 1563.6,573.114 1564.16,578.008 1564.72,582.568 1565.28,586.324 1565.83,643.229 1566.39,663.839 1566.95,679.592 1567.51,680.489 1568.07,696.848 1568.63,714.447 1569.19,728.804 1569.75,723.359 1570.31,705.716 1570.87,733.78 1571.43,731.704 1571.99,717.531 1572.55,715.966 1573.1,713.015 1573.66,680.407 1574.22,712.11 1574.78,742.324 1575.34,751.802 1575.9,727.924 1576.46,725.21 1577.02,724.211 1577.58,704.132 1578.14,733.675 1578.7,733.934 1579.26,725.293 1579.82,721.772 1580.37,720.826 1580.93,719.493 1581.49,684.584 1582.05,716.704 1582.61,700.466 1583.17,704.79 1583.73,690.861 1584.29,718.745 1584.85,716.466 1585.41,681.371 1585.97,697.223 1586.53,692.393 1587.09,723.686 1587.65,720.179 1588.2,713.529 1588.76,730.432 1589.32,726.117 1589.88,724.123 1590.44,722.175 1591,719.531 1591.56,746.786 1592.12,739.96 1592.68,750.035 1593.24,729.387 1593.8,728.195 1594.36,725.986 1594.92,707.582 1595.47,654.167 1596.03,640.016 1596.59,640.776 1597.15,643.074 1597.71,614.123 1598.27,650.278 1598.83,655.662 1599.39,671.362 1599.95,704.364 1600.51,707.046 1601.07,689.003 1601.63,673.416 1602.19,672.776 1602.74,690.119 1603.3,690.689 1603.86,669.717 1604.42,685.391 1604.98,655.174 1605.54,657.402 1606.1,623.375 1606.66,622.502 1607.22,611.641 1607.78,650.518 1608.34,650.857 1608.9,608.54 1609.46,616.908 1610.02,649.581 1610.57,671.21 1611.13,688.821 1611.69,672.56 1612.25,671.761 1612.81,685.813 1613.37,702.533 1613.93,684.802 1614.49,713.943 1615.05,728.644 1615.61,757.887 1616.17,738.301 1616.73,752 1617.29,733.536 1617.84,747.857 1618.4,715.797 1618.96,696.974 1619.52,728.313 1620.08,758.38 1620.64,754.789 1621.2,787.445 1621.76,752.881 1622.32,734.713 1622.88,731.226 1623.44,728.989 1624,744.449 1624.56,723.285 1625.11,701.758 1625.67,720.084 1626.23,750.502 1626.79,747.607 1627.35,745.166 1627.91,710.78 1628.47,726.835 1629.03,706.785 1629.59,739.519 1630.15,720.179 1630.71,730.528 1631.27,761.029 1631.83,757.495 1632.39,737.895 1632.94,735.208 1633.5,747.94 1634.06,759.615 1634.62,738.851 1635.18,730.586 1635.74,728.872 1636.3,725.147 1636.86,656.486 1637.42,644.852 1637.98,662.558 1638.54,666.573 1639.1,666.81 1639.66,682.226 1640.21,682.676 1640.77,649.431 1641.33,662.814 1641.89,631.061 1642.45,633.749 1643.01,619.852 1643.57,623.135 1644.13,607.929 1644.69,596.343 1645.25,614.103 1645.81,631.85 1646.37,635.475 1646.93,607.808 1647.48,629.231 1648.04,598.746 1648.6,567.19 1649.16,607.333 1649.72,610.013 1650.28,599.814 1650.84,651.062 1651.4,683.852 1651.96,685.352 1652.52,718.001 1653.08,686.632 1653.64,702.302 1654.2,685.284 1654.76,688.168 1655.31,670.081 1655.87,700.502 1656.43,713.834 1656.99,727.651 1657.55,728.372 1658.11,758.015 1658.67,772.505 1659.23,723.586 1659.79,707.548 1660.35,693.147 1660.91,691.517 1661.47,676.948 1662.03,665.487 1662.58,651.691 1663.14,652.47 1663.7,652.913 1664.26,650.121 1664.82,669.075 1665.38,704.428 1665.94,689.058 1666.5,685.434 1667.06,699.977 1667.62,699.173 1668.18,697.759 1668.74,679.39 1669.3,664.713 1669.85,664.665 1670.41,631.285 1670.97,621.082 1671.53,641.431 1672.09,646.118 1672.65,616.535 1673.21,602.323 1673.77,627.13 1674.33,664.128 1674.89,646.703 1675.45,646.333 1676.01,649.377 1676.57,649.206 1677.13,647.672 1677.68,664.746 1678.24,681.383 1678.8,715.298 1679.36,730.138 1679.92,727.481 1680.48,741.786 1681.04,738.551 1681.6,769.426 1682.16,715.106 1682.72,711.733 1683.28,737.784 1683.84,735.892 1684.4,717.794 1684.95,681.687 1685.51,745.596 1686.07,757.859 1686.63,755.161 1687.19,750.893 1687.75,747.51 1688.31,776.255 1688.87,770.808 1689.43,764.932 1689.99,790.984 1690.55,782.999 1691.11,743.811 1691.67,757.449 1692.23,749.016 1692.78,714.034 1693.34,681.184 1693.9,695.278 1694.46,695.518 1695.02,710.968 1695.58,693.473 1696.14,710.654 1696.7,708.555 1697.26,673.726 1697.82,673.857 1698.38,624.433 1698.94,627.583 1699.5,612.858 1700.05,631.241 1700.61,635.349 1701.17,634.347 1701.73,652.005 1702.29,652.285 1702.85,653.484 1703.41,653.2 1703.97,638.905 1704.53,640.804 1705.09,624.706 1705.65,608.067 1706.21,611.288 1706.77,630.718 1707.32,628.594 1707.88,649.475 1708.44,668.231 1709,638.781 1709.56,657.528 1710.12,658.086 1710.68,690.003 1711.24,686.416 1711.8,699.759 1712.36,727.493 1712.92,725.496 1713.48,704.62 1714.04,735.779 1714.6,734.645 1715.15,715.602 1715.71,695.353 1716.27,679.493 1716.83,646.035 1717.39,667.717 1717.95,652.696 1718.51,669.737 1719.07,701.766 1719.63,684.571 1720.19,653.311 1720.75,619.615 1721.31,609.02 1721.87,625.895 1722.42,628.419 1722.98,601.518 1723.54,620.091 1724.1,652.673 1724.66,653.93 1725.22,620.791 1725.78,624.512 1726.34,613.048 1726.9,617.492 1727.46,638.727 1728.02,628.229 1728.58,632.297 1729.14,663.095 1729.69,664.423 1730.25,665.718 1730.81,678.917 1731.37,696.316 1731.93,695.562 1732.49,694.906 1733.05,694.807 1733.61,675.425 1734.17,690.968 1734.73,674.775 1735.29,660.44 1735.85,694.515 1736.41,712.478 1736.97,725.187 1737.52,738.503 1738.08,735.901 1738.64,720.122 1739.2,722.059 1739.76,721.823 1740.32,786.166 1740.88,764.113 1741.44,778.089 1742,772.494 1742.56,734.548 1743.12,687.171 1743.68,705.502 1744.24,744.233 1744.79,724.337 1745.35,758.359 1745.91,770.311 1746.47,750.124 1747.03,748.056 1747.59,745.507 1748.15,741.903 1748.71,718.625 1749.27,700.65 1749.83,697.194 1750.39,660.281 1750.95,644.334 1751.51,648.738 1752.06,637.168 1752.62,625.646 1753.18,629.49 1753.74,668.167 1754.3,672.84 1754.86,674.278 1755.42,694.457 1755.98,696.96 1756.54,678.924 1757.1,699.022 1757.66,714.084 1758.22,699.124 1758.78,710.189 1759.34,757.42 1759.89,752.052 1760.45,764.499 1761.01,742.462 1761.57,756.112 1762.13,749.134 1762.69,745.926 1763.25,727.667 1763.81,759.261 1764.37,758.558 1764.93,724.217 1765.49,689.49 1766.05,660.436 1766.61,659.075 1767.16,661.652 1767.72,647.456 1768.28,646.572 1768.84,630.743 1769.4,648.622 1769.96,619.94 1770.52,621.352 1771.08,654.957 1771.64,658.419 1772.2,612.435 1772.76,632.65 1773.32,633.16 1773.88,633.775 1774.43,668.933 1774.99,669.286 1775.55,637.934 1776.11,624.517 1776.67,612.887 1777.23,616.534 1777.79,612.248 1778.35,633.379 1778.91,639.446 1779.47,691.724 1780.03,692.869 1780.59,707.071 1781.15,694.428 1781.71,697.173 1782.26,728.363 1782.82,728.939 1783.38,760.21 1783.94,759.325 1784.5,755.563 1785.06,763.198 1785.62,738.956 1786.18,738.46 1786.74,749.311 1787.3,746.086 1787.86,724.902 1788.42,737.792 1788.98,735.237 1789.53,700.682 1790.09,733.126 1790.65,745.826 1791.21,694.738 1791.77,692.225 1792.33,691.381 1792.89,689.285 1793.45,722.234 1794.01,751.368 1794.57,733.105 1795.13,714.3 1795.69,715.744 1796.25,725.329 1796.8,724.093 1797.36,701.57 1797.92,715.277 1798.48,698.711 1799.04,699.882 1799.6,715.835 1800.16,698.852 1800.72,713.735 1801.28,692.823 1801.84,675.614 1802.4,658.081 1802.96,638.88 1803.52,622.684 1804.08,625.489 1804.63,644.719 1805.19,661.756 1805.75,662.654 1806.31,665.444 1806.87,650.839 1807.43,641.54 1807.99,677.481 1808.55,691.491 1809.11,707.776 1809.67,669.271 1810.23,640.332 1810.79,611.502 1811.35,630.687 1811.9,613.348 1812.46,649.234 1813.02,685.408 1813.58,671.202 1814.14,652.127 1814.7,653.361 1815.26,683.639 1815.82,666.071 1816.38,651.013 1816.94,619.764 1817.5,620.013 1818.06,623.067 1818.62,658.229 1819.18,678.003 1819.73,661.62 1820.29,613.423 1820.85,616.011 1821.41,616.791 1821.97,620.156 1822.53,607.746 1823.09,612.493 1823.65,618.785 1824.21,642.59 1824.77,645.924 1825.33,629.526 1825.89,635.898 1826.45,655.016 1827,642.713 1827.56,676.702 1828.12,707.954 1828.68,676.812 1829.24,709.354 1829.8,722.212 1830.36,720.262 1830.92,686.409 1831.48,653.445 1832.04,672.992 1832.6,692.095 1833.16,721.616 1833.72,704.793 1834.27,676.93 1834.83,676.185 1835.39,647.625 1835.95,649.314 1836.51,618.386 1837.07,638.27 1837.63,639.763 1838.19,674.052 \"/>\n<path clip-path=\"url(#clip833)\" d=\"M720.247 689.216 L720.806 689.216 L721.365 689.216 L721.924 689.216 L722.484 689.216 L723.043 689.216 L723.602 689.216 L724.161 689.216 L724.721 689.216 L725.28 689.216 L725.839 689.216 L726.398 689.216 L726.958 689.216 L727.517 689.216 L728.076 689.216 L728.635 689.216 L729.195 689.216 L729.754 689.216 L730.313 689.216 L730.872 689.216 L731.432 689.216 L731.991 689.216 L732.55 689.216 L733.109 689.216 L733.669 689.216 L734.228 689.216 L734.787 689.216 L735.346 689.216 L735.906 689.216 L736.465 689.216 L737.024 689.216 L737.583 689.216 L738.143 689.216 L738.702 689.216 L739.261 689.216 L739.82 689.216 L740.38 689.216 L740.939 689.216 L741.498 689.216 L742.057 689.216 L742.617 689.216 L743.176 689.216 L743.735 689.216 L744.294 689.216 L744.854 689.216 L745.413 689.216 L745.972 689.216 L746.531 689.216 L747.091 689.216 L747.65 689.216 L748.209 689.216 L748.768 689.216 L749.328 689.216 L749.887 689.216 L750.446 689.216 L751.005 689.216 L751.565 689.216 L752.124 689.216 L752.683 689.216 L753.242 689.216 L753.802 689.216 L754.361 689.216 L754.92 689.216 L755.479 689.216 L756.039 689.216 L756.598 689.216 L757.157 689.216 L757.716 689.216 L758.276 689.216 L758.835 689.216 L759.394 689.216 L759.953 689.216 L760.513 689.216 L761.072 689.216 L761.631 689.216 L762.19 689.216 L762.75 689.216 L763.309 689.216 L763.868 689.216 L764.427 689.216 L764.987 689.216 L765.546 689.216 L766.105 689.216 L766.664 689.216 L767.224 689.216 L767.783 689.216 L768.342 689.216 L768.901 689.216 L769.461 689.216 L770.02 689.216 L770.579 689.216 L771.138 689.216 L771.698 689.216 L772.257 689.216 L772.816 689.216 L773.375 689.216 L773.935 689.216 L774.494 689.216 L775.053 689.216 L775.612 689.216 L776.172 689.216 L776.731 689.216 L777.29 689.216 L777.849 689.216 L778.409 689.216 L778.968 689.216 L779.527 689.216 L780.086 689.216 L780.646 689.216 L781.205 689.216 L781.764 689.216 L782.323 689.216 L782.883 689.216 L783.442 689.216 L784.001 689.216 L784.56 689.216 L785.12 689.216 L785.679 689.216 L786.238 689.216 L786.797 689.216 L787.357 689.216 L787.916 689.216 L788.475 689.216 L789.034 689.216 L789.594 689.216 L790.153 689.216 L790.712 689.216 L791.271 689.216 L791.831 689.216 L792.39 689.216 L792.949 689.216 L793.508 689.216 L794.068 689.216 L794.627 689.216 L795.186 689.216 L795.745 689.216 L796.305 689.216 L796.864 689.216 L797.423 689.216 L797.982 689.216 L798.542 689.216 L799.101 689.216 L799.66 689.216 L800.219 689.216 L800.779 689.216 L801.338 689.216 L801.897 689.216 L802.456 689.216 L803.016 689.216 L803.575 689.216 L804.134 689.216 L804.693 689.216 L805.253 689.216 L805.812 689.216 L806.371 689.216 L806.931 689.216 L807.49 689.216 L808.049 689.216 L808.608 689.216 L809.168 689.216 L809.727 689.216 L810.286 689.216 L810.845 689.216 L811.405 689.216 L811.964 689.216 L812.523 689.216 L813.082 689.216 L813.642 689.216 L814.201 689.216 L814.76 689.216 L815.319 689.216 L815.879 689.216 L816.438 689.216 L816.997 689.216 L817.556 689.216 L818.116 689.216 L818.675 689.216 L819.234 689.216 L819.793 689.216 L820.353 689.216 L820.912 689.216 L821.471 689.216 L822.03 689.216 L822.59 689.216 L823.149 689.216 L823.708 689.216 L824.267 689.216 L824.827 689.216 L825.386 689.216 L825.945 689.216 L826.504 689.216 L827.064 689.216 L827.623 689.216 L828.182 689.216 L828.741 689.216 L829.301 689.216 L829.86 689.216 L830.419 689.216 L830.978 689.216 L831.538 689.216 L832.097 689.216 L832.656 689.216 L833.215 689.216 L833.775 689.216 L834.334 689.216 L834.893 689.216 L835.452 689.216 L836.012 689.216 L836.571 689.216 L837.13 689.216 L837.689 689.216 L838.249 689.216 L838.808 689.216 L839.367 689.216 L839.926 689.216 L840.486 689.216 L841.045 689.216 L841.604 689.216 L842.163 689.216 L842.723 689.216 L843.282 689.216 L843.841 689.216 L844.4 689.216 L844.96 689.216 L845.519 689.216 L846.078 689.216 L846.637 689.216 L847.197 689.216 L847.756 689.216 L848.315 689.216 L848.874 689.216 L849.434 689.216 L849.993 689.216 L850.552 689.216 L851.111 689.216 L851.671 689.216 L852.23 689.216 L852.789 689.216 L853.348 689.216 L853.908 689.216 L854.467 689.216 L855.026 689.216 L855.585 689.216 L856.145 689.216 L856.704 689.216 L857.263 689.216 L857.822 689.216 L858.382 689.216 L858.941 689.216 L859.5 689.216 L860.059 689.216 L860.619 689.216 L861.178 689.216 L861.737 689.216 L862.296 689.216 L862.856 689.216 L863.415 689.216 L863.974 689.216 L864.533 689.216 L865.093 689.216 L865.652 689.216 L866.211 689.216 L866.77 689.216 L867.33 689.216 L867.889 689.216 L868.448 689.216 L869.007 689.216 L869.567 689.216 L870.126 689.216 L870.685 689.216 L871.244 689.216 L871.804 689.216 L872.363 689.216 L872.922 689.216 L873.481 689.216 L874.041 689.216 L874.6 689.216 L875.159 689.216 L875.718 689.216 L876.278 689.216 L876.837 689.216 L877.396 689.216 L877.955 689.216 L878.515 689.216 L879.074 689.216 L879.633 689.216 L880.192 689.216 L880.752 689.216 L881.311 689.216 L881.87 689.216 L882.429 689.216 L882.989 689.216 L883.548 689.216 L884.107 689.216 L884.666 689.216 L885.226 689.216 L885.785 689.216 L886.344 689.216 L886.903 689.216 L887.463 689.216 L888.022 689.216 L888.581 689.216 L889.14 689.216 L889.7 689.216 L890.259 689.216 L890.818 689.216 L891.377 689.216 L891.937 689.216 L892.496 689.216 L893.055 689.216 L893.614 689.216 L894.174 689.216 L894.733 689.216 L895.292 689.216 L895.851 689.216 L896.411 689.216 L896.97 689.216 L897.529 689.216 L898.088 689.216 L898.648 689.216 L899.207 689.216 L899.766 689.216 L900.325 689.216 L900.885 689.216 L901.444 689.216 L902.003 689.216 L902.562 689.216 L903.122 689.216 L903.681 689.216 L904.24 689.216 L904.799 689.216 L905.359 689.216 L905.918 689.216 L906.477 689.216 L907.036 689.216 L907.596 689.216 L908.155 689.216 L908.714 689.216 L909.273 689.216 L909.833 689.216 L910.392 689.216 L910.951 689.216 L911.51 689.216 L912.07 689.216 L912.629 689.216 L913.188 689.216 L913.747 689.216 L914.307 689.216 L914.866 689.216 L915.425 689.216 L915.984 689.216 L916.544 689.216 L917.103 689.216 L917.662 689.216 L918.221 689.216 L918.781 689.216 L919.34 689.216 L919.899 689.216 L920.458 689.216 L921.018 689.216 L921.577 689.216 L922.136 689.216 L922.695 689.216 L923.255 689.216 L923.814 689.216 L924.373 689.216 L924.932 689.216 L925.492 689.216 L926.051 689.216 L926.61 689.216 L927.169 689.216 L927.729 689.216 L928.288 689.216 L928.847 689.216 L929.406 689.216 L929.966 689.216 L930.525 689.216 L931.084 689.216 L931.644 689.216 L932.203 689.216 L932.762 689.216 L933.321 689.216 L933.881 689.216 L934.44 689.216 L934.999 689.216 L935.558 689.216 L936.118 689.216 L936.677 689.216 L937.236 689.216 L937.795 689.216 L938.355 689.216 L938.914 689.216 L939.473 689.216 L940.032 689.216 L940.592 689.216 L941.151 689.216 L941.71 689.216 L942.269 689.216 L942.829 689.216 L943.388 689.216 L943.947 689.216 L944.506 689.216 L945.066 689.216 L945.625 689.216 L946.184 689.216 L946.743 689.216 L947.303 689.216 L947.862 689.216 L948.421 689.216 L948.98 689.216 L949.54 689.216 L950.099 689.216 L950.658 689.216 L951.217 689.216 L951.777 689.216 L952.336 689.216 L952.895 689.216 L953.454 689.216 L954.014 689.216 L954.573 689.216 L955.132 689.216 L955.691 689.216 L956.251 689.216 L956.81 689.216 L957.369 689.216 L957.928 689.216 L958.488 689.216 L959.047 689.216 L959.606 689.216 L960.165 689.216 L960.725 689.216 L961.284 689.216 L961.843 689.216 L962.402 689.216 L962.962 689.216 L963.521 689.216 L964.08 689.216 L964.639 689.216 L965.199 689.216 L965.758 689.216 L966.317 689.216 L966.876 689.216 L967.436 689.216 L967.995 689.216 L968.554 689.216 L969.113 689.216 L969.673 689.216 L970.232 689.216 L970.791 689.216 L971.35 689.216 L971.91 689.216 L972.469 689.216 L973.028 689.216 L973.587 689.216 L974.147 689.216 L974.706 689.216 L975.265 689.216 L975.824 689.216 L976.384 689.216 L976.943 689.216 L977.502 689.216 L978.061 689.216 L978.621 689.216 L979.18 689.216 L979.739 689.216 L980.298 689.216 L980.858 689.216 L981.417 689.216 L981.976 689.216 L982.535 689.216 L983.095 689.216 L983.654 689.216 L984.213 689.216 L984.772 689.216 L985.332 689.216 L985.891 689.216 L986.45 689.216 L987.009 689.216 L987.569 689.216 L988.128 689.216 L988.687 689.216 L989.246 689.216 L989.806 689.216 L990.365 689.216 L990.924 689.216 L991.483 689.216 L992.043 689.216 L992.602 689.216 L993.161 689.216 L993.72 689.216 L994.28 689.216 L994.839 689.216 L995.398 689.216 L995.957 689.216 L996.517 689.216 L997.076 689.216 L997.635 689.216 L998.194 689.216 L998.754 689.216 L999.313 689.216 L999.872 689.216 L1000.43 689.216 L1000.99 689.216 L1001.55 689.216 L1002.11 689.216 L1002.67 689.216 L1003.23 689.216 L1003.79 689.216 L1004.35 689.216 L1004.91 689.216 L1005.46 689.216 L1006.02 689.216 L1006.58 689.216 L1007.14 689.216 L1007.7 689.216 L1008.26 689.216 L1008.82 689.216 L1009.38 689.216 L1009.94 689.216 L1010.5 689.216 L1011.06 689.216 L1011.62 689.216 L1012.18 689.216 L1012.73 689.216 L1013.29 689.216 L1013.85 689.216 L1014.41 689.216 L1014.97 689.216 L1015.53 689.216 L1016.09 689.216 L1016.65 689.216 L1017.21 689.216 L1017.77 689.216 L1018.33 689.216 L1018.89 689.216 L1019.45 689.216 L1020.01 689.216 L1020.56 689.216 L1021.12 689.216 L1021.68 689.216 L1022.24 689.216 L1022.8 689.216 L1023.36 689.216 L1023.92 689.216 L1024.48 689.216 L1025.04 689.216 L1025.6 689.216 L1026.16 689.216 L1026.72 689.216 L1027.28 689.216 L1027.83 689.216 L1028.39 689.216 L1028.95 689.216 L1029.51 689.216 L1030.07 689.216 L1030.63 689.216 L1031.19 689.216 L1031.75 689.216 L1032.31 689.216 L1032.87 689.216 L1033.43 689.216 L1033.99 689.216 L1034.55 689.216 L1035.1 689.216 L1035.66 689.216 L1036.22 689.216 L1036.78 689.216 L1037.34 689.216 L1037.9 689.216 L1038.46 689.216 L1039.02 689.216 L1039.58 689.216 L1040.14 689.216 L1040.7 689.216 L1041.26 689.216 L1041.82 689.216 L1042.38 689.216 L1042.93 689.216 L1043.49 689.216 L1044.05 689.216 L1044.61 689.216 L1045.17 689.216 L1045.73 689.216 L1046.29 689.216 L1046.85 689.216 L1047.41 689.216 L1047.97 689.216 L1048.53 689.216 L1049.09 689.216 L1049.65 689.216 L1050.2 689.216 L1050.76 689.216 L1051.32 689.216 L1051.88 689.216 L1052.44 689.216 L1053 689.216 L1053.56 689.216 L1054.12 689.216 L1054.68 689.216 L1055.24 689.216 L1055.8 689.216 L1056.36 689.216 L1056.92 689.216 L1057.48 689.216 L1058.03 689.216 L1058.59 689.216 L1059.15 689.216 L1059.71 689.216 L1060.27 689.216 L1060.83 689.216 L1061.39 689.216 L1061.95 689.216 L1062.51 689.216 L1063.07 689.216 L1063.63 689.216 L1064.19 689.216 L1064.75 689.216 L1065.3 689.216 L1065.86 689.216 L1066.42 689.216 L1066.98 689.216 L1067.54 689.216 L1068.1 689.216 L1068.66 689.216 L1069.22 689.216 L1069.78 689.216 L1070.34 689.216 L1070.9 689.216 L1071.46 689.216 L1072.02 689.216 L1072.57 689.216 L1073.13 689.216 L1073.69 689.216 L1074.25 689.216 L1074.81 689.216 L1075.37 689.216 L1075.93 689.216 L1076.49 689.216 L1077.05 689.216 L1077.61 689.216 L1078.17 689.216 L1078.73 689.216 L1079.29 689.216 L1079.85 689.216 L1080.4 689.216 L1080.96 689.216 L1081.52 689.216 L1082.08 689.216 L1082.64 689.216 L1083.2 689.216 L1083.76 689.216 L1084.32 689.216 L1084.88 689.216 L1085.44 689.216 L1086 689.216 L1086.56 689.216 L1087.12 689.216 L1087.67 689.216 L1088.23 689.216 L1088.79 689.216 L1089.35 689.216 L1089.91 689.216 L1090.47 689.216 L1091.03 689.216 L1091.59 689.216 L1092.15 689.216 L1092.71 689.216 L1093.27 689.216 L1093.83 689.216 L1094.39 689.216 L1094.94 689.216 L1095.5 689.216 L1096.06 689.216 L1096.62 689.216 L1097.18 689.216 L1097.74 689.216 L1098.3 689.216 L1098.86 689.216 L1099.42 689.216 L1099.98 689.216 L1100.54 689.216 L1101.1 689.216 L1101.66 689.216 L1102.22 689.216 L1102.77 689.216 L1103.33 689.216 L1103.89 689.216 L1104.45 689.216 L1105.01 689.216 L1105.57 689.216 L1106.13 689.216 L1106.69 689.216 L1107.25 689.216 L1107.81 689.216 L1108.37 689.216 L1108.93 689.216 L1109.49 689.216 L1110.04 689.216 L1110.6 689.216 L1111.16 689.216 L1111.72 689.216 L1112.28 689.216 L1112.84 689.216 L1113.4 689.216 L1113.96 689.216 L1114.52 689.216 L1115.08 689.216 L1115.64 689.216 L1116.2 689.216 L1116.76 689.216 L1117.31 689.216 L1117.87 689.216 L1118.43 689.216 L1118.99 689.216 L1119.55 689.216 L1120.11 689.216 L1120.67 689.216 L1121.23 689.216 L1121.79 689.216 L1122.35 689.216 L1122.91 689.216 L1123.47 689.216 L1124.03 689.216 L1124.59 689.216 L1125.14 689.216 L1125.7 689.216 L1126.26 689.216 L1126.82 689.216 L1127.38 689.216 L1127.94 689.216 L1128.5 689.216 L1129.06 689.216 L1129.62 689.216 L1130.18 689.216 L1130.74 689.216 L1131.3 689.216 L1131.86 689.216 L1132.41 689.216 L1132.97 689.216 L1133.53 689.216 L1134.09 689.216 L1134.65 689.216 L1135.21 689.216 L1135.77 689.216 L1136.33 689.216 L1136.89 689.216 L1137.45 689.216 L1138.01 689.216 L1138.57 689.216 L1139.13 689.216 L1139.68 689.216 L1140.24 689.216 L1140.8 689.216 L1141.36 689.216 L1141.92 689.216 L1142.48 689.216 L1143.04 689.216 L1143.6 689.216 L1144.16 689.216 L1144.72 689.216 L1145.28 689.216 L1145.84 689.216 L1146.4 689.216 L1146.96 689.216 L1147.51 689.216 L1148.07 689.216 L1148.63 689.216 L1149.19 689.216 L1149.75 689.216 L1150.31 689.216 L1150.87 689.216 L1151.43 689.216 L1151.99 689.216 L1152.55 689.216 L1153.11 689.216 L1153.67 689.216 L1154.23 689.216 L1154.78 689.216 L1155.34 689.216 L1155.9 689.216 L1156.46 689.216 L1157.02 689.216 L1157.58 689.216 L1158.14 689.216 L1158.7 689.216 L1159.26 689.216 L1159.82 689.216 L1160.38 689.216 L1160.94 689.216 L1161.5 689.216 L1162.05 689.216 L1162.61 689.216 L1163.17 689.216 L1163.73 689.216 L1164.29 689.216 L1164.85 689.216 L1165.41 689.216 L1165.97 689.216 L1166.53 689.216 L1167.09 689.216 L1167.65 689.216 L1168.21 689.216 L1168.77 689.216 L1169.33 689.216 L1169.88 689.216 L1170.44 689.216 L1171 689.216 L1171.56 689.216 L1172.12 689.216 L1172.68 689.216 L1173.24 689.216 L1173.8 689.216 L1174.36 689.216 L1174.92 689.216 L1175.48 689.216 L1176.04 689.216 L1176.6 689.216 L1177.15 689.216 L1177.71 689.216 L1178.27 689.216 L1178.83 689.216 L1179.39 689.216 L1179.95 689.216 L1180.51 689.216 L1181.07 689.216 L1181.63 689.216 L1182.19 689.216 L1182.75 689.216 L1183.31 689.216 L1183.87 689.216 L1184.43 689.216 L1184.98 689.216 L1185.54 689.216 L1186.1 689.216 L1186.66 689.216 L1187.22 689.216 L1187.78 689.216 L1188.34 689.216 L1188.9 689.216 L1189.46 689.216 L1190.02 689.216 L1190.58 689.216 L1191.14 689.216 L1191.7 689.216 L1192.25 689.216 L1192.81 689.216 L1193.37 689.216 L1193.93 689.216 L1194.49 689.216 L1195.05 689.216 L1195.61 689.216 L1196.17 689.216 L1196.73 689.216 L1197.29 689.216 L1197.85 689.216 L1198.41 689.216 L1198.97 689.216 L1199.52 689.216 L1200.08 689.216 L1200.64 689.216 L1201.2 689.216 L1201.76 689.216 L1202.32 689.216 L1202.88 689.216 L1203.44 689.216 L1204 689.216 L1204.56 689.216 L1205.12 689.216 L1205.68 689.216 L1206.24 689.216 L1206.8 689.216 L1207.35 689.216 L1207.91 689.216 L1208.47 689.216 L1209.03 689.216 L1209.59 689.216 L1210.15 689.216 L1210.71 689.216 L1211.27 689.216 L1211.83 689.216 L1212.39 689.216 L1212.95 689.216 L1213.51 689.216 L1214.07 689.216 L1214.62 689.216 L1215.18 689.216 L1215.74 689.216 L1216.3 689.216 L1216.86 689.216 L1217.42 689.216 L1217.98 689.216 L1218.54 689.216 L1219.1 689.216 L1219.66 689.216 L1220.22 689.216 L1220.78 689.216 L1221.34 689.216 L1221.89 689.216 L1222.45 689.216 L1223.01 689.216 L1223.57 689.216 L1224.13 689.216 L1224.69 689.216 L1225.25 689.216 L1225.81 689.216 L1226.37 689.216 L1226.93 689.216 L1227.49 689.216 L1228.05 689.216 L1228.61 689.216 L1229.17 689.216 L1229.72 689.216 L1230.28 689.216 L1230.84 689.216 L1231.4 689.216 L1231.96 689.216 L1232.52 689.216 L1233.08 689.216 L1233.64 689.216 L1234.2 689.216 L1234.76 689.216 L1235.32 689.216 L1235.88 689.216 L1236.44 689.216 L1236.99 689.216 L1237.55 689.216 L1238.11 689.216 L1238.67 689.216 L1239.23 689.216 L1239.79 689.216 L1240.35 689.216 L1240.91 689.216 L1241.47 689.216 L1242.03 689.216 L1242.59 689.216 L1243.15 689.216 L1243.71 689.216 L1244.26 689.216 L1244.82 689.216 L1245.38 689.216 L1245.94 689.216 L1246.5 689.216 L1247.06 689.216 L1247.62 689.216 L1248.18 689.216 L1248.74 689.216 L1249.3 689.216 L1249.86 689.216 L1250.42 689.216 L1250.98 689.216 L1251.54 689.216 L1252.09 689.216 L1252.65 689.216 L1253.21 689.216 L1253.77 689.216 L1254.33 689.216 L1254.89 689.216 L1255.45 689.216 L1256.01 689.216 L1256.57 689.216 L1257.13 689.216 L1257.69 689.216 L1258.25 689.216 L1258.81 689.216 L1259.36 689.216 L1259.92 689.216 L1260.48 689.216 L1261.04 689.216 L1261.6 689.216 L1262.16 689.216 L1262.72 689.216 L1263.28 689.216 L1263.84 689.216 L1264.4 689.216 L1264.96 689.216 L1265.52 689.216 L1266.08 689.216 L1266.63 689.216 L1267.19 689.216 L1267.75 689.216 L1268.31 689.216 L1268.87 689.216 L1269.43 689.216 L1269.99 689.216 L1270.55 689.216 L1271.11 689.216 L1271.67 689.216 L1272.23 689.216 L1272.79 689.216 L1273.35 689.216 L1273.91 689.216 L1274.46 689.216 L1275.02 689.216 L1275.58 689.216 L1276.14 689.216 L1276.7 689.216 L1277.26 689.216 L1277.82 689.216 L1278.38 689.216 L1278.94 689.216 L1279.5 689.216 L1280.06 689.216 L1280.62 689.216 L1281.18 689.216 L1281.73 689.216 L1282.29 689.216 L1282.85 689.216 L1283.41 689.216 L1283.97 689.216 L1284.53 689.216 L1285.09 689.216 L1285.65 689.216 L1286.21 689.216 L1286.77 689.216 L1287.33 689.216 L1287.89 689.216 L1288.45 689.216 L1289 689.216 L1289.56 689.216 L1290.12 689.216 L1290.68 689.216 L1291.24 689.216 L1291.8 689.216 L1292.36 689.216 L1292.92 689.216 L1293.48 689.216 L1294.04 689.216 L1294.6 689.216 L1295.16 689.216 L1295.72 689.216 L1296.28 689.216 L1296.83 689.216 L1297.39 689.216 L1297.95 689.216 L1298.51 689.216 L1299.07 689.216 L1299.63 689.216 L1300.19 689.216 L1300.75 689.216 L1301.31 689.216 L1301.87 689.216 L1302.43 689.216 L1302.99 689.216 L1303.55 689.216 L1304.1 689.216 L1304.66 689.216 L1305.22 689.216 L1305.78 689.216 L1306.34 689.216 L1306.9 689.216 L1307.46 689.216 L1308.02 689.216 L1308.58 689.216 L1309.14 689.216 L1309.7 689.216 L1310.26 689.216 L1310.82 689.216 L1311.38 689.216 L1311.93 689.216 L1312.49 689.216 L1313.05 689.216 L1313.61 689.216 L1314.17 689.216 L1314.73 689.216 L1315.29 689.216 L1315.85 689.216 L1316.41 689.216 L1316.97 689.216 L1317.53 689.216 L1318.09 689.216 L1318.65 689.216 L1319.2 689.216 L1319.76 689.216 L1320.32 689.216 L1320.88 689.216 L1321.44 689.216 L1322 689.216 L1322.56 689.216 L1323.12 689.216 L1323.68 689.216 L1324.24 689.216 L1324.8 689.216 L1325.36 689.216 L1325.92 689.216 L1326.47 689.216 L1327.03 689.216 L1327.59 689.216 L1328.15 689.216 L1328.71 689.216 L1329.27 689.216 L1329.83 689.216 L1330.39 689.216 L1330.95 689.216 L1331.51 689.216 L1332.07 689.216 L1332.63 689.216 L1333.19 689.216 L1333.75 689.216 L1334.3 689.216 L1334.86 689.216 L1335.42 689.216 L1335.98 689.216 L1336.54 689.216 L1337.1 689.216 L1337.66 689.216 L1338.22 689.216 L1338.78 689.216 L1339.34 689.216 L1339.9 689.216 L1340.46 689.216 L1341.02 689.216 L1341.57 689.216 L1342.13 689.216 L1342.69 689.216 L1343.25 689.216 L1343.81 689.216 L1344.37 689.216 L1344.93 689.216 L1345.49 689.216 L1346.05 689.216 L1346.61 689.216 L1347.17 689.216 L1347.73 689.216 L1348.29 689.216 L1348.84 689.216 L1349.4 689.216 L1349.96 689.216 L1350.52 689.216 L1351.08 689.216 L1351.64 689.216 L1352.2 689.216 L1352.76 689.216 L1353.32 689.216 L1353.88 689.216 L1354.44 689.216 L1355 689.216 L1355.56 689.216 L1356.12 689.216 L1356.67 689.216 L1357.23 689.216 L1357.79 689.216 L1358.35 689.216 L1358.91 689.216 L1359.47 689.216 L1360.03 689.216 L1360.59 689.216 L1361.15 689.216 L1361.71 689.216 L1362.27 689.216 L1362.83 689.216 L1363.39 689.216 L1363.94 689.216 L1364.5 689.216 L1365.06 689.216 L1365.62 689.216 L1366.18 689.216 L1366.74 689.216 L1367.3 689.216 L1367.86 689.216 L1368.42 689.216 L1368.98 689.216 L1369.54 689.216 L1370.1 689.216 L1370.66 689.216 L1371.21 689.216 L1371.77 689.216 L1372.33 689.216 L1372.89 689.216 L1373.45 689.216 L1374.01 689.216 L1374.57 689.216 L1375.13 689.216 L1375.69 689.216 L1376.25 689.216 L1376.81 689.216 L1377.37 689.216 L1377.93 689.216 L1378.49 689.216 L1379.04 689.216 L1379.6 689.216 L1380.16 689.216 L1380.72 689.216 L1381.28 689.216 L1381.84 689.216 L1382.4 689.216 L1382.96 689.216 L1383.52 689.216 L1384.08 689.216 L1384.64 689.216 L1385.2 689.216 L1385.76 689.216 L1386.31 689.216 L1386.87 689.216 L1387.43 689.216 L1387.99 689.216 L1388.55 689.216 L1389.11 689.216 L1389.67 689.216 L1390.23 689.216 L1390.79 689.216 L1391.35 689.216 L1391.91 689.216 L1392.47 689.216 L1393.03 689.216 L1393.58 689.216 L1394.14 689.216 L1394.7 689.216 L1395.26 689.216 L1395.82 689.216 L1396.38 689.216 L1396.94 689.216 L1397.5 689.216 L1398.06 689.216 L1398.62 689.216 L1399.18 689.216 L1399.74 689.216 L1400.3 689.216 L1400.86 689.216 L1401.41 689.216 L1401.97 689.216 L1402.53 689.216 L1403.09 689.216 L1403.65 689.216 L1404.21 689.216 L1404.77 689.216 L1405.33 689.216 L1405.89 689.216 L1406.45 689.216 L1407.01 689.216 L1407.57 689.216 L1408.13 689.216 L1408.68 689.216 L1409.24 689.216 L1409.8 689.216 L1410.36 689.216 L1410.92 689.216 L1411.48 689.216 L1412.04 689.216 L1412.6 689.216 L1413.16 689.216 L1413.72 689.216 L1414.28 689.216 L1414.84 689.216 L1415.4 689.216 L1415.95 689.216 L1416.51 689.216 L1417.07 689.216 L1417.63 689.216 L1418.19 689.216 L1418.75 689.216 L1419.31 689.216 L1419.87 689.216 L1420.43 689.216 L1420.99 689.216 L1421.55 689.216 L1422.11 689.216 L1422.67 689.216 L1423.23 689.216 L1423.78 689.216 L1424.34 689.216 L1424.9 689.216 L1425.46 689.216 L1426.02 689.216 L1426.58 689.216 L1427.14 689.216 L1427.7 689.216 L1428.26 689.216 L1428.82 689.216 L1429.38 689.216 L1429.94 689.216 L1430.5 689.216 L1431.05 689.216 L1431.61 689.216 L1432.17 689.216 L1432.73 689.216 L1433.29 689.216 L1433.85 689.216 L1434.41 689.216 L1434.97 689.216 L1435.53 689.216 L1436.09 689.216 L1436.65 689.216 L1437.21 689.216 L1437.77 689.216 L1438.33 689.216 L1438.88 689.216 L1439.44 689.216 L1440 689.216 L1440.56 689.216 L1441.12 689.216 L1441.68 689.216 L1442.24 689.216 L1442.8 689.216 L1443.36 689.216 L1443.92 689.216 L1444.48 689.216 L1445.04 689.216 L1445.6 689.216 L1446.15 689.216 L1446.71 689.216 L1447.27 689.216 L1447.83 689.216 L1448.39 689.216 L1448.95 689.216 L1449.51 689.216 L1450.07 689.216 L1450.63 689.216 L1451.19 689.216 L1451.75 689.216 L1452.31 689.216 L1452.87 689.216 L1453.42 689.216 L1453.98 689.216 L1454.54 689.216 L1455.1 689.216 L1455.66 689.216 L1456.22 689.216 L1456.78 689.216 L1457.34 689.216 L1457.9 689.216 L1458.46 689.216 L1459.02 689.216 L1459.58 689.216 L1460.14 689.216 L1460.7 689.216 L1461.25 689.216 L1461.81 689.216 L1462.37 689.216 L1462.93 689.216 L1463.49 689.216 L1464.05 689.216 L1464.61 689.216 L1465.17 689.216 L1465.73 689.216 L1466.29 689.216 L1466.85 689.216 L1467.41 689.216 L1467.97 689.216 L1468.52 689.216 L1469.08 689.216 L1469.64 689.216 L1470.2 689.216 L1470.76 689.216 L1471.32 689.216 L1471.88 689.216 L1472.44 689.216 L1473 689.216 L1473.56 689.216 L1474.12 689.216 L1474.68 689.216 L1475.24 689.216 L1475.79 689.216 L1476.35 689.216 L1476.91 689.216 L1477.47 689.216 L1478.03 689.216 L1478.59 689.216 L1479.15 689.216 L1479.71 689.216 L1480.27 689.216 L1480.83 689.216 L1481.39 689.216 L1481.95 689.216 L1482.51 689.216 L1483.07 689.216 L1483.62 689.216 L1484.18 689.216 L1484.74 689.216 L1485.3 689.216 L1485.86 689.216 L1486.42 689.216 L1486.98 689.216 L1487.54 689.216 L1488.1 689.216 L1488.66 689.216 L1489.22 689.216 L1489.78 689.216 L1490.34 689.216 L1490.89 689.216 L1491.45 689.216 L1492.01 689.216 L1492.57 689.216 L1493.13 689.216 L1493.69 689.216 L1494.25 689.216 L1494.81 689.216 L1495.37 689.216 L1495.93 689.216 L1496.49 689.216 L1497.05 689.216 L1497.61 689.216 L1498.16 689.216 L1498.72 689.216 L1499.28 689.216 L1499.84 689.216 L1500.4 689.216 L1500.96 689.216 L1501.52 689.216 L1502.08 689.216 L1502.64 689.216 L1503.2 689.216 L1503.76 689.216 L1504.32 689.216 L1504.88 689.216 L1505.44 689.216 L1505.99 689.216 L1506.55 689.216 L1507.11 689.216 L1507.67 689.216 L1508.23 689.216 L1508.79 689.216 L1509.35 689.216 L1509.91 689.216 L1510.47 689.216 L1511.03 689.216 L1511.59 689.216 L1512.15 689.216 L1512.71 689.216 L1513.26 689.216 L1513.82 689.216 L1514.38 689.216 L1514.94 689.216 L1515.5 689.216 L1516.06 689.216 L1516.62 689.216 L1517.18 689.216 L1517.74 689.216 L1518.3 689.216 L1518.86 689.216 L1519.42 689.216 L1519.98 689.216 L1520.53 689.216 L1521.09 689.216 L1521.65 689.216 L1522.21 689.216 L1522.77 689.216 L1523.33 689.216 L1523.89 689.216 L1524.45 689.216 L1525.01 689.216 L1525.57 689.216 L1526.13 689.216 L1526.69 689.216 L1527.25 689.216 L1527.81 689.216 L1528.36 689.216 L1528.92 689.216 L1529.48 689.216 L1530.04 689.216 L1530.6 689.216 L1531.16 689.216 L1531.72 689.216 L1532.28 689.216 L1532.84 689.216 L1533.4 689.216 L1533.96 689.216 L1534.52 689.216 L1535.08 689.216 L1535.63 689.216 L1536.19 689.216 L1536.75 689.216 L1537.31 689.216 L1537.87 689.216 L1538.43 689.216 L1538.99 689.216 L1539.55 689.216 L1540.11 689.216 L1540.67 689.216 L1541.23 689.216 L1541.79 689.216 L1542.35 689.216 L1542.9 689.216 L1543.46 689.216 L1544.02 689.216 L1544.58 689.216 L1545.14 689.216 L1545.7 689.216 L1546.26 689.216 L1546.82 689.216 L1547.38 689.216 L1547.94 689.216 L1548.5 689.216 L1549.06 689.216 L1549.62 689.216 L1550.18 689.216 L1550.73 689.216 L1551.29 689.216 L1551.85 689.216 L1552.41 689.216 L1552.97 689.216 L1553.53 689.216 L1554.09 689.216 L1554.65 689.216 L1555.21 689.216 L1555.77 689.216 L1556.33 689.216 L1556.89 689.216 L1557.45 689.216 L1558 689.216 L1558.56 689.216 L1559.12 689.216 L1559.68 689.216 L1560.24 689.216 L1560.8 689.216 L1561.36 689.216 L1561.92 689.216 L1562.48 689.216 L1563.04 689.216 L1563.6 689.216 L1564.16 689.216 L1564.72 689.216 L1565.28 689.216 L1565.83 689.216 L1566.39 689.216 L1566.95 689.216 L1567.51 689.216 L1568.07 689.216 L1568.63 689.216 L1569.19 689.216 L1569.75 689.216 L1570.31 689.216 L1570.87 689.216 L1571.43 689.216 L1571.99 689.216 L1572.55 689.216 L1573.1 689.216 L1573.66 689.216 L1574.22 689.216 L1574.78 689.216 L1575.34 689.216 L1575.9 689.216 L1576.46 689.216 L1577.02 689.216 L1577.58 689.216 L1578.14 689.216 L1578.7 689.216 L1579.26 689.216 L1579.82 689.216 L1580.37 689.216 L1580.93 689.216 L1581.49 689.216 L1582.05 689.216 L1582.61 689.216 L1583.17 689.216 L1583.73 689.216 L1584.29 689.216 L1584.85 689.216 L1585.41 689.216 L1585.97 689.216 L1586.53 689.216 L1587.09 689.216 L1587.65 689.216 L1588.2 689.216 L1588.76 689.216 L1589.32 689.216 L1589.88 689.216 L1590.44 689.216 L1591 689.216 L1591.56 689.216 L1592.12 689.216 L1592.68 689.216 L1593.24 689.216 L1593.8 689.216 L1594.36 689.216 L1594.92 689.216 L1595.47 689.216 L1596.03 689.216 L1596.59 689.216 L1597.15 689.216 L1597.71 689.216 L1598.27 689.216 L1598.83 689.216 L1599.39 689.216 L1599.95 689.216 L1600.51 689.216 L1601.07 689.216 L1601.63 689.216 L1602.19 689.216 L1602.74 689.216 L1603.3 689.216 L1603.86 689.216 L1604.42 689.216 L1604.98 689.216 L1605.54 689.216 L1606.1 689.216 L1606.66 689.216 L1607.22 689.216 L1607.78 689.216 L1608.34 689.216 L1608.9 689.216 L1609.46 689.216 L1610.02 689.216 L1610.57 689.216 L1611.13 689.216 L1611.69 689.216 L1612.25 689.216 L1612.81 689.216 L1613.37 689.216 L1613.93 689.216 L1614.49 689.216 L1615.05 689.216 L1615.61 689.216 L1616.17 689.216 L1616.73 689.216 L1617.29 689.216 L1617.84 689.216 L1618.4 689.216 L1618.96 689.216 L1619.52 689.216 L1620.08 689.216 L1620.64 689.216 L1621.2 689.216 L1621.76 689.216 L1622.32 689.216 L1622.88 689.216 L1623.44 689.216 L1624 689.216 L1624.56 689.216 L1625.11 689.216 L1625.67 689.216 L1626.23 689.216 L1626.79 689.216 L1627.35 689.216 L1627.91 689.216 L1628.47 689.216 L1629.03 689.216 L1629.59 689.216 L1630.15 689.216 L1630.71 689.216 L1631.27 689.216 L1631.83 689.216 L1632.39 689.216 L1632.94 689.216 L1633.5 689.216 L1634.06 689.216 L1634.62 689.216 L1635.18 689.216 L1635.74 689.216 L1636.3 689.216 L1636.86 689.216 L1637.42 689.216 L1637.98 689.216 L1638.54 689.216 L1639.1 689.216 L1639.66 689.216 L1640.21 689.216 L1640.77 689.216 L1641.33 689.216 L1641.89 689.216 L1642.45 689.216 L1643.01 689.216 L1643.57 689.216 L1644.13 689.216 L1644.69 689.216 L1645.25 689.216 L1645.81 689.216 L1646.37 689.216 L1646.93 689.216 L1647.48 689.216 L1648.04 689.216 L1648.6 689.216 L1649.16 689.216 L1649.72 689.216 L1650.28 689.216 L1650.84 689.216 L1651.4 689.216 L1651.96 689.216 L1652.52 689.216 L1653.08 689.216 L1653.64 689.216 L1654.2 689.216 L1654.76 689.216 L1655.31 689.216 L1655.87 689.216 L1656.43 689.216 L1656.99 689.216 L1657.55 689.216 L1658.11 689.216 L1658.67 689.216 L1659.23 689.216 L1659.79 689.216 L1660.35 689.216 L1660.91 689.216 L1661.47 689.216 L1662.03 689.216 L1662.58 689.216 L1663.14 689.216 L1663.7 689.216 L1664.26 689.216 L1664.82 689.216 L1665.38 689.216 L1665.94 689.216 L1666.5 689.216 L1667.06 689.216 L1667.62 689.216 L1668.18 689.216 L1668.74 689.216 L1669.3 689.216 L1669.85 689.216 L1670.41 689.216 L1670.97 689.216 L1671.53 689.216 L1672.09 689.216 L1672.65 689.216 L1673.21 689.216 L1673.77 689.216 L1674.33 689.216 L1674.89 689.216 L1675.45 689.216 L1676.01 689.216 L1676.57 689.216 L1677.13 689.216 L1677.68 689.216 L1678.24 689.216 L1678.8 689.216 L1679.36 689.216 L1679.92 689.216 L1680.48 689.216 L1681.04 689.216 L1681.6 689.216 L1682.16 689.216 L1682.72 689.216 L1683.28 689.216 L1683.84 689.216 L1684.4 689.216 L1684.95 689.216 L1685.51 689.216 L1686.07 689.216 L1686.63 689.216 L1687.19 689.216 L1687.75 689.216 L1688.31 689.216 L1688.87 689.216 L1689.43 689.216 L1689.99 689.216 L1690.55 689.216 L1691.11 689.216 L1691.67 689.216 L1692.23 689.216 L1692.78 689.216 L1693.34 689.216 L1693.9 689.216 L1694.46 689.216 L1695.02 689.216 L1695.58 689.216 L1696.14 689.216 L1696.7 689.216 L1697.26 689.216 L1697.82 689.216 L1698.38 689.216 L1698.94 689.216 L1699.5 689.216 L1700.05 689.216 L1700.61 689.216 L1701.17 689.216 L1701.73 689.216 L1702.29 689.216 L1702.85 689.216 L1703.41 689.216 L1703.97 689.216 L1704.53 689.216 L1705.09 689.216 L1705.65 689.216 L1706.21 689.216 L1706.77 689.216 L1707.32 689.216 L1707.88 689.216 L1708.44 689.216 L1709 689.216 L1709.56 689.216 L1710.12 689.216 L1710.68 689.216 L1711.24 689.216 L1711.8 689.216 L1712.36 689.216 L1712.92 689.216 L1713.48 689.216 L1714.04 689.216 L1714.6 689.216 L1715.15 689.216 L1715.71 689.216 L1716.27 689.216 L1716.83 689.216 L1717.39 689.216 L1717.95 689.216 L1718.51 689.216 L1719.07 689.216 L1719.63 689.216 L1720.19 689.216 L1720.75 689.216 L1721.31 689.216 L1721.87 689.216 L1722.42 689.216 L1722.98 689.216 L1723.54 689.216 L1724.1 689.216 L1724.66 689.216 L1725.22 689.216 L1725.78 689.216 L1726.34 689.216 L1726.9 689.216 L1727.46 689.216 L1728.02 689.216 L1728.58 689.216 L1729.14 689.216 L1729.69 689.216 L1730.25 689.216 L1730.81 689.216 L1731.37 689.216 L1731.93 689.216 L1732.49 689.216 L1733.05 689.216 L1733.61 689.216 L1734.17 689.216 L1734.73 689.216 L1735.29 689.216 L1735.85 689.216 L1736.41 689.216 L1736.97 689.216 L1737.52 689.216 L1738.08 689.216 L1738.64 689.216 L1739.2 689.216 L1739.76 689.216 L1740.32 689.216 L1740.88 689.216 L1741.44 689.216 L1742 689.216 L1742.56 689.216 L1743.12 689.216 L1743.68 689.216 L1744.24 689.216 L1744.79 689.216 L1745.35 689.216 L1745.91 689.216 L1746.47 689.216 L1747.03 689.216 L1747.59 689.216 L1748.15 689.216 L1748.71 689.216 L1749.27 689.216 L1749.83 689.216 L1750.39 689.216 L1750.95 689.216 L1751.51 689.216 L1752.06 689.216 L1752.62 689.216 L1753.18 689.216 L1753.74 689.216 L1754.3 689.216 L1754.86 689.216 L1755.42 689.216 L1755.98 689.216 L1756.54 689.216 L1757.1 689.216 L1757.66 689.216 L1758.22 689.216 L1758.78 689.216 L1759.34 689.216 L1759.89 689.216 L1760.45 689.216 L1761.01 689.216 L1761.57 689.216 L1762.13 689.216 L1762.69 689.216 L1763.25 689.216 L1763.81 689.216 L1764.37 689.216 L1764.93 689.216 L1765.49 689.216 L1766.05 689.216 L1766.61 689.216 L1767.16 689.216 L1767.72 689.216 L1768.28 689.216 L1768.84 689.216 L1769.4 689.216 L1769.96 689.216 L1770.52 689.216 L1771.08 689.216 L1771.64 689.216 L1772.2 689.216 L1772.76 689.216 L1773.32 689.216 L1773.88 689.216 L1774.43 689.216 L1774.99 689.216 L1775.55 689.216 L1776.11 689.216 L1776.67 689.216 L1777.23 689.216 L1777.79 689.216 L1778.35 689.216 L1778.91 689.216 L1779.47 689.216 L1780.03 689.216 L1780.59 689.216 L1781.15 689.216 L1781.71 689.216 L1782.26 689.216 L1782.82 689.216 L1783.38 689.216 L1783.94 689.216 L1784.5 689.216 L1785.06 689.216 L1785.62 689.216 L1786.18 689.216 L1786.74 689.216 L1787.3 689.216 L1787.86 689.216 L1788.42 689.216 L1788.98 689.216 L1789.53 689.216 L1790.09 689.216 L1790.65 689.216 L1791.21 689.216 L1791.77 689.216 L1792.33 689.216 L1792.89 689.216 L1793.45 689.216 L1794.01 689.216 L1794.57 689.216 L1795.13 689.216 L1795.69 689.216 L1796.25 689.216 L1796.8 689.216 L1797.36 689.216 L1797.92 689.216 L1798.48 689.216 L1799.04 689.216 L1799.6 689.216 L1800.16 689.216 L1800.72 689.216 L1801.28 689.216 L1801.84 689.216 L1802.4 689.216 L1802.96 689.216 L1803.52 689.216 L1804.08 689.216 L1804.63 689.216 L1805.19 689.216 L1805.75 689.216 L1806.31 689.216 L1806.87 689.216 L1807.43 689.216 L1807.99 689.216 L1808.55 689.216 L1809.11 689.216 L1809.67 689.216 L1810.23 689.216 L1810.79 689.216 L1811.35 689.216 L1811.9 689.216 L1812.46 689.216 L1813.02 689.216 L1813.58 689.216 L1814.14 689.216 L1814.7 689.216 L1815.26 689.216 L1815.82 689.216 L1816.38 689.216 L1816.94 689.216 L1817.5 689.216 L1818.06 689.216 L1818.62 689.216 L1819.18 689.216 L1819.73 689.216 L1820.29 689.216 L1820.85 689.216 L1821.41 689.216 L1821.97 689.216 L1822.53 689.216 L1823.09 689.216 L1823.65 689.216 L1824.21 689.216 L1824.77 689.216 L1825.33 689.216 L1825.89 689.216 L1826.45 689.216 L1827 689.216 L1827.56 689.216 L1828.12 689.216 L1828.68 689.216 L1829.24 689.216 L1829.8 689.216 L1830.36 689.216 L1830.92 689.216 L1831.48 689.216 L1832.04 689.216 L1832.6 689.216 L1833.16 689.216 L1833.72 689.216 L1834.27 689.216 L1834.83 689.216 L1835.39 689.216 L1835.95 689.216 L1836.51 689.216 L1837.07 689.216 L1837.63 689.216 L1838.19 689.216 L1838.19 680.197 L1837.63 680.197 L1837.07 680.197 L1836.51 680.197 L1835.95 680.197 L1835.39 680.197 L1834.83 680.197 L1834.27 680.197 L1833.72 680.197 L1833.16 680.197 L1832.6 680.197 L1832.04 680.197 L1831.48 680.197 L1830.92 680.197 L1830.36 680.197 L1829.8 680.197 L1829.24 680.197 L1828.68 680.197 L1828.12 680.197 L1827.56 680.197 L1827 680.197 L1826.45 680.197 L1825.89 680.197 L1825.33 680.197 L1824.77 680.197 L1824.21 680.197 L1823.65 680.197 L1823.09 680.197 L1822.53 680.197 L1821.97 680.197 L1821.41 680.197 L1820.85 680.197 L1820.29 680.197 L1819.73 680.197 L1819.18 680.197 L1818.62 680.197 L1818.06 680.197 L1817.5 680.197 L1816.94 680.197 L1816.38 680.197 L1815.82 680.197 L1815.26 680.197 L1814.7 680.197 L1814.14 680.197 L1813.58 680.197 L1813.02 680.197 L1812.46 680.197 L1811.9 680.197 L1811.35 680.197 L1810.79 680.197 L1810.23 680.197 L1809.67 680.197 L1809.11 680.197 L1808.55 680.197 L1807.99 680.197 L1807.43 680.197 L1806.87 680.197 L1806.31 680.197 L1805.75 680.197 L1805.19 680.197 L1804.63 680.197 L1804.08 680.197 L1803.52 680.197 L1802.96 680.197 L1802.4 680.197 L1801.84 680.197 L1801.28 680.197 L1800.72 680.197 L1800.16 680.197 L1799.6 680.197 L1799.04 680.197 L1798.48 680.197 L1797.92 680.197 L1797.36 680.197 L1796.8 680.197 L1796.25 680.197 L1795.69 680.197 L1795.13 680.197 L1794.57 680.197 L1794.01 680.197 L1793.45 680.197 L1792.89 680.197 L1792.33 680.197 L1791.77 680.197 L1791.21 680.197 L1790.65 680.197 L1790.09 680.197 L1789.53 680.197 L1788.98 680.197 L1788.42 680.197 L1787.86 680.197 L1787.3 680.197 L1786.74 680.197 L1786.18 680.197 L1785.62 680.197 L1785.06 680.197 L1784.5 680.197 L1783.94 680.197 L1783.38 680.197 L1782.82 680.197 L1782.26 680.197 L1781.71 680.197 L1781.15 680.197 L1780.59 680.197 L1780.03 680.197 L1779.47 680.197 L1778.91 680.197 L1778.35 680.197 L1777.79 680.197 L1777.23 680.197 L1776.67 680.197 L1776.11 680.197 L1775.55 680.197 L1774.99 680.197 L1774.43 680.197 L1773.88 680.197 L1773.32 680.197 L1772.76 680.197 L1772.2 680.197 L1771.64 680.197 L1771.08 680.197 L1770.52 680.197 L1769.96 680.197 L1769.4 680.197 L1768.84 680.197 L1768.28 680.197 L1767.72 680.197 L1767.16 680.197 L1766.61 680.197 L1766.05 680.197 L1765.49 680.197 L1764.93 680.197 L1764.37 680.197 L1763.81 680.197 L1763.25 680.197 L1762.69 680.197 L1762.13 680.197 L1761.57 680.197 L1761.01 680.197 L1760.45 680.197 L1759.89 680.197 L1759.34 680.197 L1758.78 680.197 L1758.22 680.197 L1757.66 680.197 L1757.1 680.197 L1756.54 680.197 L1755.98 680.197 L1755.42 680.197 L1754.86 680.197 L1754.3 680.197 L1753.74 680.197 L1753.18 680.197 L1752.62 680.197 L1752.06 680.197 L1751.51 680.197 L1750.95 680.197 L1750.39 680.197 L1749.83 680.197 L1749.27 680.197 L1748.71 680.197 L1748.15 680.197 L1747.59 680.197 L1747.03 680.197 L1746.47 680.197 L1745.91 680.197 L1745.35 680.197 L1744.79 680.197 L1744.24 680.197 L1743.68 680.197 L1743.12 680.197 L1742.56 680.197 L1742 680.197 L1741.44 680.197 L1740.88 680.197 L1740.32 680.197 L1739.76 680.197 L1739.2 680.197 L1738.64 680.197 L1738.08 680.197 L1737.52 680.197 L1736.97 680.197 L1736.41 680.197 L1735.85 680.197 L1735.29 680.197 L1734.73 680.197 L1734.17 680.197 L1733.61 680.197 L1733.05 680.197 L1732.49 680.197 L1731.93 680.197 L1731.37 680.197 L1730.81 680.197 L1730.25 680.197 L1729.69 680.197 L1729.14 680.197 L1728.58 680.197 L1728.02 680.197 L1727.46 680.197 L1726.9 680.197 L1726.34 680.197 L1725.78 680.197 L1725.22 680.197 L1724.66 680.197 L1724.1 680.197 L1723.54 680.197 L1722.98 680.197 L1722.42 680.197 L1721.87 680.197 L1721.31 680.197 L1720.75 680.197 L1720.19 680.197 L1719.63 680.197 L1719.07 680.197 L1718.51 680.197 L1717.95 680.197 L1717.39 680.197 L1716.83 680.197 L1716.27 680.197 L1715.71 680.197 L1715.15 680.197 L1714.6 680.197 L1714.04 680.197 L1713.48 680.197 L1712.92 680.197 L1712.36 680.197 L1711.8 680.197 L1711.24 680.197 L1710.68 680.197 L1710.12 680.197 L1709.56 680.197 L1709 680.197 L1708.44 680.197 L1707.88 680.197 L1707.32 680.197 L1706.77 680.197 L1706.21 680.197 L1705.65 680.197 L1705.09 680.197 L1704.53 680.197 L1703.97 680.197 L1703.41 680.197 L1702.85 680.197 L1702.29 680.197 L1701.73 680.197 L1701.17 680.197 L1700.61 680.197 L1700.05 680.197 L1699.5 680.197 L1698.94 680.197 L1698.38 680.197 L1697.82 680.197 L1697.26 680.197 L1696.7 680.197 L1696.14 680.197 L1695.58 680.197 L1695.02 680.197 L1694.46 680.197 L1693.9 680.197 L1693.34 680.197 L1692.78 680.197 L1692.23 680.197 L1691.67 680.197 L1691.11 680.197 L1690.55 680.197 L1689.99 680.197 L1689.43 680.197 L1688.87 680.197 L1688.31 680.197 L1687.75 680.197 L1687.19 680.197 L1686.63 680.197 L1686.07 680.197 L1685.51 680.197 L1684.95 680.197 L1684.4 680.197 L1683.84 680.197 L1683.28 680.197 L1682.72 680.197 L1682.16 680.197 L1681.6 680.197 L1681.04 680.197 L1680.48 680.197 L1679.92 680.197 L1679.36 680.197 L1678.8 680.197 L1678.24 680.197 L1677.68 680.197 L1677.13 680.197 L1676.57 680.197 L1676.01 680.197 L1675.45 680.197 L1674.89 680.197 L1674.33 680.197 L1673.77 680.197 L1673.21 680.197 L1672.65 680.197 L1672.09 680.197 L1671.53 680.197 L1670.97 680.197 L1670.41 680.197 L1669.85 680.197 L1669.3 680.197 L1668.74 680.197 L1668.18 680.197 L1667.62 680.197 L1667.06 680.197 L1666.5 680.197 L1665.94 680.197 L1665.38 680.197 L1664.82 680.197 L1664.26 680.197 L1663.7 680.197 L1663.14 680.197 L1662.58 680.197 L1662.03 680.197 L1661.47 680.197 L1660.91 680.197 L1660.35 680.197 L1659.79 680.197 L1659.23 680.197 L1658.67 680.197 L1658.11 680.197 L1657.55 680.197 L1656.99 680.197 L1656.43 680.197 L1655.87 680.197 L1655.31 680.197 L1654.76 680.197 L1654.2 680.197 L1653.64 680.197 L1653.08 680.197 L1652.52 680.197 L1651.96 680.197 L1651.4 680.197 L1650.84 680.197 L1650.28 680.197 L1649.72 680.197 L1649.16 680.197 L1648.6 680.197 L1648.04 680.197 L1647.48 680.197 L1646.93 680.197 L1646.37 680.197 L1645.81 680.197 L1645.25 680.197 L1644.69 680.197 L1644.13 680.197 L1643.57 680.197 L1643.01 680.197 L1642.45 680.197 L1641.89 680.197 L1641.33 680.197 L1640.77 680.197 L1640.21 680.197 L1639.66 680.197 L1639.1 680.197 L1638.54 680.197 L1637.98 680.197 L1637.42 680.197 L1636.86 680.197 L1636.3 680.197 L1635.74 680.197 L1635.18 680.197 L1634.62 680.197 L1634.06 680.197 L1633.5 680.197 L1632.94 680.197 L1632.39 680.197 L1631.83 680.197 L1631.27 680.197 L1630.71 680.197 L1630.15 680.197 L1629.59 680.197 L1629.03 680.197 L1628.47 680.197 L1627.91 680.197 L1627.35 680.197 L1626.79 680.197 L1626.23 680.197 L1625.67 680.197 L1625.11 680.197 L1624.56 680.197 L1624 680.197 L1623.44 680.197 L1622.88 680.197 L1622.32 680.197 L1621.76 680.197 L1621.2 680.197 L1620.64 680.197 L1620.08 680.197 L1619.52 680.197 L1618.96 680.197 L1618.4 680.197 L1617.84 680.197 L1617.29 680.197 L1616.73 680.197 L1616.17 680.197 L1615.61 680.197 L1615.05 680.197 L1614.49 680.197 L1613.93 680.197 L1613.37 680.197 L1612.81 680.197 L1612.25 680.197 L1611.69 680.197 L1611.13 680.197 L1610.57 680.197 L1610.02 680.197 L1609.46 680.197 L1608.9 680.197 L1608.34 680.197 L1607.78 680.197 L1607.22 680.197 L1606.66 680.197 L1606.1 680.197 L1605.54 680.197 L1604.98 680.197 L1604.42 680.197 L1603.86 680.197 L1603.3 680.197 L1602.74 680.197 L1602.19 680.197 L1601.63 680.197 L1601.07 680.197 L1600.51 680.197 L1599.95 680.197 L1599.39 680.197 L1598.83 680.197 L1598.27 680.197 L1597.71 680.197 L1597.15 680.197 L1596.59 680.197 L1596.03 680.197 L1595.47 680.197 L1594.92 680.197 L1594.36 680.197 L1593.8 680.197 L1593.24 680.197 L1592.68 680.197 L1592.12 680.197 L1591.56 680.197 L1591 680.197 L1590.44 680.197 L1589.88 680.197 L1589.32 680.197 L1588.76 680.197 L1588.2 680.197 L1587.65 680.197 L1587.09 680.197 L1586.53 680.197 L1585.97 680.197 L1585.41 680.197 L1584.85 680.197 L1584.29 680.197 L1583.73 680.197 L1583.17 680.197 L1582.61 680.197 L1582.05 680.197 L1581.49 680.197 L1580.93 680.197 L1580.37 680.197 L1579.82 680.197 L1579.26 680.197 L1578.7 680.197 L1578.14 680.197 L1577.58 680.197 L1577.02 680.197 L1576.46 680.197 L1575.9 680.197 L1575.34 680.197 L1574.78 680.197 L1574.22 680.197 L1573.66 680.197 L1573.1 680.197 L1572.55 680.197 L1571.99 680.197 L1571.43 680.197 L1570.87 680.197 L1570.31 680.197 L1569.75 680.197 L1569.19 680.197 L1568.63 680.197 L1568.07 680.197 L1567.51 680.197 L1566.95 680.197 L1566.39 680.197 L1565.83 680.197 L1565.28 680.197 L1564.72 680.197 L1564.16 680.197 L1563.6 680.197 L1563.04 680.197 L1562.48 680.197 L1561.92 680.197 L1561.36 680.197 L1560.8 680.197 L1560.24 680.197 L1559.68 680.197 L1559.12 680.197 L1558.56 680.197 L1558 680.197 L1557.45 680.197 L1556.89 680.197 L1556.33 680.197 L1555.77 680.197 L1555.21 680.197 L1554.65 680.197 L1554.09 680.197 L1553.53 680.197 L1552.97 680.197 L1552.41 680.197 L1551.85 680.197 L1551.29 680.197 L1550.73 680.197 L1550.18 680.197 L1549.62 680.197 L1549.06 680.197 L1548.5 680.197 L1547.94 680.197 L1547.38 680.197 L1546.82 680.197 L1546.26 680.197 L1545.7 680.197 L1545.14 680.197 L1544.58 680.197 L1544.02 680.197 L1543.46 680.197 L1542.9 680.197 L1542.35 680.197 L1541.79 680.197 L1541.23 680.197 L1540.67 680.197 L1540.11 680.197 L1539.55 680.197 L1538.99 680.197 L1538.43 680.197 L1537.87 680.197 L1537.31 680.197 L1536.75 680.197 L1536.19 680.197 L1535.63 680.197 L1535.08 680.197 L1534.52 680.197 L1533.96 680.197 L1533.4 680.197 L1532.84 680.197 L1532.28 680.197 L1531.72 680.197 L1531.16 680.197 L1530.6 680.197 L1530.04 680.197 L1529.48 680.197 L1528.92 680.197 L1528.36 680.197 L1527.81 680.197 L1527.25 680.197 L1526.69 680.197 L1526.13 680.197 L1525.57 680.197 L1525.01 680.197 L1524.45 680.197 L1523.89 680.197 L1523.33 680.197 L1522.77 680.197 L1522.21 680.197 L1521.65 680.197 L1521.09 680.197 L1520.53 680.197 L1519.98 680.197 L1519.42 680.197 L1518.86 680.197 L1518.3 680.197 L1517.74 680.197 L1517.18 680.197 L1516.62 680.197 L1516.06 680.197 L1515.5 680.197 L1514.94 680.197 L1514.38 680.197 L1513.82 680.197 L1513.26 680.197 L1512.71 680.197 L1512.15 680.197 L1511.59 680.197 L1511.03 680.197 L1510.47 680.197 L1509.91 680.197 L1509.35 680.197 L1508.79 680.197 L1508.23 680.197 L1507.67 680.197 L1507.11 680.197 L1506.55 680.197 L1505.99 680.197 L1505.44 680.197 L1504.88 680.197 L1504.32 680.197 L1503.76 680.197 L1503.2 680.197 L1502.64 680.197 L1502.08 680.197 L1501.52 680.197 L1500.96 680.197 L1500.4 680.197 L1499.84 680.197 L1499.28 680.197 L1498.72 680.197 L1498.16 680.197 L1497.61 680.197 L1497.05 680.197 L1496.49 680.197 L1495.93 680.197 L1495.37 680.197 L1494.81 680.197 L1494.25 680.197 L1493.69 680.197 L1493.13 680.197 L1492.57 680.197 L1492.01 680.197 L1491.45 680.197 L1490.89 680.197 L1490.34 680.197 L1489.78 680.197 L1489.22 680.197 L1488.66 680.197 L1488.1 680.197 L1487.54 680.197 L1486.98 680.197 L1486.42 680.197 L1485.86 680.197 L1485.3 680.197 L1484.74 680.197 L1484.18 680.197 L1483.62 680.197 L1483.07 680.197 L1482.51 680.197 L1481.95 680.197 L1481.39 680.197 L1480.83 680.197 L1480.27 680.197 L1479.71 680.197 L1479.15 680.197 L1478.59 680.197 L1478.03 680.197 L1477.47 680.197 L1476.91 680.197 L1476.35 680.197 L1475.79 680.197 L1475.24 680.197 L1474.68 680.197 L1474.12 680.197 L1473.56 680.197 L1473 680.197 L1472.44 680.197 L1471.88 680.197 L1471.32 680.197 L1470.76 680.197 L1470.2 680.197 L1469.64 680.197 L1469.08 680.197 L1468.52 680.197 L1467.97 680.197 L1467.41 680.197 L1466.85 680.197 L1466.29 680.197 L1465.73 680.197 L1465.17 680.197 L1464.61 680.197 L1464.05 680.197 L1463.49 680.197 L1462.93 680.197 L1462.37 680.197 L1461.81 680.197 L1461.25 680.197 L1460.7 680.197 L1460.14 680.197 L1459.58 680.197 L1459.02 680.197 L1458.46 680.197 L1457.9 680.197 L1457.34 680.197 L1456.78 680.197 L1456.22 680.197 L1455.66 680.197 L1455.1 680.197 L1454.54 680.197 L1453.98 680.197 L1453.42 680.197 L1452.87 680.197 L1452.31 680.197 L1451.75 680.197 L1451.19 680.197 L1450.63 680.197 L1450.07 680.197 L1449.51 680.197 L1448.95 680.197 L1448.39 680.197 L1447.83 680.197 L1447.27 680.197 L1446.71 680.197 L1446.15 680.197 L1445.6 680.197 L1445.04 680.197 L1444.48 680.197 L1443.92 680.197 L1443.36 680.197 L1442.8 680.197 L1442.24 680.197 L1441.68 680.197 L1441.12 680.197 L1440.56 680.197 L1440 680.197 L1439.44 680.197 L1438.88 680.197 L1438.33 680.197 L1437.77 680.197 L1437.21 680.197 L1436.65 680.197 L1436.09 680.197 L1435.53 680.197 L1434.97 680.197 L1434.41 680.197 L1433.85 680.197 L1433.29 680.197 L1432.73 680.197 L1432.17 680.197 L1431.61 680.197 L1431.05 680.197 L1430.5 680.197 L1429.94 680.197 L1429.38 680.197 L1428.82 680.197 L1428.26 680.197 L1427.7 680.197 L1427.14 680.197 L1426.58 680.197 L1426.02 680.197 L1425.46 680.197 L1424.9 680.197 L1424.34 680.197 L1423.78 680.197 L1423.23 680.197 L1422.67 680.197 L1422.11 680.197 L1421.55 680.197 L1420.99 680.197 L1420.43 680.197 L1419.87 680.197 L1419.31 680.197 L1418.75 680.197 L1418.19 680.197 L1417.63 680.197 L1417.07 680.197 L1416.51 680.197 L1415.95 680.197 L1415.4 680.197 L1414.84 680.197 L1414.28 680.197 L1413.72 680.197 L1413.16 680.197 L1412.6 680.197 L1412.04 680.197 L1411.48 680.197 L1410.92 680.197 L1410.36 680.197 L1409.8 680.197 L1409.24 680.197 L1408.68 680.197 L1408.13 680.197 L1407.57 680.197 L1407.01 680.197 L1406.45 680.197 L1405.89 680.197 L1405.33 680.197 L1404.77 680.197 L1404.21 680.197 L1403.65 680.197 L1403.09 680.197 L1402.53 680.197 L1401.97 680.197 L1401.41 680.197 L1400.86 680.197 L1400.3 680.197 L1399.74 680.197 L1399.18 680.197 L1398.62 680.197 L1398.06 680.197 L1397.5 680.197 L1396.94 680.197 L1396.38 680.197 L1395.82 680.197 L1395.26 680.197 L1394.7 680.197 L1394.14 680.197 L1393.58 680.197 L1393.03 680.197 L1392.47 680.197 L1391.91 680.197 L1391.35 680.197 L1390.79 680.197 L1390.23 680.197 L1389.67 680.197 L1389.11 680.197 L1388.55 680.197 L1387.99 680.197 L1387.43 680.197 L1386.87 680.197 L1386.31 680.197 L1385.76 680.197 L1385.2 680.197 L1384.64 680.197 L1384.08 680.197 L1383.52 680.197 L1382.96 680.197 L1382.4 680.197 L1381.84 680.197 L1381.28 680.197 L1380.72 680.197 L1380.16 680.197 L1379.6 680.197 L1379.04 680.197 L1378.49 680.197 L1377.93 680.197 L1377.37 680.197 L1376.81 680.197 L1376.25 680.197 L1375.69 680.197 L1375.13 680.197 L1374.57 680.197 L1374.01 680.197 L1373.45 680.197 L1372.89 680.197 L1372.33 680.197 L1371.77 680.197 L1371.21 680.197 L1370.66 680.197 L1370.1 680.197 L1369.54 680.197 L1368.98 680.197 L1368.42 680.197 L1367.86 680.197 L1367.3 680.197 L1366.74 680.197 L1366.18 680.197 L1365.62 680.197 L1365.06 680.197 L1364.5 680.197 L1363.94 680.197 L1363.39 680.197 L1362.83 680.197 L1362.27 680.197 L1361.71 680.197 L1361.15 680.197 L1360.59 680.197 L1360.03 680.197 L1359.47 680.197 L1358.91 680.197 L1358.35 680.197 L1357.79 680.197 L1357.23 680.197 L1356.67 680.197 L1356.12 680.197 L1355.56 680.197 L1355 680.197 L1354.44 680.197 L1353.88 680.197 L1353.32 680.197 L1352.76 680.197 L1352.2 680.197 L1351.64 680.197 L1351.08 680.197 L1350.52 680.197 L1349.96 680.197 L1349.4 680.197 L1348.84 680.197 L1348.29 680.197 L1347.73 680.197 L1347.17 680.197 L1346.61 680.197 L1346.05 680.197 L1345.49 680.197 L1344.93 680.197 L1344.37 680.197 L1343.81 680.197 L1343.25 680.197 L1342.69 680.197 L1342.13 680.197 L1341.57 680.197 L1341.02 680.197 L1340.46 680.197 L1339.9 680.197 L1339.34 680.197 L1338.78 680.197 L1338.22 680.197 L1337.66 680.197 L1337.1 680.197 L1336.54 680.197 L1335.98 680.197 L1335.42 680.197 L1334.86 680.197 L1334.3 680.197 L1333.75 680.197 L1333.19 680.197 L1332.63 680.197 L1332.07 680.197 L1331.51 680.197 L1330.95 680.197 L1330.39 680.197 L1329.83 680.197 L1329.27 680.197 L1328.71 680.197 L1328.15 680.197 L1327.59 680.197 L1327.03 680.197 L1326.47 680.197 L1325.92 680.197 L1325.36 680.197 L1324.8 680.197 L1324.24 680.197 L1323.68 680.197 L1323.12 680.197 L1322.56 680.197 L1322 680.197 L1321.44 680.197 L1320.88 680.197 L1320.32 680.197 L1319.76 680.197 L1319.2 680.197 L1318.65 680.197 L1318.09 680.197 L1317.53 680.197 L1316.97 680.197 L1316.41 680.197 L1315.85 680.197 L1315.29 680.197 L1314.73 680.197 L1314.17 680.197 L1313.61 680.197 L1313.05 680.197 L1312.49 680.197 L1311.93 680.197 L1311.38 680.197 L1310.82 680.197 L1310.26 680.197 L1309.7 680.197 L1309.14 680.197 L1308.58 680.197 L1308.02 680.197 L1307.46 680.197 L1306.9 680.197 L1306.34 680.197 L1305.78 680.197 L1305.22 680.197 L1304.66 680.197 L1304.1 680.197 L1303.55 680.197 L1302.99 680.197 L1302.43 680.197 L1301.87 680.197 L1301.31 680.197 L1300.75 680.197 L1300.19 680.197 L1299.63 680.197 L1299.07 680.197 L1298.51 680.197 L1297.95 680.197 L1297.39 680.197 L1296.83 680.197 L1296.28 680.197 L1295.72 680.197 L1295.16 680.197 L1294.6 680.197 L1294.04 680.197 L1293.48 680.197 L1292.92 680.197 L1292.36 680.197 L1291.8 680.197 L1291.24 680.197 L1290.68 680.197 L1290.12 680.197 L1289.56 680.197 L1289 680.197 L1288.45 680.197 L1287.89 680.197 L1287.33 680.197 L1286.77 680.197 L1286.21 680.197 L1285.65 680.197 L1285.09 680.197 L1284.53 680.197 L1283.97 680.197 L1283.41 680.197 L1282.85 680.197 L1282.29 680.197 L1281.73 680.197 L1281.18 680.197 L1280.62 680.197 L1280.06 680.197 L1279.5 680.197 L1278.94 680.197 L1278.38 680.197 L1277.82 680.197 L1277.26 680.197 L1276.7 680.197 L1276.14 680.197 L1275.58 680.197 L1275.02 680.197 L1274.46 680.197 L1273.91 680.197 L1273.35 680.197 L1272.79 680.197 L1272.23 680.197 L1271.67 680.197 L1271.11 680.197 L1270.55 680.197 L1269.99 680.197 L1269.43 680.197 L1268.87 680.197 L1268.31 680.197 L1267.75 680.197 L1267.19 680.197 L1266.63 680.197 L1266.08 680.197 L1265.52 680.197 L1264.96 680.197 L1264.4 680.197 L1263.84 680.197 L1263.28 680.197 L1262.72 680.197 L1262.16 680.197 L1261.6 680.197 L1261.04 680.197 L1260.48 680.197 L1259.92 680.197 L1259.36 680.197 L1258.81 680.197 L1258.25 680.197 L1257.69 680.197 L1257.13 680.197 L1256.57 680.197 L1256.01 680.197 L1255.45 680.197 L1254.89 680.197 L1254.33 680.197 L1253.77 680.197 L1253.21 680.197 L1252.65 680.197 L1252.09 680.197 L1251.54 680.197 L1250.98 680.197 L1250.42 680.197 L1249.86 680.197 L1249.3 680.197 L1248.74 680.197 L1248.18 680.197 L1247.62 680.197 L1247.06 680.197 L1246.5 680.197 L1245.94 680.197 L1245.38 680.197 L1244.82 680.197 L1244.26 680.197 L1243.71 680.197 L1243.15 680.197 L1242.59 680.197 L1242.03 680.197 L1241.47 680.197 L1240.91 680.197 L1240.35 680.197 L1239.79 680.197 L1239.23 680.197 L1238.67 680.197 L1238.11 680.197 L1237.55 680.197 L1236.99 680.197 L1236.44 680.197 L1235.88 680.197 L1235.32 680.197 L1234.76 680.197 L1234.2 680.197 L1233.64 680.197 L1233.08 680.197 L1232.52 680.197 L1231.96 680.197 L1231.4 680.197 L1230.84 680.197 L1230.28 680.197 L1229.72 680.197 L1229.17 680.197 L1228.61 680.197 L1228.05 680.197 L1227.49 680.197 L1226.93 680.197 L1226.37 680.197 L1225.81 680.197 L1225.25 680.197 L1224.69 680.197 L1224.13 680.197 L1223.57 680.197 L1223.01 680.197 L1222.45 680.197 L1221.89 680.197 L1221.34 680.197 L1220.78 680.197 L1220.22 680.197 L1219.66 680.197 L1219.1 680.197 L1218.54 680.197 L1217.98 680.197 L1217.42 680.197 L1216.86 680.197 L1216.3 680.197 L1215.74 680.197 L1215.18 680.197 L1214.62 680.197 L1214.07 680.197 L1213.51 680.197 L1212.95 680.197 L1212.39 680.197 L1211.83 680.197 L1211.27 680.197 L1210.71 680.197 L1210.15 680.197 L1209.59 680.197 L1209.03 680.197 L1208.47 680.197 L1207.91 680.197 L1207.35 680.197 L1206.8 680.197 L1206.24 680.197 L1205.68 680.197 L1205.12 680.197 L1204.56 680.197 L1204 680.197 L1203.44 680.197 L1202.88 680.197 L1202.32 680.197 L1201.76 680.197 L1201.2 680.197 L1200.64 680.197 L1200.08 680.197 L1199.52 680.197 L1198.97 680.197 L1198.41 680.197 L1197.85 680.197 L1197.29 680.197 L1196.73 680.197 L1196.17 680.197 L1195.61 680.197 L1195.05 680.197 L1194.49 680.197 L1193.93 680.197 L1193.37 680.197 L1192.81 680.197 L1192.25 680.197 L1191.7 680.197 L1191.14 680.197 L1190.58 680.197 L1190.02 680.197 L1189.46 680.197 L1188.9 680.197 L1188.34 680.197 L1187.78 680.197 L1187.22 680.197 L1186.66 680.197 L1186.1 680.197 L1185.54 680.197 L1184.98 680.197 L1184.43 680.197 L1183.87 680.197 L1183.31 680.197 L1182.75 680.197 L1182.19 680.197 L1181.63 680.197 L1181.07 680.197 L1180.51 680.197 L1179.95 680.197 L1179.39 680.197 L1178.83 680.197 L1178.27 680.197 L1177.71 680.197 L1177.15 680.197 L1176.6 680.197 L1176.04 680.197 L1175.48 680.197 L1174.92 680.197 L1174.36 680.197 L1173.8 680.197 L1173.24 680.197 L1172.68 680.197 L1172.12 680.197 L1171.56 680.197 L1171 680.197 L1170.44 680.197 L1169.88 680.197 L1169.33 680.197 L1168.77 680.197 L1168.21 680.197 L1167.65 680.197 L1167.09 680.197 L1166.53 680.197 L1165.97 680.197 L1165.41 680.197 L1164.85 680.197 L1164.29 680.197 L1163.73 680.197 L1163.17 680.197 L1162.61 680.197 L1162.05 680.197 L1161.5 680.197 L1160.94 680.197 L1160.38 680.197 L1159.82 680.197 L1159.26 680.197 L1158.7 680.197 L1158.14 680.197 L1157.58 680.197 L1157.02 680.197 L1156.46 680.197 L1155.9 680.197 L1155.34 680.197 L1154.78 680.197 L1154.23 680.197 L1153.67 680.197 L1153.11 680.197 L1152.55 680.197 L1151.99 680.197 L1151.43 680.197 L1150.87 680.197 L1150.31 680.197 L1149.75 680.197 L1149.19 680.197 L1148.63 680.197 L1148.07 680.197 L1147.51 680.197 L1146.96 680.197 L1146.4 680.197 L1145.84 680.197 L1145.28 680.197 L1144.72 680.197 L1144.16 680.197 L1143.6 680.197 L1143.04 680.197 L1142.48 680.197 L1141.92 680.197 L1141.36 680.197 L1140.8 680.197 L1140.24 680.197 L1139.68 680.197 L1139.13 680.197 L1138.57 680.197 L1138.01 680.197 L1137.45 680.197 L1136.89 680.197 L1136.33 680.197 L1135.77 680.197 L1135.21 680.197 L1134.65 680.197 L1134.09 680.197 L1133.53 680.197 L1132.97 680.197 L1132.41 680.197 L1131.86 680.197 L1131.3 680.197 L1130.74 680.197 L1130.18 680.197 L1129.62 680.197 L1129.06 680.197 L1128.5 680.197 L1127.94 680.197 L1127.38 680.197 L1126.82 680.197 L1126.26 680.197 L1125.7 680.197 L1125.14 680.197 L1124.59 680.197 L1124.03 680.197 L1123.47 680.197 L1122.91 680.197 L1122.35 680.197 L1121.79 680.197 L1121.23 680.197 L1120.67 680.197 L1120.11 680.197 L1119.55 680.197 L1118.99 680.197 L1118.43 680.197 L1117.87 680.197 L1117.31 680.197 L1116.76 680.197 L1116.2 680.197 L1115.64 680.197 L1115.08 680.197 L1114.52 680.197 L1113.96 680.197 L1113.4 680.197 L1112.84 680.197 L1112.28 680.197 L1111.72 680.197 L1111.16 680.197 L1110.6 680.197 L1110.04 680.197 L1109.49 680.197 L1108.93 680.197 L1108.37 680.197 L1107.81 680.197 L1107.25 680.197 L1106.69 680.197 L1106.13 680.197 L1105.57 680.197 L1105.01 680.197 L1104.45 680.197 L1103.89 680.197 L1103.33 680.197 L1102.77 680.197 L1102.22 680.197 L1101.66 680.197 L1101.1 680.197 L1100.54 680.197 L1099.98 680.197 L1099.42 680.197 L1098.86 680.197 L1098.3 680.197 L1097.74 680.197 L1097.18 680.197 L1096.62 680.197 L1096.06 680.197 L1095.5 680.197 L1094.94 680.197 L1094.39 680.197 L1093.83 680.197 L1093.27 680.197 L1092.71 680.197 L1092.15 680.197 L1091.59 680.197 L1091.03 680.197 L1090.47 680.197 L1089.91 680.197 L1089.35 680.197 L1088.79 680.197 L1088.23 680.197 L1087.67 680.197 L1087.12 680.197 L1086.56 680.197 L1086 680.197 L1085.44 680.197 L1084.88 680.197 L1084.32 680.197 L1083.76 680.197 L1083.2 680.197 L1082.64 680.197 L1082.08 680.197 L1081.52 680.197 L1080.96 680.197 L1080.4 680.197 L1079.85 680.197 L1079.29 680.197 L1078.73 680.197 L1078.17 680.197 L1077.61 680.197 L1077.05 680.197 L1076.49 680.197 L1075.93 680.197 L1075.37 680.197 L1074.81 680.197 L1074.25 680.197 L1073.69 680.197 L1073.13 680.197 L1072.57 680.197 L1072.02 680.197 L1071.46 680.197 L1070.9 680.197 L1070.34 680.197 L1069.78 680.197 L1069.22 680.197 L1068.66 680.197 L1068.1 680.197 L1067.54 680.197 L1066.98 680.197 L1066.42 680.197 L1065.86 680.197 L1065.3 680.197 L1064.75 680.197 L1064.19 680.197 L1063.63 680.197 L1063.07 680.197 L1062.51 680.197 L1061.95 680.197 L1061.39 680.197 L1060.83 680.197 L1060.27 680.197 L1059.71 680.197 L1059.15 680.197 L1058.59 680.197 L1058.03 680.197 L1057.48 680.197 L1056.92 680.197 L1056.36 680.197 L1055.8 680.197 L1055.24 680.197 L1054.68 680.197 L1054.12 680.197 L1053.56 680.197 L1053 680.197 L1052.44 680.197 L1051.88 680.197 L1051.32 680.197 L1050.76 680.197 L1050.2 680.197 L1049.65 680.197 L1049.09 680.197 L1048.53 680.197 L1047.97 680.197 L1047.41 680.197 L1046.85 680.197 L1046.29 680.197 L1045.73 680.197 L1045.17 680.197 L1044.61 680.197 L1044.05 680.197 L1043.49 680.197 L1042.93 680.197 L1042.38 680.197 L1041.82 680.197 L1041.26 680.197 L1040.7 680.197 L1040.14 680.197 L1039.58 680.197 L1039.02 680.197 L1038.46 680.197 L1037.9 680.197 L1037.34 680.197 L1036.78 680.197 L1036.22 680.197 L1035.66 680.197 L1035.1 680.197 L1034.55 680.197 L1033.99 680.197 L1033.43 680.197 L1032.87 680.197 L1032.31 680.197 L1031.75 680.197 L1031.19 680.197 L1030.63 680.197 L1030.07 680.197 L1029.51 680.197 L1028.95 680.197 L1028.39 680.197 L1027.83 680.197 L1027.28 680.197 L1026.72 680.197 L1026.16 680.197 L1025.6 680.197 L1025.04 680.197 L1024.48 680.197 L1023.92 680.197 L1023.36 680.197 L1022.8 680.197 L1022.24 680.197 L1021.68 680.197 L1021.12 680.197 L1020.56 680.197 L1020.01 680.197 L1019.45 680.197 L1018.89 680.197 L1018.33 680.197 L1017.77 680.197 L1017.21 680.197 L1016.65 680.197 L1016.09 680.197 L1015.53 680.197 L1014.97 680.197 L1014.41 680.197 L1013.85 680.197 L1013.29 680.197 L1012.73 680.197 L1012.18 680.197 L1011.62 680.197 L1011.06 680.197 L1010.5 680.197 L1009.94 680.197 L1009.38 680.197 L1008.82 680.197 L1008.26 680.197 L1007.7 680.197 L1007.14 680.197 L1006.58 680.197 L1006.02 680.197 L1005.46 680.197 L1004.91 680.197 L1004.35 680.197 L1003.79 680.197 L1003.23 680.197 L1002.67 680.197 L1002.11 680.197 L1001.55 680.197 L1000.99 680.197 L1000.43 680.197 L999.872 680.197 L999.313 680.197 L998.754 680.197 L998.194 680.197 L997.635 680.197 L997.076 680.197 L996.517 680.197 L995.957 680.197 L995.398 680.197 L994.839 680.197 L994.28 680.197 L993.72 680.197 L993.161 680.197 L992.602 680.197 L992.043 680.197 L991.483 680.197 L990.924 680.197 L990.365 680.197 L989.806 680.197 L989.246 680.197 L988.687 680.197 L988.128 680.197 L987.569 680.197 L987.009 680.197 L986.45 680.197 L985.891 680.197 L985.332 680.197 L984.772 680.197 L984.213 680.197 L983.654 680.197 L983.095 680.197 L982.535 680.197 L981.976 680.197 L981.417 680.197 L980.858 680.197 L980.298 680.197 L979.739 680.197 L979.18 680.197 L978.621 680.197 L978.061 680.197 L977.502 680.197 L976.943 680.197 L976.384 680.197 L975.824 680.197 L975.265 680.197 L974.706 680.197 L974.147 680.197 L973.587 680.197 L973.028 680.197 L972.469 680.197 L971.91 680.197 L971.35 680.197 L970.791 680.197 L970.232 680.197 L969.673 680.197 L969.113 680.197 L968.554 680.197 L967.995 680.197 L967.436 680.197 L966.876 680.197 L966.317 680.197 L965.758 680.197 L965.199 680.197 L964.639 680.197 L964.08 680.197 L963.521 680.197 L962.962 680.197 L962.402 680.197 L961.843 680.197 L961.284 680.197 L960.725 680.197 L960.165 680.197 L959.606 680.197 L959.047 680.197 L958.488 680.197 L957.928 680.197 L957.369 680.197 L956.81 680.197 L956.251 680.197 L955.691 680.197 L955.132 680.197 L954.573 680.197 L954.014 680.197 L953.454 680.197 L952.895 680.197 L952.336 680.197 L951.777 680.197 L951.217 680.197 L950.658 680.197 L950.099 680.197 L949.54 680.197 L948.98 680.197 L948.421 680.197 L947.862 680.197 L947.303 680.197 L946.743 680.197 L946.184 680.197 L945.625 680.197 L945.066 680.197 L944.506 680.197 L943.947 680.197 L943.388 680.197 L942.829 680.197 L942.269 680.197 L941.71 680.197 L941.151 680.197 L940.592 680.197 L940.032 680.197 L939.473 680.197 L938.914 680.197 L938.355 680.197 L937.795 680.197 L937.236 680.197 L936.677 680.197 L936.118 680.197 L935.558 680.197 L934.999 680.197 L934.44 680.197 L933.881 680.197 L933.321 680.197 L932.762 680.197 L932.203 680.197 L931.644 680.197 L931.084 680.197 L930.525 680.197 L929.966 680.197 L929.406 680.197 L928.847 680.197 L928.288 680.197 L927.729 680.197 L927.169 680.197 L926.61 680.197 L926.051 680.197 L925.492 680.197 L924.932 680.197 L924.373 680.197 L923.814 680.197 L923.255 680.197 L922.695 680.197 L922.136 680.197 L921.577 680.197 L921.018 680.197 L920.458 680.197 L919.899 680.197 L919.34 680.197 L918.781 680.197 L918.221 680.197 L917.662 680.197 L917.103 680.197 L916.544 680.197 L915.984 680.197 L915.425 680.197 L914.866 680.197 L914.307 680.197 L913.747 680.197 L913.188 680.197 L912.629 680.197 L912.07 680.197 L911.51 680.197 L910.951 680.197 L910.392 680.197 L909.833 680.197 L909.273 680.197 L908.714 680.197 L908.155 680.197 L907.596 680.197 L907.036 680.197 L906.477 680.197 L905.918 680.197 L905.359 680.197 L904.799 680.197 L904.24 680.197 L903.681 680.197 L903.122 680.197 L902.562 680.197 L902.003 680.197 L901.444 680.197 L900.885 680.197 L900.325 680.197 L899.766 680.197 L899.207 680.197 L898.648 680.197 L898.088 680.197 L897.529 680.197 L896.97 680.197 L896.411 680.197 L895.851 680.197 L895.292 680.197 L894.733 680.197 L894.174 680.197 L893.614 680.197 L893.055 680.197 L892.496 680.197 L891.937 680.197 L891.377 680.197 L890.818 680.197 L890.259 680.197 L889.7 680.197 L889.14 680.197 L888.581 680.197 L888.022 680.197 L887.463 680.197 L886.903 680.197 L886.344 680.197 L885.785 680.197 L885.226 680.197 L884.666 680.197 L884.107 680.197 L883.548 680.197 L882.989 680.197 L882.429 680.197 L881.87 680.197 L881.311 680.197 L880.752 680.197 L880.192 680.197 L879.633 680.197 L879.074 680.197 L878.515 680.197 L877.955 680.197 L877.396 680.197 L876.837 680.197 L876.278 680.197 L875.718 680.197 L875.159 680.197 L874.6 680.197 L874.041 680.197 L873.481 680.197 L872.922 680.197 L872.363 680.197 L871.804 680.197 L871.244 680.197 L870.685 680.197 L870.126 680.197 L869.567 680.197 L869.007 680.197 L868.448 680.197 L867.889 680.197 L867.33 680.197 L866.77 680.197 L866.211 680.197 L865.652 680.197 L865.093 680.197 L864.533 680.197 L863.974 680.197 L863.415 680.197 L862.856 680.197 L862.296 680.197 L861.737 680.197 L861.178 680.197 L860.619 680.197 L860.059 680.197 L859.5 680.197 L858.941 680.197 L858.382 680.197 L857.822 680.197 L857.263 680.197 L856.704 680.197 L856.145 680.197 L855.585 680.197 L855.026 680.197 L854.467 680.197 L853.908 680.197 L853.348 680.197 L852.789 680.197 L852.23 680.197 L851.671 680.197 L851.111 680.197 L850.552 680.197 L849.993 680.197 L849.434 680.197 L848.874 680.197 L848.315 680.197 L847.756 680.197 L847.197 680.197 L846.637 680.197 L846.078 680.197 L845.519 680.197 L844.96 680.197 L844.4 680.197 L843.841 680.197 L843.282 680.197 L842.723 680.197 L842.163 680.197 L841.604 680.197 L841.045 680.197 L840.486 680.197 L839.926 680.197 L839.367 680.197 L838.808 680.197 L838.249 680.197 L837.689 680.197 L837.13 680.197 L836.571 680.197 L836.012 680.197 L835.452 680.197 L834.893 680.197 L834.334 680.197 L833.775 680.197 L833.215 680.197 L832.656 680.197 L832.097 680.197 L831.538 680.197 L830.978 680.197 L830.419 680.197 L829.86 680.197 L829.301 680.197 L828.741 680.197 L828.182 680.197 L827.623 680.197 L827.064 680.197 L826.504 680.197 L825.945 680.197 L825.386 680.197 L824.827 680.197 L824.267 680.197 L823.708 680.197 L823.149 680.197 L822.59 680.197 L822.03 680.197 L821.471 680.197 L820.912 680.197 L820.353 680.197 L819.793 680.197 L819.234 680.197 L818.675 680.197 L818.116 680.197 L817.556 680.197 L816.997 680.197 L816.438 680.197 L815.879 680.197 L815.319 680.197 L814.76 680.197 L814.201 680.197 L813.642 680.197 L813.082 680.197 L812.523 680.197 L811.964 680.197 L811.405 680.197 L810.845 680.197 L810.286 680.197 L809.727 680.197 L809.168 680.197 L808.608 680.197 L808.049 680.197 L807.49 680.197 L806.931 680.197 L806.371 680.197 L805.812 680.197 L805.253 680.197 L804.693 680.197 L804.134 680.197 L803.575 680.197 L803.016 680.197 L802.456 680.197 L801.897 680.197 L801.338 680.197 L800.779 680.197 L800.219 680.197 L799.66 680.197 L799.101 680.197 L798.542 680.197 L797.982 680.197 L797.423 680.197 L796.864 680.197 L796.305 680.197 L795.745 680.197 L795.186 680.197 L794.627 680.197 L794.068 680.197 L793.508 680.197 L792.949 680.197 L792.39 680.197 L791.831 680.197 L791.271 680.197 L790.712 680.197 L790.153 680.197 L789.594 680.197 L789.034 680.197 L788.475 680.197 L787.916 680.197 L787.357 680.197 L786.797 680.197 L786.238 680.197 L785.679 680.197 L785.12 680.197 L784.56 680.197 L784.001 680.197 L783.442 680.197 L782.883 680.197 L782.323 680.197 L781.764 680.197 L781.205 680.197 L780.646 680.197 L780.086 680.197 L779.527 680.197 L778.968 680.197 L778.409 680.197 L777.849 680.197 L777.29 680.197 L776.731 680.197 L776.172 680.197 L775.612 680.197 L775.053 680.197 L774.494 680.197 L773.935 680.197 L773.375 680.197 L772.816 680.197 L772.257 680.197 L771.698 680.197 L771.138 680.197 L770.579 680.197 L770.02 680.197 L769.461 680.197 L768.901 680.197 L768.342 680.197 L767.783 680.197 L767.224 680.197 L766.664 680.197 L766.105 680.197 L765.546 680.197 L764.987 680.197 L764.427 680.197 L763.868 680.197 L763.309 680.197 L762.75 680.197 L762.19 680.197 L761.631 680.197 L761.072 680.197 L760.513 680.197 L759.953 680.197 L759.394 680.197 L758.835 680.197 L758.276 680.197 L757.716 680.197 L757.157 680.197 L756.598 680.197 L756.039 680.197 L755.479 680.197 L754.92 680.197 L754.361 680.197 L753.802 680.197 L753.242 680.197 L752.683 680.197 L752.124 680.197 L751.565 680.197 L751.005 680.197 L750.446 680.197 L749.887 680.197 L749.328 680.197 L748.768 680.197 L748.209 680.197 L747.65 680.197 L747.091 680.197 L746.531 680.197 L745.972 680.197 L745.413 680.197 L744.854 680.197 L744.294 680.197 L743.735 680.197 L743.176 680.197 L742.617 680.197 L742.057 680.197 L741.498 680.197 L740.939 680.197 L740.38 680.197 L739.82 680.197 L739.261 680.197 L738.702 680.197 L738.143 680.197 L737.583 680.197 L737.024 680.197 L736.465 680.197 L735.906 680.197 L735.346 680.197 L734.787 680.197 L734.228 680.197 L733.669 680.197 L733.109 680.197 L732.55 680.197 L731.991 680.197 L731.432 680.197 L730.872 680.197 L730.313 680.197 L729.754 680.197 L729.195 680.197 L728.635 680.197 L728.076 680.197 L727.517 680.197 L726.958 680.197 L726.398 680.197 L725.839 680.197 L725.28 680.197 L724.721 680.197 L724.161 680.197 L723.602 680.197 L723.043 680.197 L722.484 680.197 L721.924 680.197 L721.365 680.197 L720.806 680.197 L720.247 680.197  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.707 720.806,684.707 721.365,684.707 721.924,684.707 722.484,684.707 723.043,684.707 723.602,684.707 724.161,684.707 724.721,684.707 725.28,684.707 725.839,684.707 726.398,684.707 726.958,684.707 727.517,684.707 728.076,684.707 728.635,684.707 729.195,684.707 729.754,684.707 730.313,684.707 730.872,684.707 731.432,684.707 731.991,684.707 732.55,684.707 733.109,684.707 733.669,684.707 734.228,684.707 734.787,684.707 735.346,684.707 735.906,684.707 736.465,684.707 737.024,684.707 737.583,684.707 738.143,684.707 738.702,684.707 739.261,684.707 739.82,684.707 740.38,684.707 740.939,684.707 741.498,684.707 742.057,684.707 742.617,684.707 743.176,684.707 743.735,684.707 744.294,684.707 744.854,684.707 745.413,684.707 745.972,684.707 746.531,684.707 747.091,684.707 747.65,684.707 748.209,684.707 748.768,684.707 749.328,684.707 749.887,684.707 750.446,684.707 751.005,684.707 751.565,684.707 752.124,684.707 752.683,684.707 753.242,684.707 753.802,684.707 754.361,684.707 754.92,684.707 755.479,684.707 756.039,684.707 756.598,684.707 757.157,684.707 757.716,684.707 758.276,684.707 758.835,684.707 759.394,684.707 759.953,684.707 760.513,684.707 761.072,684.707 761.631,684.707 762.19,684.707 762.75,684.707 763.309,684.707 763.868,684.707 764.427,684.707 764.987,684.707 765.546,684.707 766.105,684.707 766.664,684.707 767.224,684.707 767.783,684.707 768.342,684.707 768.901,684.707 769.461,684.707 770.02,684.707 770.579,684.707 771.138,684.707 771.698,684.707 772.257,684.707 772.816,684.707 773.375,684.707 773.935,684.707 774.494,684.707 775.053,684.707 775.612,684.707 776.172,684.707 776.731,684.707 777.29,684.707 777.849,684.707 778.409,684.707 778.968,684.707 779.527,684.707 780.086,684.707 780.646,684.707 781.205,684.707 781.764,684.707 782.323,684.707 782.883,684.707 783.442,684.707 784.001,684.707 784.56,684.707 785.12,684.707 785.679,684.707 786.238,684.707 786.797,684.707 787.357,684.707 787.916,684.707 788.475,684.707 789.034,684.707 789.594,684.707 790.153,684.707 790.712,684.707 791.271,684.707 791.831,684.707 792.39,684.707 792.949,684.707 793.508,684.707 794.068,684.707 794.627,684.707 795.186,684.707 795.745,684.707 796.305,684.707 796.864,684.707 797.423,684.707 797.982,684.707 798.542,684.707 799.101,684.707 799.66,684.707 800.219,684.707 800.779,684.707 801.338,684.707 801.897,684.707 802.456,684.707 803.016,684.707 803.575,684.707 804.134,684.707 804.693,684.707 805.253,684.707 805.812,684.707 806.371,684.707 806.931,684.707 807.49,684.707 808.049,684.707 808.608,684.707 809.168,684.707 809.727,684.707 810.286,684.707 810.845,684.707 811.405,684.707 811.964,684.707 812.523,684.707 813.082,684.707 813.642,684.707 814.201,684.707 814.76,684.707 815.319,684.707 815.879,684.707 816.438,684.707 816.997,684.707 817.556,684.707 818.116,684.707 818.675,684.707 819.234,684.707 819.793,684.707 820.353,684.707 820.912,684.707 821.471,684.707 822.03,684.707 822.59,684.707 823.149,684.707 823.708,684.707 824.267,684.707 824.827,684.707 825.386,684.707 825.945,684.707 826.504,684.707 827.064,684.707 827.623,684.707 828.182,684.707 828.741,684.707 829.301,684.707 829.86,684.707 830.419,684.707 830.978,684.707 831.538,684.707 832.097,684.707 832.656,684.707 833.215,684.707 833.775,684.707 834.334,684.707 834.893,684.707 835.452,684.707 836.012,684.707 836.571,684.707 837.13,684.707 837.689,684.707 838.249,684.707 838.808,684.707 839.367,684.707 839.926,684.707 840.486,684.707 841.045,684.707 841.604,684.707 842.163,684.707 842.723,684.707 843.282,684.707 843.841,684.707 844.4,684.707 844.96,684.707 845.519,684.707 846.078,684.707 846.637,684.707 847.197,684.707 847.756,684.707 848.315,684.707 848.874,684.707 849.434,684.707 849.993,684.707 850.552,684.707 851.111,684.707 851.671,684.707 852.23,684.707 852.789,684.707 853.348,684.707 853.908,684.707 854.467,684.707 855.026,684.707 855.585,684.707 856.145,684.707 856.704,684.707 857.263,684.707 857.822,684.707 858.382,684.707 858.941,684.707 859.5,684.707 860.059,684.707 860.619,684.707 861.178,684.707 861.737,684.707 862.296,684.707 862.856,684.707 863.415,684.707 863.974,684.707 864.533,684.707 865.093,684.707 865.652,684.707 866.211,684.707 866.77,684.707 867.33,684.707 867.889,684.707 868.448,684.707 869.007,684.707 869.567,684.707 870.126,684.707 870.685,684.707 871.244,684.707 871.804,684.707 872.363,684.707 872.922,684.707 873.481,684.707 874.041,684.707 874.6,684.707 875.159,684.707 875.718,684.707 876.278,684.707 876.837,684.707 877.396,684.707 877.955,684.707 878.515,684.707 879.074,684.707 879.633,684.707 880.192,684.707 880.752,684.707 881.311,684.707 881.87,684.707 882.429,684.707 882.989,684.707 883.548,684.707 884.107,684.707 884.666,684.707 885.226,684.707 885.785,684.707 886.344,684.707 886.903,684.707 887.463,684.707 888.022,684.707 888.581,684.707 889.14,684.707 889.7,684.707 890.259,684.707 890.818,684.707 891.377,684.707 891.937,684.707 892.496,684.707 893.055,684.707 893.614,684.707 894.174,684.707 894.733,684.707 895.292,684.707 895.851,684.707 896.411,684.707 896.97,684.707 897.529,684.707 898.088,684.707 898.648,684.707 899.207,684.707 899.766,684.707 900.325,684.707 900.885,684.707 901.444,684.707 902.003,684.707 902.562,684.707 903.122,684.707 903.681,684.707 904.24,684.707 904.799,684.707 905.359,684.707 905.918,684.707 906.477,684.707 907.036,684.707 907.596,684.707 908.155,684.707 908.714,684.707 909.273,684.707 909.833,684.707 910.392,684.707 910.951,684.707 911.51,684.707 912.07,684.707 912.629,684.707 913.188,684.707 913.747,684.707 914.307,684.707 914.866,684.707 915.425,684.707 915.984,684.707 916.544,684.707 917.103,684.707 917.662,684.707 918.221,684.707 918.781,684.707 919.34,684.707 919.899,684.707 920.458,684.707 921.018,684.707 921.577,684.707 922.136,684.707 922.695,684.707 923.255,684.707 923.814,684.707 924.373,684.707 924.932,684.707 925.492,684.707 926.051,684.707 926.61,684.707 927.169,684.707 927.729,684.707 928.288,684.707 928.847,684.707 929.406,684.707 929.966,684.707 930.525,684.707 931.084,684.707 931.644,684.707 932.203,684.707 932.762,684.707 933.321,684.707 933.881,684.707 934.44,684.707 934.999,684.707 935.558,684.707 936.118,684.707 936.677,684.707 937.236,684.707 937.795,684.707 938.355,684.707 938.914,684.707 939.473,684.707 940.032,684.707 940.592,684.707 941.151,684.707 941.71,684.707 942.269,684.707 942.829,684.707 943.388,684.707 943.947,684.707 944.506,684.707 945.066,684.707 945.625,684.707 946.184,684.707 946.743,684.707 947.303,684.707 947.862,684.707 948.421,684.707 948.98,684.707 949.54,684.707 950.099,684.707 950.658,684.707 951.217,684.707 951.777,684.707 952.336,684.707 952.895,684.707 953.454,684.707 954.014,684.707 954.573,684.707 955.132,684.707 955.691,684.707 956.251,684.707 956.81,684.707 957.369,684.707 957.928,684.707 958.488,684.707 959.047,684.707 959.606,684.707 960.165,684.707 960.725,684.707 961.284,684.707 961.843,684.707 962.402,684.707 962.962,684.707 963.521,684.707 964.08,684.707 964.639,684.707 965.199,684.707 965.758,684.707 966.317,684.707 966.876,684.707 967.436,684.707 967.995,684.707 968.554,684.707 969.113,684.707 969.673,684.707 970.232,684.707 970.791,684.707 971.35,684.707 971.91,684.707 972.469,684.707 973.028,684.707 973.587,684.707 974.147,684.707 974.706,684.707 975.265,684.707 975.824,684.707 976.384,684.707 976.943,684.707 977.502,684.707 978.061,684.707 978.621,684.707 979.18,684.707 979.739,684.707 980.298,684.707 980.858,684.707 981.417,684.707 981.976,684.707 982.535,684.707 983.095,684.707 983.654,684.707 984.213,684.707 984.772,684.707 985.332,684.707 985.891,684.707 986.45,684.707 987.009,684.707 987.569,684.707 988.128,684.707 988.687,684.707 989.246,684.707 989.806,684.707 990.365,684.707 990.924,684.707 991.483,684.707 992.043,684.707 992.602,684.707 993.161,684.707 993.72,684.707 994.28,684.707 994.839,684.707 995.398,684.707 995.957,684.707 996.517,684.707 997.076,684.707 997.635,684.707 998.194,684.707 998.754,684.707 999.313,684.707 999.872,684.707 1000.43,684.707 1000.99,684.707 1001.55,684.707 1002.11,684.707 1002.67,684.707 1003.23,684.707 1003.79,684.707 1004.35,684.707 1004.91,684.707 1005.46,684.707 1006.02,684.707 1006.58,684.707 1007.14,684.707 1007.7,684.707 1008.26,684.707 1008.82,684.707 1009.38,684.707 1009.94,684.707 1010.5,684.707 1011.06,684.707 1011.62,684.707 1012.18,684.707 1012.73,684.707 1013.29,684.707 1013.85,684.707 1014.41,684.707 1014.97,684.707 1015.53,684.707 1016.09,684.707 1016.65,684.707 1017.21,684.707 1017.77,684.707 1018.33,684.707 1018.89,684.707 1019.45,684.707 1020.01,684.707 1020.56,684.707 1021.12,684.707 1021.68,684.707 1022.24,684.707 1022.8,684.707 1023.36,684.707 1023.92,684.707 1024.48,684.707 1025.04,684.707 1025.6,684.707 1026.16,684.707 1026.72,684.707 1027.28,684.707 1027.83,684.707 1028.39,684.707 1028.95,684.707 1029.51,684.707 1030.07,684.707 1030.63,684.707 1031.19,684.707 1031.75,684.707 1032.31,684.707 1032.87,684.707 1033.43,684.707 1033.99,684.707 1034.55,684.707 1035.1,684.707 1035.66,684.707 1036.22,684.707 1036.78,684.707 1037.34,684.707 1037.9,684.707 1038.46,684.707 1039.02,684.707 1039.58,684.707 1040.14,684.707 1040.7,684.707 1041.26,684.707 1041.82,684.707 1042.38,684.707 1042.93,684.707 1043.49,684.707 1044.05,684.707 1044.61,684.707 1045.17,684.707 1045.73,684.707 1046.29,684.707 1046.85,684.707 1047.41,684.707 1047.97,684.707 1048.53,684.707 1049.09,684.707 1049.65,684.707 1050.2,684.707 1050.76,684.707 1051.32,684.707 1051.88,684.707 1052.44,684.707 1053,684.707 1053.56,684.707 1054.12,684.707 1054.68,684.707 1055.24,684.707 1055.8,684.707 1056.36,684.707 1056.92,684.707 1057.48,684.707 1058.03,684.707 1058.59,684.707 1059.15,684.707 1059.71,684.707 1060.27,684.707 1060.83,684.707 1061.39,684.707 1061.95,684.707 1062.51,684.707 1063.07,684.707 1063.63,684.707 1064.19,684.707 1064.75,684.707 1065.3,684.707 1065.86,684.707 1066.42,684.707 1066.98,684.707 1067.54,684.707 1068.1,684.707 1068.66,684.707 1069.22,684.707 1069.78,684.707 1070.34,684.707 1070.9,684.707 1071.46,684.707 1072.02,684.707 1072.57,684.707 1073.13,684.707 1073.69,684.707 1074.25,684.707 1074.81,684.707 1075.37,684.707 1075.93,684.707 1076.49,684.707 1077.05,684.707 1077.61,684.707 1078.17,684.707 1078.73,684.707 1079.29,684.707 1079.85,684.707 1080.4,684.707 1080.96,684.707 1081.52,684.707 1082.08,684.707 1082.64,684.707 1083.2,684.707 1083.76,684.707 1084.32,684.707 1084.88,684.707 1085.44,684.707 1086,684.707 1086.56,684.707 1087.12,684.707 1087.67,684.707 1088.23,684.707 1088.79,684.707 1089.35,684.707 1089.91,684.707 1090.47,684.707 1091.03,684.707 1091.59,684.707 1092.15,684.707 1092.71,684.707 1093.27,684.707 1093.83,684.707 1094.39,684.707 1094.94,684.707 1095.5,684.707 1096.06,684.707 1096.62,684.707 1097.18,684.707 1097.74,684.707 1098.3,684.707 1098.86,684.707 1099.42,684.707 1099.98,684.707 1100.54,684.707 1101.1,684.707 1101.66,684.707 1102.22,684.707 1102.77,684.707 1103.33,684.707 1103.89,684.707 1104.45,684.707 1105.01,684.707 1105.57,684.707 1106.13,684.707 1106.69,684.707 1107.25,684.707 1107.81,684.707 1108.37,684.707 1108.93,684.707 1109.49,684.707 1110.04,684.707 1110.6,684.707 1111.16,684.707 1111.72,684.707 1112.28,684.707 1112.84,684.707 1113.4,684.707 1113.96,684.707 1114.52,684.707 1115.08,684.707 1115.64,684.707 1116.2,684.707 1116.76,684.707 1117.31,684.707 1117.87,684.707 1118.43,684.707 1118.99,684.707 1119.55,684.707 1120.11,684.707 1120.67,684.707 1121.23,684.707 1121.79,684.707 1122.35,684.707 1122.91,684.707 1123.47,684.707 1124.03,684.707 1124.59,684.707 1125.14,684.707 1125.7,684.707 1126.26,684.707 1126.82,684.707 1127.38,684.707 1127.94,684.707 1128.5,684.707 1129.06,684.707 1129.62,684.707 1130.18,684.707 1130.74,684.707 1131.3,684.707 1131.86,684.707 1132.41,684.707 1132.97,684.707 1133.53,684.707 1134.09,684.707 1134.65,684.707 1135.21,684.707 1135.77,684.707 1136.33,684.707 1136.89,684.707 1137.45,684.707 1138.01,684.707 1138.57,684.707 1139.13,684.707 1139.68,684.707 1140.24,684.707 1140.8,684.707 1141.36,684.707 1141.92,684.707 1142.48,684.707 1143.04,684.707 1143.6,684.707 1144.16,684.707 1144.72,684.707 1145.28,684.707 1145.84,684.707 1146.4,684.707 1146.96,684.707 1147.51,684.707 1148.07,684.707 1148.63,684.707 1149.19,684.707 1149.75,684.707 1150.31,684.707 1150.87,684.707 1151.43,684.707 1151.99,684.707 1152.55,684.707 1153.11,684.707 1153.67,684.707 1154.23,684.707 1154.78,684.707 1155.34,684.707 1155.9,684.707 1156.46,684.707 1157.02,684.707 1157.58,684.707 1158.14,684.707 1158.7,684.707 1159.26,684.707 1159.82,684.707 1160.38,684.707 1160.94,684.707 1161.5,684.707 1162.05,684.707 1162.61,684.707 1163.17,684.707 1163.73,684.707 1164.29,684.707 1164.85,684.707 1165.41,684.707 1165.97,684.707 1166.53,684.707 1167.09,684.707 1167.65,684.707 1168.21,684.707 1168.77,684.707 1169.33,684.707 1169.88,684.707 1170.44,684.707 1171,684.707 1171.56,684.707 1172.12,684.707 1172.68,684.707 1173.24,684.707 1173.8,684.707 1174.36,684.707 1174.92,684.707 1175.48,684.707 1176.04,684.707 1176.6,684.707 1177.15,684.707 1177.71,684.707 1178.27,684.707 1178.83,684.707 1179.39,684.707 1179.95,684.707 1180.51,684.707 1181.07,684.707 1181.63,684.707 1182.19,684.707 1182.75,684.707 1183.31,684.707 1183.87,684.707 1184.43,684.707 1184.98,684.707 1185.54,684.707 1186.1,684.707 1186.66,684.707 1187.22,684.707 1187.78,684.707 1188.34,684.707 1188.9,684.707 1189.46,684.707 1190.02,684.707 1190.58,684.707 1191.14,684.707 1191.7,684.707 1192.25,684.707 1192.81,684.707 1193.37,684.707 1193.93,684.707 1194.49,684.707 1195.05,684.707 1195.61,684.707 1196.17,684.707 1196.73,684.707 1197.29,684.707 1197.85,684.707 1198.41,684.707 1198.97,684.707 1199.52,684.707 1200.08,684.707 1200.64,684.707 1201.2,684.707 1201.76,684.707 1202.32,684.707 1202.88,684.707 1203.44,684.707 1204,684.707 1204.56,684.707 1205.12,684.707 1205.68,684.707 1206.24,684.707 1206.8,684.707 1207.35,684.707 1207.91,684.707 1208.47,684.707 1209.03,684.707 1209.59,684.707 1210.15,684.707 1210.71,684.707 1211.27,684.707 1211.83,684.707 1212.39,684.707 1212.95,684.707 1213.51,684.707 1214.07,684.707 1214.62,684.707 1215.18,684.707 1215.74,684.707 1216.3,684.707 1216.86,684.707 1217.42,684.707 1217.98,684.707 1218.54,684.707 1219.1,684.707 1219.66,684.707 1220.22,684.707 1220.78,684.707 1221.34,684.707 1221.89,684.707 1222.45,684.707 1223.01,684.707 1223.57,684.707 1224.13,684.707 1224.69,684.707 1225.25,684.707 1225.81,684.707 1226.37,684.707 1226.93,684.707 1227.49,684.707 1228.05,684.707 1228.61,684.707 1229.17,684.707 1229.72,684.707 1230.28,684.707 1230.84,684.707 1231.4,684.707 1231.96,684.707 1232.52,684.707 1233.08,684.707 1233.64,684.707 1234.2,684.707 1234.76,684.707 1235.32,684.707 1235.88,684.707 1236.44,684.707 1236.99,684.707 1237.55,684.707 1238.11,684.707 1238.67,684.707 1239.23,684.707 1239.79,684.707 1240.35,684.707 1240.91,684.707 1241.47,684.707 1242.03,684.707 1242.59,684.707 1243.15,684.707 1243.71,684.707 1244.26,684.707 1244.82,684.707 1245.38,684.707 1245.94,684.707 1246.5,684.707 1247.06,684.707 1247.62,684.707 1248.18,684.707 1248.74,684.707 1249.3,684.707 1249.86,684.707 1250.42,684.707 1250.98,684.707 1251.54,684.707 1252.09,684.707 1252.65,684.707 1253.21,684.707 1253.77,684.707 1254.33,684.707 1254.89,684.707 1255.45,684.707 1256.01,684.707 1256.57,684.707 1257.13,684.707 1257.69,684.707 1258.25,684.707 1258.81,684.707 1259.36,684.707 1259.92,684.707 1260.48,684.707 1261.04,684.707 1261.6,684.707 1262.16,684.707 1262.72,684.707 1263.28,684.707 1263.84,684.707 1264.4,684.707 1264.96,684.707 1265.52,684.707 1266.08,684.707 1266.63,684.707 1267.19,684.707 1267.75,684.707 1268.31,684.707 1268.87,684.707 1269.43,684.707 1269.99,684.707 1270.55,684.707 1271.11,684.707 1271.67,684.707 1272.23,684.707 1272.79,684.707 1273.35,684.707 1273.91,684.707 1274.46,684.707 1275.02,684.707 1275.58,684.707 1276.14,684.707 1276.7,684.707 1277.26,684.707 1277.82,684.707 1278.38,684.707 1278.94,684.707 1279.5,684.707 1280.06,684.707 1280.62,684.707 1281.18,684.707 1281.73,684.707 1282.29,684.707 1282.85,684.707 1283.41,684.707 1283.97,684.707 1284.53,684.707 1285.09,684.707 1285.65,684.707 1286.21,684.707 1286.77,684.707 1287.33,684.707 1287.89,684.707 1288.45,684.707 1289,684.707 1289.56,684.707 1290.12,684.707 1290.68,684.707 1291.24,684.707 1291.8,684.707 1292.36,684.707 1292.92,684.707 1293.48,684.707 1294.04,684.707 1294.6,684.707 1295.16,684.707 1295.72,684.707 1296.28,684.707 1296.83,684.707 1297.39,684.707 1297.95,684.707 1298.51,684.707 1299.07,684.707 1299.63,684.707 1300.19,684.707 1300.75,684.707 1301.31,684.707 1301.87,684.707 1302.43,684.707 1302.99,684.707 1303.55,684.707 1304.1,684.707 1304.66,684.707 1305.22,684.707 1305.78,684.707 1306.34,684.707 1306.9,684.707 1307.46,684.707 1308.02,684.707 1308.58,684.707 1309.14,684.707 1309.7,684.707 1310.26,684.707 1310.82,684.707 1311.38,684.707 1311.93,684.707 1312.49,684.707 1313.05,684.707 1313.61,684.707 1314.17,684.707 1314.73,684.707 1315.29,684.707 1315.85,684.707 1316.41,684.707 1316.97,684.707 1317.53,684.707 1318.09,684.707 1318.65,684.707 1319.2,684.707 1319.76,684.707 1320.32,684.707 1320.88,684.707 1321.44,684.707 1322,684.707 1322.56,684.707 1323.12,684.707 1323.68,684.707 1324.24,684.707 1324.8,684.707 1325.36,684.707 1325.92,684.707 1326.47,684.707 1327.03,684.707 1327.59,684.707 1328.15,684.707 1328.71,684.707 1329.27,684.707 1329.83,684.707 1330.39,684.707 1330.95,684.707 1331.51,684.707 1332.07,684.707 1332.63,684.707 1333.19,684.707 1333.75,684.707 1334.3,684.707 1334.86,684.707 1335.42,684.707 1335.98,684.707 1336.54,684.707 1337.1,684.707 1337.66,684.707 1338.22,684.707 1338.78,684.707 1339.34,684.707 1339.9,684.707 1340.46,684.707 1341.02,684.707 1341.57,684.707 1342.13,684.707 1342.69,684.707 1343.25,684.707 1343.81,684.707 1344.37,684.707 1344.93,684.707 1345.49,684.707 1346.05,684.707 1346.61,684.707 1347.17,684.707 1347.73,684.707 1348.29,684.707 1348.84,684.707 1349.4,684.707 1349.96,684.707 1350.52,684.707 1351.08,684.707 1351.64,684.707 1352.2,684.707 1352.76,684.707 1353.32,684.707 1353.88,684.707 1354.44,684.707 1355,684.707 1355.56,684.707 1356.12,684.707 1356.67,684.707 1357.23,684.707 1357.79,684.707 1358.35,684.707 1358.91,684.707 1359.47,684.707 1360.03,684.707 1360.59,684.707 1361.15,684.707 1361.71,684.707 1362.27,684.707 1362.83,684.707 1363.39,684.707 1363.94,684.707 1364.5,684.707 1365.06,684.707 1365.62,684.707 1366.18,684.707 1366.74,684.707 1367.3,684.707 1367.86,684.707 1368.42,684.707 1368.98,684.707 1369.54,684.707 1370.1,684.707 1370.66,684.707 1371.21,684.707 1371.77,684.707 1372.33,684.707 1372.89,684.707 1373.45,684.707 1374.01,684.707 1374.57,684.707 1375.13,684.707 1375.69,684.707 1376.25,684.707 1376.81,684.707 1377.37,684.707 1377.93,684.707 1378.49,684.707 1379.04,684.707 1379.6,684.707 1380.16,684.707 1380.72,684.707 1381.28,684.707 1381.84,684.707 1382.4,684.707 1382.96,684.707 1383.52,684.707 1384.08,684.707 1384.64,684.707 1385.2,684.707 1385.76,684.707 1386.31,684.707 1386.87,684.707 1387.43,684.707 1387.99,684.707 1388.55,684.707 1389.11,684.707 1389.67,684.707 1390.23,684.707 1390.79,684.707 1391.35,684.707 1391.91,684.707 1392.47,684.707 1393.03,684.707 1393.58,684.707 1394.14,684.707 1394.7,684.707 1395.26,684.707 1395.82,684.707 1396.38,684.707 1396.94,684.707 1397.5,684.707 1398.06,684.707 1398.62,684.707 1399.18,684.707 1399.74,684.707 1400.3,684.707 1400.86,684.707 1401.41,684.707 1401.97,684.707 1402.53,684.707 1403.09,684.707 1403.65,684.707 1404.21,684.707 1404.77,684.707 1405.33,684.707 1405.89,684.707 1406.45,684.707 1407.01,684.707 1407.57,684.707 1408.13,684.707 1408.68,684.707 1409.24,684.707 1409.8,684.707 1410.36,684.707 1410.92,684.707 1411.48,684.707 1412.04,684.707 1412.6,684.707 1413.16,684.707 1413.72,684.707 1414.28,684.707 1414.84,684.707 1415.4,684.707 1415.95,684.707 1416.51,684.707 1417.07,684.707 1417.63,684.707 1418.19,684.707 1418.75,684.707 1419.31,684.707 1419.87,684.707 1420.43,684.707 1420.99,684.707 1421.55,684.707 1422.11,684.707 1422.67,684.707 1423.23,684.707 1423.78,684.707 1424.34,684.707 1424.9,684.707 1425.46,684.707 1426.02,684.707 1426.58,684.707 1427.14,684.707 1427.7,684.707 1428.26,684.707 1428.82,684.707 1429.38,684.707 1429.94,684.707 1430.5,684.707 1431.05,684.707 1431.61,684.707 1432.17,684.707 1432.73,684.707 1433.29,684.707 1433.85,684.707 1434.41,684.707 1434.97,684.707 1435.53,684.707 1436.09,684.707 1436.65,684.707 1437.21,684.707 1437.77,684.707 1438.33,684.707 1438.88,684.707 1439.44,684.707 1440,684.707 1440.56,684.707 1441.12,684.707 1441.68,684.707 1442.24,684.707 1442.8,684.707 1443.36,684.707 1443.92,684.707 1444.48,684.707 1445.04,684.707 1445.6,684.707 1446.15,684.707 1446.71,684.707 1447.27,684.707 1447.83,684.707 1448.39,684.707 1448.95,684.707 1449.51,684.707 1450.07,684.707 1450.63,684.707 1451.19,684.707 1451.75,684.707 1452.31,684.707 1452.87,684.707 1453.42,684.707 1453.98,684.707 1454.54,684.707 1455.1,684.707 1455.66,684.707 1456.22,684.707 1456.78,684.707 1457.34,684.707 1457.9,684.707 1458.46,684.707 1459.02,684.707 1459.58,684.707 1460.14,684.707 1460.7,684.707 1461.25,684.707 1461.81,684.707 1462.37,684.707 1462.93,684.707 1463.49,684.707 1464.05,684.707 1464.61,684.707 1465.17,684.707 1465.73,684.707 1466.29,684.707 1466.85,684.707 1467.41,684.707 1467.97,684.707 1468.52,684.707 1469.08,684.707 1469.64,684.707 1470.2,684.707 1470.76,684.707 1471.32,684.707 1471.88,684.707 1472.44,684.707 1473,684.707 1473.56,684.707 1474.12,684.707 1474.68,684.707 1475.24,684.707 1475.79,684.707 1476.35,684.707 1476.91,684.707 1477.47,684.707 1478.03,684.707 1478.59,684.707 1479.15,684.707 1479.71,684.707 1480.27,684.707 1480.83,684.707 1481.39,684.707 1481.95,684.707 1482.51,684.707 1483.07,684.707 1483.62,684.707 1484.18,684.707 1484.74,684.707 1485.3,684.707 1485.86,684.707 1486.42,684.707 1486.98,684.707 1487.54,684.707 1488.1,684.707 1488.66,684.707 1489.22,684.707 1489.78,684.707 1490.34,684.707 1490.89,684.707 1491.45,684.707 1492.01,684.707 1492.57,684.707 1493.13,684.707 1493.69,684.707 1494.25,684.707 1494.81,684.707 1495.37,684.707 1495.93,684.707 1496.49,684.707 1497.05,684.707 1497.61,684.707 1498.16,684.707 1498.72,684.707 1499.28,684.707 1499.84,684.707 1500.4,684.707 1500.96,684.707 1501.52,684.707 1502.08,684.707 1502.64,684.707 1503.2,684.707 1503.76,684.707 1504.32,684.707 1504.88,684.707 1505.44,684.707 1505.99,684.707 1506.55,684.707 1507.11,684.707 1507.67,684.707 1508.23,684.707 1508.79,684.707 1509.35,684.707 1509.91,684.707 1510.47,684.707 1511.03,684.707 1511.59,684.707 1512.15,684.707 1512.71,684.707 1513.26,684.707 1513.82,684.707 1514.38,684.707 1514.94,684.707 1515.5,684.707 1516.06,684.707 1516.62,684.707 1517.18,684.707 1517.74,684.707 1518.3,684.707 1518.86,684.707 1519.42,684.707 1519.98,684.707 1520.53,684.707 1521.09,684.707 1521.65,684.707 1522.21,684.707 1522.77,684.707 1523.33,684.707 1523.89,684.707 1524.45,684.707 1525.01,684.707 1525.57,684.707 1526.13,684.707 1526.69,684.707 1527.25,684.707 1527.81,684.707 1528.36,684.707 1528.92,684.707 1529.48,684.707 1530.04,684.707 1530.6,684.707 1531.16,684.707 1531.72,684.707 1532.28,684.707 1532.84,684.707 1533.4,684.707 1533.96,684.707 1534.52,684.707 1535.08,684.707 1535.63,684.707 1536.19,684.707 1536.75,684.707 1537.31,684.707 1537.87,684.707 1538.43,684.707 1538.99,684.707 1539.55,684.707 1540.11,684.707 1540.67,684.707 1541.23,684.707 1541.79,684.707 1542.35,684.707 1542.9,684.707 1543.46,684.707 1544.02,684.707 1544.58,684.707 1545.14,684.707 1545.7,684.707 1546.26,684.707 1546.82,684.707 1547.38,684.707 1547.94,684.707 1548.5,684.707 1549.06,684.707 1549.62,684.707 1550.18,684.707 1550.73,684.707 1551.29,684.707 1551.85,684.707 1552.41,684.707 1552.97,684.707 1553.53,684.707 1554.09,684.707 1554.65,684.707 1555.21,684.707 1555.77,684.707 1556.33,684.707 1556.89,684.707 1557.45,684.707 1558,684.707 1558.56,684.707 1559.12,684.707 1559.68,684.707 1560.24,684.707 1560.8,684.707 1561.36,684.707 1561.92,684.707 1562.48,684.707 1563.04,684.707 1563.6,684.707 1564.16,684.707 1564.72,684.707 1565.28,684.707 1565.83,684.707 1566.39,684.707 1566.95,684.707 1567.51,684.707 1568.07,684.707 1568.63,684.707 1569.19,684.707 1569.75,684.707 1570.31,684.707 1570.87,684.707 1571.43,684.707 1571.99,684.707 1572.55,684.707 1573.1,684.707 1573.66,684.707 1574.22,684.707 1574.78,684.707 1575.34,684.707 1575.9,684.707 1576.46,684.707 1577.02,684.707 1577.58,684.707 1578.14,684.707 1578.7,684.707 1579.26,684.707 1579.82,684.707 1580.37,684.707 1580.93,684.707 1581.49,684.707 1582.05,684.707 1582.61,684.707 1583.17,684.707 1583.73,684.707 1584.29,684.707 1584.85,684.707 1585.41,684.707 1585.97,684.707 1586.53,684.707 1587.09,684.707 1587.65,684.707 1588.2,684.707 1588.76,684.707 1589.32,684.707 1589.88,684.707 1590.44,684.707 1591,684.707 1591.56,684.707 1592.12,684.707 1592.68,684.707 1593.24,684.707 1593.8,684.707 1594.36,684.707 1594.92,684.707 1595.47,684.707 1596.03,684.707 1596.59,684.707 1597.15,684.707 1597.71,684.707 1598.27,684.707 1598.83,684.707 1599.39,684.707 1599.95,684.707 1600.51,684.707 1601.07,684.707 1601.63,684.707 1602.19,684.707 1602.74,684.707 1603.3,684.707 1603.86,684.707 1604.42,684.707 1604.98,684.707 1605.54,684.707 1606.1,684.707 1606.66,684.707 1607.22,684.707 1607.78,684.707 1608.34,684.707 1608.9,684.707 1609.46,684.707 1610.02,684.707 1610.57,684.707 1611.13,684.707 1611.69,684.707 1612.25,684.707 1612.81,684.707 1613.37,684.707 1613.93,684.707 1614.49,684.707 1615.05,684.707 1615.61,684.707 1616.17,684.707 1616.73,684.707 1617.29,684.707 1617.84,684.707 1618.4,684.707 1618.96,684.707 1619.52,684.707 1620.08,684.707 1620.64,684.707 1621.2,684.707 1621.76,684.707 1622.32,684.707 1622.88,684.707 1623.44,684.707 1624,684.707 1624.56,684.707 1625.11,684.707 1625.67,684.707 1626.23,684.707 1626.79,684.707 1627.35,684.707 1627.91,684.707 1628.47,684.707 1629.03,684.707 1629.59,684.707 1630.15,684.707 1630.71,684.707 1631.27,684.707 1631.83,684.707 1632.39,684.707 1632.94,684.707 1633.5,684.707 1634.06,684.707 1634.62,684.707 1635.18,684.707 1635.74,684.707 1636.3,684.707 1636.86,684.707 1637.42,684.707 1637.98,684.707 1638.54,684.707 1639.1,684.707 1639.66,684.707 1640.21,684.707 1640.77,684.707 1641.33,684.707 1641.89,684.707 1642.45,684.707 1643.01,684.707 1643.57,684.707 1644.13,684.707 1644.69,684.707 1645.25,684.707 1645.81,684.707 1646.37,684.707 1646.93,684.707 1647.48,684.707 1648.04,684.707 1648.6,684.707 1649.16,684.707 1649.72,684.707 1650.28,684.707 1650.84,684.707 1651.4,684.707 1651.96,684.707 1652.52,684.707 1653.08,684.707 1653.64,684.707 1654.2,684.707 1654.76,684.707 1655.31,684.707 1655.87,684.707 1656.43,684.707 1656.99,684.707 1657.55,684.707 1658.11,684.707 1658.67,684.707 1659.23,684.707 1659.79,684.707 1660.35,684.707 1660.91,684.707 1661.47,684.707 1662.03,684.707 1662.58,684.707 1663.14,684.707 1663.7,684.707 1664.26,684.707 1664.82,684.707 1665.38,684.707 1665.94,684.707 1666.5,684.707 1667.06,684.707 1667.62,684.707 1668.18,684.707 1668.74,684.707 1669.3,684.707 1669.85,684.707 1670.41,684.707 1670.97,684.707 1671.53,684.707 1672.09,684.707 1672.65,684.707 1673.21,684.707 1673.77,684.707 1674.33,684.707 1674.89,684.707 1675.45,684.707 1676.01,684.707 1676.57,684.707 1677.13,684.707 1677.68,684.707 1678.24,684.707 1678.8,684.707 1679.36,684.707 1679.92,684.707 1680.48,684.707 1681.04,684.707 1681.6,684.707 1682.16,684.707 1682.72,684.707 1683.28,684.707 1683.84,684.707 1684.4,684.707 1684.95,684.707 1685.51,684.707 1686.07,684.707 1686.63,684.707 1687.19,684.707 1687.75,684.707 1688.31,684.707 1688.87,684.707 1689.43,684.707 1689.99,684.707 1690.55,684.707 1691.11,684.707 1691.67,684.707 1692.23,684.707 1692.78,684.707 1693.34,684.707 1693.9,684.707 1694.46,684.707 1695.02,684.707 1695.58,684.707 1696.14,684.707 1696.7,684.707 1697.26,684.707 1697.82,684.707 1698.38,684.707 1698.94,684.707 1699.5,684.707 1700.05,684.707 1700.61,684.707 1701.17,684.707 1701.73,684.707 1702.29,684.707 1702.85,684.707 1703.41,684.707 1703.97,684.707 1704.53,684.707 1705.09,684.707 1705.65,684.707 1706.21,684.707 1706.77,684.707 1707.32,684.707 1707.88,684.707 1708.44,684.707 1709,684.707 1709.56,684.707 1710.12,684.707 1710.68,684.707 1711.24,684.707 1711.8,684.707 1712.36,684.707 1712.92,684.707 1713.48,684.707 1714.04,684.707 1714.6,684.707 1715.15,684.707 1715.71,684.707 1716.27,684.707 1716.83,684.707 1717.39,684.707 1717.95,684.707 1718.51,684.707 1719.07,684.707 1719.63,684.707 1720.19,684.707 1720.75,684.707 1721.31,684.707 1721.87,684.707 1722.42,684.707 1722.98,684.707 1723.54,684.707 1724.1,684.707 1724.66,684.707 1725.22,684.707 1725.78,684.707 1726.34,684.707 1726.9,684.707 1727.46,684.707 1728.02,684.707 1728.58,684.707 1729.14,684.707 1729.69,684.707 1730.25,684.707 1730.81,684.707 1731.37,684.707 1731.93,684.707 1732.49,684.707 1733.05,684.707 1733.61,684.707 1734.17,684.707 1734.73,684.707 1735.29,684.707 1735.85,684.707 1736.41,684.707 1736.97,684.707 1737.52,684.707 1738.08,684.707 1738.64,684.707 1739.2,684.707 1739.76,684.707 1740.32,684.707 1740.88,684.707 1741.44,684.707 1742,684.707 1742.56,684.707 1743.12,684.707 1743.68,684.707 1744.24,684.707 1744.79,684.707 1745.35,684.707 1745.91,684.707 1746.47,684.707 1747.03,684.707 1747.59,684.707 1748.15,684.707 1748.71,684.707 1749.27,684.707 1749.83,684.707 1750.39,684.707 1750.95,684.707 1751.51,684.707 1752.06,684.707 1752.62,684.707 1753.18,684.707 1753.74,684.707 1754.3,684.707 1754.86,684.707 1755.42,684.707 1755.98,684.707 1756.54,684.707 1757.1,684.707 1757.66,684.707 1758.22,684.707 1758.78,684.707 1759.34,684.707 1759.89,684.707 1760.45,684.707 1761.01,684.707 1761.57,684.707 1762.13,684.707 1762.69,684.707 1763.25,684.707 1763.81,684.707 1764.37,684.707 1764.93,684.707 1765.49,684.707 1766.05,684.707 1766.61,684.707 1767.16,684.707 1767.72,684.707 1768.28,684.707 1768.84,684.707 1769.4,684.707 1769.96,684.707 1770.52,684.707 1771.08,684.707 1771.64,684.707 1772.2,684.707 1772.76,684.707 1773.32,684.707 1773.88,684.707 1774.43,684.707 1774.99,684.707 1775.55,684.707 1776.11,684.707 1776.67,684.707 1777.23,684.707 1777.79,684.707 1778.35,684.707 1778.91,684.707 1779.47,684.707 1780.03,684.707 1780.59,684.707 1781.15,684.707 1781.71,684.707 1782.26,684.707 1782.82,684.707 1783.38,684.707 1783.94,684.707 1784.5,684.707 1785.06,684.707 1785.62,684.707 1786.18,684.707 1786.74,684.707 1787.3,684.707 1787.86,684.707 1788.42,684.707 1788.98,684.707 1789.53,684.707 1790.09,684.707 1790.65,684.707 1791.21,684.707 1791.77,684.707 1792.33,684.707 1792.89,684.707 1793.45,684.707 1794.01,684.707 1794.57,684.707 1795.13,684.707 1795.69,684.707 1796.25,684.707 1796.8,684.707 1797.36,684.707 1797.92,684.707 1798.48,684.707 1799.04,684.707 1799.6,684.707 1800.16,684.707 1800.72,684.707 1801.28,684.707 1801.84,684.707 1802.4,684.707 1802.96,684.707 1803.52,684.707 1804.08,684.707 1804.63,684.707 1805.19,684.707 1805.75,684.707 1806.31,684.707 1806.87,684.707 1807.43,684.707 1807.99,684.707 1808.55,684.707 1809.11,684.707 1809.67,684.707 1810.23,684.707 1810.79,684.707 1811.35,684.707 1811.9,684.707 1812.46,684.707 1813.02,684.707 1813.58,684.707 1814.14,684.707 1814.7,684.707 1815.26,684.707 1815.82,684.707 1816.38,684.707 1816.94,684.707 1817.5,684.707 1818.06,684.707 1818.62,684.707 1819.18,684.707 1819.73,684.707 1820.29,684.707 1820.85,684.707 1821.41,684.707 1821.97,684.707 1822.53,684.707 1823.09,684.707 1823.65,684.707 1824.21,684.707 1824.77,684.707 1825.33,684.707 1825.89,684.707 1826.45,684.707 1827,684.707 1827.56,684.707 1828.12,684.707 1828.68,684.707 1829.24,684.707 1829.8,684.707 1830.36,684.707 1830.92,684.707 1831.48,684.707 1832.04,684.707 1832.6,684.707 1833.16,684.707 1833.72,684.707 1834.27,684.707 1834.83,684.707 1835.39,684.707 1835.95,684.707 1836.51,684.707 1837.07,684.707 1837.63,684.707 1838.19,684.707 \"/>\n<path clip-path=\"url(#clip833)\" d=\"M720.247 685.165 L720.806 685.165 L721.365 685.165 L721.924 685.165 L722.484 685.165 L723.043 685.165 L723.602 685.165 L724.161 685.165 L724.721 685.165 L725.28 685.165 L725.839 685.165 L726.398 685.165 L726.958 685.165 L727.517 685.165 L728.076 685.165 L728.635 685.165 L729.195 685.165 L729.754 685.165 L730.313 685.165 L730.872 685.165 L731.432 685.165 L731.991 685.165 L732.55 685.165 L733.109 685.165 L733.669 685.165 L734.228 685.165 L734.787 685.165 L735.346 685.165 L735.906 685.165 L736.465 685.165 L737.024 685.165 L737.583 685.165 L738.143 685.165 L738.702 685.165 L739.261 685.165 L739.82 685.165 L740.38 685.165 L740.939 685.165 L741.498 685.165 L742.057 685.165 L742.617 685.165 L743.176 685.165 L743.735 685.165 L744.294 685.165 L744.854 685.165 L745.413 685.165 L745.972 685.165 L746.531 685.165 L747.091 685.165 L747.65 685.165 L748.209 685.165 L748.768 685.165 L749.328 685.165 L749.887 685.165 L750.446 685.165 L751.005 685.165 L751.565 685.165 L752.124 685.165 L752.683 685.165 L753.242 685.165 L753.802 685.165 L754.361 685.165 L754.92 685.165 L755.479 685.165 L756.039 685.165 L756.598 685.165 L757.157 685.165 L757.716 685.165 L758.276 685.165 L758.835 685.165 L759.394 685.165 L759.953 685.165 L760.513 685.165 L761.072 685.165 L761.631 685.165 L762.19 685.165 L762.75 685.165 L763.309 685.165 L763.868 685.165 L764.427 685.165 L764.987 685.165 L765.546 685.165 L766.105 685.165 L766.664 685.165 L767.224 685.165 L767.783 685.165 L768.342 685.165 L768.901 685.165 L769.461 685.165 L770.02 685.165 L770.579 685.165 L771.138 685.165 L771.698 685.165 L772.257 685.165 L772.816 685.165 L773.375 685.165 L773.935 685.165 L774.494 685.165 L775.053 685.165 L775.612 685.165 L776.172 685.165 L776.731 685.165 L777.29 685.165 L777.849 685.165 L778.409 685.165 L778.968 685.165 L779.527 685.165 L780.086 685.165 L780.646 685.165 L781.205 685.165 L781.764 685.165 L782.323 685.165 L782.883 685.165 L783.442 685.165 L784.001 685.165 L784.56 685.165 L785.12 685.165 L785.679 685.165 L786.238 685.165 L786.797 685.165 L787.357 685.165 L787.916 685.165 L788.475 685.165 L789.034 685.165 L789.594 685.165 L790.153 685.165 L790.712 685.165 L791.271 685.165 L791.831 685.165 L792.39 685.165 L792.949 685.165 L793.508 685.165 L794.068 685.165 L794.627 685.165 L795.186 685.165 L795.745 685.165 L796.305 685.165 L796.864 685.165 L797.423 685.165 L797.982 685.165 L798.542 685.165 L799.101 685.165 L799.66 685.165 L800.219 685.165 L800.779 685.165 L801.338 685.165 L801.897 685.165 L802.456 685.165 L803.016 685.165 L803.575 685.165 L804.134 685.165 L804.693 685.165 L805.253 685.165 L805.812 685.165 L806.371 685.165 L806.931 685.165 L807.49 685.165 L808.049 685.165 L808.608 685.165 L809.168 685.165 L809.727 685.165 L810.286 685.165 L810.845 685.165 L811.405 685.165 L811.964 685.165 L812.523 685.165 L813.082 685.165 L813.642 685.165 L814.201 685.165 L814.76 685.165 L815.319 685.165 L815.879 685.165 L816.438 685.165 L816.997 685.165 L817.556 685.165 L818.116 685.165 L818.675 685.165 L819.234 685.165 L819.793 685.165 L820.353 685.165 L820.912 685.165 L821.471 685.165 L822.03 685.165 L822.59 685.165 L823.149 685.165 L823.708 685.165 L824.267 685.165 L824.827 685.165 L825.386 685.165 L825.945 685.165 L826.504 685.165 L827.064 685.165 L827.623 685.165 L828.182 685.165 L828.741 685.165 L829.301 685.165 L829.86 685.165 L830.419 685.165 L830.978 685.165 L831.538 685.165 L832.097 685.165 L832.656 685.165 L833.215 685.165 L833.775 685.165 L834.334 685.165 L834.893 685.165 L835.452 685.165 L836.012 685.165 L836.571 685.165 L837.13 685.165 L837.689 685.165 L838.249 685.165 L838.808 685.165 L839.367 685.165 L839.926 685.165 L840.486 685.165 L841.045 685.165 L841.604 685.165 L842.163 685.165 L842.723 685.165 L843.282 685.165 L843.841 685.165 L844.4 685.165 L844.96 685.165 L845.519 685.165 L846.078 685.165 L846.637 685.165 L847.197 685.165 L847.756 685.165 L848.315 685.165 L848.874 685.165 L849.434 685.165 L849.993 685.165 L850.552 685.165 L851.111 685.165 L851.671 685.165 L852.23 685.165 L852.789 685.165 L853.348 685.165 L853.908 685.165 L854.467 685.165 L855.026 685.165 L855.585 685.165 L856.145 685.165 L856.704 685.165 L857.263 685.165 L857.822 685.165 L858.382 685.165 L858.941 685.165 L859.5 685.165 L860.059 685.165 L860.619 685.165 L861.178 685.165 L861.737 685.165 L862.296 685.165 L862.856 685.165 L863.415 685.165 L863.974 685.165 L864.533 685.165 L865.093 685.165 L865.652 685.165 L866.211 685.165 L866.77 685.165 L867.33 685.165 L867.889 685.165 L868.448 685.165 L869.007 685.165 L869.567 685.165 L870.126 685.165 L870.685 685.165 L871.244 685.165 L871.804 685.165 L872.363 685.165 L872.922 685.165 L873.481 685.165 L874.041 685.165 L874.6 685.165 L875.159 685.165 L875.718 685.165 L876.278 685.165 L876.837 685.165 L877.396 685.165 L877.955 685.165 L878.515 685.165 L879.074 685.165 L879.633 685.165 L880.192 685.165 L880.752 685.165 L881.311 685.165 L881.87 685.165 L882.429 685.165 L882.989 685.165 L883.548 685.165 L884.107 685.165 L884.666 685.165 L885.226 685.165 L885.785 685.165 L886.344 685.165 L886.903 685.165 L887.463 685.165 L888.022 685.165 L888.581 685.165 L889.14 685.165 L889.7 685.165 L890.259 685.165 L890.818 685.165 L891.377 685.165 L891.937 685.165 L892.496 685.165 L893.055 685.165 L893.614 685.165 L894.174 685.165 L894.733 685.165 L895.292 685.165 L895.851 685.165 L896.411 685.165 L896.97 685.165 L897.529 685.165 L898.088 685.165 L898.648 685.165 L899.207 685.165 L899.766 685.165 L900.325 685.165 L900.885 685.165 L901.444 685.165 L902.003 685.165 L902.562 685.165 L903.122 685.165 L903.681 685.165 L904.24 685.165 L904.799 685.165 L905.359 685.165 L905.918 685.165 L906.477 685.165 L907.036 685.165 L907.596 685.165 L908.155 685.165 L908.714 685.165 L909.273 685.165 L909.833 685.165 L910.392 685.165 L910.951 685.165 L911.51 685.165 L912.07 685.165 L912.629 685.165 L913.188 685.165 L913.747 685.165 L914.307 685.165 L914.866 685.165 L915.425 685.165 L915.984 685.165 L916.544 685.165 L917.103 685.165 L917.662 685.165 L918.221 685.165 L918.781 685.165 L919.34 685.165 L919.899 685.165 L920.458 685.165 L921.018 685.165 L921.577 685.165 L922.136 685.165 L922.695 685.165 L923.255 685.165 L923.814 685.165 L924.373 685.165 L924.932 685.165 L925.492 685.165 L926.051 685.165 L926.61 685.165 L927.169 685.165 L927.729 685.165 L928.288 685.165 L928.847 685.165 L929.406 685.165 L929.966 685.165 L930.525 685.165 L931.084 685.165 L931.644 685.165 L932.203 685.165 L932.762 685.165 L933.321 685.165 L933.881 685.165 L934.44 685.165 L934.999 685.165 L935.558 685.165 L936.118 685.165 L936.677 685.165 L937.236 685.165 L937.795 685.165 L938.355 685.165 L938.914 685.165 L939.473 685.165 L940.032 685.165 L940.592 685.165 L941.151 685.165 L941.71 685.165 L942.269 685.165 L942.829 685.165 L943.388 685.165 L943.947 685.165 L944.506 685.165 L945.066 685.165 L945.625 685.165 L946.184 685.165 L946.743 685.165 L947.303 685.165 L947.862 685.165 L948.421 685.165 L948.98 685.165 L949.54 685.165 L950.099 685.165 L950.658 685.165 L951.217 685.165 L951.777 685.165 L952.336 685.165 L952.895 685.165 L953.454 685.165 L954.014 685.165 L954.573 685.165 L955.132 685.165 L955.691 685.165 L956.251 685.165 L956.81 685.165 L957.369 685.165 L957.928 685.165 L958.488 685.165 L959.047 685.165 L959.606 685.165 L960.165 685.165 L960.725 685.165 L961.284 685.165 L961.843 685.165 L962.402 685.165 L962.962 685.165 L963.521 685.165 L964.08 685.165 L964.639 685.165 L965.199 685.165 L965.758 685.165 L966.317 685.165 L966.876 685.165 L967.436 685.165 L967.995 685.165 L968.554 685.165 L969.113 685.165 L969.673 685.165 L970.232 685.165 L970.791 685.165 L971.35 685.165 L971.91 685.165 L972.469 685.165 L973.028 685.165 L973.587 685.165 L974.147 685.165 L974.706 685.165 L975.265 685.165 L975.824 685.165 L976.384 685.165 L976.943 685.165 L977.502 685.165 L978.061 685.165 L978.621 685.165 L979.18 685.165 L979.739 685.165 L980.298 685.165 L980.858 685.165 L981.417 685.165 L981.976 685.165 L982.535 685.165 L983.095 685.165 L983.654 685.165 L984.213 685.165 L984.772 685.165 L985.332 685.165 L985.891 685.165 L986.45 685.165 L987.009 685.165 L987.569 685.165 L988.128 685.165 L988.687 685.165 L989.246 685.165 L989.806 685.165 L990.365 685.165 L990.924 685.165 L991.483 685.165 L992.043 685.165 L992.602 685.165 L993.161 685.165 L993.72 685.165 L994.28 685.165 L994.839 685.165 L995.398 685.165 L995.957 685.165 L996.517 685.165 L997.076 685.165 L997.635 685.165 L998.194 685.165 L998.754 685.165 L999.313 685.165 L999.872 685.165 L1000.43 685.165 L1000.99 685.165 L1001.55 685.165 L1002.11 685.165 L1002.67 685.165 L1003.23 685.165 L1003.79 685.165 L1004.35 685.165 L1004.91 685.165 L1005.46 685.165 L1006.02 685.165 L1006.58 685.165 L1007.14 685.165 L1007.7 685.165 L1008.26 685.165 L1008.82 685.165 L1009.38 685.165 L1009.94 685.165 L1010.5 685.165 L1011.06 685.165 L1011.62 685.165 L1012.18 685.165 L1012.73 685.165 L1013.29 685.165 L1013.85 685.165 L1014.41 685.165 L1014.97 685.165 L1015.53 685.165 L1016.09 685.165 L1016.65 685.165 L1017.21 685.165 L1017.77 685.165 L1018.33 685.165 L1018.89 685.165 L1019.45 685.165 L1020.01 685.165 L1020.56 685.165 L1021.12 685.165 L1021.68 685.165 L1022.24 685.165 L1022.8 685.165 L1023.36 685.165 L1023.92 685.165 L1024.48 685.165 L1025.04 685.165 L1025.6 685.165 L1026.16 685.165 L1026.72 685.165 L1027.28 685.165 L1027.83 685.165 L1028.39 685.165 L1028.95 685.165 L1029.51 685.165 L1030.07 685.165 L1030.63 685.165 L1031.19 685.165 L1031.75 685.165 L1032.31 685.165 L1032.87 685.165 L1033.43 685.165 L1033.99 685.165 L1034.55 685.165 L1035.1 685.165 L1035.66 685.165 L1036.22 685.165 L1036.78 685.165 L1037.34 685.165 L1037.9 685.165 L1038.46 685.165 L1039.02 685.165 L1039.58 685.165 L1040.14 685.165 L1040.7 685.165 L1041.26 685.165 L1041.82 685.165 L1042.38 685.165 L1042.93 685.165 L1043.49 685.165 L1044.05 685.165 L1044.61 685.165 L1045.17 685.165 L1045.73 685.165 L1046.29 685.165 L1046.85 685.165 L1047.41 685.165 L1047.97 685.165 L1048.53 685.165 L1049.09 685.165 L1049.65 685.165 L1050.2 685.165 L1050.76 685.165 L1051.32 685.165 L1051.88 685.165 L1052.44 685.165 L1053 685.165 L1053.56 685.165 L1054.12 685.165 L1054.68 685.165 L1055.24 685.165 L1055.8 685.165 L1056.36 685.165 L1056.92 685.165 L1057.48 685.165 L1058.03 685.165 L1058.59 685.165 L1059.15 685.165 L1059.71 685.165 L1060.27 685.165 L1060.83 685.165 L1061.39 685.165 L1061.95 685.165 L1062.51 685.165 L1063.07 685.165 L1063.63 685.165 L1064.19 685.165 L1064.75 685.165 L1065.3 685.165 L1065.86 685.165 L1066.42 685.165 L1066.98 685.165 L1067.54 685.165 L1068.1 685.165 L1068.66 685.165 L1069.22 685.165 L1069.78 685.165 L1070.34 685.165 L1070.9 685.165 L1071.46 685.165 L1072.02 685.165 L1072.57 685.165 L1073.13 685.165 L1073.69 685.165 L1074.25 685.165 L1074.81 685.165 L1075.37 685.165 L1075.93 685.165 L1076.49 685.165 L1077.05 685.165 L1077.61 685.165 L1078.17 685.165 L1078.73 685.165 L1079.29 685.165 L1079.85 685.165 L1080.4 685.165 L1080.96 685.165 L1081.52 685.165 L1082.08 685.165 L1082.64 685.165 L1083.2 685.165 L1083.76 685.165 L1084.32 685.165 L1084.88 685.165 L1085.44 685.165 L1086 685.165 L1086.56 685.165 L1087.12 685.165 L1087.67 685.165 L1088.23 685.165 L1088.79 685.165 L1089.35 685.165 L1089.91 685.165 L1090.47 685.165 L1091.03 685.165 L1091.59 685.165 L1092.15 685.165 L1092.71 685.165 L1093.27 685.165 L1093.83 685.165 L1094.39 685.165 L1094.94 685.165 L1095.5 685.165 L1096.06 685.165 L1096.62 685.165 L1097.18 685.165 L1097.74 685.165 L1098.3 685.165 L1098.86 685.165 L1099.42 685.165 L1099.98 685.165 L1100.54 685.165 L1101.1 685.165 L1101.66 685.165 L1102.22 685.165 L1102.77 685.165 L1103.33 685.165 L1103.89 685.165 L1104.45 685.165 L1105.01 685.165 L1105.57 685.165 L1106.13 685.165 L1106.69 685.165 L1107.25 685.165 L1107.81 685.165 L1108.37 685.165 L1108.93 685.165 L1109.49 685.165 L1110.04 685.165 L1110.6 685.165 L1111.16 685.165 L1111.72 685.165 L1112.28 685.165 L1112.84 685.165 L1113.4 685.165 L1113.96 685.165 L1114.52 685.165 L1115.08 685.165 L1115.64 685.165 L1116.2 685.165 L1116.76 685.165 L1117.31 685.165 L1117.87 685.165 L1118.43 685.165 L1118.99 685.165 L1119.55 685.165 L1120.11 685.165 L1120.67 685.165 L1121.23 685.165 L1121.79 685.165 L1122.35 685.165 L1122.91 685.165 L1123.47 685.165 L1124.03 685.165 L1124.59 685.165 L1125.14 685.165 L1125.7 685.165 L1126.26 685.165 L1126.82 685.165 L1127.38 685.165 L1127.94 685.165 L1128.5 685.165 L1129.06 685.165 L1129.62 685.165 L1130.18 685.165 L1130.74 685.165 L1131.3 685.165 L1131.86 685.165 L1132.41 685.165 L1132.97 685.165 L1133.53 685.165 L1134.09 685.165 L1134.65 685.165 L1135.21 685.165 L1135.77 685.165 L1136.33 685.165 L1136.89 685.165 L1137.45 685.165 L1138.01 685.165 L1138.57 685.165 L1139.13 685.165 L1139.68 685.165 L1140.24 685.165 L1140.8 685.165 L1141.36 685.165 L1141.92 685.165 L1142.48 685.165 L1143.04 685.165 L1143.6 685.165 L1144.16 685.165 L1144.72 685.165 L1145.28 685.165 L1145.84 685.165 L1146.4 685.165 L1146.96 685.165 L1147.51 685.165 L1148.07 685.165 L1148.63 685.165 L1149.19 685.165 L1149.75 685.165 L1150.31 685.165 L1150.87 685.165 L1151.43 685.165 L1151.99 685.165 L1152.55 685.165 L1153.11 685.165 L1153.67 685.165 L1154.23 685.165 L1154.78 685.165 L1155.34 685.165 L1155.9 685.165 L1156.46 685.165 L1157.02 685.165 L1157.58 685.165 L1158.14 685.165 L1158.7 685.165 L1159.26 685.165 L1159.82 685.165 L1160.38 685.165 L1160.94 685.165 L1161.5 685.165 L1162.05 685.165 L1162.61 685.165 L1163.17 685.165 L1163.73 685.165 L1164.29 685.165 L1164.85 685.165 L1165.41 685.165 L1165.97 685.165 L1166.53 685.165 L1167.09 685.165 L1167.65 685.165 L1168.21 685.165 L1168.77 685.165 L1169.33 685.165 L1169.88 685.165 L1170.44 685.165 L1171 685.165 L1171.56 685.165 L1172.12 685.165 L1172.68 685.165 L1173.24 685.165 L1173.8 685.165 L1174.36 685.165 L1174.92 685.165 L1175.48 685.165 L1176.04 685.165 L1176.6 685.165 L1177.15 685.165 L1177.71 685.165 L1178.27 685.165 L1178.83 685.165 L1179.39 685.165 L1179.95 685.165 L1180.51 685.165 L1181.07 685.165 L1181.63 685.165 L1182.19 685.165 L1182.75 685.165 L1183.31 685.165 L1183.87 685.165 L1184.43 685.165 L1184.98 685.165 L1185.54 685.165 L1186.1 685.165 L1186.66 685.165 L1187.22 685.165 L1187.78 685.165 L1188.34 685.165 L1188.9 685.165 L1189.46 685.165 L1190.02 685.165 L1190.58 685.165 L1191.14 685.165 L1191.7 685.165 L1192.25 685.165 L1192.81 685.165 L1193.37 685.165 L1193.93 685.165 L1194.49 685.165 L1195.05 685.165 L1195.61 685.165 L1196.17 685.165 L1196.73 685.165 L1197.29 685.165 L1197.85 685.165 L1198.41 685.165 L1198.97 685.165 L1199.52 685.165 L1200.08 685.165 L1200.64 685.165 L1201.2 685.165 L1201.76 685.165 L1202.32 685.165 L1202.88 685.165 L1203.44 685.165 L1204 685.165 L1204.56 685.165 L1205.12 685.165 L1205.68 685.165 L1206.24 685.165 L1206.8 685.165 L1207.35 685.165 L1207.91 685.165 L1208.47 685.165 L1209.03 685.165 L1209.59 685.165 L1210.15 685.165 L1210.71 685.165 L1211.27 685.165 L1211.83 685.165 L1212.39 685.165 L1212.95 685.165 L1213.51 685.165 L1214.07 685.165 L1214.62 685.165 L1215.18 685.165 L1215.74 685.165 L1216.3 685.165 L1216.86 685.165 L1217.42 685.165 L1217.98 685.165 L1218.54 685.165 L1219.1 685.165 L1219.66 685.165 L1220.22 685.165 L1220.78 685.165 L1221.34 685.165 L1221.89 685.165 L1222.45 685.165 L1223.01 685.165 L1223.57 685.165 L1224.13 685.165 L1224.69 685.165 L1225.25 685.165 L1225.81 685.165 L1226.37 685.165 L1226.93 685.165 L1227.49 685.165 L1228.05 685.165 L1228.61 685.165 L1229.17 685.165 L1229.72 685.165 L1230.28 685.165 L1230.84 685.165 L1231.4 685.165 L1231.96 685.165 L1232.52 685.165 L1233.08 685.165 L1233.64 685.165 L1234.2 685.165 L1234.76 685.165 L1235.32 685.165 L1235.88 685.165 L1236.44 685.165 L1236.99 685.165 L1237.55 685.165 L1238.11 685.165 L1238.67 685.165 L1239.23 685.165 L1239.79 685.165 L1240.35 685.165 L1240.91 685.165 L1241.47 685.165 L1242.03 685.165 L1242.59 685.165 L1243.15 685.165 L1243.71 685.165 L1244.26 685.165 L1244.82 685.165 L1245.38 685.165 L1245.94 685.165 L1246.5 685.165 L1247.06 685.165 L1247.62 685.165 L1248.18 685.165 L1248.74 685.165 L1249.3 685.165 L1249.86 685.165 L1250.42 685.165 L1250.98 685.165 L1251.54 685.165 L1252.09 685.165 L1252.65 685.165 L1253.21 685.165 L1253.77 685.165 L1254.33 685.165 L1254.89 685.165 L1255.45 685.165 L1256.01 685.165 L1256.57 685.165 L1257.13 685.165 L1257.69 685.165 L1258.25 685.165 L1258.81 685.165 L1259.36 685.165 L1259.92 685.165 L1260.48 685.165 L1261.04 685.165 L1261.6 685.165 L1262.16 685.165 L1262.72 685.165 L1263.28 685.165 L1263.84 685.165 L1264.4 685.165 L1264.96 685.165 L1265.52 685.165 L1266.08 685.165 L1266.63 685.165 L1267.19 685.165 L1267.75 685.165 L1268.31 685.165 L1268.87 685.165 L1269.43 685.165 L1269.99 685.165 L1270.55 685.165 L1271.11 685.165 L1271.67 685.165 L1272.23 685.165 L1272.79 685.165 L1273.35 685.165 L1273.91 685.165 L1274.46 685.165 L1275.02 685.165 L1275.58 685.165 L1276.14 685.165 L1276.7 685.165 L1277.26 685.165 L1277.82 685.165 L1278.38 685.165 L1278.94 685.165 L1279.5 685.165 L1280.06 685.165 L1280.62 685.165 L1281.18 685.165 L1281.73 685.165 L1282.29 685.165 L1282.85 685.165 L1283.41 685.165 L1283.97 685.165 L1284.53 685.165 L1285.09 685.165 L1285.65 685.165 L1286.21 685.165 L1286.77 685.165 L1287.33 685.165 L1287.89 685.165 L1288.45 685.165 L1289 685.165 L1289.56 685.165 L1290.12 685.165 L1290.68 685.165 L1291.24 685.165 L1291.8 685.165 L1292.36 685.165 L1292.92 685.165 L1293.48 685.165 L1294.04 685.165 L1294.6 685.165 L1295.16 685.165 L1295.72 685.165 L1296.28 685.165 L1296.83 685.165 L1297.39 685.165 L1297.95 685.165 L1298.51 685.165 L1299.07 685.165 L1299.63 685.165 L1300.19 685.165 L1300.75 685.165 L1301.31 685.165 L1301.87 685.165 L1302.43 685.165 L1302.99 685.165 L1303.55 685.165 L1304.1 685.165 L1304.66 685.165 L1305.22 685.165 L1305.78 685.165 L1306.34 685.165 L1306.9 685.165 L1307.46 685.165 L1308.02 685.165 L1308.58 685.165 L1309.14 685.165 L1309.7 685.165 L1310.26 685.165 L1310.82 685.165 L1311.38 685.165 L1311.93 685.165 L1312.49 685.165 L1313.05 685.165 L1313.61 685.165 L1314.17 685.165 L1314.73 685.165 L1315.29 685.165 L1315.85 685.165 L1316.41 685.165 L1316.97 685.165 L1317.53 685.165 L1318.09 685.165 L1318.65 685.165 L1319.2 685.165 L1319.76 685.165 L1320.32 685.165 L1320.88 685.165 L1321.44 685.165 L1322 685.165 L1322.56 685.165 L1323.12 685.165 L1323.68 685.165 L1324.24 685.165 L1324.8 685.165 L1325.36 685.165 L1325.92 685.165 L1326.47 685.165 L1327.03 685.165 L1327.59 685.165 L1328.15 685.165 L1328.71 685.165 L1329.27 685.165 L1329.83 685.165 L1330.39 685.165 L1330.95 685.165 L1331.51 685.165 L1332.07 685.165 L1332.63 685.165 L1333.19 685.165 L1333.75 685.165 L1334.3 685.165 L1334.86 685.165 L1335.42 685.165 L1335.98 685.165 L1336.54 685.165 L1337.1 685.165 L1337.66 685.165 L1338.22 685.165 L1338.78 685.165 L1339.34 685.165 L1339.9 685.165 L1340.46 685.165 L1341.02 685.165 L1341.57 685.165 L1342.13 685.165 L1342.69 685.165 L1343.25 685.165 L1343.81 685.165 L1344.37 685.165 L1344.93 685.165 L1345.49 685.165 L1346.05 685.165 L1346.61 685.165 L1347.17 685.165 L1347.73 685.165 L1348.29 685.165 L1348.84 685.165 L1349.4 685.165 L1349.96 685.165 L1350.52 685.165 L1351.08 685.165 L1351.64 685.165 L1352.2 685.165 L1352.76 685.165 L1353.32 685.165 L1353.88 685.165 L1354.44 685.165 L1355 685.165 L1355.56 685.165 L1356.12 685.165 L1356.67 685.165 L1357.23 685.165 L1357.79 685.165 L1358.35 685.165 L1358.91 685.165 L1359.47 685.165 L1360.03 685.165 L1360.59 685.165 L1361.15 685.165 L1361.71 685.165 L1362.27 685.165 L1362.83 685.165 L1363.39 685.165 L1363.94 685.165 L1364.5 685.165 L1365.06 685.165 L1365.62 685.165 L1366.18 685.165 L1366.74 685.165 L1367.3 685.165 L1367.86 685.165 L1368.42 685.165 L1368.98 685.165 L1369.54 685.165 L1370.1 685.165 L1370.66 685.165 L1371.21 685.165 L1371.77 685.165 L1372.33 685.165 L1372.89 685.165 L1373.45 685.165 L1374.01 685.165 L1374.57 685.165 L1375.13 685.165 L1375.69 685.165 L1376.25 685.165 L1376.81 685.165 L1377.37 685.165 L1377.93 685.165 L1378.49 685.165 L1379.04 685.165 L1379.6 685.165 L1380.16 685.165 L1380.72 685.165 L1381.28 685.165 L1381.84 685.165 L1382.4 685.165 L1382.96 685.165 L1383.52 685.165 L1384.08 685.165 L1384.64 685.165 L1385.2 685.165 L1385.76 685.165 L1386.31 685.165 L1386.87 685.165 L1387.43 685.165 L1387.99 685.165 L1388.55 685.165 L1389.11 685.165 L1389.67 685.165 L1390.23 685.165 L1390.79 685.165 L1391.35 685.165 L1391.91 685.165 L1392.47 685.165 L1393.03 685.165 L1393.58 685.165 L1394.14 685.165 L1394.7 685.165 L1395.26 685.165 L1395.82 685.165 L1396.38 685.165 L1396.94 685.165 L1397.5 685.165 L1398.06 685.165 L1398.62 685.165 L1399.18 685.165 L1399.74 685.165 L1400.3 685.165 L1400.86 685.165 L1401.41 685.165 L1401.97 685.165 L1402.53 685.165 L1403.09 685.165 L1403.65 685.165 L1404.21 685.165 L1404.77 685.165 L1405.33 685.165 L1405.89 685.165 L1406.45 685.165 L1407.01 685.165 L1407.57 685.165 L1408.13 685.165 L1408.68 685.165 L1409.24 685.165 L1409.8 685.165 L1410.36 685.165 L1410.92 685.165 L1411.48 685.165 L1412.04 685.165 L1412.6 685.165 L1413.16 685.165 L1413.72 685.165 L1414.28 685.165 L1414.84 685.165 L1415.4 685.165 L1415.95 685.165 L1416.51 685.165 L1417.07 685.165 L1417.63 685.165 L1418.19 685.165 L1418.75 685.165 L1419.31 685.165 L1419.87 685.165 L1420.43 685.165 L1420.99 685.165 L1421.55 685.165 L1422.11 685.165 L1422.67 685.165 L1423.23 685.165 L1423.78 685.165 L1424.34 685.165 L1424.9 685.165 L1425.46 685.165 L1426.02 685.165 L1426.58 685.165 L1427.14 685.165 L1427.7 685.165 L1428.26 685.165 L1428.82 685.165 L1429.38 685.165 L1429.94 685.165 L1430.5 685.165 L1431.05 685.165 L1431.61 685.165 L1432.17 685.165 L1432.73 685.165 L1433.29 685.165 L1433.85 685.165 L1434.41 685.165 L1434.97 685.165 L1435.53 685.165 L1436.09 685.165 L1436.65 685.165 L1437.21 685.165 L1437.77 685.165 L1438.33 685.165 L1438.88 685.165 L1439.44 685.165 L1440 685.165 L1440.56 685.165 L1441.12 685.165 L1441.68 685.165 L1442.24 685.165 L1442.8 685.165 L1443.36 685.165 L1443.92 685.165 L1444.48 685.165 L1445.04 685.165 L1445.6 685.165 L1446.15 685.165 L1446.71 685.165 L1447.27 685.165 L1447.83 685.165 L1448.39 685.165 L1448.95 685.165 L1449.51 685.165 L1450.07 685.165 L1450.63 685.165 L1451.19 685.165 L1451.75 685.165 L1452.31 685.165 L1452.87 685.165 L1453.42 685.165 L1453.98 685.165 L1454.54 685.165 L1455.1 685.165 L1455.66 685.165 L1456.22 685.165 L1456.78 685.165 L1457.34 685.165 L1457.9 685.165 L1458.46 685.165 L1459.02 685.165 L1459.58 685.165 L1460.14 685.165 L1460.7 685.165 L1461.25 685.165 L1461.81 685.165 L1462.37 685.165 L1462.93 685.165 L1463.49 685.165 L1464.05 685.165 L1464.61 685.165 L1465.17 685.165 L1465.73 685.165 L1466.29 685.165 L1466.85 685.165 L1467.41 685.165 L1467.97 685.165 L1468.52 685.165 L1469.08 685.165 L1469.64 685.165 L1470.2 685.165 L1470.76 685.165 L1471.32 685.165 L1471.88 685.165 L1472.44 685.165 L1473 685.165 L1473.56 685.165 L1474.12 685.165 L1474.68 685.165 L1475.24 685.165 L1475.79 685.165 L1476.35 685.165 L1476.91 685.165 L1477.47 685.165 L1478.03 685.165 L1478.59 685.165 L1479.15 685.165 L1479.71 685.165 L1480.27 685.165 L1480.83 685.165 L1481.39 685.165 L1481.95 685.165 L1482.51 685.165 L1483.07 685.165 L1483.62 685.165 L1484.18 685.165 L1484.74 685.165 L1485.3 685.165 L1485.86 685.165 L1486.42 685.165 L1486.98 685.165 L1487.54 685.165 L1488.1 685.165 L1488.66 685.165 L1489.22 685.165 L1489.78 685.165 L1490.34 685.165 L1490.89 685.165 L1491.45 685.165 L1492.01 685.165 L1492.57 685.165 L1493.13 685.165 L1493.69 685.165 L1494.25 685.165 L1494.81 685.165 L1495.37 685.165 L1495.93 685.165 L1496.49 685.165 L1497.05 685.165 L1497.61 685.165 L1498.16 685.165 L1498.72 685.165 L1499.28 685.165 L1499.84 685.165 L1500.4 685.165 L1500.96 685.165 L1501.52 685.165 L1502.08 685.165 L1502.64 685.165 L1503.2 685.165 L1503.76 685.165 L1504.32 685.165 L1504.88 685.165 L1505.44 685.165 L1505.99 685.165 L1506.55 685.165 L1507.11 685.165 L1507.67 685.165 L1508.23 685.165 L1508.79 685.165 L1509.35 685.165 L1509.91 685.165 L1510.47 685.165 L1511.03 685.165 L1511.59 685.165 L1512.15 685.165 L1512.71 685.165 L1513.26 685.165 L1513.82 685.165 L1514.38 685.165 L1514.94 685.165 L1515.5 685.165 L1516.06 685.165 L1516.62 685.165 L1517.18 685.165 L1517.74 685.165 L1518.3 685.165 L1518.86 685.165 L1519.42 685.165 L1519.98 685.165 L1520.53 685.165 L1521.09 685.165 L1521.65 685.165 L1522.21 685.165 L1522.77 685.165 L1523.33 685.165 L1523.89 685.165 L1524.45 685.165 L1525.01 685.165 L1525.57 685.165 L1526.13 685.165 L1526.69 685.165 L1527.25 685.165 L1527.81 685.165 L1528.36 685.165 L1528.92 685.165 L1529.48 685.165 L1530.04 685.165 L1530.6 685.165 L1531.16 685.165 L1531.72 685.165 L1532.28 685.165 L1532.84 685.165 L1533.4 685.165 L1533.96 685.165 L1534.52 685.165 L1535.08 685.165 L1535.63 685.165 L1536.19 685.165 L1536.75 685.165 L1537.31 685.165 L1537.87 685.165 L1538.43 685.165 L1538.99 685.165 L1539.55 685.165 L1540.11 685.165 L1540.67 685.165 L1541.23 685.165 L1541.79 685.165 L1542.35 685.165 L1542.9 685.165 L1543.46 685.165 L1544.02 685.165 L1544.58 685.165 L1545.14 685.165 L1545.7 685.165 L1546.26 685.165 L1546.82 685.165 L1547.38 685.165 L1547.94 685.165 L1548.5 685.165 L1549.06 685.165 L1549.62 685.165 L1550.18 685.165 L1550.73 685.165 L1551.29 685.165 L1551.85 685.165 L1552.41 685.165 L1552.97 685.165 L1553.53 685.165 L1554.09 685.165 L1554.65 685.165 L1555.21 685.165 L1555.77 685.165 L1556.33 685.165 L1556.89 685.165 L1557.45 685.165 L1558 685.165 L1558.56 685.165 L1559.12 685.165 L1559.68 685.165 L1560.24 685.165 L1560.8 685.165 L1561.36 685.165 L1561.92 685.165 L1562.48 685.165 L1563.04 685.165 L1563.6 685.165 L1564.16 685.165 L1564.72 685.165 L1565.28 685.165 L1565.83 685.165 L1566.39 685.165 L1566.95 685.165 L1567.51 685.165 L1568.07 685.165 L1568.63 685.165 L1569.19 685.165 L1569.75 685.165 L1570.31 685.165 L1570.87 685.165 L1571.43 685.165 L1571.99 685.165 L1572.55 685.165 L1573.1 685.165 L1573.66 685.165 L1574.22 685.165 L1574.78 685.165 L1575.34 685.165 L1575.9 685.165 L1576.46 685.165 L1577.02 685.165 L1577.58 685.165 L1578.14 685.165 L1578.7 685.165 L1579.26 685.165 L1579.82 685.165 L1580.37 685.165 L1580.93 685.165 L1581.49 685.165 L1582.05 685.165 L1582.61 685.165 L1583.17 685.165 L1583.73 685.165 L1584.29 685.165 L1584.85 685.165 L1585.41 685.165 L1585.97 685.165 L1586.53 685.165 L1587.09 685.165 L1587.65 685.165 L1588.2 685.165 L1588.76 685.165 L1589.32 685.165 L1589.88 685.165 L1590.44 685.165 L1591 685.165 L1591.56 685.165 L1592.12 685.165 L1592.68 685.165 L1593.24 685.165 L1593.8 685.165 L1594.36 685.165 L1594.92 685.165 L1595.47 685.165 L1596.03 685.165 L1596.59 685.165 L1597.15 685.165 L1597.71 685.165 L1598.27 685.165 L1598.83 685.165 L1599.39 685.165 L1599.95 685.165 L1600.51 685.165 L1601.07 685.165 L1601.63 685.165 L1602.19 685.165 L1602.74 685.165 L1603.3 685.165 L1603.86 685.165 L1604.42 685.165 L1604.98 685.165 L1605.54 685.165 L1606.1 685.165 L1606.66 685.165 L1607.22 685.165 L1607.78 685.165 L1608.34 685.165 L1608.9 685.165 L1609.46 685.165 L1610.02 685.165 L1610.57 685.165 L1611.13 685.165 L1611.69 685.165 L1612.25 685.165 L1612.81 685.165 L1613.37 685.165 L1613.93 685.165 L1614.49 685.165 L1615.05 685.165 L1615.61 685.165 L1616.17 685.165 L1616.73 685.165 L1617.29 685.165 L1617.84 685.165 L1618.4 685.165 L1618.96 685.165 L1619.52 685.165 L1620.08 685.165 L1620.64 685.165 L1621.2 685.165 L1621.76 685.165 L1622.32 685.165 L1622.88 685.165 L1623.44 685.165 L1624 685.165 L1624.56 685.165 L1625.11 685.165 L1625.67 685.165 L1626.23 685.165 L1626.79 685.165 L1627.35 685.165 L1627.91 685.165 L1628.47 685.165 L1629.03 685.165 L1629.59 685.165 L1630.15 685.165 L1630.71 685.165 L1631.27 685.165 L1631.83 685.165 L1632.39 685.165 L1632.94 685.165 L1633.5 685.165 L1634.06 685.165 L1634.62 685.165 L1635.18 685.165 L1635.74 685.165 L1636.3 685.165 L1636.86 685.165 L1637.42 685.165 L1637.98 685.165 L1638.54 685.165 L1639.1 685.165 L1639.66 685.165 L1640.21 685.165 L1640.77 685.165 L1641.33 685.165 L1641.89 685.165 L1642.45 685.165 L1643.01 685.165 L1643.57 685.165 L1644.13 685.165 L1644.69 685.165 L1645.25 685.165 L1645.81 685.165 L1646.37 685.165 L1646.93 685.165 L1647.48 685.165 L1648.04 685.165 L1648.6 685.165 L1649.16 685.165 L1649.72 685.165 L1650.28 685.165 L1650.84 685.165 L1651.4 685.165 L1651.96 685.165 L1652.52 685.165 L1653.08 685.165 L1653.64 685.165 L1654.2 685.165 L1654.76 685.165 L1655.31 685.165 L1655.87 685.165 L1656.43 685.165 L1656.99 685.165 L1657.55 685.165 L1658.11 685.165 L1658.67 685.165 L1659.23 685.165 L1659.79 685.165 L1660.35 685.165 L1660.91 685.165 L1661.47 685.165 L1662.03 685.165 L1662.58 685.165 L1663.14 685.165 L1663.7 685.165 L1664.26 685.165 L1664.82 685.165 L1665.38 685.165 L1665.94 685.165 L1666.5 685.165 L1667.06 685.165 L1667.62 685.165 L1668.18 685.165 L1668.74 685.165 L1669.3 685.165 L1669.85 685.165 L1670.41 685.165 L1670.97 685.165 L1671.53 685.165 L1672.09 685.165 L1672.65 685.165 L1673.21 685.165 L1673.77 685.165 L1674.33 685.165 L1674.89 685.165 L1675.45 685.165 L1676.01 685.165 L1676.57 685.165 L1677.13 685.165 L1677.68 685.165 L1678.24 685.165 L1678.8 685.165 L1679.36 685.165 L1679.92 685.165 L1680.48 685.165 L1681.04 685.165 L1681.6 685.165 L1682.16 685.165 L1682.72 685.165 L1683.28 685.165 L1683.84 685.165 L1684.4 685.165 L1684.95 685.165 L1685.51 685.165 L1686.07 685.165 L1686.63 685.165 L1687.19 685.165 L1687.75 685.165 L1688.31 685.165 L1688.87 685.165 L1689.43 685.165 L1689.99 685.165 L1690.55 685.165 L1691.11 685.165 L1691.67 685.165 L1692.23 685.165 L1692.78 685.165 L1693.34 685.165 L1693.9 685.165 L1694.46 685.165 L1695.02 685.165 L1695.58 685.165 L1696.14 685.165 L1696.7 685.165 L1697.26 685.165 L1697.82 685.165 L1698.38 685.165 L1698.94 685.165 L1699.5 685.165 L1700.05 685.165 L1700.61 685.165 L1701.17 685.165 L1701.73 685.165 L1702.29 685.165 L1702.85 685.165 L1703.41 685.165 L1703.97 685.165 L1704.53 685.165 L1705.09 685.165 L1705.65 685.165 L1706.21 685.165 L1706.77 685.165 L1707.32 685.165 L1707.88 685.165 L1708.44 685.165 L1709 685.165 L1709.56 685.165 L1710.12 685.165 L1710.68 685.165 L1711.24 685.165 L1711.8 685.165 L1712.36 685.165 L1712.92 685.165 L1713.48 685.165 L1714.04 685.165 L1714.6 685.165 L1715.15 685.165 L1715.71 685.165 L1716.27 685.165 L1716.83 685.165 L1717.39 685.165 L1717.95 685.165 L1718.51 685.165 L1719.07 685.165 L1719.63 685.165 L1720.19 685.165 L1720.75 685.165 L1721.31 685.165 L1721.87 685.165 L1722.42 685.165 L1722.98 685.165 L1723.54 685.165 L1724.1 685.165 L1724.66 685.165 L1725.22 685.165 L1725.78 685.165 L1726.34 685.165 L1726.9 685.165 L1727.46 685.165 L1728.02 685.165 L1728.58 685.165 L1729.14 685.165 L1729.69 685.165 L1730.25 685.165 L1730.81 685.165 L1731.37 685.165 L1731.93 685.165 L1732.49 685.165 L1733.05 685.165 L1733.61 685.165 L1734.17 685.165 L1734.73 685.165 L1735.29 685.165 L1735.85 685.165 L1736.41 685.165 L1736.97 685.165 L1737.52 685.165 L1738.08 685.165 L1738.64 685.165 L1739.2 685.165 L1739.76 685.165 L1740.32 685.165 L1740.88 685.165 L1741.44 685.165 L1742 685.165 L1742.56 685.165 L1743.12 685.165 L1743.68 685.165 L1744.24 685.165 L1744.79 685.165 L1745.35 685.165 L1745.91 685.165 L1746.47 685.165 L1747.03 685.165 L1747.59 685.165 L1748.15 685.165 L1748.71 685.165 L1749.27 685.165 L1749.83 685.165 L1750.39 685.165 L1750.95 685.165 L1751.51 685.165 L1752.06 685.165 L1752.62 685.165 L1753.18 685.165 L1753.74 685.165 L1754.3 685.165 L1754.86 685.165 L1755.42 685.165 L1755.98 685.165 L1756.54 685.165 L1757.1 685.165 L1757.66 685.165 L1758.22 685.165 L1758.78 685.165 L1759.34 685.165 L1759.89 685.165 L1760.45 685.165 L1761.01 685.165 L1761.57 685.165 L1762.13 685.165 L1762.69 685.165 L1763.25 685.165 L1763.81 685.165 L1764.37 685.165 L1764.93 685.165 L1765.49 685.165 L1766.05 685.165 L1766.61 685.165 L1767.16 685.165 L1767.72 685.165 L1768.28 685.165 L1768.84 685.165 L1769.4 685.165 L1769.96 685.165 L1770.52 685.165 L1771.08 685.165 L1771.64 685.165 L1772.2 685.165 L1772.76 685.165 L1773.32 685.165 L1773.88 685.165 L1774.43 685.165 L1774.99 685.165 L1775.55 685.165 L1776.11 685.165 L1776.67 685.165 L1777.23 685.165 L1777.79 685.165 L1778.35 685.165 L1778.91 685.165 L1779.47 685.165 L1780.03 685.165 L1780.59 685.165 L1781.15 685.165 L1781.71 685.165 L1782.26 685.165 L1782.82 685.165 L1783.38 685.165 L1783.94 685.165 L1784.5 685.165 L1785.06 685.165 L1785.62 685.165 L1786.18 685.165 L1786.74 685.165 L1787.3 685.165 L1787.86 685.165 L1788.42 685.165 L1788.98 685.165 L1789.53 685.165 L1790.09 685.165 L1790.65 685.165 L1791.21 685.165 L1791.77 685.165 L1792.33 685.165 L1792.89 685.165 L1793.45 685.165 L1794.01 685.165 L1794.57 685.165 L1795.13 685.165 L1795.69 685.165 L1796.25 685.165 L1796.8 685.165 L1797.36 685.165 L1797.92 685.165 L1798.48 685.165 L1799.04 685.165 L1799.6 685.165 L1800.16 685.165 L1800.72 685.165 L1801.28 685.165 L1801.84 685.165 L1802.4 685.165 L1802.96 685.165 L1803.52 685.165 L1804.08 685.165 L1804.63 685.165 L1805.19 685.165 L1805.75 685.165 L1806.31 685.165 L1806.87 685.165 L1807.43 685.165 L1807.99 685.165 L1808.55 685.165 L1809.11 685.165 L1809.67 685.165 L1810.23 685.165 L1810.79 685.165 L1811.35 685.165 L1811.9 685.165 L1812.46 685.165 L1813.02 685.165 L1813.58 685.165 L1814.14 685.165 L1814.7 685.165 L1815.26 685.165 L1815.82 685.165 L1816.38 685.165 L1816.94 685.165 L1817.5 685.165 L1818.06 685.165 L1818.62 685.165 L1819.18 685.165 L1819.73 685.165 L1820.29 685.165 L1820.85 685.165 L1821.41 685.165 L1821.97 685.165 L1822.53 685.165 L1823.09 685.165 L1823.65 685.165 L1824.21 685.165 L1824.77 685.165 L1825.33 685.165 L1825.89 685.165 L1826.45 685.165 L1827 685.165 L1827.56 685.165 L1828.12 685.165 L1828.68 685.165 L1829.24 685.165 L1829.8 685.165 L1830.36 685.165 L1830.92 685.165 L1831.48 685.165 L1832.04 685.165 L1832.6 685.165 L1833.16 685.165 L1833.72 685.165 L1834.27 685.165 L1834.83 685.165 L1835.39 685.165 L1835.95 685.165 L1836.51 685.165 L1837.07 685.165 L1837.63 685.165 L1838.19 685.165 L1838.19 682.902 L1837.63 682.902 L1837.07 682.902 L1836.51 682.902 L1835.95 682.902 L1835.39 682.902 L1834.83 682.902 L1834.27 682.902 L1833.72 682.902 L1833.16 682.902 L1832.6 682.902 L1832.04 682.902 L1831.48 682.902 L1830.92 682.902 L1830.36 682.902 L1829.8 682.902 L1829.24 682.902 L1828.68 682.902 L1828.12 682.902 L1827.56 682.902 L1827 682.902 L1826.45 682.902 L1825.89 682.902 L1825.33 682.902 L1824.77 682.902 L1824.21 682.902 L1823.65 682.902 L1823.09 682.902 L1822.53 682.902 L1821.97 682.902 L1821.41 682.902 L1820.85 682.902 L1820.29 682.902 L1819.73 682.902 L1819.18 682.902 L1818.62 682.902 L1818.06 682.902 L1817.5 682.902 L1816.94 682.902 L1816.38 682.902 L1815.82 682.902 L1815.26 682.902 L1814.7 682.902 L1814.14 682.902 L1813.58 682.902 L1813.02 682.902 L1812.46 682.902 L1811.9 682.902 L1811.35 682.902 L1810.79 682.902 L1810.23 682.902 L1809.67 682.902 L1809.11 682.902 L1808.55 682.902 L1807.99 682.902 L1807.43 682.902 L1806.87 682.902 L1806.31 682.902 L1805.75 682.902 L1805.19 682.902 L1804.63 682.902 L1804.08 682.902 L1803.52 682.902 L1802.96 682.902 L1802.4 682.902 L1801.84 682.902 L1801.28 682.902 L1800.72 682.902 L1800.16 682.902 L1799.6 682.902 L1799.04 682.902 L1798.48 682.902 L1797.92 682.902 L1797.36 682.902 L1796.8 682.902 L1796.25 682.902 L1795.69 682.902 L1795.13 682.902 L1794.57 682.902 L1794.01 682.902 L1793.45 682.902 L1792.89 682.902 L1792.33 682.902 L1791.77 682.902 L1791.21 682.902 L1790.65 682.902 L1790.09 682.902 L1789.53 682.902 L1788.98 682.902 L1788.42 682.902 L1787.86 682.902 L1787.3 682.902 L1786.74 682.902 L1786.18 682.902 L1785.62 682.902 L1785.06 682.902 L1784.5 682.902 L1783.94 682.902 L1783.38 682.902 L1782.82 682.902 L1782.26 682.902 L1781.71 682.902 L1781.15 682.902 L1780.59 682.902 L1780.03 682.902 L1779.47 682.902 L1778.91 682.902 L1778.35 682.902 L1777.79 682.902 L1777.23 682.902 L1776.67 682.902 L1776.11 682.902 L1775.55 682.902 L1774.99 682.902 L1774.43 682.902 L1773.88 682.902 L1773.32 682.902 L1772.76 682.902 L1772.2 682.902 L1771.64 682.902 L1771.08 682.902 L1770.52 682.902 L1769.96 682.902 L1769.4 682.902 L1768.84 682.902 L1768.28 682.902 L1767.72 682.902 L1767.16 682.902 L1766.61 682.902 L1766.05 682.902 L1765.49 682.902 L1764.93 682.902 L1764.37 682.902 L1763.81 682.902 L1763.25 682.902 L1762.69 682.902 L1762.13 682.902 L1761.57 682.902 L1761.01 682.902 L1760.45 682.902 L1759.89 682.902 L1759.34 682.902 L1758.78 682.902 L1758.22 682.902 L1757.66 682.902 L1757.1 682.902 L1756.54 682.902 L1755.98 682.902 L1755.42 682.902 L1754.86 682.902 L1754.3 682.902 L1753.74 682.902 L1753.18 682.902 L1752.62 682.902 L1752.06 682.902 L1751.51 682.902 L1750.95 682.902 L1750.39 682.902 L1749.83 682.902 L1749.27 682.902 L1748.71 682.902 L1748.15 682.902 L1747.59 682.902 L1747.03 682.902 L1746.47 682.902 L1745.91 682.902 L1745.35 682.902 L1744.79 682.902 L1744.24 682.902 L1743.68 682.902 L1743.12 682.902 L1742.56 682.902 L1742 682.902 L1741.44 682.902 L1740.88 682.902 L1740.32 682.902 L1739.76 682.902 L1739.2 682.902 L1738.64 682.902 L1738.08 682.902 L1737.52 682.902 L1736.97 682.902 L1736.41 682.902 L1735.85 682.902 L1735.29 682.902 L1734.73 682.902 L1734.17 682.902 L1733.61 682.902 L1733.05 682.902 L1732.49 682.902 L1731.93 682.902 L1731.37 682.902 L1730.81 682.902 L1730.25 682.902 L1729.69 682.902 L1729.14 682.902 L1728.58 682.902 L1728.02 682.902 L1727.46 682.902 L1726.9 682.902 L1726.34 682.902 L1725.78 682.902 L1725.22 682.902 L1724.66 682.902 L1724.1 682.902 L1723.54 682.902 L1722.98 682.902 L1722.42 682.902 L1721.87 682.902 L1721.31 682.902 L1720.75 682.902 L1720.19 682.902 L1719.63 682.902 L1719.07 682.902 L1718.51 682.902 L1717.95 682.902 L1717.39 682.902 L1716.83 682.902 L1716.27 682.902 L1715.71 682.902 L1715.15 682.902 L1714.6 682.902 L1714.04 682.902 L1713.48 682.902 L1712.92 682.902 L1712.36 682.902 L1711.8 682.902 L1711.24 682.902 L1710.68 682.902 L1710.12 682.902 L1709.56 682.902 L1709 682.902 L1708.44 682.902 L1707.88 682.902 L1707.32 682.902 L1706.77 682.902 L1706.21 682.902 L1705.65 682.902 L1705.09 682.902 L1704.53 682.902 L1703.97 682.902 L1703.41 682.902 L1702.85 682.902 L1702.29 682.902 L1701.73 682.902 L1701.17 682.902 L1700.61 682.902 L1700.05 682.902 L1699.5 682.902 L1698.94 682.902 L1698.38 682.902 L1697.82 682.902 L1697.26 682.902 L1696.7 682.902 L1696.14 682.902 L1695.58 682.902 L1695.02 682.902 L1694.46 682.902 L1693.9 682.902 L1693.34 682.902 L1692.78 682.902 L1692.23 682.902 L1691.67 682.902 L1691.11 682.902 L1690.55 682.902 L1689.99 682.902 L1689.43 682.902 L1688.87 682.902 L1688.31 682.902 L1687.75 682.902 L1687.19 682.902 L1686.63 682.902 L1686.07 682.902 L1685.51 682.902 L1684.95 682.902 L1684.4 682.902 L1683.84 682.902 L1683.28 682.902 L1682.72 682.902 L1682.16 682.902 L1681.6 682.902 L1681.04 682.902 L1680.48 682.902 L1679.92 682.902 L1679.36 682.902 L1678.8 682.902 L1678.24 682.902 L1677.68 682.902 L1677.13 682.902 L1676.57 682.902 L1676.01 682.902 L1675.45 682.902 L1674.89 682.902 L1674.33 682.902 L1673.77 682.902 L1673.21 682.902 L1672.65 682.902 L1672.09 682.902 L1671.53 682.902 L1670.97 682.902 L1670.41 682.902 L1669.85 682.902 L1669.3 682.902 L1668.74 682.902 L1668.18 682.902 L1667.62 682.902 L1667.06 682.902 L1666.5 682.902 L1665.94 682.902 L1665.38 682.902 L1664.82 682.902 L1664.26 682.902 L1663.7 682.902 L1663.14 682.902 L1662.58 682.902 L1662.03 682.902 L1661.47 682.902 L1660.91 682.902 L1660.35 682.902 L1659.79 682.902 L1659.23 682.902 L1658.67 682.902 L1658.11 682.902 L1657.55 682.902 L1656.99 682.902 L1656.43 682.902 L1655.87 682.902 L1655.31 682.902 L1654.76 682.902 L1654.2 682.902 L1653.64 682.902 L1653.08 682.902 L1652.52 682.902 L1651.96 682.902 L1651.4 682.902 L1650.84 682.902 L1650.28 682.902 L1649.72 682.902 L1649.16 682.902 L1648.6 682.902 L1648.04 682.902 L1647.48 682.902 L1646.93 682.902 L1646.37 682.902 L1645.81 682.902 L1645.25 682.902 L1644.69 682.902 L1644.13 682.902 L1643.57 682.902 L1643.01 682.902 L1642.45 682.902 L1641.89 682.902 L1641.33 682.902 L1640.77 682.902 L1640.21 682.902 L1639.66 682.902 L1639.1 682.902 L1638.54 682.902 L1637.98 682.902 L1637.42 682.902 L1636.86 682.902 L1636.3 682.902 L1635.74 682.902 L1635.18 682.902 L1634.62 682.902 L1634.06 682.902 L1633.5 682.902 L1632.94 682.902 L1632.39 682.902 L1631.83 682.902 L1631.27 682.902 L1630.71 682.902 L1630.15 682.902 L1629.59 682.902 L1629.03 682.902 L1628.47 682.902 L1627.91 682.902 L1627.35 682.902 L1626.79 682.902 L1626.23 682.902 L1625.67 682.902 L1625.11 682.902 L1624.56 682.902 L1624 682.902 L1623.44 682.902 L1622.88 682.902 L1622.32 682.902 L1621.76 682.902 L1621.2 682.902 L1620.64 682.902 L1620.08 682.902 L1619.52 682.902 L1618.96 682.902 L1618.4 682.902 L1617.84 682.902 L1617.29 682.902 L1616.73 682.902 L1616.17 682.902 L1615.61 682.902 L1615.05 682.902 L1614.49 682.902 L1613.93 682.902 L1613.37 682.902 L1612.81 682.902 L1612.25 682.902 L1611.69 682.902 L1611.13 682.902 L1610.57 682.902 L1610.02 682.902 L1609.46 682.902 L1608.9 682.902 L1608.34 682.902 L1607.78 682.902 L1607.22 682.902 L1606.66 682.902 L1606.1 682.902 L1605.54 682.902 L1604.98 682.902 L1604.42 682.902 L1603.86 682.902 L1603.3 682.902 L1602.74 682.902 L1602.19 682.902 L1601.63 682.902 L1601.07 682.902 L1600.51 682.902 L1599.95 682.902 L1599.39 682.902 L1598.83 682.902 L1598.27 682.902 L1597.71 682.902 L1597.15 682.902 L1596.59 682.902 L1596.03 682.902 L1595.47 682.902 L1594.92 682.902 L1594.36 682.902 L1593.8 682.902 L1593.24 682.902 L1592.68 682.902 L1592.12 682.902 L1591.56 682.902 L1591 682.902 L1590.44 682.902 L1589.88 682.902 L1589.32 682.902 L1588.76 682.902 L1588.2 682.902 L1587.65 682.902 L1587.09 682.902 L1586.53 682.902 L1585.97 682.902 L1585.41 682.902 L1584.85 682.902 L1584.29 682.902 L1583.73 682.902 L1583.17 682.902 L1582.61 682.902 L1582.05 682.902 L1581.49 682.902 L1580.93 682.902 L1580.37 682.902 L1579.82 682.902 L1579.26 682.902 L1578.7 682.902 L1578.14 682.902 L1577.58 682.902 L1577.02 682.902 L1576.46 682.902 L1575.9 682.902 L1575.34 682.902 L1574.78 682.902 L1574.22 682.902 L1573.66 682.902 L1573.1 682.902 L1572.55 682.902 L1571.99 682.902 L1571.43 682.902 L1570.87 682.902 L1570.31 682.902 L1569.75 682.902 L1569.19 682.902 L1568.63 682.902 L1568.07 682.902 L1567.51 682.902 L1566.95 682.902 L1566.39 682.902 L1565.83 682.902 L1565.28 682.902 L1564.72 682.902 L1564.16 682.902 L1563.6 682.902 L1563.04 682.902 L1562.48 682.902 L1561.92 682.902 L1561.36 682.902 L1560.8 682.902 L1560.24 682.902 L1559.68 682.902 L1559.12 682.902 L1558.56 682.902 L1558 682.902 L1557.45 682.902 L1556.89 682.902 L1556.33 682.902 L1555.77 682.902 L1555.21 682.902 L1554.65 682.902 L1554.09 682.902 L1553.53 682.902 L1552.97 682.902 L1552.41 682.902 L1551.85 682.902 L1551.29 682.902 L1550.73 682.902 L1550.18 682.902 L1549.62 682.902 L1549.06 682.902 L1548.5 682.902 L1547.94 682.902 L1547.38 682.902 L1546.82 682.902 L1546.26 682.902 L1545.7 682.902 L1545.14 682.902 L1544.58 682.902 L1544.02 682.902 L1543.46 682.902 L1542.9 682.902 L1542.35 682.902 L1541.79 682.902 L1541.23 682.902 L1540.67 682.902 L1540.11 682.902 L1539.55 682.902 L1538.99 682.902 L1538.43 682.902 L1537.87 682.902 L1537.31 682.902 L1536.75 682.902 L1536.19 682.902 L1535.63 682.902 L1535.08 682.902 L1534.52 682.902 L1533.96 682.902 L1533.4 682.902 L1532.84 682.902 L1532.28 682.902 L1531.72 682.902 L1531.16 682.902 L1530.6 682.902 L1530.04 682.902 L1529.48 682.902 L1528.92 682.902 L1528.36 682.902 L1527.81 682.902 L1527.25 682.902 L1526.69 682.902 L1526.13 682.902 L1525.57 682.902 L1525.01 682.902 L1524.45 682.902 L1523.89 682.902 L1523.33 682.902 L1522.77 682.902 L1522.21 682.902 L1521.65 682.902 L1521.09 682.902 L1520.53 682.902 L1519.98 682.902 L1519.42 682.902 L1518.86 682.902 L1518.3 682.902 L1517.74 682.902 L1517.18 682.902 L1516.62 682.902 L1516.06 682.902 L1515.5 682.902 L1514.94 682.902 L1514.38 682.902 L1513.82 682.902 L1513.26 682.902 L1512.71 682.902 L1512.15 682.902 L1511.59 682.902 L1511.03 682.902 L1510.47 682.902 L1509.91 682.902 L1509.35 682.902 L1508.79 682.902 L1508.23 682.902 L1507.67 682.902 L1507.11 682.902 L1506.55 682.902 L1505.99 682.902 L1505.44 682.902 L1504.88 682.902 L1504.32 682.902 L1503.76 682.902 L1503.2 682.902 L1502.64 682.902 L1502.08 682.902 L1501.52 682.902 L1500.96 682.902 L1500.4 682.902 L1499.84 682.902 L1499.28 682.902 L1498.72 682.902 L1498.16 682.902 L1497.61 682.902 L1497.05 682.902 L1496.49 682.902 L1495.93 682.902 L1495.37 682.902 L1494.81 682.902 L1494.25 682.902 L1493.69 682.902 L1493.13 682.902 L1492.57 682.902 L1492.01 682.902 L1491.45 682.902 L1490.89 682.902 L1490.34 682.902 L1489.78 682.902 L1489.22 682.902 L1488.66 682.902 L1488.1 682.902 L1487.54 682.902 L1486.98 682.902 L1486.42 682.902 L1485.86 682.902 L1485.3 682.902 L1484.74 682.902 L1484.18 682.902 L1483.62 682.902 L1483.07 682.902 L1482.51 682.902 L1481.95 682.902 L1481.39 682.902 L1480.83 682.902 L1480.27 682.902 L1479.71 682.902 L1479.15 682.902 L1478.59 682.902 L1478.03 682.902 L1477.47 682.902 L1476.91 682.902 L1476.35 682.902 L1475.79 682.902 L1475.24 682.902 L1474.68 682.902 L1474.12 682.902 L1473.56 682.902 L1473 682.902 L1472.44 682.902 L1471.88 682.902 L1471.32 682.902 L1470.76 682.902 L1470.2 682.902 L1469.64 682.902 L1469.08 682.902 L1468.52 682.902 L1467.97 682.902 L1467.41 682.902 L1466.85 682.902 L1466.29 682.902 L1465.73 682.902 L1465.17 682.902 L1464.61 682.902 L1464.05 682.902 L1463.49 682.902 L1462.93 682.902 L1462.37 682.902 L1461.81 682.902 L1461.25 682.902 L1460.7 682.902 L1460.14 682.902 L1459.58 682.902 L1459.02 682.902 L1458.46 682.902 L1457.9 682.902 L1457.34 682.902 L1456.78 682.902 L1456.22 682.902 L1455.66 682.902 L1455.1 682.902 L1454.54 682.902 L1453.98 682.902 L1453.42 682.902 L1452.87 682.902 L1452.31 682.902 L1451.75 682.902 L1451.19 682.902 L1450.63 682.902 L1450.07 682.902 L1449.51 682.902 L1448.95 682.902 L1448.39 682.902 L1447.83 682.902 L1447.27 682.902 L1446.71 682.902 L1446.15 682.902 L1445.6 682.902 L1445.04 682.902 L1444.48 682.902 L1443.92 682.902 L1443.36 682.902 L1442.8 682.902 L1442.24 682.902 L1441.68 682.902 L1441.12 682.902 L1440.56 682.902 L1440 682.902 L1439.44 682.902 L1438.88 682.902 L1438.33 682.902 L1437.77 682.902 L1437.21 682.902 L1436.65 682.902 L1436.09 682.902 L1435.53 682.902 L1434.97 682.902 L1434.41 682.902 L1433.85 682.902 L1433.29 682.902 L1432.73 682.902 L1432.17 682.902 L1431.61 682.902 L1431.05 682.902 L1430.5 682.902 L1429.94 682.902 L1429.38 682.902 L1428.82 682.902 L1428.26 682.902 L1427.7 682.902 L1427.14 682.902 L1426.58 682.902 L1426.02 682.902 L1425.46 682.902 L1424.9 682.902 L1424.34 682.902 L1423.78 682.902 L1423.23 682.902 L1422.67 682.902 L1422.11 682.902 L1421.55 682.902 L1420.99 682.902 L1420.43 682.902 L1419.87 682.902 L1419.31 682.902 L1418.75 682.902 L1418.19 682.902 L1417.63 682.902 L1417.07 682.902 L1416.51 682.902 L1415.95 682.902 L1415.4 682.902 L1414.84 682.902 L1414.28 682.902 L1413.72 682.902 L1413.16 682.902 L1412.6 682.902 L1412.04 682.902 L1411.48 682.902 L1410.92 682.902 L1410.36 682.902 L1409.8 682.902 L1409.24 682.902 L1408.68 682.902 L1408.13 682.902 L1407.57 682.902 L1407.01 682.902 L1406.45 682.902 L1405.89 682.902 L1405.33 682.902 L1404.77 682.902 L1404.21 682.902 L1403.65 682.902 L1403.09 682.902 L1402.53 682.902 L1401.97 682.902 L1401.41 682.902 L1400.86 682.902 L1400.3 682.902 L1399.74 682.902 L1399.18 682.902 L1398.62 682.902 L1398.06 682.902 L1397.5 682.902 L1396.94 682.902 L1396.38 682.902 L1395.82 682.902 L1395.26 682.902 L1394.7 682.902 L1394.14 682.902 L1393.58 682.902 L1393.03 682.902 L1392.47 682.902 L1391.91 682.902 L1391.35 682.902 L1390.79 682.902 L1390.23 682.902 L1389.67 682.902 L1389.11 682.902 L1388.55 682.902 L1387.99 682.902 L1387.43 682.902 L1386.87 682.902 L1386.31 682.902 L1385.76 682.902 L1385.2 682.902 L1384.64 682.902 L1384.08 682.902 L1383.52 682.902 L1382.96 682.902 L1382.4 682.902 L1381.84 682.902 L1381.28 682.902 L1380.72 682.902 L1380.16 682.902 L1379.6 682.902 L1379.04 682.902 L1378.49 682.902 L1377.93 682.902 L1377.37 682.902 L1376.81 682.902 L1376.25 682.902 L1375.69 682.902 L1375.13 682.902 L1374.57 682.902 L1374.01 682.902 L1373.45 682.902 L1372.89 682.902 L1372.33 682.902 L1371.77 682.902 L1371.21 682.902 L1370.66 682.902 L1370.1 682.902 L1369.54 682.902 L1368.98 682.902 L1368.42 682.902 L1367.86 682.902 L1367.3 682.902 L1366.74 682.902 L1366.18 682.902 L1365.62 682.902 L1365.06 682.902 L1364.5 682.902 L1363.94 682.902 L1363.39 682.902 L1362.83 682.902 L1362.27 682.902 L1361.71 682.902 L1361.15 682.902 L1360.59 682.902 L1360.03 682.902 L1359.47 682.902 L1358.91 682.902 L1358.35 682.902 L1357.79 682.902 L1357.23 682.902 L1356.67 682.902 L1356.12 682.902 L1355.56 682.902 L1355 682.902 L1354.44 682.902 L1353.88 682.902 L1353.32 682.902 L1352.76 682.902 L1352.2 682.902 L1351.64 682.902 L1351.08 682.902 L1350.52 682.902 L1349.96 682.902 L1349.4 682.902 L1348.84 682.902 L1348.29 682.902 L1347.73 682.902 L1347.17 682.902 L1346.61 682.902 L1346.05 682.902 L1345.49 682.902 L1344.93 682.902 L1344.37 682.902 L1343.81 682.902 L1343.25 682.902 L1342.69 682.902 L1342.13 682.902 L1341.57 682.902 L1341.02 682.902 L1340.46 682.902 L1339.9 682.902 L1339.34 682.902 L1338.78 682.902 L1338.22 682.902 L1337.66 682.902 L1337.1 682.902 L1336.54 682.902 L1335.98 682.902 L1335.42 682.902 L1334.86 682.902 L1334.3 682.902 L1333.75 682.902 L1333.19 682.902 L1332.63 682.902 L1332.07 682.902 L1331.51 682.902 L1330.95 682.902 L1330.39 682.902 L1329.83 682.902 L1329.27 682.902 L1328.71 682.902 L1328.15 682.902 L1327.59 682.902 L1327.03 682.902 L1326.47 682.902 L1325.92 682.902 L1325.36 682.902 L1324.8 682.902 L1324.24 682.902 L1323.68 682.902 L1323.12 682.902 L1322.56 682.902 L1322 682.902 L1321.44 682.902 L1320.88 682.902 L1320.32 682.902 L1319.76 682.902 L1319.2 682.902 L1318.65 682.902 L1318.09 682.902 L1317.53 682.902 L1316.97 682.902 L1316.41 682.902 L1315.85 682.902 L1315.29 682.902 L1314.73 682.902 L1314.17 682.902 L1313.61 682.902 L1313.05 682.902 L1312.49 682.902 L1311.93 682.902 L1311.38 682.902 L1310.82 682.902 L1310.26 682.902 L1309.7 682.902 L1309.14 682.902 L1308.58 682.902 L1308.02 682.902 L1307.46 682.902 L1306.9 682.902 L1306.34 682.902 L1305.78 682.902 L1305.22 682.902 L1304.66 682.902 L1304.1 682.902 L1303.55 682.902 L1302.99 682.902 L1302.43 682.902 L1301.87 682.902 L1301.31 682.902 L1300.75 682.902 L1300.19 682.902 L1299.63 682.902 L1299.07 682.902 L1298.51 682.902 L1297.95 682.902 L1297.39 682.902 L1296.83 682.902 L1296.28 682.902 L1295.72 682.902 L1295.16 682.902 L1294.6 682.902 L1294.04 682.902 L1293.48 682.902 L1292.92 682.902 L1292.36 682.902 L1291.8 682.902 L1291.24 682.902 L1290.68 682.902 L1290.12 682.902 L1289.56 682.902 L1289 682.902 L1288.45 682.902 L1287.89 682.902 L1287.33 682.902 L1286.77 682.902 L1286.21 682.902 L1285.65 682.902 L1285.09 682.902 L1284.53 682.902 L1283.97 682.902 L1283.41 682.902 L1282.85 682.902 L1282.29 682.902 L1281.73 682.902 L1281.18 682.902 L1280.62 682.902 L1280.06 682.902 L1279.5 682.902 L1278.94 682.902 L1278.38 682.902 L1277.82 682.902 L1277.26 682.902 L1276.7 682.902 L1276.14 682.902 L1275.58 682.902 L1275.02 682.902 L1274.46 682.902 L1273.91 682.902 L1273.35 682.902 L1272.79 682.902 L1272.23 682.902 L1271.67 682.902 L1271.11 682.902 L1270.55 682.902 L1269.99 682.902 L1269.43 682.902 L1268.87 682.902 L1268.31 682.902 L1267.75 682.902 L1267.19 682.902 L1266.63 682.902 L1266.08 682.902 L1265.52 682.902 L1264.96 682.902 L1264.4 682.902 L1263.84 682.902 L1263.28 682.902 L1262.72 682.902 L1262.16 682.902 L1261.6 682.902 L1261.04 682.902 L1260.48 682.902 L1259.92 682.902 L1259.36 682.902 L1258.81 682.902 L1258.25 682.902 L1257.69 682.902 L1257.13 682.902 L1256.57 682.902 L1256.01 682.902 L1255.45 682.902 L1254.89 682.902 L1254.33 682.902 L1253.77 682.902 L1253.21 682.902 L1252.65 682.902 L1252.09 682.902 L1251.54 682.902 L1250.98 682.902 L1250.42 682.902 L1249.86 682.902 L1249.3 682.902 L1248.74 682.902 L1248.18 682.902 L1247.62 682.902 L1247.06 682.902 L1246.5 682.902 L1245.94 682.902 L1245.38 682.902 L1244.82 682.902 L1244.26 682.902 L1243.71 682.902 L1243.15 682.902 L1242.59 682.902 L1242.03 682.902 L1241.47 682.902 L1240.91 682.902 L1240.35 682.902 L1239.79 682.902 L1239.23 682.902 L1238.67 682.902 L1238.11 682.902 L1237.55 682.902 L1236.99 682.902 L1236.44 682.902 L1235.88 682.902 L1235.32 682.902 L1234.76 682.902 L1234.2 682.902 L1233.64 682.902 L1233.08 682.902 L1232.52 682.902 L1231.96 682.902 L1231.4 682.902 L1230.84 682.902 L1230.28 682.902 L1229.72 682.902 L1229.17 682.902 L1228.61 682.902 L1228.05 682.902 L1227.49 682.902 L1226.93 682.902 L1226.37 682.902 L1225.81 682.902 L1225.25 682.902 L1224.69 682.902 L1224.13 682.902 L1223.57 682.902 L1223.01 682.902 L1222.45 682.902 L1221.89 682.902 L1221.34 682.902 L1220.78 682.902 L1220.22 682.902 L1219.66 682.902 L1219.1 682.902 L1218.54 682.902 L1217.98 682.902 L1217.42 682.902 L1216.86 682.902 L1216.3 682.902 L1215.74 682.902 L1215.18 682.902 L1214.62 682.902 L1214.07 682.902 L1213.51 682.902 L1212.95 682.902 L1212.39 682.902 L1211.83 682.902 L1211.27 682.902 L1210.71 682.902 L1210.15 682.902 L1209.59 682.902 L1209.03 682.902 L1208.47 682.902 L1207.91 682.902 L1207.35 682.902 L1206.8 682.902 L1206.24 682.902 L1205.68 682.902 L1205.12 682.902 L1204.56 682.902 L1204 682.902 L1203.44 682.902 L1202.88 682.902 L1202.32 682.902 L1201.76 682.902 L1201.2 682.902 L1200.64 682.902 L1200.08 682.902 L1199.52 682.902 L1198.97 682.902 L1198.41 682.902 L1197.85 682.902 L1197.29 682.902 L1196.73 682.902 L1196.17 682.902 L1195.61 682.902 L1195.05 682.902 L1194.49 682.902 L1193.93 682.902 L1193.37 682.902 L1192.81 682.902 L1192.25 682.902 L1191.7 682.902 L1191.14 682.902 L1190.58 682.902 L1190.02 682.902 L1189.46 682.902 L1188.9 682.902 L1188.34 682.902 L1187.78 682.902 L1187.22 682.902 L1186.66 682.902 L1186.1 682.902 L1185.54 682.902 L1184.98 682.902 L1184.43 682.902 L1183.87 682.902 L1183.31 682.902 L1182.75 682.902 L1182.19 682.902 L1181.63 682.902 L1181.07 682.902 L1180.51 682.902 L1179.95 682.902 L1179.39 682.902 L1178.83 682.902 L1178.27 682.902 L1177.71 682.902 L1177.15 682.902 L1176.6 682.902 L1176.04 682.902 L1175.48 682.902 L1174.92 682.902 L1174.36 682.902 L1173.8 682.902 L1173.24 682.902 L1172.68 682.902 L1172.12 682.902 L1171.56 682.902 L1171 682.902 L1170.44 682.902 L1169.88 682.902 L1169.33 682.902 L1168.77 682.902 L1168.21 682.902 L1167.65 682.902 L1167.09 682.902 L1166.53 682.902 L1165.97 682.902 L1165.41 682.902 L1164.85 682.902 L1164.29 682.902 L1163.73 682.902 L1163.17 682.902 L1162.61 682.902 L1162.05 682.902 L1161.5 682.902 L1160.94 682.902 L1160.38 682.902 L1159.82 682.902 L1159.26 682.902 L1158.7 682.902 L1158.14 682.902 L1157.58 682.902 L1157.02 682.902 L1156.46 682.902 L1155.9 682.902 L1155.34 682.902 L1154.78 682.902 L1154.23 682.902 L1153.67 682.902 L1153.11 682.902 L1152.55 682.902 L1151.99 682.902 L1151.43 682.902 L1150.87 682.902 L1150.31 682.902 L1149.75 682.902 L1149.19 682.902 L1148.63 682.902 L1148.07 682.902 L1147.51 682.902 L1146.96 682.902 L1146.4 682.902 L1145.84 682.902 L1145.28 682.902 L1144.72 682.902 L1144.16 682.902 L1143.6 682.902 L1143.04 682.902 L1142.48 682.902 L1141.92 682.902 L1141.36 682.902 L1140.8 682.902 L1140.24 682.902 L1139.68 682.902 L1139.13 682.902 L1138.57 682.902 L1138.01 682.902 L1137.45 682.902 L1136.89 682.902 L1136.33 682.902 L1135.77 682.902 L1135.21 682.902 L1134.65 682.902 L1134.09 682.902 L1133.53 682.902 L1132.97 682.902 L1132.41 682.902 L1131.86 682.902 L1131.3 682.902 L1130.74 682.902 L1130.18 682.902 L1129.62 682.902 L1129.06 682.902 L1128.5 682.902 L1127.94 682.902 L1127.38 682.902 L1126.82 682.902 L1126.26 682.902 L1125.7 682.902 L1125.14 682.902 L1124.59 682.902 L1124.03 682.902 L1123.47 682.902 L1122.91 682.902 L1122.35 682.902 L1121.79 682.902 L1121.23 682.902 L1120.67 682.902 L1120.11 682.902 L1119.55 682.902 L1118.99 682.902 L1118.43 682.902 L1117.87 682.902 L1117.31 682.902 L1116.76 682.902 L1116.2 682.902 L1115.64 682.902 L1115.08 682.902 L1114.52 682.902 L1113.96 682.902 L1113.4 682.902 L1112.84 682.902 L1112.28 682.902 L1111.72 682.902 L1111.16 682.902 L1110.6 682.902 L1110.04 682.902 L1109.49 682.902 L1108.93 682.902 L1108.37 682.902 L1107.81 682.902 L1107.25 682.902 L1106.69 682.902 L1106.13 682.902 L1105.57 682.902 L1105.01 682.902 L1104.45 682.902 L1103.89 682.902 L1103.33 682.902 L1102.77 682.902 L1102.22 682.902 L1101.66 682.902 L1101.1 682.902 L1100.54 682.902 L1099.98 682.902 L1099.42 682.902 L1098.86 682.902 L1098.3 682.902 L1097.74 682.902 L1097.18 682.902 L1096.62 682.902 L1096.06 682.902 L1095.5 682.902 L1094.94 682.902 L1094.39 682.902 L1093.83 682.902 L1093.27 682.902 L1092.71 682.902 L1092.15 682.902 L1091.59 682.902 L1091.03 682.902 L1090.47 682.902 L1089.91 682.902 L1089.35 682.902 L1088.79 682.902 L1088.23 682.902 L1087.67 682.902 L1087.12 682.902 L1086.56 682.902 L1086 682.902 L1085.44 682.902 L1084.88 682.902 L1084.32 682.902 L1083.76 682.902 L1083.2 682.902 L1082.64 682.902 L1082.08 682.902 L1081.52 682.902 L1080.96 682.902 L1080.4 682.902 L1079.85 682.902 L1079.29 682.902 L1078.73 682.902 L1078.17 682.902 L1077.61 682.902 L1077.05 682.902 L1076.49 682.902 L1075.93 682.902 L1075.37 682.902 L1074.81 682.902 L1074.25 682.902 L1073.69 682.902 L1073.13 682.902 L1072.57 682.902 L1072.02 682.902 L1071.46 682.902 L1070.9 682.902 L1070.34 682.902 L1069.78 682.902 L1069.22 682.902 L1068.66 682.902 L1068.1 682.902 L1067.54 682.902 L1066.98 682.902 L1066.42 682.902 L1065.86 682.902 L1065.3 682.902 L1064.75 682.902 L1064.19 682.902 L1063.63 682.902 L1063.07 682.902 L1062.51 682.902 L1061.95 682.902 L1061.39 682.902 L1060.83 682.902 L1060.27 682.902 L1059.71 682.902 L1059.15 682.902 L1058.59 682.902 L1058.03 682.902 L1057.48 682.902 L1056.92 682.902 L1056.36 682.902 L1055.8 682.902 L1055.24 682.902 L1054.68 682.902 L1054.12 682.902 L1053.56 682.902 L1053 682.902 L1052.44 682.902 L1051.88 682.902 L1051.32 682.902 L1050.76 682.902 L1050.2 682.902 L1049.65 682.902 L1049.09 682.902 L1048.53 682.902 L1047.97 682.902 L1047.41 682.902 L1046.85 682.902 L1046.29 682.902 L1045.73 682.902 L1045.17 682.902 L1044.61 682.902 L1044.05 682.902 L1043.49 682.902 L1042.93 682.902 L1042.38 682.902 L1041.82 682.902 L1041.26 682.902 L1040.7 682.902 L1040.14 682.902 L1039.58 682.902 L1039.02 682.902 L1038.46 682.902 L1037.9 682.902 L1037.34 682.902 L1036.78 682.902 L1036.22 682.902 L1035.66 682.902 L1035.1 682.902 L1034.55 682.902 L1033.99 682.902 L1033.43 682.902 L1032.87 682.902 L1032.31 682.902 L1031.75 682.902 L1031.19 682.902 L1030.63 682.902 L1030.07 682.902 L1029.51 682.902 L1028.95 682.902 L1028.39 682.902 L1027.83 682.902 L1027.28 682.902 L1026.72 682.902 L1026.16 682.902 L1025.6 682.902 L1025.04 682.902 L1024.48 682.902 L1023.92 682.902 L1023.36 682.902 L1022.8 682.902 L1022.24 682.902 L1021.68 682.902 L1021.12 682.902 L1020.56 682.902 L1020.01 682.902 L1019.45 682.902 L1018.89 682.902 L1018.33 682.902 L1017.77 682.902 L1017.21 682.902 L1016.65 682.902 L1016.09 682.902 L1015.53 682.902 L1014.97 682.902 L1014.41 682.902 L1013.85 682.902 L1013.29 682.902 L1012.73 682.902 L1012.18 682.902 L1011.62 682.902 L1011.06 682.902 L1010.5 682.902 L1009.94 682.902 L1009.38 682.902 L1008.82 682.902 L1008.26 682.902 L1007.7 682.902 L1007.14 682.902 L1006.58 682.902 L1006.02 682.902 L1005.46 682.902 L1004.91 682.902 L1004.35 682.902 L1003.79 682.902 L1003.23 682.902 L1002.67 682.902 L1002.11 682.902 L1001.55 682.902 L1000.99 682.902 L1000.43 682.902 L999.872 682.902 L999.313 682.902 L998.754 682.902 L998.194 682.902 L997.635 682.902 L997.076 682.902 L996.517 682.902 L995.957 682.902 L995.398 682.902 L994.839 682.902 L994.28 682.902 L993.72 682.902 L993.161 682.902 L992.602 682.902 L992.043 682.902 L991.483 682.902 L990.924 682.902 L990.365 682.902 L989.806 682.902 L989.246 682.902 L988.687 682.902 L988.128 682.902 L987.569 682.902 L987.009 682.902 L986.45 682.902 L985.891 682.902 L985.332 682.902 L984.772 682.902 L984.213 682.902 L983.654 682.902 L983.095 682.902 L982.535 682.902 L981.976 682.902 L981.417 682.902 L980.858 682.902 L980.298 682.902 L979.739 682.902 L979.18 682.902 L978.621 682.902 L978.061 682.902 L977.502 682.902 L976.943 682.902 L976.384 682.902 L975.824 682.902 L975.265 682.902 L974.706 682.902 L974.147 682.902 L973.587 682.902 L973.028 682.902 L972.469 682.902 L971.91 682.902 L971.35 682.902 L970.791 682.902 L970.232 682.902 L969.673 682.902 L969.113 682.902 L968.554 682.902 L967.995 682.902 L967.436 682.902 L966.876 682.902 L966.317 682.902 L965.758 682.902 L965.199 682.902 L964.639 682.902 L964.08 682.902 L963.521 682.902 L962.962 682.902 L962.402 682.902 L961.843 682.902 L961.284 682.902 L960.725 682.902 L960.165 682.902 L959.606 682.902 L959.047 682.902 L958.488 682.902 L957.928 682.902 L957.369 682.902 L956.81 682.902 L956.251 682.902 L955.691 682.902 L955.132 682.902 L954.573 682.902 L954.014 682.902 L953.454 682.902 L952.895 682.902 L952.336 682.902 L951.777 682.902 L951.217 682.902 L950.658 682.902 L950.099 682.902 L949.54 682.902 L948.98 682.902 L948.421 682.902 L947.862 682.902 L947.303 682.902 L946.743 682.902 L946.184 682.902 L945.625 682.902 L945.066 682.902 L944.506 682.902 L943.947 682.902 L943.388 682.902 L942.829 682.902 L942.269 682.902 L941.71 682.902 L941.151 682.902 L940.592 682.902 L940.032 682.902 L939.473 682.902 L938.914 682.902 L938.355 682.902 L937.795 682.902 L937.236 682.902 L936.677 682.902 L936.118 682.902 L935.558 682.902 L934.999 682.902 L934.44 682.902 L933.881 682.902 L933.321 682.902 L932.762 682.902 L932.203 682.902 L931.644 682.902 L931.084 682.902 L930.525 682.902 L929.966 682.902 L929.406 682.902 L928.847 682.902 L928.288 682.902 L927.729 682.902 L927.169 682.902 L926.61 682.902 L926.051 682.902 L925.492 682.902 L924.932 682.902 L924.373 682.902 L923.814 682.902 L923.255 682.902 L922.695 682.902 L922.136 682.902 L921.577 682.902 L921.018 682.902 L920.458 682.902 L919.899 682.902 L919.34 682.902 L918.781 682.902 L918.221 682.902 L917.662 682.902 L917.103 682.902 L916.544 682.902 L915.984 682.902 L915.425 682.902 L914.866 682.902 L914.307 682.902 L913.747 682.902 L913.188 682.902 L912.629 682.902 L912.07 682.902 L911.51 682.902 L910.951 682.902 L910.392 682.902 L909.833 682.902 L909.273 682.902 L908.714 682.902 L908.155 682.902 L907.596 682.902 L907.036 682.902 L906.477 682.902 L905.918 682.902 L905.359 682.902 L904.799 682.902 L904.24 682.902 L903.681 682.902 L903.122 682.902 L902.562 682.902 L902.003 682.902 L901.444 682.902 L900.885 682.902 L900.325 682.902 L899.766 682.902 L899.207 682.902 L898.648 682.902 L898.088 682.902 L897.529 682.902 L896.97 682.902 L896.411 682.902 L895.851 682.902 L895.292 682.902 L894.733 682.902 L894.174 682.902 L893.614 682.902 L893.055 682.902 L892.496 682.902 L891.937 682.902 L891.377 682.902 L890.818 682.902 L890.259 682.902 L889.7 682.902 L889.14 682.902 L888.581 682.902 L888.022 682.902 L887.463 682.902 L886.903 682.902 L886.344 682.902 L885.785 682.902 L885.226 682.902 L884.666 682.902 L884.107 682.902 L883.548 682.902 L882.989 682.902 L882.429 682.902 L881.87 682.902 L881.311 682.902 L880.752 682.902 L880.192 682.902 L879.633 682.902 L879.074 682.902 L878.515 682.902 L877.955 682.902 L877.396 682.902 L876.837 682.902 L876.278 682.902 L875.718 682.902 L875.159 682.902 L874.6 682.902 L874.041 682.902 L873.481 682.902 L872.922 682.902 L872.363 682.902 L871.804 682.902 L871.244 682.902 L870.685 682.902 L870.126 682.902 L869.567 682.902 L869.007 682.902 L868.448 682.902 L867.889 682.902 L867.33 682.902 L866.77 682.902 L866.211 682.902 L865.652 682.902 L865.093 682.902 L864.533 682.902 L863.974 682.902 L863.415 682.902 L862.856 682.902 L862.296 682.902 L861.737 682.902 L861.178 682.902 L860.619 682.902 L860.059 682.902 L859.5 682.902 L858.941 682.902 L858.382 682.902 L857.822 682.902 L857.263 682.902 L856.704 682.902 L856.145 682.902 L855.585 682.902 L855.026 682.902 L854.467 682.902 L853.908 682.902 L853.348 682.902 L852.789 682.902 L852.23 682.902 L851.671 682.902 L851.111 682.902 L850.552 682.902 L849.993 682.902 L849.434 682.902 L848.874 682.902 L848.315 682.902 L847.756 682.902 L847.197 682.902 L846.637 682.902 L846.078 682.902 L845.519 682.902 L844.96 682.902 L844.4 682.902 L843.841 682.902 L843.282 682.902 L842.723 682.902 L842.163 682.902 L841.604 682.902 L841.045 682.902 L840.486 682.902 L839.926 682.902 L839.367 682.902 L838.808 682.902 L838.249 682.902 L837.689 682.902 L837.13 682.902 L836.571 682.902 L836.012 682.902 L835.452 682.902 L834.893 682.902 L834.334 682.902 L833.775 682.902 L833.215 682.902 L832.656 682.902 L832.097 682.902 L831.538 682.902 L830.978 682.902 L830.419 682.902 L829.86 682.902 L829.301 682.902 L828.741 682.902 L828.182 682.902 L827.623 682.902 L827.064 682.902 L826.504 682.902 L825.945 682.902 L825.386 682.902 L824.827 682.902 L824.267 682.902 L823.708 682.902 L823.149 682.902 L822.59 682.902 L822.03 682.902 L821.471 682.902 L820.912 682.902 L820.353 682.902 L819.793 682.902 L819.234 682.902 L818.675 682.902 L818.116 682.902 L817.556 682.902 L816.997 682.902 L816.438 682.902 L815.879 682.902 L815.319 682.902 L814.76 682.902 L814.201 682.902 L813.642 682.902 L813.082 682.902 L812.523 682.902 L811.964 682.902 L811.405 682.902 L810.845 682.902 L810.286 682.902 L809.727 682.902 L809.168 682.902 L808.608 682.902 L808.049 682.902 L807.49 682.902 L806.931 682.902 L806.371 682.902 L805.812 682.902 L805.253 682.902 L804.693 682.902 L804.134 682.902 L803.575 682.902 L803.016 682.902 L802.456 682.902 L801.897 682.902 L801.338 682.902 L800.779 682.902 L800.219 682.902 L799.66 682.902 L799.101 682.902 L798.542 682.902 L797.982 682.902 L797.423 682.902 L796.864 682.902 L796.305 682.902 L795.745 682.902 L795.186 682.902 L794.627 682.902 L794.068 682.902 L793.508 682.902 L792.949 682.902 L792.39 682.902 L791.831 682.902 L791.271 682.902 L790.712 682.902 L790.153 682.902 L789.594 682.902 L789.034 682.902 L788.475 682.902 L787.916 682.902 L787.357 682.902 L786.797 682.902 L786.238 682.902 L785.679 682.902 L785.12 682.902 L784.56 682.902 L784.001 682.902 L783.442 682.902 L782.883 682.902 L782.323 682.902 L781.764 682.902 L781.205 682.902 L780.646 682.902 L780.086 682.902 L779.527 682.902 L778.968 682.902 L778.409 682.902 L777.849 682.902 L777.29 682.902 L776.731 682.902 L776.172 682.902 L775.612 682.902 L775.053 682.902 L774.494 682.902 L773.935 682.902 L773.375 682.902 L772.816 682.902 L772.257 682.902 L771.698 682.902 L771.138 682.902 L770.579 682.902 L770.02 682.902 L769.461 682.902 L768.901 682.902 L768.342 682.902 L767.783 682.902 L767.224 682.902 L766.664 682.902 L766.105 682.902 L765.546 682.902 L764.987 682.902 L764.427 682.902 L763.868 682.902 L763.309 682.902 L762.75 682.902 L762.19 682.902 L761.631 682.902 L761.072 682.902 L760.513 682.902 L759.953 682.902 L759.394 682.902 L758.835 682.902 L758.276 682.902 L757.716 682.902 L757.157 682.902 L756.598 682.902 L756.039 682.902 L755.479 682.902 L754.92 682.902 L754.361 682.902 L753.802 682.902 L753.242 682.902 L752.683 682.902 L752.124 682.902 L751.565 682.902 L751.005 682.902 L750.446 682.902 L749.887 682.902 L749.328 682.902 L748.768 682.902 L748.209 682.902 L747.65 682.902 L747.091 682.902 L746.531 682.902 L745.972 682.902 L745.413 682.902 L744.854 682.902 L744.294 682.902 L743.735 682.902 L743.176 682.902 L742.617 682.902 L742.057 682.902 L741.498 682.902 L740.939 682.902 L740.38 682.902 L739.82 682.902 L739.261 682.902 L738.702 682.902 L738.143 682.902 L737.583 682.902 L737.024 682.902 L736.465 682.902 L735.906 682.902 L735.346 682.902 L734.787 682.902 L734.228 682.902 L733.669 682.902 L733.109 682.902 L732.55 682.902 L731.991 682.902 L731.432 682.902 L730.872 682.902 L730.313 682.902 L729.754 682.902 L729.195 682.902 L728.635 682.902 L728.076 682.902 L727.517 682.902 L726.958 682.902 L726.398 682.902 L725.839 682.902 L725.28 682.902 L724.721 682.902 L724.161 682.902 L723.602 682.902 L723.043 682.902 L722.484 682.902 L721.924 682.902 L721.365 682.902 L720.806 682.902 L720.247 682.902  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip833)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.037 720.806,684.037 721.365,684.037 721.924,684.037 722.484,684.037 723.043,684.037 723.602,684.037 724.161,684.037 724.721,684.037 725.28,684.037 725.839,684.037 726.398,684.037 726.958,684.037 727.517,684.037 728.076,684.037 728.635,684.037 729.195,684.037 729.754,684.037 730.313,684.037 730.872,684.037 731.432,684.037 731.991,684.037 732.55,684.037 733.109,684.037 733.669,684.037 734.228,684.037 734.787,684.037 735.346,684.037 735.906,684.037 736.465,684.037 737.024,684.037 737.583,684.037 738.143,684.037 738.702,684.037 739.261,684.037 739.82,684.037 740.38,684.037 740.939,684.037 741.498,684.037 742.057,684.037 742.617,684.037 743.176,684.037 743.735,684.037 744.294,684.037 744.854,684.037 745.413,684.037 745.972,684.037 746.531,684.037 747.091,684.037 747.65,684.037 748.209,684.037 748.768,684.037 749.328,684.037 749.887,684.037 750.446,684.037 751.005,684.037 751.565,684.037 752.124,684.037 752.683,684.037 753.242,684.037 753.802,684.037 754.361,684.037 754.92,684.037 755.479,684.037 756.039,684.037 756.598,684.037 757.157,684.037 757.716,684.037 758.276,684.037 758.835,684.037 759.394,684.037 759.953,684.037 760.513,684.037 761.072,684.037 761.631,684.037 762.19,684.037 762.75,684.037 763.309,684.037 763.868,684.037 764.427,684.037 764.987,684.037 765.546,684.037 766.105,684.037 766.664,684.037 767.224,684.037 767.783,684.037 768.342,684.037 768.901,684.037 769.461,684.037 770.02,684.037 770.579,684.037 771.138,684.037 771.698,684.037 772.257,684.037 772.816,684.037 773.375,684.037 773.935,684.037 774.494,684.037 775.053,684.037 775.612,684.037 776.172,684.037 776.731,684.037 777.29,684.037 777.849,684.037 778.409,684.037 778.968,684.037 779.527,684.037 780.086,684.037 780.646,684.037 781.205,684.037 781.764,684.037 782.323,684.037 782.883,684.037 783.442,684.037 784.001,684.037 784.56,684.037 785.12,684.037 785.679,684.037 786.238,684.037 786.797,684.037 787.357,684.037 787.916,684.037 788.475,684.037 789.034,684.037 789.594,684.037 790.153,684.037 790.712,684.037 791.271,684.037 791.831,684.037 792.39,684.037 792.949,684.037 793.508,684.037 794.068,684.037 794.627,684.037 795.186,684.037 795.745,684.037 796.305,684.037 796.864,684.037 797.423,684.037 797.982,684.037 798.542,684.037 799.101,684.037 799.66,684.037 800.219,684.037 800.779,684.037 801.338,684.037 801.897,684.037 802.456,684.037 803.016,684.037 803.575,684.037 804.134,684.037 804.693,684.037 805.253,684.037 805.812,684.037 806.371,684.037 806.931,684.037 807.49,684.037 808.049,684.037 808.608,684.037 809.168,684.037 809.727,684.037 810.286,684.037 810.845,684.037 811.405,684.037 811.964,684.037 812.523,684.037 813.082,684.037 813.642,684.037 814.201,684.037 814.76,684.037 815.319,684.037 815.879,684.037 816.438,684.037 816.997,684.037 817.556,684.037 818.116,684.037 818.675,684.037 819.234,684.037 819.793,684.037 820.353,684.037 820.912,684.037 821.471,684.037 822.03,684.037 822.59,684.037 823.149,684.037 823.708,684.037 824.267,684.037 824.827,684.037 825.386,684.037 825.945,684.037 826.504,684.037 827.064,684.037 827.623,684.037 828.182,684.037 828.741,684.037 829.301,684.037 829.86,684.037 830.419,684.037 830.978,684.037 831.538,684.037 832.097,684.037 832.656,684.037 833.215,684.037 833.775,684.037 834.334,684.037 834.893,684.037 835.452,684.037 836.012,684.037 836.571,684.037 837.13,684.037 837.689,684.037 838.249,684.037 838.808,684.037 839.367,684.037 839.926,684.037 840.486,684.037 841.045,684.037 841.604,684.037 842.163,684.037 842.723,684.037 843.282,684.037 843.841,684.037 844.4,684.037 844.96,684.037 845.519,684.037 846.078,684.037 846.637,684.037 847.197,684.037 847.756,684.037 848.315,684.037 848.874,684.037 849.434,684.037 849.993,684.037 850.552,684.037 851.111,684.037 851.671,684.037 852.23,684.037 852.789,684.037 853.348,684.037 853.908,684.037 854.467,684.037 855.026,684.037 855.585,684.037 856.145,684.037 856.704,684.037 857.263,684.037 857.822,684.037 858.382,684.037 858.941,684.037 859.5,684.037 860.059,684.037 860.619,684.037 861.178,684.037 861.737,684.037 862.296,684.037 862.856,684.037 863.415,684.037 863.974,684.037 864.533,684.037 865.093,684.037 865.652,684.037 866.211,684.037 866.77,684.037 867.33,684.037 867.889,684.037 868.448,684.037 869.007,684.037 869.567,684.037 870.126,684.037 870.685,684.037 871.244,684.037 871.804,684.037 872.363,684.037 872.922,684.037 873.481,684.037 874.041,684.037 874.6,684.037 875.159,684.037 875.718,684.037 876.278,684.037 876.837,684.037 877.396,684.037 877.955,684.037 878.515,684.037 879.074,684.037 879.633,684.037 880.192,684.037 880.752,684.037 881.311,684.037 881.87,684.037 882.429,684.037 882.989,684.037 883.548,684.037 884.107,684.037 884.666,684.037 885.226,684.037 885.785,684.037 886.344,684.037 886.903,684.037 887.463,684.037 888.022,684.037 888.581,684.037 889.14,684.037 889.7,684.037 890.259,684.037 890.818,684.037 891.377,684.037 891.937,684.037 892.496,684.037 893.055,684.037 893.614,684.037 894.174,684.037 894.733,684.037 895.292,684.037 895.851,684.037 896.411,684.037 896.97,684.037 897.529,684.037 898.088,684.037 898.648,684.037 899.207,684.037 899.766,684.037 900.325,684.037 900.885,684.037 901.444,684.037 902.003,684.037 902.562,684.037 903.122,684.037 903.681,684.037 904.24,684.037 904.799,684.037 905.359,684.037 905.918,684.037 906.477,684.037 907.036,684.037 907.596,684.037 908.155,684.037 908.714,684.037 909.273,684.037 909.833,684.037 910.392,684.037 910.951,684.037 911.51,684.037 912.07,684.037 912.629,684.037 913.188,684.037 913.747,684.037 914.307,684.037 914.866,684.037 915.425,684.037 915.984,684.037 916.544,684.037 917.103,684.037 917.662,684.037 918.221,684.037 918.781,684.037 919.34,684.037 919.899,684.037 920.458,684.037 921.018,684.037 921.577,684.037 922.136,684.037 922.695,684.037 923.255,684.037 923.814,684.037 924.373,684.037 924.932,684.037 925.492,684.037 926.051,684.037 926.61,684.037 927.169,684.037 927.729,684.037 928.288,684.037 928.847,684.037 929.406,684.037 929.966,684.037 930.525,684.037 931.084,684.037 931.644,684.037 932.203,684.037 932.762,684.037 933.321,684.037 933.881,684.037 934.44,684.037 934.999,684.037 935.558,684.037 936.118,684.037 936.677,684.037 937.236,684.037 937.795,684.037 938.355,684.037 938.914,684.037 939.473,684.037 940.032,684.037 940.592,684.037 941.151,684.037 941.71,684.037 942.269,684.037 942.829,684.037 943.388,684.037 943.947,684.037 944.506,684.037 945.066,684.037 945.625,684.037 946.184,684.037 946.743,684.037 947.303,684.037 947.862,684.037 948.421,684.037 948.98,684.037 949.54,684.037 950.099,684.037 950.658,684.037 951.217,684.037 951.777,684.037 952.336,684.037 952.895,684.037 953.454,684.037 954.014,684.037 954.573,684.037 955.132,684.037 955.691,684.037 956.251,684.037 956.81,684.037 957.369,684.037 957.928,684.037 958.488,684.037 959.047,684.037 959.606,684.037 960.165,684.037 960.725,684.037 961.284,684.037 961.843,684.037 962.402,684.037 962.962,684.037 963.521,684.037 964.08,684.037 964.639,684.037 965.199,684.037 965.758,684.037 966.317,684.037 966.876,684.037 967.436,684.037 967.995,684.037 968.554,684.037 969.113,684.037 969.673,684.037 970.232,684.037 970.791,684.037 971.35,684.037 971.91,684.037 972.469,684.037 973.028,684.037 973.587,684.037 974.147,684.037 974.706,684.037 975.265,684.037 975.824,684.037 976.384,684.037 976.943,684.037 977.502,684.037 978.061,684.037 978.621,684.037 979.18,684.037 979.739,684.037 980.298,684.037 980.858,684.037 981.417,684.037 981.976,684.037 982.535,684.037 983.095,684.037 983.654,684.037 984.213,684.037 984.772,684.037 985.332,684.037 985.891,684.037 986.45,684.037 987.009,684.037 987.569,684.037 988.128,684.037 988.687,684.037 989.246,684.037 989.806,684.037 990.365,684.037 990.924,684.037 991.483,684.037 992.043,684.037 992.602,684.037 993.161,684.037 993.72,684.037 994.28,684.037 994.839,684.037 995.398,684.037 995.957,684.037 996.517,684.037 997.076,684.037 997.635,684.037 998.194,684.037 998.754,684.037 999.313,684.037 999.872,684.037 1000.43,684.037 1000.99,684.037 1001.55,684.037 1002.11,684.037 1002.67,684.037 1003.23,684.037 1003.79,684.037 1004.35,684.037 1004.91,684.037 1005.46,684.037 1006.02,684.037 1006.58,684.037 1007.14,684.037 1007.7,684.037 1008.26,684.037 1008.82,684.037 1009.38,684.037 1009.94,684.037 1010.5,684.037 1011.06,684.037 1011.62,684.037 1012.18,684.037 1012.73,684.037 1013.29,684.037 1013.85,684.037 1014.41,684.037 1014.97,684.037 1015.53,684.037 1016.09,684.037 1016.65,684.037 1017.21,684.037 1017.77,684.037 1018.33,684.037 1018.89,684.037 1019.45,684.037 1020.01,684.037 1020.56,684.037 1021.12,684.037 1021.68,684.037 1022.24,684.037 1022.8,684.037 1023.36,684.037 1023.92,684.037 1024.48,684.037 1025.04,684.037 1025.6,684.037 1026.16,684.037 1026.72,684.037 1027.28,684.037 1027.83,684.037 1028.39,684.037 1028.95,684.037 1029.51,684.037 1030.07,684.037 1030.63,684.037 1031.19,684.037 1031.75,684.037 1032.31,684.037 1032.87,684.037 1033.43,684.037 1033.99,684.037 1034.55,684.037 1035.1,684.037 1035.66,684.037 1036.22,684.037 1036.78,684.037 1037.34,684.037 1037.9,684.037 1038.46,684.037 1039.02,684.037 1039.58,684.037 1040.14,684.037 1040.7,684.037 1041.26,684.037 1041.82,684.037 1042.38,684.037 1042.93,684.037 1043.49,684.037 1044.05,684.037 1044.61,684.037 1045.17,684.037 1045.73,684.037 1046.29,684.037 1046.85,684.037 1047.41,684.037 1047.97,684.037 1048.53,684.037 1049.09,684.037 1049.65,684.037 1050.2,684.037 1050.76,684.037 1051.32,684.037 1051.88,684.037 1052.44,684.037 1053,684.037 1053.56,684.037 1054.12,684.037 1054.68,684.037 1055.24,684.037 1055.8,684.037 1056.36,684.037 1056.92,684.037 1057.48,684.037 1058.03,684.037 1058.59,684.037 1059.15,684.037 1059.71,684.037 1060.27,684.037 1060.83,684.037 1061.39,684.037 1061.95,684.037 1062.51,684.037 1063.07,684.037 1063.63,684.037 1064.19,684.037 1064.75,684.037 1065.3,684.037 1065.86,684.037 1066.42,684.037 1066.98,684.037 1067.54,684.037 1068.1,684.037 1068.66,684.037 1069.22,684.037 1069.78,684.037 1070.34,684.037 1070.9,684.037 1071.46,684.037 1072.02,684.037 1072.57,684.037 1073.13,684.037 1073.69,684.037 1074.25,684.037 1074.81,684.037 1075.37,684.037 1075.93,684.037 1076.49,684.037 1077.05,684.037 1077.61,684.037 1078.17,684.037 1078.73,684.037 1079.29,684.037 1079.85,684.037 1080.4,684.037 1080.96,684.037 1081.52,684.037 1082.08,684.037 1082.64,684.037 1083.2,684.037 1083.76,684.037 1084.32,684.037 1084.88,684.037 1085.44,684.037 1086,684.037 1086.56,684.037 1087.12,684.037 1087.67,684.037 1088.23,684.037 1088.79,684.037 1089.35,684.037 1089.91,684.037 1090.47,684.037 1091.03,684.037 1091.59,684.037 1092.15,684.037 1092.71,684.037 1093.27,684.037 1093.83,684.037 1094.39,684.037 1094.94,684.037 1095.5,684.037 1096.06,684.037 1096.62,684.037 1097.18,684.037 1097.74,684.037 1098.3,684.037 1098.86,684.037 1099.42,684.037 1099.98,684.037 1100.54,684.037 1101.1,684.037 1101.66,684.037 1102.22,684.037 1102.77,684.037 1103.33,684.037 1103.89,684.037 1104.45,684.037 1105.01,684.037 1105.57,684.037 1106.13,684.037 1106.69,684.037 1107.25,684.037 1107.81,684.037 1108.37,684.037 1108.93,684.037 1109.49,684.037 1110.04,684.037 1110.6,684.037 1111.16,684.037 1111.72,684.037 1112.28,684.037 1112.84,684.037 1113.4,684.037 1113.96,684.037 1114.52,684.037 1115.08,684.037 1115.64,684.037 1116.2,684.037 1116.76,684.037 1117.31,684.037 1117.87,684.037 1118.43,684.037 1118.99,684.037 1119.55,684.037 1120.11,684.037 1120.67,684.037 1121.23,684.037 1121.79,684.037 1122.35,684.037 1122.91,684.037 1123.47,684.037 1124.03,684.037 1124.59,684.037 1125.14,684.037 1125.7,684.037 1126.26,684.037 1126.82,684.037 1127.38,684.037 1127.94,684.037 1128.5,684.037 1129.06,684.037 1129.62,684.037 1130.18,684.037 1130.74,684.037 1131.3,684.037 1131.86,684.037 1132.41,684.037 1132.97,684.037 1133.53,684.037 1134.09,684.037 1134.65,684.037 1135.21,684.037 1135.77,684.037 1136.33,684.037 1136.89,684.037 1137.45,684.037 1138.01,684.037 1138.57,684.037 1139.13,684.037 1139.68,684.037 1140.24,684.037 1140.8,684.037 1141.36,684.037 1141.92,684.037 1142.48,684.037 1143.04,684.037 1143.6,684.037 1144.16,684.037 1144.72,684.037 1145.28,684.037 1145.84,684.037 1146.4,684.037 1146.96,684.037 1147.51,684.037 1148.07,684.037 1148.63,684.037 1149.19,684.037 1149.75,684.037 1150.31,684.037 1150.87,684.037 1151.43,684.037 1151.99,684.037 1152.55,684.037 1153.11,684.037 1153.67,684.037 1154.23,684.037 1154.78,684.037 1155.34,684.037 1155.9,684.037 1156.46,684.037 1157.02,684.037 1157.58,684.037 1158.14,684.037 1158.7,684.037 1159.26,684.037 1159.82,684.037 1160.38,684.037 1160.94,684.037 1161.5,684.037 1162.05,684.037 1162.61,684.037 1163.17,684.037 1163.73,684.037 1164.29,684.037 1164.85,684.037 1165.41,684.037 1165.97,684.037 1166.53,684.037 1167.09,684.037 1167.65,684.037 1168.21,684.037 1168.77,684.037 1169.33,684.037 1169.88,684.037 1170.44,684.037 1171,684.037 1171.56,684.037 1172.12,684.037 1172.68,684.037 1173.24,684.037 1173.8,684.037 1174.36,684.037 1174.92,684.037 1175.48,684.037 1176.04,684.037 1176.6,684.037 1177.15,684.037 1177.71,684.037 1178.27,684.037 1178.83,684.037 1179.39,684.037 1179.95,684.037 1180.51,684.037 1181.07,684.037 1181.63,684.037 1182.19,684.037 1182.75,684.037 1183.31,684.037 1183.87,684.037 1184.43,684.037 1184.98,684.037 1185.54,684.037 1186.1,684.037 1186.66,684.037 1187.22,684.037 1187.78,684.037 1188.34,684.037 1188.9,684.037 1189.46,684.037 1190.02,684.037 1190.58,684.037 1191.14,684.037 1191.7,684.037 1192.25,684.037 1192.81,684.037 1193.37,684.037 1193.93,684.037 1194.49,684.037 1195.05,684.037 1195.61,684.037 1196.17,684.037 1196.73,684.037 1197.29,684.037 1197.85,684.037 1198.41,684.037 1198.97,684.037 1199.52,684.037 1200.08,684.037 1200.64,684.037 1201.2,684.037 1201.76,684.037 1202.32,684.037 1202.88,684.037 1203.44,684.037 1204,684.037 1204.56,684.037 1205.12,684.037 1205.68,684.037 1206.24,684.037 1206.8,684.037 1207.35,684.037 1207.91,684.037 1208.47,684.037 1209.03,684.037 1209.59,684.037 1210.15,684.037 1210.71,684.037 1211.27,684.037 1211.83,684.037 1212.39,684.037 1212.95,684.037 1213.51,684.037 1214.07,684.037 1214.62,684.037 1215.18,684.037 1215.74,684.037 1216.3,684.037 1216.86,684.037 1217.42,684.037 1217.98,684.037 1218.54,684.037 1219.1,684.037 1219.66,684.037 1220.22,684.037 1220.78,684.037 1221.34,684.037 1221.89,684.037 1222.45,684.037 1223.01,684.037 1223.57,684.037 1224.13,684.037 1224.69,684.037 1225.25,684.037 1225.81,684.037 1226.37,684.037 1226.93,684.037 1227.49,684.037 1228.05,684.037 1228.61,684.037 1229.17,684.037 1229.72,684.037 1230.28,684.037 1230.84,684.037 1231.4,684.037 1231.96,684.037 1232.52,684.037 1233.08,684.037 1233.64,684.037 1234.2,684.037 1234.76,684.037 1235.32,684.037 1235.88,684.037 1236.44,684.037 1236.99,684.037 1237.55,684.037 1238.11,684.037 1238.67,684.037 1239.23,684.037 1239.79,684.037 1240.35,684.037 1240.91,684.037 1241.47,684.037 1242.03,684.037 1242.59,684.037 1243.15,684.037 1243.71,684.037 1244.26,684.037 1244.82,684.037 1245.38,684.037 1245.94,684.037 1246.5,684.037 1247.06,684.037 1247.62,684.037 1248.18,684.037 1248.74,684.037 1249.3,684.037 1249.86,684.037 1250.42,684.037 1250.98,684.037 1251.54,684.037 1252.09,684.037 1252.65,684.037 1253.21,684.037 1253.77,684.037 1254.33,684.037 1254.89,684.037 1255.45,684.037 1256.01,684.037 1256.57,684.037 1257.13,684.037 1257.69,684.037 1258.25,684.037 1258.81,684.037 1259.36,684.037 1259.92,684.037 1260.48,684.037 1261.04,684.037 1261.6,684.037 1262.16,684.037 1262.72,684.037 1263.28,684.037 1263.84,684.037 1264.4,684.037 1264.96,684.037 1265.52,684.037 1266.08,684.037 1266.63,684.037 1267.19,684.037 1267.75,684.037 1268.31,684.037 1268.87,684.037 1269.43,684.037 1269.99,684.037 1270.55,684.037 1271.11,684.037 1271.67,684.037 1272.23,684.037 1272.79,684.037 1273.35,684.037 1273.91,684.037 1274.46,684.037 1275.02,684.037 1275.58,684.037 1276.14,684.037 1276.7,684.037 1277.26,684.037 1277.82,684.037 1278.38,684.037 1278.94,684.037 1279.5,684.037 1280.06,684.037 1280.62,684.037 1281.18,684.037 1281.73,684.037 1282.29,684.037 1282.85,684.037 1283.41,684.037 1283.97,684.037 1284.53,684.037 1285.09,684.037 1285.65,684.037 1286.21,684.037 1286.77,684.037 1287.33,684.037 1287.89,684.037 1288.45,684.037 1289,684.037 1289.56,684.037 1290.12,684.037 1290.68,684.037 1291.24,684.037 1291.8,684.037 1292.36,684.037 1292.92,684.037 1293.48,684.037 1294.04,684.037 1294.6,684.037 1295.16,684.037 1295.72,684.037 1296.28,684.037 1296.83,684.037 1297.39,684.037 1297.95,684.037 1298.51,684.037 1299.07,684.037 1299.63,684.037 1300.19,684.037 1300.75,684.037 1301.31,684.037 1301.87,684.037 1302.43,684.037 1302.99,684.037 1303.55,684.037 1304.1,684.037 1304.66,684.037 1305.22,684.037 1305.78,684.037 1306.34,684.037 1306.9,684.037 1307.46,684.037 1308.02,684.037 1308.58,684.037 1309.14,684.037 1309.7,684.037 1310.26,684.037 1310.82,684.037 1311.38,684.037 1311.93,684.037 1312.49,684.037 1313.05,684.037 1313.61,684.037 1314.17,684.037 1314.73,684.037 1315.29,684.037 1315.85,684.037 1316.41,684.037 1316.97,684.037 1317.53,684.037 1318.09,684.037 1318.65,684.037 1319.2,684.037 1319.76,684.037 1320.32,684.037 1320.88,684.037 1321.44,684.037 1322,684.037 1322.56,684.037 1323.12,684.037 1323.68,684.037 1324.24,684.037 1324.8,684.037 1325.36,684.037 1325.92,684.037 1326.47,684.037 1327.03,684.037 1327.59,684.037 1328.15,684.037 1328.71,684.037 1329.27,684.037 1329.83,684.037 1330.39,684.037 1330.95,684.037 1331.51,684.037 1332.07,684.037 1332.63,684.037 1333.19,684.037 1333.75,684.037 1334.3,684.037 1334.86,684.037 1335.42,684.037 1335.98,684.037 1336.54,684.037 1337.1,684.037 1337.66,684.037 1338.22,684.037 1338.78,684.037 1339.34,684.037 1339.9,684.037 1340.46,684.037 1341.02,684.037 1341.57,684.037 1342.13,684.037 1342.69,684.037 1343.25,684.037 1343.81,684.037 1344.37,684.037 1344.93,684.037 1345.49,684.037 1346.05,684.037 1346.61,684.037 1347.17,684.037 1347.73,684.037 1348.29,684.037 1348.84,684.037 1349.4,684.037 1349.96,684.037 1350.52,684.037 1351.08,684.037 1351.64,684.037 1352.2,684.037 1352.76,684.037 1353.32,684.037 1353.88,684.037 1354.44,684.037 1355,684.037 1355.56,684.037 1356.12,684.037 1356.67,684.037 1357.23,684.037 1357.79,684.037 1358.35,684.037 1358.91,684.037 1359.47,684.037 1360.03,684.037 1360.59,684.037 1361.15,684.037 1361.71,684.037 1362.27,684.037 1362.83,684.037 1363.39,684.037 1363.94,684.037 1364.5,684.037 1365.06,684.037 1365.62,684.037 1366.18,684.037 1366.74,684.037 1367.3,684.037 1367.86,684.037 1368.42,684.037 1368.98,684.037 1369.54,684.037 1370.1,684.037 1370.66,684.037 1371.21,684.037 1371.77,684.037 1372.33,684.037 1372.89,684.037 1373.45,684.037 1374.01,684.037 1374.57,684.037 1375.13,684.037 1375.69,684.037 1376.25,684.037 1376.81,684.037 1377.37,684.037 1377.93,684.037 1378.49,684.037 1379.04,684.037 1379.6,684.037 1380.16,684.037 1380.72,684.037 1381.28,684.037 1381.84,684.037 1382.4,684.037 1382.96,684.037 1383.52,684.037 1384.08,684.037 1384.64,684.037 1385.2,684.037 1385.76,684.037 1386.31,684.037 1386.87,684.037 1387.43,684.037 1387.99,684.037 1388.55,684.037 1389.11,684.037 1389.67,684.037 1390.23,684.037 1390.79,684.037 1391.35,684.037 1391.91,684.037 1392.47,684.037 1393.03,684.037 1393.58,684.037 1394.14,684.037 1394.7,684.037 1395.26,684.037 1395.82,684.037 1396.38,684.037 1396.94,684.037 1397.5,684.037 1398.06,684.037 1398.62,684.037 1399.18,684.037 1399.74,684.037 1400.3,684.037 1400.86,684.037 1401.41,684.037 1401.97,684.037 1402.53,684.037 1403.09,684.037 1403.65,684.037 1404.21,684.037 1404.77,684.037 1405.33,684.037 1405.89,684.037 1406.45,684.037 1407.01,684.037 1407.57,684.037 1408.13,684.037 1408.68,684.037 1409.24,684.037 1409.8,684.037 1410.36,684.037 1410.92,684.037 1411.48,684.037 1412.04,684.037 1412.6,684.037 1413.16,684.037 1413.72,684.037 1414.28,684.037 1414.84,684.037 1415.4,684.037 1415.95,684.037 1416.51,684.037 1417.07,684.037 1417.63,684.037 1418.19,684.037 1418.75,684.037 1419.31,684.037 1419.87,684.037 1420.43,684.037 1420.99,684.037 1421.55,684.037 1422.11,684.037 1422.67,684.037 1423.23,684.037 1423.78,684.037 1424.34,684.037 1424.9,684.037 1425.46,684.037 1426.02,684.037 1426.58,684.037 1427.14,684.037 1427.7,684.037 1428.26,684.037 1428.82,684.037 1429.38,684.037 1429.94,684.037 1430.5,684.037 1431.05,684.037 1431.61,684.037 1432.17,684.037 1432.73,684.037 1433.29,684.037 1433.85,684.037 1434.41,684.037 1434.97,684.037 1435.53,684.037 1436.09,684.037 1436.65,684.037 1437.21,684.037 1437.77,684.037 1438.33,684.037 1438.88,684.037 1439.44,684.037 1440,684.037 1440.56,684.037 1441.12,684.037 1441.68,684.037 1442.24,684.037 1442.8,684.037 1443.36,684.037 1443.92,684.037 1444.48,684.037 1445.04,684.037 1445.6,684.037 1446.15,684.037 1446.71,684.037 1447.27,684.037 1447.83,684.037 1448.39,684.037 1448.95,684.037 1449.51,684.037 1450.07,684.037 1450.63,684.037 1451.19,684.037 1451.75,684.037 1452.31,684.037 1452.87,684.037 1453.42,684.037 1453.98,684.037 1454.54,684.037 1455.1,684.037 1455.66,684.037 1456.22,684.037 1456.78,684.037 1457.34,684.037 1457.9,684.037 1458.46,684.037 1459.02,684.037 1459.58,684.037 1460.14,684.037 1460.7,684.037 1461.25,684.037 1461.81,684.037 1462.37,684.037 1462.93,684.037 1463.49,684.037 1464.05,684.037 1464.61,684.037 1465.17,684.037 1465.73,684.037 1466.29,684.037 1466.85,684.037 1467.41,684.037 1467.97,684.037 1468.52,684.037 1469.08,684.037 1469.64,684.037 1470.2,684.037 1470.76,684.037 1471.32,684.037 1471.88,684.037 1472.44,684.037 1473,684.037 1473.56,684.037 1474.12,684.037 1474.68,684.037 1475.24,684.037 1475.79,684.037 1476.35,684.037 1476.91,684.037 1477.47,684.037 1478.03,684.037 1478.59,684.037 1479.15,684.037 1479.71,684.037 1480.27,684.037 1480.83,684.037 1481.39,684.037 1481.95,684.037 1482.51,684.037 1483.07,684.037 1483.62,684.037 1484.18,684.037 1484.74,684.037 1485.3,684.037 1485.86,684.037 1486.42,684.037 1486.98,684.037 1487.54,684.037 1488.1,684.037 1488.66,684.037 1489.22,684.037 1489.78,684.037 1490.34,684.037 1490.89,684.037 1491.45,684.037 1492.01,684.037 1492.57,684.037 1493.13,684.037 1493.69,684.037 1494.25,684.037 1494.81,684.037 1495.37,684.037 1495.93,684.037 1496.49,684.037 1497.05,684.037 1497.61,684.037 1498.16,684.037 1498.72,684.037 1499.28,684.037 1499.84,684.037 1500.4,684.037 1500.96,684.037 1501.52,684.037 1502.08,684.037 1502.64,684.037 1503.2,684.037 1503.76,684.037 1504.32,684.037 1504.88,684.037 1505.44,684.037 1505.99,684.037 1506.55,684.037 1507.11,684.037 1507.67,684.037 1508.23,684.037 1508.79,684.037 1509.35,684.037 1509.91,684.037 1510.47,684.037 1511.03,684.037 1511.59,684.037 1512.15,684.037 1512.71,684.037 1513.26,684.037 1513.82,684.037 1514.38,684.037 1514.94,684.037 1515.5,684.037 1516.06,684.037 1516.62,684.037 1517.18,684.037 1517.74,684.037 1518.3,684.037 1518.86,684.037 1519.42,684.037 1519.98,684.037 1520.53,684.037 1521.09,684.037 1521.65,684.037 1522.21,684.037 1522.77,684.037 1523.33,684.037 1523.89,684.037 1524.45,684.037 1525.01,684.037 1525.57,684.037 1526.13,684.037 1526.69,684.037 1527.25,684.037 1527.81,684.037 1528.36,684.037 1528.92,684.037 1529.48,684.037 1530.04,684.037 1530.6,684.037 1531.16,684.037 1531.72,684.037 1532.28,684.037 1532.84,684.037 1533.4,684.037 1533.96,684.037 1534.52,684.037 1535.08,684.037 1535.63,684.037 1536.19,684.037 1536.75,684.037 1537.31,684.037 1537.87,684.037 1538.43,684.037 1538.99,684.037 1539.55,684.037 1540.11,684.037 1540.67,684.037 1541.23,684.037 1541.79,684.037 1542.35,684.037 1542.9,684.037 1543.46,684.037 1544.02,684.037 1544.58,684.037 1545.14,684.037 1545.7,684.037 1546.26,684.037 1546.82,684.037 1547.38,684.037 1547.94,684.037 1548.5,684.037 1549.06,684.037 1549.62,684.037 1550.18,684.037 1550.73,684.037 1551.29,684.037 1551.85,684.037 1552.41,684.037 1552.97,684.037 1553.53,684.037 1554.09,684.037 1554.65,684.037 1555.21,684.037 1555.77,684.037 1556.33,684.037 1556.89,684.037 1557.45,684.037 1558,684.037 1558.56,684.037 1559.12,684.037 1559.68,684.037 1560.24,684.037 1560.8,684.037 1561.36,684.037 1561.92,684.037 1562.48,684.037 1563.04,684.037 1563.6,684.037 1564.16,684.037 1564.72,684.037 1565.28,684.037 1565.83,684.037 1566.39,684.037 1566.95,684.037 1567.51,684.037 1568.07,684.037 1568.63,684.037 1569.19,684.037 1569.75,684.037 1570.31,684.037 1570.87,684.037 1571.43,684.037 1571.99,684.037 1572.55,684.037 1573.1,684.037 1573.66,684.037 1574.22,684.037 1574.78,684.037 1575.34,684.037 1575.9,684.037 1576.46,684.037 1577.02,684.037 1577.58,684.037 1578.14,684.037 1578.7,684.037 1579.26,684.037 1579.82,684.037 1580.37,684.037 1580.93,684.037 1581.49,684.037 1582.05,684.037 1582.61,684.037 1583.17,684.037 1583.73,684.037 1584.29,684.037 1584.85,684.037 1585.41,684.037 1585.97,684.037 1586.53,684.037 1587.09,684.037 1587.65,684.037 1588.2,684.037 1588.76,684.037 1589.32,684.037 1589.88,684.037 1590.44,684.037 1591,684.037 1591.56,684.037 1592.12,684.037 1592.68,684.037 1593.24,684.037 1593.8,684.037 1594.36,684.037 1594.92,684.037 1595.47,684.037 1596.03,684.037 1596.59,684.037 1597.15,684.037 1597.71,684.037 1598.27,684.037 1598.83,684.037 1599.39,684.037 1599.95,684.037 1600.51,684.037 1601.07,684.037 1601.63,684.037 1602.19,684.037 1602.74,684.037 1603.3,684.037 1603.86,684.037 1604.42,684.037 1604.98,684.037 1605.54,684.037 1606.1,684.037 1606.66,684.037 1607.22,684.037 1607.78,684.037 1608.34,684.037 1608.9,684.037 1609.46,684.037 1610.02,684.037 1610.57,684.037 1611.13,684.037 1611.69,684.037 1612.25,684.037 1612.81,684.037 1613.37,684.037 1613.93,684.037 1614.49,684.037 1615.05,684.037 1615.61,684.037 1616.17,684.037 1616.73,684.037 1617.29,684.037 1617.84,684.037 1618.4,684.037 1618.96,684.037 1619.52,684.037 1620.08,684.037 1620.64,684.037 1621.2,684.037 1621.76,684.037 1622.32,684.037 1622.88,684.037 1623.44,684.037 1624,684.037 1624.56,684.037 1625.11,684.037 1625.67,684.037 1626.23,684.037 1626.79,684.037 1627.35,684.037 1627.91,684.037 1628.47,684.037 1629.03,684.037 1629.59,684.037 1630.15,684.037 1630.71,684.037 1631.27,684.037 1631.83,684.037 1632.39,684.037 1632.94,684.037 1633.5,684.037 1634.06,684.037 1634.62,684.037 1635.18,684.037 1635.74,684.037 1636.3,684.037 1636.86,684.037 1637.42,684.037 1637.98,684.037 1638.54,684.037 1639.1,684.037 1639.66,684.037 1640.21,684.037 1640.77,684.037 1641.33,684.037 1641.89,684.037 1642.45,684.037 1643.01,684.037 1643.57,684.037 1644.13,684.037 1644.69,684.037 1645.25,684.037 1645.81,684.037 1646.37,684.037 1646.93,684.037 1647.48,684.037 1648.04,684.037 1648.6,684.037 1649.16,684.037 1649.72,684.037 1650.28,684.037 1650.84,684.037 1651.4,684.037 1651.96,684.037 1652.52,684.037 1653.08,684.037 1653.64,684.037 1654.2,684.037 1654.76,684.037 1655.31,684.037 1655.87,684.037 1656.43,684.037 1656.99,684.037 1657.55,684.037 1658.11,684.037 1658.67,684.037 1659.23,684.037 1659.79,684.037 1660.35,684.037 1660.91,684.037 1661.47,684.037 1662.03,684.037 1662.58,684.037 1663.14,684.037 1663.7,684.037 1664.26,684.037 1664.82,684.037 1665.38,684.037 1665.94,684.037 1666.5,684.037 1667.06,684.037 1667.62,684.037 1668.18,684.037 1668.74,684.037 1669.3,684.037 1669.85,684.037 1670.41,684.037 1670.97,684.037 1671.53,684.037 1672.09,684.037 1672.65,684.037 1673.21,684.037 1673.77,684.037 1674.33,684.037 1674.89,684.037 1675.45,684.037 1676.01,684.037 1676.57,684.037 1677.13,684.037 1677.68,684.037 1678.24,684.037 1678.8,684.037 1679.36,684.037 1679.92,684.037 1680.48,684.037 1681.04,684.037 1681.6,684.037 1682.16,684.037 1682.72,684.037 1683.28,684.037 1683.84,684.037 1684.4,684.037 1684.95,684.037 1685.51,684.037 1686.07,684.037 1686.63,684.037 1687.19,684.037 1687.75,684.037 1688.31,684.037 1688.87,684.037 1689.43,684.037 1689.99,684.037 1690.55,684.037 1691.11,684.037 1691.67,684.037 1692.23,684.037 1692.78,684.037 1693.34,684.037 1693.9,684.037 1694.46,684.037 1695.02,684.037 1695.58,684.037 1696.14,684.037 1696.7,684.037 1697.26,684.037 1697.82,684.037 1698.38,684.037 1698.94,684.037 1699.5,684.037 1700.05,684.037 1700.61,684.037 1701.17,684.037 1701.73,684.037 1702.29,684.037 1702.85,684.037 1703.41,684.037 1703.97,684.037 1704.53,684.037 1705.09,684.037 1705.65,684.037 1706.21,684.037 1706.77,684.037 1707.32,684.037 1707.88,684.037 1708.44,684.037 1709,684.037 1709.56,684.037 1710.12,684.037 1710.68,684.037 1711.24,684.037 1711.8,684.037 1712.36,684.037 1712.92,684.037 1713.48,684.037 1714.04,684.037 1714.6,684.037 1715.15,684.037 1715.71,684.037 1716.27,684.037 1716.83,684.037 1717.39,684.037 1717.95,684.037 1718.51,684.037 1719.07,684.037 1719.63,684.037 1720.19,684.037 1720.75,684.037 1721.31,684.037 1721.87,684.037 1722.42,684.037 1722.98,684.037 1723.54,684.037 1724.1,684.037 1724.66,684.037 1725.22,684.037 1725.78,684.037 1726.34,684.037 1726.9,684.037 1727.46,684.037 1728.02,684.037 1728.58,684.037 1729.14,684.037 1729.69,684.037 1730.25,684.037 1730.81,684.037 1731.37,684.037 1731.93,684.037 1732.49,684.037 1733.05,684.037 1733.61,684.037 1734.17,684.037 1734.73,684.037 1735.29,684.037 1735.85,684.037 1736.41,684.037 1736.97,684.037 1737.52,684.037 1738.08,684.037 1738.64,684.037 1739.2,684.037 1739.76,684.037 1740.32,684.037 1740.88,684.037 1741.44,684.037 1742,684.037 1742.56,684.037 1743.12,684.037 1743.68,684.037 1744.24,684.037 1744.79,684.037 1745.35,684.037 1745.91,684.037 1746.47,684.037 1747.03,684.037 1747.59,684.037 1748.15,684.037 1748.71,684.037 1749.27,684.037 1749.83,684.037 1750.39,684.037 1750.95,684.037 1751.51,684.037 1752.06,684.037 1752.62,684.037 1753.18,684.037 1753.74,684.037 1754.3,684.037 1754.86,684.037 1755.42,684.037 1755.98,684.037 1756.54,684.037 1757.1,684.037 1757.66,684.037 1758.22,684.037 1758.78,684.037 1759.34,684.037 1759.89,684.037 1760.45,684.037 1761.01,684.037 1761.57,684.037 1762.13,684.037 1762.69,684.037 1763.25,684.037 1763.81,684.037 1764.37,684.037 1764.93,684.037 1765.49,684.037 1766.05,684.037 1766.61,684.037 1767.16,684.037 1767.72,684.037 1768.28,684.037 1768.84,684.037 1769.4,684.037 1769.96,684.037 1770.52,684.037 1771.08,684.037 1771.64,684.037 1772.2,684.037 1772.76,684.037 1773.32,684.037 1773.88,684.037 1774.43,684.037 1774.99,684.037 1775.55,684.037 1776.11,684.037 1776.67,684.037 1777.23,684.037 1777.79,684.037 1778.35,684.037 1778.91,684.037 1779.47,684.037 1780.03,684.037 1780.59,684.037 1781.15,684.037 1781.71,684.037 1782.26,684.037 1782.82,684.037 1783.38,684.037 1783.94,684.037 1784.5,684.037 1785.06,684.037 1785.62,684.037 1786.18,684.037 1786.74,684.037 1787.3,684.037 1787.86,684.037 1788.42,684.037 1788.98,684.037 1789.53,684.037 1790.09,684.037 1790.65,684.037 1791.21,684.037 1791.77,684.037 1792.33,684.037 1792.89,684.037 1793.45,684.037 1794.01,684.037 1794.57,684.037 1795.13,684.037 1795.69,684.037 1796.25,684.037 1796.8,684.037 1797.36,684.037 1797.92,684.037 1798.48,684.037 1799.04,684.037 1799.6,684.037 1800.16,684.037 1800.72,684.037 1801.28,684.037 1801.84,684.037 1802.4,684.037 1802.96,684.037 1803.52,684.037 1804.08,684.037 1804.63,684.037 1805.19,684.037 1805.75,684.037 1806.31,684.037 1806.87,684.037 1807.43,684.037 1807.99,684.037 1808.55,684.037 1809.11,684.037 1809.67,684.037 1810.23,684.037 1810.79,684.037 1811.35,684.037 1811.9,684.037 1812.46,684.037 1813.02,684.037 1813.58,684.037 1814.14,684.037 1814.7,684.037 1815.26,684.037 1815.82,684.037 1816.38,684.037 1816.94,684.037 1817.5,684.037 1818.06,684.037 1818.62,684.037 1819.18,684.037 1819.73,684.037 1820.29,684.037 1820.85,684.037 1821.41,684.037 1821.97,684.037 1822.53,684.037 1823.09,684.037 1823.65,684.037 1824.21,684.037 1824.77,684.037 1825.33,684.037 1825.89,684.037 1826.45,684.037 1827,684.037 1827.56,684.037 1828.12,684.037 1828.68,684.037 1829.24,684.037 1829.8,684.037 1830.36,684.037 1830.92,684.037 1831.48,684.037 1832.04,684.037 1832.6,684.037 1833.16,684.037 1833.72,684.037 1834.27,684.037 1834.83,684.037 1835.39,684.037 1835.95,684.037 1836.51,684.037 1837.07,684.037 1837.63,684.037 1838.19,684.037 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.020733187897978 ± 0.022702968455574138\nProjected Energy: -4.017359603257529 ± (0.005679491817635274, 0.005711414505775281)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.520182</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4057e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2874e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.033e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.312e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.825e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.428e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133797\n -0.7590191922770817\n  0.13584182219622676\n  0.15789998694608265\n  0.8767114411781414\n  1.5305929970973313\n  1.5835732611867401\n  3.072870330325869\n  3.125672653951832\n  4.862107221562169\n  6.260694850380588\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Hermitian{ELTYPE, Matrix{ELTYPE}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1; ELTYPE=Float64)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2; ELTYPE=Float64)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
