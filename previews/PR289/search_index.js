var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21158416053131998 ± 0.0015905076448377757\n   G2(1) = 0.9183371717734768 ± 0.0006817813898569626\n   G2(2) = 0.9819674395470384 ± 0.0005952612457316507\n   G2(3) = 0.9878066168276493 ± 0.000926234500400284\n   G2(4) = 0.9819674395470384 ± 0.0005952612457316507\n   G2(5) = 0.9183371717734768 ± 0.0006817813898569626\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.978015009077548 ± 0.14798290382525275\n   Replica 2: -4.0213778753078415 ± 0.1417232207901015\n   Replica 3: -4.001189735392837 ± 0.13233967494303686\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip580\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip581\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip582\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.17 2211.02,1003.17 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.498 2211.02,745.498 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.83 2211.02,487.83 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.162 2211.02,230.162 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.17 423.181,1003.17 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.498 423.181,745.498 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.83 423.181,487.83 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.162 423.181,230.162 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M290.043 1016.51 L306.363 1016.51 L306.363 1020.45 L284.418 1020.45 L284.418 1016.51 Q287.08 1013.76 291.664 1009.13 Q296.27 1004.47 297.451 1003.13 Q299.696 1000.61 300.576 998.873 Q301.478 997.114 301.478 995.424 Q301.478 992.669 299.534 990.933 Q297.613 989.197 294.511 989.197 Q292.312 989.197 289.858 989.961 Q287.427 990.725 284.65 992.276 L284.65 987.554 Q287.474 986.419 289.927 985.841 Q292.381 985.262 294.418 985.262 Q299.789 985.262 302.983 987.947 Q306.177 990.632 306.177 995.123 Q306.177 997.253 305.367 999.174 Q304.58 1001.07 302.474 1003.66 Q301.895 1004.34 298.793 1007.55 Q295.691 1010.75 290.043 1016.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M316.224 985.887 L334.58 985.887 L334.58 989.822 L320.506 989.822 L320.506 998.294 Q321.524 997.947 322.543 997.785 Q323.562 997.6 324.58 997.6 Q330.367 997.6 333.747 1000.77 Q337.126 1003.94 337.126 1009.36 Q337.126 1014.94 333.654 1018.04 Q330.182 1021.12 323.862 1021.12 Q321.687 1021.12 319.418 1020.75 Q317.173 1020.38 314.765 1019.64 L314.765 1014.94 Q316.849 1016.07 319.071 1016.63 Q321.293 1017.18 323.77 1017.18 Q327.774 1017.18 330.112 1015.08 Q332.45 1012.97 332.45 1009.36 Q332.45 1005.75 330.112 1003.64 Q327.774 1001.53 323.77 1001.53 Q321.895 1001.53 320.02 1001.95 Q318.168 1002.37 316.224 1003.25 L316.224 985.887 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 988.966 Q352.728 988.966 350.899 992.53 Q349.094 996.072 349.094 1003.2 Q349.094 1010.31 350.899 1013.87 Q352.728 1017.41 356.339 1017.41 Q359.973 1017.41 361.779 1013.87 Q363.608 1010.31 363.608 1003.2 Q363.608 996.072 361.779 992.53 Q359.973 988.966 356.339 988.966 M356.339 985.262 Q362.149 985.262 365.205 989.868 Q368.284 994.452 368.284 1003.2 Q368.284 1011.93 365.205 1016.53 Q362.149 1021.12 356.339 1021.12 Q350.529 1021.12 347.45 1016.53 Q344.395 1011.93 344.395 1003.2 Q344.395 994.452 347.45 989.868 Q350.529 985.262 356.339 985.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M286.062 728.218 L304.418 728.218 L304.418 732.154 L290.344 732.154 L290.344 740.626 Q291.363 740.279 292.381 740.117 Q293.4 739.931 294.418 739.931 Q300.205 739.931 303.585 743.103 Q306.964 746.274 306.964 751.691 Q306.964 757.269 303.492 760.371 Q300.02 763.45 293.701 763.45 Q291.525 763.45 289.256 763.079 Q287.011 762.709 284.603 761.968 L284.603 757.269 Q286.687 758.404 288.909 758.959 Q291.131 759.515 293.608 759.515 Q297.613 759.515 299.951 757.408 Q302.288 755.302 302.288 751.691 Q302.288 748.079 299.951 745.973 Q297.613 743.867 293.608 743.867 Q291.733 743.867 289.858 744.283 Q288.006 744.7 286.062 745.58 L286.062 728.218 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M326.177 731.297 Q322.566 731.297 320.737 734.862 Q318.932 738.404 318.932 745.533 Q318.932 752.64 320.737 756.204 Q322.566 759.746 326.177 759.746 Q329.811 759.746 331.617 756.204 Q333.446 752.64 333.446 745.533 Q333.446 738.404 331.617 734.862 Q329.811 731.297 326.177 731.297 M326.177 727.593 Q331.987 727.593 335.043 732.2 Q338.122 736.783 338.122 745.533 Q338.122 754.26 335.043 758.866 Q331.987 763.45 326.177 763.45 Q320.367 763.45 317.288 758.866 Q314.233 754.26 314.233 745.533 Q314.233 736.783 317.288 732.2 Q320.367 727.593 326.177 727.593 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 731.297 Q352.728 731.297 350.899 734.862 Q349.094 738.404 349.094 745.533 Q349.094 752.64 350.899 756.204 Q352.728 759.746 356.339 759.746 Q359.973 759.746 361.779 756.204 Q363.608 752.64 363.608 745.533 Q363.608 738.404 361.779 734.862 Q359.973 731.297 356.339 731.297 M356.339 727.593 Q362.149 727.593 365.205 732.2 Q368.284 736.783 368.284 745.533 Q368.284 754.26 365.205 758.866 Q362.149 763.45 356.339 763.45 Q350.529 763.45 347.45 758.866 Q344.395 754.26 344.395 745.533 Q344.395 736.783 347.45 732.2 Q350.529 727.593 356.339 727.593 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M284.835 470.55 L307.057 470.55 L307.057 472.541 L294.511 505.11 L289.627 505.11 L301.432 474.485 L284.835 474.485 L284.835 470.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M316.224 470.55 L334.58 470.55 L334.58 474.485 L320.506 474.485 L320.506 482.957 Q321.524 482.61 322.543 482.448 Q323.562 482.263 324.58 482.263 Q330.367 482.263 333.747 485.434 Q337.126 488.606 337.126 494.022 Q337.126 499.601 333.654 502.703 Q330.182 505.781 323.862 505.781 Q321.687 505.781 319.418 505.411 Q317.173 505.041 314.765 504.3 L314.765 499.601 Q316.849 500.735 319.071 501.291 Q321.293 501.846 323.77 501.846 Q327.774 501.846 330.112 499.74 Q332.45 497.633 332.45 494.022 Q332.45 490.411 330.112 488.305 Q327.774 486.198 323.77 486.198 Q321.895 486.198 320.02 486.615 Q318.168 487.031 316.224 487.911 L316.224 470.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 473.629 Q352.728 473.629 350.899 477.194 Q349.094 480.735 349.094 487.865 Q349.094 494.971 350.899 498.536 Q352.728 502.078 356.339 502.078 Q359.973 502.078 361.779 498.536 Q363.608 494.971 363.608 487.865 Q363.608 480.735 361.779 477.194 Q359.973 473.629 356.339 473.629 M356.339 469.925 Q362.149 469.925 365.205 474.532 Q368.284 479.115 368.284 487.865 Q368.284 496.592 365.205 501.198 Q362.149 505.781 356.339 505.781 Q350.529 505.781 347.45 501.198 Q344.395 496.592 344.395 487.865 Q344.395 479.115 347.45 474.532 Q350.529 469.925 356.339 469.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M256.664 243.507 L264.303 243.507 L264.303 217.141 L255.992 218.808 L255.992 214.548 L264.256 212.882 L268.932 212.882 L268.932 243.507 L276.571 243.507 L276.571 247.442 L256.664 247.442 L256.664 243.507 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M296.015 215.96 Q292.404 215.96 290.576 219.525 Q288.77 223.067 288.77 230.196 Q288.77 237.303 290.576 240.868 Q292.404 244.409 296.015 244.409 Q299.65 244.409 301.455 240.868 Q303.284 237.303 303.284 230.196 Q303.284 223.067 301.455 219.525 Q299.65 215.96 296.015 215.96 M296.015 212.257 Q301.826 212.257 304.881 216.863 Q307.96 221.446 307.96 230.196 Q307.96 238.923 304.881 243.53 Q301.826 248.113 296.015 248.113 Q290.205 248.113 287.127 243.53 Q284.071 238.923 284.071 230.196 Q284.071 221.446 287.127 216.863 Q290.205 212.257 296.015 212.257 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M326.177 215.96 Q322.566 215.96 320.737 219.525 Q318.932 223.067 318.932 230.196 Q318.932 237.303 320.737 240.868 Q322.566 244.409 326.177 244.409 Q329.811 244.409 331.617 240.868 Q333.446 237.303 333.446 230.196 Q333.446 223.067 331.617 219.525 Q329.811 215.96 326.177 215.96 M326.177 212.257 Q331.987 212.257 335.043 216.863 Q338.122 221.446 338.122 230.196 Q338.122 238.923 335.043 243.53 Q331.987 248.113 326.177 248.113 Q320.367 248.113 317.288 243.53 Q314.233 238.923 314.233 230.196 Q314.233 221.446 317.288 216.863 Q320.367 212.257 326.177 212.257 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 215.96 Q352.728 215.96 350.899 219.525 Q349.094 223.067 349.094 230.196 Q349.094 237.303 350.899 240.868 Q352.728 244.409 356.339 244.409 Q359.973 244.409 361.779 240.868 Q363.608 237.303 363.608 230.196 Q363.608 223.067 361.779 219.525 Q359.973 215.96 356.339 215.96 M356.339 212.257 Q362.149 212.257 365.205 216.863 Q368.284 221.446 368.284 230.196 Q368.284 238.923 365.205 243.53 Q362.149 248.113 356.339 248.113 Q350.529 248.113 347.45 243.53 Q344.395 238.923 344.395 230.196 Q344.395 221.446 347.45 216.863 Q350.529 212.257 356.339 212.257 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip582)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.162 4017.76,230.162 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.08 459.396,1247.64 459.964,1247.09 460.533,1246.51 461.101,1245.85 461.669,1244.09 462.238,1243.29 462.806,1242.39 463.375,1241.42 463.943,1240.35 464.511,1239.18 465.08,1236.88 465.648,1235.54 466.216,1234.07 466.785,1232.48 467.353,1230.77 467.921,1228.92 468.49,1226.95 469.058,1223.79 469.626,1220.44 470.195,1217.96 470.763,1214.3 471.331,1211.47 471.9,1207.45 472.468,1203.15 473.036,1198.79 473.605,1194.14 474.173,1190.3 474.741,1186.3 475.31,1181.09 475.878,1175.54 476.446,1170.9 477.015,1165.96 477.583,1159.84 478.152,1153.58 478.72,1146.1 479.288,1140.36 479.857,1133.24 480.425,1125.89 480.993,1118.49 481.562,1111.88 482.13,1105.03 482.698,1097.04 483.267,1089.85 483.835,1082.52 484.403,1074.99 484.972,1066.26 485.54,1057.37 486.108,1049.32 486.677,1040.03 487.245,1029.54 487.813,1021.06 488.382,1011.35 488.95,1001.48 489.518,991.416 490.087,981.192 490.655,971.896 491.224,962.468 491.792,951.931 492.36,940.228 492.929,928.491 493.497,916.829 494.065,905.156 494.634,892.43 495.202,881.787 495.77,871.259 496.339,861.694 496.907,849.129 497.475,837.629 498.044,827.126 498.612,816.652 499.18,805.087 499.749,795.776 500.317,785.329 500.885,774.98 501.454,761.61 502.022,751.458 502.59,741.433 503.159,731.4 503.727,719.453 504.295,710.637 504.864,698.832 505.432,686.173 506.001,675.805 506.569,666.619 507.137,654.468 507.706,646.707 508.274,635.903 508.842,628.548 509.411,619.109 509.979,611.843 510.547,602.634 511.116,594.394 511.684,586.279 512.252,578.318 512.821,570.424 513.389,562.662 513.957,553.984 514.526,545.645 515.094,538.236 515.662,532.16 516.231,524.089 516.799,516.275 517.367,506.534 517.936,492.857 518.504,488.071 519.072,482.337 519.641,476.757 520.209,468.034 520.778,461.683 521.346,457.565 521.914,451.479 522.483,446.645 523.051,443.868 523.619,437.876 524.188,433.085 524.756,429.397 525.324,423.587 525.893,419.109 526.461,413.668 527.029,408.492 527.598,405.547 528.166,402.399 528.734,398.257 529.303,395.432 529.871,390.363 530.439,387.669 531.008,384.145 531.576,381.344 532.144,374.428 532.713,372.013 533.281,369.475 533.85,364.871 534.418,361.416 534.986,359.267 535.555,355.956 536.123,353.828 536.691,350.605 537.26,347.378 537.828,345.407 538.396,342.455 538.965,339.567 539.533,336.945 540.101,334.31 540.67,332.637 541.238,330.141 541.806,327.507 542.375,324.03 542.943,321.657 543.511,317.468 544.08,316.337 544.648,315.274 545.216,313.138 545.785,310.991 546.353,308.959 546.921,309.053 547.49,309.831 548.058,306.546 548.627,304.445 549.195,303.594 549.763,303.63 550.332,299.541 550.9,298.585 551.468,298.818 552.037,296.915 552.605,297.07 553.173,297.188 553.742,296.901 554.31,295.496 554.878,294.176 555.447,292.805 556.015,292.644 556.583,290.468 557.152,287.479 557.72,284.476 558.288,280.736 558.857,277.274 559.425,277.005 559.993,278.736 560.562,275.945 561.13,276.722 561.698,275.278 562.267,273.983 562.835,272.568 563.404,271.921 563.972,272.739 564.54,272.637 565.109,271.023 565.677,270.675 566.245,269.137 566.814,269.774 567.382,269.204 567.95,267.832 568.519,266.159 569.087,262.751 569.655,263.669 570.224,261.349 570.792,260.146 571.36,260.174 571.929,260.152 572.497,262.015 573.065,260.573 573.634,260.402 574.202,259.144 574.77,260.078 575.339,257.788 575.907,258.742 576.476,257.61 577.044,256.516 577.612,256.354 578.181,254.575 578.749,252.65 579.317,251.764 579.886,251.982 580.454,251.331 581.022,252.54 581.591,252.598 582.159,252.517 582.727,251.716 583.296,250.7 583.864,249.672 584.432,246.877 585.001,246.336 585.569,247.633 586.137,246.961 586.706,245.403 587.274,247.882 587.842,248.078 588.411,247.068 588.979,249.241 589.547,249.162 590.116,247.374 590.684,244.47 591.253,242.738 591.821,243.304 592.389,243.771 592.958,243.994 593.526,244.273 594.094,244.464 594.663,246.877 595.231,246.822 595.799,248.013 596.368,248.051 596.936,248.035 597.504,247.127 598.073,245.913 598.641,247.034 599.209,247.01 599.778,243.97 600.346,242.928 600.914,244.273 601.483,244.271 602.051,245.345 602.619,246.256 603.188,246.216 603.756,245.14 604.325,244.808 604.893,244.973 605.461,245.124 606.03,246.097 606.598,246.044 607.166,247.092 607.735,246.812 608.303,245.343 608.871,248.411 609.44,248.106 610.008,246.691 610.576,246.463 611.145,245.105 611.713,246.985 612.281,249.709 612.85,245.97 613.418,247.722 613.986,246.197 614.555,243.653 615.123,242.457 615.691,242.19 616.26,243.01 616.828,241.931 617.396,240.834 617.965,242.944 618.533,242.633 619.102,241.466 619.67,238.385 620.238,238.643 620.807,237.733 621.375,237.688 621.943,236.889 622.512,237.058 623.08,236.091 623.648,237.503 624.217,234.725 624.785,236.03 625.353,238.131 625.922,239.173 626.49,240.126 627.058,238.761 627.627,238.708 628.195,239.734 628.763,240.608 629.332,240.566 629.9,238.355 630.468,237.369 631.037,237.342 631.605,235.44 632.173,235.784 632.742,235.094 633.31,235.254 633.879,234.615 634.447,234.09 635.015,233.49 635.584,234.915 636.152,237.273 636.72,236.355 637.289,238.487 637.857,239.376 638.425,241.56 638.994,239.476 639.562,239.273 640.13,240.25 640.699,239.215 641.267,240.036 641.835,240.728 642.404,240.407 642.972,239.219 643.54,238.207 644.109,236.992 644.677,237.01 645.245,238.13 645.814,238.054 646.382,237.972 646.951,232.738 647.519,233.037 648.087,234.363 648.656,234.432 649.224,234.459 649.792,234.477 650.361,235.688 650.929,237.897 651.497,236.848 652.066,238.002 652.634,236.849 653.202,237.872 653.771,237.7 654.339,236.609 654.907,237.67 655.476,237.616 656.044,238.557 656.612,235.326 657.181,237.433 657.749,237.364 658.317,237.219 658.886,236.151 659.454,237.103 660.022,237.06 660.591,236.852 661.159,236.716 661.728,234.395 662.296,233.53 662.864,233.579 663.433,234.969 664.001,232.957 664.569,232.882 665.138,233.043 665.706,234.389 666.274,235.224 666.843,233.053 667.411,233.165 667.979,232.088 668.548,233.286 669.116,233.536 669.684,232.635 670.253,232.833 670.821,233.956 671.389,234.116 671.958,233.349 672.526,234.535 673.094,235.352 673.663,232.991 674.231,231.11 674.799,232.429 675.368,232.599 675.936,230.852 676.505,232.331 677.073,231.454 677.641,232.559 678.21,231.908 678.778,231.129 679.346,231.6 679.915,231.83 680.483,232.243 681.051,231.286 681.62,231.689 682.188,229.578 682.756,231.082 683.325,231.405 683.893,229.697 684.461,229.323 685.03,228.802 685.598,229.369 686.166,229.516 686.735,230.861 687.303,232.329 687.871,230.622 688.44,229.855 689.008,230.202 689.577,232.601 690.145,232.802 690.713,231.972 691.282,231.42 691.85,230.74 692.418,234.318 692.987,233.568 693.555,230.475 694.123,231.865 694.692,231.192 695.26,232.728 695.828,232.171 696.397,231.333 696.965,231.775 697.533,231.865 698.102,233.809 698.67,233.873 699.238,235.119 699.807,235.253 700.375,235.198 700.943,235.045 701.512,236.241 702.08,236.13 702.648,236.047 703.217,237.155 703.785,237.276 704.354,235.929 704.922,236.814 705.49,237.751 706.059,235.448 706.627,234.469 707.195,234.577 707.764,233.598 708.332,232.485 708.9,233.618 709.469,233.904 710.037,236.031 710.605,234.739 711.174,231.601 711.742,232.807 712.31,230.864 712.879,231.08 713.447,231.106 714.015,231.482 714.584,232.567 715.152,230.572 715.72,230.804 716.289,234.169 716.857,234.352 717.425,234.364 717.994,236.404 718.562,236.34 719.131,236.053 719.699,235.797 720.267,235.574 720.836,233.49 721.404,233.768 721.972,233.796 722.541,235.092 723.109,236.915 723.677,235.83 724.246,236.509 724.814,234.287 725.382,235.048 725.951,235.924 726.519,234.569 727.087,235.326 727.656,232.106 728.224,230.205 728.792,230.457 729.361,231.603 729.929,230.786 730.497,230.815 731.066,232.184 731.634,233.252 732.203,232.152 732.771,232.248 733.339,232.513 733.908,232.599 734.476,233.689 735.044,232.801 735.613,231.777 736.181,230.753 736.749,232.857 737.318,233 737.886,229.652 738.454,227.674 739.023,229.156 739.591,228.395 740.159,227.867 740.728,229.199 741.296,227.451 741.864,227.738 742.433,229.167 743.001,229.422 743.569,224.531 744.138,225.039 744.706,226.641 745.274,228.214 745.843,228.75 746.411,225.922 746.98,227.227 747.548,227.699 748.116,227.026 748.685,226.374 749.253,225.762 749.821,225.186 750.39,225.869 750.958,226.566 751.526,229.32 752.095,228.742 752.663,228.062 753.231,229.398 753.8,230.68 754.368,231.072 754.936,231.238 755.505,231.412 756.073,230.725 756.641,228.945 757.21,231.386 757.778,232.456 758.346,233.59 758.915,233.435 759.483,234.779 760.052,234.695 760.62,234.361 761.188,234.311 761.757,232.424 762.325,232.659 762.893,232.799 763.462,231.643 764.03,231.744 764.598,229.683 765.167,229.192 765.735,228.688 766.303,229.3 766.872,229.791 767.44,230.139 768.008,232.46 768.577,231.54 769.145,230.944 769.713,230.154 770.282,228.496 770.85,228.844 771.418,228.31 771.987,228.698 772.555,230.153 773.123,230.614 773.692,232.116 774.26,231.203 774.829,229.332 775.397,229.643 775.965,229.029 776.534,229.283 777.102,227.585 777.67,228.134 778.239,227.598 778.807,227.991 779.375,228.469 779.944,226.852 780.512,228.605 781.08,227.098 781.649,227.495 782.217,227.8 782.785,226.151 783.354,224.731 783.922,225.594 784.49,228.229 785.059,227.666 785.627,226.135 786.195,226.86 786.764,229.429 787.332,232.11 787.9,232.06 788.469,233.269 789.037,231.374 789.606,231.407 790.174,230.651 790.742,230.071 791.311,231.461 791.879,230.895 792.447,230.267 793.016,230.307 793.584,231.556 794.152,236.089 794.721,237.984 795.289,237.588 795.857,239.503 796.426,241.161 796.994,240.803 797.562,238.577 798.131,239.183 798.699,237.795 799.267,237.523 799.836,237.173 800.404,237.724 800.972,237.49 801.541,236.023 802.109,235.883 802.678,233.865 803.246,233.839 803.814,234.826 804.383,234.799 804.951,232.611 805.519,232.539 806.088,232.646 806.656,230.78 807.224,232.06 807.793,229.961 808.361,231.041 808.929,233.216 809.498,231.178 810.066,231.287 810.634,233.362 811.203,232.421 811.771,232.469 812.339,234.613 812.908,235.577 813.476,235.407 814.044,236.085 814.613,235 815.181,235.701 815.749,235.288 816.318,235.154 816.886,236.046 817.455,234.901 818.023,239.64 818.591,238.118 819.16,237.654 819.728,237.283 820.296,237.687 820.865,236.271 821.433,237.037 822.001,237.504 822.57,234.986 823.138,236.652 823.706,236.187 824.275,236.711 824.843,236.321 825.411,237.955 825.98,239.616 826.548,240.072 827.116,239.506 827.685,238.99 828.253,237.372 828.821,236.95 829.39,236.349 829.958,236.057 830.526,233.482 831.095,235.305 831.663,234.195 832.232,234.904 832.8,234.491 833.368,235.151 833.937,235.818 834.505,235.46 835.073,236.144 835.642,235.821 836.21,234.191 836.778,232.787 837.347,232.533 837.915,234.278 838.483,233.776 839.052,231.409 839.62,232.231 840.188,232.94 840.757,231.696 841.325,230.397 841.893,229.54 842.462,230.399 843.03,228.029 843.598,228.065 844.167,230.223 844.735,230.025 845.304,229.831 845.872,229.669 846.44,231.755 847.009,234.512 847.577,230.139 848.145,229.237 848.714,227.95 849.282,230.064 849.85,230.139 850.419,230.138 850.987,229.827 851.555,230.783 852.124,230.556 852.692,230.336 853.26,231.108 853.829,229.791 854.397,230.653 854.965,229.7 855.534,228.443 856.102,228.42 856.67,228.217 857.239,228.098 857.807,228.12 858.375,230.204 858.944,229.247 859.512,229.209 860.081,227.007 860.649,227.13 861.217,228.234 861.786,227.188 862.354,228.539 862.922,228.589 863.491,228.625 864.059,228.625 864.627,228.667 865.196,228.803 865.764,230.966 866.332,231.752 866.901,232.535 867.469,232.25 868.037,231.905 868.606,231.742 869.174,230.343 869.742,232.284 870.311,231.131 870.879,232.803 871.447,229.52 872.016,229.405 872.584,229.51 873.152,229.513 873.721,229.572 874.289,227.791 874.858,226.987 875.426,227.303 875.994,227.297 876.563,227.447 877.131,228.499 877.699,229.664 878.268,230.702 878.836,230.553 879.404,230.591 879.973,230.539 880.541,231.44 881.109,232.294 881.678,231.24 882.246,230.137 882.814,228.265 883.383,228.255 883.951,228.405 884.519,227.523 885.088,226.521 885.656,225.795 886.224,228.131 886.793,229.28 887.361,229.397 887.93,230.039 888.498,230.106 889.066,228.163 889.635,228.132 890.203,228.213 890.771,228.378 891.34,227.432 891.908,228.458 892.476,229.492 893.045,230.615 893.613,230.757 894.181,232.906 894.75,232.822 895.318,233.675 895.886,233.457 896.455,232.172 897.023,233.088 897.591,232.883 898.16,233.658 898.728,234.758 899.296,234.476 899.865,234.195 900.433,235.772 901.001,234.134 901.57,232.702 902.138,233.479 902.707,234.205 903.275,231.968 903.843,231.959 904.412,232.746 904.98,230.468 905.548,230.63 906.117,230.646 906.685,230.573 907.253,230.596 907.822,227.549 908.39,230.793 908.958,230.779 909.527,229.707 910.095,228.722 910.663,228.733 911.232,227.852 911.8,229.074 912.368,229.093 912.937,229.066 913.505,228.076 914.073,227.166 914.642,227.542 915.21,227.726 915.779,227.813 916.347,230.005 916.915,230.945 917.484,229.957 918.052,229.93 918.62,229.812 919.189,231.972 919.757,230.928 920.325,231.743 920.894,233.836 921.462,236.628 922.03,236.001 922.599,236.54 923.167,235.981 923.735,237.524 924.304,235.999 924.872,234.454 925.44,232.018 926.009,231.698 926.577,231.693 927.145,231.532 927.714,230.421 928.282,231.319 928.85,232.178 929.419,231.967 929.987,230.781 930.556,229.726 931.124,228.718 931.692,227.784 932.261,229.149 932.829,229.279 933.397,229.405 933.966,229.327 934.534,227.299 935.102,227.655 935.671,227.663 936.239,227.934 936.807,228.912 937.376,226.945 937.944,225.158 938.512,228.581 939.081,226.394 939.649,224.592 940.217,224.045 940.786,224.555 941.354,225.077 941.922,227.564 942.491,227.466 943.059,227.944 943.627,227.381 944.196,225.444 944.764,227.004 945.333,228.545 945.901,229.612 946.469,228.7 947.038,228.886 947.606,228.85 948.174,228.911 948.743,227.832 949.311,227.043 949.879,229.287 950.448,230.544 951.016,229.71 951.584,229.945 952.153,230.216 952.721,231.328 953.289,232.364 953.858,231.428 954.426,232.146 954.994,231.147 955.563,230.021 956.131,228.031 956.699,228.205 957.268,233.438 957.836,234.257 958.405,232.935 958.973,231.615 959.541,230.365 960.11,229.477 960.678,230.441 961.246,230.666 961.815,230.772 962.383,230.804 962.951,230.93 963.52,229.866 964.088,228.751 964.656,228.959 965.225,229.99 965.793,230.061 966.361,230.134 966.93,229.108 967.498,229.246 968.066,230.385 968.635,231.469 969.203,230.494 969.771,230.481 970.34,232.365 970.908,232.196 971.476,233.183 972.045,231.895 972.613,231.818 973.182,229.734 973.75,230.036 974.318,229.946 974.887,228.094 975.455,226.319 976.023,226.545 976.592,225.955 977.16,226.325 977.728,226.798 978.297,227.135 978.865,229.459 979.433,228.556 980.002,227.66 980.57,227.967 981.138,228.241 981.707,229.358 982.275,230.5 982.843,230.582 983.412,230.73 983.98,229.907 984.548,227.974 985.117,227.002 985.685,225.203 986.253,225.719 986.822,227.152 987.39,231.485 987.959,232.402 988.527,231.337 989.095,230.247 989.664,230.262 990.232,232.376 990.8,231.239 991.369,229.082 991.937,229.1 992.505,230.163 993.074,229.233 993.642,229.205 994.21,229.496 994.779,228.443 995.347,229.541 995.915,230.484 996.484,230.601 997.052,231.645 997.62,232.597 998.189,232.423 998.757,232.501 999.325,233.327 999.894,232.23 1000.46,232.178 1001.03,232.265 1001.6,233.105 1002.17,232.115 1002.74,232.077 1003.3,234.078 1003.87,231.475 1004.44,231.44 1005.01,230.229 1005.58,229.236 1006.15,230.33 1006.71,230.379 1007.28,230.331 1007.85,229.326 1008.42,231.33 1008.99,231.197 1009.56,231.325 1010.12,229.506 1010.69,228.622 1011.26,230.861 1011.83,230.823 1012.4,230.295 1012.97,230.255 1013.53,229.446 1014.1,230.514 1014.67,231.47 1015.24,231.388 1015.81,231.609 1016.38,230.883 1016.94,228.666 1017.51,229.987 1018.08,229.119 1018.65,230.286 1019.22,229.198 1019.79,230.497 1020.35,230.38 1020.92,231.449 1021.49,230.395 1022.06,231.738 1022.63,233.703 1023.2,234.577 1023.76,232.221 1024.33,232.261 1024.9,230.044 1025.47,231.198 1026.04,230.446 1026.61,229.351 1027.17,230.442 1027.74,230.401 1028.31,229.45 1028.88,230.528 1029.45,229.502 1030.02,229.629 1030.58,229.205 1031.15,229.464 1031.72,229.436 1032.29,228.47 1032.86,229.871 1033.43,228.957 1033.99,227.147 1034.56,226.475 1035.13,227.824 1035.7,228.08 1036.27,226.362 1036.84,227.733 1037.4,227.866 1037.97,224.308 1038.54,227.816 1039.11,226.124 1039.68,227.593 1040.25,228.753 1040.81,227.978 1041.38,227.344 1041.95,225.639 1042.52,226.092 1043.09,227.457 1043.66,226.98 1044.22,227.293 1044.79,228.787 1045.36,227.934 1045.93,227.255 1046.5,226.432 1047.07,227.866 1047.63,227.334 1048.2,228.965 1048.77,228.944 1049.34,230.111 1049.91,230.235 1050.48,230.631 1051.05,230.595 1051.61,232.594 1052.18,231.577 1052.75,231.726 1053.32,230.734 1053.89,232.063 1054.46,231.99 1055.02,230.008 1055.59,231.923 1056.16,230.814 1056.73,231.095 1057.3,233.206 1057.87,233.007 1058.43,231.998 1059,233.044 1059.57,232.849 1060.14,232.738 1060.71,231.794 1061.28,231.742 1061.84,231.689 1062.41,231.72 1062.98,231.419 1063.55,230.413 1064.12,230.755 1064.69,230.704 1065.25,231.886 1065.82,231.925 1066.39,230.849 1066.96,231.851 1067.53,230.899 1068.1,230.801 1068.66,233.851 1069.23,236.66 1069.8,237.361 1070.37,236.875 1070.94,236.391 1071.51,234.96 1072.07,235.635 1072.64,235.136 1073.21,233.858 1073.78,233.834 1074.35,231.813 1074.92,229.553 1075.48,230.549 1076.05,232.657 1076.62,231.368 1077.19,231.574 1077.76,233.376 1078.33,232.223 1078.89,230.875 1079.46,233.986 1080.03,234.763 1080.6,233.341 1081.17,231.129 1081.74,231.266 1082.3,232.167 1082.87,233.899 1083.44,233.447 1084.01,232.303 1084.58,232.083 1085.15,232.889 1085.71,234.463 1086.28,235.061 1086.85,236.902 1087.42,236.27 1087.99,235.896 1088.56,235.446 1089.12,236.027 1089.69,234.589 1090.26,235.062 1090.83,236.599 1091.4,232.932 1091.97,232.534 1092.53,233.381 1093.1,232.092 1093.67,233.545 1094.24,233.355 1094.81,231.973 1095.38,232.768 1095.94,232.433 1096.51,234.162 1097.08,233.637 1097.65,231.256 1098.22,230.825 1098.79,229.629 1099.35,230.649 1099.92,230.583 1100.49,230.49 1101.06,229.177 1101.63,227.017 1102.2,226.181 1102.76,227.381 1103.33,228.54 1103.9,227.459 1104.47,227.473 1105.04,227.416 1105.61,227.68 1106.17,226.707 1106.74,226.64 1107.31,224.929 1107.88,225.344 1108.45,227.851 1109.02,229.991 1109.58,228.849 1110.15,226.735 1110.72,228.868 1111.29,230.92 1111.86,229.544 1112.43,230.654 1112.99,233.648 1113.56,232.281 1114.13,233.27 1114.7,228.865 1115.27,229.995 1115.84,229.8 1116.4,228.811 1116.97,225.679 1117.54,227.001 1118.11,227.159 1118.68,226.377 1119.25,227.598 1119.81,229.81 1120.38,227.667 1120.95,227.806 1121.52,228.017 1122.09,229.097 1122.66,228.04 1123.23,229.452 1123.79,229.675 1124.36,228.535 1124.93,228.525 1125.5,228.62 1126.07,230.06 1126.64,230.099 1127.2,228.878 1127.77,230.109 1128.34,230.275 1128.91,230.272 1129.48,231.479 1130.05,231.344 1130.61,229.369 1131.18,228.382 1131.75,228.505 1132.32,229.624 1132.89,227.565 1133.46,228.584 1134.02,228.739 1134.59,229.923 1135.16,226.854 1135.73,229.051 1136.3,228.945 1136.87,226.661 1137.43,225.969 1138,224.242 1138.57,226.936 1139.14,227.124 1139.71,227.162 1140.28,228.582 1140.84,229.877 1141.41,232.133 1141.98,233.006 1142.55,233.715 1143.12,233.41 1143.69,236.211 1144.25,235.895 1144.82,235.515 1145.39,235.977 1145.96,235.438 1146.53,234.185 1147.1,233.97 1147.66,232.651 1148.23,233.588 1148.8,234.081 1149.37,232.567 1149.94,231.028 1150.51,233.078 1151.07,230.659 1151.64,231.433 1152.21,232.137 1152.78,232.82 1153.35,231.564 1153.92,230.348 1154.48,230.269 1155.05,231.171 1155.62,231.053 1156.19,231.906 1156.76,229.46 1157.33,229.604 1157.89,228.54 1158.46,227.519 1159.03,227.534 1159.6,226.721 1160.17,227.948 1160.74,228.057 1161.3,229.124 1161.87,229.067 1162.44,231.223 1163.01,231.144 1163.58,231.121 1164.15,230.944 1164.71,230.816 1165.28,230.741 1165.85,230.294 1166.42,230.162 1166.99,227.97 1167.56,228.194 1168.12,228.224 1168.69,228.434 1169.26,231.741 1169.83,230.452 1170.4,231.397 1170.97,233.22 1171.53,232.029 1172.1,231.83 1172.67,230.561 1173.24,231.441 1173.81,228.363 1174.38,227.548 1174.94,226.88 1175.51,226.884 1176.08,229.362 1176.65,229.236 1177.22,225.135 1177.79,226.551 1178.35,227.06 1178.92,225.175 1179.49,227.544 1180.06,227.691 1180.63,228.922 1181.2,232.182 1181.76,230.964 1182.33,230.869 1182.9,230.834 1183.47,231.986 1184.04,230.801 1184.61,233.666 1185.17,234.478 1185.74,233.205 1186.31,233.025 1186.88,232.057 1187.45,230.911 1188.02,229.01 1188.58,229.212 1189.15,230.395 1189.72,230.158 1190.29,231.116 1190.86,230.846 1191.43,231.747 1192,231.588 1192.56,232.704 1193.13,233.268 1193.7,231.798 1194.27,232.707 1194.84,233.57 1195.41,232.05 1195.97,229.866 1196.54,231.006 1197.11,231.781 1197.68,232.925 1198.25,233.604 1198.82,228.932 1199.38,230.95 1199.95,227.689 1200.52,229.722 1201.09,229.847 1201.66,228.647 1202.23,228.556 1202.79,229.635 1203.36,228.671 1203.93,228.545 1204.5,228.746 1205.07,228.899 1205.64,229.944 1206.2,229.995 1206.77,229.062 1207.34,229.04 1207.91,229.06 1208.48,228.053 1209.05,227.136 1209.61,226.545 1210.18,225.691 1210.75,226.238 1211.32,226.536 1211.89,224.76 1212.46,223.898 1213.02,224.496 1213.59,224.99 1214.16,225.423 1214.73,224.877 1215.3,226.259 1215.87,225.423 1216.43,226.686 1217,227.826 1217.57,228.937 1218.14,228.988 1218.71,229.051 1219.28,231.166 1219.84,228.262 1220.41,230.57 1220.98,229.781 1221.55,230.938 1222.12,229.893 1222.69,228.012 1223.25,226.38 1223.82,223.636 1224.39,225.365 1224.96,225.623 1225.53,227.166 1226.1,228.434 1226.66,231.674 1227.23,230.665 1227.8,230.822 1228.37,230.882 1228.94,231.719 1229.51,231.931 1230.07,230.861 1230.64,230.994 1231.21,230.984 1231.78,230.044 1232.35,229.373 1232.92,228.465 1233.48,229.778 1234.05,228.866 1234.62,227.797 1235.19,229.94 1235.76,228.954 1236.33,232.007 1236.89,230.145 1237.46,232.457 1238.03,230.447 1238.6,231.629 1239.17,232.86 1239.74,232.904 1240.3,232.834 1240.87,233.663 1241.44,236.629 1242.01,236.472 1242.58,235.875 1243.15,235.577 1243.71,235.258 1244.28,233.96 1244.85,232.502 1245.42,231.37 1245.99,233.54 1246.56,232.377 1247.12,232.148 1247.69,228.085 1248.26,230.268 1248.83,232.326 1249.4,233.136 1249.97,230.89 1250.53,232.106 1251.1,229.901 1251.67,231.933 1252.24,232.67 1252.81,232.618 1253.38,229.41 1253.94,230.598 1254.51,230.588 1255.08,231.948 1255.65,232.927 1256.22,233.596 1256.79,233.562 1257.35,234.375 1257.92,237.115 1258.49,235.634 1259.06,236.278 1259.63,234.607 1260.2,233.132 1260.76,232.857 1261.33,234.561 1261.9,232.192 1262.47,231.946 1263.04,231.954 1263.61,232.892 1264.18,232.806 1264.74,230.38 1265.31,230.498 1265.88,229.432 1266.45,228.325 1267.02,228.321 1267.59,229.635 1268.15,230.571 1268.72,229.403 1269.29,231.275 1269.86,230.947 1270.43,230.936 1271,232.009 1271.56,231.783 1272.13,233.669 1272.7,232.256 1273.27,229.889 1273.84,231.791 1274.41,231.645 1274.97,231.111 1275.54,228.779 1276.11,229.765 1276.68,229.767 1277.25,227.804 1277.82,228.953 1278.38,228.755 1278.95,228.58 1279.52,226.805 1280.09,227.801 1280.66,225.832 1281.23,227.163 1281.79,227.441 1282.36,226.745 1282.93,227.855 1283.5,228.881 1284.07,227.014 1284.64,227.212 1285.2,223.198 1285.77,224.657 1286.34,225.092 1286.91,223.381 1287.48,222.822 1288.05,222.243 1288.61,223.981 1289.18,224.38 1289.75,224.749 1290.32,226.273 1290.89,225.882 1291.46,227.397 1292.02,229.645 1292.59,228.894 1293.16,228.963 1293.73,227.108 1294.3,227.437 1294.87,226.739 1295.43,227.069 1296,228.129 1296.57,228.359 1297.14,228.413 1297.71,228.623 1298.28,229.897 1298.84,231.854 1299.41,230.79 1299.98,231.804 1300.55,230.555 1301.12,229.622 1301.69,228.71 1302.25,227.781 1302.82,228.2 1303.39,229.348 1303.96,228.182 1304.53,225.407 1305.1,222.704 1305.66,224.721 1306.23,224.058 1306.8,225.509 1307.37,227.017 1307.94,228.078 1308.51,228.202 1309.07,229.27 1309.64,229.521 1310.21,229.743 1310.78,229.849 1311.35,230.052 1311.92,229.301 1312.48,230.38 1313.05,230.599 1313.62,229.985 1314.19,233.117 1314.76,235.102 1315.33,234.905 1315.89,234.774 1316.46,234.482 1317.03,236.059 1317.6,236.801 1318.17,232.014 1318.74,234.026 1319.3,235.086 1319.87,233.768 1320.44,232.683 1321.01,233.708 1321.58,235.559 1322.15,235.048 1322.71,234.71 1323.28,236.627 1323.85,234.815 1324.42,235.542 1324.99,234.451 1325.56,235.399 1326.12,234.944 1326.69,236.461 1327.26,235.891 1327.83,235.447 1328.4,236.224 1328.97,235.657 1329.53,234.211 1330.1,234.044 1330.67,231.788 1331.24,230.667 1331.81,230.635 1332.38,231.596 1332.94,230.338 1333.51,229.092 1334.08,229.098 1334.65,229.29 1335.22,230.327 1335.79,231.158 1336.36,229.96 1336.92,228.719 1337.49,229.868 1338.06,228.808 1338.63,228.708 1339.2,228.765 1339.77,227.682 1340.33,228.737 1340.9,227.723 1341.47,228.847 1342.04,224.807 1342.61,222.904 1343.18,222.303 1343.74,225.998 1344.31,224.923 1344.88,225.411 1345.45,225.742 1346.02,226.136 1346.59,226.489 1347.15,228.87 1347.72,228.825 1348.29,228.911 1348.86,229.216 1349.43,229.273 1350,228.583 1350.56,227.654 1351.13,226.887 1351.7,226.894 1352.27,227.215 1352.84,226.514 1353.41,226.92 1353.97,225.058 1354.54,224.562 1355.11,224.929 1355.68,225.391 1356.25,226.023 1356.82,226.264 1357.38,226.558 1357.95,226.763 1358.52,227.049 1359.09,228.227 1359.66,228.221 1360.23,229.239 1360.79,229.308 1361.36,229.648 1361.93,225.518 1362.5,227.137 1363.07,226.62 1363.64,227.203 1364.2,226.323 1364.77,225.659 1365.34,225.996 1365.91,226.426 1366.48,228.862 1367.05,228.241 1367.61,227.416 1368.18,228.808 1368.75,228.701 1369.32,228.995 1369.89,233.309 1370.46,233.12 1371.02,233.978 1371.59,233.897 1372.16,232.898 1372.73,232.916 1373.3,234.815 1373.87,235.73 1374.43,238.6 1375,235.054 1375.57,235.656 1376.14,235.469 1376.71,235.113 1377.28,234.947 1377.84,232.781 1378.41,235.13 1378.98,234.943 1379.55,233.549 1380.12,232.256 1380.69,232.235 1381.25,229.888 1381.82,231.805 1382.39,232.659 1382.96,233.557 1383.53,231.141 1384.1,231.241 1384.66,232.348 1385.23,232.193 1385.8,232.16 1386.37,231.871 1386.94,231.987 1387.51,231.796 1388.07,233.979 1388.64,235.721 1389.21,237.412 1389.78,236.908 1390.35,236.492 1390.92,234.041 1391.48,233.83 1392.05,232.57 1392.62,230.471 1393.19,230.606 1393.76,233.594 1394.33,234.408 1394.89,238.145 1395.46,237.626 1396.03,235.014 1396.6,237.58 1397.17,235.987 1397.74,236.571 1398.3,236.091 1398.87,234.517 1399.44,236.03 1400.01,232.571 1400.58,233.411 1401.15,233.971 1401.71,232.593 1402.28,230.348 1402.85,230.156 1403.42,231.198 1403.99,232.064 1404.56,230.918 1405.13,229.776 1405.69,230.665 1406.26,230.507 1406.83,226.126 1407.4,225.071 1407.97,227.33 1408.54,227.331 1409.1,225.54 1409.67,224.939 1410.24,224.278 1410.81,222.697 1411.38,222.203 1411.95,222.516 1412.51,219.895 1413.08,220.532 1413.65,220.421 1414.22,221.063 1414.79,221.629 1415.36,220.101 1415.92,221.729 1416.49,223.298 1417.06,221.62 1417.63,221.287 1418.2,220.919 1418.77,222.699 1419.33,225.484 1419.9,223.936 1420.47,224.504 1421.04,225.075 1421.61,227.545 1422.18,226.889 1422.74,227.19 1423.31,226.412 1423.88,226.669 1424.45,227.886 1425.02,228.435 1425.59,228.712 1426.15,225.692 1426.72,224.042 1427.29,222.295 1427.86,223.858 1428.43,226.649 1429,228.097 1429.56,228.393 1430.13,228.54 1430.7,232.015 1431.27,232.07 1431.84,231.074 1432.41,231.081 1432.97,230.171 1433.54,229.933 1434.11,232.012 1434.68,232.028 1435.25,232.011 1435.82,230.807 1436.38,230.968 1436.95,230.028 1437.52,230.096 1438.09,229.19 1438.66,230.626 1439.23,230.657 1439.79,229.538 1440.36,231.902 1440.93,230.779 1441.5,231.753 1442.07,232.889 1442.64,233.701 1443.2,233.556 1443.77,233.506 1444.34,234.317 1444.91,234.172 1445.48,234.065 1446.05,235.687 1446.61,234.508 1447.18,234.22 1447.75,233.992 1448.32,232.732 1448.89,234.587 1449.46,236.364 1450.02,233.12 1450.59,230.01 1451.16,230.245 1451.73,231.568 1452.3,230.612 1452.87,229.799 1453.43,230.947 1454,230.889 1454.57,231.931 1455.14,233.8 1455.71,234.574 1456.28,234.358 1456.84,233.086 1457.41,232.807 1457.98,231.77 1458.55,231.508 1459.12,232.534 1459.69,233.448 1460.25,234.128 1460.82,231.984 1461.39,233.092 1461.96,231.963 1462.53,232.818 1463.1,231.514 1463.66,231.273 1464.23,232.146 1464.8,233.104 1465.37,232.973 1465.94,235.112 1466.51,233.629 1467.07,234.474 1467.64,234.072 1468.21,234.713 1468.78,235.188 1469.35,234.647 1469.92,236.299 1470.48,235.687 1471.05,234.229 1471.62,234.912 1472.19,234.536 1472.76,232.88 1473.33,232.633 1473.89,231.424 1474.46,231.223 1475.03,233.296 1475.6,230.991 1476.17,231.971 1476.74,230.775 1477.31,229.449 1477.87,228.192 1478.44,229.349 1479.01,231.296 1479.58,228.345 1480.15,230.38 1480.72,229.387 1481.28,230.253 1481.85,227.981 1482.42,227.298 1482.99,225.467 1483.56,225.787 1484.13,225.875 1484.69,227.06 1485.26,228.336 1485.83,228.4 1486.4,227.482 1486.97,228.622 1487.54,232.051 1488.1,230.771 1488.67,232.342 1489.24,230.149 1489.81,230.204 1490.38,228.947 1490.95,227.888 1491.51,227.957 1492.08,229.256 1492.65,228.386 1493.22,228.638 1493.79,229.701 1494.36,229.624 1494.92,228.691 1495.49,228.714 1496.06,229.704 1496.63,230.667 1497.2,229.667 1497.77,229.775 1498.33,230.868 1498.9,230.034 1499.47,228.861 1500.04,227.735 1500.61,230.047 1501.18,230.055 1501.74,230.151 1502.31,230.197 1502.88,230.204 1503.45,230.49 1504.02,231.506 1504.59,232.467 1505.15,230.224 1505.72,230.294 1506.29,232.356 1506.86,233.305 1507.43,233.164 1508,235.092 1508.56,235.796 1509.13,235.377 1509.7,235.897 1510.27,233.296 1510.84,234.821 1511.41,235.537 1511.97,235.199 1512.54,236.901 1513.11,234.229 1513.68,233.769 1514.25,233.505 1514.82,231.045 1515.38,230.805 1515.95,229.807 1516.52,230.726 1517.09,230.562 1517.66,232.617 1518.23,232.429 1518.79,232.258 1519.36,230.875 1519.93,230.74 1520.5,231.522 1521.07,231.406 1521.64,228.14 1522.2,227.193 1522.77,227.376 1523.34,227.577 1523.91,225.79 1524.48,225.048 1525.05,227.438 1525.61,227.661 1526.18,228.786 1526.75,226.628 1527.32,228.855 1527.89,228.791 1528.46,229.621 1529.02,227.451 1529.59,227.686 1530.16,227.895 1530.73,228.047 1531.3,229.149 1531.87,230.235 1532.43,230.137 1533,231.036 1533.57,231.849 1534.14,229.517 1534.71,230.443 1535.28,229.178 1535.84,229.181 1536.41,230.404 1536.98,228.239 1537.55,227.089 1538.12,224.285 1538.69,223.414 1539.25,224.699 1539.82,225.102 1540.39,226.464 1540.96,227.823 1541.53,229.359 1542.1,229.172 1542.66,231.064 1543.23,230.993 1543.8,231.818 1544.37,231.567 1544.94,232.379 1545.51,232.219 1546.08,229.917 1546.64,230.987 1547.21,228.872 1547.78,231.087 1548.35,231.872 1548.92,231.686 1549.49,232.431 1550.05,232.126 1550.62,233.168 1551.19,232.811 1551.76,233.492 1552.33,232.186 1552.9,232.958 1553.46,231.676 1554.03,230.55 1554.6,230.635 1555.17,229.391 1555.74,230.431 1556.31,230.32 1556.87,230.408 1557.44,232.527 1558.01,235.636 1558.58,234.951 1559.15,235.79 1559.72,236.341 1560.28,238.703 1560.85,236.995 1561.42,234.081 1561.99,234.63 1562.56,232.001 1563.13,230.499 1563.69,230.104 1564.26,229.883 1564.83,229.557 1565.4,227.522 1565.97,228.501 1566.54,225.273 1567.1,224.646 1567.67,224.826 1568.24,226.162 1568.81,228.399 1569.38,228.506 1569.95,227.497 1570.51,227.572 1571.08,227.644 1571.65,226.71 1572.22,226.767 1572.79,226.021 1573.36,224.005 1573.92,223.469 1574.49,222.757 1575.06,223.247 1575.63,223.693 1576.2,225.529 1576.77,226.818 1577.33,228.045 1577.9,230.464 1578.47,231.406 1579.04,229.324 1579.61,228.324 1580.18,227.418 1580.74,226.488 1581.31,225.97 1581.88,226.28 1582.45,227.783 1583.02,229.102 1583.59,230.331 1584.15,230.448 1584.72,231.32 1585.29,230.261 1585.86,230.24 1586.43,229.046 1587,229.144 1587.56,229.282 1588.13,229.28 1588.7,230.524 1589.27,231.232 1589.84,231.329 1590.41,234.402 1590.97,234.035 1591.54,233.822 1592.11,232.349 1592.68,232.159 1593.25,233.13 1593.82,235.129 1594.38,235.619 1594.95,235.129 1595.52,235.682 1596.09,234.254 1596.66,233.815 1597.23,233.502 1597.79,233.13 1598.36,230.679 1598.93,228.546 1599.5,228.746 1600.07,228.767 1600.64,228.729 1601.2,228.469 1601.77,228.716 1602.34,228.864 1602.91,229.014 1603.48,227.927 1604.05,227.19 1604.61,226.339 1605.18,225.428 1605.75,224.621 1606.32,225.171 1606.89,225.465 1607.46,224.785 1608.02,225.075 1608.59,225.627 1609.16,224.842 1609.73,226.371 1610.3,225.647 1610.87,223.987 1611.43,226.75 1612,228.052 1612.57,228.61 1613.14,228.833 1613.71,228.93 1614.28,229.257 1614.84,228.274 1615.41,225.438 1615.98,225.844 1616.55,225.325 1617.12,225.677 1617.69,227.948 1618.26,230.245 1618.82,232.337 1619.39,230.299 1619.96,231.321 1620.53,230.553 1621.1,231.723 1621.67,230.404 1622.23,228.546 1622.8,226.706 1623.37,225.989 1623.94,227.457 1624.51,227.817 1625.08,226.805 1625.64,227.148 1626.21,225.356 1626.78,226.711 1627.35,224.823 1627.92,223.371 1628.49,225.071 1629.05,222.351 1629.62,224.14 1630.19,224.598 1630.76,223.048 1631.33,223.784 1631.9,225.374 1632.46,225.909 1633.03,227.263 1633.6,225.485 1634.17,225.129 1634.74,226.78 1635.31,228.305 1635.87,229.819 1636.44,231.26 1637.01,231.328 1637.58,231.244 1638.15,232.009 1638.72,233.077 1639.28,235.126 1639.85,231.691 1640.42,232.719 1640.99,235.785 1641.56,234.455 1642.13,234.373 1642.69,233.278 1643.26,234.201 1643.83,231.793 1644.4,231.784 1644.97,232.777 1645.54,235.815 1646.1,237.64 1646.67,238.223 1647.24,241.746 1647.81,239.831 1648.38,240.939 1648.95,239.272 1649.51,238.835 1650.08,237.986 1650.65,237.664 1651.22,238.161 1651.79,238.775 1652.36,237.104 1652.92,235.525 1653.49,235.179 1654.06,235.962 1654.63,236.484 1655.2,236.947 1655.77,236.235 1656.33,235.755 1656.9,236.477 1657.47,235.93 1658.04,236.537 1658.61,235.916 1659.18,234.518 1659.74,233.307 1660.31,233.238 1660.88,232.859 1661.45,234.593 1662.02,234.532 1662.59,235.073 1663.15,231.623 1663.72,233.61 1664.29,233.226 1664.86,231.746 1665.43,228.48 1666,228.496 1666.56,228.376 1667.13,228.683 1667.7,225.781 1668.27,226.049 1668.84,227.129 1669.41,227.166 1669.97,226.053 1670.54,226.89 1671.11,224.749 1671.68,229.319 1672.25,228.377 1672.82,229.533 1673.38,228.635 1673.95,227.638 1674.52,228.708 1675.09,228.983 1675.66,228.127 1676.23,228.111 1676.79,227.309 1677.36,224.457 1677.93,223.836 1678.5,223.269 1679.07,223.741 1679.64,225.103 1680.2,227.413 1680.77,225.523 1681.34,226.059 1681.91,227.419 1682.48,228.555 1683.05,227.459 1683.61,227.665 1684.18,226.768 1684.75,227.167 1685.32,228.307 1685.89,229.469 1686.46,230.575 1687.02,230.659 1687.59,230.293 1688.16,229.417 1688.73,230.531 1689.3,231.449 1689.87,231.384 1690.44,230.343 1691,229.297 1691.57,227.555 1692.14,229.742 1692.71,229.73 1693.28,228.542 1693.85,230.591 1694.41,230.561 1694.98,231.506 1695.55,232.527 1696.12,232.163 1696.69,228.942 1697.26,230.202 1697.82,230.066 1698.39,230.251 1698.96,230.316 1699.53,228.387 1700.1,228.629 1700.67,227.557 1701.23,227.669 1701.8,227.751 1702.37,227.995 1702.94,231.448 1703.51,231.462 1704.08,230.504 1704.64,231.47 1705.21,233.193 1705.78,232.974 1706.35,231.547 1706.92,232.239 1707.49,231.166 1708.05,231.877 1708.62,231.562 1709.19,230.57 1709.76,229.433 1710.33,229.417 1710.9,228.511 1711.46,225.413 1712.03,228.008 1712.6,229.056 1713.17,229.312 1713.74,231.374 1714.31,233.483 1714.87,233.224 1715.44,233.975 1716.01,233.753 1716.58,233.526 1717.15,234.157 1717.72,233.93 1718.28,232.648 1718.85,231.644 1719.42,231.617 1719.99,231.292 1720.56,232.327 1721.13,234.238 1721.69,234.037 1722.26,235.818 1722.83,235.222 1723.4,234.969 1723.97,233.738 1724.54,233.602 1725.1,233.222 1725.67,234.29 1726.24,232.132 1726.81,231.978 1727.38,230.803 1727.95,230.75 1728.51,230.636 1729.08,231.511 1729.65,229.316 1730.22,228.315 1730.79,228.574 1731.36,228.783 1731.92,226.555 1732.49,227.756 1733.06,227.937 1733.63,227.036 1734.2,228.186 1734.77,229.327 1735.33,230.335 1735.9,231.346 1736.47,232.209 1737.04,233.297 1737.61,231.692 1738.18,233.503 1738.74,233.044 1739.31,231.676 1739.88,232.493 1740.45,230.224 1741.02,229.185 1741.59,229.216 1742.15,228.454 1742.72,230.718 1743.29,230.604 1743.86,230.652 1744.43,228.596 1745,229.902 1745.56,230.952 1746.13,229.894 1746.7,231.01 1747.27,230.967 1747.84,230.161 1748.41,231.239 1748.97,230.251 1749.54,229.249 1750.11,228.216 1750.68,229.231 1751.25,229.166 1751.82,229.089 1752.38,230.067 1752.95,230.174 1753.52,229.158 1754.09,228.159 1754.66,227.988 1755.23,231.274 1755.79,233.335 1756.36,232.972 1756.93,232.661 1757.5,233.529 1758.07,232.184 1758.64,233.957 1759.21,232.769 1759.77,231.472 1760.34,231.312 1760.91,235.268 1761.48,233.889 1762.05,232.8 1762.62,232.513 1763.18,230.064 1763.75,227.817 1764.32,229.981 1764.89,229.931 1765.46,230.047 1766.03,228.968 1766.59,229.659 1767.16,229.592 1767.73,228.369 1768.3,230.482 1768.87,230.412 1769.44,229.282 1770,229.232 1770.57,227.987 1771.14,229.036 1771.71,227.822 1772.28,229.886 1772.85,228.857 1773.41,229.084 1773.98,230.087 1774.55,230.954 1775.12,230.775 1775.69,228.651 1776.26,227.605 1776.82,230.916 1777.39,230.745 1777.96,228.597 1778.53,229.623 1779.1,229.659 1779.67,228.752 1780.23,229.791 1780.8,229.736 1781.37,231.762 1781.94,228.43 1782.51,228.317 1783.08,228.476 1783.64,228.406 1784.21,227.349 1784.78,227.301 1785.35,227.449 1785.92,225.62 1786.49,225.616 1787.05,226.141 1787.62,225.571 1788.19,224.906 1788.76,225.177 1789.33,226.85 1789.9,226.084 1790.46,226.312 1791.03,226.676 1791.6,226.966 1792.17,224.205 1792.74,223.588 1793.31,224.029 1793.87,223.452 1794.44,225.101 1795.01,224.413 1795.58,224.743 1796.15,227.048 1796.72,228.434 1797.28,227.85 1797.85,228.07 1798.42,227.412 1798.99,226.57 1799.56,226.987 1800.13,225.344 1800.69,227.87 1801.26,227.969 1801.83,230.216 1802.4,231.379 1802.97,226.346 1803.54,227.627 1804.1,231.005 1804.67,231.873 1805.24,229.892 1805.81,232.307 1806.38,230.131 1806.95,231.309 1807.51,231.342 1808.08,231.329 1808.65,231.193 1809.22,230.141 1809.79,228.12 1810.36,227.546 1810.92,227.823 1811.49,228.183 1812.06,227.333 1812.63,230.834 1813.2,234.053 1813.77,233.89 1814.33,234.764 1814.9,234.555 1815.47,233.503 1816.04,233.195 1816.61,231.918 1817.18,231.946 1817.74,232.74 1818.31,232.652 1818.88,234.371 1819.45,233.294 1820.02,232.019 1820.59,232.982 1821.15,233.994 1821.72,233.655 1822.29,232.442 1822.86,231.375 1823.43,232.411 1824,232.378 1824.56,234.419 1825.13,232.971 1825.7,232.727 1826.27,231.361 1826.84,230.26 1827.41,230.332 1827.97,230.209 1828.54,228.364 1829.11,227.591 1829.68,228.79 1830.25,229.947 1830.82,231.116 1831.39,233.238 1831.95,234.01 1832.52,233.828 1833.09,233.735 1833.66,234.483 1834.23,235.239 1834.8,236.158 1835.36,234.486 1835.93,235.119 1836.5,235.853 1837.07,237.464 1837.64,236.956 1838.21,236.434 1838.77,236.046 1839.34,235.514 1839.91,235.953 1840.48,237.898 1841.05,233.259 1841.62,232.047 1842.18,232.875 1842.75,232.63 1843.32,231.323 1843.89,232.182 1844.46,231.085 1845.03,229.736 1845.59,228.572 1846.16,227.628 1846.73,224.797 1847.3,223.827 1847.87,225.058 1848.44,226.483 1849,226.553 1849.57,226.741 1850.14,224.98 1850.71,227.235 1851.28,227.368 1851.85,227.679 1852.41,227.55 1852.98,229.871 1853.55,228.775 1854.12,228.836 1854.69,226.845 1855.26,224.936 1855.82,225.227 1856.39,224.669 1856.96,223.944 1857.53,225.481 1858.1,225.85 1858.67,226.298 1859.23,225.411 1859.8,225.738 1860.37,223.872 1860.94,225.358 1861.51,225.666 1862.08,226.078 1862.64,227.379 1863.21,227.601 1863.78,227.576 1864.35,228.778 1864.92,227.979 1865.49,229.158 1866.05,226.034 1866.62,227.237 1867.19,226.308 1867.76,227.714 1868.33,226.977 1868.9,227.036 1869.46,227.332 1870.03,230.482 1870.6,230.396 1871.17,230.373 1871.74,231.509 1872.31,230.467 1872.87,230.381 1873.44,229.735 1874.01,229.677 1874.58,231.025 1875.15,232.084 1875.72,233.123 1876.28,235.11 1876.85,235.903 1877.42,234.612 1877.99,236.651 1878.56,237.402 1879.13,237.876 1879.69,235.072 1880.26,234.681 1880.83,235.219 1881.4,233.911 1881.97,235.923 1882.54,233.518 1883.1,234.334 1883.67,235.128 1884.24,235.805 1884.81,233.297 1885.38,232.933 1885.95,233.578 1886.51,234.409 1887.08,234.964 1887.65,234.664 1888.22,233.952 1888.79,234.59 1889.36,232.29 1889.92,231.907 1890.49,231.71 1891.06,231.619 1891.63,231.408 1892.2,231.131 1892.77,231.097 1893.33,232.893 1893.9,232.45 1894.47,232.382 1895.04,230.19 1895.61,228.208 1896.18,229.252 1896.74,229.237 1897.31,229.323 1897.88,229.296 1898.45,229.224 1899.02,230.377 1899.59,229.394 1900.16,231.448 1900.72,232.212 1901.29,231.881 1901.86,232.672 1902.43,233.325 1903,233.033 1903.57,231.637 1904.13,231.561 1904.7,232.403 1905.27,231.146 1905.84,232.039 1906.41,230.667 1906.98,230.58 1907.54,230.345 1908.11,230.329 1908.68,230.861 1909.25,230.943 1909.82,232.836 1910.39,233.609 1910.95,233.065 1911.52,231.551 1912.09,230.298 1912.66,231.092 1913.23,229.994 1913.8,227.986 1914.36,227.98 1914.93,226.868 1915.5,227.008 1916.07,229.057 1916.64,230.206 1917.21,231.1 1917.77,231.858 1918.34,231.789 1918.91,230.57 1919.48,230.252 1920.05,230.187 1920.62,230.087 1921.18,228.095 1921.75,229.155 1922.32,230.217 1922.89,229.162 1923.46,228.197 1924.03,228.305 1924.59,227.274 1925.16,227.301 1925.73,226.39 1926.3,226.554 1926.87,227.805 1927.44,226.713 1928,225.842 1928.57,227.261 1929.14,226.219 1929.71,227.373 1930.28,225.435 1930.85,226.643 1931.41,227.869 1931.98,228.02 1932.55,225.146 1933.12,225.53 1933.69,225.827 1934.26,225.086 1934.82,227.415 1935.39,226.427 1935.96,225.842 1936.53,226.226 1937.1,227.319 1937.67,227.719 1938.23,229.159 1938.8,231.28 1939.37,229.316 1939.94,229.527 1940.51,228.677 1941.08,230.61 1941.64,230.728 1942.21,229.447 1942.78,229.475 1943.35,230.605 1943.92,230.71 1944.49,230.551 1945.05,229.78 1945.62,230.944 1946.19,231.001 1946.76,232.977 1947.33,232.865 1947.9,233.802 1948.46,233.431 1949.03,230.955 1949.6,229.76 1950.17,229.564 1950.74,228.494 1951.31,229.722 1951.87,231.593 1952.44,231.612 1953.01,231.164 1953.58,233.246 1954.15,234.979 1954.72,235.691 1955.28,236.49 1955.85,236.884 1956.42,236.237 1956.99,236.85 1957.56,234.249 1958.13,232.65 1958.69,232.371 1959.26,232.192 1959.83,231.004 1960.4,232.888 1960.97,233.704 1961.54,234.561 1962.1,233.943 1962.67,233.477 1963.24,232.187 1963.81,233.131 1964.38,230.9 1964.95,229.847 1965.51,227.369 1966.08,227.411 1966.65,226.576 1967.22,229.864 1967.79,227.643 1968.36,227.898 1968.92,226.962 1969.49,228.382 1970.06,228.531 1970.63,228.433 1971.2,228.284 1971.77,227.461 1972.34,224.236 1972.9,224.7 1973.47,227.141 1974.04,229.254 1974.61,229.166 1975.18,228.003 1975.75,227.866 1976.31,225.584 1976.88,229.233 1977.45,230.324 1978.02,230.474 1978.59,230.441 1979.16,232.32 1979.72,234.259 1980.29,233.965 1980.86,233.536 1981.43,233.423 1982,232.117 1982.57,228.925 1983.13,228.869 1983.7,229.969 1984.27,229.083 1984.84,229.228 1985.41,231.42 1985.98,230.282 1986.54,229.164 1987.11,228.993 1987.68,228.012 1988.25,228.154 1988.82,228.031 1989.39,228.011 1989.95,227.794 1990.52,226.768 1991.09,228.105 1991.66,227.245 1992.23,226.423 1992.8,227.756 1993.36,226.765 1993.93,226.015 1994.5,226.323 1995.07,226.592 1995.64,225.866 1996.21,227.311 1996.77,228.507 1997.34,229.661 1997.91,229.764 1998.48,230.917 1999.05,230.919 1999.62,231.873 2000.18,232.752 2000.75,230.521 2001.32,231.474 2001.89,233.482 2002.46,228.999 2003.03,226.844 2003.59,224.171 2004.16,224.611 2004.73,226.027 2005.3,227.352 2005.87,228.457 2006.44,228.695 2007,226.974 2007.57,227.151 2008.14,228.185 2008.71,226.058 2009.28,226.566 2009.85,226.894 2010.41,226.293 2010.98,224.499 2011.55,221.815 2012.12,222.569 2012.69,222.95 2013.26,223.563 2013.82,224.162 2014.39,223.609 2014.96,225.13 2015.53,229.625 2016.1,228.682 2016.67,229.132 2017.23,229.206 2017.8,230.425 2018.37,228.274 2018.94,228.577 2019.51,227.869 2020.08,231.378 2020.64,230.635 2021.21,230.718 2021.78,232.107 2022.35,232.063 2022.92,232.001 2023.49,232.918 2024.05,234.664 2024.62,234.232 2025.19,234.075 2025.76,232.845 2026.33,231.786 2026.9,232.672 2027.46,230.454 2028.03,231.539 2028.6,228.427 2029.17,228.356 2029.74,226.289 2030.31,227.664 2030.87,226.993 2031.44,226.459 2032.01,226.826 2032.58,228.972 2033.15,232.31 2033.72,234.292 2034.28,232.22 2034.85,231.398 2035.42,232.665 2035.99,232.56 2036.56,230.276 2037.13,229.239 2037.69,231.18 2038.26,233.386 2038.83,233.057 2039.4,233.755 2039.97,232.402 2040.54,234.371 2041.11,233.267 2041.67,233.019 2042.24,232.857 2042.81,230.614 2043.38,227.485 2043.95,226.909 2044.52,226.283 2045.08,229.717 2045.65,228.846 2046.22,230.206 2046.79,227.289 2047.36,228.695 2047.93,227.811 2048.49,227.907 2049.06,226.964 2049.63,226.161 2050.2,225.616 2050.77,225.853 2051.34,228.242 2051.9,230.383 2052.47,229.565 2053.04,229.605 2053.61,228.945 2054.18,230.241 2054.75,230.541 2055.31,231.553 2055.88,230.413 2056.45,230.484 2057.02,230.599 2057.59,231.818 2058.16,231.917 2058.72,229.866 2059.29,229.139 2059.86,229.227 2060.43,229.51 2061,229.802 2061.57,229.969 2062.13,229.166 2062.7,231.666 2063.27,234.608 2063.84,231.378 2064.41,231.514 2064.98,230.556 2065.54,231.49 2066.11,232.614 2066.68,231.53 2067.25,232.542 2067.82,236.633 2068.39,236.337 2068.95,235.92 2069.52,234.594 2070.09,231.31 2070.66,230.236 2071.23,230.331 2071.8,231.218 2072.36,233.178 2072.93,232.156 2073.5,236.384 2074.07,235.909 2074.64,234.616 2075.21,234.345 2075.77,232.884 2076.34,231.522 2076.91,232.325 2077.48,233.896 2078.05,233.835 2078.62,230.563 2079.18,230.617 2079.75,231.564 2080.32,231.396 2080.89,232.448 2081.46,232.347 2082.03,235.483 2082.59,232.858 2083.16,232.913 2083.73,232.714 2084.3,231.497 2084.87,232.414 2085.44,233.266 2086,234.102 2086.57,233.861 2087.14,233.335 2087.71,231.214 2088.28,233.028 2088.85,231.886 2089.41,231.671 2089.98,232.412 2090.55,232.211 2091.12,232.128 2091.69,226.961 2092.26,229.317 2092.82,229.197 2093.39,229.163 2093.96,227.238 2094.53,226.265 2095.1,227.754 2095.67,226.821 2096.23,224.102 2096.8,223.468 2097.37,222.826 2097.94,220.342 2098.51,221.193 2099.08,222.925 2099.64,222.485 2100.21,225.216 2100.78,227.808 2101.35,228.046 2101.92,228.049 2102.49,227.085 2103.05,228.486 2103.62,227.62 2104.19,230.017 2104.76,228.026 2105.33,228.269 2105.9,228.49 2106.46,228.581 2107.03,228.931 2107.6,230.292 2108.17,232.552 2108.74,230.285 2109.31,229.389 2109.87,231.777 2110.44,230.622 2111.01,232.886 2111.58,232.953 2112.15,233.737 2112.72,233.615 2113.29,232.262 2113.85,231.016 2114.42,230.787 2114.99,231.794 2115.56,231.643 2116.13,228.517 2116.7,230.616 2117.26,230.616 2117.83,230.647 2118.4,229.455 2118.97,228.722 2119.54,229.99 2120.11,232.847 2120.67,233.784 2121.24,234.512 2121.81,234.099 2122.38,233.875 2122.95,233.486 2123.52,232.256 2124.08,233.16 2124.65,232.255 2125.22,232.339 2125.79,229.164 2126.36,229.193 2126.93,229.525 2127.49,233.65 2128.06,235.324 2128.63,234.868 2129.2,232.462 2129.77,232.267 2130.34,230.863 2130.9,229.757 2131.47,229.816 2132.04,229.835 2132.61,229.912 2133.18,228.894 2133.75,227.91 2134.31,227.856 2134.88,226.796 2135.45,229.001 2136.02,229.185 2136.59,226.275 2137.16,226.529 2137.72,224.712 2138.29,225.08 2138.86,226.324 2139.43,226.669 2140,228.009 2140.57,226.101 2141.13,227.401 2141.7,228.746 2142.27,231.159 2142.84,231.293 2143.41,234.158 2143.98,233.781 2144.54,235.7 2145.11,235.315 2145.68,233.922 2146.25,233.549 2146.82,233.365 2147.39,235.169 2147.95,234.91 2148.52,233.358 2149.09,232.278 2149.66,233.067 2150.23,232.587 2150.8,233.446 2151.36,231.973 2151.93,231.731 2152.5,232.681 2153.07,234.474 2153.64,234.265 2154.21,233.942 2154.77,232.675 2155.34,234.679 2155.91,232.314 2156.48,230.054 2157.05,228.075 2157.62,228.102 2158.18,226.248 2158.75,226.514 2159.32,227.779 2159.89,229.012 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip580)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.026\n  with uncertainty of ± 0.00231100710117494\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.02022 ± (0.00309784, 0.00299974) (MC)\n  95% confidence interval: [-4.02629, -4.01407] (MC)\n  linear error propagation: -4.02024 ± 0.00305223\n  |δ_y| = |0.00202443| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.020223712679966, val_l = 0.006065839779302529, val_u = 0.006150626461840503)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.83 2211.02,1154.83 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1002.97 2211.02,1002.97 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,851.112 2211.02,851.112 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,699.255 2211.02,699.255 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,547.398 2211.02,547.398 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,395.54 2211.02,395.54 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,243.683 2211.02,243.683 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.83 365.751,1154.83 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1002.97 365.751,1002.97 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,851.112 365.751,851.112 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,699.255 365.751,699.255 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,547.398 365.751,547.398 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,395.54 365.751,395.54 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,243.683 365.751,243.683 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M298.909 1140.63 Q295.298 1140.63 293.469 1144.19 Q291.664 1147.73 291.664 1154.86 Q291.664 1161.97 293.469 1165.53 Q295.298 1169.07 298.909 1169.07 Q302.543 1169.07 304.349 1165.53 Q306.177 1161.97 306.177 1154.86 Q306.177 1147.73 304.349 1144.19 Q302.543 1140.63 298.909 1140.63 M298.909 1136.92 Q304.719 1136.92 307.775 1141.53 Q310.853 1146.11 310.853 1154.86 Q310.853 1163.59 307.775 1168.19 Q304.719 1172.78 298.909 1172.78 Q293.099 1172.78 290.02 1168.19 Q286.964 1163.59 286.964 1154.86 Q286.964 1146.11 290.02 1141.53 Q293.099 1136.92 298.909 1136.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M259.557 1016.31 L267.196 1016.31 L267.196 989.949 L258.886 991.615 L258.886 987.356 L267.15 985.689 L271.826 985.689 L271.826 1016.31 L279.465 1016.31 L279.465 1020.25 L259.557 1020.25 L259.557 1016.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 988.768 Q295.298 988.768 293.469 992.333 Q291.664 995.875 291.664 1003 Q291.664 1010.11 293.469 1013.68 Q295.298 1017.22 298.909 1017.22 Q302.543 1017.22 304.349 1013.68 Q306.177 1010.11 306.177 1003 Q306.177 995.875 304.349 992.333 Q302.543 988.768 298.909 988.768 M298.909 985.064 Q304.719 985.064 307.775 989.671 Q310.853 994.254 310.853 1003 Q310.853 1011.73 307.775 1016.34 Q304.719 1020.92 298.909 1020.92 Q293.099 1020.92 290.02 1016.34 Q286.964 1011.73 286.964 1003 Q286.964 994.254 290.02 989.671 Q293.099 985.064 298.909 985.064 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M262.775 864.457 L279.094 864.457 L279.094 868.392 L257.15 868.392 L257.15 864.457 Q259.812 861.702 264.395 857.073 Q269.002 852.42 270.182 851.077 Q272.428 848.554 273.307 846.818 Q274.21 845.059 274.21 843.369 Q274.21 840.615 272.266 838.878 Q270.344 837.142 267.242 837.142 Q265.043 837.142 262.59 837.906 Q260.159 838.67 257.381 840.221 L257.381 835.499 Q260.205 834.365 262.659 833.786 Q265.113 833.207 267.15 833.207 Q272.52 833.207 275.715 835.892 Q278.909 838.577 278.909 843.068 Q278.909 845.198 278.099 847.119 Q277.312 849.017 275.205 851.61 Q274.627 852.281 271.525 855.499 Q268.423 858.693 262.775 864.457 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 836.911 Q295.298 836.911 293.469 840.476 Q291.664 844.017 291.664 851.147 Q291.664 858.253 293.469 861.818 Q295.298 865.36 298.909 865.36 Q302.543 865.36 304.349 861.818 Q306.177 858.253 306.177 851.147 Q306.177 844.017 304.349 840.476 Q302.543 836.911 298.909 836.911 M298.909 833.207 Q304.719 833.207 307.775 837.814 Q310.853 842.397 310.853 851.147 Q310.853 859.874 307.775 864.48 Q304.719 869.063 298.909 869.063 Q293.099 869.063 290.02 864.48 Q286.964 859.874 286.964 851.147 Q286.964 842.397 290.02 837.814 Q293.099 833.207 298.909 833.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M272.914 697.901 Q276.27 698.618 278.145 700.887 Q280.043 703.155 280.043 706.489 Q280.043 711.604 276.525 714.405 Q273.006 717.206 266.525 717.206 Q264.349 717.206 262.034 716.766 Q259.742 716.35 257.289 715.493 L257.289 710.979 Q259.233 712.114 261.548 712.692 Q263.863 713.271 266.386 713.271 Q270.784 713.271 273.076 711.535 Q275.39 709.799 275.39 706.489 Q275.39 703.433 273.238 701.72 Q271.108 699.984 267.289 699.984 L263.261 699.984 L263.261 696.141 L267.474 696.141 Q270.923 696.141 272.752 694.776 Q274.58 693.387 274.58 690.794 Q274.58 688.132 272.682 686.72 Q270.807 685.285 267.289 685.285 Q265.367 685.285 263.168 685.702 Q260.969 686.118 258.33 686.998 L258.33 682.831 Q260.992 682.091 263.307 681.72 Q265.645 681.35 267.705 681.35 Q273.029 681.35 276.131 683.78 Q279.233 686.188 279.233 690.308 Q279.233 693.179 277.59 695.169 Q275.946 697.137 272.914 697.901 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 685.054 Q295.298 685.054 293.469 688.618 Q291.664 692.16 291.664 699.29 Q291.664 706.396 293.469 709.961 Q295.298 713.502 298.909 713.502 Q302.543 713.502 304.349 709.961 Q306.177 706.396 306.177 699.29 Q306.177 692.16 304.349 688.618 Q302.543 685.054 298.909 685.054 M298.909 681.35 Q304.719 681.35 307.775 685.956 Q310.853 690.54 310.853 699.29 Q310.853 708.016 307.775 712.623 Q304.719 717.206 298.909 717.206 Q293.099 717.206 290.02 712.623 Q286.964 708.016 286.964 699.29 Q286.964 690.54 290.02 685.956 Q293.099 681.35 298.909 681.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M271.594 534.192 L259.789 552.641 L271.594 552.641 L271.594 534.192 M270.367 530.118 L276.247 530.118 L276.247 552.641 L281.177 552.641 L281.177 556.529 L276.247 556.529 L276.247 564.678 L271.594 564.678 L271.594 556.529 L255.992 556.529 L255.992 552.016 L270.367 530.118 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 533.196 Q295.298 533.196 293.469 536.761 Q291.664 540.303 291.664 547.432 Q291.664 554.539 293.469 558.104 Q295.298 561.645 298.909 561.645 Q302.543 561.645 304.349 558.104 Q306.177 554.539 306.177 547.432 Q306.177 540.303 304.349 536.761 Q302.543 533.196 298.909 533.196 M298.909 529.493 Q304.719 529.493 307.775 534.099 Q310.853 538.682 310.853 547.432 Q310.853 556.159 307.775 560.766 Q304.719 565.349 298.909 565.349 Q293.099 565.349 290.02 560.766 Q286.964 556.159 286.964 547.432 Q286.964 538.682 290.02 534.099 Q293.099 529.493 298.909 529.493 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M258.793 378.26 L277.15 378.26 L277.15 382.195 L263.076 382.195 L263.076 390.668 Q264.094 390.32 265.113 390.158 Q266.131 389.973 267.15 389.973 Q272.937 389.973 276.316 393.144 Q279.696 396.316 279.696 401.732 Q279.696 407.311 276.224 410.413 Q272.752 413.492 266.432 413.492 Q264.256 413.492 261.988 413.121 Q259.742 412.751 257.335 412.01 L257.335 407.311 Q259.418 408.445 261.641 409.001 Q263.863 409.556 266.34 409.556 Q270.344 409.556 272.682 407.45 Q275.02 405.343 275.02 401.732 Q275.02 398.121 272.682 396.015 Q270.344 393.908 266.34 393.908 Q264.465 393.908 262.59 394.325 Q260.738 394.742 258.793 395.621 L258.793 378.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 381.339 Q295.298 381.339 293.469 384.904 Q291.664 388.445 291.664 395.575 Q291.664 402.681 293.469 406.246 Q295.298 409.788 298.909 409.788 Q302.543 409.788 304.349 406.246 Q306.177 402.681 306.177 395.575 Q306.177 388.445 304.349 384.904 Q302.543 381.339 298.909 381.339 M298.909 377.635 Q304.719 377.635 307.775 382.242 Q310.853 386.825 310.853 395.575 Q310.853 404.302 307.775 408.908 Q304.719 413.492 298.909 413.492 Q293.099 413.492 290.02 408.908 Q286.964 404.302 286.964 395.575 Q286.964 386.825 290.02 382.242 Q293.099 377.635 298.909 377.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M269.326 241.82 Q266.178 241.82 264.326 243.972 Q262.497 246.125 262.497 249.875 Q262.497 253.602 264.326 255.778 Q266.178 257.931 269.326 257.931 Q272.474 257.931 274.303 255.778 Q276.154 253.602 276.154 249.875 Q276.154 246.125 274.303 243.972 Q272.474 241.82 269.326 241.82 M278.608 227.167 L278.608 231.426 Q276.849 230.593 275.043 230.153 Q273.261 229.713 271.502 229.713 Q266.872 229.713 264.418 232.838 Q261.988 235.963 261.641 242.283 Q263.006 240.269 265.066 239.204 Q267.127 238.116 269.603 238.116 Q274.812 238.116 277.821 241.287 Q280.853 244.435 280.853 249.875 Q280.853 255.199 277.705 258.417 Q274.557 261.634 269.326 261.634 Q263.33 261.634 260.159 257.051 Q256.988 252.445 256.988 243.718 Q256.988 235.523 260.877 230.662 Q264.766 225.778 271.316 225.778 Q273.076 225.778 274.858 226.125 Q276.664 226.472 278.608 227.167 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 229.482 Q295.298 229.482 293.469 233.046 Q291.664 236.588 291.664 243.718 Q291.664 250.824 293.469 254.389 Q295.298 257.931 298.909 257.931 Q302.543 257.931 304.349 254.389 Q306.177 250.824 306.177 243.718 Q306.177 236.588 304.349 233.046 Q302.543 229.482 298.909 229.482 M298.909 225.778 Q304.719 225.778 307.775 230.384 Q310.853 234.968 310.853 243.718 Q310.853 252.445 307.775 257.051 Q304.719 261.634 298.909 261.634 Q293.099 261.634 290.02 257.051 Q286.964 252.445 286.964 243.718 Q286.964 234.968 290.02 230.384 Q293.099 225.778 298.909 225.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1042.93 400.199,940.139 400.786,845.82 401.372,759.409 401.958,680.378 402.545,715.786 403.131,643.099 403.718,578.547 404.304,523.264 404.891,469.771 405.477,421.46 406.063,456.706 406.65,414.138 407.236,377.395 407.823,343.314 408.409,313.107 408.995,286.522 409.582,317.82 410.168,293.964 410.755,273.962 411.341,256.876 411.927,241.816 412.514,230.027 413.1,219.895 413.687,247.505 414.273,273.793 414.86,269.012 415.446,293.32 416.032,291.003 416.619,314.322 417.205,338.364 417.792,358.479 418.378,379.763 418.964,382.656 419.551,385.841 420.137,405.765 420.724,427.001 421.31,432.132 421.896,439.037 422.483,458.582 423.069,476.703 423.656,505.243 424.242,512.398 424.829,531.336 425.415,549.957 426.001,566.721 426.588,574.887 427.174,583.599 427.761,599.691 428.347,608.193 428.933,616.614 429.52,625.202 430.106,640.482 430.693,655.318 431.279,664.015 431.865,678.777 432.452,698.842 433.038,707.186 433.625,720.928 434.211,734.559 434.798,748.186 435.384,761.74 435.97,770.569 436.557,779.456 437.143,792.345 437.73,809.147 438.316,825.325 438.902,840.562 439.489,855.252 440.075,872.964 440.662,883.256 441.248,892.901 441.835,899.317 442.421,914.676 443.007,926.518 443.594,935.268 444.18,943.806 444.767,955.205 445.353,960.438 445.939,968.632 446.526,976.514 447.112,991.881 447.699,999.214 448.285,1006.24 448.871,1013.3 449.458,1024.76 450.044,1029.14 450.631,1040.19 451.217,1053.06 451.804,1061.02 452.39,1066.57 452.976,1078.27 453.563,1081.14 454.149,1090.17 454.736,1092.51 455.322,1099 455.908,1101.44 456.495,1107.66 457.081,1112.18 457.668,1116.59 458.254,1120.82 458.84,1125.06 459.427,1129.18 460.013,1135.02 460.6,1140.39 461.186,1144.28 461.773,1146.03 462.359,1151.26 462.945,1156.17 463.532,1164.38 464.118,1179.06 464.705,1179.61 465.291,1181.78 465.877,1183.81 466.464,1190.87 467.05,1194.38 467.637,1194.57 468.223,1197.87 468.809,1199.37 469.396,1197.86 469.982,1201.27 470.569,1203 471.155,1203.18 471.742,1206.59 472.328,1208.15 472.914,1211.21 473.501,1214 474.087,1213.65 474.674,1213.67 475.26,1215.2 475.846,1214.92 476.433,1217.91 477.019,1217.64 477.606,1218.6 478.192,1218.62 478.778,1224.47 479.365,1224.18 479.951,1224.12 480.538,1226.97 481.124,1228.34 481.711,1227.98 482.297,1229.28 482.883,1229.02 483.47,1230.31 484.056,1231.68 484.643,1231.42 485.229,1232.53 485.815,1233.61 486.402,1234.41 486.988,1235.28 487.575,1234.93 488.161,1235.71 488.748,1236.73 489.334,1238.93 489.92,1239.75 490.507,1243 491.093,1242.33 491.68,1241.61 492.266,1242.31 492.852,1243.07 493.439,1243.74 494.025,1241.68 494.612,1238.74 495.198,1241.05 495.784,1241.91 496.371,1241.19 496.957,1239.35 497.544,1242.83 498.13,1242.37 498.717,1240.41 499.303,1241.18 499.889,1239.35 500.476,1237.57 501.062,1236.31 501.649,1236.48 502.235,1236.59 502.821,1236.78 503.408,1235.47 503.994,1236.73 504.581,1239.07 505.167,1241.5 505.753,1244.92 506.34,1248.07 506.926,1247.27 507.513,1243.96 508.099,1246.3 508.686,1244.22 509.272,1244.92 509.858,1245.46 510.445,1246.18 511.031,1245.97 511.618,1243.93 512.204,1243.04 512.79,1244.04 513.377,1243.49 513.963,1244.44 514.55,1242.71 515.136,1242.47 515.722,1243.24 516.309,1244.42 516.895,1247.8 517.482,1245.88 518.068,1247.95 518.655,1248.7 519.241,1247.94 519.827,1247.25 520.414,1244.23 521,1245.25 521.587,1244.74 522.173,1245.57 522.759,1243.72 523.346,1245.84 523.932,1244 524.519,1244.71 525.105,1245.41 525.691,1244.98 526.278,1246.55 526.864,1248.33 527.451,1248.89 528.037,1248.1 528.624,1248.38 529.21,1246.39 529.796,1245.79 530.383,1245.35 530.969,1245.8 531.556,1246.54 532.142,1247.31 532.728,1250.27 533.315,1250.53 533.901,1248.56 534.488,1248.97 535.074,1250.47 535.661,1247.08 536.247,1246.42 536.833,1247.23 537.42,1244.17 538.006,1243.81 538.593,1245.54 539.179,1248.68 539.765,1250.45 540.352,1249.46 540.938,1248.58 541.525,1247.99 542.111,1247.32 542.697,1246.75 543.284,1243.47 543.87,1243.14 544.457,1241.28 545.043,1240.81 545.63,1240.41 546.216,1241.09 546.802,1242.17 547.389,1240.43 547.975,1240.06 548.562,1243.37 549.148,1244.31 549.734,1242.37 550.321,1242.03 550.907,1240.39 551.494,1238.92 552.08,1238.58 552.666,1239.52 553.253,1239.56 553.839,1239.02 554.426,1238.48 555.012,1236.94 555.599,1236.62 556.185,1234.97 556.771,1234.91 557.358,1236.3 557.944,1232.19 558.531,1232.13 559.117,1233.44 559.703,1233.32 560.29,1234.59 560.876,1231.94 561.463,1228.21 562.049,1232.32 562.635,1229.8 563.222,1231.25 563.808,1233.97 564.395,1235.1 564.981,1235.14 565.568,1233.85 566.154,1234.86 566.74,1235.92 567.327,1233.1 567.913,1233.17 568.5,1234.3 569.086,1237.77 569.672,1237.26 570.259,1238.16 570.845,1238.04 571.432,1238.83 572.018,1238.46 572.605,1239.47 573.191,1237.62 573.777,1240.81 574.364,1239.12 574.95,1236.44 575.537,1234.99 576.123,1233.62 576.709,1235.04 577.296,1234.9 577.882,1233.45 578.469,1232.17 579.055,1231.97 579.641,1234.41 580.228,1235.41 580.814,1235.27 581.401,1237.4 581.987,1236.86 582.574,1237.56 583.16,1237.25 583.746,1237.9 584.333,1238.43 584.919,1239.06 585.506,1237.26 586.092,1234.3 586.678,1235.24 587.265,1232.51 587.851,1231.24 588.438,1228.37 589.024,1230.63 589.61,1230.65 590.197,1229.25 590.783,1230.27 591.37,1229.06 591.956,1227.98 592.543,1228.12 593.129,1229.32 593.715,1230.34 594.302,1231.62 594.888,1231.43 595.475,1229.92 596.061,1229.82 596.647,1229.73 597.234,1235.87 597.82,1235.45 598.407,1233.78 598.993,1233.6 599.579,1233.47 600.166,1233.34 600.752,1231.78 601.339,1228.97 601.925,1230.06 602.512,1228.51 603.098,1229.72 603.684,1228.32 604.271,1228.35 604.857,1229.49 605.444,1228.05 606.03,1227.94 606.616,1226.62 607.203,1230.33 607.789,1227.66 608.376,1227.57 608.962,1227.58 609.548,1228.71 610.135,1227.41 610.721,1227.3 611.308,1227.39 611.894,1227.39 612.481,1230.04 613.067,1230.99 613.653,1230.85 614.24,1229.09 614.826,1231.41 615.413,1231.43 615.999,1231.17 616.585,1229.48 617.172,1228.37 617.758,1230.87 618.345,1230.67 618.931,1231.9 619.518,1230.41 620.104,1230.03 620.69,1231.04 621.277,1230.74 621.863,1229.32 622.45,1229.04 623.036,1229.87 623.622,1228.37 624.209,1227.28 624.795,1230 625.382,1232.2 625.968,1230.59 626.554,1230.33 627.141,1232.38 627.727,1230.58 628.314,1231.59 628.9,1230.23 629.487,1230.95 630.073,1231.85 630.659,1231.26 631.246,1230.95 631.832,1230.41 632.419,1231.52 633.005,1231 633.591,1233.51 634.178,1231.71 634.764,1231.3 635.351,1233.33 635.937,1233.79 636.523,1234.43 637.11,1233.78 637.696,1233.63 638.283,1232.02 638.869,1230.24 639.456,1232.24 640.042,1233.16 640.628,1232.74 641.215,1229.86 641.801,1229.56 642.388,1230.49 642.974,1231.12 643.56,1231.91 644.147,1227.58 644.733,1228.39 645.32,1232.03 645.906,1230.35 646.492,1231.12 647.079,1229.25 647.665,1229.86 648.252,1230.82 648.838,1230.26 649.425,1230.11 650.011,1227.73 650.597,1227.57 651.184,1225.97 651.77,1225.7 652.357,1225.64 652.943,1225.71 653.529,1224.15 654.116,1224.14 654.702,1224.1 655.289,1222.62 655.875,1222.3 656.462,1223.77 657.048,1222.56 657.634,1221.27 658.221,1223.87 658.807,1224.93 659.394,1224.7 659.98,1225.78 660.566,1227.04 661.153,1225.62 661.739,1225.19 662.326,1222.53 662.912,1223.95 663.498,1227.63 664.085,1226.14 664.671,1228.42 665.258,1228.14 665.844,1228.09 666.431,1227.62 667.017,1226.28 667.603,1228.62 668.19,1228.34 668.776,1224.27 669.363,1223.95 669.949,1223.84 670.535,1221.27 671.122,1221.2 671.708,1221.4 672.295,1221.57 672.881,1221.71 673.467,1224.1 674.054,1223.68 674.64,1223.56 675.227,1221.91 675.813,1219.59 676.4,1220.75 676.986,1219.79 677.572,1222.33 678.159,1221.31 678.745,1220.14 679.332,1221.64 679.918,1220.62 680.504,1224.38 681.091,1226.62 681.677,1226.32 682.264,1224.93 682.85,1225.88 683.436,1225.83 684.023,1224.17 684.609,1222.83 685.196,1224.09 685.782,1223.92 686.369,1223.56 686.955,1223.4 687.541,1222.02 688.128,1223.01 688.714,1224.18 689.301,1225.38 689.887,1222.83 690.473,1222.59 691.06,1226.56 691.646,1228.94 692.233,1227.22 692.819,1228.16 693.405,1228.84 693.992,1227.29 694.578,1229.41 695.165,1229.13 695.751,1227.47 696.338,1227.19 696.924,1233.07 697.51,1232.59 698.097,1230.8 698.683,1228.99 699.27,1228.4 699.856,1231.82 700.442,1230.36 701.029,1229.86 701.615,1230.72 702.202,1231.58 702.788,1232.4 703.375,1233.19 703.961,1232.49 704.547,1231.76 705.134,1228.54 705.72,1229.26 706.307,1230.1 706.893,1228.55 707.479,1227.03 708.066,1226.54 708.652,1226.32 709.239,1226.09 709.825,1226.88 710.411,1229.01 710.998,1226.1 711.584,1224.79 712.171,1223.36 712.757,1223.47 713.344,1221.77 713.93,1221.76 714.516,1222.06 715.103,1222.02 715.689,1224.2 716.276,1223.86 716.862,1223.64 717.448,1224.97 718.035,1224.81 718.621,1227.25 719.208,1227.85 719.794,1228.48 720.38,1227.78 720.967,1227.21 721.553,1226.8 722.14,1224.01 722.726,1225.06 723.313,1225.75 723.899,1226.68 724.485,1228.67 725.072,1228.29 725.658,1228.96 726.245,1228.54 726.831,1226.83 727.417,1226.27 728.004,1224.45 728.59,1225.51 729.177,1227.73 729.763,1227.38 730.349,1228.13 730.936,1227.85 731.522,1229.91 732.109,1229.31 732.695,1230 733.282,1229.59 733.868,1229.07 734.454,1231.05 735.041,1229.02 735.627,1230.87 736.214,1230.46 736.8,1230.16 737.386,1232.19 737.973,1233.99 738.559,1233.08 739.146,1230.03 739.732,1230.75 740.318,1232.65 740.905,1231.87 741.491,1228.87 742.078,1225.66 742.664,1225.67 743.251,1224.17 743.837,1226.38 744.423,1226.31 745.01,1227.19 745.596,1227.88 746.183,1226.21 746.769,1226.86 747.355,1227.6 747.942,1227.55 748.528,1226.04 749.115,1220.54 749.701,1218.11 750.288,1218.4 750.874,1215.9 751.46,1213.67 752.047,1213.84 752.633,1216.29 753.22,1215.36 753.806,1216.83 754.392,1216.97 754.979,1217.22 755.565,1216.39 756.152,1216.5 756.738,1218.1 757.324,1218.13 757.911,1220.43 758.497,1220.37 759.084,1219.1 759.67,1219.02 760.257,1221.55 760.843,1221.58 761.429,1221.39 762.016,1223.58 762.602,1222.03 763.189,1224.51 763.775,1223.21 764.361,1220.57 764.948,1222.95 765.534,1222.8 766.121,1220.27 766.707,1221.33 767.293,1221.22 767.88,1218.58 768.466,1217.31 769.053,1217.39 769.639,1216.44 770.226,1217.61 770.812,1216.65 771.398,1217.02 771.985,1217.06 772.571,1215.87 773.158,1217.11 773.744,1211.26 774.33,1212.88 774.917,1213.26 775.503,1213.53 776.09,1212.87 776.676,1214.41 777.262,1213.34 777.849,1212.61 778.435,1215.48 779.022,1213.35 779.608,1213.76 780.195,1212.98 780.781,1213.3 781.367,1211.18 781.954,1208.98 782.54,1208.2 783.127,1208.65 783.713,1209.06 784.299,1210.81 784.886,1211.15 785.472,1211.72 786.059,1211.92 786.645,1214.89 787.232,1212.61 787.818,1213.83 788.404,1212.88 788.991,1213.27 789.577,1212.37 790.164,1211.45 790.75,1211.74 791.336,1210.79 791.923,1211.04 792.509,1212.88 793.096,1214.48 793.682,1214.72 794.268,1212.56 794.855,1213.07 795.441,1215.83 796.028,1214.81 796.614,1213.91 797.201,1215.35 797.787,1216.87 798.373,1217.9 798.96,1216.88 799.546,1219.72 800.133,1219.73 800.719,1217.18 801.305,1217.42 801.892,1217.66 802.478,1217.86 803.065,1215.36 803.651,1212 804.237,1217.17 804.824,1218.25 805.41,1219.82 805.997,1217.33 806.583,1217.24 807.17,1217.24 807.756,1217.62 808.342,1216.48 808.929,1216.73 809.515,1216.99 810.102,1216.06 810.688,1217.62 811.274,1216.59 811.861,1217.73 812.447,1219.25 813.034,1219.31 813.62,1219.6 814.206,1219.79 814.793,1219.81 815.379,1217.35 815.966,1218.5 816.552,1218.57 817.139,1221.24 817.725,1221.16 818.311,1219.91 818.898,1221.21 819.484,1219.66 820.071,1219.64 820.657,1219.63 821.243,1219.67 821.83,1219.65 822.416,1219.52 823.003,1216.96 823.589,1215.99 824.175,1215.01 824.762,1215.3 825.348,1215.67 825.935,1215.82 826.521,1217.47 827.108,1215.13 827.694,1216.46 828.28,1214.43 828.867,1218.32 829.453,1218.47 830.04,1218.36 830.626,1218.37 831.212,1218.32 831.799,1220.47 832.385,1221.49 832.972,1221.18 833.558,1221.26 834.145,1221.15 834.731,1219.95 835.317,1218.59 835.904,1217.35 836.49,1217.52 837.077,1217.46 837.663,1217.52 838.249,1216.42 838.836,1215.36 839.422,1216.58 840.009,1217.89 840.595,1220.13 841.181,1220.19 841.768,1220.06 842.354,1221.16 842.941,1222.42 843.527,1223.37 844.114,1220.68 844.7,1219.35 845.286,1219.23 845.873,1218.47 846.459,1218.39 847.046,1220.73 847.632,1220.81 848.218,1220.76 848.805,1220.61 849.391,1221.79 849.978,1220.62 850.564,1219.42 851.15,1218.09 851.737,1217.9 852.323,1215.3 852.91,1215.34 853.496,1214.25 854.083,1214.43 854.669,1215.9 855.255,1214.75 855.842,1214.93 856.428,1213.93 857.015,1212.52 857.601,1212.75 858.187,1212.99 858.774,1210.99 859.36,1212.83 859.947,1214.46 860.533,1213.47 861.119,1212.51 861.706,1215.12 862.292,1215.08 862.879,1214.09 863.465,1216.77 864.052,1216.57 864.638,1216.54 865.224,1216.62 865.811,1216.58 866.397,1220.23 866.984,1216.4 867.57,1216.4 868.156,1217.67 868.743,1218.87 869.329,1218.89 869.916,1219.98 870.502,1218.56 871.089,1218.57 871.675,1218.63 872.261,1219.84 872.848,1220.98 873.434,1220.6 874.021,1220.44 874.607,1220.39 875.193,1217.82 875.78,1216.69 876.366,1217.86 876.953,1217.9 877.539,1218.04 878.125,1215.45 878.712,1216.67 879.298,1215.67 879.885,1213.11 880.471,1209.65 881.058,1210.25 881.644,1209.46 882.23,1209.99 882.817,1207.99 883.403,1209.66 883.99,1211.38 884.576,1214.22 885.162,1214.56 885.749,1214.53 886.335,1214.69 886.922,1216 887.508,1214.91 888.094,1213.85 888.681,1214.05 889.267,1215.44 889.854,1216.69 890.44,1217.91 891.027,1219.07 891.613,1217.49 892.199,1217.35 892.786,1217.22 893.372,1217.33 893.959,1219.79 894.545,1219.43 895.131,1219.48 895.718,1219.21 896.304,1218.09 896.891,1220.48 897.477,1222.69 898.063,1218.71 898.65,1221.37 899.236,1223.61 899.823,1224.4 900.409,1223.93 900.996,1223.44 901.582,1220.58 902.168,1220.76 902.755,1220.25 903.341,1220.98 903.928,1223.36 904.514,1221.61 905.1,1219.83 905.687,1218.59 906.273,1219.7 906.86,1219.51 907.446,1219.58 908.032,1219.54 908.619,1220.86 909.205,1221.87 909.792,1219.25 910.378,1217.76 910.965,1218.75 911.551,1218.48 912.137,1218.16 912.724,1216.82 913.31,1215.54 913.897,1216.62 914.483,1215.72 915.069,1216.88 915.656,1218.21 916.242,1220.6 916.829,1220.45 917.415,1214.2 918.002,1213.13 918.588,1214.63 919.174,1216.15 919.761,1217.62 920.347,1218.69 920.934,1217.54 921.52,1217.27 922.106,1217.13 922.693,1217.07 923.279,1216.91 923.866,1218.17 924.452,1219.51 925.038,1219.3 925.625,1218.09 926.211,1218.01 926.798,1217.92 927.384,1219.15 927.971,1219.01 928.557,1217.67 929.143,1216.36 929.73,1217.5 930.316,1217.51 930.903,1215.23 931.489,1215.38 932.075,1214.15 932.662,1215.63 933.248,1215.68 933.835,1218.15 934.421,1217.79 935.007,1217.9 935.594,1220.13 936.18,1222.31 936.767,1222.13 937.353,1222.92 937.94,1222.58 938.526,1222.1 939.112,1221.78 939.699,1219.06 940.285,1220.16 940.872,1221.27 941.458,1220.96 942.044,1220.69 942.631,1219.39 943.217,1218.04 943.804,1217.93 944.39,1217.74 944.976,1218.72 945.563,1221.04 946.149,1222.26 946.736,1224.49 947.322,1223.99 947.909,1222.38 948.495,1217.24 949.081,1216.11 949.668,1217.34 950.254,1218.62 950.841,1218.6 951.427,1216.05 952.013,1217.37 952.6,1219.94 953.186,1219.94 953.773,1218.69 954.359,1219.81 954.945,1219.86 955.532,1219.54 956.118,1220.82 956.705,1219.54 957.291,1218.42 957.878,1218.27 958.464,1217 959.05,1215.82 959.637,1215.97 960.223,1215.83 960.81,1214.78 961.396,1216.02 961.982,1216.04 962.569,1215.89 963.155,1214.82 963.742,1215.95 964.328,1215.95 964.915,1213.49 965.501,1216.53 966.087,1216.55 966.674,1217.97 967.26,1219.16 967.847,1217.87 968.433,1217.81 969.019,1217.86 969.606,1219.06 970.192,1216.67 970.779,1216.81 971.365,1216.63 971.951,1218.79 972.538,1219.87 973.124,1217.21 973.711,1217.24 974.297,1217.86 974.884,1217.9 975.47,1218.87 976.056,1217.61 976.643,1216.45 977.229,1216.52 977.816,1216.22 978.402,1217.06 978.988,1219.71 979.575,1218.16 980.161,1219.2 980.748,1217.83 981.334,1219.13 981.92,1217.59 982.507,1217.73 983.093,1216.43 983.68,1217.67 984.266,1216.05 984.853,1213.64 985.439,1212.51 986.025,1215.24 986.612,1215.15 987.198,1217.76 987.785,1216.38 988.371,1217.26 988.957,1218.57 989.544,1217.28 990.13,1217.32 990.717,1218.46 991.303,1217.18 991.889,1218.4 992.476,1218.27 993.062,1218.79 993.649,1218.5 994.235,1218.55 994.822,1219.73 995.408,1218.08 995.994,1219.19 996.581,1221.39 997.167,1222.26 997.754,1220.73 998.34,1220.48 998.926,1222.59 999.513,1221.04 1000.1,1220.94 1000.69,1225.25 1001.27,1221.19 1001.86,1223.27 1002.44,1221.6 1003.03,1220.27 1003.62,1221.24 1004.2,1222.05 1004.79,1224.16 1005.38,1223.72 1005.96,1222.18 1006.55,1222.82 1007.14,1222.52 1007.72,1220.79 1008.31,1221.85 1008.9,1222.71 1009.48,1223.77 1010.07,1222.14 1010.65,1222.83 1011.24,1220.94 1011.83,1220.99 1012.41,1219.62 1013,1219.47 1013.59,1218.99 1014.17,1219.03 1014.76,1216.61 1015.35,1217.78 1015.93,1217.56 1016.52,1218.72 1017.11,1217.11 1017.69,1217.15 1018.28,1219.49 1018.86,1217.19 1019.45,1218.48 1020.04,1218.13 1020.62,1215.57 1021.21,1215.73 1021.8,1216.88 1022.38,1215.58 1022.97,1215.75 1023.56,1215.82 1024.14,1216.89 1024.73,1216.92 1025.32,1216.94 1025.9,1216.87 1026.49,1217.2 1027.07,1218.38 1027.66,1217.96 1028.25,1218.01 1028.83,1216.57 1029.42,1216.48 1030.01,1217.74 1030.59,1216.51 1031.18,1217.62 1031.77,1217.72 1032.35,1214.03 1032.94,1210.55 1033.52,1209.55 1034.11,1209.97 1034.7,1210.39 1035.28,1211.98 1035.87,1211.05 1036.46,1211.52 1037.04,1212.95 1037.63,1212.89 1038.22,1215.24 1038.8,1217.92 1039.39,1216.73 1039.98,1214.19 1040.56,1215.68 1041.15,1215.4 1041.73,1213.2 1042.32,1214.51 1042.91,1216.09 1043.49,1212.32 1044.08,1211.29 1044.67,1212.9 1045.25,1215.49 1045.84,1215.3 1046.43,1214.19 1047.01,1212.06 1047.6,1212.51 1048.19,1213.81 1048.77,1214.03 1049.36,1213.01 1049.94,1211.05 1050.53,1210.23 1051.12,1207.88 1051.7,1208.49 1052.29,1208.8 1052.88,1209.2 1053.46,1208.38 1054.05,1209.98 1054.64,1209.3 1055.22,1207.33 1055.81,1211.6 1056.39,1212.02 1056.98,1210.94 1057.57,1212.42 1058.15,1210.62 1058.74,1210.77 1059.33,1212.36 1059.91,1211.36 1060.5,1211.7 1061.09,1209.56 1061.67,1210.1 1062.26,1212.89 1062.85,1213.38 1063.43,1214.8 1064.02,1213.59 1064.6,1213.66 1065.19,1213.76 1065.78,1215.33 1066.36,1217.95 1066.95,1219.02 1067.54,1217.68 1068.12,1216.35 1068.71,1217.69 1069.3,1217.73 1069.88,1217.87 1070.47,1217.61 1071.06,1218.84 1071.64,1219 1072.23,1221.13 1072.81,1220.76 1073.4,1217.87 1073.99,1215.35 1074.57,1216.73 1075.16,1219.29 1075.75,1216.82 1076.33,1214.38 1076.92,1216.02 1077.51,1214.7 1078.09,1211.08 1078.68,1212.65 1079.26,1211.4 1079.85,1216.63 1080.44,1215.3 1081.02,1215.54 1081.61,1216.74 1082.2,1220.53 1082.78,1219.05 1083.37,1218.93 1083.96,1219.94 1084.54,1218.57 1085.13,1215.97 1085.72,1218.55 1086.3,1218.44 1086.89,1218.25 1087.47,1217 1088.06,1218.29 1088.65,1216.65 1089.23,1216.4 1089.82,1217.78 1090.41,1217.83 1090.99,1217.75 1091.58,1216.06 1092.17,1216.01 1092.75,1217.48 1093.34,1216.03 1093.93,1215.84 1094.51,1215.84 1095.1,1214.38 1095.68,1214.51 1096.27,1216.86 1096.86,1218.06 1097.44,1217.96 1098.03,1216.65 1098.62,1219.14 1099.2,1217.98 1099.79,1217.83 1100.38,1216.44 1100.96,1220.13 1101.55,1217.57 1102.14,1217.72 1102.72,1220.49 1103.31,1221.4 1103.89,1223.57 1104.48,1220.48 1105.07,1220.33 1105.65,1220.36 1106.24,1218.73 1106.83,1217.21 1107.41,1214.5 1108,1213.4 1108.59,1212.48 1109.17,1212.76 1109.76,1209.3 1110.34,1209.54 1110.93,1209.87 1111.52,1209.18 1112.1,1209.7 1112.69,1211.08 1113.28,1211.25 1113.86,1212.75 1114.45,1211.56 1115.04,1210.89 1115.62,1212.62 1116.21,1214.41 1116.8,1211.92 1117.38,1214.77 1117.97,1213.83 1118.55,1212.95 1119.14,1212.08 1119.73,1213.53 1120.31,1214.96 1120.9,1215.05 1121.49,1213.96 1122.07,1214.08 1122.66,1213.03 1123.25,1215.93 1123.83,1215.78 1124.42,1217.07 1125.01,1218.33 1125.59,1218.38 1126.18,1219.41 1126.76,1218.02 1127.35,1217.94 1127.94,1216.71 1128.52,1216.8 1129.11,1214.24 1129.7,1214.31 1130.28,1214.31 1130.87,1214.5 1131.46,1214.64 1132.04,1214.71 1132.63,1215.24 1133.21,1215.39 1133.8,1218.03 1134.39,1217.81 1134.97,1217.82 1135.56,1217.61 1136.15,1213.68 1136.73,1215.19 1137.32,1214.05 1137.91,1211.82 1138.49,1213.19 1139.08,1213.38 1139.67,1214.87 1140.25,1213.8 1140.84,1217.47 1141.42,1218.49 1142.01,1219.35 1142.6,1219.43 1143.18,1216.53 1143.77,1216.7 1144.36,1221.64 1144.94,1220.06 1145.53,1219.54 1146.12,1221.87 1146.7,1219.15 1147.29,1219.03 1147.88,1217.61 1148.46,1213.72 1149.05,1215.14 1149.63,1215.23 1150.22,1215.26 1150.81,1213.86 1151.39,1215.24 1151.98,1211.77 1152.57,1210.71 1153.15,1212.15 1153.74,1212.29 1154.33,1213.39 1154.91,1214.72 1155.5,1216.99 1156.09,1216.78 1156.67,1215.38 1157.26,1215.66 1157.84,1214.5 1158.43,1214.81 1159.02,1213.71 1159.6,1213.86 1160.19,1212.48 1160.78,1211.74 1161.36,1213.44 1161.95,1212.31 1162.54,1211.2 1163.12,1212.96 1163.71,1215.54 1164.29,1214.18 1164.88,1213.22 1165.47,1211.81 1166.05,1210.92 1166.64,1216.46 1167.23,1214.07 1167.81,1217.97 1168.4,1215.58 1168.99,1215.44 1169.57,1216.89 1170.16,1217.04 1170.75,1215.78 1171.33,1216.95 1171.92,1217.14 1172.5,1216.93 1173.09,1216.78 1173.68,1215.56 1174.26,1215.5 1174.85,1216.63 1175.44,1216.68 1176.02,1216.68 1176.61,1217.92 1177.2,1219.07 1177.78,1219.84 1178.37,1220.95 1178.96,1220.4 1179.54,1220.14 1180.13,1222.35 1180.71,1223.51 1181.3,1222.94 1181.89,1222.48 1182.47,1222.08 1183.06,1222.85 1183.65,1221.32 1184.23,1222.41 1184.82,1221.01 1185.41,1219.73 1185.99,1218.45 1186.58,1218.42 1187.16,1218.37 1187.75,1215.85 1188.34,1219.32 1188.92,1216.59 1189.51,1217.53 1190.1,1216.15 1190.68,1217.38 1191.27,1219.65 1191.86,1221.66 1192.44,1225.03 1193.03,1223.11 1193.62,1222.92 1194.2,1221.18 1194.79,1219.73 1195.37,1215.87 1195.96,1217.05 1196.55,1216.85 1197.13,1216.76 1197.72,1215.74 1198.31,1215.45 1198.89,1216.69 1199.48,1216.52 1200.07,1216.51 1200.65,1217.62 1201.24,1218.43 1201.83,1219.54 1202.41,1218 1203,1219.11 1203.58,1220.42 1204.17,1217.9 1204.76,1219.09 1205.34,1215.45 1205.93,1217.64 1206.52,1214.86 1207.1,1217.23 1207.69,1215.8 1208.28,1214.28 1208.86,1214.16 1209.45,1214.18 1210.03,1213.12 1210.62,1209.46 1211.21,1209.49 1211.79,1210.07 1212.38,1210.29 1212.97,1210.55 1213.55,1211.99 1214.14,1213.66 1214.73,1214.97 1215.31,1212.33 1215.9,1213.65 1216.49,1213.87 1217.07,1218.71 1217.66,1216.14 1218.24,1213.66 1218.83,1212.63 1219.42,1215.27 1220,1213.78 1220.59,1216.39 1221.18,1213.95 1221.76,1213.02 1222.35,1213.03 1222.94,1216.83 1223.52,1215.42 1224.11,1215.42 1224.7,1213.77 1225.28,1212.55 1225.87,1211.68 1226.45,1211.64 1227.04,1210.58 1227.63,1207.17 1228.21,1208.79 1228.8,1207.89 1229.39,1209.76 1229.97,1211.44 1230.56,1211.7 1231.15,1209.58 1231.73,1212.33 1232.32,1212.58 1232.91,1212.53 1233.49,1211.35 1234.08,1211.39 1234.66,1214.25 1235.25,1214.11 1235.84,1215.38 1236.42,1216.72 1237.01,1216.77 1237.6,1215.24 1238.18,1214.13 1238.77,1215.52 1239.36,1213.29 1239.94,1213.66 1240.53,1213.65 1241.11,1212.34 1241.7,1212.57 1242.29,1210.26 1242.87,1211.88 1243.46,1214.68 1244.05,1212.4 1244.63,1212.53 1245.22,1213.14 1245.81,1215.92 1246.39,1214.77 1246.98,1214.78 1247.57,1217.14 1248.15,1215.82 1248.74,1216.08 1249.32,1216.33 1249.91,1218.49 1250.5,1217.38 1251.08,1219.79 1251.67,1218.3 1252.26,1218.04 1252.84,1218.94 1253.43,1217.69 1254.02,1216.51 1254.6,1218.78 1255.19,1218.62 1255.78,1223.49 1256.36,1221.91 1256.95,1221.52 1257.53,1223.68 1258.12,1224.51 1258.71,1225.37 1259.29,1223.48 1259.88,1223.15 1260.47,1222.85 1261.05,1221.15 1261.64,1221.71 1262.23,1220 1262.81,1217.36 1263.4,1218.28 1263.98,1218.22 1264.57,1220.48 1265.16,1220.15 1265.74,1221.06 1266.33,1220.74 1266.92,1219.54 1267.5,1219.31 1268.09,1219.29 1268.68,1219.08 1269.26,1217.59 1269.85,1215.24 1270.44,1216.48 1271.02,1215.24 1271.61,1216.71 1272.19,1217.82 1272.78,1218.93 1273.37,1220.08 1273.95,1219.63 1274.54,1218.3 1275.13,1219.72 1275.71,1223.09 1276.3,1226.43 1276.89,1224.2 1277.47,1225.12 1278.06,1223.53 1278.65,1221.83 1279.23,1220.63 1279.82,1220.53 1280.4,1219.29 1280.99,1219.01 1281.58,1218.76 1282.16,1218.65 1282.75,1218.41 1283.34,1219.31 1283.92,1218.04 1284.51,1217.77 1285.1,1218.5 1285.68,1214.73 1286.27,1212.26 1286.86,1212.39 1287.44,1212.43 1288.03,1212.68 1288.61,1210.67 1289.2,1209.63 1289.79,1215.25 1290.37,1212.78 1290.96,1211.41 1291.55,1212.89 1292.13,1214.11 1292.72,1212.82 1293.31,1210.5 1293.89,1210.99 1294.48,1211.28 1295.06,1208.85 1295.65,1210.89 1296.24,1209.9 1296.82,1211.09 1297.41,1209.85 1298,1210.27 1298.58,1208.33 1299.17,1208.87 1299.76,1209.27 1300.34,1208.2 1300.93,1208.75 1301.52,1210.36 1302.1,1210.47 1302.69,1213.1 1303.27,1214.41 1303.86,1214.43 1304.45,1213.27 1305.03,1214.75 1305.62,1216.24 1306.21,1216.26 1306.79,1216.05 1307.38,1214.83 1307.97,1213.82 1308.55,1215.24 1309.14,1216.74 1309.73,1215.39 1310.31,1216.67 1310.9,1216.82 1311.48,1216.79 1312.07,1218.12 1312.66,1216.91 1313.24,1218.16 1313.83,1216.87 1314.42,1221.74 1315,1224.14 1315.59,1225.03 1316.18,1220.8 1316.76,1222.18 1317.35,1221.72 1317.93,1221.44 1318.52,1221.07 1319.11,1220.74 1319.69,1217.97 1320.28,1218.06 1320.87,1217.99 1321.45,1217.65 1322.04,1217.6 1322.63,1218.45 1323.21,1219.61 1323.8,1220.58 1324.39,1220.65 1324.97,1220.34 1325.56,1221.25 1326.14,1220.85 1326.73,1223.16 1327.32,1223.87 1327.9,1223.56 1328.49,1223.13 1329.08,1222.49 1329.66,1222.3 1330.25,1222.04 1330.84,1221.88 1331.42,1221.62 1332.01,1220.28 1332.6,1220.33 1333.18,1219.15 1333.77,1219.09 1334.35,1218.7 1334.94,1223.67 1335.53,1221.84 1336.11,1222.53 1336.7,1221.91 1337.29,1223.04 1337.87,1223.92 1338.46,1223.63 1339.05,1223.21 1339.63,1220.37 1340.22,1221.15 1340.8,1222.19 1341.39,1220.58 1341.98,1220.74 1342.56,1220.42 1343.15,1215.26 1343.74,1215.41 1344.32,1214.31 1344.91,1214.31 1345.5,1215.43 1346.08,1215.34 1346.67,1212.99 1347.26,1211.77 1347.84,1208.17 1348.43,1212.26 1349.01,1211.42 1349.6,1211.51 1350.19,1211.82 1350.77,1211.9 1351.36,1214.4 1351.95,1211.5 1352.53,1211.61 1353.12,1213.18 1353.71,1214.66 1354.29,1214.64 1354.88,1217.41 1355.47,1215.11 1356.05,1214.04 1356.64,1212.9 1357.22,1215.73 1357.81,1215.59 1358.4,1214.23 1358.98,1214.37 1359.57,1214.36 1360.16,1214.66 1360.74,1214.48 1361.33,1214.67 1361.92,1212 1362.5,1209.8 1363.09,1207.62 1363.68,1208.06 1364.26,1208.41 1364.85,1211.22 1365.43,1211.38 1366.02,1212.81 1366.61,1215.28 1367.19,1215.12 1367.78,1211.51 1368.37,1210.44 1368.95,1205.82 1369.54,1206.26 1370.13,1209.24 1370.71,1206.03 1371.3,1207.78 1371.88,1206.93 1372.47,1207.36 1373.06,1209.12 1373.64,1207.19 1374.23,1211.23 1374.82,1210.16 1375.4,1209.41 1375.99,1210.98 1376.58,1213.63 1377.16,1213.85 1377.75,1212.6 1378.34,1211.53 1378.92,1212.87 1379.51,1214.22 1380.09,1213.16 1380.68,1213.34 1381.27,1218.59 1381.85,1219.95 1382.44,1217.36 1383.03,1217.43 1383.61,1219.64 1384.2,1220.47 1384.79,1221.38 1385.37,1223.41 1385.96,1224.17 1386.55,1223.99 1387.13,1227.29 1387.72,1226.77 1388.3,1227.13 1388.89,1226.59 1389.48,1226.13 1390.06,1228.15 1390.65,1226.45 1391.24,1224.77 1391.82,1226.94 1392.41,1227.54 1393,1228.18 1393.58,1226.28 1394.17,1223.12 1394.75,1225.08 1395.34,1224.55 1395.93,1224 1396.51,1221.16 1397.1,1222.01 1397.69,1221.73 1398.27,1222.73 1398.86,1222.51 1399.45,1221.13 1400.03,1220.53 1400.62,1220.24 1401.21,1223.89 1401.79,1225.97 1402.38,1228.2 1402.96,1226.52 1403.55,1223.33 1404.14,1221.67 1404.72,1221.37 1405.31,1221.23 1405.9,1217.09 1406.48,1216.98 1407.07,1218.13 1407.66,1218.11 1408.24,1219.18 1408.83,1219.46 1409.42,1216.97 1410,1216.9 1410.59,1216.88 1411.17,1218.29 1411.76,1218.08 1412.35,1219.19 1412.93,1219.11 1413.52,1220.2 1414.11,1218.5 1414.69,1218.45 1415.28,1219.78 1415.87,1216.95 1416.45,1218.27 1417.04,1217.08 1417.63,1215.67 1418.21,1214.63 1418.8,1214.72 1419.38,1214.7 1419.97,1213.64 1420.56,1213.72 1421.14,1213.75 1421.73,1211.7 1422.32,1213 1422.9,1213.24 1423.49,1213.42 1424.08,1214.85 1424.66,1212.55 1425.25,1210.3 1425.83,1214.07 1426.42,1217.74 1427.01,1217.47 1427.59,1215.87 1428.18,1216.99 1428.77,1217.96 1429.35,1216.58 1429.94,1216.63 1430.53,1215.36 1431.11,1213.07 1431.7,1212.05 1432.29,1212.21 1432.87,1213.64 1433.46,1213.91 1434.04,1215.1 1434.63,1215.37 1435.22,1214.11 1435.8,1212.95 1436.39,1212.05 1436.98,1214.54 1437.56,1213.16 1438.15,1214.45 1438.74,1213.38 1439.32,1214.89 1439.91,1215.15 1440.5,1214.07 1441.08,1212.87 1441.67,1212.96 1442.25,1210.31 1442.84,1211.98 1443.43,1210.88 1444.01,1211.26 1444.6,1210.4 1445.19,1209.72 1445.77,1210.25 1446.36,1208.15 1446.95,1208.74 1447.53,1210.37 1448.12,1209.45 1448.7,1209.8 1449.29,1211.69 1449.88,1211.92 1450.46,1213.32 1451.05,1213.53 1451.64,1211.01 1452.22,1213.71 1452.81,1212.51 1453.4,1213.91 1453.98,1215.49 1454.57,1217.02 1455.16,1215.67 1455.74,1213.35 1456.33,1216.87 1456.91,1214.47 1457.5,1215.66 1458.09,1214.64 1458.67,1217.36 1459.26,1218.23 1459.85,1220.49 1460.43,1220.22 1461.02,1220.22 1461.61,1218.9 1462.19,1217.44 1462.78,1217.41 1463.37,1218.55 1463.95,1217.25 1464.54,1213.16 1465.12,1214.66 1465.71,1212.75 1466.3,1215.34 1466.88,1215.27 1467.47,1216.78 1468.06,1218.08 1468.64,1218.05 1469.23,1216.54 1469.82,1217.61 1470.4,1217.35 1470.99,1216.11 1471.57,1216.21 1472.16,1217.35 1472.75,1217.35 1473.33,1216.2 1473.92,1215.05 1474.51,1216.24 1475.09,1216.12 1475.68,1214.82 1476.27,1215.8 1476.85,1217.22 1477.44,1218.6 1478.03,1215.88 1478.61,1215.87 1479.2,1215.76 1479.78,1215.7 1480.37,1215.7 1480.96,1215.35 1481.54,1214.12 1482.13,1212.93 1482.72,1215.58 1483.3,1215.49 1483.89,1213.01 1484.48,1211.81 1485.06,1211.91 1485.65,1209.51 1486.24,1208.54 1486.82,1208.91 1487.41,1208.16 1487.99,1211.17 1488.58,1209.25 1489.17,1208.28 1489.75,1208.56 1490.34,1206.38 1490.93,1209.45 1491.51,1209.91 1492.1,1210.14 1492.69,1213.03 1493.27,1213.3 1493.86,1214.48 1494.45,1213.39 1495.03,1213.57 1495.62,1211.09 1496.2,1211.25 1496.79,1211.41 1497.38,1213.02 1497.96,1213.17 1498.55,1212.21 1499.14,1212.32 1499.72,1216.22 1500.31,1217.4 1500.9,1217.25 1501.48,1217.07 1502.07,1219.28 1502.65,1220.27 1503.24,1217.53 1503.83,1217.32 1504.41,1216.03 1505,1218.65 1505.59,1216.06 1506.17,1216.17 1506.76,1215.21 1507.35,1217.83 1507.93,1217.61 1508.52,1217.41 1509.11,1217.28 1509.69,1216.01 1510.28,1214.73 1510.86,1214.85 1511.45,1213.77 1512.04,1212.77 1512.62,1215.53 1513.21,1214.43 1513.8,1215.95 1514.38,1215.97 1514.97,1214.52 1515.56,1217.12 1516.14,1218.54 1516.73,1221.97 1517.32,1223.15 1517.9,1221.77 1518.49,1221.42 1519.07,1219.91 1519.66,1218.36 1520.25,1216.58 1520.83,1216.82 1521.42,1214.57 1522.01,1214.63 1522.59,1213.62 1523.18,1213.88 1523.77,1212.87 1524.35,1213.01 1524.94,1215.73 1525.52,1214.45 1526.11,1216.97 1526.7,1214.34 1527.28,1213.38 1527.87,1213.56 1528.46,1212.63 1529.04,1212.94 1529.63,1211.64 1530.22,1212 1530.8,1211.11 1531.39,1212.61 1531.98,1211.63 1532.56,1213.11 1533.15,1214.43 1533.73,1214.32 1534.32,1215.8 1534.91,1214.57 1535.49,1214.7 1536.08,1214.59 1536.67,1212.03 1537.25,1208.22 1537.84,1208.92 1538.43,1207.79 1539.01,1206.99 1539.6,1203.99 1540.19,1205.85 1540.77,1209.22 1541.36,1208.46 1541.94,1211.53 1542.53,1213.29 1543.12,1213.76 1543.7,1214.02 1544.29,1214.42 1544.88,1216.88 1545.46,1215.77 1546.05,1219.67 1546.64,1220.54 1547.22,1220.45 1547.81,1218.98 1548.4,1216.39 1548.98,1216.3 1549.57,1217.55 1550.15,1217.53 1550.74,1217.5 1551.33,1218.68 1551.91,1218.69 1552.5,1219.67 1553.09,1222.18 1553.67,1222.96 1554.26,1223.97 1554.85,1223.56 1555.43,1223.19 1556.02,1221.14 1556.6,1219.71 1557.19,1218.32 1557.78,1215.46 1558.36,1214.32 1558.95,1216.79 1559.54,1218.01 1560.12,1219.15 1560.71,1220.32 1561.3,1221.03 1561.88,1220.76 1562.47,1219.05 1563.06,1217.52 1563.64,1216.07 1564.23,1215.92 1564.81,1214.87 1565.4,1216.11 1565.99,1216.14 1566.57,1217.57 1567.16,1217.48 1567.75,1217.34 1568.33,1217.36 1568.92,1215.89 1569.51,1215.03 1570.09,1214.88 1570.68,1211.15 1571.27,1211.49 1571.85,1211.66 1572.44,1213.35 1573.02,1213.53 1573.61,1212.31 1574.2,1209.83 1574.78,1209.12 1575.37,1209.58 1575.96,1208.8 1576.54,1210.39 1577.13,1210.82 1577.72,1211.11 1578.3,1211.48 1578.89,1214.37 1579.47,1216.92 1580.06,1216.71 1580.65,1216.72 1581.23,1216.8 1581.82,1217.15 1582.41,1216.89 1582.99,1216.75 1583.58,1216.6 1584.17,1217.93 1584.75,1218.87 1585.34,1219.95 1585.93,1221.14 1586.51,1222.21 1587.1,1221.69 1587.68,1221.45 1588.27,1222.38 1588.86,1222.15 1589.44,1221.61 1590.03,1222.66 1590.62,1220.95 1591.2,1221.91 1591.79,1224 1592.38,1220.84 1592.96,1219.36 1593.55,1218.74 1594.14,1218.51 1594.72,1218.42 1595.31,1218.06 1595.89,1219.26 1596.48,1222.7 1597.07,1222.33 1597.65,1223.05 1598.24,1222.74 1598.83,1220.13 1599.41,1217.42 1600,1214.9 1600.59,1217.3 1601.17,1216.07 1601.76,1216.97 1602.34,1215.55 1602.93,1217.1 1603.52,1219.33 1604.1,1221.57 1604.69,1222.51 1605.28,1220.85 1605.86,1220.48 1606.45,1221.75 1607.04,1221.42 1607.62,1223.64 1608.21,1222.13 1608.8,1224.47 1609.38,1226.33 1609.97,1224.46 1610.55,1227.83 1611.14,1225.87 1611.73,1225.47 1612.31,1227.45 1612.9,1226.74 1613.49,1224.99 1614.07,1224.46 1614.66,1222.94 1615.25,1225.14 1615.83,1225.67 1616.42,1223.81 1617.01,1222.06 1617.59,1220.29 1618.18,1218.56 1618.76,1218.46 1619.35,1218.53 1619.94,1217.58 1620.52,1216.25 1621.11,1213.71 1621.7,1217.74 1622.28,1216.46 1622.87,1212.7 1623.46,1214.17 1624.04,1214.17 1624.63,1215.39 1625.22,1214.21 1625.8,1217.01 1626.39,1216.99 1626.97,1215.75 1627.56,1212.02 1628.15,1209.68 1628.73,1208.8 1629.32,1204.33 1629.91,1206.38 1630.49,1204.81 1631.08,1206.58 1631.67,1206.89 1632.25,1207.71 1632.84,1207.92 1633.42,1207.14 1634.01,1206.21 1634.6,1208.03 1635.18,1209.77 1635.77,1210.06 1636.36,1209 1636.94,1208.23 1637.53,1207.52 1638.12,1208.22 1638.7,1208.66 1639.29,1207.65 1639.88,1208.16 1640.46,1207.29 1641.05,1207.89 1641.63,1209.45 1642.22,1210.81 1642.81,1210.82 1643.39,1211.2 1643.98,1209.04 1644.57,1209.01 1645.15,1208.26 1645.74,1212.3 1646.33,1209.87 1646.91,1210.25 1647.5,1211.96 1648.09,1215.85 1648.67,1215.87 1649.26,1216.06 1649.84,1215.73 1650.43,1219.24 1651.02,1219.03 1651.6,1217.83 1652.19,1217.86 1652.78,1219.26 1653.36,1218.36 1653.95,1221 1654.54,1215.64 1655.12,1216.8 1655.71,1215.45 1656.29,1216.54 1656.88,1217.77 1657.47,1216.55 1658.05,1216.25 1658.64,1217.31 1659.23,1217.38 1659.81,1218.39 1660.4,1221.87 1660.99,1222.75 1661.57,1223.57 1662.16,1223.17 1662.75,1221.69 1663.33,1219.04 1663.92,1221.37 1664.5,1220.84 1665.09,1219.31 1665.68,1218.01 1666.26,1219.36 1666.85,1219.18 1667.44,1220.31 1668.02,1219.91 1668.61,1218.62 1669.2,1217.27 1669.78,1215.95 1670.37,1215.84 1670.96,1216.27 1671.54,1217.32 1672.13,1216 1672.71,1214.88 1673.3,1214.93 1673.89,1216.16 1674.47,1217.41 1675.06,1219.52 1675.65,1216.96 1676.23,1216.98 1676.82,1218.42 1677.41,1215.99 1677.99,1216.02 1678.58,1214.87 1679.17,1213.61 1679.75,1213.99 1680.34,1217.82 1680.92,1216.34 1681.51,1216.5 1682.1,1216.28 1682.68,1216.2 1683.27,1218.51 1683.86,1218.26 1684.44,1219.59 1685.03,1219.51 1685.62,1219.47 1686.2,1219.24 1686.79,1215.14 1687.37,1215.09 1687.96,1216.21 1688.55,1215.04 1689.13,1212.94 1689.72,1213.13 1690.31,1214.78 1690.89,1213.92 1691.48,1215.16 1692.07,1214.28 1692.65,1214.62 1693.24,1215.78 1693.83,1217.14 1694.41,1217.17 1695,1218.28 1695.58,1222.03 1696.17,1219.03 1696.76,1217.82 1697.34,1217.54 1697.93,1215.08 1698.52,1212.51 1699.1,1212.75 1699.69,1211.77 1700.28,1211.95 1700.86,1212.14 1701.45,1211.3 1702.04,1211.47 1702.62,1212.93 1703.21,1214.08 1703.79,1214.08 1704.38,1214.44 1704.97,1213.16 1705.55,1210.81 1706.14,1210.95 1706.73,1208.71 1707.31,1209.3 1707.9,1209.48 1708.49,1210.86 1709.07,1210.94 1709.66,1211.31 1710.24,1209.95 1710.83,1212.46 1711.42,1212.6 1712,1213.97 1712.59,1214.02 1713.18,1214.14 1713.76,1213.08 1714.35,1215.68 1714.94,1216.9 1715.52,1216.64 1716.11,1216.43 1716.7,1219.13 1717.28,1217.77 1717.87,1217.61 1718.45,1218.75 1719.04,1217.44 1719.63,1216.12 1720.21,1214.93 1720.8,1213.71 1721.39,1212.64 1721.97,1211.28 1722.56,1213.14 1723.15,1210.92 1723.73,1211.39 1724.32,1212.97 1724.91,1211.95 1725.49,1214.63 1726.08,1215.88 1726.66,1215.86 1727.25,1216.8 1727.84,1214.12 1728.42,1214.24 1729.01,1214.18 1729.6,1216.64 1730.18,1215.1 1730.77,1213.85 1731.36,1215.1 1731.94,1213.76 1732.53,1213.8 1733.11,1214.75 1733.7,1213.45 1734.29,1214.61 1734.87,1215.82 1735.46,1217.08 1736.05,1215.9 1736.63,1216 1737.22,1216.12 1737.81,1214.97 1738.39,1214.84 1738.98,1216.07 1739.57,1217.29 1740.15,1217.54 1740.74,1213.64 1741.32,1211.13 1741.91,1211.5 1742.5,1211.81 1743.08,1210.7 1743.67,1212.24 1744.26,1210.06 1744.84,1211.4 1745.43,1212.9 1746.02,1213.06 1746.6,1208.26 1747.19,1209.81 1747.78,1211.03 1748.36,1211.32 1748.95,1214.21 1749.53,1216.91 1750.12,1214.37 1750.71,1214.43 1751.29,1214.3 1751.88,1215.6 1752.47,1214.79 1753.05,1214.89 1753.64,1216.37 1754.23,1213.87 1754.81,1213.95 1755.4,1215.3 1755.99,1215.38 1756.57,1216.9 1757.16,1215.69 1757.74,1217.17 1758.33,1214.75 1758.92,1215.99 1759.5,1215.75 1760.09,1214.57 1760.68,1213.53 1761.26,1213.73 1761.85,1216.27 1762.44,1217.56 1763.02,1213.64 1763.61,1213.83 1764.19,1216.39 1764.78,1215.2 1765.37,1215.17 1765.95,1216.27 1766.54,1215.05 1767.13,1215.13 1767.71,1212.7 1768.3,1216.67 1768.89,1216.85 1769.47,1216.7 1770.06,1216.82 1770.65,1218.13 1771.23,1218.26 1771.82,1218.15 1772.4,1220.4 1772.99,1220.51 1773.58,1219.99 1774.16,1220.77 1774.75,1221.67 1775.34,1221.47 1775.92,1219.59 1776.51,1220.58 1777.1,1220.4 1777.68,1220.06 1778.27,1219.79 1778.86,1223.17 1779.44,1224.05 1780.03,1223.68 1780.61,1224.51 1781.2,1222.7 1781.79,1223.64 1782.37,1223.38 1782.96,1220.75 1783.55,1219.16 1784.13,1219.9 1784.72,1219.69 1785.31,1220.53 1785.89,1221.6 1786.48,1221.19 1787.06,1223.23 1787.65,1220.32 1788.24,1220.25 1788.82,1217.61 1789.41,1216.2 1790,1222.22 1790.58,1220.77 1791.17,1216.78 1791.76,1215.71 1792.34,1218.05 1792.93,1215.15 1793.52,1217.72 1794.1,1216.31 1794.69,1216.24 1795.27,1216.23 1795.86,1216.36 1796.45,1217.6 1797.03,1220.03 1797.62,1220.77 1798.21,1220.5 1798.79,1220.12 1799.38,1221.19 1799.97,1217.05 1800.55,1213.16 1801.14,1213.26 1801.73,1212.12 1802.31,1212.26 1802.9,1213.43 1803.48,1213.72 1804.07,1215.18 1804.66,1215.11 1805.24,1214.11 1805.83,1214.16 1806.42,1212.02 1807,1213.22 1807.59,1214.69 1808.18,1213.48 1808.76,1212.2 1809.35,1212.51 1809.94,1213.89 1810.52,1215.13 1811.11,1213.85 1811.69,1213.84 1812.28,1211.32 1812.87,1212.97 1813.45,1213.2 1814.04,1214.78 1814.63,1216.08 1815.21,1215.99 1815.8,1216.13 1816.39,1218.35 1816.97,1219.32 1817.56,1217.94 1818.14,1216.58 1818.73,1215.18 1819.32,1212.6 1819.9,1211.6 1820.49,1211.73 1821.08,1211.75 1821.66,1210.77 1822.25,1209.75 1822.84,1208.52 1823.42,1210.4 1824.01,1209.53 1824.6,1208.53 1825.18,1206.44 1825.77,1206.89 1826.35,1207.36 1826.94,1207.68 1827.53,1208.18 1828.11,1207.52 1828.7,1205.03 1829.29,1210.46 1829.87,1211.84 1830.46,1210.8 1831.05,1211.03 1831.63,1212.55 1832.22,1211.49 1832.81,1212.76 1833.39,1214.36 1833.98,1215.77 1834.56,1216.94 1835.15,1220.39 1835.74,1221.68 1836.32,1220.35 1836.91,1218.77 1837.5,1218.77 1838.08,1218.63 1838.67,1220.82 1839.26,1218.24 1839.84,1218.15 1840.43,1217.84 1841.01,1218.05 1841.6,1215.33 1842.19,1216.65 1842.77,1216.61 1843.36,1219.03 1843.95,1221.39 1844.53,1221.17 1845.12,1221.95 1845.71,1222.95 1846.29,1221.26 1846.88,1220.93 1847.47,1220.49 1848.05,1221.64 1848.64,1221.36 1849.22,1223.7 1849.81,1222.07 1850.4,1221.82 1850.98,1221.43 1851.57,1219.97 1852.16,1219.76 1852.74,1219.85 1853.33,1218.47 1853.92,1219.46 1854.5,1218.1 1855.09,1221.87 1855.68,1220.53 1856.26,1221.71 1856.85,1220.11 1857.43,1221.05 1858.02,1221.06 1858.61,1220.78 1859.19,1217.06 1859.78,1217.16 1860.37,1217.18 1860.95,1215.81 1861.54,1217.03 1862.13,1217.13 1862.71,1217.9 1863.3,1217.98 1863.88,1216.37 1864.47,1215.07 1865.06,1213.78 1865.64,1211.31 1866.23,1210.23 1866.82,1211.66 1867.4,1209.09 1867.99,1208.02 1868.58,1207.28 1869.16,1210.49 1869.75,1210.84 1870.34,1210.09 1870.92,1211.55 1871.51,1209.03 1872.09,1211.8 1872.68,1210.73 1873.27,1209.68 1873.85,1208.74 1874.44,1211.64 1875.03,1212 1875.61,1211.16 1876.2,1210.07 1876.79,1209.3 1877.37,1209.55 1877.96,1210.31 1878.55,1209.45 1879.13,1212.11 1879.72,1212.53 1880.3,1212.72 1880.89,1212.79 1881.48,1213.01 1882.06,1213.32 1882.65,1213.34 1883.24,1211.15 1883.82,1211.62 1884.41,1211.65 1885,1214.23 1885.58,1216.61 1886.17,1215.41 1886.76,1215.45 1887.34,1215.36 1887.93,1215.42 1888.51,1215.52 1889.1,1214.16 1889.69,1215.34 1890.27,1212.89 1890.86,1211.93 1891.45,1212.29 1892.03,1211.29 1892.62,1210.45 1893.21,1210.72 1893.79,1212.34 1894.38,1212.39 1894.96,1211.35 1895.55,1212.81 1896.14,1211.71 1896.72,1213.31 1897.31,1213.41 1897.9,1213.68 1898.48,1213.7 1899.07,1213.05 1899.66,1212.94 1900.24,1210.64 1900.83,1209.64 1901.42,1210.22 1902,1211.97 1902.59,1213.45 1903.17,1212.49 1903.76,1213.79 1904.35,1216.2 1904.93,1216.26 1905.52,1217.65 1906.11,1217.56 1906.69,1215.17 1907.28,1213.82 1907.87,1212.74 1908.45,1211.81 1909.04,1211.85 1909.63,1213.28 1910.21,1213.65 1910.8,1213.73 1911.38,1213.85 1911.97,1216.24 1912.56,1215.02 1913.14,1213.77 1913.73,1215.03 1914.32,1216.21 1914.9,1216.13 1915.49,1217.41 1916.08,1217.45 1916.66,1218.61 1917.25,1218.5 1917.83,1217.08 1918.42,1218.45 1919.01,1219.57 1919.59,1217.97 1920.18,1219.29 1920.77,1218 1921.35,1220.39 1921.94,1219.05 1922.53,1217.67 1923.11,1217.54 1923.7,1221.03 1924.29,1220.69 1924.87,1220.44 1925.46,1221.43 1926.04,1218.76 1926.63,1220.01 1927.22,1220.8 1927.8,1220.44 1928.39,1219.22 1928.98,1218.81 1929.56,1217.14 1930.15,1214.61 1930.74,1216.95 1931.32,1216.72 1931.91,1217.75 1932.5,1215.46 1933.08,1215.31 1933.67,1216.84 1934.25,1216.82 1934.84,1215.48 1935.43,1215.34 1936.01,1215.52 1936.6,1216.44 1937.19,1215.05 1937.77,1214.96 1938.36,1212.56 1938.95,1212.63 1939.53,1211.44 1940.12,1211.8 1940.71,1214.7 1941.29,1216.12 1941.88,1216.37 1942.46,1217.66 1943.05,1216.23 1943.64,1213.99 1944.22,1213.93 1944.81,1214.44 1945.4,1211.91 1945.98,1209.74 1946.57,1208.77 1947.16,1207.67 1947.74,1207.04 1948.33,1207.67 1948.91,1206.78 1949.5,1209.77 1950.09,1211.6 1950.67,1211.88 1951.26,1212.04 1951.85,1213.42 1952.43,1211.13 1953.02,1210.09 1953.61,1208.97 1954.19,1209.61 1954.78,1210.08 1955.37,1211.56 1955.95,1210.37 1956.54,1212.99 1957.12,1214.24 1957.71,1217.22 1958.3,1217.24 1958.88,1218.3 1959.47,1214.44 1960.06,1217.11 1960.64,1216.87 1961.23,1218.04 1961.82,1216.42 1962.4,1216.28 1962.99,1216.44 1963.58,1216.66 1964.16,1217.69 1964.75,1221.61 1965.33,1221.2 1965.92,1218.4 1966.51,1215.94 1967.09,1216.06 1967.68,1217.48 1968.27,1217.7 1968.85,1220.49 1969.44,1216.22 1970.03,1214.93 1970.61,1214.75 1971.2,1214.78 1971.78,1212.51 1972.37,1210.12 1972.96,1210.38 1973.54,1210.81 1974.13,1210.86 1974.72,1212.36 1975.3,1216.15 1975.89,1216.25 1976.48,1214.96 1977.06,1216.03 1977.65,1215.88 1978.24,1213.27 1978.82,1214.61 1979.41,1215.95 1979.99,1216.17 1980.58,1217.38 1981.17,1217.26 1981.75,1217.45 1982.34,1217.53 1982.93,1217.84 1983.51,1219.13 1984.1,1217.6 1984.69,1218.68 1985.27,1219.74 1985.86,1218.23 1986.45,1219.47 1987.03,1220.45 1987.62,1220.18 1988.2,1219.95 1988.79,1220.9 1989.38,1219.27 1989.96,1217.9 1990.55,1216.55 1991.14,1216.44 1991.72,1215.07 1992.31,1215.04 1992.9,1213.88 1993.48,1212.78 1994.07,1215.4 1994.65,1214.25 1995.24,1211.8 1995.83,1217.12 1996.41,1219.73 1997,1223.01 1997.59,1222.62 1998.17,1221.06 1998.76,1219.57 1999.35,1218.31 1999.93,1218.06 2000.52,1220.16 2001.11,1220.02 2001.69,1218.85 2002.28,1221.45 2002.86,1220.94 2003.45,1220.63 2004.04,1221.43 2004.62,1223.67 2005.21,1227 2005.8,1226.3 2006.38,1226.02 2006.97,1225.46 2007.56,1224.9 2008.14,1225.7 2008.73,1224.04 2009.32,1218.77 2009.9,1219.91 2010.49,1219.41 2011.07,1219.34 2011.66,1217.9 2012.25,1220.48 2012.83,1220.16 2013.42,1221.04 2014.01,1216.88 2014.59,1217.75 2015.18,1217.64 2015.77,1215.95 2016.35,1215.96 2016.94,1215.99 2017.53,1214.84 2018.11,1212.67 2018.7,1213.08 2019.28,1213.18 2019.87,1214.57 2020.46,1215.78 2021.04,1214.67 2021.63,1217.28 2022.22,1215.97 2022.8,1219.68 2023.39,1219.81 2023.98,1222.33 2024.56,1220.77 2025.15,1221.63 2025.73,1222.35 2026.32,1222 2026.91,1219.5 2027.49,1215.51 2028.08,1213.07 2028.67,1215.47 2029.25,1216.41 2029.84,1214.86 2030.43,1214.93 2031.01,1217.62 2031.6,1218.86 2032.19,1216.55 2032.77,1213.87 2033.36,1214.19 2033.94,1213.28 2034.53,1214.83 2035.12,1212.4 2035.7,1213.63 2036.29,1213.86 2036.88,1213.98 2037.46,1216.62 2038.05,1220.37 2038.64,1221.12 2039.22,1221.95 2039.81,1217.92 2040.4,1218.98 2040.98,1217.37 2041.57,1220.88 2042.15,1219.26 2042.74,1220.35 2043.33,1220.29 2043.91,1221.48 2044.5,1222.51 2045.09,1223.26 2045.67,1223.08 2046.26,1220.32 2046.85,1217.79 2047.43,1218.77 2048.02,1218.74 2048.6,1219.54 2049.19,1218.02 2049.78,1217.65 2050.36,1216.43 2050.95,1217.76 2051.54,1217.67 2052.12,1217.53 2052.71,1216.05 2053.3,1215.89 2053.88,1218.32 2054.47,1219.2 2055.06,1219.12 2055.64,1218.8 2056.23,1218.46 2056.81,1218.27 2057.4,1219.24 2057.99,1216.26 2058.57,1212.67 2059.16,1216.46 2059.75,1216.27 2060.33,1217.39 2060.92,1216.26 2061.51,1214.87 2062.09,1216.12 2062.68,1214.87 2063.27,1209.87 2063.85,1210.08 2064.44,1210.44 2065.02,1211.9 2065.61,1215.76 2066.2,1217.02 2066.78,1216.91 2067.37,1215.84 2067.96,1213.45 2068.54,1214.61 2069.13,1209.46 2069.72,1209.89 2070.3,1211.31 2070.89,1211.54 2071.48,1213.2 2072.06,1214.78 2072.65,1213.78 2073.23,1211.83 2073.82,1211.82 2074.41,1215.67 2074.99,1215.6 2075.58,1214.45 2076.17,1214.62 2076.75,1213.32 2077.34,1213.39 2077.93,1209.55 2078.51,1212.59 2079.1,1212.46 2079.68,1212.64 2080.27,1214.05 2080.86,1212.91 2081.44,1211.83 2082.03,1210.75 2082.62,1210.95 2083.2,1211.49 2083.79,1213.97 2084.38,1211.76 2084.96,1213.07 2085.55,1213.29 2086.14,1212.36 2086.72,1212.55 2087.31,1212.6 2087.89,1218.76 2088.48,1216.01 2089.07,1216.18 2089.65,1216.24 2090.24,1218.57 2090.83,1219.81 2091.41,1218.12 2092,1219.29 2092.59,1222.62 2093.17,1223.52 2093.76,1224.45 2094.35,1227.58 2094.93,1226.8 2095.52,1224.94 2096.1,1225.64 2096.69,1222.55 2097.28,1219.56 2097.86,1219.34 2098.45,1219.38 2099.04,1220.59 2099.62,1218.98 2100.21,1220.06 2100.8,1217.24 2101.38,1219.63 2101.97,1219.39 2102.55,1219.17 2103.14,1219.1 2103.73,1218.72 2104.31,1217.11 2104.9,1214.39 2105.49,1217.06 2106.07,1218.14 2106.66,1215.28 2107.25,1216.63 2107.83,1213.9 2108.42,1213.75 2109.01,1212.74 2109.59,1212.8 2110.18,1214.35 2110.76,1215.8 2111.35,1216.06 2111.94,1214.83 2112.52,1214.97 2113.11,1218.7 2113.7,1216.21 2114.28,1216.2 2114.87,1216.16 2115.46,1217.58 2116.04,1218.47 2116.63,1216.98 2117.22,1213.55 2117.8,1212.36 2118.39,1211.39 2118.97,1211.79 2119.56,1211.96 2120.15,1212.35 2120.73,1213.75 2121.32,1212.61 2121.91,1213.63 2122.49,1213.48 2123.08,1217.25 2123.67,1217.24 2124.25,1216.86 2124.84,1211.91 2125.42,1209.81 2126.01,1210.24 2126.6,1213.03 2127.18,1213.21 2127.77,1214.85 2128.36,1216.16 2128.94,1216.1 2129.53,1216.09 2130.12,1216 2130.7,1217.23 2131.29,1218.44 2131.88,1218.56 2132.46,1219.88 2133.05,1217.32 2133.63,1217.12 2134.22,1220.64 2134.81,1220.43 2135.39,1222.69 2135.98,1222.37 2136.57,1221 2137.15,1220.68 2137.74,1219.16 2138.33,1221.49 2138.91,1220.03 2139.5,1218.48 2140.09,1215.62 2140.67,1215.43 2141.26,1211.95 2141.84,1212.31 2142.43,1209.91 2143.02,1210.24 2143.6,1211.8 2144.19,1212.16 2144.78,1212.31 2145.36,1210.05 2145.95,1210.25 2146.54,1212.01 2147.12,1213.23 2147.71,1212.23 2148.3,1212.74 2148.88,1211.65 2149.47,1213.35 2150.05,1213.6 2150.64,1212.42 2151.23,1210.19 2151.81,1210.35 2152.4,1210.64 2152.99,1212.08 2153.57,1209.6 2154.16,1212.35 2154.75,1215.01 2155.33,1217.39 2155.92,1217.41 2156.5,1219.68 2157.09,1219.46 2157.68,1218.02 2158.26,1216.6 \"/>\n<path clip-path=\"url(#clip612)\" d=\"M986.025 1216.43 L986.612 1216.43 L987.198 1216.43 L987.785 1216.43 L988.371 1216.43 L988.957 1216.43 L989.544 1216.43 L990.13 1216.43 L990.717 1216.43 L991.303 1216.43 L991.889 1216.43 L992.476 1216.43 L993.062 1216.43 L993.649 1216.43 L994.235 1216.43 L994.822 1216.43 L995.408 1216.43 L995.994 1216.43 L996.581 1216.43 L997.167 1216.43 L997.754 1216.43 L998.34 1216.43 L998.926 1216.43 L999.513 1216.43 L1000.1 1216.43 L1000.69 1216.43 L1001.27 1216.43 L1001.86 1216.43 L1002.44 1216.43 L1003.03 1216.43 L1003.62 1216.43 L1004.2 1216.43 L1004.79 1216.43 L1005.38 1216.43 L1005.96 1216.43 L1006.55 1216.43 L1007.14 1216.43 L1007.72 1216.43 L1008.31 1216.43 L1008.9 1216.43 L1009.48 1216.43 L1010.07 1216.43 L1010.65 1216.43 L1011.24 1216.43 L1011.83 1216.43 L1012.41 1216.43 L1013 1216.43 L1013.59 1216.43 L1014.17 1216.43 L1014.76 1216.43 L1015.35 1216.43 L1015.93 1216.43 L1016.52 1216.43 L1017.11 1216.43 L1017.69 1216.43 L1018.28 1216.43 L1018.86 1216.43 L1019.45 1216.43 L1020.04 1216.43 L1020.62 1216.43 L1021.21 1216.43 L1021.8 1216.43 L1022.38 1216.43 L1022.97 1216.43 L1023.56 1216.43 L1024.14 1216.43 L1024.73 1216.43 L1025.32 1216.43 L1025.9 1216.43 L1026.49 1216.43 L1027.07 1216.43 L1027.66 1216.43 L1028.25 1216.43 L1028.83 1216.43 L1029.42 1216.43 L1030.01 1216.43 L1030.59 1216.43 L1031.18 1216.43 L1031.77 1216.43 L1032.35 1216.43 L1032.94 1216.43 L1033.52 1216.43 L1034.11 1216.43 L1034.7 1216.43 L1035.28 1216.43 L1035.87 1216.43 L1036.46 1216.43 L1037.04 1216.43 L1037.63 1216.43 L1038.22 1216.43 L1038.8 1216.43 L1039.39 1216.43 L1039.98 1216.43 L1040.56 1216.43 L1041.15 1216.43 L1041.73 1216.43 L1042.32 1216.43 L1042.91 1216.43 L1043.49 1216.43 L1044.08 1216.43 L1044.67 1216.43 L1045.25 1216.43 L1045.84 1216.43 L1046.43 1216.43 L1047.01 1216.43 L1047.6 1216.43 L1048.19 1216.43 L1048.77 1216.43 L1049.36 1216.43 L1049.94 1216.43 L1050.53 1216.43 L1051.12 1216.43 L1051.7 1216.43 L1052.29 1216.43 L1052.88 1216.43 L1053.46 1216.43 L1054.05 1216.43 L1054.64 1216.43 L1055.22 1216.43 L1055.81 1216.43 L1056.39 1216.43 L1056.98 1216.43 L1057.57 1216.43 L1058.15 1216.43 L1058.74 1216.43 L1059.33 1216.43 L1059.91 1216.43 L1060.5 1216.43 L1061.09 1216.43 L1061.67 1216.43 L1062.26 1216.43 L1062.85 1216.43 L1063.43 1216.43 L1064.02 1216.43 L1064.6 1216.43 L1065.19 1216.43 L1065.78 1216.43 L1066.36 1216.43 L1066.95 1216.43 L1067.54 1216.43 L1068.12 1216.43 L1068.71 1216.43 L1069.3 1216.43 L1069.88 1216.43 L1070.47 1216.43 L1071.06 1216.43 L1071.64 1216.43 L1072.23 1216.43 L1072.81 1216.43 L1073.4 1216.43 L1073.99 1216.43 L1074.57 1216.43 L1075.16 1216.43 L1075.75 1216.43 L1076.33 1216.43 L1076.92 1216.43 L1077.51 1216.43 L1078.09 1216.43 L1078.68 1216.43 L1079.26 1216.43 L1079.85 1216.43 L1080.44 1216.43 L1081.02 1216.43 L1081.61 1216.43 L1082.2 1216.43 L1082.78 1216.43 L1083.37 1216.43 L1083.96 1216.43 L1084.54 1216.43 L1085.13 1216.43 L1085.72 1216.43 L1086.3 1216.43 L1086.89 1216.43 L1087.47 1216.43 L1088.06 1216.43 L1088.65 1216.43 L1089.23 1216.43 L1089.82 1216.43 L1090.41 1216.43 L1090.99 1216.43 L1091.58 1216.43 L1092.17 1216.43 L1092.75 1216.43 L1093.34 1216.43 L1093.93 1216.43 L1094.51 1216.43 L1095.1 1216.43 L1095.68 1216.43 L1096.27 1216.43 L1096.86 1216.43 L1097.44 1216.43 L1098.03 1216.43 L1098.62 1216.43 L1099.2 1216.43 L1099.79 1216.43 L1100.38 1216.43 L1100.96 1216.43 L1101.55 1216.43 L1102.14 1216.43 L1102.72 1216.43 L1103.31 1216.43 L1103.89 1216.43 L1104.48 1216.43 L1105.07 1216.43 L1105.65 1216.43 L1106.24 1216.43 L1106.83 1216.43 L1107.41 1216.43 L1108 1216.43 L1108.59 1216.43 L1109.17 1216.43 L1109.76 1216.43 L1110.34 1216.43 L1110.93 1216.43 L1111.52 1216.43 L1112.1 1216.43 L1112.69 1216.43 L1113.28 1216.43 L1113.86 1216.43 L1114.45 1216.43 L1115.04 1216.43 L1115.62 1216.43 L1116.21 1216.43 L1116.8 1216.43 L1117.38 1216.43 L1117.97 1216.43 L1118.55 1216.43 L1119.14 1216.43 L1119.73 1216.43 L1120.31 1216.43 L1120.9 1216.43 L1121.49 1216.43 L1122.07 1216.43 L1122.66 1216.43 L1123.25 1216.43 L1123.83 1216.43 L1124.42 1216.43 L1125.01 1216.43 L1125.59 1216.43 L1126.18 1216.43 L1126.76 1216.43 L1127.35 1216.43 L1127.94 1216.43 L1128.52 1216.43 L1129.11 1216.43 L1129.7 1216.43 L1130.28 1216.43 L1130.87 1216.43 L1131.46 1216.43 L1132.04 1216.43 L1132.63 1216.43 L1133.21 1216.43 L1133.8 1216.43 L1134.39 1216.43 L1134.97 1216.43 L1135.56 1216.43 L1136.15 1216.43 L1136.73 1216.43 L1137.32 1216.43 L1137.91 1216.43 L1138.49 1216.43 L1139.08 1216.43 L1139.67 1216.43 L1140.25 1216.43 L1140.84 1216.43 L1141.42 1216.43 L1142.01 1216.43 L1142.6 1216.43 L1143.18 1216.43 L1143.77 1216.43 L1144.36 1216.43 L1144.94 1216.43 L1145.53 1216.43 L1146.12 1216.43 L1146.7 1216.43 L1147.29 1216.43 L1147.88 1216.43 L1148.46 1216.43 L1149.05 1216.43 L1149.63 1216.43 L1150.22 1216.43 L1150.81 1216.43 L1151.39 1216.43 L1151.98 1216.43 L1152.57 1216.43 L1153.15 1216.43 L1153.74 1216.43 L1154.33 1216.43 L1154.91 1216.43 L1155.5 1216.43 L1156.09 1216.43 L1156.67 1216.43 L1157.26 1216.43 L1157.84 1216.43 L1158.43 1216.43 L1159.02 1216.43 L1159.6 1216.43 L1160.19 1216.43 L1160.78 1216.43 L1161.36 1216.43 L1161.95 1216.43 L1162.54 1216.43 L1163.12 1216.43 L1163.71 1216.43 L1164.29 1216.43 L1164.88 1216.43 L1165.47 1216.43 L1166.05 1216.43 L1166.64 1216.43 L1167.23 1216.43 L1167.81 1216.43 L1168.4 1216.43 L1168.99 1216.43 L1169.57 1216.43 L1170.16 1216.43 L1170.75 1216.43 L1171.33 1216.43 L1171.92 1216.43 L1172.5 1216.43 L1173.09 1216.43 L1173.68 1216.43 L1174.26 1216.43 L1174.85 1216.43 L1175.44 1216.43 L1176.02 1216.43 L1176.61 1216.43 L1177.2 1216.43 L1177.78 1216.43 L1178.37 1216.43 L1178.96 1216.43 L1179.54 1216.43 L1180.13 1216.43 L1180.71 1216.43 L1181.3 1216.43 L1181.89 1216.43 L1182.47 1216.43 L1183.06 1216.43 L1183.65 1216.43 L1184.23 1216.43 L1184.82 1216.43 L1185.41 1216.43 L1185.99 1216.43 L1186.58 1216.43 L1187.16 1216.43 L1187.75 1216.43 L1188.34 1216.43 L1188.92 1216.43 L1189.51 1216.43 L1190.1 1216.43 L1190.68 1216.43 L1191.27 1216.43 L1191.86 1216.43 L1192.44 1216.43 L1193.03 1216.43 L1193.62 1216.43 L1194.2 1216.43 L1194.79 1216.43 L1195.37 1216.43 L1195.96 1216.43 L1196.55 1216.43 L1197.13 1216.43 L1197.72 1216.43 L1198.31 1216.43 L1198.89 1216.43 L1199.48 1216.43 L1200.07 1216.43 L1200.65 1216.43 L1201.24 1216.43 L1201.83 1216.43 L1202.41 1216.43 L1203 1216.43 L1203.58 1216.43 L1204.17 1216.43 L1204.76 1216.43 L1205.34 1216.43 L1205.93 1216.43 L1206.52 1216.43 L1207.1 1216.43 L1207.69 1216.43 L1208.28 1216.43 L1208.86 1216.43 L1209.45 1216.43 L1210.03 1216.43 L1210.62 1216.43 L1211.21 1216.43 L1211.79 1216.43 L1212.38 1216.43 L1212.97 1216.43 L1213.55 1216.43 L1214.14 1216.43 L1214.73 1216.43 L1215.31 1216.43 L1215.9 1216.43 L1216.49 1216.43 L1217.07 1216.43 L1217.66 1216.43 L1218.24 1216.43 L1218.83 1216.43 L1219.42 1216.43 L1220 1216.43 L1220.59 1216.43 L1221.18 1216.43 L1221.76 1216.43 L1222.35 1216.43 L1222.94 1216.43 L1223.52 1216.43 L1224.11 1216.43 L1224.7 1216.43 L1225.28 1216.43 L1225.87 1216.43 L1226.45 1216.43 L1227.04 1216.43 L1227.63 1216.43 L1228.21 1216.43 L1228.8 1216.43 L1229.39 1216.43 L1229.97 1216.43 L1230.56 1216.43 L1231.15 1216.43 L1231.73 1216.43 L1232.32 1216.43 L1232.91 1216.43 L1233.49 1216.43 L1234.08 1216.43 L1234.66 1216.43 L1235.25 1216.43 L1235.84 1216.43 L1236.42 1216.43 L1237.01 1216.43 L1237.6 1216.43 L1238.18 1216.43 L1238.77 1216.43 L1239.36 1216.43 L1239.94 1216.43 L1240.53 1216.43 L1241.11 1216.43 L1241.7 1216.43 L1242.29 1216.43 L1242.87 1216.43 L1243.46 1216.43 L1244.05 1216.43 L1244.63 1216.43 L1245.22 1216.43 L1245.81 1216.43 L1246.39 1216.43 L1246.98 1216.43 L1247.57 1216.43 L1248.15 1216.43 L1248.74 1216.43 L1249.32 1216.43 L1249.91 1216.43 L1250.5 1216.43 L1251.08 1216.43 L1251.67 1216.43 L1252.26 1216.43 L1252.84 1216.43 L1253.43 1216.43 L1254.02 1216.43 L1254.6 1216.43 L1255.19 1216.43 L1255.78 1216.43 L1256.36 1216.43 L1256.95 1216.43 L1257.53 1216.43 L1258.12 1216.43 L1258.71 1216.43 L1259.29 1216.43 L1259.88 1216.43 L1260.47 1216.43 L1261.05 1216.43 L1261.64 1216.43 L1262.23 1216.43 L1262.81 1216.43 L1263.4 1216.43 L1263.98 1216.43 L1264.57 1216.43 L1265.16 1216.43 L1265.74 1216.43 L1266.33 1216.43 L1266.92 1216.43 L1267.5 1216.43 L1268.09 1216.43 L1268.68 1216.43 L1269.26 1216.43 L1269.85 1216.43 L1270.44 1216.43 L1271.02 1216.43 L1271.61 1216.43 L1272.19 1216.43 L1272.78 1216.43 L1273.37 1216.43 L1273.95 1216.43 L1274.54 1216.43 L1275.13 1216.43 L1275.71 1216.43 L1276.3 1216.43 L1276.89 1216.43 L1277.47 1216.43 L1278.06 1216.43 L1278.65 1216.43 L1279.23 1216.43 L1279.82 1216.43 L1280.4 1216.43 L1280.99 1216.43 L1281.58 1216.43 L1282.16 1216.43 L1282.75 1216.43 L1283.34 1216.43 L1283.92 1216.43 L1284.51 1216.43 L1285.1 1216.43 L1285.68 1216.43 L1286.27 1216.43 L1286.86 1216.43 L1287.44 1216.43 L1288.03 1216.43 L1288.61 1216.43 L1289.2 1216.43 L1289.79 1216.43 L1290.37 1216.43 L1290.96 1216.43 L1291.55 1216.43 L1292.13 1216.43 L1292.72 1216.43 L1293.31 1216.43 L1293.89 1216.43 L1294.48 1216.43 L1295.06 1216.43 L1295.65 1216.43 L1296.24 1216.43 L1296.82 1216.43 L1297.41 1216.43 L1298 1216.43 L1298.58 1216.43 L1299.17 1216.43 L1299.76 1216.43 L1300.34 1216.43 L1300.93 1216.43 L1301.52 1216.43 L1302.1 1216.43 L1302.69 1216.43 L1303.27 1216.43 L1303.86 1216.43 L1304.45 1216.43 L1305.03 1216.43 L1305.62 1216.43 L1306.21 1216.43 L1306.79 1216.43 L1307.38 1216.43 L1307.97 1216.43 L1308.55 1216.43 L1309.14 1216.43 L1309.73 1216.43 L1310.31 1216.43 L1310.9 1216.43 L1311.48 1216.43 L1312.07 1216.43 L1312.66 1216.43 L1313.24 1216.43 L1313.83 1216.43 L1314.42 1216.43 L1315 1216.43 L1315.59 1216.43 L1316.18 1216.43 L1316.76 1216.43 L1317.35 1216.43 L1317.93 1216.43 L1318.52 1216.43 L1319.11 1216.43 L1319.69 1216.43 L1320.28 1216.43 L1320.87 1216.43 L1321.45 1216.43 L1322.04 1216.43 L1322.63 1216.43 L1323.21 1216.43 L1323.8 1216.43 L1324.39 1216.43 L1324.97 1216.43 L1325.56 1216.43 L1326.14 1216.43 L1326.73 1216.43 L1327.32 1216.43 L1327.9 1216.43 L1328.49 1216.43 L1329.08 1216.43 L1329.66 1216.43 L1330.25 1216.43 L1330.84 1216.43 L1331.42 1216.43 L1332.01 1216.43 L1332.6 1216.43 L1333.18 1216.43 L1333.77 1216.43 L1334.35 1216.43 L1334.94 1216.43 L1335.53 1216.43 L1336.11 1216.43 L1336.7 1216.43 L1337.29 1216.43 L1337.87 1216.43 L1338.46 1216.43 L1339.05 1216.43 L1339.63 1216.43 L1340.22 1216.43 L1340.8 1216.43 L1341.39 1216.43 L1341.98 1216.43 L1342.56 1216.43 L1343.15 1216.43 L1343.74 1216.43 L1344.32 1216.43 L1344.91 1216.43 L1345.5 1216.43 L1346.08 1216.43 L1346.67 1216.43 L1347.26 1216.43 L1347.84 1216.43 L1348.43 1216.43 L1349.01 1216.43 L1349.6 1216.43 L1350.19 1216.43 L1350.77 1216.43 L1351.36 1216.43 L1351.95 1216.43 L1352.53 1216.43 L1353.12 1216.43 L1353.71 1216.43 L1354.29 1216.43 L1354.88 1216.43 L1355.47 1216.43 L1356.05 1216.43 L1356.64 1216.43 L1357.22 1216.43 L1357.81 1216.43 L1358.4 1216.43 L1358.98 1216.43 L1359.57 1216.43 L1360.16 1216.43 L1360.74 1216.43 L1361.33 1216.43 L1361.92 1216.43 L1362.5 1216.43 L1363.09 1216.43 L1363.68 1216.43 L1364.26 1216.43 L1364.85 1216.43 L1365.43 1216.43 L1366.02 1216.43 L1366.61 1216.43 L1367.19 1216.43 L1367.78 1216.43 L1368.37 1216.43 L1368.95 1216.43 L1369.54 1216.43 L1370.13 1216.43 L1370.71 1216.43 L1371.3 1216.43 L1371.88 1216.43 L1372.47 1216.43 L1373.06 1216.43 L1373.64 1216.43 L1374.23 1216.43 L1374.82 1216.43 L1375.4 1216.43 L1375.99 1216.43 L1376.58 1216.43 L1377.16 1216.43 L1377.75 1216.43 L1378.34 1216.43 L1378.92 1216.43 L1379.51 1216.43 L1380.09 1216.43 L1380.68 1216.43 L1381.27 1216.43 L1381.85 1216.43 L1382.44 1216.43 L1383.03 1216.43 L1383.61 1216.43 L1384.2 1216.43 L1384.79 1216.43 L1385.37 1216.43 L1385.96 1216.43 L1386.55 1216.43 L1387.13 1216.43 L1387.72 1216.43 L1388.3 1216.43 L1388.89 1216.43 L1389.48 1216.43 L1390.06 1216.43 L1390.65 1216.43 L1391.24 1216.43 L1391.82 1216.43 L1392.41 1216.43 L1393 1216.43 L1393.58 1216.43 L1394.17 1216.43 L1394.75 1216.43 L1395.34 1216.43 L1395.93 1216.43 L1396.51 1216.43 L1397.1 1216.43 L1397.69 1216.43 L1398.27 1216.43 L1398.86 1216.43 L1399.45 1216.43 L1400.03 1216.43 L1400.62 1216.43 L1401.21 1216.43 L1401.79 1216.43 L1402.38 1216.43 L1402.96 1216.43 L1403.55 1216.43 L1404.14 1216.43 L1404.72 1216.43 L1405.31 1216.43 L1405.9 1216.43 L1406.48 1216.43 L1407.07 1216.43 L1407.66 1216.43 L1408.24 1216.43 L1408.83 1216.43 L1409.42 1216.43 L1410 1216.43 L1410.59 1216.43 L1411.17 1216.43 L1411.76 1216.43 L1412.35 1216.43 L1412.93 1216.43 L1413.52 1216.43 L1414.11 1216.43 L1414.69 1216.43 L1415.28 1216.43 L1415.87 1216.43 L1416.45 1216.43 L1417.04 1216.43 L1417.63 1216.43 L1418.21 1216.43 L1418.8 1216.43 L1419.38 1216.43 L1419.97 1216.43 L1420.56 1216.43 L1421.14 1216.43 L1421.73 1216.43 L1422.32 1216.43 L1422.9 1216.43 L1423.49 1216.43 L1424.08 1216.43 L1424.66 1216.43 L1425.25 1216.43 L1425.83 1216.43 L1426.42 1216.43 L1427.01 1216.43 L1427.59 1216.43 L1428.18 1216.43 L1428.77 1216.43 L1429.35 1216.43 L1429.94 1216.43 L1430.53 1216.43 L1431.11 1216.43 L1431.7 1216.43 L1432.29 1216.43 L1432.87 1216.43 L1433.46 1216.43 L1434.04 1216.43 L1434.63 1216.43 L1435.22 1216.43 L1435.8 1216.43 L1436.39 1216.43 L1436.98 1216.43 L1437.56 1216.43 L1438.15 1216.43 L1438.74 1216.43 L1439.32 1216.43 L1439.91 1216.43 L1440.5 1216.43 L1441.08 1216.43 L1441.67 1216.43 L1442.25 1216.43 L1442.84 1216.43 L1443.43 1216.43 L1444.01 1216.43 L1444.6 1216.43 L1445.19 1216.43 L1445.77 1216.43 L1446.36 1216.43 L1446.95 1216.43 L1447.53 1216.43 L1448.12 1216.43 L1448.7 1216.43 L1449.29 1216.43 L1449.88 1216.43 L1450.46 1216.43 L1451.05 1216.43 L1451.64 1216.43 L1452.22 1216.43 L1452.81 1216.43 L1453.4 1216.43 L1453.98 1216.43 L1454.57 1216.43 L1455.16 1216.43 L1455.74 1216.43 L1456.33 1216.43 L1456.91 1216.43 L1457.5 1216.43 L1458.09 1216.43 L1458.67 1216.43 L1459.26 1216.43 L1459.85 1216.43 L1460.43 1216.43 L1461.02 1216.43 L1461.61 1216.43 L1462.19 1216.43 L1462.78 1216.43 L1463.37 1216.43 L1463.95 1216.43 L1464.54 1216.43 L1465.12 1216.43 L1465.71 1216.43 L1466.3 1216.43 L1466.88 1216.43 L1467.47 1216.43 L1468.06 1216.43 L1468.64 1216.43 L1469.23 1216.43 L1469.82 1216.43 L1470.4 1216.43 L1470.99 1216.43 L1471.57 1216.43 L1472.16 1216.43 L1472.75 1216.43 L1473.33 1216.43 L1473.92 1216.43 L1474.51 1216.43 L1475.09 1216.43 L1475.68 1216.43 L1476.27 1216.43 L1476.85 1216.43 L1477.44 1216.43 L1478.03 1216.43 L1478.61 1216.43 L1479.2 1216.43 L1479.78 1216.43 L1480.37 1216.43 L1480.96 1216.43 L1481.54 1216.43 L1482.13 1216.43 L1482.72 1216.43 L1483.3 1216.43 L1483.89 1216.43 L1484.48 1216.43 L1485.06 1216.43 L1485.65 1216.43 L1486.24 1216.43 L1486.82 1216.43 L1487.41 1216.43 L1487.99 1216.43 L1488.58 1216.43 L1489.17 1216.43 L1489.75 1216.43 L1490.34 1216.43 L1490.93 1216.43 L1491.51 1216.43 L1492.1 1216.43 L1492.69 1216.43 L1493.27 1216.43 L1493.86 1216.43 L1494.45 1216.43 L1495.03 1216.43 L1495.62 1216.43 L1496.2 1216.43 L1496.79 1216.43 L1497.38 1216.43 L1497.96 1216.43 L1498.55 1216.43 L1499.14 1216.43 L1499.72 1216.43 L1500.31 1216.43 L1500.9 1216.43 L1501.48 1216.43 L1502.07 1216.43 L1502.65 1216.43 L1503.24 1216.43 L1503.83 1216.43 L1504.41 1216.43 L1505 1216.43 L1505.59 1216.43 L1506.17 1216.43 L1506.76 1216.43 L1507.35 1216.43 L1507.93 1216.43 L1508.52 1216.43 L1509.11 1216.43 L1509.69 1216.43 L1510.28 1216.43 L1510.86 1216.43 L1511.45 1216.43 L1512.04 1216.43 L1512.62 1216.43 L1513.21 1216.43 L1513.8 1216.43 L1514.38 1216.43 L1514.97 1216.43 L1515.56 1216.43 L1516.14 1216.43 L1516.73 1216.43 L1517.32 1216.43 L1517.9 1216.43 L1518.49 1216.43 L1519.07 1216.43 L1519.66 1216.43 L1520.25 1216.43 L1520.83 1216.43 L1521.42 1216.43 L1522.01 1216.43 L1522.59 1216.43 L1523.18 1216.43 L1523.77 1216.43 L1524.35 1216.43 L1524.94 1216.43 L1525.52 1216.43 L1526.11 1216.43 L1526.7 1216.43 L1527.28 1216.43 L1527.87 1216.43 L1528.46 1216.43 L1529.04 1216.43 L1529.63 1216.43 L1530.22 1216.43 L1530.8 1216.43 L1531.39 1216.43 L1531.98 1216.43 L1532.56 1216.43 L1533.15 1216.43 L1533.73 1216.43 L1534.32 1216.43 L1534.91 1216.43 L1535.49 1216.43 L1536.08 1216.43 L1536.67 1216.43 L1537.25 1216.43 L1537.84 1216.43 L1538.43 1216.43 L1539.01 1216.43 L1539.6 1216.43 L1540.19 1216.43 L1540.77 1216.43 L1541.36 1216.43 L1541.94 1216.43 L1542.53 1216.43 L1543.12 1216.43 L1543.7 1216.43 L1544.29 1216.43 L1544.88 1216.43 L1545.46 1216.43 L1546.05 1216.43 L1546.64 1216.43 L1547.22 1216.43 L1547.81 1216.43 L1548.4 1216.43 L1548.98 1216.43 L1549.57 1216.43 L1550.15 1216.43 L1550.74 1216.43 L1551.33 1216.43 L1551.91 1216.43 L1552.5 1216.43 L1553.09 1216.43 L1553.67 1216.43 L1554.26 1216.43 L1554.85 1216.43 L1555.43 1216.43 L1556.02 1216.43 L1556.6 1216.43 L1557.19 1216.43 L1557.78 1216.43 L1558.36 1216.43 L1558.95 1216.43 L1559.54 1216.43 L1560.12 1216.43 L1560.71 1216.43 L1561.3 1216.43 L1561.88 1216.43 L1562.47 1216.43 L1563.06 1216.43 L1563.64 1216.43 L1564.23 1216.43 L1564.81 1216.43 L1565.4 1216.43 L1565.99 1216.43 L1566.57 1216.43 L1567.16 1216.43 L1567.75 1216.43 L1568.33 1216.43 L1568.92 1216.43 L1569.51 1216.43 L1570.09 1216.43 L1570.68 1216.43 L1571.27 1216.43 L1571.85 1216.43 L1572.44 1216.43 L1573.02 1216.43 L1573.61 1216.43 L1574.2 1216.43 L1574.78 1216.43 L1575.37 1216.43 L1575.96 1216.43 L1576.54 1216.43 L1577.13 1216.43 L1577.72 1216.43 L1578.3 1216.43 L1578.89 1216.43 L1579.47 1216.43 L1580.06 1216.43 L1580.65 1216.43 L1581.23 1216.43 L1581.82 1216.43 L1582.41 1216.43 L1582.99 1216.43 L1583.58 1216.43 L1584.17 1216.43 L1584.75 1216.43 L1585.34 1216.43 L1585.93 1216.43 L1586.51 1216.43 L1587.1 1216.43 L1587.68 1216.43 L1588.27 1216.43 L1588.86 1216.43 L1589.44 1216.43 L1590.03 1216.43 L1590.62 1216.43 L1591.2 1216.43 L1591.79 1216.43 L1592.38 1216.43 L1592.96 1216.43 L1593.55 1216.43 L1594.14 1216.43 L1594.72 1216.43 L1595.31 1216.43 L1595.89 1216.43 L1596.48 1216.43 L1597.07 1216.43 L1597.65 1216.43 L1598.24 1216.43 L1598.83 1216.43 L1599.41 1216.43 L1600 1216.43 L1600.59 1216.43 L1601.17 1216.43 L1601.76 1216.43 L1602.34 1216.43 L1602.93 1216.43 L1603.52 1216.43 L1604.1 1216.43 L1604.69 1216.43 L1605.28 1216.43 L1605.86 1216.43 L1606.45 1216.43 L1607.04 1216.43 L1607.62 1216.43 L1608.21 1216.43 L1608.8 1216.43 L1609.38 1216.43 L1609.97 1216.43 L1610.55 1216.43 L1611.14 1216.43 L1611.73 1216.43 L1612.31 1216.43 L1612.9 1216.43 L1613.49 1216.43 L1614.07 1216.43 L1614.66 1216.43 L1615.25 1216.43 L1615.83 1216.43 L1616.42 1216.43 L1617.01 1216.43 L1617.59 1216.43 L1618.18 1216.43 L1618.76 1216.43 L1619.35 1216.43 L1619.94 1216.43 L1620.52 1216.43 L1621.11 1216.43 L1621.7 1216.43 L1622.28 1216.43 L1622.87 1216.43 L1623.46 1216.43 L1624.04 1216.43 L1624.63 1216.43 L1625.22 1216.43 L1625.8 1216.43 L1626.39 1216.43 L1626.97 1216.43 L1627.56 1216.43 L1628.15 1216.43 L1628.73 1216.43 L1629.32 1216.43 L1629.91 1216.43 L1630.49 1216.43 L1631.08 1216.43 L1631.67 1216.43 L1632.25 1216.43 L1632.84 1216.43 L1633.42 1216.43 L1634.01 1216.43 L1634.6 1216.43 L1635.18 1216.43 L1635.77 1216.43 L1636.36 1216.43 L1636.94 1216.43 L1637.53 1216.43 L1638.12 1216.43 L1638.7 1216.43 L1639.29 1216.43 L1639.88 1216.43 L1640.46 1216.43 L1641.05 1216.43 L1641.63 1216.43 L1642.22 1216.43 L1642.81 1216.43 L1643.39 1216.43 L1643.98 1216.43 L1644.57 1216.43 L1645.15 1216.43 L1645.74 1216.43 L1646.33 1216.43 L1646.91 1216.43 L1647.5 1216.43 L1648.09 1216.43 L1648.67 1216.43 L1649.26 1216.43 L1649.84 1216.43 L1650.43 1216.43 L1651.02 1216.43 L1651.6 1216.43 L1652.19 1216.43 L1652.78 1216.43 L1653.36 1216.43 L1653.95 1216.43 L1654.54 1216.43 L1655.12 1216.43 L1655.71 1216.43 L1656.29 1216.43 L1656.88 1216.43 L1657.47 1216.43 L1658.05 1216.43 L1658.64 1216.43 L1659.23 1216.43 L1659.81 1216.43 L1660.4 1216.43 L1660.99 1216.43 L1661.57 1216.43 L1662.16 1216.43 L1662.75 1216.43 L1663.33 1216.43 L1663.92 1216.43 L1664.5 1216.43 L1665.09 1216.43 L1665.68 1216.43 L1666.26 1216.43 L1666.85 1216.43 L1667.44 1216.43 L1668.02 1216.43 L1668.61 1216.43 L1669.2 1216.43 L1669.78 1216.43 L1670.37 1216.43 L1670.96 1216.43 L1671.54 1216.43 L1672.13 1216.43 L1672.71 1216.43 L1673.3 1216.43 L1673.89 1216.43 L1674.47 1216.43 L1675.06 1216.43 L1675.65 1216.43 L1676.23 1216.43 L1676.82 1216.43 L1677.41 1216.43 L1677.99 1216.43 L1678.58 1216.43 L1679.17 1216.43 L1679.75 1216.43 L1680.34 1216.43 L1680.92 1216.43 L1681.51 1216.43 L1682.1 1216.43 L1682.68 1216.43 L1683.27 1216.43 L1683.86 1216.43 L1684.44 1216.43 L1685.03 1216.43 L1685.62 1216.43 L1686.2 1216.43 L1686.79 1216.43 L1687.37 1216.43 L1687.96 1216.43 L1688.55 1216.43 L1689.13 1216.43 L1689.72 1216.43 L1690.31 1216.43 L1690.89 1216.43 L1691.48 1216.43 L1692.07 1216.43 L1692.65 1216.43 L1693.24 1216.43 L1693.83 1216.43 L1694.41 1216.43 L1695 1216.43 L1695.58 1216.43 L1696.17 1216.43 L1696.76 1216.43 L1697.34 1216.43 L1697.93 1216.43 L1698.52 1216.43 L1699.1 1216.43 L1699.69 1216.43 L1700.28 1216.43 L1700.86 1216.43 L1701.45 1216.43 L1702.04 1216.43 L1702.62 1216.43 L1703.21 1216.43 L1703.79 1216.43 L1704.38 1216.43 L1704.97 1216.43 L1705.55 1216.43 L1706.14 1216.43 L1706.73 1216.43 L1707.31 1216.43 L1707.9 1216.43 L1708.49 1216.43 L1709.07 1216.43 L1709.66 1216.43 L1710.24 1216.43 L1710.83 1216.43 L1711.42 1216.43 L1712 1216.43 L1712.59 1216.43 L1713.18 1216.43 L1713.76 1216.43 L1714.35 1216.43 L1714.94 1216.43 L1715.52 1216.43 L1716.11 1216.43 L1716.7 1216.43 L1717.28 1216.43 L1717.87 1216.43 L1718.45 1216.43 L1719.04 1216.43 L1719.63 1216.43 L1720.21 1216.43 L1720.8 1216.43 L1721.39 1216.43 L1721.97 1216.43 L1722.56 1216.43 L1723.15 1216.43 L1723.73 1216.43 L1724.32 1216.43 L1724.91 1216.43 L1725.49 1216.43 L1726.08 1216.43 L1726.66 1216.43 L1727.25 1216.43 L1727.84 1216.43 L1728.42 1216.43 L1729.01 1216.43 L1729.6 1216.43 L1730.18 1216.43 L1730.77 1216.43 L1731.36 1216.43 L1731.94 1216.43 L1732.53 1216.43 L1733.11 1216.43 L1733.7 1216.43 L1734.29 1216.43 L1734.87 1216.43 L1735.46 1216.43 L1736.05 1216.43 L1736.63 1216.43 L1737.22 1216.43 L1737.81 1216.43 L1738.39 1216.43 L1738.98 1216.43 L1739.57 1216.43 L1740.15 1216.43 L1740.74 1216.43 L1741.32 1216.43 L1741.91 1216.43 L1742.5 1216.43 L1743.08 1216.43 L1743.67 1216.43 L1744.26 1216.43 L1744.84 1216.43 L1745.43 1216.43 L1746.02 1216.43 L1746.6 1216.43 L1747.19 1216.43 L1747.78 1216.43 L1748.36 1216.43 L1748.95 1216.43 L1749.53 1216.43 L1750.12 1216.43 L1750.71 1216.43 L1751.29 1216.43 L1751.88 1216.43 L1752.47 1216.43 L1753.05 1216.43 L1753.64 1216.43 L1754.23 1216.43 L1754.81 1216.43 L1755.4 1216.43 L1755.99 1216.43 L1756.57 1216.43 L1757.16 1216.43 L1757.74 1216.43 L1758.33 1216.43 L1758.92 1216.43 L1759.5 1216.43 L1760.09 1216.43 L1760.68 1216.43 L1761.26 1216.43 L1761.85 1216.43 L1762.44 1216.43 L1763.02 1216.43 L1763.61 1216.43 L1764.19 1216.43 L1764.78 1216.43 L1765.37 1216.43 L1765.95 1216.43 L1766.54 1216.43 L1767.13 1216.43 L1767.71 1216.43 L1768.3 1216.43 L1768.89 1216.43 L1769.47 1216.43 L1770.06 1216.43 L1770.65 1216.43 L1771.23 1216.43 L1771.82 1216.43 L1772.4 1216.43 L1772.99 1216.43 L1773.58 1216.43 L1774.16 1216.43 L1774.75 1216.43 L1775.34 1216.43 L1775.92 1216.43 L1776.51 1216.43 L1777.1 1216.43 L1777.68 1216.43 L1778.27 1216.43 L1778.86 1216.43 L1779.44 1216.43 L1780.03 1216.43 L1780.61 1216.43 L1781.2 1216.43 L1781.79 1216.43 L1782.37 1216.43 L1782.96 1216.43 L1783.55 1216.43 L1784.13 1216.43 L1784.72 1216.43 L1785.31 1216.43 L1785.89 1216.43 L1786.48 1216.43 L1787.06 1216.43 L1787.65 1216.43 L1788.24 1216.43 L1788.82 1216.43 L1789.41 1216.43 L1790 1216.43 L1790.58 1216.43 L1791.17 1216.43 L1791.76 1216.43 L1792.34 1216.43 L1792.93 1216.43 L1793.52 1216.43 L1794.1 1216.43 L1794.69 1216.43 L1795.27 1216.43 L1795.86 1216.43 L1796.45 1216.43 L1797.03 1216.43 L1797.62 1216.43 L1798.21 1216.43 L1798.79 1216.43 L1799.38 1216.43 L1799.97 1216.43 L1800.55 1216.43 L1801.14 1216.43 L1801.73 1216.43 L1802.31 1216.43 L1802.9 1216.43 L1803.48 1216.43 L1804.07 1216.43 L1804.66 1216.43 L1805.24 1216.43 L1805.83 1216.43 L1806.42 1216.43 L1807 1216.43 L1807.59 1216.43 L1808.18 1216.43 L1808.76 1216.43 L1809.35 1216.43 L1809.94 1216.43 L1810.52 1216.43 L1811.11 1216.43 L1811.69 1216.43 L1812.28 1216.43 L1812.87 1216.43 L1813.45 1216.43 L1814.04 1216.43 L1814.63 1216.43 L1815.21 1216.43 L1815.8 1216.43 L1816.39 1216.43 L1816.97 1216.43 L1817.56 1216.43 L1818.14 1216.43 L1818.73 1216.43 L1819.32 1216.43 L1819.9 1216.43 L1820.49 1216.43 L1821.08 1216.43 L1821.66 1216.43 L1822.25 1216.43 L1822.84 1216.43 L1823.42 1216.43 L1824.01 1216.43 L1824.6 1216.43 L1825.18 1216.43 L1825.77 1216.43 L1826.35 1216.43 L1826.94 1216.43 L1827.53 1216.43 L1828.11 1216.43 L1828.7 1216.43 L1829.29 1216.43 L1829.87 1216.43 L1830.46 1216.43 L1831.05 1216.43 L1831.63 1216.43 L1832.22 1216.43 L1832.81 1216.43 L1833.39 1216.43 L1833.98 1216.43 L1834.56 1216.43 L1835.15 1216.43 L1835.74 1216.43 L1836.32 1216.43 L1836.91 1216.43 L1837.5 1216.43 L1838.08 1216.43 L1838.67 1216.43 L1839.26 1216.43 L1839.84 1216.43 L1840.43 1216.43 L1841.01 1216.43 L1841.6 1216.43 L1842.19 1216.43 L1842.77 1216.43 L1843.36 1216.43 L1843.95 1216.43 L1844.53 1216.43 L1845.12 1216.43 L1845.71 1216.43 L1846.29 1216.43 L1846.88 1216.43 L1847.47 1216.43 L1848.05 1216.43 L1848.64 1216.43 L1849.22 1216.43 L1849.81 1216.43 L1850.4 1216.43 L1850.98 1216.43 L1851.57 1216.43 L1852.16 1216.43 L1852.74 1216.43 L1853.33 1216.43 L1853.92 1216.43 L1854.5 1216.43 L1855.09 1216.43 L1855.68 1216.43 L1856.26 1216.43 L1856.85 1216.43 L1857.43 1216.43 L1858.02 1216.43 L1858.61 1216.43 L1859.19 1216.43 L1859.78 1216.43 L1860.37 1216.43 L1860.95 1216.43 L1861.54 1216.43 L1862.13 1216.43 L1862.71 1216.43 L1863.3 1216.43 L1863.88 1216.43 L1864.47 1216.43 L1865.06 1216.43 L1865.64 1216.43 L1866.23 1216.43 L1866.82 1216.43 L1867.4 1216.43 L1867.99 1216.43 L1868.58 1216.43 L1869.16 1216.43 L1869.75 1216.43 L1870.34 1216.43 L1870.92 1216.43 L1871.51 1216.43 L1872.09 1216.43 L1872.68 1216.43 L1873.27 1216.43 L1873.85 1216.43 L1874.44 1216.43 L1875.03 1216.43 L1875.61 1216.43 L1876.2 1216.43 L1876.79 1216.43 L1877.37 1216.43 L1877.96 1216.43 L1878.55 1216.43 L1879.13 1216.43 L1879.72 1216.43 L1880.3 1216.43 L1880.89 1216.43 L1881.48 1216.43 L1882.06 1216.43 L1882.65 1216.43 L1883.24 1216.43 L1883.82 1216.43 L1884.41 1216.43 L1885 1216.43 L1885.58 1216.43 L1886.17 1216.43 L1886.76 1216.43 L1887.34 1216.43 L1887.93 1216.43 L1888.51 1216.43 L1889.1 1216.43 L1889.69 1216.43 L1890.27 1216.43 L1890.86 1216.43 L1891.45 1216.43 L1892.03 1216.43 L1892.62 1216.43 L1893.21 1216.43 L1893.79 1216.43 L1894.38 1216.43 L1894.96 1216.43 L1895.55 1216.43 L1896.14 1216.43 L1896.72 1216.43 L1897.31 1216.43 L1897.9 1216.43 L1898.48 1216.43 L1899.07 1216.43 L1899.66 1216.43 L1900.24 1216.43 L1900.83 1216.43 L1901.42 1216.43 L1902 1216.43 L1902.59 1216.43 L1903.17 1216.43 L1903.76 1216.43 L1904.35 1216.43 L1904.93 1216.43 L1905.52 1216.43 L1906.11 1216.43 L1906.69 1216.43 L1907.28 1216.43 L1907.87 1216.43 L1908.45 1216.43 L1909.04 1216.43 L1909.63 1216.43 L1910.21 1216.43 L1910.8 1216.43 L1911.38 1216.43 L1911.97 1216.43 L1912.56 1216.43 L1913.14 1216.43 L1913.73 1216.43 L1914.32 1216.43 L1914.9 1216.43 L1915.49 1216.43 L1916.08 1216.43 L1916.66 1216.43 L1917.25 1216.43 L1917.83 1216.43 L1918.42 1216.43 L1919.01 1216.43 L1919.59 1216.43 L1920.18 1216.43 L1920.77 1216.43 L1921.35 1216.43 L1921.94 1216.43 L1922.53 1216.43 L1923.11 1216.43 L1923.7 1216.43 L1924.29 1216.43 L1924.87 1216.43 L1925.46 1216.43 L1926.04 1216.43 L1926.63 1216.43 L1927.22 1216.43 L1927.8 1216.43 L1928.39 1216.43 L1928.98 1216.43 L1929.56 1216.43 L1930.15 1216.43 L1930.74 1216.43 L1931.32 1216.43 L1931.91 1216.43 L1932.5 1216.43 L1933.08 1216.43 L1933.67 1216.43 L1934.25 1216.43 L1934.84 1216.43 L1935.43 1216.43 L1936.01 1216.43 L1936.6 1216.43 L1937.19 1216.43 L1937.77 1216.43 L1938.36 1216.43 L1938.95 1216.43 L1939.53 1216.43 L1940.12 1216.43 L1940.71 1216.43 L1941.29 1216.43 L1941.88 1216.43 L1942.46 1216.43 L1943.05 1216.43 L1943.64 1216.43 L1944.22 1216.43 L1944.81 1216.43 L1945.4 1216.43 L1945.98 1216.43 L1946.57 1216.43 L1947.16 1216.43 L1947.74 1216.43 L1948.33 1216.43 L1948.91 1216.43 L1949.5 1216.43 L1950.09 1216.43 L1950.67 1216.43 L1951.26 1216.43 L1951.85 1216.43 L1952.43 1216.43 L1953.02 1216.43 L1953.61 1216.43 L1954.19 1216.43 L1954.78 1216.43 L1955.37 1216.43 L1955.95 1216.43 L1956.54 1216.43 L1957.12 1216.43 L1957.71 1216.43 L1958.3 1216.43 L1958.88 1216.43 L1959.47 1216.43 L1960.06 1216.43 L1960.64 1216.43 L1961.23 1216.43 L1961.82 1216.43 L1962.4 1216.43 L1962.99 1216.43 L1963.58 1216.43 L1964.16 1216.43 L1964.75 1216.43 L1965.33 1216.43 L1965.92 1216.43 L1966.51 1216.43 L1967.09 1216.43 L1967.68 1216.43 L1968.27 1216.43 L1968.85 1216.43 L1969.44 1216.43 L1970.03 1216.43 L1970.61 1216.43 L1971.2 1216.43 L1971.78 1216.43 L1972.37 1216.43 L1972.96 1216.43 L1973.54 1216.43 L1974.13 1216.43 L1974.72 1216.43 L1975.3 1216.43 L1975.89 1216.43 L1976.48 1216.43 L1977.06 1216.43 L1977.65 1216.43 L1978.24 1216.43 L1978.82 1216.43 L1979.41 1216.43 L1979.99 1216.43 L1980.58 1216.43 L1981.17 1216.43 L1981.75 1216.43 L1982.34 1216.43 L1982.93 1216.43 L1983.51 1216.43 L1984.1 1216.43 L1984.69 1216.43 L1985.27 1216.43 L1985.86 1216.43 L1986.45 1216.43 L1987.03 1216.43 L1987.62 1216.43 L1988.2 1216.43 L1988.79 1216.43 L1989.38 1216.43 L1989.96 1216.43 L1990.55 1216.43 L1991.14 1216.43 L1991.72 1216.43 L1992.31 1216.43 L1992.9 1216.43 L1993.48 1216.43 L1994.07 1216.43 L1994.65 1216.43 L1995.24 1216.43 L1995.83 1216.43 L1996.41 1216.43 L1997 1216.43 L1997.59 1216.43 L1998.17 1216.43 L1998.76 1216.43 L1999.35 1216.43 L1999.93 1216.43 L2000.52 1216.43 L2001.11 1216.43 L2001.69 1216.43 L2002.28 1216.43 L2002.86 1216.43 L2003.45 1216.43 L2004.04 1216.43 L2004.62 1216.43 L2005.21 1216.43 L2005.8 1216.43 L2006.38 1216.43 L2006.97 1216.43 L2007.56 1216.43 L2008.14 1216.43 L2008.73 1216.43 L2009.32 1216.43 L2009.9 1216.43 L2010.49 1216.43 L2011.07 1216.43 L2011.66 1216.43 L2012.25 1216.43 L2012.83 1216.43 L2013.42 1216.43 L2014.01 1216.43 L2014.59 1216.43 L2015.18 1216.43 L2015.77 1216.43 L2016.35 1216.43 L2016.94 1216.43 L2017.53 1216.43 L2018.11 1216.43 L2018.7 1216.43 L2019.28 1216.43 L2019.87 1216.43 L2020.46 1216.43 L2021.04 1216.43 L2021.63 1216.43 L2022.22 1216.43 L2022.8 1216.43 L2023.39 1216.43 L2023.98 1216.43 L2024.56 1216.43 L2025.15 1216.43 L2025.73 1216.43 L2026.32 1216.43 L2026.91 1216.43 L2027.49 1216.43 L2028.08 1216.43 L2028.67 1216.43 L2029.25 1216.43 L2029.84 1216.43 L2030.43 1216.43 L2031.01 1216.43 L2031.6 1216.43 L2032.19 1216.43 L2032.77 1216.43 L2033.36 1216.43 L2033.94 1216.43 L2034.53 1216.43 L2035.12 1216.43 L2035.7 1216.43 L2036.29 1216.43 L2036.88 1216.43 L2037.46 1216.43 L2038.05 1216.43 L2038.64 1216.43 L2039.22 1216.43 L2039.81 1216.43 L2040.4 1216.43 L2040.98 1216.43 L2041.57 1216.43 L2042.15 1216.43 L2042.74 1216.43 L2043.33 1216.43 L2043.91 1216.43 L2044.5 1216.43 L2045.09 1216.43 L2045.67 1216.43 L2046.26 1216.43 L2046.85 1216.43 L2047.43 1216.43 L2048.02 1216.43 L2048.6 1216.43 L2049.19 1216.43 L2049.78 1216.43 L2050.36 1216.43 L2050.95 1216.43 L2051.54 1216.43 L2052.12 1216.43 L2052.71 1216.43 L2053.3 1216.43 L2053.88 1216.43 L2054.47 1216.43 L2055.06 1216.43 L2055.64 1216.43 L2056.23 1216.43 L2056.81 1216.43 L2057.4 1216.43 L2057.99 1216.43 L2058.57 1216.43 L2059.16 1216.43 L2059.75 1216.43 L2060.33 1216.43 L2060.92 1216.43 L2061.51 1216.43 L2062.09 1216.43 L2062.68 1216.43 L2063.27 1216.43 L2063.85 1216.43 L2064.44 1216.43 L2065.02 1216.43 L2065.61 1216.43 L2066.2 1216.43 L2066.78 1216.43 L2067.37 1216.43 L2067.96 1216.43 L2068.54 1216.43 L2069.13 1216.43 L2069.72 1216.43 L2070.3 1216.43 L2070.89 1216.43 L2071.48 1216.43 L2072.06 1216.43 L2072.65 1216.43 L2073.23 1216.43 L2073.82 1216.43 L2074.41 1216.43 L2074.99 1216.43 L2075.58 1216.43 L2076.17 1216.43 L2076.75 1216.43 L2077.34 1216.43 L2077.93 1216.43 L2078.51 1216.43 L2079.1 1216.43 L2079.68 1216.43 L2080.27 1216.43 L2080.86 1216.43 L2081.44 1216.43 L2082.03 1216.43 L2082.62 1216.43 L2083.2 1216.43 L2083.79 1216.43 L2084.38 1216.43 L2084.96 1216.43 L2085.55 1216.43 L2086.14 1216.43 L2086.72 1216.43 L2087.31 1216.43 L2087.89 1216.43 L2088.48 1216.43 L2089.07 1216.43 L2089.65 1216.43 L2090.24 1216.43 L2090.83 1216.43 L2091.41 1216.43 L2092 1216.43 L2092.59 1216.43 L2093.17 1216.43 L2093.76 1216.43 L2094.35 1216.43 L2094.93 1216.43 L2095.52 1216.43 L2096.1 1216.43 L2096.69 1216.43 L2097.28 1216.43 L2097.86 1216.43 L2098.45 1216.43 L2099.04 1216.43 L2099.62 1216.43 L2100.21 1216.43 L2100.8 1216.43 L2101.38 1216.43 L2101.97 1216.43 L2102.55 1216.43 L2103.14 1216.43 L2103.73 1216.43 L2104.31 1216.43 L2104.9 1216.43 L2105.49 1216.43 L2106.07 1216.43 L2106.66 1216.43 L2107.25 1216.43 L2107.83 1216.43 L2108.42 1216.43 L2109.01 1216.43 L2109.59 1216.43 L2110.18 1216.43 L2110.76 1216.43 L2111.35 1216.43 L2111.94 1216.43 L2112.52 1216.43 L2113.11 1216.43 L2113.7 1216.43 L2114.28 1216.43 L2114.87 1216.43 L2115.46 1216.43 L2116.04 1216.43 L2116.63 1216.43 L2117.22 1216.43 L2117.8 1216.43 L2118.39 1216.43 L2118.97 1216.43 L2119.56 1216.43 L2120.15 1216.43 L2120.73 1216.43 L2121.32 1216.43 L2121.91 1216.43 L2122.49 1216.43 L2123.08 1216.43 L2123.67 1216.43 L2124.25 1216.43 L2124.84 1216.43 L2125.42 1216.43 L2126.01 1216.43 L2126.6 1216.43 L2127.18 1216.43 L2127.77 1216.43 L2128.36 1216.43 L2128.94 1216.43 L2129.53 1216.43 L2130.12 1216.43 L2130.7 1216.43 L2131.29 1216.43 L2131.88 1216.43 L2132.46 1216.43 L2133.05 1216.43 L2133.63 1216.43 L2134.22 1216.43 L2134.81 1216.43 L2135.39 1216.43 L2135.98 1216.43 L2136.57 1216.43 L2137.15 1216.43 L2137.74 1216.43 L2138.33 1216.43 L2138.91 1216.43 L2139.5 1216.43 L2140.09 1216.43 L2140.67 1216.43 L2141.26 1216.43 L2141.84 1216.43 L2142.43 1216.43 L2143.02 1216.43 L2143.6 1216.43 L2144.19 1216.43 L2144.78 1216.43 L2145.36 1216.43 L2145.95 1216.43 L2146.54 1216.43 L2147.12 1216.43 L2147.71 1216.43 L2148.3 1216.43 L2148.88 1216.43 L2149.47 1216.43 L2150.05 1216.43 L2150.64 1216.43 L2151.23 1216.43 L2151.81 1216.43 L2152.4 1216.43 L2152.99 1216.43 L2153.57 1216.43 L2154.16 1216.43 L2154.75 1216.43 L2155.33 1216.43 L2155.92 1216.43 L2156.5 1216.43 L2157.09 1216.43 L2157.68 1216.43 L2158.26 1216.43 L2158.26 1215.65 L2157.68 1215.65 L2157.09 1215.65 L2156.5 1215.65 L2155.92 1215.65 L2155.33 1215.65 L2154.75 1215.65 L2154.16 1215.65 L2153.57 1215.65 L2152.99 1215.65 L2152.4 1215.65 L2151.81 1215.65 L2151.23 1215.65 L2150.64 1215.65 L2150.05 1215.65 L2149.47 1215.65 L2148.88 1215.65 L2148.3 1215.65 L2147.71 1215.65 L2147.12 1215.65 L2146.54 1215.65 L2145.95 1215.65 L2145.36 1215.65 L2144.78 1215.65 L2144.19 1215.65 L2143.6 1215.65 L2143.02 1215.65 L2142.43 1215.65 L2141.84 1215.65 L2141.26 1215.65 L2140.67 1215.65 L2140.09 1215.65 L2139.5 1215.65 L2138.91 1215.65 L2138.33 1215.65 L2137.74 1215.65 L2137.15 1215.65 L2136.57 1215.65 L2135.98 1215.65 L2135.39 1215.65 L2134.81 1215.65 L2134.22 1215.65 L2133.63 1215.65 L2133.05 1215.65 L2132.46 1215.65 L2131.88 1215.65 L2131.29 1215.65 L2130.7 1215.65 L2130.12 1215.65 L2129.53 1215.65 L2128.94 1215.65 L2128.36 1215.65 L2127.77 1215.65 L2127.18 1215.65 L2126.6 1215.65 L2126.01 1215.65 L2125.42 1215.65 L2124.84 1215.65 L2124.25 1215.65 L2123.67 1215.65 L2123.08 1215.65 L2122.49 1215.65 L2121.91 1215.65 L2121.32 1215.65 L2120.73 1215.65 L2120.15 1215.65 L2119.56 1215.65 L2118.97 1215.65 L2118.39 1215.65 L2117.8 1215.65 L2117.22 1215.65 L2116.63 1215.65 L2116.04 1215.65 L2115.46 1215.65 L2114.87 1215.65 L2114.28 1215.65 L2113.7 1215.65 L2113.11 1215.65 L2112.52 1215.65 L2111.94 1215.65 L2111.35 1215.65 L2110.76 1215.65 L2110.18 1215.65 L2109.59 1215.65 L2109.01 1215.65 L2108.42 1215.65 L2107.83 1215.65 L2107.25 1215.65 L2106.66 1215.65 L2106.07 1215.65 L2105.49 1215.65 L2104.9 1215.65 L2104.31 1215.65 L2103.73 1215.65 L2103.14 1215.65 L2102.55 1215.65 L2101.97 1215.65 L2101.38 1215.65 L2100.8 1215.65 L2100.21 1215.65 L2099.62 1215.65 L2099.04 1215.65 L2098.45 1215.65 L2097.86 1215.65 L2097.28 1215.65 L2096.69 1215.65 L2096.1 1215.65 L2095.52 1215.65 L2094.93 1215.65 L2094.35 1215.65 L2093.76 1215.65 L2093.17 1215.65 L2092.59 1215.65 L2092 1215.65 L2091.41 1215.65 L2090.83 1215.65 L2090.24 1215.65 L2089.65 1215.65 L2089.07 1215.65 L2088.48 1215.65 L2087.89 1215.65 L2087.31 1215.65 L2086.72 1215.65 L2086.14 1215.65 L2085.55 1215.65 L2084.96 1215.65 L2084.38 1215.65 L2083.79 1215.65 L2083.2 1215.65 L2082.62 1215.65 L2082.03 1215.65 L2081.44 1215.65 L2080.86 1215.65 L2080.27 1215.65 L2079.68 1215.65 L2079.1 1215.65 L2078.51 1215.65 L2077.93 1215.65 L2077.34 1215.65 L2076.75 1215.65 L2076.17 1215.65 L2075.58 1215.65 L2074.99 1215.65 L2074.41 1215.65 L2073.82 1215.65 L2073.23 1215.65 L2072.65 1215.65 L2072.06 1215.65 L2071.48 1215.65 L2070.89 1215.65 L2070.3 1215.65 L2069.72 1215.65 L2069.13 1215.65 L2068.54 1215.65 L2067.96 1215.65 L2067.37 1215.65 L2066.78 1215.65 L2066.2 1215.65 L2065.61 1215.65 L2065.02 1215.65 L2064.44 1215.65 L2063.85 1215.65 L2063.27 1215.65 L2062.68 1215.65 L2062.09 1215.65 L2061.51 1215.65 L2060.92 1215.65 L2060.33 1215.65 L2059.75 1215.65 L2059.16 1215.65 L2058.57 1215.65 L2057.99 1215.65 L2057.4 1215.65 L2056.81 1215.65 L2056.23 1215.65 L2055.64 1215.65 L2055.06 1215.65 L2054.47 1215.65 L2053.88 1215.65 L2053.3 1215.65 L2052.71 1215.65 L2052.12 1215.65 L2051.54 1215.65 L2050.95 1215.65 L2050.36 1215.65 L2049.78 1215.65 L2049.19 1215.65 L2048.6 1215.65 L2048.02 1215.65 L2047.43 1215.65 L2046.85 1215.65 L2046.26 1215.65 L2045.67 1215.65 L2045.09 1215.65 L2044.5 1215.65 L2043.91 1215.65 L2043.33 1215.65 L2042.74 1215.65 L2042.15 1215.65 L2041.57 1215.65 L2040.98 1215.65 L2040.4 1215.65 L2039.81 1215.65 L2039.22 1215.65 L2038.64 1215.65 L2038.05 1215.65 L2037.46 1215.65 L2036.88 1215.65 L2036.29 1215.65 L2035.7 1215.65 L2035.12 1215.65 L2034.53 1215.65 L2033.94 1215.65 L2033.36 1215.65 L2032.77 1215.65 L2032.19 1215.65 L2031.6 1215.65 L2031.01 1215.65 L2030.43 1215.65 L2029.84 1215.65 L2029.25 1215.65 L2028.67 1215.65 L2028.08 1215.65 L2027.49 1215.65 L2026.91 1215.65 L2026.32 1215.65 L2025.73 1215.65 L2025.15 1215.65 L2024.56 1215.65 L2023.98 1215.65 L2023.39 1215.65 L2022.8 1215.65 L2022.22 1215.65 L2021.63 1215.65 L2021.04 1215.65 L2020.46 1215.65 L2019.87 1215.65 L2019.28 1215.65 L2018.7 1215.65 L2018.11 1215.65 L2017.53 1215.65 L2016.94 1215.65 L2016.35 1215.65 L2015.77 1215.65 L2015.18 1215.65 L2014.59 1215.65 L2014.01 1215.65 L2013.42 1215.65 L2012.83 1215.65 L2012.25 1215.65 L2011.66 1215.65 L2011.07 1215.65 L2010.49 1215.65 L2009.9 1215.65 L2009.32 1215.65 L2008.73 1215.65 L2008.14 1215.65 L2007.56 1215.65 L2006.97 1215.65 L2006.38 1215.65 L2005.8 1215.65 L2005.21 1215.65 L2004.62 1215.65 L2004.04 1215.65 L2003.45 1215.65 L2002.86 1215.65 L2002.28 1215.65 L2001.69 1215.65 L2001.11 1215.65 L2000.52 1215.65 L1999.93 1215.65 L1999.35 1215.65 L1998.76 1215.65 L1998.17 1215.65 L1997.59 1215.65 L1997 1215.65 L1996.41 1215.65 L1995.83 1215.65 L1995.24 1215.65 L1994.65 1215.65 L1994.07 1215.65 L1993.48 1215.65 L1992.9 1215.65 L1992.31 1215.65 L1991.72 1215.65 L1991.14 1215.65 L1990.55 1215.65 L1989.96 1215.65 L1989.38 1215.65 L1988.79 1215.65 L1988.2 1215.65 L1987.62 1215.65 L1987.03 1215.65 L1986.45 1215.65 L1985.86 1215.65 L1985.27 1215.65 L1984.69 1215.65 L1984.1 1215.65 L1983.51 1215.65 L1982.93 1215.65 L1982.34 1215.65 L1981.75 1215.65 L1981.17 1215.65 L1980.58 1215.65 L1979.99 1215.65 L1979.41 1215.65 L1978.82 1215.65 L1978.24 1215.65 L1977.65 1215.65 L1977.06 1215.65 L1976.48 1215.65 L1975.89 1215.65 L1975.3 1215.65 L1974.72 1215.65 L1974.13 1215.65 L1973.54 1215.65 L1972.96 1215.65 L1972.37 1215.65 L1971.78 1215.65 L1971.2 1215.65 L1970.61 1215.65 L1970.03 1215.65 L1969.44 1215.65 L1968.85 1215.65 L1968.27 1215.65 L1967.68 1215.65 L1967.09 1215.65 L1966.51 1215.65 L1965.92 1215.65 L1965.33 1215.65 L1964.75 1215.65 L1964.16 1215.65 L1963.58 1215.65 L1962.99 1215.65 L1962.4 1215.65 L1961.82 1215.65 L1961.23 1215.65 L1960.64 1215.65 L1960.06 1215.65 L1959.47 1215.65 L1958.88 1215.65 L1958.3 1215.65 L1957.71 1215.65 L1957.12 1215.65 L1956.54 1215.65 L1955.95 1215.65 L1955.37 1215.65 L1954.78 1215.65 L1954.19 1215.65 L1953.61 1215.65 L1953.02 1215.65 L1952.43 1215.65 L1951.85 1215.65 L1951.26 1215.65 L1950.67 1215.65 L1950.09 1215.65 L1949.5 1215.65 L1948.91 1215.65 L1948.33 1215.65 L1947.74 1215.65 L1947.16 1215.65 L1946.57 1215.65 L1945.98 1215.65 L1945.4 1215.65 L1944.81 1215.65 L1944.22 1215.65 L1943.64 1215.65 L1943.05 1215.65 L1942.46 1215.65 L1941.88 1215.65 L1941.29 1215.65 L1940.71 1215.65 L1940.12 1215.65 L1939.53 1215.65 L1938.95 1215.65 L1938.36 1215.65 L1937.77 1215.65 L1937.19 1215.65 L1936.6 1215.65 L1936.01 1215.65 L1935.43 1215.65 L1934.84 1215.65 L1934.25 1215.65 L1933.67 1215.65 L1933.08 1215.65 L1932.5 1215.65 L1931.91 1215.65 L1931.32 1215.65 L1930.74 1215.65 L1930.15 1215.65 L1929.56 1215.65 L1928.98 1215.65 L1928.39 1215.65 L1927.8 1215.65 L1927.22 1215.65 L1926.63 1215.65 L1926.04 1215.65 L1925.46 1215.65 L1924.87 1215.65 L1924.29 1215.65 L1923.7 1215.65 L1923.11 1215.65 L1922.53 1215.65 L1921.94 1215.65 L1921.35 1215.65 L1920.77 1215.65 L1920.18 1215.65 L1919.59 1215.65 L1919.01 1215.65 L1918.42 1215.65 L1917.83 1215.65 L1917.25 1215.65 L1916.66 1215.65 L1916.08 1215.65 L1915.49 1215.65 L1914.9 1215.65 L1914.32 1215.65 L1913.73 1215.65 L1913.14 1215.65 L1912.56 1215.65 L1911.97 1215.65 L1911.38 1215.65 L1910.8 1215.65 L1910.21 1215.65 L1909.63 1215.65 L1909.04 1215.65 L1908.45 1215.65 L1907.87 1215.65 L1907.28 1215.65 L1906.69 1215.65 L1906.11 1215.65 L1905.52 1215.65 L1904.93 1215.65 L1904.35 1215.65 L1903.76 1215.65 L1903.17 1215.65 L1902.59 1215.65 L1902 1215.65 L1901.42 1215.65 L1900.83 1215.65 L1900.24 1215.65 L1899.66 1215.65 L1899.07 1215.65 L1898.48 1215.65 L1897.9 1215.65 L1897.31 1215.65 L1896.72 1215.65 L1896.14 1215.65 L1895.55 1215.65 L1894.96 1215.65 L1894.38 1215.65 L1893.79 1215.65 L1893.21 1215.65 L1892.62 1215.65 L1892.03 1215.65 L1891.45 1215.65 L1890.86 1215.65 L1890.27 1215.65 L1889.69 1215.65 L1889.1 1215.65 L1888.51 1215.65 L1887.93 1215.65 L1887.34 1215.65 L1886.76 1215.65 L1886.17 1215.65 L1885.58 1215.65 L1885 1215.65 L1884.41 1215.65 L1883.82 1215.65 L1883.24 1215.65 L1882.65 1215.65 L1882.06 1215.65 L1881.48 1215.65 L1880.89 1215.65 L1880.3 1215.65 L1879.72 1215.65 L1879.13 1215.65 L1878.55 1215.65 L1877.96 1215.65 L1877.37 1215.65 L1876.79 1215.65 L1876.2 1215.65 L1875.61 1215.65 L1875.03 1215.65 L1874.44 1215.65 L1873.85 1215.65 L1873.27 1215.65 L1872.68 1215.65 L1872.09 1215.65 L1871.51 1215.65 L1870.92 1215.65 L1870.34 1215.65 L1869.75 1215.65 L1869.16 1215.65 L1868.58 1215.65 L1867.99 1215.65 L1867.4 1215.65 L1866.82 1215.65 L1866.23 1215.65 L1865.64 1215.65 L1865.06 1215.65 L1864.47 1215.65 L1863.88 1215.65 L1863.3 1215.65 L1862.71 1215.65 L1862.13 1215.65 L1861.54 1215.65 L1860.95 1215.65 L1860.37 1215.65 L1859.78 1215.65 L1859.19 1215.65 L1858.61 1215.65 L1858.02 1215.65 L1857.43 1215.65 L1856.85 1215.65 L1856.26 1215.65 L1855.68 1215.65 L1855.09 1215.65 L1854.5 1215.65 L1853.92 1215.65 L1853.33 1215.65 L1852.74 1215.65 L1852.16 1215.65 L1851.57 1215.65 L1850.98 1215.65 L1850.4 1215.65 L1849.81 1215.65 L1849.22 1215.65 L1848.64 1215.65 L1848.05 1215.65 L1847.47 1215.65 L1846.88 1215.65 L1846.29 1215.65 L1845.71 1215.65 L1845.12 1215.65 L1844.53 1215.65 L1843.95 1215.65 L1843.36 1215.65 L1842.77 1215.65 L1842.19 1215.65 L1841.6 1215.65 L1841.01 1215.65 L1840.43 1215.65 L1839.84 1215.65 L1839.26 1215.65 L1838.67 1215.65 L1838.08 1215.65 L1837.5 1215.65 L1836.91 1215.65 L1836.32 1215.65 L1835.74 1215.65 L1835.15 1215.65 L1834.56 1215.65 L1833.98 1215.65 L1833.39 1215.65 L1832.81 1215.65 L1832.22 1215.65 L1831.63 1215.65 L1831.05 1215.65 L1830.46 1215.65 L1829.87 1215.65 L1829.29 1215.65 L1828.7 1215.65 L1828.11 1215.65 L1827.53 1215.65 L1826.94 1215.65 L1826.35 1215.65 L1825.77 1215.65 L1825.18 1215.65 L1824.6 1215.65 L1824.01 1215.65 L1823.42 1215.65 L1822.84 1215.65 L1822.25 1215.65 L1821.66 1215.65 L1821.08 1215.65 L1820.49 1215.65 L1819.9 1215.65 L1819.32 1215.65 L1818.73 1215.65 L1818.14 1215.65 L1817.56 1215.65 L1816.97 1215.65 L1816.39 1215.65 L1815.8 1215.65 L1815.21 1215.65 L1814.63 1215.65 L1814.04 1215.65 L1813.45 1215.65 L1812.87 1215.65 L1812.28 1215.65 L1811.69 1215.65 L1811.11 1215.65 L1810.52 1215.65 L1809.94 1215.65 L1809.35 1215.65 L1808.76 1215.65 L1808.18 1215.65 L1807.59 1215.65 L1807 1215.65 L1806.42 1215.65 L1805.83 1215.65 L1805.24 1215.65 L1804.66 1215.65 L1804.07 1215.65 L1803.48 1215.65 L1802.9 1215.65 L1802.31 1215.65 L1801.73 1215.65 L1801.14 1215.65 L1800.55 1215.65 L1799.97 1215.65 L1799.38 1215.65 L1798.79 1215.65 L1798.21 1215.65 L1797.62 1215.65 L1797.03 1215.65 L1796.45 1215.65 L1795.86 1215.65 L1795.27 1215.65 L1794.69 1215.65 L1794.1 1215.65 L1793.52 1215.65 L1792.93 1215.65 L1792.34 1215.65 L1791.76 1215.65 L1791.17 1215.65 L1790.58 1215.65 L1790 1215.65 L1789.41 1215.65 L1788.82 1215.65 L1788.24 1215.65 L1787.65 1215.65 L1787.06 1215.65 L1786.48 1215.65 L1785.89 1215.65 L1785.31 1215.65 L1784.72 1215.65 L1784.13 1215.65 L1783.55 1215.65 L1782.96 1215.65 L1782.37 1215.65 L1781.79 1215.65 L1781.2 1215.65 L1780.61 1215.65 L1780.03 1215.65 L1779.44 1215.65 L1778.86 1215.65 L1778.27 1215.65 L1777.68 1215.65 L1777.1 1215.65 L1776.51 1215.65 L1775.92 1215.65 L1775.34 1215.65 L1774.75 1215.65 L1774.16 1215.65 L1773.58 1215.65 L1772.99 1215.65 L1772.4 1215.65 L1771.82 1215.65 L1771.23 1215.65 L1770.65 1215.65 L1770.06 1215.65 L1769.47 1215.65 L1768.89 1215.65 L1768.3 1215.65 L1767.71 1215.65 L1767.13 1215.65 L1766.54 1215.65 L1765.95 1215.65 L1765.37 1215.65 L1764.78 1215.65 L1764.19 1215.65 L1763.61 1215.65 L1763.02 1215.65 L1762.44 1215.65 L1761.85 1215.65 L1761.26 1215.65 L1760.68 1215.65 L1760.09 1215.65 L1759.5 1215.65 L1758.92 1215.65 L1758.33 1215.65 L1757.74 1215.65 L1757.16 1215.65 L1756.57 1215.65 L1755.99 1215.65 L1755.4 1215.65 L1754.81 1215.65 L1754.23 1215.65 L1753.64 1215.65 L1753.05 1215.65 L1752.47 1215.65 L1751.88 1215.65 L1751.29 1215.65 L1750.71 1215.65 L1750.12 1215.65 L1749.53 1215.65 L1748.95 1215.65 L1748.36 1215.65 L1747.78 1215.65 L1747.19 1215.65 L1746.6 1215.65 L1746.02 1215.65 L1745.43 1215.65 L1744.84 1215.65 L1744.26 1215.65 L1743.67 1215.65 L1743.08 1215.65 L1742.5 1215.65 L1741.91 1215.65 L1741.32 1215.65 L1740.74 1215.65 L1740.15 1215.65 L1739.57 1215.65 L1738.98 1215.65 L1738.39 1215.65 L1737.81 1215.65 L1737.22 1215.65 L1736.63 1215.65 L1736.05 1215.65 L1735.46 1215.65 L1734.87 1215.65 L1734.29 1215.65 L1733.7 1215.65 L1733.11 1215.65 L1732.53 1215.65 L1731.94 1215.65 L1731.36 1215.65 L1730.77 1215.65 L1730.18 1215.65 L1729.6 1215.65 L1729.01 1215.65 L1728.42 1215.65 L1727.84 1215.65 L1727.25 1215.65 L1726.66 1215.65 L1726.08 1215.65 L1725.49 1215.65 L1724.91 1215.65 L1724.32 1215.65 L1723.73 1215.65 L1723.15 1215.65 L1722.56 1215.65 L1721.97 1215.65 L1721.39 1215.65 L1720.8 1215.65 L1720.21 1215.65 L1719.63 1215.65 L1719.04 1215.65 L1718.45 1215.65 L1717.87 1215.65 L1717.28 1215.65 L1716.7 1215.65 L1716.11 1215.65 L1715.52 1215.65 L1714.94 1215.65 L1714.35 1215.65 L1713.76 1215.65 L1713.18 1215.65 L1712.59 1215.65 L1712 1215.65 L1711.42 1215.65 L1710.83 1215.65 L1710.24 1215.65 L1709.66 1215.65 L1709.07 1215.65 L1708.49 1215.65 L1707.9 1215.65 L1707.31 1215.65 L1706.73 1215.65 L1706.14 1215.65 L1705.55 1215.65 L1704.97 1215.65 L1704.38 1215.65 L1703.79 1215.65 L1703.21 1215.65 L1702.62 1215.65 L1702.04 1215.65 L1701.45 1215.65 L1700.86 1215.65 L1700.28 1215.65 L1699.69 1215.65 L1699.1 1215.65 L1698.52 1215.65 L1697.93 1215.65 L1697.34 1215.65 L1696.76 1215.65 L1696.17 1215.65 L1695.58 1215.65 L1695 1215.65 L1694.41 1215.65 L1693.83 1215.65 L1693.24 1215.65 L1692.65 1215.65 L1692.07 1215.65 L1691.48 1215.65 L1690.89 1215.65 L1690.31 1215.65 L1689.72 1215.65 L1689.13 1215.65 L1688.55 1215.65 L1687.96 1215.65 L1687.37 1215.65 L1686.79 1215.65 L1686.2 1215.65 L1685.62 1215.65 L1685.03 1215.65 L1684.44 1215.65 L1683.86 1215.65 L1683.27 1215.65 L1682.68 1215.65 L1682.1 1215.65 L1681.51 1215.65 L1680.92 1215.65 L1680.34 1215.65 L1679.75 1215.65 L1679.17 1215.65 L1678.58 1215.65 L1677.99 1215.65 L1677.41 1215.65 L1676.82 1215.65 L1676.23 1215.65 L1675.65 1215.65 L1675.06 1215.65 L1674.47 1215.65 L1673.89 1215.65 L1673.3 1215.65 L1672.71 1215.65 L1672.13 1215.65 L1671.54 1215.65 L1670.96 1215.65 L1670.37 1215.65 L1669.78 1215.65 L1669.2 1215.65 L1668.61 1215.65 L1668.02 1215.65 L1667.44 1215.65 L1666.85 1215.65 L1666.26 1215.65 L1665.68 1215.65 L1665.09 1215.65 L1664.5 1215.65 L1663.92 1215.65 L1663.33 1215.65 L1662.75 1215.65 L1662.16 1215.65 L1661.57 1215.65 L1660.99 1215.65 L1660.4 1215.65 L1659.81 1215.65 L1659.23 1215.65 L1658.64 1215.65 L1658.05 1215.65 L1657.47 1215.65 L1656.88 1215.65 L1656.29 1215.65 L1655.71 1215.65 L1655.12 1215.65 L1654.54 1215.65 L1653.95 1215.65 L1653.36 1215.65 L1652.78 1215.65 L1652.19 1215.65 L1651.6 1215.65 L1651.02 1215.65 L1650.43 1215.65 L1649.84 1215.65 L1649.26 1215.65 L1648.67 1215.65 L1648.09 1215.65 L1647.5 1215.65 L1646.91 1215.65 L1646.33 1215.65 L1645.74 1215.65 L1645.15 1215.65 L1644.57 1215.65 L1643.98 1215.65 L1643.39 1215.65 L1642.81 1215.65 L1642.22 1215.65 L1641.63 1215.65 L1641.05 1215.65 L1640.46 1215.65 L1639.88 1215.65 L1639.29 1215.65 L1638.7 1215.65 L1638.12 1215.65 L1637.53 1215.65 L1636.94 1215.65 L1636.36 1215.65 L1635.77 1215.65 L1635.18 1215.65 L1634.6 1215.65 L1634.01 1215.65 L1633.42 1215.65 L1632.84 1215.65 L1632.25 1215.65 L1631.67 1215.65 L1631.08 1215.65 L1630.49 1215.65 L1629.91 1215.65 L1629.32 1215.65 L1628.73 1215.65 L1628.15 1215.65 L1627.56 1215.65 L1626.97 1215.65 L1626.39 1215.65 L1625.8 1215.65 L1625.22 1215.65 L1624.63 1215.65 L1624.04 1215.65 L1623.46 1215.65 L1622.87 1215.65 L1622.28 1215.65 L1621.7 1215.65 L1621.11 1215.65 L1620.52 1215.65 L1619.94 1215.65 L1619.35 1215.65 L1618.76 1215.65 L1618.18 1215.65 L1617.59 1215.65 L1617.01 1215.65 L1616.42 1215.65 L1615.83 1215.65 L1615.25 1215.65 L1614.66 1215.65 L1614.07 1215.65 L1613.49 1215.65 L1612.9 1215.65 L1612.31 1215.65 L1611.73 1215.65 L1611.14 1215.65 L1610.55 1215.65 L1609.97 1215.65 L1609.38 1215.65 L1608.8 1215.65 L1608.21 1215.65 L1607.62 1215.65 L1607.04 1215.65 L1606.45 1215.65 L1605.86 1215.65 L1605.28 1215.65 L1604.69 1215.65 L1604.1 1215.65 L1603.52 1215.65 L1602.93 1215.65 L1602.34 1215.65 L1601.76 1215.65 L1601.17 1215.65 L1600.59 1215.65 L1600 1215.65 L1599.41 1215.65 L1598.83 1215.65 L1598.24 1215.65 L1597.65 1215.65 L1597.07 1215.65 L1596.48 1215.65 L1595.89 1215.65 L1595.31 1215.65 L1594.72 1215.65 L1594.14 1215.65 L1593.55 1215.65 L1592.96 1215.65 L1592.38 1215.65 L1591.79 1215.65 L1591.2 1215.65 L1590.62 1215.65 L1590.03 1215.65 L1589.44 1215.65 L1588.86 1215.65 L1588.27 1215.65 L1587.68 1215.65 L1587.1 1215.65 L1586.51 1215.65 L1585.93 1215.65 L1585.34 1215.65 L1584.75 1215.65 L1584.17 1215.65 L1583.58 1215.65 L1582.99 1215.65 L1582.41 1215.65 L1581.82 1215.65 L1581.23 1215.65 L1580.65 1215.65 L1580.06 1215.65 L1579.47 1215.65 L1578.89 1215.65 L1578.3 1215.65 L1577.72 1215.65 L1577.13 1215.65 L1576.54 1215.65 L1575.96 1215.65 L1575.37 1215.65 L1574.78 1215.65 L1574.2 1215.65 L1573.61 1215.65 L1573.02 1215.65 L1572.44 1215.65 L1571.85 1215.65 L1571.27 1215.65 L1570.68 1215.65 L1570.09 1215.65 L1569.51 1215.65 L1568.92 1215.65 L1568.33 1215.65 L1567.75 1215.65 L1567.16 1215.65 L1566.57 1215.65 L1565.99 1215.65 L1565.4 1215.65 L1564.81 1215.65 L1564.23 1215.65 L1563.64 1215.65 L1563.06 1215.65 L1562.47 1215.65 L1561.88 1215.65 L1561.3 1215.65 L1560.71 1215.65 L1560.12 1215.65 L1559.54 1215.65 L1558.95 1215.65 L1558.36 1215.65 L1557.78 1215.65 L1557.19 1215.65 L1556.6 1215.65 L1556.02 1215.65 L1555.43 1215.65 L1554.85 1215.65 L1554.26 1215.65 L1553.67 1215.65 L1553.09 1215.65 L1552.5 1215.65 L1551.91 1215.65 L1551.33 1215.65 L1550.74 1215.65 L1550.15 1215.65 L1549.57 1215.65 L1548.98 1215.65 L1548.4 1215.65 L1547.81 1215.65 L1547.22 1215.65 L1546.64 1215.65 L1546.05 1215.65 L1545.46 1215.65 L1544.88 1215.65 L1544.29 1215.65 L1543.7 1215.65 L1543.12 1215.65 L1542.53 1215.65 L1541.94 1215.65 L1541.36 1215.65 L1540.77 1215.65 L1540.19 1215.65 L1539.6 1215.65 L1539.01 1215.65 L1538.43 1215.65 L1537.84 1215.65 L1537.25 1215.65 L1536.67 1215.65 L1536.08 1215.65 L1535.49 1215.65 L1534.91 1215.65 L1534.32 1215.65 L1533.73 1215.65 L1533.15 1215.65 L1532.56 1215.65 L1531.98 1215.65 L1531.39 1215.65 L1530.8 1215.65 L1530.22 1215.65 L1529.63 1215.65 L1529.04 1215.65 L1528.46 1215.65 L1527.87 1215.65 L1527.28 1215.65 L1526.7 1215.65 L1526.11 1215.65 L1525.52 1215.65 L1524.94 1215.65 L1524.35 1215.65 L1523.77 1215.65 L1523.18 1215.65 L1522.59 1215.65 L1522.01 1215.65 L1521.42 1215.65 L1520.83 1215.65 L1520.25 1215.65 L1519.66 1215.65 L1519.07 1215.65 L1518.49 1215.65 L1517.9 1215.65 L1517.32 1215.65 L1516.73 1215.65 L1516.14 1215.65 L1515.56 1215.65 L1514.97 1215.65 L1514.38 1215.65 L1513.8 1215.65 L1513.21 1215.65 L1512.62 1215.65 L1512.04 1215.65 L1511.45 1215.65 L1510.86 1215.65 L1510.28 1215.65 L1509.69 1215.65 L1509.11 1215.65 L1508.52 1215.65 L1507.93 1215.65 L1507.35 1215.65 L1506.76 1215.65 L1506.17 1215.65 L1505.59 1215.65 L1505 1215.65 L1504.41 1215.65 L1503.83 1215.65 L1503.24 1215.65 L1502.65 1215.65 L1502.07 1215.65 L1501.48 1215.65 L1500.9 1215.65 L1500.31 1215.65 L1499.72 1215.65 L1499.14 1215.65 L1498.55 1215.65 L1497.96 1215.65 L1497.38 1215.65 L1496.79 1215.65 L1496.2 1215.65 L1495.62 1215.65 L1495.03 1215.65 L1494.45 1215.65 L1493.86 1215.65 L1493.27 1215.65 L1492.69 1215.65 L1492.1 1215.65 L1491.51 1215.65 L1490.93 1215.65 L1490.34 1215.65 L1489.75 1215.65 L1489.17 1215.65 L1488.58 1215.65 L1487.99 1215.65 L1487.41 1215.65 L1486.82 1215.65 L1486.24 1215.65 L1485.65 1215.65 L1485.06 1215.65 L1484.48 1215.65 L1483.89 1215.65 L1483.3 1215.65 L1482.72 1215.65 L1482.13 1215.65 L1481.54 1215.65 L1480.96 1215.65 L1480.37 1215.65 L1479.78 1215.65 L1479.2 1215.65 L1478.61 1215.65 L1478.03 1215.65 L1477.44 1215.65 L1476.85 1215.65 L1476.27 1215.65 L1475.68 1215.65 L1475.09 1215.65 L1474.51 1215.65 L1473.92 1215.65 L1473.33 1215.65 L1472.75 1215.65 L1472.16 1215.65 L1471.57 1215.65 L1470.99 1215.65 L1470.4 1215.65 L1469.82 1215.65 L1469.23 1215.65 L1468.64 1215.65 L1468.06 1215.65 L1467.47 1215.65 L1466.88 1215.65 L1466.3 1215.65 L1465.71 1215.65 L1465.12 1215.65 L1464.54 1215.65 L1463.95 1215.65 L1463.37 1215.65 L1462.78 1215.65 L1462.19 1215.65 L1461.61 1215.65 L1461.02 1215.65 L1460.43 1215.65 L1459.85 1215.65 L1459.26 1215.65 L1458.67 1215.65 L1458.09 1215.65 L1457.5 1215.65 L1456.91 1215.65 L1456.33 1215.65 L1455.74 1215.65 L1455.16 1215.65 L1454.57 1215.65 L1453.98 1215.65 L1453.4 1215.65 L1452.81 1215.65 L1452.22 1215.65 L1451.64 1215.65 L1451.05 1215.65 L1450.46 1215.65 L1449.88 1215.65 L1449.29 1215.65 L1448.7 1215.65 L1448.12 1215.65 L1447.53 1215.65 L1446.95 1215.65 L1446.36 1215.65 L1445.77 1215.65 L1445.19 1215.65 L1444.6 1215.65 L1444.01 1215.65 L1443.43 1215.65 L1442.84 1215.65 L1442.25 1215.65 L1441.67 1215.65 L1441.08 1215.65 L1440.5 1215.65 L1439.91 1215.65 L1439.32 1215.65 L1438.74 1215.65 L1438.15 1215.65 L1437.56 1215.65 L1436.98 1215.65 L1436.39 1215.65 L1435.8 1215.65 L1435.22 1215.65 L1434.63 1215.65 L1434.04 1215.65 L1433.46 1215.65 L1432.87 1215.65 L1432.29 1215.65 L1431.7 1215.65 L1431.11 1215.65 L1430.53 1215.65 L1429.94 1215.65 L1429.35 1215.65 L1428.77 1215.65 L1428.18 1215.65 L1427.59 1215.65 L1427.01 1215.65 L1426.42 1215.65 L1425.83 1215.65 L1425.25 1215.65 L1424.66 1215.65 L1424.08 1215.65 L1423.49 1215.65 L1422.9 1215.65 L1422.32 1215.65 L1421.73 1215.65 L1421.14 1215.65 L1420.56 1215.65 L1419.97 1215.65 L1419.38 1215.65 L1418.8 1215.65 L1418.21 1215.65 L1417.63 1215.65 L1417.04 1215.65 L1416.45 1215.65 L1415.87 1215.65 L1415.28 1215.65 L1414.69 1215.65 L1414.11 1215.65 L1413.52 1215.65 L1412.93 1215.65 L1412.35 1215.65 L1411.76 1215.65 L1411.17 1215.65 L1410.59 1215.65 L1410 1215.65 L1409.42 1215.65 L1408.83 1215.65 L1408.24 1215.65 L1407.66 1215.65 L1407.07 1215.65 L1406.48 1215.65 L1405.9 1215.65 L1405.31 1215.65 L1404.72 1215.65 L1404.14 1215.65 L1403.55 1215.65 L1402.96 1215.65 L1402.38 1215.65 L1401.79 1215.65 L1401.21 1215.65 L1400.62 1215.65 L1400.03 1215.65 L1399.45 1215.65 L1398.86 1215.65 L1398.27 1215.65 L1397.69 1215.65 L1397.1 1215.65 L1396.51 1215.65 L1395.93 1215.65 L1395.34 1215.65 L1394.75 1215.65 L1394.17 1215.65 L1393.58 1215.65 L1393 1215.65 L1392.41 1215.65 L1391.82 1215.65 L1391.24 1215.65 L1390.65 1215.65 L1390.06 1215.65 L1389.48 1215.65 L1388.89 1215.65 L1388.3 1215.65 L1387.72 1215.65 L1387.13 1215.65 L1386.55 1215.65 L1385.96 1215.65 L1385.37 1215.65 L1384.79 1215.65 L1384.2 1215.65 L1383.61 1215.65 L1383.03 1215.65 L1382.44 1215.65 L1381.85 1215.65 L1381.27 1215.65 L1380.68 1215.65 L1380.09 1215.65 L1379.51 1215.65 L1378.92 1215.65 L1378.34 1215.65 L1377.75 1215.65 L1377.16 1215.65 L1376.58 1215.65 L1375.99 1215.65 L1375.4 1215.65 L1374.82 1215.65 L1374.23 1215.65 L1373.64 1215.65 L1373.06 1215.65 L1372.47 1215.65 L1371.88 1215.65 L1371.3 1215.65 L1370.71 1215.65 L1370.13 1215.65 L1369.54 1215.65 L1368.95 1215.65 L1368.37 1215.65 L1367.78 1215.65 L1367.19 1215.65 L1366.61 1215.65 L1366.02 1215.65 L1365.43 1215.65 L1364.85 1215.65 L1364.26 1215.65 L1363.68 1215.65 L1363.09 1215.65 L1362.5 1215.65 L1361.92 1215.65 L1361.33 1215.65 L1360.74 1215.65 L1360.16 1215.65 L1359.57 1215.65 L1358.98 1215.65 L1358.4 1215.65 L1357.81 1215.65 L1357.22 1215.65 L1356.64 1215.65 L1356.05 1215.65 L1355.47 1215.65 L1354.88 1215.65 L1354.29 1215.65 L1353.71 1215.65 L1353.12 1215.65 L1352.53 1215.65 L1351.95 1215.65 L1351.36 1215.65 L1350.77 1215.65 L1350.19 1215.65 L1349.6 1215.65 L1349.01 1215.65 L1348.43 1215.65 L1347.84 1215.65 L1347.26 1215.65 L1346.67 1215.65 L1346.08 1215.65 L1345.5 1215.65 L1344.91 1215.65 L1344.32 1215.65 L1343.74 1215.65 L1343.15 1215.65 L1342.56 1215.65 L1341.98 1215.65 L1341.39 1215.65 L1340.8 1215.65 L1340.22 1215.65 L1339.63 1215.65 L1339.05 1215.65 L1338.46 1215.65 L1337.87 1215.65 L1337.29 1215.65 L1336.7 1215.65 L1336.11 1215.65 L1335.53 1215.65 L1334.94 1215.65 L1334.35 1215.65 L1333.77 1215.65 L1333.18 1215.65 L1332.6 1215.65 L1332.01 1215.65 L1331.42 1215.65 L1330.84 1215.65 L1330.25 1215.65 L1329.66 1215.65 L1329.08 1215.65 L1328.49 1215.65 L1327.9 1215.65 L1327.32 1215.65 L1326.73 1215.65 L1326.14 1215.65 L1325.56 1215.65 L1324.97 1215.65 L1324.39 1215.65 L1323.8 1215.65 L1323.21 1215.65 L1322.63 1215.65 L1322.04 1215.65 L1321.45 1215.65 L1320.87 1215.65 L1320.28 1215.65 L1319.69 1215.65 L1319.11 1215.65 L1318.52 1215.65 L1317.93 1215.65 L1317.35 1215.65 L1316.76 1215.65 L1316.18 1215.65 L1315.59 1215.65 L1315 1215.65 L1314.42 1215.65 L1313.83 1215.65 L1313.24 1215.65 L1312.66 1215.65 L1312.07 1215.65 L1311.48 1215.65 L1310.9 1215.65 L1310.31 1215.65 L1309.73 1215.65 L1309.14 1215.65 L1308.55 1215.65 L1307.97 1215.65 L1307.38 1215.65 L1306.79 1215.65 L1306.21 1215.65 L1305.62 1215.65 L1305.03 1215.65 L1304.45 1215.65 L1303.86 1215.65 L1303.27 1215.65 L1302.69 1215.65 L1302.1 1215.65 L1301.52 1215.65 L1300.93 1215.65 L1300.34 1215.65 L1299.76 1215.65 L1299.17 1215.65 L1298.58 1215.65 L1298 1215.65 L1297.41 1215.65 L1296.82 1215.65 L1296.24 1215.65 L1295.65 1215.65 L1295.06 1215.65 L1294.48 1215.65 L1293.89 1215.65 L1293.31 1215.65 L1292.72 1215.65 L1292.13 1215.65 L1291.55 1215.65 L1290.96 1215.65 L1290.37 1215.65 L1289.79 1215.65 L1289.2 1215.65 L1288.61 1215.65 L1288.03 1215.65 L1287.44 1215.65 L1286.86 1215.65 L1286.27 1215.65 L1285.68 1215.65 L1285.1 1215.65 L1284.51 1215.65 L1283.92 1215.65 L1283.34 1215.65 L1282.75 1215.65 L1282.16 1215.65 L1281.58 1215.65 L1280.99 1215.65 L1280.4 1215.65 L1279.82 1215.65 L1279.23 1215.65 L1278.65 1215.65 L1278.06 1215.65 L1277.47 1215.65 L1276.89 1215.65 L1276.3 1215.65 L1275.71 1215.65 L1275.13 1215.65 L1274.54 1215.65 L1273.95 1215.65 L1273.37 1215.65 L1272.78 1215.65 L1272.19 1215.65 L1271.61 1215.65 L1271.02 1215.65 L1270.44 1215.65 L1269.85 1215.65 L1269.26 1215.65 L1268.68 1215.65 L1268.09 1215.65 L1267.5 1215.65 L1266.92 1215.65 L1266.33 1215.65 L1265.74 1215.65 L1265.16 1215.65 L1264.57 1215.65 L1263.98 1215.65 L1263.4 1215.65 L1262.81 1215.65 L1262.23 1215.65 L1261.64 1215.65 L1261.05 1215.65 L1260.47 1215.65 L1259.88 1215.65 L1259.29 1215.65 L1258.71 1215.65 L1258.12 1215.65 L1257.53 1215.65 L1256.95 1215.65 L1256.36 1215.65 L1255.78 1215.65 L1255.19 1215.65 L1254.6 1215.65 L1254.02 1215.65 L1253.43 1215.65 L1252.84 1215.65 L1252.26 1215.65 L1251.67 1215.65 L1251.08 1215.65 L1250.5 1215.65 L1249.91 1215.65 L1249.32 1215.65 L1248.74 1215.65 L1248.15 1215.65 L1247.57 1215.65 L1246.98 1215.65 L1246.39 1215.65 L1245.81 1215.65 L1245.22 1215.65 L1244.63 1215.65 L1244.05 1215.65 L1243.46 1215.65 L1242.87 1215.65 L1242.29 1215.65 L1241.7 1215.65 L1241.11 1215.65 L1240.53 1215.65 L1239.94 1215.65 L1239.36 1215.65 L1238.77 1215.65 L1238.18 1215.65 L1237.6 1215.65 L1237.01 1215.65 L1236.42 1215.65 L1235.84 1215.65 L1235.25 1215.65 L1234.66 1215.65 L1234.08 1215.65 L1233.49 1215.65 L1232.91 1215.65 L1232.32 1215.65 L1231.73 1215.65 L1231.15 1215.65 L1230.56 1215.65 L1229.97 1215.65 L1229.39 1215.65 L1228.8 1215.65 L1228.21 1215.65 L1227.63 1215.65 L1227.04 1215.65 L1226.45 1215.65 L1225.87 1215.65 L1225.28 1215.65 L1224.7 1215.65 L1224.11 1215.65 L1223.52 1215.65 L1222.94 1215.65 L1222.35 1215.65 L1221.76 1215.65 L1221.18 1215.65 L1220.59 1215.65 L1220 1215.65 L1219.42 1215.65 L1218.83 1215.65 L1218.24 1215.65 L1217.66 1215.65 L1217.07 1215.65 L1216.49 1215.65 L1215.9 1215.65 L1215.31 1215.65 L1214.73 1215.65 L1214.14 1215.65 L1213.55 1215.65 L1212.97 1215.65 L1212.38 1215.65 L1211.79 1215.65 L1211.21 1215.65 L1210.62 1215.65 L1210.03 1215.65 L1209.45 1215.65 L1208.86 1215.65 L1208.28 1215.65 L1207.69 1215.65 L1207.1 1215.65 L1206.52 1215.65 L1205.93 1215.65 L1205.34 1215.65 L1204.76 1215.65 L1204.17 1215.65 L1203.58 1215.65 L1203 1215.65 L1202.41 1215.65 L1201.83 1215.65 L1201.24 1215.65 L1200.65 1215.65 L1200.07 1215.65 L1199.48 1215.65 L1198.89 1215.65 L1198.31 1215.65 L1197.72 1215.65 L1197.13 1215.65 L1196.55 1215.65 L1195.96 1215.65 L1195.37 1215.65 L1194.79 1215.65 L1194.2 1215.65 L1193.62 1215.65 L1193.03 1215.65 L1192.44 1215.65 L1191.86 1215.65 L1191.27 1215.65 L1190.68 1215.65 L1190.1 1215.65 L1189.51 1215.65 L1188.92 1215.65 L1188.34 1215.65 L1187.75 1215.65 L1187.16 1215.65 L1186.58 1215.65 L1185.99 1215.65 L1185.41 1215.65 L1184.82 1215.65 L1184.23 1215.65 L1183.65 1215.65 L1183.06 1215.65 L1182.47 1215.65 L1181.89 1215.65 L1181.3 1215.65 L1180.71 1215.65 L1180.13 1215.65 L1179.54 1215.65 L1178.96 1215.65 L1178.37 1215.65 L1177.78 1215.65 L1177.2 1215.65 L1176.61 1215.65 L1176.02 1215.65 L1175.44 1215.65 L1174.85 1215.65 L1174.26 1215.65 L1173.68 1215.65 L1173.09 1215.65 L1172.5 1215.65 L1171.92 1215.65 L1171.33 1215.65 L1170.75 1215.65 L1170.16 1215.65 L1169.57 1215.65 L1168.99 1215.65 L1168.4 1215.65 L1167.81 1215.65 L1167.23 1215.65 L1166.64 1215.65 L1166.05 1215.65 L1165.47 1215.65 L1164.88 1215.65 L1164.29 1215.65 L1163.71 1215.65 L1163.12 1215.65 L1162.54 1215.65 L1161.95 1215.65 L1161.36 1215.65 L1160.78 1215.65 L1160.19 1215.65 L1159.6 1215.65 L1159.02 1215.65 L1158.43 1215.65 L1157.84 1215.65 L1157.26 1215.65 L1156.67 1215.65 L1156.09 1215.65 L1155.5 1215.65 L1154.91 1215.65 L1154.33 1215.65 L1153.74 1215.65 L1153.15 1215.65 L1152.57 1215.65 L1151.98 1215.65 L1151.39 1215.65 L1150.81 1215.65 L1150.22 1215.65 L1149.63 1215.65 L1149.05 1215.65 L1148.46 1215.65 L1147.88 1215.65 L1147.29 1215.65 L1146.7 1215.65 L1146.12 1215.65 L1145.53 1215.65 L1144.94 1215.65 L1144.36 1215.65 L1143.77 1215.65 L1143.18 1215.65 L1142.6 1215.65 L1142.01 1215.65 L1141.42 1215.65 L1140.84 1215.65 L1140.25 1215.65 L1139.67 1215.65 L1139.08 1215.65 L1138.49 1215.65 L1137.91 1215.65 L1137.32 1215.65 L1136.73 1215.65 L1136.15 1215.65 L1135.56 1215.65 L1134.97 1215.65 L1134.39 1215.65 L1133.8 1215.65 L1133.21 1215.65 L1132.63 1215.65 L1132.04 1215.65 L1131.46 1215.65 L1130.87 1215.65 L1130.28 1215.65 L1129.7 1215.65 L1129.11 1215.65 L1128.52 1215.65 L1127.94 1215.65 L1127.35 1215.65 L1126.76 1215.65 L1126.18 1215.65 L1125.59 1215.65 L1125.01 1215.65 L1124.42 1215.65 L1123.83 1215.65 L1123.25 1215.65 L1122.66 1215.65 L1122.07 1215.65 L1121.49 1215.65 L1120.9 1215.65 L1120.31 1215.65 L1119.73 1215.65 L1119.14 1215.65 L1118.55 1215.65 L1117.97 1215.65 L1117.38 1215.65 L1116.8 1215.65 L1116.21 1215.65 L1115.62 1215.65 L1115.04 1215.65 L1114.45 1215.65 L1113.86 1215.65 L1113.28 1215.65 L1112.69 1215.65 L1112.1 1215.65 L1111.52 1215.65 L1110.93 1215.65 L1110.34 1215.65 L1109.76 1215.65 L1109.17 1215.65 L1108.59 1215.65 L1108 1215.65 L1107.41 1215.65 L1106.83 1215.65 L1106.24 1215.65 L1105.65 1215.65 L1105.07 1215.65 L1104.48 1215.65 L1103.89 1215.65 L1103.31 1215.65 L1102.72 1215.65 L1102.14 1215.65 L1101.55 1215.65 L1100.96 1215.65 L1100.38 1215.65 L1099.79 1215.65 L1099.2 1215.65 L1098.62 1215.65 L1098.03 1215.65 L1097.44 1215.65 L1096.86 1215.65 L1096.27 1215.65 L1095.68 1215.65 L1095.1 1215.65 L1094.51 1215.65 L1093.93 1215.65 L1093.34 1215.65 L1092.75 1215.65 L1092.17 1215.65 L1091.58 1215.65 L1090.99 1215.65 L1090.41 1215.65 L1089.82 1215.65 L1089.23 1215.65 L1088.65 1215.65 L1088.06 1215.65 L1087.47 1215.65 L1086.89 1215.65 L1086.3 1215.65 L1085.72 1215.65 L1085.13 1215.65 L1084.54 1215.65 L1083.96 1215.65 L1083.37 1215.65 L1082.78 1215.65 L1082.2 1215.65 L1081.61 1215.65 L1081.02 1215.65 L1080.44 1215.65 L1079.85 1215.65 L1079.26 1215.65 L1078.68 1215.65 L1078.09 1215.65 L1077.51 1215.65 L1076.92 1215.65 L1076.33 1215.65 L1075.75 1215.65 L1075.16 1215.65 L1074.57 1215.65 L1073.99 1215.65 L1073.4 1215.65 L1072.81 1215.65 L1072.23 1215.65 L1071.64 1215.65 L1071.06 1215.65 L1070.47 1215.65 L1069.88 1215.65 L1069.3 1215.65 L1068.71 1215.65 L1068.12 1215.65 L1067.54 1215.65 L1066.95 1215.65 L1066.36 1215.65 L1065.78 1215.65 L1065.19 1215.65 L1064.6 1215.65 L1064.02 1215.65 L1063.43 1215.65 L1062.85 1215.65 L1062.26 1215.65 L1061.67 1215.65 L1061.09 1215.65 L1060.5 1215.65 L1059.91 1215.65 L1059.33 1215.65 L1058.74 1215.65 L1058.15 1215.65 L1057.57 1215.65 L1056.98 1215.65 L1056.39 1215.65 L1055.81 1215.65 L1055.22 1215.65 L1054.64 1215.65 L1054.05 1215.65 L1053.46 1215.65 L1052.88 1215.65 L1052.29 1215.65 L1051.7 1215.65 L1051.12 1215.65 L1050.53 1215.65 L1049.94 1215.65 L1049.36 1215.65 L1048.77 1215.65 L1048.19 1215.65 L1047.6 1215.65 L1047.01 1215.65 L1046.43 1215.65 L1045.84 1215.65 L1045.25 1215.65 L1044.67 1215.65 L1044.08 1215.65 L1043.49 1215.65 L1042.91 1215.65 L1042.32 1215.65 L1041.73 1215.65 L1041.15 1215.65 L1040.56 1215.65 L1039.98 1215.65 L1039.39 1215.65 L1038.8 1215.65 L1038.22 1215.65 L1037.63 1215.65 L1037.04 1215.65 L1036.46 1215.65 L1035.87 1215.65 L1035.28 1215.65 L1034.7 1215.65 L1034.11 1215.65 L1033.52 1215.65 L1032.94 1215.65 L1032.35 1215.65 L1031.77 1215.65 L1031.18 1215.65 L1030.59 1215.65 L1030.01 1215.65 L1029.42 1215.65 L1028.83 1215.65 L1028.25 1215.65 L1027.66 1215.65 L1027.07 1215.65 L1026.49 1215.65 L1025.9 1215.65 L1025.32 1215.65 L1024.73 1215.65 L1024.14 1215.65 L1023.56 1215.65 L1022.97 1215.65 L1022.38 1215.65 L1021.8 1215.65 L1021.21 1215.65 L1020.62 1215.65 L1020.04 1215.65 L1019.45 1215.65 L1018.86 1215.65 L1018.28 1215.65 L1017.69 1215.65 L1017.11 1215.65 L1016.52 1215.65 L1015.93 1215.65 L1015.35 1215.65 L1014.76 1215.65 L1014.17 1215.65 L1013.59 1215.65 L1013 1215.65 L1012.41 1215.65 L1011.83 1215.65 L1011.24 1215.65 L1010.65 1215.65 L1010.07 1215.65 L1009.48 1215.65 L1008.9 1215.65 L1008.31 1215.65 L1007.72 1215.65 L1007.14 1215.65 L1006.55 1215.65 L1005.96 1215.65 L1005.38 1215.65 L1004.79 1215.65 L1004.2 1215.65 L1003.62 1215.65 L1003.03 1215.65 L1002.44 1215.65 L1001.86 1215.65 L1001.27 1215.65 L1000.69 1215.65 L1000.1 1215.65 L999.513 1215.65 L998.926 1215.65 L998.34 1215.65 L997.754 1215.65 L997.167 1215.65 L996.581 1215.65 L995.994 1215.65 L995.408 1215.65 L994.822 1215.65 L994.235 1215.65 L993.649 1215.65 L993.062 1215.65 L992.476 1215.65 L991.889 1215.65 L991.303 1215.65 L990.717 1215.65 L990.13 1215.65 L989.544 1215.65 L988.957 1215.65 L988.371 1215.65 L987.785 1215.65 L987.198 1215.65 L986.612 1215.65 L986.025 1215.65  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.04 986.612,1216.04 987.198,1216.04 987.785,1216.04 988.371,1216.04 988.957,1216.04 989.544,1216.04 990.13,1216.04 990.717,1216.04 991.303,1216.04 991.889,1216.04 992.476,1216.04 993.062,1216.04 993.649,1216.04 994.235,1216.04 994.822,1216.04 995.408,1216.04 995.994,1216.04 996.581,1216.04 997.167,1216.04 997.754,1216.04 998.34,1216.04 998.926,1216.04 999.513,1216.04 1000.1,1216.04 1000.69,1216.04 1001.27,1216.04 1001.86,1216.04 1002.44,1216.04 1003.03,1216.04 1003.62,1216.04 1004.2,1216.04 1004.79,1216.04 1005.38,1216.04 1005.96,1216.04 1006.55,1216.04 1007.14,1216.04 1007.72,1216.04 1008.31,1216.04 1008.9,1216.04 1009.48,1216.04 1010.07,1216.04 1010.65,1216.04 1011.24,1216.04 1011.83,1216.04 1012.41,1216.04 1013,1216.04 1013.59,1216.04 1014.17,1216.04 1014.76,1216.04 1015.35,1216.04 1015.93,1216.04 1016.52,1216.04 1017.11,1216.04 1017.69,1216.04 1018.28,1216.04 1018.86,1216.04 1019.45,1216.04 1020.04,1216.04 1020.62,1216.04 1021.21,1216.04 1021.8,1216.04 1022.38,1216.04 1022.97,1216.04 1023.56,1216.04 1024.14,1216.04 1024.73,1216.04 1025.32,1216.04 1025.9,1216.04 1026.49,1216.04 1027.07,1216.04 1027.66,1216.04 1028.25,1216.04 1028.83,1216.04 1029.42,1216.04 1030.01,1216.04 1030.59,1216.04 1031.18,1216.04 1031.77,1216.04 1032.35,1216.04 1032.94,1216.04 1033.52,1216.04 1034.11,1216.04 1034.7,1216.04 1035.28,1216.04 1035.87,1216.04 1036.46,1216.04 1037.04,1216.04 1037.63,1216.04 1038.22,1216.04 1038.8,1216.04 1039.39,1216.04 1039.98,1216.04 1040.56,1216.04 1041.15,1216.04 1041.73,1216.04 1042.32,1216.04 1042.91,1216.04 1043.49,1216.04 1044.08,1216.04 1044.67,1216.04 1045.25,1216.04 1045.84,1216.04 1046.43,1216.04 1047.01,1216.04 1047.6,1216.04 1048.19,1216.04 1048.77,1216.04 1049.36,1216.04 1049.94,1216.04 1050.53,1216.04 1051.12,1216.04 1051.7,1216.04 1052.29,1216.04 1052.88,1216.04 1053.46,1216.04 1054.05,1216.04 1054.64,1216.04 1055.22,1216.04 1055.81,1216.04 1056.39,1216.04 1056.98,1216.04 1057.57,1216.04 1058.15,1216.04 1058.74,1216.04 1059.33,1216.04 1059.91,1216.04 1060.5,1216.04 1061.09,1216.04 1061.67,1216.04 1062.26,1216.04 1062.85,1216.04 1063.43,1216.04 1064.02,1216.04 1064.6,1216.04 1065.19,1216.04 1065.78,1216.04 1066.36,1216.04 1066.95,1216.04 1067.54,1216.04 1068.12,1216.04 1068.71,1216.04 1069.3,1216.04 1069.88,1216.04 1070.47,1216.04 1071.06,1216.04 1071.64,1216.04 1072.23,1216.04 1072.81,1216.04 1073.4,1216.04 1073.99,1216.04 1074.57,1216.04 1075.16,1216.04 1075.75,1216.04 1076.33,1216.04 1076.92,1216.04 1077.51,1216.04 1078.09,1216.04 1078.68,1216.04 1079.26,1216.04 1079.85,1216.04 1080.44,1216.04 1081.02,1216.04 1081.61,1216.04 1082.2,1216.04 1082.78,1216.04 1083.37,1216.04 1083.96,1216.04 1084.54,1216.04 1085.13,1216.04 1085.72,1216.04 1086.3,1216.04 1086.89,1216.04 1087.47,1216.04 1088.06,1216.04 1088.65,1216.04 1089.23,1216.04 1089.82,1216.04 1090.41,1216.04 1090.99,1216.04 1091.58,1216.04 1092.17,1216.04 1092.75,1216.04 1093.34,1216.04 1093.93,1216.04 1094.51,1216.04 1095.1,1216.04 1095.68,1216.04 1096.27,1216.04 1096.86,1216.04 1097.44,1216.04 1098.03,1216.04 1098.62,1216.04 1099.2,1216.04 1099.79,1216.04 1100.38,1216.04 1100.96,1216.04 1101.55,1216.04 1102.14,1216.04 1102.72,1216.04 1103.31,1216.04 1103.89,1216.04 1104.48,1216.04 1105.07,1216.04 1105.65,1216.04 1106.24,1216.04 1106.83,1216.04 1107.41,1216.04 1108,1216.04 1108.59,1216.04 1109.17,1216.04 1109.76,1216.04 1110.34,1216.04 1110.93,1216.04 1111.52,1216.04 1112.1,1216.04 1112.69,1216.04 1113.28,1216.04 1113.86,1216.04 1114.45,1216.04 1115.04,1216.04 1115.62,1216.04 1116.21,1216.04 1116.8,1216.04 1117.38,1216.04 1117.97,1216.04 1118.55,1216.04 1119.14,1216.04 1119.73,1216.04 1120.31,1216.04 1120.9,1216.04 1121.49,1216.04 1122.07,1216.04 1122.66,1216.04 1123.25,1216.04 1123.83,1216.04 1124.42,1216.04 1125.01,1216.04 1125.59,1216.04 1126.18,1216.04 1126.76,1216.04 1127.35,1216.04 1127.94,1216.04 1128.52,1216.04 1129.11,1216.04 1129.7,1216.04 1130.28,1216.04 1130.87,1216.04 1131.46,1216.04 1132.04,1216.04 1132.63,1216.04 1133.21,1216.04 1133.8,1216.04 1134.39,1216.04 1134.97,1216.04 1135.56,1216.04 1136.15,1216.04 1136.73,1216.04 1137.32,1216.04 1137.91,1216.04 1138.49,1216.04 1139.08,1216.04 1139.67,1216.04 1140.25,1216.04 1140.84,1216.04 1141.42,1216.04 1142.01,1216.04 1142.6,1216.04 1143.18,1216.04 1143.77,1216.04 1144.36,1216.04 1144.94,1216.04 1145.53,1216.04 1146.12,1216.04 1146.7,1216.04 1147.29,1216.04 1147.88,1216.04 1148.46,1216.04 1149.05,1216.04 1149.63,1216.04 1150.22,1216.04 1150.81,1216.04 1151.39,1216.04 1151.98,1216.04 1152.57,1216.04 1153.15,1216.04 1153.74,1216.04 1154.33,1216.04 1154.91,1216.04 1155.5,1216.04 1156.09,1216.04 1156.67,1216.04 1157.26,1216.04 1157.84,1216.04 1158.43,1216.04 1159.02,1216.04 1159.6,1216.04 1160.19,1216.04 1160.78,1216.04 1161.36,1216.04 1161.95,1216.04 1162.54,1216.04 1163.12,1216.04 1163.71,1216.04 1164.29,1216.04 1164.88,1216.04 1165.47,1216.04 1166.05,1216.04 1166.64,1216.04 1167.23,1216.04 1167.81,1216.04 1168.4,1216.04 1168.99,1216.04 1169.57,1216.04 1170.16,1216.04 1170.75,1216.04 1171.33,1216.04 1171.92,1216.04 1172.5,1216.04 1173.09,1216.04 1173.68,1216.04 1174.26,1216.04 1174.85,1216.04 1175.44,1216.04 1176.02,1216.04 1176.61,1216.04 1177.2,1216.04 1177.78,1216.04 1178.37,1216.04 1178.96,1216.04 1179.54,1216.04 1180.13,1216.04 1180.71,1216.04 1181.3,1216.04 1181.89,1216.04 1182.47,1216.04 1183.06,1216.04 1183.65,1216.04 1184.23,1216.04 1184.82,1216.04 1185.41,1216.04 1185.99,1216.04 1186.58,1216.04 1187.16,1216.04 1187.75,1216.04 1188.34,1216.04 1188.92,1216.04 1189.51,1216.04 1190.1,1216.04 1190.68,1216.04 1191.27,1216.04 1191.86,1216.04 1192.44,1216.04 1193.03,1216.04 1193.62,1216.04 1194.2,1216.04 1194.79,1216.04 1195.37,1216.04 1195.96,1216.04 1196.55,1216.04 1197.13,1216.04 1197.72,1216.04 1198.31,1216.04 1198.89,1216.04 1199.48,1216.04 1200.07,1216.04 1200.65,1216.04 1201.24,1216.04 1201.83,1216.04 1202.41,1216.04 1203,1216.04 1203.58,1216.04 1204.17,1216.04 1204.76,1216.04 1205.34,1216.04 1205.93,1216.04 1206.52,1216.04 1207.1,1216.04 1207.69,1216.04 1208.28,1216.04 1208.86,1216.04 1209.45,1216.04 1210.03,1216.04 1210.62,1216.04 1211.21,1216.04 1211.79,1216.04 1212.38,1216.04 1212.97,1216.04 1213.55,1216.04 1214.14,1216.04 1214.73,1216.04 1215.31,1216.04 1215.9,1216.04 1216.49,1216.04 1217.07,1216.04 1217.66,1216.04 1218.24,1216.04 1218.83,1216.04 1219.42,1216.04 1220,1216.04 1220.59,1216.04 1221.18,1216.04 1221.76,1216.04 1222.35,1216.04 1222.94,1216.04 1223.52,1216.04 1224.11,1216.04 1224.7,1216.04 1225.28,1216.04 1225.87,1216.04 1226.45,1216.04 1227.04,1216.04 1227.63,1216.04 1228.21,1216.04 1228.8,1216.04 1229.39,1216.04 1229.97,1216.04 1230.56,1216.04 1231.15,1216.04 1231.73,1216.04 1232.32,1216.04 1232.91,1216.04 1233.49,1216.04 1234.08,1216.04 1234.66,1216.04 1235.25,1216.04 1235.84,1216.04 1236.42,1216.04 1237.01,1216.04 1237.6,1216.04 1238.18,1216.04 1238.77,1216.04 1239.36,1216.04 1239.94,1216.04 1240.53,1216.04 1241.11,1216.04 1241.7,1216.04 1242.29,1216.04 1242.87,1216.04 1243.46,1216.04 1244.05,1216.04 1244.63,1216.04 1245.22,1216.04 1245.81,1216.04 1246.39,1216.04 1246.98,1216.04 1247.57,1216.04 1248.15,1216.04 1248.74,1216.04 1249.32,1216.04 1249.91,1216.04 1250.5,1216.04 1251.08,1216.04 1251.67,1216.04 1252.26,1216.04 1252.84,1216.04 1253.43,1216.04 1254.02,1216.04 1254.6,1216.04 1255.19,1216.04 1255.78,1216.04 1256.36,1216.04 1256.95,1216.04 1257.53,1216.04 1258.12,1216.04 1258.71,1216.04 1259.29,1216.04 1259.88,1216.04 1260.47,1216.04 1261.05,1216.04 1261.64,1216.04 1262.23,1216.04 1262.81,1216.04 1263.4,1216.04 1263.98,1216.04 1264.57,1216.04 1265.16,1216.04 1265.74,1216.04 1266.33,1216.04 1266.92,1216.04 1267.5,1216.04 1268.09,1216.04 1268.68,1216.04 1269.26,1216.04 1269.85,1216.04 1270.44,1216.04 1271.02,1216.04 1271.61,1216.04 1272.19,1216.04 1272.78,1216.04 1273.37,1216.04 1273.95,1216.04 1274.54,1216.04 1275.13,1216.04 1275.71,1216.04 1276.3,1216.04 1276.89,1216.04 1277.47,1216.04 1278.06,1216.04 1278.65,1216.04 1279.23,1216.04 1279.82,1216.04 1280.4,1216.04 1280.99,1216.04 1281.58,1216.04 1282.16,1216.04 1282.75,1216.04 1283.34,1216.04 1283.92,1216.04 1284.51,1216.04 1285.1,1216.04 1285.68,1216.04 1286.27,1216.04 1286.86,1216.04 1287.44,1216.04 1288.03,1216.04 1288.61,1216.04 1289.2,1216.04 1289.79,1216.04 1290.37,1216.04 1290.96,1216.04 1291.55,1216.04 1292.13,1216.04 1292.72,1216.04 1293.31,1216.04 1293.89,1216.04 1294.48,1216.04 1295.06,1216.04 1295.65,1216.04 1296.24,1216.04 1296.82,1216.04 1297.41,1216.04 1298,1216.04 1298.58,1216.04 1299.17,1216.04 1299.76,1216.04 1300.34,1216.04 1300.93,1216.04 1301.52,1216.04 1302.1,1216.04 1302.69,1216.04 1303.27,1216.04 1303.86,1216.04 1304.45,1216.04 1305.03,1216.04 1305.62,1216.04 1306.21,1216.04 1306.79,1216.04 1307.38,1216.04 1307.97,1216.04 1308.55,1216.04 1309.14,1216.04 1309.73,1216.04 1310.31,1216.04 1310.9,1216.04 1311.48,1216.04 1312.07,1216.04 1312.66,1216.04 1313.24,1216.04 1313.83,1216.04 1314.42,1216.04 1315,1216.04 1315.59,1216.04 1316.18,1216.04 1316.76,1216.04 1317.35,1216.04 1317.93,1216.04 1318.52,1216.04 1319.11,1216.04 1319.69,1216.04 1320.28,1216.04 1320.87,1216.04 1321.45,1216.04 1322.04,1216.04 1322.63,1216.04 1323.21,1216.04 1323.8,1216.04 1324.39,1216.04 1324.97,1216.04 1325.56,1216.04 1326.14,1216.04 1326.73,1216.04 1327.32,1216.04 1327.9,1216.04 1328.49,1216.04 1329.08,1216.04 1329.66,1216.04 1330.25,1216.04 1330.84,1216.04 1331.42,1216.04 1332.01,1216.04 1332.6,1216.04 1333.18,1216.04 1333.77,1216.04 1334.35,1216.04 1334.94,1216.04 1335.53,1216.04 1336.11,1216.04 1336.7,1216.04 1337.29,1216.04 1337.87,1216.04 1338.46,1216.04 1339.05,1216.04 1339.63,1216.04 1340.22,1216.04 1340.8,1216.04 1341.39,1216.04 1341.98,1216.04 1342.56,1216.04 1343.15,1216.04 1343.74,1216.04 1344.32,1216.04 1344.91,1216.04 1345.5,1216.04 1346.08,1216.04 1346.67,1216.04 1347.26,1216.04 1347.84,1216.04 1348.43,1216.04 1349.01,1216.04 1349.6,1216.04 1350.19,1216.04 1350.77,1216.04 1351.36,1216.04 1351.95,1216.04 1352.53,1216.04 1353.12,1216.04 1353.71,1216.04 1354.29,1216.04 1354.88,1216.04 1355.47,1216.04 1356.05,1216.04 1356.64,1216.04 1357.22,1216.04 1357.81,1216.04 1358.4,1216.04 1358.98,1216.04 1359.57,1216.04 1360.16,1216.04 1360.74,1216.04 1361.33,1216.04 1361.92,1216.04 1362.5,1216.04 1363.09,1216.04 1363.68,1216.04 1364.26,1216.04 1364.85,1216.04 1365.43,1216.04 1366.02,1216.04 1366.61,1216.04 1367.19,1216.04 1367.78,1216.04 1368.37,1216.04 1368.95,1216.04 1369.54,1216.04 1370.13,1216.04 1370.71,1216.04 1371.3,1216.04 1371.88,1216.04 1372.47,1216.04 1373.06,1216.04 1373.64,1216.04 1374.23,1216.04 1374.82,1216.04 1375.4,1216.04 1375.99,1216.04 1376.58,1216.04 1377.16,1216.04 1377.75,1216.04 1378.34,1216.04 1378.92,1216.04 1379.51,1216.04 1380.09,1216.04 1380.68,1216.04 1381.27,1216.04 1381.85,1216.04 1382.44,1216.04 1383.03,1216.04 1383.61,1216.04 1384.2,1216.04 1384.79,1216.04 1385.37,1216.04 1385.96,1216.04 1386.55,1216.04 1387.13,1216.04 1387.72,1216.04 1388.3,1216.04 1388.89,1216.04 1389.48,1216.04 1390.06,1216.04 1390.65,1216.04 1391.24,1216.04 1391.82,1216.04 1392.41,1216.04 1393,1216.04 1393.58,1216.04 1394.17,1216.04 1394.75,1216.04 1395.34,1216.04 1395.93,1216.04 1396.51,1216.04 1397.1,1216.04 1397.69,1216.04 1398.27,1216.04 1398.86,1216.04 1399.45,1216.04 1400.03,1216.04 1400.62,1216.04 1401.21,1216.04 1401.79,1216.04 1402.38,1216.04 1402.96,1216.04 1403.55,1216.04 1404.14,1216.04 1404.72,1216.04 1405.31,1216.04 1405.9,1216.04 1406.48,1216.04 1407.07,1216.04 1407.66,1216.04 1408.24,1216.04 1408.83,1216.04 1409.42,1216.04 1410,1216.04 1410.59,1216.04 1411.17,1216.04 1411.76,1216.04 1412.35,1216.04 1412.93,1216.04 1413.52,1216.04 1414.11,1216.04 1414.69,1216.04 1415.28,1216.04 1415.87,1216.04 1416.45,1216.04 1417.04,1216.04 1417.63,1216.04 1418.21,1216.04 1418.8,1216.04 1419.38,1216.04 1419.97,1216.04 1420.56,1216.04 1421.14,1216.04 1421.73,1216.04 1422.32,1216.04 1422.9,1216.04 1423.49,1216.04 1424.08,1216.04 1424.66,1216.04 1425.25,1216.04 1425.83,1216.04 1426.42,1216.04 1427.01,1216.04 1427.59,1216.04 1428.18,1216.04 1428.77,1216.04 1429.35,1216.04 1429.94,1216.04 1430.53,1216.04 1431.11,1216.04 1431.7,1216.04 1432.29,1216.04 1432.87,1216.04 1433.46,1216.04 1434.04,1216.04 1434.63,1216.04 1435.22,1216.04 1435.8,1216.04 1436.39,1216.04 1436.98,1216.04 1437.56,1216.04 1438.15,1216.04 1438.74,1216.04 1439.32,1216.04 1439.91,1216.04 1440.5,1216.04 1441.08,1216.04 1441.67,1216.04 1442.25,1216.04 1442.84,1216.04 1443.43,1216.04 1444.01,1216.04 1444.6,1216.04 1445.19,1216.04 1445.77,1216.04 1446.36,1216.04 1446.95,1216.04 1447.53,1216.04 1448.12,1216.04 1448.7,1216.04 1449.29,1216.04 1449.88,1216.04 1450.46,1216.04 1451.05,1216.04 1451.64,1216.04 1452.22,1216.04 1452.81,1216.04 1453.4,1216.04 1453.98,1216.04 1454.57,1216.04 1455.16,1216.04 1455.74,1216.04 1456.33,1216.04 1456.91,1216.04 1457.5,1216.04 1458.09,1216.04 1458.67,1216.04 1459.26,1216.04 1459.85,1216.04 1460.43,1216.04 1461.02,1216.04 1461.61,1216.04 1462.19,1216.04 1462.78,1216.04 1463.37,1216.04 1463.95,1216.04 1464.54,1216.04 1465.12,1216.04 1465.71,1216.04 1466.3,1216.04 1466.88,1216.04 1467.47,1216.04 1468.06,1216.04 1468.64,1216.04 1469.23,1216.04 1469.82,1216.04 1470.4,1216.04 1470.99,1216.04 1471.57,1216.04 1472.16,1216.04 1472.75,1216.04 1473.33,1216.04 1473.92,1216.04 1474.51,1216.04 1475.09,1216.04 1475.68,1216.04 1476.27,1216.04 1476.85,1216.04 1477.44,1216.04 1478.03,1216.04 1478.61,1216.04 1479.2,1216.04 1479.78,1216.04 1480.37,1216.04 1480.96,1216.04 1481.54,1216.04 1482.13,1216.04 1482.72,1216.04 1483.3,1216.04 1483.89,1216.04 1484.48,1216.04 1485.06,1216.04 1485.65,1216.04 1486.24,1216.04 1486.82,1216.04 1487.41,1216.04 1487.99,1216.04 1488.58,1216.04 1489.17,1216.04 1489.75,1216.04 1490.34,1216.04 1490.93,1216.04 1491.51,1216.04 1492.1,1216.04 1492.69,1216.04 1493.27,1216.04 1493.86,1216.04 1494.45,1216.04 1495.03,1216.04 1495.62,1216.04 1496.2,1216.04 1496.79,1216.04 1497.38,1216.04 1497.96,1216.04 1498.55,1216.04 1499.14,1216.04 1499.72,1216.04 1500.31,1216.04 1500.9,1216.04 1501.48,1216.04 1502.07,1216.04 1502.65,1216.04 1503.24,1216.04 1503.83,1216.04 1504.41,1216.04 1505,1216.04 1505.59,1216.04 1506.17,1216.04 1506.76,1216.04 1507.35,1216.04 1507.93,1216.04 1508.52,1216.04 1509.11,1216.04 1509.69,1216.04 1510.28,1216.04 1510.86,1216.04 1511.45,1216.04 1512.04,1216.04 1512.62,1216.04 1513.21,1216.04 1513.8,1216.04 1514.38,1216.04 1514.97,1216.04 1515.56,1216.04 1516.14,1216.04 1516.73,1216.04 1517.32,1216.04 1517.9,1216.04 1518.49,1216.04 1519.07,1216.04 1519.66,1216.04 1520.25,1216.04 1520.83,1216.04 1521.42,1216.04 1522.01,1216.04 1522.59,1216.04 1523.18,1216.04 1523.77,1216.04 1524.35,1216.04 1524.94,1216.04 1525.52,1216.04 1526.11,1216.04 1526.7,1216.04 1527.28,1216.04 1527.87,1216.04 1528.46,1216.04 1529.04,1216.04 1529.63,1216.04 1530.22,1216.04 1530.8,1216.04 1531.39,1216.04 1531.98,1216.04 1532.56,1216.04 1533.15,1216.04 1533.73,1216.04 1534.32,1216.04 1534.91,1216.04 1535.49,1216.04 1536.08,1216.04 1536.67,1216.04 1537.25,1216.04 1537.84,1216.04 1538.43,1216.04 1539.01,1216.04 1539.6,1216.04 1540.19,1216.04 1540.77,1216.04 1541.36,1216.04 1541.94,1216.04 1542.53,1216.04 1543.12,1216.04 1543.7,1216.04 1544.29,1216.04 1544.88,1216.04 1545.46,1216.04 1546.05,1216.04 1546.64,1216.04 1547.22,1216.04 1547.81,1216.04 1548.4,1216.04 1548.98,1216.04 1549.57,1216.04 1550.15,1216.04 1550.74,1216.04 1551.33,1216.04 1551.91,1216.04 1552.5,1216.04 1553.09,1216.04 1553.67,1216.04 1554.26,1216.04 1554.85,1216.04 1555.43,1216.04 1556.02,1216.04 1556.6,1216.04 1557.19,1216.04 1557.78,1216.04 1558.36,1216.04 1558.95,1216.04 1559.54,1216.04 1560.12,1216.04 1560.71,1216.04 1561.3,1216.04 1561.88,1216.04 1562.47,1216.04 1563.06,1216.04 1563.64,1216.04 1564.23,1216.04 1564.81,1216.04 1565.4,1216.04 1565.99,1216.04 1566.57,1216.04 1567.16,1216.04 1567.75,1216.04 1568.33,1216.04 1568.92,1216.04 1569.51,1216.04 1570.09,1216.04 1570.68,1216.04 1571.27,1216.04 1571.85,1216.04 1572.44,1216.04 1573.02,1216.04 1573.61,1216.04 1574.2,1216.04 1574.78,1216.04 1575.37,1216.04 1575.96,1216.04 1576.54,1216.04 1577.13,1216.04 1577.72,1216.04 1578.3,1216.04 1578.89,1216.04 1579.47,1216.04 1580.06,1216.04 1580.65,1216.04 1581.23,1216.04 1581.82,1216.04 1582.41,1216.04 1582.99,1216.04 1583.58,1216.04 1584.17,1216.04 1584.75,1216.04 1585.34,1216.04 1585.93,1216.04 1586.51,1216.04 1587.1,1216.04 1587.68,1216.04 1588.27,1216.04 1588.86,1216.04 1589.44,1216.04 1590.03,1216.04 1590.62,1216.04 1591.2,1216.04 1591.79,1216.04 1592.38,1216.04 1592.96,1216.04 1593.55,1216.04 1594.14,1216.04 1594.72,1216.04 1595.31,1216.04 1595.89,1216.04 1596.48,1216.04 1597.07,1216.04 1597.65,1216.04 1598.24,1216.04 1598.83,1216.04 1599.41,1216.04 1600,1216.04 1600.59,1216.04 1601.17,1216.04 1601.76,1216.04 1602.34,1216.04 1602.93,1216.04 1603.52,1216.04 1604.1,1216.04 1604.69,1216.04 1605.28,1216.04 1605.86,1216.04 1606.45,1216.04 1607.04,1216.04 1607.62,1216.04 1608.21,1216.04 1608.8,1216.04 1609.38,1216.04 1609.97,1216.04 1610.55,1216.04 1611.14,1216.04 1611.73,1216.04 1612.31,1216.04 1612.9,1216.04 1613.49,1216.04 1614.07,1216.04 1614.66,1216.04 1615.25,1216.04 1615.83,1216.04 1616.42,1216.04 1617.01,1216.04 1617.59,1216.04 1618.18,1216.04 1618.76,1216.04 1619.35,1216.04 1619.94,1216.04 1620.52,1216.04 1621.11,1216.04 1621.7,1216.04 1622.28,1216.04 1622.87,1216.04 1623.46,1216.04 1624.04,1216.04 1624.63,1216.04 1625.22,1216.04 1625.8,1216.04 1626.39,1216.04 1626.97,1216.04 1627.56,1216.04 1628.15,1216.04 1628.73,1216.04 1629.32,1216.04 1629.91,1216.04 1630.49,1216.04 1631.08,1216.04 1631.67,1216.04 1632.25,1216.04 1632.84,1216.04 1633.42,1216.04 1634.01,1216.04 1634.6,1216.04 1635.18,1216.04 1635.77,1216.04 1636.36,1216.04 1636.94,1216.04 1637.53,1216.04 1638.12,1216.04 1638.7,1216.04 1639.29,1216.04 1639.88,1216.04 1640.46,1216.04 1641.05,1216.04 1641.63,1216.04 1642.22,1216.04 1642.81,1216.04 1643.39,1216.04 1643.98,1216.04 1644.57,1216.04 1645.15,1216.04 1645.74,1216.04 1646.33,1216.04 1646.91,1216.04 1647.5,1216.04 1648.09,1216.04 1648.67,1216.04 1649.26,1216.04 1649.84,1216.04 1650.43,1216.04 1651.02,1216.04 1651.6,1216.04 1652.19,1216.04 1652.78,1216.04 1653.36,1216.04 1653.95,1216.04 1654.54,1216.04 1655.12,1216.04 1655.71,1216.04 1656.29,1216.04 1656.88,1216.04 1657.47,1216.04 1658.05,1216.04 1658.64,1216.04 1659.23,1216.04 1659.81,1216.04 1660.4,1216.04 1660.99,1216.04 1661.57,1216.04 1662.16,1216.04 1662.75,1216.04 1663.33,1216.04 1663.92,1216.04 1664.5,1216.04 1665.09,1216.04 1665.68,1216.04 1666.26,1216.04 1666.85,1216.04 1667.44,1216.04 1668.02,1216.04 1668.61,1216.04 1669.2,1216.04 1669.78,1216.04 1670.37,1216.04 1670.96,1216.04 1671.54,1216.04 1672.13,1216.04 1672.71,1216.04 1673.3,1216.04 1673.89,1216.04 1674.47,1216.04 1675.06,1216.04 1675.65,1216.04 1676.23,1216.04 1676.82,1216.04 1677.41,1216.04 1677.99,1216.04 1678.58,1216.04 1679.17,1216.04 1679.75,1216.04 1680.34,1216.04 1680.92,1216.04 1681.51,1216.04 1682.1,1216.04 1682.68,1216.04 1683.27,1216.04 1683.86,1216.04 1684.44,1216.04 1685.03,1216.04 1685.62,1216.04 1686.2,1216.04 1686.79,1216.04 1687.37,1216.04 1687.96,1216.04 1688.55,1216.04 1689.13,1216.04 1689.72,1216.04 1690.31,1216.04 1690.89,1216.04 1691.48,1216.04 1692.07,1216.04 1692.65,1216.04 1693.24,1216.04 1693.83,1216.04 1694.41,1216.04 1695,1216.04 1695.58,1216.04 1696.17,1216.04 1696.76,1216.04 1697.34,1216.04 1697.93,1216.04 1698.52,1216.04 1699.1,1216.04 1699.69,1216.04 1700.28,1216.04 1700.86,1216.04 1701.45,1216.04 1702.04,1216.04 1702.62,1216.04 1703.21,1216.04 1703.79,1216.04 1704.38,1216.04 1704.97,1216.04 1705.55,1216.04 1706.14,1216.04 1706.73,1216.04 1707.31,1216.04 1707.9,1216.04 1708.49,1216.04 1709.07,1216.04 1709.66,1216.04 1710.24,1216.04 1710.83,1216.04 1711.42,1216.04 1712,1216.04 1712.59,1216.04 1713.18,1216.04 1713.76,1216.04 1714.35,1216.04 1714.94,1216.04 1715.52,1216.04 1716.11,1216.04 1716.7,1216.04 1717.28,1216.04 1717.87,1216.04 1718.45,1216.04 1719.04,1216.04 1719.63,1216.04 1720.21,1216.04 1720.8,1216.04 1721.39,1216.04 1721.97,1216.04 1722.56,1216.04 1723.15,1216.04 1723.73,1216.04 1724.32,1216.04 1724.91,1216.04 1725.49,1216.04 1726.08,1216.04 1726.66,1216.04 1727.25,1216.04 1727.84,1216.04 1728.42,1216.04 1729.01,1216.04 1729.6,1216.04 1730.18,1216.04 1730.77,1216.04 1731.36,1216.04 1731.94,1216.04 1732.53,1216.04 1733.11,1216.04 1733.7,1216.04 1734.29,1216.04 1734.87,1216.04 1735.46,1216.04 1736.05,1216.04 1736.63,1216.04 1737.22,1216.04 1737.81,1216.04 1738.39,1216.04 1738.98,1216.04 1739.57,1216.04 1740.15,1216.04 1740.74,1216.04 1741.32,1216.04 1741.91,1216.04 1742.5,1216.04 1743.08,1216.04 1743.67,1216.04 1744.26,1216.04 1744.84,1216.04 1745.43,1216.04 1746.02,1216.04 1746.6,1216.04 1747.19,1216.04 1747.78,1216.04 1748.36,1216.04 1748.95,1216.04 1749.53,1216.04 1750.12,1216.04 1750.71,1216.04 1751.29,1216.04 1751.88,1216.04 1752.47,1216.04 1753.05,1216.04 1753.64,1216.04 1754.23,1216.04 1754.81,1216.04 1755.4,1216.04 1755.99,1216.04 1756.57,1216.04 1757.16,1216.04 1757.74,1216.04 1758.33,1216.04 1758.92,1216.04 1759.5,1216.04 1760.09,1216.04 1760.68,1216.04 1761.26,1216.04 1761.85,1216.04 1762.44,1216.04 1763.02,1216.04 1763.61,1216.04 1764.19,1216.04 1764.78,1216.04 1765.37,1216.04 1765.95,1216.04 1766.54,1216.04 1767.13,1216.04 1767.71,1216.04 1768.3,1216.04 1768.89,1216.04 1769.47,1216.04 1770.06,1216.04 1770.65,1216.04 1771.23,1216.04 1771.82,1216.04 1772.4,1216.04 1772.99,1216.04 1773.58,1216.04 1774.16,1216.04 1774.75,1216.04 1775.34,1216.04 1775.92,1216.04 1776.51,1216.04 1777.1,1216.04 1777.68,1216.04 1778.27,1216.04 1778.86,1216.04 1779.44,1216.04 1780.03,1216.04 1780.61,1216.04 1781.2,1216.04 1781.79,1216.04 1782.37,1216.04 1782.96,1216.04 1783.55,1216.04 1784.13,1216.04 1784.72,1216.04 1785.31,1216.04 1785.89,1216.04 1786.48,1216.04 1787.06,1216.04 1787.65,1216.04 1788.24,1216.04 1788.82,1216.04 1789.41,1216.04 1790,1216.04 1790.58,1216.04 1791.17,1216.04 1791.76,1216.04 1792.34,1216.04 1792.93,1216.04 1793.52,1216.04 1794.1,1216.04 1794.69,1216.04 1795.27,1216.04 1795.86,1216.04 1796.45,1216.04 1797.03,1216.04 1797.62,1216.04 1798.21,1216.04 1798.79,1216.04 1799.38,1216.04 1799.97,1216.04 1800.55,1216.04 1801.14,1216.04 1801.73,1216.04 1802.31,1216.04 1802.9,1216.04 1803.48,1216.04 1804.07,1216.04 1804.66,1216.04 1805.24,1216.04 1805.83,1216.04 1806.42,1216.04 1807,1216.04 1807.59,1216.04 1808.18,1216.04 1808.76,1216.04 1809.35,1216.04 1809.94,1216.04 1810.52,1216.04 1811.11,1216.04 1811.69,1216.04 1812.28,1216.04 1812.87,1216.04 1813.45,1216.04 1814.04,1216.04 1814.63,1216.04 1815.21,1216.04 1815.8,1216.04 1816.39,1216.04 1816.97,1216.04 1817.56,1216.04 1818.14,1216.04 1818.73,1216.04 1819.32,1216.04 1819.9,1216.04 1820.49,1216.04 1821.08,1216.04 1821.66,1216.04 1822.25,1216.04 1822.84,1216.04 1823.42,1216.04 1824.01,1216.04 1824.6,1216.04 1825.18,1216.04 1825.77,1216.04 1826.35,1216.04 1826.94,1216.04 1827.53,1216.04 1828.11,1216.04 1828.7,1216.04 1829.29,1216.04 1829.87,1216.04 1830.46,1216.04 1831.05,1216.04 1831.63,1216.04 1832.22,1216.04 1832.81,1216.04 1833.39,1216.04 1833.98,1216.04 1834.56,1216.04 1835.15,1216.04 1835.74,1216.04 1836.32,1216.04 1836.91,1216.04 1837.5,1216.04 1838.08,1216.04 1838.67,1216.04 1839.26,1216.04 1839.84,1216.04 1840.43,1216.04 1841.01,1216.04 1841.6,1216.04 1842.19,1216.04 1842.77,1216.04 1843.36,1216.04 1843.95,1216.04 1844.53,1216.04 1845.12,1216.04 1845.71,1216.04 1846.29,1216.04 1846.88,1216.04 1847.47,1216.04 1848.05,1216.04 1848.64,1216.04 1849.22,1216.04 1849.81,1216.04 1850.4,1216.04 1850.98,1216.04 1851.57,1216.04 1852.16,1216.04 1852.74,1216.04 1853.33,1216.04 1853.92,1216.04 1854.5,1216.04 1855.09,1216.04 1855.68,1216.04 1856.26,1216.04 1856.85,1216.04 1857.43,1216.04 1858.02,1216.04 1858.61,1216.04 1859.19,1216.04 1859.78,1216.04 1860.37,1216.04 1860.95,1216.04 1861.54,1216.04 1862.13,1216.04 1862.71,1216.04 1863.3,1216.04 1863.88,1216.04 1864.47,1216.04 1865.06,1216.04 1865.64,1216.04 1866.23,1216.04 1866.82,1216.04 1867.4,1216.04 1867.99,1216.04 1868.58,1216.04 1869.16,1216.04 1869.75,1216.04 1870.34,1216.04 1870.92,1216.04 1871.51,1216.04 1872.09,1216.04 1872.68,1216.04 1873.27,1216.04 1873.85,1216.04 1874.44,1216.04 1875.03,1216.04 1875.61,1216.04 1876.2,1216.04 1876.79,1216.04 1877.37,1216.04 1877.96,1216.04 1878.55,1216.04 1879.13,1216.04 1879.72,1216.04 1880.3,1216.04 1880.89,1216.04 1881.48,1216.04 1882.06,1216.04 1882.65,1216.04 1883.24,1216.04 1883.82,1216.04 1884.41,1216.04 1885,1216.04 1885.58,1216.04 1886.17,1216.04 1886.76,1216.04 1887.34,1216.04 1887.93,1216.04 1888.51,1216.04 1889.1,1216.04 1889.69,1216.04 1890.27,1216.04 1890.86,1216.04 1891.45,1216.04 1892.03,1216.04 1892.62,1216.04 1893.21,1216.04 1893.79,1216.04 1894.38,1216.04 1894.96,1216.04 1895.55,1216.04 1896.14,1216.04 1896.72,1216.04 1897.31,1216.04 1897.9,1216.04 1898.48,1216.04 1899.07,1216.04 1899.66,1216.04 1900.24,1216.04 1900.83,1216.04 1901.42,1216.04 1902,1216.04 1902.59,1216.04 1903.17,1216.04 1903.76,1216.04 1904.35,1216.04 1904.93,1216.04 1905.52,1216.04 1906.11,1216.04 1906.69,1216.04 1907.28,1216.04 1907.87,1216.04 1908.45,1216.04 1909.04,1216.04 1909.63,1216.04 1910.21,1216.04 1910.8,1216.04 1911.38,1216.04 1911.97,1216.04 1912.56,1216.04 1913.14,1216.04 1913.73,1216.04 1914.32,1216.04 1914.9,1216.04 1915.49,1216.04 1916.08,1216.04 1916.66,1216.04 1917.25,1216.04 1917.83,1216.04 1918.42,1216.04 1919.01,1216.04 1919.59,1216.04 1920.18,1216.04 1920.77,1216.04 1921.35,1216.04 1921.94,1216.04 1922.53,1216.04 1923.11,1216.04 1923.7,1216.04 1924.29,1216.04 1924.87,1216.04 1925.46,1216.04 1926.04,1216.04 1926.63,1216.04 1927.22,1216.04 1927.8,1216.04 1928.39,1216.04 1928.98,1216.04 1929.56,1216.04 1930.15,1216.04 1930.74,1216.04 1931.32,1216.04 1931.91,1216.04 1932.5,1216.04 1933.08,1216.04 1933.67,1216.04 1934.25,1216.04 1934.84,1216.04 1935.43,1216.04 1936.01,1216.04 1936.6,1216.04 1937.19,1216.04 1937.77,1216.04 1938.36,1216.04 1938.95,1216.04 1939.53,1216.04 1940.12,1216.04 1940.71,1216.04 1941.29,1216.04 1941.88,1216.04 1942.46,1216.04 1943.05,1216.04 1943.64,1216.04 1944.22,1216.04 1944.81,1216.04 1945.4,1216.04 1945.98,1216.04 1946.57,1216.04 1947.16,1216.04 1947.74,1216.04 1948.33,1216.04 1948.91,1216.04 1949.5,1216.04 1950.09,1216.04 1950.67,1216.04 1951.26,1216.04 1951.85,1216.04 1952.43,1216.04 1953.02,1216.04 1953.61,1216.04 1954.19,1216.04 1954.78,1216.04 1955.37,1216.04 1955.95,1216.04 1956.54,1216.04 1957.12,1216.04 1957.71,1216.04 1958.3,1216.04 1958.88,1216.04 1959.47,1216.04 1960.06,1216.04 1960.64,1216.04 1961.23,1216.04 1961.82,1216.04 1962.4,1216.04 1962.99,1216.04 1963.58,1216.04 1964.16,1216.04 1964.75,1216.04 1965.33,1216.04 1965.92,1216.04 1966.51,1216.04 1967.09,1216.04 1967.68,1216.04 1968.27,1216.04 1968.85,1216.04 1969.44,1216.04 1970.03,1216.04 1970.61,1216.04 1971.2,1216.04 1971.78,1216.04 1972.37,1216.04 1972.96,1216.04 1973.54,1216.04 1974.13,1216.04 1974.72,1216.04 1975.3,1216.04 1975.89,1216.04 1976.48,1216.04 1977.06,1216.04 1977.65,1216.04 1978.24,1216.04 1978.82,1216.04 1979.41,1216.04 1979.99,1216.04 1980.58,1216.04 1981.17,1216.04 1981.75,1216.04 1982.34,1216.04 1982.93,1216.04 1983.51,1216.04 1984.1,1216.04 1984.69,1216.04 1985.27,1216.04 1985.86,1216.04 1986.45,1216.04 1987.03,1216.04 1987.62,1216.04 1988.2,1216.04 1988.79,1216.04 1989.38,1216.04 1989.96,1216.04 1990.55,1216.04 1991.14,1216.04 1991.72,1216.04 1992.31,1216.04 1992.9,1216.04 1993.48,1216.04 1994.07,1216.04 1994.65,1216.04 1995.24,1216.04 1995.83,1216.04 1996.41,1216.04 1997,1216.04 1997.59,1216.04 1998.17,1216.04 1998.76,1216.04 1999.35,1216.04 1999.93,1216.04 2000.52,1216.04 2001.11,1216.04 2001.69,1216.04 2002.28,1216.04 2002.86,1216.04 2003.45,1216.04 2004.04,1216.04 2004.62,1216.04 2005.21,1216.04 2005.8,1216.04 2006.38,1216.04 2006.97,1216.04 2007.56,1216.04 2008.14,1216.04 2008.73,1216.04 2009.32,1216.04 2009.9,1216.04 2010.49,1216.04 2011.07,1216.04 2011.66,1216.04 2012.25,1216.04 2012.83,1216.04 2013.42,1216.04 2014.01,1216.04 2014.59,1216.04 2015.18,1216.04 2015.77,1216.04 2016.35,1216.04 2016.94,1216.04 2017.53,1216.04 2018.11,1216.04 2018.7,1216.04 2019.28,1216.04 2019.87,1216.04 2020.46,1216.04 2021.04,1216.04 2021.63,1216.04 2022.22,1216.04 2022.8,1216.04 2023.39,1216.04 2023.98,1216.04 2024.56,1216.04 2025.15,1216.04 2025.73,1216.04 2026.32,1216.04 2026.91,1216.04 2027.49,1216.04 2028.08,1216.04 2028.67,1216.04 2029.25,1216.04 2029.84,1216.04 2030.43,1216.04 2031.01,1216.04 2031.6,1216.04 2032.19,1216.04 2032.77,1216.04 2033.36,1216.04 2033.94,1216.04 2034.53,1216.04 2035.12,1216.04 2035.7,1216.04 2036.29,1216.04 2036.88,1216.04 2037.46,1216.04 2038.05,1216.04 2038.64,1216.04 2039.22,1216.04 2039.81,1216.04 2040.4,1216.04 2040.98,1216.04 2041.57,1216.04 2042.15,1216.04 2042.74,1216.04 2043.33,1216.04 2043.91,1216.04 2044.5,1216.04 2045.09,1216.04 2045.67,1216.04 2046.26,1216.04 2046.85,1216.04 2047.43,1216.04 2048.02,1216.04 2048.6,1216.04 2049.19,1216.04 2049.78,1216.04 2050.36,1216.04 2050.95,1216.04 2051.54,1216.04 2052.12,1216.04 2052.71,1216.04 2053.3,1216.04 2053.88,1216.04 2054.47,1216.04 2055.06,1216.04 2055.64,1216.04 2056.23,1216.04 2056.81,1216.04 2057.4,1216.04 2057.99,1216.04 2058.57,1216.04 2059.16,1216.04 2059.75,1216.04 2060.33,1216.04 2060.92,1216.04 2061.51,1216.04 2062.09,1216.04 2062.68,1216.04 2063.27,1216.04 2063.85,1216.04 2064.44,1216.04 2065.02,1216.04 2065.61,1216.04 2066.2,1216.04 2066.78,1216.04 2067.37,1216.04 2067.96,1216.04 2068.54,1216.04 2069.13,1216.04 2069.72,1216.04 2070.3,1216.04 2070.89,1216.04 2071.48,1216.04 2072.06,1216.04 2072.65,1216.04 2073.23,1216.04 2073.82,1216.04 2074.41,1216.04 2074.99,1216.04 2075.58,1216.04 2076.17,1216.04 2076.75,1216.04 2077.34,1216.04 2077.93,1216.04 2078.51,1216.04 2079.1,1216.04 2079.68,1216.04 2080.27,1216.04 2080.86,1216.04 2081.44,1216.04 2082.03,1216.04 2082.62,1216.04 2083.2,1216.04 2083.79,1216.04 2084.38,1216.04 2084.96,1216.04 2085.55,1216.04 2086.14,1216.04 2086.72,1216.04 2087.31,1216.04 2087.89,1216.04 2088.48,1216.04 2089.07,1216.04 2089.65,1216.04 2090.24,1216.04 2090.83,1216.04 2091.41,1216.04 2092,1216.04 2092.59,1216.04 2093.17,1216.04 2093.76,1216.04 2094.35,1216.04 2094.93,1216.04 2095.52,1216.04 2096.1,1216.04 2096.69,1216.04 2097.28,1216.04 2097.86,1216.04 2098.45,1216.04 2099.04,1216.04 2099.62,1216.04 2100.21,1216.04 2100.8,1216.04 2101.38,1216.04 2101.97,1216.04 2102.55,1216.04 2103.14,1216.04 2103.73,1216.04 2104.31,1216.04 2104.9,1216.04 2105.49,1216.04 2106.07,1216.04 2106.66,1216.04 2107.25,1216.04 2107.83,1216.04 2108.42,1216.04 2109.01,1216.04 2109.59,1216.04 2110.18,1216.04 2110.76,1216.04 2111.35,1216.04 2111.94,1216.04 2112.52,1216.04 2113.11,1216.04 2113.7,1216.04 2114.28,1216.04 2114.87,1216.04 2115.46,1216.04 2116.04,1216.04 2116.63,1216.04 2117.22,1216.04 2117.8,1216.04 2118.39,1216.04 2118.97,1216.04 2119.56,1216.04 2120.15,1216.04 2120.73,1216.04 2121.32,1216.04 2121.91,1216.04 2122.49,1216.04 2123.08,1216.04 2123.67,1216.04 2124.25,1216.04 2124.84,1216.04 2125.42,1216.04 2126.01,1216.04 2126.6,1216.04 2127.18,1216.04 2127.77,1216.04 2128.36,1216.04 2128.94,1216.04 2129.53,1216.04 2130.12,1216.04 2130.7,1216.04 2131.29,1216.04 2131.88,1216.04 2132.46,1216.04 2133.05,1216.04 2133.63,1216.04 2134.22,1216.04 2134.81,1216.04 2135.39,1216.04 2135.98,1216.04 2136.57,1216.04 2137.15,1216.04 2137.74,1216.04 2138.33,1216.04 2138.91,1216.04 2139.5,1216.04 2140.09,1216.04 2140.67,1216.04 2141.26,1216.04 2141.84,1216.04 2142.43,1216.04 2143.02,1216.04 2143.6,1216.04 2144.19,1216.04 2144.78,1216.04 2145.36,1216.04 2145.95,1216.04 2146.54,1216.04 2147.12,1216.04 2147.71,1216.04 2148.3,1216.04 2148.88,1216.04 2149.47,1216.04 2150.05,1216.04 2150.64,1216.04 2151.23,1216.04 2151.81,1216.04 2152.4,1216.04 2152.99,1216.04 2153.57,1216.04 2154.16,1216.04 2154.75,1216.04 2155.33,1216.04 2155.92,1216.04 2156.5,1216.04 2157.09,1216.04 2157.68,1216.04 2158.26,1216.04 \"/>\n<path clip-path=\"url(#clip612)\" d=\"M986.025 1215.97 L986.612 1215.97 L987.198 1215.97 L987.785 1215.97 L988.371 1215.97 L988.957 1215.97 L989.544 1215.97 L990.13 1215.97 L990.717 1215.97 L991.303 1215.97 L991.889 1215.97 L992.476 1215.97 L993.062 1215.97 L993.649 1215.97 L994.235 1215.97 L994.822 1215.97 L995.408 1215.97 L995.994 1215.97 L996.581 1215.97 L997.167 1215.97 L997.754 1215.97 L998.34 1215.97 L998.926 1215.97 L999.513 1215.97 L1000.1 1215.97 L1000.69 1215.97 L1001.27 1215.97 L1001.86 1215.97 L1002.44 1215.97 L1003.03 1215.97 L1003.62 1215.97 L1004.2 1215.97 L1004.79 1215.97 L1005.38 1215.97 L1005.96 1215.97 L1006.55 1215.97 L1007.14 1215.97 L1007.72 1215.97 L1008.31 1215.97 L1008.9 1215.97 L1009.48 1215.97 L1010.07 1215.97 L1010.65 1215.97 L1011.24 1215.97 L1011.83 1215.97 L1012.41 1215.97 L1013 1215.97 L1013.59 1215.97 L1014.17 1215.97 L1014.76 1215.97 L1015.35 1215.97 L1015.93 1215.97 L1016.52 1215.97 L1017.11 1215.97 L1017.69 1215.97 L1018.28 1215.97 L1018.86 1215.97 L1019.45 1215.97 L1020.04 1215.97 L1020.62 1215.97 L1021.21 1215.97 L1021.8 1215.97 L1022.38 1215.97 L1022.97 1215.97 L1023.56 1215.97 L1024.14 1215.97 L1024.73 1215.97 L1025.32 1215.97 L1025.9 1215.97 L1026.49 1215.97 L1027.07 1215.97 L1027.66 1215.97 L1028.25 1215.97 L1028.83 1215.97 L1029.42 1215.97 L1030.01 1215.97 L1030.59 1215.97 L1031.18 1215.97 L1031.77 1215.97 L1032.35 1215.97 L1032.94 1215.97 L1033.52 1215.97 L1034.11 1215.97 L1034.7 1215.97 L1035.28 1215.97 L1035.87 1215.97 L1036.46 1215.97 L1037.04 1215.97 L1037.63 1215.97 L1038.22 1215.97 L1038.8 1215.97 L1039.39 1215.97 L1039.98 1215.97 L1040.56 1215.97 L1041.15 1215.97 L1041.73 1215.97 L1042.32 1215.97 L1042.91 1215.97 L1043.49 1215.97 L1044.08 1215.97 L1044.67 1215.97 L1045.25 1215.97 L1045.84 1215.97 L1046.43 1215.97 L1047.01 1215.97 L1047.6 1215.97 L1048.19 1215.97 L1048.77 1215.97 L1049.36 1215.97 L1049.94 1215.97 L1050.53 1215.97 L1051.12 1215.97 L1051.7 1215.97 L1052.29 1215.97 L1052.88 1215.97 L1053.46 1215.97 L1054.05 1215.97 L1054.64 1215.97 L1055.22 1215.97 L1055.81 1215.97 L1056.39 1215.97 L1056.98 1215.97 L1057.57 1215.97 L1058.15 1215.97 L1058.74 1215.97 L1059.33 1215.97 L1059.91 1215.97 L1060.5 1215.97 L1061.09 1215.97 L1061.67 1215.97 L1062.26 1215.97 L1062.85 1215.97 L1063.43 1215.97 L1064.02 1215.97 L1064.6 1215.97 L1065.19 1215.97 L1065.78 1215.97 L1066.36 1215.97 L1066.95 1215.97 L1067.54 1215.97 L1068.12 1215.97 L1068.71 1215.97 L1069.3 1215.97 L1069.88 1215.97 L1070.47 1215.97 L1071.06 1215.97 L1071.64 1215.97 L1072.23 1215.97 L1072.81 1215.97 L1073.4 1215.97 L1073.99 1215.97 L1074.57 1215.97 L1075.16 1215.97 L1075.75 1215.97 L1076.33 1215.97 L1076.92 1215.97 L1077.51 1215.97 L1078.09 1215.97 L1078.68 1215.97 L1079.26 1215.97 L1079.85 1215.97 L1080.44 1215.97 L1081.02 1215.97 L1081.61 1215.97 L1082.2 1215.97 L1082.78 1215.97 L1083.37 1215.97 L1083.96 1215.97 L1084.54 1215.97 L1085.13 1215.97 L1085.72 1215.97 L1086.3 1215.97 L1086.89 1215.97 L1087.47 1215.97 L1088.06 1215.97 L1088.65 1215.97 L1089.23 1215.97 L1089.82 1215.97 L1090.41 1215.97 L1090.99 1215.97 L1091.58 1215.97 L1092.17 1215.97 L1092.75 1215.97 L1093.34 1215.97 L1093.93 1215.97 L1094.51 1215.97 L1095.1 1215.97 L1095.68 1215.97 L1096.27 1215.97 L1096.86 1215.97 L1097.44 1215.97 L1098.03 1215.97 L1098.62 1215.97 L1099.2 1215.97 L1099.79 1215.97 L1100.38 1215.97 L1100.96 1215.97 L1101.55 1215.97 L1102.14 1215.97 L1102.72 1215.97 L1103.31 1215.97 L1103.89 1215.97 L1104.48 1215.97 L1105.07 1215.97 L1105.65 1215.97 L1106.24 1215.97 L1106.83 1215.97 L1107.41 1215.97 L1108 1215.97 L1108.59 1215.97 L1109.17 1215.97 L1109.76 1215.97 L1110.34 1215.97 L1110.93 1215.97 L1111.52 1215.97 L1112.1 1215.97 L1112.69 1215.97 L1113.28 1215.97 L1113.86 1215.97 L1114.45 1215.97 L1115.04 1215.97 L1115.62 1215.97 L1116.21 1215.97 L1116.8 1215.97 L1117.38 1215.97 L1117.97 1215.97 L1118.55 1215.97 L1119.14 1215.97 L1119.73 1215.97 L1120.31 1215.97 L1120.9 1215.97 L1121.49 1215.97 L1122.07 1215.97 L1122.66 1215.97 L1123.25 1215.97 L1123.83 1215.97 L1124.42 1215.97 L1125.01 1215.97 L1125.59 1215.97 L1126.18 1215.97 L1126.76 1215.97 L1127.35 1215.97 L1127.94 1215.97 L1128.52 1215.97 L1129.11 1215.97 L1129.7 1215.97 L1130.28 1215.97 L1130.87 1215.97 L1131.46 1215.97 L1132.04 1215.97 L1132.63 1215.97 L1133.21 1215.97 L1133.8 1215.97 L1134.39 1215.97 L1134.97 1215.97 L1135.56 1215.97 L1136.15 1215.97 L1136.73 1215.97 L1137.32 1215.97 L1137.91 1215.97 L1138.49 1215.97 L1139.08 1215.97 L1139.67 1215.97 L1140.25 1215.97 L1140.84 1215.97 L1141.42 1215.97 L1142.01 1215.97 L1142.6 1215.97 L1143.18 1215.97 L1143.77 1215.97 L1144.36 1215.97 L1144.94 1215.97 L1145.53 1215.97 L1146.12 1215.97 L1146.7 1215.97 L1147.29 1215.97 L1147.88 1215.97 L1148.46 1215.97 L1149.05 1215.97 L1149.63 1215.97 L1150.22 1215.97 L1150.81 1215.97 L1151.39 1215.97 L1151.98 1215.97 L1152.57 1215.97 L1153.15 1215.97 L1153.74 1215.97 L1154.33 1215.97 L1154.91 1215.97 L1155.5 1215.97 L1156.09 1215.97 L1156.67 1215.97 L1157.26 1215.97 L1157.84 1215.97 L1158.43 1215.97 L1159.02 1215.97 L1159.6 1215.97 L1160.19 1215.97 L1160.78 1215.97 L1161.36 1215.97 L1161.95 1215.97 L1162.54 1215.97 L1163.12 1215.97 L1163.71 1215.97 L1164.29 1215.97 L1164.88 1215.97 L1165.47 1215.97 L1166.05 1215.97 L1166.64 1215.97 L1167.23 1215.97 L1167.81 1215.97 L1168.4 1215.97 L1168.99 1215.97 L1169.57 1215.97 L1170.16 1215.97 L1170.75 1215.97 L1171.33 1215.97 L1171.92 1215.97 L1172.5 1215.97 L1173.09 1215.97 L1173.68 1215.97 L1174.26 1215.97 L1174.85 1215.97 L1175.44 1215.97 L1176.02 1215.97 L1176.61 1215.97 L1177.2 1215.97 L1177.78 1215.97 L1178.37 1215.97 L1178.96 1215.97 L1179.54 1215.97 L1180.13 1215.97 L1180.71 1215.97 L1181.3 1215.97 L1181.89 1215.97 L1182.47 1215.97 L1183.06 1215.97 L1183.65 1215.97 L1184.23 1215.97 L1184.82 1215.97 L1185.41 1215.97 L1185.99 1215.97 L1186.58 1215.97 L1187.16 1215.97 L1187.75 1215.97 L1188.34 1215.97 L1188.92 1215.97 L1189.51 1215.97 L1190.1 1215.97 L1190.68 1215.97 L1191.27 1215.97 L1191.86 1215.97 L1192.44 1215.97 L1193.03 1215.97 L1193.62 1215.97 L1194.2 1215.97 L1194.79 1215.97 L1195.37 1215.97 L1195.96 1215.97 L1196.55 1215.97 L1197.13 1215.97 L1197.72 1215.97 L1198.31 1215.97 L1198.89 1215.97 L1199.48 1215.97 L1200.07 1215.97 L1200.65 1215.97 L1201.24 1215.97 L1201.83 1215.97 L1202.41 1215.97 L1203 1215.97 L1203.58 1215.97 L1204.17 1215.97 L1204.76 1215.97 L1205.34 1215.97 L1205.93 1215.97 L1206.52 1215.97 L1207.1 1215.97 L1207.69 1215.97 L1208.28 1215.97 L1208.86 1215.97 L1209.45 1215.97 L1210.03 1215.97 L1210.62 1215.97 L1211.21 1215.97 L1211.79 1215.97 L1212.38 1215.97 L1212.97 1215.97 L1213.55 1215.97 L1214.14 1215.97 L1214.73 1215.97 L1215.31 1215.97 L1215.9 1215.97 L1216.49 1215.97 L1217.07 1215.97 L1217.66 1215.97 L1218.24 1215.97 L1218.83 1215.97 L1219.42 1215.97 L1220 1215.97 L1220.59 1215.97 L1221.18 1215.97 L1221.76 1215.97 L1222.35 1215.97 L1222.94 1215.97 L1223.52 1215.97 L1224.11 1215.97 L1224.7 1215.97 L1225.28 1215.97 L1225.87 1215.97 L1226.45 1215.97 L1227.04 1215.97 L1227.63 1215.97 L1228.21 1215.97 L1228.8 1215.97 L1229.39 1215.97 L1229.97 1215.97 L1230.56 1215.97 L1231.15 1215.97 L1231.73 1215.97 L1232.32 1215.97 L1232.91 1215.97 L1233.49 1215.97 L1234.08 1215.97 L1234.66 1215.97 L1235.25 1215.97 L1235.84 1215.97 L1236.42 1215.97 L1237.01 1215.97 L1237.6 1215.97 L1238.18 1215.97 L1238.77 1215.97 L1239.36 1215.97 L1239.94 1215.97 L1240.53 1215.97 L1241.11 1215.97 L1241.7 1215.97 L1242.29 1215.97 L1242.87 1215.97 L1243.46 1215.97 L1244.05 1215.97 L1244.63 1215.97 L1245.22 1215.97 L1245.81 1215.97 L1246.39 1215.97 L1246.98 1215.97 L1247.57 1215.97 L1248.15 1215.97 L1248.74 1215.97 L1249.32 1215.97 L1249.91 1215.97 L1250.5 1215.97 L1251.08 1215.97 L1251.67 1215.97 L1252.26 1215.97 L1252.84 1215.97 L1253.43 1215.97 L1254.02 1215.97 L1254.6 1215.97 L1255.19 1215.97 L1255.78 1215.97 L1256.36 1215.97 L1256.95 1215.97 L1257.53 1215.97 L1258.12 1215.97 L1258.71 1215.97 L1259.29 1215.97 L1259.88 1215.97 L1260.47 1215.97 L1261.05 1215.97 L1261.64 1215.97 L1262.23 1215.97 L1262.81 1215.97 L1263.4 1215.97 L1263.98 1215.97 L1264.57 1215.97 L1265.16 1215.97 L1265.74 1215.97 L1266.33 1215.97 L1266.92 1215.97 L1267.5 1215.97 L1268.09 1215.97 L1268.68 1215.97 L1269.26 1215.97 L1269.85 1215.97 L1270.44 1215.97 L1271.02 1215.97 L1271.61 1215.97 L1272.19 1215.97 L1272.78 1215.97 L1273.37 1215.97 L1273.95 1215.97 L1274.54 1215.97 L1275.13 1215.97 L1275.71 1215.97 L1276.3 1215.97 L1276.89 1215.97 L1277.47 1215.97 L1278.06 1215.97 L1278.65 1215.97 L1279.23 1215.97 L1279.82 1215.97 L1280.4 1215.97 L1280.99 1215.97 L1281.58 1215.97 L1282.16 1215.97 L1282.75 1215.97 L1283.34 1215.97 L1283.92 1215.97 L1284.51 1215.97 L1285.1 1215.97 L1285.68 1215.97 L1286.27 1215.97 L1286.86 1215.97 L1287.44 1215.97 L1288.03 1215.97 L1288.61 1215.97 L1289.2 1215.97 L1289.79 1215.97 L1290.37 1215.97 L1290.96 1215.97 L1291.55 1215.97 L1292.13 1215.97 L1292.72 1215.97 L1293.31 1215.97 L1293.89 1215.97 L1294.48 1215.97 L1295.06 1215.97 L1295.65 1215.97 L1296.24 1215.97 L1296.82 1215.97 L1297.41 1215.97 L1298 1215.97 L1298.58 1215.97 L1299.17 1215.97 L1299.76 1215.97 L1300.34 1215.97 L1300.93 1215.97 L1301.52 1215.97 L1302.1 1215.97 L1302.69 1215.97 L1303.27 1215.97 L1303.86 1215.97 L1304.45 1215.97 L1305.03 1215.97 L1305.62 1215.97 L1306.21 1215.97 L1306.79 1215.97 L1307.38 1215.97 L1307.97 1215.97 L1308.55 1215.97 L1309.14 1215.97 L1309.73 1215.97 L1310.31 1215.97 L1310.9 1215.97 L1311.48 1215.97 L1312.07 1215.97 L1312.66 1215.97 L1313.24 1215.97 L1313.83 1215.97 L1314.42 1215.97 L1315 1215.97 L1315.59 1215.97 L1316.18 1215.97 L1316.76 1215.97 L1317.35 1215.97 L1317.93 1215.97 L1318.52 1215.97 L1319.11 1215.97 L1319.69 1215.97 L1320.28 1215.97 L1320.87 1215.97 L1321.45 1215.97 L1322.04 1215.97 L1322.63 1215.97 L1323.21 1215.97 L1323.8 1215.97 L1324.39 1215.97 L1324.97 1215.97 L1325.56 1215.97 L1326.14 1215.97 L1326.73 1215.97 L1327.32 1215.97 L1327.9 1215.97 L1328.49 1215.97 L1329.08 1215.97 L1329.66 1215.97 L1330.25 1215.97 L1330.84 1215.97 L1331.42 1215.97 L1332.01 1215.97 L1332.6 1215.97 L1333.18 1215.97 L1333.77 1215.97 L1334.35 1215.97 L1334.94 1215.97 L1335.53 1215.97 L1336.11 1215.97 L1336.7 1215.97 L1337.29 1215.97 L1337.87 1215.97 L1338.46 1215.97 L1339.05 1215.97 L1339.63 1215.97 L1340.22 1215.97 L1340.8 1215.97 L1341.39 1215.97 L1341.98 1215.97 L1342.56 1215.97 L1343.15 1215.97 L1343.74 1215.97 L1344.32 1215.97 L1344.91 1215.97 L1345.5 1215.97 L1346.08 1215.97 L1346.67 1215.97 L1347.26 1215.97 L1347.84 1215.97 L1348.43 1215.97 L1349.01 1215.97 L1349.6 1215.97 L1350.19 1215.97 L1350.77 1215.97 L1351.36 1215.97 L1351.95 1215.97 L1352.53 1215.97 L1353.12 1215.97 L1353.71 1215.97 L1354.29 1215.97 L1354.88 1215.97 L1355.47 1215.97 L1356.05 1215.97 L1356.64 1215.97 L1357.22 1215.97 L1357.81 1215.97 L1358.4 1215.97 L1358.98 1215.97 L1359.57 1215.97 L1360.16 1215.97 L1360.74 1215.97 L1361.33 1215.97 L1361.92 1215.97 L1362.5 1215.97 L1363.09 1215.97 L1363.68 1215.97 L1364.26 1215.97 L1364.85 1215.97 L1365.43 1215.97 L1366.02 1215.97 L1366.61 1215.97 L1367.19 1215.97 L1367.78 1215.97 L1368.37 1215.97 L1368.95 1215.97 L1369.54 1215.97 L1370.13 1215.97 L1370.71 1215.97 L1371.3 1215.97 L1371.88 1215.97 L1372.47 1215.97 L1373.06 1215.97 L1373.64 1215.97 L1374.23 1215.97 L1374.82 1215.97 L1375.4 1215.97 L1375.99 1215.97 L1376.58 1215.97 L1377.16 1215.97 L1377.75 1215.97 L1378.34 1215.97 L1378.92 1215.97 L1379.51 1215.97 L1380.09 1215.97 L1380.68 1215.97 L1381.27 1215.97 L1381.85 1215.97 L1382.44 1215.97 L1383.03 1215.97 L1383.61 1215.97 L1384.2 1215.97 L1384.79 1215.97 L1385.37 1215.97 L1385.96 1215.97 L1386.55 1215.97 L1387.13 1215.97 L1387.72 1215.97 L1388.3 1215.97 L1388.89 1215.97 L1389.48 1215.97 L1390.06 1215.97 L1390.65 1215.97 L1391.24 1215.97 L1391.82 1215.97 L1392.41 1215.97 L1393 1215.97 L1393.58 1215.97 L1394.17 1215.97 L1394.75 1215.97 L1395.34 1215.97 L1395.93 1215.97 L1396.51 1215.97 L1397.1 1215.97 L1397.69 1215.97 L1398.27 1215.97 L1398.86 1215.97 L1399.45 1215.97 L1400.03 1215.97 L1400.62 1215.97 L1401.21 1215.97 L1401.79 1215.97 L1402.38 1215.97 L1402.96 1215.97 L1403.55 1215.97 L1404.14 1215.97 L1404.72 1215.97 L1405.31 1215.97 L1405.9 1215.97 L1406.48 1215.97 L1407.07 1215.97 L1407.66 1215.97 L1408.24 1215.97 L1408.83 1215.97 L1409.42 1215.97 L1410 1215.97 L1410.59 1215.97 L1411.17 1215.97 L1411.76 1215.97 L1412.35 1215.97 L1412.93 1215.97 L1413.52 1215.97 L1414.11 1215.97 L1414.69 1215.97 L1415.28 1215.97 L1415.87 1215.97 L1416.45 1215.97 L1417.04 1215.97 L1417.63 1215.97 L1418.21 1215.97 L1418.8 1215.97 L1419.38 1215.97 L1419.97 1215.97 L1420.56 1215.97 L1421.14 1215.97 L1421.73 1215.97 L1422.32 1215.97 L1422.9 1215.97 L1423.49 1215.97 L1424.08 1215.97 L1424.66 1215.97 L1425.25 1215.97 L1425.83 1215.97 L1426.42 1215.97 L1427.01 1215.97 L1427.59 1215.97 L1428.18 1215.97 L1428.77 1215.97 L1429.35 1215.97 L1429.94 1215.97 L1430.53 1215.97 L1431.11 1215.97 L1431.7 1215.97 L1432.29 1215.97 L1432.87 1215.97 L1433.46 1215.97 L1434.04 1215.97 L1434.63 1215.97 L1435.22 1215.97 L1435.8 1215.97 L1436.39 1215.97 L1436.98 1215.97 L1437.56 1215.97 L1438.15 1215.97 L1438.74 1215.97 L1439.32 1215.97 L1439.91 1215.97 L1440.5 1215.97 L1441.08 1215.97 L1441.67 1215.97 L1442.25 1215.97 L1442.84 1215.97 L1443.43 1215.97 L1444.01 1215.97 L1444.6 1215.97 L1445.19 1215.97 L1445.77 1215.97 L1446.36 1215.97 L1446.95 1215.97 L1447.53 1215.97 L1448.12 1215.97 L1448.7 1215.97 L1449.29 1215.97 L1449.88 1215.97 L1450.46 1215.97 L1451.05 1215.97 L1451.64 1215.97 L1452.22 1215.97 L1452.81 1215.97 L1453.4 1215.97 L1453.98 1215.97 L1454.57 1215.97 L1455.16 1215.97 L1455.74 1215.97 L1456.33 1215.97 L1456.91 1215.97 L1457.5 1215.97 L1458.09 1215.97 L1458.67 1215.97 L1459.26 1215.97 L1459.85 1215.97 L1460.43 1215.97 L1461.02 1215.97 L1461.61 1215.97 L1462.19 1215.97 L1462.78 1215.97 L1463.37 1215.97 L1463.95 1215.97 L1464.54 1215.97 L1465.12 1215.97 L1465.71 1215.97 L1466.3 1215.97 L1466.88 1215.97 L1467.47 1215.97 L1468.06 1215.97 L1468.64 1215.97 L1469.23 1215.97 L1469.82 1215.97 L1470.4 1215.97 L1470.99 1215.97 L1471.57 1215.97 L1472.16 1215.97 L1472.75 1215.97 L1473.33 1215.97 L1473.92 1215.97 L1474.51 1215.97 L1475.09 1215.97 L1475.68 1215.97 L1476.27 1215.97 L1476.85 1215.97 L1477.44 1215.97 L1478.03 1215.97 L1478.61 1215.97 L1479.2 1215.97 L1479.78 1215.97 L1480.37 1215.97 L1480.96 1215.97 L1481.54 1215.97 L1482.13 1215.97 L1482.72 1215.97 L1483.3 1215.97 L1483.89 1215.97 L1484.48 1215.97 L1485.06 1215.97 L1485.65 1215.97 L1486.24 1215.97 L1486.82 1215.97 L1487.41 1215.97 L1487.99 1215.97 L1488.58 1215.97 L1489.17 1215.97 L1489.75 1215.97 L1490.34 1215.97 L1490.93 1215.97 L1491.51 1215.97 L1492.1 1215.97 L1492.69 1215.97 L1493.27 1215.97 L1493.86 1215.97 L1494.45 1215.97 L1495.03 1215.97 L1495.62 1215.97 L1496.2 1215.97 L1496.79 1215.97 L1497.38 1215.97 L1497.96 1215.97 L1498.55 1215.97 L1499.14 1215.97 L1499.72 1215.97 L1500.31 1215.97 L1500.9 1215.97 L1501.48 1215.97 L1502.07 1215.97 L1502.65 1215.97 L1503.24 1215.97 L1503.83 1215.97 L1504.41 1215.97 L1505 1215.97 L1505.59 1215.97 L1506.17 1215.97 L1506.76 1215.97 L1507.35 1215.97 L1507.93 1215.97 L1508.52 1215.97 L1509.11 1215.97 L1509.69 1215.97 L1510.28 1215.97 L1510.86 1215.97 L1511.45 1215.97 L1512.04 1215.97 L1512.62 1215.97 L1513.21 1215.97 L1513.8 1215.97 L1514.38 1215.97 L1514.97 1215.97 L1515.56 1215.97 L1516.14 1215.97 L1516.73 1215.97 L1517.32 1215.97 L1517.9 1215.97 L1518.49 1215.97 L1519.07 1215.97 L1519.66 1215.97 L1520.25 1215.97 L1520.83 1215.97 L1521.42 1215.97 L1522.01 1215.97 L1522.59 1215.97 L1523.18 1215.97 L1523.77 1215.97 L1524.35 1215.97 L1524.94 1215.97 L1525.52 1215.97 L1526.11 1215.97 L1526.7 1215.97 L1527.28 1215.97 L1527.87 1215.97 L1528.46 1215.97 L1529.04 1215.97 L1529.63 1215.97 L1530.22 1215.97 L1530.8 1215.97 L1531.39 1215.97 L1531.98 1215.97 L1532.56 1215.97 L1533.15 1215.97 L1533.73 1215.97 L1534.32 1215.97 L1534.91 1215.97 L1535.49 1215.97 L1536.08 1215.97 L1536.67 1215.97 L1537.25 1215.97 L1537.84 1215.97 L1538.43 1215.97 L1539.01 1215.97 L1539.6 1215.97 L1540.19 1215.97 L1540.77 1215.97 L1541.36 1215.97 L1541.94 1215.97 L1542.53 1215.97 L1543.12 1215.97 L1543.7 1215.97 L1544.29 1215.97 L1544.88 1215.97 L1545.46 1215.97 L1546.05 1215.97 L1546.64 1215.97 L1547.22 1215.97 L1547.81 1215.97 L1548.4 1215.97 L1548.98 1215.97 L1549.57 1215.97 L1550.15 1215.97 L1550.74 1215.97 L1551.33 1215.97 L1551.91 1215.97 L1552.5 1215.97 L1553.09 1215.97 L1553.67 1215.97 L1554.26 1215.97 L1554.85 1215.97 L1555.43 1215.97 L1556.02 1215.97 L1556.6 1215.97 L1557.19 1215.97 L1557.78 1215.97 L1558.36 1215.97 L1558.95 1215.97 L1559.54 1215.97 L1560.12 1215.97 L1560.71 1215.97 L1561.3 1215.97 L1561.88 1215.97 L1562.47 1215.97 L1563.06 1215.97 L1563.64 1215.97 L1564.23 1215.97 L1564.81 1215.97 L1565.4 1215.97 L1565.99 1215.97 L1566.57 1215.97 L1567.16 1215.97 L1567.75 1215.97 L1568.33 1215.97 L1568.92 1215.97 L1569.51 1215.97 L1570.09 1215.97 L1570.68 1215.97 L1571.27 1215.97 L1571.85 1215.97 L1572.44 1215.97 L1573.02 1215.97 L1573.61 1215.97 L1574.2 1215.97 L1574.78 1215.97 L1575.37 1215.97 L1575.96 1215.97 L1576.54 1215.97 L1577.13 1215.97 L1577.72 1215.97 L1578.3 1215.97 L1578.89 1215.97 L1579.47 1215.97 L1580.06 1215.97 L1580.65 1215.97 L1581.23 1215.97 L1581.82 1215.97 L1582.41 1215.97 L1582.99 1215.97 L1583.58 1215.97 L1584.17 1215.97 L1584.75 1215.97 L1585.34 1215.97 L1585.93 1215.97 L1586.51 1215.97 L1587.1 1215.97 L1587.68 1215.97 L1588.27 1215.97 L1588.86 1215.97 L1589.44 1215.97 L1590.03 1215.97 L1590.62 1215.97 L1591.2 1215.97 L1591.79 1215.97 L1592.38 1215.97 L1592.96 1215.97 L1593.55 1215.97 L1594.14 1215.97 L1594.72 1215.97 L1595.31 1215.97 L1595.89 1215.97 L1596.48 1215.97 L1597.07 1215.97 L1597.65 1215.97 L1598.24 1215.97 L1598.83 1215.97 L1599.41 1215.97 L1600 1215.97 L1600.59 1215.97 L1601.17 1215.97 L1601.76 1215.97 L1602.34 1215.97 L1602.93 1215.97 L1603.52 1215.97 L1604.1 1215.97 L1604.69 1215.97 L1605.28 1215.97 L1605.86 1215.97 L1606.45 1215.97 L1607.04 1215.97 L1607.62 1215.97 L1608.21 1215.97 L1608.8 1215.97 L1609.38 1215.97 L1609.97 1215.97 L1610.55 1215.97 L1611.14 1215.97 L1611.73 1215.97 L1612.31 1215.97 L1612.9 1215.97 L1613.49 1215.97 L1614.07 1215.97 L1614.66 1215.97 L1615.25 1215.97 L1615.83 1215.97 L1616.42 1215.97 L1617.01 1215.97 L1617.59 1215.97 L1618.18 1215.97 L1618.76 1215.97 L1619.35 1215.97 L1619.94 1215.97 L1620.52 1215.97 L1621.11 1215.97 L1621.7 1215.97 L1622.28 1215.97 L1622.87 1215.97 L1623.46 1215.97 L1624.04 1215.97 L1624.63 1215.97 L1625.22 1215.97 L1625.8 1215.97 L1626.39 1215.97 L1626.97 1215.97 L1627.56 1215.97 L1628.15 1215.97 L1628.73 1215.97 L1629.32 1215.97 L1629.91 1215.97 L1630.49 1215.97 L1631.08 1215.97 L1631.67 1215.97 L1632.25 1215.97 L1632.84 1215.97 L1633.42 1215.97 L1634.01 1215.97 L1634.6 1215.97 L1635.18 1215.97 L1635.77 1215.97 L1636.36 1215.97 L1636.94 1215.97 L1637.53 1215.97 L1638.12 1215.97 L1638.7 1215.97 L1639.29 1215.97 L1639.88 1215.97 L1640.46 1215.97 L1641.05 1215.97 L1641.63 1215.97 L1642.22 1215.97 L1642.81 1215.97 L1643.39 1215.97 L1643.98 1215.97 L1644.57 1215.97 L1645.15 1215.97 L1645.74 1215.97 L1646.33 1215.97 L1646.91 1215.97 L1647.5 1215.97 L1648.09 1215.97 L1648.67 1215.97 L1649.26 1215.97 L1649.84 1215.97 L1650.43 1215.97 L1651.02 1215.97 L1651.6 1215.97 L1652.19 1215.97 L1652.78 1215.97 L1653.36 1215.97 L1653.95 1215.97 L1654.54 1215.97 L1655.12 1215.97 L1655.71 1215.97 L1656.29 1215.97 L1656.88 1215.97 L1657.47 1215.97 L1658.05 1215.97 L1658.64 1215.97 L1659.23 1215.97 L1659.81 1215.97 L1660.4 1215.97 L1660.99 1215.97 L1661.57 1215.97 L1662.16 1215.97 L1662.75 1215.97 L1663.33 1215.97 L1663.92 1215.97 L1664.5 1215.97 L1665.09 1215.97 L1665.68 1215.97 L1666.26 1215.97 L1666.85 1215.97 L1667.44 1215.97 L1668.02 1215.97 L1668.61 1215.97 L1669.2 1215.97 L1669.78 1215.97 L1670.37 1215.97 L1670.96 1215.97 L1671.54 1215.97 L1672.13 1215.97 L1672.71 1215.97 L1673.3 1215.97 L1673.89 1215.97 L1674.47 1215.97 L1675.06 1215.97 L1675.65 1215.97 L1676.23 1215.97 L1676.82 1215.97 L1677.41 1215.97 L1677.99 1215.97 L1678.58 1215.97 L1679.17 1215.97 L1679.75 1215.97 L1680.34 1215.97 L1680.92 1215.97 L1681.51 1215.97 L1682.1 1215.97 L1682.68 1215.97 L1683.27 1215.97 L1683.86 1215.97 L1684.44 1215.97 L1685.03 1215.97 L1685.62 1215.97 L1686.2 1215.97 L1686.79 1215.97 L1687.37 1215.97 L1687.96 1215.97 L1688.55 1215.97 L1689.13 1215.97 L1689.72 1215.97 L1690.31 1215.97 L1690.89 1215.97 L1691.48 1215.97 L1692.07 1215.97 L1692.65 1215.97 L1693.24 1215.97 L1693.83 1215.97 L1694.41 1215.97 L1695 1215.97 L1695.58 1215.97 L1696.17 1215.97 L1696.76 1215.97 L1697.34 1215.97 L1697.93 1215.97 L1698.52 1215.97 L1699.1 1215.97 L1699.69 1215.97 L1700.28 1215.97 L1700.86 1215.97 L1701.45 1215.97 L1702.04 1215.97 L1702.62 1215.97 L1703.21 1215.97 L1703.79 1215.97 L1704.38 1215.97 L1704.97 1215.97 L1705.55 1215.97 L1706.14 1215.97 L1706.73 1215.97 L1707.31 1215.97 L1707.9 1215.97 L1708.49 1215.97 L1709.07 1215.97 L1709.66 1215.97 L1710.24 1215.97 L1710.83 1215.97 L1711.42 1215.97 L1712 1215.97 L1712.59 1215.97 L1713.18 1215.97 L1713.76 1215.97 L1714.35 1215.97 L1714.94 1215.97 L1715.52 1215.97 L1716.11 1215.97 L1716.7 1215.97 L1717.28 1215.97 L1717.87 1215.97 L1718.45 1215.97 L1719.04 1215.97 L1719.63 1215.97 L1720.21 1215.97 L1720.8 1215.97 L1721.39 1215.97 L1721.97 1215.97 L1722.56 1215.97 L1723.15 1215.97 L1723.73 1215.97 L1724.32 1215.97 L1724.91 1215.97 L1725.49 1215.97 L1726.08 1215.97 L1726.66 1215.97 L1727.25 1215.97 L1727.84 1215.97 L1728.42 1215.97 L1729.01 1215.97 L1729.6 1215.97 L1730.18 1215.97 L1730.77 1215.97 L1731.36 1215.97 L1731.94 1215.97 L1732.53 1215.97 L1733.11 1215.97 L1733.7 1215.97 L1734.29 1215.97 L1734.87 1215.97 L1735.46 1215.97 L1736.05 1215.97 L1736.63 1215.97 L1737.22 1215.97 L1737.81 1215.97 L1738.39 1215.97 L1738.98 1215.97 L1739.57 1215.97 L1740.15 1215.97 L1740.74 1215.97 L1741.32 1215.97 L1741.91 1215.97 L1742.5 1215.97 L1743.08 1215.97 L1743.67 1215.97 L1744.26 1215.97 L1744.84 1215.97 L1745.43 1215.97 L1746.02 1215.97 L1746.6 1215.97 L1747.19 1215.97 L1747.78 1215.97 L1748.36 1215.97 L1748.95 1215.97 L1749.53 1215.97 L1750.12 1215.97 L1750.71 1215.97 L1751.29 1215.97 L1751.88 1215.97 L1752.47 1215.97 L1753.05 1215.97 L1753.64 1215.97 L1754.23 1215.97 L1754.81 1215.97 L1755.4 1215.97 L1755.99 1215.97 L1756.57 1215.97 L1757.16 1215.97 L1757.74 1215.97 L1758.33 1215.97 L1758.92 1215.97 L1759.5 1215.97 L1760.09 1215.97 L1760.68 1215.97 L1761.26 1215.97 L1761.85 1215.97 L1762.44 1215.97 L1763.02 1215.97 L1763.61 1215.97 L1764.19 1215.97 L1764.78 1215.97 L1765.37 1215.97 L1765.95 1215.97 L1766.54 1215.97 L1767.13 1215.97 L1767.71 1215.97 L1768.3 1215.97 L1768.89 1215.97 L1769.47 1215.97 L1770.06 1215.97 L1770.65 1215.97 L1771.23 1215.97 L1771.82 1215.97 L1772.4 1215.97 L1772.99 1215.97 L1773.58 1215.97 L1774.16 1215.97 L1774.75 1215.97 L1775.34 1215.97 L1775.92 1215.97 L1776.51 1215.97 L1777.1 1215.97 L1777.68 1215.97 L1778.27 1215.97 L1778.86 1215.97 L1779.44 1215.97 L1780.03 1215.97 L1780.61 1215.97 L1781.2 1215.97 L1781.79 1215.97 L1782.37 1215.97 L1782.96 1215.97 L1783.55 1215.97 L1784.13 1215.97 L1784.72 1215.97 L1785.31 1215.97 L1785.89 1215.97 L1786.48 1215.97 L1787.06 1215.97 L1787.65 1215.97 L1788.24 1215.97 L1788.82 1215.97 L1789.41 1215.97 L1790 1215.97 L1790.58 1215.97 L1791.17 1215.97 L1791.76 1215.97 L1792.34 1215.97 L1792.93 1215.97 L1793.52 1215.97 L1794.1 1215.97 L1794.69 1215.97 L1795.27 1215.97 L1795.86 1215.97 L1796.45 1215.97 L1797.03 1215.97 L1797.62 1215.97 L1798.21 1215.97 L1798.79 1215.97 L1799.38 1215.97 L1799.97 1215.97 L1800.55 1215.97 L1801.14 1215.97 L1801.73 1215.97 L1802.31 1215.97 L1802.9 1215.97 L1803.48 1215.97 L1804.07 1215.97 L1804.66 1215.97 L1805.24 1215.97 L1805.83 1215.97 L1806.42 1215.97 L1807 1215.97 L1807.59 1215.97 L1808.18 1215.97 L1808.76 1215.97 L1809.35 1215.97 L1809.94 1215.97 L1810.52 1215.97 L1811.11 1215.97 L1811.69 1215.97 L1812.28 1215.97 L1812.87 1215.97 L1813.45 1215.97 L1814.04 1215.97 L1814.63 1215.97 L1815.21 1215.97 L1815.8 1215.97 L1816.39 1215.97 L1816.97 1215.97 L1817.56 1215.97 L1818.14 1215.97 L1818.73 1215.97 L1819.32 1215.97 L1819.9 1215.97 L1820.49 1215.97 L1821.08 1215.97 L1821.66 1215.97 L1822.25 1215.97 L1822.84 1215.97 L1823.42 1215.97 L1824.01 1215.97 L1824.6 1215.97 L1825.18 1215.97 L1825.77 1215.97 L1826.35 1215.97 L1826.94 1215.97 L1827.53 1215.97 L1828.11 1215.97 L1828.7 1215.97 L1829.29 1215.97 L1829.87 1215.97 L1830.46 1215.97 L1831.05 1215.97 L1831.63 1215.97 L1832.22 1215.97 L1832.81 1215.97 L1833.39 1215.97 L1833.98 1215.97 L1834.56 1215.97 L1835.15 1215.97 L1835.74 1215.97 L1836.32 1215.97 L1836.91 1215.97 L1837.5 1215.97 L1838.08 1215.97 L1838.67 1215.97 L1839.26 1215.97 L1839.84 1215.97 L1840.43 1215.97 L1841.01 1215.97 L1841.6 1215.97 L1842.19 1215.97 L1842.77 1215.97 L1843.36 1215.97 L1843.95 1215.97 L1844.53 1215.97 L1845.12 1215.97 L1845.71 1215.97 L1846.29 1215.97 L1846.88 1215.97 L1847.47 1215.97 L1848.05 1215.97 L1848.64 1215.97 L1849.22 1215.97 L1849.81 1215.97 L1850.4 1215.97 L1850.98 1215.97 L1851.57 1215.97 L1852.16 1215.97 L1852.74 1215.97 L1853.33 1215.97 L1853.92 1215.97 L1854.5 1215.97 L1855.09 1215.97 L1855.68 1215.97 L1856.26 1215.97 L1856.85 1215.97 L1857.43 1215.97 L1858.02 1215.97 L1858.61 1215.97 L1859.19 1215.97 L1859.78 1215.97 L1860.37 1215.97 L1860.95 1215.97 L1861.54 1215.97 L1862.13 1215.97 L1862.71 1215.97 L1863.3 1215.97 L1863.88 1215.97 L1864.47 1215.97 L1865.06 1215.97 L1865.64 1215.97 L1866.23 1215.97 L1866.82 1215.97 L1867.4 1215.97 L1867.99 1215.97 L1868.58 1215.97 L1869.16 1215.97 L1869.75 1215.97 L1870.34 1215.97 L1870.92 1215.97 L1871.51 1215.97 L1872.09 1215.97 L1872.68 1215.97 L1873.27 1215.97 L1873.85 1215.97 L1874.44 1215.97 L1875.03 1215.97 L1875.61 1215.97 L1876.2 1215.97 L1876.79 1215.97 L1877.37 1215.97 L1877.96 1215.97 L1878.55 1215.97 L1879.13 1215.97 L1879.72 1215.97 L1880.3 1215.97 L1880.89 1215.97 L1881.48 1215.97 L1882.06 1215.97 L1882.65 1215.97 L1883.24 1215.97 L1883.82 1215.97 L1884.41 1215.97 L1885 1215.97 L1885.58 1215.97 L1886.17 1215.97 L1886.76 1215.97 L1887.34 1215.97 L1887.93 1215.97 L1888.51 1215.97 L1889.1 1215.97 L1889.69 1215.97 L1890.27 1215.97 L1890.86 1215.97 L1891.45 1215.97 L1892.03 1215.97 L1892.62 1215.97 L1893.21 1215.97 L1893.79 1215.97 L1894.38 1215.97 L1894.96 1215.97 L1895.55 1215.97 L1896.14 1215.97 L1896.72 1215.97 L1897.31 1215.97 L1897.9 1215.97 L1898.48 1215.97 L1899.07 1215.97 L1899.66 1215.97 L1900.24 1215.97 L1900.83 1215.97 L1901.42 1215.97 L1902 1215.97 L1902.59 1215.97 L1903.17 1215.97 L1903.76 1215.97 L1904.35 1215.97 L1904.93 1215.97 L1905.52 1215.97 L1906.11 1215.97 L1906.69 1215.97 L1907.28 1215.97 L1907.87 1215.97 L1908.45 1215.97 L1909.04 1215.97 L1909.63 1215.97 L1910.21 1215.97 L1910.8 1215.97 L1911.38 1215.97 L1911.97 1215.97 L1912.56 1215.97 L1913.14 1215.97 L1913.73 1215.97 L1914.32 1215.97 L1914.9 1215.97 L1915.49 1215.97 L1916.08 1215.97 L1916.66 1215.97 L1917.25 1215.97 L1917.83 1215.97 L1918.42 1215.97 L1919.01 1215.97 L1919.59 1215.97 L1920.18 1215.97 L1920.77 1215.97 L1921.35 1215.97 L1921.94 1215.97 L1922.53 1215.97 L1923.11 1215.97 L1923.7 1215.97 L1924.29 1215.97 L1924.87 1215.97 L1925.46 1215.97 L1926.04 1215.97 L1926.63 1215.97 L1927.22 1215.97 L1927.8 1215.97 L1928.39 1215.97 L1928.98 1215.97 L1929.56 1215.97 L1930.15 1215.97 L1930.74 1215.97 L1931.32 1215.97 L1931.91 1215.97 L1932.5 1215.97 L1933.08 1215.97 L1933.67 1215.97 L1934.25 1215.97 L1934.84 1215.97 L1935.43 1215.97 L1936.01 1215.97 L1936.6 1215.97 L1937.19 1215.97 L1937.77 1215.97 L1938.36 1215.97 L1938.95 1215.97 L1939.53 1215.97 L1940.12 1215.97 L1940.71 1215.97 L1941.29 1215.97 L1941.88 1215.97 L1942.46 1215.97 L1943.05 1215.97 L1943.64 1215.97 L1944.22 1215.97 L1944.81 1215.97 L1945.4 1215.97 L1945.98 1215.97 L1946.57 1215.97 L1947.16 1215.97 L1947.74 1215.97 L1948.33 1215.97 L1948.91 1215.97 L1949.5 1215.97 L1950.09 1215.97 L1950.67 1215.97 L1951.26 1215.97 L1951.85 1215.97 L1952.43 1215.97 L1953.02 1215.97 L1953.61 1215.97 L1954.19 1215.97 L1954.78 1215.97 L1955.37 1215.97 L1955.95 1215.97 L1956.54 1215.97 L1957.12 1215.97 L1957.71 1215.97 L1958.3 1215.97 L1958.88 1215.97 L1959.47 1215.97 L1960.06 1215.97 L1960.64 1215.97 L1961.23 1215.97 L1961.82 1215.97 L1962.4 1215.97 L1962.99 1215.97 L1963.58 1215.97 L1964.16 1215.97 L1964.75 1215.97 L1965.33 1215.97 L1965.92 1215.97 L1966.51 1215.97 L1967.09 1215.97 L1967.68 1215.97 L1968.27 1215.97 L1968.85 1215.97 L1969.44 1215.97 L1970.03 1215.97 L1970.61 1215.97 L1971.2 1215.97 L1971.78 1215.97 L1972.37 1215.97 L1972.96 1215.97 L1973.54 1215.97 L1974.13 1215.97 L1974.72 1215.97 L1975.3 1215.97 L1975.89 1215.97 L1976.48 1215.97 L1977.06 1215.97 L1977.65 1215.97 L1978.24 1215.97 L1978.82 1215.97 L1979.41 1215.97 L1979.99 1215.97 L1980.58 1215.97 L1981.17 1215.97 L1981.75 1215.97 L1982.34 1215.97 L1982.93 1215.97 L1983.51 1215.97 L1984.1 1215.97 L1984.69 1215.97 L1985.27 1215.97 L1985.86 1215.97 L1986.45 1215.97 L1987.03 1215.97 L1987.62 1215.97 L1988.2 1215.97 L1988.79 1215.97 L1989.38 1215.97 L1989.96 1215.97 L1990.55 1215.97 L1991.14 1215.97 L1991.72 1215.97 L1992.31 1215.97 L1992.9 1215.97 L1993.48 1215.97 L1994.07 1215.97 L1994.65 1215.97 L1995.24 1215.97 L1995.83 1215.97 L1996.41 1215.97 L1997 1215.97 L1997.59 1215.97 L1998.17 1215.97 L1998.76 1215.97 L1999.35 1215.97 L1999.93 1215.97 L2000.52 1215.97 L2001.11 1215.97 L2001.69 1215.97 L2002.28 1215.97 L2002.86 1215.97 L2003.45 1215.97 L2004.04 1215.97 L2004.62 1215.97 L2005.21 1215.97 L2005.8 1215.97 L2006.38 1215.97 L2006.97 1215.97 L2007.56 1215.97 L2008.14 1215.97 L2008.73 1215.97 L2009.32 1215.97 L2009.9 1215.97 L2010.49 1215.97 L2011.07 1215.97 L2011.66 1215.97 L2012.25 1215.97 L2012.83 1215.97 L2013.42 1215.97 L2014.01 1215.97 L2014.59 1215.97 L2015.18 1215.97 L2015.77 1215.97 L2016.35 1215.97 L2016.94 1215.97 L2017.53 1215.97 L2018.11 1215.97 L2018.7 1215.97 L2019.28 1215.97 L2019.87 1215.97 L2020.46 1215.97 L2021.04 1215.97 L2021.63 1215.97 L2022.22 1215.97 L2022.8 1215.97 L2023.39 1215.97 L2023.98 1215.97 L2024.56 1215.97 L2025.15 1215.97 L2025.73 1215.97 L2026.32 1215.97 L2026.91 1215.97 L2027.49 1215.97 L2028.08 1215.97 L2028.67 1215.97 L2029.25 1215.97 L2029.84 1215.97 L2030.43 1215.97 L2031.01 1215.97 L2031.6 1215.97 L2032.19 1215.97 L2032.77 1215.97 L2033.36 1215.97 L2033.94 1215.97 L2034.53 1215.97 L2035.12 1215.97 L2035.7 1215.97 L2036.29 1215.97 L2036.88 1215.97 L2037.46 1215.97 L2038.05 1215.97 L2038.64 1215.97 L2039.22 1215.97 L2039.81 1215.97 L2040.4 1215.97 L2040.98 1215.97 L2041.57 1215.97 L2042.15 1215.97 L2042.74 1215.97 L2043.33 1215.97 L2043.91 1215.97 L2044.5 1215.97 L2045.09 1215.97 L2045.67 1215.97 L2046.26 1215.97 L2046.85 1215.97 L2047.43 1215.97 L2048.02 1215.97 L2048.6 1215.97 L2049.19 1215.97 L2049.78 1215.97 L2050.36 1215.97 L2050.95 1215.97 L2051.54 1215.97 L2052.12 1215.97 L2052.71 1215.97 L2053.3 1215.97 L2053.88 1215.97 L2054.47 1215.97 L2055.06 1215.97 L2055.64 1215.97 L2056.23 1215.97 L2056.81 1215.97 L2057.4 1215.97 L2057.99 1215.97 L2058.57 1215.97 L2059.16 1215.97 L2059.75 1215.97 L2060.33 1215.97 L2060.92 1215.97 L2061.51 1215.97 L2062.09 1215.97 L2062.68 1215.97 L2063.27 1215.97 L2063.85 1215.97 L2064.44 1215.97 L2065.02 1215.97 L2065.61 1215.97 L2066.2 1215.97 L2066.78 1215.97 L2067.37 1215.97 L2067.96 1215.97 L2068.54 1215.97 L2069.13 1215.97 L2069.72 1215.97 L2070.3 1215.97 L2070.89 1215.97 L2071.48 1215.97 L2072.06 1215.97 L2072.65 1215.97 L2073.23 1215.97 L2073.82 1215.97 L2074.41 1215.97 L2074.99 1215.97 L2075.58 1215.97 L2076.17 1215.97 L2076.75 1215.97 L2077.34 1215.97 L2077.93 1215.97 L2078.51 1215.97 L2079.1 1215.97 L2079.68 1215.97 L2080.27 1215.97 L2080.86 1215.97 L2081.44 1215.97 L2082.03 1215.97 L2082.62 1215.97 L2083.2 1215.97 L2083.79 1215.97 L2084.38 1215.97 L2084.96 1215.97 L2085.55 1215.97 L2086.14 1215.97 L2086.72 1215.97 L2087.31 1215.97 L2087.89 1215.97 L2088.48 1215.97 L2089.07 1215.97 L2089.65 1215.97 L2090.24 1215.97 L2090.83 1215.97 L2091.41 1215.97 L2092 1215.97 L2092.59 1215.97 L2093.17 1215.97 L2093.76 1215.97 L2094.35 1215.97 L2094.93 1215.97 L2095.52 1215.97 L2096.1 1215.97 L2096.69 1215.97 L2097.28 1215.97 L2097.86 1215.97 L2098.45 1215.97 L2099.04 1215.97 L2099.62 1215.97 L2100.21 1215.97 L2100.8 1215.97 L2101.38 1215.97 L2101.97 1215.97 L2102.55 1215.97 L2103.14 1215.97 L2103.73 1215.97 L2104.31 1215.97 L2104.9 1215.97 L2105.49 1215.97 L2106.07 1215.97 L2106.66 1215.97 L2107.25 1215.97 L2107.83 1215.97 L2108.42 1215.97 L2109.01 1215.97 L2109.59 1215.97 L2110.18 1215.97 L2110.76 1215.97 L2111.35 1215.97 L2111.94 1215.97 L2112.52 1215.97 L2113.11 1215.97 L2113.7 1215.97 L2114.28 1215.97 L2114.87 1215.97 L2115.46 1215.97 L2116.04 1215.97 L2116.63 1215.97 L2117.22 1215.97 L2117.8 1215.97 L2118.39 1215.97 L2118.97 1215.97 L2119.56 1215.97 L2120.15 1215.97 L2120.73 1215.97 L2121.32 1215.97 L2121.91 1215.97 L2122.49 1215.97 L2123.08 1215.97 L2123.67 1215.97 L2124.25 1215.97 L2124.84 1215.97 L2125.42 1215.97 L2126.01 1215.97 L2126.6 1215.97 L2127.18 1215.97 L2127.77 1215.97 L2128.36 1215.97 L2128.94 1215.97 L2129.53 1215.97 L2130.12 1215.97 L2130.7 1215.97 L2131.29 1215.97 L2131.88 1215.97 L2132.46 1215.97 L2133.05 1215.97 L2133.63 1215.97 L2134.22 1215.97 L2134.81 1215.97 L2135.39 1215.97 L2135.98 1215.97 L2136.57 1215.97 L2137.15 1215.97 L2137.74 1215.97 L2138.33 1215.97 L2138.91 1215.97 L2139.5 1215.97 L2140.09 1215.97 L2140.67 1215.97 L2141.26 1215.97 L2141.84 1215.97 L2142.43 1215.97 L2143.02 1215.97 L2143.6 1215.97 L2144.19 1215.97 L2144.78 1215.97 L2145.36 1215.97 L2145.95 1215.97 L2146.54 1215.97 L2147.12 1215.97 L2147.71 1215.97 L2148.3 1215.97 L2148.88 1215.97 L2149.47 1215.97 L2150.05 1215.97 L2150.64 1215.97 L2151.23 1215.97 L2151.81 1215.97 L2152.4 1215.97 L2152.99 1215.97 L2153.57 1215.97 L2154.16 1215.97 L2154.75 1215.97 L2155.33 1215.97 L2155.92 1215.97 L2156.5 1215.97 L2157.09 1215.97 L2157.68 1215.97 L2158.26 1215.97 L2158.26 1215.78 L2157.68 1215.78 L2157.09 1215.78 L2156.5 1215.78 L2155.92 1215.78 L2155.33 1215.78 L2154.75 1215.78 L2154.16 1215.78 L2153.57 1215.78 L2152.99 1215.78 L2152.4 1215.78 L2151.81 1215.78 L2151.23 1215.78 L2150.64 1215.78 L2150.05 1215.78 L2149.47 1215.78 L2148.88 1215.78 L2148.3 1215.78 L2147.71 1215.78 L2147.12 1215.78 L2146.54 1215.78 L2145.95 1215.78 L2145.36 1215.78 L2144.78 1215.78 L2144.19 1215.78 L2143.6 1215.78 L2143.02 1215.78 L2142.43 1215.78 L2141.84 1215.78 L2141.26 1215.78 L2140.67 1215.78 L2140.09 1215.78 L2139.5 1215.78 L2138.91 1215.78 L2138.33 1215.78 L2137.74 1215.78 L2137.15 1215.78 L2136.57 1215.78 L2135.98 1215.78 L2135.39 1215.78 L2134.81 1215.78 L2134.22 1215.78 L2133.63 1215.78 L2133.05 1215.78 L2132.46 1215.78 L2131.88 1215.78 L2131.29 1215.78 L2130.7 1215.78 L2130.12 1215.78 L2129.53 1215.78 L2128.94 1215.78 L2128.36 1215.78 L2127.77 1215.78 L2127.18 1215.78 L2126.6 1215.78 L2126.01 1215.78 L2125.42 1215.78 L2124.84 1215.78 L2124.25 1215.78 L2123.67 1215.78 L2123.08 1215.78 L2122.49 1215.78 L2121.91 1215.78 L2121.32 1215.78 L2120.73 1215.78 L2120.15 1215.78 L2119.56 1215.78 L2118.97 1215.78 L2118.39 1215.78 L2117.8 1215.78 L2117.22 1215.78 L2116.63 1215.78 L2116.04 1215.78 L2115.46 1215.78 L2114.87 1215.78 L2114.28 1215.78 L2113.7 1215.78 L2113.11 1215.78 L2112.52 1215.78 L2111.94 1215.78 L2111.35 1215.78 L2110.76 1215.78 L2110.18 1215.78 L2109.59 1215.78 L2109.01 1215.78 L2108.42 1215.78 L2107.83 1215.78 L2107.25 1215.78 L2106.66 1215.78 L2106.07 1215.78 L2105.49 1215.78 L2104.9 1215.78 L2104.31 1215.78 L2103.73 1215.78 L2103.14 1215.78 L2102.55 1215.78 L2101.97 1215.78 L2101.38 1215.78 L2100.8 1215.78 L2100.21 1215.78 L2099.62 1215.78 L2099.04 1215.78 L2098.45 1215.78 L2097.86 1215.78 L2097.28 1215.78 L2096.69 1215.78 L2096.1 1215.78 L2095.52 1215.78 L2094.93 1215.78 L2094.35 1215.78 L2093.76 1215.78 L2093.17 1215.78 L2092.59 1215.78 L2092 1215.78 L2091.41 1215.78 L2090.83 1215.78 L2090.24 1215.78 L2089.65 1215.78 L2089.07 1215.78 L2088.48 1215.78 L2087.89 1215.78 L2087.31 1215.78 L2086.72 1215.78 L2086.14 1215.78 L2085.55 1215.78 L2084.96 1215.78 L2084.38 1215.78 L2083.79 1215.78 L2083.2 1215.78 L2082.62 1215.78 L2082.03 1215.78 L2081.44 1215.78 L2080.86 1215.78 L2080.27 1215.78 L2079.68 1215.78 L2079.1 1215.78 L2078.51 1215.78 L2077.93 1215.78 L2077.34 1215.78 L2076.75 1215.78 L2076.17 1215.78 L2075.58 1215.78 L2074.99 1215.78 L2074.41 1215.78 L2073.82 1215.78 L2073.23 1215.78 L2072.65 1215.78 L2072.06 1215.78 L2071.48 1215.78 L2070.89 1215.78 L2070.3 1215.78 L2069.72 1215.78 L2069.13 1215.78 L2068.54 1215.78 L2067.96 1215.78 L2067.37 1215.78 L2066.78 1215.78 L2066.2 1215.78 L2065.61 1215.78 L2065.02 1215.78 L2064.44 1215.78 L2063.85 1215.78 L2063.27 1215.78 L2062.68 1215.78 L2062.09 1215.78 L2061.51 1215.78 L2060.92 1215.78 L2060.33 1215.78 L2059.75 1215.78 L2059.16 1215.78 L2058.57 1215.78 L2057.99 1215.78 L2057.4 1215.78 L2056.81 1215.78 L2056.23 1215.78 L2055.64 1215.78 L2055.06 1215.78 L2054.47 1215.78 L2053.88 1215.78 L2053.3 1215.78 L2052.71 1215.78 L2052.12 1215.78 L2051.54 1215.78 L2050.95 1215.78 L2050.36 1215.78 L2049.78 1215.78 L2049.19 1215.78 L2048.6 1215.78 L2048.02 1215.78 L2047.43 1215.78 L2046.85 1215.78 L2046.26 1215.78 L2045.67 1215.78 L2045.09 1215.78 L2044.5 1215.78 L2043.91 1215.78 L2043.33 1215.78 L2042.74 1215.78 L2042.15 1215.78 L2041.57 1215.78 L2040.98 1215.78 L2040.4 1215.78 L2039.81 1215.78 L2039.22 1215.78 L2038.64 1215.78 L2038.05 1215.78 L2037.46 1215.78 L2036.88 1215.78 L2036.29 1215.78 L2035.7 1215.78 L2035.12 1215.78 L2034.53 1215.78 L2033.94 1215.78 L2033.36 1215.78 L2032.77 1215.78 L2032.19 1215.78 L2031.6 1215.78 L2031.01 1215.78 L2030.43 1215.78 L2029.84 1215.78 L2029.25 1215.78 L2028.67 1215.78 L2028.08 1215.78 L2027.49 1215.78 L2026.91 1215.78 L2026.32 1215.78 L2025.73 1215.78 L2025.15 1215.78 L2024.56 1215.78 L2023.98 1215.78 L2023.39 1215.78 L2022.8 1215.78 L2022.22 1215.78 L2021.63 1215.78 L2021.04 1215.78 L2020.46 1215.78 L2019.87 1215.78 L2019.28 1215.78 L2018.7 1215.78 L2018.11 1215.78 L2017.53 1215.78 L2016.94 1215.78 L2016.35 1215.78 L2015.77 1215.78 L2015.18 1215.78 L2014.59 1215.78 L2014.01 1215.78 L2013.42 1215.78 L2012.83 1215.78 L2012.25 1215.78 L2011.66 1215.78 L2011.07 1215.78 L2010.49 1215.78 L2009.9 1215.78 L2009.32 1215.78 L2008.73 1215.78 L2008.14 1215.78 L2007.56 1215.78 L2006.97 1215.78 L2006.38 1215.78 L2005.8 1215.78 L2005.21 1215.78 L2004.62 1215.78 L2004.04 1215.78 L2003.45 1215.78 L2002.86 1215.78 L2002.28 1215.78 L2001.69 1215.78 L2001.11 1215.78 L2000.52 1215.78 L1999.93 1215.78 L1999.35 1215.78 L1998.76 1215.78 L1998.17 1215.78 L1997.59 1215.78 L1997 1215.78 L1996.41 1215.78 L1995.83 1215.78 L1995.24 1215.78 L1994.65 1215.78 L1994.07 1215.78 L1993.48 1215.78 L1992.9 1215.78 L1992.31 1215.78 L1991.72 1215.78 L1991.14 1215.78 L1990.55 1215.78 L1989.96 1215.78 L1989.38 1215.78 L1988.79 1215.78 L1988.2 1215.78 L1987.62 1215.78 L1987.03 1215.78 L1986.45 1215.78 L1985.86 1215.78 L1985.27 1215.78 L1984.69 1215.78 L1984.1 1215.78 L1983.51 1215.78 L1982.93 1215.78 L1982.34 1215.78 L1981.75 1215.78 L1981.17 1215.78 L1980.58 1215.78 L1979.99 1215.78 L1979.41 1215.78 L1978.82 1215.78 L1978.24 1215.78 L1977.65 1215.78 L1977.06 1215.78 L1976.48 1215.78 L1975.89 1215.78 L1975.3 1215.78 L1974.72 1215.78 L1974.13 1215.78 L1973.54 1215.78 L1972.96 1215.78 L1972.37 1215.78 L1971.78 1215.78 L1971.2 1215.78 L1970.61 1215.78 L1970.03 1215.78 L1969.44 1215.78 L1968.85 1215.78 L1968.27 1215.78 L1967.68 1215.78 L1967.09 1215.78 L1966.51 1215.78 L1965.92 1215.78 L1965.33 1215.78 L1964.75 1215.78 L1964.16 1215.78 L1963.58 1215.78 L1962.99 1215.78 L1962.4 1215.78 L1961.82 1215.78 L1961.23 1215.78 L1960.64 1215.78 L1960.06 1215.78 L1959.47 1215.78 L1958.88 1215.78 L1958.3 1215.78 L1957.71 1215.78 L1957.12 1215.78 L1956.54 1215.78 L1955.95 1215.78 L1955.37 1215.78 L1954.78 1215.78 L1954.19 1215.78 L1953.61 1215.78 L1953.02 1215.78 L1952.43 1215.78 L1951.85 1215.78 L1951.26 1215.78 L1950.67 1215.78 L1950.09 1215.78 L1949.5 1215.78 L1948.91 1215.78 L1948.33 1215.78 L1947.74 1215.78 L1947.16 1215.78 L1946.57 1215.78 L1945.98 1215.78 L1945.4 1215.78 L1944.81 1215.78 L1944.22 1215.78 L1943.64 1215.78 L1943.05 1215.78 L1942.46 1215.78 L1941.88 1215.78 L1941.29 1215.78 L1940.71 1215.78 L1940.12 1215.78 L1939.53 1215.78 L1938.95 1215.78 L1938.36 1215.78 L1937.77 1215.78 L1937.19 1215.78 L1936.6 1215.78 L1936.01 1215.78 L1935.43 1215.78 L1934.84 1215.78 L1934.25 1215.78 L1933.67 1215.78 L1933.08 1215.78 L1932.5 1215.78 L1931.91 1215.78 L1931.32 1215.78 L1930.74 1215.78 L1930.15 1215.78 L1929.56 1215.78 L1928.98 1215.78 L1928.39 1215.78 L1927.8 1215.78 L1927.22 1215.78 L1926.63 1215.78 L1926.04 1215.78 L1925.46 1215.78 L1924.87 1215.78 L1924.29 1215.78 L1923.7 1215.78 L1923.11 1215.78 L1922.53 1215.78 L1921.94 1215.78 L1921.35 1215.78 L1920.77 1215.78 L1920.18 1215.78 L1919.59 1215.78 L1919.01 1215.78 L1918.42 1215.78 L1917.83 1215.78 L1917.25 1215.78 L1916.66 1215.78 L1916.08 1215.78 L1915.49 1215.78 L1914.9 1215.78 L1914.32 1215.78 L1913.73 1215.78 L1913.14 1215.78 L1912.56 1215.78 L1911.97 1215.78 L1911.38 1215.78 L1910.8 1215.78 L1910.21 1215.78 L1909.63 1215.78 L1909.04 1215.78 L1908.45 1215.78 L1907.87 1215.78 L1907.28 1215.78 L1906.69 1215.78 L1906.11 1215.78 L1905.52 1215.78 L1904.93 1215.78 L1904.35 1215.78 L1903.76 1215.78 L1903.17 1215.78 L1902.59 1215.78 L1902 1215.78 L1901.42 1215.78 L1900.83 1215.78 L1900.24 1215.78 L1899.66 1215.78 L1899.07 1215.78 L1898.48 1215.78 L1897.9 1215.78 L1897.31 1215.78 L1896.72 1215.78 L1896.14 1215.78 L1895.55 1215.78 L1894.96 1215.78 L1894.38 1215.78 L1893.79 1215.78 L1893.21 1215.78 L1892.62 1215.78 L1892.03 1215.78 L1891.45 1215.78 L1890.86 1215.78 L1890.27 1215.78 L1889.69 1215.78 L1889.1 1215.78 L1888.51 1215.78 L1887.93 1215.78 L1887.34 1215.78 L1886.76 1215.78 L1886.17 1215.78 L1885.58 1215.78 L1885 1215.78 L1884.41 1215.78 L1883.82 1215.78 L1883.24 1215.78 L1882.65 1215.78 L1882.06 1215.78 L1881.48 1215.78 L1880.89 1215.78 L1880.3 1215.78 L1879.72 1215.78 L1879.13 1215.78 L1878.55 1215.78 L1877.96 1215.78 L1877.37 1215.78 L1876.79 1215.78 L1876.2 1215.78 L1875.61 1215.78 L1875.03 1215.78 L1874.44 1215.78 L1873.85 1215.78 L1873.27 1215.78 L1872.68 1215.78 L1872.09 1215.78 L1871.51 1215.78 L1870.92 1215.78 L1870.34 1215.78 L1869.75 1215.78 L1869.16 1215.78 L1868.58 1215.78 L1867.99 1215.78 L1867.4 1215.78 L1866.82 1215.78 L1866.23 1215.78 L1865.64 1215.78 L1865.06 1215.78 L1864.47 1215.78 L1863.88 1215.78 L1863.3 1215.78 L1862.71 1215.78 L1862.13 1215.78 L1861.54 1215.78 L1860.95 1215.78 L1860.37 1215.78 L1859.78 1215.78 L1859.19 1215.78 L1858.61 1215.78 L1858.02 1215.78 L1857.43 1215.78 L1856.85 1215.78 L1856.26 1215.78 L1855.68 1215.78 L1855.09 1215.78 L1854.5 1215.78 L1853.92 1215.78 L1853.33 1215.78 L1852.74 1215.78 L1852.16 1215.78 L1851.57 1215.78 L1850.98 1215.78 L1850.4 1215.78 L1849.81 1215.78 L1849.22 1215.78 L1848.64 1215.78 L1848.05 1215.78 L1847.47 1215.78 L1846.88 1215.78 L1846.29 1215.78 L1845.71 1215.78 L1845.12 1215.78 L1844.53 1215.78 L1843.95 1215.78 L1843.36 1215.78 L1842.77 1215.78 L1842.19 1215.78 L1841.6 1215.78 L1841.01 1215.78 L1840.43 1215.78 L1839.84 1215.78 L1839.26 1215.78 L1838.67 1215.78 L1838.08 1215.78 L1837.5 1215.78 L1836.91 1215.78 L1836.32 1215.78 L1835.74 1215.78 L1835.15 1215.78 L1834.56 1215.78 L1833.98 1215.78 L1833.39 1215.78 L1832.81 1215.78 L1832.22 1215.78 L1831.63 1215.78 L1831.05 1215.78 L1830.46 1215.78 L1829.87 1215.78 L1829.29 1215.78 L1828.7 1215.78 L1828.11 1215.78 L1827.53 1215.78 L1826.94 1215.78 L1826.35 1215.78 L1825.77 1215.78 L1825.18 1215.78 L1824.6 1215.78 L1824.01 1215.78 L1823.42 1215.78 L1822.84 1215.78 L1822.25 1215.78 L1821.66 1215.78 L1821.08 1215.78 L1820.49 1215.78 L1819.9 1215.78 L1819.32 1215.78 L1818.73 1215.78 L1818.14 1215.78 L1817.56 1215.78 L1816.97 1215.78 L1816.39 1215.78 L1815.8 1215.78 L1815.21 1215.78 L1814.63 1215.78 L1814.04 1215.78 L1813.45 1215.78 L1812.87 1215.78 L1812.28 1215.78 L1811.69 1215.78 L1811.11 1215.78 L1810.52 1215.78 L1809.94 1215.78 L1809.35 1215.78 L1808.76 1215.78 L1808.18 1215.78 L1807.59 1215.78 L1807 1215.78 L1806.42 1215.78 L1805.83 1215.78 L1805.24 1215.78 L1804.66 1215.78 L1804.07 1215.78 L1803.48 1215.78 L1802.9 1215.78 L1802.31 1215.78 L1801.73 1215.78 L1801.14 1215.78 L1800.55 1215.78 L1799.97 1215.78 L1799.38 1215.78 L1798.79 1215.78 L1798.21 1215.78 L1797.62 1215.78 L1797.03 1215.78 L1796.45 1215.78 L1795.86 1215.78 L1795.27 1215.78 L1794.69 1215.78 L1794.1 1215.78 L1793.52 1215.78 L1792.93 1215.78 L1792.34 1215.78 L1791.76 1215.78 L1791.17 1215.78 L1790.58 1215.78 L1790 1215.78 L1789.41 1215.78 L1788.82 1215.78 L1788.24 1215.78 L1787.65 1215.78 L1787.06 1215.78 L1786.48 1215.78 L1785.89 1215.78 L1785.31 1215.78 L1784.72 1215.78 L1784.13 1215.78 L1783.55 1215.78 L1782.96 1215.78 L1782.37 1215.78 L1781.79 1215.78 L1781.2 1215.78 L1780.61 1215.78 L1780.03 1215.78 L1779.44 1215.78 L1778.86 1215.78 L1778.27 1215.78 L1777.68 1215.78 L1777.1 1215.78 L1776.51 1215.78 L1775.92 1215.78 L1775.34 1215.78 L1774.75 1215.78 L1774.16 1215.78 L1773.58 1215.78 L1772.99 1215.78 L1772.4 1215.78 L1771.82 1215.78 L1771.23 1215.78 L1770.65 1215.78 L1770.06 1215.78 L1769.47 1215.78 L1768.89 1215.78 L1768.3 1215.78 L1767.71 1215.78 L1767.13 1215.78 L1766.54 1215.78 L1765.95 1215.78 L1765.37 1215.78 L1764.78 1215.78 L1764.19 1215.78 L1763.61 1215.78 L1763.02 1215.78 L1762.44 1215.78 L1761.85 1215.78 L1761.26 1215.78 L1760.68 1215.78 L1760.09 1215.78 L1759.5 1215.78 L1758.92 1215.78 L1758.33 1215.78 L1757.74 1215.78 L1757.16 1215.78 L1756.57 1215.78 L1755.99 1215.78 L1755.4 1215.78 L1754.81 1215.78 L1754.23 1215.78 L1753.64 1215.78 L1753.05 1215.78 L1752.47 1215.78 L1751.88 1215.78 L1751.29 1215.78 L1750.71 1215.78 L1750.12 1215.78 L1749.53 1215.78 L1748.95 1215.78 L1748.36 1215.78 L1747.78 1215.78 L1747.19 1215.78 L1746.6 1215.78 L1746.02 1215.78 L1745.43 1215.78 L1744.84 1215.78 L1744.26 1215.78 L1743.67 1215.78 L1743.08 1215.78 L1742.5 1215.78 L1741.91 1215.78 L1741.32 1215.78 L1740.74 1215.78 L1740.15 1215.78 L1739.57 1215.78 L1738.98 1215.78 L1738.39 1215.78 L1737.81 1215.78 L1737.22 1215.78 L1736.63 1215.78 L1736.05 1215.78 L1735.46 1215.78 L1734.87 1215.78 L1734.29 1215.78 L1733.7 1215.78 L1733.11 1215.78 L1732.53 1215.78 L1731.94 1215.78 L1731.36 1215.78 L1730.77 1215.78 L1730.18 1215.78 L1729.6 1215.78 L1729.01 1215.78 L1728.42 1215.78 L1727.84 1215.78 L1727.25 1215.78 L1726.66 1215.78 L1726.08 1215.78 L1725.49 1215.78 L1724.91 1215.78 L1724.32 1215.78 L1723.73 1215.78 L1723.15 1215.78 L1722.56 1215.78 L1721.97 1215.78 L1721.39 1215.78 L1720.8 1215.78 L1720.21 1215.78 L1719.63 1215.78 L1719.04 1215.78 L1718.45 1215.78 L1717.87 1215.78 L1717.28 1215.78 L1716.7 1215.78 L1716.11 1215.78 L1715.52 1215.78 L1714.94 1215.78 L1714.35 1215.78 L1713.76 1215.78 L1713.18 1215.78 L1712.59 1215.78 L1712 1215.78 L1711.42 1215.78 L1710.83 1215.78 L1710.24 1215.78 L1709.66 1215.78 L1709.07 1215.78 L1708.49 1215.78 L1707.9 1215.78 L1707.31 1215.78 L1706.73 1215.78 L1706.14 1215.78 L1705.55 1215.78 L1704.97 1215.78 L1704.38 1215.78 L1703.79 1215.78 L1703.21 1215.78 L1702.62 1215.78 L1702.04 1215.78 L1701.45 1215.78 L1700.86 1215.78 L1700.28 1215.78 L1699.69 1215.78 L1699.1 1215.78 L1698.52 1215.78 L1697.93 1215.78 L1697.34 1215.78 L1696.76 1215.78 L1696.17 1215.78 L1695.58 1215.78 L1695 1215.78 L1694.41 1215.78 L1693.83 1215.78 L1693.24 1215.78 L1692.65 1215.78 L1692.07 1215.78 L1691.48 1215.78 L1690.89 1215.78 L1690.31 1215.78 L1689.72 1215.78 L1689.13 1215.78 L1688.55 1215.78 L1687.96 1215.78 L1687.37 1215.78 L1686.79 1215.78 L1686.2 1215.78 L1685.62 1215.78 L1685.03 1215.78 L1684.44 1215.78 L1683.86 1215.78 L1683.27 1215.78 L1682.68 1215.78 L1682.1 1215.78 L1681.51 1215.78 L1680.92 1215.78 L1680.34 1215.78 L1679.75 1215.78 L1679.17 1215.78 L1678.58 1215.78 L1677.99 1215.78 L1677.41 1215.78 L1676.82 1215.78 L1676.23 1215.78 L1675.65 1215.78 L1675.06 1215.78 L1674.47 1215.78 L1673.89 1215.78 L1673.3 1215.78 L1672.71 1215.78 L1672.13 1215.78 L1671.54 1215.78 L1670.96 1215.78 L1670.37 1215.78 L1669.78 1215.78 L1669.2 1215.78 L1668.61 1215.78 L1668.02 1215.78 L1667.44 1215.78 L1666.85 1215.78 L1666.26 1215.78 L1665.68 1215.78 L1665.09 1215.78 L1664.5 1215.78 L1663.92 1215.78 L1663.33 1215.78 L1662.75 1215.78 L1662.16 1215.78 L1661.57 1215.78 L1660.99 1215.78 L1660.4 1215.78 L1659.81 1215.78 L1659.23 1215.78 L1658.64 1215.78 L1658.05 1215.78 L1657.47 1215.78 L1656.88 1215.78 L1656.29 1215.78 L1655.71 1215.78 L1655.12 1215.78 L1654.54 1215.78 L1653.95 1215.78 L1653.36 1215.78 L1652.78 1215.78 L1652.19 1215.78 L1651.6 1215.78 L1651.02 1215.78 L1650.43 1215.78 L1649.84 1215.78 L1649.26 1215.78 L1648.67 1215.78 L1648.09 1215.78 L1647.5 1215.78 L1646.91 1215.78 L1646.33 1215.78 L1645.74 1215.78 L1645.15 1215.78 L1644.57 1215.78 L1643.98 1215.78 L1643.39 1215.78 L1642.81 1215.78 L1642.22 1215.78 L1641.63 1215.78 L1641.05 1215.78 L1640.46 1215.78 L1639.88 1215.78 L1639.29 1215.78 L1638.7 1215.78 L1638.12 1215.78 L1637.53 1215.78 L1636.94 1215.78 L1636.36 1215.78 L1635.77 1215.78 L1635.18 1215.78 L1634.6 1215.78 L1634.01 1215.78 L1633.42 1215.78 L1632.84 1215.78 L1632.25 1215.78 L1631.67 1215.78 L1631.08 1215.78 L1630.49 1215.78 L1629.91 1215.78 L1629.32 1215.78 L1628.73 1215.78 L1628.15 1215.78 L1627.56 1215.78 L1626.97 1215.78 L1626.39 1215.78 L1625.8 1215.78 L1625.22 1215.78 L1624.63 1215.78 L1624.04 1215.78 L1623.46 1215.78 L1622.87 1215.78 L1622.28 1215.78 L1621.7 1215.78 L1621.11 1215.78 L1620.52 1215.78 L1619.94 1215.78 L1619.35 1215.78 L1618.76 1215.78 L1618.18 1215.78 L1617.59 1215.78 L1617.01 1215.78 L1616.42 1215.78 L1615.83 1215.78 L1615.25 1215.78 L1614.66 1215.78 L1614.07 1215.78 L1613.49 1215.78 L1612.9 1215.78 L1612.31 1215.78 L1611.73 1215.78 L1611.14 1215.78 L1610.55 1215.78 L1609.97 1215.78 L1609.38 1215.78 L1608.8 1215.78 L1608.21 1215.78 L1607.62 1215.78 L1607.04 1215.78 L1606.45 1215.78 L1605.86 1215.78 L1605.28 1215.78 L1604.69 1215.78 L1604.1 1215.78 L1603.52 1215.78 L1602.93 1215.78 L1602.34 1215.78 L1601.76 1215.78 L1601.17 1215.78 L1600.59 1215.78 L1600 1215.78 L1599.41 1215.78 L1598.83 1215.78 L1598.24 1215.78 L1597.65 1215.78 L1597.07 1215.78 L1596.48 1215.78 L1595.89 1215.78 L1595.31 1215.78 L1594.72 1215.78 L1594.14 1215.78 L1593.55 1215.78 L1592.96 1215.78 L1592.38 1215.78 L1591.79 1215.78 L1591.2 1215.78 L1590.62 1215.78 L1590.03 1215.78 L1589.44 1215.78 L1588.86 1215.78 L1588.27 1215.78 L1587.68 1215.78 L1587.1 1215.78 L1586.51 1215.78 L1585.93 1215.78 L1585.34 1215.78 L1584.75 1215.78 L1584.17 1215.78 L1583.58 1215.78 L1582.99 1215.78 L1582.41 1215.78 L1581.82 1215.78 L1581.23 1215.78 L1580.65 1215.78 L1580.06 1215.78 L1579.47 1215.78 L1578.89 1215.78 L1578.3 1215.78 L1577.72 1215.78 L1577.13 1215.78 L1576.54 1215.78 L1575.96 1215.78 L1575.37 1215.78 L1574.78 1215.78 L1574.2 1215.78 L1573.61 1215.78 L1573.02 1215.78 L1572.44 1215.78 L1571.85 1215.78 L1571.27 1215.78 L1570.68 1215.78 L1570.09 1215.78 L1569.51 1215.78 L1568.92 1215.78 L1568.33 1215.78 L1567.75 1215.78 L1567.16 1215.78 L1566.57 1215.78 L1565.99 1215.78 L1565.4 1215.78 L1564.81 1215.78 L1564.23 1215.78 L1563.64 1215.78 L1563.06 1215.78 L1562.47 1215.78 L1561.88 1215.78 L1561.3 1215.78 L1560.71 1215.78 L1560.12 1215.78 L1559.54 1215.78 L1558.95 1215.78 L1558.36 1215.78 L1557.78 1215.78 L1557.19 1215.78 L1556.6 1215.78 L1556.02 1215.78 L1555.43 1215.78 L1554.85 1215.78 L1554.26 1215.78 L1553.67 1215.78 L1553.09 1215.78 L1552.5 1215.78 L1551.91 1215.78 L1551.33 1215.78 L1550.74 1215.78 L1550.15 1215.78 L1549.57 1215.78 L1548.98 1215.78 L1548.4 1215.78 L1547.81 1215.78 L1547.22 1215.78 L1546.64 1215.78 L1546.05 1215.78 L1545.46 1215.78 L1544.88 1215.78 L1544.29 1215.78 L1543.7 1215.78 L1543.12 1215.78 L1542.53 1215.78 L1541.94 1215.78 L1541.36 1215.78 L1540.77 1215.78 L1540.19 1215.78 L1539.6 1215.78 L1539.01 1215.78 L1538.43 1215.78 L1537.84 1215.78 L1537.25 1215.78 L1536.67 1215.78 L1536.08 1215.78 L1535.49 1215.78 L1534.91 1215.78 L1534.32 1215.78 L1533.73 1215.78 L1533.15 1215.78 L1532.56 1215.78 L1531.98 1215.78 L1531.39 1215.78 L1530.8 1215.78 L1530.22 1215.78 L1529.63 1215.78 L1529.04 1215.78 L1528.46 1215.78 L1527.87 1215.78 L1527.28 1215.78 L1526.7 1215.78 L1526.11 1215.78 L1525.52 1215.78 L1524.94 1215.78 L1524.35 1215.78 L1523.77 1215.78 L1523.18 1215.78 L1522.59 1215.78 L1522.01 1215.78 L1521.42 1215.78 L1520.83 1215.78 L1520.25 1215.78 L1519.66 1215.78 L1519.07 1215.78 L1518.49 1215.78 L1517.9 1215.78 L1517.32 1215.78 L1516.73 1215.78 L1516.14 1215.78 L1515.56 1215.78 L1514.97 1215.78 L1514.38 1215.78 L1513.8 1215.78 L1513.21 1215.78 L1512.62 1215.78 L1512.04 1215.78 L1511.45 1215.78 L1510.86 1215.78 L1510.28 1215.78 L1509.69 1215.78 L1509.11 1215.78 L1508.52 1215.78 L1507.93 1215.78 L1507.35 1215.78 L1506.76 1215.78 L1506.17 1215.78 L1505.59 1215.78 L1505 1215.78 L1504.41 1215.78 L1503.83 1215.78 L1503.24 1215.78 L1502.65 1215.78 L1502.07 1215.78 L1501.48 1215.78 L1500.9 1215.78 L1500.31 1215.78 L1499.72 1215.78 L1499.14 1215.78 L1498.55 1215.78 L1497.96 1215.78 L1497.38 1215.78 L1496.79 1215.78 L1496.2 1215.78 L1495.62 1215.78 L1495.03 1215.78 L1494.45 1215.78 L1493.86 1215.78 L1493.27 1215.78 L1492.69 1215.78 L1492.1 1215.78 L1491.51 1215.78 L1490.93 1215.78 L1490.34 1215.78 L1489.75 1215.78 L1489.17 1215.78 L1488.58 1215.78 L1487.99 1215.78 L1487.41 1215.78 L1486.82 1215.78 L1486.24 1215.78 L1485.65 1215.78 L1485.06 1215.78 L1484.48 1215.78 L1483.89 1215.78 L1483.3 1215.78 L1482.72 1215.78 L1482.13 1215.78 L1481.54 1215.78 L1480.96 1215.78 L1480.37 1215.78 L1479.78 1215.78 L1479.2 1215.78 L1478.61 1215.78 L1478.03 1215.78 L1477.44 1215.78 L1476.85 1215.78 L1476.27 1215.78 L1475.68 1215.78 L1475.09 1215.78 L1474.51 1215.78 L1473.92 1215.78 L1473.33 1215.78 L1472.75 1215.78 L1472.16 1215.78 L1471.57 1215.78 L1470.99 1215.78 L1470.4 1215.78 L1469.82 1215.78 L1469.23 1215.78 L1468.64 1215.78 L1468.06 1215.78 L1467.47 1215.78 L1466.88 1215.78 L1466.3 1215.78 L1465.71 1215.78 L1465.12 1215.78 L1464.54 1215.78 L1463.95 1215.78 L1463.37 1215.78 L1462.78 1215.78 L1462.19 1215.78 L1461.61 1215.78 L1461.02 1215.78 L1460.43 1215.78 L1459.85 1215.78 L1459.26 1215.78 L1458.67 1215.78 L1458.09 1215.78 L1457.5 1215.78 L1456.91 1215.78 L1456.33 1215.78 L1455.74 1215.78 L1455.16 1215.78 L1454.57 1215.78 L1453.98 1215.78 L1453.4 1215.78 L1452.81 1215.78 L1452.22 1215.78 L1451.64 1215.78 L1451.05 1215.78 L1450.46 1215.78 L1449.88 1215.78 L1449.29 1215.78 L1448.7 1215.78 L1448.12 1215.78 L1447.53 1215.78 L1446.95 1215.78 L1446.36 1215.78 L1445.77 1215.78 L1445.19 1215.78 L1444.6 1215.78 L1444.01 1215.78 L1443.43 1215.78 L1442.84 1215.78 L1442.25 1215.78 L1441.67 1215.78 L1441.08 1215.78 L1440.5 1215.78 L1439.91 1215.78 L1439.32 1215.78 L1438.74 1215.78 L1438.15 1215.78 L1437.56 1215.78 L1436.98 1215.78 L1436.39 1215.78 L1435.8 1215.78 L1435.22 1215.78 L1434.63 1215.78 L1434.04 1215.78 L1433.46 1215.78 L1432.87 1215.78 L1432.29 1215.78 L1431.7 1215.78 L1431.11 1215.78 L1430.53 1215.78 L1429.94 1215.78 L1429.35 1215.78 L1428.77 1215.78 L1428.18 1215.78 L1427.59 1215.78 L1427.01 1215.78 L1426.42 1215.78 L1425.83 1215.78 L1425.25 1215.78 L1424.66 1215.78 L1424.08 1215.78 L1423.49 1215.78 L1422.9 1215.78 L1422.32 1215.78 L1421.73 1215.78 L1421.14 1215.78 L1420.56 1215.78 L1419.97 1215.78 L1419.38 1215.78 L1418.8 1215.78 L1418.21 1215.78 L1417.63 1215.78 L1417.04 1215.78 L1416.45 1215.78 L1415.87 1215.78 L1415.28 1215.78 L1414.69 1215.78 L1414.11 1215.78 L1413.52 1215.78 L1412.93 1215.78 L1412.35 1215.78 L1411.76 1215.78 L1411.17 1215.78 L1410.59 1215.78 L1410 1215.78 L1409.42 1215.78 L1408.83 1215.78 L1408.24 1215.78 L1407.66 1215.78 L1407.07 1215.78 L1406.48 1215.78 L1405.9 1215.78 L1405.31 1215.78 L1404.72 1215.78 L1404.14 1215.78 L1403.55 1215.78 L1402.96 1215.78 L1402.38 1215.78 L1401.79 1215.78 L1401.21 1215.78 L1400.62 1215.78 L1400.03 1215.78 L1399.45 1215.78 L1398.86 1215.78 L1398.27 1215.78 L1397.69 1215.78 L1397.1 1215.78 L1396.51 1215.78 L1395.93 1215.78 L1395.34 1215.78 L1394.75 1215.78 L1394.17 1215.78 L1393.58 1215.78 L1393 1215.78 L1392.41 1215.78 L1391.82 1215.78 L1391.24 1215.78 L1390.65 1215.78 L1390.06 1215.78 L1389.48 1215.78 L1388.89 1215.78 L1388.3 1215.78 L1387.72 1215.78 L1387.13 1215.78 L1386.55 1215.78 L1385.96 1215.78 L1385.37 1215.78 L1384.79 1215.78 L1384.2 1215.78 L1383.61 1215.78 L1383.03 1215.78 L1382.44 1215.78 L1381.85 1215.78 L1381.27 1215.78 L1380.68 1215.78 L1380.09 1215.78 L1379.51 1215.78 L1378.92 1215.78 L1378.34 1215.78 L1377.75 1215.78 L1377.16 1215.78 L1376.58 1215.78 L1375.99 1215.78 L1375.4 1215.78 L1374.82 1215.78 L1374.23 1215.78 L1373.64 1215.78 L1373.06 1215.78 L1372.47 1215.78 L1371.88 1215.78 L1371.3 1215.78 L1370.71 1215.78 L1370.13 1215.78 L1369.54 1215.78 L1368.95 1215.78 L1368.37 1215.78 L1367.78 1215.78 L1367.19 1215.78 L1366.61 1215.78 L1366.02 1215.78 L1365.43 1215.78 L1364.85 1215.78 L1364.26 1215.78 L1363.68 1215.78 L1363.09 1215.78 L1362.5 1215.78 L1361.92 1215.78 L1361.33 1215.78 L1360.74 1215.78 L1360.16 1215.78 L1359.57 1215.78 L1358.98 1215.78 L1358.4 1215.78 L1357.81 1215.78 L1357.22 1215.78 L1356.64 1215.78 L1356.05 1215.78 L1355.47 1215.78 L1354.88 1215.78 L1354.29 1215.78 L1353.71 1215.78 L1353.12 1215.78 L1352.53 1215.78 L1351.95 1215.78 L1351.36 1215.78 L1350.77 1215.78 L1350.19 1215.78 L1349.6 1215.78 L1349.01 1215.78 L1348.43 1215.78 L1347.84 1215.78 L1347.26 1215.78 L1346.67 1215.78 L1346.08 1215.78 L1345.5 1215.78 L1344.91 1215.78 L1344.32 1215.78 L1343.74 1215.78 L1343.15 1215.78 L1342.56 1215.78 L1341.98 1215.78 L1341.39 1215.78 L1340.8 1215.78 L1340.22 1215.78 L1339.63 1215.78 L1339.05 1215.78 L1338.46 1215.78 L1337.87 1215.78 L1337.29 1215.78 L1336.7 1215.78 L1336.11 1215.78 L1335.53 1215.78 L1334.94 1215.78 L1334.35 1215.78 L1333.77 1215.78 L1333.18 1215.78 L1332.6 1215.78 L1332.01 1215.78 L1331.42 1215.78 L1330.84 1215.78 L1330.25 1215.78 L1329.66 1215.78 L1329.08 1215.78 L1328.49 1215.78 L1327.9 1215.78 L1327.32 1215.78 L1326.73 1215.78 L1326.14 1215.78 L1325.56 1215.78 L1324.97 1215.78 L1324.39 1215.78 L1323.8 1215.78 L1323.21 1215.78 L1322.63 1215.78 L1322.04 1215.78 L1321.45 1215.78 L1320.87 1215.78 L1320.28 1215.78 L1319.69 1215.78 L1319.11 1215.78 L1318.52 1215.78 L1317.93 1215.78 L1317.35 1215.78 L1316.76 1215.78 L1316.18 1215.78 L1315.59 1215.78 L1315 1215.78 L1314.42 1215.78 L1313.83 1215.78 L1313.24 1215.78 L1312.66 1215.78 L1312.07 1215.78 L1311.48 1215.78 L1310.9 1215.78 L1310.31 1215.78 L1309.73 1215.78 L1309.14 1215.78 L1308.55 1215.78 L1307.97 1215.78 L1307.38 1215.78 L1306.79 1215.78 L1306.21 1215.78 L1305.62 1215.78 L1305.03 1215.78 L1304.45 1215.78 L1303.86 1215.78 L1303.27 1215.78 L1302.69 1215.78 L1302.1 1215.78 L1301.52 1215.78 L1300.93 1215.78 L1300.34 1215.78 L1299.76 1215.78 L1299.17 1215.78 L1298.58 1215.78 L1298 1215.78 L1297.41 1215.78 L1296.82 1215.78 L1296.24 1215.78 L1295.65 1215.78 L1295.06 1215.78 L1294.48 1215.78 L1293.89 1215.78 L1293.31 1215.78 L1292.72 1215.78 L1292.13 1215.78 L1291.55 1215.78 L1290.96 1215.78 L1290.37 1215.78 L1289.79 1215.78 L1289.2 1215.78 L1288.61 1215.78 L1288.03 1215.78 L1287.44 1215.78 L1286.86 1215.78 L1286.27 1215.78 L1285.68 1215.78 L1285.1 1215.78 L1284.51 1215.78 L1283.92 1215.78 L1283.34 1215.78 L1282.75 1215.78 L1282.16 1215.78 L1281.58 1215.78 L1280.99 1215.78 L1280.4 1215.78 L1279.82 1215.78 L1279.23 1215.78 L1278.65 1215.78 L1278.06 1215.78 L1277.47 1215.78 L1276.89 1215.78 L1276.3 1215.78 L1275.71 1215.78 L1275.13 1215.78 L1274.54 1215.78 L1273.95 1215.78 L1273.37 1215.78 L1272.78 1215.78 L1272.19 1215.78 L1271.61 1215.78 L1271.02 1215.78 L1270.44 1215.78 L1269.85 1215.78 L1269.26 1215.78 L1268.68 1215.78 L1268.09 1215.78 L1267.5 1215.78 L1266.92 1215.78 L1266.33 1215.78 L1265.74 1215.78 L1265.16 1215.78 L1264.57 1215.78 L1263.98 1215.78 L1263.4 1215.78 L1262.81 1215.78 L1262.23 1215.78 L1261.64 1215.78 L1261.05 1215.78 L1260.47 1215.78 L1259.88 1215.78 L1259.29 1215.78 L1258.71 1215.78 L1258.12 1215.78 L1257.53 1215.78 L1256.95 1215.78 L1256.36 1215.78 L1255.78 1215.78 L1255.19 1215.78 L1254.6 1215.78 L1254.02 1215.78 L1253.43 1215.78 L1252.84 1215.78 L1252.26 1215.78 L1251.67 1215.78 L1251.08 1215.78 L1250.5 1215.78 L1249.91 1215.78 L1249.32 1215.78 L1248.74 1215.78 L1248.15 1215.78 L1247.57 1215.78 L1246.98 1215.78 L1246.39 1215.78 L1245.81 1215.78 L1245.22 1215.78 L1244.63 1215.78 L1244.05 1215.78 L1243.46 1215.78 L1242.87 1215.78 L1242.29 1215.78 L1241.7 1215.78 L1241.11 1215.78 L1240.53 1215.78 L1239.94 1215.78 L1239.36 1215.78 L1238.77 1215.78 L1238.18 1215.78 L1237.6 1215.78 L1237.01 1215.78 L1236.42 1215.78 L1235.84 1215.78 L1235.25 1215.78 L1234.66 1215.78 L1234.08 1215.78 L1233.49 1215.78 L1232.91 1215.78 L1232.32 1215.78 L1231.73 1215.78 L1231.15 1215.78 L1230.56 1215.78 L1229.97 1215.78 L1229.39 1215.78 L1228.8 1215.78 L1228.21 1215.78 L1227.63 1215.78 L1227.04 1215.78 L1226.45 1215.78 L1225.87 1215.78 L1225.28 1215.78 L1224.7 1215.78 L1224.11 1215.78 L1223.52 1215.78 L1222.94 1215.78 L1222.35 1215.78 L1221.76 1215.78 L1221.18 1215.78 L1220.59 1215.78 L1220 1215.78 L1219.42 1215.78 L1218.83 1215.78 L1218.24 1215.78 L1217.66 1215.78 L1217.07 1215.78 L1216.49 1215.78 L1215.9 1215.78 L1215.31 1215.78 L1214.73 1215.78 L1214.14 1215.78 L1213.55 1215.78 L1212.97 1215.78 L1212.38 1215.78 L1211.79 1215.78 L1211.21 1215.78 L1210.62 1215.78 L1210.03 1215.78 L1209.45 1215.78 L1208.86 1215.78 L1208.28 1215.78 L1207.69 1215.78 L1207.1 1215.78 L1206.52 1215.78 L1205.93 1215.78 L1205.34 1215.78 L1204.76 1215.78 L1204.17 1215.78 L1203.58 1215.78 L1203 1215.78 L1202.41 1215.78 L1201.83 1215.78 L1201.24 1215.78 L1200.65 1215.78 L1200.07 1215.78 L1199.48 1215.78 L1198.89 1215.78 L1198.31 1215.78 L1197.72 1215.78 L1197.13 1215.78 L1196.55 1215.78 L1195.96 1215.78 L1195.37 1215.78 L1194.79 1215.78 L1194.2 1215.78 L1193.62 1215.78 L1193.03 1215.78 L1192.44 1215.78 L1191.86 1215.78 L1191.27 1215.78 L1190.68 1215.78 L1190.1 1215.78 L1189.51 1215.78 L1188.92 1215.78 L1188.34 1215.78 L1187.75 1215.78 L1187.16 1215.78 L1186.58 1215.78 L1185.99 1215.78 L1185.41 1215.78 L1184.82 1215.78 L1184.23 1215.78 L1183.65 1215.78 L1183.06 1215.78 L1182.47 1215.78 L1181.89 1215.78 L1181.3 1215.78 L1180.71 1215.78 L1180.13 1215.78 L1179.54 1215.78 L1178.96 1215.78 L1178.37 1215.78 L1177.78 1215.78 L1177.2 1215.78 L1176.61 1215.78 L1176.02 1215.78 L1175.44 1215.78 L1174.85 1215.78 L1174.26 1215.78 L1173.68 1215.78 L1173.09 1215.78 L1172.5 1215.78 L1171.92 1215.78 L1171.33 1215.78 L1170.75 1215.78 L1170.16 1215.78 L1169.57 1215.78 L1168.99 1215.78 L1168.4 1215.78 L1167.81 1215.78 L1167.23 1215.78 L1166.64 1215.78 L1166.05 1215.78 L1165.47 1215.78 L1164.88 1215.78 L1164.29 1215.78 L1163.71 1215.78 L1163.12 1215.78 L1162.54 1215.78 L1161.95 1215.78 L1161.36 1215.78 L1160.78 1215.78 L1160.19 1215.78 L1159.6 1215.78 L1159.02 1215.78 L1158.43 1215.78 L1157.84 1215.78 L1157.26 1215.78 L1156.67 1215.78 L1156.09 1215.78 L1155.5 1215.78 L1154.91 1215.78 L1154.33 1215.78 L1153.74 1215.78 L1153.15 1215.78 L1152.57 1215.78 L1151.98 1215.78 L1151.39 1215.78 L1150.81 1215.78 L1150.22 1215.78 L1149.63 1215.78 L1149.05 1215.78 L1148.46 1215.78 L1147.88 1215.78 L1147.29 1215.78 L1146.7 1215.78 L1146.12 1215.78 L1145.53 1215.78 L1144.94 1215.78 L1144.36 1215.78 L1143.77 1215.78 L1143.18 1215.78 L1142.6 1215.78 L1142.01 1215.78 L1141.42 1215.78 L1140.84 1215.78 L1140.25 1215.78 L1139.67 1215.78 L1139.08 1215.78 L1138.49 1215.78 L1137.91 1215.78 L1137.32 1215.78 L1136.73 1215.78 L1136.15 1215.78 L1135.56 1215.78 L1134.97 1215.78 L1134.39 1215.78 L1133.8 1215.78 L1133.21 1215.78 L1132.63 1215.78 L1132.04 1215.78 L1131.46 1215.78 L1130.87 1215.78 L1130.28 1215.78 L1129.7 1215.78 L1129.11 1215.78 L1128.52 1215.78 L1127.94 1215.78 L1127.35 1215.78 L1126.76 1215.78 L1126.18 1215.78 L1125.59 1215.78 L1125.01 1215.78 L1124.42 1215.78 L1123.83 1215.78 L1123.25 1215.78 L1122.66 1215.78 L1122.07 1215.78 L1121.49 1215.78 L1120.9 1215.78 L1120.31 1215.78 L1119.73 1215.78 L1119.14 1215.78 L1118.55 1215.78 L1117.97 1215.78 L1117.38 1215.78 L1116.8 1215.78 L1116.21 1215.78 L1115.62 1215.78 L1115.04 1215.78 L1114.45 1215.78 L1113.86 1215.78 L1113.28 1215.78 L1112.69 1215.78 L1112.1 1215.78 L1111.52 1215.78 L1110.93 1215.78 L1110.34 1215.78 L1109.76 1215.78 L1109.17 1215.78 L1108.59 1215.78 L1108 1215.78 L1107.41 1215.78 L1106.83 1215.78 L1106.24 1215.78 L1105.65 1215.78 L1105.07 1215.78 L1104.48 1215.78 L1103.89 1215.78 L1103.31 1215.78 L1102.72 1215.78 L1102.14 1215.78 L1101.55 1215.78 L1100.96 1215.78 L1100.38 1215.78 L1099.79 1215.78 L1099.2 1215.78 L1098.62 1215.78 L1098.03 1215.78 L1097.44 1215.78 L1096.86 1215.78 L1096.27 1215.78 L1095.68 1215.78 L1095.1 1215.78 L1094.51 1215.78 L1093.93 1215.78 L1093.34 1215.78 L1092.75 1215.78 L1092.17 1215.78 L1091.58 1215.78 L1090.99 1215.78 L1090.41 1215.78 L1089.82 1215.78 L1089.23 1215.78 L1088.65 1215.78 L1088.06 1215.78 L1087.47 1215.78 L1086.89 1215.78 L1086.3 1215.78 L1085.72 1215.78 L1085.13 1215.78 L1084.54 1215.78 L1083.96 1215.78 L1083.37 1215.78 L1082.78 1215.78 L1082.2 1215.78 L1081.61 1215.78 L1081.02 1215.78 L1080.44 1215.78 L1079.85 1215.78 L1079.26 1215.78 L1078.68 1215.78 L1078.09 1215.78 L1077.51 1215.78 L1076.92 1215.78 L1076.33 1215.78 L1075.75 1215.78 L1075.16 1215.78 L1074.57 1215.78 L1073.99 1215.78 L1073.4 1215.78 L1072.81 1215.78 L1072.23 1215.78 L1071.64 1215.78 L1071.06 1215.78 L1070.47 1215.78 L1069.88 1215.78 L1069.3 1215.78 L1068.71 1215.78 L1068.12 1215.78 L1067.54 1215.78 L1066.95 1215.78 L1066.36 1215.78 L1065.78 1215.78 L1065.19 1215.78 L1064.6 1215.78 L1064.02 1215.78 L1063.43 1215.78 L1062.85 1215.78 L1062.26 1215.78 L1061.67 1215.78 L1061.09 1215.78 L1060.5 1215.78 L1059.91 1215.78 L1059.33 1215.78 L1058.74 1215.78 L1058.15 1215.78 L1057.57 1215.78 L1056.98 1215.78 L1056.39 1215.78 L1055.81 1215.78 L1055.22 1215.78 L1054.64 1215.78 L1054.05 1215.78 L1053.46 1215.78 L1052.88 1215.78 L1052.29 1215.78 L1051.7 1215.78 L1051.12 1215.78 L1050.53 1215.78 L1049.94 1215.78 L1049.36 1215.78 L1048.77 1215.78 L1048.19 1215.78 L1047.6 1215.78 L1047.01 1215.78 L1046.43 1215.78 L1045.84 1215.78 L1045.25 1215.78 L1044.67 1215.78 L1044.08 1215.78 L1043.49 1215.78 L1042.91 1215.78 L1042.32 1215.78 L1041.73 1215.78 L1041.15 1215.78 L1040.56 1215.78 L1039.98 1215.78 L1039.39 1215.78 L1038.8 1215.78 L1038.22 1215.78 L1037.63 1215.78 L1037.04 1215.78 L1036.46 1215.78 L1035.87 1215.78 L1035.28 1215.78 L1034.7 1215.78 L1034.11 1215.78 L1033.52 1215.78 L1032.94 1215.78 L1032.35 1215.78 L1031.77 1215.78 L1031.18 1215.78 L1030.59 1215.78 L1030.01 1215.78 L1029.42 1215.78 L1028.83 1215.78 L1028.25 1215.78 L1027.66 1215.78 L1027.07 1215.78 L1026.49 1215.78 L1025.9 1215.78 L1025.32 1215.78 L1024.73 1215.78 L1024.14 1215.78 L1023.56 1215.78 L1022.97 1215.78 L1022.38 1215.78 L1021.8 1215.78 L1021.21 1215.78 L1020.62 1215.78 L1020.04 1215.78 L1019.45 1215.78 L1018.86 1215.78 L1018.28 1215.78 L1017.69 1215.78 L1017.11 1215.78 L1016.52 1215.78 L1015.93 1215.78 L1015.35 1215.78 L1014.76 1215.78 L1014.17 1215.78 L1013.59 1215.78 L1013 1215.78 L1012.41 1215.78 L1011.83 1215.78 L1011.24 1215.78 L1010.65 1215.78 L1010.07 1215.78 L1009.48 1215.78 L1008.9 1215.78 L1008.31 1215.78 L1007.72 1215.78 L1007.14 1215.78 L1006.55 1215.78 L1005.96 1215.78 L1005.38 1215.78 L1004.79 1215.78 L1004.2 1215.78 L1003.62 1215.78 L1003.03 1215.78 L1002.44 1215.78 L1001.86 1215.78 L1001.27 1215.78 L1000.69 1215.78 L1000.1 1215.78 L999.513 1215.78 L998.926 1215.78 L998.34 1215.78 L997.754 1215.78 L997.167 1215.78 L996.581 1215.78 L995.994 1215.78 L995.408 1215.78 L994.822 1215.78 L994.235 1215.78 L993.649 1215.78 L993.062 1215.78 L992.476 1215.78 L991.889 1215.78 L991.303 1215.78 L990.717 1215.78 L990.13 1215.78 L989.544 1215.78 L988.957 1215.78 L988.371 1215.78 L987.785 1215.78 L987.198 1215.78 L986.612 1215.78 L986.025 1215.78  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.88 986.612,1215.88 987.198,1215.88 987.785,1215.88 988.371,1215.88 988.957,1215.88 989.544,1215.88 990.13,1215.88 990.717,1215.88 991.303,1215.88 991.889,1215.88 992.476,1215.88 993.062,1215.88 993.649,1215.88 994.235,1215.88 994.822,1215.88 995.408,1215.88 995.994,1215.88 996.581,1215.88 997.167,1215.88 997.754,1215.88 998.34,1215.88 998.926,1215.88 999.513,1215.88 1000.1,1215.88 1000.69,1215.88 1001.27,1215.88 1001.86,1215.88 1002.44,1215.88 1003.03,1215.88 1003.62,1215.88 1004.2,1215.88 1004.79,1215.88 1005.38,1215.88 1005.96,1215.88 1006.55,1215.88 1007.14,1215.88 1007.72,1215.88 1008.31,1215.88 1008.9,1215.88 1009.48,1215.88 1010.07,1215.88 1010.65,1215.88 1011.24,1215.88 1011.83,1215.88 1012.41,1215.88 1013,1215.88 1013.59,1215.88 1014.17,1215.88 1014.76,1215.88 1015.35,1215.88 1015.93,1215.88 1016.52,1215.88 1017.11,1215.88 1017.69,1215.88 1018.28,1215.88 1018.86,1215.88 1019.45,1215.88 1020.04,1215.88 1020.62,1215.88 1021.21,1215.88 1021.8,1215.88 1022.38,1215.88 1022.97,1215.88 1023.56,1215.88 1024.14,1215.88 1024.73,1215.88 1025.32,1215.88 1025.9,1215.88 1026.49,1215.88 1027.07,1215.88 1027.66,1215.88 1028.25,1215.88 1028.83,1215.88 1029.42,1215.88 1030.01,1215.88 1030.59,1215.88 1031.18,1215.88 1031.77,1215.88 1032.35,1215.88 1032.94,1215.88 1033.52,1215.88 1034.11,1215.88 1034.7,1215.88 1035.28,1215.88 1035.87,1215.88 1036.46,1215.88 1037.04,1215.88 1037.63,1215.88 1038.22,1215.88 1038.8,1215.88 1039.39,1215.88 1039.98,1215.88 1040.56,1215.88 1041.15,1215.88 1041.73,1215.88 1042.32,1215.88 1042.91,1215.88 1043.49,1215.88 1044.08,1215.88 1044.67,1215.88 1045.25,1215.88 1045.84,1215.88 1046.43,1215.88 1047.01,1215.88 1047.6,1215.88 1048.19,1215.88 1048.77,1215.88 1049.36,1215.88 1049.94,1215.88 1050.53,1215.88 1051.12,1215.88 1051.7,1215.88 1052.29,1215.88 1052.88,1215.88 1053.46,1215.88 1054.05,1215.88 1054.64,1215.88 1055.22,1215.88 1055.81,1215.88 1056.39,1215.88 1056.98,1215.88 1057.57,1215.88 1058.15,1215.88 1058.74,1215.88 1059.33,1215.88 1059.91,1215.88 1060.5,1215.88 1061.09,1215.88 1061.67,1215.88 1062.26,1215.88 1062.85,1215.88 1063.43,1215.88 1064.02,1215.88 1064.6,1215.88 1065.19,1215.88 1065.78,1215.88 1066.36,1215.88 1066.95,1215.88 1067.54,1215.88 1068.12,1215.88 1068.71,1215.88 1069.3,1215.88 1069.88,1215.88 1070.47,1215.88 1071.06,1215.88 1071.64,1215.88 1072.23,1215.88 1072.81,1215.88 1073.4,1215.88 1073.99,1215.88 1074.57,1215.88 1075.16,1215.88 1075.75,1215.88 1076.33,1215.88 1076.92,1215.88 1077.51,1215.88 1078.09,1215.88 1078.68,1215.88 1079.26,1215.88 1079.85,1215.88 1080.44,1215.88 1081.02,1215.88 1081.61,1215.88 1082.2,1215.88 1082.78,1215.88 1083.37,1215.88 1083.96,1215.88 1084.54,1215.88 1085.13,1215.88 1085.72,1215.88 1086.3,1215.88 1086.89,1215.88 1087.47,1215.88 1088.06,1215.88 1088.65,1215.88 1089.23,1215.88 1089.82,1215.88 1090.41,1215.88 1090.99,1215.88 1091.58,1215.88 1092.17,1215.88 1092.75,1215.88 1093.34,1215.88 1093.93,1215.88 1094.51,1215.88 1095.1,1215.88 1095.68,1215.88 1096.27,1215.88 1096.86,1215.88 1097.44,1215.88 1098.03,1215.88 1098.62,1215.88 1099.2,1215.88 1099.79,1215.88 1100.38,1215.88 1100.96,1215.88 1101.55,1215.88 1102.14,1215.88 1102.72,1215.88 1103.31,1215.88 1103.89,1215.88 1104.48,1215.88 1105.07,1215.88 1105.65,1215.88 1106.24,1215.88 1106.83,1215.88 1107.41,1215.88 1108,1215.88 1108.59,1215.88 1109.17,1215.88 1109.76,1215.88 1110.34,1215.88 1110.93,1215.88 1111.52,1215.88 1112.1,1215.88 1112.69,1215.88 1113.28,1215.88 1113.86,1215.88 1114.45,1215.88 1115.04,1215.88 1115.62,1215.88 1116.21,1215.88 1116.8,1215.88 1117.38,1215.88 1117.97,1215.88 1118.55,1215.88 1119.14,1215.88 1119.73,1215.88 1120.31,1215.88 1120.9,1215.88 1121.49,1215.88 1122.07,1215.88 1122.66,1215.88 1123.25,1215.88 1123.83,1215.88 1124.42,1215.88 1125.01,1215.88 1125.59,1215.88 1126.18,1215.88 1126.76,1215.88 1127.35,1215.88 1127.94,1215.88 1128.52,1215.88 1129.11,1215.88 1129.7,1215.88 1130.28,1215.88 1130.87,1215.88 1131.46,1215.88 1132.04,1215.88 1132.63,1215.88 1133.21,1215.88 1133.8,1215.88 1134.39,1215.88 1134.97,1215.88 1135.56,1215.88 1136.15,1215.88 1136.73,1215.88 1137.32,1215.88 1137.91,1215.88 1138.49,1215.88 1139.08,1215.88 1139.67,1215.88 1140.25,1215.88 1140.84,1215.88 1141.42,1215.88 1142.01,1215.88 1142.6,1215.88 1143.18,1215.88 1143.77,1215.88 1144.36,1215.88 1144.94,1215.88 1145.53,1215.88 1146.12,1215.88 1146.7,1215.88 1147.29,1215.88 1147.88,1215.88 1148.46,1215.88 1149.05,1215.88 1149.63,1215.88 1150.22,1215.88 1150.81,1215.88 1151.39,1215.88 1151.98,1215.88 1152.57,1215.88 1153.15,1215.88 1153.74,1215.88 1154.33,1215.88 1154.91,1215.88 1155.5,1215.88 1156.09,1215.88 1156.67,1215.88 1157.26,1215.88 1157.84,1215.88 1158.43,1215.88 1159.02,1215.88 1159.6,1215.88 1160.19,1215.88 1160.78,1215.88 1161.36,1215.88 1161.95,1215.88 1162.54,1215.88 1163.12,1215.88 1163.71,1215.88 1164.29,1215.88 1164.88,1215.88 1165.47,1215.88 1166.05,1215.88 1166.64,1215.88 1167.23,1215.88 1167.81,1215.88 1168.4,1215.88 1168.99,1215.88 1169.57,1215.88 1170.16,1215.88 1170.75,1215.88 1171.33,1215.88 1171.92,1215.88 1172.5,1215.88 1173.09,1215.88 1173.68,1215.88 1174.26,1215.88 1174.85,1215.88 1175.44,1215.88 1176.02,1215.88 1176.61,1215.88 1177.2,1215.88 1177.78,1215.88 1178.37,1215.88 1178.96,1215.88 1179.54,1215.88 1180.13,1215.88 1180.71,1215.88 1181.3,1215.88 1181.89,1215.88 1182.47,1215.88 1183.06,1215.88 1183.65,1215.88 1184.23,1215.88 1184.82,1215.88 1185.41,1215.88 1185.99,1215.88 1186.58,1215.88 1187.16,1215.88 1187.75,1215.88 1188.34,1215.88 1188.92,1215.88 1189.51,1215.88 1190.1,1215.88 1190.68,1215.88 1191.27,1215.88 1191.86,1215.88 1192.44,1215.88 1193.03,1215.88 1193.62,1215.88 1194.2,1215.88 1194.79,1215.88 1195.37,1215.88 1195.96,1215.88 1196.55,1215.88 1197.13,1215.88 1197.72,1215.88 1198.31,1215.88 1198.89,1215.88 1199.48,1215.88 1200.07,1215.88 1200.65,1215.88 1201.24,1215.88 1201.83,1215.88 1202.41,1215.88 1203,1215.88 1203.58,1215.88 1204.17,1215.88 1204.76,1215.88 1205.34,1215.88 1205.93,1215.88 1206.52,1215.88 1207.1,1215.88 1207.69,1215.88 1208.28,1215.88 1208.86,1215.88 1209.45,1215.88 1210.03,1215.88 1210.62,1215.88 1211.21,1215.88 1211.79,1215.88 1212.38,1215.88 1212.97,1215.88 1213.55,1215.88 1214.14,1215.88 1214.73,1215.88 1215.31,1215.88 1215.9,1215.88 1216.49,1215.88 1217.07,1215.88 1217.66,1215.88 1218.24,1215.88 1218.83,1215.88 1219.42,1215.88 1220,1215.88 1220.59,1215.88 1221.18,1215.88 1221.76,1215.88 1222.35,1215.88 1222.94,1215.88 1223.52,1215.88 1224.11,1215.88 1224.7,1215.88 1225.28,1215.88 1225.87,1215.88 1226.45,1215.88 1227.04,1215.88 1227.63,1215.88 1228.21,1215.88 1228.8,1215.88 1229.39,1215.88 1229.97,1215.88 1230.56,1215.88 1231.15,1215.88 1231.73,1215.88 1232.32,1215.88 1232.91,1215.88 1233.49,1215.88 1234.08,1215.88 1234.66,1215.88 1235.25,1215.88 1235.84,1215.88 1236.42,1215.88 1237.01,1215.88 1237.6,1215.88 1238.18,1215.88 1238.77,1215.88 1239.36,1215.88 1239.94,1215.88 1240.53,1215.88 1241.11,1215.88 1241.7,1215.88 1242.29,1215.88 1242.87,1215.88 1243.46,1215.88 1244.05,1215.88 1244.63,1215.88 1245.22,1215.88 1245.81,1215.88 1246.39,1215.88 1246.98,1215.88 1247.57,1215.88 1248.15,1215.88 1248.74,1215.88 1249.32,1215.88 1249.91,1215.88 1250.5,1215.88 1251.08,1215.88 1251.67,1215.88 1252.26,1215.88 1252.84,1215.88 1253.43,1215.88 1254.02,1215.88 1254.6,1215.88 1255.19,1215.88 1255.78,1215.88 1256.36,1215.88 1256.95,1215.88 1257.53,1215.88 1258.12,1215.88 1258.71,1215.88 1259.29,1215.88 1259.88,1215.88 1260.47,1215.88 1261.05,1215.88 1261.64,1215.88 1262.23,1215.88 1262.81,1215.88 1263.4,1215.88 1263.98,1215.88 1264.57,1215.88 1265.16,1215.88 1265.74,1215.88 1266.33,1215.88 1266.92,1215.88 1267.5,1215.88 1268.09,1215.88 1268.68,1215.88 1269.26,1215.88 1269.85,1215.88 1270.44,1215.88 1271.02,1215.88 1271.61,1215.88 1272.19,1215.88 1272.78,1215.88 1273.37,1215.88 1273.95,1215.88 1274.54,1215.88 1275.13,1215.88 1275.71,1215.88 1276.3,1215.88 1276.89,1215.88 1277.47,1215.88 1278.06,1215.88 1278.65,1215.88 1279.23,1215.88 1279.82,1215.88 1280.4,1215.88 1280.99,1215.88 1281.58,1215.88 1282.16,1215.88 1282.75,1215.88 1283.34,1215.88 1283.92,1215.88 1284.51,1215.88 1285.1,1215.88 1285.68,1215.88 1286.27,1215.88 1286.86,1215.88 1287.44,1215.88 1288.03,1215.88 1288.61,1215.88 1289.2,1215.88 1289.79,1215.88 1290.37,1215.88 1290.96,1215.88 1291.55,1215.88 1292.13,1215.88 1292.72,1215.88 1293.31,1215.88 1293.89,1215.88 1294.48,1215.88 1295.06,1215.88 1295.65,1215.88 1296.24,1215.88 1296.82,1215.88 1297.41,1215.88 1298,1215.88 1298.58,1215.88 1299.17,1215.88 1299.76,1215.88 1300.34,1215.88 1300.93,1215.88 1301.52,1215.88 1302.1,1215.88 1302.69,1215.88 1303.27,1215.88 1303.86,1215.88 1304.45,1215.88 1305.03,1215.88 1305.62,1215.88 1306.21,1215.88 1306.79,1215.88 1307.38,1215.88 1307.97,1215.88 1308.55,1215.88 1309.14,1215.88 1309.73,1215.88 1310.31,1215.88 1310.9,1215.88 1311.48,1215.88 1312.07,1215.88 1312.66,1215.88 1313.24,1215.88 1313.83,1215.88 1314.42,1215.88 1315,1215.88 1315.59,1215.88 1316.18,1215.88 1316.76,1215.88 1317.35,1215.88 1317.93,1215.88 1318.52,1215.88 1319.11,1215.88 1319.69,1215.88 1320.28,1215.88 1320.87,1215.88 1321.45,1215.88 1322.04,1215.88 1322.63,1215.88 1323.21,1215.88 1323.8,1215.88 1324.39,1215.88 1324.97,1215.88 1325.56,1215.88 1326.14,1215.88 1326.73,1215.88 1327.32,1215.88 1327.9,1215.88 1328.49,1215.88 1329.08,1215.88 1329.66,1215.88 1330.25,1215.88 1330.84,1215.88 1331.42,1215.88 1332.01,1215.88 1332.6,1215.88 1333.18,1215.88 1333.77,1215.88 1334.35,1215.88 1334.94,1215.88 1335.53,1215.88 1336.11,1215.88 1336.7,1215.88 1337.29,1215.88 1337.87,1215.88 1338.46,1215.88 1339.05,1215.88 1339.63,1215.88 1340.22,1215.88 1340.8,1215.88 1341.39,1215.88 1341.98,1215.88 1342.56,1215.88 1343.15,1215.88 1343.74,1215.88 1344.32,1215.88 1344.91,1215.88 1345.5,1215.88 1346.08,1215.88 1346.67,1215.88 1347.26,1215.88 1347.84,1215.88 1348.43,1215.88 1349.01,1215.88 1349.6,1215.88 1350.19,1215.88 1350.77,1215.88 1351.36,1215.88 1351.95,1215.88 1352.53,1215.88 1353.12,1215.88 1353.71,1215.88 1354.29,1215.88 1354.88,1215.88 1355.47,1215.88 1356.05,1215.88 1356.64,1215.88 1357.22,1215.88 1357.81,1215.88 1358.4,1215.88 1358.98,1215.88 1359.57,1215.88 1360.16,1215.88 1360.74,1215.88 1361.33,1215.88 1361.92,1215.88 1362.5,1215.88 1363.09,1215.88 1363.68,1215.88 1364.26,1215.88 1364.85,1215.88 1365.43,1215.88 1366.02,1215.88 1366.61,1215.88 1367.19,1215.88 1367.78,1215.88 1368.37,1215.88 1368.95,1215.88 1369.54,1215.88 1370.13,1215.88 1370.71,1215.88 1371.3,1215.88 1371.88,1215.88 1372.47,1215.88 1373.06,1215.88 1373.64,1215.88 1374.23,1215.88 1374.82,1215.88 1375.4,1215.88 1375.99,1215.88 1376.58,1215.88 1377.16,1215.88 1377.75,1215.88 1378.34,1215.88 1378.92,1215.88 1379.51,1215.88 1380.09,1215.88 1380.68,1215.88 1381.27,1215.88 1381.85,1215.88 1382.44,1215.88 1383.03,1215.88 1383.61,1215.88 1384.2,1215.88 1384.79,1215.88 1385.37,1215.88 1385.96,1215.88 1386.55,1215.88 1387.13,1215.88 1387.72,1215.88 1388.3,1215.88 1388.89,1215.88 1389.48,1215.88 1390.06,1215.88 1390.65,1215.88 1391.24,1215.88 1391.82,1215.88 1392.41,1215.88 1393,1215.88 1393.58,1215.88 1394.17,1215.88 1394.75,1215.88 1395.34,1215.88 1395.93,1215.88 1396.51,1215.88 1397.1,1215.88 1397.69,1215.88 1398.27,1215.88 1398.86,1215.88 1399.45,1215.88 1400.03,1215.88 1400.62,1215.88 1401.21,1215.88 1401.79,1215.88 1402.38,1215.88 1402.96,1215.88 1403.55,1215.88 1404.14,1215.88 1404.72,1215.88 1405.31,1215.88 1405.9,1215.88 1406.48,1215.88 1407.07,1215.88 1407.66,1215.88 1408.24,1215.88 1408.83,1215.88 1409.42,1215.88 1410,1215.88 1410.59,1215.88 1411.17,1215.88 1411.76,1215.88 1412.35,1215.88 1412.93,1215.88 1413.52,1215.88 1414.11,1215.88 1414.69,1215.88 1415.28,1215.88 1415.87,1215.88 1416.45,1215.88 1417.04,1215.88 1417.63,1215.88 1418.21,1215.88 1418.8,1215.88 1419.38,1215.88 1419.97,1215.88 1420.56,1215.88 1421.14,1215.88 1421.73,1215.88 1422.32,1215.88 1422.9,1215.88 1423.49,1215.88 1424.08,1215.88 1424.66,1215.88 1425.25,1215.88 1425.83,1215.88 1426.42,1215.88 1427.01,1215.88 1427.59,1215.88 1428.18,1215.88 1428.77,1215.88 1429.35,1215.88 1429.94,1215.88 1430.53,1215.88 1431.11,1215.88 1431.7,1215.88 1432.29,1215.88 1432.87,1215.88 1433.46,1215.88 1434.04,1215.88 1434.63,1215.88 1435.22,1215.88 1435.8,1215.88 1436.39,1215.88 1436.98,1215.88 1437.56,1215.88 1438.15,1215.88 1438.74,1215.88 1439.32,1215.88 1439.91,1215.88 1440.5,1215.88 1441.08,1215.88 1441.67,1215.88 1442.25,1215.88 1442.84,1215.88 1443.43,1215.88 1444.01,1215.88 1444.6,1215.88 1445.19,1215.88 1445.77,1215.88 1446.36,1215.88 1446.95,1215.88 1447.53,1215.88 1448.12,1215.88 1448.7,1215.88 1449.29,1215.88 1449.88,1215.88 1450.46,1215.88 1451.05,1215.88 1451.64,1215.88 1452.22,1215.88 1452.81,1215.88 1453.4,1215.88 1453.98,1215.88 1454.57,1215.88 1455.16,1215.88 1455.74,1215.88 1456.33,1215.88 1456.91,1215.88 1457.5,1215.88 1458.09,1215.88 1458.67,1215.88 1459.26,1215.88 1459.85,1215.88 1460.43,1215.88 1461.02,1215.88 1461.61,1215.88 1462.19,1215.88 1462.78,1215.88 1463.37,1215.88 1463.95,1215.88 1464.54,1215.88 1465.12,1215.88 1465.71,1215.88 1466.3,1215.88 1466.88,1215.88 1467.47,1215.88 1468.06,1215.88 1468.64,1215.88 1469.23,1215.88 1469.82,1215.88 1470.4,1215.88 1470.99,1215.88 1471.57,1215.88 1472.16,1215.88 1472.75,1215.88 1473.33,1215.88 1473.92,1215.88 1474.51,1215.88 1475.09,1215.88 1475.68,1215.88 1476.27,1215.88 1476.85,1215.88 1477.44,1215.88 1478.03,1215.88 1478.61,1215.88 1479.2,1215.88 1479.78,1215.88 1480.37,1215.88 1480.96,1215.88 1481.54,1215.88 1482.13,1215.88 1482.72,1215.88 1483.3,1215.88 1483.89,1215.88 1484.48,1215.88 1485.06,1215.88 1485.65,1215.88 1486.24,1215.88 1486.82,1215.88 1487.41,1215.88 1487.99,1215.88 1488.58,1215.88 1489.17,1215.88 1489.75,1215.88 1490.34,1215.88 1490.93,1215.88 1491.51,1215.88 1492.1,1215.88 1492.69,1215.88 1493.27,1215.88 1493.86,1215.88 1494.45,1215.88 1495.03,1215.88 1495.62,1215.88 1496.2,1215.88 1496.79,1215.88 1497.38,1215.88 1497.96,1215.88 1498.55,1215.88 1499.14,1215.88 1499.72,1215.88 1500.31,1215.88 1500.9,1215.88 1501.48,1215.88 1502.07,1215.88 1502.65,1215.88 1503.24,1215.88 1503.83,1215.88 1504.41,1215.88 1505,1215.88 1505.59,1215.88 1506.17,1215.88 1506.76,1215.88 1507.35,1215.88 1507.93,1215.88 1508.52,1215.88 1509.11,1215.88 1509.69,1215.88 1510.28,1215.88 1510.86,1215.88 1511.45,1215.88 1512.04,1215.88 1512.62,1215.88 1513.21,1215.88 1513.8,1215.88 1514.38,1215.88 1514.97,1215.88 1515.56,1215.88 1516.14,1215.88 1516.73,1215.88 1517.32,1215.88 1517.9,1215.88 1518.49,1215.88 1519.07,1215.88 1519.66,1215.88 1520.25,1215.88 1520.83,1215.88 1521.42,1215.88 1522.01,1215.88 1522.59,1215.88 1523.18,1215.88 1523.77,1215.88 1524.35,1215.88 1524.94,1215.88 1525.52,1215.88 1526.11,1215.88 1526.7,1215.88 1527.28,1215.88 1527.87,1215.88 1528.46,1215.88 1529.04,1215.88 1529.63,1215.88 1530.22,1215.88 1530.8,1215.88 1531.39,1215.88 1531.98,1215.88 1532.56,1215.88 1533.15,1215.88 1533.73,1215.88 1534.32,1215.88 1534.91,1215.88 1535.49,1215.88 1536.08,1215.88 1536.67,1215.88 1537.25,1215.88 1537.84,1215.88 1538.43,1215.88 1539.01,1215.88 1539.6,1215.88 1540.19,1215.88 1540.77,1215.88 1541.36,1215.88 1541.94,1215.88 1542.53,1215.88 1543.12,1215.88 1543.7,1215.88 1544.29,1215.88 1544.88,1215.88 1545.46,1215.88 1546.05,1215.88 1546.64,1215.88 1547.22,1215.88 1547.81,1215.88 1548.4,1215.88 1548.98,1215.88 1549.57,1215.88 1550.15,1215.88 1550.74,1215.88 1551.33,1215.88 1551.91,1215.88 1552.5,1215.88 1553.09,1215.88 1553.67,1215.88 1554.26,1215.88 1554.85,1215.88 1555.43,1215.88 1556.02,1215.88 1556.6,1215.88 1557.19,1215.88 1557.78,1215.88 1558.36,1215.88 1558.95,1215.88 1559.54,1215.88 1560.12,1215.88 1560.71,1215.88 1561.3,1215.88 1561.88,1215.88 1562.47,1215.88 1563.06,1215.88 1563.64,1215.88 1564.23,1215.88 1564.81,1215.88 1565.4,1215.88 1565.99,1215.88 1566.57,1215.88 1567.16,1215.88 1567.75,1215.88 1568.33,1215.88 1568.92,1215.88 1569.51,1215.88 1570.09,1215.88 1570.68,1215.88 1571.27,1215.88 1571.85,1215.88 1572.44,1215.88 1573.02,1215.88 1573.61,1215.88 1574.2,1215.88 1574.78,1215.88 1575.37,1215.88 1575.96,1215.88 1576.54,1215.88 1577.13,1215.88 1577.72,1215.88 1578.3,1215.88 1578.89,1215.88 1579.47,1215.88 1580.06,1215.88 1580.65,1215.88 1581.23,1215.88 1581.82,1215.88 1582.41,1215.88 1582.99,1215.88 1583.58,1215.88 1584.17,1215.88 1584.75,1215.88 1585.34,1215.88 1585.93,1215.88 1586.51,1215.88 1587.1,1215.88 1587.68,1215.88 1588.27,1215.88 1588.86,1215.88 1589.44,1215.88 1590.03,1215.88 1590.62,1215.88 1591.2,1215.88 1591.79,1215.88 1592.38,1215.88 1592.96,1215.88 1593.55,1215.88 1594.14,1215.88 1594.72,1215.88 1595.31,1215.88 1595.89,1215.88 1596.48,1215.88 1597.07,1215.88 1597.65,1215.88 1598.24,1215.88 1598.83,1215.88 1599.41,1215.88 1600,1215.88 1600.59,1215.88 1601.17,1215.88 1601.76,1215.88 1602.34,1215.88 1602.93,1215.88 1603.52,1215.88 1604.1,1215.88 1604.69,1215.88 1605.28,1215.88 1605.86,1215.88 1606.45,1215.88 1607.04,1215.88 1607.62,1215.88 1608.21,1215.88 1608.8,1215.88 1609.38,1215.88 1609.97,1215.88 1610.55,1215.88 1611.14,1215.88 1611.73,1215.88 1612.31,1215.88 1612.9,1215.88 1613.49,1215.88 1614.07,1215.88 1614.66,1215.88 1615.25,1215.88 1615.83,1215.88 1616.42,1215.88 1617.01,1215.88 1617.59,1215.88 1618.18,1215.88 1618.76,1215.88 1619.35,1215.88 1619.94,1215.88 1620.52,1215.88 1621.11,1215.88 1621.7,1215.88 1622.28,1215.88 1622.87,1215.88 1623.46,1215.88 1624.04,1215.88 1624.63,1215.88 1625.22,1215.88 1625.8,1215.88 1626.39,1215.88 1626.97,1215.88 1627.56,1215.88 1628.15,1215.88 1628.73,1215.88 1629.32,1215.88 1629.91,1215.88 1630.49,1215.88 1631.08,1215.88 1631.67,1215.88 1632.25,1215.88 1632.84,1215.88 1633.42,1215.88 1634.01,1215.88 1634.6,1215.88 1635.18,1215.88 1635.77,1215.88 1636.36,1215.88 1636.94,1215.88 1637.53,1215.88 1638.12,1215.88 1638.7,1215.88 1639.29,1215.88 1639.88,1215.88 1640.46,1215.88 1641.05,1215.88 1641.63,1215.88 1642.22,1215.88 1642.81,1215.88 1643.39,1215.88 1643.98,1215.88 1644.57,1215.88 1645.15,1215.88 1645.74,1215.88 1646.33,1215.88 1646.91,1215.88 1647.5,1215.88 1648.09,1215.88 1648.67,1215.88 1649.26,1215.88 1649.84,1215.88 1650.43,1215.88 1651.02,1215.88 1651.6,1215.88 1652.19,1215.88 1652.78,1215.88 1653.36,1215.88 1653.95,1215.88 1654.54,1215.88 1655.12,1215.88 1655.71,1215.88 1656.29,1215.88 1656.88,1215.88 1657.47,1215.88 1658.05,1215.88 1658.64,1215.88 1659.23,1215.88 1659.81,1215.88 1660.4,1215.88 1660.99,1215.88 1661.57,1215.88 1662.16,1215.88 1662.75,1215.88 1663.33,1215.88 1663.92,1215.88 1664.5,1215.88 1665.09,1215.88 1665.68,1215.88 1666.26,1215.88 1666.85,1215.88 1667.44,1215.88 1668.02,1215.88 1668.61,1215.88 1669.2,1215.88 1669.78,1215.88 1670.37,1215.88 1670.96,1215.88 1671.54,1215.88 1672.13,1215.88 1672.71,1215.88 1673.3,1215.88 1673.89,1215.88 1674.47,1215.88 1675.06,1215.88 1675.65,1215.88 1676.23,1215.88 1676.82,1215.88 1677.41,1215.88 1677.99,1215.88 1678.58,1215.88 1679.17,1215.88 1679.75,1215.88 1680.34,1215.88 1680.92,1215.88 1681.51,1215.88 1682.1,1215.88 1682.68,1215.88 1683.27,1215.88 1683.86,1215.88 1684.44,1215.88 1685.03,1215.88 1685.62,1215.88 1686.2,1215.88 1686.79,1215.88 1687.37,1215.88 1687.96,1215.88 1688.55,1215.88 1689.13,1215.88 1689.72,1215.88 1690.31,1215.88 1690.89,1215.88 1691.48,1215.88 1692.07,1215.88 1692.65,1215.88 1693.24,1215.88 1693.83,1215.88 1694.41,1215.88 1695,1215.88 1695.58,1215.88 1696.17,1215.88 1696.76,1215.88 1697.34,1215.88 1697.93,1215.88 1698.52,1215.88 1699.1,1215.88 1699.69,1215.88 1700.28,1215.88 1700.86,1215.88 1701.45,1215.88 1702.04,1215.88 1702.62,1215.88 1703.21,1215.88 1703.79,1215.88 1704.38,1215.88 1704.97,1215.88 1705.55,1215.88 1706.14,1215.88 1706.73,1215.88 1707.31,1215.88 1707.9,1215.88 1708.49,1215.88 1709.07,1215.88 1709.66,1215.88 1710.24,1215.88 1710.83,1215.88 1711.42,1215.88 1712,1215.88 1712.59,1215.88 1713.18,1215.88 1713.76,1215.88 1714.35,1215.88 1714.94,1215.88 1715.52,1215.88 1716.11,1215.88 1716.7,1215.88 1717.28,1215.88 1717.87,1215.88 1718.45,1215.88 1719.04,1215.88 1719.63,1215.88 1720.21,1215.88 1720.8,1215.88 1721.39,1215.88 1721.97,1215.88 1722.56,1215.88 1723.15,1215.88 1723.73,1215.88 1724.32,1215.88 1724.91,1215.88 1725.49,1215.88 1726.08,1215.88 1726.66,1215.88 1727.25,1215.88 1727.84,1215.88 1728.42,1215.88 1729.01,1215.88 1729.6,1215.88 1730.18,1215.88 1730.77,1215.88 1731.36,1215.88 1731.94,1215.88 1732.53,1215.88 1733.11,1215.88 1733.7,1215.88 1734.29,1215.88 1734.87,1215.88 1735.46,1215.88 1736.05,1215.88 1736.63,1215.88 1737.22,1215.88 1737.81,1215.88 1738.39,1215.88 1738.98,1215.88 1739.57,1215.88 1740.15,1215.88 1740.74,1215.88 1741.32,1215.88 1741.91,1215.88 1742.5,1215.88 1743.08,1215.88 1743.67,1215.88 1744.26,1215.88 1744.84,1215.88 1745.43,1215.88 1746.02,1215.88 1746.6,1215.88 1747.19,1215.88 1747.78,1215.88 1748.36,1215.88 1748.95,1215.88 1749.53,1215.88 1750.12,1215.88 1750.71,1215.88 1751.29,1215.88 1751.88,1215.88 1752.47,1215.88 1753.05,1215.88 1753.64,1215.88 1754.23,1215.88 1754.81,1215.88 1755.4,1215.88 1755.99,1215.88 1756.57,1215.88 1757.16,1215.88 1757.74,1215.88 1758.33,1215.88 1758.92,1215.88 1759.5,1215.88 1760.09,1215.88 1760.68,1215.88 1761.26,1215.88 1761.85,1215.88 1762.44,1215.88 1763.02,1215.88 1763.61,1215.88 1764.19,1215.88 1764.78,1215.88 1765.37,1215.88 1765.95,1215.88 1766.54,1215.88 1767.13,1215.88 1767.71,1215.88 1768.3,1215.88 1768.89,1215.88 1769.47,1215.88 1770.06,1215.88 1770.65,1215.88 1771.23,1215.88 1771.82,1215.88 1772.4,1215.88 1772.99,1215.88 1773.58,1215.88 1774.16,1215.88 1774.75,1215.88 1775.34,1215.88 1775.92,1215.88 1776.51,1215.88 1777.1,1215.88 1777.68,1215.88 1778.27,1215.88 1778.86,1215.88 1779.44,1215.88 1780.03,1215.88 1780.61,1215.88 1781.2,1215.88 1781.79,1215.88 1782.37,1215.88 1782.96,1215.88 1783.55,1215.88 1784.13,1215.88 1784.72,1215.88 1785.31,1215.88 1785.89,1215.88 1786.48,1215.88 1787.06,1215.88 1787.65,1215.88 1788.24,1215.88 1788.82,1215.88 1789.41,1215.88 1790,1215.88 1790.58,1215.88 1791.17,1215.88 1791.76,1215.88 1792.34,1215.88 1792.93,1215.88 1793.52,1215.88 1794.1,1215.88 1794.69,1215.88 1795.27,1215.88 1795.86,1215.88 1796.45,1215.88 1797.03,1215.88 1797.62,1215.88 1798.21,1215.88 1798.79,1215.88 1799.38,1215.88 1799.97,1215.88 1800.55,1215.88 1801.14,1215.88 1801.73,1215.88 1802.31,1215.88 1802.9,1215.88 1803.48,1215.88 1804.07,1215.88 1804.66,1215.88 1805.24,1215.88 1805.83,1215.88 1806.42,1215.88 1807,1215.88 1807.59,1215.88 1808.18,1215.88 1808.76,1215.88 1809.35,1215.88 1809.94,1215.88 1810.52,1215.88 1811.11,1215.88 1811.69,1215.88 1812.28,1215.88 1812.87,1215.88 1813.45,1215.88 1814.04,1215.88 1814.63,1215.88 1815.21,1215.88 1815.8,1215.88 1816.39,1215.88 1816.97,1215.88 1817.56,1215.88 1818.14,1215.88 1818.73,1215.88 1819.32,1215.88 1819.9,1215.88 1820.49,1215.88 1821.08,1215.88 1821.66,1215.88 1822.25,1215.88 1822.84,1215.88 1823.42,1215.88 1824.01,1215.88 1824.6,1215.88 1825.18,1215.88 1825.77,1215.88 1826.35,1215.88 1826.94,1215.88 1827.53,1215.88 1828.11,1215.88 1828.7,1215.88 1829.29,1215.88 1829.87,1215.88 1830.46,1215.88 1831.05,1215.88 1831.63,1215.88 1832.22,1215.88 1832.81,1215.88 1833.39,1215.88 1833.98,1215.88 1834.56,1215.88 1835.15,1215.88 1835.74,1215.88 1836.32,1215.88 1836.91,1215.88 1837.5,1215.88 1838.08,1215.88 1838.67,1215.88 1839.26,1215.88 1839.84,1215.88 1840.43,1215.88 1841.01,1215.88 1841.6,1215.88 1842.19,1215.88 1842.77,1215.88 1843.36,1215.88 1843.95,1215.88 1844.53,1215.88 1845.12,1215.88 1845.71,1215.88 1846.29,1215.88 1846.88,1215.88 1847.47,1215.88 1848.05,1215.88 1848.64,1215.88 1849.22,1215.88 1849.81,1215.88 1850.4,1215.88 1850.98,1215.88 1851.57,1215.88 1852.16,1215.88 1852.74,1215.88 1853.33,1215.88 1853.92,1215.88 1854.5,1215.88 1855.09,1215.88 1855.68,1215.88 1856.26,1215.88 1856.85,1215.88 1857.43,1215.88 1858.02,1215.88 1858.61,1215.88 1859.19,1215.88 1859.78,1215.88 1860.37,1215.88 1860.95,1215.88 1861.54,1215.88 1862.13,1215.88 1862.71,1215.88 1863.3,1215.88 1863.88,1215.88 1864.47,1215.88 1865.06,1215.88 1865.64,1215.88 1866.23,1215.88 1866.82,1215.88 1867.4,1215.88 1867.99,1215.88 1868.58,1215.88 1869.16,1215.88 1869.75,1215.88 1870.34,1215.88 1870.92,1215.88 1871.51,1215.88 1872.09,1215.88 1872.68,1215.88 1873.27,1215.88 1873.85,1215.88 1874.44,1215.88 1875.03,1215.88 1875.61,1215.88 1876.2,1215.88 1876.79,1215.88 1877.37,1215.88 1877.96,1215.88 1878.55,1215.88 1879.13,1215.88 1879.72,1215.88 1880.3,1215.88 1880.89,1215.88 1881.48,1215.88 1882.06,1215.88 1882.65,1215.88 1883.24,1215.88 1883.82,1215.88 1884.41,1215.88 1885,1215.88 1885.58,1215.88 1886.17,1215.88 1886.76,1215.88 1887.34,1215.88 1887.93,1215.88 1888.51,1215.88 1889.1,1215.88 1889.69,1215.88 1890.27,1215.88 1890.86,1215.88 1891.45,1215.88 1892.03,1215.88 1892.62,1215.88 1893.21,1215.88 1893.79,1215.88 1894.38,1215.88 1894.96,1215.88 1895.55,1215.88 1896.14,1215.88 1896.72,1215.88 1897.31,1215.88 1897.9,1215.88 1898.48,1215.88 1899.07,1215.88 1899.66,1215.88 1900.24,1215.88 1900.83,1215.88 1901.42,1215.88 1902,1215.88 1902.59,1215.88 1903.17,1215.88 1903.76,1215.88 1904.35,1215.88 1904.93,1215.88 1905.52,1215.88 1906.11,1215.88 1906.69,1215.88 1907.28,1215.88 1907.87,1215.88 1908.45,1215.88 1909.04,1215.88 1909.63,1215.88 1910.21,1215.88 1910.8,1215.88 1911.38,1215.88 1911.97,1215.88 1912.56,1215.88 1913.14,1215.88 1913.73,1215.88 1914.32,1215.88 1914.9,1215.88 1915.49,1215.88 1916.08,1215.88 1916.66,1215.88 1917.25,1215.88 1917.83,1215.88 1918.42,1215.88 1919.01,1215.88 1919.59,1215.88 1920.18,1215.88 1920.77,1215.88 1921.35,1215.88 1921.94,1215.88 1922.53,1215.88 1923.11,1215.88 1923.7,1215.88 1924.29,1215.88 1924.87,1215.88 1925.46,1215.88 1926.04,1215.88 1926.63,1215.88 1927.22,1215.88 1927.8,1215.88 1928.39,1215.88 1928.98,1215.88 1929.56,1215.88 1930.15,1215.88 1930.74,1215.88 1931.32,1215.88 1931.91,1215.88 1932.5,1215.88 1933.08,1215.88 1933.67,1215.88 1934.25,1215.88 1934.84,1215.88 1935.43,1215.88 1936.01,1215.88 1936.6,1215.88 1937.19,1215.88 1937.77,1215.88 1938.36,1215.88 1938.95,1215.88 1939.53,1215.88 1940.12,1215.88 1940.71,1215.88 1941.29,1215.88 1941.88,1215.88 1942.46,1215.88 1943.05,1215.88 1943.64,1215.88 1944.22,1215.88 1944.81,1215.88 1945.4,1215.88 1945.98,1215.88 1946.57,1215.88 1947.16,1215.88 1947.74,1215.88 1948.33,1215.88 1948.91,1215.88 1949.5,1215.88 1950.09,1215.88 1950.67,1215.88 1951.26,1215.88 1951.85,1215.88 1952.43,1215.88 1953.02,1215.88 1953.61,1215.88 1954.19,1215.88 1954.78,1215.88 1955.37,1215.88 1955.95,1215.88 1956.54,1215.88 1957.12,1215.88 1957.71,1215.88 1958.3,1215.88 1958.88,1215.88 1959.47,1215.88 1960.06,1215.88 1960.64,1215.88 1961.23,1215.88 1961.82,1215.88 1962.4,1215.88 1962.99,1215.88 1963.58,1215.88 1964.16,1215.88 1964.75,1215.88 1965.33,1215.88 1965.92,1215.88 1966.51,1215.88 1967.09,1215.88 1967.68,1215.88 1968.27,1215.88 1968.85,1215.88 1969.44,1215.88 1970.03,1215.88 1970.61,1215.88 1971.2,1215.88 1971.78,1215.88 1972.37,1215.88 1972.96,1215.88 1973.54,1215.88 1974.13,1215.88 1974.72,1215.88 1975.3,1215.88 1975.89,1215.88 1976.48,1215.88 1977.06,1215.88 1977.65,1215.88 1978.24,1215.88 1978.82,1215.88 1979.41,1215.88 1979.99,1215.88 1980.58,1215.88 1981.17,1215.88 1981.75,1215.88 1982.34,1215.88 1982.93,1215.88 1983.51,1215.88 1984.1,1215.88 1984.69,1215.88 1985.27,1215.88 1985.86,1215.88 1986.45,1215.88 1987.03,1215.88 1987.62,1215.88 1988.2,1215.88 1988.79,1215.88 1989.38,1215.88 1989.96,1215.88 1990.55,1215.88 1991.14,1215.88 1991.72,1215.88 1992.31,1215.88 1992.9,1215.88 1993.48,1215.88 1994.07,1215.88 1994.65,1215.88 1995.24,1215.88 1995.83,1215.88 1996.41,1215.88 1997,1215.88 1997.59,1215.88 1998.17,1215.88 1998.76,1215.88 1999.35,1215.88 1999.93,1215.88 2000.52,1215.88 2001.11,1215.88 2001.69,1215.88 2002.28,1215.88 2002.86,1215.88 2003.45,1215.88 2004.04,1215.88 2004.62,1215.88 2005.21,1215.88 2005.8,1215.88 2006.38,1215.88 2006.97,1215.88 2007.56,1215.88 2008.14,1215.88 2008.73,1215.88 2009.32,1215.88 2009.9,1215.88 2010.49,1215.88 2011.07,1215.88 2011.66,1215.88 2012.25,1215.88 2012.83,1215.88 2013.42,1215.88 2014.01,1215.88 2014.59,1215.88 2015.18,1215.88 2015.77,1215.88 2016.35,1215.88 2016.94,1215.88 2017.53,1215.88 2018.11,1215.88 2018.7,1215.88 2019.28,1215.88 2019.87,1215.88 2020.46,1215.88 2021.04,1215.88 2021.63,1215.88 2022.22,1215.88 2022.8,1215.88 2023.39,1215.88 2023.98,1215.88 2024.56,1215.88 2025.15,1215.88 2025.73,1215.88 2026.32,1215.88 2026.91,1215.88 2027.49,1215.88 2028.08,1215.88 2028.67,1215.88 2029.25,1215.88 2029.84,1215.88 2030.43,1215.88 2031.01,1215.88 2031.6,1215.88 2032.19,1215.88 2032.77,1215.88 2033.36,1215.88 2033.94,1215.88 2034.53,1215.88 2035.12,1215.88 2035.7,1215.88 2036.29,1215.88 2036.88,1215.88 2037.46,1215.88 2038.05,1215.88 2038.64,1215.88 2039.22,1215.88 2039.81,1215.88 2040.4,1215.88 2040.98,1215.88 2041.57,1215.88 2042.15,1215.88 2042.74,1215.88 2043.33,1215.88 2043.91,1215.88 2044.5,1215.88 2045.09,1215.88 2045.67,1215.88 2046.26,1215.88 2046.85,1215.88 2047.43,1215.88 2048.02,1215.88 2048.6,1215.88 2049.19,1215.88 2049.78,1215.88 2050.36,1215.88 2050.95,1215.88 2051.54,1215.88 2052.12,1215.88 2052.71,1215.88 2053.3,1215.88 2053.88,1215.88 2054.47,1215.88 2055.06,1215.88 2055.64,1215.88 2056.23,1215.88 2056.81,1215.88 2057.4,1215.88 2057.99,1215.88 2058.57,1215.88 2059.16,1215.88 2059.75,1215.88 2060.33,1215.88 2060.92,1215.88 2061.51,1215.88 2062.09,1215.88 2062.68,1215.88 2063.27,1215.88 2063.85,1215.88 2064.44,1215.88 2065.02,1215.88 2065.61,1215.88 2066.2,1215.88 2066.78,1215.88 2067.37,1215.88 2067.96,1215.88 2068.54,1215.88 2069.13,1215.88 2069.72,1215.88 2070.3,1215.88 2070.89,1215.88 2071.48,1215.88 2072.06,1215.88 2072.65,1215.88 2073.23,1215.88 2073.82,1215.88 2074.41,1215.88 2074.99,1215.88 2075.58,1215.88 2076.17,1215.88 2076.75,1215.88 2077.34,1215.88 2077.93,1215.88 2078.51,1215.88 2079.1,1215.88 2079.68,1215.88 2080.27,1215.88 2080.86,1215.88 2081.44,1215.88 2082.03,1215.88 2082.62,1215.88 2083.2,1215.88 2083.79,1215.88 2084.38,1215.88 2084.96,1215.88 2085.55,1215.88 2086.14,1215.88 2086.72,1215.88 2087.31,1215.88 2087.89,1215.88 2088.48,1215.88 2089.07,1215.88 2089.65,1215.88 2090.24,1215.88 2090.83,1215.88 2091.41,1215.88 2092,1215.88 2092.59,1215.88 2093.17,1215.88 2093.76,1215.88 2094.35,1215.88 2094.93,1215.88 2095.52,1215.88 2096.1,1215.88 2096.69,1215.88 2097.28,1215.88 2097.86,1215.88 2098.45,1215.88 2099.04,1215.88 2099.62,1215.88 2100.21,1215.88 2100.8,1215.88 2101.38,1215.88 2101.97,1215.88 2102.55,1215.88 2103.14,1215.88 2103.73,1215.88 2104.31,1215.88 2104.9,1215.88 2105.49,1215.88 2106.07,1215.88 2106.66,1215.88 2107.25,1215.88 2107.83,1215.88 2108.42,1215.88 2109.01,1215.88 2109.59,1215.88 2110.18,1215.88 2110.76,1215.88 2111.35,1215.88 2111.94,1215.88 2112.52,1215.88 2113.11,1215.88 2113.7,1215.88 2114.28,1215.88 2114.87,1215.88 2115.46,1215.88 2116.04,1215.88 2116.63,1215.88 2117.22,1215.88 2117.8,1215.88 2118.39,1215.88 2118.97,1215.88 2119.56,1215.88 2120.15,1215.88 2120.73,1215.88 2121.32,1215.88 2121.91,1215.88 2122.49,1215.88 2123.08,1215.88 2123.67,1215.88 2124.25,1215.88 2124.84,1215.88 2125.42,1215.88 2126.01,1215.88 2126.6,1215.88 2127.18,1215.88 2127.77,1215.88 2128.36,1215.88 2128.94,1215.88 2129.53,1215.88 2130.12,1215.88 2130.7,1215.88 2131.29,1215.88 2131.88,1215.88 2132.46,1215.88 2133.05,1215.88 2133.63,1215.88 2134.22,1215.88 2134.81,1215.88 2135.39,1215.88 2135.98,1215.88 2136.57,1215.88 2137.15,1215.88 2137.74,1215.88 2138.33,1215.88 2138.91,1215.88 2139.5,1215.88 2140.09,1215.88 2140.67,1215.88 2141.26,1215.88 2141.84,1215.88 2142.43,1215.88 2143.02,1215.88 2143.6,1215.88 2144.19,1215.88 2144.78,1215.88 2145.36,1215.88 2145.95,1215.88 2146.54,1215.88 2147.12,1215.88 2147.71,1215.88 2148.3,1215.88 2148.88,1215.88 2149.47,1215.88 2150.05,1215.88 2150.64,1215.88 2151.23,1215.88 2151.81,1215.88 2152.4,1215.88 2152.99,1215.88 2153.57,1215.88 2154.16,1215.88 2154.75,1215.88 2155.33,1215.88 2155.92,1215.88 2156.5,1215.88 2157.09,1215.88 2157.68,1215.88 2158.26,1215.88 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.71,1198.87 1398.57,899.083 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.27 985.439,1198.87 2158.26,1198.87 2158.26,1232.27 985.439,1232.27 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip613\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip613)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6807.39 164.91,-7651.74 165.469,-8374.85 166.029,-9074.55 166.588,-9706.46 167.147,-9245.44 167.706,-9802.23 168.266,-10282.8 168.825,-10728.6 169.384,-11123.7 169.943,-11471.5 170.503,-11062.1 171.062,-11374.1 171.621,-11635.8 172.18,-11859.2 172.74,-12056.2 173.299,-12210.4 173.858,-12342.9 174.417,-11981.8 174.977,-11638 175.536,-11700.5 176.095,-11382.5 176.655,-11412.9 177.214,-11107.8 177.773,-10793.4 178.332,-10530.3 178.892,-10251.9 179.451,-10214 180.01,-10172.4 180.569,-9911.75 181.129,-9633.98 181.688,-9566.86 182.247,-9476.54 182.806,-9220.9 183.366,-8983.87 183.925,-8610.56 184.484,-8516.97 185.043,-8269.27 185.603,-8025.7 186.162,-7806.42 186.721,-7699.62 187.28,-7585.66 187.84,-7375.17 188.399,-7263.97 188.958,-7153.83 189.517,-7041.49 190.077,-6841.63 190.636,-6647.57 191.195,-6533.81 191.754,-6340.72 192.314,-6078.27 192.873,-5969.13 193.432,-5789.38 193.991,-5611.08 194.551,-5432.84 195.11,-5255.56 195.669,-5140.07 196.228,-5023.83 196.788,-4855.23 197.347,-4635.47 197.906,-4423.86 198.465,-4224.55 199.025,-4032.41 199.584,-3800.74 200.143,-3666.12 200.702,-3539.96 201.262,-3456.03 201.821,-3255.13 202.38,-3100.24 202.939,-2985.79 203.499,-2874.11 204.058,-2725.01 204.617,-2656.56 205.176,-2549.39 205.736,-2446.28 206.295,-2245.28 206.854,-2149.37 207.413,-2057.46 207.973,-1965.15 208.532,-1815.18 209.091,-1758 209.65,-1613.38 210.21,-1445.09 210.769,-1340.92 211.328,-1268.38 211.887,-1115.31 212.447,-1077.77 213.006,-959.644 213.565,-929.01 214.124,-844.123 214.684,-812.219 215.243,-730.855 215.802,-671.721 216.361,-614.11 216.921,-558.684 217.48,-503.271 218.039,-449.419 218.598,-372.974 219.158,-302.752 219.717,-251.838 220.276,-228.978 220.835,-160.634 221.395,-96.3247 221.954,11.0165 222.513,203.055 223.072,210.248 223.632,238.552 224.191,265.134 224.75,357.55 225.309,403.477 225.869,405.923 226.428,449.051 226.987,468.741 227.546,448.989 228.106,493.59 228.665,516.157 229.224,518.522 229.783,563.125 230.343,583.517 230.902,623.6 231.461,660.015 232.02,655.538 232.58,655.804 233.139,675.712 233.698,672.118 234.257,711.239 234.817,707.641 235.376,720.213 235.935,720.497 236.494,797.038 237.054,793.208 237.613,792.37 238.172,829.725 238.731,847.585 239.291,842.972 239.85,859.863 240.409,856.566 240.968,873.445 241.528,891.301 242.087,887.877 242.646,902.374 243.205,916.605 243.765,927.005 244.324,938.397 244.883,933.781 245.442,944.028 246.002,957.407 246.561,986.152 247.12,996.81 247.679,1039.4 248.239,1030.68 248.798,1021.17 249.357,1030.34 249.916,1040.36 250.476,1049.04 251.035,1022.16 251.594,983.595 252.153,1013.93 252.713,1025.1 253.272,1015.74 253.831,991.628 254.39,1037.22 254.95,1031.19 255.509,1005.44 256.068,1015.55 256.627,991.664 257.187,968.357 257.746,951.812 258.305,954.133 258.864,955.48 259.424,958.068 259.983,940.84 260.542,957.343 261.101,988.036 261.661,1019.78 262.22,1064.54 262.779,1105.71 263.338,1095.27 263.898,1051.94 264.457,1082.6 265.016,1055.36 265.575,1064.44 266.135,1071.5 266.694,1080.91 267.253,1078.17 267.812,1051.61 268.372,1039.87 268.931,1052.95 269.49,1045.79 270.049,1058.21 270.609,1035.54 271.168,1032.41 271.727,1042.54 272.286,1057.99 272.846,1102.13 273.405,1077.01 273.964,1104.17 274.523,1113.9 275.083,1104.06 275.642,1095.02 276.201,1055.43 276.76,1068.85 277.32,1062.1 277.879,1072.99 278.438,1048.82 278.997,1076.5 279.557,1052.45 280.116,1061.8 280.675,1070.89 281.234,1065.28 281.794,1085.78 282.353,1109.14 282.912,1116.36 283.471,1106.12 284.031,1109.78 284.59,1083.76 285.149,1075.86 285.708,1070.17 286.268,1076.06 286.827,1085.66 287.386,1095.74 287.945,1134.42 288.505,1137.86 289.064,1112.11 289.623,1117.4 290.182,1137.08 290.742,1092.72 291.301,1084.08 291.86,1094.66 292.419,1054.62 292.979,1049.95 293.538,1072.66 294.097,1113.68 294.656,1136.83 295.216,1123.93 295.775,1112.4 296.334,1104.62 296.893,1095.88 297.453,1088.46 298.012,1045.49 298.571,1041.17 299.13,1016.94 299.69,1010.78 300.249,1005.48 300.808,1014.44 301.368,1028.57 301.927,1005.76 302.486,1000.89 303.045,1044.18 303.605,1056.5 304.164,1031.11 304.723,1026.75 305.282,1005.24 305.842,985.975 306.401,981.62 306.96,993.809 307.519,994.447 308.079,987.267 308.638,980.268 309.197,960.08 309.756,955.974 310.316,934.289 310.875,933.505 311.434,951.791 311.993,898.038 312.553,897.243 313.112,914.285 313.671,912.793 314.23,929.409 314.79,894.74 315.349,845.897 315.908,899.637 316.467,866.73 317.027,885.642 317.586,921.249 318.145,936.11 318.704,936.539 319.264,919.751 319.823,932.951 320.382,946.742 320.941,909.861 321.501,910.858 322.06,925.549 322.619,970.963 323.178,964.322 323.738,976.123 324.297,974.492 324.856,984.814 325.415,980.054 325.975,993.228 326.534,969.048 327.093,1010.71 327.652,988.67 328.212,953.595 328.771,934.6 329.33,916.693 329.889,935.26 330.449,933.44 331.008,914.514 331.567,897.674 332.126,895.096 332.686,926.966 333.245,940.056 333.804,938.241 334.363,966.117 334.923,959.047 335.482,968.211 336.041,964.154 336.6,972.679 337.16,979.592 337.719,987.85 338.278,964.319 338.837,925.557 339.397,937.896 339.956,902.208 340.515,885.536 341.074,847.979 341.634,877.551 342.193,877.894 342.752,859.554 343.311,872.862 343.871,857.032 344.43,842.98 344.989,844.802 345.548,860.48 346.108,873.73 346.667,890.481 347.226,888.088 347.785,868.232 348.345,866.964 348.904,865.827 349.463,946.126 350.022,940.62 350.582,918.814 351.141,916.414 351.7,914.672 352.259,913.066 352.819,892.593 353.378,855.917 353.937,870.138 354.496,849.796 355.056,865.632 355.615,847.353 356.174,847.695 356.733,862.644 357.293,843.85 357.852,842.381 358.411,825.162 358.97,873.71 359.53,838.78 360.089,837.61 360.648,837.678 361.207,852.401 361.767,835.485 362.326,834.013 362.885,835.173 363.444,835.258 364.004,869.921 364.563,882.268 365.122,880.449 365.681,857.457 366.241,887.726 366.8,888.047 367.359,884.664 367.918,862.54 368.478,848.033 369.037,880.754 369.596,878.095 370.155,894.137 370.715,874.659 371.274,869.742 371.833,882.909 372.392,879.027 372.952,860.488 373.511,856.788 374.07,867.669 374.629,847.974 375.189,833.719 375.748,869.38 376.307,898.149 376.866,877.074 377.426,873.694 377.985,900.459 378.544,876.955 379.103,890.096 379.663,872.291 380.222,881.816 380.781,893.537 381.34,885.83 381.9,881.756 382.459,874.744 383.018,889.165 383.577,882.473 384.137,915.223 384.696,891.734 385.255,886.369 385.814,912.852 386.374,918.874 386.933,927.319 387.492,918.832 388.051,916.76 388.611,895.811 389.17,872.483 389.729,898.695 390.288,910.619 390.848,905.242 391.407,867.463 391.966,863.539 392.525,875.812 393.085,883.951 393.644,894.266 394.203,837.691 394.762,848.235 395.322,895.919 395.881,873.943 396.44,884.006 396.999,859.497 397.559,867.475 398.118,880.061 398.677,872.74 399.236,870.817 399.796,839.644 400.355,837.507 400.914,816.678 401.473,813.04 402.033,812.334 402.592,813.188 403.151,792.771 403.71,792.654 404.27,792.117 404.829,772.767 405.388,768.681 405.947,787.8 406.507,772.012 407.066,755.122 407.625,789.205 408.184,803.045 408.744,800.004 409.303,814.096 409.862,830.586 410.421,811.997 410.981,806.427 411.54,771.663 412.099,790.262 412.658,838.349 413.218,818.901 413.777,848.692 414.336,845.073 414.895,844.376 415.455,838.176 416.014,820.672 416.573,851.346 417.132,847.569 417.692,794.331 418.251,790.194 418.81,788.713 419.369,755.179 419.929,754.258 420.488,756.883 421.047,759.112 421.606,760.897 422.166,792.135 422.725,786.721 423.284,785.163 423.843,763.581 424.403,733.217 424.962,748.304 425.521,735.796 426.08,768.959 426.64,755.664 427.199,740.311 427.758,759.946 428.318,746.613 428.877,795.841 429.436,825.154 429.995,821.186 430.555,803.059 431.114,815.477 431.673,814.826 432.232,793.064 432.792,775.606 433.351,791.985 433.91,789.865 434.469,785.043 435.029,782.96 435.588,765.022 436.147,777.942 436.706,793.258 437.266,808.88 437.825,775.55 438.384,772.465 438.943,824.294 439.503,855.522 440.062,833.024 440.621,845.278 441.18,854.114 441.74,833.905 442.299,861.647 442.858,857.967 443.417,836.279 443.977,832.579 444.536,909.487 445.095,903.272 445.654,879.767 446.214,856.171 446.773,848.36 447.332,893.153 447.891,873.998 448.451,867.499 449.01,878.815 449.569,890 450.128,900.757 450.688,911.125 451.247,901.958 451.806,892.361 452.365,850.26 452.925,859.599 453.484,870.697 454.043,850.368 454.602,830.445 455.162,824.124 455.721,821.223 456.28,818.151 456.839,828.587 457.399,856.396 457.958,818.378 458.517,801.147 459.076,782.551 459.636,783.942 460.195,761.715 460.754,761.613 461.313,765.488 461.873,764.98 462.432,793.467 462.991,789.055 463.55,786.087 464.11,803.483 464.669,801.43 465.228,833.381 465.787,841.246 466.347,849.451 466.906,840.297 467.465,832.842 468.024,827.481 468.584,790.961 469.143,804.731 469.702,813.697 470.261,825.879 470.821,851.941 471.38,846.989 471.939,855.774 472.498,850.257 473.058,827.849 473.617,820.589 474.176,796.801 474.735,810.587 475.295,839.686 475.854,835.059 476.413,844.859 476.972,841.223 477.532,868.15 478.091,860.329 478.65,869.358 479.209,863.994 479.769,857.148 480.328,883.045 480.887,856.564 481.446,880.689 482.006,875.405 482.565,871.44 483.124,898.024 483.683,921.478 484.243,909.638 484.802,869.743 485.361,879.168 485.92,903.937 486.48,893.826 487.039,854.511 487.598,812.55 488.157,812.735 488.717,793.089 489.276,821.996 489.835,821.106 490.394,832.62 490.954,841.596 491.513,819.748 492.072,828.256 492.631,837.912 493.191,837.253 493.75,817.549 494.309,745.579 494.868,713.752 495.428,717.596 495.987,684.941 496.546,655.717 497.105,657.987 497.665,690.022 498.224,677.815 498.783,697.016 499.342,698.962 499.902,702.223 500.461,691.331 501.02,692.694 501.579,713.654 502.139,714.059 502.698,744.17 503.257,743.425 503.816,726.709 504.376,725.702 504.935,758.781 505.494,759.169 506.053,756.751 506.613,785.367 507.172,765.03 507.731,797.477 508.29,780.544 508.85,746.012 509.409,777.175 509.968,775.154 510.527,742.105 511.087,755.952 511.646,754.497 512.205,719.951 512.764,703.341 513.324,704.367 513.883,692.025 514.442,707.333 515.001,694.768 515.561,699.574 516.12,700.108 516.679,684.461 517.238,700.743 517.798,624.233 518.357,645.44 518.916,650.328 519.475,653.881 520.035,645.28 520.594,665.378 521.153,651.368 521.712,641.84 522.272,679.398 522.831,651.566 523.39,656.912 523.949,646.766 524.509,650.903 525.068,623.135 525.627,594.384 526.186,584.214 526.746,590.125 527.305,595.422 527.864,618.331 528.423,622.783 528.983,630.18 529.542,632.892 530.101,671.748 530.66,641.928 531.22,657.875 531.779,645.427 532.338,650.489 532.897,638.722 533.457,626.643 534.016,630.549 534.575,618.1 535.134,621.351 535.694,645.355 536.253,666.271 536.812,669.457 537.371,641.204 537.931,647.857 538.49,684.042 539.049,670.709 539.608,658.9 540.168,677.653 540.727,697.612 541.286,711.026 541.845,697.712 542.405,734.869 542.964,734.96 543.523,701.706 544.082,704.804 544.642,707.896 545.201,710.539 545.76,677.871 546.319,633.899 546.879,701.471 547.438,715.656 547.997,736.147 548.556,703.621 549.116,702.465 549.675,702.487 550.234,707.387 550.793,692.454 551.353,695.831 551.912,699.179 552.471,686.969 553.031,707.398 553.59,693.961 554.149,708.787 554.708,728.684 555.268,729.571 555.827,733.29 556.386,735.756 556.945,736.052 557.505,703.937 558.064,718.973 558.623,719.843 559.182,754.699 559.742,753.753 560.301,737.352 560.86,754.37 561.419,734.079 561.979,733.8 562.538,733.718 563.097,734.191 563.656,734.007 564.216,732.323 564.775,698.745 565.334,686.115 565.893,673.295 566.453,677.043 567.012,681.84 567.571,683.873 568.13,705.403 568.69,674.786 569.249,692.284 569.808,665.658 570.367,716.511 570.927,718.523 571.486,717.096 572.045,717.251 572.604,716.528 573.164,744.681 573.723,758.022 574.282,754.037 574.841,755.012 575.401,753.546 575.96,737.874 576.519,720.086 577.078,703.906 577.638,706.097 578.197,705.378 578.756,706.056 579.315,691.754 579.875,677.908 580.434,693.85 580.993,710.875 581.552,740.301 582.112,741.035 582.671,739.266 583.23,753.659 583.789,770.179 584.349,782.673 584.908,747.39 585.467,729.972 586.026,728.413 586.586,718.553 587.145,717.536 587.704,748.072 588.263,749.183 588.823,748.529 589.382,746.548 589.941,761.943 590.5,746.672 591.06,730.962 591.619,713.509 592.178,711.135 592.737,677.102 593.297,677.571 593.856,663.306 594.415,665.649 594.974,684.9 595.534,669.846 596.093,672.17 596.652,659.102 597.211,640.65 597.771,643.683 598.33,646.801 598.889,620.636 599.448,644.781 600.008,666.138 600.567,653.103 601.126,640.625 601.685,674.648 602.245,674.226 602.804,661.274 603.363,696.348 603.922,693.708 604.482,693.32 605.041,694.318 605.6,693.824 606.159,741.56 606.719,691.395 607.278,691.416 607.837,708.084 608.396,723.709 608.956,723.981 609.515,738.241 610.074,719.767 610.633,719.804 611.193,720.555 611.752,736.438 612.311,751.366 612.87,746.383 613.43,744.299 613.989,743.699 614.548,709.98 615.107,695.248 615.667,710.554 616.226,711.04 616.785,712.965 617.344,679.073 617.904,694.954 618.463,681.89 619.022,648.409 619.581,603.138 620.141,611.062 620.7,600.738 621.259,607.606 621.818,581.386 622.378,603.243 622.937,625.844 623.496,662.953 624.055,667.408 624.615,667.013 625.174,669.077 625.733,686.152 626.292,671.936 626.852,658.052 627.411,660.743 627.97,678.861 628.529,695.262 629.089,711.242 629.648,726.342 630.207,705.649 630.766,703.919 631.326,702.21 631.885,703.658 632.444,735.761 633.003,731.063 633.563,731.695 634.122,728.213 634.681,713.551 635.24,744.804 635.8,773.782 636.359,721.658 636.918,756.46 637.477,785.821 638.037,796.088 638.596,789.99 639.155,783.55 639.714,746.16 640.274,748.489 640.833,741.819 641.392,751.332 641.951,782.546 642.511,759.559 643.07,736.344 643.629,720.082 644.188,734.576 644.748,732.12 645.307,733.077 645.866,732.511 646.425,749.849 646.985,762.941 647.544,728.67 648.103,709.185 648.662,722.185 649.222,718.629 649.781,714.436 650.34,696.916 650.899,680.238 651.459,694.302 652.018,682.605 652.577,697.723 653.136,715.138 653.696,746.432 654.255,744.368 654.814,662.617 655.373,648.675 655.933,668.279 656.492,688.225 657.051,707.446 657.61,721.342 658.17,706.388 658.729,702.768 659.288,700.954 659.847,700.256 660.407,698.069 660.966,714.579 661.525,732.186 662.084,729.358 662.644,713.525 663.203,712.449 663.762,711.34 664.321,727.471 664.881,725.63 665.44,708.01 665.999,690.878 666.558,705.817 667.118,705.929 667.677,676.156 668.236,678.148 668.795,661.962 669.355,681.321 669.914,682.006 670.473,714.282 671.032,709.66 671.592,711.118 672.151,740.284 672.71,768.754 673.269,766.388 673.829,776.745 674.388,772.24 674.947,766.008 675.506,761.765 676.066,726.224 676.625,740.625 677.184,755.181 677.743,751.127 678.303,747.513 678.862,730.551 679.421,712.843 679.981,711.448 680.54,709.003 681.099,721.768 681.658,752.205 682.218,768.119 682.777,797.279 683.336,790.721 683.895,769.641 684.455,702.483 685.014,687.625 685.573,703.713 686.132,720.506 686.692,720.24 687.251,686.921 687.81,704.15 688.369,737.735 688.929,737.786 689.488,721.409 690.047,736.031 690.606,736.745 691.166,732.477 691.725,749.212 692.284,732.494 692.843,717.866 693.403,715.92 693.962,699.36 694.521,683.907 695.08,685.884 695.64,683.958 696.199,670.22 696.758,686.54 697.317,686.713 697.877,684.716 698.436,670.832 698.995,685.521 699.554,685.515 700.114,653.368 700.673,693.209 701.232,693.352 701.791,712.007 702.351,727.6 702.91,710.687 703.469,709.868 704.028,710.554 704.588,726.304 705.147,695.038 705.706,696.768 706.265,694.433 706.825,722.698 707.384,736.783 707.943,702.065 708.502,702.442 709.062,710.542 709.621,711.128 710.18,723.822 710.739,707.245 711.299,692.096 711.858,692.986 712.417,689.12 712.976,700.101 713.536,734.741 714.095,714.444 714.654,728.131 715.213,710.104 715.773,727.183 716.332,707.056 716.891,708.784 717.45,691.893 718.01,708.08 718.569,686.884 719.128,655.407 719.687,640.524 720.247,676.326 720.806,675.065 721.365,709.303 721.924,691.19 722.484,702.697 723.043,719.833 723.602,702.922 724.161,703.489 724.721,718.357 725.28,701.626 725.839,717.658 726.398,715.852 726.958,722.682 727.517,718.905 728.076,719.563 728.635,734.957 729.195,713.472 729.754,727.923 730.313,756.704 730.872,768.16 731.432,748.146 731.991,744.845 732.55,772.428 733.109,752.099 733.669,750.768 734.228,807.2 734.787,754.052 735.346,781.311 735.906,759.52 736.465,742.105 737.024,754.713 737.583,765.324 738.143,792.912 738.702,787.213 739.261,767.062 739.82,775.371 740.38,771.444 740.939,748.888 741.498,762.695 742.057,774.045 742.617,787.837 743.176,766.493 743.735,775.543 744.294,750.827 744.854,751.523 745.413,733.551 745.972,731.619 746.531,725.366 747.091,725.791 747.65,694.177 748.209,709.446 748.768,706.672 749.328,721.797 749.887,700.694 750.446,701.257 751.005,731.885 751.565,701.797 752.124,718.713 752.683,714.097 753.242,680.546 753.802,682.735 754.361,697.767 754.92,680.71 755.479,682.893 756.039,683.82 756.598,697.905 757.157,698.215 757.716,698.561 758.276,697.601 758.835,701.855 759.394,717.311 759.953,711.843 760.513,712.469 761.072,693.695 761.631,692.537 762.19,708.947 762.75,692.947 763.309,707.417 763.868,708.728 764.427,660.475 764.987,614.932 765.546,601.833 766.105,607.292 766.664,612.882 767.224,633.572 767.783,621.428 768.342,627.624 768.901,646.262 769.461,645.5 770.02,676.24 770.579,711.278 771.138,695.817 771.698,662.497 772.257,682.036 772.816,678.421 773.375,649.581 773.935,666.759 774.494,687.358 775.053,638.099 775.612,624.645 776.172,645.671 776.731,679.555 777.29,677.098 777.849,662.571 778.409,634.636 778.968,640.605 779.527,657.633 780.086,660.434 780.646,647.143 781.205,621.464 781.764,610.685 782.323,580.063 782.883,587.972 783.442,591.992 784.001,597.333 784.56,586.526 785.12,607.438 785.679,598.602 786.238,572.775 786.797,628.704 787.357,634.136 787.916,620.037 788.475,639.367 789.034,615.87 789.594,617.814 790.153,638.617 790.712,625.534 791.271,630.006 791.831,602.034 792.39,609.08 792.949,645.541 793.508,651.983 794.068,670.578 794.627,654.71 795.186,655.598 795.745,656.923 796.305,677.47 796.864,711.671 797.423,725.739 797.982,708.165 798.542,690.824 799.101,708.284 799.66,708.911 800.219,710.625 800.779,707.338 801.338,723.359 801.897,725.46 802.456,753.342 803.016,748.459 803.575,710.655 804.134,677.751 804.693,695.749 805.253,729.315 805.812,696.907 806.371,665.044 806.931,686.461 807.49,669.192 808.049,621.863 808.608,642.346 809.168,626.092 809.727,694.476 810.286,677.105 810.845,680.223 811.405,695.879 811.964,745.409 812.523,726.074 813.082,724.57 813.642,737.749 814.201,719.777 814.76,685.834 815.319,719.585 815.879,718.186 816.438,715.599 816.997,699.292 817.556,716.224 818.116,694.701 818.675,691.419 819.234,709.472 819.793,710.129 820.353,709.139 820.912,686.985 821.471,686.41 822.03,705.621 822.59,686.673 823.149,684.066 823.708,684.079 824.267,665.053 824.827,666.778 825.386,697.471 825.945,713.225 826.504,711.844 827.064,694.779 827.623,727.266 828.182,712.071 828.741,710.12 829.301,691.96 829.86,740.219 830.419,706.764 830.978,708.763 831.538,744.971 832.097,756.896 832.656,785.214 833.215,744.847 833.775,742.9 834.334,743.239 834.893,721.888 835.452,702.018 836.012,666.598 836.571,652.238 837.13,640.17 837.689,643.885 838.249,598.631 838.808,601.761 839.367,606 839.926,597.038 840.486,603.763 841.045,621.926 841.604,624.066 842.163,643.697 842.723,628.161 843.282,619.322 843.841,641.988 844.4,665.484 844.96,632.916 845.519,670.132 846.078,657.785 846.637,646.304 847.197,634.937 847.756,653.908 848.315,672.607 848.874,673.788 849.434,659.574 849.993,661.108 850.552,647.405 851.111,685.348 851.671,683.308 852.23,700.202 852.789,716.712 853.348,717.3 853.908,730.852 854.467,712.671 855.026,711.648 855.585,695.534 856.145,696.747 856.704,663.177 857.263,664.096 857.822,664.16 858.382,666.642 858.941,668.415 859.5,669.393 860.059,676.256 860.619,678.295 861.178,712.728 861.737,709.882 862.296,710.017 862.856,707.315 863.415,655.851 863.974,675.648 864.533,660.686 865.093,631.573 865.652,649.412 866.211,651.972 866.77,671.428 867.33,657.455 867.889,705.449 868.448,718.801 869.007,730.08 869.567,731.021 870.126,693.141 870.685,695.368 871.244,759.96 871.804,739.332 872.363,732.47 872.922,762.951 873.481,727.356 874.041,725.867 874.6,707.301 875.159,656.397 875.718,674.954 876.278,676.203 876.837,676.525 877.396,658.183 877.955,676.277 878.515,630.935 879.074,617.032 879.633,635.796 880.192,637.695 880.752,652.064 881.311,669.528 881.87,699.18 882.429,696.368 882.989,678.067 883.548,681.716 884.107,666.64 884.666,670.594 885.226,656.206 885.785,658.219 886.344,640.197 886.903,630.514 887.463,652.735 888.022,637.897 888.581,623.498 889.14,646.421 889.7,680.206 890.259,662.356 890.818,649.897 891.377,631.37 891.937,619.806 892.496,692.299 893.055,660.952 893.614,711.945 894.174,680.78 894.733,678.947 895.292,697.896 895.851,699.805 896.411,683.344 896.97,698.641 897.529,701.09 898.088,698.424 898.648,696.467 899.207,680.432 899.766,679.689 900.325,694.41 900.885,695.089 901.444,695.12 902.003,711.269 902.562,726.312 903.122,736.506 903.681,750.994 904.24,743.801 904.799,740.343 905.359,769.268 905.918,784.404 906.477,776.977 907.036,771.002 907.596,765.809 908.155,775.811 908.714,755.798 909.273,770.1 909.833,751.771 910.392,734.965 910.951,718.243 911.51,717.812 912.07,717.193 912.629,684.277 913.188,729.615 913.747,693.934 914.307,706.207 914.866,688.129 915.425,704.319 915.984,733.958 916.544,760.203 917.103,804.303 917.662,779.28 918.221,776.706 918.781,753.93 919.34,734.956 919.899,684.551 920.458,699.952 921.018,697.338 921.577,696.18 922.136,682.794 922.695,678.96 923.255,695.267 923.814,692.957 924.373,692.867 924.932,707.388 925.492,717.983 926.051,732.489 926.61,712.382 927.169,726.832 927.729,744.012 928.288,711.077 928.847,726.639 929.406,678.989 929.966,707.73 930.525,671.338 931.084,702.271 931.644,683.577 932.203,663.736 932.762,662.198 933.321,662.466 933.881,648.563 934.44,600.611 934.999,601.09 935.558,608.588 936.118,611.527 936.677,614.901 937.236,633.815 937.795,655.647 938.355,672.757 938.914,638.18 939.473,655.469 940.032,658.394 940.592,721.675 941.151,688.019 941.71,655.588 942.269,642.148 942.829,676.619 943.388,657.244 943.947,691.353 944.506,659.454 945.066,647.296 945.625,647.338 946.184,697.075 946.743,678.619 947.303,678.645 947.862,657.105 948.421,641.125 948.98,629.708 949.54,629.197 950.099,615.3 950.658,570.687 951.217,591.954 951.777,580.083 952.336,604.599 952.895,626.508 953.454,629.926 954.014,602.212 954.573,638.228 955.132,641.469 955.691,640.797 956.251,625.451 956.81,625.964 957.369,663.354 957.928,661.437 958.488,678.087 959.047,695.696 959.606,696.335 960.165,676.254 960.725,661.699 961.284,679.943 961.843,650.724 962.402,655.547 962.962,655.487 963.521,638.34 964.08,641.332 964.639,611.104 965.199,632.3 965.758,668.905 966.317,639.072 966.876,640.861 967.436,648.809 967.995,685.184 968.554,670.122 969.113,670.2 969.673,701.166 970.232,683.843 970.791,687.321 971.35,690.51 971.91,718.841 972.469,704.254 973.028,735.843 973.587,716.327 974.147,712.88 974.706,724.637 975.265,708.288 975.824,692.89 976.384,722.583 976.943,720.437 977.502,784.174 978.061,763.502 978.621,758.401 979.18,786.71 979.739,797.519 980.298,808.818 980.858,784.101 981.417,779.757 981.976,775.774 982.535,753.577 983.095,760.895 983.654,738.475 984.213,704.028 984.772,715.977 985.332,715.295 985.891,744.77 986.45,740.553 987.009,752.339 987.569,748.216 988.128,732.533 988.687,729.562 989.246,729.271 989.806,726.503 990.365,706.96 990.924,676.254 991.483,692.482 992.043,676.314 992.602,695.473 993.161,710.031 993.72,724.524 994.28,739.554 994.839,733.702 995.398,716.284 995.957,734.845 996.517,778.944 997.076,822.668 997.635,793.434 998.194,805.481 998.754,784.651 999.313,762.471 999.872,746.794 1000.43,745.48 1000.99,729.314 1001.55,725.645 1002.11,722.358 1002.67,720.816 1003.23,717.727 1003.79,729.556 1004.35,712.86 1004.91,709.353 1005.46,718.866 1006.02,669.601 1006.58,637.357 1007.14,638.947 1007.7,639.542 1008.26,642.73 1008.82,616.473 1009.38,602.905 1009.94,676.444 1010.5,644.151 1011.06,626.212 1011.62,645.5 1012.18,661.503 1012.73,644.567 1013.29,614.226 1013.85,620.63 1014.41,624.472 1014.97,592.752 1015.53,619.408 1016.09,606.468 1016.65,622.041 1017.21,605.748 1017.77,611.316 1018.33,585.852 1018.89,592.918 1019.45,598.175 1020.01,584.256 1020.56,591.339 1021.12,612.485 1021.68,613.867 1022.24,648.254 1022.8,665.39 1023.36,665.743 1023.92,650.461 1024.48,669.826 1025.04,689.352 1025.6,689.594 1026.16,686.895 1026.72,670.868 1027.28,657.737 1027.83,676.285 1028.39,695.845 1028.95,678.227 1029.51,694.981 1030.07,696.961 1030.63,696.526 1031.19,713.944 1031.75,698.152 1032.31,714.506 1032.87,697.617 1033.43,761.349 1033.99,792.738 1034.55,804.358 1035.1,748.998 1035.66,767.101 1036.22,761.076 1036.78,757.359 1037.34,752.554 1037.9,748.261 1038.46,712.038 1039.02,713.134 1039.58,712.202 1040.14,707.79 1040.7,707.187 1041.26,718.303 1041.82,733.374 1042.38,746.162 1042.93,747.069 1043.49,743.047 1044.05,754.942 1044.61,749.691 1045.17,779.858 1045.73,789.189 1046.29,785.165 1046.85,779.543 1047.41,771.119 1047.97,768.614 1048.53,765.206 1049.09,763.108 1049.65,759.675 1050.2,742.156 1050.76,742.835 1051.32,727.447 1051.88,726.647 1052.44,721.568 1053,786.52 1053.56,762.572 1054.12,771.612 1054.68,763.563 1055.24,778.274 1055.8,789.85 1056.36,785.962 1056.92,780.502 1057.48,743.443 1058.03,753.584 1058.59,767.132 1059.15,746.122 1059.71,748.217 1060.27,744.059 1060.83,676.503 1061.39,678.508 1061.95,664.056 1062.51,664.156 1063.07,678.771 1063.63,677.633 1064.19,646.821 1064.75,630.922 1065.3,583.751 1065.86,637.266 1066.42,626.248 1066.98,627.495 1067.54,631.482 1068.1,632.573 1068.66,665.292 1069.22,627.392 1069.78,628.815 1070.34,649.354 1070.9,668.686 1071.46,668.379 1072.02,704.671 1072.57,674.591 1073.13,660.629 1073.69,645.697 1074.25,682.723 1074.81,680.847 1075.37,663.083 1075.93,664.849 1076.49,664.742 1077.05,668.668 1077.61,666.319 1078.17,668.765 1078.73,633.843 1079.29,605.145 1079.85,576.666 1080.4,582.399 1080.96,586.895 1081.52,623.674 1082.08,625.802 1082.64,644.546 1083.2,676.862 1083.76,674.643 1084.32,627.424 1084.88,613.507 1085.44,553.081 1086,558.83 1086.56,597.849 1087.12,555.759 1087.67,578.674 1088.23,567.626 1088.79,573.243 1089.35,596.291 1089.91,571.033 1090.47,623.825 1091.03,609.845 1091.59,599.992 1092.15,620.563 1092.71,655.159 1093.27,658.116 1093.83,641.726 1094.39,627.764 1094.94,645.234 1095.5,662.954 1096.06,649.09 1096.62,651.426 1097.18,720.093 1097.74,737.853 1098.3,704.024 1098.86,704.878 1099.42,733.816 1099.98,744.653 1100.54,756.59 1101.1,783.108 1101.66,793.1 1102.22,790.67 1102.77,833.872 1103.33,827.11 1103.89,831.794 1104.45,824.78 1105.01,818.751 1105.57,845.185 1106.13,822.889 1106.69,800.994 1107.25,829.286 1107.81,837.101 1108.37,845.573 1108.93,820.631 1109.49,779.392 1110.04,805.047 1110.6,798.08 1111.16,790.89 1111.72,753.752 1112.28,764.846 1112.84,761.138 1113.4,774.239 1113.96,771.365 1114.52,753.354 1115.08,745.447 1115.64,741.621 1116.2,789.435 1116.76,816.618 1117.31,845.793 1117.87,823.794 1118.43,782.051 1118.99,760.42 1119.55,756.403 1120.11,754.651 1120.67,700.488 1121.23,699.053 1121.79,714.143 1122.35,713.765 1122.91,727.793 1123.47,731.526 1124.03,698.889 1124.59,698.053 1125.14,697.756 1125.7,716.134 1126.26,713.405 1126.82,727.935 1127.38,726.916 1127.94,741.168 1128.5,718.895 1129.06,718.265 1129.62,735.706 1130.18,698.704 1130.74,715.845 1131.3,700.32 1131.86,681.927 1132.41,668.28 1132.97,669.478 1133.53,669.222 1134.09,655.376 1134.65,656.385 1135.21,656.835 1135.77,630.006 1136.33,646.935 1136.89,650.134 1137.45,652.474 1138.01,671.168 1138.57,641.109 1139.13,611.653 1139.68,660.983 1140.24,709.029 1140.8,705.391 1141.36,684.545 1141.92,699.148 1142.48,711.797 1143.04,693.861 1143.6,694.523 1144.16,677.9 1144.72,647.886 1145.28,634.531 1145.84,636.591 1146.4,655.367 1146.96,658.863 1147.51,674.391 1148.07,678.013 1148.63,661.44 1149.19,646.285 1149.75,634.541 1150.31,667.133 1150.87,649.094 1151.43,665.99 1151.99,651.956 1152.55,671.685 1153.11,675.058 1153.67,660.972 1154.23,645.261 1154.78,646.412 1155.34,611.78 1155.9,633.67 1156.46,619.261 1157.02,624.268 1157.58,612.941 1158.14,604.029 1158.7,611.032 1159.26,583.519 1159.82,591.308 1160.38,612.635 1160.94,600.597 1161.5,605.057 1162.05,629.848 1162.61,632.891 1163.17,651.183 1163.73,653.959 1164.29,620.962 1164.85,656.305 1165.41,640.623 1165.97,658.899 1166.53,679.557 1167.09,699.517 1167.65,681.956 1168.21,651.586 1168.77,697.628 1169.33,666.203 1169.88,681.752 1170.44,668.375 1171,704.046 1171.56,715.433 1172.12,744.998 1172.68,741.441 1173.24,741.407 1173.8,724.159 1174.36,705.086 1174.92,704.651 1175.48,719.59 1176.04,702.525 1176.6,649.074 1177.15,668.647 1177.71,643.709 1178.27,677.563 1178.83,676.7 1179.39,696.442 1179.95,713.454 1180.51,713.067 1181.07,693.339 1181.63,707.283 1182.19,703.882 1182.75,687.644 1183.31,688.994 1183.87,703.825 1184.43,703.914 1184.98,688.802 1185.54,673.797 1186.1,689.372 1186.66,687.824 1187.22,670.759 1187.78,683.656 1188.34,702.137 1188.9,720.211 1189.46,684.636 1190.02,684.555 1190.58,683.074 1191.14,682.358 1191.7,682.231 1192.25,677.72 1192.81,661.638 1193.37,646.079 1193.93,680.683 1194.49,679.564 1195.05,647.055 1195.61,631.414 1196.17,632.672 1196.73,601.297 1197.29,588.653 1197.85,593.529 1198.41,583.699 1198.97,623.009 1199.52,597.961 1200.08,585.209 1200.64,588.894 1201.2,560.422 1201.76,600.576 1202.32,606.571 1202.88,609.62 1203.44,647.36 1204,650.861 1204.56,666.364 1205.12,652.02 1205.68,654.417 1206.24,621.941 1206.8,624.146 1207.35,626.143 1207.91,647.265 1208.47,649.178 1209.03,636.695 1209.59,638.101 1210.15,689.047 1210.71,704.534 1211.27,702.576 1211.83,700.274 1212.39,729.086 1212.95,742.044 1213.51,706.178 1214.07,703.508 1214.62,686.634 1215.18,720.911 1215.74,687.052 1216.3,688.457 1216.86,675.84 1217.42,710.09 1217.98,707.234 1218.54,704.707 1219.1,703.023 1219.66,686.373 1220.22,669.617 1220.78,671.13 1221.34,656.992 1221.89,643.926 1222.45,680.095 1223.01,665.736 1223.57,685.545 1224.13,685.797 1224.69,666.872 1225.25,700.817 1225.81,719.451 1226.37,764.3 1226.93,779.721 1227.49,761.702 1228.05,757.073 1228.61,737.309 1229.17,717.131 1229.72,693.74 1230.28,696.917 1230.84,667.477 1231.4,668.323 1231.96,655.077 1232.52,658.509 1233.08,645.292 1233.64,647.118 1234.2,682.716 1234.76,665.961 1235.32,698.956 1235.88,664.54 1236.44,651.883 1236.99,654.287 1237.55,642.076 1238.11,646.184 1238.67,629.16 1239.23,633.855 1239.79,622.304 1240.35,641.861 1240.91,629.071 1241.47,648.408 1242.03,665.662 1242.59,664.2 1243.15,683.624 1243.71,667.508 1244.26,669.177 1244.82,667.734 1245.38,634.301 1245.94,584.482 1246.5,593.621 1247.06,578.883 1247.62,568.427 1248.18,529.102 1248.74,553.517 1249.3,597.469 1249.86,587.598 1250.42,627.686 1250.98,650.755 1251.54,656.859 1252.09,660.36 1252.65,665.574 1253.21,697.706 1253.77,683.163 1254.33,734.267 1254.89,745.583 1255.45,744.463 1256.01,725.186 1256.57,691.335 1257.13,690.199 1257.69,706.546 1258.25,706.19 1258.81,705.859 1259.36,721.286 1259.92,721.445 1260.48,734.188 1261.04,766.998 1261.6,777.274 1262.16,790.447 1262.72,785.077 1263.28,780.226 1263.84,753.498 1264.4,734.74 1264.96,716.519 1265.52,679.167 1266.08,664.24 1266.63,696.603 1267.19,712.566 1267.75,727.357 1268.31,742.775 1268.87,752.02 1269.43,748.455 1269.99,726.088 1270.55,706.106 1271.11,687.126 1271.67,685.23 1272.23,671.423 1272.79,687.721 1273.35,688.025 1273.91,706.774 1274.46,705.571 1275.02,703.709 1275.58,704.012 1276.14,684.725 1276.7,673.485 1277.26,671.621 1277.82,622.81 1278.38,627.291 1278.94,629.453 1279.5,651.564 1280.06,653.882 1280.62,637.95 1281.18,605.477 1281.73,596.2 1282.29,602.262 1282.85,591.983 1283.41,612.843 1283.97,618.504 1284.53,622.311 1285.09,627.141 1285.65,664.839 1286.21,698.202 1286.77,695.561 1287.33,695.674 1287.89,696.691 1288.45,701.213 1289,697.869 1289.56,695.979 1290.12,694.03 1290.68,711.443 1291.24,723.704 1291.8,737.945 1292.36,753.398 1292.92,767.484 1293.48,760.582 1294.04,757.509 1294.6,769.605 1295.16,766.718 1295.72,759.632 1296.28,773.315 1296.83,751.011 1297.39,763.528 1297.95,790.89 1298.51,749.526 1299.07,730.153 1299.63,722.045 1300.19,719.028 1300.75,717.905 1301.31,713.159 1301.87,728.874 1302.43,773.909 1302.99,769.002 1303.55,778.463 1304.1,774.439 1304.66,740.223 1305.22,704.823 1305.78,671.857 1306.34,703.266 1306.9,687.147 1307.46,698.873 1308.02,680.338 1308.58,700.613 1309.14,729.742 1309.7,759.105 1310.26,771.407 1310.82,749.679 1311.38,744.856 1311.93,761.46 1312.49,757.104 1313.05,786.117 1313.61,766.361 1314.17,797.002 1314.73,821.33 1315.29,796.85 1315.85,840.913 1316.41,815.375 1316.97,810.058 1317.53,836.003 1318.09,826.681 1318.65,803.769 1319.2,796.868 1319.76,776.952 1320.32,805.709 1320.88,812.718 1321.44,788.404 1322,765.527 1322.56,742.316 1323.12,719.757 1323.68,718.35 1324.24,719.309 1324.8,706.928 1325.36,689.518 1325.92,656.282 1326.47,708.929 1327.03,692.265 1327.59,643.061 1328.15,662.335 1328.71,662.313 1329.27,678.288 1329.83,662.756 1330.39,699.485 1330.95,699.128 1331.51,682.97 1332.07,634.205 1332.63,603.563 1333.19,592.017 1333.75,533.585 1334.3,560.43 1334.86,539.834 1335.42,562.96 1335.98,567.071 1336.54,577.845 1337.1,580.515 1337.66,570.324 1338.22,558.118 1338.78,581.93 1339.34,604.762 1339.9,608.57 1340.46,594.633 1341.02,584.581 1341.57,575.297 1342.13,584.477 1342.69,590.179 1343.25,577.034 1343.81,583.731 1344.37,572.355 1344.93,580.201 1345.49,600.521 1346.05,618.289 1346.61,618.405 1347.17,623.427 1347.73,595.235 1348.29,594.832 1348.84,584.931 1349.4,637.829 1349.96,606.061 1350.52,611.054 1351.08,633.434 1351.64,684.298 1352.2,684.571 1352.76,686.964 1353.32,682.702 1353.88,728.66 1354.44,725.805 1355,710.157 1355.56,710.511 1356.12,728.864 1356.67,717.023 1357.23,751.555 1357.79,681.561 1358.35,696.618 1358.91,679.013 1359.47,693.32 1360.03,709.428 1360.59,693.421 1361.15,689.545 1361.71,703.354 1362.27,704.232 1362.83,717.448 1363.39,762.977 1363.94,774.446 1364.5,785.245 1365.06,779.993 1365.62,760.673 1366.18,726.04 1366.74,756.503 1367.3,749.535 1367.86,729.476 1368.42,712.496 1368.98,730.188 1369.54,727.786 1370.1,742.618 1370.66,737.411 1371.21,720.457 1371.77,702.779 1372.33,685.598 1372.89,684.139 1373.45,689.743 1374.01,703.486 1374.57,686.189 1375.13,671.632 1375.69,672.262 1376.25,688.257 1376.81,704.658 1377.37,732.269 1377.93,698.722 1378.49,699.05 1379.04,717.848 1379.6,686.145 1380.16,686.479 1380.72,671.478 1381.28,654.976 1381.84,659.984 1382.4,710.039 1382.96,690.621 1383.52,692.741 1384.08,689.868 1384.64,688.815 1385.2,719.081 1385.76,715.826 1386.31,733.111 1386.87,732.158 1387.43,731.638 1387.99,728.561 1388.55,674.954 1389.11,674.334 1389.67,689.004 1390.23,673.694 1390.79,646.147 1391.35,648.658 1391.91,670.272 1392.47,658.956 1393.03,675.209 1393.58,663.707 1394.14,668.141 1394.7,683.318 1395.26,701.065 1395.82,701.549 1396.38,716.001 1396.94,765.082 1397.5,725.869 1398.06,710.074 1398.62,706.401 1399.18,674.219 1399.74,640.613 1400.3,643.674 1400.86,630.881 1401.41,633.201 1401.97,635.671 1402.53,624.681 1403.09,627.026 1403.65,646.092 1404.21,661.14 1404.77,661.101 1405.33,665.767 1405.89,649.114 1406.45,618.303 1407.01,620.217 1407.57,590.89 1408.13,598.566 1408.68,600.998 1409.24,618.952 1409.8,619.992 1410.36,624.916 1410.92,607.113 1411.48,639.881 1412.04,641.701 1412.6,659.643 1413.16,660.275 1413.72,661.882 1414.28,647.964 1414.84,682.08 1415.4,698.054 1415.95,694.563 1416.51,691.778 1417.07,727.141 1417.63,709.423 1418.19,707.324 1418.75,722.143 1419.31,705.072 1419.87,687.753 1420.43,672.161 1420.99,656.204 1421.55,642.247 1422.11,624.456 1422.67,648.797 1423.23,619.771 1423.78,625.983 1424.34,646.65 1424.9,633.308 1425.46,668.318 1426.02,684.631 1426.58,684.439 1427.14,696.697 1427.7,661.645 1428.26,663.261 1428.82,662.37 1429.38,694.533 1429.94,674.494 1430.5,658.069 1431.05,674.455 1431.61,656.981 1432.17,657.407 1432.73,669.833 1433.29,652.877 1433.85,668.087 1434.41,683.817 1434.97,700.307 1435.53,684.967 1436.09,686.276 1436.65,687.794 1437.21,672.762 1437.77,671.098 1438.33,687.07 1438.88,703.069 1439.44,706.365 1440,655.392 1440.56,622.566 1441.12,627.305 1441.68,631.35 1442.24,616.892 1442.8,637.049 1443.36,608.474 1443.92,626.043 1444.48,645.673 1445.04,647.775 1445.6,585.03 1446.15,605.224 1446.71,621.259 1447.27,624.969 1447.83,662.794 1448.39,698.112 1448.95,664.849 1449.51,665.699 1450.07,663.944 1450.63,680.929 1451.19,670.437 1451.75,671.648 1452.31,691.032 1452.87,658.381 1453.42,659.385 1453.98,677.067 1454.54,678.124 1455.1,697.971 1455.66,682.168 1456.22,701.567 1456.78,669.882 1457.34,686.126 1457.9,682.961 1458.46,667.53 1459.02,653.923 1459.58,656.488 1460.14,689.691 1460.7,706.573 1461.25,655.332 1461.81,657.789 1462.37,691.378 1462.93,675.747 1463.49,675.341 1464.05,689.751 1464.61,673.852 1465.17,674.836 1465.73,643.087 1466.29,694.987 1466.85,697.291 1467.41,695.375 1467.97,696.989 1468.52,714.108 1469.08,715.726 1469.64,714.288 1470.2,743.794 1470.76,745.251 1471.32,738.429 1471.88,748.587 1472.44,760.407 1473,757.784 1473.56,733.118 1474.12,746.13 1474.68,743.822 1475.24,739.299 1475.79,735.831 1476.35,780.045 1476.91,791.52 1477.47,786.648 1478.03,797.554 1478.59,773.819 1479.15,786.148 1479.71,782.745 1480.27,748.317 1480.83,727.523 1481.39,737.23 1481.95,734.482 1482.51,745.462 1483.07,759.507 1483.62,754.067 1484.18,780.788 1484.74,742.682 1485.3,741.831 1485.86,707.214 1486.42,688.889 1486.98,767.571 1487.54,748.658 1488.1,696.357 1488.66,682.435 1489.22,713.078 1489.78,675.153 1490.34,708.745 1490.89,690.218 1491.45,689.337 1492.01,689.186 1492.57,690.972 1493.13,707.201 1493.69,738.96 1494.25,748.598 1494.81,745.048 1495.37,740.124 1495.93,754.068 1496.49,699.946 1497.05,649.005 1497.61,650.368 1498.16,635.415 1498.72,637.299 1499.28,652.538 1499.84,656.363 1500.4,675.556 1500.96,674.574 1501.52,661.523 1502.08,662.111 1502.64,634.22 1503.2,649.912 1503.76,669.049 1504.32,653.292 1504.88,636.459 1505.44,640.627 1505.99,658.675 1506.55,674.774 1507.11,658.091 1507.67,657.902 1508.23,625.022 1508.79,646.557 1509.35,649.544 1509.91,670.27 1510.47,687.23 1511.03,686.061 1511.59,687.94 1512.15,716.917 1512.71,729.611 1513.26,711.571 1513.82,693.816 1514.38,675.492 1514.94,641.76 1515.5,628.625 1516.06,630.311 1516.62,630.651 1517.18,617.746 1517.74,604.457 1518.3,588.365 1518.86,612.936 1519.42,601.592 1519.98,588.464 1520.53,561.204 1521.09,566.996 1521.65,573.15 1522.21,577.35 1522.77,583.938 1523.33,575.351 1523.89,542.76 1524.45,613.707 1525.01,631.857 1525.57,618.224 1526.13,621.253 1526.69,641.086 1527.25,627.197 1527.81,643.84 1528.36,664.778 1528.92,683.202 1529.48,698.495 1530.04,743.628 1530.6,760.454 1531.16,743.15 1531.72,722.409 1532.28,722.44 1532.84,720.603 1533.4,749.238 1533.96,715.499 1534.52,714.316 1535.08,710.294 1535.63,713.089 1536.19,677.449 1536.75,694.763 1537.31,694.232 1537.87,725.866 1538.43,756.784 1538.99,753.847 1539.55,764.1 1540.11,777.123 1540.67,754.981 1541.23,750.658 1541.79,744.967 1542.35,760.047 1542.9,756.382 1543.46,786.929 1544.02,765.63 1544.58,762.289 1545.14,757.208 1545.7,738.083 1546.26,735.457 1546.82,736.627 1547.38,718.562 1547.94,731.53 1548.5,713.69 1549.06,763.01 1549.62,745.427 1550.18,760.879 1550.73,740.028 1551.29,752.335 1551.85,752.393 1552.41,748.724 1552.97,700.11 1553.53,701.372 1554.09,701.661 1554.65,683.718 1555.21,699.7 1555.77,700.952 1556.33,711.047 1556.89,712.082 1557.45,691.034 1558,674.1 1558.56,657.116 1559.12,624.843 1559.68,610.78 1560.24,629.405 1560.8,595.783 1561.36,581.888 1561.92,572.144 1562.48,614.125 1563.04,618.778 1563.6,608.889 1564.16,627.981 1564.72,595.034 1565.28,631.249 1565.83,617.334 1566.39,603.494 1566.95,591.254 1567.51,629.129 1568.07,633.896 1568.63,622.86 1569.19,608.699 1569.75,598.617 1570.31,601.876 1570.87,611.728 1571.43,600.479 1571.99,635.395 1572.55,640.778 1573.1,643.335 1573.66,644.288 1574.22,647.17 1574.78,651.14 1575.34,651.384 1575.9,622.789 1576.46,628.943 1577.02,629.308 1577.58,663.117 1578.14,694.261 1578.7,678.455 1579.26,678.984 1579.82,677.904 1580.37,678.589 1580.93,679.998 1581.49,662.162 1582.05,677.54 1582.61,645.479 1583.17,633.034 1583.73,637.626 1584.29,624.628 1584.85,613.558 1585.41,617.184 1585.97,638.296 1586.53,639.041 1587.09,625.344 1587.65,644.455 1588.2,630.075 1588.76,651.096 1589.32,652.313 1589.88,655.876 1590.44,656.076 1591,647.649 1591.56,646.151 1592.12,616.096 1592.68,603.071 1593.24,610.595 1593.8,633.558 1594.36,652.848 1594.92,640.301 1595.47,657.301 1596.03,688.892 1596.59,689.653 1597.15,707.769 1597.71,706.582 1598.27,675.4 1598.83,657.673 1599.39,643.598 1599.95,631.381 1600.51,631.945 1601.07,650.623 1601.63,655.498 1602.19,656.49 1602.74,658.066 1603.3,689.373 1603.86,673.365 1604.42,656.988 1604.98,673.559 1605.54,689.02 1606.1,687.916 1606.66,704.672 1607.22,705.141 1607.78,720.301 1608.34,718.896 1608.9,700.386 1609.46,718.238 1610.02,732.949 1610.57,712.039 1611.13,729.259 1611.69,712.38 1612.25,743.607 1612.81,726.136 1613.37,708.005 1613.93,706.331 1614.49,752.034 1615.05,747.574 1615.61,744.337 1616.17,757.283 1616.73,722.349 1617.29,738.686 1617.84,748.993 1618.4,744.314 1618.96,728.393 1619.52,722.991 1620.08,701.141 1620.64,668.097 1621.2,698.638 1621.76,695.583 1622.32,709.134 1622.88,679.202 1623.44,677.209 1624,697.17 1624.56,696.957 1625.11,679.396 1625.67,677.608 1626.23,679.942 1626.79,691.942 1627.35,673.764 1627.91,672.621 1628.47,641.226 1629.03,642.125 1629.59,626.516 1630.15,631.235 1630.71,669.24 1631.27,687.795 1631.83,691.01 1632.39,707.989 1632.94,689.217 1633.5,659.912 1634.06,659.173 1634.62,665.775 1635.18,632.661 1635.74,604.352 1636.3,591.608 1636.86,577.271 1637.42,569.071 1637.98,577.229 1638.54,565.654 1639.1,604.706 1639.66,628.665 1640.21,632.292 1640.77,634.425 1641.33,652.506 1641.89,622.569 1642.45,608.862 1643.01,594.231 1643.57,602.635 1644.13,608.815 1644.69,628.131 1645.25,612.632 1645.81,646.854 1646.37,663.191 1646.93,702.205 1647.48,702.4 1648.04,716.348 1648.6,665.842 1649.16,700.8 1649.72,697.587 1650.28,712.959 1650.84,691.661 1651.4,689.871 1651.96,691.916 1652.52,694.786 1653.08,708.287 1653.64,759.615 1654.2,754.179 1654.76,717.634 1655.31,685.395 1655.87,687.061 1656.43,705.628 1656.99,708.435 1657.55,744.912 1658.11,689.098 1658.67,672.236 1659.23,669.827 1659.79,670.251 1660.35,640.576 1660.91,609.324 1661.47,612.696 1662.03,618.3 1662.58,619.032 1663.14,638.61 1663.7,688.223 1664.26,689.483 1664.82,672.606 1665.38,686.577 1665.94,684.63 1666.5,650.447 1667.06,667.974 1667.62,685.505 1668.18,688.5 1668.74,704.267 1669.3,702.69 1669.85,705.247 1670.41,706.217 1670.97,710.276 1671.53,727.094 1672.09,707.182 1672.65,721.297 1673.21,735.081 1673.77,715.328 1674.33,731.61 1674.89,744.414 1675.45,740.857 1676.01,737.827 1676.57,750.306 1677.13,728.974 1677.68,711.091 1678.24,693.467 1678.8,692.005 1679.36,673.991 1679.92,673.724 1680.48,658.478 1681.04,644.089 1681.6,678.435 1682.16,663.314 1682.72,631.273 1683.28,700.82 1683.84,734.981 1684.4,777.862 1684.95,772.814 1685.51,752.358 1686.07,732.859 1686.63,716.398 1687.19,713.178 1687.75,740.631 1688.31,738.849 1688.87,723.543 1689.43,757.506 1689.99,750.81 1690.55,746.776 1691.11,757.205 1691.67,786.478 1692.23,830.147 1692.78,820.93 1693.34,817.321 1693.9,809.957 1694.46,802.631 1695.02,813.115 1695.58,791.337 1696.14,722.394 1696.7,737.37 1697.26,730.76 1697.82,729.91 1698.38,711.047 1698.94,744.773 1699.5,740.583 1700.05,752.19 1700.61,697.744 1701.17,709.06 1701.73,707.606 1702.29,685.563 1702.85,685.666 1703.41,686.047 1703.97,671.031 1704.53,642.621 1705.09,648.048 1705.65,649.275 1706.21,667.473 1706.77,683.328 1707.32,668.868 1707.88,703.02 1708.44,685.849 1709,734.369 1709.56,736.017 1710.12,768.982 1710.68,748.612 1711.24,759.907 1711.8,769.254 1712.36,764.642 1712.92,731.998 1713.48,679.844 1714.04,647.919 1714.6,679.331 1715.15,691.631 1715.71,671.295 1716.27,672.172 1716.83,707.392 1717.39,723.66 1717.95,693.425 1718.51,658.349 1719.07,662.545 1719.63,650.631 1720.19,670.866 1720.75,639.113 1721.31,655.238 1721.87,658.179 1722.42,659.856 1722.98,694.355 1723.54,743.373 1724.1,753.217 1724.66,764.034 1725.22,711.343 1725.78,725.156 1726.34,704.19 1726.9,749.995 1727.46,728.806 1728.02,743.132 1728.58,742.353 1729.14,757.842 1729.69,771.412 1730.25,781.171 1730.81,778.856 1731.37,742.732 1731.93,709.675 1732.49,722.472 1733.05,722.029 1733.61,732.566 1734.17,712.579 1734.73,707.826 1735.29,691.78 1735.85,709.293 1736.41,708.109 1736.97,706.195 1737.52,686.875 1738.08,684.809 1738.64,716.534 1739.2,728.053 1739.76,726.991 1740.32,722.831 1740.88,718.441 1741.44,715.925 1742,728.609 1742.56,689.58 1743.12,642.724 1743.68,692.28 1744.24,689.761 1744.79,704.434 1745.35,689.602 1745.91,671.486 1746.47,687.803 1747.03,671.45 1747.59,606.1 1748.15,608.771 1748.71,613.471 1749.27,632.639 1749.83,683.061 1750.39,699.594 1750.95,698.088 1751.51,684.074 1752.06,652.867 1752.62,668.037 1753.18,600.672 1753.74,606.268 1754.3,624.914 1754.86,627.821 1755.42,649.578 1755.98,670.201 1756.54,657.127 1757.1,631.694 1757.66,631.491 1758.22,681.926 1758.78,680.953 1759.34,665.902 1759.89,668.12 1760.45,651.169 1761.01,652.045 1761.57,601.878 1762.13,641.666 1762.69,639.976 1763.25,642.267 1763.81,660.653 1764.37,645.783 1764.93,631.658 1765.49,617.505 1766.05,620.103 1766.61,627.253 1767.16,659.699 1767.72,630.784 1768.28,647.904 1768.84,650.764 1769.4,638.622 1769.96,641.086 1770.52,641.774 1771.08,722.37 1771.64,686.37 1772.2,688.523 1772.76,689.354 1773.32,719.872 1773.88,736.02 1774.43,713.887 1774.99,729.248 1775.55,772.848 1776.11,784.623 1776.67,796.708 1777.23,837.705 1777.79,827.458 1778.35,803.177 1778.91,812.277 1779.47,771.953 1780.03,732.846 1780.59,729.847 1781.15,730.437 1781.71,746.223 1782.26,725.176 1782.82,739.285 1783.38,702.431 1783.94,733.754 1784.5,730.589 1785.06,727.711 1785.62,726.795 1786.18,721.775 1786.74,700.772 1787.3,665.151 1787.86,700.104 1788.42,714.152 1788.98,676.819 1789.53,694.502 1790.09,658.702 1790.65,656.804 1791.21,643.581 1791.77,644.394 1792.33,664.662 1792.89,683.632 1793.45,686.982 1794.01,670.934 1794.57,672.808 1795.13,721.502 1795.69,689.019 1796.25,688.884 1796.8,688.255 1797.36,706.839 1797.92,718.572 1798.48,699.093 1799.04,654.173 1799.6,638.552 1800.16,625.944 1800.72,631.129 1801.28,633.436 1801.84,638.434 1802.4,656.802 1802.96,641.9 1803.52,655.24 1804.08,653.268 1804.63,702.554 1805.19,702.418 1805.75,697.486 1806.31,632.738 1806.87,605.21 1807.43,610.823 1807.99,647.344 1808.55,649.705 1809.11,671.16 1809.67,688.342 1810.23,687.54 1810.79,687.349 1811.35,686.233 1811.9,702.316 1812.46,718.155 1813.02,719.691 1813.58,737.016 1814.14,703.455 1814.7,700.923 1815.26,746.878 1815.82,744.099 1816.38,773.661 1816.94,769.584 1817.5,751.671 1818.06,747.448 1818.62,727.499 1819.18,758.087 1819.73,738.955 1820.29,718.701 1820.85,681.194 1821.41,678.769 1821.97,633.262 1822.53,637.975 1823.09,606.539 1823.65,610.924 1824.21,631.327 1824.77,636.051 1825.33,637.91 1825.89,608.441 1826.45,610.978 1827,634.007 1827.56,650.048 1828.12,636.969 1828.68,643.632 1829.24,629.34 1829.8,651.553 1830.36,654.805 1830.92,639.348 1831.48,610.285 1832.04,612.253 1832.6,616.081 1833.16,634.898 1833.72,602.497 1834.27,638.414 1834.83,673.331 1835.39,704.439 1835.95,704.66 1836.51,734.367 1837.07,731.413 1837.63,712.694 1838.19,694.066 \"/>\n<path clip-path=\"url(#clip613)\" d=\"M720.247 691.796 L720.806 691.796 L721.365 691.796 L721.924 691.796 L722.484 691.796 L723.043 691.796 L723.602 691.796 L724.161 691.796 L724.721 691.796 L725.28 691.796 L725.839 691.796 L726.398 691.796 L726.958 691.796 L727.517 691.796 L728.076 691.796 L728.635 691.796 L729.195 691.796 L729.754 691.796 L730.313 691.796 L730.872 691.796 L731.432 691.796 L731.991 691.796 L732.55 691.796 L733.109 691.796 L733.669 691.796 L734.228 691.796 L734.787 691.796 L735.346 691.796 L735.906 691.796 L736.465 691.796 L737.024 691.796 L737.583 691.796 L738.143 691.796 L738.702 691.796 L739.261 691.796 L739.82 691.796 L740.38 691.796 L740.939 691.796 L741.498 691.796 L742.057 691.796 L742.617 691.796 L743.176 691.796 L743.735 691.796 L744.294 691.796 L744.854 691.796 L745.413 691.796 L745.972 691.796 L746.531 691.796 L747.091 691.796 L747.65 691.796 L748.209 691.796 L748.768 691.796 L749.328 691.796 L749.887 691.796 L750.446 691.796 L751.005 691.796 L751.565 691.796 L752.124 691.796 L752.683 691.796 L753.242 691.796 L753.802 691.796 L754.361 691.796 L754.92 691.796 L755.479 691.796 L756.039 691.796 L756.598 691.796 L757.157 691.796 L757.716 691.796 L758.276 691.796 L758.835 691.796 L759.394 691.796 L759.953 691.796 L760.513 691.796 L761.072 691.796 L761.631 691.796 L762.19 691.796 L762.75 691.796 L763.309 691.796 L763.868 691.796 L764.427 691.796 L764.987 691.796 L765.546 691.796 L766.105 691.796 L766.664 691.796 L767.224 691.796 L767.783 691.796 L768.342 691.796 L768.901 691.796 L769.461 691.796 L770.02 691.796 L770.579 691.796 L771.138 691.796 L771.698 691.796 L772.257 691.796 L772.816 691.796 L773.375 691.796 L773.935 691.796 L774.494 691.796 L775.053 691.796 L775.612 691.796 L776.172 691.796 L776.731 691.796 L777.29 691.796 L777.849 691.796 L778.409 691.796 L778.968 691.796 L779.527 691.796 L780.086 691.796 L780.646 691.796 L781.205 691.796 L781.764 691.796 L782.323 691.796 L782.883 691.796 L783.442 691.796 L784.001 691.796 L784.56 691.796 L785.12 691.796 L785.679 691.796 L786.238 691.796 L786.797 691.796 L787.357 691.796 L787.916 691.796 L788.475 691.796 L789.034 691.796 L789.594 691.796 L790.153 691.796 L790.712 691.796 L791.271 691.796 L791.831 691.796 L792.39 691.796 L792.949 691.796 L793.508 691.796 L794.068 691.796 L794.627 691.796 L795.186 691.796 L795.745 691.796 L796.305 691.796 L796.864 691.796 L797.423 691.796 L797.982 691.796 L798.542 691.796 L799.101 691.796 L799.66 691.796 L800.219 691.796 L800.779 691.796 L801.338 691.796 L801.897 691.796 L802.456 691.796 L803.016 691.796 L803.575 691.796 L804.134 691.796 L804.693 691.796 L805.253 691.796 L805.812 691.796 L806.371 691.796 L806.931 691.796 L807.49 691.796 L808.049 691.796 L808.608 691.796 L809.168 691.796 L809.727 691.796 L810.286 691.796 L810.845 691.796 L811.405 691.796 L811.964 691.796 L812.523 691.796 L813.082 691.796 L813.642 691.796 L814.201 691.796 L814.76 691.796 L815.319 691.796 L815.879 691.796 L816.438 691.796 L816.997 691.796 L817.556 691.796 L818.116 691.796 L818.675 691.796 L819.234 691.796 L819.793 691.796 L820.353 691.796 L820.912 691.796 L821.471 691.796 L822.03 691.796 L822.59 691.796 L823.149 691.796 L823.708 691.796 L824.267 691.796 L824.827 691.796 L825.386 691.796 L825.945 691.796 L826.504 691.796 L827.064 691.796 L827.623 691.796 L828.182 691.796 L828.741 691.796 L829.301 691.796 L829.86 691.796 L830.419 691.796 L830.978 691.796 L831.538 691.796 L832.097 691.796 L832.656 691.796 L833.215 691.796 L833.775 691.796 L834.334 691.796 L834.893 691.796 L835.452 691.796 L836.012 691.796 L836.571 691.796 L837.13 691.796 L837.689 691.796 L838.249 691.796 L838.808 691.796 L839.367 691.796 L839.926 691.796 L840.486 691.796 L841.045 691.796 L841.604 691.796 L842.163 691.796 L842.723 691.796 L843.282 691.796 L843.841 691.796 L844.4 691.796 L844.96 691.796 L845.519 691.796 L846.078 691.796 L846.637 691.796 L847.197 691.796 L847.756 691.796 L848.315 691.796 L848.874 691.796 L849.434 691.796 L849.993 691.796 L850.552 691.796 L851.111 691.796 L851.671 691.796 L852.23 691.796 L852.789 691.796 L853.348 691.796 L853.908 691.796 L854.467 691.796 L855.026 691.796 L855.585 691.796 L856.145 691.796 L856.704 691.796 L857.263 691.796 L857.822 691.796 L858.382 691.796 L858.941 691.796 L859.5 691.796 L860.059 691.796 L860.619 691.796 L861.178 691.796 L861.737 691.796 L862.296 691.796 L862.856 691.796 L863.415 691.796 L863.974 691.796 L864.533 691.796 L865.093 691.796 L865.652 691.796 L866.211 691.796 L866.77 691.796 L867.33 691.796 L867.889 691.796 L868.448 691.796 L869.007 691.796 L869.567 691.796 L870.126 691.796 L870.685 691.796 L871.244 691.796 L871.804 691.796 L872.363 691.796 L872.922 691.796 L873.481 691.796 L874.041 691.796 L874.6 691.796 L875.159 691.796 L875.718 691.796 L876.278 691.796 L876.837 691.796 L877.396 691.796 L877.955 691.796 L878.515 691.796 L879.074 691.796 L879.633 691.796 L880.192 691.796 L880.752 691.796 L881.311 691.796 L881.87 691.796 L882.429 691.796 L882.989 691.796 L883.548 691.796 L884.107 691.796 L884.666 691.796 L885.226 691.796 L885.785 691.796 L886.344 691.796 L886.903 691.796 L887.463 691.796 L888.022 691.796 L888.581 691.796 L889.14 691.796 L889.7 691.796 L890.259 691.796 L890.818 691.796 L891.377 691.796 L891.937 691.796 L892.496 691.796 L893.055 691.796 L893.614 691.796 L894.174 691.796 L894.733 691.796 L895.292 691.796 L895.851 691.796 L896.411 691.796 L896.97 691.796 L897.529 691.796 L898.088 691.796 L898.648 691.796 L899.207 691.796 L899.766 691.796 L900.325 691.796 L900.885 691.796 L901.444 691.796 L902.003 691.796 L902.562 691.796 L903.122 691.796 L903.681 691.796 L904.24 691.796 L904.799 691.796 L905.359 691.796 L905.918 691.796 L906.477 691.796 L907.036 691.796 L907.596 691.796 L908.155 691.796 L908.714 691.796 L909.273 691.796 L909.833 691.796 L910.392 691.796 L910.951 691.796 L911.51 691.796 L912.07 691.796 L912.629 691.796 L913.188 691.796 L913.747 691.796 L914.307 691.796 L914.866 691.796 L915.425 691.796 L915.984 691.796 L916.544 691.796 L917.103 691.796 L917.662 691.796 L918.221 691.796 L918.781 691.796 L919.34 691.796 L919.899 691.796 L920.458 691.796 L921.018 691.796 L921.577 691.796 L922.136 691.796 L922.695 691.796 L923.255 691.796 L923.814 691.796 L924.373 691.796 L924.932 691.796 L925.492 691.796 L926.051 691.796 L926.61 691.796 L927.169 691.796 L927.729 691.796 L928.288 691.796 L928.847 691.796 L929.406 691.796 L929.966 691.796 L930.525 691.796 L931.084 691.796 L931.644 691.796 L932.203 691.796 L932.762 691.796 L933.321 691.796 L933.881 691.796 L934.44 691.796 L934.999 691.796 L935.558 691.796 L936.118 691.796 L936.677 691.796 L937.236 691.796 L937.795 691.796 L938.355 691.796 L938.914 691.796 L939.473 691.796 L940.032 691.796 L940.592 691.796 L941.151 691.796 L941.71 691.796 L942.269 691.796 L942.829 691.796 L943.388 691.796 L943.947 691.796 L944.506 691.796 L945.066 691.796 L945.625 691.796 L946.184 691.796 L946.743 691.796 L947.303 691.796 L947.862 691.796 L948.421 691.796 L948.98 691.796 L949.54 691.796 L950.099 691.796 L950.658 691.796 L951.217 691.796 L951.777 691.796 L952.336 691.796 L952.895 691.796 L953.454 691.796 L954.014 691.796 L954.573 691.796 L955.132 691.796 L955.691 691.796 L956.251 691.796 L956.81 691.796 L957.369 691.796 L957.928 691.796 L958.488 691.796 L959.047 691.796 L959.606 691.796 L960.165 691.796 L960.725 691.796 L961.284 691.796 L961.843 691.796 L962.402 691.796 L962.962 691.796 L963.521 691.796 L964.08 691.796 L964.639 691.796 L965.199 691.796 L965.758 691.796 L966.317 691.796 L966.876 691.796 L967.436 691.796 L967.995 691.796 L968.554 691.796 L969.113 691.796 L969.673 691.796 L970.232 691.796 L970.791 691.796 L971.35 691.796 L971.91 691.796 L972.469 691.796 L973.028 691.796 L973.587 691.796 L974.147 691.796 L974.706 691.796 L975.265 691.796 L975.824 691.796 L976.384 691.796 L976.943 691.796 L977.502 691.796 L978.061 691.796 L978.621 691.796 L979.18 691.796 L979.739 691.796 L980.298 691.796 L980.858 691.796 L981.417 691.796 L981.976 691.796 L982.535 691.796 L983.095 691.796 L983.654 691.796 L984.213 691.796 L984.772 691.796 L985.332 691.796 L985.891 691.796 L986.45 691.796 L987.009 691.796 L987.569 691.796 L988.128 691.796 L988.687 691.796 L989.246 691.796 L989.806 691.796 L990.365 691.796 L990.924 691.796 L991.483 691.796 L992.043 691.796 L992.602 691.796 L993.161 691.796 L993.72 691.796 L994.28 691.796 L994.839 691.796 L995.398 691.796 L995.957 691.796 L996.517 691.796 L997.076 691.796 L997.635 691.796 L998.194 691.796 L998.754 691.796 L999.313 691.796 L999.872 691.796 L1000.43 691.796 L1000.99 691.796 L1001.55 691.796 L1002.11 691.796 L1002.67 691.796 L1003.23 691.796 L1003.79 691.796 L1004.35 691.796 L1004.91 691.796 L1005.46 691.796 L1006.02 691.796 L1006.58 691.796 L1007.14 691.796 L1007.7 691.796 L1008.26 691.796 L1008.82 691.796 L1009.38 691.796 L1009.94 691.796 L1010.5 691.796 L1011.06 691.796 L1011.62 691.796 L1012.18 691.796 L1012.73 691.796 L1013.29 691.796 L1013.85 691.796 L1014.41 691.796 L1014.97 691.796 L1015.53 691.796 L1016.09 691.796 L1016.65 691.796 L1017.21 691.796 L1017.77 691.796 L1018.33 691.796 L1018.89 691.796 L1019.45 691.796 L1020.01 691.796 L1020.56 691.796 L1021.12 691.796 L1021.68 691.796 L1022.24 691.796 L1022.8 691.796 L1023.36 691.796 L1023.92 691.796 L1024.48 691.796 L1025.04 691.796 L1025.6 691.796 L1026.16 691.796 L1026.72 691.796 L1027.28 691.796 L1027.83 691.796 L1028.39 691.796 L1028.95 691.796 L1029.51 691.796 L1030.07 691.796 L1030.63 691.796 L1031.19 691.796 L1031.75 691.796 L1032.31 691.796 L1032.87 691.796 L1033.43 691.796 L1033.99 691.796 L1034.55 691.796 L1035.1 691.796 L1035.66 691.796 L1036.22 691.796 L1036.78 691.796 L1037.34 691.796 L1037.9 691.796 L1038.46 691.796 L1039.02 691.796 L1039.58 691.796 L1040.14 691.796 L1040.7 691.796 L1041.26 691.796 L1041.82 691.796 L1042.38 691.796 L1042.93 691.796 L1043.49 691.796 L1044.05 691.796 L1044.61 691.796 L1045.17 691.796 L1045.73 691.796 L1046.29 691.796 L1046.85 691.796 L1047.41 691.796 L1047.97 691.796 L1048.53 691.796 L1049.09 691.796 L1049.65 691.796 L1050.2 691.796 L1050.76 691.796 L1051.32 691.796 L1051.88 691.796 L1052.44 691.796 L1053 691.796 L1053.56 691.796 L1054.12 691.796 L1054.68 691.796 L1055.24 691.796 L1055.8 691.796 L1056.36 691.796 L1056.92 691.796 L1057.48 691.796 L1058.03 691.796 L1058.59 691.796 L1059.15 691.796 L1059.71 691.796 L1060.27 691.796 L1060.83 691.796 L1061.39 691.796 L1061.95 691.796 L1062.51 691.796 L1063.07 691.796 L1063.63 691.796 L1064.19 691.796 L1064.75 691.796 L1065.3 691.796 L1065.86 691.796 L1066.42 691.796 L1066.98 691.796 L1067.54 691.796 L1068.1 691.796 L1068.66 691.796 L1069.22 691.796 L1069.78 691.796 L1070.34 691.796 L1070.9 691.796 L1071.46 691.796 L1072.02 691.796 L1072.57 691.796 L1073.13 691.796 L1073.69 691.796 L1074.25 691.796 L1074.81 691.796 L1075.37 691.796 L1075.93 691.796 L1076.49 691.796 L1077.05 691.796 L1077.61 691.796 L1078.17 691.796 L1078.73 691.796 L1079.29 691.796 L1079.85 691.796 L1080.4 691.796 L1080.96 691.796 L1081.52 691.796 L1082.08 691.796 L1082.64 691.796 L1083.2 691.796 L1083.76 691.796 L1084.32 691.796 L1084.88 691.796 L1085.44 691.796 L1086 691.796 L1086.56 691.796 L1087.12 691.796 L1087.67 691.796 L1088.23 691.796 L1088.79 691.796 L1089.35 691.796 L1089.91 691.796 L1090.47 691.796 L1091.03 691.796 L1091.59 691.796 L1092.15 691.796 L1092.71 691.796 L1093.27 691.796 L1093.83 691.796 L1094.39 691.796 L1094.94 691.796 L1095.5 691.796 L1096.06 691.796 L1096.62 691.796 L1097.18 691.796 L1097.74 691.796 L1098.3 691.796 L1098.86 691.796 L1099.42 691.796 L1099.98 691.796 L1100.54 691.796 L1101.1 691.796 L1101.66 691.796 L1102.22 691.796 L1102.77 691.796 L1103.33 691.796 L1103.89 691.796 L1104.45 691.796 L1105.01 691.796 L1105.57 691.796 L1106.13 691.796 L1106.69 691.796 L1107.25 691.796 L1107.81 691.796 L1108.37 691.796 L1108.93 691.796 L1109.49 691.796 L1110.04 691.796 L1110.6 691.796 L1111.16 691.796 L1111.72 691.796 L1112.28 691.796 L1112.84 691.796 L1113.4 691.796 L1113.96 691.796 L1114.52 691.796 L1115.08 691.796 L1115.64 691.796 L1116.2 691.796 L1116.76 691.796 L1117.31 691.796 L1117.87 691.796 L1118.43 691.796 L1118.99 691.796 L1119.55 691.796 L1120.11 691.796 L1120.67 691.796 L1121.23 691.796 L1121.79 691.796 L1122.35 691.796 L1122.91 691.796 L1123.47 691.796 L1124.03 691.796 L1124.59 691.796 L1125.14 691.796 L1125.7 691.796 L1126.26 691.796 L1126.82 691.796 L1127.38 691.796 L1127.94 691.796 L1128.5 691.796 L1129.06 691.796 L1129.62 691.796 L1130.18 691.796 L1130.74 691.796 L1131.3 691.796 L1131.86 691.796 L1132.41 691.796 L1132.97 691.796 L1133.53 691.796 L1134.09 691.796 L1134.65 691.796 L1135.21 691.796 L1135.77 691.796 L1136.33 691.796 L1136.89 691.796 L1137.45 691.796 L1138.01 691.796 L1138.57 691.796 L1139.13 691.796 L1139.68 691.796 L1140.24 691.796 L1140.8 691.796 L1141.36 691.796 L1141.92 691.796 L1142.48 691.796 L1143.04 691.796 L1143.6 691.796 L1144.16 691.796 L1144.72 691.796 L1145.28 691.796 L1145.84 691.796 L1146.4 691.796 L1146.96 691.796 L1147.51 691.796 L1148.07 691.796 L1148.63 691.796 L1149.19 691.796 L1149.75 691.796 L1150.31 691.796 L1150.87 691.796 L1151.43 691.796 L1151.99 691.796 L1152.55 691.796 L1153.11 691.796 L1153.67 691.796 L1154.23 691.796 L1154.78 691.796 L1155.34 691.796 L1155.9 691.796 L1156.46 691.796 L1157.02 691.796 L1157.58 691.796 L1158.14 691.796 L1158.7 691.796 L1159.26 691.796 L1159.82 691.796 L1160.38 691.796 L1160.94 691.796 L1161.5 691.796 L1162.05 691.796 L1162.61 691.796 L1163.17 691.796 L1163.73 691.796 L1164.29 691.796 L1164.85 691.796 L1165.41 691.796 L1165.97 691.796 L1166.53 691.796 L1167.09 691.796 L1167.65 691.796 L1168.21 691.796 L1168.77 691.796 L1169.33 691.796 L1169.88 691.796 L1170.44 691.796 L1171 691.796 L1171.56 691.796 L1172.12 691.796 L1172.68 691.796 L1173.24 691.796 L1173.8 691.796 L1174.36 691.796 L1174.92 691.796 L1175.48 691.796 L1176.04 691.796 L1176.6 691.796 L1177.15 691.796 L1177.71 691.796 L1178.27 691.796 L1178.83 691.796 L1179.39 691.796 L1179.95 691.796 L1180.51 691.796 L1181.07 691.796 L1181.63 691.796 L1182.19 691.796 L1182.75 691.796 L1183.31 691.796 L1183.87 691.796 L1184.43 691.796 L1184.98 691.796 L1185.54 691.796 L1186.1 691.796 L1186.66 691.796 L1187.22 691.796 L1187.78 691.796 L1188.34 691.796 L1188.9 691.796 L1189.46 691.796 L1190.02 691.796 L1190.58 691.796 L1191.14 691.796 L1191.7 691.796 L1192.25 691.796 L1192.81 691.796 L1193.37 691.796 L1193.93 691.796 L1194.49 691.796 L1195.05 691.796 L1195.61 691.796 L1196.17 691.796 L1196.73 691.796 L1197.29 691.796 L1197.85 691.796 L1198.41 691.796 L1198.97 691.796 L1199.52 691.796 L1200.08 691.796 L1200.64 691.796 L1201.2 691.796 L1201.76 691.796 L1202.32 691.796 L1202.88 691.796 L1203.44 691.796 L1204 691.796 L1204.56 691.796 L1205.12 691.796 L1205.68 691.796 L1206.24 691.796 L1206.8 691.796 L1207.35 691.796 L1207.91 691.796 L1208.47 691.796 L1209.03 691.796 L1209.59 691.796 L1210.15 691.796 L1210.71 691.796 L1211.27 691.796 L1211.83 691.796 L1212.39 691.796 L1212.95 691.796 L1213.51 691.796 L1214.07 691.796 L1214.62 691.796 L1215.18 691.796 L1215.74 691.796 L1216.3 691.796 L1216.86 691.796 L1217.42 691.796 L1217.98 691.796 L1218.54 691.796 L1219.1 691.796 L1219.66 691.796 L1220.22 691.796 L1220.78 691.796 L1221.34 691.796 L1221.89 691.796 L1222.45 691.796 L1223.01 691.796 L1223.57 691.796 L1224.13 691.796 L1224.69 691.796 L1225.25 691.796 L1225.81 691.796 L1226.37 691.796 L1226.93 691.796 L1227.49 691.796 L1228.05 691.796 L1228.61 691.796 L1229.17 691.796 L1229.72 691.796 L1230.28 691.796 L1230.84 691.796 L1231.4 691.796 L1231.96 691.796 L1232.52 691.796 L1233.08 691.796 L1233.64 691.796 L1234.2 691.796 L1234.76 691.796 L1235.32 691.796 L1235.88 691.796 L1236.44 691.796 L1236.99 691.796 L1237.55 691.796 L1238.11 691.796 L1238.67 691.796 L1239.23 691.796 L1239.79 691.796 L1240.35 691.796 L1240.91 691.796 L1241.47 691.796 L1242.03 691.796 L1242.59 691.796 L1243.15 691.796 L1243.71 691.796 L1244.26 691.796 L1244.82 691.796 L1245.38 691.796 L1245.94 691.796 L1246.5 691.796 L1247.06 691.796 L1247.62 691.796 L1248.18 691.796 L1248.74 691.796 L1249.3 691.796 L1249.86 691.796 L1250.42 691.796 L1250.98 691.796 L1251.54 691.796 L1252.09 691.796 L1252.65 691.796 L1253.21 691.796 L1253.77 691.796 L1254.33 691.796 L1254.89 691.796 L1255.45 691.796 L1256.01 691.796 L1256.57 691.796 L1257.13 691.796 L1257.69 691.796 L1258.25 691.796 L1258.81 691.796 L1259.36 691.796 L1259.92 691.796 L1260.48 691.796 L1261.04 691.796 L1261.6 691.796 L1262.16 691.796 L1262.72 691.796 L1263.28 691.796 L1263.84 691.796 L1264.4 691.796 L1264.96 691.796 L1265.52 691.796 L1266.08 691.796 L1266.63 691.796 L1267.19 691.796 L1267.75 691.796 L1268.31 691.796 L1268.87 691.796 L1269.43 691.796 L1269.99 691.796 L1270.55 691.796 L1271.11 691.796 L1271.67 691.796 L1272.23 691.796 L1272.79 691.796 L1273.35 691.796 L1273.91 691.796 L1274.46 691.796 L1275.02 691.796 L1275.58 691.796 L1276.14 691.796 L1276.7 691.796 L1277.26 691.796 L1277.82 691.796 L1278.38 691.796 L1278.94 691.796 L1279.5 691.796 L1280.06 691.796 L1280.62 691.796 L1281.18 691.796 L1281.73 691.796 L1282.29 691.796 L1282.85 691.796 L1283.41 691.796 L1283.97 691.796 L1284.53 691.796 L1285.09 691.796 L1285.65 691.796 L1286.21 691.796 L1286.77 691.796 L1287.33 691.796 L1287.89 691.796 L1288.45 691.796 L1289 691.796 L1289.56 691.796 L1290.12 691.796 L1290.68 691.796 L1291.24 691.796 L1291.8 691.796 L1292.36 691.796 L1292.92 691.796 L1293.48 691.796 L1294.04 691.796 L1294.6 691.796 L1295.16 691.796 L1295.72 691.796 L1296.28 691.796 L1296.83 691.796 L1297.39 691.796 L1297.95 691.796 L1298.51 691.796 L1299.07 691.796 L1299.63 691.796 L1300.19 691.796 L1300.75 691.796 L1301.31 691.796 L1301.87 691.796 L1302.43 691.796 L1302.99 691.796 L1303.55 691.796 L1304.1 691.796 L1304.66 691.796 L1305.22 691.796 L1305.78 691.796 L1306.34 691.796 L1306.9 691.796 L1307.46 691.796 L1308.02 691.796 L1308.58 691.796 L1309.14 691.796 L1309.7 691.796 L1310.26 691.796 L1310.82 691.796 L1311.38 691.796 L1311.93 691.796 L1312.49 691.796 L1313.05 691.796 L1313.61 691.796 L1314.17 691.796 L1314.73 691.796 L1315.29 691.796 L1315.85 691.796 L1316.41 691.796 L1316.97 691.796 L1317.53 691.796 L1318.09 691.796 L1318.65 691.796 L1319.2 691.796 L1319.76 691.796 L1320.32 691.796 L1320.88 691.796 L1321.44 691.796 L1322 691.796 L1322.56 691.796 L1323.12 691.796 L1323.68 691.796 L1324.24 691.796 L1324.8 691.796 L1325.36 691.796 L1325.92 691.796 L1326.47 691.796 L1327.03 691.796 L1327.59 691.796 L1328.15 691.796 L1328.71 691.796 L1329.27 691.796 L1329.83 691.796 L1330.39 691.796 L1330.95 691.796 L1331.51 691.796 L1332.07 691.796 L1332.63 691.796 L1333.19 691.796 L1333.75 691.796 L1334.3 691.796 L1334.86 691.796 L1335.42 691.796 L1335.98 691.796 L1336.54 691.796 L1337.1 691.796 L1337.66 691.796 L1338.22 691.796 L1338.78 691.796 L1339.34 691.796 L1339.9 691.796 L1340.46 691.796 L1341.02 691.796 L1341.57 691.796 L1342.13 691.796 L1342.69 691.796 L1343.25 691.796 L1343.81 691.796 L1344.37 691.796 L1344.93 691.796 L1345.49 691.796 L1346.05 691.796 L1346.61 691.796 L1347.17 691.796 L1347.73 691.796 L1348.29 691.796 L1348.84 691.796 L1349.4 691.796 L1349.96 691.796 L1350.52 691.796 L1351.08 691.796 L1351.64 691.796 L1352.2 691.796 L1352.76 691.796 L1353.32 691.796 L1353.88 691.796 L1354.44 691.796 L1355 691.796 L1355.56 691.796 L1356.12 691.796 L1356.67 691.796 L1357.23 691.796 L1357.79 691.796 L1358.35 691.796 L1358.91 691.796 L1359.47 691.796 L1360.03 691.796 L1360.59 691.796 L1361.15 691.796 L1361.71 691.796 L1362.27 691.796 L1362.83 691.796 L1363.39 691.796 L1363.94 691.796 L1364.5 691.796 L1365.06 691.796 L1365.62 691.796 L1366.18 691.796 L1366.74 691.796 L1367.3 691.796 L1367.86 691.796 L1368.42 691.796 L1368.98 691.796 L1369.54 691.796 L1370.1 691.796 L1370.66 691.796 L1371.21 691.796 L1371.77 691.796 L1372.33 691.796 L1372.89 691.796 L1373.45 691.796 L1374.01 691.796 L1374.57 691.796 L1375.13 691.796 L1375.69 691.796 L1376.25 691.796 L1376.81 691.796 L1377.37 691.796 L1377.93 691.796 L1378.49 691.796 L1379.04 691.796 L1379.6 691.796 L1380.16 691.796 L1380.72 691.796 L1381.28 691.796 L1381.84 691.796 L1382.4 691.796 L1382.96 691.796 L1383.52 691.796 L1384.08 691.796 L1384.64 691.796 L1385.2 691.796 L1385.76 691.796 L1386.31 691.796 L1386.87 691.796 L1387.43 691.796 L1387.99 691.796 L1388.55 691.796 L1389.11 691.796 L1389.67 691.796 L1390.23 691.796 L1390.79 691.796 L1391.35 691.796 L1391.91 691.796 L1392.47 691.796 L1393.03 691.796 L1393.58 691.796 L1394.14 691.796 L1394.7 691.796 L1395.26 691.796 L1395.82 691.796 L1396.38 691.796 L1396.94 691.796 L1397.5 691.796 L1398.06 691.796 L1398.62 691.796 L1399.18 691.796 L1399.74 691.796 L1400.3 691.796 L1400.86 691.796 L1401.41 691.796 L1401.97 691.796 L1402.53 691.796 L1403.09 691.796 L1403.65 691.796 L1404.21 691.796 L1404.77 691.796 L1405.33 691.796 L1405.89 691.796 L1406.45 691.796 L1407.01 691.796 L1407.57 691.796 L1408.13 691.796 L1408.68 691.796 L1409.24 691.796 L1409.8 691.796 L1410.36 691.796 L1410.92 691.796 L1411.48 691.796 L1412.04 691.796 L1412.6 691.796 L1413.16 691.796 L1413.72 691.796 L1414.28 691.796 L1414.84 691.796 L1415.4 691.796 L1415.95 691.796 L1416.51 691.796 L1417.07 691.796 L1417.63 691.796 L1418.19 691.796 L1418.75 691.796 L1419.31 691.796 L1419.87 691.796 L1420.43 691.796 L1420.99 691.796 L1421.55 691.796 L1422.11 691.796 L1422.67 691.796 L1423.23 691.796 L1423.78 691.796 L1424.34 691.796 L1424.9 691.796 L1425.46 691.796 L1426.02 691.796 L1426.58 691.796 L1427.14 691.796 L1427.7 691.796 L1428.26 691.796 L1428.82 691.796 L1429.38 691.796 L1429.94 691.796 L1430.5 691.796 L1431.05 691.796 L1431.61 691.796 L1432.17 691.796 L1432.73 691.796 L1433.29 691.796 L1433.85 691.796 L1434.41 691.796 L1434.97 691.796 L1435.53 691.796 L1436.09 691.796 L1436.65 691.796 L1437.21 691.796 L1437.77 691.796 L1438.33 691.796 L1438.88 691.796 L1439.44 691.796 L1440 691.796 L1440.56 691.796 L1441.12 691.796 L1441.68 691.796 L1442.24 691.796 L1442.8 691.796 L1443.36 691.796 L1443.92 691.796 L1444.48 691.796 L1445.04 691.796 L1445.6 691.796 L1446.15 691.796 L1446.71 691.796 L1447.27 691.796 L1447.83 691.796 L1448.39 691.796 L1448.95 691.796 L1449.51 691.796 L1450.07 691.796 L1450.63 691.796 L1451.19 691.796 L1451.75 691.796 L1452.31 691.796 L1452.87 691.796 L1453.42 691.796 L1453.98 691.796 L1454.54 691.796 L1455.1 691.796 L1455.66 691.796 L1456.22 691.796 L1456.78 691.796 L1457.34 691.796 L1457.9 691.796 L1458.46 691.796 L1459.02 691.796 L1459.58 691.796 L1460.14 691.796 L1460.7 691.796 L1461.25 691.796 L1461.81 691.796 L1462.37 691.796 L1462.93 691.796 L1463.49 691.796 L1464.05 691.796 L1464.61 691.796 L1465.17 691.796 L1465.73 691.796 L1466.29 691.796 L1466.85 691.796 L1467.41 691.796 L1467.97 691.796 L1468.52 691.796 L1469.08 691.796 L1469.64 691.796 L1470.2 691.796 L1470.76 691.796 L1471.32 691.796 L1471.88 691.796 L1472.44 691.796 L1473 691.796 L1473.56 691.796 L1474.12 691.796 L1474.68 691.796 L1475.24 691.796 L1475.79 691.796 L1476.35 691.796 L1476.91 691.796 L1477.47 691.796 L1478.03 691.796 L1478.59 691.796 L1479.15 691.796 L1479.71 691.796 L1480.27 691.796 L1480.83 691.796 L1481.39 691.796 L1481.95 691.796 L1482.51 691.796 L1483.07 691.796 L1483.62 691.796 L1484.18 691.796 L1484.74 691.796 L1485.3 691.796 L1485.86 691.796 L1486.42 691.796 L1486.98 691.796 L1487.54 691.796 L1488.1 691.796 L1488.66 691.796 L1489.22 691.796 L1489.78 691.796 L1490.34 691.796 L1490.89 691.796 L1491.45 691.796 L1492.01 691.796 L1492.57 691.796 L1493.13 691.796 L1493.69 691.796 L1494.25 691.796 L1494.81 691.796 L1495.37 691.796 L1495.93 691.796 L1496.49 691.796 L1497.05 691.796 L1497.61 691.796 L1498.16 691.796 L1498.72 691.796 L1499.28 691.796 L1499.84 691.796 L1500.4 691.796 L1500.96 691.796 L1501.52 691.796 L1502.08 691.796 L1502.64 691.796 L1503.2 691.796 L1503.76 691.796 L1504.32 691.796 L1504.88 691.796 L1505.44 691.796 L1505.99 691.796 L1506.55 691.796 L1507.11 691.796 L1507.67 691.796 L1508.23 691.796 L1508.79 691.796 L1509.35 691.796 L1509.91 691.796 L1510.47 691.796 L1511.03 691.796 L1511.59 691.796 L1512.15 691.796 L1512.71 691.796 L1513.26 691.796 L1513.82 691.796 L1514.38 691.796 L1514.94 691.796 L1515.5 691.796 L1516.06 691.796 L1516.62 691.796 L1517.18 691.796 L1517.74 691.796 L1518.3 691.796 L1518.86 691.796 L1519.42 691.796 L1519.98 691.796 L1520.53 691.796 L1521.09 691.796 L1521.65 691.796 L1522.21 691.796 L1522.77 691.796 L1523.33 691.796 L1523.89 691.796 L1524.45 691.796 L1525.01 691.796 L1525.57 691.796 L1526.13 691.796 L1526.69 691.796 L1527.25 691.796 L1527.81 691.796 L1528.36 691.796 L1528.92 691.796 L1529.48 691.796 L1530.04 691.796 L1530.6 691.796 L1531.16 691.796 L1531.72 691.796 L1532.28 691.796 L1532.84 691.796 L1533.4 691.796 L1533.96 691.796 L1534.52 691.796 L1535.08 691.796 L1535.63 691.796 L1536.19 691.796 L1536.75 691.796 L1537.31 691.796 L1537.87 691.796 L1538.43 691.796 L1538.99 691.796 L1539.55 691.796 L1540.11 691.796 L1540.67 691.796 L1541.23 691.796 L1541.79 691.796 L1542.35 691.796 L1542.9 691.796 L1543.46 691.796 L1544.02 691.796 L1544.58 691.796 L1545.14 691.796 L1545.7 691.796 L1546.26 691.796 L1546.82 691.796 L1547.38 691.796 L1547.94 691.796 L1548.5 691.796 L1549.06 691.796 L1549.62 691.796 L1550.18 691.796 L1550.73 691.796 L1551.29 691.796 L1551.85 691.796 L1552.41 691.796 L1552.97 691.796 L1553.53 691.796 L1554.09 691.796 L1554.65 691.796 L1555.21 691.796 L1555.77 691.796 L1556.33 691.796 L1556.89 691.796 L1557.45 691.796 L1558 691.796 L1558.56 691.796 L1559.12 691.796 L1559.68 691.796 L1560.24 691.796 L1560.8 691.796 L1561.36 691.796 L1561.92 691.796 L1562.48 691.796 L1563.04 691.796 L1563.6 691.796 L1564.16 691.796 L1564.72 691.796 L1565.28 691.796 L1565.83 691.796 L1566.39 691.796 L1566.95 691.796 L1567.51 691.796 L1568.07 691.796 L1568.63 691.796 L1569.19 691.796 L1569.75 691.796 L1570.31 691.796 L1570.87 691.796 L1571.43 691.796 L1571.99 691.796 L1572.55 691.796 L1573.1 691.796 L1573.66 691.796 L1574.22 691.796 L1574.78 691.796 L1575.34 691.796 L1575.9 691.796 L1576.46 691.796 L1577.02 691.796 L1577.58 691.796 L1578.14 691.796 L1578.7 691.796 L1579.26 691.796 L1579.82 691.796 L1580.37 691.796 L1580.93 691.796 L1581.49 691.796 L1582.05 691.796 L1582.61 691.796 L1583.17 691.796 L1583.73 691.796 L1584.29 691.796 L1584.85 691.796 L1585.41 691.796 L1585.97 691.796 L1586.53 691.796 L1587.09 691.796 L1587.65 691.796 L1588.2 691.796 L1588.76 691.796 L1589.32 691.796 L1589.88 691.796 L1590.44 691.796 L1591 691.796 L1591.56 691.796 L1592.12 691.796 L1592.68 691.796 L1593.24 691.796 L1593.8 691.796 L1594.36 691.796 L1594.92 691.796 L1595.47 691.796 L1596.03 691.796 L1596.59 691.796 L1597.15 691.796 L1597.71 691.796 L1598.27 691.796 L1598.83 691.796 L1599.39 691.796 L1599.95 691.796 L1600.51 691.796 L1601.07 691.796 L1601.63 691.796 L1602.19 691.796 L1602.74 691.796 L1603.3 691.796 L1603.86 691.796 L1604.42 691.796 L1604.98 691.796 L1605.54 691.796 L1606.1 691.796 L1606.66 691.796 L1607.22 691.796 L1607.78 691.796 L1608.34 691.796 L1608.9 691.796 L1609.46 691.796 L1610.02 691.796 L1610.57 691.796 L1611.13 691.796 L1611.69 691.796 L1612.25 691.796 L1612.81 691.796 L1613.37 691.796 L1613.93 691.796 L1614.49 691.796 L1615.05 691.796 L1615.61 691.796 L1616.17 691.796 L1616.73 691.796 L1617.29 691.796 L1617.84 691.796 L1618.4 691.796 L1618.96 691.796 L1619.52 691.796 L1620.08 691.796 L1620.64 691.796 L1621.2 691.796 L1621.76 691.796 L1622.32 691.796 L1622.88 691.796 L1623.44 691.796 L1624 691.796 L1624.56 691.796 L1625.11 691.796 L1625.67 691.796 L1626.23 691.796 L1626.79 691.796 L1627.35 691.796 L1627.91 691.796 L1628.47 691.796 L1629.03 691.796 L1629.59 691.796 L1630.15 691.796 L1630.71 691.796 L1631.27 691.796 L1631.83 691.796 L1632.39 691.796 L1632.94 691.796 L1633.5 691.796 L1634.06 691.796 L1634.62 691.796 L1635.18 691.796 L1635.74 691.796 L1636.3 691.796 L1636.86 691.796 L1637.42 691.796 L1637.98 691.796 L1638.54 691.796 L1639.1 691.796 L1639.66 691.796 L1640.21 691.796 L1640.77 691.796 L1641.33 691.796 L1641.89 691.796 L1642.45 691.796 L1643.01 691.796 L1643.57 691.796 L1644.13 691.796 L1644.69 691.796 L1645.25 691.796 L1645.81 691.796 L1646.37 691.796 L1646.93 691.796 L1647.48 691.796 L1648.04 691.796 L1648.6 691.796 L1649.16 691.796 L1649.72 691.796 L1650.28 691.796 L1650.84 691.796 L1651.4 691.796 L1651.96 691.796 L1652.52 691.796 L1653.08 691.796 L1653.64 691.796 L1654.2 691.796 L1654.76 691.796 L1655.31 691.796 L1655.87 691.796 L1656.43 691.796 L1656.99 691.796 L1657.55 691.796 L1658.11 691.796 L1658.67 691.796 L1659.23 691.796 L1659.79 691.796 L1660.35 691.796 L1660.91 691.796 L1661.47 691.796 L1662.03 691.796 L1662.58 691.796 L1663.14 691.796 L1663.7 691.796 L1664.26 691.796 L1664.82 691.796 L1665.38 691.796 L1665.94 691.796 L1666.5 691.796 L1667.06 691.796 L1667.62 691.796 L1668.18 691.796 L1668.74 691.796 L1669.3 691.796 L1669.85 691.796 L1670.41 691.796 L1670.97 691.796 L1671.53 691.796 L1672.09 691.796 L1672.65 691.796 L1673.21 691.796 L1673.77 691.796 L1674.33 691.796 L1674.89 691.796 L1675.45 691.796 L1676.01 691.796 L1676.57 691.796 L1677.13 691.796 L1677.68 691.796 L1678.24 691.796 L1678.8 691.796 L1679.36 691.796 L1679.92 691.796 L1680.48 691.796 L1681.04 691.796 L1681.6 691.796 L1682.16 691.796 L1682.72 691.796 L1683.28 691.796 L1683.84 691.796 L1684.4 691.796 L1684.95 691.796 L1685.51 691.796 L1686.07 691.796 L1686.63 691.796 L1687.19 691.796 L1687.75 691.796 L1688.31 691.796 L1688.87 691.796 L1689.43 691.796 L1689.99 691.796 L1690.55 691.796 L1691.11 691.796 L1691.67 691.796 L1692.23 691.796 L1692.78 691.796 L1693.34 691.796 L1693.9 691.796 L1694.46 691.796 L1695.02 691.796 L1695.58 691.796 L1696.14 691.796 L1696.7 691.796 L1697.26 691.796 L1697.82 691.796 L1698.38 691.796 L1698.94 691.796 L1699.5 691.796 L1700.05 691.796 L1700.61 691.796 L1701.17 691.796 L1701.73 691.796 L1702.29 691.796 L1702.85 691.796 L1703.41 691.796 L1703.97 691.796 L1704.53 691.796 L1705.09 691.796 L1705.65 691.796 L1706.21 691.796 L1706.77 691.796 L1707.32 691.796 L1707.88 691.796 L1708.44 691.796 L1709 691.796 L1709.56 691.796 L1710.12 691.796 L1710.68 691.796 L1711.24 691.796 L1711.8 691.796 L1712.36 691.796 L1712.92 691.796 L1713.48 691.796 L1714.04 691.796 L1714.6 691.796 L1715.15 691.796 L1715.71 691.796 L1716.27 691.796 L1716.83 691.796 L1717.39 691.796 L1717.95 691.796 L1718.51 691.796 L1719.07 691.796 L1719.63 691.796 L1720.19 691.796 L1720.75 691.796 L1721.31 691.796 L1721.87 691.796 L1722.42 691.796 L1722.98 691.796 L1723.54 691.796 L1724.1 691.796 L1724.66 691.796 L1725.22 691.796 L1725.78 691.796 L1726.34 691.796 L1726.9 691.796 L1727.46 691.796 L1728.02 691.796 L1728.58 691.796 L1729.14 691.796 L1729.69 691.796 L1730.25 691.796 L1730.81 691.796 L1731.37 691.796 L1731.93 691.796 L1732.49 691.796 L1733.05 691.796 L1733.61 691.796 L1734.17 691.796 L1734.73 691.796 L1735.29 691.796 L1735.85 691.796 L1736.41 691.796 L1736.97 691.796 L1737.52 691.796 L1738.08 691.796 L1738.64 691.796 L1739.2 691.796 L1739.76 691.796 L1740.32 691.796 L1740.88 691.796 L1741.44 691.796 L1742 691.796 L1742.56 691.796 L1743.12 691.796 L1743.68 691.796 L1744.24 691.796 L1744.79 691.796 L1745.35 691.796 L1745.91 691.796 L1746.47 691.796 L1747.03 691.796 L1747.59 691.796 L1748.15 691.796 L1748.71 691.796 L1749.27 691.796 L1749.83 691.796 L1750.39 691.796 L1750.95 691.796 L1751.51 691.796 L1752.06 691.796 L1752.62 691.796 L1753.18 691.796 L1753.74 691.796 L1754.3 691.796 L1754.86 691.796 L1755.42 691.796 L1755.98 691.796 L1756.54 691.796 L1757.1 691.796 L1757.66 691.796 L1758.22 691.796 L1758.78 691.796 L1759.34 691.796 L1759.89 691.796 L1760.45 691.796 L1761.01 691.796 L1761.57 691.796 L1762.13 691.796 L1762.69 691.796 L1763.25 691.796 L1763.81 691.796 L1764.37 691.796 L1764.93 691.796 L1765.49 691.796 L1766.05 691.796 L1766.61 691.796 L1767.16 691.796 L1767.72 691.796 L1768.28 691.796 L1768.84 691.796 L1769.4 691.796 L1769.96 691.796 L1770.52 691.796 L1771.08 691.796 L1771.64 691.796 L1772.2 691.796 L1772.76 691.796 L1773.32 691.796 L1773.88 691.796 L1774.43 691.796 L1774.99 691.796 L1775.55 691.796 L1776.11 691.796 L1776.67 691.796 L1777.23 691.796 L1777.79 691.796 L1778.35 691.796 L1778.91 691.796 L1779.47 691.796 L1780.03 691.796 L1780.59 691.796 L1781.15 691.796 L1781.71 691.796 L1782.26 691.796 L1782.82 691.796 L1783.38 691.796 L1783.94 691.796 L1784.5 691.796 L1785.06 691.796 L1785.62 691.796 L1786.18 691.796 L1786.74 691.796 L1787.3 691.796 L1787.86 691.796 L1788.42 691.796 L1788.98 691.796 L1789.53 691.796 L1790.09 691.796 L1790.65 691.796 L1791.21 691.796 L1791.77 691.796 L1792.33 691.796 L1792.89 691.796 L1793.45 691.796 L1794.01 691.796 L1794.57 691.796 L1795.13 691.796 L1795.69 691.796 L1796.25 691.796 L1796.8 691.796 L1797.36 691.796 L1797.92 691.796 L1798.48 691.796 L1799.04 691.796 L1799.6 691.796 L1800.16 691.796 L1800.72 691.796 L1801.28 691.796 L1801.84 691.796 L1802.4 691.796 L1802.96 691.796 L1803.52 691.796 L1804.08 691.796 L1804.63 691.796 L1805.19 691.796 L1805.75 691.796 L1806.31 691.796 L1806.87 691.796 L1807.43 691.796 L1807.99 691.796 L1808.55 691.796 L1809.11 691.796 L1809.67 691.796 L1810.23 691.796 L1810.79 691.796 L1811.35 691.796 L1811.9 691.796 L1812.46 691.796 L1813.02 691.796 L1813.58 691.796 L1814.14 691.796 L1814.7 691.796 L1815.26 691.796 L1815.82 691.796 L1816.38 691.796 L1816.94 691.796 L1817.5 691.796 L1818.06 691.796 L1818.62 691.796 L1819.18 691.796 L1819.73 691.796 L1820.29 691.796 L1820.85 691.796 L1821.41 691.796 L1821.97 691.796 L1822.53 691.796 L1823.09 691.796 L1823.65 691.796 L1824.21 691.796 L1824.77 691.796 L1825.33 691.796 L1825.89 691.796 L1826.45 691.796 L1827 691.796 L1827.56 691.796 L1828.12 691.796 L1828.68 691.796 L1829.24 691.796 L1829.8 691.796 L1830.36 691.796 L1830.92 691.796 L1831.48 691.796 L1832.04 691.796 L1832.6 691.796 L1833.16 691.796 L1833.72 691.796 L1834.27 691.796 L1834.83 691.796 L1835.39 691.796 L1835.95 691.796 L1836.51 691.796 L1837.07 691.796 L1837.63 691.796 L1838.19 691.796 L1838.19 681.655 L1837.63 681.655 L1837.07 681.655 L1836.51 681.655 L1835.95 681.655 L1835.39 681.655 L1834.83 681.655 L1834.27 681.655 L1833.72 681.655 L1833.16 681.655 L1832.6 681.655 L1832.04 681.655 L1831.48 681.655 L1830.92 681.655 L1830.36 681.655 L1829.8 681.655 L1829.24 681.655 L1828.68 681.655 L1828.12 681.655 L1827.56 681.655 L1827 681.655 L1826.45 681.655 L1825.89 681.655 L1825.33 681.655 L1824.77 681.655 L1824.21 681.655 L1823.65 681.655 L1823.09 681.655 L1822.53 681.655 L1821.97 681.655 L1821.41 681.655 L1820.85 681.655 L1820.29 681.655 L1819.73 681.655 L1819.18 681.655 L1818.62 681.655 L1818.06 681.655 L1817.5 681.655 L1816.94 681.655 L1816.38 681.655 L1815.82 681.655 L1815.26 681.655 L1814.7 681.655 L1814.14 681.655 L1813.58 681.655 L1813.02 681.655 L1812.46 681.655 L1811.9 681.655 L1811.35 681.655 L1810.79 681.655 L1810.23 681.655 L1809.67 681.655 L1809.11 681.655 L1808.55 681.655 L1807.99 681.655 L1807.43 681.655 L1806.87 681.655 L1806.31 681.655 L1805.75 681.655 L1805.19 681.655 L1804.63 681.655 L1804.08 681.655 L1803.52 681.655 L1802.96 681.655 L1802.4 681.655 L1801.84 681.655 L1801.28 681.655 L1800.72 681.655 L1800.16 681.655 L1799.6 681.655 L1799.04 681.655 L1798.48 681.655 L1797.92 681.655 L1797.36 681.655 L1796.8 681.655 L1796.25 681.655 L1795.69 681.655 L1795.13 681.655 L1794.57 681.655 L1794.01 681.655 L1793.45 681.655 L1792.89 681.655 L1792.33 681.655 L1791.77 681.655 L1791.21 681.655 L1790.65 681.655 L1790.09 681.655 L1789.53 681.655 L1788.98 681.655 L1788.42 681.655 L1787.86 681.655 L1787.3 681.655 L1786.74 681.655 L1786.18 681.655 L1785.62 681.655 L1785.06 681.655 L1784.5 681.655 L1783.94 681.655 L1783.38 681.655 L1782.82 681.655 L1782.26 681.655 L1781.71 681.655 L1781.15 681.655 L1780.59 681.655 L1780.03 681.655 L1779.47 681.655 L1778.91 681.655 L1778.35 681.655 L1777.79 681.655 L1777.23 681.655 L1776.67 681.655 L1776.11 681.655 L1775.55 681.655 L1774.99 681.655 L1774.43 681.655 L1773.88 681.655 L1773.32 681.655 L1772.76 681.655 L1772.2 681.655 L1771.64 681.655 L1771.08 681.655 L1770.52 681.655 L1769.96 681.655 L1769.4 681.655 L1768.84 681.655 L1768.28 681.655 L1767.72 681.655 L1767.16 681.655 L1766.61 681.655 L1766.05 681.655 L1765.49 681.655 L1764.93 681.655 L1764.37 681.655 L1763.81 681.655 L1763.25 681.655 L1762.69 681.655 L1762.13 681.655 L1761.57 681.655 L1761.01 681.655 L1760.45 681.655 L1759.89 681.655 L1759.34 681.655 L1758.78 681.655 L1758.22 681.655 L1757.66 681.655 L1757.1 681.655 L1756.54 681.655 L1755.98 681.655 L1755.42 681.655 L1754.86 681.655 L1754.3 681.655 L1753.74 681.655 L1753.18 681.655 L1752.62 681.655 L1752.06 681.655 L1751.51 681.655 L1750.95 681.655 L1750.39 681.655 L1749.83 681.655 L1749.27 681.655 L1748.71 681.655 L1748.15 681.655 L1747.59 681.655 L1747.03 681.655 L1746.47 681.655 L1745.91 681.655 L1745.35 681.655 L1744.79 681.655 L1744.24 681.655 L1743.68 681.655 L1743.12 681.655 L1742.56 681.655 L1742 681.655 L1741.44 681.655 L1740.88 681.655 L1740.32 681.655 L1739.76 681.655 L1739.2 681.655 L1738.64 681.655 L1738.08 681.655 L1737.52 681.655 L1736.97 681.655 L1736.41 681.655 L1735.85 681.655 L1735.29 681.655 L1734.73 681.655 L1734.17 681.655 L1733.61 681.655 L1733.05 681.655 L1732.49 681.655 L1731.93 681.655 L1731.37 681.655 L1730.81 681.655 L1730.25 681.655 L1729.69 681.655 L1729.14 681.655 L1728.58 681.655 L1728.02 681.655 L1727.46 681.655 L1726.9 681.655 L1726.34 681.655 L1725.78 681.655 L1725.22 681.655 L1724.66 681.655 L1724.1 681.655 L1723.54 681.655 L1722.98 681.655 L1722.42 681.655 L1721.87 681.655 L1721.31 681.655 L1720.75 681.655 L1720.19 681.655 L1719.63 681.655 L1719.07 681.655 L1718.51 681.655 L1717.95 681.655 L1717.39 681.655 L1716.83 681.655 L1716.27 681.655 L1715.71 681.655 L1715.15 681.655 L1714.6 681.655 L1714.04 681.655 L1713.48 681.655 L1712.92 681.655 L1712.36 681.655 L1711.8 681.655 L1711.24 681.655 L1710.68 681.655 L1710.12 681.655 L1709.56 681.655 L1709 681.655 L1708.44 681.655 L1707.88 681.655 L1707.32 681.655 L1706.77 681.655 L1706.21 681.655 L1705.65 681.655 L1705.09 681.655 L1704.53 681.655 L1703.97 681.655 L1703.41 681.655 L1702.85 681.655 L1702.29 681.655 L1701.73 681.655 L1701.17 681.655 L1700.61 681.655 L1700.05 681.655 L1699.5 681.655 L1698.94 681.655 L1698.38 681.655 L1697.82 681.655 L1697.26 681.655 L1696.7 681.655 L1696.14 681.655 L1695.58 681.655 L1695.02 681.655 L1694.46 681.655 L1693.9 681.655 L1693.34 681.655 L1692.78 681.655 L1692.23 681.655 L1691.67 681.655 L1691.11 681.655 L1690.55 681.655 L1689.99 681.655 L1689.43 681.655 L1688.87 681.655 L1688.31 681.655 L1687.75 681.655 L1687.19 681.655 L1686.63 681.655 L1686.07 681.655 L1685.51 681.655 L1684.95 681.655 L1684.4 681.655 L1683.84 681.655 L1683.28 681.655 L1682.72 681.655 L1682.16 681.655 L1681.6 681.655 L1681.04 681.655 L1680.48 681.655 L1679.92 681.655 L1679.36 681.655 L1678.8 681.655 L1678.24 681.655 L1677.68 681.655 L1677.13 681.655 L1676.57 681.655 L1676.01 681.655 L1675.45 681.655 L1674.89 681.655 L1674.33 681.655 L1673.77 681.655 L1673.21 681.655 L1672.65 681.655 L1672.09 681.655 L1671.53 681.655 L1670.97 681.655 L1670.41 681.655 L1669.85 681.655 L1669.3 681.655 L1668.74 681.655 L1668.18 681.655 L1667.62 681.655 L1667.06 681.655 L1666.5 681.655 L1665.94 681.655 L1665.38 681.655 L1664.82 681.655 L1664.26 681.655 L1663.7 681.655 L1663.14 681.655 L1662.58 681.655 L1662.03 681.655 L1661.47 681.655 L1660.91 681.655 L1660.35 681.655 L1659.79 681.655 L1659.23 681.655 L1658.67 681.655 L1658.11 681.655 L1657.55 681.655 L1656.99 681.655 L1656.43 681.655 L1655.87 681.655 L1655.31 681.655 L1654.76 681.655 L1654.2 681.655 L1653.64 681.655 L1653.08 681.655 L1652.52 681.655 L1651.96 681.655 L1651.4 681.655 L1650.84 681.655 L1650.28 681.655 L1649.72 681.655 L1649.16 681.655 L1648.6 681.655 L1648.04 681.655 L1647.48 681.655 L1646.93 681.655 L1646.37 681.655 L1645.81 681.655 L1645.25 681.655 L1644.69 681.655 L1644.13 681.655 L1643.57 681.655 L1643.01 681.655 L1642.45 681.655 L1641.89 681.655 L1641.33 681.655 L1640.77 681.655 L1640.21 681.655 L1639.66 681.655 L1639.1 681.655 L1638.54 681.655 L1637.98 681.655 L1637.42 681.655 L1636.86 681.655 L1636.3 681.655 L1635.74 681.655 L1635.18 681.655 L1634.62 681.655 L1634.06 681.655 L1633.5 681.655 L1632.94 681.655 L1632.39 681.655 L1631.83 681.655 L1631.27 681.655 L1630.71 681.655 L1630.15 681.655 L1629.59 681.655 L1629.03 681.655 L1628.47 681.655 L1627.91 681.655 L1627.35 681.655 L1626.79 681.655 L1626.23 681.655 L1625.67 681.655 L1625.11 681.655 L1624.56 681.655 L1624 681.655 L1623.44 681.655 L1622.88 681.655 L1622.32 681.655 L1621.76 681.655 L1621.2 681.655 L1620.64 681.655 L1620.08 681.655 L1619.52 681.655 L1618.96 681.655 L1618.4 681.655 L1617.84 681.655 L1617.29 681.655 L1616.73 681.655 L1616.17 681.655 L1615.61 681.655 L1615.05 681.655 L1614.49 681.655 L1613.93 681.655 L1613.37 681.655 L1612.81 681.655 L1612.25 681.655 L1611.69 681.655 L1611.13 681.655 L1610.57 681.655 L1610.02 681.655 L1609.46 681.655 L1608.9 681.655 L1608.34 681.655 L1607.78 681.655 L1607.22 681.655 L1606.66 681.655 L1606.1 681.655 L1605.54 681.655 L1604.98 681.655 L1604.42 681.655 L1603.86 681.655 L1603.3 681.655 L1602.74 681.655 L1602.19 681.655 L1601.63 681.655 L1601.07 681.655 L1600.51 681.655 L1599.95 681.655 L1599.39 681.655 L1598.83 681.655 L1598.27 681.655 L1597.71 681.655 L1597.15 681.655 L1596.59 681.655 L1596.03 681.655 L1595.47 681.655 L1594.92 681.655 L1594.36 681.655 L1593.8 681.655 L1593.24 681.655 L1592.68 681.655 L1592.12 681.655 L1591.56 681.655 L1591 681.655 L1590.44 681.655 L1589.88 681.655 L1589.32 681.655 L1588.76 681.655 L1588.2 681.655 L1587.65 681.655 L1587.09 681.655 L1586.53 681.655 L1585.97 681.655 L1585.41 681.655 L1584.85 681.655 L1584.29 681.655 L1583.73 681.655 L1583.17 681.655 L1582.61 681.655 L1582.05 681.655 L1581.49 681.655 L1580.93 681.655 L1580.37 681.655 L1579.82 681.655 L1579.26 681.655 L1578.7 681.655 L1578.14 681.655 L1577.58 681.655 L1577.02 681.655 L1576.46 681.655 L1575.9 681.655 L1575.34 681.655 L1574.78 681.655 L1574.22 681.655 L1573.66 681.655 L1573.1 681.655 L1572.55 681.655 L1571.99 681.655 L1571.43 681.655 L1570.87 681.655 L1570.31 681.655 L1569.75 681.655 L1569.19 681.655 L1568.63 681.655 L1568.07 681.655 L1567.51 681.655 L1566.95 681.655 L1566.39 681.655 L1565.83 681.655 L1565.28 681.655 L1564.72 681.655 L1564.16 681.655 L1563.6 681.655 L1563.04 681.655 L1562.48 681.655 L1561.92 681.655 L1561.36 681.655 L1560.8 681.655 L1560.24 681.655 L1559.68 681.655 L1559.12 681.655 L1558.56 681.655 L1558 681.655 L1557.45 681.655 L1556.89 681.655 L1556.33 681.655 L1555.77 681.655 L1555.21 681.655 L1554.65 681.655 L1554.09 681.655 L1553.53 681.655 L1552.97 681.655 L1552.41 681.655 L1551.85 681.655 L1551.29 681.655 L1550.73 681.655 L1550.18 681.655 L1549.62 681.655 L1549.06 681.655 L1548.5 681.655 L1547.94 681.655 L1547.38 681.655 L1546.82 681.655 L1546.26 681.655 L1545.7 681.655 L1545.14 681.655 L1544.58 681.655 L1544.02 681.655 L1543.46 681.655 L1542.9 681.655 L1542.35 681.655 L1541.79 681.655 L1541.23 681.655 L1540.67 681.655 L1540.11 681.655 L1539.55 681.655 L1538.99 681.655 L1538.43 681.655 L1537.87 681.655 L1537.31 681.655 L1536.75 681.655 L1536.19 681.655 L1535.63 681.655 L1535.08 681.655 L1534.52 681.655 L1533.96 681.655 L1533.4 681.655 L1532.84 681.655 L1532.28 681.655 L1531.72 681.655 L1531.16 681.655 L1530.6 681.655 L1530.04 681.655 L1529.48 681.655 L1528.92 681.655 L1528.36 681.655 L1527.81 681.655 L1527.25 681.655 L1526.69 681.655 L1526.13 681.655 L1525.57 681.655 L1525.01 681.655 L1524.45 681.655 L1523.89 681.655 L1523.33 681.655 L1522.77 681.655 L1522.21 681.655 L1521.65 681.655 L1521.09 681.655 L1520.53 681.655 L1519.98 681.655 L1519.42 681.655 L1518.86 681.655 L1518.3 681.655 L1517.74 681.655 L1517.18 681.655 L1516.62 681.655 L1516.06 681.655 L1515.5 681.655 L1514.94 681.655 L1514.38 681.655 L1513.82 681.655 L1513.26 681.655 L1512.71 681.655 L1512.15 681.655 L1511.59 681.655 L1511.03 681.655 L1510.47 681.655 L1509.91 681.655 L1509.35 681.655 L1508.79 681.655 L1508.23 681.655 L1507.67 681.655 L1507.11 681.655 L1506.55 681.655 L1505.99 681.655 L1505.44 681.655 L1504.88 681.655 L1504.32 681.655 L1503.76 681.655 L1503.2 681.655 L1502.64 681.655 L1502.08 681.655 L1501.52 681.655 L1500.96 681.655 L1500.4 681.655 L1499.84 681.655 L1499.28 681.655 L1498.72 681.655 L1498.16 681.655 L1497.61 681.655 L1497.05 681.655 L1496.49 681.655 L1495.93 681.655 L1495.37 681.655 L1494.81 681.655 L1494.25 681.655 L1493.69 681.655 L1493.13 681.655 L1492.57 681.655 L1492.01 681.655 L1491.45 681.655 L1490.89 681.655 L1490.34 681.655 L1489.78 681.655 L1489.22 681.655 L1488.66 681.655 L1488.1 681.655 L1487.54 681.655 L1486.98 681.655 L1486.42 681.655 L1485.86 681.655 L1485.3 681.655 L1484.74 681.655 L1484.18 681.655 L1483.62 681.655 L1483.07 681.655 L1482.51 681.655 L1481.95 681.655 L1481.39 681.655 L1480.83 681.655 L1480.27 681.655 L1479.71 681.655 L1479.15 681.655 L1478.59 681.655 L1478.03 681.655 L1477.47 681.655 L1476.91 681.655 L1476.35 681.655 L1475.79 681.655 L1475.24 681.655 L1474.68 681.655 L1474.12 681.655 L1473.56 681.655 L1473 681.655 L1472.44 681.655 L1471.88 681.655 L1471.32 681.655 L1470.76 681.655 L1470.2 681.655 L1469.64 681.655 L1469.08 681.655 L1468.52 681.655 L1467.97 681.655 L1467.41 681.655 L1466.85 681.655 L1466.29 681.655 L1465.73 681.655 L1465.17 681.655 L1464.61 681.655 L1464.05 681.655 L1463.49 681.655 L1462.93 681.655 L1462.37 681.655 L1461.81 681.655 L1461.25 681.655 L1460.7 681.655 L1460.14 681.655 L1459.58 681.655 L1459.02 681.655 L1458.46 681.655 L1457.9 681.655 L1457.34 681.655 L1456.78 681.655 L1456.22 681.655 L1455.66 681.655 L1455.1 681.655 L1454.54 681.655 L1453.98 681.655 L1453.42 681.655 L1452.87 681.655 L1452.31 681.655 L1451.75 681.655 L1451.19 681.655 L1450.63 681.655 L1450.07 681.655 L1449.51 681.655 L1448.95 681.655 L1448.39 681.655 L1447.83 681.655 L1447.27 681.655 L1446.71 681.655 L1446.15 681.655 L1445.6 681.655 L1445.04 681.655 L1444.48 681.655 L1443.92 681.655 L1443.36 681.655 L1442.8 681.655 L1442.24 681.655 L1441.68 681.655 L1441.12 681.655 L1440.56 681.655 L1440 681.655 L1439.44 681.655 L1438.88 681.655 L1438.33 681.655 L1437.77 681.655 L1437.21 681.655 L1436.65 681.655 L1436.09 681.655 L1435.53 681.655 L1434.97 681.655 L1434.41 681.655 L1433.85 681.655 L1433.29 681.655 L1432.73 681.655 L1432.17 681.655 L1431.61 681.655 L1431.05 681.655 L1430.5 681.655 L1429.94 681.655 L1429.38 681.655 L1428.82 681.655 L1428.26 681.655 L1427.7 681.655 L1427.14 681.655 L1426.58 681.655 L1426.02 681.655 L1425.46 681.655 L1424.9 681.655 L1424.34 681.655 L1423.78 681.655 L1423.23 681.655 L1422.67 681.655 L1422.11 681.655 L1421.55 681.655 L1420.99 681.655 L1420.43 681.655 L1419.87 681.655 L1419.31 681.655 L1418.75 681.655 L1418.19 681.655 L1417.63 681.655 L1417.07 681.655 L1416.51 681.655 L1415.95 681.655 L1415.4 681.655 L1414.84 681.655 L1414.28 681.655 L1413.72 681.655 L1413.16 681.655 L1412.6 681.655 L1412.04 681.655 L1411.48 681.655 L1410.92 681.655 L1410.36 681.655 L1409.8 681.655 L1409.24 681.655 L1408.68 681.655 L1408.13 681.655 L1407.57 681.655 L1407.01 681.655 L1406.45 681.655 L1405.89 681.655 L1405.33 681.655 L1404.77 681.655 L1404.21 681.655 L1403.65 681.655 L1403.09 681.655 L1402.53 681.655 L1401.97 681.655 L1401.41 681.655 L1400.86 681.655 L1400.3 681.655 L1399.74 681.655 L1399.18 681.655 L1398.62 681.655 L1398.06 681.655 L1397.5 681.655 L1396.94 681.655 L1396.38 681.655 L1395.82 681.655 L1395.26 681.655 L1394.7 681.655 L1394.14 681.655 L1393.58 681.655 L1393.03 681.655 L1392.47 681.655 L1391.91 681.655 L1391.35 681.655 L1390.79 681.655 L1390.23 681.655 L1389.67 681.655 L1389.11 681.655 L1388.55 681.655 L1387.99 681.655 L1387.43 681.655 L1386.87 681.655 L1386.31 681.655 L1385.76 681.655 L1385.2 681.655 L1384.64 681.655 L1384.08 681.655 L1383.52 681.655 L1382.96 681.655 L1382.4 681.655 L1381.84 681.655 L1381.28 681.655 L1380.72 681.655 L1380.16 681.655 L1379.6 681.655 L1379.04 681.655 L1378.49 681.655 L1377.93 681.655 L1377.37 681.655 L1376.81 681.655 L1376.25 681.655 L1375.69 681.655 L1375.13 681.655 L1374.57 681.655 L1374.01 681.655 L1373.45 681.655 L1372.89 681.655 L1372.33 681.655 L1371.77 681.655 L1371.21 681.655 L1370.66 681.655 L1370.1 681.655 L1369.54 681.655 L1368.98 681.655 L1368.42 681.655 L1367.86 681.655 L1367.3 681.655 L1366.74 681.655 L1366.18 681.655 L1365.62 681.655 L1365.06 681.655 L1364.5 681.655 L1363.94 681.655 L1363.39 681.655 L1362.83 681.655 L1362.27 681.655 L1361.71 681.655 L1361.15 681.655 L1360.59 681.655 L1360.03 681.655 L1359.47 681.655 L1358.91 681.655 L1358.35 681.655 L1357.79 681.655 L1357.23 681.655 L1356.67 681.655 L1356.12 681.655 L1355.56 681.655 L1355 681.655 L1354.44 681.655 L1353.88 681.655 L1353.32 681.655 L1352.76 681.655 L1352.2 681.655 L1351.64 681.655 L1351.08 681.655 L1350.52 681.655 L1349.96 681.655 L1349.4 681.655 L1348.84 681.655 L1348.29 681.655 L1347.73 681.655 L1347.17 681.655 L1346.61 681.655 L1346.05 681.655 L1345.49 681.655 L1344.93 681.655 L1344.37 681.655 L1343.81 681.655 L1343.25 681.655 L1342.69 681.655 L1342.13 681.655 L1341.57 681.655 L1341.02 681.655 L1340.46 681.655 L1339.9 681.655 L1339.34 681.655 L1338.78 681.655 L1338.22 681.655 L1337.66 681.655 L1337.1 681.655 L1336.54 681.655 L1335.98 681.655 L1335.42 681.655 L1334.86 681.655 L1334.3 681.655 L1333.75 681.655 L1333.19 681.655 L1332.63 681.655 L1332.07 681.655 L1331.51 681.655 L1330.95 681.655 L1330.39 681.655 L1329.83 681.655 L1329.27 681.655 L1328.71 681.655 L1328.15 681.655 L1327.59 681.655 L1327.03 681.655 L1326.47 681.655 L1325.92 681.655 L1325.36 681.655 L1324.8 681.655 L1324.24 681.655 L1323.68 681.655 L1323.12 681.655 L1322.56 681.655 L1322 681.655 L1321.44 681.655 L1320.88 681.655 L1320.32 681.655 L1319.76 681.655 L1319.2 681.655 L1318.65 681.655 L1318.09 681.655 L1317.53 681.655 L1316.97 681.655 L1316.41 681.655 L1315.85 681.655 L1315.29 681.655 L1314.73 681.655 L1314.17 681.655 L1313.61 681.655 L1313.05 681.655 L1312.49 681.655 L1311.93 681.655 L1311.38 681.655 L1310.82 681.655 L1310.26 681.655 L1309.7 681.655 L1309.14 681.655 L1308.58 681.655 L1308.02 681.655 L1307.46 681.655 L1306.9 681.655 L1306.34 681.655 L1305.78 681.655 L1305.22 681.655 L1304.66 681.655 L1304.1 681.655 L1303.55 681.655 L1302.99 681.655 L1302.43 681.655 L1301.87 681.655 L1301.31 681.655 L1300.75 681.655 L1300.19 681.655 L1299.63 681.655 L1299.07 681.655 L1298.51 681.655 L1297.95 681.655 L1297.39 681.655 L1296.83 681.655 L1296.28 681.655 L1295.72 681.655 L1295.16 681.655 L1294.6 681.655 L1294.04 681.655 L1293.48 681.655 L1292.92 681.655 L1292.36 681.655 L1291.8 681.655 L1291.24 681.655 L1290.68 681.655 L1290.12 681.655 L1289.56 681.655 L1289 681.655 L1288.45 681.655 L1287.89 681.655 L1287.33 681.655 L1286.77 681.655 L1286.21 681.655 L1285.65 681.655 L1285.09 681.655 L1284.53 681.655 L1283.97 681.655 L1283.41 681.655 L1282.85 681.655 L1282.29 681.655 L1281.73 681.655 L1281.18 681.655 L1280.62 681.655 L1280.06 681.655 L1279.5 681.655 L1278.94 681.655 L1278.38 681.655 L1277.82 681.655 L1277.26 681.655 L1276.7 681.655 L1276.14 681.655 L1275.58 681.655 L1275.02 681.655 L1274.46 681.655 L1273.91 681.655 L1273.35 681.655 L1272.79 681.655 L1272.23 681.655 L1271.67 681.655 L1271.11 681.655 L1270.55 681.655 L1269.99 681.655 L1269.43 681.655 L1268.87 681.655 L1268.31 681.655 L1267.75 681.655 L1267.19 681.655 L1266.63 681.655 L1266.08 681.655 L1265.52 681.655 L1264.96 681.655 L1264.4 681.655 L1263.84 681.655 L1263.28 681.655 L1262.72 681.655 L1262.16 681.655 L1261.6 681.655 L1261.04 681.655 L1260.48 681.655 L1259.92 681.655 L1259.36 681.655 L1258.81 681.655 L1258.25 681.655 L1257.69 681.655 L1257.13 681.655 L1256.57 681.655 L1256.01 681.655 L1255.45 681.655 L1254.89 681.655 L1254.33 681.655 L1253.77 681.655 L1253.21 681.655 L1252.65 681.655 L1252.09 681.655 L1251.54 681.655 L1250.98 681.655 L1250.42 681.655 L1249.86 681.655 L1249.3 681.655 L1248.74 681.655 L1248.18 681.655 L1247.62 681.655 L1247.06 681.655 L1246.5 681.655 L1245.94 681.655 L1245.38 681.655 L1244.82 681.655 L1244.26 681.655 L1243.71 681.655 L1243.15 681.655 L1242.59 681.655 L1242.03 681.655 L1241.47 681.655 L1240.91 681.655 L1240.35 681.655 L1239.79 681.655 L1239.23 681.655 L1238.67 681.655 L1238.11 681.655 L1237.55 681.655 L1236.99 681.655 L1236.44 681.655 L1235.88 681.655 L1235.32 681.655 L1234.76 681.655 L1234.2 681.655 L1233.64 681.655 L1233.08 681.655 L1232.52 681.655 L1231.96 681.655 L1231.4 681.655 L1230.84 681.655 L1230.28 681.655 L1229.72 681.655 L1229.17 681.655 L1228.61 681.655 L1228.05 681.655 L1227.49 681.655 L1226.93 681.655 L1226.37 681.655 L1225.81 681.655 L1225.25 681.655 L1224.69 681.655 L1224.13 681.655 L1223.57 681.655 L1223.01 681.655 L1222.45 681.655 L1221.89 681.655 L1221.34 681.655 L1220.78 681.655 L1220.22 681.655 L1219.66 681.655 L1219.1 681.655 L1218.54 681.655 L1217.98 681.655 L1217.42 681.655 L1216.86 681.655 L1216.3 681.655 L1215.74 681.655 L1215.18 681.655 L1214.62 681.655 L1214.07 681.655 L1213.51 681.655 L1212.95 681.655 L1212.39 681.655 L1211.83 681.655 L1211.27 681.655 L1210.71 681.655 L1210.15 681.655 L1209.59 681.655 L1209.03 681.655 L1208.47 681.655 L1207.91 681.655 L1207.35 681.655 L1206.8 681.655 L1206.24 681.655 L1205.68 681.655 L1205.12 681.655 L1204.56 681.655 L1204 681.655 L1203.44 681.655 L1202.88 681.655 L1202.32 681.655 L1201.76 681.655 L1201.2 681.655 L1200.64 681.655 L1200.08 681.655 L1199.52 681.655 L1198.97 681.655 L1198.41 681.655 L1197.85 681.655 L1197.29 681.655 L1196.73 681.655 L1196.17 681.655 L1195.61 681.655 L1195.05 681.655 L1194.49 681.655 L1193.93 681.655 L1193.37 681.655 L1192.81 681.655 L1192.25 681.655 L1191.7 681.655 L1191.14 681.655 L1190.58 681.655 L1190.02 681.655 L1189.46 681.655 L1188.9 681.655 L1188.34 681.655 L1187.78 681.655 L1187.22 681.655 L1186.66 681.655 L1186.1 681.655 L1185.54 681.655 L1184.98 681.655 L1184.43 681.655 L1183.87 681.655 L1183.31 681.655 L1182.75 681.655 L1182.19 681.655 L1181.63 681.655 L1181.07 681.655 L1180.51 681.655 L1179.95 681.655 L1179.39 681.655 L1178.83 681.655 L1178.27 681.655 L1177.71 681.655 L1177.15 681.655 L1176.6 681.655 L1176.04 681.655 L1175.48 681.655 L1174.92 681.655 L1174.36 681.655 L1173.8 681.655 L1173.24 681.655 L1172.68 681.655 L1172.12 681.655 L1171.56 681.655 L1171 681.655 L1170.44 681.655 L1169.88 681.655 L1169.33 681.655 L1168.77 681.655 L1168.21 681.655 L1167.65 681.655 L1167.09 681.655 L1166.53 681.655 L1165.97 681.655 L1165.41 681.655 L1164.85 681.655 L1164.29 681.655 L1163.73 681.655 L1163.17 681.655 L1162.61 681.655 L1162.05 681.655 L1161.5 681.655 L1160.94 681.655 L1160.38 681.655 L1159.82 681.655 L1159.26 681.655 L1158.7 681.655 L1158.14 681.655 L1157.58 681.655 L1157.02 681.655 L1156.46 681.655 L1155.9 681.655 L1155.34 681.655 L1154.78 681.655 L1154.23 681.655 L1153.67 681.655 L1153.11 681.655 L1152.55 681.655 L1151.99 681.655 L1151.43 681.655 L1150.87 681.655 L1150.31 681.655 L1149.75 681.655 L1149.19 681.655 L1148.63 681.655 L1148.07 681.655 L1147.51 681.655 L1146.96 681.655 L1146.4 681.655 L1145.84 681.655 L1145.28 681.655 L1144.72 681.655 L1144.16 681.655 L1143.6 681.655 L1143.04 681.655 L1142.48 681.655 L1141.92 681.655 L1141.36 681.655 L1140.8 681.655 L1140.24 681.655 L1139.68 681.655 L1139.13 681.655 L1138.57 681.655 L1138.01 681.655 L1137.45 681.655 L1136.89 681.655 L1136.33 681.655 L1135.77 681.655 L1135.21 681.655 L1134.65 681.655 L1134.09 681.655 L1133.53 681.655 L1132.97 681.655 L1132.41 681.655 L1131.86 681.655 L1131.3 681.655 L1130.74 681.655 L1130.18 681.655 L1129.62 681.655 L1129.06 681.655 L1128.5 681.655 L1127.94 681.655 L1127.38 681.655 L1126.82 681.655 L1126.26 681.655 L1125.7 681.655 L1125.14 681.655 L1124.59 681.655 L1124.03 681.655 L1123.47 681.655 L1122.91 681.655 L1122.35 681.655 L1121.79 681.655 L1121.23 681.655 L1120.67 681.655 L1120.11 681.655 L1119.55 681.655 L1118.99 681.655 L1118.43 681.655 L1117.87 681.655 L1117.31 681.655 L1116.76 681.655 L1116.2 681.655 L1115.64 681.655 L1115.08 681.655 L1114.52 681.655 L1113.96 681.655 L1113.4 681.655 L1112.84 681.655 L1112.28 681.655 L1111.72 681.655 L1111.16 681.655 L1110.6 681.655 L1110.04 681.655 L1109.49 681.655 L1108.93 681.655 L1108.37 681.655 L1107.81 681.655 L1107.25 681.655 L1106.69 681.655 L1106.13 681.655 L1105.57 681.655 L1105.01 681.655 L1104.45 681.655 L1103.89 681.655 L1103.33 681.655 L1102.77 681.655 L1102.22 681.655 L1101.66 681.655 L1101.1 681.655 L1100.54 681.655 L1099.98 681.655 L1099.42 681.655 L1098.86 681.655 L1098.3 681.655 L1097.74 681.655 L1097.18 681.655 L1096.62 681.655 L1096.06 681.655 L1095.5 681.655 L1094.94 681.655 L1094.39 681.655 L1093.83 681.655 L1093.27 681.655 L1092.71 681.655 L1092.15 681.655 L1091.59 681.655 L1091.03 681.655 L1090.47 681.655 L1089.91 681.655 L1089.35 681.655 L1088.79 681.655 L1088.23 681.655 L1087.67 681.655 L1087.12 681.655 L1086.56 681.655 L1086 681.655 L1085.44 681.655 L1084.88 681.655 L1084.32 681.655 L1083.76 681.655 L1083.2 681.655 L1082.64 681.655 L1082.08 681.655 L1081.52 681.655 L1080.96 681.655 L1080.4 681.655 L1079.85 681.655 L1079.29 681.655 L1078.73 681.655 L1078.17 681.655 L1077.61 681.655 L1077.05 681.655 L1076.49 681.655 L1075.93 681.655 L1075.37 681.655 L1074.81 681.655 L1074.25 681.655 L1073.69 681.655 L1073.13 681.655 L1072.57 681.655 L1072.02 681.655 L1071.46 681.655 L1070.9 681.655 L1070.34 681.655 L1069.78 681.655 L1069.22 681.655 L1068.66 681.655 L1068.1 681.655 L1067.54 681.655 L1066.98 681.655 L1066.42 681.655 L1065.86 681.655 L1065.3 681.655 L1064.75 681.655 L1064.19 681.655 L1063.63 681.655 L1063.07 681.655 L1062.51 681.655 L1061.95 681.655 L1061.39 681.655 L1060.83 681.655 L1060.27 681.655 L1059.71 681.655 L1059.15 681.655 L1058.59 681.655 L1058.03 681.655 L1057.48 681.655 L1056.92 681.655 L1056.36 681.655 L1055.8 681.655 L1055.24 681.655 L1054.68 681.655 L1054.12 681.655 L1053.56 681.655 L1053 681.655 L1052.44 681.655 L1051.88 681.655 L1051.32 681.655 L1050.76 681.655 L1050.2 681.655 L1049.65 681.655 L1049.09 681.655 L1048.53 681.655 L1047.97 681.655 L1047.41 681.655 L1046.85 681.655 L1046.29 681.655 L1045.73 681.655 L1045.17 681.655 L1044.61 681.655 L1044.05 681.655 L1043.49 681.655 L1042.93 681.655 L1042.38 681.655 L1041.82 681.655 L1041.26 681.655 L1040.7 681.655 L1040.14 681.655 L1039.58 681.655 L1039.02 681.655 L1038.46 681.655 L1037.9 681.655 L1037.34 681.655 L1036.78 681.655 L1036.22 681.655 L1035.66 681.655 L1035.1 681.655 L1034.55 681.655 L1033.99 681.655 L1033.43 681.655 L1032.87 681.655 L1032.31 681.655 L1031.75 681.655 L1031.19 681.655 L1030.63 681.655 L1030.07 681.655 L1029.51 681.655 L1028.95 681.655 L1028.39 681.655 L1027.83 681.655 L1027.28 681.655 L1026.72 681.655 L1026.16 681.655 L1025.6 681.655 L1025.04 681.655 L1024.48 681.655 L1023.92 681.655 L1023.36 681.655 L1022.8 681.655 L1022.24 681.655 L1021.68 681.655 L1021.12 681.655 L1020.56 681.655 L1020.01 681.655 L1019.45 681.655 L1018.89 681.655 L1018.33 681.655 L1017.77 681.655 L1017.21 681.655 L1016.65 681.655 L1016.09 681.655 L1015.53 681.655 L1014.97 681.655 L1014.41 681.655 L1013.85 681.655 L1013.29 681.655 L1012.73 681.655 L1012.18 681.655 L1011.62 681.655 L1011.06 681.655 L1010.5 681.655 L1009.94 681.655 L1009.38 681.655 L1008.82 681.655 L1008.26 681.655 L1007.7 681.655 L1007.14 681.655 L1006.58 681.655 L1006.02 681.655 L1005.46 681.655 L1004.91 681.655 L1004.35 681.655 L1003.79 681.655 L1003.23 681.655 L1002.67 681.655 L1002.11 681.655 L1001.55 681.655 L1000.99 681.655 L1000.43 681.655 L999.872 681.655 L999.313 681.655 L998.754 681.655 L998.194 681.655 L997.635 681.655 L997.076 681.655 L996.517 681.655 L995.957 681.655 L995.398 681.655 L994.839 681.655 L994.28 681.655 L993.72 681.655 L993.161 681.655 L992.602 681.655 L992.043 681.655 L991.483 681.655 L990.924 681.655 L990.365 681.655 L989.806 681.655 L989.246 681.655 L988.687 681.655 L988.128 681.655 L987.569 681.655 L987.009 681.655 L986.45 681.655 L985.891 681.655 L985.332 681.655 L984.772 681.655 L984.213 681.655 L983.654 681.655 L983.095 681.655 L982.535 681.655 L981.976 681.655 L981.417 681.655 L980.858 681.655 L980.298 681.655 L979.739 681.655 L979.18 681.655 L978.621 681.655 L978.061 681.655 L977.502 681.655 L976.943 681.655 L976.384 681.655 L975.824 681.655 L975.265 681.655 L974.706 681.655 L974.147 681.655 L973.587 681.655 L973.028 681.655 L972.469 681.655 L971.91 681.655 L971.35 681.655 L970.791 681.655 L970.232 681.655 L969.673 681.655 L969.113 681.655 L968.554 681.655 L967.995 681.655 L967.436 681.655 L966.876 681.655 L966.317 681.655 L965.758 681.655 L965.199 681.655 L964.639 681.655 L964.08 681.655 L963.521 681.655 L962.962 681.655 L962.402 681.655 L961.843 681.655 L961.284 681.655 L960.725 681.655 L960.165 681.655 L959.606 681.655 L959.047 681.655 L958.488 681.655 L957.928 681.655 L957.369 681.655 L956.81 681.655 L956.251 681.655 L955.691 681.655 L955.132 681.655 L954.573 681.655 L954.014 681.655 L953.454 681.655 L952.895 681.655 L952.336 681.655 L951.777 681.655 L951.217 681.655 L950.658 681.655 L950.099 681.655 L949.54 681.655 L948.98 681.655 L948.421 681.655 L947.862 681.655 L947.303 681.655 L946.743 681.655 L946.184 681.655 L945.625 681.655 L945.066 681.655 L944.506 681.655 L943.947 681.655 L943.388 681.655 L942.829 681.655 L942.269 681.655 L941.71 681.655 L941.151 681.655 L940.592 681.655 L940.032 681.655 L939.473 681.655 L938.914 681.655 L938.355 681.655 L937.795 681.655 L937.236 681.655 L936.677 681.655 L936.118 681.655 L935.558 681.655 L934.999 681.655 L934.44 681.655 L933.881 681.655 L933.321 681.655 L932.762 681.655 L932.203 681.655 L931.644 681.655 L931.084 681.655 L930.525 681.655 L929.966 681.655 L929.406 681.655 L928.847 681.655 L928.288 681.655 L927.729 681.655 L927.169 681.655 L926.61 681.655 L926.051 681.655 L925.492 681.655 L924.932 681.655 L924.373 681.655 L923.814 681.655 L923.255 681.655 L922.695 681.655 L922.136 681.655 L921.577 681.655 L921.018 681.655 L920.458 681.655 L919.899 681.655 L919.34 681.655 L918.781 681.655 L918.221 681.655 L917.662 681.655 L917.103 681.655 L916.544 681.655 L915.984 681.655 L915.425 681.655 L914.866 681.655 L914.307 681.655 L913.747 681.655 L913.188 681.655 L912.629 681.655 L912.07 681.655 L911.51 681.655 L910.951 681.655 L910.392 681.655 L909.833 681.655 L909.273 681.655 L908.714 681.655 L908.155 681.655 L907.596 681.655 L907.036 681.655 L906.477 681.655 L905.918 681.655 L905.359 681.655 L904.799 681.655 L904.24 681.655 L903.681 681.655 L903.122 681.655 L902.562 681.655 L902.003 681.655 L901.444 681.655 L900.885 681.655 L900.325 681.655 L899.766 681.655 L899.207 681.655 L898.648 681.655 L898.088 681.655 L897.529 681.655 L896.97 681.655 L896.411 681.655 L895.851 681.655 L895.292 681.655 L894.733 681.655 L894.174 681.655 L893.614 681.655 L893.055 681.655 L892.496 681.655 L891.937 681.655 L891.377 681.655 L890.818 681.655 L890.259 681.655 L889.7 681.655 L889.14 681.655 L888.581 681.655 L888.022 681.655 L887.463 681.655 L886.903 681.655 L886.344 681.655 L885.785 681.655 L885.226 681.655 L884.666 681.655 L884.107 681.655 L883.548 681.655 L882.989 681.655 L882.429 681.655 L881.87 681.655 L881.311 681.655 L880.752 681.655 L880.192 681.655 L879.633 681.655 L879.074 681.655 L878.515 681.655 L877.955 681.655 L877.396 681.655 L876.837 681.655 L876.278 681.655 L875.718 681.655 L875.159 681.655 L874.6 681.655 L874.041 681.655 L873.481 681.655 L872.922 681.655 L872.363 681.655 L871.804 681.655 L871.244 681.655 L870.685 681.655 L870.126 681.655 L869.567 681.655 L869.007 681.655 L868.448 681.655 L867.889 681.655 L867.33 681.655 L866.77 681.655 L866.211 681.655 L865.652 681.655 L865.093 681.655 L864.533 681.655 L863.974 681.655 L863.415 681.655 L862.856 681.655 L862.296 681.655 L861.737 681.655 L861.178 681.655 L860.619 681.655 L860.059 681.655 L859.5 681.655 L858.941 681.655 L858.382 681.655 L857.822 681.655 L857.263 681.655 L856.704 681.655 L856.145 681.655 L855.585 681.655 L855.026 681.655 L854.467 681.655 L853.908 681.655 L853.348 681.655 L852.789 681.655 L852.23 681.655 L851.671 681.655 L851.111 681.655 L850.552 681.655 L849.993 681.655 L849.434 681.655 L848.874 681.655 L848.315 681.655 L847.756 681.655 L847.197 681.655 L846.637 681.655 L846.078 681.655 L845.519 681.655 L844.96 681.655 L844.4 681.655 L843.841 681.655 L843.282 681.655 L842.723 681.655 L842.163 681.655 L841.604 681.655 L841.045 681.655 L840.486 681.655 L839.926 681.655 L839.367 681.655 L838.808 681.655 L838.249 681.655 L837.689 681.655 L837.13 681.655 L836.571 681.655 L836.012 681.655 L835.452 681.655 L834.893 681.655 L834.334 681.655 L833.775 681.655 L833.215 681.655 L832.656 681.655 L832.097 681.655 L831.538 681.655 L830.978 681.655 L830.419 681.655 L829.86 681.655 L829.301 681.655 L828.741 681.655 L828.182 681.655 L827.623 681.655 L827.064 681.655 L826.504 681.655 L825.945 681.655 L825.386 681.655 L824.827 681.655 L824.267 681.655 L823.708 681.655 L823.149 681.655 L822.59 681.655 L822.03 681.655 L821.471 681.655 L820.912 681.655 L820.353 681.655 L819.793 681.655 L819.234 681.655 L818.675 681.655 L818.116 681.655 L817.556 681.655 L816.997 681.655 L816.438 681.655 L815.879 681.655 L815.319 681.655 L814.76 681.655 L814.201 681.655 L813.642 681.655 L813.082 681.655 L812.523 681.655 L811.964 681.655 L811.405 681.655 L810.845 681.655 L810.286 681.655 L809.727 681.655 L809.168 681.655 L808.608 681.655 L808.049 681.655 L807.49 681.655 L806.931 681.655 L806.371 681.655 L805.812 681.655 L805.253 681.655 L804.693 681.655 L804.134 681.655 L803.575 681.655 L803.016 681.655 L802.456 681.655 L801.897 681.655 L801.338 681.655 L800.779 681.655 L800.219 681.655 L799.66 681.655 L799.101 681.655 L798.542 681.655 L797.982 681.655 L797.423 681.655 L796.864 681.655 L796.305 681.655 L795.745 681.655 L795.186 681.655 L794.627 681.655 L794.068 681.655 L793.508 681.655 L792.949 681.655 L792.39 681.655 L791.831 681.655 L791.271 681.655 L790.712 681.655 L790.153 681.655 L789.594 681.655 L789.034 681.655 L788.475 681.655 L787.916 681.655 L787.357 681.655 L786.797 681.655 L786.238 681.655 L785.679 681.655 L785.12 681.655 L784.56 681.655 L784.001 681.655 L783.442 681.655 L782.883 681.655 L782.323 681.655 L781.764 681.655 L781.205 681.655 L780.646 681.655 L780.086 681.655 L779.527 681.655 L778.968 681.655 L778.409 681.655 L777.849 681.655 L777.29 681.655 L776.731 681.655 L776.172 681.655 L775.612 681.655 L775.053 681.655 L774.494 681.655 L773.935 681.655 L773.375 681.655 L772.816 681.655 L772.257 681.655 L771.698 681.655 L771.138 681.655 L770.579 681.655 L770.02 681.655 L769.461 681.655 L768.901 681.655 L768.342 681.655 L767.783 681.655 L767.224 681.655 L766.664 681.655 L766.105 681.655 L765.546 681.655 L764.987 681.655 L764.427 681.655 L763.868 681.655 L763.309 681.655 L762.75 681.655 L762.19 681.655 L761.631 681.655 L761.072 681.655 L760.513 681.655 L759.953 681.655 L759.394 681.655 L758.835 681.655 L758.276 681.655 L757.716 681.655 L757.157 681.655 L756.598 681.655 L756.039 681.655 L755.479 681.655 L754.92 681.655 L754.361 681.655 L753.802 681.655 L753.242 681.655 L752.683 681.655 L752.124 681.655 L751.565 681.655 L751.005 681.655 L750.446 681.655 L749.887 681.655 L749.328 681.655 L748.768 681.655 L748.209 681.655 L747.65 681.655 L747.091 681.655 L746.531 681.655 L745.972 681.655 L745.413 681.655 L744.854 681.655 L744.294 681.655 L743.735 681.655 L743.176 681.655 L742.617 681.655 L742.057 681.655 L741.498 681.655 L740.939 681.655 L740.38 681.655 L739.82 681.655 L739.261 681.655 L738.702 681.655 L738.143 681.655 L737.583 681.655 L737.024 681.655 L736.465 681.655 L735.906 681.655 L735.346 681.655 L734.787 681.655 L734.228 681.655 L733.669 681.655 L733.109 681.655 L732.55 681.655 L731.991 681.655 L731.432 681.655 L730.872 681.655 L730.313 681.655 L729.754 681.655 L729.195 681.655 L728.635 681.655 L728.076 681.655 L727.517 681.655 L726.958 681.655 L726.398 681.655 L725.839 681.655 L725.28 681.655 L724.721 681.655 L724.161 681.655 L723.602 681.655 L723.043 681.655 L722.484 681.655 L721.924 681.655 L721.365 681.655 L720.806 681.655 L720.247 681.655  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.725 720.806,686.725 721.365,686.725 721.924,686.725 722.484,686.725 723.043,686.725 723.602,686.725 724.161,686.725 724.721,686.725 725.28,686.725 725.839,686.725 726.398,686.725 726.958,686.725 727.517,686.725 728.076,686.725 728.635,686.725 729.195,686.725 729.754,686.725 730.313,686.725 730.872,686.725 731.432,686.725 731.991,686.725 732.55,686.725 733.109,686.725 733.669,686.725 734.228,686.725 734.787,686.725 735.346,686.725 735.906,686.725 736.465,686.725 737.024,686.725 737.583,686.725 738.143,686.725 738.702,686.725 739.261,686.725 739.82,686.725 740.38,686.725 740.939,686.725 741.498,686.725 742.057,686.725 742.617,686.725 743.176,686.725 743.735,686.725 744.294,686.725 744.854,686.725 745.413,686.725 745.972,686.725 746.531,686.725 747.091,686.725 747.65,686.725 748.209,686.725 748.768,686.725 749.328,686.725 749.887,686.725 750.446,686.725 751.005,686.725 751.565,686.725 752.124,686.725 752.683,686.725 753.242,686.725 753.802,686.725 754.361,686.725 754.92,686.725 755.479,686.725 756.039,686.725 756.598,686.725 757.157,686.725 757.716,686.725 758.276,686.725 758.835,686.725 759.394,686.725 759.953,686.725 760.513,686.725 761.072,686.725 761.631,686.725 762.19,686.725 762.75,686.725 763.309,686.725 763.868,686.725 764.427,686.725 764.987,686.725 765.546,686.725 766.105,686.725 766.664,686.725 767.224,686.725 767.783,686.725 768.342,686.725 768.901,686.725 769.461,686.725 770.02,686.725 770.579,686.725 771.138,686.725 771.698,686.725 772.257,686.725 772.816,686.725 773.375,686.725 773.935,686.725 774.494,686.725 775.053,686.725 775.612,686.725 776.172,686.725 776.731,686.725 777.29,686.725 777.849,686.725 778.409,686.725 778.968,686.725 779.527,686.725 780.086,686.725 780.646,686.725 781.205,686.725 781.764,686.725 782.323,686.725 782.883,686.725 783.442,686.725 784.001,686.725 784.56,686.725 785.12,686.725 785.679,686.725 786.238,686.725 786.797,686.725 787.357,686.725 787.916,686.725 788.475,686.725 789.034,686.725 789.594,686.725 790.153,686.725 790.712,686.725 791.271,686.725 791.831,686.725 792.39,686.725 792.949,686.725 793.508,686.725 794.068,686.725 794.627,686.725 795.186,686.725 795.745,686.725 796.305,686.725 796.864,686.725 797.423,686.725 797.982,686.725 798.542,686.725 799.101,686.725 799.66,686.725 800.219,686.725 800.779,686.725 801.338,686.725 801.897,686.725 802.456,686.725 803.016,686.725 803.575,686.725 804.134,686.725 804.693,686.725 805.253,686.725 805.812,686.725 806.371,686.725 806.931,686.725 807.49,686.725 808.049,686.725 808.608,686.725 809.168,686.725 809.727,686.725 810.286,686.725 810.845,686.725 811.405,686.725 811.964,686.725 812.523,686.725 813.082,686.725 813.642,686.725 814.201,686.725 814.76,686.725 815.319,686.725 815.879,686.725 816.438,686.725 816.997,686.725 817.556,686.725 818.116,686.725 818.675,686.725 819.234,686.725 819.793,686.725 820.353,686.725 820.912,686.725 821.471,686.725 822.03,686.725 822.59,686.725 823.149,686.725 823.708,686.725 824.267,686.725 824.827,686.725 825.386,686.725 825.945,686.725 826.504,686.725 827.064,686.725 827.623,686.725 828.182,686.725 828.741,686.725 829.301,686.725 829.86,686.725 830.419,686.725 830.978,686.725 831.538,686.725 832.097,686.725 832.656,686.725 833.215,686.725 833.775,686.725 834.334,686.725 834.893,686.725 835.452,686.725 836.012,686.725 836.571,686.725 837.13,686.725 837.689,686.725 838.249,686.725 838.808,686.725 839.367,686.725 839.926,686.725 840.486,686.725 841.045,686.725 841.604,686.725 842.163,686.725 842.723,686.725 843.282,686.725 843.841,686.725 844.4,686.725 844.96,686.725 845.519,686.725 846.078,686.725 846.637,686.725 847.197,686.725 847.756,686.725 848.315,686.725 848.874,686.725 849.434,686.725 849.993,686.725 850.552,686.725 851.111,686.725 851.671,686.725 852.23,686.725 852.789,686.725 853.348,686.725 853.908,686.725 854.467,686.725 855.026,686.725 855.585,686.725 856.145,686.725 856.704,686.725 857.263,686.725 857.822,686.725 858.382,686.725 858.941,686.725 859.5,686.725 860.059,686.725 860.619,686.725 861.178,686.725 861.737,686.725 862.296,686.725 862.856,686.725 863.415,686.725 863.974,686.725 864.533,686.725 865.093,686.725 865.652,686.725 866.211,686.725 866.77,686.725 867.33,686.725 867.889,686.725 868.448,686.725 869.007,686.725 869.567,686.725 870.126,686.725 870.685,686.725 871.244,686.725 871.804,686.725 872.363,686.725 872.922,686.725 873.481,686.725 874.041,686.725 874.6,686.725 875.159,686.725 875.718,686.725 876.278,686.725 876.837,686.725 877.396,686.725 877.955,686.725 878.515,686.725 879.074,686.725 879.633,686.725 880.192,686.725 880.752,686.725 881.311,686.725 881.87,686.725 882.429,686.725 882.989,686.725 883.548,686.725 884.107,686.725 884.666,686.725 885.226,686.725 885.785,686.725 886.344,686.725 886.903,686.725 887.463,686.725 888.022,686.725 888.581,686.725 889.14,686.725 889.7,686.725 890.259,686.725 890.818,686.725 891.377,686.725 891.937,686.725 892.496,686.725 893.055,686.725 893.614,686.725 894.174,686.725 894.733,686.725 895.292,686.725 895.851,686.725 896.411,686.725 896.97,686.725 897.529,686.725 898.088,686.725 898.648,686.725 899.207,686.725 899.766,686.725 900.325,686.725 900.885,686.725 901.444,686.725 902.003,686.725 902.562,686.725 903.122,686.725 903.681,686.725 904.24,686.725 904.799,686.725 905.359,686.725 905.918,686.725 906.477,686.725 907.036,686.725 907.596,686.725 908.155,686.725 908.714,686.725 909.273,686.725 909.833,686.725 910.392,686.725 910.951,686.725 911.51,686.725 912.07,686.725 912.629,686.725 913.188,686.725 913.747,686.725 914.307,686.725 914.866,686.725 915.425,686.725 915.984,686.725 916.544,686.725 917.103,686.725 917.662,686.725 918.221,686.725 918.781,686.725 919.34,686.725 919.899,686.725 920.458,686.725 921.018,686.725 921.577,686.725 922.136,686.725 922.695,686.725 923.255,686.725 923.814,686.725 924.373,686.725 924.932,686.725 925.492,686.725 926.051,686.725 926.61,686.725 927.169,686.725 927.729,686.725 928.288,686.725 928.847,686.725 929.406,686.725 929.966,686.725 930.525,686.725 931.084,686.725 931.644,686.725 932.203,686.725 932.762,686.725 933.321,686.725 933.881,686.725 934.44,686.725 934.999,686.725 935.558,686.725 936.118,686.725 936.677,686.725 937.236,686.725 937.795,686.725 938.355,686.725 938.914,686.725 939.473,686.725 940.032,686.725 940.592,686.725 941.151,686.725 941.71,686.725 942.269,686.725 942.829,686.725 943.388,686.725 943.947,686.725 944.506,686.725 945.066,686.725 945.625,686.725 946.184,686.725 946.743,686.725 947.303,686.725 947.862,686.725 948.421,686.725 948.98,686.725 949.54,686.725 950.099,686.725 950.658,686.725 951.217,686.725 951.777,686.725 952.336,686.725 952.895,686.725 953.454,686.725 954.014,686.725 954.573,686.725 955.132,686.725 955.691,686.725 956.251,686.725 956.81,686.725 957.369,686.725 957.928,686.725 958.488,686.725 959.047,686.725 959.606,686.725 960.165,686.725 960.725,686.725 961.284,686.725 961.843,686.725 962.402,686.725 962.962,686.725 963.521,686.725 964.08,686.725 964.639,686.725 965.199,686.725 965.758,686.725 966.317,686.725 966.876,686.725 967.436,686.725 967.995,686.725 968.554,686.725 969.113,686.725 969.673,686.725 970.232,686.725 970.791,686.725 971.35,686.725 971.91,686.725 972.469,686.725 973.028,686.725 973.587,686.725 974.147,686.725 974.706,686.725 975.265,686.725 975.824,686.725 976.384,686.725 976.943,686.725 977.502,686.725 978.061,686.725 978.621,686.725 979.18,686.725 979.739,686.725 980.298,686.725 980.858,686.725 981.417,686.725 981.976,686.725 982.535,686.725 983.095,686.725 983.654,686.725 984.213,686.725 984.772,686.725 985.332,686.725 985.891,686.725 986.45,686.725 987.009,686.725 987.569,686.725 988.128,686.725 988.687,686.725 989.246,686.725 989.806,686.725 990.365,686.725 990.924,686.725 991.483,686.725 992.043,686.725 992.602,686.725 993.161,686.725 993.72,686.725 994.28,686.725 994.839,686.725 995.398,686.725 995.957,686.725 996.517,686.725 997.076,686.725 997.635,686.725 998.194,686.725 998.754,686.725 999.313,686.725 999.872,686.725 1000.43,686.725 1000.99,686.725 1001.55,686.725 1002.11,686.725 1002.67,686.725 1003.23,686.725 1003.79,686.725 1004.35,686.725 1004.91,686.725 1005.46,686.725 1006.02,686.725 1006.58,686.725 1007.14,686.725 1007.7,686.725 1008.26,686.725 1008.82,686.725 1009.38,686.725 1009.94,686.725 1010.5,686.725 1011.06,686.725 1011.62,686.725 1012.18,686.725 1012.73,686.725 1013.29,686.725 1013.85,686.725 1014.41,686.725 1014.97,686.725 1015.53,686.725 1016.09,686.725 1016.65,686.725 1017.21,686.725 1017.77,686.725 1018.33,686.725 1018.89,686.725 1019.45,686.725 1020.01,686.725 1020.56,686.725 1021.12,686.725 1021.68,686.725 1022.24,686.725 1022.8,686.725 1023.36,686.725 1023.92,686.725 1024.48,686.725 1025.04,686.725 1025.6,686.725 1026.16,686.725 1026.72,686.725 1027.28,686.725 1027.83,686.725 1028.39,686.725 1028.95,686.725 1029.51,686.725 1030.07,686.725 1030.63,686.725 1031.19,686.725 1031.75,686.725 1032.31,686.725 1032.87,686.725 1033.43,686.725 1033.99,686.725 1034.55,686.725 1035.1,686.725 1035.66,686.725 1036.22,686.725 1036.78,686.725 1037.34,686.725 1037.9,686.725 1038.46,686.725 1039.02,686.725 1039.58,686.725 1040.14,686.725 1040.7,686.725 1041.26,686.725 1041.82,686.725 1042.38,686.725 1042.93,686.725 1043.49,686.725 1044.05,686.725 1044.61,686.725 1045.17,686.725 1045.73,686.725 1046.29,686.725 1046.85,686.725 1047.41,686.725 1047.97,686.725 1048.53,686.725 1049.09,686.725 1049.65,686.725 1050.2,686.725 1050.76,686.725 1051.32,686.725 1051.88,686.725 1052.44,686.725 1053,686.725 1053.56,686.725 1054.12,686.725 1054.68,686.725 1055.24,686.725 1055.8,686.725 1056.36,686.725 1056.92,686.725 1057.48,686.725 1058.03,686.725 1058.59,686.725 1059.15,686.725 1059.71,686.725 1060.27,686.725 1060.83,686.725 1061.39,686.725 1061.95,686.725 1062.51,686.725 1063.07,686.725 1063.63,686.725 1064.19,686.725 1064.75,686.725 1065.3,686.725 1065.86,686.725 1066.42,686.725 1066.98,686.725 1067.54,686.725 1068.1,686.725 1068.66,686.725 1069.22,686.725 1069.78,686.725 1070.34,686.725 1070.9,686.725 1071.46,686.725 1072.02,686.725 1072.57,686.725 1073.13,686.725 1073.69,686.725 1074.25,686.725 1074.81,686.725 1075.37,686.725 1075.93,686.725 1076.49,686.725 1077.05,686.725 1077.61,686.725 1078.17,686.725 1078.73,686.725 1079.29,686.725 1079.85,686.725 1080.4,686.725 1080.96,686.725 1081.52,686.725 1082.08,686.725 1082.64,686.725 1083.2,686.725 1083.76,686.725 1084.32,686.725 1084.88,686.725 1085.44,686.725 1086,686.725 1086.56,686.725 1087.12,686.725 1087.67,686.725 1088.23,686.725 1088.79,686.725 1089.35,686.725 1089.91,686.725 1090.47,686.725 1091.03,686.725 1091.59,686.725 1092.15,686.725 1092.71,686.725 1093.27,686.725 1093.83,686.725 1094.39,686.725 1094.94,686.725 1095.5,686.725 1096.06,686.725 1096.62,686.725 1097.18,686.725 1097.74,686.725 1098.3,686.725 1098.86,686.725 1099.42,686.725 1099.98,686.725 1100.54,686.725 1101.1,686.725 1101.66,686.725 1102.22,686.725 1102.77,686.725 1103.33,686.725 1103.89,686.725 1104.45,686.725 1105.01,686.725 1105.57,686.725 1106.13,686.725 1106.69,686.725 1107.25,686.725 1107.81,686.725 1108.37,686.725 1108.93,686.725 1109.49,686.725 1110.04,686.725 1110.6,686.725 1111.16,686.725 1111.72,686.725 1112.28,686.725 1112.84,686.725 1113.4,686.725 1113.96,686.725 1114.52,686.725 1115.08,686.725 1115.64,686.725 1116.2,686.725 1116.76,686.725 1117.31,686.725 1117.87,686.725 1118.43,686.725 1118.99,686.725 1119.55,686.725 1120.11,686.725 1120.67,686.725 1121.23,686.725 1121.79,686.725 1122.35,686.725 1122.91,686.725 1123.47,686.725 1124.03,686.725 1124.59,686.725 1125.14,686.725 1125.7,686.725 1126.26,686.725 1126.82,686.725 1127.38,686.725 1127.94,686.725 1128.5,686.725 1129.06,686.725 1129.62,686.725 1130.18,686.725 1130.74,686.725 1131.3,686.725 1131.86,686.725 1132.41,686.725 1132.97,686.725 1133.53,686.725 1134.09,686.725 1134.65,686.725 1135.21,686.725 1135.77,686.725 1136.33,686.725 1136.89,686.725 1137.45,686.725 1138.01,686.725 1138.57,686.725 1139.13,686.725 1139.68,686.725 1140.24,686.725 1140.8,686.725 1141.36,686.725 1141.92,686.725 1142.48,686.725 1143.04,686.725 1143.6,686.725 1144.16,686.725 1144.72,686.725 1145.28,686.725 1145.84,686.725 1146.4,686.725 1146.96,686.725 1147.51,686.725 1148.07,686.725 1148.63,686.725 1149.19,686.725 1149.75,686.725 1150.31,686.725 1150.87,686.725 1151.43,686.725 1151.99,686.725 1152.55,686.725 1153.11,686.725 1153.67,686.725 1154.23,686.725 1154.78,686.725 1155.34,686.725 1155.9,686.725 1156.46,686.725 1157.02,686.725 1157.58,686.725 1158.14,686.725 1158.7,686.725 1159.26,686.725 1159.82,686.725 1160.38,686.725 1160.94,686.725 1161.5,686.725 1162.05,686.725 1162.61,686.725 1163.17,686.725 1163.73,686.725 1164.29,686.725 1164.85,686.725 1165.41,686.725 1165.97,686.725 1166.53,686.725 1167.09,686.725 1167.65,686.725 1168.21,686.725 1168.77,686.725 1169.33,686.725 1169.88,686.725 1170.44,686.725 1171,686.725 1171.56,686.725 1172.12,686.725 1172.68,686.725 1173.24,686.725 1173.8,686.725 1174.36,686.725 1174.92,686.725 1175.48,686.725 1176.04,686.725 1176.6,686.725 1177.15,686.725 1177.71,686.725 1178.27,686.725 1178.83,686.725 1179.39,686.725 1179.95,686.725 1180.51,686.725 1181.07,686.725 1181.63,686.725 1182.19,686.725 1182.75,686.725 1183.31,686.725 1183.87,686.725 1184.43,686.725 1184.98,686.725 1185.54,686.725 1186.1,686.725 1186.66,686.725 1187.22,686.725 1187.78,686.725 1188.34,686.725 1188.9,686.725 1189.46,686.725 1190.02,686.725 1190.58,686.725 1191.14,686.725 1191.7,686.725 1192.25,686.725 1192.81,686.725 1193.37,686.725 1193.93,686.725 1194.49,686.725 1195.05,686.725 1195.61,686.725 1196.17,686.725 1196.73,686.725 1197.29,686.725 1197.85,686.725 1198.41,686.725 1198.97,686.725 1199.52,686.725 1200.08,686.725 1200.64,686.725 1201.2,686.725 1201.76,686.725 1202.32,686.725 1202.88,686.725 1203.44,686.725 1204,686.725 1204.56,686.725 1205.12,686.725 1205.68,686.725 1206.24,686.725 1206.8,686.725 1207.35,686.725 1207.91,686.725 1208.47,686.725 1209.03,686.725 1209.59,686.725 1210.15,686.725 1210.71,686.725 1211.27,686.725 1211.83,686.725 1212.39,686.725 1212.95,686.725 1213.51,686.725 1214.07,686.725 1214.62,686.725 1215.18,686.725 1215.74,686.725 1216.3,686.725 1216.86,686.725 1217.42,686.725 1217.98,686.725 1218.54,686.725 1219.1,686.725 1219.66,686.725 1220.22,686.725 1220.78,686.725 1221.34,686.725 1221.89,686.725 1222.45,686.725 1223.01,686.725 1223.57,686.725 1224.13,686.725 1224.69,686.725 1225.25,686.725 1225.81,686.725 1226.37,686.725 1226.93,686.725 1227.49,686.725 1228.05,686.725 1228.61,686.725 1229.17,686.725 1229.72,686.725 1230.28,686.725 1230.84,686.725 1231.4,686.725 1231.96,686.725 1232.52,686.725 1233.08,686.725 1233.64,686.725 1234.2,686.725 1234.76,686.725 1235.32,686.725 1235.88,686.725 1236.44,686.725 1236.99,686.725 1237.55,686.725 1238.11,686.725 1238.67,686.725 1239.23,686.725 1239.79,686.725 1240.35,686.725 1240.91,686.725 1241.47,686.725 1242.03,686.725 1242.59,686.725 1243.15,686.725 1243.71,686.725 1244.26,686.725 1244.82,686.725 1245.38,686.725 1245.94,686.725 1246.5,686.725 1247.06,686.725 1247.62,686.725 1248.18,686.725 1248.74,686.725 1249.3,686.725 1249.86,686.725 1250.42,686.725 1250.98,686.725 1251.54,686.725 1252.09,686.725 1252.65,686.725 1253.21,686.725 1253.77,686.725 1254.33,686.725 1254.89,686.725 1255.45,686.725 1256.01,686.725 1256.57,686.725 1257.13,686.725 1257.69,686.725 1258.25,686.725 1258.81,686.725 1259.36,686.725 1259.92,686.725 1260.48,686.725 1261.04,686.725 1261.6,686.725 1262.16,686.725 1262.72,686.725 1263.28,686.725 1263.84,686.725 1264.4,686.725 1264.96,686.725 1265.52,686.725 1266.08,686.725 1266.63,686.725 1267.19,686.725 1267.75,686.725 1268.31,686.725 1268.87,686.725 1269.43,686.725 1269.99,686.725 1270.55,686.725 1271.11,686.725 1271.67,686.725 1272.23,686.725 1272.79,686.725 1273.35,686.725 1273.91,686.725 1274.46,686.725 1275.02,686.725 1275.58,686.725 1276.14,686.725 1276.7,686.725 1277.26,686.725 1277.82,686.725 1278.38,686.725 1278.94,686.725 1279.5,686.725 1280.06,686.725 1280.62,686.725 1281.18,686.725 1281.73,686.725 1282.29,686.725 1282.85,686.725 1283.41,686.725 1283.97,686.725 1284.53,686.725 1285.09,686.725 1285.65,686.725 1286.21,686.725 1286.77,686.725 1287.33,686.725 1287.89,686.725 1288.45,686.725 1289,686.725 1289.56,686.725 1290.12,686.725 1290.68,686.725 1291.24,686.725 1291.8,686.725 1292.36,686.725 1292.92,686.725 1293.48,686.725 1294.04,686.725 1294.6,686.725 1295.16,686.725 1295.72,686.725 1296.28,686.725 1296.83,686.725 1297.39,686.725 1297.95,686.725 1298.51,686.725 1299.07,686.725 1299.63,686.725 1300.19,686.725 1300.75,686.725 1301.31,686.725 1301.87,686.725 1302.43,686.725 1302.99,686.725 1303.55,686.725 1304.1,686.725 1304.66,686.725 1305.22,686.725 1305.78,686.725 1306.34,686.725 1306.9,686.725 1307.46,686.725 1308.02,686.725 1308.58,686.725 1309.14,686.725 1309.7,686.725 1310.26,686.725 1310.82,686.725 1311.38,686.725 1311.93,686.725 1312.49,686.725 1313.05,686.725 1313.61,686.725 1314.17,686.725 1314.73,686.725 1315.29,686.725 1315.85,686.725 1316.41,686.725 1316.97,686.725 1317.53,686.725 1318.09,686.725 1318.65,686.725 1319.2,686.725 1319.76,686.725 1320.32,686.725 1320.88,686.725 1321.44,686.725 1322,686.725 1322.56,686.725 1323.12,686.725 1323.68,686.725 1324.24,686.725 1324.8,686.725 1325.36,686.725 1325.92,686.725 1326.47,686.725 1327.03,686.725 1327.59,686.725 1328.15,686.725 1328.71,686.725 1329.27,686.725 1329.83,686.725 1330.39,686.725 1330.95,686.725 1331.51,686.725 1332.07,686.725 1332.63,686.725 1333.19,686.725 1333.75,686.725 1334.3,686.725 1334.86,686.725 1335.42,686.725 1335.98,686.725 1336.54,686.725 1337.1,686.725 1337.66,686.725 1338.22,686.725 1338.78,686.725 1339.34,686.725 1339.9,686.725 1340.46,686.725 1341.02,686.725 1341.57,686.725 1342.13,686.725 1342.69,686.725 1343.25,686.725 1343.81,686.725 1344.37,686.725 1344.93,686.725 1345.49,686.725 1346.05,686.725 1346.61,686.725 1347.17,686.725 1347.73,686.725 1348.29,686.725 1348.84,686.725 1349.4,686.725 1349.96,686.725 1350.52,686.725 1351.08,686.725 1351.64,686.725 1352.2,686.725 1352.76,686.725 1353.32,686.725 1353.88,686.725 1354.44,686.725 1355,686.725 1355.56,686.725 1356.12,686.725 1356.67,686.725 1357.23,686.725 1357.79,686.725 1358.35,686.725 1358.91,686.725 1359.47,686.725 1360.03,686.725 1360.59,686.725 1361.15,686.725 1361.71,686.725 1362.27,686.725 1362.83,686.725 1363.39,686.725 1363.94,686.725 1364.5,686.725 1365.06,686.725 1365.62,686.725 1366.18,686.725 1366.74,686.725 1367.3,686.725 1367.86,686.725 1368.42,686.725 1368.98,686.725 1369.54,686.725 1370.1,686.725 1370.66,686.725 1371.21,686.725 1371.77,686.725 1372.33,686.725 1372.89,686.725 1373.45,686.725 1374.01,686.725 1374.57,686.725 1375.13,686.725 1375.69,686.725 1376.25,686.725 1376.81,686.725 1377.37,686.725 1377.93,686.725 1378.49,686.725 1379.04,686.725 1379.6,686.725 1380.16,686.725 1380.72,686.725 1381.28,686.725 1381.84,686.725 1382.4,686.725 1382.96,686.725 1383.52,686.725 1384.08,686.725 1384.64,686.725 1385.2,686.725 1385.76,686.725 1386.31,686.725 1386.87,686.725 1387.43,686.725 1387.99,686.725 1388.55,686.725 1389.11,686.725 1389.67,686.725 1390.23,686.725 1390.79,686.725 1391.35,686.725 1391.91,686.725 1392.47,686.725 1393.03,686.725 1393.58,686.725 1394.14,686.725 1394.7,686.725 1395.26,686.725 1395.82,686.725 1396.38,686.725 1396.94,686.725 1397.5,686.725 1398.06,686.725 1398.62,686.725 1399.18,686.725 1399.74,686.725 1400.3,686.725 1400.86,686.725 1401.41,686.725 1401.97,686.725 1402.53,686.725 1403.09,686.725 1403.65,686.725 1404.21,686.725 1404.77,686.725 1405.33,686.725 1405.89,686.725 1406.45,686.725 1407.01,686.725 1407.57,686.725 1408.13,686.725 1408.68,686.725 1409.24,686.725 1409.8,686.725 1410.36,686.725 1410.92,686.725 1411.48,686.725 1412.04,686.725 1412.6,686.725 1413.16,686.725 1413.72,686.725 1414.28,686.725 1414.84,686.725 1415.4,686.725 1415.95,686.725 1416.51,686.725 1417.07,686.725 1417.63,686.725 1418.19,686.725 1418.75,686.725 1419.31,686.725 1419.87,686.725 1420.43,686.725 1420.99,686.725 1421.55,686.725 1422.11,686.725 1422.67,686.725 1423.23,686.725 1423.78,686.725 1424.34,686.725 1424.9,686.725 1425.46,686.725 1426.02,686.725 1426.58,686.725 1427.14,686.725 1427.7,686.725 1428.26,686.725 1428.82,686.725 1429.38,686.725 1429.94,686.725 1430.5,686.725 1431.05,686.725 1431.61,686.725 1432.17,686.725 1432.73,686.725 1433.29,686.725 1433.85,686.725 1434.41,686.725 1434.97,686.725 1435.53,686.725 1436.09,686.725 1436.65,686.725 1437.21,686.725 1437.77,686.725 1438.33,686.725 1438.88,686.725 1439.44,686.725 1440,686.725 1440.56,686.725 1441.12,686.725 1441.68,686.725 1442.24,686.725 1442.8,686.725 1443.36,686.725 1443.92,686.725 1444.48,686.725 1445.04,686.725 1445.6,686.725 1446.15,686.725 1446.71,686.725 1447.27,686.725 1447.83,686.725 1448.39,686.725 1448.95,686.725 1449.51,686.725 1450.07,686.725 1450.63,686.725 1451.19,686.725 1451.75,686.725 1452.31,686.725 1452.87,686.725 1453.42,686.725 1453.98,686.725 1454.54,686.725 1455.1,686.725 1455.66,686.725 1456.22,686.725 1456.78,686.725 1457.34,686.725 1457.9,686.725 1458.46,686.725 1459.02,686.725 1459.58,686.725 1460.14,686.725 1460.7,686.725 1461.25,686.725 1461.81,686.725 1462.37,686.725 1462.93,686.725 1463.49,686.725 1464.05,686.725 1464.61,686.725 1465.17,686.725 1465.73,686.725 1466.29,686.725 1466.85,686.725 1467.41,686.725 1467.97,686.725 1468.52,686.725 1469.08,686.725 1469.64,686.725 1470.2,686.725 1470.76,686.725 1471.32,686.725 1471.88,686.725 1472.44,686.725 1473,686.725 1473.56,686.725 1474.12,686.725 1474.68,686.725 1475.24,686.725 1475.79,686.725 1476.35,686.725 1476.91,686.725 1477.47,686.725 1478.03,686.725 1478.59,686.725 1479.15,686.725 1479.71,686.725 1480.27,686.725 1480.83,686.725 1481.39,686.725 1481.95,686.725 1482.51,686.725 1483.07,686.725 1483.62,686.725 1484.18,686.725 1484.74,686.725 1485.3,686.725 1485.86,686.725 1486.42,686.725 1486.98,686.725 1487.54,686.725 1488.1,686.725 1488.66,686.725 1489.22,686.725 1489.78,686.725 1490.34,686.725 1490.89,686.725 1491.45,686.725 1492.01,686.725 1492.57,686.725 1493.13,686.725 1493.69,686.725 1494.25,686.725 1494.81,686.725 1495.37,686.725 1495.93,686.725 1496.49,686.725 1497.05,686.725 1497.61,686.725 1498.16,686.725 1498.72,686.725 1499.28,686.725 1499.84,686.725 1500.4,686.725 1500.96,686.725 1501.52,686.725 1502.08,686.725 1502.64,686.725 1503.2,686.725 1503.76,686.725 1504.32,686.725 1504.88,686.725 1505.44,686.725 1505.99,686.725 1506.55,686.725 1507.11,686.725 1507.67,686.725 1508.23,686.725 1508.79,686.725 1509.35,686.725 1509.91,686.725 1510.47,686.725 1511.03,686.725 1511.59,686.725 1512.15,686.725 1512.71,686.725 1513.26,686.725 1513.82,686.725 1514.38,686.725 1514.94,686.725 1515.5,686.725 1516.06,686.725 1516.62,686.725 1517.18,686.725 1517.74,686.725 1518.3,686.725 1518.86,686.725 1519.42,686.725 1519.98,686.725 1520.53,686.725 1521.09,686.725 1521.65,686.725 1522.21,686.725 1522.77,686.725 1523.33,686.725 1523.89,686.725 1524.45,686.725 1525.01,686.725 1525.57,686.725 1526.13,686.725 1526.69,686.725 1527.25,686.725 1527.81,686.725 1528.36,686.725 1528.92,686.725 1529.48,686.725 1530.04,686.725 1530.6,686.725 1531.16,686.725 1531.72,686.725 1532.28,686.725 1532.84,686.725 1533.4,686.725 1533.96,686.725 1534.52,686.725 1535.08,686.725 1535.63,686.725 1536.19,686.725 1536.75,686.725 1537.31,686.725 1537.87,686.725 1538.43,686.725 1538.99,686.725 1539.55,686.725 1540.11,686.725 1540.67,686.725 1541.23,686.725 1541.79,686.725 1542.35,686.725 1542.9,686.725 1543.46,686.725 1544.02,686.725 1544.58,686.725 1545.14,686.725 1545.7,686.725 1546.26,686.725 1546.82,686.725 1547.38,686.725 1547.94,686.725 1548.5,686.725 1549.06,686.725 1549.62,686.725 1550.18,686.725 1550.73,686.725 1551.29,686.725 1551.85,686.725 1552.41,686.725 1552.97,686.725 1553.53,686.725 1554.09,686.725 1554.65,686.725 1555.21,686.725 1555.77,686.725 1556.33,686.725 1556.89,686.725 1557.45,686.725 1558,686.725 1558.56,686.725 1559.12,686.725 1559.68,686.725 1560.24,686.725 1560.8,686.725 1561.36,686.725 1561.92,686.725 1562.48,686.725 1563.04,686.725 1563.6,686.725 1564.16,686.725 1564.72,686.725 1565.28,686.725 1565.83,686.725 1566.39,686.725 1566.95,686.725 1567.51,686.725 1568.07,686.725 1568.63,686.725 1569.19,686.725 1569.75,686.725 1570.31,686.725 1570.87,686.725 1571.43,686.725 1571.99,686.725 1572.55,686.725 1573.1,686.725 1573.66,686.725 1574.22,686.725 1574.78,686.725 1575.34,686.725 1575.9,686.725 1576.46,686.725 1577.02,686.725 1577.58,686.725 1578.14,686.725 1578.7,686.725 1579.26,686.725 1579.82,686.725 1580.37,686.725 1580.93,686.725 1581.49,686.725 1582.05,686.725 1582.61,686.725 1583.17,686.725 1583.73,686.725 1584.29,686.725 1584.85,686.725 1585.41,686.725 1585.97,686.725 1586.53,686.725 1587.09,686.725 1587.65,686.725 1588.2,686.725 1588.76,686.725 1589.32,686.725 1589.88,686.725 1590.44,686.725 1591,686.725 1591.56,686.725 1592.12,686.725 1592.68,686.725 1593.24,686.725 1593.8,686.725 1594.36,686.725 1594.92,686.725 1595.47,686.725 1596.03,686.725 1596.59,686.725 1597.15,686.725 1597.71,686.725 1598.27,686.725 1598.83,686.725 1599.39,686.725 1599.95,686.725 1600.51,686.725 1601.07,686.725 1601.63,686.725 1602.19,686.725 1602.74,686.725 1603.3,686.725 1603.86,686.725 1604.42,686.725 1604.98,686.725 1605.54,686.725 1606.1,686.725 1606.66,686.725 1607.22,686.725 1607.78,686.725 1608.34,686.725 1608.9,686.725 1609.46,686.725 1610.02,686.725 1610.57,686.725 1611.13,686.725 1611.69,686.725 1612.25,686.725 1612.81,686.725 1613.37,686.725 1613.93,686.725 1614.49,686.725 1615.05,686.725 1615.61,686.725 1616.17,686.725 1616.73,686.725 1617.29,686.725 1617.84,686.725 1618.4,686.725 1618.96,686.725 1619.52,686.725 1620.08,686.725 1620.64,686.725 1621.2,686.725 1621.76,686.725 1622.32,686.725 1622.88,686.725 1623.44,686.725 1624,686.725 1624.56,686.725 1625.11,686.725 1625.67,686.725 1626.23,686.725 1626.79,686.725 1627.35,686.725 1627.91,686.725 1628.47,686.725 1629.03,686.725 1629.59,686.725 1630.15,686.725 1630.71,686.725 1631.27,686.725 1631.83,686.725 1632.39,686.725 1632.94,686.725 1633.5,686.725 1634.06,686.725 1634.62,686.725 1635.18,686.725 1635.74,686.725 1636.3,686.725 1636.86,686.725 1637.42,686.725 1637.98,686.725 1638.54,686.725 1639.1,686.725 1639.66,686.725 1640.21,686.725 1640.77,686.725 1641.33,686.725 1641.89,686.725 1642.45,686.725 1643.01,686.725 1643.57,686.725 1644.13,686.725 1644.69,686.725 1645.25,686.725 1645.81,686.725 1646.37,686.725 1646.93,686.725 1647.48,686.725 1648.04,686.725 1648.6,686.725 1649.16,686.725 1649.72,686.725 1650.28,686.725 1650.84,686.725 1651.4,686.725 1651.96,686.725 1652.52,686.725 1653.08,686.725 1653.64,686.725 1654.2,686.725 1654.76,686.725 1655.31,686.725 1655.87,686.725 1656.43,686.725 1656.99,686.725 1657.55,686.725 1658.11,686.725 1658.67,686.725 1659.23,686.725 1659.79,686.725 1660.35,686.725 1660.91,686.725 1661.47,686.725 1662.03,686.725 1662.58,686.725 1663.14,686.725 1663.7,686.725 1664.26,686.725 1664.82,686.725 1665.38,686.725 1665.94,686.725 1666.5,686.725 1667.06,686.725 1667.62,686.725 1668.18,686.725 1668.74,686.725 1669.3,686.725 1669.85,686.725 1670.41,686.725 1670.97,686.725 1671.53,686.725 1672.09,686.725 1672.65,686.725 1673.21,686.725 1673.77,686.725 1674.33,686.725 1674.89,686.725 1675.45,686.725 1676.01,686.725 1676.57,686.725 1677.13,686.725 1677.68,686.725 1678.24,686.725 1678.8,686.725 1679.36,686.725 1679.92,686.725 1680.48,686.725 1681.04,686.725 1681.6,686.725 1682.16,686.725 1682.72,686.725 1683.28,686.725 1683.84,686.725 1684.4,686.725 1684.95,686.725 1685.51,686.725 1686.07,686.725 1686.63,686.725 1687.19,686.725 1687.75,686.725 1688.31,686.725 1688.87,686.725 1689.43,686.725 1689.99,686.725 1690.55,686.725 1691.11,686.725 1691.67,686.725 1692.23,686.725 1692.78,686.725 1693.34,686.725 1693.9,686.725 1694.46,686.725 1695.02,686.725 1695.58,686.725 1696.14,686.725 1696.7,686.725 1697.26,686.725 1697.82,686.725 1698.38,686.725 1698.94,686.725 1699.5,686.725 1700.05,686.725 1700.61,686.725 1701.17,686.725 1701.73,686.725 1702.29,686.725 1702.85,686.725 1703.41,686.725 1703.97,686.725 1704.53,686.725 1705.09,686.725 1705.65,686.725 1706.21,686.725 1706.77,686.725 1707.32,686.725 1707.88,686.725 1708.44,686.725 1709,686.725 1709.56,686.725 1710.12,686.725 1710.68,686.725 1711.24,686.725 1711.8,686.725 1712.36,686.725 1712.92,686.725 1713.48,686.725 1714.04,686.725 1714.6,686.725 1715.15,686.725 1715.71,686.725 1716.27,686.725 1716.83,686.725 1717.39,686.725 1717.95,686.725 1718.51,686.725 1719.07,686.725 1719.63,686.725 1720.19,686.725 1720.75,686.725 1721.31,686.725 1721.87,686.725 1722.42,686.725 1722.98,686.725 1723.54,686.725 1724.1,686.725 1724.66,686.725 1725.22,686.725 1725.78,686.725 1726.34,686.725 1726.9,686.725 1727.46,686.725 1728.02,686.725 1728.58,686.725 1729.14,686.725 1729.69,686.725 1730.25,686.725 1730.81,686.725 1731.37,686.725 1731.93,686.725 1732.49,686.725 1733.05,686.725 1733.61,686.725 1734.17,686.725 1734.73,686.725 1735.29,686.725 1735.85,686.725 1736.41,686.725 1736.97,686.725 1737.52,686.725 1738.08,686.725 1738.64,686.725 1739.2,686.725 1739.76,686.725 1740.32,686.725 1740.88,686.725 1741.44,686.725 1742,686.725 1742.56,686.725 1743.12,686.725 1743.68,686.725 1744.24,686.725 1744.79,686.725 1745.35,686.725 1745.91,686.725 1746.47,686.725 1747.03,686.725 1747.59,686.725 1748.15,686.725 1748.71,686.725 1749.27,686.725 1749.83,686.725 1750.39,686.725 1750.95,686.725 1751.51,686.725 1752.06,686.725 1752.62,686.725 1753.18,686.725 1753.74,686.725 1754.3,686.725 1754.86,686.725 1755.42,686.725 1755.98,686.725 1756.54,686.725 1757.1,686.725 1757.66,686.725 1758.22,686.725 1758.78,686.725 1759.34,686.725 1759.89,686.725 1760.45,686.725 1761.01,686.725 1761.57,686.725 1762.13,686.725 1762.69,686.725 1763.25,686.725 1763.81,686.725 1764.37,686.725 1764.93,686.725 1765.49,686.725 1766.05,686.725 1766.61,686.725 1767.16,686.725 1767.72,686.725 1768.28,686.725 1768.84,686.725 1769.4,686.725 1769.96,686.725 1770.52,686.725 1771.08,686.725 1771.64,686.725 1772.2,686.725 1772.76,686.725 1773.32,686.725 1773.88,686.725 1774.43,686.725 1774.99,686.725 1775.55,686.725 1776.11,686.725 1776.67,686.725 1777.23,686.725 1777.79,686.725 1778.35,686.725 1778.91,686.725 1779.47,686.725 1780.03,686.725 1780.59,686.725 1781.15,686.725 1781.71,686.725 1782.26,686.725 1782.82,686.725 1783.38,686.725 1783.94,686.725 1784.5,686.725 1785.06,686.725 1785.62,686.725 1786.18,686.725 1786.74,686.725 1787.3,686.725 1787.86,686.725 1788.42,686.725 1788.98,686.725 1789.53,686.725 1790.09,686.725 1790.65,686.725 1791.21,686.725 1791.77,686.725 1792.33,686.725 1792.89,686.725 1793.45,686.725 1794.01,686.725 1794.57,686.725 1795.13,686.725 1795.69,686.725 1796.25,686.725 1796.8,686.725 1797.36,686.725 1797.92,686.725 1798.48,686.725 1799.04,686.725 1799.6,686.725 1800.16,686.725 1800.72,686.725 1801.28,686.725 1801.84,686.725 1802.4,686.725 1802.96,686.725 1803.52,686.725 1804.08,686.725 1804.63,686.725 1805.19,686.725 1805.75,686.725 1806.31,686.725 1806.87,686.725 1807.43,686.725 1807.99,686.725 1808.55,686.725 1809.11,686.725 1809.67,686.725 1810.23,686.725 1810.79,686.725 1811.35,686.725 1811.9,686.725 1812.46,686.725 1813.02,686.725 1813.58,686.725 1814.14,686.725 1814.7,686.725 1815.26,686.725 1815.82,686.725 1816.38,686.725 1816.94,686.725 1817.5,686.725 1818.06,686.725 1818.62,686.725 1819.18,686.725 1819.73,686.725 1820.29,686.725 1820.85,686.725 1821.41,686.725 1821.97,686.725 1822.53,686.725 1823.09,686.725 1823.65,686.725 1824.21,686.725 1824.77,686.725 1825.33,686.725 1825.89,686.725 1826.45,686.725 1827,686.725 1827.56,686.725 1828.12,686.725 1828.68,686.725 1829.24,686.725 1829.8,686.725 1830.36,686.725 1830.92,686.725 1831.48,686.725 1832.04,686.725 1832.6,686.725 1833.16,686.725 1833.72,686.725 1834.27,686.725 1834.83,686.725 1835.39,686.725 1835.95,686.725 1836.51,686.725 1837.07,686.725 1837.63,686.725 1838.19,686.725 \"/>\n<path clip-path=\"url(#clip613)\" d=\"M720.247 685.81 L720.806 685.81 L721.365 685.81 L721.924 685.81 L722.484 685.81 L723.043 685.81 L723.602 685.81 L724.161 685.81 L724.721 685.81 L725.28 685.81 L725.839 685.81 L726.398 685.81 L726.958 685.81 L727.517 685.81 L728.076 685.81 L728.635 685.81 L729.195 685.81 L729.754 685.81 L730.313 685.81 L730.872 685.81 L731.432 685.81 L731.991 685.81 L732.55 685.81 L733.109 685.81 L733.669 685.81 L734.228 685.81 L734.787 685.81 L735.346 685.81 L735.906 685.81 L736.465 685.81 L737.024 685.81 L737.583 685.81 L738.143 685.81 L738.702 685.81 L739.261 685.81 L739.82 685.81 L740.38 685.81 L740.939 685.81 L741.498 685.81 L742.057 685.81 L742.617 685.81 L743.176 685.81 L743.735 685.81 L744.294 685.81 L744.854 685.81 L745.413 685.81 L745.972 685.81 L746.531 685.81 L747.091 685.81 L747.65 685.81 L748.209 685.81 L748.768 685.81 L749.328 685.81 L749.887 685.81 L750.446 685.81 L751.005 685.81 L751.565 685.81 L752.124 685.81 L752.683 685.81 L753.242 685.81 L753.802 685.81 L754.361 685.81 L754.92 685.81 L755.479 685.81 L756.039 685.81 L756.598 685.81 L757.157 685.81 L757.716 685.81 L758.276 685.81 L758.835 685.81 L759.394 685.81 L759.953 685.81 L760.513 685.81 L761.072 685.81 L761.631 685.81 L762.19 685.81 L762.75 685.81 L763.309 685.81 L763.868 685.81 L764.427 685.81 L764.987 685.81 L765.546 685.81 L766.105 685.81 L766.664 685.81 L767.224 685.81 L767.783 685.81 L768.342 685.81 L768.901 685.81 L769.461 685.81 L770.02 685.81 L770.579 685.81 L771.138 685.81 L771.698 685.81 L772.257 685.81 L772.816 685.81 L773.375 685.81 L773.935 685.81 L774.494 685.81 L775.053 685.81 L775.612 685.81 L776.172 685.81 L776.731 685.81 L777.29 685.81 L777.849 685.81 L778.409 685.81 L778.968 685.81 L779.527 685.81 L780.086 685.81 L780.646 685.81 L781.205 685.81 L781.764 685.81 L782.323 685.81 L782.883 685.81 L783.442 685.81 L784.001 685.81 L784.56 685.81 L785.12 685.81 L785.679 685.81 L786.238 685.81 L786.797 685.81 L787.357 685.81 L787.916 685.81 L788.475 685.81 L789.034 685.81 L789.594 685.81 L790.153 685.81 L790.712 685.81 L791.271 685.81 L791.831 685.81 L792.39 685.81 L792.949 685.81 L793.508 685.81 L794.068 685.81 L794.627 685.81 L795.186 685.81 L795.745 685.81 L796.305 685.81 L796.864 685.81 L797.423 685.81 L797.982 685.81 L798.542 685.81 L799.101 685.81 L799.66 685.81 L800.219 685.81 L800.779 685.81 L801.338 685.81 L801.897 685.81 L802.456 685.81 L803.016 685.81 L803.575 685.81 L804.134 685.81 L804.693 685.81 L805.253 685.81 L805.812 685.81 L806.371 685.81 L806.931 685.81 L807.49 685.81 L808.049 685.81 L808.608 685.81 L809.168 685.81 L809.727 685.81 L810.286 685.81 L810.845 685.81 L811.405 685.81 L811.964 685.81 L812.523 685.81 L813.082 685.81 L813.642 685.81 L814.201 685.81 L814.76 685.81 L815.319 685.81 L815.879 685.81 L816.438 685.81 L816.997 685.81 L817.556 685.81 L818.116 685.81 L818.675 685.81 L819.234 685.81 L819.793 685.81 L820.353 685.81 L820.912 685.81 L821.471 685.81 L822.03 685.81 L822.59 685.81 L823.149 685.81 L823.708 685.81 L824.267 685.81 L824.827 685.81 L825.386 685.81 L825.945 685.81 L826.504 685.81 L827.064 685.81 L827.623 685.81 L828.182 685.81 L828.741 685.81 L829.301 685.81 L829.86 685.81 L830.419 685.81 L830.978 685.81 L831.538 685.81 L832.097 685.81 L832.656 685.81 L833.215 685.81 L833.775 685.81 L834.334 685.81 L834.893 685.81 L835.452 685.81 L836.012 685.81 L836.571 685.81 L837.13 685.81 L837.689 685.81 L838.249 685.81 L838.808 685.81 L839.367 685.81 L839.926 685.81 L840.486 685.81 L841.045 685.81 L841.604 685.81 L842.163 685.81 L842.723 685.81 L843.282 685.81 L843.841 685.81 L844.4 685.81 L844.96 685.81 L845.519 685.81 L846.078 685.81 L846.637 685.81 L847.197 685.81 L847.756 685.81 L848.315 685.81 L848.874 685.81 L849.434 685.81 L849.993 685.81 L850.552 685.81 L851.111 685.81 L851.671 685.81 L852.23 685.81 L852.789 685.81 L853.348 685.81 L853.908 685.81 L854.467 685.81 L855.026 685.81 L855.585 685.81 L856.145 685.81 L856.704 685.81 L857.263 685.81 L857.822 685.81 L858.382 685.81 L858.941 685.81 L859.5 685.81 L860.059 685.81 L860.619 685.81 L861.178 685.81 L861.737 685.81 L862.296 685.81 L862.856 685.81 L863.415 685.81 L863.974 685.81 L864.533 685.81 L865.093 685.81 L865.652 685.81 L866.211 685.81 L866.77 685.81 L867.33 685.81 L867.889 685.81 L868.448 685.81 L869.007 685.81 L869.567 685.81 L870.126 685.81 L870.685 685.81 L871.244 685.81 L871.804 685.81 L872.363 685.81 L872.922 685.81 L873.481 685.81 L874.041 685.81 L874.6 685.81 L875.159 685.81 L875.718 685.81 L876.278 685.81 L876.837 685.81 L877.396 685.81 L877.955 685.81 L878.515 685.81 L879.074 685.81 L879.633 685.81 L880.192 685.81 L880.752 685.81 L881.311 685.81 L881.87 685.81 L882.429 685.81 L882.989 685.81 L883.548 685.81 L884.107 685.81 L884.666 685.81 L885.226 685.81 L885.785 685.81 L886.344 685.81 L886.903 685.81 L887.463 685.81 L888.022 685.81 L888.581 685.81 L889.14 685.81 L889.7 685.81 L890.259 685.81 L890.818 685.81 L891.377 685.81 L891.937 685.81 L892.496 685.81 L893.055 685.81 L893.614 685.81 L894.174 685.81 L894.733 685.81 L895.292 685.81 L895.851 685.81 L896.411 685.81 L896.97 685.81 L897.529 685.81 L898.088 685.81 L898.648 685.81 L899.207 685.81 L899.766 685.81 L900.325 685.81 L900.885 685.81 L901.444 685.81 L902.003 685.81 L902.562 685.81 L903.122 685.81 L903.681 685.81 L904.24 685.81 L904.799 685.81 L905.359 685.81 L905.918 685.81 L906.477 685.81 L907.036 685.81 L907.596 685.81 L908.155 685.81 L908.714 685.81 L909.273 685.81 L909.833 685.81 L910.392 685.81 L910.951 685.81 L911.51 685.81 L912.07 685.81 L912.629 685.81 L913.188 685.81 L913.747 685.81 L914.307 685.81 L914.866 685.81 L915.425 685.81 L915.984 685.81 L916.544 685.81 L917.103 685.81 L917.662 685.81 L918.221 685.81 L918.781 685.81 L919.34 685.81 L919.899 685.81 L920.458 685.81 L921.018 685.81 L921.577 685.81 L922.136 685.81 L922.695 685.81 L923.255 685.81 L923.814 685.81 L924.373 685.81 L924.932 685.81 L925.492 685.81 L926.051 685.81 L926.61 685.81 L927.169 685.81 L927.729 685.81 L928.288 685.81 L928.847 685.81 L929.406 685.81 L929.966 685.81 L930.525 685.81 L931.084 685.81 L931.644 685.81 L932.203 685.81 L932.762 685.81 L933.321 685.81 L933.881 685.81 L934.44 685.81 L934.999 685.81 L935.558 685.81 L936.118 685.81 L936.677 685.81 L937.236 685.81 L937.795 685.81 L938.355 685.81 L938.914 685.81 L939.473 685.81 L940.032 685.81 L940.592 685.81 L941.151 685.81 L941.71 685.81 L942.269 685.81 L942.829 685.81 L943.388 685.81 L943.947 685.81 L944.506 685.81 L945.066 685.81 L945.625 685.81 L946.184 685.81 L946.743 685.81 L947.303 685.81 L947.862 685.81 L948.421 685.81 L948.98 685.81 L949.54 685.81 L950.099 685.81 L950.658 685.81 L951.217 685.81 L951.777 685.81 L952.336 685.81 L952.895 685.81 L953.454 685.81 L954.014 685.81 L954.573 685.81 L955.132 685.81 L955.691 685.81 L956.251 685.81 L956.81 685.81 L957.369 685.81 L957.928 685.81 L958.488 685.81 L959.047 685.81 L959.606 685.81 L960.165 685.81 L960.725 685.81 L961.284 685.81 L961.843 685.81 L962.402 685.81 L962.962 685.81 L963.521 685.81 L964.08 685.81 L964.639 685.81 L965.199 685.81 L965.758 685.81 L966.317 685.81 L966.876 685.81 L967.436 685.81 L967.995 685.81 L968.554 685.81 L969.113 685.81 L969.673 685.81 L970.232 685.81 L970.791 685.81 L971.35 685.81 L971.91 685.81 L972.469 685.81 L973.028 685.81 L973.587 685.81 L974.147 685.81 L974.706 685.81 L975.265 685.81 L975.824 685.81 L976.384 685.81 L976.943 685.81 L977.502 685.81 L978.061 685.81 L978.621 685.81 L979.18 685.81 L979.739 685.81 L980.298 685.81 L980.858 685.81 L981.417 685.81 L981.976 685.81 L982.535 685.81 L983.095 685.81 L983.654 685.81 L984.213 685.81 L984.772 685.81 L985.332 685.81 L985.891 685.81 L986.45 685.81 L987.009 685.81 L987.569 685.81 L988.128 685.81 L988.687 685.81 L989.246 685.81 L989.806 685.81 L990.365 685.81 L990.924 685.81 L991.483 685.81 L992.043 685.81 L992.602 685.81 L993.161 685.81 L993.72 685.81 L994.28 685.81 L994.839 685.81 L995.398 685.81 L995.957 685.81 L996.517 685.81 L997.076 685.81 L997.635 685.81 L998.194 685.81 L998.754 685.81 L999.313 685.81 L999.872 685.81 L1000.43 685.81 L1000.99 685.81 L1001.55 685.81 L1002.11 685.81 L1002.67 685.81 L1003.23 685.81 L1003.79 685.81 L1004.35 685.81 L1004.91 685.81 L1005.46 685.81 L1006.02 685.81 L1006.58 685.81 L1007.14 685.81 L1007.7 685.81 L1008.26 685.81 L1008.82 685.81 L1009.38 685.81 L1009.94 685.81 L1010.5 685.81 L1011.06 685.81 L1011.62 685.81 L1012.18 685.81 L1012.73 685.81 L1013.29 685.81 L1013.85 685.81 L1014.41 685.81 L1014.97 685.81 L1015.53 685.81 L1016.09 685.81 L1016.65 685.81 L1017.21 685.81 L1017.77 685.81 L1018.33 685.81 L1018.89 685.81 L1019.45 685.81 L1020.01 685.81 L1020.56 685.81 L1021.12 685.81 L1021.68 685.81 L1022.24 685.81 L1022.8 685.81 L1023.36 685.81 L1023.92 685.81 L1024.48 685.81 L1025.04 685.81 L1025.6 685.81 L1026.16 685.81 L1026.72 685.81 L1027.28 685.81 L1027.83 685.81 L1028.39 685.81 L1028.95 685.81 L1029.51 685.81 L1030.07 685.81 L1030.63 685.81 L1031.19 685.81 L1031.75 685.81 L1032.31 685.81 L1032.87 685.81 L1033.43 685.81 L1033.99 685.81 L1034.55 685.81 L1035.1 685.81 L1035.66 685.81 L1036.22 685.81 L1036.78 685.81 L1037.34 685.81 L1037.9 685.81 L1038.46 685.81 L1039.02 685.81 L1039.58 685.81 L1040.14 685.81 L1040.7 685.81 L1041.26 685.81 L1041.82 685.81 L1042.38 685.81 L1042.93 685.81 L1043.49 685.81 L1044.05 685.81 L1044.61 685.81 L1045.17 685.81 L1045.73 685.81 L1046.29 685.81 L1046.85 685.81 L1047.41 685.81 L1047.97 685.81 L1048.53 685.81 L1049.09 685.81 L1049.65 685.81 L1050.2 685.81 L1050.76 685.81 L1051.32 685.81 L1051.88 685.81 L1052.44 685.81 L1053 685.81 L1053.56 685.81 L1054.12 685.81 L1054.68 685.81 L1055.24 685.81 L1055.8 685.81 L1056.36 685.81 L1056.92 685.81 L1057.48 685.81 L1058.03 685.81 L1058.59 685.81 L1059.15 685.81 L1059.71 685.81 L1060.27 685.81 L1060.83 685.81 L1061.39 685.81 L1061.95 685.81 L1062.51 685.81 L1063.07 685.81 L1063.63 685.81 L1064.19 685.81 L1064.75 685.81 L1065.3 685.81 L1065.86 685.81 L1066.42 685.81 L1066.98 685.81 L1067.54 685.81 L1068.1 685.81 L1068.66 685.81 L1069.22 685.81 L1069.78 685.81 L1070.34 685.81 L1070.9 685.81 L1071.46 685.81 L1072.02 685.81 L1072.57 685.81 L1073.13 685.81 L1073.69 685.81 L1074.25 685.81 L1074.81 685.81 L1075.37 685.81 L1075.93 685.81 L1076.49 685.81 L1077.05 685.81 L1077.61 685.81 L1078.17 685.81 L1078.73 685.81 L1079.29 685.81 L1079.85 685.81 L1080.4 685.81 L1080.96 685.81 L1081.52 685.81 L1082.08 685.81 L1082.64 685.81 L1083.2 685.81 L1083.76 685.81 L1084.32 685.81 L1084.88 685.81 L1085.44 685.81 L1086 685.81 L1086.56 685.81 L1087.12 685.81 L1087.67 685.81 L1088.23 685.81 L1088.79 685.81 L1089.35 685.81 L1089.91 685.81 L1090.47 685.81 L1091.03 685.81 L1091.59 685.81 L1092.15 685.81 L1092.71 685.81 L1093.27 685.81 L1093.83 685.81 L1094.39 685.81 L1094.94 685.81 L1095.5 685.81 L1096.06 685.81 L1096.62 685.81 L1097.18 685.81 L1097.74 685.81 L1098.3 685.81 L1098.86 685.81 L1099.42 685.81 L1099.98 685.81 L1100.54 685.81 L1101.1 685.81 L1101.66 685.81 L1102.22 685.81 L1102.77 685.81 L1103.33 685.81 L1103.89 685.81 L1104.45 685.81 L1105.01 685.81 L1105.57 685.81 L1106.13 685.81 L1106.69 685.81 L1107.25 685.81 L1107.81 685.81 L1108.37 685.81 L1108.93 685.81 L1109.49 685.81 L1110.04 685.81 L1110.6 685.81 L1111.16 685.81 L1111.72 685.81 L1112.28 685.81 L1112.84 685.81 L1113.4 685.81 L1113.96 685.81 L1114.52 685.81 L1115.08 685.81 L1115.64 685.81 L1116.2 685.81 L1116.76 685.81 L1117.31 685.81 L1117.87 685.81 L1118.43 685.81 L1118.99 685.81 L1119.55 685.81 L1120.11 685.81 L1120.67 685.81 L1121.23 685.81 L1121.79 685.81 L1122.35 685.81 L1122.91 685.81 L1123.47 685.81 L1124.03 685.81 L1124.59 685.81 L1125.14 685.81 L1125.7 685.81 L1126.26 685.81 L1126.82 685.81 L1127.38 685.81 L1127.94 685.81 L1128.5 685.81 L1129.06 685.81 L1129.62 685.81 L1130.18 685.81 L1130.74 685.81 L1131.3 685.81 L1131.86 685.81 L1132.41 685.81 L1132.97 685.81 L1133.53 685.81 L1134.09 685.81 L1134.65 685.81 L1135.21 685.81 L1135.77 685.81 L1136.33 685.81 L1136.89 685.81 L1137.45 685.81 L1138.01 685.81 L1138.57 685.81 L1139.13 685.81 L1139.68 685.81 L1140.24 685.81 L1140.8 685.81 L1141.36 685.81 L1141.92 685.81 L1142.48 685.81 L1143.04 685.81 L1143.6 685.81 L1144.16 685.81 L1144.72 685.81 L1145.28 685.81 L1145.84 685.81 L1146.4 685.81 L1146.96 685.81 L1147.51 685.81 L1148.07 685.81 L1148.63 685.81 L1149.19 685.81 L1149.75 685.81 L1150.31 685.81 L1150.87 685.81 L1151.43 685.81 L1151.99 685.81 L1152.55 685.81 L1153.11 685.81 L1153.67 685.81 L1154.23 685.81 L1154.78 685.81 L1155.34 685.81 L1155.9 685.81 L1156.46 685.81 L1157.02 685.81 L1157.58 685.81 L1158.14 685.81 L1158.7 685.81 L1159.26 685.81 L1159.82 685.81 L1160.38 685.81 L1160.94 685.81 L1161.5 685.81 L1162.05 685.81 L1162.61 685.81 L1163.17 685.81 L1163.73 685.81 L1164.29 685.81 L1164.85 685.81 L1165.41 685.81 L1165.97 685.81 L1166.53 685.81 L1167.09 685.81 L1167.65 685.81 L1168.21 685.81 L1168.77 685.81 L1169.33 685.81 L1169.88 685.81 L1170.44 685.81 L1171 685.81 L1171.56 685.81 L1172.12 685.81 L1172.68 685.81 L1173.24 685.81 L1173.8 685.81 L1174.36 685.81 L1174.92 685.81 L1175.48 685.81 L1176.04 685.81 L1176.6 685.81 L1177.15 685.81 L1177.71 685.81 L1178.27 685.81 L1178.83 685.81 L1179.39 685.81 L1179.95 685.81 L1180.51 685.81 L1181.07 685.81 L1181.63 685.81 L1182.19 685.81 L1182.75 685.81 L1183.31 685.81 L1183.87 685.81 L1184.43 685.81 L1184.98 685.81 L1185.54 685.81 L1186.1 685.81 L1186.66 685.81 L1187.22 685.81 L1187.78 685.81 L1188.34 685.81 L1188.9 685.81 L1189.46 685.81 L1190.02 685.81 L1190.58 685.81 L1191.14 685.81 L1191.7 685.81 L1192.25 685.81 L1192.81 685.81 L1193.37 685.81 L1193.93 685.81 L1194.49 685.81 L1195.05 685.81 L1195.61 685.81 L1196.17 685.81 L1196.73 685.81 L1197.29 685.81 L1197.85 685.81 L1198.41 685.81 L1198.97 685.81 L1199.52 685.81 L1200.08 685.81 L1200.64 685.81 L1201.2 685.81 L1201.76 685.81 L1202.32 685.81 L1202.88 685.81 L1203.44 685.81 L1204 685.81 L1204.56 685.81 L1205.12 685.81 L1205.68 685.81 L1206.24 685.81 L1206.8 685.81 L1207.35 685.81 L1207.91 685.81 L1208.47 685.81 L1209.03 685.81 L1209.59 685.81 L1210.15 685.81 L1210.71 685.81 L1211.27 685.81 L1211.83 685.81 L1212.39 685.81 L1212.95 685.81 L1213.51 685.81 L1214.07 685.81 L1214.62 685.81 L1215.18 685.81 L1215.74 685.81 L1216.3 685.81 L1216.86 685.81 L1217.42 685.81 L1217.98 685.81 L1218.54 685.81 L1219.1 685.81 L1219.66 685.81 L1220.22 685.81 L1220.78 685.81 L1221.34 685.81 L1221.89 685.81 L1222.45 685.81 L1223.01 685.81 L1223.57 685.81 L1224.13 685.81 L1224.69 685.81 L1225.25 685.81 L1225.81 685.81 L1226.37 685.81 L1226.93 685.81 L1227.49 685.81 L1228.05 685.81 L1228.61 685.81 L1229.17 685.81 L1229.72 685.81 L1230.28 685.81 L1230.84 685.81 L1231.4 685.81 L1231.96 685.81 L1232.52 685.81 L1233.08 685.81 L1233.64 685.81 L1234.2 685.81 L1234.76 685.81 L1235.32 685.81 L1235.88 685.81 L1236.44 685.81 L1236.99 685.81 L1237.55 685.81 L1238.11 685.81 L1238.67 685.81 L1239.23 685.81 L1239.79 685.81 L1240.35 685.81 L1240.91 685.81 L1241.47 685.81 L1242.03 685.81 L1242.59 685.81 L1243.15 685.81 L1243.71 685.81 L1244.26 685.81 L1244.82 685.81 L1245.38 685.81 L1245.94 685.81 L1246.5 685.81 L1247.06 685.81 L1247.62 685.81 L1248.18 685.81 L1248.74 685.81 L1249.3 685.81 L1249.86 685.81 L1250.42 685.81 L1250.98 685.81 L1251.54 685.81 L1252.09 685.81 L1252.65 685.81 L1253.21 685.81 L1253.77 685.81 L1254.33 685.81 L1254.89 685.81 L1255.45 685.81 L1256.01 685.81 L1256.57 685.81 L1257.13 685.81 L1257.69 685.81 L1258.25 685.81 L1258.81 685.81 L1259.36 685.81 L1259.92 685.81 L1260.48 685.81 L1261.04 685.81 L1261.6 685.81 L1262.16 685.81 L1262.72 685.81 L1263.28 685.81 L1263.84 685.81 L1264.4 685.81 L1264.96 685.81 L1265.52 685.81 L1266.08 685.81 L1266.63 685.81 L1267.19 685.81 L1267.75 685.81 L1268.31 685.81 L1268.87 685.81 L1269.43 685.81 L1269.99 685.81 L1270.55 685.81 L1271.11 685.81 L1271.67 685.81 L1272.23 685.81 L1272.79 685.81 L1273.35 685.81 L1273.91 685.81 L1274.46 685.81 L1275.02 685.81 L1275.58 685.81 L1276.14 685.81 L1276.7 685.81 L1277.26 685.81 L1277.82 685.81 L1278.38 685.81 L1278.94 685.81 L1279.5 685.81 L1280.06 685.81 L1280.62 685.81 L1281.18 685.81 L1281.73 685.81 L1282.29 685.81 L1282.85 685.81 L1283.41 685.81 L1283.97 685.81 L1284.53 685.81 L1285.09 685.81 L1285.65 685.81 L1286.21 685.81 L1286.77 685.81 L1287.33 685.81 L1287.89 685.81 L1288.45 685.81 L1289 685.81 L1289.56 685.81 L1290.12 685.81 L1290.68 685.81 L1291.24 685.81 L1291.8 685.81 L1292.36 685.81 L1292.92 685.81 L1293.48 685.81 L1294.04 685.81 L1294.6 685.81 L1295.16 685.81 L1295.72 685.81 L1296.28 685.81 L1296.83 685.81 L1297.39 685.81 L1297.95 685.81 L1298.51 685.81 L1299.07 685.81 L1299.63 685.81 L1300.19 685.81 L1300.75 685.81 L1301.31 685.81 L1301.87 685.81 L1302.43 685.81 L1302.99 685.81 L1303.55 685.81 L1304.1 685.81 L1304.66 685.81 L1305.22 685.81 L1305.78 685.81 L1306.34 685.81 L1306.9 685.81 L1307.46 685.81 L1308.02 685.81 L1308.58 685.81 L1309.14 685.81 L1309.7 685.81 L1310.26 685.81 L1310.82 685.81 L1311.38 685.81 L1311.93 685.81 L1312.49 685.81 L1313.05 685.81 L1313.61 685.81 L1314.17 685.81 L1314.73 685.81 L1315.29 685.81 L1315.85 685.81 L1316.41 685.81 L1316.97 685.81 L1317.53 685.81 L1318.09 685.81 L1318.65 685.81 L1319.2 685.81 L1319.76 685.81 L1320.32 685.81 L1320.88 685.81 L1321.44 685.81 L1322 685.81 L1322.56 685.81 L1323.12 685.81 L1323.68 685.81 L1324.24 685.81 L1324.8 685.81 L1325.36 685.81 L1325.92 685.81 L1326.47 685.81 L1327.03 685.81 L1327.59 685.81 L1328.15 685.81 L1328.71 685.81 L1329.27 685.81 L1329.83 685.81 L1330.39 685.81 L1330.95 685.81 L1331.51 685.81 L1332.07 685.81 L1332.63 685.81 L1333.19 685.81 L1333.75 685.81 L1334.3 685.81 L1334.86 685.81 L1335.42 685.81 L1335.98 685.81 L1336.54 685.81 L1337.1 685.81 L1337.66 685.81 L1338.22 685.81 L1338.78 685.81 L1339.34 685.81 L1339.9 685.81 L1340.46 685.81 L1341.02 685.81 L1341.57 685.81 L1342.13 685.81 L1342.69 685.81 L1343.25 685.81 L1343.81 685.81 L1344.37 685.81 L1344.93 685.81 L1345.49 685.81 L1346.05 685.81 L1346.61 685.81 L1347.17 685.81 L1347.73 685.81 L1348.29 685.81 L1348.84 685.81 L1349.4 685.81 L1349.96 685.81 L1350.52 685.81 L1351.08 685.81 L1351.64 685.81 L1352.2 685.81 L1352.76 685.81 L1353.32 685.81 L1353.88 685.81 L1354.44 685.81 L1355 685.81 L1355.56 685.81 L1356.12 685.81 L1356.67 685.81 L1357.23 685.81 L1357.79 685.81 L1358.35 685.81 L1358.91 685.81 L1359.47 685.81 L1360.03 685.81 L1360.59 685.81 L1361.15 685.81 L1361.71 685.81 L1362.27 685.81 L1362.83 685.81 L1363.39 685.81 L1363.94 685.81 L1364.5 685.81 L1365.06 685.81 L1365.62 685.81 L1366.18 685.81 L1366.74 685.81 L1367.3 685.81 L1367.86 685.81 L1368.42 685.81 L1368.98 685.81 L1369.54 685.81 L1370.1 685.81 L1370.66 685.81 L1371.21 685.81 L1371.77 685.81 L1372.33 685.81 L1372.89 685.81 L1373.45 685.81 L1374.01 685.81 L1374.57 685.81 L1375.13 685.81 L1375.69 685.81 L1376.25 685.81 L1376.81 685.81 L1377.37 685.81 L1377.93 685.81 L1378.49 685.81 L1379.04 685.81 L1379.6 685.81 L1380.16 685.81 L1380.72 685.81 L1381.28 685.81 L1381.84 685.81 L1382.4 685.81 L1382.96 685.81 L1383.52 685.81 L1384.08 685.81 L1384.64 685.81 L1385.2 685.81 L1385.76 685.81 L1386.31 685.81 L1386.87 685.81 L1387.43 685.81 L1387.99 685.81 L1388.55 685.81 L1389.11 685.81 L1389.67 685.81 L1390.23 685.81 L1390.79 685.81 L1391.35 685.81 L1391.91 685.81 L1392.47 685.81 L1393.03 685.81 L1393.58 685.81 L1394.14 685.81 L1394.7 685.81 L1395.26 685.81 L1395.82 685.81 L1396.38 685.81 L1396.94 685.81 L1397.5 685.81 L1398.06 685.81 L1398.62 685.81 L1399.18 685.81 L1399.74 685.81 L1400.3 685.81 L1400.86 685.81 L1401.41 685.81 L1401.97 685.81 L1402.53 685.81 L1403.09 685.81 L1403.65 685.81 L1404.21 685.81 L1404.77 685.81 L1405.33 685.81 L1405.89 685.81 L1406.45 685.81 L1407.01 685.81 L1407.57 685.81 L1408.13 685.81 L1408.68 685.81 L1409.24 685.81 L1409.8 685.81 L1410.36 685.81 L1410.92 685.81 L1411.48 685.81 L1412.04 685.81 L1412.6 685.81 L1413.16 685.81 L1413.72 685.81 L1414.28 685.81 L1414.84 685.81 L1415.4 685.81 L1415.95 685.81 L1416.51 685.81 L1417.07 685.81 L1417.63 685.81 L1418.19 685.81 L1418.75 685.81 L1419.31 685.81 L1419.87 685.81 L1420.43 685.81 L1420.99 685.81 L1421.55 685.81 L1422.11 685.81 L1422.67 685.81 L1423.23 685.81 L1423.78 685.81 L1424.34 685.81 L1424.9 685.81 L1425.46 685.81 L1426.02 685.81 L1426.58 685.81 L1427.14 685.81 L1427.7 685.81 L1428.26 685.81 L1428.82 685.81 L1429.38 685.81 L1429.94 685.81 L1430.5 685.81 L1431.05 685.81 L1431.61 685.81 L1432.17 685.81 L1432.73 685.81 L1433.29 685.81 L1433.85 685.81 L1434.41 685.81 L1434.97 685.81 L1435.53 685.81 L1436.09 685.81 L1436.65 685.81 L1437.21 685.81 L1437.77 685.81 L1438.33 685.81 L1438.88 685.81 L1439.44 685.81 L1440 685.81 L1440.56 685.81 L1441.12 685.81 L1441.68 685.81 L1442.24 685.81 L1442.8 685.81 L1443.36 685.81 L1443.92 685.81 L1444.48 685.81 L1445.04 685.81 L1445.6 685.81 L1446.15 685.81 L1446.71 685.81 L1447.27 685.81 L1447.83 685.81 L1448.39 685.81 L1448.95 685.81 L1449.51 685.81 L1450.07 685.81 L1450.63 685.81 L1451.19 685.81 L1451.75 685.81 L1452.31 685.81 L1452.87 685.81 L1453.42 685.81 L1453.98 685.81 L1454.54 685.81 L1455.1 685.81 L1455.66 685.81 L1456.22 685.81 L1456.78 685.81 L1457.34 685.81 L1457.9 685.81 L1458.46 685.81 L1459.02 685.81 L1459.58 685.81 L1460.14 685.81 L1460.7 685.81 L1461.25 685.81 L1461.81 685.81 L1462.37 685.81 L1462.93 685.81 L1463.49 685.81 L1464.05 685.81 L1464.61 685.81 L1465.17 685.81 L1465.73 685.81 L1466.29 685.81 L1466.85 685.81 L1467.41 685.81 L1467.97 685.81 L1468.52 685.81 L1469.08 685.81 L1469.64 685.81 L1470.2 685.81 L1470.76 685.81 L1471.32 685.81 L1471.88 685.81 L1472.44 685.81 L1473 685.81 L1473.56 685.81 L1474.12 685.81 L1474.68 685.81 L1475.24 685.81 L1475.79 685.81 L1476.35 685.81 L1476.91 685.81 L1477.47 685.81 L1478.03 685.81 L1478.59 685.81 L1479.15 685.81 L1479.71 685.81 L1480.27 685.81 L1480.83 685.81 L1481.39 685.81 L1481.95 685.81 L1482.51 685.81 L1483.07 685.81 L1483.62 685.81 L1484.18 685.81 L1484.74 685.81 L1485.3 685.81 L1485.86 685.81 L1486.42 685.81 L1486.98 685.81 L1487.54 685.81 L1488.1 685.81 L1488.66 685.81 L1489.22 685.81 L1489.78 685.81 L1490.34 685.81 L1490.89 685.81 L1491.45 685.81 L1492.01 685.81 L1492.57 685.81 L1493.13 685.81 L1493.69 685.81 L1494.25 685.81 L1494.81 685.81 L1495.37 685.81 L1495.93 685.81 L1496.49 685.81 L1497.05 685.81 L1497.61 685.81 L1498.16 685.81 L1498.72 685.81 L1499.28 685.81 L1499.84 685.81 L1500.4 685.81 L1500.96 685.81 L1501.52 685.81 L1502.08 685.81 L1502.64 685.81 L1503.2 685.81 L1503.76 685.81 L1504.32 685.81 L1504.88 685.81 L1505.44 685.81 L1505.99 685.81 L1506.55 685.81 L1507.11 685.81 L1507.67 685.81 L1508.23 685.81 L1508.79 685.81 L1509.35 685.81 L1509.91 685.81 L1510.47 685.81 L1511.03 685.81 L1511.59 685.81 L1512.15 685.81 L1512.71 685.81 L1513.26 685.81 L1513.82 685.81 L1514.38 685.81 L1514.94 685.81 L1515.5 685.81 L1516.06 685.81 L1516.62 685.81 L1517.18 685.81 L1517.74 685.81 L1518.3 685.81 L1518.86 685.81 L1519.42 685.81 L1519.98 685.81 L1520.53 685.81 L1521.09 685.81 L1521.65 685.81 L1522.21 685.81 L1522.77 685.81 L1523.33 685.81 L1523.89 685.81 L1524.45 685.81 L1525.01 685.81 L1525.57 685.81 L1526.13 685.81 L1526.69 685.81 L1527.25 685.81 L1527.81 685.81 L1528.36 685.81 L1528.92 685.81 L1529.48 685.81 L1530.04 685.81 L1530.6 685.81 L1531.16 685.81 L1531.72 685.81 L1532.28 685.81 L1532.84 685.81 L1533.4 685.81 L1533.96 685.81 L1534.52 685.81 L1535.08 685.81 L1535.63 685.81 L1536.19 685.81 L1536.75 685.81 L1537.31 685.81 L1537.87 685.81 L1538.43 685.81 L1538.99 685.81 L1539.55 685.81 L1540.11 685.81 L1540.67 685.81 L1541.23 685.81 L1541.79 685.81 L1542.35 685.81 L1542.9 685.81 L1543.46 685.81 L1544.02 685.81 L1544.58 685.81 L1545.14 685.81 L1545.7 685.81 L1546.26 685.81 L1546.82 685.81 L1547.38 685.81 L1547.94 685.81 L1548.5 685.81 L1549.06 685.81 L1549.62 685.81 L1550.18 685.81 L1550.73 685.81 L1551.29 685.81 L1551.85 685.81 L1552.41 685.81 L1552.97 685.81 L1553.53 685.81 L1554.09 685.81 L1554.65 685.81 L1555.21 685.81 L1555.77 685.81 L1556.33 685.81 L1556.89 685.81 L1557.45 685.81 L1558 685.81 L1558.56 685.81 L1559.12 685.81 L1559.68 685.81 L1560.24 685.81 L1560.8 685.81 L1561.36 685.81 L1561.92 685.81 L1562.48 685.81 L1563.04 685.81 L1563.6 685.81 L1564.16 685.81 L1564.72 685.81 L1565.28 685.81 L1565.83 685.81 L1566.39 685.81 L1566.95 685.81 L1567.51 685.81 L1568.07 685.81 L1568.63 685.81 L1569.19 685.81 L1569.75 685.81 L1570.31 685.81 L1570.87 685.81 L1571.43 685.81 L1571.99 685.81 L1572.55 685.81 L1573.1 685.81 L1573.66 685.81 L1574.22 685.81 L1574.78 685.81 L1575.34 685.81 L1575.9 685.81 L1576.46 685.81 L1577.02 685.81 L1577.58 685.81 L1578.14 685.81 L1578.7 685.81 L1579.26 685.81 L1579.82 685.81 L1580.37 685.81 L1580.93 685.81 L1581.49 685.81 L1582.05 685.81 L1582.61 685.81 L1583.17 685.81 L1583.73 685.81 L1584.29 685.81 L1584.85 685.81 L1585.41 685.81 L1585.97 685.81 L1586.53 685.81 L1587.09 685.81 L1587.65 685.81 L1588.2 685.81 L1588.76 685.81 L1589.32 685.81 L1589.88 685.81 L1590.44 685.81 L1591 685.81 L1591.56 685.81 L1592.12 685.81 L1592.68 685.81 L1593.24 685.81 L1593.8 685.81 L1594.36 685.81 L1594.92 685.81 L1595.47 685.81 L1596.03 685.81 L1596.59 685.81 L1597.15 685.81 L1597.71 685.81 L1598.27 685.81 L1598.83 685.81 L1599.39 685.81 L1599.95 685.81 L1600.51 685.81 L1601.07 685.81 L1601.63 685.81 L1602.19 685.81 L1602.74 685.81 L1603.3 685.81 L1603.86 685.81 L1604.42 685.81 L1604.98 685.81 L1605.54 685.81 L1606.1 685.81 L1606.66 685.81 L1607.22 685.81 L1607.78 685.81 L1608.34 685.81 L1608.9 685.81 L1609.46 685.81 L1610.02 685.81 L1610.57 685.81 L1611.13 685.81 L1611.69 685.81 L1612.25 685.81 L1612.81 685.81 L1613.37 685.81 L1613.93 685.81 L1614.49 685.81 L1615.05 685.81 L1615.61 685.81 L1616.17 685.81 L1616.73 685.81 L1617.29 685.81 L1617.84 685.81 L1618.4 685.81 L1618.96 685.81 L1619.52 685.81 L1620.08 685.81 L1620.64 685.81 L1621.2 685.81 L1621.76 685.81 L1622.32 685.81 L1622.88 685.81 L1623.44 685.81 L1624 685.81 L1624.56 685.81 L1625.11 685.81 L1625.67 685.81 L1626.23 685.81 L1626.79 685.81 L1627.35 685.81 L1627.91 685.81 L1628.47 685.81 L1629.03 685.81 L1629.59 685.81 L1630.15 685.81 L1630.71 685.81 L1631.27 685.81 L1631.83 685.81 L1632.39 685.81 L1632.94 685.81 L1633.5 685.81 L1634.06 685.81 L1634.62 685.81 L1635.18 685.81 L1635.74 685.81 L1636.3 685.81 L1636.86 685.81 L1637.42 685.81 L1637.98 685.81 L1638.54 685.81 L1639.1 685.81 L1639.66 685.81 L1640.21 685.81 L1640.77 685.81 L1641.33 685.81 L1641.89 685.81 L1642.45 685.81 L1643.01 685.81 L1643.57 685.81 L1644.13 685.81 L1644.69 685.81 L1645.25 685.81 L1645.81 685.81 L1646.37 685.81 L1646.93 685.81 L1647.48 685.81 L1648.04 685.81 L1648.6 685.81 L1649.16 685.81 L1649.72 685.81 L1650.28 685.81 L1650.84 685.81 L1651.4 685.81 L1651.96 685.81 L1652.52 685.81 L1653.08 685.81 L1653.64 685.81 L1654.2 685.81 L1654.76 685.81 L1655.31 685.81 L1655.87 685.81 L1656.43 685.81 L1656.99 685.81 L1657.55 685.81 L1658.11 685.81 L1658.67 685.81 L1659.23 685.81 L1659.79 685.81 L1660.35 685.81 L1660.91 685.81 L1661.47 685.81 L1662.03 685.81 L1662.58 685.81 L1663.14 685.81 L1663.7 685.81 L1664.26 685.81 L1664.82 685.81 L1665.38 685.81 L1665.94 685.81 L1666.5 685.81 L1667.06 685.81 L1667.62 685.81 L1668.18 685.81 L1668.74 685.81 L1669.3 685.81 L1669.85 685.81 L1670.41 685.81 L1670.97 685.81 L1671.53 685.81 L1672.09 685.81 L1672.65 685.81 L1673.21 685.81 L1673.77 685.81 L1674.33 685.81 L1674.89 685.81 L1675.45 685.81 L1676.01 685.81 L1676.57 685.81 L1677.13 685.81 L1677.68 685.81 L1678.24 685.81 L1678.8 685.81 L1679.36 685.81 L1679.92 685.81 L1680.48 685.81 L1681.04 685.81 L1681.6 685.81 L1682.16 685.81 L1682.72 685.81 L1683.28 685.81 L1683.84 685.81 L1684.4 685.81 L1684.95 685.81 L1685.51 685.81 L1686.07 685.81 L1686.63 685.81 L1687.19 685.81 L1687.75 685.81 L1688.31 685.81 L1688.87 685.81 L1689.43 685.81 L1689.99 685.81 L1690.55 685.81 L1691.11 685.81 L1691.67 685.81 L1692.23 685.81 L1692.78 685.81 L1693.34 685.81 L1693.9 685.81 L1694.46 685.81 L1695.02 685.81 L1695.58 685.81 L1696.14 685.81 L1696.7 685.81 L1697.26 685.81 L1697.82 685.81 L1698.38 685.81 L1698.94 685.81 L1699.5 685.81 L1700.05 685.81 L1700.61 685.81 L1701.17 685.81 L1701.73 685.81 L1702.29 685.81 L1702.85 685.81 L1703.41 685.81 L1703.97 685.81 L1704.53 685.81 L1705.09 685.81 L1705.65 685.81 L1706.21 685.81 L1706.77 685.81 L1707.32 685.81 L1707.88 685.81 L1708.44 685.81 L1709 685.81 L1709.56 685.81 L1710.12 685.81 L1710.68 685.81 L1711.24 685.81 L1711.8 685.81 L1712.36 685.81 L1712.92 685.81 L1713.48 685.81 L1714.04 685.81 L1714.6 685.81 L1715.15 685.81 L1715.71 685.81 L1716.27 685.81 L1716.83 685.81 L1717.39 685.81 L1717.95 685.81 L1718.51 685.81 L1719.07 685.81 L1719.63 685.81 L1720.19 685.81 L1720.75 685.81 L1721.31 685.81 L1721.87 685.81 L1722.42 685.81 L1722.98 685.81 L1723.54 685.81 L1724.1 685.81 L1724.66 685.81 L1725.22 685.81 L1725.78 685.81 L1726.34 685.81 L1726.9 685.81 L1727.46 685.81 L1728.02 685.81 L1728.58 685.81 L1729.14 685.81 L1729.69 685.81 L1730.25 685.81 L1730.81 685.81 L1731.37 685.81 L1731.93 685.81 L1732.49 685.81 L1733.05 685.81 L1733.61 685.81 L1734.17 685.81 L1734.73 685.81 L1735.29 685.81 L1735.85 685.81 L1736.41 685.81 L1736.97 685.81 L1737.52 685.81 L1738.08 685.81 L1738.64 685.81 L1739.2 685.81 L1739.76 685.81 L1740.32 685.81 L1740.88 685.81 L1741.44 685.81 L1742 685.81 L1742.56 685.81 L1743.12 685.81 L1743.68 685.81 L1744.24 685.81 L1744.79 685.81 L1745.35 685.81 L1745.91 685.81 L1746.47 685.81 L1747.03 685.81 L1747.59 685.81 L1748.15 685.81 L1748.71 685.81 L1749.27 685.81 L1749.83 685.81 L1750.39 685.81 L1750.95 685.81 L1751.51 685.81 L1752.06 685.81 L1752.62 685.81 L1753.18 685.81 L1753.74 685.81 L1754.3 685.81 L1754.86 685.81 L1755.42 685.81 L1755.98 685.81 L1756.54 685.81 L1757.1 685.81 L1757.66 685.81 L1758.22 685.81 L1758.78 685.81 L1759.34 685.81 L1759.89 685.81 L1760.45 685.81 L1761.01 685.81 L1761.57 685.81 L1762.13 685.81 L1762.69 685.81 L1763.25 685.81 L1763.81 685.81 L1764.37 685.81 L1764.93 685.81 L1765.49 685.81 L1766.05 685.81 L1766.61 685.81 L1767.16 685.81 L1767.72 685.81 L1768.28 685.81 L1768.84 685.81 L1769.4 685.81 L1769.96 685.81 L1770.52 685.81 L1771.08 685.81 L1771.64 685.81 L1772.2 685.81 L1772.76 685.81 L1773.32 685.81 L1773.88 685.81 L1774.43 685.81 L1774.99 685.81 L1775.55 685.81 L1776.11 685.81 L1776.67 685.81 L1777.23 685.81 L1777.79 685.81 L1778.35 685.81 L1778.91 685.81 L1779.47 685.81 L1780.03 685.81 L1780.59 685.81 L1781.15 685.81 L1781.71 685.81 L1782.26 685.81 L1782.82 685.81 L1783.38 685.81 L1783.94 685.81 L1784.5 685.81 L1785.06 685.81 L1785.62 685.81 L1786.18 685.81 L1786.74 685.81 L1787.3 685.81 L1787.86 685.81 L1788.42 685.81 L1788.98 685.81 L1789.53 685.81 L1790.09 685.81 L1790.65 685.81 L1791.21 685.81 L1791.77 685.81 L1792.33 685.81 L1792.89 685.81 L1793.45 685.81 L1794.01 685.81 L1794.57 685.81 L1795.13 685.81 L1795.69 685.81 L1796.25 685.81 L1796.8 685.81 L1797.36 685.81 L1797.92 685.81 L1798.48 685.81 L1799.04 685.81 L1799.6 685.81 L1800.16 685.81 L1800.72 685.81 L1801.28 685.81 L1801.84 685.81 L1802.4 685.81 L1802.96 685.81 L1803.52 685.81 L1804.08 685.81 L1804.63 685.81 L1805.19 685.81 L1805.75 685.81 L1806.31 685.81 L1806.87 685.81 L1807.43 685.81 L1807.99 685.81 L1808.55 685.81 L1809.11 685.81 L1809.67 685.81 L1810.23 685.81 L1810.79 685.81 L1811.35 685.81 L1811.9 685.81 L1812.46 685.81 L1813.02 685.81 L1813.58 685.81 L1814.14 685.81 L1814.7 685.81 L1815.26 685.81 L1815.82 685.81 L1816.38 685.81 L1816.94 685.81 L1817.5 685.81 L1818.06 685.81 L1818.62 685.81 L1819.18 685.81 L1819.73 685.81 L1820.29 685.81 L1820.85 685.81 L1821.41 685.81 L1821.97 685.81 L1822.53 685.81 L1823.09 685.81 L1823.65 685.81 L1824.21 685.81 L1824.77 685.81 L1825.33 685.81 L1825.89 685.81 L1826.45 685.81 L1827 685.81 L1827.56 685.81 L1828.12 685.81 L1828.68 685.81 L1829.24 685.81 L1829.8 685.81 L1830.36 685.81 L1830.92 685.81 L1831.48 685.81 L1832.04 685.81 L1832.6 685.81 L1833.16 685.81 L1833.72 685.81 L1834.27 685.81 L1834.83 685.81 L1835.39 685.81 L1835.95 685.81 L1836.51 685.81 L1837.07 685.81 L1837.63 685.81 L1838.19 685.81 L1838.19 683.384 L1837.63 683.384 L1837.07 683.384 L1836.51 683.384 L1835.95 683.384 L1835.39 683.384 L1834.83 683.384 L1834.27 683.384 L1833.72 683.384 L1833.16 683.384 L1832.6 683.384 L1832.04 683.384 L1831.48 683.384 L1830.92 683.384 L1830.36 683.384 L1829.8 683.384 L1829.24 683.384 L1828.68 683.384 L1828.12 683.384 L1827.56 683.384 L1827 683.384 L1826.45 683.384 L1825.89 683.384 L1825.33 683.384 L1824.77 683.384 L1824.21 683.384 L1823.65 683.384 L1823.09 683.384 L1822.53 683.384 L1821.97 683.384 L1821.41 683.384 L1820.85 683.384 L1820.29 683.384 L1819.73 683.384 L1819.18 683.384 L1818.62 683.384 L1818.06 683.384 L1817.5 683.384 L1816.94 683.384 L1816.38 683.384 L1815.82 683.384 L1815.26 683.384 L1814.7 683.384 L1814.14 683.384 L1813.58 683.384 L1813.02 683.384 L1812.46 683.384 L1811.9 683.384 L1811.35 683.384 L1810.79 683.384 L1810.23 683.384 L1809.67 683.384 L1809.11 683.384 L1808.55 683.384 L1807.99 683.384 L1807.43 683.384 L1806.87 683.384 L1806.31 683.384 L1805.75 683.384 L1805.19 683.384 L1804.63 683.384 L1804.08 683.384 L1803.52 683.384 L1802.96 683.384 L1802.4 683.384 L1801.84 683.384 L1801.28 683.384 L1800.72 683.384 L1800.16 683.384 L1799.6 683.384 L1799.04 683.384 L1798.48 683.384 L1797.92 683.384 L1797.36 683.384 L1796.8 683.384 L1796.25 683.384 L1795.69 683.384 L1795.13 683.384 L1794.57 683.384 L1794.01 683.384 L1793.45 683.384 L1792.89 683.384 L1792.33 683.384 L1791.77 683.384 L1791.21 683.384 L1790.65 683.384 L1790.09 683.384 L1789.53 683.384 L1788.98 683.384 L1788.42 683.384 L1787.86 683.384 L1787.3 683.384 L1786.74 683.384 L1786.18 683.384 L1785.62 683.384 L1785.06 683.384 L1784.5 683.384 L1783.94 683.384 L1783.38 683.384 L1782.82 683.384 L1782.26 683.384 L1781.71 683.384 L1781.15 683.384 L1780.59 683.384 L1780.03 683.384 L1779.47 683.384 L1778.91 683.384 L1778.35 683.384 L1777.79 683.384 L1777.23 683.384 L1776.67 683.384 L1776.11 683.384 L1775.55 683.384 L1774.99 683.384 L1774.43 683.384 L1773.88 683.384 L1773.32 683.384 L1772.76 683.384 L1772.2 683.384 L1771.64 683.384 L1771.08 683.384 L1770.52 683.384 L1769.96 683.384 L1769.4 683.384 L1768.84 683.384 L1768.28 683.384 L1767.72 683.384 L1767.16 683.384 L1766.61 683.384 L1766.05 683.384 L1765.49 683.384 L1764.93 683.384 L1764.37 683.384 L1763.81 683.384 L1763.25 683.384 L1762.69 683.384 L1762.13 683.384 L1761.57 683.384 L1761.01 683.384 L1760.45 683.384 L1759.89 683.384 L1759.34 683.384 L1758.78 683.384 L1758.22 683.384 L1757.66 683.384 L1757.1 683.384 L1756.54 683.384 L1755.98 683.384 L1755.42 683.384 L1754.86 683.384 L1754.3 683.384 L1753.74 683.384 L1753.18 683.384 L1752.62 683.384 L1752.06 683.384 L1751.51 683.384 L1750.95 683.384 L1750.39 683.384 L1749.83 683.384 L1749.27 683.384 L1748.71 683.384 L1748.15 683.384 L1747.59 683.384 L1747.03 683.384 L1746.47 683.384 L1745.91 683.384 L1745.35 683.384 L1744.79 683.384 L1744.24 683.384 L1743.68 683.384 L1743.12 683.384 L1742.56 683.384 L1742 683.384 L1741.44 683.384 L1740.88 683.384 L1740.32 683.384 L1739.76 683.384 L1739.2 683.384 L1738.64 683.384 L1738.08 683.384 L1737.52 683.384 L1736.97 683.384 L1736.41 683.384 L1735.85 683.384 L1735.29 683.384 L1734.73 683.384 L1734.17 683.384 L1733.61 683.384 L1733.05 683.384 L1732.49 683.384 L1731.93 683.384 L1731.37 683.384 L1730.81 683.384 L1730.25 683.384 L1729.69 683.384 L1729.14 683.384 L1728.58 683.384 L1728.02 683.384 L1727.46 683.384 L1726.9 683.384 L1726.34 683.384 L1725.78 683.384 L1725.22 683.384 L1724.66 683.384 L1724.1 683.384 L1723.54 683.384 L1722.98 683.384 L1722.42 683.384 L1721.87 683.384 L1721.31 683.384 L1720.75 683.384 L1720.19 683.384 L1719.63 683.384 L1719.07 683.384 L1718.51 683.384 L1717.95 683.384 L1717.39 683.384 L1716.83 683.384 L1716.27 683.384 L1715.71 683.384 L1715.15 683.384 L1714.6 683.384 L1714.04 683.384 L1713.48 683.384 L1712.92 683.384 L1712.36 683.384 L1711.8 683.384 L1711.24 683.384 L1710.68 683.384 L1710.12 683.384 L1709.56 683.384 L1709 683.384 L1708.44 683.384 L1707.88 683.384 L1707.32 683.384 L1706.77 683.384 L1706.21 683.384 L1705.65 683.384 L1705.09 683.384 L1704.53 683.384 L1703.97 683.384 L1703.41 683.384 L1702.85 683.384 L1702.29 683.384 L1701.73 683.384 L1701.17 683.384 L1700.61 683.384 L1700.05 683.384 L1699.5 683.384 L1698.94 683.384 L1698.38 683.384 L1697.82 683.384 L1697.26 683.384 L1696.7 683.384 L1696.14 683.384 L1695.58 683.384 L1695.02 683.384 L1694.46 683.384 L1693.9 683.384 L1693.34 683.384 L1692.78 683.384 L1692.23 683.384 L1691.67 683.384 L1691.11 683.384 L1690.55 683.384 L1689.99 683.384 L1689.43 683.384 L1688.87 683.384 L1688.31 683.384 L1687.75 683.384 L1687.19 683.384 L1686.63 683.384 L1686.07 683.384 L1685.51 683.384 L1684.95 683.384 L1684.4 683.384 L1683.84 683.384 L1683.28 683.384 L1682.72 683.384 L1682.16 683.384 L1681.6 683.384 L1681.04 683.384 L1680.48 683.384 L1679.92 683.384 L1679.36 683.384 L1678.8 683.384 L1678.24 683.384 L1677.68 683.384 L1677.13 683.384 L1676.57 683.384 L1676.01 683.384 L1675.45 683.384 L1674.89 683.384 L1674.33 683.384 L1673.77 683.384 L1673.21 683.384 L1672.65 683.384 L1672.09 683.384 L1671.53 683.384 L1670.97 683.384 L1670.41 683.384 L1669.85 683.384 L1669.3 683.384 L1668.74 683.384 L1668.18 683.384 L1667.62 683.384 L1667.06 683.384 L1666.5 683.384 L1665.94 683.384 L1665.38 683.384 L1664.82 683.384 L1664.26 683.384 L1663.7 683.384 L1663.14 683.384 L1662.58 683.384 L1662.03 683.384 L1661.47 683.384 L1660.91 683.384 L1660.35 683.384 L1659.79 683.384 L1659.23 683.384 L1658.67 683.384 L1658.11 683.384 L1657.55 683.384 L1656.99 683.384 L1656.43 683.384 L1655.87 683.384 L1655.31 683.384 L1654.76 683.384 L1654.2 683.384 L1653.64 683.384 L1653.08 683.384 L1652.52 683.384 L1651.96 683.384 L1651.4 683.384 L1650.84 683.384 L1650.28 683.384 L1649.72 683.384 L1649.16 683.384 L1648.6 683.384 L1648.04 683.384 L1647.48 683.384 L1646.93 683.384 L1646.37 683.384 L1645.81 683.384 L1645.25 683.384 L1644.69 683.384 L1644.13 683.384 L1643.57 683.384 L1643.01 683.384 L1642.45 683.384 L1641.89 683.384 L1641.33 683.384 L1640.77 683.384 L1640.21 683.384 L1639.66 683.384 L1639.1 683.384 L1638.54 683.384 L1637.98 683.384 L1637.42 683.384 L1636.86 683.384 L1636.3 683.384 L1635.74 683.384 L1635.18 683.384 L1634.62 683.384 L1634.06 683.384 L1633.5 683.384 L1632.94 683.384 L1632.39 683.384 L1631.83 683.384 L1631.27 683.384 L1630.71 683.384 L1630.15 683.384 L1629.59 683.384 L1629.03 683.384 L1628.47 683.384 L1627.91 683.384 L1627.35 683.384 L1626.79 683.384 L1626.23 683.384 L1625.67 683.384 L1625.11 683.384 L1624.56 683.384 L1624 683.384 L1623.44 683.384 L1622.88 683.384 L1622.32 683.384 L1621.76 683.384 L1621.2 683.384 L1620.64 683.384 L1620.08 683.384 L1619.52 683.384 L1618.96 683.384 L1618.4 683.384 L1617.84 683.384 L1617.29 683.384 L1616.73 683.384 L1616.17 683.384 L1615.61 683.384 L1615.05 683.384 L1614.49 683.384 L1613.93 683.384 L1613.37 683.384 L1612.81 683.384 L1612.25 683.384 L1611.69 683.384 L1611.13 683.384 L1610.57 683.384 L1610.02 683.384 L1609.46 683.384 L1608.9 683.384 L1608.34 683.384 L1607.78 683.384 L1607.22 683.384 L1606.66 683.384 L1606.1 683.384 L1605.54 683.384 L1604.98 683.384 L1604.42 683.384 L1603.86 683.384 L1603.3 683.384 L1602.74 683.384 L1602.19 683.384 L1601.63 683.384 L1601.07 683.384 L1600.51 683.384 L1599.95 683.384 L1599.39 683.384 L1598.83 683.384 L1598.27 683.384 L1597.71 683.384 L1597.15 683.384 L1596.59 683.384 L1596.03 683.384 L1595.47 683.384 L1594.92 683.384 L1594.36 683.384 L1593.8 683.384 L1593.24 683.384 L1592.68 683.384 L1592.12 683.384 L1591.56 683.384 L1591 683.384 L1590.44 683.384 L1589.88 683.384 L1589.32 683.384 L1588.76 683.384 L1588.2 683.384 L1587.65 683.384 L1587.09 683.384 L1586.53 683.384 L1585.97 683.384 L1585.41 683.384 L1584.85 683.384 L1584.29 683.384 L1583.73 683.384 L1583.17 683.384 L1582.61 683.384 L1582.05 683.384 L1581.49 683.384 L1580.93 683.384 L1580.37 683.384 L1579.82 683.384 L1579.26 683.384 L1578.7 683.384 L1578.14 683.384 L1577.58 683.384 L1577.02 683.384 L1576.46 683.384 L1575.9 683.384 L1575.34 683.384 L1574.78 683.384 L1574.22 683.384 L1573.66 683.384 L1573.1 683.384 L1572.55 683.384 L1571.99 683.384 L1571.43 683.384 L1570.87 683.384 L1570.31 683.384 L1569.75 683.384 L1569.19 683.384 L1568.63 683.384 L1568.07 683.384 L1567.51 683.384 L1566.95 683.384 L1566.39 683.384 L1565.83 683.384 L1565.28 683.384 L1564.72 683.384 L1564.16 683.384 L1563.6 683.384 L1563.04 683.384 L1562.48 683.384 L1561.92 683.384 L1561.36 683.384 L1560.8 683.384 L1560.24 683.384 L1559.68 683.384 L1559.12 683.384 L1558.56 683.384 L1558 683.384 L1557.45 683.384 L1556.89 683.384 L1556.33 683.384 L1555.77 683.384 L1555.21 683.384 L1554.65 683.384 L1554.09 683.384 L1553.53 683.384 L1552.97 683.384 L1552.41 683.384 L1551.85 683.384 L1551.29 683.384 L1550.73 683.384 L1550.18 683.384 L1549.62 683.384 L1549.06 683.384 L1548.5 683.384 L1547.94 683.384 L1547.38 683.384 L1546.82 683.384 L1546.26 683.384 L1545.7 683.384 L1545.14 683.384 L1544.58 683.384 L1544.02 683.384 L1543.46 683.384 L1542.9 683.384 L1542.35 683.384 L1541.79 683.384 L1541.23 683.384 L1540.67 683.384 L1540.11 683.384 L1539.55 683.384 L1538.99 683.384 L1538.43 683.384 L1537.87 683.384 L1537.31 683.384 L1536.75 683.384 L1536.19 683.384 L1535.63 683.384 L1535.08 683.384 L1534.52 683.384 L1533.96 683.384 L1533.4 683.384 L1532.84 683.384 L1532.28 683.384 L1531.72 683.384 L1531.16 683.384 L1530.6 683.384 L1530.04 683.384 L1529.48 683.384 L1528.92 683.384 L1528.36 683.384 L1527.81 683.384 L1527.25 683.384 L1526.69 683.384 L1526.13 683.384 L1525.57 683.384 L1525.01 683.384 L1524.45 683.384 L1523.89 683.384 L1523.33 683.384 L1522.77 683.384 L1522.21 683.384 L1521.65 683.384 L1521.09 683.384 L1520.53 683.384 L1519.98 683.384 L1519.42 683.384 L1518.86 683.384 L1518.3 683.384 L1517.74 683.384 L1517.18 683.384 L1516.62 683.384 L1516.06 683.384 L1515.5 683.384 L1514.94 683.384 L1514.38 683.384 L1513.82 683.384 L1513.26 683.384 L1512.71 683.384 L1512.15 683.384 L1511.59 683.384 L1511.03 683.384 L1510.47 683.384 L1509.91 683.384 L1509.35 683.384 L1508.79 683.384 L1508.23 683.384 L1507.67 683.384 L1507.11 683.384 L1506.55 683.384 L1505.99 683.384 L1505.44 683.384 L1504.88 683.384 L1504.32 683.384 L1503.76 683.384 L1503.2 683.384 L1502.64 683.384 L1502.08 683.384 L1501.52 683.384 L1500.96 683.384 L1500.4 683.384 L1499.84 683.384 L1499.28 683.384 L1498.72 683.384 L1498.16 683.384 L1497.61 683.384 L1497.05 683.384 L1496.49 683.384 L1495.93 683.384 L1495.37 683.384 L1494.81 683.384 L1494.25 683.384 L1493.69 683.384 L1493.13 683.384 L1492.57 683.384 L1492.01 683.384 L1491.45 683.384 L1490.89 683.384 L1490.34 683.384 L1489.78 683.384 L1489.22 683.384 L1488.66 683.384 L1488.1 683.384 L1487.54 683.384 L1486.98 683.384 L1486.42 683.384 L1485.86 683.384 L1485.3 683.384 L1484.74 683.384 L1484.18 683.384 L1483.62 683.384 L1483.07 683.384 L1482.51 683.384 L1481.95 683.384 L1481.39 683.384 L1480.83 683.384 L1480.27 683.384 L1479.71 683.384 L1479.15 683.384 L1478.59 683.384 L1478.03 683.384 L1477.47 683.384 L1476.91 683.384 L1476.35 683.384 L1475.79 683.384 L1475.24 683.384 L1474.68 683.384 L1474.12 683.384 L1473.56 683.384 L1473 683.384 L1472.44 683.384 L1471.88 683.384 L1471.32 683.384 L1470.76 683.384 L1470.2 683.384 L1469.64 683.384 L1469.08 683.384 L1468.52 683.384 L1467.97 683.384 L1467.41 683.384 L1466.85 683.384 L1466.29 683.384 L1465.73 683.384 L1465.17 683.384 L1464.61 683.384 L1464.05 683.384 L1463.49 683.384 L1462.93 683.384 L1462.37 683.384 L1461.81 683.384 L1461.25 683.384 L1460.7 683.384 L1460.14 683.384 L1459.58 683.384 L1459.02 683.384 L1458.46 683.384 L1457.9 683.384 L1457.34 683.384 L1456.78 683.384 L1456.22 683.384 L1455.66 683.384 L1455.1 683.384 L1454.54 683.384 L1453.98 683.384 L1453.42 683.384 L1452.87 683.384 L1452.31 683.384 L1451.75 683.384 L1451.19 683.384 L1450.63 683.384 L1450.07 683.384 L1449.51 683.384 L1448.95 683.384 L1448.39 683.384 L1447.83 683.384 L1447.27 683.384 L1446.71 683.384 L1446.15 683.384 L1445.6 683.384 L1445.04 683.384 L1444.48 683.384 L1443.92 683.384 L1443.36 683.384 L1442.8 683.384 L1442.24 683.384 L1441.68 683.384 L1441.12 683.384 L1440.56 683.384 L1440 683.384 L1439.44 683.384 L1438.88 683.384 L1438.33 683.384 L1437.77 683.384 L1437.21 683.384 L1436.65 683.384 L1436.09 683.384 L1435.53 683.384 L1434.97 683.384 L1434.41 683.384 L1433.85 683.384 L1433.29 683.384 L1432.73 683.384 L1432.17 683.384 L1431.61 683.384 L1431.05 683.384 L1430.5 683.384 L1429.94 683.384 L1429.38 683.384 L1428.82 683.384 L1428.26 683.384 L1427.7 683.384 L1427.14 683.384 L1426.58 683.384 L1426.02 683.384 L1425.46 683.384 L1424.9 683.384 L1424.34 683.384 L1423.78 683.384 L1423.23 683.384 L1422.67 683.384 L1422.11 683.384 L1421.55 683.384 L1420.99 683.384 L1420.43 683.384 L1419.87 683.384 L1419.31 683.384 L1418.75 683.384 L1418.19 683.384 L1417.63 683.384 L1417.07 683.384 L1416.51 683.384 L1415.95 683.384 L1415.4 683.384 L1414.84 683.384 L1414.28 683.384 L1413.72 683.384 L1413.16 683.384 L1412.6 683.384 L1412.04 683.384 L1411.48 683.384 L1410.92 683.384 L1410.36 683.384 L1409.8 683.384 L1409.24 683.384 L1408.68 683.384 L1408.13 683.384 L1407.57 683.384 L1407.01 683.384 L1406.45 683.384 L1405.89 683.384 L1405.33 683.384 L1404.77 683.384 L1404.21 683.384 L1403.65 683.384 L1403.09 683.384 L1402.53 683.384 L1401.97 683.384 L1401.41 683.384 L1400.86 683.384 L1400.3 683.384 L1399.74 683.384 L1399.18 683.384 L1398.62 683.384 L1398.06 683.384 L1397.5 683.384 L1396.94 683.384 L1396.38 683.384 L1395.82 683.384 L1395.26 683.384 L1394.7 683.384 L1394.14 683.384 L1393.58 683.384 L1393.03 683.384 L1392.47 683.384 L1391.91 683.384 L1391.35 683.384 L1390.79 683.384 L1390.23 683.384 L1389.67 683.384 L1389.11 683.384 L1388.55 683.384 L1387.99 683.384 L1387.43 683.384 L1386.87 683.384 L1386.31 683.384 L1385.76 683.384 L1385.2 683.384 L1384.64 683.384 L1384.08 683.384 L1383.52 683.384 L1382.96 683.384 L1382.4 683.384 L1381.84 683.384 L1381.28 683.384 L1380.72 683.384 L1380.16 683.384 L1379.6 683.384 L1379.04 683.384 L1378.49 683.384 L1377.93 683.384 L1377.37 683.384 L1376.81 683.384 L1376.25 683.384 L1375.69 683.384 L1375.13 683.384 L1374.57 683.384 L1374.01 683.384 L1373.45 683.384 L1372.89 683.384 L1372.33 683.384 L1371.77 683.384 L1371.21 683.384 L1370.66 683.384 L1370.1 683.384 L1369.54 683.384 L1368.98 683.384 L1368.42 683.384 L1367.86 683.384 L1367.3 683.384 L1366.74 683.384 L1366.18 683.384 L1365.62 683.384 L1365.06 683.384 L1364.5 683.384 L1363.94 683.384 L1363.39 683.384 L1362.83 683.384 L1362.27 683.384 L1361.71 683.384 L1361.15 683.384 L1360.59 683.384 L1360.03 683.384 L1359.47 683.384 L1358.91 683.384 L1358.35 683.384 L1357.79 683.384 L1357.23 683.384 L1356.67 683.384 L1356.12 683.384 L1355.56 683.384 L1355 683.384 L1354.44 683.384 L1353.88 683.384 L1353.32 683.384 L1352.76 683.384 L1352.2 683.384 L1351.64 683.384 L1351.08 683.384 L1350.52 683.384 L1349.96 683.384 L1349.4 683.384 L1348.84 683.384 L1348.29 683.384 L1347.73 683.384 L1347.17 683.384 L1346.61 683.384 L1346.05 683.384 L1345.49 683.384 L1344.93 683.384 L1344.37 683.384 L1343.81 683.384 L1343.25 683.384 L1342.69 683.384 L1342.13 683.384 L1341.57 683.384 L1341.02 683.384 L1340.46 683.384 L1339.9 683.384 L1339.34 683.384 L1338.78 683.384 L1338.22 683.384 L1337.66 683.384 L1337.1 683.384 L1336.54 683.384 L1335.98 683.384 L1335.42 683.384 L1334.86 683.384 L1334.3 683.384 L1333.75 683.384 L1333.19 683.384 L1332.63 683.384 L1332.07 683.384 L1331.51 683.384 L1330.95 683.384 L1330.39 683.384 L1329.83 683.384 L1329.27 683.384 L1328.71 683.384 L1328.15 683.384 L1327.59 683.384 L1327.03 683.384 L1326.47 683.384 L1325.92 683.384 L1325.36 683.384 L1324.8 683.384 L1324.24 683.384 L1323.68 683.384 L1323.12 683.384 L1322.56 683.384 L1322 683.384 L1321.44 683.384 L1320.88 683.384 L1320.32 683.384 L1319.76 683.384 L1319.2 683.384 L1318.65 683.384 L1318.09 683.384 L1317.53 683.384 L1316.97 683.384 L1316.41 683.384 L1315.85 683.384 L1315.29 683.384 L1314.73 683.384 L1314.17 683.384 L1313.61 683.384 L1313.05 683.384 L1312.49 683.384 L1311.93 683.384 L1311.38 683.384 L1310.82 683.384 L1310.26 683.384 L1309.7 683.384 L1309.14 683.384 L1308.58 683.384 L1308.02 683.384 L1307.46 683.384 L1306.9 683.384 L1306.34 683.384 L1305.78 683.384 L1305.22 683.384 L1304.66 683.384 L1304.1 683.384 L1303.55 683.384 L1302.99 683.384 L1302.43 683.384 L1301.87 683.384 L1301.31 683.384 L1300.75 683.384 L1300.19 683.384 L1299.63 683.384 L1299.07 683.384 L1298.51 683.384 L1297.95 683.384 L1297.39 683.384 L1296.83 683.384 L1296.28 683.384 L1295.72 683.384 L1295.16 683.384 L1294.6 683.384 L1294.04 683.384 L1293.48 683.384 L1292.92 683.384 L1292.36 683.384 L1291.8 683.384 L1291.24 683.384 L1290.68 683.384 L1290.12 683.384 L1289.56 683.384 L1289 683.384 L1288.45 683.384 L1287.89 683.384 L1287.33 683.384 L1286.77 683.384 L1286.21 683.384 L1285.65 683.384 L1285.09 683.384 L1284.53 683.384 L1283.97 683.384 L1283.41 683.384 L1282.85 683.384 L1282.29 683.384 L1281.73 683.384 L1281.18 683.384 L1280.62 683.384 L1280.06 683.384 L1279.5 683.384 L1278.94 683.384 L1278.38 683.384 L1277.82 683.384 L1277.26 683.384 L1276.7 683.384 L1276.14 683.384 L1275.58 683.384 L1275.02 683.384 L1274.46 683.384 L1273.91 683.384 L1273.35 683.384 L1272.79 683.384 L1272.23 683.384 L1271.67 683.384 L1271.11 683.384 L1270.55 683.384 L1269.99 683.384 L1269.43 683.384 L1268.87 683.384 L1268.31 683.384 L1267.75 683.384 L1267.19 683.384 L1266.63 683.384 L1266.08 683.384 L1265.52 683.384 L1264.96 683.384 L1264.4 683.384 L1263.84 683.384 L1263.28 683.384 L1262.72 683.384 L1262.16 683.384 L1261.6 683.384 L1261.04 683.384 L1260.48 683.384 L1259.92 683.384 L1259.36 683.384 L1258.81 683.384 L1258.25 683.384 L1257.69 683.384 L1257.13 683.384 L1256.57 683.384 L1256.01 683.384 L1255.45 683.384 L1254.89 683.384 L1254.33 683.384 L1253.77 683.384 L1253.21 683.384 L1252.65 683.384 L1252.09 683.384 L1251.54 683.384 L1250.98 683.384 L1250.42 683.384 L1249.86 683.384 L1249.3 683.384 L1248.74 683.384 L1248.18 683.384 L1247.62 683.384 L1247.06 683.384 L1246.5 683.384 L1245.94 683.384 L1245.38 683.384 L1244.82 683.384 L1244.26 683.384 L1243.71 683.384 L1243.15 683.384 L1242.59 683.384 L1242.03 683.384 L1241.47 683.384 L1240.91 683.384 L1240.35 683.384 L1239.79 683.384 L1239.23 683.384 L1238.67 683.384 L1238.11 683.384 L1237.55 683.384 L1236.99 683.384 L1236.44 683.384 L1235.88 683.384 L1235.32 683.384 L1234.76 683.384 L1234.2 683.384 L1233.64 683.384 L1233.08 683.384 L1232.52 683.384 L1231.96 683.384 L1231.4 683.384 L1230.84 683.384 L1230.28 683.384 L1229.72 683.384 L1229.17 683.384 L1228.61 683.384 L1228.05 683.384 L1227.49 683.384 L1226.93 683.384 L1226.37 683.384 L1225.81 683.384 L1225.25 683.384 L1224.69 683.384 L1224.13 683.384 L1223.57 683.384 L1223.01 683.384 L1222.45 683.384 L1221.89 683.384 L1221.34 683.384 L1220.78 683.384 L1220.22 683.384 L1219.66 683.384 L1219.1 683.384 L1218.54 683.384 L1217.98 683.384 L1217.42 683.384 L1216.86 683.384 L1216.3 683.384 L1215.74 683.384 L1215.18 683.384 L1214.62 683.384 L1214.07 683.384 L1213.51 683.384 L1212.95 683.384 L1212.39 683.384 L1211.83 683.384 L1211.27 683.384 L1210.71 683.384 L1210.15 683.384 L1209.59 683.384 L1209.03 683.384 L1208.47 683.384 L1207.91 683.384 L1207.35 683.384 L1206.8 683.384 L1206.24 683.384 L1205.68 683.384 L1205.12 683.384 L1204.56 683.384 L1204 683.384 L1203.44 683.384 L1202.88 683.384 L1202.32 683.384 L1201.76 683.384 L1201.2 683.384 L1200.64 683.384 L1200.08 683.384 L1199.52 683.384 L1198.97 683.384 L1198.41 683.384 L1197.85 683.384 L1197.29 683.384 L1196.73 683.384 L1196.17 683.384 L1195.61 683.384 L1195.05 683.384 L1194.49 683.384 L1193.93 683.384 L1193.37 683.384 L1192.81 683.384 L1192.25 683.384 L1191.7 683.384 L1191.14 683.384 L1190.58 683.384 L1190.02 683.384 L1189.46 683.384 L1188.9 683.384 L1188.34 683.384 L1187.78 683.384 L1187.22 683.384 L1186.66 683.384 L1186.1 683.384 L1185.54 683.384 L1184.98 683.384 L1184.43 683.384 L1183.87 683.384 L1183.31 683.384 L1182.75 683.384 L1182.19 683.384 L1181.63 683.384 L1181.07 683.384 L1180.51 683.384 L1179.95 683.384 L1179.39 683.384 L1178.83 683.384 L1178.27 683.384 L1177.71 683.384 L1177.15 683.384 L1176.6 683.384 L1176.04 683.384 L1175.48 683.384 L1174.92 683.384 L1174.36 683.384 L1173.8 683.384 L1173.24 683.384 L1172.68 683.384 L1172.12 683.384 L1171.56 683.384 L1171 683.384 L1170.44 683.384 L1169.88 683.384 L1169.33 683.384 L1168.77 683.384 L1168.21 683.384 L1167.65 683.384 L1167.09 683.384 L1166.53 683.384 L1165.97 683.384 L1165.41 683.384 L1164.85 683.384 L1164.29 683.384 L1163.73 683.384 L1163.17 683.384 L1162.61 683.384 L1162.05 683.384 L1161.5 683.384 L1160.94 683.384 L1160.38 683.384 L1159.82 683.384 L1159.26 683.384 L1158.7 683.384 L1158.14 683.384 L1157.58 683.384 L1157.02 683.384 L1156.46 683.384 L1155.9 683.384 L1155.34 683.384 L1154.78 683.384 L1154.23 683.384 L1153.67 683.384 L1153.11 683.384 L1152.55 683.384 L1151.99 683.384 L1151.43 683.384 L1150.87 683.384 L1150.31 683.384 L1149.75 683.384 L1149.19 683.384 L1148.63 683.384 L1148.07 683.384 L1147.51 683.384 L1146.96 683.384 L1146.4 683.384 L1145.84 683.384 L1145.28 683.384 L1144.72 683.384 L1144.16 683.384 L1143.6 683.384 L1143.04 683.384 L1142.48 683.384 L1141.92 683.384 L1141.36 683.384 L1140.8 683.384 L1140.24 683.384 L1139.68 683.384 L1139.13 683.384 L1138.57 683.384 L1138.01 683.384 L1137.45 683.384 L1136.89 683.384 L1136.33 683.384 L1135.77 683.384 L1135.21 683.384 L1134.65 683.384 L1134.09 683.384 L1133.53 683.384 L1132.97 683.384 L1132.41 683.384 L1131.86 683.384 L1131.3 683.384 L1130.74 683.384 L1130.18 683.384 L1129.62 683.384 L1129.06 683.384 L1128.5 683.384 L1127.94 683.384 L1127.38 683.384 L1126.82 683.384 L1126.26 683.384 L1125.7 683.384 L1125.14 683.384 L1124.59 683.384 L1124.03 683.384 L1123.47 683.384 L1122.91 683.384 L1122.35 683.384 L1121.79 683.384 L1121.23 683.384 L1120.67 683.384 L1120.11 683.384 L1119.55 683.384 L1118.99 683.384 L1118.43 683.384 L1117.87 683.384 L1117.31 683.384 L1116.76 683.384 L1116.2 683.384 L1115.64 683.384 L1115.08 683.384 L1114.52 683.384 L1113.96 683.384 L1113.4 683.384 L1112.84 683.384 L1112.28 683.384 L1111.72 683.384 L1111.16 683.384 L1110.6 683.384 L1110.04 683.384 L1109.49 683.384 L1108.93 683.384 L1108.37 683.384 L1107.81 683.384 L1107.25 683.384 L1106.69 683.384 L1106.13 683.384 L1105.57 683.384 L1105.01 683.384 L1104.45 683.384 L1103.89 683.384 L1103.33 683.384 L1102.77 683.384 L1102.22 683.384 L1101.66 683.384 L1101.1 683.384 L1100.54 683.384 L1099.98 683.384 L1099.42 683.384 L1098.86 683.384 L1098.3 683.384 L1097.74 683.384 L1097.18 683.384 L1096.62 683.384 L1096.06 683.384 L1095.5 683.384 L1094.94 683.384 L1094.39 683.384 L1093.83 683.384 L1093.27 683.384 L1092.71 683.384 L1092.15 683.384 L1091.59 683.384 L1091.03 683.384 L1090.47 683.384 L1089.91 683.384 L1089.35 683.384 L1088.79 683.384 L1088.23 683.384 L1087.67 683.384 L1087.12 683.384 L1086.56 683.384 L1086 683.384 L1085.44 683.384 L1084.88 683.384 L1084.32 683.384 L1083.76 683.384 L1083.2 683.384 L1082.64 683.384 L1082.08 683.384 L1081.52 683.384 L1080.96 683.384 L1080.4 683.384 L1079.85 683.384 L1079.29 683.384 L1078.73 683.384 L1078.17 683.384 L1077.61 683.384 L1077.05 683.384 L1076.49 683.384 L1075.93 683.384 L1075.37 683.384 L1074.81 683.384 L1074.25 683.384 L1073.69 683.384 L1073.13 683.384 L1072.57 683.384 L1072.02 683.384 L1071.46 683.384 L1070.9 683.384 L1070.34 683.384 L1069.78 683.384 L1069.22 683.384 L1068.66 683.384 L1068.1 683.384 L1067.54 683.384 L1066.98 683.384 L1066.42 683.384 L1065.86 683.384 L1065.3 683.384 L1064.75 683.384 L1064.19 683.384 L1063.63 683.384 L1063.07 683.384 L1062.51 683.384 L1061.95 683.384 L1061.39 683.384 L1060.83 683.384 L1060.27 683.384 L1059.71 683.384 L1059.15 683.384 L1058.59 683.384 L1058.03 683.384 L1057.48 683.384 L1056.92 683.384 L1056.36 683.384 L1055.8 683.384 L1055.24 683.384 L1054.68 683.384 L1054.12 683.384 L1053.56 683.384 L1053 683.384 L1052.44 683.384 L1051.88 683.384 L1051.32 683.384 L1050.76 683.384 L1050.2 683.384 L1049.65 683.384 L1049.09 683.384 L1048.53 683.384 L1047.97 683.384 L1047.41 683.384 L1046.85 683.384 L1046.29 683.384 L1045.73 683.384 L1045.17 683.384 L1044.61 683.384 L1044.05 683.384 L1043.49 683.384 L1042.93 683.384 L1042.38 683.384 L1041.82 683.384 L1041.26 683.384 L1040.7 683.384 L1040.14 683.384 L1039.58 683.384 L1039.02 683.384 L1038.46 683.384 L1037.9 683.384 L1037.34 683.384 L1036.78 683.384 L1036.22 683.384 L1035.66 683.384 L1035.1 683.384 L1034.55 683.384 L1033.99 683.384 L1033.43 683.384 L1032.87 683.384 L1032.31 683.384 L1031.75 683.384 L1031.19 683.384 L1030.63 683.384 L1030.07 683.384 L1029.51 683.384 L1028.95 683.384 L1028.39 683.384 L1027.83 683.384 L1027.28 683.384 L1026.72 683.384 L1026.16 683.384 L1025.6 683.384 L1025.04 683.384 L1024.48 683.384 L1023.92 683.384 L1023.36 683.384 L1022.8 683.384 L1022.24 683.384 L1021.68 683.384 L1021.12 683.384 L1020.56 683.384 L1020.01 683.384 L1019.45 683.384 L1018.89 683.384 L1018.33 683.384 L1017.77 683.384 L1017.21 683.384 L1016.65 683.384 L1016.09 683.384 L1015.53 683.384 L1014.97 683.384 L1014.41 683.384 L1013.85 683.384 L1013.29 683.384 L1012.73 683.384 L1012.18 683.384 L1011.62 683.384 L1011.06 683.384 L1010.5 683.384 L1009.94 683.384 L1009.38 683.384 L1008.82 683.384 L1008.26 683.384 L1007.7 683.384 L1007.14 683.384 L1006.58 683.384 L1006.02 683.384 L1005.46 683.384 L1004.91 683.384 L1004.35 683.384 L1003.79 683.384 L1003.23 683.384 L1002.67 683.384 L1002.11 683.384 L1001.55 683.384 L1000.99 683.384 L1000.43 683.384 L999.872 683.384 L999.313 683.384 L998.754 683.384 L998.194 683.384 L997.635 683.384 L997.076 683.384 L996.517 683.384 L995.957 683.384 L995.398 683.384 L994.839 683.384 L994.28 683.384 L993.72 683.384 L993.161 683.384 L992.602 683.384 L992.043 683.384 L991.483 683.384 L990.924 683.384 L990.365 683.384 L989.806 683.384 L989.246 683.384 L988.687 683.384 L988.128 683.384 L987.569 683.384 L987.009 683.384 L986.45 683.384 L985.891 683.384 L985.332 683.384 L984.772 683.384 L984.213 683.384 L983.654 683.384 L983.095 683.384 L982.535 683.384 L981.976 683.384 L981.417 683.384 L980.858 683.384 L980.298 683.384 L979.739 683.384 L979.18 683.384 L978.621 683.384 L978.061 683.384 L977.502 683.384 L976.943 683.384 L976.384 683.384 L975.824 683.384 L975.265 683.384 L974.706 683.384 L974.147 683.384 L973.587 683.384 L973.028 683.384 L972.469 683.384 L971.91 683.384 L971.35 683.384 L970.791 683.384 L970.232 683.384 L969.673 683.384 L969.113 683.384 L968.554 683.384 L967.995 683.384 L967.436 683.384 L966.876 683.384 L966.317 683.384 L965.758 683.384 L965.199 683.384 L964.639 683.384 L964.08 683.384 L963.521 683.384 L962.962 683.384 L962.402 683.384 L961.843 683.384 L961.284 683.384 L960.725 683.384 L960.165 683.384 L959.606 683.384 L959.047 683.384 L958.488 683.384 L957.928 683.384 L957.369 683.384 L956.81 683.384 L956.251 683.384 L955.691 683.384 L955.132 683.384 L954.573 683.384 L954.014 683.384 L953.454 683.384 L952.895 683.384 L952.336 683.384 L951.777 683.384 L951.217 683.384 L950.658 683.384 L950.099 683.384 L949.54 683.384 L948.98 683.384 L948.421 683.384 L947.862 683.384 L947.303 683.384 L946.743 683.384 L946.184 683.384 L945.625 683.384 L945.066 683.384 L944.506 683.384 L943.947 683.384 L943.388 683.384 L942.829 683.384 L942.269 683.384 L941.71 683.384 L941.151 683.384 L940.592 683.384 L940.032 683.384 L939.473 683.384 L938.914 683.384 L938.355 683.384 L937.795 683.384 L937.236 683.384 L936.677 683.384 L936.118 683.384 L935.558 683.384 L934.999 683.384 L934.44 683.384 L933.881 683.384 L933.321 683.384 L932.762 683.384 L932.203 683.384 L931.644 683.384 L931.084 683.384 L930.525 683.384 L929.966 683.384 L929.406 683.384 L928.847 683.384 L928.288 683.384 L927.729 683.384 L927.169 683.384 L926.61 683.384 L926.051 683.384 L925.492 683.384 L924.932 683.384 L924.373 683.384 L923.814 683.384 L923.255 683.384 L922.695 683.384 L922.136 683.384 L921.577 683.384 L921.018 683.384 L920.458 683.384 L919.899 683.384 L919.34 683.384 L918.781 683.384 L918.221 683.384 L917.662 683.384 L917.103 683.384 L916.544 683.384 L915.984 683.384 L915.425 683.384 L914.866 683.384 L914.307 683.384 L913.747 683.384 L913.188 683.384 L912.629 683.384 L912.07 683.384 L911.51 683.384 L910.951 683.384 L910.392 683.384 L909.833 683.384 L909.273 683.384 L908.714 683.384 L908.155 683.384 L907.596 683.384 L907.036 683.384 L906.477 683.384 L905.918 683.384 L905.359 683.384 L904.799 683.384 L904.24 683.384 L903.681 683.384 L903.122 683.384 L902.562 683.384 L902.003 683.384 L901.444 683.384 L900.885 683.384 L900.325 683.384 L899.766 683.384 L899.207 683.384 L898.648 683.384 L898.088 683.384 L897.529 683.384 L896.97 683.384 L896.411 683.384 L895.851 683.384 L895.292 683.384 L894.733 683.384 L894.174 683.384 L893.614 683.384 L893.055 683.384 L892.496 683.384 L891.937 683.384 L891.377 683.384 L890.818 683.384 L890.259 683.384 L889.7 683.384 L889.14 683.384 L888.581 683.384 L888.022 683.384 L887.463 683.384 L886.903 683.384 L886.344 683.384 L885.785 683.384 L885.226 683.384 L884.666 683.384 L884.107 683.384 L883.548 683.384 L882.989 683.384 L882.429 683.384 L881.87 683.384 L881.311 683.384 L880.752 683.384 L880.192 683.384 L879.633 683.384 L879.074 683.384 L878.515 683.384 L877.955 683.384 L877.396 683.384 L876.837 683.384 L876.278 683.384 L875.718 683.384 L875.159 683.384 L874.6 683.384 L874.041 683.384 L873.481 683.384 L872.922 683.384 L872.363 683.384 L871.804 683.384 L871.244 683.384 L870.685 683.384 L870.126 683.384 L869.567 683.384 L869.007 683.384 L868.448 683.384 L867.889 683.384 L867.33 683.384 L866.77 683.384 L866.211 683.384 L865.652 683.384 L865.093 683.384 L864.533 683.384 L863.974 683.384 L863.415 683.384 L862.856 683.384 L862.296 683.384 L861.737 683.384 L861.178 683.384 L860.619 683.384 L860.059 683.384 L859.5 683.384 L858.941 683.384 L858.382 683.384 L857.822 683.384 L857.263 683.384 L856.704 683.384 L856.145 683.384 L855.585 683.384 L855.026 683.384 L854.467 683.384 L853.908 683.384 L853.348 683.384 L852.789 683.384 L852.23 683.384 L851.671 683.384 L851.111 683.384 L850.552 683.384 L849.993 683.384 L849.434 683.384 L848.874 683.384 L848.315 683.384 L847.756 683.384 L847.197 683.384 L846.637 683.384 L846.078 683.384 L845.519 683.384 L844.96 683.384 L844.4 683.384 L843.841 683.384 L843.282 683.384 L842.723 683.384 L842.163 683.384 L841.604 683.384 L841.045 683.384 L840.486 683.384 L839.926 683.384 L839.367 683.384 L838.808 683.384 L838.249 683.384 L837.689 683.384 L837.13 683.384 L836.571 683.384 L836.012 683.384 L835.452 683.384 L834.893 683.384 L834.334 683.384 L833.775 683.384 L833.215 683.384 L832.656 683.384 L832.097 683.384 L831.538 683.384 L830.978 683.384 L830.419 683.384 L829.86 683.384 L829.301 683.384 L828.741 683.384 L828.182 683.384 L827.623 683.384 L827.064 683.384 L826.504 683.384 L825.945 683.384 L825.386 683.384 L824.827 683.384 L824.267 683.384 L823.708 683.384 L823.149 683.384 L822.59 683.384 L822.03 683.384 L821.471 683.384 L820.912 683.384 L820.353 683.384 L819.793 683.384 L819.234 683.384 L818.675 683.384 L818.116 683.384 L817.556 683.384 L816.997 683.384 L816.438 683.384 L815.879 683.384 L815.319 683.384 L814.76 683.384 L814.201 683.384 L813.642 683.384 L813.082 683.384 L812.523 683.384 L811.964 683.384 L811.405 683.384 L810.845 683.384 L810.286 683.384 L809.727 683.384 L809.168 683.384 L808.608 683.384 L808.049 683.384 L807.49 683.384 L806.931 683.384 L806.371 683.384 L805.812 683.384 L805.253 683.384 L804.693 683.384 L804.134 683.384 L803.575 683.384 L803.016 683.384 L802.456 683.384 L801.897 683.384 L801.338 683.384 L800.779 683.384 L800.219 683.384 L799.66 683.384 L799.101 683.384 L798.542 683.384 L797.982 683.384 L797.423 683.384 L796.864 683.384 L796.305 683.384 L795.745 683.384 L795.186 683.384 L794.627 683.384 L794.068 683.384 L793.508 683.384 L792.949 683.384 L792.39 683.384 L791.831 683.384 L791.271 683.384 L790.712 683.384 L790.153 683.384 L789.594 683.384 L789.034 683.384 L788.475 683.384 L787.916 683.384 L787.357 683.384 L786.797 683.384 L786.238 683.384 L785.679 683.384 L785.12 683.384 L784.56 683.384 L784.001 683.384 L783.442 683.384 L782.883 683.384 L782.323 683.384 L781.764 683.384 L781.205 683.384 L780.646 683.384 L780.086 683.384 L779.527 683.384 L778.968 683.384 L778.409 683.384 L777.849 683.384 L777.29 683.384 L776.731 683.384 L776.172 683.384 L775.612 683.384 L775.053 683.384 L774.494 683.384 L773.935 683.384 L773.375 683.384 L772.816 683.384 L772.257 683.384 L771.698 683.384 L771.138 683.384 L770.579 683.384 L770.02 683.384 L769.461 683.384 L768.901 683.384 L768.342 683.384 L767.783 683.384 L767.224 683.384 L766.664 683.384 L766.105 683.384 L765.546 683.384 L764.987 683.384 L764.427 683.384 L763.868 683.384 L763.309 683.384 L762.75 683.384 L762.19 683.384 L761.631 683.384 L761.072 683.384 L760.513 683.384 L759.953 683.384 L759.394 683.384 L758.835 683.384 L758.276 683.384 L757.716 683.384 L757.157 683.384 L756.598 683.384 L756.039 683.384 L755.479 683.384 L754.92 683.384 L754.361 683.384 L753.802 683.384 L753.242 683.384 L752.683 683.384 L752.124 683.384 L751.565 683.384 L751.005 683.384 L750.446 683.384 L749.887 683.384 L749.328 683.384 L748.768 683.384 L748.209 683.384 L747.65 683.384 L747.091 683.384 L746.531 683.384 L745.972 683.384 L745.413 683.384 L744.854 683.384 L744.294 683.384 L743.735 683.384 L743.176 683.384 L742.617 683.384 L742.057 683.384 L741.498 683.384 L740.939 683.384 L740.38 683.384 L739.82 683.384 L739.261 683.384 L738.702 683.384 L738.143 683.384 L737.583 683.384 L737.024 683.384 L736.465 683.384 L735.906 683.384 L735.346 683.384 L734.787 683.384 L734.228 683.384 L733.669 683.384 L733.109 683.384 L732.55 683.384 L731.991 683.384 L731.432 683.384 L730.872 683.384 L730.313 683.384 L729.754 683.384 L729.195 683.384 L728.635 683.384 L728.076 683.384 L727.517 683.384 L726.958 683.384 L726.398 683.384 L725.839 683.384 L725.28 683.384 L724.721 683.384 L724.161 683.384 L723.602 683.384 L723.043 683.384 L722.484 683.384 L721.924 683.384 L721.365 683.384 L720.806 683.384 L720.247 683.384  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.605 720.806,684.605 721.365,684.605 721.924,684.605 722.484,684.605 723.043,684.605 723.602,684.605 724.161,684.605 724.721,684.605 725.28,684.605 725.839,684.605 726.398,684.605 726.958,684.605 727.517,684.605 728.076,684.605 728.635,684.605 729.195,684.605 729.754,684.605 730.313,684.605 730.872,684.605 731.432,684.605 731.991,684.605 732.55,684.605 733.109,684.605 733.669,684.605 734.228,684.605 734.787,684.605 735.346,684.605 735.906,684.605 736.465,684.605 737.024,684.605 737.583,684.605 738.143,684.605 738.702,684.605 739.261,684.605 739.82,684.605 740.38,684.605 740.939,684.605 741.498,684.605 742.057,684.605 742.617,684.605 743.176,684.605 743.735,684.605 744.294,684.605 744.854,684.605 745.413,684.605 745.972,684.605 746.531,684.605 747.091,684.605 747.65,684.605 748.209,684.605 748.768,684.605 749.328,684.605 749.887,684.605 750.446,684.605 751.005,684.605 751.565,684.605 752.124,684.605 752.683,684.605 753.242,684.605 753.802,684.605 754.361,684.605 754.92,684.605 755.479,684.605 756.039,684.605 756.598,684.605 757.157,684.605 757.716,684.605 758.276,684.605 758.835,684.605 759.394,684.605 759.953,684.605 760.513,684.605 761.072,684.605 761.631,684.605 762.19,684.605 762.75,684.605 763.309,684.605 763.868,684.605 764.427,684.605 764.987,684.605 765.546,684.605 766.105,684.605 766.664,684.605 767.224,684.605 767.783,684.605 768.342,684.605 768.901,684.605 769.461,684.605 770.02,684.605 770.579,684.605 771.138,684.605 771.698,684.605 772.257,684.605 772.816,684.605 773.375,684.605 773.935,684.605 774.494,684.605 775.053,684.605 775.612,684.605 776.172,684.605 776.731,684.605 777.29,684.605 777.849,684.605 778.409,684.605 778.968,684.605 779.527,684.605 780.086,684.605 780.646,684.605 781.205,684.605 781.764,684.605 782.323,684.605 782.883,684.605 783.442,684.605 784.001,684.605 784.56,684.605 785.12,684.605 785.679,684.605 786.238,684.605 786.797,684.605 787.357,684.605 787.916,684.605 788.475,684.605 789.034,684.605 789.594,684.605 790.153,684.605 790.712,684.605 791.271,684.605 791.831,684.605 792.39,684.605 792.949,684.605 793.508,684.605 794.068,684.605 794.627,684.605 795.186,684.605 795.745,684.605 796.305,684.605 796.864,684.605 797.423,684.605 797.982,684.605 798.542,684.605 799.101,684.605 799.66,684.605 800.219,684.605 800.779,684.605 801.338,684.605 801.897,684.605 802.456,684.605 803.016,684.605 803.575,684.605 804.134,684.605 804.693,684.605 805.253,684.605 805.812,684.605 806.371,684.605 806.931,684.605 807.49,684.605 808.049,684.605 808.608,684.605 809.168,684.605 809.727,684.605 810.286,684.605 810.845,684.605 811.405,684.605 811.964,684.605 812.523,684.605 813.082,684.605 813.642,684.605 814.201,684.605 814.76,684.605 815.319,684.605 815.879,684.605 816.438,684.605 816.997,684.605 817.556,684.605 818.116,684.605 818.675,684.605 819.234,684.605 819.793,684.605 820.353,684.605 820.912,684.605 821.471,684.605 822.03,684.605 822.59,684.605 823.149,684.605 823.708,684.605 824.267,684.605 824.827,684.605 825.386,684.605 825.945,684.605 826.504,684.605 827.064,684.605 827.623,684.605 828.182,684.605 828.741,684.605 829.301,684.605 829.86,684.605 830.419,684.605 830.978,684.605 831.538,684.605 832.097,684.605 832.656,684.605 833.215,684.605 833.775,684.605 834.334,684.605 834.893,684.605 835.452,684.605 836.012,684.605 836.571,684.605 837.13,684.605 837.689,684.605 838.249,684.605 838.808,684.605 839.367,684.605 839.926,684.605 840.486,684.605 841.045,684.605 841.604,684.605 842.163,684.605 842.723,684.605 843.282,684.605 843.841,684.605 844.4,684.605 844.96,684.605 845.519,684.605 846.078,684.605 846.637,684.605 847.197,684.605 847.756,684.605 848.315,684.605 848.874,684.605 849.434,684.605 849.993,684.605 850.552,684.605 851.111,684.605 851.671,684.605 852.23,684.605 852.789,684.605 853.348,684.605 853.908,684.605 854.467,684.605 855.026,684.605 855.585,684.605 856.145,684.605 856.704,684.605 857.263,684.605 857.822,684.605 858.382,684.605 858.941,684.605 859.5,684.605 860.059,684.605 860.619,684.605 861.178,684.605 861.737,684.605 862.296,684.605 862.856,684.605 863.415,684.605 863.974,684.605 864.533,684.605 865.093,684.605 865.652,684.605 866.211,684.605 866.77,684.605 867.33,684.605 867.889,684.605 868.448,684.605 869.007,684.605 869.567,684.605 870.126,684.605 870.685,684.605 871.244,684.605 871.804,684.605 872.363,684.605 872.922,684.605 873.481,684.605 874.041,684.605 874.6,684.605 875.159,684.605 875.718,684.605 876.278,684.605 876.837,684.605 877.396,684.605 877.955,684.605 878.515,684.605 879.074,684.605 879.633,684.605 880.192,684.605 880.752,684.605 881.311,684.605 881.87,684.605 882.429,684.605 882.989,684.605 883.548,684.605 884.107,684.605 884.666,684.605 885.226,684.605 885.785,684.605 886.344,684.605 886.903,684.605 887.463,684.605 888.022,684.605 888.581,684.605 889.14,684.605 889.7,684.605 890.259,684.605 890.818,684.605 891.377,684.605 891.937,684.605 892.496,684.605 893.055,684.605 893.614,684.605 894.174,684.605 894.733,684.605 895.292,684.605 895.851,684.605 896.411,684.605 896.97,684.605 897.529,684.605 898.088,684.605 898.648,684.605 899.207,684.605 899.766,684.605 900.325,684.605 900.885,684.605 901.444,684.605 902.003,684.605 902.562,684.605 903.122,684.605 903.681,684.605 904.24,684.605 904.799,684.605 905.359,684.605 905.918,684.605 906.477,684.605 907.036,684.605 907.596,684.605 908.155,684.605 908.714,684.605 909.273,684.605 909.833,684.605 910.392,684.605 910.951,684.605 911.51,684.605 912.07,684.605 912.629,684.605 913.188,684.605 913.747,684.605 914.307,684.605 914.866,684.605 915.425,684.605 915.984,684.605 916.544,684.605 917.103,684.605 917.662,684.605 918.221,684.605 918.781,684.605 919.34,684.605 919.899,684.605 920.458,684.605 921.018,684.605 921.577,684.605 922.136,684.605 922.695,684.605 923.255,684.605 923.814,684.605 924.373,684.605 924.932,684.605 925.492,684.605 926.051,684.605 926.61,684.605 927.169,684.605 927.729,684.605 928.288,684.605 928.847,684.605 929.406,684.605 929.966,684.605 930.525,684.605 931.084,684.605 931.644,684.605 932.203,684.605 932.762,684.605 933.321,684.605 933.881,684.605 934.44,684.605 934.999,684.605 935.558,684.605 936.118,684.605 936.677,684.605 937.236,684.605 937.795,684.605 938.355,684.605 938.914,684.605 939.473,684.605 940.032,684.605 940.592,684.605 941.151,684.605 941.71,684.605 942.269,684.605 942.829,684.605 943.388,684.605 943.947,684.605 944.506,684.605 945.066,684.605 945.625,684.605 946.184,684.605 946.743,684.605 947.303,684.605 947.862,684.605 948.421,684.605 948.98,684.605 949.54,684.605 950.099,684.605 950.658,684.605 951.217,684.605 951.777,684.605 952.336,684.605 952.895,684.605 953.454,684.605 954.014,684.605 954.573,684.605 955.132,684.605 955.691,684.605 956.251,684.605 956.81,684.605 957.369,684.605 957.928,684.605 958.488,684.605 959.047,684.605 959.606,684.605 960.165,684.605 960.725,684.605 961.284,684.605 961.843,684.605 962.402,684.605 962.962,684.605 963.521,684.605 964.08,684.605 964.639,684.605 965.199,684.605 965.758,684.605 966.317,684.605 966.876,684.605 967.436,684.605 967.995,684.605 968.554,684.605 969.113,684.605 969.673,684.605 970.232,684.605 970.791,684.605 971.35,684.605 971.91,684.605 972.469,684.605 973.028,684.605 973.587,684.605 974.147,684.605 974.706,684.605 975.265,684.605 975.824,684.605 976.384,684.605 976.943,684.605 977.502,684.605 978.061,684.605 978.621,684.605 979.18,684.605 979.739,684.605 980.298,684.605 980.858,684.605 981.417,684.605 981.976,684.605 982.535,684.605 983.095,684.605 983.654,684.605 984.213,684.605 984.772,684.605 985.332,684.605 985.891,684.605 986.45,684.605 987.009,684.605 987.569,684.605 988.128,684.605 988.687,684.605 989.246,684.605 989.806,684.605 990.365,684.605 990.924,684.605 991.483,684.605 992.043,684.605 992.602,684.605 993.161,684.605 993.72,684.605 994.28,684.605 994.839,684.605 995.398,684.605 995.957,684.605 996.517,684.605 997.076,684.605 997.635,684.605 998.194,684.605 998.754,684.605 999.313,684.605 999.872,684.605 1000.43,684.605 1000.99,684.605 1001.55,684.605 1002.11,684.605 1002.67,684.605 1003.23,684.605 1003.79,684.605 1004.35,684.605 1004.91,684.605 1005.46,684.605 1006.02,684.605 1006.58,684.605 1007.14,684.605 1007.7,684.605 1008.26,684.605 1008.82,684.605 1009.38,684.605 1009.94,684.605 1010.5,684.605 1011.06,684.605 1011.62,684.605 1012.18,684.605 1012.73,684.605 1013.29,684.605 1013.85,684.605 1014.41,684.605 1014.97,684.605 1015.53,684.605 1016.09,684.605 1016.65,684.605 1017.21,684.605 1017.77,684.605 1018.33,684.605 1018.89,684.605 1019.45,684.605 1020.01,684.605 1020.56,684.605 1021.12,684.605 1021.68,684.605 1022.24,684.605 1022.8,684.605 1023.36,684.605 1023.92,684.605 1024.48,684.605 1025.04,684.605 1025.6,684.605 1026.16,684.605 1026.72,684.605 1027.28,684.605 1027.83,684.605 1028.39,684.605 1028.95,684.605 1029.51,684.605 1030.07,684.605 1030.63,684.605 1031.19,684.605 1031.75,684.605 1032.31,684.605 1032.87,684.605 1033.43,684.605 1033.99,684.605 1034.55,684.605 1035.1,684.605 1035.66,684.605 1036.22,684.605 1036.78,684.605 1037.34,684.605 1037.9,684.605 1038.46,684.605 1039.02,684.605 1039.58,684.605 1040.14,684.605 1040.7,684.605 1041.26,684.605 1041.82,684.605 1042.38,684.605 1042.93,684.605 1043.49,684.605 1044.05,684.605 1044.61,684.605 1045.17,684.605 1045.73,684.605 1046.29,684.605 1046.85,684.605 1047.41,684.605 1047.97,684.605 1048.53,684.605 1049.09,684.605 1049.65,684.605 1050.2,684.605 1050.76,684.605 1051.32,684.605 1051.88,684.605 1052.44,684.605 1053,684.605 1053.56,684.605 1054.12,684.605 1054.68,684.605 1055.24,684.605 1055.8,684.605 1056.36,684.605 1056.92,684.605 1057.48,684.605 1058.03,684.605 1058.59,684.605 1059.15,684.605 1059.71,684.605 1060.27,684.605 1060.83,684.605 1061.39,684.605 1061.95,684.605 1062.51,684.605 1063.07,684.605 1063.63,684.605 1064.19,684.605 1064.75,684.605 1065.3,684.605 1065.86,684.605 1066.42,684.605 1066.98,684.605 1067.54,684.605 1068.1,684.605 1068.66,684.605 1069.22,684.605 1069.78,684.605 1070.34,684.605 1070.9,684.605 1071.46,684.605 1072.02,684.605 1072.57,684.605 1073.13,684.605 1073.69,684.605 1074.25,684.605 1074.81,684.605 1075.37,684.605 1075.93,684.605 1076.49,684.605 1077.05,684.605 1077.61,684.605 1078.17,684.605 1078.73,684.605 1079.29,684.605 1079.85,684.605 1080.4,684.605 1080.96,684.605 1081.52,684.605 1082.08,684.605 1082.64,684.605 1083.2,684.605 1083.76,684.605 1084.32,684.605 1084.88,684.605 1085.44,684.605 1086,684.605 1086.56,684.605 1087.12,684.605 1087.67,684.605 1088.23,684.605 1088.79,684.605 1089.35,684.605 1089.91,684.605 1090.47,684.605 1091.03,684.605 1091.59,684.605 1092.15,684.605 1092.71,684.605 1093.27,684.605 1093.83,684.605 1094.39,684.605 1094.94,684.605 1095.5,684.605 1096.06,684.605 1096.62,684.605 1097.18,684.605 1097.74,684.605 1098.3,684.605 1098.86,684.605 1099.42,684.605 1099.98,684.605 1100.54,684.605 1101.1,684.605 1101.66,684.605 1102.22,684.605 1102.77,684.605 1103.33,684.605 1103.89,684.605 1104.45,684.605 1105.01,684.605 1105.57,684.605 1106.13,684.605 1106.69,684.605 1107.25,684.605 1107.81,684.605 1108.37,684.605 1108.93,684.605 1109.49,684.605 1110.04,684.605 1110.6,684.605 1111.16,684.605 1111.72,684.605 1112.28,684.605 1112.84,684.605 1113.4,684.605 1113.96,684.605 1114.52,684.605 1115.08,684.605 1115.64,684.605 1116.2,684.605 1116.76,684.605 1117.31,684.605 1117.87,684.605 1118.43,684.605 1118.99,684.605 1119.55,684.605 1120.11,684.605 1120.67,684.605 1121.23,684.605 1121.79,684.605 1122.35,684.605 1122.91,684.605 1123.47,684.605 1124.03,684.605 1124.59,684.605 1125.14,684.605 1125.7,684.605 1126.26,684.605 1126.82,684.605 1127.38,684.605 1127.94,684.605 1128.5,684.605 1129.06,684.605 1129.62,684.605 1130.18,684.605 1130.74,684.605 1131.3,684.605 1131.86,684.605 1132.41,684.605 1132.97,684.605 1133.53,684.605 1134.09,684.605 1134.65,684.605 1135.21,684.605 1135.77,684.605 1136.33,684.605 1136.89,684.605 1137.45,684.605 1138.01,684.605 1138.57,684.605 1139.13,684.605 1139.68,684.605 1140.24,684.605 1140.8,684.605 1141.36,684.605 1141.92,684.605 1142.48,684.605 1143.04,684.605 1143.6,684.605 1144.16,684.605 1144.72,684.605 1145.28,684.605 1145.84,684.605 1146.4,684.605 1146.96,684.605 1147.51,684.605 1148.07,684.605 1148.63,684.605 1149.19,684.605 1149.75,684.605 1150.31,684.605 1150.87,684.605 1151.43,684.605 1151.99,684.605 1152.55,684.605 1153.11,684.605 1153.67,684.605 1154.23,684.605 1154.78,684.605 1155.34,684.605 1155.9,684.605 1156.46,684.605 1157.02,684.605 1157.58,684.605 1158.14,684.605 1158.7,684.605 1159.26,684.605 1159.82,684.605 1160.38,684.605 1160.94,684.605 1161.5,684.605 1162.05,684.605 1162.61,684.605 1163.17,684.605 1163.73,684.605 1164.29,684.605 1164.85,684.605 1165.41,684.605 1165.97,684.605 1166.53,684.605 1167.09,684.605 1167.65,684.605 1168.21,684.605 1168.77,684.605 1169.33,684.605 1169.88,684.605 1170.44,684.605 1171,684.605 1171.56,684.605 1172.12,684.605 1172.68,684.605 1173.24,684.605 1173.8,684.605 1174.36,684.605 1174.92,684.605 1175.48,684.605 1176.04,684.605 1176.6,684.605 1177.15,684.605 1177.71,684.605 1178.27,684.605 1178.83,684.605 1179.39,684.605 1179.95,684.605 1180.51,684.605 1181.07,684.605 1181.63,684.605 1182.19,684.605 1182.75,684.605 1183.31,684.605 1183.87,684.605 1184.43,684.605 1184.98,684.605 1185.54,684.605 1186.1,684.605 1186.66,684.605 1187.22,684.605 1187.78,684.605 1188.34,684.605 1188.9,684.605 1189.46,684.605 1190.02,684.605 1190.58,684.605 1191.14,684.605 1191.7,684.605 1192.25,684.605 1192.81,684.605 1193.37,684.605 1193.93,684.605 1194.49,684.605 1195.05,684.605 1195.61,684.605 1196.17,684.605 1196.73,684.605 1197.29,684.605 1197.85,684.605 1198.41,684.605 1198.97,684.605 1199.52,684.605 1200.08,684.605 1200.64,684.605 1201.2,684.605 1201.76,684.605 1202.32,684.605 1202.88,684.605 1203.44,684.605 1204,684.605 1204.56,684.605 1205.12,684.605 1205.68,684.605 1206.24,684.605 1206.8,684.605 1207.35,684.605 1207.91,684.605 1208.47,684.605 1209.03,684.605 1209.59,684.605 1210.15,684.605 1210.71,684.605 1211.27,684.605 1211.83,684.605 1212.39,684.605 1212.95,684.605 1213.51,684.605 1214.07,684.605 1214.62,684.605 1215.18,684.605 1215.74,684.605 1216.3,684.605 1216.86,684.605 1217.42,684.605 1217.98,684.605 1218.54,684.605 1219.1,684.605 1219.66,684.605 1220.22,684.605 1220.78,684.605 1221.34,684.605 1221.89,684.605 1222.45,684.605 1223.01,684.605 1223.57,684.605 1224.13,684.605 1224.69,684.605 1225.25,684.605 1225.81,684.605 1226.37,684.605 1226.93,684.605 1227.49,684.605 1228.05,684.605 1228.61,684.605 1229.17,684.605 1229.72,684.605 1230.28,684.605 1230.84,684.605 1231.4,684.605 1231.96,684.605 1232.52,684.605 1233.08,684.605 1233.64,684.605 1234.2,684.605 1234.76,684.605 1235.32,684.605 1235.88,684.605 1236.44,684.605 1236.99,684.605 1237.55,684.605 1238.11,684.605 1238.67,684.605 1239.23,684.605 1239.79,684.605 1240.35,684.605 1240.91,684.605 1241.47,684.605 1242.03,684.605 1242.59,684.605 1243.15,684.605 1243.71,684.605 1244.26,684.605 1244.82,684.605 1245.38,684.605 1245.94,684.605 1246.5,684.605 1247.06,684.605 1247.62,684.605 1248.18,684.605 1248.74,684.605 1249.3,684.605 1249.86,684.605 1250.42,684.605 1250.98,684.605 1251.54,684.605 1252.09,684.605 1252.65,684.605 1253.21,684.605 1253.77,684.605 1254.33,684.605 1254.89,684.605 1255.45,684.605 1256.01,684.605 1256.57,684.605 1257.13,684.605 1257.69,684.605 1258.25,684.605 1258.81,684.605 1259.36,684.605 1259.92,684.605 1260.48,684.605 1261.04,684.605 1261.6,684.605 1262.16,684.605 1262.72,684.605 1263.28,684.605 1263.84,684.605 1264.4,684.605 1264.96,684.605 1265.52,684.605 1266.08,684.605 1266.63,684.605 1267.19,684.605 1267.75,684.605 1268.31,684.605 1268.87,684.605 1269.43,684.605 1269.99,684.605 1270.55,684.605 1271.11,684.605 1271.67,684.605 1272.23,684.605 1272.79,684.605 1273.35,684.605 1273.91,684.605 1274.46,684.605 1275.02,684.605 1275.58,684.605 1276.14,684.605 1276.7,684.605 1277.26,684.605 1277.82,684.605 1278.38,684.605 1278.94,684.605 1279.5,684.605 1280.06,684.605 1280.62,684.605 1281.18,684.605 1281.73,684.605 1282.29,684.605 1282.85,684.605 1283.41,684.605 1283.97,684.605 1284.53,684.605 1285.09,684.605 1285.65,684.605 1286.21,684.605 1286.77,684.605 1287.33,684.605 1287.89,684.605 1288.45,684.605 1289,684.605 1289.56,684.605 1290.12,684.605 1290.68,684.605 1291.24,684.605 1291.8,684.605 1292.36,684.605 1292.92,684.605 1293.48,684.605 1294.04,684.605 1294.6,684.605 1295.16,684.605 1295.72,684.605 1296.28,684.605 1296.83,684.605 1297.39,684.605 1297.95,684.605 1298.51,684.605 1299.07,684.605 1299.63,684.605 1300.19,684.605 1300.75,684.605 1301.31,684.605 1301.87,684.605 1302.43,684.605 1302.99,684.605 1303.55,684.605 1304.1,684.605 1304.66,684.605 1305.22,684.605 1305.78,684.605 1306.34,684.605 1306.9,684.605 1307.46,684.605 1308.02,684.605 1308.58,684.605 1309.14,684.605 1309.7,684.605 1310.26,684.605 1310.82,684.605 1311.38,684.605 1311.93,684.605 1312.49,684.605 1313.05,684.605 1313.61,684.605 1314.17,684.605 1314.73,684.605 1315.29,684.605 1315.85,684.605 1316.41,684.605 1316.97,684.605 1317.53,684.605 1318.09,684.605 1318.65,684.605 1319.2,684.605 1319.76,684.605 1320.32,684.605 1320.88,684.605 1321.44,684.605 1322,684.605 1322.56,684.605 1323.12,684.605 1323.68,684.605 1324.24,684.605 1324.8,684.605 1325.36,684.605 1325.92,684.605 1326.47,684.605 1327.03,684.605 1327.59,684.605 1328.15,684.605 1328.71,684.605 1329.27,684.605 1329.83,684.605 1330.39,684.605 1330.95,684.605 1331.51,684.605 1332.07,684.605 1332.63,684.605 1333.19,684.605 1333.75,684.605 1334.3,684.605 1334.86,684.605 1335.42,684.605 1335.98,684.605 1336.54,684.605 1337.1,684.605 1337.66,684.605 1338.22,684.605 1338.78,684.605 1339.34,684.605 1339.9,684.605 1340.46,684.605 1341.02,684.605 1341.57,684.605 1342.13,684.605 1342.69,684.605 1343.25,684.605 1343.81,684.605 1344.37,684.605 1344.93,684.605 1345.49,684.605 1346.05,684.605 1346.61,684.605 1347.17,684.605 1347.73,684.605 1348.29,684.605 1348.84,684.605 1349.4,684.605 1349.96,684.605 1350.52,684.605 1351.08,684.605 1351.64,684.605 1352.2,684.605 1352.76,684.605 1353.32,684.605 1353.88,684.605 1354.44,684.605 1355,684.605 1355.56,684.605 1356.12,684.605 1356.67,684.605 1357.23,684.605 1357.79,684.605 1358.35,684.605 1358.91,684.605 1359.47,684.605 1360.03,684.605 1360.59,684.605 1361.15,684.605 1361.71,684.605 1362.27,684.605 1362.83,684.605 1363.39,684.605 1363.94,684.605 1364.5,684.605 1365.06,684.605 1365.62,684.605 1366.18,684.605 1366.74,684.605 1367.3,684.605 1367.86,684.605 1368.42,684.605 1368.98,684.605 1369.54,684.605 1370.1,684.605 1370.66,684.605 1371.21,684.605 1371.77,684.605 1372.33,684.605 1372.89,684.605 1373.45,684.605 1374.01,684.605 1374.57,684.605 1375.13,684.605 1375.69,684.605 1376.25,684.605 1376.81,684.605 1377.37,684.605 1377.93,684.605 1378.49,684.605 1379.04,684.605 1379.6,684.605 1380.16,684.605 1380.72,684.605 1381.28,684.605 1381.84,684.605 1382.4,684.605 1382.96,684.605 1383.52,684.605 1384.08,684.605 1384.64,684.605 1385.2,684.605 1385.76,684.605 1386.31,684.605 1386.87,684.605 1387.43,684.605 1387.99,684.605 1388.55,684.605 1389.11,684.605 1389.67,684.605 1390.23,684.605 1390.79,684.605 1391.35,684.605 1391.91,684.605 1392.47,684.605 1393.03,684.605 1393.58,684.605 1394.14,684.605 1394.7,684.605 1395.26,684.605 1395.82,684.605 1396.38,684.605 1396.94,684.605 1397.5,684.605 1398.06,684.605 1398.62,684.605 1399.18,684.605 1399.74,684.605 1400.3,684.605 1400.86,684.605 1401.41,684.605 1401.97,684.605 1402.53,684.605 1403.09,684.605 1403.65,684.605 1404.21,684.605 1404.77,684.605 1405.33,684.605 1405.89,684.605 1406.45,684.605 1407.01,684.605 1407.57,684.605 1408.13,684.605 1408.68,684.605 1409.24,684.605 1409.8,684.605 1410.36,684.605 1410.92,684.605 1411.48,684.605 1412.04,684.605 1412.6,684.605 1413.16,684.605 1413.72,684.605 1414.28,684.605 1414.84,684.605 1415.4,684.605 1415.95,684.605 1416.51,684.605 1417.07,684.605 1417.63,684.605 1418.19,684.605 1418.75,684.605 1419.31,684.605 1419.87,684.605 1420.43,684.605 1420.99,684.605 1421.55,684.605 1422.11,684.605 1422.67,684.605 1423.23,684.605 1423.78,684.605 1424.34,684.605 1424.9,684.605 1425.46,684.605 1426.02,684.605 1426.58,684.605 1427.14,684.605 1427.7,684.605 1428.26,684.605 1428.82,684.605 1429.38,684.605 1429.94,684.605 1430.5,684.605 1431.05,684.605 1431.61,684.605 1432.17,684.605 1432.73,684.605 1433.29,684.605 1433.85,684.605 1434.41,684.605 1434.97,684.605 1435.53,684.605 1436.09,684.605 1436.65,684.605 1437.21,684.605 1437.77,684.605 1438.33,684.605 1438.88,684.605 1439.44,684.605 1440,684.605 1440.56,684.605 1441.12,684.605 1441.68,684.605 1442.24,684.605 1442.8,684.605 1443.36,684.605 1443.92,684.605 1444.48,684.605 1445.04,684.605 1445.6,684.605 1446.15,684.605 1446.71,684.605 1447.27,684.605 1447.83,684.605 1448.39,684.605 1448.95,684.605 1449.51,684.605 1450.07,684.605 1450.63,684.605 1451.19,684.605 1451.75,684.605 1452.31,684.605 1452.87,684.605 1453.42,684.605 1453.98,684.605 1454.54,684.605 1455.1,684.605 1455.66,684.605 1456.22,684.605 1456.78,684.605 1457.34,684.605 1457.9,684.605 1458.46,684.605 1459.02,684.605 1459.58,684.605 1460.14,684.605 1460.7,684.605 1461.25,684.605 1461.81,684.605 1462.37,684.605 1462.93,684.605 1463.49,684.605 1464.05,684.605 1464.61,684.605 1465.17,684.605 1465.73,684.605 1466.29,684.605 1466.85,684.605 1467.41,684.605 1467.97,684.605 1468.52,684.605 1469.08,684.605 1469.64,684.605 1470.2,684.605 1470.76,684.605 1471.32,684.605 1471.88,684.605 1472.44,684.605 1473,684.605 1473.56,684.605 1474.12,684.605 1474.68,684.605 1475.24,684.605 1475.79,684.605 1476.35,684.605 1476.91,684.605 1477.47,684.605 1478.03,684.605 1478.59,684.605 1479.15,684.605 1479.71,684.605 1480.27,684.605 1480.83,684.605 1481.39,684.605 1481.95,684.605 1482.51,684.605 1483.07,684.605 1483.62,684.605 1484.18,684.605 1484.74,684.605 1485.3,684.605 1485.86,684.605 1486.42,684.605 1486.98,684.605 1487.54,684.605 1488.1,684.605 1488.66,684.605 1489.22,684.605 1489.78,684.605 1490.34,684.605 1490.89,684.605 1491.45,684.605 1492.01,684.605 1492.57,684.605 1493.13,684.605 1493.69,684.605 1494.25,684.605 1494.81,684.605 1495.37,684.605 1495.93,684.605 1496.49,684.605 1497.05,684.605 1497.61,684.605 1498.16,684.605 1498.72,684.605 1499.28,684.605 1499.84,684.605 1500.4,684.605 1500.96,684.605 1501.52,684.605 1502.08,684.605 1502.64,684.605 1503.2,684.605 1503.76,684.605 1504.32,684.605 1504.88,684.605 1505.44,684.605 1505.99,684.605 1506.55,684.605 1507.11,684.605 1507.67,684.605 1508.23,684.605 1508.79,684.605 1509.35,684.605 1509.91,684.605 1510.47,684.605 1511.03,684.605 1511.59,684.605 1512.15,684.605 1512.71,684.605 1513.26,684.605 1513.82,684.605 1514.38,684.605 1514.94,684.605 1515.5,684.605 1516.06,684.605 1516.62,684.605 1517.18,684.605 1517.74,684.605 1518.3,684.605 1518.86,684.605 1519.42,684.605 1519.98,684.605 1520.53,684.605 1521.09,684.605 1521.65,684.605 1522.21,684.605 1522.77,684.605 1523.33,684.605 1523.89,684.605 1524.45,684.605 1525.01,684.605 1525.57,684.605 1526.13,684.605 1526.69,684.605 1527.25,684.605 1527.81,684.605 1528.36,684.605 1528.92,684.605 1529.48,684.605 1530.04,684.605 1530.6,684.605 1531.16,684.605 1531.72,684.605 1532.28,684.605 1532.84,684.605 1533.4,684.605 1533.96,684.605 1534.52,684.605 1535.08,684.605 1535.63,684.605 1536.19,684.605 1536.75,684.605 1537.31,684.605 1537.87,684.605 1538.43,684.605 1538.99,684.605 1539.55,684.605 1540.11,684.605 1540.67,684.605 1541.23,684.605 1541.79,684.605 1542.35,684.605 1542.9,684.605 1543.46,684.605 1544.02,684.605 1544.58,684.605 1545.14,684.605 1545.7,684.605 1546.26,684.605 1546.82,684.605 1547.38,684.605 1547.94,684.605 1548.5,684.605 1549.06,684.605 1549.62,684.605 1550.18,684.605 1550.73,684.605 1551.29,684.605 1551.85,684.605 1552.41,684.605 1552.97,684.605 1553.53,684.605 1554.09,684.605 1554.65,684.605 1555.21,684.605 1555.77,684.605 1556.33,684.605 1556.89,684.605 1557.45,684.605 1558,684.605 1558.56,684.605 1559.12,684.605 1559.68,684.605 1560.24,684.605 1560.8,684.605 1561.36,684.605 1561.92,684.605 1562.48,684.605 1563.04,684.605 1563.6,684.605 1564.16,684.605 1564.72,684.605 1565.28,684.605 1565.83,684.605 1566.39,684.605 1566.95,684.605 1567.51,684.605 1568.07,684.605 1568.63,684.605 1569.19,684.605 1569.75,684.605 1570.31,684.605 1570.87,684.605 1571.43,684.605 1571.99,684.605 1572.55,684.605 1573.1,684.605 1573.66,684.605 1574.22,684.605 1574.78,684.605 1575.34,684.605 1575.9,684.605 1576.46,684.605 1577.02,684.605 1577.58,684.605 1578.14,684.605 1578.7,684.605 1579.26,684.605 1579.82,684.605 1580.37,684.605 1580.93,684.605 1581.49,684.605 1582.05,684.605 1582.61,684.605 1583.17,684.605 1583.73,684.605 1584.29,684.605 1584.85,684.605 1585.41,684.605 1585.97,684.605 1586.53,684.605 1587.09,684.605 1587.65,684.605 1588.2,684.605 1588.76,684.605 1589.32,684.605 1589.88,684.605 1590.44,684.605 1591,684.605 1591.56,684.605 1592.12,684.605 1592.68,684.605 1593.24,684.605 1593.8,684.605 1594.36,684.605 1594.92,684.605 1595.47,684.605 1596.03,684.605 1596.59,684.605 1597.15,684.605 1597.71,684.605 1598.27,684.605 1598.83,684.605 1599.39,684.605 1599.95,684.605 1600.51,684.605 1601.07,684.605 1601.63,684.605 1602.19,684.605 1602.74,684.605 1603.3,684.605 1603.86,684.605 1604.42,684.605 1604.98,684.605 1605.54,684.605 1606.1,684.605 1606.66,684.605 1607.22,684.605 1607.78,684.605 1608.34,684.605 1608.9,684.605 1609.46,684.605 1610.02,684.605 1610.57,684.605 1611.13,684.605 1611.69,684.605 1612.25,684.605 1612.81,684.605 1613.37,684.605 1613.93,684.605 1614.49,684.605 1615.05,684.605 1615.61,684.605 1616.17,684.605 1616.73,684.605 1617.29,684.605 1617.84,684.605 1618.4,684.605 1618.96,684.605 1619.52,684.605 1620.08,684.605 1620.64,684.605 1621.2,684.605 1621.76,684.605 1622.32,684.605 1622.88,684.605 1623.44,684.605 1624,684.605 1624.56,684.605 1625.11,684.605 1625.67,684.605 1626.23,684.605 1626.79,684.605 1627.35,684.605 1627.91,684.605 1628.47,684.605 1629.03,684.605 1629.59,684.605 1630.15,684.605 1630.71,684.605 1631.27,684.605 1631.83,684.605 1632.39,684.605 1632.94,684.605 1633.5,684.605 1634.06,684.605 1634.62,684.605 1635.18,684.605 1635.74,684.605 1636.3,684.605 1636.86,684.605 1637.42,684.605 1637.98,684.605 1638.54,684.605 1639.1,684.605 1639.66,684.605 1640.21,684.605 1640.77,684.605 1641.33,684.605 1641.89,684.605 1642.45,684.605 1643.01,684.605 1643.57,684.605 1644.13,684.605 1644.69,684.605 1645.25,684.605 1645.81,684.605 1646.37,684.605 1646.93,684.605 1647.48,684.605 1648.04,684.605 1648.6,684.605 1649.16,684.605 1649.72,684.605 1650.28,684.605 1650.84,684.605 1651.4,684.605 1651.96,684.605 1652.52,684.605 1653.08,684.605 1653.64,684.605 1654.2,684.605 1654.76,684.605 1655.31,684.605 1655.87,684.605 1656.43,684.605 1656.99,684.605 1657.55,684.605 1658.11,684.605 1658.67,684.605 1659.23,684.605 1659.79,684.605 1660.35,684.605 1660.91,684.605 1661.47,684.605 1662.03,684.605 1662.58,684.605 1663.14,684.605 1663.7,684.605 1664.26,684.605 1664.82,684.605 1665.38,684.605 1665.94,684.605 1666.5,684.605 1667.06,684.605 1667.62,684.605 1668.18,684.605 1668.74,684.605 1669.3,684.605 1669.85,684.605 1670.41,684.605 1670.97,684.605 1671.53,684.605 1672.09,684.605 1672.65,684.605 1673.21,684.605 1673.77,684.605 1674.33,684.605 1674.89,684.605 1675.45,684.605 1676.01,684.605 1676.57,684.605 1677.13,684.605 1677.68,684.605 1678.24,684.605 1678.8,684.605 1679.36,684.605 1679.92,684.605 1680.48,684.605 1681.04,684.605 1681.6,684.605 1682.16,684.605 1682.72,684.605 1683.28,684.605 1683.84,684.605 1684.4,684.605 1684.95,684.605 1685.51,684.605 1686.07,684.605 1686.63,684.605 1687.19,684.605 1687.75,684.605 1688.31,684.605 1688.87,684.605 1689.43,684.605 1689.99,684.605 1690.55,684.605 1691.11,684.605 1691.67,684.605 1692.23,684.605 1692.78,684.605 1693.34,684.605 1693.9,684.605 1694.46,684.605 1695.02,684.605 1695.58,684.605 1696.14,684.605 1696.7,684.605 1697.26,684.605 1697.82,684.605 1698.38,684.605 1698.94,684.605 1699.5,684.605 1700.05,684.605 1700.61,684.605 1701.17,684.605 1701.73,684.605 1702.29,684.605 1702.85,684.605 1703.41,684.605 1703.97,684.605 1704.53,684.605 1705.09,684.605 1705.65,684.605 1706.21,684.605 1706.77,684.605 1707.32,684.605 1707.88,684.605 1708.44,684.605 1709,684.605 1709.56,684.605 1710.12,684.605 1710.68,684.605 1711.24,684.605 1711.8,684.605 1712.36,684.605 1712.92,684.605 1713.48,684.605 1714.04,684.605 1714.6,684.605 1715.15,684.605 1715.71,684.605 1716.27,684.605 1716.83,684.605 1717.39,684.605 1717.95,684.605 1718.51,684.605 1719.07,684.605 1719.63,684.605 1720.19,684.605 1720.75,684.605 1721.31,684.605 1721.87,684.605 1722.42,684.605 1722.98,684.605 1723.54,684.605 1724.1,684.605 1724.66,684.605 1725.22,684.605 1725.78,684.605 1726.34,684.605 1726.9,684.605 1727.46,684.605 1728.02,684.605 1728.58,684.605 1729.14,684.605 1729.69,684.605 1730.25,684.605 1730.81,684.605 1731.37,684.605 1731.93,684.605 1732.49,684.605 1733.05,684.605 1733.61,684.605 1734.17,684.605 1734.73,684.605 1735.29,684.605 1735.85,684.605 1736.41,684.605 1736.97,684.605 1737.52,684.605 1738.08,684.605 1738.64,684.605 1739.2,684.605 1739.76,684.605 1740.32,684.605 1740.88,684.605 1741.44,684.605 1742,684.605 1742.56,684.605 1743.12,684.605 1743.68,684.605 1744.24,684.605 1744.79,684.605 1745.35,684.605 1745.91,684.605 1746.47,684.605 1747.03,684.605 1747.59,684.605 1748.15,684.605 1748.71,684.605 1749.27,684.605 1749.83,684.605 1750.39,684.605 1750.95,684.605 1751.51,684.605 1752.06,684.605 1752.62,684.605 1753.18,684.605 1753.74,684.605 1754.3,684.605 1754.86,684.605 1755.42,684.605 1755.98,684.605 1756.54,684.605 1757.1,684.605 1757.66,684.605 1758.22,684.605 1758.78,684.605 1759.34,684.605 1759.89,684.605 1760.45,684.605 1761.01,684.605 1761.57,684.605 1762.13,684.605 1762.69,684.605 1763.25,684.605 1763.81,684.605 1764.37,684.605 1764.93,684.605 1765.49,684.605 1766.05,684.605 1766.61,684.605 1767.16,684.605 1767.72,684.605 1768.28,684.605 1768.84,684.605 1769.4,684.605 1769.96,684.605 1770.52,684.605 1771.08,684.605 1771.64,684.605 1772.2,684.605 1772.76,684.605 1773.32,684.605 1773.88,684.605 1774.43,684.605 1774.99,684.605 1775.55,684.605 1776.11,684.605 1776.67,684.605 1777.23,684.605 1777.79,684.605 1778.35,684.605 1778.91,684.605 1779.47,684.605 1780.03,684.605 1780.59,684.605 1781.15,684.605 1781.71,684.605 1782.26,684.605 1782.82,684.605 1783.38,684.605 1783.94,684.605 1784.5,684.605 1785.06,684.605 1785.62,684.605 1786.18,684.605 1786.74,684.605 1787.3,684.605 1787.86,684.605 1788.42,684.605 1788.98,684.605 1789.53,684.605 1790.09,684.605 1790.65,684.605 1791.21,684.605 1791.77,684.605 1792.33,684.605 1792.89,684.605 1793.45,684.605 1794.01,684.605 1794.57,684.605 1795.13,684.605 1795.69,684.605 1796.25,684.605 1796.8,684.605 1797.36,684.605 1797.92,684.605 1798.48,684.605 1799.04,684.605 1799.6,684.605 1800.16,684.605 1800.72,684.605 1801.28,684.605 1801.84,684.605 1802.4,684.605 1802.96,684.605 1803.52,684.605 1804.08,684.605 1804.63,684.605 1805.19,684.605 1805.75,684.605 1806.31,684.605 1806.87,684.605 1807.43,684.605 1807.99,684.605 1808.55,684.605 1809.11,684.605 1809.67,684.605 1810.23,684.605 1810.79,684.605 1811.35,684.605 1811.9,684.605 1812.46,684.605 1813.02,684.605 1813.58,684.605 1814.14,684.605 1814.7,684.605 1815.26,684.605 1815.82,684.605 1816.38,684.605 1816.94,684.605 1817.5,684.605 1818.06,684.605 1818.62,684.605 1819.18,684.605 1819.73,684.605 1820.29,684.605 1820.85,684.605 1821.41,684.605 1821.97,684.605 1822.53,684.605 1823.09,684.605 1823.65,684.605 1824.21,684.605 1824.77,684.605 1825.33,684.605 1825.89,684.605 1826.45,684.605 1827,684.605 1827.56,684.605 1828.12,684.605 1828.68,684.605 1829.24,684.605 1829.8,684.605 1830.36,684.605 1830.92,684.605 1831.48,684.605 1832.04,684.605 1832.6,684.605 1833.16,684.605 1833.72,684.605 1834.27,684.605 1834.83,684.605 1835.39,684.605 1835.95,684.605 1836.51,684.605 1837.07,684.605 1837.63,684.605 1838.19,684.605 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030896106247235 ± 0.025525907745760617\nProjected Energy: -4.020223712679966 ± (0.006065839779302529, 0.006150626461840503)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.510701</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2954e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.799e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0399e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.553e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.896e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.798e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133743\n -0.759019192277087\n  0.1358418221962232\n  0.157899986946072\n  0.8767114411781325\n  1.5305929970973313\n  1.5835732611867446\n  3.072870330325861\n  3.125672653951842\n  4.86210722156217\n  6.260694850380599\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
