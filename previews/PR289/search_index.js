var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21511694087404523 ± 0.0024223550041978653\n   G2(1) = 0.916721995074785 ± 0.0008590950456929622\n   G2(2) = 0.9812247458276613 ± 0.0006991410560071851\n   G2(3) = 0.9889895773210631 ± 0.000758075792626532\n   G2(4) = 0.9812247458276613 ± 0.0006991410560071851\n   G2(5) = 0.916721995074785 ± 0.0008590950456929622\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.053142238358209 ± 0.13948140582599397\n   Replica 2: -4.026574826013145 ± 0.13524895961860042\n   Replica 3: -4.045904138828349 ± 0.11559201715148965\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip600\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip600)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip601\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip600)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip602\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.8 2211.02,1260.8 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.09 2211.02,1004.09 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.391 2211.02,747.391 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.688 2211.02,490.688 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.985 2211.02,233.985 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.8 423.181,1260.8 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.09 423.181,1004.09 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.391 423.181,747.391 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.688 423.181,490.688 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.985 423.181,233.985 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M356.339 1246.6 Q352.728 1246.6 350.899 1250.16 Q349.094 1253.7 349.094 1260.83 Q349.094 1267.94 350.899 1271.5 Q352.728 1275.04 356.339 1275.04 Q359.973 1275.04 361.779 1271.5 Q363.608 1267.94 363.608 1260.83 Q363.608 1253.7 361.779 1250.16 Q359.973 1246.6 356.339 1246.6 M356.339 1242.89 Q362.149 1242.89 365.205 1247.5 Q368.284 1252.08 368.284 1260.83 Q368.284 1269.56 365.205 1274.16 Q362.149 1278.75 356.339 1278.75 Q350.529 1278.75 347.45 1274.16 Q344.395 1269.56 344.395 1260.83 Q344.395 1252.08 347.45 1247.5 Q350.529 1242.89 356.339 1242.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M290.043 1017.44 L306.363 1017.44 L306.363 1021.37 L284.418 1021.37 L284.418 1017.44 Q287.08 1014.68 291.664 1010.05 Q296.27 1005.4 297.451 1004.06 Q299.696 1001.54 300.576 999.8 Q301.478 998.041 301.478 996.351 Q301.478 993.596 299.534 991.86 Q297.613 990.124 294.511 990.124 Q292.312 990.124 289.858 990.888 Q287.427 991.652 284.65 993.203 L284.65 988.48 Q287.474 987.346 289.927 986.767 Q292.381 986.189 294.418 986.189 Q299.789 986.189 302.983 988.874 Q306.177 991.559 306.177 996.05 Q306.177 998.179 305.367 1000.1 Q304.58 1002 302.474 1004.59 Q301.895 1005.26 298.793 1008.48 Q295.691 1011.67 290.043 1017.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M316.224 986.814 L334.58 986.814 L334.58 990.749 L320.506 990.749 L320.506 999.221 Q321.524 998.874 322.543 998.712 Q323.562 998.527 324.58 998.527 Q330.367 998.527 333.747 1001.7 Q337.126 1004.87 337.126 1010.29 Q337.126 1015.86 333.654 1018.97 Q330.182 1022.05 323.862 1022.05 Q321.687 1022.05 319.418 1021.67 Q317.173 1021.3 314.765 1020.56 L314.765 1015.86 Q316.849 1017 319.071 1017.55 Q321.293 1018.11 323.77 1018.11 Q327.774 1018.11 330.112 1016 Q332.45 1013.9 332.45 1010.29 Q332.45 1006.67 330.112 1004.57 Q327.774 1002.46 323.77 1002.46 Q321.895 1002.46 320.02 1002.88 Q318.168 1003.3 316.224 1004.17 L316.224 986.814 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M356.339 989.892 Q352.728 989.892 350.899 993.457 Q349.094 996.999 349.094 1004.13 Q349.094 1011.23 350.899 1014.8 Q352.728 1018.34 356.339 1018.34 Q359.973 1018.34 361.779 1014.8 Q363.608 1011.23 363.608 1004.13 Q363.608 996.999 361.779 993.457 Q359.973 989.892 356.339 989.892 M356.339 986.189 Q362.149 986.189 365.205 990.795 Q368.284 995.379 368.284 1004.13 Q368.284 1012.86 365.205 1017.46 Q362.149 1022.05 356.339 1022.05 Q350.529 1022.05 347.45 1017.46 Q344.395 1012.86 344.395 1004.13 Q344.395 995.379 347.45 990.795 Q350.529 986.189 356.339 986.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M286.062 730.111 L304.418 730.111 L304.418 734.046 L290.344 734.046 L290.344 742.518 Q291.363 742.171 292.381 742.009 Q293.4 741.824 294.418 741.824 Q300.205 741.824 303.585 744.995 Q306.964 748.166 306.964 753.583 Q306.964 759.162 303.492 762.263 Q300.02 765.342 293.701 765.342 Q291.525 765.342 289.256 764.972 Q287.011 764.601 284.603 763.861 L284.603 759.162 Q286.687 760.296 288.909 760.851 Q291.131 761.407 293.608 761.407 Q297.613 761.407 299.951 759.3 Q302.288 757.194 302.288 753.583 Q302.288 749.972 299.951 747.865 Q297.613 745.759 293.608 745.759 Q291.733 745.759 289.858 746.176 Q288.006 746.592 286.062 747.472 L286.062 730.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M326.177 733.19 Q322.566 733.19 320.737 736.754 Q318.932 740.296 318.932 747.426 Q318.932 754.532 320.737 758.097 Q322.566 761.638 326.177 761.638 Q329.811 761.638 331.617 758.097 Q333.446 754.532 333.446 747.426 Q333.446 740.296 331.617 736.754 Q329.811 733.19 326.177 733.19 M326.177 729.486 Q331.987 729.486 335.043 734.092 Q338.122 738.676 338.122 747.426 Q338.122 756.152 335.043 760.759 Q331.987 765.342 326.177 765.342 Q320.367 765.342 317.288 760.759 Q314.233 756.152 314.233 747.426 Q314.233 738.676 317.288 734.092 Q320.367 729.486 326.177 729.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M356.339 733.19 Q352.728 733.19 350.899 736.754 Q349.094 740.296 349.094 747.426 Q349.094 754.532 350.899 758.097 Q352.728 761.638 356.339 761.638 Q359.973 761.638 361.779 758.097 Q363.608 754.532 363.608 747.426 Q363.608 740.296 361.779 736.754 Q359.973 733.19 356.339 733.19 M356.339 729.486 Q362.149 729.486 365.205 734.092 Q368.284 738.676 368.284 747.426 Q368.284 756.152 365.205 760.759 Q362.149 765.342 356.339 765.342 Q350.529 765.342 347.45 760.759 Q344.395 756.152 344.395 747.426 Q344.395 738.676 347.45 734.092 Q350.529 729.486 356.339 729.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M284.835 473.408 L307.057 473.408 L307.057 475.399 L294.511 507.968 L289.627 507.968 L301.432 477.343 L284.835 477.343 L284.835 473.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M316.224 473.408 L334.58 473.408 L334.58 477.343 L320.506 477.343 L320.506 485.815 Q321.524 485.468 322.543 485.306 Q323.562 485.121 324.58 485.121 Q330.367 485.121 333.747 488.292 Q337.126 491.463 337.126 496.88 Q337.126 502.459 333.654 505.561 Q330.182 508.639 323.862 508.639 Q321.687 508.639 319.418 508.269 Q317.173 507.898 314.765 507.158 L314.765 502.459 Q316.849 503.593 319.071 504.148 Q321.293 504.704 323.77 504.704 Q327.774 504.704 330.112 502.598 Q332.45 500.491 332.45 496.88 Q332.45 493.269 330.112 491.162 Q327.774 489.056 323.77 489.056 Q321.895 489.056 320.02 489.473 Q318.168 489.889 316.224 490.769 L316.224 473.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M356.339 476.487 Q352.728 476.487 350.899 480.051 Q349.094 483.593 349.094 490.723 Q349.094 497.829 350.899 501.394 Q352.728 504.936 356.339 504.936 Q359.973 504.936 361.779 501.394 Q363.608 497.829 363.608 490.723 Q363.608 483.593 361.779 480.051 Q359.973 476.487 356.339 476.487 M356.339 472.783 Q362.149 472.783 365.205 477.389 Q368.284 481.973 368.284 490.723 Q368.284 499.449 365.205 504.056 Q362.149 508.639 356.339 508.639 Q350.529 508.639 347.45 504.056 Q344.395 499.449 344.395 490.723 Q344.395 481.973 347.45 477.389 Q350.529 472.783 356.339 472.783 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M256.664 247.33 L264.303 247.33 L264.303 220.964 L255.992 222.631 L255.992 218.372 L264.256 216.705 L268.932 216.705 L268.932 247.33 L276.571 247.33 L276.571 251.265 L256.664 251.265 L256.664 247.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M296.015 219.784 Q292.404 219.784 290.576 223.348 Q288.77 226.89 288.77 234.02 Q288.77 241.126 290.576 244.691 Q292.404 248.233 296.015 248.233 Q299.65 248.233 301.455 244.691 Q303.284 241.126 303.284 234.02 Q303.284 226.89 301.455 223.348 Q299.65 219.784 296.015 219.784 M296.015 216.08 Q301.826 216.08 304.881 220.686 Q307.96 225.27 307.96 234.02 Q307.96 242.747 304.881 247.353 Q301.826 251.936 296.015 251.936 Q290.205 251.936 287.127 247.353 Q284.071 242.747 284.071 234.02 Q284.071 225.27 287.127 220.686 Q290.205 216.08 296.015 216.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M326.177 219.784 Q322.566 219.784 320.737 223.348 Q318.932 226.89 318.932 234.02 Q318.932 241.126 320.737 244.691 Q322.566 248.233 326.177 248.233 Q329.811 248.233 331.617 244.691 Q333.446 241.126 333.446 234.02 Q333.446 226.89 331.617 223.348 Q329.811 219.784 326.177 219.784 M326.177 216.08 Q331.987 216.08 335.043 220.686 Q338.122 225.27 338.122 234.02 Q338.122 242.747 335.043 247.353 Q331.987 251.936 326.177 251.936 Q320.367 251.936 317.288 247.353 Q314.233 242.747 314.233 234.02 Q314.233 225.27 317.288 220.686 Q320.367 216.08 326.177 216.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M356.339 219.784 Q352.728 219.784 350.899 223.348 Q349.094 226.89 349.094 234.02 Q349.094 241.126 350.899 244.691 Q352.728 248.233 356.339 248.233 Q359.973 248.233 361.779 244.691 Q363.608 241.126 363.608 234.02 Q363.608 226.89 361.779 223.348 Q359.973 219.784 356.339 219.784 M356.339 216.08 Q362.149 216.08 365.205 220.686 Q368.284 225.27 368.284 234.02 Q368.284 242.747 365.205 247.353 Q362.149 251.936 356.339 251.936 Q350.529 251.936 347.45 247.353 Q344.395 242.747 344.395 234.02 Q344.395 225.27 347.45 220.686 Q350.529 216.08 356.339 216.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip602)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.985 4017.76,233.985 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1248.4 456.554,1248.4 457.123,1248.29 457.691,1248.11 458.259,1247.87 458.828,1247.55 459.396,1247.16 459.964,1245.64 460.533,1245.12 461.101,1243.54 461.669,1242.92 462.238,1242.21 462.806,1241.39 463.375,1240.5 463.943,1237.47 464.511,1236.42 465.08,1235.28 465.648,1233.99 466.216,1232.57 466.785,1231.08 467.353,1228.42 467.921,1226.68 468.49,1224.72 469.058,1220.62 469.626,1218.43 470.195,1216.17 470.763,1212.67 471.331,1210.06 471.9,1207.26 472.468,1204.29 473.036,1201.12 473.605,1197.74 474.173,1193.19 474.741,1187.42 475.31,1182.49 475.878,1177.39 476.446,1173.16 477.015,1167.69 477.583,1162.09 478.152,1157.25 478.72,1152.17 479.288,1146.01 479.857,1140.63 480.425,1135 480.993,1129.2 481.562,1122.13 482.13,1114.75 482.698,1103.99 483.267,1095.23 483.835,1088.49 484.403,1078.25 484.972,1071.16 485.54,1063.75 486.108,1054.12 486.677,1046.26 487.245,1037.31 487.813,1027.13 488.382,1018.96 488.95,1009.61 489.518,1000.08 490.087,990.433 490.655,981.719 491.224,971.845 491.792,961.964 492.36,950.871 492.929,940.754 493.497,931.506 494.065,922.222 494.634,911.811 495.202,902.293 495.77,892.663 496.339,881.037 496.907,862.032 497.475,849.804 498.044,836.717 498.612,827.875 499.18,818.823 499.749,808.818 500.317,797.685 500.885,787.577 501.454,778.678 502.022,768.815 502.59,758.908 503.159,748.998 503.727,736.044 504.295,727.318 504.864,717.599 505.432,705.755 506.001,695.343 506.569,686.039 507.137,676.849 507.706,667.642 508.274,656.413 508.842,648.564 509.411,639.674 509.979,631.843 510.547,620.083 511.116,612.627 511.684,603.034 512.252,594.932 512.821,586.825 513.389,579.922 513.957,570.023 514.526,561.105 515.094,555.641 515.662,548.099 516.231,541.743 516.799,533.633 517.367,525.368 517.936,518.395 518.504,512.533 519.072,506.626 519.641,500.879 520.209,491.311 520.778,481.687 521.346,475.519 521.914,469.541 522.483,463.843 523.051,460.217 523.619,453.636 524.188,447.99 524.756,442.535 525.324,436.176 525.893,431.103 526.461,423.901 527.029,419.263 527.598,416.76 528.166,411.305 528.734,405.766 529.303,400.343 529.871,397.147 530.439,389.727 531.008,386.849 531.576,384.117 532.144,378.082 532.713,375.59 533.281,371.051 533.85,369.834 534.418,365.533 534.986,361.174 535.555,357.954 536.123,354.727 536.691,353.591 537.26,349.74 537.828,346.613 538.396,341.698 538.965,339.052 539.533,339.471 540.101,338.587 540.67,334.634 541.238,330.801 541.806,329.121 542.375,324.728 542.943,321.165 543.511,319.907 544.08,319.698 544.648,317.338 545.216,316.192 545.785,312.898 546.353,311.644 546.921,310.611 547.49,307.159 548.058,308.567 548.627,306.607 549.195,305.215 549.763,301.318 550.332,297.437 550.9,293.517 551.468,294.072 552.037,293.34 552.605,291.694 553.173,290.138 553.742,288.604 554.31,287.23 554.878,285.59 555.447,284.261 556.015,281.779 556.583,283.759 557.152,282.02 557.72,280.671 558.288,282.315 558.857,281.862 559.425,282.262 559.993,281.795 560.562,282.268 561.13,283.674 561.698,284.718 562.267,282.688 562.835,280.754 563.404,277.104 563.972,276.326 564.54,275.691 565.109,275.05 565.677,276.555 566.245,276.948 566.814,277.016 567.382,278.159 567.95,275.96 568.519,274.874 569.087,274.887 569.655,271.899 570.224,268.951 570.792,269.29 571.36,265.613 571.929,265.255 572.497,263.811 573.065,262.589 573.634,262.403 574.202,259.371 574.77,260.121 575.339,258.757 575.907,259.648 576.476,257.282 577.044,256.165 577.612,258.142 578.181,256.957 578.749,259.828 579.317,258.295 579.886,256.92 580.454,256.752 581.022,257.444 581.591,255.053 582.159,254.745 582.727,253.66 583.296,253.467 583.864,252.458 584.432,252.362 585.001,251.543 585.569,251.322 586.137,251.331 586.706,249.208 587.274,252.055 587.842,251.988 588.411,251.685 588.979,252.439 589.547,250.262 590.116,249.378 590.684,250.327 591.253,249.218 591.821,246.928 592.389,244.997 592.958,244.09 593.526,242.526 594.094,241.894 594.663,243.305 595.231,243.788 595.799,244.035 596.368,243.264 596.936,243.458 597.504,243.724 598.073,242.959 598.641,237.278 599.209,238.162 599.778,238.917 600.346,238.54 600.914,240.201 601.483,240.715 602.051,241.161 602.619,240.599 603.188,242.22 603.756,242.633 604.325,243.015 604.893,242.403 605.461,242.583 606.03,243.776 606.598,243.028 607.166,245.318 607.735,244.51 608.303,243.858 608.871,243.203 609.44,243.271 610.008,242.424 610.576,241.703 611.145,241.096 611.713,241.31 612.281,240.541 612.85,238.947 613.418,238.455 613.986,239.937 614.555,240.358 615.123,241.032 615.691,239.311 616.26,239.761 616.828,240.047 617.396,240.562 617.965,239.767 618.533,239.208 619.102,238.583 619.67,239.035 620.238,240.42 620.807,237.524 621.375,235.052 621.943,238.737 622.512,239.217 623.08,238.646 623.648,240.152 624.217,240.583 624.785,239.954 625.353,238.149 625.922,240.649 626.49,240.998 627.058,241.494 627.627,242.76 628.195,241.947 628.763,242.986 629.332,242.19 629.9,243.367 630.468,244.666 631.037,243.382 631.605,242.305 632.173,241.435 632.742,242.681 633.31,243.883 633.879,244.749 634.447,245.547 635.015,243.529 635.584,243.466 636.152,243.542 636.72,241.403 637.289,242.557 637.857,242.513 638.425,241.468 638.994,242.656 639.562,242.504 640.13,243.41 640.699,242.385 641.267,242.397 641.835,243.464 642.404,243.349 642.972,244.422 643.54,243.216 644.109,243.122 644.677,243.047 645.245,243.028 645.814,241.729 646.382,241.481 646.951,240.34 647.519,239.491 648.087,238.551 648.656,237.866 649.224,237.997 649.792,238.278 650.361,236.382 650.929,236.727 651.497,235.896 652.066,236.148 652.634,237.523 653.202,235.641 653.771,235.974 654.339,234.077 654.907,237.539 655.476,238.877 656.044,239.105 656.612,239.18 657.181,240.462 657.749,239.576 658.317,240.71 658.886,239.808 659.454,239.032 660.022,239.074 660.591,240.209 661.159,242.394 661.728,240.278 662.296,240.141 662.864,240.194 663.433,239.156 664.001,239.454 664.569,240.442 665.138,242.211 665.706,242.832 666.274,242.674 666.843,242.549 667.411,242.38 667.979,242.327 668.548,243.429 669.116,243.282 669.684,244.104 670.253,242.877 670.821,242.511 671.389,243.303 671.958,241.814 672.526,242.864 673.094,240.634 673.663,240.551 674.231,240.497 674.799,237.291 675.368,238.358 675.936,239.37 676.505,239.146 677.073,242.198 677.641,241.981 678.21,241.608 678.778,240.234 679.346,239.146 679.915,239.216 680.483,239.066 681.051,239.048 681.62,236.936 682.188,238.044 682.756,237.077 683.325,236.169 683.893,236.264 684.461,237.602 685.03,238.687 685.598,237.627 686.166,238.711 686.735,237.526 687.303,238.586 687.871,239.443 688.44,240.277 689.008,241.327 689.577,241.762 690.145,239.386 690.713,238.261 691.282,237.02 691.85,235.992 692.418,236.923 692.987,237.91 693.555,238.921 694.123,237.878 694.692,236.92 695.26,234.715 695.828,233.79 696.397,234.121 696.965,235.334 697.533,234.374 698.102,235.797 698.67,235.045 699.238,235.18 699.807,233.135 700.375,233.33 700.943,231.763 701.512,233.176 702.08,231.599 702.648,228.868 703.217,230.448 703.785,231.823 704.354,233.094 704.922,232.589 705.49,230.882 706.059,230.272 706.627,232.933 707.195,236.306 707.764,236.065 708.332,235.979 708.9,236.067 709.469,236.256 710.037,237.254 710.605,237.197 711.174,236.209 711.742,236.264 712.31,236.475 712.879,236.561 713.447,236.748 714.015,235.711 714.584,234.829 715.152,236.178 715.72,236.312 716.289,233.42 716.857,234.636 717.425,235.96 717.994,234.049 718.562,235.343 719.131,234.511 719.699,235.746 720.267,236.896 720.836,237.65 721.404,238.799 721.972,237.47 722.541,235.391 723.109,235.601 723.677,233.921 724.246,235.202 724.814,236.289 725.382,237.148 725.951,237.151 726.519,233.142 727.087,233.324 727.656,232.511 728.224,228.802 728.792,229.413 729.361,230.806 729.929,231.285 730.497,229.775 731.066,230.366 731.634,228.883 732.203,230.738 732.771,232.475 733.339,233.95 733.908,236.197 734.476,234.501 735.044,233 735.613,234.515 736.181,235.839 736.749,236.058 737.318,237.252 737.886,235.497 738.454,235.617 739.023,233.666 739.591,235.039 740.159,236.276 740.728,236.616 741.296,235.687 741.864,236.689 742.433,237.667 743.001,239.888 743.569,235.86 744.138,240.291 744.706,239.936 745.274,241.884 745.843,240.57 746.411,241.212 746.98,241.041 747.548,240.619 748.116,240.437 748.685,241.567 749.253,241.384 749.821,241.03 750.39,242.774 750.958,242.353 751.526,243.047 752.095,243.511 752.663,240.952 753.231,240.663 753.8,241.385 754.368,239.96 754.936,239.553 755.505,240.462 756.073,241.276 756.641,240.884 757.21,240.318 757.778,240.1 758.346,240.738 758.915,240.332 759.483,240.079 760.052,239.821 760.62,239.491 761.188,239.264 761.757,239.1 762.325,241.087 762.893,240.789 763.462,239.454 764.03,238.997 764.598,235.566 765.167,236.382 765.735,238.358 766.303,238.939 766.872,237.6 767.44,237.343 768.008,237.081 768.577,234.732 769.145,235.871 769.713,233.658 770.282,233.909 770.85,234.038 771.418,233.116 771.987,231.216 772.555,230.449 773.123,230.731 773.692,230.956 774.26,231.235 774.829,230.377 775.397,229.65 775.965,232.05 776.534,231.289 777.102,228.725 777.67,229.224 778.239,228.692 778.807,228.98 779.375,230.37 779.944,231.512 780.512,231.7 781.08,228.979 781.649,229.447 782.217,229.659 782.785,230.242 783.354,226.606 783.922,228.651 784.49,227.302 785.059,227.852 785.627,230.59 786.195,230.919 786.764,230.476 787.332,230.974 787.9,232.196 788.469,232.535 789.037,233.811 789.606,234.169 790.174,234.346 790.742,236.439 791.311,236.283 791.879,238.442 792.447,237.36 793.016,236.224 793.584,238.141 794.152,236.969 794.721,234.785 795.289,232.913 795.857,233.221 796.426,234.532 796.994,234.641 797.562,233.69 798.131,234.874 798.699,234.004 799.267,234.124 799.836,235.447 800.404,235.498 800.972,238.762 801.541,239.612 802.109,241.23 802.678,239.977 803.246,240.608 803.814,242.176 804.383,239.606 804.951,240.289 805.519,239.722 806.088,240.31 806.656,240.021 807.224,239.617 807.793,239.317 808.361,237.826 808.929,237.639 809.498,236.487 810.066,237.417 810.634,237 811.203,234.771 811.771,235.786 812.339,236.636 812.908,235.28 813.476,233.197 814.044,233.405 814.613,231.52 815.181,230.867 815.749,233.245 816.318,231.292 816.886,231.192 817.455,232.266 818.023,234.363 818.591,232.449 819.16,231.395 819.728,231.651 820.296,230.808 820.865,230.17 821.433,230.621 822.001,228.928 822.57,231.586 823.138,231.867 823.706,232.031 824.275,231.133 824.843,230.366 825.411,229.565 825.98,230.106 826.548,228.593 827.116,228.138 827.685,227.747 828.253,228.397 828.821,227.981 829.39,229.671 829.958,229.9 830.526,230.243 831.095,229.798 831.663,232.358 832.232,233.79 832.8,234.878 833.368,235.948 833.937,234.116 834.505,236.47 835.073,234.42 835.642,233.534 836.21,236.009 836.778,235.126 837.347,233.147 837.915,232.322 838.483,231.737 839.052,231.094 839.62,229.755 840.188,230.398 840.757,232.871 841.325,234.211 841.893,233.276 842.462,235.828 843.03,232.807 843.598,233.225 844.167,234.508 844.735,237.827 845.304,237.717 845.872,238.695 846.44,239.589 847.009,236.488 847.577,235.244 848.145,236.333 848.714,240.356 849.282,237.831 849.85,238.764 850.419,238.451 850.987,238.212 851.555,238.396 852.124,237.039 852.692,236.815 853.26,237.892 853.829,240.011 854.397,238.635 854.965,237.307 855.534,234.464 856.102,232.285 856.67,233.642 857.239,231.58 857.807,232.039 858.375,233.151 858.944,232.5 859.512,232.842 860.081,233.058 860.649,232.295 861.217,231.656 861.786,233.042 862.354,232.286 862.922,233.722 863.491,233.861 864.059,235.195 864.627,236.161 865.196,237.182 865.764,239.166 866.332,238.227 866.901,237.04 867.469,236.863 868.037,235.669 868.606,235.781 869.174,236.138 869.742,234.979 870.311,236.325 870.879,236.386 871.447,239.407 872.016,239.02 872.584,237.637 873.152,236.553 873.721,235.387 874.289,236.414 874.858,237.174 875.426,235.105 875.994,235.136 876.563,235.224 877.131,239.169 877.699,237.793 878.268,236.482 878.836,237.398 879.404,235.204 879.973,237.2 880.541,239.049 881.109,237.748 881.678,242.531 882.246,243.051 882.814,244.427 883.383,244.816 883.951,243.966 884.519,243.362 885.088,240.934 885.656,242.57 886.224,241.856 886.793,242.258 887.361,241.722 887.93,240.033 888.498,239.305 889.066,238.893 889.635,239.343 890.203,237.851 890.771,236.525 891.34,236.445 891.908,241.119 892.476,240.601 893.045,241.116 893.613,240.472 894.181,241.139 894.75,240.394 895.318,236.729 895.886,236.348 896.455,235.016 897.023,233.767 897.591,233.542 898.16,232.603 898.728,232.57 899.296,232.551 899.865,232.802 900.433,232.696 901.001,233.493 901.57,232.481 902.138,232.383 902.707,232.497 903.275,230.565 903.843,227.706 904.412,227.888 904.98,228.203 905.548,228.68 906.117,229.846 906.685,228.047 907.253,229.505 907.822,228.66 908.39,232.037 908.958,231.177 909.527,232.303 910.095,230.442 910.663,228.636 911.232,227.131 911.8,225.802 912.368,226.414 912.937,228.062 913.505,230.529 914.073,230.838 914.642,229.161 915.21,227.618 915.779,229.112 916.347,229.637 916.915,230.824 917.484,232.195 918.052,232.208 918.62,232.261 919.189,231.618 919.757,233.007 920.325,232.147 920.894,234.367 921.462,235.561 922.03,235.616 922.599,238.784 923.167,237.4 923.735,236.08 924.304,237.997 924.872,237.901 925.44,238.811 926.009,237.63 926.577,237.456 927.145,238.018 927.714,236.74 928.282,234.546 928.85,233.456 929.419,231.284 929.987,232.559 930.556,233.792 931.124,233.875 931.692,234.146 932.261,236.011 932.829,236.133 933.397,235.95 933.966,236.79 934.534,236.57 935.102,236.381 935.671,234.184 936.239,233.134 936.807,233.135 937.376,233.155 937.944,234.288 938.512,234.439 939.081,229.45 939.649,227.647 940.217,229.27 940.786,228.645 941.354,230.125 941.922,231.581 942.491,229.643 943.059,229.86 943.627,232.256 944.196,234.367 944.764,233.342 945.333,234.422 945.901,232.412 946.469,234.808 947.038,235.899 947.606,236.793 948.174,235.788 948.743,236.733 949.311,235.808 949.879,236.876 950.448,238.935 951.016,238.969 951.584,239.814 952.153,239.471 952.721,239.049 953.289,237.654 953.858,234.285 954.426,233.131 954.994,232.133 955.563,231.231 956.131,230.597 956.699,230.933 957.268,231.326 957.836,231.568 958.405,230.489 958.973,232.959 959.541,230.951 960.11,231.21 960.678,228.977 961.246,230.594 961.815,230.97 962.383,230.16 962.951,228.502 963.52,232.04 964.088,232.945 964.656,232.418 965.225,231.648 965.793,231.864 966.361,235.346 966.93,232.252 967.498,233.441 968.066,233.566 968.635,233.7 969.203,233.931 969.771,233.859 970.34,235.156 970.908,235.983 971.476,236.107 972.045,238.036 972.613,238.898 973.182,237.427 973.75,238.211 974.318,236.871 974.887,236.544 975.455,236.543 976.023,237.463 976.592,235.294 977.16,235.069 977.728,234.206 978.297,236.265 978.865,233.248 979.433,234.246 980.002,233.352 980.57,234.366 981.138,233.63 981.707,233.643 982.275,233.731 982.843,235.883 983.412,235.798 983.98,238.849 984.548,237.273 985.117,238.133 985.685,238.793 986.253,239.434 986.822,236.933 987.39,237.843 987.959,235.539 988.527,238.532 989.095,238.151 989.664,237.791 990.232,236.333 990.8,239.197 991.369,235.38 991.937,237.288 992.505,236.037 993.074,237.037 993.642,235.711 994.21,235.496 994.779,236.449 995.347,235.22 995.915,235.068 996.484,233.855 997.052,231.463 997.62,230.66 998.189,232.699 998.757,232.68 999.325,230.818 999.894,233.908 1000.46,233.934 1001.03,234.981 1001.6,235.051 1002.17,237.025 1002.74,238.834 1003.3,236.424 1003.87,236.129 1004.44,237.069 1005.01,236.707 1005.58,237.634 1006.15,237.552 1006.71,237.485 1007.28,236.294 1007.85,236.129 1008.42,237.088 1008.99,236.957 1009.56,238.744 1010.12,239.35 1010.69,238.869 1011.26,237.265 1011.83,233.893 1012.4,232.848 1012.97,231.881 1013.53,234.007 1014.1,232.794 1014.67,234.86 1015.24,233.623 1015.81,235.716 1016.38,237.381 1016.94,237.182 1017.51,237.817 1018.08,238.366 1018.65,238.942 1019.22,239.616 1019.79,236.271 1020.35,234.049 1020.92,234.865 1021.49,233.682 1022.06,232.549 1022.63,234.563 1023.2,234.347 1023.76,235.21 1024.33,233.997 1024.9,233.849 1025.47,234.908 1026.04,233.531 1026.61,230.5 1027.17,229.599 1027.74,229.794 1028.31,227.862 1028.88,227.273 1029.45,227.769 1030.02,227.175 1030.58,227.502 1031.15,229.115 1031.72,230.353 1032.29,227.645 1032.86,227.014 1033.43,226.581 1033.99,228.246 1034.56,229.591 1035.13,230.061 1035.7,232.37 1036.27,234.304 1036.84,235.283 1037.4,234.42 1037.97,233.477 1038.54,235.266 1039.11,232.042 1039.68,231.037 1040.25,231.303 1040.81,233.731 1041.38,234.648 1041.95,234.765 1042.52,233.823 1043.09,233.943 1043.66,233.952 1044.22,233.059 1044.79,232.044 1045.36,231.236 1045.93,231.503 1046.5,234.862 1047.07,235.962 1047.63,235.77 1048.2,231.71 1048.77,232.779 1049.34,230.887 1049.91,231.282 1050.48,233.458 1051.05,233.679 1051.61,235.882 1052.18,234.888 1052.75,233.91 1053.32,234.929 1053.89,234.728 1054.46,234.869 1055.02,234.718 1055.59,233.454 1056.16,233.885 1056.73,232.927 1057.3,234.117 1057.87,234.257 1058.43,232.487 1059,230.529 1059.57,233.941 1060.14,234.934 1060.71,236.119 1061.28,233.818 1061.84,233.992 1062.41,235.064 1062.98,234.97 1063.55,234.696 1064.12,234.865 1064.69,237.13 1065.25,236.809 1065.82,239.805 1066.39,241.517 1066.96,241.885 1067.53,240.277 1068.1,239.908 1068.66,240.509 1069.23,241.131 1069.8,241.562 1070.37,240.219 1070.94,238.551 1071.51,239.062 1072.07,237.492 1072.64,239.165 1073.21,238.813 1073.78,239.309 1074.35,237.816 1074.92,238.438 1075.48,238.119 1076.05,236.467 1076.62,235.091 1077.19,234.884 1077.76,235.711 1078.33,237.734 1078.89,237.414 1079.46,237.228 1080.03,236.775 1080.6,236.565 1081.17,235.196 1081.74,232.916 1082.3,232.674 1082.87,229.719 1083.44,228.767 1084.01,230.097 1084.58,230.957 1085.15,232.176 1085.71,230.092 1086.28,229.051 1086.85,230.359 1087.42,231.395 1087.99,232.304 1088.56,236.261 1089.12,234.976 1089.69,233.66 1090.26,233.46 1090.83,233.493 1091.4,231.712 1091.97,227.774 1092.53,226.105 1093.1,225.705 1093.67,227.148 1094.24,228.606 1094.81,230.138 1095.38,231.404 1095.94,232.542 1096.51,232.559 1097.08,236.581 1097.65,235.132 1098.22,235.048 1098.79,233.815 1099.35,234.735 1099.92,234.76 1100.49,233.599 1101.06,232.346 1101.63,232.597 1102.2,233.636 1102.76,233.681 1103.33,233.783 1103.9,231.69 1104.47,232.024 1105.04,232.869 1105.61,232.965 1106.17,233.771 1106.74,234.643 1107.31,234.355 1107.88,237.419 1108.45,233.862 1109.02,237.841 1109.58,237.646 1110.15,238.564 1110.72,237.395 1111.29,239.178 1111.86,238.653 1112.43,238.301 1112.99,238.959 1113.56,239.63 1114.13,239.304 1114.7,239.013 1115.27,238.514 1115.84,237.122 1116.4,236.842 1116.97,237.438 1117.54,234.018 1118.11,233.823 1118.68,233.526 1119.25,232.544 1119.81,232.532 1120.38,233.393 1120.95,231.16 1121.52,230.166 1122.09,228.133 1122.66,225.45 1123.23,224.638 1123.79,225.193 1124.36,224.783 1124.93,226.327 1125.5,223.979 1126.07,226.946 1126.64,225.323 1127.2,226.933 1127.77,224.088 1128.34,225.675 1128.91,226.549 1129.48,224.099 1130.05,221.815 1130.61,221.754 1131.18,220.796 1131.75,222.851 1132.32,223.514 1132.89,225.405 1133.46,222.112 1134.02,220.909 1134.59,222.014 1135.16,220.88 1135.73,220.929 1136.3,220.86 1136.87,219.895 1137.43,223.043 1138,227.287 1138.57,226.909 1139.14,226.771 1139.71,230.784 1140.28,232.32 1140.84,233.596 1141.41,233.056 1141.98,233.465 1142.55,234.761 1143.12,233.928 1143.69,235.316 1144.25,234.462 1144.82,235.557 1145.39,237.678 1145.96,237.676 1146.53,235.712 1147.1,237.768 1147.66,237.849 1148.23,237.926 1148.8,237.744 1149.37,235.919 1149.94,236.032 1150.51,235.945 1151.07,236.045 1151.64,238.072 1152.21,235.643 1152.78,237.717 1153.35,238.835 1153.92,237.633 1154.48,238.601 1155.05,240.431 1155.62,242.954 1156.19,243.491 1156.76,242.911 1157.33,241.575 1157.89,239.291 1158.46,239.076 1159.03,237.943 1159.6,238.796 1160.17,238.501 1160.74,236.126 1161.3,234.086 1161.87,234.406 1162.44,236.493 1163.01,236.173 1163.58,236.058 1164.15,237.172 1164.71,233.944 1165.28,233.848 1165.85,234.087 1166.42,233.073 1166.99,234.382 1167.56,235.46 1168.12,235.428 1168.69,237.428 1169.26,238.446 1169.83,237.164 1170.4,237.045 1170.97,236.998 1171.53,237.768 1172.1,237.517 1172.67,235.398 1173.24,236.314 1173.81,236.185 1174.38,235.852 1174.94,236.788 1175.51,233.684 1176.08,233.917 1176.65,233.81 1177.22,233.96 1177.79,235.838 1178.35,235.694 1178.92,235.763 1179.49,234.688 1180.06,235.683 1180.63,236.633 1181.2,237.482 1181.76,235.349 1182.33,235.273 1182.9,234.157 1183.47,234.109 1184.04,235.261 1184.61,235.174 1185.17,237.084 1185.74,237.713 1186.31,235.49 1186.88,237.373 1187.45,237.262 1188.02,236.982 1188.58,236.882 1189.15,238.684 1189.72,238.247 1190.29,239.853 1190.86,239.284 1191.43,239.009 1192,237.472 1192.56,238.471 1193.13,239.133 1193.7,240.744 1194.27,241.511 1194.84,240.746 1195.41,240.148 1195.97,238.513 1196.54,237.905 1197.11,238.211 1197.68,237.724 1198.25,236.438 1198.82,232.175 1199.38,231.353 1199.95,232.357 1200.52,231.411 1201.09,230.528 1201.66,230.498 1202.23,231.602 1202.79,231.726 1203.36,231.672 1203.93,231.935 1204.5,230.966 1205.07,233.266 1205.64,233.318 1206.2,234.36 1206.77,235.167 1207.34,231.946 1207.91,231.821 1208.48,233.05 1209.05,233.442 1209.61,232.178 1210.18,233.069 1210.75,232.291 1211.32,233.447 1211.89,231.577 1212.46,231.73 1213.02,231.831 1213.59,231.857 1214.16,233.066 1214.73,231.944 1215.3,231.964 1215.87,233.028 1216.43,233.241 1217,234.374 1217.57,234.393 1218.14,234.495 1218.71,236.388 1219.28,236.069 1219.84,235.83 1220.41,234.679 1220.98,234.658 1221.55,234.543 1222.12,234.605 1222.69,235.475 1223.25,234.195 1223.82,233.359 1224.39,234.632 1224.96,233.49 1225.53,231.532 1226.1,231.728 1226.66,232.885 1227.23,234.017 1227.8,231.882 1228.37,230.861 1228.94,232.049 1229.51,233.182 1230.07,233.352 1230.64,230.544 1231.21,228.794 1231.78,230.032 1232.35,228.143 1232.92,228.541 1233.48,229.044 1234.05,230.335 1234.62,230.665 1235.19,231.083 1235.76,230.749 1236.33,231.157 1236.89,234.634 1237.46,234.644 1238.03,233.386 1238.6,233.358 1239.17,234.484 1239.74,235.558 1240.3,236.639 1240.87,238.475 1241.44,238.118 1242.01,236.956 1242.58,236.709 1243.15,236.356 1243.71,236.484 1244.28,234.02 1244.85,234.9 1245.42,234.88 1245.99,237.01 1246.56,235.602 1247.12,234.359 1247.69,233.558 1248.26,232.568 1248.83,232.705 1249.4,231.89 1249.97,233.315 1250.53,234.476 1251.1,235.472 1251.67,237.641 1252.24,237.548 1252.81,236.278 1253.38,235.083 1253.94,234.234 1254.51,234.201 1255.08,234.047 1255.65,236.305 1256.22,236.056 1256.79,237.923 1257.35,237.688 1257.92,237.434 1258.49,238.151 1259.06,237.024 1259.63,235.776 1260.2,234.692 1260.76,235.548 1261.33,236.452 1261.9,235.043 1262.47,233.99 1263.04,234.915 1263.61,232.761 1264.18,232.753 1264.74,233.853 1265.31,234.775 1265.88,236.858 1266.45,235.672 1267.02,237.604 1267.59,235.147 1268.15,232.593 1268.72,231.668 1269.29,231.697 1269.86,230.805 1270.43,232.07 1271,230.986 1271.56,231.166 1272.13,230.256 1272.7,229.613 1273.27,229.815 1273.84,229.11 1274.41,227.394 1274.97,226.826 1275.54,227.455 1276.11,227.853 1276.68,229.534 1277.25,229.963 1277.82,231.442 1278.38,232.771 1278.95,234.048 1279.52,234.181 1280.09,233.11 1280.66,237.076 1281.23,240.973 1281.79,241.708 1282.36,242.186 1282.93,241.554 1283.5,239.887 1284.07,240.348 1284.64,237.902 1285.2,236.878 1285.77,239.667 1286.34,241.371 1286.91,240.897 1287.48,242.437 1288.05,241.85 1288.61,243.409 1289.18,242.896 1289.75,242.289 1290.32,242.625 1290.89,240.885 1291.46,241.121 1292.02,240.536 1292.59,238.986 1293.16,238.552 1293.73,238.127 1294.3,238.809 1294.87,239.374 1295.43,239.9 1296,239.172 1296.57,238.577 1297.14,236.96 1297.71,235.485 1298.28,233.093 1298.84,232.888 1299.41,231.598 1299.98,231.796 1300.55,231.699 1301.12,231.698 1301.69,231.466 1302.25,232.474 1302.82,230.099 1303.39,231.431 1303.96,231.767 1304.53,230.827 1305.1,231.11 1305.66,230.985 1306.23,230.334 1306.8,230.597 1307.37,231.003 1307.94,231.173 1308.51,229.208 1309.07,229.298 1309.64,229.717 1310.21,228.026 1310.78,228.23 1311.35,228.581 1311.92,227.804 1312.48,225.226 1313.05,224.817 1313.62,225.523 1314.19,225.031 1314.76,226.582 1315.33,225.965 1315.89,225.527 1316.46,226.154 1317.03,224.687 1317.6,225.459 1318.17,226.056 1318.74,226.586 1319.3,229.372 1319.87,232.922 1320.44,231.094 1321.01,228.338 1321.58,227.073 1322.15,229.785 1322.71,232.352 1323.28,231.645 1323.85,236.266 1324.42,236.26 1324.99,236.318 1325.56,236.047 1326.12,235.911 1326.69,236.92 1327.26,235.873 1327.83,235.833 1328.4,234.704 1328.97,234.761 1329.53,234.939 1330.1,233.848 1330.67,236.075 1331.24,236.066 1331.81,234.1 1332.38,233.104 1332.94,233.482 1333.51,233.643 1334.08,230.479 1334.65,230.764 1335.22,232.044 1335.79,234.483 1336.36,234.309 1336.92,235.32 1337.49,237.325 1338.06,241.064 1338.63,242.767 1339.2,240.107 1339.77,240.478 1340.33,241.406 1340.9,238.759 1341.47,240.486 1342.04,241.192 1342.61,239.453 1343.18,238.139 1343.74,237.876 1344.31,236.44 1344.88,238.37 1345.45,237.062 1346.02,235.633 1346.59,235.644 1347.15,236.925 1347.72,235.684 1348.29,235.896 1348.86,233.589 1349.43,233.576 1350,234.665 1350.56,234.664 1351.13,233.542 1351.7,233.532 1352.27,232.523 1352.84,232.668 1353.41,232.786 1353.97,231.662 1354.54,232.808 1355.11,234.673 1355.68,234.493 1356.25,233.357 1356.82,232.616 1357.38,231.795 1357.95,234.103 1358.52,234.25 1359.09,232.117 1359.66,233.097 1360.23,235.234 1360.79,234.065 1361.36,234.309 1361.93,232.203 1362.5,230.29 1363.07,230.812 1363.64,233.059 1364.2,235.095 1364.77,232.979 1365.34,235.168 1365.91,234.166 1366.48,234.378 1367.05,232.345 1367.61,230.282 1368.18,231.484 1368.75,234.87 1369.32,234.772 1369.89,234.578 1370.46,234.426 1371.02,233.537 1371.59,233.837 1372.16,234.932 1372.73,236.091 1373.3,234.91 1373.87,234.674 1374.43,232.479 1375,232.519 1375.57,232.581 1376.14,234.742 1376.71,232.789 1377.28,230.943 1377.84,230.236 1378.41,230.671 1378.98,230.706 1379.55,230.965 1380.12,230.959 1380.69,230.146 1381.25,231.216 1381.82,231.462 1382.39,230.817 1382.96,231.118 1383.53,231.085 1384.1,232.444 1384.66,232.714 1385.23,231.781 1385.8,231.808 1386.37,230.996 1386.94,230.251 1387.51,226.632 1388.07,227.66 1388.64,228.366 1389.21,228.844 1389.78,231.427 1390.35,231.568 1390.92,232.749 1391.48,232.96 1392.05,233.07 1392.62,233.114 1393.19,233.368 1393.76,232.697 1394.33,236.996 1394.89,237.911 1395.46,236.664 1396.03,236.703 1396.6,236.436 1397.17,237.12 1397.74,235.879 1398.3,235.712 1398.87,236.957 1399.44,237.918 1400.01,237.582 1400.58,238.335 1401.15,239 1401.71,240.842 1402.28,239.591 1402.85,238.342 1403.42,237.941 1403.99,238.649 1404.56,239.394 1405.13,238.721 1405.69,238.397 1406.26,237.961 1406.83,237.754 1407.4,236.429 1407.97,236.124 1408.54,237.051 1409.1,237.755 1409.67,236.483 1410.24,237.294 1410.81,236.885 1411.38,236.418 1411.95,236.223 1412.51,237.04 1413.08,236.784 1413.65,237.467 1414.22,238.421 1414.79,240.076 1415.36,239.51 1415.92,238.052 1416.49,235.377 1417.06,235.065 1417.63,233.722 1418.2,232.72 1418.77,230.41 1419.33,228.442 1419.9,229.631 1420.47,228.883 1421.04,233.196 1421.61,232.091 1422.18,232.041 1422.74,230.024 1423.31,230.223 1423.88,232.532 1424.45,232.626 1425.02,233.606 1425.59,233.402 1426.15,232.023 1426.72,231.977 1427.29,232.115 1427.86,232.104 1428.43,229.974 1429,231.304 1429.56,230.527 1430.13,231.913 1430.7,229.074 1431.27,228.225 1431.84,228.605 1432.41,231.159 1432.97,232.445 1433.54,231.609 1434.11,229.813 1434.68,231.133 1435.25,232.458 1435.82,234.711 1436.38,233.612 1436.95,233.724 1437.52,234.029 1438.09,234.833 1438.66,232.72 1439.23,234.83 1439.79,234.639 1440.36,233.852 1440.93,235.116 1441.5,237.009 1442.07,236.6 1442.64,236.44 1443.2,236.446 1443.77,237.158 1444.34,239.013 1444.91,239.546 1445.48,238.999 1446.05,235.373 1446.61,233.258 1447.18,235.379 1447.75,234.137 1448.32,236.997 1448.89,236.681 1449.46,235.441 1450.02,235.235 1450.59,234.173 1451.16,236.013 1451.73,236.889 1452.3,235.439 1452.87,233.284 1453.43,232.372 1454,232.312 1454.57,233.283 1455.14,231.449 1455.71,232.452 1456.28,232.423 1456.84,233.813 1457.41,235.739 1457.98,235.835 1458.55,235.418 1459.12,236.34 1459.69,237.347 1460.25,235.964 1460.82,235.866 1461.39,235.66 1461.96,235.331 1462.53,238.297 1463.1,237.984 1463.66,237.805 1464.23,237.479 1464.8,237.23 1465.37,235.911 1465.94,236.654 1466.51,235.2 1467.07,237.064 1467.64,235.678 1468.21,237.498 1468.78,238.104 1469.35,236.623 1469.92,236.203 1470.48,235.819 1471.05,233.476 1471.62,234.22 1472.19,235.023 1472.76,233.852 1473.33,234.709 1473.89,234.761 1474.46,234.463 1475.03,231.586 1475.6,231.555 1476.17,231.545 1476.74,228.512 1477.31,229.089 1477.87,229.226 1478.44,230.543 1479.01,229.714 1479.58,228.871 1480.15,229.885 1480.72,230.064 1481.28,230.362 1481.85,229.803 1482.42,230.013 1482.99,231.445 1483.56,231.532 1484.13,232.733 1484.69,232.85 1485.26,233.887 1485.83,233.93 1486.4,232.855 1486.97,231.809 1487.54,231.847 1488.1,231.858 1488.67,231.787 1489.24,233.194 1489.81,230.153 1490.38,231.534 1490.95,232.682 1491.51,233.153 1492.08,233.186 1492.65,232.179 1493.22,233.352 1493.79,235.513 1494.36,235.491 1494.92,238.258 1495.49,236.87 1496.06,235.774 1496.63,233.734 1497.2,228.729 1497.77,229.237 1498.33,229.71 1498.9,229.11 1499.47,229.455 1500.04,229.819 1500.61,229.131 1501.18,228.454 1501.74,227.231 1502.31,227.932 1502.88,231.746 1503.45,232.099 1504.02,230.334 1504.59,228.649 1505.15,226.953 1505.72,228.661 1506.29,229.139 1506.86,229.648 1507.43,231.219 1508,231.444 1508.56,229.697 1509.13,231.131 1509.7,231.422 1510.27,231.682 1510.84,229.781 1511.41,230.401 1511.97,230 1512.54,231.625 1513.11,230.971 1513.68,231.345 1514.25,233.761 1514.82,235.938 1515.38,237.92 1515.95,237.712 1516.52,235.3 1517.09,237.408 1517.66,236.422 1518.23,237.399 1518.79,233.159 1519.36,233.136 1519.93,231.477 1520.5,231.682 1521.07,229.923 1521.64,228.237 1522.2,227.738 1522.77,229.246 1523.34,231.681 1523.91,231.978 1524.48,232.288 1525.05,233.507 1525.61,235.748 1526.18,236.756 1526.75,238.604 1527.32,239.406 1527.89,238.985 1528.46,239.733 1529.02,240.328 1529.59,240.075 1530.16,239.523 1530.73,238.228 1531.3,235.991 1531.87,236.638 1532.43,234.535 1533,234.62 1533.57,235.751 1534.14,237.702 1534.71,236.395 1535.28,235.488 1535.84,235.373 1536.41,236.419 1536.98,234.262 1537.55,236.256 1538.12,237.357 1538.69,238.358 1539.25,238.267 1539.82,237.834 1540.39,237.455 1540.96,238.065 1541.53,236.801 1542.1,236.68 1542.66,238.42 1543.23,240.075 1543.8,239.421 1544.37,238.105 1544.94,236.801 1545.51,236.585 1546.08,236.269 1546.64,236.003 1547.21,237.796 1547.78,239.559 1548.35,240.223 1548.92,239.716 1549.49,239.272 1550.05,237.853 1550.62,237.503 1551.19,236.167 1551.76,235.912 1552.33,234.731 1552.9,233.633 1553.46,231.65 1554.03,231.741 1554.6,230.903 1555.17,233.372 1555.74,235.367 1556.31,236.067 1556.87,237.042 1557.44,237.674 1558.01,236.526 1558.58,236.096 1559.15,235.725 1559.72,232.429 1560.28,231.258 1560.85,232.369 1561.42,233.234 1561.99,232.106 1562.56,230.275 1563.13,230.608 1563.69,229.729 1564.26,229.945 1564.83,232.102 1565.4,233.276 1565.97,233.564 1566.54,233.552 1567.1,235.495 1567.67,235.309 1568.24,234.244 1568.81,233.239 1569.38,232.108 1569.95,232.347 1570.51,234.4 1571.08,233.376 1571.65,233.461 1572.22,236.629 1572.79,232.262 1573.36,232.394 1573.92,235.476 1574.49,235.476 1575.06,235.486 1575.63,233.625 1576.2,233.407 1576.77,233.249 1577.33,235.453 1577.9,232.42 1578.47,233.652 1579.04,233.595 1579.61,234.557 1580.18,234.328 1580.74,234.147 1581.31,232.928 1581.88,233.315 1582.45,233.296 1583.02,234.414 1583.59,234.485 1584.15,236.497 1584.72,238.642 1585.29,238.384 1585.86,236.91 1586.43,237.542 1587,236.223 1587.56,237.993 1588.13,237.624 1588.7,235.211 1589.27,235.125 1589.84,233.664 1590.41,235.453 1590.97,235.212 1591.54,236.033 1592.11,233.825 1592.68,234.739 1593.25,232.557 1593.82,232.766 1594.38,233.663 1594.95,232.448 1595.52,231.213 1596.09,229.286 1596.66,231.543 1597.23,232.835 1597.79,232.856 1598.36,232.781 1598.93,232.764 1599.5,233.142 1600.07,233.354 1600.64,233.363 1601.2,233.377 1601.77,234.61 1602.34,235.553 1602.91,234.497 1603.48,234.263 1604.05,233.334 1604.61,233.545 1605.18,236.66 1605.75,234.45 1606.32,234.52 1606.89,233.28 1607.46,233.354 1608.02,234.294 1608.59,235.313 1609.16,236.337 1609.73,235.192 1610.3,233.033 1610.87,234.063 1611.43,234.076 1612,234.886 1612.57,235.649 1613.14,236.527 1613.71,237.088 1614.28,235.505 1614.84,236.264 1615.41,235.098 1615.98,235.096 1616.55,233.799 1617.12,233.81 1617.69,233.68 1618.26,231.834 1618.82,231.997 1619.39,232.917 1619.96,231.895 1620.53,231.978 1621.1,235.086 1621.67,234.84 1622.23,234.877 1622.8,232.814 1623.37,232.657 1623.94,231.685 1624.51,232.875 1625.08,233.118 1625.64,233.162 1626.21,232.153 1626.78,235.248 1627.35,235.37 1627.92,237.116 1628.49,235.921 1629.05,235.575 1629.62,235.38 1630.19,235.283 1630.76,232.038 1631.33,233.094 1631.9,233.339 1632.46,232.209 1633.03,231.178 1633.6,230.342 1634.17,229.429 1634.74,230.882 1635.31,229.852 1635.87,230.095 1636.44,232.243 1637.01,231.132 1637.58,231.471 1638.15,231.801 1638.72,231.898 1639.28,232.041 1639.85,232.062 1640.42,233.265 1640.99,233.439 1641.56,235.274 1642.13,234.082 1642.69,234.159 1643.26,235.178 1643.83,234.013 1644.4,230.862 1644.97,231.01 1645.54,230.301 1646.1,230.675 1646.67,229.851 1647.24,231.182 1647.81,231.499 1648.38,230.739 1648.95,232.997 1649.51,233.021 1650.08,232.318 1650.65,231.724 1651.22,234.047 1651.79,233.884 1652.36,232.97 1652.92,233.114 1653.49,235.269 1654.06,235.246 1654.63,235.425 1655.2,235.273 1655.77,235.064 1656.33,236.176 1656.9,236.343 1657.47,235.174 1658.04,235.004 1658.61,233.905 1659.18,233.866 1659.74,233.964 1660.31,232.899 1660.88,237.287 1661.45,235.993 1662.02,235.805 1662.59,236.519 1663.15,236.266 1663.72,237.194 1664.29,237.16 1664.86,237.854 1665.43,238.597 1666,237.347 1666.56,236.975 1667.13,234.497 1667.7,233.257 1668.27,233.27 1668.84,232.046 1669.41,233.212 1669.97,232.013 1670.54,226.956 1671.11,225.413 1671.68,224.937 1672.25,224.486 1672.82,224.175 1673.38,226.809 1673.95,226.456 1674.52,224.945 1675.09,227.654 1675.66,229.233 1676.23,231.628 1676.79,229.986 1677.36,231.438 1677.93,231.614 1678.5,231.765 1679.07,234.25 1679.64,236.281 1680.2,237.085 1680.77,238.969 1681.34,238.908 1681.91,236.619 1682.48,237.514 1683.05,237.245 1683.61,235.851 1684.18,235.973 1684.75,237.061 1685.32,236.75 1685.89,238.572 1686.46,239.335 1687.02,241.309 1687.59,238.782 1688.16,237.612 1688.73,238.273 1689.3,236.013 1689.87,234.893 1690.44,236.807 1691,236.388 1691.57,236.028 1692.14,235.111 1692.71,235.059 1693.28,235.026 1693.85,235.097 1694.41,233.829 1694.98,231.637 1695.55,233.719 1696.12,233.686 1696.69,232.661 1697.26,231.542 1697.82,231.627 1698.39,234.764 1698.96,235.675 1699.53,236.817 1700.1,234.469 1700.67,234.422 1701.23,235.473 1701.8,236.357 1702.37,232.114 1702.94,232.342 1703.51,233.567 1704.08,232.455 1704.64,232.546 1705.21,233.618 1705.78,230.524 1706.35,233.679 1706.92,233.705 1707.49,232.797 1708.05,232.97 1708.62,231.861 1709.19,231.194 1709.76,232.451 1710.33,234.818 1710.9,234.835 1711.46,235.767 1712.03,234.607 1712.6,235.635 1713.17,234.594 1713.74,237.563 1714.31,238.342 1714.87,237.982 1715.44,233.663 1716.01,232.71 1716.58,233.718 1717.15,234.801 1717.72,236.761 1718.28,234.43 1718.85,233.306 1719.42,234.199 1719.99,232.066 1720.56,232.079 1721.13,231.237 1721.69,232.378 1722.26,231.401 1722.83,233.461 1723.4,232.448 1723.97,233.455 1724.54,234.412 1725.1,235.563 1725.67,236.417 1726.24,234.282 1726.81,235.194 1727.38,234.011 1727.95,233.023 1728.51,232.065 1729.08,233.021 1729.65,233.019 1730.22,234.149 1730.79,235.103 1731.36,232.055 1731.92,230.256 1732.49,232.623 1733.06,232.837 1733.63,232.906 1734.2,232.875 1734.77,233.84 1735.33,232.977 1735.9,231.229 1736.47,227.455 1737.04,228.017 1737.61,227.543 1738.18,227.239 1738.74,228.829 1739.31,230.416 1739.88,232.828 1740.45,232.85 1741.02,233.968 1741.59,233.911 1742.15,234.773 1742.72,231.834 1743.29,233.055 1743.86,234.063 1744.43,234.166 1745,235.425 1745.56,236.305 1746.13,237.297 1746.7,238.033 1747.27,236.734 1747.84,237.529 1748.41,240.43 1748.97,241.011 1749.54,240.417 1750.11,240.909 1750.68,239.462 1751.25,238.878 1751.82,237.41 1752.38,235.024 1752.95,236.017 1753.52,234.795 1754.09,234.657 1754.66,235.624 1755.23,236.687 1755.79,237.507 1756.36,237.355 1756.93,236.205 1757.5,235.963 1758.07,235.704 1758.64,235.663 1759.21,235.514 1759.77,236.397 1760.34,237.211 1760.91,236.993 1761.48,236.769 1762.05,236.611 1762.62,237.237 1763.18,236.954 1763.75,237.888 1764.32,237.553 1764.89,238.306 1765.46,239.793 1766.03,238.357 1766.59,238.253 1767.16,235.639 1767.73,237.356 1768.3,237.255 1768.87,233.802 1769.44,234.979 1770,234.681 1770.57,234.586 1771.14,234.721 1771.71,235.713 1772.28,234.562 1772.85,230.28 1773.41,229.334 1773.98,232.612 1774.55,232.629 1775.12,232.624 1775.69,233.475 1776.26,231.364 1776.82,231.505 1777.39,232.641 1777.96,232.479 1778.53,232.579 1779.1,231.751 1779.67,231.85 1780.23,232.948 1780.8,232.977 1781.37,233.18 1781.94,234.222 1782.51,234.296 1783.08,232.296 1783.64,232.464 1784.21,231.659 1784.78,230.879 1785.35,229.227 1785.92,230.592 1786.49,228.617 1787.05,228.993 1787.62,229.286 1788.19,229.476 1788.76,228.612 1789.33,227.989 1789.9,227.614 1790.46,227.177 1791.03,227.805 1791.6,229.079 1792.17,228.54 1792.74,234.199 1793.31,234.012 1793.87,236.041 1794.44,235.92 1795.01,234.96 1795.58,235.985 1796.15,236.141 1796.72,234.946 1797.28,234.888 1797.85,234.782 1798.42,235.989 1798.99,236.781 1799.56,236.543 1800.13,238.199 1800.69,236.676 1801.26,236.312 1801.83,235.798 1802.4,234.674 1802.97,236.659 1803.54,236.62 1804.1,236.376 1804.67,237.194 1805.24,236.928 1805.81,237.689 1806.38,239.501 1806.95,236.91 1807.51,237.464 1808.08,236.017 1808.65,234.848 1809.22,234.985 1809.79,230.937 1810.36,231.172 1810.92,229.335 1811.49,229.671 1812.06,229.9 1812.63,232.081 1813.2,231.069 1813.77,234.197 1814.33,235.057 1814.9,235.039 1815.47,234.876 1816.04,234.895 1816.61,237.013 1817.18,232.527 1817.74,231.466 1818.31,232.569 1818.88,231.404 1819.45,231.605 1820.02,232.707 1820.59,234.006 1821.15,235.146 1821.72,234.949 1822.29,235.952 1822.86,236.697 1823.43,236.387 1824,236.192 1824.56,234.967 1825.13,235.025 1825.7,236.997 1826.27,236.796 1826.84,239.639 1827.41,237.21 1827.97,235.972 1828.54,235.933 1829.11,234.61 1829.68,234.645 1830.25,235.477 1830.82,236.477 1831.39,237.203 1831.95,235.897 1832.52,234.648 1833.09,236.489 1833.66,236.246 1834.23,236.054 1834.8,234.683 1835.36,233.497 1835.93,234.466 1836.5,234.202 1837.07,233.084 1837.64,232.319 1838.21,232.526 1838.77,233.584 1839.34,233.469 1839.91,231.239 1840.48,230.42 1841.05,229.627 1841.62,231.222 1842.18,230.347 1842.75,228.666 1843.32,230.281 1843.89,231.618 1844.46,230.709 1845.03,230.84 1845.59,231.052 1846.16,229.173 1846.73,228.419 1847.3,227.889 1847.87,228.238 1848.44,228.723 1849,228.081 1849.57,227.553 1850.14,227.026 1850.71,226.615 1851.28,226.016 1851.85,227.553 1852.41,228.133 1852.98,228.634 1853.55,225.968 1854.12,229.782 1854.69,230.148 1855.26,229.614 1855.82,230.005 1856.39,229.366 1856.96,228.824 1857.53,228.423 1858.1,227.95 1858.67,230.624 1859.23,230.863 1859.8,230.505 1860.37,230.655 1860.94,232.218 1861.51,232.512 1862.08,232.829 1862.64,232.971 1863.21,233.202 1863.78,234.569 1864.35,235.843 1864.92,236.996 1865.49,235.883 1866.05,235.841 1866.62,237.994 1867.19,238.886 1867.76,239.013 1868.33,239.936 1868.9,239.717 1869.46,238.375 1870.03,238.288 1870.6,239.123 1871.17,239.929 1871.74,239.651 1872.31,240.173 1872.87,241.037 1873.44,238.488 1874.01,241.393 1874.58,240.831 1875.15,240.43 1875.72,239.044 1876.28,238.81 1876.85,238.441 1877.42,238.142 1877.99,236.764 1878.56,236.758 1879.13,233.426 1879.69,234.224 1880.26,233.266 1880.83,233.304 1881.4,232.602 1881.97,234.752 1882.54,235.711 1883.1,235.647 1883.67,234.203 1884.24,234.435 1884.81,233.031 1885.38,234.087 1885.95,232.129 1886.51,234.201 1887.08,234.192 1887.65,235.072 1888.22,237.007 1888.79,237.702 1889.36,237.388 1889.92,237.185 1890.49,234.959 1891.06,233.845 1891.63,234.949 1892.2,235.974 1892.77,236.758 1893.33,236.321 1893.9,237.356 1894.47,237.991 1895.04,237.612 1895.61,238.218 1896.18,241.069 1896.74,240.414 1897.31,241.125 1897.88,239.67 1898.45,240.078 1899.02,236.418 1899.59,235.162 1900.16,234.938 1900.72,235.596 1901.29,236.4 1901.86,240.21 1902.43,239.706 1903,237.09 1903.57,238.56 1904.13,238.145 1904.7,237.76 1905.27,237.397 1905.84,235.944 1906.41,236.662 1906.98,238.556 1907.54,235.801 1908.11,238.691 1908.68,237.146 1909.25,236.877 1909.82,234.299 1910.39,235.234 1910.95,235.008 1911.52,232.881 1912.09,232.969 1912.66,233.958 1913.23,233.698 1913.8,233.618 1914.36,233.457 1914.93,232.51 1915.5,231.58 1916.07,228.646 1916.64,228.918 1917.21,230.338 1917.77,229.486 1918.34,229.509 1918.91,226.633 1919.48,226.106 1920.05,229.71 1920.62,229.874 1921.18,231.036 1921.75,233.039 1922.32,232.905 1922.89,234.155 1923.46,234.029 1924.03,234.869 1924.59,233.806 1925.16,231.518 1925.73,231.339 1926.3,232.358 1926.87,233.45 1927.44,232.311 1928,232.312 1928.57,231.358 1929.14,231.496 1929.71,231.648 1930.28,230.676 1930.85,231.916 1931.41,232.129 1931.98,233.357 1932.55,232.249 1933.12,232.219 1933.69,233.301 1934.26,231.257 1934.82,231.303 1935.39,229.543 1935.96,226.642 1936.53,226.195 1937.1,227.809 1937.67,228.39 1938.23,227.74 1938.8,228.243 1939.37,227.628 1939.94,228.162 1940.51,226.39 1941.08,228.093 1941.64,227.387 1942.21,227.998 1942.78,230.427 1943.35,229.774 1943.92,229.187 1944.49,230.711 1945.05,229.841 1945.62,230.404 1946.19,229.764 1946.76,231.197 1947.33,231.551 1947.9,232.974 1948.46,234.204 1949.03,234.403 1949.6,235.54 1950.17,235.556 1950.74,235.381 1951.31,235.244 1951.87,235.39 1952.44,236.204 1953.01,235.135 1953.58,234.232 1954.15,232.181 1954.72,234.175 1955.28,233.99 1955.85,231.955 1956.42,231.192 1956.99,233.698 1957.56,234.019 1958.13,234.185 1958.69,234.248 1959.26,235.343 1959.83,235.15 1960.4,236.119 1960.97,237.032 1961.54,236.717 1962.1,236.588 1962.67,237.591 1963.24,236.274 1963.81,240.28 1964.38,238.737 1964.95,237.196 1965.51,236.774 1966.08,236.808 1966.65,237.77 1967.22,235.523 1967.79,235.576 1968.36,235.469 1968.92,236.396 1969.49,234.055 1970.06,234.837 1970.63,234.859 1971.2,231.821 1971.77,232.967 1972.34,234.122 1972.9,234.15 1973.47,235.128 1974.04,234.142 1974.61,234.376 1975.18,234.367 1975.75,233.316 1976.31,232.174 1976.88,234.483 1977.45,233.395 1978.02,231.436 1978.59,230.614 1979.16,227.007 1979.72,227.667 1980.29,228.043 1980.86,228.485 1981.43,230.866 1982,232.242 1982.57,232.628 1983.13,235.146 1983.7,233.872 1984.27,234.031 1984.84,236.256 1985.41,236.218 1985.98,237.045 1986.54,236.909 1987.11,238.68 1987.68,238.485 1988.25,239.225 1988.82,239.687 1989.39,239.3 1989.95,236.896 1990.52,238.519 1991.09,240.413 1991.66,240.022 1992.23,240.536 1992.8,240.011 1993.36,239.611 1993.93,239.986 1994.5,241.646 1995.07,240.113 1995.64,240.563 1996.21,237.99 1996.77,236.679 1997.34,238.448 1997.91,236.195 1998.48,236.018 1999.05,232.74 1999.62,232.861 2000.18,232.106 2000.75,232.128 2001.32,229.986 2001.89,231.206 2002.46,234.499 2003.03,235.316 2003.59,236.29 2004.16,236.061 2004.73,235.962 2005.3,234.528 2005.87,234.349 2006.44,232.363 2007,232.412 2007.57,231.537 2008.14,232.694 2008.71,229.701 2009.28,230.885 2009.85,232.125 2010.41,229.891 2010.98,230.906 2011.55,231.061 2012.12,230.091 2012.69,231.366 2013.26,230.308 2013.82,230.588 2014.39,231.918 2014.96,233.066 2015.53,234.093 2016.1,236.129 2016.67,234.658 2017.23,234.684 2017.8,236.704 2018.37,237.048 2018.94,236.825 2019.51,235.625 2020.08,235.594 2020.64,234.37 2021.21,231.942 2021.78,230.938 2022.35,231.309 2022.92,234.569 2023.49,235.473 2024.05,235.413 2024.62,236.167 2025.19,235.908 2025.76,235.662 2026.33,237.476 2026.9,234.16 2027.46,232.352 2028.03,232.514 2028.6,233.546 2029.17,234.504 2029.74,233.622 2030.31,234.474 2030.87,234.376 2031.44,235.428 2032.01,233.369 2032.58,231.467 2033.15,229.536 2033.72,230.778 2034.28,232.219 2034.85,234.495 2035.42,233.395 2035.99,231.439 2036.56,234.468 2037.13,232.538 2037.69,231.544 2038.26,230.64 2038.83,231.065 2039.4,229.15 2039.97,228.622 2040.54,226.993 2041.11,228.411 2041.67,230.795 2042.24,233.047 2042.81,232.124 2043.38,231.262 2043.95,231.4 2044.52,230.433 2045.08,227.512 2045.65,228.04 2046.22,228.49 2046.79,229.922 2047.36,228.154 2047.93,229.474 2048.49,229.074 2049.06,229.364 2049.63,230.81 2050.2,232.003 2050.77,231.102 2051.34,229.618 2051.9,233.008 2052.47,231.063 2053.04,233.569 2053.61,234.777 2054.18,234.753 2054.75,234.799 2055.31,235.888 2055.88,237.762 2056.45,235.385 2057.02,237.362 2057.59,236.149 2058.16,234.064 2058.72,232.204 2059.29,232.668 2059.86,232.021 2060.43,232.608 2061,232.657 2061.57,231.787 2062.13,231.106 2062.7,231.249 2063.27,231.694 2063.84,234.163 2064.41,234.309 2064.98,233.311 2065.54,230.281 2066.11,230.65 2066.68,235.044 2067.25,234.99 2067.82,237.909 2068.39,236.548 2068.95,236.554 2069.52,237.548 2070.09,237.409 2070.66,235.233 2071.23,234.348 2071.8,233.464 2072.36,232.656 2072.93,232.748 2073.5,234.033 2074.07,231.953 2074.64,232.262 2075.21,231.369 2075.77,231.635 2076.34,230.727 2076.91,231.069 2077.48,232.356 2078.05,233.537 2078.62,230.732 2079.18,230.178 2079.75,231.675 2080.32,233.187 2080.89,234.466 2081.46,234.616 2082.03,236.026 2082.59,237.108 2083.16,236.017 2083.73,235.829 2084.3,236.891 2084.87,236.863 2085.44,236.826 2086,236.899 2086.57,236.147 2087.14,233.886 2087.71,232.855 2088.28,232.889 2088.85,234.043 2089.41,235.087 2089.98,235.384 2090.55,236.31 2091.12,236.183 2091.69,236.309 2092.26,236.117 2092.82,237.045 2093.39,237.863 2093.96,242.708 2094.53,242.326 2095.1,240.869 2095.67,239.298 2096.23,240.055 2096.8,240.6 2097.37,241.219 2097.94,241.623 2098.51,240.941 2099.08,240.683 2099.64,241.294 2100.21,240.566 2100.78,242.188 2101.35,242.573 2101.92,241.916 2102.49,238.333 2103.05,234.755 2103.62,232.659 2104.19,231.599 2104.76,231.421 2105.33,231.269 2105.9,231.198 2106.46,231.484 2107.03,230.6 2107.6,228.895 2108.17,231.384 2108.74,233.749 2109.31,235.677 2109.87,236.678 2110.44,238.519 2111.01,240.11 2111.58,239.774 2112.15,238.115 2112.72,237.724 2113.29,236.271 2113.85,236.175 2114.42,236.015 2114.99,236.671 2115.56,235.264 2116.13,234.854 2116.7,235.691 2117.26,236.501 2117.83,236.447 2118.4,237.001 2118.97,235.675 2119.54,234.413 2120.11,232.287 2120.67,231.392 2121.24,232.662 2121.81,236.875 2122.38,238.599 2122.95,237.112 2123.52,237.767 2124.08,238.418 2124.65,233.045 2125.22,232.866 2125.79,232.583 2126.36,231.552 2126.93,230.533 2127.49,230.768 2128.06,231.897 2128.63,232.89 2129.2,231.834 2129.77,231.715 2130.34,232.703 2130.9,231.682 2131.47,230.58 2132.04,230.568 2132.61,230.735 2133.18,230.148 2133.75,229.39 2134.31,230.679 2134.88,230.793 2135.45,230.947 2136.02,231.058 2136.59,230.361 2137.16,227.523 2137.72,227.045 2138.29,228.621 2138.86,225.984 2139.43,225.455 2140,225.916 2140.57,224.359 2141.13,223.887 2141.7,227.577 2142.27,226.885 2142.84,227.571 2143.41,229.046 2143.98,228.523 2144.54,230.971 2145.11,232.242 2145.68,231.488 2146.25,230.831 2146.82,230.145 2147.39,230.612 2147.95,231.906 2148.52,232.471 2149.09,232.745 2149.66,233.052 2150.23,233.354 2150.8,234.628 2151.36,235.883 2151.93,236.752 2152.5,236.72 2153.07,236.726 2153.64,238.666 2154.21,237.625 2154.77,239.531 2155.34,239.08 2155.91,240.947 2156.48,241.506 2157.05,240.022 2157.62,238.809 2158.18,239.557 2158.75,239.312 2159.32,236.92 2159.89,235.601 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.026\n  with uncertainty of ± 0.002329372451144452\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0137 ± (0.00174817, 0.00169165) (MC)\n  95% confidence interval: [-4.01724, -4.01029] (MC)\n  linear error propagation: -4.01364 ± 0.00173598\n  |δ_y| = |0.00149678| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013695320369172, val_l = 0.0035473389380342724, val_u = 0.0034074030005664113)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip630\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip630)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip631\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip630)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip632\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1141.08 2211.02,1141.08 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,967.184 2211.02,967.184 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,793.288 2211.02,793.288 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,619.392 2211.02,619.392 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,445.496 2211.02,445.496 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,271.6 2211.02,271.6 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1141.08 365.751,1141.08 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,967.184 365.751,967.184 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,793.288 365.751,793.288 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,619.392 365.751,619.392 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,445.496 365.751,445.496 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,271.6 365.751,271.6 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M298.909 1126.88 Q295.298 1126.88 293.469 1130.44 Q291.664 1133.99 291.664 1141.11 Q291.664 1148.22 293.469 1151.79 Q295.298 1155.33 298.909 1155.33 Q302.543 1155.33 304.349 1151.79 Q306.177 1148.22 306.177 1141.11 Q306.177 1133.99 304.349 1130.44 Q302.543 1126.88 298.909 1126.88 M298.909 1123.18 Q304.719 1123.18 307.775 1127.78 Q310.853 1132.36 310.853 1141.11 Q310.853 1149.84 307.775 1154.45 Q304.719 1159.03 298.909 1159.03 Q293.099 1159.03 290.02 1154.45 Q286.964 1149.84 286.964 1141.11 Q286.964 1132.36 290.02 1127.78 Q293.099 1123.18 298.909 1123.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M259.557 980.529 L267.196 980.529 L267.196 954.163 L258.886 955.83 L258.886 951.571 L267.15 949.904 L271.826 949.904 L271.826 980.529 L279.465 980.529 L279.465 984.464 L259.557 984.464 L259.557 980.529 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M298.909 952.983 Q295.298 952.983 293.469 956.548 Q291.664 960.089 291.664 967.219 Q291.664 974.325 293.469 977.89 Q295.298 981.432 298.909 981.432 Q302.543 981.432 304.349 977.89 Q306.177 974.325 306.177 967.219 Q306.177 960.089 304.349 956.548 Q302.543 952.983 298.909 952.983 M298.909 949.279 Q304.719 949.279 307.775 953.886 Q310.853 958.469 310.853 967.219 Q310.853 975.946 307.775 980.552 Q304.719 985.135 298.909 985.135 Q293.099 985.135 290.02 980.552 Q286.964 975.946 286.964 967.219 Q286.964 958.469 290.02 953.886 Q293.099 949.279 298.909 949.279 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M262.775 806.633 L279.094 806.633 L279.094 810.568 L257.15 810.568 L257.15 806.633 Q259.812 803.878 264.395 799.249 Q269.002 794.596 270.182 793.253 Q272.428 790.73 273.307 788.994 Q274.21 787.235 274.21 785.545 Q274.21 782.79 272.266 781.054 Q270.344 779.318 267.242 779.318 Q265.043 779.318 262.59 780.082 Q260.159 780.846 257.381 782.397 L257.381 777.675 Q260.205 776.54 262.659 775.962 Q265.113 775.383 267.15 775.383 Q272.52 775.383 275.715 778.068 Q278.909 780.753 278.909 785.244 Q278.909 787.374 278.099 789.295 Q277.312 791.193 275.205 793.786 Q274.627 794.457 271.525 797.675 Q268.423 800.869 262.775 806.633 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M298.909 779.087 Q295.298 779.087 293.469 782.651 Q291.664 786.193 291.664 793.323 Q291.664 800.429 293.469 803.994 Q295.298 807.536 298.909 807.536 Q302.543 807.536 304.349 803.994 Q306.177 800.429 306.177 793.323 Q306.177 786.193 304.349 782.651 Q302.543 779.087 298.909 779.087 M298.909 775.383 Q304.719 775.383 307.775 779.989 Q310.853 784.573 310.853 793.323 Q310.853 802.049 307.775 806.656 Q304.719 811.239 298.909 811.239 Q293.099 811.239 290.02 806.656 Q286.964 802.049 286.964 793.323 Q286.964 784.573 290.02 779.989 Q293.099 775.383 298.909 775.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M272.914 618.038 Q276.27 618.755 278.145 621.024 Q280.043 623.292 280.043 626.626 Q280.043 631.741 276.525 634.542 Q273.006 637.343 266.525 637.343 Q264.349 637.343 262.034 636.903 Q259.742 636.487 257.289 635.63 L257.289 631.116 Q259.233 632.251 261.548 632.829 Q263.863 633.408 266.386 633.408 Q270.784 633.408 273.076 631.672 Q275.39 629.936 275.39 626.626 Q275.39 623.57 273.238 621.857 Q271.108 620.121 267.289 620.121 L263.261 620.121 L263.261 616.278 L267.474 616.278 Q270.923 616.278 272.752 614.913 Q274.58 613.524 274.58 610.931 Q274.58 608.269 272.682 606.857 Q270.807 605.422 267.289 605.422 Q265.367 605.422 263.168 605.839 Q260.969 606.255 258.33 607.135 L258.33 602.968 Q260.992 602.228 263.307 601.857 Q265.645 601.487 267.705 601.487 Q273.029 601.487 276.131 603.917 Q279.233 606.325 279.233 610.445 Q279.233 613.316 277.59 615.306 Q275.946 617.274 272.914 618.038 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M298.909 605.191 Q295.298 605.191 293.469 608.755 Q291.664 612.297 291.664 619.427 Q291.664 626.533 293.469 630.098 Q295.298 633.639 298.909 633.639 Q302.543 633.639 304.349 630.098 Q306.177 626.533 306.177 619.427 Q306.177 612.297 304.349 608.755 Q302.543 605.191 298.909 605.191 M298.909 601.487 Q304.719 601.487 307.775 606.093 Q310.853 610.677 310.853 619.427 Q310.853 628.153 307.775 632.76 Q304.719 637.343 298.909 637.343 Q293.099 637.343 290.02 632.76 Q286.964 628.153 286.964 619.427 Q286.964 610.677 290.02 606.093 Q293.099 601.487 298.909 601.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M271.594 432.29 L259.789 450.739 L271.594 450.739 L271.594 432.29 M270.367 428.216 L276.247 428.216 L276.247 450.739 L281.177 450.739 L281.177 454.628 L276.247 454.628 L276.247 462.776 L271.594 462.776 L271.594 454.628 L255.992 454.628 L255.992 450.114 L270.367 428.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M298.909 431.294 Q295.298 431.294 293.469 434.859 Q291.664 438.401 291.664 445.53 Q291.664 452.637 293.469 456.202 Q295.298 459.743 298.909 459.743 Q302.543 459.743 304.349 456.202 Q306.177 452.637 306.177 445.53 Q306.177 438.401 304.349 434.859 Q302.543 431.294 298.909 431.294 M298.909 427.591 Q304.719 427.591 307.775 432.197 Q310.853 436.781 310.853 445.53 Q310.853 454.257 307.775 458.864 Q304.719 463.447 298.909 463.447 Q293.099 463.447 290.02 458.864 Q286.964 454.257 286.964 445.53 Q286.964 436.781 290.02 432.197 Q293.099 427.591 298.909 427.591 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M258.793 254.32 L277.15 254.32 L277.15 258.255 L263.076 258.255 L263.076 266.727 Q264.094 266.38 265.113 266.218 Q266.131 266.033 267.15 266.033 Q272.937 266.033 276.316 269.204 Q279.696 272.375 279.696 277.792 Q279.696 283.37 276.224 286.472 Q272.752 289.551 266.432 289.551 Q264.256 289.551 261.988 289.181 Q259.742 288.81 257.335 288.069 L257.335 283.37 Q259.418 284.505 261.641 285.06 Q263.863 285.616 266.34 285.616 Q270.344 285.616 272.682 283.509 Q275.02 281.403 275.02 277.792 Q275.02 274.181 272.682 272.074 Q270.344 269.968 266.34 269.968 Q264.465 269.968 262.59 270.384 Q260.738 270.801 258.793 271.681 L258.793 254.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M298.909 257.398 Q295.298 257.398 293.469 260.963 Q291.664 264.505 291.664 271.634 Q291.664 278.741 293.469 282.306 Q295.298 285.847 298.909 285.847 Q302.543 285.847 304.349 282.306 Q306.177 278.741 306.177 271.634 Q306.177 264.505 304.349 260.963 Q302.543 257.398 298.909 257.398 M298.909 253.695 Q304.719 253.695 307.775 258.301 Q310.853 262.884 310.853 271.634 Q310.853 280.361 307.775 284.968 Q304.719 289.551 298.909 289.551 Q293.099 289.551 290.02 284.968 Q286.964 280.361 286.964 271.634 Q286.964 262.884 290.02 258.301 Q293.099 253.695 298.909 253.695 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip632)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1012.95 400.199,1152.22 400.786,1029.8 401.372,918.55 401.958,816.484 402.545,720.779 403.131,633.496 403.718,553.819 404.304,584.102 404.891,514.028 405.477,534.18 406.063,470.625 406.65,413.046 407.236,362.527 407.823,315.684 408.409,404.478 408.995,361.167 409.582,322.43 410.168,289.366 410.755,261.095 411.341,234.178 411.927,257.182 412.514,235.2 413.1,219.895 413.687,279.569 414.273,264.457 414.86,249.796 415.446,269.478 416.032,259.377 416.619,251.889 417.205,246.436 417.792,243.116 418.378,242.094 418.964,263.259 419.551,303.814 420.137,322.748 420.724,340.628 421.31,341.029 421.896,358.376 422.483,374.527 423.069,377.219 423.656,381.462 424.242,397.226 424.829,401.238 425.415,406.503 426.001,412.065 426.588,429.089 427.174,446.998 427.761,493.623 428.347,518.437 428.933,524.304 429.52,556.595 430.106,562.551 430.693,569.987 431.279,591.763 431.865,600.116 432.452,614.566 433.038,635.3 433.625,642.874 434.211,656.485 434.798,670.142 435.384,683.577 435.97,691.465 436.557,704.556 437.143,716.988 437.73,734.365 438.316,746.617 438.902,754.605 439.489,762.415 440.075,774.522 440.662,782.677 441.248,791.015 441.835,806.592 442.421,848.212 443.007,864.752 443.594,883.759 444.18,888.436 444.767,893.77 445.353,902.077 445.939,913.777 446.526,922.259 447.112,927.142 447.699,934.844 448.285,942.663 448.871,950.49 449.458,966.588 450.044,971.311 450.631,978.712 451.217,991.603 451.804,1000.86 452.39,1007.42 452.976,1013.78 453.563,1020.28 454.149,1031.62 454.736,1035.18 455.322,1041.25 455.908,1045.05 456.495,1057.69 457.081,1060.99 457.668,1069.04 458.254,1074.02 458.84,1079.14 459.427,1081.88 460.013,1090.93 460.6,1098.11 461.186,1098.47 461.773,1103.11 462.359,1105.55 462.945,1111.55 463.532,1117.99 464.118,1122.1 464.705,1124.23 465.291,1126.58 465.877,1128.77 466.464,1138.15 467.05,1147.76 467.637,1151.27 468.223,1154.57 468.809,1157.5 469.396,1156.89 469.982,1161.58 470.569,1164.78 471.155,1167.77 471.742,1172.43 472.328,1175.03 472.914,1181.37 473.501,1183.52 474.087,1182.2 474.674,1185.89 475.26,1189.83 475.846,1193.71 476.433,1194.05 477.019,1201.38 477.606,1201.48 478.192,1201.43 478.778,1206.76 479.365,1206.56 479.951,1209.69 480.538,1207.64 481.124,1210.52 481.711,1213.6 482.297,1214.99 482.883,1216.47 483.47,1214.77 484.056,1217.34 484.643,1218.87 485.229,1223.25 485.815,1224.24 486.402,1220.59 486.988,1218.94 487.575,1222.02 488.161,1225.01 488.748,1224.82 489.334,1228.78 489.92,1231.6 490.507,1231.03 491.093,1228.91 491.68,1230.04 492.266,1229.41 492.852,1232.03 493.439,1231.68 494.025,1231.04 494.612,1234.02 495.198,1229.87 495.784,1230.69 496.371,1230.72 496.957,1234.49 497.544,1238.33 498.13,1242.32 498.717,1239.84 499.303,1239.24 499.889,1240 500.476,1240.66 501.062,1241.34 501.649,1241.82 502.235,1242.73 502.821,1243.23 503.408,1245.43 503.994,1241.23 504.581,1242.37 505.167,1242.99 505.753,1239.32 506.34,1238.63 506.926,1236.73 507.513,1236.06 508.099,1234.05 508.686,1230.67 509.272,1227.77 509.858,1229.31 510.445,1230.76 511.031,1234.74 511.618,1234.67 512.204,1234.41 512.79,1234.18 513.377,1230.88 513.963,1229.13 514.55,1227.84 515.136,1225 515.722,1226.95 516.309,1227.36 516.895,1226.21 517.482,1229.37 518.068,1232.55 518.655,1231.1 519.241,1235.38 519.827,1235.02 520.414,1236.21 521,1237.13 521.587,1236.61 522.173,1240.13 522.759,1238.37 523.346,1239.59 523.932,1237.64 524.519,1240.29 525.105,1241.23 525.691,1237.83 526.278,1238.84 526.864,1234.15 527.451,1235.61 528.037,1236.89 528.624,1236.5 529.21,1234.89 529.796,1237.63 530.383,1237.49 530.969,1238.45 531.556,1238.18 532.142,1239.07 532.728,1238.7 533.315,1239.35 533.901,1239.18 534.488,1238.69 535.074,1241.2 535.661,1236.78 536.247,1236.38 536.833,1236.32 537.42,1234.77 538.006,1237.33 538.593,1238.13 539.179,1236.37 539.765,1237.48 540.352,1240.28 540.938,1242.62 541.525,1243.59 542.111,1245.5 542.697,1246.14 543.284,1243.96 543.87,1243.03 544.457,1242.42 545.043,1243.23 545.63,1242.7 546.216,1242.07 546.802,1242.87 547.389,1250.53 547.975,1249.21 548.562,1248.05 549.148,1248.44 549.734,1246.01 550.321,1245.13 550.907,1244.32 551.494,1244.91 552.08,1242.47 552.666,1241.67 553.253,1240.91 553.839,1241.51 554.426,1241.03 555.012,1239.14 555.599,1239.91 556.185,1236.47 556.771,1237.29 557.358,1237.91 557.944,1238.56 558.531,1238.21 559.117,1239.14 559.703,1239.91 560.29,1240.55 560.876,1240.06 561.463,1240.93 562.049,1242.97 562.635,1243.51 563.222,1241.34 563.808,1240.59 564.395,1239.48 564.981,1241.68 565.568,1240.91 566.154,1240.35 566.74,1239.47 567.327,1240.4 567.913,1241.02 568.5,1241.75 569.086,1240.99 569.672,1238.93 570.259,1242.78 570.845,1246.11 571.432,1240.97 572.018,1240.17 572.605,1240.82 573.191,1238.61 573.777,1237.84 574.364,1238.53 574.95,1240.88 575.537,1237.29 576.123,1236.63 576.709,1235.74 577.296,1233.78 577.882,1234.67 578.469,1233.01 579.055,1233.87 579.641,1232.01 580.228,1229.94 580.814,1231.44 581.401,1232.69 581.987,1233.67 582.574,1231.73 583.16,1229.82 583.746,1228.34 584.333,1226.93 584.919,1229.44 585.506,1229.26 586.092,1228.9 586.678,1231.62 587.265,1229.81 587.851,1229.64 588.438,1230.86 589.024,1229 589.61,1228.98 590.197,1227.48 590.783,1228.66 591.37,1228.41 591.956,1226.7 592.543,1226.6 593.129,1224.85 593.715,1226.25 594.302,1226.12 594.888,1225.98 595.475,1225.76 596.061,1227.32 596.647,1227.46 597.234,1228.84 597.82,1229.85 598.407,1231.01 598.993,1231.83 599.579,1231.55 600.166,1231.05 600.752,1233.56 601.339,1233.02 601.925,1234.09 602.512,1233.69 603.098,1231.73 603.684,1234.24 604.271,1233.73 604.857,1236.3 605.444,1231.51 606.03,1229.55 606.616,1229.1 607.203,1228.86 607.789,1226.94 608.376,1227.99 608.962,1226.27 609.548,1227.34 610.135,1228.26 610.721,1228.06 611.308,1226.35 611.894,1223.14 612.481,1225.85 613.067,1225.87 613.653,1225.63 614.24,1226.9 614.826,1226.35 615.413,1224.83 615.999,1222.19 616.585,1221.1 617.172,1221.08 617.758,1221.02 618.345,1221.02 618.931,1220.87 619.518,1219.1 620.104,1219.05 620.69,1217.65 621.277,1219.09 621.863,1219.36 622.45,1218.02 623.036,1219.84 623.622,1218.16 624.209,1221.03 624.795,1220.96 625.382,1220.86 625.968,1225.13 626.554,1223.56 627.141,1222.04 627.727,1222.21 628.314,1217.82 628.9,1217.9 629.487,1218.2 630.073,1219.9 630.659,1221.25 631.246,1221.01 631.832,1221.08 632.419,1220.96 633.005,1223.76 633.591,1222.14 634.178,1223.37 634.764,1224.54 635.351,1224.35 635.937,1222.44 636.523,1220.83 637.11,1222.18 637.696,1220.57 638.283,1222.09 638.869,1220.52 639.456,1219.21 640.042,1217.9 640.628,1216.27 641.215,1215.46 641.801,1218.56 642.388,1219.97 642.974,1221.58 643.56,1222.92 644.147,1221.57 644.733,1220.13 645.32,1218.62 645.906,1219.93 646.492,1221.15 647.079,1224.12 647.665,1225.38 648.252,1224.93 648.838,1223.25 649.425,1224.54 650.011,1222.56 650.597,1223.55 651.184,1223.34 651.77,1226.13 652.357,1225.89 652.943,1228.07 653.529,1226.18 654.116,1228.37 654.702,1232.2 655.289,1230.16 655.875,1228.36 656.462,1226.67 657.048,1227.39 657.634,1229.78 658.221,1230.71 658.807,1227.14 659.394,1222.5 659.98,1222.77 660.566,1222.84 661.153,1222.66 661.739,1222.34 662.326,1220.9 662.912,1220.89 663.498,1222.17 664.085,1222.03 664.671,1221.68 665.258,1221.49 665.844,1221.16 666.431,1222.52 667.017,1223.7 667.603,1221.81 668.19,1221.56 668.776,1225.5 669.363,1223.83 669.949,1221.98 670.535,1224.57 671.122,1222.78 671.708,1223.9 672.295,1222.17 672.881,1220.53 673.467,1219.41 674.054,1217.72 674.64,1219.43 675.227,1222.21 675.813,1221.89 676.4,1224.16 676.986,1222.4 677.572,1220.86 678.159,1219.6 678.745,1219.51 679.332,1224.98 679.918,1224.75 680.504,1225.89 681.091,1231.04 681.677,1230.34 682.264,1228.54 682.85,1227.97 683.436,1230.12 684.023,1229.42 684.609,1231.56 685.196,1229.14 685.782,1226.84 686.369,1224.84 686.955,1221.73 687.541,1224.02 688.128,1226.08 688.714,1224.01 689.301,1222.17 689.887,1221.81 690.473,1220.1 691.06,1222.45 691.646,1222.24 692.233,1224.89 692.819,1223 693.405,1221.26 693.992,1220.73 694.578,1221.94 695.165,1220.51 695.751,1219.08 696.338,1215.9 696.924,1221.33 697.51,1215.13 698.097,1215.45 698.683,1212.58 699.27,1214.19 699.856,1213.12 700.442,1213.16 701.029,1213.55 701.615,1213.63 702.202,1211.88 702.788,1211.93 703.375,1212.22 703.961,1209.6 704.547,1209.95 705.134,1208.75 705.72,1207.86 706.307,1211.16 706.893,1211.38 707.479,1210.19 708.066,1211.97 708.652,1212.37 709.239,1210.96 709.825,1209.65 710.411,1210 710.998,1210.6 711.584,1210.73 712.171,1209.68 712.757,1210.06 713.344,1210.24 713.93,1210.43 714.516,1210.73 715.103,1210.89 715.689,1210.98 716.276,1208.08 716.862,1208.3 717.448,1209.97 718.035,1210.46 718.621,1215.08 719.208,1213.9 719.794,1211.1 720.38,1210.17 720.967,1211.9 721.553,1212.16 722.14,1212.43 722.726,1215.6 723.313,1214 723.899,1217.01 724.485,1216.67 725.072,1216.5 725.658,1217.77 726.245,1220.41 726.831,1221.54 727.417,1221.25 728.004,1221.03 728.59,1220.73 729.177,1221.98 729.763,1223.08 730.349,1219.89 730.936,1220.99 731.522,1224.6 732.109,1224.05 732.695,1224.91 733.282,1224.66 733.868,1222.88 734.454,1221.41 735.041,1221.21 735.627,1225.02 736.214,1224.51 736.8,1224.35 737.386,1223.66 737.973,1228.76 738.559,1226.15 739.146,1228.15 739.732,1227.57 740.318,1223.97 740.905,1223.61 741.491,1224.3 742.078,1223.71 742.664,1222.11 743.251,1221.69 743.837,1219.97 744.423,1219.48 745.01,1219.23 745.596,1216.32 746.183,1216.47 746.769,1213.41 747.355,1214.79 747.942,1216.28 748.528,1213.56 749.115,1215.07 749.701,1218.01 750.288,1220.58 750.874,1220.18 751.46,1218.39 752.047,1218.23 752.633,1219.52 753.22,1217.89 753.806,1219.07 754.392,1218.91 754.979,1217.07 755.565,1216.96 756.152,1212.4 756.738,1211.09 757.324,1208.68 757.911,1210.23 758.497,1209.19 759.084,1206.83 759.67,1210.18 760.257,1209.08 760.843,1209.69 761.429,1208.72 762.016,1208.95 762.602,1209.35 763.189,1209.61 763.775,1211.54 764.361,1211.69 764.948,1213.19 765.534,1211.83 766.121,1212.32 766.707,1215.32 767.293,1213.9 767.88,1212.67 768.466,1214.48 769.053,1217.32 769.639,1217.05 770.226,1219.67 770.812,1220.64 771.398,1217.44 771.985,1220.16 772.571,1220.37 773.158,1218.96 773.744,1216.11 774.33,1218.75 774.917,1220.24 775.503,1219.96 776.09,1221.18 776.676,1222.15 777.262,1221.63 777.849,1224.05 778.435,1220.53 779.022,1220.21 779.608,1220.04 780.195,1221.33 780.781,1222.46 781.367,1223.66 781.954,1223.04 782.54,1225.22 783.127,1225.99 783.713,1226.69 784.299,1225.97 784.886,1226.69 785.472,1224.53 786.059,1224.33 786.645,1223.96 787.232,1224.68 787.818,1221.26 788.404,1219.33 788.991,1217.83 789.577,1216.33 790.164,1218.81 790.75,1215.55 791.336,1218.32 791.923,1219.53 792.509,1216.12 793.096,1217.29 793.682,1219.99 794.268,1221.15 794.855,1222 795.441,1222.95 796.028,1224.87 796.614,1224.1 797.201,1220.79 797.787,1218.97 798.373,1220.25 798.96,1216.75 799.546,1220.87 800.133,1220.33 800.719,1218.57 801.305,1213.96 801.892,1214.01 802.478,1212.55 803.065,1211.18 803.651,1215.33 804.237,1216.99 804.824,1215.45 805.41,1209.8 805.997,1213.13 806.583,1211.73 807.17,1212.04 807.756,1212.25 808.342,1211.88 808.929,1213.64 809.515,1213.87 810.102,1212.3 810.688,1209.25 811.274,1211 811.861,1212.71 812.447,1216.56 813.034,1219.56 813.62,1217.73 814.206,1220.59 814.793,1220.02 815.379,1218.53 815.966,1219.46 816.552,1219.02 817.139,1218.76 817.725,1219.83 818.311,1220.76 818.898,1218.91 819.484,1219.98 820.071,1218.05 820.657,1217.86 821.243,1216.02 821.83,1214.65 822.416,1213.18 823.003,1210.34 823.589,1211.5 824.175,1213.03 824.762,1213.19 825.348,1214.77 825.935,1214.57 826.521,1214.02 827.108,1215.57 827.694,1213.68 828.28,1213.53 828.867,1209.28 829.453,1209.67 830.04,1211.45 830.626,1212.85 831.212,1214.4 831.799,1212.94 832.385,1211.82 832.972,1214.6 833.558,1214.52 834.145,1214.37 834.731,1208.87 835.317,1210.64 835.904,1212.35 836.49,1211.01 837.077,1213.96 837.663,1211.16 838.249,1208.51 838.836,1210.18 839.422,1203.43 840.009,1202.47 840.595,1200.3 841.181,1199.47 841.768,1200.37 842.354,1200.94 842.941,1204.06 843.527,1201.6 844.114,1202.36 844.7,1201.58 845.286,1202.11 845.873,1204.25 846.459,1205.09 847.046,1205.52 847.632,1204.76 848.218,1206.69 848.805,1208.42 849.391,1208.46 849.978,1201.91 850.564,1202.43 851.15,1201.54 851.737,1202.24 852.323,1201.13 852.91,1201.98 853.496,1206.89 854.083,1207.34 854.669,1209.12 855.255,1210.82 855.842,1211.14 856.428,1212.45 857.015,1212.53 857.601,1212.59 858.187,1212.29 858.774,1212.46 859.36,1211.4 859.947,1212.81 860.533,1212.99 861.119,1212.87 861.706,1215.58 862.292,1219.6 862.879,1219.52 863.465,1219.25 864.052,1218.75 864.638,1217.29 865.224,1219.88 865.811,1218.03 866.397,1219.32 866.984,1214.81 867.57,1216.05 868.156,1214.57 868.743,1217.18 869.329,1219.76 869.916,1221.98 870.502,1223.98 871.089,1223.37 871.675,1221.31 872.261,1218.07 872.848,1217.74 873.434,1220.14 874.021,1222.39 874.607,1220.51 875.193,1219.91 875.78,1218.4 876.366,1216.59 876.953,1216.62 877.539,1216.6 878.125,1217.53 878.712,1215.68 879.298,1216.89 879.885,1213.88 880.471,1212.21 881.058,1212.1 881.644,1207.66 882.23,1209.45 882.817,1211.19 883.403,1208.47 883.99,1208.5 884.576,1207.13 885.162,1208.64 885.749,1208.78 886.335,1207.9 886.922,1209.57 887.508,1212.53 888.094,1214.02 888.681,1217.03 889.267,1215.35 889.854,1213.68 890.44,1213.57 891.027,1213.2 891.613,1210.62 892.199,1210.39 892.786,1210.59 893.372,1209.37 893.959,1209.6 894.545,1209.79 895.131,1212.77 895.718,1214.21 896.304,1214.23 896.891,1214.23 897.477,1212.69 898.063,1212.47 898.65,1219.34 899.236,1221.94 899.823,1219.88 900.409,1220.87 900.996,1218.97 901.582,1217.07 902.168,1219.81 902.755,1219.63 903.341,1216.43 903.928,1213.57 904.514,1214.97 905.1,1213.5 905.687,1216.26 906.273,1213 906.86,1211.46 907.446,1210.17 908.032,1211.49 908.619,1210.13 909.205,1211.34 909.792,1209.81 910.378,1206.87 910.965,1206.69 911.551,1205.38 912.137,1205.7 912.724,1206.14 913.31,1207.94 913.897,1212.5 914.483,1214.09 915.069,1215.49 915.656,1216.78 916.242,1217.73 916.829,1217.36 917.415,1216.9 918.002,1216.64 918.588,1218.19 919.174,1214.88 919.761,1217.68 920.347,1217.4 920.934,1220.55 921.52,1218.46 922.106,1218.03 922.693,1219.23 923.279,1221.62 923.866,1216.89 924.452,1215.7 925.038,1216.45 925.625,1217.56 926.211,1217.32 926.798,1212.57 927.384,1216.81 927.971,1215.21 928.557,1215.05 929.143,1214.88 929.73,1214.57 930.316,1214.67 930.903,1212.88 931.489,1211.71 932.075,1211.48 932.662,1208.75 933.248,1207.44 933.835,1209.35 934.421,1208.17 935.007,1209.91 935.594,1210.29 936.18,1210.22 936.767,1208.87 937.353,1211.78 937.94,1212.06 938.526,1213.22 939.112,1210.37 939.699,1214.48 940.285,1213.12 940.872,1214.35 941.458,1212.96 942.044,1213.97 942.631,1213.96 943.217,1213.85 943.804,1210.88 944.39,1210.95 944.976,1206.67 945.563,1208.72 946.149,1207.44 946.736,1206.41 947.322,1205.39 947.909,1208.71 948.495,1207.37 949.081,1210.46 949.668,1206.27 950.254,1206.67 950.841,1207.06 951.427,1208.98 952.013,1204.94 952.6,1210.09 953.186,1207.41 953.773,1209.05 954.359,1207.61 954.945,1209.37 955.532,1209.62 956.118,1208.26 956.705,1209.89 957.291,1210.07 957.878,1211.72 958.464,1215.02 959.05,1216.2 959.637,1213.47 960.223,1213.54 960.81,1216.14 961.396,1211.96 961.982,1211.93 962.569,1210.48 963.155,1210.36 963.742,1207.6 964.328,1205 964.915,1208.21 965.501,1208.56 966.087,1207.2 966.674,1207.61 967.26,1206.25 967.847,1206.27 968.433,1206.27 969.019,1207.82 969.606,1207.99 970.192,1206.6 970.779,1206.7 971.365,1204.14 971.951,1203.17 972.538,1203.69 973.124,1205.78 973.711,1210.36 974.297,1211.81 974.884,1213.17 975.47,1210.29 976.056,1211.97 976.643,1209.15 977.229,1210.83 977.816,1207.95 978.402,1205.59 978.988,1205.78 979.575,1204.81 980.161,1203.94 980.748,1203.03 981.334,1201.96 981.92,1206.44 982.507,1209.45 983.093,1208.32 983.68,1209.94 984.266,1211.51 984.853,1208.77 985.439,1209.05 986.025,1207.84 986.612,1209.49 987.198,1209.69 987.785,1208.23 988.371,1210.11 988.957,1214.3 989.544,1215.64 990.13,1215.49 990.717,1218.26 991.303,1219.23 991.889,1218.73 992.476,1219.72 993.062,1219.45 993.649,1217.41 994.235,1215.84 994.822,1219.66 995.408,1220.7 995.994,1221.48 996.581,1219.39 997.167,1217.7 997.754,1217.17 998.34,1214.1 998.926,1211.47 999.513,1210.11 1000.1,1211.26 1000.69,1212.56 1001.27,1210.1 1001.86,1214.52 1002.44,1215.95 1003.03,1215.67 1003.62,1212.39 1004.2,1211.13 1004.79,1210.95 1005.38,1212.23 1005.96,1212.07 1006.55,1212.06 1007.14,1213.29 1007.72,1214.72 1008.31,1215.88 1008.9,1215.59 1009.48,1211.02 1010.07,1209.47 1010.65,1209.68 1011.24,1215.25 1011.83,1213.83 1012.41,1216.47 1013,1216.01 1013.59,1213.08 1014.17,1212.79 1014.76,1209.75 1015.35,1211.08 1015.93,1212.41 1016.52,1211 1017.11,1211.25 1017.69,1211.04 1018.28,1211.22 1018.86,1212.95 1019.45,1212.37 1020.04,1213.69 1020.62,1212.08 1021.21,1211.88 1021.8,1214.32 1022.38,1217.06 1022.97,1212.44 1023.56,1211.07 1024.14,1209.41 1024.73,1212.53 1025.32,1212.3 1025.9,1210.81 1026.49,1210.92 1027.07,1211.27 1027.66,1211.01 1028.25,1207.85 1028.83,1208.21 1029.42,1203.98 1030.01,1201.44 1030.59,1200.72 1031.18,1202.75 1031.77,1203.09 1032.35,1202.09 1032.94,1201.05 1033.52,1200.25 1034.11,1201.92 1034.7,1204.06 1035.28,1203.23 1035.87,1205.27 1036.46,1202.85 1037.04,1203.2 1037.63,1202.38 1038.22,1204.31 1038.8,1203.34 1039.39,1203.67 1039.98,1205.84 1040.56,1207.68 1041.15,1207.94 1041.73,1206.77 1042.32,1203.92 1042.91,1204.26 1043.49,1204.42 1044.08,1204.97 1044.67,1205.18 1045.25,1207.01 1045.84,1210.12 1046.43,1210.49 1047.01,1214.6 1047.6,1216.02 1048.19,1214.33 1048.77,1213.25 1049.36,1211.65 1049.94,1214.57 1050.53,1216.11 1051.12,1214.44 1051.7,1213.12 1052.29,1211.93 1052.88,1206.51 1053.46,1208.22 1054.05,1210.02 1054.64,1210.3 1055.22,1210.27 1055.81,1212.74 1056.39,1218.22 1056.98,1220.68 1057.57,1221.44 1058.15,1219.69 1058.74,1217.87 1059.33,1215.91 1059.91,1214.27 1060.5,1212.77 1061.09,1212.78 1061.67,1207.26 1062.26,1209.19 1062.85,1209.28 1063.43,1210.96 1064.02,1209.69 1064.6,1209.63 1065.19,1211.22 1065.78,1212.96 1066.36,1212.66 1066.95,1211.26 1067.54,1211.21 1068.12,1211.07 1068.71,1213.97 1069.3,1213.57 1069.88,1212.46 1070.47,1212.35 1071.06,1211.27 1071.64,1210.07 1072.23,1210.45 1072.81,1206.2 1073.4,1211.03 1073.99,1205.52 1074.57,1205.69 1075.16,1204.32 1075.75,1205.81 1076.33,1203.25 1076.92,1203.83 1077.51,1204.2 1078.09,1203.16 1078.68,1202.1 1079.26,1202.4 1079.85,1202.66 1080.44,1203.21 1081.02,1205.02 1081.61,1205.32 1082.2,1204.42 1082.78,1209.06 1083.37,1209.33 1083.96,1209.74 1084.54,1211.11 1085.13,1211.17 1085.72,1210.02 1086.3,1213.11 1086.89,1214.56 1087.47,1217.46 1088.06,1221.3 1088.65,1222.64 1089.23,1222.14 1089.82,1222.93 1090.41,1221.07 1090.99,1224.49 1091.58,1220.69 1092.17,1223.11 1092.75,1221.13 1093.34,1225.22 1093.93,1223.32 1094.51,1222.34 1095.1,1225.9 1095.68,1229.29 1096.27,1229.7 1096.86,1231.34 1097.44,1228.89 1098.03,1228.28 1098.62,1225.97 1099.2,1230.71 1099.79,1232.67 1100.38,1231.52 1100.96,1233.39 1101.55,1233.67 1102.14,1234.12 1102.72,1235.79 1103.31,1231.87 1103.89,1226.35 1104.48,1227.05 1105.07,1227.43 1105.65,1222.11 1106.24,1220.08 1106.83,1218.36 1107.41,1219.12 1108,1218.58 1108.59,1216.8 1109.17,1217.93 1109.76,1216.01 1110.34,1217.16 1110.93,1215.63 1111.52,1212.65 1112.1,1212.55 1112.69,1215.17 1113.28,1212.28 1113.86,1212.06 1114.45,1211.85 1115.04,1212 1115.62,1214.42 1116.21,1214.21 1116.8,1214.28 1117.38,1214.09 1117.97,1211.22 1118.55,1214.48 1119.14,1211.56 1119.73,1209.91 1120.31,1211.44 1120.9,1210 1121.49,1207.33 1122.07,1203.64 1122.66,1202.65 1123.25,1203.2 1123.83,1204.82 1124.42,1207.79 1125.01,1207.94 1125.59,1209.38 1126.18,1208.09 1126.76,1208.37 1127.35,1211.54 1127.94,1214.3 1128.52,1213.85 1129.11,1210.95 1129.7,1211.33 1130.28,1211.43 1130.87,1209.83 1131.46,1214.21 1132.04,1214.34 1132.63,1214.02 1133.21,1215.42 1133.8,1213.63 1134.39,1212.13 1134.97,1212.13 1135.56,1209.32 1136.15,1207.82 1136.73,1209.48 1137.32,1209.56 1137.91,1209.54 1138.49,1208.39 1139.08,1208.63 1139.67,1211.47 1140.25,1210.17 1140.84,1210.28 1141.42,1210.68 1142.01,1209.34 1142.6,1213.56 1143.18,1213.24 1143.77,1213.39 1144.36,1213.19 1144.94,1210.59 1145.53,1210.74 1146.12,1210.6 1146.7,1212.04 1147.29,1210.64 1147.88,1209.28 1148.46,1208.03 1149.05,1210.89 1149.63,1210.96 1150.22,1212.47 1150.81,1212.53 1151.39,1210.93 1151.98,1211.02 1152.57,1208.34 1153.15,1207.39 1153.74,1210.36 1154.33,1207.72 1154.91,1207.78 1155.5,1208.08 1156.09,1208.13 1156.67,1205.55 1157.26,1206.03 1157.84,1203.69 1158.43,1204.32 1159.02,1204.56 1159.6,1206.55 1160.19,1205.07 1160.78,1204.03 1161.36,1201.65 1161.95,1200.4 1162.54,1201.26 1163.12,1201.91 1163.71,1204.01 1164.29,1204.73 1164.88,1204.2 1165.47,1204.76 1166.05,1206.45 1166.64,1212.27 1167.23,1213.45 1167.81,1212.14 1168.4,1213.49 1168.99,1214.78 1169.57,1214.91 1170.16,1213.48 1170.75,1213.38 1171.33,1213.51 1171.92,1213.21 1172.5,1214.6 1173.09,1211.51 1173.68,1211.46 1174.26,1210.04 1174.85,1208.91 1175.44,1213.33 1176.02,1213.56 1176.61,1211.92 1177.2,1211.4 1177.78,1213.16 1178.37,1211.98 1178.96,1213.08 1179.54,1211.53 1180.13,1214.13 1180.71,1213.98 1181.3,1213.9 1181.89,1213.92 1182.47,1212.31 1183.06,1213.89 1183.65,1213.92 1184.23,1212.5 1184.82,1212.23 1185.41,1210.69 1185.99,1210.65 1186.58,1210.5 1187.16,1207.87 1187.75,1208.24 1188.34,1208.52 1188.92,1210.06 1189.51,1210.07 1190.1,1210.21 1190.68,1210.11 1191.27,1208.89 1191.86,1210.62 1192.44,1211.77 1193.03,1210.03 1193.62,1211.59 1194.2,1214.3 1194.79,1214.1 1195.37,1212.56 1195.96,1211.03 1196.55,1213.98 1197.13,1215.44 1197.72,1213.89 1198.31,1212.38 1198.89,1212.16 1199.48,1216.05 1200.07,1218.55 1200.65,1216.99 1201.24,1219.7 1201.83,1219.31 1202.41,1218.76 1203,1217.12 1203.58,1216.76 1204.17,1216.28 1204.76,1216.82 1205.34,1216.34 1205.93,1211.62 1206.52,1211.59 1207.1,1213.31 1207.69,1213.36 1208.28,1211.82 1208.86,1210.32 1209.45,1208.79 1210.03,1206.17 1210.62,1206.54 1211.21,1208.04 1211.79,1208.3 1212.38,1208.72 1212.97,1208.47 1213.55,1211.82 1214.14,1210.6 1214.73,1210.6 1215.31,1207.63 1215.9,1209.5 1216.49,1211.17 1217.07,1212.27 1217.66,1213.65 1218.24,1213.5 1218.83,1214.66 1219.42,1212.74 1220,1211.16 1220.59,1209.77 1221.18,1206.72 1221.76,1206.75 1222.35,1208.42 1222.94,1210.01 1223.52,1211.15 1224.11,1211.19 1224.7,1211.4 1225.28,1208.27 1225.87,1208.55 1226.45,1205.91 1227.04,1206.13 1227.63,1206.38 1228.21,1205.29 1228.8,1206.74 1229.39,1208.39 1229.97,1209.84 1230.56,1208.64 1231.15,1207.34 1231.73,1209.23 1232.32,1210.65 1232.91,1209.37 1233.49,1212.33 1234.08,1212.37 1234.66,1210.88 1235.25,1209.61 1235.84,1206.71 1236.42,1208.27 1237.01,1205.55 1237.6,1208.86 1238.18,1212.35 1238.77,1213.67 1239.36,1213.69 1239.94,1214.98 1240.53,1213.32 1241.11,1214.87 1241.7,1214.7 1242.29,1216.03 1242.87,1217.02 1243.46,1216.86 1244.05,1217.94 1244.63,1220.43 1245.22,1221.39 1245.81,1220.72 1246.39,1220.35 1246.98,1218.2 1247.57,1217.73 1248.15,1215.8 1248.74,1214.04 1249.32,1212.31 1249.91,1212.12 1250.5,1213.6 1251.08,1208.13 1251.67,1202.64 1252.26,1201.43 1252.84,1200.55 1253.43,1201.21 1254.02,1203.32 1254.6,1202.52 1255.19,1205.74 1255.78,1207.06 1256.36,1203.11 1256.95,1200.58 1257.53,1201.04 1258.12,1198.71 1258.71,1199.3 1259.29,1196.91 1259.88,1197.37 1260.47,1197.97 1261.05,1197.28 1261.64,1199.47 1262.23,1198.95 1262.81,1199.57 1263.4,1201.55 1263.98,1202.01 1264.57,1202.48 1265.16,1201.42 1265.74,1200.5 1266.33,1199.63 1266.92,1200.48 1267.5,1201.16 1268.09,1203.28 1268.68,1205.24 1269.26,1208.51 1269.85,1208.82 1270.44,1210.63 1271.02,1210.42 1271.61,1210.61 1272.19,1210.67 1272.78,1211.06 1273.37,1209.73 1273.95,1213.05 1274.54,1211.32 1275.13,1210.92 1275.71,1212.28 1276.3,1211.97 1276.89,1212.22 1277.47,1213.2 1278.06,1212.94 1278.65,1212.47 1279.23,1212.32 1279.82,1215.1 1280.4,1215.11 1280.99,1214.65 1281.58,1217.1 1282.16,1216.98 1282.75,1216.65 1283.34,1217.86 1283.92,1221.57 1284.51,1222.36 1285.1,1221.64 1285.68,1222.55 1286.27,1220.66 1286.86,1221.71 1287.44,1222.52 1288.03,1221.89 1288.61,1224.11 1289.2,1223.31 1289.79,1222.72 1290.37,1222.21 1290.96,1218.58 1291.55,1213.81 1292.13,1216.36 1292.72,1220.23 1293.31,1222.12 1293.89,1218.58 1294.48,1215.16 1295.06,1216.18 1295.65,1209.85 1296.24,1209.8 1296.82,1209.66 1297.41,1209.97 1298,1210.1 1298.58,1208.65 1299.17,1210.02 1299.76,1210.03 1300.34,1211.54 1300.93,1211.44 1301.52,1211.18 1302.1,1212.66 1302.69,1209.58 1303.27,1209.54 1303.86,1212.2 1304.45,1213.57 1305.03,1213.07 1305.62,1212.87 1306.21,1217.24 1306.79,1216.94 1307.38,1215.26 1307.97,1211.95 1308.55,1212.18 1309.14,1210.77 1309.73,1207.96 1310.31,1202.67 1310.9,1200.11 1311.48,1203.57 1312.07,1202.89 1312.66,1201.42 1313.24,1204.9 1313.83,1202.37 1314.42,1201.21 1315,1203.43 1315.59,1205.11 1316.18,1205.36 1316.76,1207.25 1317.35,1204.5 1317.93,1206.2 1318.52,1208.09 1319.11,1208.03 1319.69,1206.21 1320.28,1207.85 1320.87,1207.51 1321.45,1210.65 1322.04,1210.68 1322.63,1209.19 1323.21,1209.17 1323.8,1210.7 1324.39,1210.73 1324.97,1212.13 1325.56,1211.97 1326.14,1211.85 1326.73,1213.43 1327.32,1211.91 1327.9,1209.37 1328.49,1209.6 1329.08,1211.15 1329.66,1212.19 1330.25,1213.36 1330.84,1210.24 1331.42,1210.03 1332.01,1212.97 1332.6,1211.67 1333.18,1208.74 1333.77,1210.32 1334.35,1209.98 1334.94,1212.88 1335.53,1215.56 1336.11,1214.94 1336.7,1211.93 1337.29,1209.14 1337.87,1212.04 1338.46,1209.04 1339.05,1210.39 1339.63,1210.09 1340.22,1212.89 1340.8,1215.78 1341.39,1214.22 1341.98,1209.61 1342.56,1209.73 1343.15,1209.97 1343.74,1210.17 1344.32,1211.38 1344.91,1210.98 1345.5,1209.47 1346.08,1207.84 1346.67,1209.42 1347.26,1209.72 1347.84,1212.73 1348.43,1212.72 1349.01,1212.67 1349.6,1209.73 1350.19,1212.41 1350.77,1214.98 1351.36,1216.04 1351.95,1215.54 1352.53,1215.58 1353.12,1215.32 1353.71,1215.4 1354.29,1216.61 1354.88,1215.24 1355.47,1214.97 1356.05,1215.93 1356.64,1215.6 1357.22,1215.72 1357.81,1213.93 1358.4,1213.6 1358.98,1214.92 1359.57,1214.94 1360.16,1216.12 1360.74,1217.23 1361.33,1222.3 1361.92,1221.09 1362.5,1220.29 1363.09,1219.78 1363.68,1216.37 1364.26,1216.24 1364.85,1214.68 1365.43,1214.42 1366.02,1214.3 1366.61,1214.26 1367.19,1213.93 1367.78,1214.88 1368.37,1208.97 1368.95,1207.61 1369.54,1209.24 1370.13,1209.11 1370.71,1209.41 1371.3,1208.39 1371.88,1210.03 1372.47,1210.21 1373.06,1208.44 1373.64,1207.02 1374.23,1207.38 1374.82,1206.24 1375.4,1205.2 1375.99,1202.5 1376.58,1204.05 1377.16,1205.64 1377.75,1206.07 1378.34,1204.98 1378.92,1203.82 1379.51,1204.61 1380.09,1204.93 1380.68,1205.42 1381.27,1205.6 1381.85,1207.33 1382.44,1207.69 1383.03,1206.34 1383.61,1205.29 1384.2,1206.95 1384.79,1205.75 1385.37,1206.23 1385.96,1206.8 1386.55,1207 1387.13,1205.81 1387.72,1206.08 1388.3,1205.06 1388.89,1203.64 1389.48,1201.22 1390.06,1201.84 1390.65,1203.72 1391.24,1207.31 1391.82,1207.71 1392.41,1209.54 1393,1210.93 1393.58,1214.14 1394.17,1216.95 1394.75,1215.46 1395.34,1216.61 1395.93,1210.81 1396.51,1212.35 1397.1,1212.47 1397.69,1215.3 1398.27,1215.14 1398.86,1212.06 1399.45,1211.97 1400.03,1210.65 1400.62,1210.94 1401.21,1212.86 1401.79,1212.98 1402.38,1212.84 1402.96,1212.91 1403.55,1215.89 1404.14,1214.17 1404.72,1215.31 1405.31,1213.5 1405.9,1217.46 1406.48,1218.76 1407.07,1218.39 1407.66,1215.03 1408.24,1213.33 1408.83,1214.52 1409.42,1217.06 1410,1215.36 1410.59,1213.61 1411.17,1210.54 1411.76,1212.03 1412.35,1211.89 1412.93,1211.48 1413.52,1210.36 1414.11,1213.26 1414.69,1210.38 1415.28,1210.62 1415.87,1211.69 1416.45,1209.95 1417.04,1207.29 1417.63,1207.78 1418.21,1207.93 1418.8,1207.85 1419.38,1206.8 1419.97,1204.14 1420.56,1203.26 1421.14,1203.87 1421.73,1208.76 1422.32,1211.65 1422.9,1208.74 1423.49,1210.42 1424.08,1206.45 1424.66,1206.81 1425.25,1208.45 1425.83,1208.7 1426.42,1210.13 1427.01,1207.58 1427.59,1206.32 1428.18,1208.25 1428.77,1211.18 1429.35,1212.46 1429.94,1212.59 1430.53,1211.29 1431.11,1213.84 1431.7,1212.53 1432.29,1212.61 1432.87,1210.73 1433.46,1208.07 1434.04,1207.89 1434.63,1208.42 1435.22,1207.1 1435.8,1205.65 1436.39,1207.47 1436.98,1207.55 1437.56,1207.79 1438.15,1208.2 1438.74,1204.05 1439.32,1204.37 1439.91,1204.51 1440.5,1204.86 1441.08,1205.11 1441.67,1206.85 1442.25,1205.76 1442.84,1207.7 1443.43,1205.09 1444.01,1206.93 1444.6,1204.36 1445.19,1203.42 1445.77,1205.37 1446.36,1205.88 1446.95,1206.35 1447.53,1209.54 1448.12,1208.52 1448.7,1207.41 1449.29,1209 1449.88,1207.82 1450.46,1207.72 1451.05,1208.12 1451.64,1212.07 1452.22,1212.18 1452.81,1212.26 1453.4,1216.5 1453.98,1215.86 1454.57,1215.8 1455.16,1214.12 1455.74,1215.35 1456.33,1216.63 1456.91,1215.37 1457.5,1215.24 1458.09,1214.93 1458.67,1215.8 1459.26,1215.62 1459.85,1213.76 1460.43,1213.71 1461.02,1212.12 1461.61,1211.99 1462.19,1210.59 1462.78,1210.53 1463.37,1212.02 1463.95,1213.49 1464.54,1213.5 1465.12,1213.54 1465.71,1213.69 1466.3,1211.81 1466.88,1216.03 1467.47,1214.23 1468.06,1212.71 1468.64,1212.1 1469.23,1212.07 1469.82,1213.48 1470.4,1211.91 1470.99,1208.94 1471.57,1208.93 1472.16,1205.06 1472.75,1206.87 1473.33,1208.31 1473.92,1211.08 1474.51,1217.98 1475.09,1217.43 1475.68,1216.9 1476.27,1217.85 1476.85,1217.5 1477.44,1217.12 1478.03,1218.18 1478.61,1219.24 1479.2,1221.07 1479.78,1220.29 1480.37,1215.21 1480.96,1214.78 1481.54,1217.27 1482.13,1219.68 1482.72,1222.16 1483.3,1220 1483.89,1219.49 1484.48,1218.92 1485.06,1216.87 1485.65,1216.64 1486.24,1219.11 1486.82,1217.25 1487.41,1216.93 1487.99,1216.64 1488.58,1219.32 1489.17,1218.58 1489.75,1219.23 1490.34,1217.1 1490.93,1218.06 1491.51,1217.63 1492.1,1214.37 1492.69,1211.36 1493.27,1208.56 1493.86,1208.74 1494.45,1211.98 1495.03,1209.03 1495.62,1210.3 1496.2,1208.88 1496.79,1214.66 1497.38,1214.71 1497.96,1217.02 1498.55,1216.81 1499.14,1219.29 1499.72,1221.72 1500.31,1222.56 1500.9,1220.66 1501.48,1217.43 1502.07,1217.09 1502.65,1216.71 1503.24,1215.08 1503.83,1211.99 1504.41,1210.55 1505,1207.91 1505.59,1206.67 1506.17,1207.11 1506.76,1205.93 1507.35,1204.95 1507.93,1205.13 1508.52,1205.73 1509.11,1207.38 1509.69,1210.36 1510.28,1209.41 1510.86,1212.25 1511.45,1212.12 1512.04,1210.54 1512.62,1207.79 1513.21,1209.5 1513.8,1210.69 1514.38,1210.8 1514.97,1209.32 1515.56,1212.24 1516.14,1209.47 1516.73,1207.88 1517.32,1206.4 1517.9,1206.41 1518.49,1206.9 1519.07,1207.32 1519.66,1206.38 1520.25,1208.02 1520.83,1208.11 1521.42,1205.62 1522.01,1203.2 1522.59,1203.95 1523.18,1205.63 1523.77,1207.32 1524.35,1207.55 1524.94,1207.91 1525.52,1208.22 1526.11,1205.68 1526.7,1203.13 1527.28,1202.05 1527.87,1202.59 1528.46,1203.05 1529.04,1204.88 1529.63,1205.26 1530.22,1207.01 1530.8,1207.31 1531.39,1208.89 1531.98,1210.39 1532.56,1213.13 1533.15,1213.07 1533.73,1214.29 1534.32,1210.96 1534.91,1208.22 1535.49,1207.22 1536.08,1205.81 1536.67,1204.85 1537.25,1206.34 1537.84,1206.87 1538.43,1207.32 1539.01,1211.83 1539.6,1213.49 1540.19,1212.03 1540.77,1210.88 1541.36,1212.46 1541.94,1215.03 1542.53,1214.67 1543.12,1215.98 1543.7,1215.79 1544.29,1212.93 1544.88,1211.36 1545.46,1210.98 1546.05,1211.01 1546.64,1208.34 1547.22,1208.55 1547.81,1209.99 1548.4,1211.37 1548.98,1212.95 1549.57,1212.67 1550.15,1209.88 1550.74,1211.29 1551.33,1211.18 1551.91,1206.82 1552.5,1212.78 1553.09,1212.65 1553.67,1208.43 1554.26,1208.39 1554.85,1208.34 1555.43,1210.87 1556.02,1211.18 1556.6,1211.41 1557.19,1208.39 1557.78,1212.54 1558.36,1210.88 1558.95,1210.97 1559.54,1209.65 1560.12,1209.95 1560.71,1210.19 1561.3,1211.87 1561.88,1211.36 1562.47,1211.41 1563.06,1209.88 1563.64,1209.77 1564.23,1206.97 1564.81,1203.93 1565.4,1204.16 1565.99,1206.09 1566.57,1205.13 1567.16,1206.86 1567.75,1204.35 1568.33,1204.75 1568.92,1208 1569.51,1208.08 1570.09,1210.07 1570.68,1207.61 1571.27,1207.9 1571.85,1206.73 1572.44,1209.73 1573.02,1208.47 1573.61,1211.46 1574.2,1211.21 1574.78,1210.01 1575.37,1211.69 1575.96,1213.44 1576.54,1216.17 1577.13,1213.19 1577.72,1211.47 1578.3,1211.47 1578.89,1211.61 1579.47,1211.66 1580.06,1211.17 1580.65,1210.9 1581.23,1210.91 1581.82,1210.91 1582.41,1209.22 1582.99,1207.9 1583.58,1209.32 1584.17,1209.63 1584.75,1210.9 1585.34,1210.63 1585.93,1206.33 1586.51,1209.32 1587.1,1209.21 1587.68,1210.91 1588.27,1210.82 1588.86,1209.54 1589.44,1208.12 1590.03,1206.67 1590.62,1208.19 1591.2,1211.14 1591.79,1209.75 1592.38,1209.73 1592.96,1208.6 1593.55,1207.52 1594.14,1206.26 1594.72,1205.42 1595.31,1207.52 1595.89,1206.43 1596.48,1207.98 1597.07,1207.96 1597.65,1209.72 1598.24,1209.71 1598.83,1209.89 1599.41,1212.45 1600,1212.28 1600.59,1211.07 1601.17,1212.51 1601.76,1212.45 1602.34,1208.21 1602.93,1208.52 1603.52,1208.45 1604.1,1211.27 1604.69,1211.52 1605.28,1212.9 1605.86,1211.32 1606.45,1211.01 1607.04,1210.98 1607.62,1212.39 1608.21,1208.16 1608.8,1207.96 1609.38,1205.5 1609.97,1207.08 1610.55,1207.5 1611.14,1207.73 1611.73,1207.82 1612.31,1212.27 1612.9,1210.87 1613.49,1210.55 1614.07,1212.13 1614.66,1213.6 1615.25,1214.83 1615.83,1216.18 1616.42,1214.31 1617.01,1215.81 1617.59,1215.59 1618.18,1212.73 1618.76,1214.31 1619.35,1213.92 1619.94,1213.53 1620.52,1213.46 1621.11,1213.32 1621.7,1213.34 1622.28,1211.73 1622.87,1211.51 1623.46,1208.99 1624.04,1210.6 1624.63,1210.49 1625.22,1209.08 1625.8,1210.66 1626.39,1215.01 1626.97,1214.89 1627.56,1215.94 1628.15,1215.53 1628.73,1216.75 1629.32,1215.03 1629.91,1214.67 1630.49,1215.78 1631.08,1212.76 1631.67,1212.75 1632.25,1213.75 1632.84,1214.61 1633.42,1211.47 1634.01,1211.69 1634.6,1212.96 1635.18,1212.79 1635.77,1209.83 1636.36,1209.83 1636.94,1209.55 1637.53,1209.72 1638.12,1209.97 1638.7,1208.4 1639.29,1208.11 1639.88,1209.67 1640.46,1209.87 1641.05,1211.36 1641.63,1211.42 1642.22,1211.28 1642.81,1212.76 1643.39,1206.71 1643.98,1208.42 1644.57,1208.62 1645.15,1207.59 1645.74,1207.87 1646.33,1206.52 1646.91,1206.48 1647.5,1205.43 1648.09,1204.3 1648.67,1205.9 1649.26,1206.33 1649.84,1209.68 1650.43,1211.38 1651.02,1211.38 1651.6,1213.09 1652.19,1211.53 1652.78,1213.21 1653.36,1220.22 1653.95,1222.52 1654.54,1223.41 1655.12,1224.27 1655.71,1224.95 1656.29,1221.61 1656.88,1222.28 1657.47,1224.56 1658.05,1221.09 1658.64,1219.09 1659.23,1215.92 1659.81,1218.24 1660.4,1216.35 1660.99,1216.18 1661.57,1216.03 1662.16,1212.66 1662.75,1209.84 1663.33,1208.67 1663.92,1205.97 1664.5,1205.92 1665.09,1208.96 1665.68,1207.65 1666.26,1207.93 1666.85,1209.77 1667.44,1209.55 1668.02,1207.99 1668.61,1208.34 1669.2,1205.73 1669.78,1204.55 1670.37,1201.66 1670.96,1204.97 1671.54,1206.47 1672.13,1205.45 1672.71,1208.47 1673.3,1209.96 1673.89,1207.29 1674.47,1207.79 1675.06,1208.23 1675.65,1209.44 1676.23,1209.48 1676.82,1209.5 1677.41,1209.37 1677.99,1211.09 1678.58,1214.12 1679.17,1211.31 1679.75,1211.37 1680.34,1212.79 1680.92,1214.37 1681.51,1214.32 1682.1,1210.05 1682.68,1208.77 1683.27,1207.14 1683.86,1210.32 1684.44,1210.37 1685.03,1208.9 1685.62,1207.64 1686.2,1213.44 1686.79,1213.17 1687.37,1211.53 1687.96,1213.07 1688.55,1212.99 1689.13,1211.55 1689.72,1215.83 1690.31,1211.57 1690.89,1211.54 1691.48,1212.8 1692.07,1212.59 1692.65,1214.15 1693.24,1215.13 1693.83,1213.47 1694.41,1210.24 1695,1210.2 1695.58,1208.88 1696.17,1210.44 1696.76,1209 1697.34,1210.4 1697.93,1206.27 1698.52,1205.09 1699.1,1205.47 1699.69,1211.34 1700.28,1212.67 1700.86,1211.31 1701.45,1209.82 1702.04,1207.09 1702.62,1210.24 1703.21,1211.78 1703.79,1210.56 1704.38,1213.5 1704.97,1213.54 1705.55,1214.75 1706.14,1213.25 1706.73,1214.64 1707.31,1211.87 1707.9,1213.28 1708.49,1211.93 1709.07,1210.62 1709.66,1209.02 1710.24,1207.79 1710.83,1210.68 1711.42,1209.41 1712,1211.02 1712.59,1212.38 1713.18,1213.73 1713.76,1212.46 1714.35,1212.49 1714.94,1210.95 1715.52,1209.63 1716.11,1213.81 1716.7,1216.34 1717.28,1213.18 1717.87,1212.92 1718.45,1212.86 1719.04,1212.93 1719.63,1211.63 1720.21,1212.82 1720.8,1215.26 1721.39,1220.53 1721.97,1219.93 1722.56,1220.75 1723.15,1221.34 1723.73,1219.33 1724.32,1217.29 1724.91,1214.06 1725.49,1214.06 1726.08,1212.55 1726.66,1212.63 1727.25,1211.44 1727.84,1215.48 1728.42,1213.85 1729.01,1212.48 1729.6,1212.34 1730.18,1210.59 1730.77,1209.33 1731.36,1207.9 1731.94,1206.79 1732.53,1208.48 1733.11,1207.3 1733.7,1203.17 1734.29,1202.19 1734.87,1202.83 1735.46,1201.97 1736.05,1203.79 1736.63,1204.45 1737.22,1206.36 1737.81,1209.57 1738.39,1208.17 1738.98,1209.8 1739.57,1209.97 1740.15,1208.62 1740.74,1207.1 1741.32,1205.89 1741.91,1206 1742.5,1207.51 1743.08,1207.78 1743.67,1208.09 1744.26,1208.1 1744.84,1208.26 1745.43,1206.99 1746.02,1205.8 1746.6,1206.01 1747.19,1206.24 1747.78,1206.39 1748.36,1205.45 1748.95,1205.75 1749.53,1204.38 1750.12,1204.73 1750.71,1203.59 1751.29,1201.41 1751.88,1203.25 1752.47,1203.27 1753.05,1206.78 1753.64,1204.36 1754.23,1204.4 1754.81,1209.09 1755.4,1207.47 1755.99,1207.86 1756.57,1207.97 1757.16,1207.77 1757.74,1206.38 1758.33,1207.92 1758.92,1213.81 1759.5,1215.22 1760.09,1210.83 1760.68,1210.84 1761.26,1210.88 1761.85,1209.74 1762.44,1212.67 1763.02,1212.55 1763.61,1211.05 1764.19,1211.31 1764.78,1211.21 1765.37,1212.39 1765.95,1212.31 1766.54,1210.86 1767.13,1210.85 1767.71,1210.59 1768.3,1209.17 1768.89,1209.07 1769.47,1211.82 1770.06,1211.63 1770.65,1212.79 1771.23,1213.92 1771.82,1216.28 1772.4,1214.53 1772.99,1217.34 1773.58,1216.97 1774.16,1216.7 1774.75,1216.57 1775.34,1217.88 1775.92,1218.88 1776.51,1219.56 1777.1,1220.33 1777.68,1219.65 1778.27,1218.06 1778.86,1218.94 1779.44,1211.28 1780.03,1211.54 1780.61,1208.73 1781.2,1208.84 1781.79,1210.12 1782.37,1208.67 1782.96,1208.4 1783.55,1210 1784.13,1210.05 1784.72,1210.17 1785.31,1208.48 1785.89,1207.33 1786.48,1207.58 1787.06,1205.22 1787.65,1207.22 1788.24,1207.65 1788.82,1208.3 1789.41,1209.8 1790,1207.04 1790.58,1207.02 1791.17,1207.28 1791.76,1206.09 1792.34,1206.37 1792.93,1205.23 1793.52,1202.62 1794.1,1206.06 1794.69,1205.21 1795.27,1207.13 1795.86,1208.69 1796.45,1208.48 1797.03,1214.04 1797.62,1213.79 1798.21,1216.4 1798.79,1216.06 1799.38,1215.87 1799.97,1212.97 1800.55,1214.42 1801.14,1210.18 1801.73,1208.98 1802.31,1208.98 1802.9,1209.18 1803.48,1209.13 1804.07,1206.17 1804.66,1212.29 1805.24,1213.79 1805.83,1212.34 1806.42,1213.99 1807,1213.78 1807.59,1212.32 1808.18,1210.56 1808.76,1208.99 1809.35,1209.23 1809.94,1207.81 1810.52,1206.73 1811.11,1207.08 1811.69,1207.29 1812.28,1208.92 1812.87,1208.82 1813.45,1206.06 1814.04,1206.26 1814.63,1202.23 1815.21,1205.45 1815.8,1207.08 1816.39,1207.08 1816.97,1208.86 1817.56,1208.79 1818.14,1207.62 1818.73,1206.2 1819.32,1205.12 1819.9,1206.85 1820.49,1208.52 1821.08,1205.96 1821.66,1206.23 1822.25,1206.43 1822.84,1208.27 1823.42,1209.89 1824.01,1208.57 1824.6,1208.92 1825.18,1210.46 1825.77,1211.54 1826.35,1211.3 1826.94,1209.88 1827.53,1210.04 1828.11,1213.14 1828.7,1214.34 1829.29,1215.53 1829.87,1213.45 1830.46,1214.73 1831.05,1217.14 1831.63,1215.06 1832.22,1213.32 1832.81,1214.64 1833.39,1214.54 1833.98,1214.34 1834.56,1217 1835.15,1218.17 1835.74,1219.05 1836.32,1218.73 1836.91,1218.22 1837.5,1219.25 1838.08,1220.13 1838.67,1221.03 1839.26,1221.78 1839.84,1222.8 1840.43,1220.91 1841.01,1220.28 1841.6,1219.75 1842.19,1223.56 1842.77,1218.54 1843.36,1218.15 1843.95,1218.98 1844.53,1218.56 1845.12,1219.55 1845.71,1220.42 1846.29,1221.11 1846.88,1221.91 1847.47,1218.4 1848.05,1218.16 1848.64,1218.74 1849.22,1218.62 1849.81,1216.56 1850.4,1216.2 1850.98,1215.81 1851.57,1215.64 1852.16,1215.35 1852.74,1213.48 1853.33,1211.7 1853.92,1210.06 1854.5,1211.51 1855.09,1211.52 1855.68,1208.49 1856.26,1207.14 1856.85,1206.83 1857.43,1205.41 1858.02,1205.55 1858.61,1207.26 1859.19,1207.26 1859.78,1205.99 1860.37,1204.73 1860.95,1204.95 1861.54,1204.07 1862.13,1202.7 1862.71,1206.05 1863.3,1201.89 1863.88,1202.47 1864.47,1202.85 1865.06,1204.6 1865.64,1204.79 1866.23,1205.17 1866.82,1205.46 1867.4,1207.26 1867.99,1207.19 1868.58,1211.72 1869.16,1210.64 1869.75,1211.95 1870.34,1211.92 1870.92,1212.91 1871.51,1209.98 1872.09,1208.63 1872.68,1208.67 1873.27,1210.62 1873.85,1210.3 1874.44,1212.22 1875.03,1210.79 1875.61,1213.49 1876.2,1210.68 1876.79,1210.69 1877.37,1209.46 1877.96,1206.76 1878.55,1205.71 1879.13,1206.05 1879.72,1206.23 1880.3,1209.23 1880.89,1210.74 1881.48,1209.22 1882.06,1207.78 1882.65,1206.64 1883.24,1207.17 1883.82,1205.67 1884.41,1204.7 1885,1205.11 1885.58,1204.17 1886.17,1200.1 1886.76,1200.82 1887.34,1199.65 1887.93,1201.48 1888.51,1200.76 1889.1,1205.67 1889.69,1207.35 1890.27,1207.62 1890.86,1206.69 1891.45,1205.53 1892.03,1200.18 1892.62,1200.71 1893.21,1204.19 1893.79,1202.06 1894.38,1202.51 1894.96,1202.93 1895.55,1203.34 1896.14,1205.26 1896.72,1204.21 1897.31,1201.51 1897.9,1205.2 1898.48,1201.15 1899.07,1203.16 1899.66,1203.45 1900.24,1206.94 1900.83,1205.64 1901.42,1205.92 1902,1208.83 1902.59,1208.74 1903.17,1207.4 1903.76,1207.76 1904.35,1207.88 1904.93,1208.11 1905.52,1209.43 1906.11,1210.75 1906.69,1214.86 1907.28,1214.63 1907.87,1212.81 1908.45,1214.08 1909.04,1214.17 1909.63,1218.25 1910.21,1219.17 1910.8,1214.43 1911.38,1214.32 1911.97,1212.83 1912.56,1210.15 1913.14,1210.36 1913.73,1208.66 1914.32,1208.83 1914.9,1207.67 1915.49,1209.11 1916.08,1212.28 1916.66,1212.59 1917.25,1211.25 1917.83,1209.79 1918.42,1211.38 1919.01,1211.42 1919.59,1212.78 1920.18,1212.66 1920.77,1212.52 1921.35,1213.92 1921.94,1212.31 1922.53,1212.07 1923.11,1210.42 1923.7,1211.97 1924.29,1212.06 1924.87,1210.61 1925.46,1213.45 1926.04,1213.46 1926.63,1215.96 1927.22,1220.06 1927.8,1220.87 1928.39,1218.87 1928.98,1218.24 1929.56,1219.28 1930.15,1218.76 1930.74,1219.76 1931.32,1219.2 1931.91,1221.79 1932.5,1219.66 1933.08,1220.78 1933.67,1220.12 1934.25,1216.94 1934.84,1217.94 1935.43,1218.86 1936.01,1216.89 1936.6,1218.18 1937.19,1217.52 1937.77,1218.49 1938.36,1216.63 1938.95,1216.22 1939.53,1214.32 1940.12,1212.65 1940.71,1212.37 1941.29,1210.79 1941.88,1210.72 1942.46,1210.92 1943.05,1211.07 1943.64,1210.84 1944.22,1209.67 1944.81,1211.09 1945.4,1212.31 1945.98,1215.14 1946.57,1212.43 1947.16,1212.68 1947.74,1215.49 1948.33,1216.6 1948.91,1213.22 1949.5,1212.78 1950.09,1212.55 1950.67,1212.46 1951.26,1210.94 1951.85,1211.17 1952.43,1209.79 1953.02,1208.47 1953.61,1208.82 1954.19,1208.93 1954.78,1207.47 1955.37,1209.2 1955.95,1203.57 1956.54,1205.55 1957.12,1207.56 1957.71,1208.05 1958.3,1207.93 1958.88,1206.52 1959.47,1209.53 1960.06,1209.42 1960.64,1209.52 1961.23,1208.2 1961.82,1211.37 1962.4,1210.29 1962.99,1210.23 1963.58,1214.41 1964.16,1212.88 1964.75,1211.32 1965.33,1211.27 1965.92,1209.92 1966.51,1211.25 1967.09,1210.92 1967.68,1210.92 1968.27,1212.37 1968.85,1213.96 1969.44,1210.82 1970.03,1212.31 1970.61,1215.03 1971.2,1216.23 1971.78,1221.28 1972.37,1220.56 1972.96,1220.22 1973.54,1219.77 1974.13,1216.64 1974.72,1214.83 1975.3,1214.34 1975.89,1210.9 1976.48,1212.63 1977.06,1212.42 1977.65,1209.33 1978.24,1209.33 1978.82,1208.12 1979.41,1208.23 1979.99,1205.69 1980.58,1205.83 1981.17,1204.68 1981.75,1203.9 1982.34,1204.28 1982.93,1207.47 1983.51,1205.14 1984.1,1202.39 1984.69,1202.76 1985.27,1201.88 1985.86,1202.43 1986.45,1202.82 1987.03,1202.15 1987.62,1199.68 1988.2,1201.6 1988.79,1200.81 1989.38,1204.2 1989.96,1205.91 1990.55,1203.39 1991.14,1206.39 1991.72,1206.57 1992.31,1211.05 1992.9,1210.92 1993.48,1211.99 1994.07,1212.01 1994.65,1215.01 1995.24,1213.44 1995.83,1208.97 1996.41,1207.82 1997,1206.44 1997.59,1206.69 1998.17,1206.78 1998.76,1208.71 1999.35,1208.94 1999.93,1211.67 2000.52,1211.65 2001.11,1212.9 2001.69,1211.37 2002.28,1215.53 2002.86,1214.01 2003.45,1212.39 2004.04,1215.52 2004.62,1214.23 2005.21,1214.1 2005.8,1215.51 2006.38,1213.86 2006.97,1215.39 2007.56,1215.1 2008.14,1213.36 2008.73,1211.84 2009.32,1210.44 2009.9,1207.62 2010.49,1209.6 2011.07,1209.55 2011.66,1206.73 2012.25,1206.18 2012.83,1206.41 2013.42,1207.99 2014.01,1207.99 2014.59,1209.64 2015.18,1212.98 2015.77,1214.42 2016.35,1213.99 2016.94,1209.56 2017.53,1208.3 2018.11,1208.34 2018.7,1207.26 2019.28,1207.56 2019.87,1207.85 2020.46,1205.29 2021.04,1209.78 2021.63,1212.27 2022.22,1212.1 2022.8,1210.71 2023.39,1209.4 2023.98,1210.6 2024.56,1209.44 2025.15,1209.56 2025.73,1208.09 2026.32,1210.9 2026.91,1213.54 2027.49,1216.27 2028.08,1214.68 2028.67,1212.78 2029.25,1209.68 2029.84,1211.19 2030.43,1213.9 2031.01,1209.79 2031.6,1212.44 2032.19,1213.86 2032.77,1215.17 2033.36,1214.67 2033.94,1217.39 2034.53,1218.24 2035.12,1220.63 2035.7,1218.87 2036.29,1215.74 2036.88,1212.72 2037.46,1214.02 2038.05,1215.26 2038.64,1215.14 2039.22,1216.54 2039.81,1220.65 2040.4,1220.11 2040.98,1219.65 2041.57,1217.83 2042.15,1220.37 2042.74,1218.71 2043.33,1219.38 2043.91,1219.12 2044.5,1217.25 2045.09,1215.69 2045.67,1216.99 2046.26,1219.11 2046.85,1214.55 2047.43,1217.26 2048.02,1213.88 2048.6,1212.23 2049.19,1212.24 2049.78,1212.15 2050.36,1210.62 2050.95,1207.98 2051.54,1211.17 2052.12,1208.39 2052.71,1209.98 2053.3,1212.81 2053.88,1215.37 2054.47,1214.78 2055.06,1215.71 2055.64,1214.95 2056.23,1214.92 2056.81,1216.16 2057.4,1217.15 2057.99,1217.04 2058.57,1216.5 2059.16,1213.15 2059.75,1212.94 2060.33,1214.31 2060.92,1218.51 2061.51,1218.1 2062.09,1212.13 2062.68,1212.17 2063.27,1208.1 2063.85,1209.88 2064.44,1209.8 2065.02,1208.36 2065.61,1208.45 2066.2,1211.37 2066.78,1212.56 2067.37,1213.78 2067.96,1214.91 2068.54,1214.81 2069.13,1213.07 2069.72,1215.94 2070.3,1215.57 2070.89,1216.85 2071.48,1216.55 2072.06,1217.87 2072.65,1217.49 2073.23,1215.79 2073.82,1214.21 2074.41,1218.09 2074.99,1218.94 2075.58,1216.98 2076.17,1214.95 2076.75,1213.21 2077.34,1212.99 2077.93,1211.02 2078.51,1209.46 2079.1,1210.89 2079.68,1211.1 2080.27,1209.58 2080.86,1209.54 2081.44,1209.51 2082.03,1209.33 2082.62,1210.29 2083.2,1213.36 2083.79,1214.79 2084.38,1214.77 2084.96,1213.21 2085.55,1211.76 2086.14,1211.32 2086.72,1210 2087.31,1210.12 2087.89,1209.88 2088.48,1210.08 2089.07,1208.74 2089.65,1207.52 2090.24,1200.68 2090.83,1200.98 2091.41,1202.78 2092,1204.77 2092.59,1203.58 2093.17,1202.66 2093.76,1201.61 2094.35,1200.85 2094.93,1201.6 2095.52,1201.77 2096.1,1200.73 2096.69,1201.55 2097.28,1199.11 2097.86,1198.35 2098.45,1199.03 2099.04,1203.8 2099.62,1208.64 2100.21,1211.51 2100.8,1213.01 2101.38,1213.32 2101.97,1213.6 2102.55,1213.77 2103.14,1213.45 2103.73,1214.74 2104.31,1217.18 2104.9,1213.89 2105.49,1210.69 2106.07,1208.03 2106.66,1206.6 2107.25,1203.98 2107.83,1201.64 2108.42,1201.94 2109.01,1204.09 2109.59,1204.52 2110.18,1206.43 2110.76,1206.5 2111.35,1206.67 2111.94,1205.7 2112.52,1207.58 2113.11,1208.11 2113.7,1206.93 2114.28,1205.76 2114.87,1205.77 2115.46,1204.93 2116.04,1206.69 2116.63,1208.39 2117.22,1211.31 2117.8,1212.59 2118.39,1210.91 2118.97,1205.12 2119.56,1202.65 2120.15,1204.59 2120.73,1203.59 2121.32,1202.59 2121.91,1209.91 2122.49,1210.18 2123.08,1210.6 2123.67,1212.06 2124.25,1213.53 2124.84,1213.3 2125.42,1211.83 2126.01,1210.52 2126.6,1212 2127.18,1212.22 2127.77,1210.92 2128.36,1212.37 2128.94,1213.95 2129.53,1214.06 2130.12,1213.92 2130.7,1214.81 2131.29,1215.96 2131.88,1214.31 2132.46,1214.24 2133.05,1214.12 2133.63,1214.05 2134.22,1215.09 2134.81,1219.09 2135.39,1219.92 2135.98,1217.94 2136.57,1221.71 2137.15,1222.65 2137.74,1222.25 2138.33,1224.6 2138.91,1225.5 2139.5,1220.72 2140.09,1221.84 2140.67,1221.09 2141.26,1219.24 2141.84,1220.09 2142.43,1216.87 2143.02,1215.2 2143.6,1216.28 2144.19,1217.26 2144.78,1218.29 2145.36,1217.75 2145.95,1216.05 2146.54,1215.33 2147.12,1214.99 2147.71,1214.6 2148.3,1214.21 2148.88,1212.47 2149.47,1210.71 2150.05,1209.46 2150.64,1209.43 2151.23,1209.35 2151.81,1206.58 2152.4,1207.9 2152.99,1205.15 2153.57,1205.63 2154.16,1202.9 2154.75,1201.93 2155.33,1203.79 2155.92,1205.31 2156.5,1204.14 2157.09,1204.33 2157.68,1207.5 2158.26,1209.25 \"/>\n<path clip-path=\"url(#clip632)\" d=\"M986.025 1211.63 L986.612 1211.63 L987.198 1211.63 L987.785 1211.63 L988.371 1211.63 L988.957 1211.63 L989.544 1211.63 L990.13 1211.63 L990.717 1211.63 L991.303 1211.63 L991.889 1211.63 L992.476 1211.63 L993.062 1211.63 L993.649 1211.63 L994.235 1211.63 L994.822 1211.63 L995.408 1211.63 L995.994 1211.63 L996.581 1211.63 L997.167 1211.63 L997.754 1211.63 L998.34 1211.63 L998.926 1211.63 L999.513 1211.63 L1000.1 1211.63 L1000.69 1211.63 L1001.27 1211.63 L1001.86 1211.63 L1002.44 1211.63 L1003.03 1211.63 L1003.62 1211.63 L1004.2 1211.63 L1004.79 1211.63 L1005.38 1211.63 L1005.96 1211.63 L1006.55 1211.63 L1007.14 1211.63 L1007.72 1211.63 L1008.31 1211.63 L1008.9 1211.63 L1009.48 1211.63 L1010.07 1211.63 L1010.65 1211.63 L1011.24 1211.63 L1011.83 1211.63 L1012.41 1211.63 L1013 1211.63 L1013.59 1211.63 L1014.17 1211.63 L1014.76 1211.63 L1015.35 1211.63 L1015.93 1211.63 L1016.52 1211.63 L1017.11 1211.63 L1017.69 1211.63 L1018.28 1211.63 L1018.86 1211.63 L1019.45 1211.63 L1020.04 1211.63 L1020.62 1211.63 L1021.21 1211.63 L1021.8 1211.63 L1022.38 1211.63 L1022.97 1211.63 L1023.56 1211.63 L1024.14 1211.63 L1024.73 1211.63 L1025.32 1211.63 L1025.9 1211.63 L1026.49 1211.63 L1027.07 1211.63 L1027.66 1211.63 L1028.25 1211.63 L1028.83 1211.63 L1029.42 1211.63 L1030.01 1211.63 L1030.59 1211.63 L1031.18 1211.63 L1031.77 1211.63 L1032.35 1211.63 L1032.94 1211.63 L1033.52 1211.63 L1034.11 1211.63 L1034.7 1211.63 L1035.28 1211.63 L1035.87 1211.63 L1036.46 1211.63 L1037.04 1211.63 L1037.63 1211.63 L1038.22 1211.63 L1038.8 1211.63 L1039.39 1211.63 L1039.98 1211.63 L1040.56 1211.63 L1041.15 1211.63 L1041.73 1211.63 L1042.32 1211.63 L1042.91 1211.63 L1043.49 1211.63 L1044.08 1211.63 L1044.67 1211.63 L1045.25 1211.63 L1045.84 1211.63 L1046.43 1211.63 L1047.01 1211.63 L1047.6 1211.63 L1048.19 1211.63 L1048.77 1211.63 L1049.36 1211.63 L1049.94 1211.63 L1050.53 1211.63 L1051.12 1211.63 L1051.7 1211.63 L1052.29 1211.63 L1052.88 1211.63 L1053.46 1211.63 L1054.05 1211.63 L1054.64 1211.63 L1055.22 1211.63 L1055.81 1211.63 L1056.39 1211.63 L1056.98 1211.63 L1057.57 1211.63 L1058.15 1211.63 L1058.74 1211.63 L1059.33 1211.63 L1059.91 1211.63 L1060.5 1211.63 L1061.09 1211.63 L1061.67 1211.63 L1062.26 1211.63 L1062.85 1211.63 L1063.43 1211.63 L1064.02 1211.63 L1064.6 1211.63 L1065.19 1211.63 L1065.78 1211.63 L1066.36 1211.63 L1066.95 1211.63 L1067.54 1211.63 L1068.12 1211.63 L1068.71 1211.63 L1069.3 1211.63 L1069.88 1211.63 L1070.47 1211.63 L1071.06 1211.63 L1071.64 1211.63 L1072.23 1211.63 L1072.81 1211.63 L1073.4 1211.63 L1073.99 1211.63 L1074.57 1211.63 L1075.16 1211.63 L1075.75 1211.63 L1076.33 1211.63 L1076.92 1211.63 L1077.51 1211.63 L1078.09 1211.63 L1078.68 1211.63 L1079.26 1211.63 L1079.85 1211.63 L1080.44 1211.63 L1081.02 1211.63 L1081.61 1211.63 L1082.2 1211.63 L1082.78 1211.63 L1083.37 1211.63 L1083.96 1211.63 L1084.54 1211.63 L1085.13 1211.63 L1085.72 1211.63 L1086.3 1211.63 L1086.89 1211.63 L1087.47 1211.63 L1088.06 1211.63 L1088.65 1211.63 L1089.23 1211.63 L1089.82 1211.63 L1090.41 1211.63 L1090.99 1211.63 L1091.58 1211.63 L1092.17 1211.63 L1092.75 1211.63 L1093.34 1211.63 L1093.93 1211.63 L1094.51 1211.63 L1095.1 1211.63 L1095.68 1211.63 L1096.27 1211.63 L1096.86 1211.63 L1097.44 1211.63 L1098.03 1211.63 L1098.62 1211.63 L1099.2 1211.63 L1099.79 1211.63 L1100.38 1211.63 L1100.96 1211.63 L1101.55 1211.63 L1102.14 1211.63 L1102.72 1211.63 L1103.31 1211.63 L1103.89 1211.63 L1104.48 1211.63 L1105.07 1211.63 L1105.65 1211.63 L1106.24 1211.63 L1106.83 1211.63 L1107.41 1211.63 L1108 1211.63 L1108.59 1211.63 L1109.17 1211.63 L1109.76 1211.63 L1110.34 1211.63 L1110.93 1211.63 L1111.52 1211.63 L1112.1 1211.63 L1112.69 1211.63 L1113.28 1211.63 L1113.86 1211.63 L1114.45 1211.63 L1115.04 1211.63 L1115.62 1211.63 L1116.21 1211.63 L1116.8 1211.63 L1117.38 1211.63 L1117.97 1211.63 L1118.55 1211.63 L1119.14 1211.63 L1119.73 1211.63 L1120.31 1211.63 L1120.9 1211.63 L1121.49 1211.63 L1122.07 1211.63 L1122.66 1211.63 L1123.25 1211.63 L1123.83 1211.63 L1124.42 1211.63 L1125.01 1211.63 L1125.59 1211.63 L1126.18 1211.63 L1126.76 1211.63 L1127.35 1211.63 L1127.94 1211.63 L1128.52 1211.63 L1129.11 1211.63 L1129.7 1211.63 L1130.28 1211.63 L1130.87 1211.63 L1131.46 1211.63 L1132.04 1211.63 L1132.63 1211.63 L1133.21 1211.63 L1133.8 1211.63 L1134.39 1211.63 L1134.97 1211.63 L1135.56 1211.63 L1136.15 1211.63 L1136.73 1211.63 L1137.32 1211.63 L1137.91 1211.63 L1138.49 1211.63 L1139.08 1211.63 L1139.67 1211.63 L1140.25 1211.63 L1140.84 1211.63 L1141.42 1211.63 L1142.01 1211.63 L1142.6 1211.63 L1143.18 1211.63 L1143.77 1211.63 L1144.36 1211.63 L1144.94 1211.63 L1145.53 1211.63 L1146.12 1211.63 L1146.7 1211.63 L1147.29 1211.63 L1147.88 1211.63 L1148.46 1211.63 L1149.05 1211.63 L1149.63 1211.63 L1150.22 1211.63 L1150.81 1211.63 L1151.39 1211.63 L1151.98 1211.63 L1152.57 1211.63 L1153.15 1211.63 L1153.74 1211.63 L1154.33 1211.63 L1154.91 1211.63 L1155.5 1211.63 L1156.09 1211.63 L1156.67 1211.63 L1157.26 1211.63 L1157.84 1211.63 L1158.43 1211.63 L1159.02 1211.63 L1159.6 1211.63 L1160.19 1211.63 L1160.78 1211.63 L1161.36 1211.63 L1161.95 1211.63 L1162.54 1211.63 L1163.12 1211.63 L1163.71 1211.63 L1164.29 1211.63 L1164.88 1211.63 L1165.47 1211.63 L1166.05 1211.63 L1166.64 1211.63 L1167.23 1211.63 L1167.81 1211.63 L1168.4 1211.63 L1168.99 1211.63 L1169.57 1211.63 L1170.16 1211.63 L1170.75 1211.63 L1171.33 1211.63 L1171.92 1211.63 L1172.5 1211.63 L1173.09 1211.63 L1173.68 1211.63 L1174.26 1211.63 L1174.85 1211.63 L1175.44 1211.63 L1176.02 1211.63 L1176.61 1211.63 L1177.2 1211.63 L1177.78 1211.63 L1178.37 1211.63 L1178.96 1211.63 L1179.54 1211.63 L1180.13 1211.63 L1180.71 1211.63 L1181.3 1211.63 L1181.89 1211.63 L1182.47 1211.63 L1183.06 1211.63 L1183.65 1211.63 L1184.23 1211.63 L1184.82 1211.63 L1185.41 1211.63 L1185.99 1211.63 L1186.58 1211.63 L1187.16 1211.63 L1187.75 1211.63 L1188.34 1211.63 L1188.92 1211.63 L1189.51 1211.63 L1190.1 1211.63 L1190.68 1211.63 L1191.27 1211.63 L1191.86 1211.63 L1192.44 1211.63 L1193.03 1211.63 L1193.62 1211.63 L1194.2 1211.63 L1194.79 1211.63 L1195.37 1211.63 L1195.96 1211.63 L1196.55 1211.63 L1197.13 1211.63 L1197.72 1211.63 L1198.31 1211.63 L1198.89 1211.63 L1199.48 1211.63 L1200.07 1211.63 L1200.65 1211.63 L1201.24 1211.63 L1201.83 1211.63 L1202.41 1211.63 L1203 1211.63 L1203.58 1211.63 L1204.17 1211.63 L1204.76 1211.63 L1205.34 1211.63 L1205.93 1211.63 L1206.52 1211.63 L1207.1 1211.63 L1207.69 1211.63 L1208.28 1211.63 L1208.86 1211.63 L1209.45 1211.63 L1210.03 1211.63 L1210.62 1211.63 L1211.21 1211.63 L1211.79 1211.63 L1212.38 1211.63 L1212.97 1211.63 L1213.55 1211.63 L1214.14 1211.63 L1214.73 1211.63 L1215.31 1211.63 L1215.9 1211.63 L1216.49 1211.63 L1217.07 1211.63 L1217.66 1211.63 L1218.24 1211.63 L1218.83 1211.63 L1219.42 1211.63 L1220 1211.63 L1220.59 1211.63 L1221.18 1211.63 L1221.76 1211.63 L1222.35 1211.63 L1222.94 1211.63 L1223.52 1211.63 L1224.11 1211.63 L1224.7 1211.63 L1225.28 1211.63 L1225.87 1211.63 L1226.45 1211.63 L1227.04 1211.63 L1227.63 1211.63 L1228.21 1211.63 L1228.8 1211.63 L1229.39 1211.63 L1229.97 1211.63 L1230.56 1211.63 L1231.15 1211.63 L1231.73 1211.63 L1232.32 1211.63 L1232.91 1211.63 L1233.49 1211.63 L1234.08 1211.63 L1234.66 1211.63 L1235.25 1211.63 L1235.84 1211.63 L1236.42 1211.63 L1237.01 1211.63 L1237.6 1211.63 L1238.18 1211.63 L1238.77 1211.63 L1239.36 1211.63 L1239.94 1211.63 L1240.53 1211.63 L1241.11 1211.63 L1241.7 1211.63 L1242.29 1211.63 L1242.87 1211.63 L1243.46 1211.63 L1244.05 1211.63 L1244.63 1211.63 L1245.22 1211.63 L1245.81 1211.63 L1246.39 1211.63 L1246.98 1211.63 L1247.57 1211.63 L1248.15 1211.63 L1248.74 1211.63 L1249.32 1211.63 L1249.91 1211.63 L1250.5 1211.63 L1251.08 1211.63 L1251.67 1211.63 L1252.26 1211.63 L1252.84 1211.63 L1253.43 1211.63 L1254.02 1211.63 L1254.6 1211.63 L1255.19 1211.63 L1255.78 1211.63 L1256.36 1211.63 L1256.95 1211.63 L1257.53 1211.63 L1258.12 1211.63 L1258.71 1211.63 L1259.29 1211.63 L1259.88 1211.63 L1260.47 1211.63 L1261.05 1211.63 L1261.64 1211.63 L1262.23 1211.63 L1262.81 1211.63 L1263.4 1211.63 L1263.98 1211.63 L1264.57 1211.63 L1265.16 1211.63 L1265.74 1211.63 L1266.33 1211.63 L1266.92 1211.63 L1267.5 1211.63 L1268.09 1211.63 L1268.68 1211.63 L1269.26 1211.63 L1269.85 1211.63 L1270.44 1211.63 L1271.02 1211.63 L1271.61 1211.63 L1272.19 1211.63 L1272.78 1211.63 L1273.37 1211.63 L1273.95 1211.63 L1274.54 1211.63 L1275.13 1211.63 L1275.71 1211.63 L1276.3 1211.63 L1276.89 1211.63 L1277.47 1211.63 L1278.06 1211.63 L1278.65 1211.63 L1279.23 1211.63 L1279.82 1211.63 L1280.4 1211.63 L1280.99 1211.63 L1281.58 1211.63 L1282.16 1211.63 L1282.75 1211.63 L1283.34 1211.63 L1283.92 1211.63 L1284.51 1211.63 L1285.1 1211.63 L1285.68 1211.63 L1286.27 1211.63 L1286.86 1211.63 L1287.44 1211.63 L1288.03 1211.63 L1288.61 1211.63 L1289.2 1211.63 L1289.79 1211.63 L1290.37 1211.63 L1290.96 1211.63 L1291.55 1211.63 L1292.13 1211.63 L1292.72 1211.63 L1293.31 1211.63 L1293.89 1211.63 L1294.48 1211.63 L1295.06 1211.63 L1295.65 1211.63 L1296.24 1211.63 L1296.82 1211.63 L1297.41 1211.63 L1298 1211.63 L1298.58 1211.63 L1299.17 1211.63 L1299.76 1211.63 L1300.34 1211.63 L1300.93 1211.63 L1301.52 1211.63 L1302.1 1211.63 L1302.69 1211.63 L1303.27 1211.63 L1303.86 1211.63 L1304.45 1211.63 L1305.03 1211.63 L1305.62 1211.63 L1306.21 1211.63 L1306.79 1211.63 L1307.38 1211.63 L1307.97 1211.63 L1308.55 1211.63 L1309.14 1211.63 L1309.73 1211.63 L1310.31 1211.63 L1310.9 1211.63 L1311.48 1211.63 L1312.07 1211.63 L1312.66 1211.63 L1313.24 1211.63 L1313.83 1211.63 L1314.42 1211.63 L1315 1211.63 L1315.59 1211.63 L1316.18 1211.63 L1316.76 1211.63 L1317.35 1211.63 L1317.93 1211.63 L1318.52 1211.63 L1319.11 1211.63 L1319.69 1211.63 L1320.28 1211.63 L1320.87 1211.63 L1321.45 1211.63 L1322.04 1211.63 L1322.63 1211.63 L1323.21 1211.63 L1323.8 1211.63 L1324.39 1211.63 L1324.97 1211.63 L1325.56 1211.63 L1326.14 1211.63 L1326.73 1211.63 L1327.32 1211.63 L1327.9 1211.63 L1328.49 1211.63 L1329.08 1211.63 L1329.66 1211.63 L1330.25 1211.63 L1330.84 1211.63 L1331.42 1211.63 L1332.01 1211.63 L1332.6 1211.63 L1333.18 1211.63 L1333.77 1211.63 L1334.35 1211.63 L1334.94 1211.63 L1335.53 1211.63 L1336.11 1211.63 L1336.7 1211.63 L1337.29 1211.63 L1337.87 1211.63 L1338.46 1211.63 L1339.05 1211.63 L1339.63 1211.63 L1340.22 1211.63 L1340.8 1211.63 L1341.39 1211.63 L1341.98 1211.63 L1342.56 1211.63 L1343.15 1211.63 L1343.74 1211.63 L1344.32 1211.63 L1344.91 1211.63 L1345.5 1211.63 L1346.08 1211.63 L1346.67 1211.63 L1347.26 1211.63 L1347.84 1211.63 L1348.43 1211.63 L1349.01 1211.63 L1349.6 1211.63 L1350.19 1211.63 L1350.77 1211.63 L1351.36 1211.63 L1351.95 1211.63 L1352.53 1211.63 L1353.12 1211.63 L1353.71 1211.63 L1354.29 1211.63 L1354.88 1211.63 L1355.47 1211.63 L1356.05 1211.63 L1356.64 1211.63 L1357.22 1211.63 L1357.81 1211.63 L1358.4 1211.63 L1358.98 1211.63 L1359.57 1211.63 L1360.16 1211.63 L1360.74 1211.63 L1361.33 1211.63 L1361.92 1211.63 L1362.5 1211.63 L1363.09 1211.63 L1363.68 1211.63 L1364.26 1211.63 L1364.85 1211.63 L1365.43 1211.63 L1366.02 1211.63 L1366.61 1211.63 L1367.19 1211.63 L1367.78 1211.63 L1368.37 1211.63 L1368.95 1211.63 L1369.54 1211.63 L1370.13 1211.63 L1370.71 1211.63 L1371.3 1211.63 L1371.88 1211.63 L1372.47 1211.63 L1373.06 1211.63 L1373.64 1211.63 L1374.23 1211.63 L1374.82 1211.63 L1375.4 1211.63 L1375.99 1211.63 L1376.58 1211.63 L1377.16 1211.63 L1377.75 1211.63 L1378.34 1211.63 L1378.92 1211.63 L1379.51 1211.63 L1380.09 1211.63 L1380.68 1211.63 L1381.27 1211.63 L1381.85 1211.63 L1382.44 1211.63 L1383.03 1211.63 L1383.61 1211.63 L1384.2 1211.63 L1384.79 1211.63 L1385.37 1211.63 L1385.96 1211.63 L1386.55 1211.63 L1387.13 1211.63 L1387.72 1211.63 L1388.3 1211.63 L1388.89 1211.63 L1389.48 1211.63 L1390.06 1211.63 L1390.65 1211.63 L1391.24 1211.63 L1391.82 1211.63 L1392.41 1211.63 L1393 1211.63 L1393.58 1211.63 L1394.17 1211.63 L1394.75 1211.63 L1395.34 1211.63 L1395.93 1211.63 L1396.51 1211.63 L1397.1 1211.63 L1397.69 1211.63 L1398.27 1211.63 L1398.86 1211.63 L1399.45 1211.63 L1400.03 1211.63 L1400.62 1211.63 L1401.21 1211.63 L1401.79 1211.63 L1402.38 1211.63 L1402.96 1211.63 L1403.55 1211.63 L1404.14 1211.63 L1404.72 1211.63 L1405.31 1211.63 L1405.9 1211.63 L1406.48 1211.63 L1407.07 1211.63 L1407.66 1211.63 L1408.24 1211.63 L1408.83 1211.63 L1409.42 1211.63 L1410 1211.63 L1410.59 1211.63 L1411.17 1211.63 L1411.76 1211.63 L1412.35 1211.63 L1412.93 1211.63 L1413.52 1211.63 L1414.11 1211.63 L1414.69 1211.63 L1415.28 1211.63 L1415.87 1211.63 L1416.45 1211.63 L1417.04 1211.63 L1417.63 1211.63 L1418.21 1211.63 L1418.8 1211.63 L1419.38 1211.63 L1419.97 1211.63 L1420.56 1211.63 L1421.14 1211.63 L1421.73 1211.63 L1422.32 1211.63 L1422.9 1211.63 L1423.49 1211.63 L1424.08 1211.63 L1424.66 1211.63 L1425.25 1211.63 L1425.83 1211.63 L1426.42 1211.63 L1427.01 1211.63 L1427.59 1211.63 L1428.18 1211.63 L1428.77 1211.63 L1429.35 1211.63 L1429.94 1211.63 L1430.53 1211.63 L1431.11 1211.63 L1431.7 1211.63 L1432.29 1211.63 L1432.87 1211.63 L1433.46 1211.63 L1434.04 1211.63 L1434.63 1211.63 L1435.22 1211.63 L1435.8 1211.63 L1436.39 1211.63 L1436.98 1211.63 L1437.56 1211.63 L1438.15 1211.63 L1438.74 1211.63 L1439.32 1211.63 L1439.91 1211.63 L1440.5 1211.63 L1441.08 1211.63 L1441.67 1211.63 L1442.25 1211.63 L1442.84 1211.63 L1443.43 1211.63 L1444.01 1211.63 L1444.6 1211.63 L1445.19 1211.63 L1445.77 1211.63 L1446.36 1211.63 L1446.95 1211.63 L1447.53 1211.63 L1448.12 1211.63 L1448.7 1211.63 L1449.29 1211.63 L1449.88 1211.63 L1450.46 1211.63 L1451.05 1211.63 L1451.64 1211.63 L1452.22 1211.63 L1452.81 1211.63 L1453.4 1211.63 L1453.98 1211.63 L1454.57 1211.63 L1455.16 1211.63 L1455.74 1211.63 L1456.33 1211.63 L1456.91 1211.63 L1457.5 1211.63 L1458.09 1211.63 L1458.67 1211.63 L1459.26 1211.63 L1459.85 1211.63 L1460.43 1211.63 L1461.02 1211.63 L1461.61 1211.63 L1462.19 1211.63 L1462.78 1211.63 L1463.37 1211.63 L1463.95 1211.63 L1464.54 1211.63 L1465.12 1211.63 L1465.71 1211.63 L1466.3 1211.63 L1466.88 1211.63 L1467.47 1211.63 L1468.06 1211.63 L1468.64 1211.63 L1469.23 1211.63 L1469.82 1211.63 L1470.4 1211.63 L1470.99 1211.63 L1471.57 1211.63 L1472.16 1211.63 L1472.75 1211.63 L1473.33 1211.63 L1473.92 1211.63 L1474.51 1211.63 L1475.09 1211.63 L1475.68 1211.63 L1476.27 1211.63 L1476.85 1211.63 L1477.44 1211.63 L1478.03 1211.63 L1478.61 1211.63 L1479.2 1211.63 L1479.78 1211.63 L1480.37 1211.63 L1480.96 1211.63 L1481.54 1211.63 L1482.13 1211.63 L1482.72 1211.63 L1483.3 1211.63 L1483.89 1211.63 L1484.48 1211.63 L1485.06 1211.63 L1485.65 1211.63 L1486.24 1211.63 L1486.82 1211.63 L1487.41 1211.63 L1487.99 1211.63 L1488.58 1211.63 L1489.17 1211.63 L1489.75 1211.63 L1490.34 1211.63 L1490.93 1211.63 L1491.51 1211.63 L1492.1 1211.63 L1492.69 1211.63 L1493.27 1211.63 L1493.86 1211.63 L1494.45 1211.63 L1495.03 1211.63 L1495.62 1211.63 L1496.2 1211.63 L1496.79 1211.63 L1497.38 1211.63 L1497.96 1211.63 L1498.55 1211.63 L1499.14 1211.63 L1499.72 1211.63 L1500.31 1211.63 L1500.9 1211.63 L1501.48 1211.63 L1502.07 1211.63 L1502.65 1211.63 L1503.24 1211.63 L1503.83 1211.63 L1504.41 1211.63 L1505 1211.63 L1505.59 1211.63 L1506.17 1211.63 L1506.76 1211.63 L1507.35 1211.63 L1507.93 1211.63 L1508.52 1211.63 L1509.11 1211.63 L1509.69 1211.63 L1510.28 1211.63 L1510.86 1211.63 L1511.45 1211.63 L1512.04 1211.63 L1512.62 1211.63 L1513.21 1211.63 L1513.8 1211.63 L1514.38 1211.63 L1514.97 1211.63 L1515.56 1211.63 L1516.14 1211.63 L1516.73 1211.63 L1517.32 1211.63 L1517.9 1211.63 L1518.49 1211.63 L1519.07 1211.63 L1519.66 1211.63 L1520.25 1211.63 L1520.83 1211.63 L1521.42 1211.63 L1522.01 1211.63 L1522.59 1211.63 L1523.18 1211.63 L1523.77 1211.63 L1524.35 1211.63 L1524.94 1211.63 L1525.52 1211.63 L1526.11 1211.63 L1526.7 1211.63 L1527.28 1211.63 L1527.87 1211.63 L1528.46 1211.63 L1529.04 1211.63 L1529.63 1211.63 L1530.22 1211.63 L1530.8 1211.63 L1531.39 1211.63 L1531.98 1211.63 L1532.56 1211.63 L1533.15 1211.63 L1533.73 1211.63 L1534.32 1211.63 L1534.91 1211.63 L1535.49 1211.63 L1536.08 1211.63 L1536.67 1211.63 L1537.25 1211.63 L1537.84 1211.63 L1538.43 1211.63 L1539.01 1211.63 L1539.6 1211.63 L1540.19 1211.63 L1540.77 1211.63 L1541.36 1211.63 L1541.94 1211.63 L1542.53 1211.63 L1543.12 1211.63 L1543.7 1211.63 L1544.29 1211.63 L1544.88 1211.63 L1545.46 1211.63 L1546.05 1211.63 L1546.64 1211.63 L1547.22 1211.63 L1547.81 1211.63 L1548.4 1211.63 L1548.98 1211.63 L1549.57 1211.63 L1550.15 1211.63 L1550.74 1211.63 L1551.33 1211.63 L1551.91 1211.63 L1552.5 1211.63 L1553.09 1211.63 L1553.67 1211.63 L1554.26 1211.63 L1554.85 1211.63 L1555.43 1211.63 L1556.02 1211.63 L1556.6 1211.63 L1557.19 1211.63 L1557.78 1211.63 L1558.36 1211.63 L1558.95 1211.63 L1559.54 1211.63 L1560.12 1211.63 L1560.71 1211.63 L1561.3 1211.63 L1561.88 1211.63 L1562.47 1211.63 L1563.06 1211.63 L1563.64 1211.63 L1564.23 1211.63 L1564.81 1211.63 L1565.4 1211.63 L1565.99 1211.63 L1566.57 1211.63 L1567.16 1211.63 L1567.75 1211.63 L1568.33 1211.63 L1568.92 1211.63 L1569.51 1211.63 L1570.09 1211.63 L1570.68 1211.63 L1571.27 1211.63 L1571.85 1211.63 L1572.44 1211.63 L1573.02 1211.63 L1573.61 1211.63 L1574.2 1211.63 L1574.78 1211.63 L1575.37 1211.63 L1575.96 1211.63 L1576.54 1211.63 L1577.13 1211.63 L1577.72 1211.63 L1578.3 1211.63 L1578.89 1211.63 L1579.47 1211.63 L1580.06 1211.63 L1580.65 1211.63 L1581.23 1211.63 L1581.82 1211.63 L1582.41 1211.63 L1582.99 1211.63 L1583.58 1211.63 L1584.17 1211.63 L1584.75 1211.63 L1585.34 1211.63 L1585.93 1211.63 L1586.51 1211.63 L1587.1 1211.63 L1587.68 1211.63 L1588.27 1211.63 L1588.86 1211.63 L1589.44 1211.63 L1590.03 1211.63 L1590.62 1211.63 L1591.2 1211.63 L1591.79 1211.63 L1592.38 1211.63 L1592.96 1211.63 L1593.55 1211.63 L1594.14 1211.63 L1594.72 1211.63 L1595.31 1211.63 L1595.89 1211.63 L1596.48 1211.63 L1597.07 1211.63 L1597.65 1211.63 L1598.24 1211.63 L1598.83 1211.63 L1599.41 1211.63 L1600 1211.63 L1600.59 1211.63 L1601.17 1211.63 L1601.76 1211.63 L1602.34 1211.63 L1602.93 1211.63 L1603.52 1211.63 L1604.1 1211.63 L1604.69 1211.63 L1605.28 1211.63 L1605.86 1211.63 L1606.45 1211.63 L1607.04 1211.63 L1607.62 1211.63 L1608.21 1211.63 L1608.8 1211.63 L1609.38 1211.63 L1609.97 1211.63 L1610.55 1211.63 L1611.14 1211.63 L1611.73 1211.63 L1612.31 1211.63 L1612.9 1211.63 L1613.49 1211.63 L1614.07 1211.63 L1614.66 1211.63 L1615.25 1211.63 L1615.83 1211.63 L1616.42 1211.63 L1617.01 1211.63 L1617.59 1211.63 L1618.18 1211.63 L1618.76 1211.63 L1619.35 1211.63 L1619.94 1211.63 L1620.52 1211.63 L1621.11 1211.63 L1621.7 1211.63 L1622.28 1211.63 L1622.87 1211.63 L1623.46 1211.63 L1624.04 1211.63 L1624.63 1211.63 L1625.22 1211.63 L1625.8 1211.63 L1626.39 1211.63 L1626.97 1211.63 L1627.56 1211.63 L1628.15 1211.63 L1628.73 1211.63 L1629.32 1211.63 L1629.91 1211.63 L1630.49 1211.63 L1631.08 1211.63 L1631.67 1211.63 L1632.25 1211.63 L1632.84 1211.63 L1633.42 1211.63 L1634.01 1211.63 L1634.6 1211.63 L1635.18 1211.63 L1635.77 1211.63 L1636.36 1211.63 L1636.94 1211.63 L1637.53 1211.63 L1638.12 1211.63 L1638.7 1211.63 L1639.29 1211.63 L1639.88 1211.63 L1640.46 1211.63 L1641.05 1211.63 L1641.63 1211.63 L1642.22 1211.63 L1642.81 1211.63 L1643.39 1211.63 L1643.98 1211.63 L1644.57 1211.63 L1645.15 1211.63 L1645.74 1211.63 L1646.33 1211.63 L1646.91 1211.63 L1647.5 1211.63 L1648.09 1211.63 L1648.67 1211.63 L1649.26 1211.63 L1649.84 1211.63 L1650.43 1211.63 L1651.02 1211.63 L1651.6 1211.63 L1652.19 1211.63 L1652.78 1211.63 L1653.36 1211.63 L1653.95 1211.63 L1654.54 1211.63 L1655.12 1211.63 L1655.71 1211.63 L1656.29 1211.63 L1656.88 1211.63 L1657.47 1211.63 L1658.05 1211.63 L1658.64 1211.63 L1659.23 1211.63 L1659.81 1211.63 L1660.4 1211.63 L1660.99 1211.63 L1661.57 1211.63 L1662.16 1211.63 L1662.75 1211.63 L1663.33 1211.63 L1663.92 1211.63 L1664.5 1211.63 L1665.09 1211.63 L1665.68 1211.63 L1666.26 1211.63 L1666.85 1211.63 L1667.44 1211.63 L1668.02 1211.63 L1668.61 1211.63 L1669.2 1211.63 L1669.78 1211.63 L1670.37 1211.63 L1670.96 1211.63 L1671.54 1211.63 L1672.13 1211.63 L1672.71 1211.63 L1673.3 1211.63 L1673.89 1211.63 L1674.47 1211.63 L1675.06 1211.63 L1675.65 1211.63 L1676.23 1211.63 L1676.82 1211.63 L1677.41 1211.63 L1677.99 1211.63 L1678.58 1211.63 L1679.17 1211.63 L1679.75 1211.63 L1680.34 1211.63 L1680.92 1211.63 L1681.51 1211.63 L1682.1 1211.63 L1682.68 1211.63 L1683.27 1211.63 L1683.86 1211.63 L1684.44 1211.63 L1685.03 1211.63 L1685.62 1211.63 L1686.2 1211.63 L1686.79 1211.63 L1687.37 1211.63 L1687.96 1211.63 L1688.55 1211.63 L1689.13 1211.63 L1689.72 1211.63 L1690.31 1211.63 L1690.89 1211.63 L1691.48 1211.63 L1692.07 1211.63 L1692.65 1211.63 L1693.24 1211.63 L1693.83 1211.63 L1694.41 1211.63 L1695 1211.63 L1695.58 1211.63 L1696.17 1211.63 L1696.76 1211.63 L1697.34 1211.63 L1697.93 1211.63 L1698.52 1211.63 L1699.1 1211.63 L1699.69 1211.63 L1700.28 1211.63 L1700.86 1211.63 L1701.45 1211.63 L1702.04 1211.63 L1702.62 1211.63 L1703.21 1211.63 L1703.79 1211.63 L1704.38 1211.63 L1704.97 1211.63 L1705.55 1211.63 L1706.14 1211.63 L1706.73 1211.63 L1707.31 1211.63 L1707.9 1211.63 L1708.49 1211.63 L1709.07 1211.63 L1709.66 1211.63 L1710.24 1211.63 L1710.83 1211.63 L1711.42 1211.63 L1712 1211.63 L1712.59 1211.63 L1713.18 1211.63 L1713.76 1211.63 L1714.35 1211.63 L1714.94 1211.63 L1715.52 1211.63 L1716.11 1211.63 L1716.7 1211.63 L1717.28 1211.63 L1717.87 1211.63 L1718.45 1211.63 L1719.04 1211.63 L1719.63 1211.63 L1720.21 1211.63 L1720.8 1211.63 L1721.39 1211.63 L1721.97 1211.63 L1722.56 1211.63 L1723.15 1211.63 L1723.73 1211.63 L1724.32 1211.63 L1724.91 1211.63 L1725.49 1211.63 L1726.08 1211.63 L1726.66 1211.63 L1727.25 1211.63 L1727.84 1211.63 L1728.42 1211.63 L1729.01 1211.63 L1729.6 1211.63 L1730.18 1211.63 L1730.77 1211.63 L1731.36 1211.63 L1731.94 1211.63 L1732.53 1211.63 L1733.11 1211.63 L1733.7 1211.63 L1734.29 1211.63 L1734.87 1211.63 L1735.46 1211.63 L1736.05 1211.63 L1736.63 1211.63 L1737.22 1211.63 L1737.81 1211.63 L1738.39 1211.63 L1738.98 1211.63 L1739.57 1211.63 L1740.15 1211.63 L1740.74 1211.63 L1741.32 1211.63 L1741.91 1211.63 L1742.5 1211.63 L1743.08 1211.63 L1743.67 1211.63 L1744.26 1211.63 L1744.84 1211.63 L1745.43 1211.63 L1746.02 1211.63 L1746.6 1211.63 L1747.19 1211.63 L1747.78 1211.63 L1748.36 1211.63 L1748.95 1211.63 L1749.53 1211.63 L1750.12 1211.63 L1750.71 1211.63 L1751.29 1211.63 L1751.88 1211.63 L1752.47 1211.63 L1753.05 1211.63 L1753.64 1211.63 L1754.23 1211.63 L1754.81 1211.63 L1755.4 1211.63 L1755.99 1211.63 L1756.57 1211.63 L1757.16 1211.63 L1757.74 1211.63 L1758.33 1211.63 L1758.92 1211.63 L1759.5 1211.63 L1760.09 1211.63 L1760.68 1211.63 L1761.26 1211.63 L1761.85 1211.63 L1762.44 1211.63 L1763.02 1211.63 L1763.61 1211.63 L1764.19 1211.63 L1764.78 1211.63 L1765.37 1211.63 L1765.95 1211.63 L1766.54 1211.63 L1767.13 1211.63 L1767.71 1211.63 L1768.3 1211.63 L1768.89 1211.63 L1769.47 1211.63 L1770.06 1211.63 L1770.65 1211.63 L1771.23 1211.63 L1771.82 1211.63 L1772.4 1211.63 L1772.99 1211.63 L1773.58 1211.63 L1774.16 1211.63 L1774.75 1211.63 L1775.34 1211.63 L1775.92 1211.63 L1776.51 1211.63 L1777.1 1211.63 L1777.68 1211.63 L1778.27 1211.63 L1778.86 1211.63 L1779.44 1211.63 L1780.03 1211.63 L1780.61 1211.63 L1781.2 1211.63 L1781.79 1211.63 L1782.37 1211.63 L1782.96 1211.63 L1783.55 1211.63 L1784.13 1211.63 L1784.72 1211.63 L1785.31 1211.63 L1785.89 1211.63 L1786.48 1211.63 L1787.06 1211.63 L1787.65 1211.63 L1788.24 1211.63 L1788.82 1211.63 L1789.41 1211.63 L1790 1211.63 L1790.58 1211.63 L1791.17 1211.63 L1791.76 1211.63 L1792.34 1211.63 L1792.93 1211.63 L1793.52 1211.63 L1794.1 1211.63 L1794.69 1211.63 L1795.27 1211.63 L1795.86 1211.63 L1796.45 1211.63 L1797.03 1211.63 L1797.62 1211.63 L1798.21 1211.63 L1798.79 1211.63 L1799.38 1211.63 L1799.97 1211.63 L1800.55 1211.63 L1801.14 1211.63 L1801.73 1211.63 L1802.31 1211.63 L1802.9 1211.63 L1803.48 1211.63 L1804.07 1211.63 L1804.66 1211.63 L1805.24 1211.63 L1805.83 1211.63 L1806.42 1211.63 L1807 1211.63 L1807.59 1211.63 L1808.18 1211.63 L1808.76 1211.63 L1809.35 1211.63 L1809.94 1211.63 L1810.52 1211.63 L1811.11 1211.63 L1811.69 1211.63 L1812.28 1211.63 L1812.87 1211.63 L1813.45 1211.63 L1814.04 1211.63 L1814.63 1211.63 L1815.21 1211.63 L1815.8 1211.63 L1816.39 1211.63 L1816.97 1211.63 L1817.56 1211.63 L1818.14 1211.63 L1818.73 1211.63 L1819.32 1211.63 L1819.9 1211.63 L1820.49 1211.63 L1821.08 1211.63 L1821.66 1211.63 L1822.25 1211.63 L1822.84 1211.63 L1823.42 1211.63 L1824.01 1211.63 L1824.6 1211.63 L1825.18 1211.63 L1825.77 1211.63 L1826.35 1211.63 L1826.94 1211.63 L1827.53 1211.63 L1828.11 1211.63 L1828.7 1211.63 L1829.29 1211.63 L1829.87 1211.63 L1830.46 1211.63 L1831.05 1211.63 L1831.63 1211.63 L1832.22 1211.63 L1832.81 1211.63 L1833.39 1211.63 L1833.98 1211.63 L1834.56 1211.63 L1835.15 1211.63 L1835.74 1211.63 L1836.32 1211.63 L1836.91 1211.63 L1837.5 1211.63 L1838.08 1211.63 L1838.67 1211.63 L1839.26 1211.63 L1839.84 1211.63 L1840.43 1211.63 L1841.01 1211.63 L1841.6 1211.63 L1842.19 1211.63 L1842.77 1211.63 L1843.36 1211.63 L1843.95 1211.63 L1844.53 1211.63 L1845.12 1211.63 L1845.71 1211.63 L1846.29 1211.63 L1846.88 1211.63 L1847.47 1211.63 L1848.05 1211.63 L1848.64 1211.63 L1849.22 1211.63 L1849.81 1211.63 L1850.4 1211.63 L1850.98 1211.63 L1851.57 1211.63 L1852.16 1211.63 L1852.74 1211.63 L1853.33 1211.63 L1853.92 1211.63 L1854.5 1211.63 L1855.09 1211.63 L1855.68 1211.63 L1856.26 1211.63 L1856.85 1211.63 L1857.43 1211.63 L1858.02 1211.63 L1858.61 1211.63 L1859.19 1211.63 L1859.78 1211.63 L1860.37 1211.63 L1860.95 1211.63 L1861.54 1211.63 L1862.13 1211.63 L1862.71 1211.63 L1863.3 1211.63 L1863.88 1211.63 L1864.47 1211.63 L1865.06 1211.63 L1865.64 1211.63 L1866.23 1211.63 L1866.82 1211.63 L1867.4 1211.63 L1867.99 1211.63 L1868.58 1211.63 L1869.16 1211.63 L1869.75 1211.63 L1870.34 1211.63 L1870.92 1211.63 L1871.51 1211.63 L1872.09 1211.63 L1872.68 1211.63 L1873.27 1211.63 L1873.85 1211.63 L1874.44 1211.63 L1875.03 1211.63 L1875.61 1211.63 L1876.2 1211.63 L1876.79 1211.63 L1877.37 1211.63 L1877.96 1211.63 L1878.55 1211.63 L1879.13 1211.63 L1879.72 1211.63 L1880.3 1211.63 L1880.89 1211.63 L1881.48 1211.63 L1882.06 1211.63 L1882.65 1211.63 L1883.24 1211.63 L1883.82 1211.63 L1884.41 1211.63 L1885 1211.63 L1885.58 1211.63 L1886.17 1211.63 L1886.76 1211.63 L1887.34 1211.63 L1887.93 1211.63 L1888.51 1211.63 L1889.1 1211.63 L1889.69 1211.63 L1890.27 1211.63 L1890.86 1211.63 L1891.45 1211.63 L1892.03 1211.63 L1892.62 1211.63 L1893.21 1211.63 L1893.79 1211.63 L1894.38 1211.63 L1894.96 1211.63 L1895.55 1211.63 L1896.14 1211.63 L1896.72 1211.63 L1897.31 1211.63 L1897.9 1211.63 L1898.48 1211.63 L1899.07 1211.63 L1899.66 1211.63 L1900.24 1211.63 L1900.83 1211.63 L1901.42 1211.63 L1902 1211.63 L1902.59 1211.63 L1903.17 1211.63 L1903.76 1211.63 L1904.35 1211.63 L1904.93 1211.63 L1905.52 1211.63 L1906.11 1211.63 L1906.69 1211.63 L1907.28 1211.63 L1907.87 1211.63 L1908.45 1211.63 L1909.04 1211.63 L1909.63 1211.63 L1910.21 1211.63 L1910.8 1211.63 L1911.38 1211.63 L1911.97 1211.63 L1912.56 1211.63 L1913.14 1211.63 L1913.73 1211.63 L1914.32 1211.63 L1914.9 1211.63 L1915.49 1211.63 L1916.08 1211.63 L1916.66 1211.63 L1917.25 1211.63 L1917.83 1211.63 L1918.42 1211.63 L1919.01 1211.63 L1919.59 1211.63 L1920.18 1211.63 L1920.77 1211.63 L1921.35 1211.63 L1921.94 1211.63 L1922.53 1211.63 L1923.11 1211.63 L1923.7 1211.63 L1924.29 1211.63 L1924.87 1211.63 L1925.46 1211.63 L1926.04 1211.63 L1926.63 1211.63 L1927.22 1211.63 L1927.8 1211.63 L1928.39 1211.63 L1928.98 1211.63 L1929.56 1211.63 L1930.15 1211.63 L1930.74 1211.63 L1931.32 1211.63 L1931.91 1211.63 L1932.5 1211.63 L1933.08 1211.63 L1933.67 1211.63 L1934.25 1211.63 L1934.84 1211.63 L1935.43 1211.63 L1936.01 1211.63 L1936.6 1211.63 L1937.19 1211.63 L1937.77 1211.63 L1938.36 1211.63 L1938.95 1211.63 L1939.53 1211.63 L1940.12 1211.63 L1940.71 1211.63 L1941.29 1211.63 L1941.88 1211.63 L1942.46 1211.63 L1943.05 1211.63 L1943.64 1211.63 L1944.22 1211.63 L1944.81 1211.63 L1945.4 1211.63 L1945.98 1211.63 L1946.57 1211.63 L1947.16 1211.63 L1947.74 1211.63 L1948.33 1211.63 L1948.91 1211.63 L1949.5 1211.63 L1950.09 1211.63 L1950.67 1211.63 L1951.26 1211.63 L1951.85 1211.63 L1952.43 1211.63 L1953.02 1211.63 L1953.61 1211.63 L1954.19 1211.63 L1954.78 1211.63 L1955.37 1211.63 L1955.95 1211.63 L1956.54 1211.63 L1957.12 1211.63 L1957.71 1211.63 L1958.3 1211.63 L1958.88 1211.63 L1959.47 1211.63 L1960.06 1211.63 L1960.64 1211.63 L1961.23 1211.63 L1961.82 1211.63 L1962.4 1211.63 L1962.99 1211.63 L1963.58 1211.63 L1964.16 1211.63 L1964.75 1211.63 L1965.33 1211.63 L1965.92 1211.63 L1966.51 1211.63 L1967.09 1211.63 L1967.68 1211.63 L1968.27 1211.63 L1968.85 1211.63 L1969.44 1211.63 L1970.03 1211.63 L1970.61 1211.63 L1971.2 1211.63 L1971.78 1211.63 L1972.37 1211.63 L1972.96 1211.63 L1973.54 1211.63 L1974.13 1211.63 L1974.72 1211.63 L1975.3 1211.63 L1975.89 1211.63 L1976.48 1211.63 L1977.06 1211.63 L1977.65 1211.63 L1978.24 1211.63 L1978.82 1211.63 L1979.41 1211.63 L1979.99 1211.63 L1980.58 1211.63 L1981.17 1211.63 L1981.75 1211.63 L1982.34 1211.63 L1982.93 1211.63 L1983.51 1211.63 L1984.1 1211.63 L1984.69 1211.63 L1985.27 1211.63 L1985.86 1211.63 L1986.45 1211.63 L1987.03 1211.63 L1987.62 1211.63 L1988.2 1211.63 L1988.79 1211.63 L1989.38 1211.63 L1989.96 1211.63 L1990.55 1211.63 L1991.14 1211.63 L1991.72 1211.63 L1992.31 1211.63 L1992.9 1211.63 L1993.48 1211.63 L1994.07 1211.63 L1994.65 1211.63 L1995.24 1211.63 L1995.83 1211.63 L1996.41 1211.63 L1997 1211.63 L1997.59 1211.63 L1998.17 1211.63 L1998.76 1211.63 L1999.35 1211.63 L1999.93 1211.63 L2000.52 1211.63 L2001.11 1211.63 L2001.69 1211.63 L2002.28 1211.63 L2002.86 1211.63 L2003.45 1211.63 L2004.04 1211.63 L2004.62 1211.63 L2005.21 1211.63 L2005.8 1211.63 L2006.38 1211.63 L2006.97 1211.63 L2007.56 1211.63 L2008.14 1211.63 L2008.73 1211.63 L2009.32 1211.63 L2009.9 1211.63 L2010.49 1211.63 L2011.07 1211.63 L2011.66 1211.63 L2012.25 1211.63 L2012.83 1211.63 L2013.42 1211.63 L2014.01 1211.63 L2014.59 1211.63 L2015.18 1211.63 L2015.77 1211.63 L2016.35 1211.63 L2016.94 1211.63 L2017.53 1211.63 L2018.11 1211.63 L2018.7 1211.63 L2019.28 1211.63 L2019.87 1211.63 L2020.46 1211.63 L2021.04 1211.63 L2021.63 1211.63 L2022.22 1211.63 L2022.8 1211.63 L2023.39 1211.63 L2023.98 1211.63 L2024.56 1211.63 L2025.15 1211.63 L2025.73 1211.63 L2026.32 1211.63 L2026.91 1211.63 L2027.49 1211.63 L2028.08 1211.63 L2028.67 1211.63 L2029.25 1211.63 L2029.84 1211.63 L2030.43 1211.63 L2031.01 1211.63 L2031.6 1211.63 L2032.19 1211.63 L2032.77 1211.63 L2033.36 1211.63 L2033.94 1211.63 L2034.53 1211.63 L2035.12 1211.63 L2035.7 1211.63 L2036.29 1211.63 L2036.88 1211.63 L2037.46 1211.63 L2038.05 1211.63 L2038.64 1211.63 L2039.22 1211.63 L2039.81 1211.63 L2040.4 1211.63 L2040.98 1211.63 L2041.57 1211.63 L2042.15 1211.63 L2042.74 1211.63 L2043.33 1211.63 L2043.91 1211.63 L2044.5 1211.63 L2045.09 1211.63 L2045.67 1211.63 L2046.26 1211.63 L2046.85 1211.63 L2047.43 1211.63 L2048.02 1211.63 L2048.6 1211.63 L2049.19 1211.63 L2049.78 1211.63 L2050.36 1211.63 L2050.95 1211.63 L2051.54 1211.63 L2052.12 1211.63 L2052.71 1211.63 L2053.3 1211.63 L2053.88 1211.63 L2054.47 1211.63 L2055.06 1211.63 L2055.64 1211.63 L2056.23 1211.63 L2056.81 1211.63 L2057.4 1211.63 L2057.99 1211.63 L2058.57 1211.63 L2059.16 1211.63 L2059.75 1211.63 L2060.33 1211.63 L2060.92 1211.63 L2061.51 1211.63 L2062.09 1211.63 L2062.68 1211.63 L2063.27 1211.63 L2063.85 1211.63 L2064.44 1211.63 L2065.02 1211.63 L2065.61 1211.63 L2066.2 1211.63 L2066.78 1211.63 L2067.37 1211.63 L2067.96 1211.63 L2068.54 1211.63 L2069.13 1211.63 L2069.72 1211.63 L2070.3 1211.63 L2070.89 1211.63 L2071.48 1211.63 L2072.06 1211.63 L2072.65 1211.63 L2073.23 1211.63 L2073.82 1211.63 L2074.41 1211.63 L2074.99 1211.63 L2075.58 1211.63 L2076.17 1211.63 L2076.75 1211.63 L2077.34 1211.63 L2077.93 1211.63 L2078.51 1211.63 L2079.1 1211.63 L2079.68 1211.63 L2080.27 1211.63 L2080.86 1211.63 L2081.44 1211.63 L2082.03 1211.63 L2082.62 1211.63 L2083.2 1211.63 L2083.79 1211.63 L2084.38 1211.63 L2084.96 1211.63 L2085.55 1211.63 L2086.14 1211.63 L2086.72 1211.63 L2087.31 1211.63 L2087.89 1211.63 L2088.48 1211.63 L2089.07 1211.63 L2089.65 1211.63 L2090.24 1211.63 L2090.83 1211.63 L2091.41 1211.63 L2092 1211.63 L2092.59 1211.63 L2093.17 1211.63 L2093.76 1211.63 L2094.35 1211.63 L2094.93 1211.63 L2095.52 1211.63 L2096.1 1211.63 L2096.69 1211.63 L2097.28 1211.63 L2097.86 1211.63 L2098.45 1211.63 L2099.04 1211.63 L2099.62 1211.63 L2100.21 1211.63 L2100.8 1211.63 L2101.38 1211.63 L2101.97 1211.63 L2102.55 1211.63 L2103.14 1211.63 L2103.73 1211.63 L2104.31 1211.63 L2104.9 1211.63 L2105.49 1211.63 L2106.07 1211.63 L2106.66 1211.63 L2107.25 1211.63 L2107.83 1211.63 L2108.42 1211.63 L2109.01 1211.63 L2109.59 1211.63 L2110.18 1211.63 L2110.76 1211.63 L2111.35 1211.63 L2111.94 1211.63 L2112.52 1211.63 L2113.11 1211.63 L2113.7 1211.63 L2114.28 1211.63 L2114.87 1211.63 L2115.46 1211.63 L2116.04 1211.63 L2116.63 1211.63 L2117.22 1211.63 L2117.8 1211.63 L2118.39 1211.63 L2118.97 1211.63 L2119.56 1211.63 L2120.15 1211.63 L2120.73 1211.63 L2121.32 1211.63 L2121.91 1211.63 L2122.49 1211.63 L2123.08 1211.63 L2123.67 1211.63 L2124.25 1211.63 L2124.84 1211.63 L2125.42 1211.63 L2126.01 1211.63 L2126.6 1211.63 L2127.18 1211.63 L2127.77 1211.63 L2128.36 1211.63 L2128.94 1211.63 L2129.53 1211.63 L2130.12 1211.63 L2130.7 1211.63 L2131.29 1211.63 L2131.88 1211.63 L2132.46 1211.63 L2133.05 1211.63 L2133.63 1211.63 L2134.22 1211.63 L2134.81 1211.63 L2135.39 1211.63 L2135.98 1211.63 L2136.57 1211.63 L2137.15 1211.63 L2137.74 1211.63 L2138.33 1211.63 L2138.91 1211.63 L2139.5 1211.63 L2140.09 1211.63 L2140.67 1211.63 L2141.26 1211.63 L2141.84 1211.63 L2142.43 1211.63 L2143.02 1211.63 L2143.6 1211.63 L2144.19 1211.63 L2144.78 1211.63 L2145.36 1211.63 L2145.95 1211.63 L2146.54 1211.63 L2147.12 1211.63 L2147.71 1211.63 L2148.3 1211.63 L2148.88 1211.63 L2149.47 1211.63 L2150.05 1211.63 L2150.64 1211.63 L2151.23 1211.63 L2151.81 1211.63 L2152.4 1211.63 L2152.99 1211.63 L2153.57 1211.63 L2154.16 1211.63 L2154.75 1211.63 L2155.33 1211.63 L2155.92 1211.63 L2156.5 1211.63 L2157.09 1211.63 L2157.68 1211.63 L2158.26 1211.63 L2158.26 1210.74 L2157.68 1210.74 L2157.09 1210.74 L2156.5 1210.74 L2155.92 1210.74 L2155.33 1210.74 L2154.75 1210.74 L2154.16 1210.74 L2153.57 1210.74 L2152.99 1210.74 L2152.4 1210.74 L2151.81 1210.74 L2151.23 1210.74 L2150.64 1210.74 L2150.05 1210.74 L2149.47 1210.74 L2148.88 1210.74 L2148.3 1210.74 L2147.71 1210.74 L2147.12 1210.74 L2146.54 1210.74 L2145.95 1210.74 L2145.36 1210.74 L2144.78 1210.74 L2144.19 1210.74 L2143.6 1210.74 L2143.02 1210.74 L2142.43 1210.74 L2141.84 1210.74 L2141.26 1210.74 L2140.67 1210.74 L2140.09 1210.74 L2139.5 1210.74 L2138.91 1210.74 L2138.33 1210.74 L2137.74 1210.74 L2137.15 1210.74 L2136.57 1210.74 L2135.98 1210.74 L2135.39 1210.74 L2134.81 1210.74 L2134.22 1210.74 L2133.63 1210.74 L2133.05 1210.74 L2132.46 1210.74 L2131.88 1210.74 L2131.29 1210.74 L2130.7 1210.74 L2130.12 1210.74 L2129.53 1210.74 L2128.94 1210.74 L2128.36 1210.74 L2127.77 1210.74 L2127.18 1210.74 L2126.6 1210.74 L2126.01 1210.74 L2125.42 1210.74 L2124.84 1210.74 L2124.25 1210.74 L2123.67 1210.74 L2123.08 1210.74 L2122.49 1210.74 L2121.91 1210.74 L2121.32 1210.74 L2120.73 1210.74 L2120.15 1210.74 L2119.56 1210.74 L2118.97 1210.74 L2118.39 1210.74 L2117.8 1210.74 L2117.22 1210.74 L2116.63 1210.74 L2116.04 1210.74 L2115.46 1210.74 L2114.87 1210.74 L2114.28 1210.74 L2113.7 1210.74 L2113.11 1210.74 L2112.52 1210.74 L2111.94 1210.74 L2111.35 1210.74 L2110.76 1210.74 L2110.18 1210.74 L2109.59 1210.74 L2109.01 1210.74 L2108.42 1210.74 L2107.83 1210.74 L2107.25 1210.74 L2106.66 1210.74 L2106.07 1210.74 L2105.49 1210.74 L2104.9 1210.74 L2104.31 1210.74 L2103.73 1210.74 L2103.14 1210.74 L2102.55 1210.74 L2101.97 1210.74 L2101.38 1210.74 L2100.8 1210.74 L2100.21 1210.74 L2099.62 1210.74 L2099.04 1210.74 L2098.45 1210.74 L2097.86 1210.74 L2097.28 1210.74 L2096.69 1210.74 L2096.1 1210.74 L2095.52 1210.74 L2094.93 1210.74 L2094.35 1210.74 L2093.76 1210.74 L2093.17 1210.74 L2092.59 1210.74 L2092 1210.74 L2091.41 1210.74 L2090.83 1210.74 L2090.24 1210.74 L2089.65 1210.74 L2089.07 1210.74 L2088.48 1210.74 L2087.89 1210.74 L2087.31 1210.74 L2086.72 1210.74 L2086.14 1210.74 L2085.55 1210.74 L2084.96 1210.74 L2084.38 1210.74 L2083.79 1210.74 L2083.2 1210.74 L2082.62 1210.74 L2082.03 1210.74 L2081.44 1210.74 L2080.86 1210.74 L2080.27 1210.74 L2079.68 1210.74 L2079.1 1210.74 L2078.51 1210.74 L2077.93 1210.74 L2077.34 1210.74 L2076.75 1210.74 L2076.17 1210.74 L2075.58 1210.74 L2074.99 1210.74 L2074.41 1210.74 L2073.82 1210.74 L2073.23 1210.74 L2072.65 1210.74 L2072.06 1210.74 L2071.48 1210.74 L2070.89 1210.74 L2070.3 1210.74 L2069.72 1210.74 L2069.13 1210.74 L2068.54 1210.74 L2067.96 1210.74 L2067.37 1210.74 L2066.78 1210.74 L2066.2 1210.74 L2065.61 1210.74 L2065.02 1210.74 L2064.44 1210.74 L2063.85 1210.74 L2063.27 1210.74 L2062.68 1210.74 L2062.09 1210.74 L2061.51 1210.74 L2060.92 1210.74 L2060.33 1210.74 L2059.75 1210.74 L2059.16 1210.74 L2058.57 1210.74 L2057.99 1210.74 L2057.4 1210.74 L2056.81 1210.74 L2056.23 1210.74 L2055.64 1210.74 L2055.06 1210.74 L2054.47 1210.74 L2053.88 1210.74 L2053.3 1210.74 L2052.71 1210.74 L2052.12 1210.74 L2051.54 1210.74 L2050.95 1210.74 L2050.36 1210.74 L2049.78 1210.74 L2049.19 1210.74 L2048.6 1210.74 L2048.02 1210.74 L2047.43 1210.74 L2046.85 1210.74 L2046.26 1210.74 L2045.67 1210.74 L2045.09 1210.74 L2044.5 1210.74 L2043.91 1210.74 L2043.33 1210.74 L2042.74 1210.74 L2042.15 1210.74 L2041.57 1210.74 L2040.98 1210.74 L2040.4 1210.74 L2039.81 1210.74 L2039.22 1210.74 L2038.64 1210.74 L2038.05 1210.74 L2037.46 1210.74 L2036.88 1210.74 L2036.29 1210.74 L2035.7 1210.74 L2035.12 1210.74 L2034.53 1210.74 L2033.94 1210.74 L2033.36 1210.74 L2032.77 1210.74 L2032.19 1210.74 L2031.6 1210.74 L2031.01 1210.74 L2030.43 1210.74 L2029.84 1210.74 L2029.25 1210.74 L2028.67 1210.74 L2028.08 1210.74 L2027.49 1210.74 L2026.91 1210.74 L2026.32 1210.74 L2025.73 1210.74 L2025.15 1210.74 L2024.56 1210.74 L2023.98 1210.74 L2023.39 1210.74 L2022.8 1210.74 L2022.22 1210.74 L2021.63 1210.74 L2021.04 1210.74 L2020.46 1210.74 L2019.87 1210.74 L2019.28 1210.74 L2018.7 1210.74 L2018.11 1210.74 L2017.53 1210.74 L2016.94 1210.74 L2016.35 1210.74 L2015.77 1210.74 L2015.18 1210.74 L2014.59 1210.74 L2014.01 1210.74 L2013.42 1210.74 L2012.83 1210.74 L2012.25 1210.74 L2011.66 1210.74 L2011.07 1210.74 L2010.49 1210.74 L2009.9 1210.74 L2009.32 1210.74 L2008.73 1210.74 L2008.14 1210.74 L2007.56 1210.74 L2006.97 1210.74 L2006.38 1210.74 L2005.8 1210.74 L2005.21 1210.74 L2004.62 1210.74 L2004.04 1210.74 L2003.45 1210.74 L2002.86 1210.74 L2002.28 1210.74 L2001.69 1210.74 L2001.11 1210.74 L2000.52 1210.74 L1999.93 1210.74 L1999.35 1210.74 L1998.76 1210.74 L1998.17 1210.74 L1997.59 1210.74 L1997 1210.74 L1996.41 1210.74 L1995.83 1210.74 L1995.24 1210.74 L1994.65 1210.74 L1994.07 1210.74 L1993.48 1210.74 L1992.9 1210.74 L1992.31 1210.74 L1991.72 1210.74 L1991.14 1210.74 L1990.55 1210.74 L1989.96 1210.74 L1989.38 1210.74 L1988.79 1210.74 L1988.2 1210.74 L1987.62 1210.74 L1987.03 1210.74 L1986.45 1210.74 L1985.86 1210.74 L1985.27 1210.74 L1984.69 1210.74 L1984.1 1210.74 L1983.51 1210.74 L1982.93 1210.74 L1982.34 1210.74 L1981.75 1210.74 L1981.17 1210.74 L1980.58 1210.74 L1979.99 1210.74 L1979.41 1210.74 L1978.82 1210.74 L1978.24 1210.74 L1977.65 1210.74 L1977.06 1210.74 L1976.48 1210.74 L1975.89 1210.74 L1975.3 1210.74 L1974.72 1210.74 L1974.13 1210.74 L1973.54 1210.74 L1972.96 1210.74 L1972.37 1210.74 L1971.78 1210.74 L1971.2 1210.74 L1970.61 1210.74 L1970.03 1210.74 L1969.44 1210.74 L1968.85 1210.74 L1968.27 1210.74 L1967.68 1210.74 L1967.09 1210.74 L1966.51 1210.74 L1965.92 1210.74 L1965.33 1210.74 L1964.75 1210.74 L1964.16 1210.74 L1963.58 1210.74 L1962.99 1210.74 L1962.4 1210.74 L1961.82 1210.74 L1961.23 1210.74 L1960.64 1210.74 L1960.06 1210.74 L1959.47 1210.74 L1958.88 1210.74 L1958.3 1210.74 L1957.71 1210.74 L1957.12 1210.74 L1956.54 1210.74 L1955.95 1210.74 L1955.37 1210.74 L1954.78 1210.74 L1954.19 1210.74 L1953.61 1210.74 L1953.02 1210.74 L1952.43 1210.74 L1951.85 1210.74 L1951.26 1210.74 L1950.67 1210.74 L1950.09 1210.74 L1949.5 1210.74 L1948.91 1210.74 L1948.33 1210.74 L1947.74 1210.74 L1947.16 1210.74 L1946.57 1210.74 L1945.98 1210.74 L1945.4 1210.74 L1944.81 1210.74 L1944.22 1210.74 L1943.64 1210.74 L1943.05 1210.74 L1942.46 1210.74 L1941.88 1210.74 L1941.29 1210.74 L1940.71 1210.74 L1940.12 1210.74 L1939.53 1210.74 L1938.95 1210.74 L1938.36 1210.74 L1937.77 1210.74 L1937.19 1210.74 L1936.6 1210.74 L1936.01 1210.74 L1935.43 1210.74 L1934.84 1210.74 L1934.25 1210.74 L1933.67 1210.74 L1933.08 1210.74 L1932.5 1210.74 L1931.91 1210.74 L1931.32 1210.74 L1930.74 1210.74 L1930.15 1210.74 L1929.56 1210.74 L1928.98 1210.74 L1928.39 1210.74 L1927.8 1210.74 L1927.22 1210.74 L1926.63 1210.74 L1926.04 1210.74 L1925.46 1210.74 L1924.87 1210.74 L1924.29 1210.74 L1923.7 1210.74 L1923.11 1210.74 L1922.53 1210.74 L1921.94 1210.74 L1921.35 1210.74 L1920.77 1210.74 L1920.18 1210.74 L1919.59 1210.74 L1919.01 1210.74 L1918.42 1210.74 L1917.83 1210.74 L1917.25 1210.74 L1916.66 1210.74 L1916.08 1210.74 L1915.49 1210.74 L1914.9 1210.74 L1914.32 1210.74 L1913.73 1210.74 L1913.14 1210.74 L1912.56 1210.74 L1911.97 1210.74 L1911.38 1210.74 L1910.8 1210.74 L1910.21 1210.74 L1909.63 1210.74 L1909.04 1210.74 L1908.45 1210.74 L1907.87 1210.74 L1907.28 1210.74 L1906.69 1210.74 L1906.11 1210.74 L1905.52 1210.74 L1904.93 1210.74 L1904.35 1210.74 L1903.76 1210.74 L1903.17 1210.74 L1902.59 1210.74 L1902 1210.74 L1901.42 1210.74 L1900.83 1210.74 L1900.24 1210.74 L1899.66 1210.74 L1899.07 1210.74 L1898.48 1210.74 L1897.9 1210.74 L1897.31 1210.74 L1896.72 1210.74 L1896.14 1210.74 L1895.55 1210.74 L1894.96 1210.74 L1894.38 1210.74 L1893.79 1210.74 L1893.21 1210.74 L1892.62 1210.74 L1892.03 1210.74 L1891.45 1210.74 L1890.86 1210.74 L1890.27 1210.74 L1889.69 1210.74 L1889.1 1210.74 L1888.51 1210.74 L1887.93 1210.74 L1887.34 1210.74 L1886.76 1210.74 L1886.17 1210.74 L1885.58 1210.74 L1885 1210.74 L1884.41 1210.74 L1883.82 1210.74 L1883.24 1210.74 L1882.65 1210.74 L1882.06 1210.74 L1881.48 1210.74 L1880.89 1210.74 L1880.3 1210.74 L1879.72 1210.74 L1879.13 1210.74 L1878.55 1210.74 L1877.96 1210.74 L1877.37 1210.74 L1876.79 1210.74 L1876.2 1210.74 L1875.61 1210.74 L1875.03 1210.74 L1874.44 1210.74 L1873.85 1210.74 L1873.27 1210.74 L1872.68 1210.74 L1872.09 1210.74 L1871.51 1210.74 L1870.92 1210.74 L1870.34 1210.74 L1869.75 1210.74 L1869.16 1210.74 L1868.58 1210.74 L1867.99 1210.74 L1867.4 1210.74 L1866.82 1210.74 L1866.23 1210.74 L1865.64 1210.74 L1865.06 1210.74 L1864.47 1210.74 L1863.88 1210.74 L1863.3 1210.74 L1862.71 1210.74 L1862.13 1210.74 L1861.54 1210.74 L1860.95 1210.74 L1860.37 1210.74 L1859.78 1210.74 L1859.19 1210.74 L1858.61 1210.74 L1858.02 1210.74 L1857.43 1210.74 L1856.85 1210.74 L1856.26 1210.74 L1855.68 1210.74 L1855.09 1210.74 L1854.5 1210.74 L1853.92 1210.74 L1853.33 1210.74 L1852.74 1210.74 L1852.16 1210.74 L1851.57 1210.74 L1850.98 1210.74 L1850.4 1210.74 L1849.81 1210.74 L1849.22 1210.74 L1848.64 1210.74 L1848.05 1210.74 L1847.47 1210.74 L1846.88 1210.74 L1846.29 1210.74 L1845.71 1210.74 L1845.12 1210.74 L1844.53 1210.74 L1843.95 1210.74 L1843.36 1210.74 L1842.77 1210.74 L1842.19 1210.74 L1841.6 1210.74 L1841.01 1210.74 L1840.43 1210.74 L1839.84 1210.74 L1839.26 1210.74 L1838.67 1210.74 L1838.08 1210.74 L1837.5 1210.74 L1836.91 1210.74 L1836.32 1210.74 L1835.74 1210.74 L1835.15 1210.74 L1834.56 1210.74 L1833.98 1210.74 L1833.39 1210.74 L1832.81 1210.74 L1832.22 1210.74 L1831.63 1210.74 L1831.05 1210.74 L1830.46 1210.74 L1829.87 1210.74 L1829.29 1210.74 L1828.7 1210.74 L1828.11 1210.74 L1827.53 1210.74 L1826.94 1210.74 L1826.35 1210.74 L1825.77 1210.74 L1825.18 1210.74 L1824.6 1210.74 L1824.01 1210.74 L1823.42 1210.74 L1822.84 1210.74 L1822.25 1210.74 L1821.66 1210.74 L1821.08 1210.74 L1820.49 1210.74 L1819.9 1210.74 L1819.32 1210.74 L1818.73 1210.74 L1818.14 1210.74 L1817.56 1210.74 L1816.97 1210.74 L1816.39 1210.74 L1815.8 1210.74 L1815.21 1210.74 L1814.63 1210.74 L1814.04 1210.74 L1813.45 1210.74 L1812.87 1210.74 L1812.28 1210.74 L1811.69 1210.74 L1811.11 1210.74 L1810.52 1210.74 L1809.94 1210.74 L1809.35 1210.74 L1808.76 1210.74 L1808.18 1210.74 L1807.59 1210.74 L1807 1210.74 L1806.42 1210.74 L1805.83 1210.74 L1805.24 1210.74 L1804.66 1210.74 L1804.07 1210.74 L1803.48 1210.74 L1802.9 1210.74 L1802.31 1210.74 L1801.73 1210.74 L1801.14 1210.74 L1800.55 1210.74 L1799.97 1210.74 L1799.38 1210.74 L1798.79 1210.74 L1798.21 1210.74 L1797.62 1210.74 L1797.03 1210.74 L1796.45 1210.74 L1795.86 1210.74 L1795.27 1210.74 L1794.69 1210.74 L1794.1 1210.74 L1793.52 1210.74 L1792.93 1210.74 L1792.34 1210.74 L1791.76 1210.74 L1791.17 1210.74 L1790.58 1210.74 L1790 1210.74 L1789.41 1210.74 L1788.82 1210.74 L1788.24 1210.74 L1787.65 1210.74 L1787.06 1210.74 L1786.48 1210.74 L1785.89 1210.74 L1785.31 1210.74 L1784.72 1210.74 L1784.13 1210.74 L1783.55 1210.74 L1782.96 1210.74 L1782.37 1210.74 L1781.79 1210.74 L1781.2 1210.74 L1780.61 1210.74 L1780.03 1210.74 L1779.44 1210.74 L1778.86 1210.74 L1778.27 1210.74 L1777.68 1210.74 L1777.1 1210.74 L1776.51 1210.74 L1775.92 1210.74 L1775.34 1210.74 L1774.75 1210.74 L1774.16 1210.74 L1773.58 1210.74 L1772.99 1210.74 L1772.4 1210.74 L1771.82 1210.74 L1771.23 1210.74 L1770.65 1210.74 L1770.06 1210.74 L1769.47 1210.74 L1768.89 1210.74 L1768.3 1210.74 L1767.71 1210.74 L1767.13 1210.74 L1766.54 1210.74 L1765.95 1210.74 L1765.37 1210.74 L1764.78 1210.74 L1764.19 1210.74 L1763.61 1210.74 L1763.02 1210.74 L1762.44 1210.74 L1761.85 1210.74 L1761.26 1210.74 L1760.68 1210.74 L1760.09 1210.74 L1759.5 1210.74 L1758.92 1210.74 L1758.33 1210.74 L1757.74 1210.74 L1757.16 1210.74 L1756.57 1210.74 L1755.99 1210.74 L1755.4 1210.74 L1754.81 1210.74 L1754.23 1210.74 L1753.64 1210.74 L1753.05 1210.74 L1752.47 1210.74 L1751.88 1210.74 L1751.29 1210.74 L1750.71 1210.74 L1750.12 1210.74 L1749.53 1210.74 L1748.95 1210.74 L1748.36 1210.74 L1747.78 1210.74 L1747.19 1210.74 L1746.6 1210.74 L1746.02 1210.74 L1745.43 1210.74 L1744.84 1210.74 L1744.26 1210.74 L1743.67 1210.74 L1743.08 1210.74 L1742.5 1210.74 L1741.91 1210.74 L1741.32 1210.74 L1740.74 1210.74 L1740.15 1210.74 L1739.57 1210.74 L1738.98 1210.74 L1738.39 1210.74 L1737.81 1210.74 L1737.22 1210.74 L1736.63 1210.74 L1736.05 1210.74 L1735.46 1210.74 L1734.87 1210.74 L1734.29 1210.74 L1733.7 1210.74 L1733.11 1210.74 L1732.53 1210.74 L1731.94 1210.74 L1731.36 1210.74 L1730.77 1210.74 L1730.18 1210.74 L1729.6 1210.74 L1729.01 1210.74 L1728.42 1210.74 L1727.84 1210.74 L1727.25 1210.74 L1726.66 1210.74 L1726.08 1210.74 L1725.49 1210.74 L1724.91 1210.74 L1724.32 1210.74 L1723.73 1210.74 L1723.15 1210.74 L1722.56 1210.74 L1721.97 1210.74 L1721.39 1210.74 L1720.8 1210.74 L1720.21 1210.74 L1719.63 1210.74 L1719.04 1210.74 L1718.45 1210.74 L1717.87 1210.74 L1717.28 1210.74 L1716.7 1210.74 L1716.11 1210.74 L1715.52 1210.74 L1714.94 1210.74 L1714.35 1210.74 L1713.76 1210.74 L1713.18 1210.74 L1712.59 1210.74 L1712 1210.74 L1711.42 1210.74 L1710.83 1210.74 L1710.24 1210.74 L1709.66 1210.74 L1709.07 1210.74 L1708.49 1210.74 L1707.9 1210.74 L1707.31 1210.74 L1706.73 1210.74 L1706.14 1210.74 L1705.55 1210.74 L1704.97 1210.74 L1704.38 1210.74 L1703.79 1210.74 L1703.21 1210.74 L1702.62 1210.74 L1702.04 1210.74 L1701.45 1210.74 L1700.86 1210.74 L1700.28 1210.74 L1699.69 1210.74 L1699.1 1210.74 L1698.52 1210.74 L1697.93 1210.74 L1697.34 1210.74 L1696.76 1210.74 L1696.17 1210.74 L1695.58 1210.74 L1695 1210.74 L1694.41 1210.74 L1693.83 1210.74 L1693.24 1210.74 L1692.65 1210.74 L1692.07 1210.74 L1691.48 1210.74 L1690.89 1210.74 L1690.31 1210.74 L1689.72 1210.74 L1689.13 1210.74 L1688.55 1210.74 L1687.96 1210.74 L1687.37 1210.74 L1686.79 1210.74 L1686.2 1210.74 L1685.62 1210.74 L1685.03 1210.74 L1684.44 1210.74 L1683.86 1210.74 L1683.27 1210.74 L1682.68 1210.74 L1682.1 1210.74 L1681.51 1210.74 L1680.92 1210.74 L1680.34 1210.74 L1679.75 1210.74 L1679.17 1210.74 L1678.58 1210.74 L1677.99 1210.74 L1677.41 1210.74 L1676.82 1210.74 L1676.23 1210.74 L1675.65 1210.74 L1675.06 1210.74 L1674.47 1210.74 L1673.89 1210.74 L1673.3 1210.74 L1672.71 1210.74 L1672.13 1210.74 L1671.54 1210.74 L1670.96 1210.74 L1670.37 1210.74 L1669.78 1210.74 L1669.2 1210.74 L1668.61 1210.74 L1668.02 1210.74 L1667.44 1210.74 L1666.85 1210.74 L1666.26 1210.74 L1665.68 1210.74 L1665.09 1210.74 L1664.5 1210.74 L1663.92 1210.74 L1663.33 1210.74 L1662.75 1210.74 L1662.16 1210.74 L1661.57 1210.74 L1660.99 1210.74 L1660.4 1210.74 L1659.81 1210.74 L1659.23 1210.74 L1658.64 1210.74 L1658.05 1210.74 L1657.47 1210.74 L1656.88 1210.74 L1656.29 1210.74 L1655.71 1210.74 L1655.12 1210.74 L1654.54 1210.74 L1653.95 1210.74 L1653.36 1210.74 L1652.78 1210.74 L1652.19 1210.74 L1651.6 1210.74 L1651.02 1210.74 L1650.43 1210.74 L1649.84 1210.74 L1649.26 1210.74 L1648.67 1210.74 L1648.09 1210.74 L1647.5 1210.74 L1646.91 1210.74 L1646.33 1210.74 L1645.74 1210.74 L1645.15 1210.74 L1644.57 1210.74 L1643.98 1210.74 L1643.39 1210.74 L1642.81 1210.74 L1642.22 1210.74 L1641.63 1210.74 L1641.05 1210.74 L1640.46 1210.74 L1639.88 1210.74 L1639.29 1210.74 L1638.7 1210.74 L1638.12 1210.74 L1637.53 1210.74 L1636.94 1210.74 L1636.36 1210.74 L1635.77 1210.74 L1635.18 1210.74 L1634.6 1210.74 L1634.01 1210.74 L1633.42 1210.74 L1632.84 1210.74 L1632.25 1210.74 L1631.67 1210.74 L1631.08 1210.74 L1630.49 1210.74 L1629.91 1210.74 L1629.32 1210.74 L1628.73 1210.74 L1628.15 1210.74 L1627.56 1210.74 L1626.97 1210.74 L1626.39 1210.74 L1625.8 1210.74 L1625.22 1210.74 L1624.63 1210.74 L1624.04 1210.74 L1623.46 1210.74 L1622.87 1210.74 L1622.28 1210.74 L1621.7 1210.74 L1621.11 1210.74 L1620.52 1210.74 L1619.94 1210.74 L1619.35 1210.74 L1618.76 1210.74 L1618.18 1210.74 L1617.59 1210.74 L1617.01 1210.74 L1616.42 1210.74 L1615.83 1210.74 L1615.25 1210.74 L1614.66 1210.74 L1614.07 1210.74 L1613.49 1210.74 L1612.9 1210.74 L1612.31 1210.74 L1611.73 1210.74 L1611.14 1210.74 L1610.55 1210.74 L1609.97 1210.74 L1609.38 1210.74 L1608.8 1210.74 L1608.21 1210.74 L1607.62 1210.74 L1607.04 1210.74 L1606.45 1210.74 L1605.86 1210.74 L1605.28 1210.74 L1604.69 1210.74 L1604.1 1210.74 L1603.52 1210.74 L1602.93 1210.74 L1602.34 1210.74 L1601.76 1210.74 L1601.17 1210.74 L1600.59 1210.74 L1600 1210.74 L1599.41 1210.74 L1598.83 1210.74 L1598.24 1210.74 L1597.65 1210.74 L1597.07 1210.74 L1596.48 1210.74 L1595.89 1210.74 L1595.31 1210.74 L1594.72 1210.74 L1594.14 1210.74 L1593.55 1210.74 L1592.96 1210.74 L1592.38 1210.74 L1591.79 1210.74 L1591.2 1210.74 L1590.62 1210.74 L1590.03 1210.74 L1589.44 1210.74 L1588.86 1210.74 L1588.27 1210.74 L1587.68 1210.74 L1587.1 1210.74 L1586.51 1210.74 L1585.93 1210.74 L1585.34 1210.74 L1584.75 1210.74 L1584.17 1210.74 L1583.58 1210.74 L1582.99 1210.74 L1582.41 1210.74 L1581.82 1210.74 L1581.23 1210.74 L1580.65 1210.74 L1580.06 1210.74 L1579.47 1210.74 L1578.89 1210.74 L1578.3 1210.74 L1577.72 1210.74 L1577.13 1210.74 L1576.54 1210.74 L1575.96 1210.74 L1575.37 1210.74 L1574.78 1210.74 L1574.2 1210.74 L1573.61 1210.74 L1573.02 1210.74 L1572.44 1210.74 L1571.85 1210.74 L1571.27 1210.74 L1570.68 1210.74 L1570.09 1210.74 L1569.51 1210.74 L1568.92 1210.74 L1568.33 1210.74 L1567.75 1210.74 L1567.16 1210.74 L1566.57 1210.74 L1565.99 1210.74 L1565.4 1210.74 L1564.81 1210.74 L1564.23 1210.74 L1563.64 1210.74 L1563.06 1210.74 L1562.47 1210.74 L1561.88 1210.74 L1561.3 1210.74 L1560.71 1210.74 L1560.12 1210.74 L1559.54 1210.74 L1558.95 1210.74 L1558.36 1210.74 L1557.78 1210.74 L1557.19 1210.74 L1556.6 1210.74 L1556.02 1210.74 L1555.43 1210.74 L1554.85 1210.74 L1554.26 1210.74 L1553.67 1210.74 L1553.09 1210.74 L1552.5 1210.74 L1551.91 1210.74 L1551.33 1210.74 L1550.74 1210.74 L1550.15 1210.74 L1549.57 1210.74 L1548.98 1210.74 L1548.4 1210.74 L1547.81 1210.74 L1547.22 1210.74 L1546.64 1210.74 L1546.05 1210.74 L1545.46 1210.74 L1544.88 1210.74 L1544.29 1210.74 L1543.7 1210.74 L1543.12 1210.74 L1542.53 1210.74 L1541.94 1210.74 L1541.36 1210.74 L1540.77 1210.74 L1540.19 1210.74 L1539.6 1210.74 L1539.01 1210.74 L1538.43 1210.74 L1537.84 1210.74 L1537.25 1210.74 L1536.67 1210.74 L1536.08 1210.74 L1535.49 1210.74 L1534.91 1210.74 L1534.32 1210.74 L1533.73 1210.74 L1533.15 1210.74 L1532.56 1210.74 L1531.98 1210.74 L1531.39 1210.74 L1530.8 1210.74 L1530.22 1210.74 L1529.63 1210.74 L1529.04 1210.74 L1528.46 1210.74 L1527.87 1210.74 L1527.28 1210.74 L1526.7 1210.74 L1526.11 1210.74 L1525.52 1210.74 L1524.94 1210.74 L1524.35 1210.74 L1523.77 1210.74 L1523.18 1210.74 L1522.59 1210.74 L1522.01 1210.74 L1521.42 1210.74 L1520.83 1210.74 L1520.25 1210.74 L1519.66 1210.74 L1519.07 1210.74 L1518.49 1210.74 L1517.9 1210.74 L1517.32 1210.74 L1516.73 1210.74 L1516.14 1210.74 L1515.56 1210.74 L1514.97 1210.74 L1514.38 1210.74 L1513.8 1210.74 L1513.21 1210.74 L1512.62 1210.74 L1512.04 1210.74 L1511.45 1210.74 L1510.86 1210.74 L1510.28 1210.74 L1509.69 1210.74 L1509.11 1210.74 L1508.52 1210.74 L1507.93 1210.74 L1507.35 1210.74 L1506.76 1210.74 L1506.17 1210.74 L1505.59 1210.74 L1505 1210.74 L1504.41 1210.74 L1503.83 1210.74 L1503.24 1210.74 L1502.65 1210.74 L1502.07 1210.74 L1501.48 1210.74 L1500.9 1210.74 L1500.31 1210.74 L1499.72 1210.74 L1499.14 1210.74 L1498.55 1210.74 L1497.96 1210.74 L1497.38 1210.74 L1496.79 1210.74 L1496.2 1210.74 L1495.62 1210.74 L1495.03 1210.74 L1494.45 1210.74 L1493.86 1210.74 L1493.27 1210.74 L1492.69 1210.74 L1492.1 1210.74 L1491.51 1210.74 L1490.93 1210.74 L1490.34 1210.74 L1489.75 1210.74 L1489.17 1210.74 L1488.58 1210.74 L1487.99 1210.74 L1487.41 1210.74 L1486.82 1210.74 L1486.24 1210.74 L1485.65 1210.74 L1485.06 1210.74 L1484.48 1210.74 L1483.89 1210.74 L1483.3 1210.74 L1482.72 1210.74 L1482.13 1210.74 L1481.54 1210.74 L1480.96 1210.74 L1480.37 1210.74 L1479.78 1210.74 L1479.2 1210.74 L1478.61 1210.74 L1478.03 1210.74 L1477.44 1210.74 L1476.85 1210.74 L1476.27 1210.74 L1475.68 1210.74 L1475.09 1210.74 L1474.51 1210.74 L1473.92 1210.74 L1473.33 1210.74 L1472.75 1210.74 L1472.16 1210.74 L1471.57 1210.74 L1470.99 1210.74 L1470.4 1210.74 L1469.82 1210.74 L1469.23 1210.74 L1468.64 1210.74 L1468.06 1210.74 L1467.47 1210.74 L1466.88 1210.74 L1466.3 1210.74 L1465.71 1210.74 L1465.12 1210.74 L1464.54 1210.74 L1463.95 1210.74 L1463.37 1210.74 L1462.78 1210.74 L1462.19 1210.74 L1461.61 1210.74 L1461.02 1210.74 L1460.43 1210.74 L1459.85 1210.74 L1459.26 1210.74 L1458.67 1210.74 L1458.09 1210.74 L1457.5 1210.74 L1456.91 1210.74 L1456.33 1210.74 L1455.74 1210.74 L1455.16 1210.74 L1454.57 1210.74 L1453.98 1210.74 L1453.4 1210.74 L1452.81 1210.74 L1452.22 1210.74 L1451.64 1210.74 L1451.05 1210.74 L1450.46 1210.74 L1449.88 1210.74 L1449.29 1210.74 L1448.7 1210.74 L1448.12 1210.74 L1447.53 1210.74 L1446.95 1210.74 L1446.36 1210.74 L1445.77 1210.74 L1445.19 1210.74 L1444.6 1210.74 L1444.01 1210.74 L1443.43 1210.74 L1442.84 1210.74 L1442.25 1210.74 L1441.67 1210.74 L1441.08 1210.74 L1440.5 1210.74 L1439.91 1210.74 L1439.32 1210.74 L1438.74 1210.74 L1438.15 1210.74 L1437.56 1210.74 L1436.98 1210.74 L1436.39 1210.74 L1435.8 1210.74 L1435.22 1210.74 L1434.63 1210.74 L1434.04 1210.74 L1433.46 1210.74 L1432.87 1210.74 L1432.29 1210.74 L1431.7 1210.74 L1431.11 1210.74 L1430.53 1210.74 L1429.94 1210.74 L1429.35 1210.74 L1428.77 1210.74 L1428.18 1210.74 L1427.59 1210.74 L1427.01 1210.74 L1426.42 1210.74 L1425.83 1210.74 L1425.25 1210.74 L1424.66 1210.74 L1424.08 1210.74 L1423.49 1210.74 L1422.9 1210.74 L1422.32 1210.74 L1421.73 1210.74 L1421.14 1210.74 L1420.56 1210.74 L1419.97 1210.74 L1419.38 1210.74 L1418.8 1210.74 L1418.21 1210.74 L1417.63 1210.74 L1417.04 1210.74 L1416.45 1210.74 L1415.87 1210.74 L1415.28 1210.74 L1414.69 1210.74 L1414.11 1210.74 L1413.52 1210.74 L1412.93 1210.74 L1412.35 1210.74 L1411.76 1210.74 L1411.17 1210.74 L1410.59 1210.74 L1410 1210.74 L1409.42 1210.74 L1408.83 1210.74 L1408.24 1210.74 L1407.66 1210.74 L1407.07 1210.74 L1406.48 1210.74 L1405.9 1210.74 L1405.31 1210.74 L1404.72 1210.74 L1404.14 1210.74 L1403.55 1210.74 L1402.96 1210.74 L1402.38 1210.74 L1401.79 1210.74 L1401.21 1210.74 L1400.62 1210.74 L1400.03 1210.74 L1399.45 1210.74 L1398.86 1210.74 L1398.27 1210.74 L1397.69 1210.74 L1397.1 1210.74 L1396.51 1210.74 L1395.93 1210.74 L1395.34 1210.74 L1394.75 1210.74 L1394.17 1210.74 L1393.58 1210.74 L1393 1210.74 L1392.41 1210.74 L1391.82 1210.74 L1391.24 1210.74 L1390.65 1210.74 L1390.06 1210.74 L1389.48 1210.74 L1388.89 1210.74 L1388.3 1210.74 L1387.72 1210.74 L1387.13 1210.74 L1386.55 1210.74 L1385.96 1210.74 L1385.37 1210.74 L1384.79 1210.74 L1384.2 1210.74 L1383.61 1210.74 L1383.03 1210.74 L1382.44 1210.74 L1381.85 1210.74 L1381.27 1210.74 L1380.68 1210.74 L1380.09 1210.74 L1379.51 1210.74 L1378.92 1210.74 L1378.34 1210.74 L1377.75 1210.74 L1377.16 1210.74 L1376.58 1210.74 L1375.99 1210.74 L1375.4 1210.74 L1374.82 1210.74 L1374.23 1210.74 L1373.64 1210.74 L1373.06 1210.74 L1372.47 1210.74 L1371.88 1210.74 L1371.3 1210.74 L1370.71 1210.74 L1370.13 1210.74 L1369.54 1210.74 L1368.95 1210.74 L1368.37 1210.74 L1367.78 1210.74 L1367.19 1210.74 L1366.61 1210.74 L1366.02 1210.74 L1365.43 1210.74 L1364.85 1210.74 L1364.26 1210.74 L1363.68 1210.74 L1363.09 1210.74 L1362.5 1210.74 L1361.92 1210.74 L1361.33 1210.74 L1360.74 1210.74 L1360.16 1210.74 L1359.57 1210.74 L1358.98 1210.74 L1358.4 1210.74 L1357.81 1210.74 L1357.22 1210.74 L1356.64 1210.74 L1356.05 1210.74 L1355.47 1210.74 L1354.88 1210.74 L1354.29 1210.74 L1353.71 1210.74 L1353.12 1210.74 L1352.53 1210.74 L1351.95 1210.74 L1351.36 1210.74 L1350.77 1210.74 L1350.19 1210.74 L1349.6 1210.74 L1349.01 1210.74 L1348.43 1210.74 L1347.84 1210.74 L1347.26 1210.74 L1346.67 1210.74 L1346.08 1210.74 L1345.5 1210.74 L1344.91 1210.74 L1344.32 1210.74 L1343.74 1210.74 L1343.15 1210.74 L1342.56 1210.74 L1341.98 1210.74 L1341.39 1210.74 L1340.8 1210.74 L1340.22 1210.74 L1339.63 1210.74 L1339.05 1210.74 L1338.46 1210.74 L1337.87 1210.74 L1337.29 1210.74 L1336.7 1210.74 L1336.11 1210.74 L1335.53 1210.74 L1334.94 1210.74 L1334.35 1210.74 L1333.77 1210.74 L1333.18 1210.74 L1332.6 1210.74 L1332.01 1210.74 L1331.42 1210.74 L1330.84 1210.74 L1330.25 1210.74 L1329.66 1210.74 L1329.08 1210.74 L1328.49 1210.74 L1327.9 1210.74 L1327.32 1210.74 L1326.73 1210.74 L1326.14 1210.74 L1325.56 1210.74 L1324.97 1210.74 L1324.39 1210.74 L1323.8 1210.74 L1323.21 1210.74 L1322.63 1210.74 L1322.04 1210.74 L1321.45 1210.74 L1320.87 1210.74 L1320.28 1210.74 L1319.69 1210.74 L1319.11 1210.74 L1318.52 1210.74 L1317.93 1210.74 L1317.35 1210.74 L1316.76 1210.74 L1316.18 1210.74 L1315.59 1210.74 L1315 1210.74 L1314.42 1210.74 L1313.83 1210.74 L1313.24 1210.74 L1312.66 1210.74 L1312.07 1210.74 L1311.48 1210.74 L1310.9 1210.74 L1310.31 1210.74 L1309.73 1210.74 L1309.14 1210.74 L1308.55 1210.74 L1307.97 1210.74 L1307.38 1210.74 L1306.79 1210.74 L1306.21 1210.74 L1305.62 1210.74 L1305.03 1210.74 L1304.45 1210.74 L1303.86 1210.74 L1303.27 1210.74 L1302.69 1210.74 L1302.1 1210.74 L1301.52 1210.74 L1300.93 1210.74 L1300.34 1210.74 L1299.76 1210.74 L1299.17 1210.74 L1298.58 1210.74 L1298 1210.74 L1297.41 1210.74 L1296.82 1210.74 L1296.24 1210.74 L1295.65 1210.74 L1295.06 1210.74 L1294.48 1210.74 L1293.89 1210.74 L1293.31 1210.74 L1292.72 1210.74 L1292.13 1210.74 L1291.55 1210.74 L1290.96 1210.74 L1290.37 1210.74 L1289.79 1210.74 L1289.2 1210.74 L1288.61 1210.74 L1288.03 1210.74 L1287.44 1210.74 L1286.86 1210.74 L1286.27 1210.74 L1285.68 1210.74 L1285.1 1210.74 L1284.51 1210.74 L1283.92 1210.74 L1283.34 1210.74 L1282.75 1210.74 L1282.16 1210.74 L1281.58 1210.74 L1280.99 1210.74 L1280.4 1210.74 L1279.82 1210.74 L1279.23 1210.74 L1278.65 1210.74 L1278.06 1210.74 L1277.47 1210.74 L1276.89 1210.74 L1276.3 1210.74 L1275.71 1210.74 L1275.13 1210.74 L1274.54 1210.74 L1273.95 1210.74 L1273.37 1210.74 L1272.78 1210.74 L1272.19 1210.74 L1271.61 1210.74 L1271.02 1210.74 L1270.44 1210.74 L1269.85 1210.74 L1269.26 1210.74 L1268.68 1210.74 L1268.09 1210.74 L1267.5 1210.74 L1266.92 1210.74 L1266.33 1210.74 L1265.74 1210.74 L1265.16 1210.74 L1264.57 1210.74 L1263.98 1210.74 L1263.4 1210.74 L1262.81 1210.74 L1262.23 1210.74 L1261.64 1210.74 L1261.05 1210.74 L1260.47 1210.74 L1259.88 1210.74 L1259.29 1210.74 L1258.71 1210.74 L1258.12 1210.74 L1257.53 1210.74 L1256.95 1210.74 L1256.36 1210.74 L1255.78 1210.74 L1255.19 1210.74 L1254.6 1210.74 L1254.02 1210.74 L1253.43 1210.74 L1252.84 1210.74 L1252.26 1210.74 L1251.67 1210.74 L1251.08 1210.74 L1250.5 1210.74 L1249.91 1210.74 L1249.32 1210.74 L1248.74 1210.74 L1248.15 1210.74 L1247.57 1210.74 L1246.98 1210.74 L1246.39 1210.74 L1245.81 1210.74 L1245.22 1210.74 L1244.63 1210.74 L1244.05 1210.74 L1243.46 1210.74 L1242.87 1210.74 L1242.29 1210.74 L1241.7 1210.74 L1241.11 1210.74 L1240.53 1210.74 L1239.94 1210.74 L1239.36 1210.74 L1238.77 1210.74 L1238.18 1210.74 L1237.6 1210.74 L1237.01 1210.74 L1236.42 1210.74 L1235.84 1210.74 L1235.25 1210.74 L1234.66 1210.74 L1234.08 1210.74 L1233.49 1210.74 L1232.91 1210.74 L1232.32 1210.74 L1231.73 1210.74 L1231.15 1210.74 L1230.56 1210.74 L1229.97 1210.74 L1229.39 1210.74 L1228.8 1210.74 L1228.21 1210.74 L1227.63 1210.74 L1227.04 1210.74 L1226.45 1210.74 L1225.87 1210.74 L1225.28 1210.74 L1224.7 1210.74 L1224.11 1210.74 L1223.52 1210.74 L1222.94 1210.74 L1222.35 1210.74 L1221.76 1210.74 L1221.18 1210.74 L1220.59 1210.74 L1220 1210.74 L1219.42 1210.74 L1218.83 1210.74 L1218.24 1210.74 L1217.66 1210.74 L1217.07 1210.74 L1216.49 1210.74 L1215.9 1210.74 L1215.31 1210.74 L1214.73 1210.74 L1214.14 1210.74 L1213.55 1210.74 L1212.97 1210.74 L1212.38 1210.74 L1211.79 1210.74 L1211.21 1210.74 L1210.62 1210.74 L1210.03 1210.74 L1209.45 1210.74 L1208.86 1210.74 L1208.28 1210.74 L1207.69 1210.74 L1207.1 1210.74 L1206.52 1210.74 L1205.93 1210.74 L1205.34 1210.74 L1204.76 1210.74 L1204.17 1210.74 L1203.58 1210.74 L1203 1210.74 L1202.41 1210.74 L1201.83 1210.74 L1201.24 1210.74 L1200.65 1210.74 L1200.07 1210.74 L1199.48 1210.74 L1198.89 1210.74 L1198.31 1210.74 L1197.72 1210.74 L1197.13 1210.74 L1196.55 1210.74 L1195.96 1210.74 L1195.37 1210.74 L1194.79 1210.74 L1194.2 1210.74 L1193.62 1210.74 L1193.03 1210.74 L1192.44 1210.74 L1191.86 1210.74 L1191.27 1210.74 L1190.68 1210.74 L1190.1 1210.74 L1189.51 1210.74 L1188.92 1210.74 L1188.34 1210.74 L1187.75 1210.74 L1187.16 1210.74 L1186.58 1210.74 L1185.99 1210.74 L1185.41 1210.74 L1184.82 1210.74 L1184.23 1210.74 L1183.65 1210.74 L1183.06 1210.74 L1182.47 1210.74 L1181.89 1210.74 L1181.3 1210.74 L1180.71 1210.74 L1180.13 1210.74 L1179.54 1210.74 L1178.96 1210.74 L1178.37 1210.74 L1177.78 1210.74 L1177.2 1210.74 L1176.61 1210.74 L1176.02 1210.74 L1175.44 1210.74 L1174.85 1210.74 L1174.26 1210.74 L1173.68 1210.74 L1173.09 1210.74 L1172.5 1210.74 L1171.92 1210.74 L1171.33 1210.74 L1170.75 1210.74 L1170.16 1210.74 L1169.57 1210.74 L1168.99 1210.74 L1168.4 1210.74 L1167.81 1210.74 L1167.23 1210.74 L1166.64 1210.74 L1166.05 1210.74 L1165.47 1210.74 L1164.88 1210.74 L1164.29 1210.74 L1163.71 1210.74 L1163.12 1210.74 L1162.54 1210.74 L1161.95 1210.74 L1161.36 1210.74 L1160.78 1210.74 L1160.19 1210.74 L1159.6 1210.74 L1159.02 1210.74 L1158.43 1210.74 L1157.84 1210.74 L1157.26 1210.74 L1156.67 1210.74 L1156.09 1210.74 L1155.5 1210.74 L1154.91 1210.74 L1154.33 1210.74 L1153.74 1210.74 L1153.15 1210.74 L1152.57 1210.74 L1151.98 1210.74 L1151.39 1210.74 L1150.81 1210.74 L1150.22 1210.74 L1149.63 1210.74 L1149.05 1210.74 L1148.46 1210.74 L1147.88 1210.74 L1147.29 1210.74 L1146.7 1210.74 L1146.12 1210.74 L1145.53 1210.74 L1144.94 1210.74 L1144.36 1210.74 L1143.77 1210.74 L1143.18 1210.74 L1142.6 1210.74 L1142.01 1210.74 L1141.42 1210.74 L1140.84 1210.74 L1140.25 1210.74 L1139.67 1210.74 L1139.08 1210.74 L1138.49 1210.74 L1137.91 1210.74 L1137.32 1210.74 L1136.73 1210.74 L1136.15 1210.74 L1135.56 1210.74 L1134.97 1210.74 L1134.39 1210.74 L1133.8 1210.74 L1133.21 1210.74 L1132.63 1210.74 L1132.04 1210.74 L1131.46 1210.74 L1130.87 1210.74 L1130.28 1210.74 L1129.7 1210.74 L1129.11 1210.74 L1128.52 1210.74 L1127.94 1210.74 L1127.35 1210.74 L1126.76 1210.74 L1126.18 1210.74 L1125.59 1210.74 L1125.01 1210.74 L1124.42 1210.74 L1123.83 1210.74 L1123.25 1210.74 L1122.66 1210.74 L1122.07 1210.74 L1121.49 1210.74 L1120.9 1210.74 L1120.31 1210.74 L1119.73 1210.74 L1119.14 1210.74 L1118.55 1210.74 L1117.97 1210.74 L1117.38 1210.74 L1116.8 1210.74 L1116.21 1210.74 L1115.62 1210.74 L1115.04 1210.74 L1114.45 1210.74 L1113.86 1210.74 L1113.28 1210.74 L1112.69 1210.74 L1112.1 1210.74 L1111.52 1210.74 L1110.93 1210.74 L1110.34 1210.74 L1109.76 1210.74 L1109.17 1210.74 L1108.59 1210.74 L1108 1210.74 L1107.41 1210.74 L1106.83 1210.74 L1106.24 1210.74 L1105.65 1210.74 L1105.07 1210.74 L1104.48 1210.74 L1103.89 1210.74 L1103.31 1210.74 L1102.72 1210.74 L1102.14 1210.74 L1101.55 1210.74 L1100.96 1210.74 L1100.38 1210.74 L1099.79 1210.74 L1099.2 1210.74 L1098.62 1210.74 L1098.03 1210.74 L1097.44 1210.74 L1096.86 1210.74 L1096.27 1210.74 L1095.68 1210.74 L1095.1 1210.74 L1094.51 1210.74 L1093.93 1210.74 L1093.34 1210.74 L1092.75 1210.74 L1092.17 1210.74 L1091.58 1210.74 L1090.99 1210.74 L1090.41 1210.74 L1089.82 1210.74 L1089.23 1210.74 L1088.65 1210.74 L1088.06 1210.74 L1087.47 1210.74 L1086.89 1210.74 L1086.3 1210.74 L1085.72 1210.74 L1085.13 1210.74 L1084.54 1210.74 L1083.96 1210.74 L1083.37 1210.74 L1082.78 1210.74 L1082.2 1210.74 L1081.61 1210.74 L1081.02 1210.74 L1080.44 1210.74 L1079.85 1210.74 L1079.26 1210.74 L1078.68 1210.74 L1078.09 1210.74 L1077.51 1210.74 L1076.92 1210.74 L1076.33 1210.74 L1075.75 1210.74 L1075.16 1210.74 L1074.57 1210.74 L1073.99 1210.74 L1073.4 1210.74 L1072.81 1210.74 L1072.23 1210.74 L1071.64 1210.74 L1071.06 1210.74 L1070.47 1210.74 L1069.88 1210.74 L1069.3 1210.74 L1068.71 1210.74 L1068.12 1210.74 L1067.54 1210.74 L1066.95 1210.74 L1066.36 1210.74 L1065.78 1210.74 L1065.19 1210.74 L1064.6 1210.74 L1064.02 1210.74 L1063.43 1210.74 L1062.85 1210.74 L1062.26 1210.74 L1061.67 1210.74 L1061.09 1210.74 L1060.5 1210.74 L1059.91 1210.74 L1059.33 1210.74 L1058.74 1210.74 L1058.15 1210.74 L1057.57 1210.74 L1056.98 1210.74 L1056.39 1210.74 L1055.81 1210.74 L1055.22 1210.74 L1054.64 1210.74 L1054.05 1210.74 L1053.46 1210.74 L1052.88 1210.74 L1052.29 1210.74 L1051.7 1210.74 L1051.12 1210.74 L1050.53 1210.74 L1049.94 1210.74 L1049.36 1210.74 L1048.77 1210.74 L1048.19 1210.74 L1047.6 1210.74 L1047.01 1210.74 L1046.43 1210.74 L1045.84 1210.74 L1045.25 1210.74 L1044.67 1210.74 L1044.08 1210.74 L1043.49 1210.74 L1042.91 1210.74 L1042.32 1210.74 L1041.73 1210.74 L1041.15 1210.74 L1040.56 1210.74 L1039.98 1210.74 L1039.39 1210.74 L1038.8 1210.74 L1038.22 1210.74 L1037.63 1210.74 L1037.04 1210.74 L1036.46 1210.74 L1035.87 1210.74 L1035.28 1210.74 L1034.7 1210.74 L1034.11 1210.74 L1033.52 1210.74 L1032.94 1210.74 L1032.35 1210.74 L1031.77 1210.74 L1031.18 1210.74 L1030.59 1210.74 L1030.01 1210.74 L1029.42 1210.74 L1028.83 1210.74 L1028.25 1210.74 L1027.66 1210.74 L1027.07 1210.74 L1026.49 1210.74 L1025.9 1210.74 L1025.32 1210.74 L1024.73 1210.74 L1024.14 1210.74 L1023.56 1210.74 L1022.97 1210.74 L1022.38 1210.74 L1021.8 1210.74 L1021.21 1210.74 L1020.62 1210.74 L1020.04 1210.74 L1019.45 1210.74 L1018.86 1210.74 L1018.28 1210.74 L1017.69 1210.74 L1017.11 1210.74 L1016.52 1210.74 L1015.93 1210.74 L1015.35 1210.74 L1014.76 1210.74 L1014.17 1210.74 L1013.59 1210.74 L1013 1210.74 L1012.41 1210.74 L1011.83 1210.74 L1011.24 1210.74 L1010.65 1210.74 L1010.07 1210.74 L1009.48 1210.74 L1008.9 1210.74 L1008.31 1210.74 L1007.72 1210.74 L1007.14 1210.74 L1006.55 1210.74 L1005.96 1210.74 L1005.38 1210.74 L1004.79 1210.74 L1004.2 1210.74 L1003.62 1210.74 L1003.03 1210.74 L1002.44 1210.74 L1001.86 1210.74 L1001.27 1210.74 L1000.69 1210.74 L1000.1 1210.74 L999.513 1210.74 L998.926 1210.74 L998.34 1210.74 L997.754 1210.74 L997.167 1210.74 L996.581 1210.74 L995.994 1210.74 L995.408 1210.74 L994.822 1210.74 L994.235 1210.74 L993.649 1210.74 L993.062 1210.74 L992.476 1210.74 L991.889 1210.74 L991.303 1210.74 L990.717 1210.74 L990.13 1210.74 L989.544 1210.74 L988.957 1210.74 L988.371 1210.74 L987.785 1210.74 L987.198 1210.74 L986.612 1210.74 L986.025 1210.74  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.18 986.612,1211.18 987.198,1211.18 987.785,1211.18 988.371,1211.18 988.957,1211.18 989.544,1211.18 990.13,1211.18 990.717,1211.18 991.303,1211.18 991.889,1211.18 992.476,1211.18 993.062,1211.18 993.649,1211.18 994.235,1211.18 994.822,1211.18 995.408,1211.18 995.994,1211.18 996.581,1211.18 997.167,1211.18 997.754,1211.18 998.34,1211.18 998.926,1211.18 999.513,1211.18 1000.1,1211.18 1000.69,1211.18 1001.27,1211.18 1001.86,1211.18 1002.44,1211.18 1003.03,1211.18 1003.62,1211.18 1004.2,1211.18 1004.79,1211.18 1005.38,1211.18 1005.96,1211.18 1006.55,1211.18 1007.14,1211.18 1007.72,1211.18 1008.31,1211.18 1008.9,1211.18 1009.48,1211.18 1010.07,1211.18 1010.65,1211.18 1011.24,1211.18 1011.83,1211.18 1012.41,1211.18 1013,1211.18 1013.59,1211.18 1014.17,1211.18 1014.76,1211.18 1015.35,1211.18 1015.93,1211.18 1016.52,1211.18 1017.11,1211.18 1017.69,1211.18 1018.28,1211.18 1018.86,1211.18 1019.45,1211.18 1020.04,1211.18 1020.62,1211.18 1021.21,1211.18 1021.8,1211.18 1022.38,1211.18 1022.97,1211.18 1023.56,1211.18 1024.14,1211.18 1024.73,1211.18 1025.32,1211.18 1025.9,1211.18 1026.49,1211.18 1027.07,1211.18 1027.66,1211.18 1028.25,1211.18 1028.83,1211.18 1029.42,1211.18 1030.01,1211.18 1030.59,1211.18 1031.18,1211.18 1031.77,1211.18 1032.35,1211.18 1032.94,1211.18 1033.52,1211.18 1034.11,1211.18 1034.7,1211.18 1035.28,1211.18 1035.87,1211.18 1036.46,1211.18 1037.04,1211.18 1037.63,1211.18 1038.22,1211.18 1038.8,1211.18 1039.39,1211.18 1039.98,1211.18 1040.56,1211.18 1041.15,1211.18 1041.73,1211.18 1042.32,1211.18 1042.91,1211.18 1043.49,1211.18 1044.08,1211.18 1044.67,1211.18 1045.25,1211.18 1045.84,1211.18 1046.43,1211.18 1047.01,1211.18 1047.6,1211.18 1048.19,1211.18 1048.77,1211.18 1049.36,1211.18 1049.94,1211.18 1050.53,1211.18 1051.12,1211.18 1051.7,1211.18 1052.29,1211.18 1052.88,1211.18 1053.46,1211.18 1054.05,1211.18 1054.64,1211.18 1055.22,1211.18 1055.81,1211.18 1056.39,1211.18 1056.98,1211.18 1057.57,1211.18 1058.15,1211.18 1058.74,1211.18 1059.33,1211.18 1059.91,1211.18 1060.5,1211.18 1061.09,1211.18 1061.67,1211.18 1062.26,1211.18 1062.85,1211.18 1063.43,1211.18 1064.02,1211.18 1064.6,1211.18 1065.19,1211.18 1065.78,1211.18 1066.36,1211.18 1066.95,1211.18 1067.54,1211.18 1068.12,1211.18 1068.71,1211.18 1069.3,1211.18 1069.88,1211.18 1070.47,1211.18 1071.06,1211.18 1071.64,1211.18 1072.23,1211.18 1072.81,1211.18 1073.4,1211.18 1073.99,1211.18 1074.57,1211.18 1075.16,1211.18 1075.75,1211.18 1076.33,1211.18 1076.92,1211.18 1077.51,1211.18 1078.09,1211.18 1078.68,1211.18 1079.26,1211.18 1079.85,1211.18 1080.44,1211.18 1081.02,1211.18 1081.61,1211.18 1082.2,1211.18 1082.78,1211.18 1083.37,1211.18 1083.96,1211.18 1084.54,1211.18 1085.13,1211.18 1085.72,1211.18 1086.3,1211.18 1086.89,1211.18 1087.47,1211.18 1088.06,1211.18 1088.65,1211.18 1089.23,1211.18 1089.82,1211.18 1090.41,1211.18 1090.99,1211.18 1091.58,1211.18 1092.17,1211.18 1092.75,1211.18 1093.34,1211.18 1093.93,1211.18 1094.51,1211.18 1095.1,1211.18 1095.68,1211.18 1096.27,1211.18 1096.86,1211.18 1097.44,1211.18 1098.03,1211.18 1098.62,1211.18 1099.2,1211.18 1099.79,1211.18 1100.38,1211.18 1100.96,1211.18 1101.55,1211.18 1102.14,1211.18 1102.72,1211.18 1103.31,1211.18 1103.89,1211.18 1104.48,1211.18 1105.07,1211.18 1105.65,1211.18 1106.24,1211.18 1106.83,1211.18 1107.41,1211.18 1108,1211.18 1108.59,1211.18 1109.17,1211.18 1109.76,1211.18 1110.34,1211.18 1110.93,1211.18 1111.52,1211.18 1112.1,1211.18 1112.69,1211.18 1113.28,1211.18 1113.86,1211.18 1114.45,1211.18 1115.04,1211.18 1115.62,1211.18 1116.21,1211.18 1116.8,1211.18 1117.38,1211.18 1117.97,1211.18 1118.55,1211.18 1119.14,1211.18 1119.73,1211.18 1120.31,1211.18 1120.9,1211.18 1121.49,1211.18 1122.07,1211.18 1122.66,1211.18 1123.25,1211.18 1123.83,1211.18 1124.42,1211.18 1125.01,1211.18 1125.59,1211.18 1126.18,1211.18 1126.76,1211.18 1127.35,1211.18 1127.94,1211.18 1128.52,1211.18 1129.11,1211.18 1129.7,1211.18 1130.28,1211.18 1130.87,1211.18 1131.46,1211.18 1132.04,1211.18 1132.63,1211.18 1133.21,1211.18 1133.8,1211.18 1134.39,1211.18 1134.97,1211.18 1135.56,1211.18 1136.15,1211.18 1136.73,1211.18 1137.32,1211.18 1137.91,1211.18 1138.49,1211.18 1139.08,1211.18 1139.67,1211.18 1140.25,1211.18 1140.84,1211.18 1141.42,1211.18 1142.01,1211.18 1142.6,1211.18 1143.18,1211.18 1143.77,1211.18 1144.36,1211.18 1144.94,1211.18 1145.53,1211.18 1146.12,1211.18 1146.7,1211.18 1147.29,1211.18 1147.88,1211.18 1148.46,1211.18 1149.05,1211.18 1149.63,1211.18 1150.22,1211.18 1150.81,1211.18 1151.39,1211.18 1151.98,1211.18 1152.57,1211.18 1153.15,1211.18 1153.74,1211.18 1154.33,1211.18 1154.91,1211.18 1155.5,1211.18 1156.09,1211.18 1156.67,1211.18 1157.26,1211.18 1157.84,1211.18 1158.43,1211.18 1159.02,1211.18 1159.6,1211.18 1160.19,1211.18 1160.78,1211.18 1161.36,1211.18 1161.95,1211.18 1162.54,1211.18 1163.12,1211.18 1163.71,1211.18 1164.29,1211.18 1164.88,1211.18 1165.47,1211.18 1166.05,1211.18 1166.64,1211.18 1167.23,1211.18 1167.81,1211.18 1168.4,1211.18 1168.99,1211.18 1169.57,1211.18 1170.16,1211.18 1170.75,1211.18 1171.33,1211.18 1171.92,1211.18 1172.5,1211.18 1173.09,1211.18 1173.68,1211.18 1174.26,1211.18 1174.85,1211.18 1175.44,1211.18 1176.02,1211.18 1176.61,1211.18 1177.2,1211.18 1177.78,1211.18 1178.37,1211.18 1178.96,1211.18 1179.54,1211.18 1180.13,1211.18 1180.71,1211.18 1181.3,1211.18 1181.89,1211.18 1182.47,1211.18 1183.06,1211.18 1183.65,1211.18 1184.23,1211.18 1184.82,1211.18 1185.41,1211.18 1185.99,1211.18 1186.58,1211.18 1187.16,1211.18 1187.75,1211.18 1188.34,1211.18 1188.92,1211.18 1189.51,1211.18 1190.1,1211.18 1190.68,1211.18 1191.27,1211.18 1191.86,1211.18 1192.44,1211.18 1193.03,1211.18 1193.62,1211.18 1194.2,1211.18 1194.79,1211.18 1195.37,1211.18 1195.96,1211.18 1196.55,1211.18 1197.13,1211.18 1197.72,1211.18 1198.31,1211.18 1198.89,1211.18 1199.48,1211.18 1200.07,1211.18 1200.65,1211.18 1201.24,1211.18 1201.83,1211.18 1202.41,1211.18 1203,1211.18 1203.58,1211.18 1204.17,1211.18 1204.76,1211.18 1205.34,1211.18 1205.93,1211.18 1206.52,1211.18 1207.1,1211.18 1207.69,1211.18 1208.28,1211.18 1208.86,1211.18 1209.45,1211.18 1210.03,1211.18 1210.62,1211.18 1211.21,1211.18 1211.79,1211.18 1212.38,1211.18 1212.97,1211.18 1213.55,1211.18 1214.14,1211.18 1214.73,1211.18 1215.31,1211.18 1215.9,1211.18 1216.49,1211.18 1217.07,1211.18 1217.66,1211.18 1218.24,1211.18 1218.83,1211.18 1219.42,1211.18 1220,1211.18 1220.59,1211.18 1221.18,1211.18 1221.76,1211.18 1222.35,1211.18 1222.94,1211.18 1223.52,1211.18 1224.11,1211.18 1224.7,1211.18 1225.28,1211.18 1225.87,1211.18 1226.45,1211.18 1227.04,1211.18 1227.63,1211.18 1228.21,1211.18 1228.8,1211.18 1229.39,1211.18 1229.97,1211.18 1230.56,1211.18 1231.15,1211.18 1231.73,1211.18 1232.32,1211.18 1232.91,1211.18 1233.49,1211.18 1234.08,1211.18 1234.66,1211.18 1235.25,1211.18 1235.84,1211.18 1236.42,1211.18 1237.01,1211.18 1237.6,1211.18 1238.18,1211.18 1238.77,1211.18 1239.36,1211.18 1239.94,1211.18 1240.53,1211.18 1241.11,1211.18 1241.7,1211.18 1242.29,1211.18 1242.87,1211.18 1243.46,1211.18 1244.05,1211.18 1244.63,1211.18 1245.22,1211.18 1245.81,1211.18 1246.39,1211.18 1246.98,1211.18 1247.57,1211.18 1248.15,1211.18 1248.74,1211.18 1249.32,1211.18 1249.91,1211.18 1250.5,1211.18 1251.08,1211.18 1251.67,1211.18 1252.26,1211.18 1252.84,1211.18 1253.43,1211.18 1254.02,1211.18 1254.6,1211.18 1255.19,1211.18 1255.78,1211.18 1256.36,1211.18 1256.95,1211.18 1257.53,1211.18 1258.12,1211.18 1258.71,1211.18 1259.29,1211.18 1259.88,1211.18 1260.47,1211.18 1261.05,1211.18 1261.64,1211.18 1262.23,1211.18 1262.81,1211.18 1263.4,1211.18 1263.98,1211.18 1264.57,1211.18 1265.16,1211.18 1265.74,1211.18 1266.33,1211.18 1266.92,1211.18 1267.5,1211.18 1268.09,1211.18 1268.68,1211.18 1269.26,1211.18 1269.85,1211.18 1270.44,1211.18 1271.02,1211.18 1271.61,1211.18 1272.19,1211.18 1272.78,1211.18 1273.37,1211.18 1273.95,1211.18 1274.54,1211.18 1275.13,1211.18 1275.71,1211.18 1276.3,1211.18 1276.89,1211.18 1277.47,1211.18 1278.06,1211.18 1278.65,1211.18 1279.23,1211.18 1279.82,1211.18 1280.4,1211.18 1280.99,1211.18 1281.58,1211.18 1282.16,1211.18 1282.75,1211.18 1283.34,1211.18 1283.92,1211.18 1284.51,1211.18 1285.1,1211.18 1285.68,1211.18 1286.27,1211.18 1286.86,1211.18 1287.44,1211.18 1288.03,1211.18 1288.61,1211.18 1289.2,1211.18 1289.79,1211.18 1290.37,1211.18 1290.96,1211.18 1291.55,1211.18 1292.13,1211.18 1292.72,1211.18 1293.31,1211.18 1293.89,1211.18 1294.48,1211.18 1295.06,1211.18 1295.65,1211.18 1296.24,1211.18 1296.82,1211.18 1297.41,1211.18 1298,1211.18 1298.58,1211.18 1299.17,1211.18 1299.76,1211.18 1300.34,1211.18 1300.93,1211.18 1301.52,1211.18 1302.1,1211.18 1302.69,1211.18 1303.27,1211.18 1303.86,1211.18 1304.45,1211.18 1305.03,1211.18 1305.62,1211.18 1306.21,1211.18 1306.79,1211.18 1307.38,1211.18 1307.97,1211.18 1308.55,1211.18 1309.14,1211.18 1309.73,1211.18 1310.31,1211.18 1310.9,1211.18 1311.48,1211.18 1312.07,1211.18 1312.66,1211.18 1313.24,1211.18 1313.83,1211.18 1314.42,1211.18 1315,1211.18 1315.59,1211.18 1316.18,1211.18 1316.76,1211.18 1317.35,1211.18 1317.93,1211.18 1318.52,1211.18 1319.11,1211.18 1319.69,1211.18 1320.28,1211.18 1320.87,1211.18 1321.45,1211.18 1322.04,1211.18 1322.63,1211.18 1323.21,1211.18 1323.8,1211.18 1324.39,1211.18 1324.97,1211.18 1325.56,1211.18 1326.14,1211.18 1326.73,1211.18 1327.32,1211.18 1327.9,1211.18 1328.49,1211.18 1329.08,1211.18 1329.66,1211.18 1330.25,1211.18 1330.84,1211.18 1331.42,1211.18 1332.01,1211.18 1332.6,1211.18 1333.18,1211.18 1333.77,1211.18 1334.35,1211.18 1334.94,1211.18 1335.53,1211.18 1336.11,1211.18 1336.7,1211.18 1337.29,1211.18 1337.87,1211.18 1338.46,1211.18 1339.05,1211.18 1339.63,1211.18 1340.22,1211.18 1340.8,1211.18 1341.39,1211.18 1341.98,1211.18 1342.56,1211.18 1343.15,1211.18 1343.74,1211.18 1344.32,1211.18 1344.91,1211.18 1345.5,1211.18 1346.08,1211.18 1346.67,1211.18 1347.26,1211.18 1347.84,1211.18 1348.43,1211.18 1349.01,1211.18 1349.6,1211.18 1350.19,1211.18 1350.77,1211.18 1351.36,1211.18 1351.95,1211.18 1352.53,1211.18 1353.12,1211.18 1353.71,1211.18 1354.29,1211.18 1354.88,1211.18 1355.47,1211.18 1356.05,1211.18 1356.64,1211.18 1357.22,1211.18 1357.81,1211.18 1358.4,1211.18 1358.98,1211.18 1359.57,1211.18 1360.16,1211.18 1360.74,1211.18 1361.33,1211.18 1361.92,1211.18 1362.5,1211.18 1363.09,1211.18 1363.68,1211.18 1364.26,1211.18 1364.85,1211.18 1365.43,1211.18 1366.02,1211.18 1366.61,1211.18 1367.19,1211.18 1367.78,1211.18 1368.37,1211.18 1368.95,1211.18 1369.54,1211.18 1370.13,1211.18 1370.71,1211.18 1371.3,1211.18 1371.88,1211.18 1372.47,1211.18 1373.06,1211.18 1373.64,1211.18 1374.23,1211.18 1374.82,1211.18 1375.4,1211.18 1375.99,1211.18 1376.58,1211.18 1377.16,1211.18 1377.75,1211.18 1378.34,1211.18 1378.92,1211.18 1379.51,1211.18 1380.09,1211.18 1380.68,1211.18 1381.27,1211.18 1381.85,1211.18 1382.44,1211.18 1383.03,1211.18 1383.61,1211.18 1384.2,1211.18 1384.79,1211.18 1385.37,1211.18 1385.96,1211.18 1386.55,1211.18 1387.13,1211.18 1387.72,1211.18 1388.3,1211.18 1388.89,1211.18 1389.48,1211.18 1390.06,1211.18 1390.65,1211.18 1391.24,1211.18 1391.82,1211.18 1392.41,1211.18 1393,1211.18 1393.58,1211.18 1394.17,1211.18 1394.75,1211.18 1395.34,1211.18 1395.93,1211.18 1396.51,1211.18 1397.1,1211.18 1397.69,1211.18 1398.27,1211.18 1398.86,1211.18 1399.45,1211.18 1400.03,1211.18 1400.62,1211.18 1401.21,1211.18 1401.79,1211.18 1402.38,1211.18 1402.96,1211.18 1403.55,1211.18 1404.14,1211.18 1404.72,1211.18 1405.31,1211.18 1405.9,1211.18 1406.48,1211.18 1407.07,1211.18 1407.66,1211.18 1408.24,1211.18 1408.83,1211.18 1409.42,1211.18 1410,1211.18 1410.59,1211.18 1411.17,1211.18 1411.76,1211.18 1412.35,1211.18 1412.93,1211.18 1413.52,1211.18 1414.11,1211.18 1414.69,1211.18 1415.28,1211.18 1415.87,1211.18 1416.45,1211.18 1417.04,1211.18 1417.63,1211.18 1418.21,1211.18 1418.8,1211.18 1419.38,1211.18 1419.97,1211.18 1420.56,1211.18 1421.14,1211.18 1421.73,1211.18 1422.32,1211.18 1422.9,1211.18 1423.49,1211.18 1424.08,1211.18 1424.66,1211.18 1425.25,1211.18 1425.83,1211.18 1426.42,1211.18 1427.01,1211.18 1427.59,1211.18 1428.18,1211.18 1428.77,1211.18 1429.35,1211.18 1429.94,1211.18 1430.53,1211.18 1431.11,1211.18 1431.7,1211.18 1432.29,1211.18 1432.87,1211.18 1433.46,1211.18 1434.04,1211.18 1434.63,1211.18 1435.22,1211.18 1435.8,1211.18 1436.39,1211.18 1436.98,1211.18 1437.56,1211.18 1438.15,1211.18 1438.74,1211.18 1439.32,1211.18 1439.91,1211.18 1440.5,1211.18 1441.08,1211.18 1441.67,1211.18 1442.25,1211.18 1442.84,1211.18 1443.43,1211.18 1444.01,1211.18 1444.6,1211.18 1445.19,1211.18 1445.77,1211.18 1446.36,1211.18 1446.95,1211.18 1447.53,1211.18 1448.12,1211.18 1448.7,1211.18 1449.29,1211.18 1449.88,1211.18 1450.46,1211.18 1451.05,1211.18 1451.64,1211.18 1452.22,1211.18 1452.81,1211.18 1453.4,1211.18 1453.98,1211.18 1454.57,1211.18 1455.16,1211.18 1455.74,1211.18 1456.33,1211.18 1456.91,1211.18 1457.5,1211.18 1458.09,1211.18 1458.67,1211.18 1459.26,1211.18 1459.85,1211.18 1460.43,1211.18 1461.02,1211.18 1461.61,1211.18 1462.19,1211.18 1462.78,1211.18 1463.37,1211.18 1463.95,1211.18 1464.54,1211.18 1465.12,1211.18 1465.71,1211.18 1466.3,1211.18 1466.88,1211.18 1467.47,1211.18 1468.06,1211.18 1468.64,1211.18 1469.23,1211.18 1469.82,1211.18 1470.4,1211.18 1470.99,1211.18 1471.57,1211.18 1472.16,1211.18 1472.75,1211.18 1473.33,1211.18 1473.92,1211.18 1474.51,1211.18 1475.09,1211.18 1475.68,1211.18 1476.27,1211.18 1476.85,1211.18 1477.44,1211.18 1478.03,1211.18 1478.61,1211.18 1479.2,1211.18 1479.78,1211.18 1480.37,1211.18 1480.96,1211.18 1481.54,1211.18 1482.13,1211.18 1482.72,1211.18 1483.3,1211.18 1483.89,1211.18 1484.48,1211.18 1485.06,1211.18 1485.65,1211.18 1486.24,1211.18 1486.82,1211.18 1487.41,1211.18 1487.99,1211.18 1488.58,1211.18 1489.17,1211.18 1489.75,1211.18 1490.34,1211.18 1490.93,1211.18 1491.51,1211.18 1492.1,1211.18 1492.69,1211.18 1493.27,1211.18 1493.86,1211.18 1494.45,1211.18 1495.03,1211.18 1495.62,1211.18 1496.2,1211.18 1496.79,1211.18 1497.38,1211.18 1497.96,1211.18 1498.55,1211.18 1499.14,1211.18 1499.72,1211.18 1500.31,1211.18 1500.9,1211.18 1501.48,1211.18 1502.07,1211.18 1502.65,1211.18 1503.24,1211.18 1503.83,1211.18 1504.41,1211.18 1505,1211.18 1505.59,1211.18 1506.17,1211.18 1506.76,1211.18 1507.35,1211.18 1507.93,1211.18 1508.52,1211.18 1509.11,1211.18 1509.69,1211.18 1510.28,1211.18 1510.86,1211.18 1511.45,1211.18 1512.04,1211.18 1512.62,1211.18 1513.21,1211.18 1513.8,1211.18 1514.38,1211.18 1514.97,1211.18 1515.56,1211.18 1516.14,1211.18 1516.73,1211.18 1517.32,1211.18 1517.9,1211.18 1518.49,1211.18 1519.07,1211.18 1519.66,1211.18 1520.25,1211.18 1520.83,1211.18 1521.42,1211.18 1522.01,1211.18 1522.59,1211.18 1523.18,1211.18 1523.77,1211.18 1524.35,1211.18 1524.94,1211.18 1525.52,1211.18 1526.11,1211.18 1526.7,1211.18 1527.28,1211.18 1527.87,1211.18 1528.46,1211.18 1529.04,1211.18 1529.63,1211.18 1530.22,1211.18 1530.8,1211.18 1531.39,1211.18 1531.98,1211.18 1532.56,1211.18 1533.15,1211.18 1533.73,1211.18 1534.32,1211.18 1534.91,1211.18 1535.49,1211.18 1536.08,1211.18 1536.67,1211.18 1537.25,1211.18 1537.84,1211.18 1538.43,1211.18 1539.01,1211.18 1539.6,1211.18 1540.19,1211.18 1540.77,1211.18 1541.36,1211.18 1541.94,1211.18 1542.53,1211.18 1543.12,1211.18 1543.7,1211.18 1544.29,1211.18 1544.88,1211.18 1545.46,1211.18 1546.05,1211.18 1546.64,1211.18 1547.22,1211.18 1547.81,1211.18 1548.4,1211.18 1548.98,1211.18 1549.57,1211.18 1550.15,1211.18 1550.74,1211.18 1551.33,1211.18 1551.91,1211.18 1552.5,1211.18 1553.09,1211.18 1553.67,1211.18 1554.26,1211.18 1554.85,1211.18 1555.43,1211.18 1556.02,1211.18 1556.6,1211.18 1557.19,1211.18 1557.78,1211.18 1558.36,1211.18 1558.95,1211.18 1559.54,1211.18 1560.12,1211.18 1560.71,1211.18 1561.3,1211.18 1561.88,1211.18 1562.47,1211.18 1563.06,1211.18 1563.64,1211.18 1564.23,1211.18 1564.81,1211.18 1565.4,1211.18 1565.99,1211.18 1566.57,1211.18 1567.16,1211.18 1567.75,1211.18 1568.33,1211.18 1568.92,1211.18 1569.51,1211.18 1570.09,1211.18 1570.68,1211.18 1571.27,1211.18 1571.85,1211.18 1572.44,1211.18 1573.02,1211.18 1573.61,1211.18 1574.2,1211.18 1574.78,1211.18 1575.37,1211.18 1575.96,1211.18 1576.54,1211.18 1577.13,1211.18 1577.72,1211.18 1578.3,1211.18 1578.89,1211.18 1579.47,1211.18 1580.06,1211.18 1580.65,1211.18 1581.23,1211.18 1581.82,1211.18 1582.41,1211.18 1582.99,1211.18 1583.58,1211.18 1584.17,1211.18 1584.75,1211.18 1585.34,1211.18 1585.93,1211.18 1586.51,1211.18 1587.1,1211.18 1587.68,1211.18 1588.27,1211.18 1588.86,1211.18 1589.44,1211.18 1590.03,1211.18 1590.62,1211.18 1591.2,1211.18 1591.79,1211.18 1592.38,1211.18 1592.96,1211.18 1593.55,1211.18 1594.14,1211.18 1594.72,1211.18 1595.31,1211.18 1595.89,1211.18 1596.48,1211.18 1597.07,1211.18 1597.65,1211.18 1598.24,1211.18 1598.83,1211.18 1599.41,1211.18 1600,1211.18 1600.59,1211.18 1601.17,1211.18 1601.76,1211.18 1602.34,1211.18 1602.93,1211.18 1603.52,1211.18 1604.1,1211.18 1604.69,1211.18 1605.28,1211.18 1605.86,1211.18 1606.45,1211.18 1607.04,1211.18 1607.62,1211.18 1608.21,1211.18 1608.8,1211.18 1609.38,1211.18 1609.97,1211.18 1610.55,1211.18 1611.14,1211.18 1611.73,1211.18 1612.31,1211.18 1612.9,1211.18 1613.49,1211.18 1614.07,1211.18 1614.66,1211.18 1615.25,1211.18 1615.83,1211.18 1616.42,1211.18 1617.01,1211.18 1617.59,1211.18 1618.18,1211.18 1618.76,1211.18 1619.35,1211.18 1619.94,1211.18 1620.52,1211.18 1621.11,1211.18 1621.7,1211.18 1622.28,1211.18 1622.87,1211.18 1623.46,1211.18 1624.04,1211.18 1624.63,1211.18 1625.22,1211.18 1625.8,1211.18 1626.39,1211.18 1626.97,1211.18 1627.56,1211.18 1628.15,1211.18 1628.73,1211.18 1629.32,1211.18 1629.91,1211.18 1630.49,1211.18 1631.08,1211.18 1631.67,1211.18 1632.25,1211.18 1632.84,1211.18 1633.42,1211.18 1634.01,1211.18 1634.6,1211.18 1635.18,1211.18 1635.77,1211.18 1636.36,1211.18 1636.94,1211.18 1637.53,1211.18 1638.12,1211.18 1638.7,1211.18 1639.29,1211.18 1639.88,1211.18 1640.46,1211.18 1641.05,1211.18 1641.63,1211.18 1642.22,1211.18 1642.81,1211.18 1643.39,1211.18 1643.98,1211.18 1644.57,1211.18 1645.15,1211.18 1645.74,1211.18 1646.33,1211.18 1646.91,1211.18 1647.5,1211.18 1648.09,1211.18 1648.67,1211.18 1649.26,1211.18 1649.84,1211.18 1650.43,1211.18 1651.02,1211.18 1651.6,1211.18 1652.19,1211.18 1652.78,1211.18 1653.36,1211.18 1653.95,1211.18 1654.54,1211.18 1655.12,1211.18 1655.71,1211.18 1656.29,1211.18 1656.88,1211.18 1657.47,1211.18 1658.05,1211.18 1658.64,1211.18 1659.23,1211.18 1659.81,1211.18 1660.4,1211.18 1660.99,1211.18 1661.57,1211.18 1662.16,1211.18 1662.75,1211.18 1663.33,1211.18 1663.92,1211.18 1664.5,1211.18 1665.09,1211.18 1665.68,1211.18 1666.26,1211.18 1666.85,1211.18 1667.44,1211.18 1668.02,1211.18 1668.61,1211.18 1669.2,1211.18 1669.78,1211.18 1670.37,1211.18 1670.96,1211.18 1671.54,1211.18 1672.13,1211.18 1672.71,1211.18 1673.3,1211.18 1673.89,1211.18 1674.47,1211.18 1675.06,1211.18 1675.65,1211.18 1676.23,1211.18 1676.82,1211.18 1677.41,1211.18 1677.99,1211.18 1678.58,1211.18 1679.17,1211.18 1679.75,1211.18 1680.34,1211.18 1680.92,1211.18 1681.51,1211.18 1682.1,1211.18 1682.68,1211.18 1683.27,1211.18 1683.86,1211.18 1684.44,1211.18 1685.03,1211.18 1685.62,1211.18 1686.2,1211.18 1686.79,1211.18 1687.37,1211.18 1687.96,1211.18 1688.55,1211.18 1689.13,1211.18 1689.72,1211.18 1690.31,1211.18 1690.89,1211.18 1691.48,1211.18 1692.07,1211.18 1692.65,1211.18 1693.24,1211.18 1693.83,1211.18 1694.41,1211.18 1695,1211.18 1695.58,1211.18 1696.17,1211.18 1696.76,1211.18 1697.34,1211.18 1697.93,1211.18 1698.52,1211.18 1699.1,1211.18 1699.69,1211.18 1700.28,1211.18 1700.86,1211.18 1701.45,1211.18 1702.04,1211.18 1702.62,1211.18 1703.21,1211.18 1703.79,1211.18 1704.38,1211.18 1704.97,1211.18 1705.55,1211.18 1706.14,1211.18 1706.73,1211.18 1707.31,1211.18 1707.9,1211.18 1708.49,1211.18 1709.07,1211.18 1709.66,1211.18 1710.24,1211.18 1710.83,1211.18 1711.42,1211.18 1712,1211.18 1712.59,1211.18 1713.18,1211.18 1713.76,1211.18 1714.35,1211.18 1714.94,1211.18 1715.52,1211.18 1716.11,1211.18 1716.7,1211.18 1717.28,1211.18 1717.87,1211.18 1718.45,1211.18 1719.04,1211.18 1719.63,1211.18 1720.21,1211.18 1720.8,1211.18 1721.39,1211.18 1721.97,1211.18 1722.56,1211.18 1723.15,1211.18 1723.73,1211.18 1724.32,1211.18 1724.91,1211.18 1725.49,1211.18 1726.08,1211.18 1726.66,1211.18 1727.25,1211.18 1727.84,1211.18 1728.42,1211.18 1729.01,1211.18 1729.6,1211.18 1730.18,1211.18 1730.77,1211.18 1731.36,1211.18 1731.94,1211.18 1732.53,1211.18 1733.11,1211.18 1733.7,1211.18 1734.29,1211.18 1734.87,1211.18 1735.46,1211.18 1736.05,1211.18 1736.63,1211.18 1737.22,1211.18 1737.81,1211.18 1738.39,1211.18 1738.98,1211.18 1739.57,1211.18 1740.15,1211.18 1740.74,1211.18 1741.32,1211.18 1741.91,1211.18 1742.5,1211.18 1743.08,1211.18 1743.67,1211.18 1744.26,1211.18 1744.84,1211.18 1745.43,1211.18 1746.02,1211.18 1746.6,1211.18 1747.19,1211.18 1747.78,1211.18 1748.36,1211.18 1748.95,1211.18 1749.53,1211.18 1750.12,1211.18 1750.71,1211.18 1751.29,1211.18 1751.88,1211.18 1752.47,1211.18 1753.05,1211.18 1753.64,1211.18 1754.23,1211.18 1754.81,1211.18 1755.4,1211.18 1755.99,1211.18 1756.57,1211.18 1757.16,1211.18 1757.74,1211.18 1758.33,1211.18 1758.92,1211.18 1759.5,1211.18 1760.09,1211.18 1760.68,1211.18 1761.26,1211.18 1761.85,1211.18 1762.44,1211.18 1763.02,1211.18 1763.61,1211.18 1764.19,1211.18 1764.78,1211.18 1765.37,1211.18 1765.95,1211.18 1766.54,1211.18 1767.13,1211.18 1767.71,1211.18 1768.3,1211.18 1768.89,1211.18 1769.47,1211.18 1770.06,1211.18 1770.65,1211.18 1771.23,1211.18 1771.82,1211.18 1772.4,1211.18 1772.99,1211.18 1773.58,1211.18 1774.16,1211.18 1774.75,1211.18 1775.34,1211.18 1775.92,1211.18 1776.51,1211.18 1777.1,1211.18 1777.68,1211.18 1778.27,1211.18 1778.86,1211.18 1779.44,1211.18 1780.03,1211.18 1780.61,1211.18 1781.2,1211.18 1781.79,1211.18 1782.37,1211.18 1782.96,1211.18 1783.55,1211.18 1784.13,1211.18 1784.72,1211.18 1785.31,1211.18 1785.89,1211.18 1786.48,1211.18 1787.06,1211.18 1787.65,1211.18 1788.24,1211.18 1788.82,1211.18 1789.41,1211.18 1790,1211.18 1790.58,1211.18 1791.17,1211.18 1791.76,1211.18 1792.34,1211.18 1792.93,1211.18 1793.52,1211.18 1794.1,1211.18 1794.69,1211.18 1795.27,1211.18 1795.86,1211.18 1796.45,1211.18 1797.03,1211.18 1797.62,1211.18 1798.21,1211.18 1798.79,1211.18 1799.38,1211.18 1799.97,1211.18 1800.55,1211.18 1801.14,1211.18 1801.73,1211.18 1802.31,1211.18 1802.9,1211.18 1803.48,1211.18 1804.07,1211.18 1804.66,1211.18 1805.24,1211.18 1805.83,1211.18 1806.42,1211.18 1807,1211.18 1807.59,1211.18 1808.18,1211.18 1808.76,1211.18 1809.35,1211.18 1809.94,1211.18 1810.52,1211.18 1811.11,1211.18 1811.69,1211.18 1812.28,1211.18 1812.87,1211.18 1813.45,1211.18 1814.04,1211.18 1814.63,1211.18 1815.21,1211.18 1815.8,1211.18 1816.39,1211.18 1816.97,1211.18 1817.56,1211.18 1818.14,1211.18 1818.73,1211.18 1819.32,1211.18 1819.9,1211.18 1820.49,1211.18 1821.08,1211.18 1821.66,1211.18 1822.25,1211.18 1822.84,1211.18 1823.42,1211.18 1824.01,1211.18 1824.6,1211.18 1825.18,1211.18 1825.77,1211.18 1826.35,1211.18 1826.94,1211.18 1827.53,1211.18 1828.11,1211.18 1828.7,1211.18 1829.29,1211.18 1829.87,1211.18 1830.46,1211.18 1831.05,1211.18 1831.63,1211.18 1832.22,1211.18 1832.81,1211.18 1833.39,1211.18 1833.98,1211.18 1834.56,1211.18 1835.15,1211.18 1835.74,1211.18 1836.32,1211.18 1836.91,1211.18 1837.5,1211.18 1838.08,1211.18 1838.67,1211.18 1839.26,1211.18 1839.84,1211.18 1840.43,1211.18 1841.01,1211.18 1841.6,1211.18 1842.19,1211.18 1842.77,1211.18 1843.36,1211.18 1843.95,1211.18 1844.53,1211.18 1845.12,1211.18 1845.71,1211.18 1846.29,1211.18 1846.88,1211.18 1847.47,1211.18 1848.05,1211.18 1848.64,1211.18 1849.22,1211.18 1849.81,1211.18 1850.4,1211.18 1850.98,1211.18 1851.57,1211.18 1852.16,1211.18 1852.74,1211.18 1853.33,1211.18 1853.92,1211.18 1854.5,1211.18 1855.09,1211.18 1855.68,1211.18 1856.26,1211.18 1856.85,1211.18 1857.43,1211.18 1858.02,1211.18 1858.61,1211.18 1859.19,1211.18 1859.78,1211.18 1860.37,1211.18 1860.95,1211.18 1861.54,1211.18 1862.13,1211.18 1862.71,1211.18 1863.3,1211.18 1863.88,1211.18 1864.47,1211.18 1865.06,1211.18 1865.64,1211.18 1866.23,1211.18 1866.82,1211.18 1867.4,1211.18 1867.99,1211.18 1868.58,1211.18 1869.16,1211.18 1869.75,1211.18 1870.34,1211.18 1870.92,1211.18 1871.51,1211.18 1872.09,1211.18 1872.68,1211.18 1873.27,1211.18 1873.85,1211.18 1874.44,1211.18 1875.03,1211.18 1875.61,1211.18 1876.2,1211.18 1876.79,1211.18 1877.37,1211.18 1877.96,1211.18 1878.55,1211.18 1879.13,1211.18 1879.72,1211.18 1880.3,1211.18 1880.89,1211.18 1881.48,1211.18 1882.06,1211.18 1882.65,1211.18 1883.24,1211.18 1883.82,1211.18 1884.41,1211.18 1885,1211.18 1885.58,1211.18 1886.17,1211.18 1886.76,1211.18 1887.34,1211.18 1887.93,1211.18 1888.51,1211.18 1889.1,1211.18 1889.69,1211.18 1890.27,1211.18 1890.86,1211.18 1891.45,1211.18 1892.03,1211.18 1892.62,1211.18 1893.21,1211.18 1893.79,1211.18 1894.38,1211.18 1894.96,1211.18 1895.55,1211.18 1896.14,1211.18 1896.72,1211.18 1897.31,1211.18 1897.9,1211.18 1898.48,1211.18 1899.07,1211.18 1899.66,1211.18 1900.24,1211.18 1900.83,1211.18 1901.42,1211.18 1902,1211.18 1902.59,1211.18 1903.17,1211.18 1903.76,1211.18 1904.35,1211.18 1904.93,1211.18 1905.52,1211.18 1906.11,1211.18 1906.69,1211.18 1907.28,1211.18 1907.87,1211.18 1908.45,1211.18 1909.04,1211.18 1909.63,1211.18 1910.21,1211.18 1910.8,1211.18 1911.38,1211.18 1911.97,1211.18 1912.56,1211.18 1913.14,1211.18 1913.73,1211.18 1914.32,1211.18 1914.9,1211.18 1915.49,1211.18 1916.08,1211.18 1916.66,1211.18 1917.25,1211.18 1917.83,1211.18 1918.42,1211.18 1919.01,1211.18 1919.59,1211.18 1920.18,1211.18 1920.77,1211.18 1921.35,1211.18 1921.94,1211.18 1922.53,1211.18 1923.11,1211.18 1923.7,1211.18 1924.29,1211.18 1924.87,1211.18 1925.46,1211.18 1926.04,1211.18 1926.63,1211.18 1927.22,1211.18 1927.8,1211.18 1928.39,1211.18 1928.98,1211.18 1929.56,1211.18 1930.15,1211.18 1930.74,1211.18 1931.32,1211.18 1931.91,1211.18 1932.5,1211.18 1933.08,1211.18 1933.67,1211.18 1934.25,1211.18 1934.84,1211.18 1935.43,1211.18 1936.01,1211.18 1936.6,1211.18 1937.19,1211.18 1937.77,1211.18 1938.36,1211.18 1938.95,1211.18 1939.53,1211.18 1940.12,1211.18 1940.71,1211.18 1941.29,1211.18 1941.88,1211.18 1942.46,1211.18 1943.05,1211.18 1943.64,1211.18 1944.22,1211.18 1944.81,1211.18 1945.4,1211.18 1945.98,1211.18 1946.57,1211.18 1947.16,1211.18 1947.74,1211.18 1948.33,1211.18 1948.91,1211.18 1949.5,1211.18 1950.09,1211.18 1950.67,1211.18 1951.26,1211.18 1951.85,1211.18 1952.43,1211.18 1953.02,1211.18 1953.61,1211.18 1954.19,1211.18 1954.78,1211.18 1955.37,1211.18 1955.95,1211.18 1956.54,1211.18 1957.12,1211.18 1957.71,1211.18 1958.3,1211.18 1958.88,1211.18 1959.47,1211.18 1960.06,1211.18 1960.64,1211.18 1961.23,1211.18 1961.82,1211.18 1962.4,1211.18 1962.99,1211.18 1963.58,1211.18 1964.16,1211.18 1964.75,1211.18 1965.33,1211.18 1965.92,1211.18 1966.51,1211.18 1967.09,1211.18 1967.68,1211.18 1968.27,1211.18 1968.85,1211.18 1969.44,1211.18 1970.03,1211.18 1970.61,1211.18 1971.2,1211.18 1971.78,1211.18 1972.37,1211.18 1972.96,1211.18 1973.54,1211.18 1974.13,1211.18 1974.72,1211.18 1975.3,1211.18 1975.89,1211.18 1976.48,1211.18 1977.06,1211.18 1977.65,1211.18 1978.24,1211.18 1978.82,1211.18 1979.41,1211.18 1979.99,1211.18 1980.58,1211.18 1981.17,1211.18 1981.75,1211.18 1982.34,1211.18 1982.93,1211.18 1983.51,1211.18 1984.1,1211.18 1984.69,1211.18 1985.27,1211.18 1985.86,1211.18 1986.45,1211.18 1987.03,1211.18 1987.62,1211.18 1988.2,1211.18 1988.79,1211.18 1989.38,1211.18 1989.96,1211.18 1990.55,1211.18 1991.14,1211.18 1991.72,1211.18 1992.31,1211.18 1992.9,1211.18 1993.48,1211.18 1994.07,1211.18 1994.65,1211.18 1995.24,1211.18 1995.83,1211.18 1996.41,1211.18 1997,1211.18 1997.59,1211.18 1998.17,1211.18 1998.76,1211.18 1999.35,1211.18 1999.93,1211.18 2000.52,1211.18 2001.11,1211.18 2001.69,1211.18 2002.28,1211.18 2002.86,1211.18 2003.45,1211.18 2004.04,1211.18 2004.62,1211.18 2005.21,1211.18 2005.8,1211.18 2006.38,1211.18 2006.97,1211.18 2007.56,1211.18 2008.14,1211.18 2008.73,1211.18 2009.32,1211.18 2009.9,1211.18 2010.49,1211.18 2011.07,1211.18 2011.66,1211.18 2012.25,1211.18 2012.83,1211.18 2013.42,1211.18 2014.01,1211.18 2014.59,1211.18 2015.18,1211.18 2015.77,1211.18 2016.35,1211.18 2016.94,1211.18 2017.53,1211.18 2018.11,1211.18 2018.7,1211.18 2019.28,1211.18 2019.87,1211.18 2020.46,1211.18 2021.04,1211.18 2021.63,1211.18 2022.22,1211.18 2022.8,1211.18 2023.39,1211.18 2023.98,1211.18 2024.56,1211.18 2025.15,1211.18 2025.73,1211.18 2026.32,1211.18 2026.91,1211.18 2027.49,1211.18 2028.08,1211.18 2028.67,1211.18 2029.25,1211.18 2029.84,1211.18 2030.43,1211.18 2031.01,1211.18 2031.6,1211.18 2032.19,1211.18 2032.77,1211.18 2033.36,1211.18 2033.94,1211.18 2034.53,1211.18 2035.12,1211.18 2035.7,1211.18 2036.29,1211.18 2036.88,1211.18 2037.46,1211.18 2038.05,1211.18 2038.64,1211.18 2039.22,1211.18 2039.81,1211.18 2040.4,1211.18 2040.98,1211.18 2041.57,1211.18 2042.15,1211.18 2042.74,1211.18 2043.33,1211.18 2043.91,1211.18 2044.5,1211.18 2045.09,1211.18 2045.67,1211.18 2046.26,1211.18 2046.85,1211.18 2047.43,1211.18 2048.02,1211.18 2048.6,1211.18 2049.19,1211.18 2049.78,1211.18 2050.36,1211.18 2050.95,1211.18 2051.54,1211.18 2052.12,1211.18 2052.71,1211.18 2053.3,1211.18 2053.88,1211.18 2054.47,1211.18 2055.06,1211.18 2055.64,1211.18 2056.23,1211.18 2056.81,1211.18 2057.4,1211.18 2057.99,1211.18 2058.57,1211.18 2059.16,1211.18 2059.75,1211.18 2060.33,1211.18 2060.92,1211.18 2061.51,1211.18 2062.09,1211.18 2062.68,1211.18 2063.27,1211.18 2063.85,1211.18 2064.44,1211.18 2065.02,1211.18 2065.61,1211.18 2066.2,1211.18 2066.78,1211.18 2067.37,1211.18 2067.96,1211.18 2068.54,1211.18 2069.13,1211.18 2069.72,1211.18 2070.3,1211.18 2070.89,1211.18 2071.48,1211.18 2072.06,1211.18 2072.65,1211.18 2073.23,1211.18 2073.82,1211.18 2074.41,1211.18 2074.99,1211.18 2075.58,1211.18 2076.17,1211.18 2076.75,1211.18 2077.34,1211.18 2077.93,1211.18 2078.51,1211.18 2079.1,1211.18 2079.68,1211.18 2080.27,1211.18 2080.86,1211.18 2081.44,1211.18 2082.03,1211.18 2082.62,1211.18 2083.2,1211.18 2083.79,1211.18 2084.38,1211.18 2084.96,1211.18 2085.55,1211.18 2086.14,1211.18 2086.72,1211.18 2087.31,1211.18 2087.89,1211.18 2088.48,1211.18 2089.07,1211.18 2089.65,1211.18 2090.24,1211.18 2090.83,1211.18 2091.41,1211.18 2092,1211.18 2092.59,1211.18 2093.17,1211.18 2093.76,1211.18 2094.35,1211.18 2094.93,1211.18 2095.52,1211.18 2096.1,1211.18 2096.69,1211.18 2097.28,1211.18 2097.86,1211.18 2098.45,1211.18 2099.04,1211.18 2099.62,1211.18 2100.21,1211.18 2100.8,1211.18 2101.38,1211.18 2101.97,1211.18 2102.55,1211.18 2103.14,1211.18 2103.73,1211.18 2104.31,1211.18 2104.9,1211.18 2105.49,1211.18 2106.07,1211.18 2106.66,1211.18 2107.25,1211.18 2107.83,1211.18 2108.42,1211.18 2109.01,1211.18 2109.59,1211.18 2110.18,1211.18 2110.76,1211.18 2111.35,1211.18 2111.94,1211.18 2112.52,1211.18 2113.11,1211.18 2113.7,1211.18 2114.28,1211.18 2114.87,1211.18 2115.46,1211.18 2116.04,1211.18 2116.63,1211.18 2117.22,1211.18 2117.8,1211.18 2118.39,1211.18 2118.97,1211.18 2119.56,1211.18 2120.15,1211.18 2120.73,1211.18 2121.32,1211.18 2121.91,1211.18 2122.49,1211.18 2123.08,1211.18 2123.67,1211.18 2124.25,1211.18 2124.84,1211.18 2125.42,1211.18 2126.01,1211.18 2126.6,1211.18 2127.18,1211.18 2127.77,1211.18 2128.36,1211.18 2128.94,1211.18 2129.53,1211.18 2130.12,1211.18 2130.7,1211.18 2131.29,1211.18 2131.88,1211.18 2132.46,1211.18 2133.05,1211.18 2133.63,1211.18 2134.22,1211.18 2134.81,1211.18 2135.39,1211.18 2135.98,1211.18 2136.57,1211.18 2137.15,1211.18 2137.74,1211.18 2138.33,1211.18 2138.91,1211.18 2139.5,1211.18 2140.09,1211.18 2140.67,1211.18 2141.26,1211.18 2141.84,1211.18 2142.43,1211.18 2143.02,1211.18 2143.6,1211.18 2144.19,1211.18 2144.78,1211.18 2145.36,1211.18 2145.95,1211.18 2146.54,1211.18 2147.12,1211.18 2147.71,1211.18 2148.3,1211.18 2148.88,1211.18 2149.47,1211.18 2150.05,1211.18 2150.64,1211.18 2151.23,1211.18 2151.81,1211.18 2152.4,1211.18 2152.99,1211.18 2153.57,1211.18 2154.16,1211.18 2154.75,1211.18 2155.33,1211.18 2155.92,1211.18 2156.5,1211.18 2157.09,1211.18 2157.68,1211.18 2158.26,1211.18 \"/>\n<path clip-path=\"url(#clip632)\" d=\"M986.025 1210.94 L986.612 1210.94 L987.198 1210.94 L987.785 1210.94 L988.371 1210.94 L988.957 1210.94 L989.544 1210.94 L990.13 1210.94 L990.717 1210.94 L991.303 1210.94 L991.889 1210.94 L992.476 1210.94 L993.062 1210.94 L993.649 1210.94 L994.235 1210.94 L994.822 1210.94 L995.408 1210.94 L995.994 1210.94 L996.581 1210.94 L997.167 1210.94 L997.754 1210.94 L998.34 1210.94 L998.926 1210.94 L999.513 1210.94 L1000.1 1210.94 L1000.69 1210.94 L1001.27 1210.94 L1001.86 1210.94 L1002.44 1210.94 L1003.03 1210.94 L1003.62 1210.94 L1004.2 1210.94 L1004.79 1210.94 L1005.38 1210.94 L1005.96 1210.94 L1006.55 1210.94 L1007.14 1210.94 L1007.72 1210.94 L1008.31 1210.94 L1008.9 1210.94 L1009.48 1210.94 L1010.07 1210.94 L1010.65 1210.94 L1011.24 1210.94 L1011.83 1210.94 L1012.41 1210.94 L1013 1210.94 L1013.59 1210.94 L1014.17 1210.94 L1014.76 1210.94 L1015.35 1210.94 L1015.93 1210.94 L1016.52 1210.94 L1017.11 1210.94 L1017.69 1210.94 L1018.28 1210.94 L1018.86 1210.94 L1019.45 1210.94 L1020.04 1210.94 L1020.62 1210.94 L1021.21 1210.94 L1021.8 1210.94 L1022.38 1210.94 L1022.97 1210.94 L1023.56 1210.94 L1024.14 1210.94 L1024.73 1210.94 L1025.32 1210.94 L1025.9 1210.94 L1026.49 1210.94 L1027.07 1210.94 L1027.66 1210.94 L1028.25 1210.94 L1028.83 1210.94 L1029.42 1210.94 L1030.01 1210.94 L1030.59 1210.94 L1031.18 1210.94 L1031.77 1210.94 L1032.35 1210.94 L1032.94 1210.94 L1033.52 1210.94 L1034.11 1210.94 L1034.7 1210.94 L1035.28 1210.94 L1035.87 1210.94 L1036.46 1210.94 L1037.04 1210.94 L1037.63 1210.94 L1038.22 1210.94 L1038.8 1210.94 L1039.39 1210.94 L1039.98 1210.94 L1040.56 1210.94 L1041.15 1210.94 L1041.73 1210.94 L1042.32 1210.94 L1042.91 1210.94 L1043.49 1210.94 L1044.08 1210.94 L1044.67 1210.94 L1045.25 1210.94 L1045.84 1210.94 L1046.43 1210.94 L1047.01 1210.94 L1047.6 1210.94 L1048.19 1210.94 L1048.77 1210.94 L1049.36 1210.94 L1049.94 1210.94 L1050.53 1210.94 L1051.12 1210.94 L1051.7 1210.94 L1052.29 1210.94 L1052.88 1210.94 L1053.46 1210.94 L1054.05 1210.94 L1054.64 1210.94 L1055.22 1210.94 L1055.81 1210.94 L1056.39 1210.94 L1056.98 1210.94 L1057.57 1210.94 L1058.15 1210.94 L1058.74 1210.94 L1059.33 1210.94 L1059.91 1210.94 L1060.5 1210.94 L1061.09 1210.94 L1061.67 1210.94 L1062.26 1210.94 L1062.85 1210.94 L1063.43 1210.94 L1064.02 1210.94 L1064.6 1210.94 L1065.19 1210.94 L1065.78 1210.94 L1066.36 1210.94 L1066.95 1210.94 L1067.54 1210.94 L1068.12 1210.94 L1068.71 1210.94 L1069.3 1210.94 L1069.88 1210.94 L1070.47 1210.94 L1071.06 1210.94 L1071.64 1210.94 L1072.23 1210.94 L1072.81 1210.94 L1073.4 1210.94 L1073.99 1210.94 L1074.57 1210.94 L1075.16 1210.94 L1075.75 1210.94 L1076.33 1210.94 L1076.92 1210.94 L1077.51 1210.94 L1078.09 1210.94 L1078.68 1210.94 L1079.26 1210.94 L1079.85 1210.94 L1080.44 1210.94 L1081.02 1210.94 L1081.61 1210.94 L1082.2 1210.94 L1082.78 1210.94 L1083.37 1210.94 L1083.96 1210.94 L1084.54 1210.94 L1085.13 1210.94 L1085.72 1210.94 L1086.3 1210.94 L1086.89 1210.94 L1087.47 1210.94 L1088.06 1210.94 L1088.65 1210.94 L1089.23 1210.94 L1089.82 1210.94 L1090.41 1210.94 L1090.99 1210.94 L1091.58 1210.94 L1092.17 1210.94 L1092.75 1210.94 L1093.34 1210.94 L1093.93 1210.94 L1094.51 1210.94 L1095.1 1210.94 L1095.68 1210.94 L1096.27 1210.94 L1096.86 1210.94 L1097.44 1210.94 L1098.03 1210.94 L1098.62 1210.94 L1099.2 1210.94 L1099.79 1210.94 L1100.38 1210.94 L1100.96 1210.94 L1101.55 1210.94 L1102.14 1210.94 L1102.72 1210.94 L1103.31 1210.94 L1103.89 1210.94 L1104.48 1210.94 L1105.07 1210.94 L1105.65 1210.94 L1106.24 1210.94 L1106.83 1210.94 L1107.41 1210.94 L1108 1210.94 L1108.59 1210.94 L1109.17 1210.94 L1109.76 1210.94 L1110.34 1210.94 L1110.93 1210.94 L1111.52 1210.94 L1112.1 1210.94 L1112.69 1210.94 L1113.28 1210.94 L1113.86 1210.94 L1114.45 1210.94 L1115.04 1210.94 L1115.62 1210.94 L1116.21 1210.94 L1116.8 1210.94 L1117.38 1210.94 L1117.97 1210.94 L1118.55 1210.94 L1119.14 1210.94 L1119.73 1210.94 L1120.31 1210.94 L1120.9 1210.94 L1121.49 1210.94 L1122.07 1210.94 L1122.66 1210.94 L1123.25 1210.94 L1123.83 1210.94 L1124.42 1210.94 L1125.01 1210.94 L1125.59 1210.94 L1126.18 1210.94 L1126.76 1210.94 L1127.35 1210.94 L1127.94 1210.94 L1128.52 1210.94 L1129.11 1210.94 L1129.7 1210.94 L1130.28 1210.94 L1130.87 1210.94 L1131.46 1210.94 L1132.04 1210.94 L1132.63 1210.94 L1133.21 1210.94 L1133.8 1210.94 L1134.39 1210.94 L1134.97 1210.94 L1135.56 1210.94 L1136.15 1210.94 L1136.73 1210.94 L1137.32 1210.94 L1137.91 1210.94 L1138.49 1210.94 L1139.08 1210.94 L1139.67 1210.94 L1140.25 1210.94 L1140.84 1210.94 L1141.42 1210.94 L1142.01 1210.94 L1142.6 1210.94 L1143.18 1210.94 L1143.77 1210.94 L1144.36 1210.94 L1144.94 1210.94 L1145.53 1210.94 L1146.12 1210.94 L1146.7 1210.94 L1147.29 1210.94 L1147.88 1210.94 L1148.46 1210.94 L1149.05 1210.94 L1149.63 1210.94 L1150.22 1210.94 L1150.81 1210.94 L1151.39 1210.94 L1151.98 1210.94 L1152.57 1210.94 L1153.15 1210.94 L1153.74 1210.94 L1154.33 1210.94 L1154.91 1210.94 L1155.5 1210.94 L1156.09 1210.94 L1156.67 1210.94 L1157.26 1210.94 L1157.84 1210.94 L1158.43 1210.94 L1159.02 1210.94 L1159.6 1210.94 L1160.19 1210.94 L1160.78 1210.94 L1161.36 1210.94 L1161.95 1210.94 L1162.54 1210.94 L1163.12 1210.94 L1163.71 1210.94 L1164.29 1210.94 L1164.88 1210.94 L1165.47 1210.94 L1166.05 1210.94 L1166.64 1210.94 L1167.23 1210.94 L1167.81 1210.94 L1168.4 1210.94 L1168.99 1210.94 L1169.57 1210.94 L1170.16 1210.94 L1170.75 1210.94 L1171.33 1210.94 L1171.92 1210.94 L1172.5 1210.94 L1173.09 1210.94 L1173.68 1210.94 L1174.26 1210.94 L1174.85 1210.94 L1175.44 1210.94 L1176.02 1210.94 L1176.61 1210.94 L1177.2 1210.94 L1177.78 1210.94 L1178.37 1210.94 L1178.96 1210.94 L1179.54 1210.94 L1180.13 1210.94 L1180.71 1210.94 L1181.3 1210.94 L1181.89 1210.94 L1182.47 1210.94 L1183.06 1210.94 L1183.65 1210.94 L1184.23 1210.94 L1184.82 1210.94 L1185.41 1210.94 L1185.99 1210.94 L1186.58 1210.94 L1187.16 1210.94 L1187.75 1210.94 L1188.34 1210.94 L1188.92 1210.94 L1189.51 1210.94 L1190.1 1210.94 L1190.68 1210.94 L1191.27 1210.94 L1191.86 1210.94 L1192.44 1210.94 L1193.03 1210.94 L1193.62 1210.94 L1194.2 1210.94 L1194.79 1210.94 L1195.37 1210.94 L1195.96 1210.94 L1196.55 1210.94 L1197.13 1210.94 L1197.72 1210.94 L1198.31 1210.94 L1198.89 1210.94 L1199.48 1210.94 L1200.07 1210.94 L1200.65 1210.94 L1201.24 1210.94 L1201.83 1210.94 L1202.41 1210.94 L1203 1210.94 L1203.58 1210.94 L1204.17 1210.94 L1204.76 1210.94 L1205.34 1210.94 L1205.93 1210.94 L1206.52 1210.94 L1207.1 1210.94 L1207.69 1210.94 L1208.28 1210.94 L1208.86 1210.94 L1209.45 1210.94 L1210.03 1210.94 L1210.62 1210.94 L1211.21 1210.94 L1211.79 1210.94 L1212.38 1210.94 L1212.97 1210.94 L1213.55 1210.94 L1214.14 1210.94 L1214.73 1210.94 L1215.31 1210.94 L1215.9 1210.94 L1216.49 1210.94 L1217.07 1210.94 L1217.66 1210.94 L1218.24 1210.94 L1218.83 1210.94 L1219.42 1210.94 L1220 1210.94 L1220.59 1210.94 L1221.18 1210.94 L1221.76 1210.94 L1222.35 1210.94 L1222.94 1210.94 L1223.52 1210.94 L1224.11 1210.94 L1224.7 1210.94 L1225.28 1210.94 L1225.87 1210.94 L1226.45 1210.94 L1227.04 1210.94 L1227.63 1210.94 L1228.21 1210.94 L1228.8 1210.94 L1229.39 1210.94 L1229.97 1210.94 L1230.56 1210.94 L1231.15 1210.94 L1231.73 1210.94 L1232.32 1210.94 L1232.91 1210.94 L1233.49 1210.94 L1234.08 1210.94 L1234.66 1210.94 L1235.25 1210.94 L1235.84 1210.94 L1236.42 1210.94 L1237.01 1210.94 L1237.6 1210.94 L1238.18 1210.94 L1238.77 1210.94 L1239.36 1210.94 L1239.94 1210.94 L1240.53 1210.94 L1241.11 1210.94 L1241.7 1210.94 L1242.29 1210.94 L1242.87 1210.94 L1243.46 1210.94 L1244.05 1210.94 L1244.63 1210.94 L1245.22 1210.94 L1245.81 1210.94 L1246.39 1210.94 L1246.98 1210.94 L1247.57 1210.94 L1248.15 1210.94 L1248.74 1210.94 L1249.32 1210.94 L1249.91 1210.94 L1250.5 1210.94 L1251.08 1210.94 L1251.67 1210.94 L1252.26 1210.94 L1252.84 1210.94 L1253.43 1210.94 L1254.02 1210.94 L1254.6 1210.94 L1255.19 1210.94 L1255.78 1210.94 L1256.36 1210.94 L1256.95 1210.94 L1257.53 1210.94 L1258.12 1210.94 L1258.71 1210.94 L1259.29 1210.94 L1259.88 1210.94 L1260.47 1210.94 L1261.05 1210.94 L1261.64 1210.94 L1262.23 1210.94 L1262.81 1210.94 L1263.4 1210.94 L1263.98 1210.94 L1264.57 1210.94 L1265.16 1210.94 L1265.74 1210.94 L1266.33 1210.94 L1266.92 1210.94 L1267.5 1210.94 L1268.09 1210.94 L1268.68 1210.94 L1269.26 1210.94 L1269.85 1210.94 L1270.44 1210.94 L1271.02 1210.94 L1271.61 1210.94 L1272.19 1210.94 L1272.78 1210.94 L1273.37 1210.94 L1273.95 1210.94 L1274.54 1210.94 L1275.13 1210.94 L1275.71 1210.94 L1276.3 1210.94 L1276.89 1210.94 L1277.47 1210.94 L1278.06 1210.94 L1278.65 1210.94 L1279.23 1210.94 L1279.82 1210.94 L1280.4 1210.94 L1280.99 1210.94 L1281.58 1210.94 L1282.16 1210.94 L1282.75 1210.94 L1283.34 1210.94 L1283.92 1210.94 L1284.51 1210.94 L1285.1 1210.94 L1285.68 1210.94 L1286.27 1210.94 L1286.86 1210.94 L1287.44 1210.94 L1288.03 1210.94 L1288.61 1210.94 L1289.2 1210.94 L1289.79 1210.94 L1290.37 1210.94 L1290.96 1210.94 L1291.55 1210.94 L1292.13 1210.94 L1292.72 1210.94 L1293.31 1210.94 L1293.89 1210.94 L1294.48 1210.94 L1295.06 1210.94 L1295.65 1210.94 L1296.24 1210.94 L1296.82 1210.94 L1297.41 1210.94 L1298 1210.94 L1298.58 1210.94 L1299.17 1210.94 L1299.76 1210.94 L1300.34 1210.94 L1300.93 1210.94 L1301.52 1210.94 L1302.1 1210.94 L1302.69 1210.94 L1303.27 1210.94 L1303.86 1210.94 L1304.45 1210.94 L1305.03 1210.94 L1305.62 1210.94 L1306.21 1210.94 L1306.79 1210.94 L1307.38 1210.94 L1307.97 1210.94 L1308.55 1210.94 L1309.14 1210.94 L1309.73 1210.94 L1310.31 1210.94 L1310.9 1210.94 L1311.48 1210.94 L1312.07 1210.94 L1312.66 1210.94 L1313.24 1210.94 L1313.83 1210.94 L1314.42 1210.94 L1315 1210.94 L1315.59 1210.94 L1316.18 1210.94 L1316.76 1210.94 L1317.35 1210.94 L1317.93 1210.94 L1318.52 1210.94 L1319.11 1210.94 L1319.69 1210.94 L1320.28 1210.94 L1320.87 1210.94 L1321.45 1210.94 L1322.04 1210.94 L1322.63 1210.94 L1323.21 1210.94 L1323.8 1210.94 L1324.39 1210.94 L1324.97 1210.94 L1325.56 1210.94 L1326.14 1210.94 L1326.73 1210.94 L1327.32 1210.94 L1327.9 1210.94 L1328.49 1210.94 L1329.08 1210.94 L1329.66 1210.94 L1330.25 1210.94 L1330.84 1210.94 L1331.42 1210.94 L1332.01 1210.94 L1332.6 1210.94 L1333.18 1210.94 L1333.77 1210.94 L1334.35 1210.94 L1334.94 1210.94 L1335.53 1210.94 L1336.11 1210.94 L1336.7 1210.94 L1337.29 1210.94 L1337.87 1210.94 L1338.46 1210.94 L1339.05 1210.94 L1339.63 1210.94 L1340.22 1210.94 L1340.8 1210.94 L1341.39 1210.94 L1341.98 1210.94 L1342.56 1210.94 L1343.15 1210.94 L1343.74 1210.94 L1344.32 1210.94 L1344.91 1210.94 L1345.5 1210.94 L1346.08 1210.94 L1346.67 1210.94 L1347.26 1210.94 L1347.84 1210.94 L1348.43 1210.94 L1349.01 1210.94 L1349.6 1210.94 L1350.19 1210.94 L1350.77 1210.94 L1351.36 1210.94 L1351.95 1210.94 L1352.53 1210.94 L1353.12 1210.94 L1353.71 1210.94 L1354.29 1210.94 L1354.88 1210.94 L1355.47 1210.94 L1356.05 1210.94 L1356.64 1210.94 L1357.22 1210.94 L1357.81 1210.94 L1358.4 1210.94 L1358.98 1210.94 L1359.57 1210.94 L1360.16 1210.94 L1360.74 1210.94 L1361.33 1210.94 L1361.92 1210.94 L1362.5 1210.94 L1363.09 1210.94 L1363.68 1210.94 L1364.26 1210.94 L1364.85 1210.94 L1365.43 1210.94 L1366.02 1210.94 L1366.61 1210.94 L1367.19 1210.94 L1367.78 1210.94 L1368.37 1210.94 L1368.95 1210.94 L1369.54 1210.94 L1370.13 1210.94 L1370.71 1210.94 L1371.3 1210.94 L1371.88 1210.94 L1372.47 1210.94 L1373.06 1210.94 L1373.64 1210.94 L1374.23 1210.94 L1374.82 1210.94 L1375.4 1210.94 L1375.99 1210.94 L1376.58 1210.94 L1377.16 1210.94 L1377.75 1210.94 L1378.34 1210.94 L1378.92 1210.94 L1379.51 1210.94 L1380.09 1210.94 L1380.68 1210.94 L1381.27 1210.94 L1381.85 1210.94 L1382.44 1210.94 L1383.03 1210.94 L1383.61 1210.94 L1384.2 1210.94 L1384.79 1210.94 L1385.37 1210.94 L1385.96 1210.94 L1386.55 1210.94 L1387.13 1210.94 L1387.72 1210.94 L1388.3 1210.94 L1388.89 1210.94 L1389.48 1210.94 L1390.06 1210.94 L1390.65 1210.94 L1391.24 1210.94 L1391.82 1210.94 L1392.41 1210.94 L1393 1210.94 L1393.58 1210.94 L1394.17 1210.94 L1394.75 1210.94 L1395.34 1210.94 L1395.93 1210.94 L1396.51 1210.94 L1397.1 1210.94 L1397.69 1210.94 L1398.27 1210.94 L1398.86 1210.94 L1399.45 1210.94 L1400.03 1210.94 L1400.62 1210.94 L1401.21 1210.94 L1401.79 1210.94 L1402.38 1210.94 L1402.96 1210.94 L1403.55 1210.94 L1404.14 1210.94 L1404.72 1210.94 L1405.31 1210.94 L1405.9 1210.94 L1406.48 1210.94 L1407.07 1210.94 L1407.66 1210.94 L1408.24 1210.94 L1408.83 1210.94 L1409.42 1210.94 L1410 1210.94 L1410.59 1210.94 L1411.17 1210.94 L1411.76 1210.94 L1412.35 1210.94 L1412.93 1210.94 L1413.52 1210.94 L1414.11 1210.94 L1414.69 1210.94 L1415.28 1210.94 L1415.87 1210.94 L1416.45 1210.94 L1417.04 1210.94 L1417.63 1210.94 L1418.21 1210.94 L1418.8 1210.94 L1419.38 1210.94 L1419.97 1210.94 L1420.56 1210.94 L1421.14 1210.94 L1421.73 1210.94 L1422.32 1210.94 L1422.9 1210.94 L1423.49 1210.94 L1424.08 1210.94 L1424.66 1210.94 L1425.25 1210.94 L1425.83 1210.94 L1426.42 1210.94 L1427.01 1210.94 L1427.59 1210.94 L1428.18 1210.94 L1428.77 1210.94 L1429.35 1210.94 L1429.94 1210.94 L1430.53 1210.94 L1431.11 1210.94 L1431.7 1210.94 L1432.29 1210.94 L1432.87 1210.94 L1433.46 1210.94 L1434.04 1210.94 L1434.63 1210.94 L1435.22 1210.94 L1435.8 1210.94 L1436.39 1210.94 L1436.98 1210.94 L1437.56 1210.94 L1438.15 1210.94 L1438.74 1210.94 L1439.32 1210.94 L1439.91 1210.94 L1440.5 1210.94 L1441.08 1210.94 L1441.67 1210.94 L1442.25 1210.94 L1442.84 1210.94 L1443.43 1210.94 L1444.01 1210.94 L1444.6 1210.94 L1445.19 1210.94 L1445.77 1210.94 L1446.36 1210.94 L1446.95 1210.94 L1447.53 1210.94 L1448.12 1210.94 L1448.7 1210.94 L1449.29 1210.94 L1449.88 1210.94 L1450.46 1210.94 L1451.05 1210.94 L1451.64 1210.94 L1452.22 1210.94 L1452.81 1210.94 L1453.4 1210.94 L1453.98 1210.94 L1454.57 1210.94 L1455.16 1210.94 L1455.74 1210.94 L1456.33 1210.94 L1456.91 1210.94 L1457.5 1210.94 L1458.09 1210.94 L1458.67 1210.94 L1459.26 1210.94 L1459.85 1210.94 L1460.43 1210.94 L1461.02 1210.94 L1461.61 1210.94 L1462.19 1210.94 L1462.78 1210.94 L1463.37 1210.94 L1463.95 1210.94 L1464.54 1210.94 L1465.12 1210.94 L1465.71 1210.94 L1466.3 1210.94 L1466.88 1210.94 L1467.47 1210.94 L1468.06 1210.94 L1468.64 1210.94 L1469.23 1210.94 L1469.82 1210.94 L1470.4 1210.94 L1470.99 1210.94 L1471.57 1210.94 L1472.16 1210.94 L1472.75 1210.94 L1473.33 1210.94 L1473.92 1210.94 L1474.51 1210.94 L1475.09 1210.94 L1475.68 1210.94 L1476.27 1210.94 L1476.85 1210.94 L1477.44 1210.94 L1478.03 1210.94 L1478.61 1210.94 L1479.2 1210.94 L1479.78 1210.94 L1480.37 1210.94 L1480.96 1210.94 L1481.54 1210.94 L1482.13 1210.94 L1482.72 1210.94 L1483.3 1210.94 L1483.89 1210.94 L1484.48 1210.94 L1485.06 1210.94 L1485.65 1210.94 L1486.24 1210.94 L1486.82 1210.94 L1487.41 1210.94 L1487.99 1210.94 L1488.58 1210.94 L1489.17 1210.94 L1489.75 1210.94 L1490.34 1210.94 L1490.93 1210.94 L1491.51 1210.94 L1492.1 1210.94 L1492.69 1210.94 L1493.27 1210.94 L1493.86 1210.94 L1494.45 1210.94 L1495.03 1210.94 L1495.62 1210.94 L1496.2 1210.94 L1496.79 1210.94 L1497.38 1210.94 L1497.96 1210.94 L1498.55 1210.94 L1499.14 1210.94 L1499.72 1210.94 L1500.31 1210.94 L1500.9 1210.94 L1501.48 1210.94 L1502.07 1210.94 L1502.65 1210.94 L1503.24 1210.94 L1503.83 1210.94 L1504.41 1210.94 L1505 1210.94 L1505.59 1210.94 L1506.17 1210.94 L1506.76 1210.94 L1507.35 1210.94 L1507.93 1210.94 L1508.52 1210.94 L1509.11 1210.94 L1509.69 1210.94 L1510.28 1210.94 L1510.86 1210.94 L1511.45 1210.94 L1512.04 1210.94 L1512.62 1210.94 L1513.21 1210.94 L1513.8 1210.94 L1514.38 1210.94 L1514.97 1210.94 L1515.56 1210.94 L1516.14 1210.94 L1516.73 1210.94 L1517.32 1210.94 L1517.9 1210.94 L1518.49 1210.94 L1519.07 1210.94 L1519.66 1210.94 L1520.25 1210.94 L1520.83 1210.94 L1521.42 1210.94 L1522.01 1210.94 L1522.59 1210.94 L1523.18 1210.94 L1523.77 1210.94 L1524.35 1210.94 L1524.94 1210.94 L1525.52 1210.94 L1526.11 1210.94 L1526.7 1210.94 L1527.28 1210.94 L1527.87 1210.94 L1528.46 1210.94 L1529.04 1210.94 L1529.63 1210.94 L1530.22 1210.94 L1530.8 1210.94 L1531.39 1210.94 L1531.98 1210.94 L1532.56 1210.94 L1533.15 1210.94 L1533.73 1210.94 L1534.32 1210.94 L1534.91 1210.94 L1535.49 1210.94 L1536.08 1210.94 L1536.67 1210.94 L1537.25 1210.94 L1537.84 1210.94 L1538.43 1210.94 L1539.01 1210.94 L1539.6 1210.94 L1540.19 1210.94 L1540.77 1210.94 L1541.36 1210.94 L1541.94 1210.94 L1542.53 1210.94 L1543.12 1210.94 L1543.7 1210.94 L1544.29 1210.94 L1544.88 1210.94 L1545.46 1210.94 L1546.05 1210.94 L1546.64 1210.94 L1547.22 1210.94 L1547.81 1210.94 L1548.4 1210.94 L1548.98 1210.94 L1549.57 1210.94 L1550.15 1210.94 L1550.74 1210.94 L1551.33 1210.94 L1551.91 1210.94 L1552.5 1210.94 L1553.09 1210.94 L1553.67 1210.94 L1554.26 1210.94 L1554.85 1210.94 L1555.43 1210.94 L1556.02 1210.94 L1556.6 1210.94 L1557.19 1210.94 L1557.78 1210.94 L1558.36 1210.94 L1558.95 1210.94 L1559.54 1210.94 L1560.12 1210.94 L1560.71 1210.94 L1561.3 1210.94 L1561.88 1210.94 L1562.47 1210.94 L1563.06 1210.94 L1563.64 1210.94 L1564.23 1210.94 L1564.81 1210.94 L1565.4 1210.94 L1565.99 1210.94 L1566.57 1210.94 L1567.16 1210.94 L1567.75 1210.94 L1568.33 1210.94 L1568.92 1210.94 L1569.51 1210.94 L1570.09 1210.94 L1570.68 1210.94 L1571.27 1210.94 L1571.85 1210.94 L1572.44 1210.94 L1573.02 1210.94 L1573.61 1210.94 L1574.2 1210.94 L1574.78 1210.94 L1575.37 1210.94 L1575.96 1210.94 L1576.54 1210.94 L1577.13 1210.94 L1577.72 1210.94 L1578.3 1210.94 L1578.89 1210.94 L1579.47 1210.94 L1580.06 1210.94 L1580.65 1210.94 L1581.23 1210.94 L1581.82 1210.94 L1582.41 1210.94 L1582.99 1210.94 L1583.58 1210.94 L1584.17 1210.94 L1584.75 1210.94 L1585.34 1210.94 L1585.93 1210.94 L1586.51 1210.94 L1587.1 1210.94 L1587.68 1210.94 L1588.27 1210.94 L1588.86 1210.94 L1589.44 1210.94 L1590.03 1210.94 L1590.62 1210.94 L1591.2 1210.94 L1591.79 1210.94 L1592.38 1210.94 L1592.96 1210.94 L1593.55 1210.94 L1594.14 1210.94 L1594.72 1210.94 L1595.31 1210.94 L1595.89 1210.94 L1596.48 1210.94 L1597.07 1210.94 L1597.65 1210.94 L1598.24 1210.94 L1598.83 1210.94 L1599.41 1210.94 L1600 1210.94 L1600.59 1210.94 L1601.17 1210.94 L1601.76 1210.94 L1602.34 1210.94 L1602.93 1210.94 L1603.52 1210.94 L1604.1 1210.94 L1604.69 1210.94 L1605.28 1210.94 L1605.86 1210.94 L1606.45 1210.94 L1607.04 1210.94 L1607.62 1210.94 L1608.21 1210.94 L1608.8 1210.94 L1609.38 1210.94 L1609.97 1210.94 L1610.55 1210.94 L1611.14 1210.94 L1611.73 1210.94 L1612.31 1210.94 L1612.9 1210.94 L1613.49 1210.94 L1614.07 1210.94 L1614.66 1210.94 L1615.25 1210.94 L1615.83 1210.94 L1616.42 1210.94 L1617.01 1210.94 L1617.59 1210.94 L1618.18 1210.94 L1618.76 1210.94 L1619.35 1210.94 L1619.94 1210.94 L1620.52 1210.94 L1621.11 1210.94 L1621.7 1210.94 L1622.28 1210.94 L1622.87 1210.94 L1623.46 1210.94 L1624.04 1210.94 L1624.63 1210.94 L1625.22 1210.94 L1625.8 1210.94 L1626.39 1210.94 L1626.97 1210.94 L1627.56 1210.94 L1628.15 1210.94 L1628.73 1210.94 L1629.32 1210.94 L1629.91 1210.94 L1630.49 1210.94 L1631.08 1210.94 L1631.67 1210.94 L1632.25 1210.94 L1632.84 1210.94 L1633.42 1210.94 L1634.01 1210.94 L1634.6 1210.94 L1635.18 1210.94 L1635.77 1210.94 L1636.36 1210.94 L1636.94 1210.94 L1637.53 1210.94 L1638.12 1210.94 L1638.7 1210.94 L1639.29 1210.94 L1639.88 1210.94 L1640.46 1210.94 L1641.05 1210.94 L1641.63 1210.94 L1642.22 1210.94 L1642.81 1210.94 L1643.39 1210.94 L1643.98 1210.94 L1644.57 1210.94 L1645.15 1210.94 L1645.74 1210.94 L1646.33 1210.94 L1646.91 1210.94 L1647.5 1210.94 L1648.09 1210.94 L1648.67 1210.94 L1649.26 1210.94 L1649.84 1210.94 L1650.43 1210.94 L1651.02 1210.94 L1651.6 1210.94 L1652.19 1210.94 L1652.78 1210.94 L1653.36 1210.94 L1653.95 1210.94 L1654.54 1210.94 L1655.12 1210.94 L1655.71 1210.94 L1656.29 1210.94 L1656.88 1210.94 L1657.47 1210.94 L1658.05 1210.94 L1658.64 1210.94 L1659.23 1210.94 L1659.81 1210.94 L1660.4 1210.94 L1660.99 1210.94 L1661.57 1210.94 L1662.16 1210.94 L1662.75 1210.94 L1663.33 1210.94 L1663.92 1210.94 L1664.5 1210.94 L1665.09 1210.94 L1665.68 1210.94 L1666.26 1210.94 L1666.85 1210.94 L1667.44 1210.94 L1668.02 1210.94 L1668.61 1210.94 L1669.2 1210.94 L1669.78 1210.94 L1670.37 1210.94 L1670.96 1210.94 L1671.54 1210.94 L1672.13 1210.94 L1672.71 1210.94 L1673.3 1210.94 L1673.89 1210.94 L1674.47 1210.94 L1675.06 1210.94 L1675.65 1210.94 L1676.23 1210.94 L1676.82 1210.94 L1677.41 1210.94 L1677.99 1210.94 L1678.58 1210.94 L1679.17 1210.94 L1679.75 1210.94 L1680.34 1210.94 L1680.92 1210.94 L1681.51 1210.94 L1682.1 1210.94 L1682.68 1210.94 L1683.27 1210.94 L1683.86 1210.94 L1684.44 1210.94 L1685.03 1210.94 L1685.62 1210.94 L1686.2 1210.94 L1686.79 1210.94 L1687.37 1210.94 L1687.96 1210.94 L1688.55 1210.94 L1689.13 1210.94 L1689.72 1210.94 L1690.31 1210.94 L1690.89 1210.94 L1691.48 1210.94 L1692.07 1210.94 L1692.65 1210.94 L1693.24 1210.94 L1693.83 1210.94 L1694.41 1210.94 L1695 1210.94 L1695.58 1210.94 L1696.17 1210.94 L1696.76 1210.94 L1697.34 1210.94 L1697.93 1210.94 L1698.52 1210.94 L1699.1 1210.94 L1699.69 1210.94 L1700.28 1210.94 L1700.86 1210.94 L1701.45 1210.94 L1702.04 1210.94 L1702.62 1210.94 L1703.21 1210.94 L1703.79 1210.94 L1704.38 1210.94 L1704.97 1210.94 L1705.55 1210.94 L1706.14 1210.94 L1706.73 1210.94 L1707.31 1210.94 L1707.9 1210.94 L1708.49 1210.94 L1709.07 1210.94 L1709.66 1210.94 L1710.24 1210.94 L1710.83 1210.94 L1711.42 1210.94 L1712 1210.94 L1712.59 1210.94 L1713.18 1210.94 L1713.76 1210.94 L1714.35 1210.94 L1714.94 1210.94 L1715.52 1210.94 L1716.11 1210.94 L1716.7 1210.94 L1717.28 1210.94 L1717.87 1210.94 L1718.45 1210.94 L1719.04 1210.94 L1719.63 1210.94 L1720.21 1210.94 L1720.8 1210.94 L1721.39 1210.94 L1721.97 1210.94 L1722.56 1210.94 L1723.15 1210.94 L1723.73 1210.94 L1724.32 1210.94 L1724.91 1210.94 L1725.49 1210.94 L1726.08 1210.94 L1726.66 1210.94 L1727.25 1210.94 L1727.84 1210.94 L1728.42 1210.94 L1729.01 1210.94 L1729.6 1210.94 L1730.18 1210.94 L1730.77 1210.94 L1731.36 1210.94 L1731.94 1210.94 L1732.53 1210.94 L1733.11 1210.94 L1733.7 1210.94 L1734.29 1210.94 L1734.87 1210.94 L1735.46 1210.94 L1736.05 1210.94 L1736.63 1210.94 L1737.22 1210.94 L1737.81 1210.94 L1738.39 1210.94 L1738.98 1210.94 L1739.57 1210.94 L1740.15 1210.94 L1740.74 1210.94 L1741.32 1210.94 L1741.91 1210.94 L1742.5 1210.94 L1743.08 1210.94 L1743.67 1210.94 L1744.26 1210.94 L1744.84 1210.94 L1745.43 1210.94 L1746.02 1210.94 L1746.6 1210.94 L1747.19 1210.94 L1747.78 1210.94 L1748.36 1210.94 L1748.95 1210.94 L1749.53 1210.94 L1750.12 1210.94 L1750.71 1210.94 L1751.29 1210.94 L1751.88 1210.94 L1752.47 1210.94 L1753.05 1210.94 L1753.64 1210.94 L1754.23 1210.94 L1754.81 1210.94 L1755.4 1210.94 L1755.99 1210.94 L1756.57 1210.94 L1757.16 1210.94 L1757.74 1210.94 L1758.33 1210.94 L1758.92 1210.94 L1759.5 1210.94 L1760.09 1210.94 L1760.68 1210.94 L1761.26 1210.94 L1761.85 1210.94 L1762.44 1210.94 L1763.02 1210.94 L1763.61 1210.94 L1764.19 1210.94 L1764.78 1210.94 L1765.37 1210.94 L1765.95 1210.94 L1766.54 1210.94 L1767.13 1210.94 L1767.71 1210.94 L1768.3 1210.94 L1768.89 1210.94 L1769.47 1210.94 L1770.06 1210.94 L1770.65 1210.94 L1771.23 1210.94 L1771.82 1210.94 L1772.4 1210.94 L1772.99 1210.94 L1773.58 1210.94 L1774.16 1210.94 L1774.75 1210.94 L1775.34 1210.94 L1775.92 1210.94 L1776.51 1210.94 L1777.1 1210.94 L1777.68 1210.94 L1778.27 1210.94 L1778.86 1210.94 L1779.44 1210.94 L1780.03 1210.94 L1780.61 1210.94 L1781.2 1210.94 L1781.79 1210.94 L1782.37 1210.94 L1782.96 1210.94 L1783.55 1210.94 L1784.13 1210.94 L1784.72 1210.94 L1785.31 1210.94 L1785.89 1210.94 L1786.48 1210.94 L1787.06 1210.94 L1787.65 1210.94 L1788.24 1210.94 L1788.82 1210.94 L1789.41 1210.94 L1790 1210.94 L1790.58 1210.94 L1791.17 1210.94 L1791.76 1210.94 L1792.34 1210.94 L1792.93 1210.94 L1793.52 1210.94 L1794.1 1210.94 L1794.69 1210.94 L1795.27 1210.94 L1795.86 1210.94 L1796.45 1210.94 L1797.03 1210.94 L1797.62 1210.94 L1798.21 1210.94 L1798.79 1210.94 L1799.38 1210.94 L1799.97 1210.94 L1800.55 1210.94 L1801.14 1210.94 L1801.73 1210.94 L1802.31 1210.94 L1802.9 1210.94 L1803.48 1210.94 L1804.07 1210.94 L1804.66 1210.94 L1805.24 1210.94 L1805.83 1210.94 L1806.42 1210.94 L1807 1210.94 L1807.59 1210.94 L1808.18 1210.94 L1808.76 1210.94 L1809.35 1210.94 L1809.94 1210.94 L1810.52 1210.94 L1811.11 1210.94 L1811.69 1210.94 L1812.28 1210.94 L1812.87 1210.94 L1813.45 1210.94 L1814.04 1210.94 L1814.63 1210.94 L1815.21 1210.94 L1815.8 1210.94 L1816.39 1210.94 L1816.97 1210.94 L1817.56 1210.94 L1818.14 1210.94 L1818.73 1210.94 L1819.32 1210.94 L1819.9 1210.94 L1820.49 1210.94 L1821.08 1210.94 L1821.66 1210.94 L1822.25 1210.94 L1822.84 1210.94 L1823.42 1210.94 L1824.01 1210.94 L1824.6 1210.94 L1825.18 1210.94 L1825.77 1210.94 L1826.35 1210.94 L1826.94 1210.94 L1827.53 1210.94 L1828.11 1210.94 L1828.7 1210.94 L1829.29 1210.94 L1829.87 1210.94 L1830.46 1210.94 L1831.05 1210.94 L1831.63 1210.94 L1832.22 1210.94 L1832.81 1210.94 L1833.39 1210.94 L1833.98 1210.94 L1834.56 1210.94 L1835.15 1210.94 L1835.74 1210.94 L1836.32 1210.94 L1836.91 1210.94 L1837.5 1210.94 L1838.08 1210.94 L1838.67 1210.94 L1839.26 1210.94 L1839.84 1210.94 L1840.43 1210.94 L1841.01 1210.94 L1841.6 1210.94 L1842.19 1210.94 L1842.77 1210.94 L1843.36 1210.94 L1843.95 1210.94 L1844.53 1210.94 L1845.12 1210.94 L1845.71 1210.94 L1846.29 1210.94 L1846.88 1210.94 L1847.47 1210.94 L1848.05 1210.94 L1848.64 1210.94 L1849.22 1210.94 L1849.81 1210.94 L1850.4 1210.94 L1850.98 1210.94 L1851.57 1210.94 L1852.16 1210.94 L1852.74 1210.94 L1853.33 1210.94 L1853.92 1210.94 L1854.5 1210.94 L1855.09 1210.94 L1855.68 1210.94 L1856.26 1210.94 L1856.85 1210.94 L1857.43 1210.94 L1858.02 1210.94 L1858.61 1210.94 L1859.19 1210.94 L1859.78 1210.94 L1860.37 1210.94 L1860.95 1210.94 L1861.54 1210.94 L1862.13 1210.94 L1862.71 1210.94 L1863.3 1210.94 L1863.88 1210.94 L1864.47 1210.94 L1865.06 1210.94 L1865.64 1210.94 L1866.23 1210.94 L1866.82 1210.94 L1867.4 1210.94 L1867.99 1210.94 L1868.58 1210.94 L1869.16 1210.94 L1869.75 1210.94 L1870.34 1210.94 L1870.92 1210.94 L1871.51 1210.94 L1872.09 1210.94 L1872.68 1210.94 L1873.27 1210.94 L1873.85 1210.94 L1874.44 1210.94 L1875.03 1210.94 L1875.61 1210.94 L1876.2 1210.94 L1876.79 1210.94 L1877.37 1210.94 L1877.96 1210.94 L1878.55 1210.94 L1879.13 1210.94 L1879.72 1210.94 L1880.3 1210.94 L1880.89 1210.94 L1881.48 1210.94 L1882.06 1210.94 L1882.65 1210.94 L1883.24 1210.94 L1883.82 1210.94 L1884.41 1210.94 L1885 1210.94 L1885.58 1210.94 L1886.17 1210.94 L1886.76 1210.94 L1887.34 1210.94 L1887.93 1210.94 L1888.51 1210.94 L1889.1 1210.94 L1889.69 1210.94 L1890.27 1210.94 L1890.86 1210.94 L1891.45 1210.94 L1892.03 1210.94 L1892.62 1210.94 L1893.21 1210.94 L1893.79 1210.94 L1894.38 1210.94 L1894.96 1210.94 L1895.55 1210.94 L1896.14 1210.94 L1896.72 1210.94 L1897.31 1210.94 L1897.9 1210.94 L1898.48 1210.94 L1899.07 1210.94 L1899.66 1210.94 L1900.24 1210.94 L1900.83 1210.94 L1901.42 1210.94 L1902 1210.94 L1902.59 1210.94 L1903.17 1210.94 L1903.76 1210.94 L1904.35 1210.94 L1904.93 1210.94 L1905.52 1210.94 L1906.11 1210.94 L1906.69 1210.94 L1907.28 1210.94 L1907.87 1210.94 L1908.45 1210.94 L1909.04 1210.94 L1909.63 1210.94 L1910.21 1210.94 L1910.8 1210.94 L1911.38 1210.94 L1911.97 1210.94 L1912.56 1210.94 L1913.14 1210.94 L1913.73 1210.94 L1914.32 1210.94 L1914.9 1210.94 L1915.49 1210.94 L1916.08 1210.94 L1916.66 1210.94 L1917.25 1210.94 L1917.83 1210.94 L1918.42 1210.94 L1919.01 1210.94 L1919.59 1210.94 L1920.18 1210.94 L1920.77 1210.94 L1921.35 1210.94 L1921.94 1210.94 L1922.53 1210.94 L1923.11 1210.94 L1923.7 1210.94 L1924.29 1210.94 L1924.87 1210.94 L1925.46 1210.94 L1926.04 1210.94 L1926.63 1210.94 L1927.22 1210.94 L1927.8 1210.94 L1928.39 1210.94 L1928.98 1210.94 L1929.56 1210.94 L1930.15 1210.94 L1930.74 1210.94 L1931.32 1210.94 L1931.91 1210.94 L1932.5 1210.94 L1933.08 1210.94 L1933.67 1210.94 L1934.25 1210.94 L1934.84 1210.94 L1935.43 1210.94 L1936.01 1210.94 L1936.6 1210.94 L1937.19 1210.94 L1937.77 1210.94 L1938.36 1210.94 L1938.95 1210.94 L1939.53 1210.94 L1940.12 1210.94 L1940.71 1210.94 L1941.29 1210.94 L1941.88 1210.94 L1942.46 1210.94 L1943.05 1210.94 L1943.64 1210.94 L1944.22 1210.94 L1944.81 1210.94 L1945.4 1210.94 L1945.98 1210.94 L1946.57 1210.94 L1947.16 1210.94 L1947.74 1210.94 L1948.33 1210.94 L1948.91 1210.94 L1949.5 1210.94 L1950.09 1210.94 L1950.67 1210.94 L1951.26 1210.94 L1951.85 1210.94 L1952.43 1210.94 L1953.02 1210.94 L1953.61 1210.94 L1954.19 1210.94 L1954.78 1210.94 L1955.37 1210.94 L1955.95 1210.94 L1956.54 1210.94 L1957.12 1210.94 L1957.71 1210.94 L1958.3 1210.94 L1958.88 1210.94 L1959.47 1210.94 L1960.06 1210.94 L1960.64 1210.94 L1961.23 1210.94 L1961.82 1210.94 L1962.4 1210.94 L1962.99 1210.94 L1963.58 1210.94 L1964.16 1210.94 L1964.75 1210.94 L1965.33 1210.94 L1965.92 1210.94 L1966.51 1210.94 L1967.09 1210.94 L1967.68 1210.94 L1968.27 1210.94 L1968.85 1210.94 L1969.44 1210.94 L1970.03 1210.94 L1970.61 1210.94 L1971.2 1210.94 L1971.78 1210.94 L1972.37 1210.94 L1972.96 1210.94 L1973.54 1210.94 L1974.13 1210.94 L1974.72 1210.94 L1975.3 1210.94 L1975.89 1210.94 L1976.48 1210.94 L1977.06 1210.94 L1977.65 1210.94 L1978.24 1210.94 L1978.82 1210.94 L1979.41 1210.94 L1979.99 1210.94 L1980.58 1210.94 L1981.17 1210.94 L1981.75 1210.94 L1982.34 1210.94 L1982.93 1210.94 L1983.51 1210.94 L1984.1 1210.94 L1984.69 1210.94 L1985.27 1210.94 L1985.86 1210.94 L1986.45 1210.94 L1987.03 1210.94 L1987.62 1210.94 L1988.2 1210.94 L1988.79 1210.94 L1989.38 1210.94 L1989.96 1210.94 L1990.55 1210.94 L1991.14 1210.94 L1991.72 1210.94 L1992.31 1210.94 L1992.9 1210.94 L1993.48 1210.94 L1994.07 1210.94 L1994.65 1210.94 L1995.24 1210.94 L1995.83 1210.94 L1996.41 1210.94 L1997 1210.94 L1997.59 1210.94 L1998.17 1210.94 L1998.76 1210.94 L1999.35 1210.94 L1999.93 1210.94 L2000.52 1210.94 L2001.11 1210.94 L2001.69 1210.94 L2002.28 1210.94 L2002.86 1210.94 L2003.45 1210.94 L2004.04 1210.94 L2004.62 1210.94 L2005.21 1210.94 L2005.8 1210.94 L2006.38 1210.94 L2006.97 1210.94 L2007.56 1210.94 L2008.14 1210.94 L2008.73 1210.94 L2009.32 1210.94 L2009.9 1210.94 L2010.49 1210.94 L2011.07 1210.94 L2011.66 1210.94 L2012.25 1210.94 L2012.83 1210.94 L2013.42 1210.94 L2014.01 1210.94 L2014.59 1210.94 L2015.18 1210.94 L2015.77 1210.94 L2016.35 1210.94 L2016.94 1210.94 L2017.53 1210.94 L2018.11 1210.94 L2018.7 1210.94 L2019.28 1210.94 L2019.87 1210.94 L2020.46 1210.94 L2021.04 1210.94 L2021.63 1210.94 L2022.22 1210.94 L2022.8 1210.94 L2023.39 1210.94 L2023.98 1210.94 L2024.56 1210.94 L2025.15 1210.94 L2025.73 1210.94 L2026.32 1210.94 L2026.91 1210.94 L2027.49 1210.94 L2028.08 1210.94 L2028.67 1210.94 L2029.25 1210.94 L2029.84 1210.94 L2030.43 1210.94 L2031.01 1210.94 L2031.6 1210.94 L2032.19 1210.94 L2032.77 1210.94 L2033.36 1210.94 L2033.94 1210.94 L2034.53 1210.94 L2035.12 1210.94 L2035.7 1210.94 L2036.29 1210.94 L2036.88 1210.94 L2037.46 1210.94 L2038.05 1210.94 L2038.64 1210.94 L2039.22 1210.94 L2039.81 1210.94 L2040.4 1210.94 L2040.98 1210.94 L2041.57 1210.94 L2042.15 1210.94 L2042.74 1210.94 L2043.33 1210.94 L2043.91 1210.94 L2044.5 1210.94 L2045.09 1210.94 L2045.67 1210.94 L2046.26 1210.94 L2046.85 1210.94 L2047.43 1210.94 L2048.02 1210.94 L2048.6 1210.94 L2049.19 1210.94 L2049.78 1210.94 L2050.36 1210.94 L2050.95 1210.94 L2051.54 1210.94 L2052.12 1210.94 L2052.71 1210.94 L2053.3 1210.94 L2053.88 1210.94 L2054.47 1210.94 L2055.06 1210.94 L2055.64 1210.94 L2056.23 1210.94 L2056.81 1210.94 L2057.4 1210.94 L2057.99 1210.94 L2058.57 1210.94 L2059.16 1210.94 L2059.75 1210.94 L2060.33 1210.94 L2060.92 1210.94 L2061.51 1210.94 L2062.09 1210.94 L2062.68 1210.94 L2063.27 1210.94 L2063.85 1210.94 L2064.44 1210.94 L2065.02 1210.94 L2065.61 1210.94 L2066.2 1210.94 L2066.78 1210.94 L2067.37 1210.94 L2067.96 1210.94 L2068.54 1210.94 L2069.13 1210.94 L2069.72 1210.94 L2070.3 1210.94 L2070.89 1210.94 L2071.48 1210.94 L2072.06 1210.94 L2072.65 1210.94 L2073.23 1210.94 L2073.82 1210.94 L2074.41 1210.94 L2074.99 1210.94 L2075.58 1210.94 L2076.17 1210.94 L2076.75 1210.94 L2077.34 1210.94 L2077.93 1210.94 L2078.51 1210.94 L2079.1 1210.94 L2079.68 1210.94 L2080.27 1210.94 L2080.86 1210.94 L2081.44 1210.94 L2082.03 1210.94 L2082.62 1210.94 L2083.2 1210.94 L2083.79 1210.94 L2084.38 1210.94 L2084.96 1210.94 L2085.55 1210.94 L2086.14 1210.94 L2086.72 1210.94 L2087.31 1210.94 L2087.89 1210.94 L2088.48 1210.94 L2089.07 1210.94 L2089.65 1210.94 L2090.24 1210.94 L2090.83 1210.94 L2091.41 1210.94 L2092 1210.94 L2092.59 1210.94 L2093.17 1210.94 L2093.76 1210.94 L2094.35 1210.94 L2094.93 1210.94 L2095.52 1210.94 L2096.1 1210.94 L2096.69 1210.94 L2097.28 1210.94 L2097.86 1210.94 L2098.45 1210.94 L2099.04 1210.94 L2099.62 1210.94 L2100.21 1210.94 L2100.8 1210.94 L2101.38 1210.94 L2101.97 1210.94 L2102.55 1210.94 L2103.14 1210.94 L2103.73 1210.94 L2104.31 1210.94 L2104.9 1210.94 L2105.49 1210.94 L2106.07 1210.94 L2106.66 1210.94 L2107.25 1210.94 L2107.83 1210.94 L2108.42 1210.94 L2109.01 1210.94 L2109.59 1210.94 L2110.18 1210.94 L2110.76 1210.94 L2111.35 1210.94 L2111.94 1210.94 L2112.52 1210.94 L2113.11 1210.94 L2113.7 1210.94 L2114.28 1210.94 L2114.87 1210.94 L2115.46 1210.94 L2116.04 1210.94 L2116.63 1210.94 L2117.22 1210.94 L2117.8 1210.94 L2118.39 1210.94 L2118.97 1210.94 L2119.56 1210.94 L2120.15 1210.94 L2120.73 1210.94 L2121.32 1210.94 L2121.91 1210.94 L2122.49 1210.94 L2123.08 1210.94 L2123.67 1210.94 L2124.25 1210.94 L2124.84 1210.94 L2125.42 1210.94 L2126.01 1210.94 L2126.6 1210.94 L2127.18 1210.94 L2127.77 1210.94 L2128.36 1210.94 L2128.94 1210.94 L2129.53 1210.94 L2130.12 1210.94 L2130.7 1210.94 L2131.29 1210.94 L2131.88 1210.94 L2132.46 1210.94 L2133.05 1210.94 L2133.63 1210.94 L2134.22 1210.94 L2134.81 1210.94 L2135.39 1210.94 L2135.98 1210.94 L2136.57 1210.94 L2137.15 1210.94 L2137.74 1210.94 L2138.33 1210.94 L2138.91 1210.94 L2139.5 1210.94 L2140.09 1210.94 L2140.67 1210.94 L2141.26 1210.94 L2141.84 1210.94 L2142.43 1210.94 L2143.02 1210.94 L2143.6 1210.94 L2144.19 1210.94 L2144.78 1210.94 L2145.36 1210.94 L2145.95 1210.94 L2146.54 1210.94 L2147.12 1210.94 L2147.71 1210.94 L2148.3 1210.94 L2148.88 1210.94 L2149.47 1210.94 L2150.05 1210.94 L2150.64 1210.94 L2151.23 1210.94 L2151.81 1210.94 L2152.4 1210.94 L2152.99 1210.94 L2153.57 1210.94 L2154.16 1210.94 L2154.75 1210.94 L2155.33 1210.94 L2155.92 1210.94 L2156.5 1210.94 L2157.09 1210.94 L2157.68 1210.94 L2158.26 1210.94 L2158.26 1210.82 L2157.68 1210.82 L2157.09 1210.82 L2156.5 1210.82 L2155.92 1210.82 L2155.33 1210.82 L2154.75 1210.82 L2154.16 1210.82 L2153.57 1210.82 L2152.99 1210.82 L2152.4 1210.82 L2151.81 1210.82 L2151.23 1210.82 L2150.64 1210.82 L2150.05 1210.82 L2149.47 1210.82 L2148.88 1210.82 L2148.3 1210.82 L2147.71 1210.82 L2147.12 1210.82 L2146.54 1210.82 L2145.95 1210.82 L2145.36 1210.82 L2144.78 1210.82 L2144.19 1210.82 L2143.6 1210.82 L2143.02 1210.82 L2142.43 1210.82 L2141.84 1210.82 L2141.26 1210.82 L2140.67 1210.82 L2140.09 1210.82 L2139.5 1210.82 L2138.91 1210.82 L2138.33 1210.82 L2137.74 1210.82 L2137.15 1210.82 L2136.57 1210.82 L2135.98 1210.82 L2135.39 1210.82 L2134.81 1210.82 L2134.22 1210.82 L2133.63 1210.82 L2133.05 1210.82 L2132.46 1210.82 L2131.88 1210.82 L2131.29 1210.82 L2130.7 1210.82 L2130.12 1210.82 L2129.53 1210.82 L2128.94 1210.82 L2128.36 1210.82 L2127.77 1210.82 L2127.18 1210.82 L2126.6 1210.82 L2126.01 1210.82 L2125.42 1210.82 L2124.84 1210.82 L2124.25 1210.82 L2123.67 1210.82 L2123.08 1210.82 L2122.49 1210.82 L2121.91 1210.82 L2121.32 1210.82 L2120.73 1210.82 L2120.15 1210.82 L2119.56 1210.82 L2118.97 1210.82 L2118.39 1210.82 L2117.8 1210.82 L2117.22 1210.82 L2116.63 1210.82 L2116.04 1210.82 L2115.46 1210.82 L2114.87 1210.82 L2114.28 1210.82 L2113.7 1210.82 L2113.11 1210.82 L2112.52 1210.82 L2111.94 1210.82 L2111.35 1210.82 L2110.76 1210.82 L2110.18 1210.82 L2109.59 1210.82 L2109.01 1210.82 L2108.42 1210.82 L2107.83 1210.82 L2107.25 1210.82 L2106.66 1210.82 L2106.07 1210.82 L2105.49 1210.82 L2104.9 1210.82 L2104.31 1210.82 L2103.73 1210.82 L2103.14 1210.82 L2102.55 1210.82 L2101.97 1210.82 L2101.38 1210.82 L2100.8 1210.82 L2100.21 1210.82 L2099.62 1210.82 L2099.04 1210.82 L2098.45 1210.82 L2097.86 1210.82 L2097.28 1210.82 L2096.69 1210.82 L2096.1 1210.82 L2095.52 1210.82 L2094.93 1210.82 L2094.35 1210.82 L2093.76 1210.82 L2093.17 1210.82 L2092.59 1210.82 L2092 1210.82 L2091.41 1210.82 L2090.83 1210.82 L2090.24 1210.82 L2089.65 1210.82 L2089.07 1210.82 L2088.48 1210.82 L2087.89 1210.82 L2087.31 1210.82 L2086.72 1210.82 L2086.14 1210.82 L2085.55 1210.82 L2084.96 1210.82 L2084.38 1210.82 L2083.79 1210.82 L2083.2 1210.82 L2082.62 1210.82 L2082.03 1210.82 L2081.44 1210.82 L2080.86 1210.82 L2080.27 1210.82 L2079.68 1210.82 L2079.1 1210.82 L2078.51 1210.82 L2077.93 1210.82 L2077.34 1210.82 L2076.75 1210.82 L2076.17 1210.82 L2075.58 1210.82 L2074.99 1210.82 L2074.41 1210.82 L2073.82 1210.82 L2073.23 1210.82 L2072.65 1210.82 L2072.06 1210.82 L2071.48 1210.82 L2070.89 1210.82 L2070.3 1210.82 L2069.72 1210.82 L2069.13 1210.82 L2068.54 1210.82 L2067.96 1210.82 L2067.37 1210.82 L2066.78 1210.82 L2066.2 1210.82 L2065.61 1210.82 L2065.02 1210.82 L2064.44 1210.82 L2063.85 1210.82 L2063.27 1210.82 L2062.68 1210.82 L2062.09 1210.82 L2061.51 1210.82 L2060.92 1210.82 L2060.33 1210.82 L2059.75 1210.82 L2059.16 1210.82 L2058.57 1210.82 L2057.99 1210.82 L2057.4 1210.82 L2056.81 1210.82 L2056.23 1210.82 L2055.64 1210.82 L2055.06 1210.82 L2054.47 1210.82 L2053.88 1210.82 L2053.3 1210.82 L2052.71 1210.82 L2052.12 1210.82 L2051.54 1210.82 L2050.95 1210.82 L2050.36 1210.82 L2049.78 1210.82 L2049.19 1210.82 L2048.6 1210.82 L2048.02 1210.82 L2047.43 1210.82 L2046.85 1210.82 L2046.26 1210.82 L2045.67 1210.82 L2045.09 1210.82 L2044.5 1210.82 L2043.91 1210.82 L2043.33 1210.82 L2042.74 1210.82 L2042.15 1210.82 L2041.57 1210.82 L2040.98 1210.82 L2040.4 1210.82 L2039.81 1210.82 L2039.22 1210.82 L2038.64 1210.82 L2038.05 1210.82 L2037.46 1210.82 L2036.88 1210.82 L2036.29 1210.82 L2035.7 1210.82 L2035.12 1210.82 L2034.53 1210.82 L2033.94 1210.82 L2033.36 1210.82 L2032.77 1210.82 L2032.19 1210.82 L2031.6 1210.82 L2031.01 1210.82 L2030.43 1210.82 L2029.84 1210.82 L2029.25 1210.82 L2028.67 1210.82 L2028.08 1210.82 L2027.49 1210.82 L2026.91 1210.82 L2026.32 1210.82 L2025.73 1210.82 L2025.15 1210.82 L2024.56 1210.82 L2023.98 1210.82 L2023.39 1210.82 L2022.8 1210.82 L2022.22 1210.82 L2021.63 1210.82 L2021.04 1210.82 L2020.46 1210.82 L2019.87 1210.82 L2019.28 1210.82 L2018.7 1210.82 L2018.11 1210.82 L2017.53 1210.82 L2016.94 1210.82 L2016.35 1210.82 L2015.77 1210.82 L2015.18 1210.82 L2014.59 1210.82 L2014.01 1210.82 L2013.42 1210.82 L2012.83 1210.82 L2012.25 1210.82 L2011.66 1210.82 L2011.07 1210.82 L2010.49 1210.82 L2009.9 1210.82 L2009.32 1210.82 L2008.73 1210.82 L2008.14 1210.82 L2007.56 1210.82 L2006.97 1210.82 L2006.38 1210.82 L2005.8 1210.82 L2005.21 1210.82 L2004.62 1210.82 L2004.04 1210.82 L2003.45 1210.82 L2002.86 1210.82 L2002.28 1210.82 L2001.69 1210.82 L2001.11 1210.82 L2000.52 1210.82 L1999.93 1210.82 L1999.35 1210.82 L1998.76 1210.82 L1998.17 1210.82 L1997.59 1210.82 L1997 1210.82 L1996.41 1210.82 L1995.83 1210.82 L1995.24 1210.82 L1994.65 1210.82 L1994.07 1210.82 L1993.48 1210.82 L1992.9 1210.82 L1992.31 1210.82 L1991.72 1210.82 L1991.14 1210.82 L1990.55 1210.82 L1989.96 1210.82 L1989.38 1210.82 L1988.79 1210.82 L1988.2 1210.82 L1987.62 1210.82 L1987.03 1210.82 L1986.45 1210.82 L1985.86 1210.82 L1985.27 1210.82 L1984.69 1210.82 L1984.1 1210.82 L1983.51 1210.82 L1982.93 1210.82 L1982.34 1210.82 L1981.75 1210.82 L1981.17 1210.82 L1980.58 1210.82 L1979.99 1210.82 L1979.41 1210.82 L1978.82 1210.82 L1978.24 1210.82 L1977.65 1210.82 L1977.06 1210.82 L1976.48 1210.82 L1975.89 1210.82 L1975.3 1210.82 L1974.72 1210.82 L1974.13 1210.82 L1973.54 1210.82 L1972.96 1210.82 L1972.37 1210.82 L1971.78 1210.82 L1971.2 1210.82 L1970.61 1210.82 L1970.03 1210.82 L1969.44 1210.82 L1968.85 1210.82 L1968.27 1210.82 L1967.68 1210.82 L1967.09 1210.82 L1966.51 1210.82 L1965.92 1210.82 L1965.33 1210.82 L1964.75 1210.82 L1964.16 1210.82 L1963.58 1210.82 L1962.99 1210.82 L1962.4 1210.82 L1961.82 1210.82 L1961.23 1210.82 L1960.64 1210.82 L1960.06 1210.82 L1959.47 1210.82 L1958.88 1210.82 L1958.3 1210.82 L1957.71 1210.82 L1957.12 1210.82 L1956.54 1210.82 L1955.95 1210.82 L1955.37 1210.82 L1954.78 1210.82 L1954.19 1210.82 L1953.61 1210.82 L1953.02 1210.82 L1952.43 1210.82 L1951.85 1210.82 L1951.26 1210.82 L1950.67 1210.82 L1950.09 1210.82 L1949.5 1210.82 L1948.91 1210.82 L1948.33 1210.82 L1947.74 1210.82 L1947.16 1210.82 L1946.57 1210.82 L1945.98 1210.82 L1945.4 1210.82 L1944.81 1210.82 L1944.22 1210.82 L1943.64 1210.82 L1943.05 1210.82 L1942.46 1210.82 L1941.88 1210.82 L1941.29 1210.82 L1940.71 1210.82 L1940.12 1210.82 L1939.53 1210.82 L1938.95 1210.82 L1938.36 1210.82 L1937.77 1210.82 L1937.19 1210.82 L1936.6 1210.82 L1936.01 1210.82 L1935.43 1210.82 L1934.84 1210.82 L1934.25 1210.82 L1933.67 1210.82 L1933.08 1210.82 L1932.5 1210.82 L1931.91 1210.82 L1931.32 1210.82 L1930.74 1210.82 L1930.15 1210.82 L1929.56 1210.82 L1928.98 1210.82 L1928.39 1210.82 L1927.8 1210.82 L1927.22 1210.82 L1926.63 1210.82 L1926.04 1210.82 L1925.46 1210.82 L1924.87 1210.82 L1924.29 1210.82 L1923.7 1210.82 L1923.11 1210.82 L1922.53 1210.82 L1921.94 1210.82 L1921.35 1210.82 L1920.77 1210.82 L1920.18 1210.82 L1919.59 1210.82 L1919.01 1210.82 L1918.42 1210.82 L1917.83 1210.82 L1917.25 1210.82 L1916.66 1210.82 L1916.08 1210.82 L1915.49 1210.82 L1914.9 1210.82 L1914.32 1210.82 L1913.73 1210.82 L1913.14 1210.82 L1912.56 1210.82 L1911.97 1210.82 L1911.38 1210.82 L1910.8 1210.82 L1910.21 1210.82 L1909.63 1210.82 L1909.04 1210.82 L1908.45 1210.82 L1907.87 1210.82 L1907.28 1210.82 L1906.69 1210.82 L1906.11 1210.82 L1905.52 1210.82 L1904.93 1210.82 L1904.35 1210.82 L1903.76 1210.82 L1903.17 1210.82 L1902.59 1210.82 L1902 1210.82 L1901.42 1210.82 L1900.83 1210.82 L1900.24 1210.82 L1899.66 1210.82 L1899.07 1210.82 L1898.48 1210.82 L1897.9 1210.82 L1897.31 1210.82 L1896.72 1210.82 L1896.14 1210.82 L1895.55 1210.82 L1894.96 1210.82 L1894.38 1210.82 L1893.79 1210.82 L1893.21 1210.82 L1892.62 1210.82 L1892.03 1210.82 L1891.45 1210.82 L1890.86 1210.82 L1890.27 1210.82 L1889.69 1210.82 L1889.1 1210.82 L1888.51 1210.82 L1887.93 1210.82 L1887.34 1210.82 L1886.76 1210.82 L1886.17 1210.82 L1885.58 1210.82 L1885 1210.82 L1884.41 1210.82 L1883.82 1210.82 L1883.24 1210.82 L1882.65 1210.82 L1882.06 1210.82 L1881.48 1210.82 L1880.89 1210.82 L1880.3 1210.82 L1879.72 1210.82 L1879.13 1210.82 L1878.55 1210.82 L1877.96 1210.82 L1877.37 1210.82 L1876.79 1210.82 L1876.2 1210.82 L1875.61 1210.82 L1875.03 1210.82 L1874.44 1210.82 L1873.85 1210.82 L1873.27 1210.82 L1872.68 1210.82 L1872.09 1210.82 L1871.51 1210.82 L1870.92 1210.82 L1870.34 1210.82 L1869.75 1210.82 L1869.16 1210.82 L1868.58 1210.82 L1867.99 1210.82 L1867.4 1210.82 L1866.82 1210.82 L1866.23 1210.82 L1865.64 1210.82 L1865.06 1210.82 L1864.47 1210.82 L1863.88 1210.82 L1863.3 1210.82 L1862.71 1210.82 L1862.13 1210.82 L1861.54 1210.82 L1860.95 1210.82 L1860.37 1210.82 L1859.78 1210.82 L1859.19 1210.82 L1858.61 1210.82 L1858.02 1210.82 L1857.43 1210.82 L1856.85 1210.82 L1856.26 1210.82 L1855.68 1210.82 L1855.09 1210.82 L1854.5 1210.82 L1853.92 1210.82 L1853.33 1210.82 L1852.74 1210.82 L1852.16 1210.82 L1851.57 1210.82 L1850.98 1210.82 L1850.4 1210.82 L1849.81 1210.82 L1849.22 1210.82 L1848.64 1210.82 L1848.05 1210.82 L1847.47 1210.82 L1846.88 1210.82 L1846.29 1210.82 L1845.71 1210.82 L1845.12 1210.82 L1844.53 1210.82 L1843.95 1210.82 L1843.36 1210.82 L1842.77 1210.82 L1842.19 1210.82 L1841.6 1210.82 L1841.01 1210.82 L1840.43 1210.82 L1839.84 1210.82 L1839.26 1210.82 L1838.67 1210.82 L1838.08 1210.82 L1837.5 1210.82 L1836.91 1210.82 L1836.32 1210.82 L1835.74 1210.82 L1835.15 1210.82 L1834.56 1210.82 L1833.98 1210.82 L1833.39 1210.82 L1832.81 1210.82 L1832.22 1210.82 L1831.63 1210.82 L1831.05 1210.82 L1830.46 1210.82 L1829.87 1210.82 L1829.29 1210.82 L1828.7 1210.82 L1828.11 1210.82 L1827.53 1210.82 L1826.94 1210.82 L1826.35 1210.82 L1825.77 1210.82 L1825.18 1210.82 L1824.6 1210.82 L1824.01 1210.82 L1823.42 1210.82 L1822.84 1210.82 L1822.25 1210.82 L1821.66 1210.82 L1821.08 1210.82 L1820.49 1210.82 L1819.9 1210.82 L1819.32 1210.82 L1818.73 1210.82 L1818.14 1210.82 L1817.56 1210.82 L1816.97 1210.82 L1816.39 1210.82 L1815.8 1210.82 L1815.21 1210.82 L1814.63 1210.82 L1814.04 1210.82 L1813.45 1210.82 L1812.87 1210.82 L1812.28 1210.82 L1811.69 1210.82 L1811.11 1210.82 L1810.52 1210.82 L1809.94 1210.82 L1809.35 1210.82 L1808.76 1210.82 L1808.18 1210.82 L1807.59 1210.82 L1807 1210.82 L1806.42 1210.82 L1805.83 1210.82 L1805.24 1210.82 L1804.66 1210.82 L1804.07 1210.82 L1803.48 1210.82 L1802.9 1210.82 L1802.31 1210.82 L1801.73 1210.82 L1801.14 1210.82 L1800.55 1210.82 L1799.97 1210.82 L1799.38 1210.82 L1798.79 1210.82 L1798.21 1210.82 L1797.62 1210.82 L1797.03 1210.82 L1796.45 1210.82 L1795.86 1210.82 L1795.27 1210.82 L1794.69 1210.82 L1794.1 1210.82 L1793.52 1210.82 L1792.93 1210.82 L1792.34 1210.82 L1791.76 1210.82 L1791.17 1210.82 L1790.58 1210.82 L1790 1210.82 L1789.41 1210.82 L1788.82 1210.82 L1788.24 1210.82 L1787.65 1210.82 L1787.06 1210.82 L1786.48 1210.82 L1785.89 1210.82 L1785.31 1210.82 L1784.72 1210.82 L1784.13 1210.82 L1783.55 1210.82 L1782.96 1210.82 L1782.37 1210.82 L1781.79 1210.82 L1781.2 1210.82 L1780.61 1210.82 L1780.03 1210.82 L1779.44 1210.82 L1778.86 1210.82 L1778.27 1210.82 L1777.68 1210.82 L1777.1 1210.82 L1776.51 1210.82 L1775.92 1210.82 L1775.34 1210.82 L1774.75 1210.82 L1774.16 1210.82 L1773.58 1210.82 L1772.99 1210.82 L1772.4 1210.82 L1771.82 1210.82 L1771.23 1210.82 L1770.65 1210.82 L1770.06 1210.82 L1769.47 1210.82 L1768.89 1210.82 L1768.3 1210.82 L1767.71 1210.82 L1767.13 1210.82 L1766.54 1210.82 L1765.95 1210.82 L1765.37 1210.82 L1764.78 1210.82 L1764.19 1210.82 L1763.61 1210.82 L1763.02 1210.82 L1762.44 1210.82 L1761.85 1210.82 L1761.26 1210.82 L1760.68 1210.82 L1760.09 1210.82 L1759.5 1210.82 L1758.92 1210.82 L1758.33 1210.82 L1757.74 1210.82 L1757.16 1210.82 L1756.57 1210.82 L1755.99 1210.82 L1755.4 1210.82 L1754.81 1210.82 L1754.23 1210.82 L1753.64 1210.82 L1753.05 1210.82 L1752.47 1210.82 L1751.88 1210.82 L1751.29 1210.82 L1750.71 1210.82 L1750.12 1210.82 L1749.53 1210.82 L1748.95 1210.82 L1748.36 1210.82 L1747.78 1210.82 L1747.19 1210.82 L1746.6 1210.82 L1746.02 1210.82 L1745.43 1210.82 L1744.84 1210.82 L1744.26 1210.82 L1743.67 1210.82 L1743.08 1210.82 L1742.5 1210.82 L1741.91 1210.82 L1741.32 1210.82 L1740.74 1210.82 L1740.15 1210.82 L1739.57 1210.82 L1738.98 1210.82 L1738.39 1210.82 L1737.81 1210.82 L1737.22 1210.82 L1736.63 1210.82 L1736.05 1210.82 L1735.46 1210.82 L1734.87 1210.82 L1734.29 1210.82 L1733.7 1210.82 L1733.11 1210.82 L1732.53 1210.82 L1731.94 1210.82 L1731.36 1210.82 L1730.77 1210.82 L1730.18 1210.82 L1729.6 1210.82 L1729.01 1210.82 L1728.42 1210.82 L1727.84 1210.82 L1727.25 1210.82 L1726.66 1210.82 L1726.08 1210.82 L1725.49 1210.82 L1724.91 1210.82 L1724.32 1210.82 L1723.73 1210.82 L1723.15 1210.82 L1722.56 1210.82 L1721.97 1210.82 L1721.39 1210.82 L1720.8 1210.82 L1720.21 1210.82 L1719.63 1210.82 L1719.04 1210.82 L1718.45 1210.82 L1717.87 1210.82 L1717.28 1210.82 L1716.7 1210.82 L1716.11 1210.82 L1715.52 1210.82 L1714.94 1210.82 L1714.35 1210.82 L1713.76 1210.82 L1713.18 1210.82 L1712.59 1210.82 L1712 1210.82 L1711.42 1210.82 L1710.83 1210.82 L1710.24 1210.82 L1709.66 1210.82 L1709.07 1210.82 L1708.49 1210.82 L1707.9 1210.82 L1707.31 1210.82 L1706.73 1210.82 L1706.14 1210.82 L1705.55 1210.82 L1704.97 1210.82 L1704.38 1210.82 L1703.79 1210.82 L1703.21 1210.82 L1702.62 1210.82 L1702.04 1210.82 L1701.45 1210.82 L1700.86 1210.82 L1700.28 1210.82 L1699.69 1210.82 L1699.1 1210.82 L1698.52 1210.82 L1697.93 1210.82 L1697.34 1210.82 L1696.76 1210.82 L1696.17 1210.82 L1695.58 1210.82 L1695 1210.82 L1694.41 1210.82 L1693.83 1210.82 L1693.24 1210.82 L1692.65 1210.82 L1692.07 1210.82 L1691.48 1210.82 L1690.89 1210.82 L1690.31 1210.82 L1689.72 1210.82 L1689.13 1210.82 L1688.55 1210.82 L1687.96 1210.82 L1687.37 1210.82 L1686.79 1210.82 L1686.2 1210.82 L1685.62 1210.82 L1685.03 1210.82 L1684.44 1210.82 L1683.86 1210.82 L1683.27 1210.82 L1682.68 1210.82 L1682.1 1210.82 L1681.51 1210.82 L1680.92 1210.82 L1680.34 1210.82 L1679.75 1210.82 L1679.17 1210.82 L1678.58 1210.82 L1677.99 1210.82 L1677.41 1210.82 L1676.82 1210.82 L1676.23 1210.82 L1675.65 1210.82 L1675.06 1210.82 L1674.47 1210.82 L1673.89 1210.82 L1673.3 1210.82 L1672.71 1210.82 L1672.13 1210.82 L1671.54 1210.82 L1670.96 1210.82 L1670.37 1210.82 L1669.78 1210.82 L1669.2 1210.82 L1668.61 1210.82 L1668.02 1210.82 L1667.44 1210.82 L1666.85 1210.82 L1666.26 1210.82 L1665.68 1210.82 L1665.09 1210.82 L1664.5 1210.82 L1663.92 1210.82 L1663.33 1210.82 L1662.75 1210.82 L1662.16 1210.82 L1661.57 1210.82 L1660.99 1210.82 L1660.4 1210.82 L1659.81 1210.82 L1659.23 1210.82 L1658.64 1210.82 L1658.05 1210.82 L1657.47 1210.82 L1656.88 1210.82 L1656.29 1210.82 L1655.71 1210.82 L1655.12 1210.82 L1654.54 1210.82 L1653.95 1210.82 L1653.36 1210.82 L1652.78 1210.82 L1652.19 1210.82 L1651.6 1210.82 L1651.02 1210.82 L1650.43 1210.82 L1649.84 1210.82 L1649.26 1210.82 L1648.67 1210.82 L1648.09 1210.82 L1647.5 1210.82 L1646.91 1210.82 L1646.33 1210.82 L1645.74 1210.82 L1645.15 1210.82 L1644.57 1210.82 L1643.98 1210.82 L1643.39 1210.82 L1642.81 1210.82 L1642.22 1210.82 L1641.63 1210.82 L1641.05 1210.82 L1640.46 1210.82 L1639.88 1210.82 L1639.29 1210.82 L1638.7 1210.82 L1638.12 1210.82 L1637.53 1210.82 L1636.94 1210.82 L1636.36 1210.82 L1635.77 1210.82 L1635.18 1210.82 L1634.6 1210.82 L1634.01 1210.82 L1633.42 1210.82 L1632.84 1210.82 L1632.25 1210.82 L1631.67 1210.82 L1631.08 1210.82 L1630.49 1210.82 L1629.91 1210.82 L1629.32 1210.82 L1628.73 1210.82 L1628.15 1210.82 L1627.56 1210.82 L1626.97 1210.82 L1626.39 1210.82 L1625.8 1210.82 L1625.22 1210.82 L1624.63 1210.82 L1624.04 1210.82 L1623.46 1210.82 L1622.87 1210.82 L1622.28 1210.82 L1621.7 1210.82 L1621.11 1210.82 L1620.52 1210.82 L1619.94 1210.82 L1619.35 1210.82 L1618.76 1210.82 L1618.18 1210.82 L1617.59 1210.82 L1617.01 1210.82 L1616.42 1210.82 L1615.83 1210.82 L1615.25 1210.82 L1614.66 1210.82 L1614.07 1210.82 L1613.49 1210.82 L1612.9 1210.82 L1612.31 1210.82 L1611.73 1210.82 L1611.14 1210.82 L1610.55 1210.82 L1609.97 1210.82 L1609.38 1210.82 L1608.8 1210.82 L1608.21 1210.82 L1607.62 1210.82 L1607.04 1210.82 L1606.45 1210.82 L1605.86 1210.82 L1605.28 1210.82 L1604.69 1210.82 L1604.1 1210.82 L1603.52 1210.82 L1602.93 1210.82 L1602.34 1210.82 L1601.76 1210.82 L1601.17 1210.82 L1600.59 1210.82 L1600 1210.82 L1599.41 1210.82 L1598.83 1210.82 L1598.24 1210.82 L1597.65 1210.82 L1597.07 1210.82 L1596.48 1210.82 L1595.89 1210.82 L1595.31 1210.82 L1594.72 1210.82 L1594.14 1210.82 L1593.55 1210.82 L1592.96 1210.82 L1592.38 1210.82 L1591.79 1210.82 L1591.2 1210.82 L1590.62 1210.82 L1590.03 1210.82 L1589.44 1210.82 L1588.86 1210.82 L1588.27 1210.82 L1587.68 1210.82 L1587.1 1210.82 L1586.51 1210.82 L1585.93 1210.82 L1585.34 1210.82 L1584.75 1210.82 L1584.17 1210.82 L1583.58 1210.82 L1582.99 1210.82 L1582.41 1210.82 L1581.82 1210.82 L1581.23 1210.82 L1580.65 1210.82 L1580.06 1210.82 L1579.47 1210.82 L1578.89 1210.82 L1578.3 1210.82 L1577.72 1210.82 L1577.13 1210.82 L1576.54 1210.82 L1575.96 1210.82 L1575.37 1210.82 L1574.78 1210.82 L1574.2 1210.82 L1573.61 1210.82 L1573.02 1210.82 L1572.44 1210.82 L1571.85 1210.82 L1571.27 1210.82 L1570.68 1210.82 L1570.09 1210.82 L1569.51 1210.82 L1568.92 1210.82 L1568.33 1210.82 L1567.75 1210.82 L1567.16 1210.82 L1566.57 1210.82 L1565.99 1210.82 L1565.4 1210.82 L1564.81 1210.82 L1564.23 1210.82 L1563.64 1210.82 L1563.06 1210.82 L1562.47 1210.82 L1561.88 1210.82 L1561.3 1210.82 L1560.71 1210.82 L1560.12 1210.82 L1559.54 1210.82 L1558.95 1210.82 L1558.36 1210.82 L1557.78 1210.82 L1557.19 1210.82 L1556.6 1210.82 L1556.02 1210.82 L1555.43 1210.82 L1554.85 1210.82 L1554.26 1210.82 L1553.67 1210.82 L1553.09 1210.82 L1552.5 1210.82 L1551.91 1210.82 L1551.33 1210.82 L1550.74 1210.82 L1550.15 1210.82 L1549.57 1210.82 L1548.98 1210.82 L1548.4 1210.82 L1547.81 1210.82 L1547.22 1210.82 L1546.64 1210.82 L1546.05 1210.82 L1545.46 1210.82 L1544.88 1210.82 L1544.29 1210.82 L1543.7 1210.82 L1543.12 1210.82 L1542.53 1210.82 L1541.94 1210.82 L1541.36 1210.82 L1540.77 1210.82 L1540.19 1210.82 L1539.6 1210.82 L1539.01 1210.82 L1538.43 1210.82 L1537.84 1210.82 L1537.25 1210.82 L1536.67 1210.82 L1536.08 1210.82 L1535.49 1210.82 L1534.91 1210.82 L1534.32 1210.82 L1533.73 1210.82 L1533.15 1210.82 L1532.56 1210.82 L1531.98 1210.82 L1531.39 1210.82 L1530.8 1210.82 L1530.22 1210.82 L1529.63 1210.82 L1529.04 1210.82 L1528.46 1210.82 L1527.87 1210.82 L1527.28 1210.82 L1526.7 1210.82 L1526.11 1210.82 L1525.52 1210.82 L1524.94 1210.82 L1524.35 1210.82 L1523.77 1210.82 L1523.18 1210.82 L1522.59 1210.82 L1522.01 1210.82 L1521.42 1210.82 L1520.83 1210.82 L1520.25 1210.82 L1519.66 1210.82 L1519.07 1210.82 L1518.49 1210.82 L1517.9 1210.82 L1517.32 1210.82 L1516.73 1210.82 L1516.14 1210.82 L1515.56 1210.82 L1514.97 1210.82 L1514.38 1210.82 L1513.8 1210.82 L1513.21 1210.82 L1512.62 1210.82 L1512.04 1210.82 L1511.45 1210.82 L1510.86 1210.82 L1510.28 1210.82 L1509.69 1210.82 L1509.11 1210.82 L1508.52 1210.82 L1507.93 1210.82 L1507.35 1210.82 L1506.76 1210.82 L1506.17 1210.82 L1505.59 1210.82 L1505 1210.82 L1504.41 1210.82 L1503.83 1210.82 L1503.24 1210.82 L1502.65 1210.82 L1502.07 1210.82 L1501.48 1210.82 L1500.9 1210.82 L1500.31 1210.82 L1499.72 1210.82 L1499.14 1210.82 L1498.55 1210.82 L1497.96 1210.82 L1497.38 1210.82 L1496.79 1210.82 L1496.2 1210.82 L1495.62 1210.82 L1495.03 1210.82 L1494.45 1210.82 L1493.86 1210.82 L1493.27 1210.82 L1492.69 1210.82 L1492.1 1210.82 L1491.51 1210.82 L1490.93 1210.82 L1490.34 1210.82 L1489.75 1210.82 L1489.17 1210.82 L1488.58 1210.82 L1487.99 1210.82 L1487.41 1210.82 L1486.82 1210.82 L1486.24 1210.82 L1485.65 1210.82 L1485.06 1210.82 L1484.48 1210.82 L1483.89 1210.82 L1483.3 1210.82 L1482.72 1210.82 L1482.13 1210.82 L1481.54 1210.82 L1480.96 1210.82 L1480.37 1210.82 L1479.78 1210.82 L1479.2 1210.82 L1478.61 1210.82 L1478.03 1210.82 L1477.44 1210.82 L1476.85 1210.82 L1476.27 1210.82 L1475.68 1210.82 L1475.09 1210.82 L1474.51 1210.82 L1473.92 1210.82 L1473.33 1210.82 L1472.75 1210.82 L1472.16 1210.82 L1471.57 1210.82 L1470.99 1210.82 L1470.4 1210.82 L1469.82 1210.82 L1469.23 1210.82 L1468.64 1210.82 L1468.06 1210.82 L1467.47 1210.82 L1466.88 1210.82 L1466.3 1210.82 L1465.71 1210.82 L1465.12 1210.82 L1464.54 1210.82 L1463.95 1210.82 L1463.37 1210.82 L1462.78 1210.82 L1462.19 1210.82 L1461.61 1210.82 L1461.02 1210.82 L1460.43 1210.82 L1459.85 1210.82 L1459.26 1210.82 L1458.67 1210.82 L1458.09 1210.82 L1457.5 1210.82 L1456.91 1210.82 L1456.33 1210.82 L1455.74 1210.82 L1455.16 1210.82 L1454.57 1210.82 L1453.98 1210.82 L1453.4 1210.82 L1452.81 1210.82 L1452.22 1210.82 L1451.64 1210.82 L1451.05 1210.82 L1450.46 1210.82 L1449.88 1210.82 L1449.29 1210.82 L1448.7 1210.82 L1448.12 1210.82 L1447.53 1210.82 L1446.95 1210.82 L1446.36 1210.82 L1445.77 1210.82 L1445.19 1210.82 L1444.6 1210.82 L1444.01 1210.82 L1443.43 1210.82 L1442.84 1210.82 L1442.25 1210.82 L1441.67 1210.82 L1441.08 1210.82 L1440.5 1210.82 L1439.91 1210.82 L1439.32 1210.82 L1438.74 1210.82 L1438.15 1210.82 L1437.56 1210.82 L1436.98 1210.82 L1436.39 1210.82 L1435.8 1210.82 L1435.22 1210.82 L1434.63 1210.82 L1434.04 1210.82 L1433.46 1210.82 L1432.87 1210.82 L1432.29 1210.82 L1431.7 1210.82 L1431.11 1210.82 L1430.53 1210.82 L1429.94 1210.82 L1429.35 1210.82 L1428.77 1210.82 L1428.18 1210.82 L1427.59 1210.82 L1427.01 1210.82 L1426.42 1210.82 L1425.83 1210.82 L1425.25 1210.82 L1424.66 1210.82 L1424.08 1210.82 L1423.49 1210.82 L1422.9 1210.82 L1422.32 1210.82 L1421.73 1210.82 L1421.14 1210.82 L1420.56 1210.82 L1419.97 1210.82 L1419.38 1210.82 L1418.8 1210.82 L1418.21 1210.82 L1417.63 1210.82 L1417.04 1210.82 L1416.45 1210.82 L1415.87 1210.82 L1415.28 1210.82 L1414.69 1210.82 L1414.11 1210.82 L1413.52 1210.82 L1412.93 1210.82 L1412.35 1210.82 L1411.76 1210.82 L1411.17 1210.82 L1410.59 1210.82 L1410 1210.82 L1409.42 1210.82 L1408.83 1210.82 L1408.24 1210.82 L1407.66 1210.82 L1407.07 1210.82 L1406.48 1210.82 L1405.9 1210.82 L1405.31 1210.82 L1404.72 1210.82 L1404.14 1210.82 L1403.55 1210.82 L1402.96 1210.82 L1402.38 1210.82 L1401.79 1210.82 L1401.21 1210.82 L1400.62 1210.82 L1400.03 1210.82 L1399.45 1210.82 L1398.86 1210.82 L1398.27 1210.82 L1397.69 1210.82 L1397.1 1210.82 L1396.51 1210.82 L1395.93 1210.82 L1395.34 1210.82 L1394.75 1210.82 L1394.17 1210.82 L1393.58 1210.82 L1393 1210.82 L1392.41 1210.82 L1391.82 1210.82 L1391.24 1210.82 L1390.65 1210.82 L1390.06 1210.82 L1389.48 1210.82 L1388.89 1210.82 L1388.3 1210.82 L1387.72 1210.82 L1387.13 1210.82 L1386.55 1210.82 L1385.96 1210.82 L1385.37 1210.82 L1384.79 1210.82 L1384.2 1210.82 L1383.61 1210.82 L1383.03 1210.82 L1382.44 1210.82 L1381.85 1210.82 L1381.27 1210.82 L1380.68 1210.82 L1380.09 1210.82 L1379.51 1210.82 L1378.92 1210.82 L1378.34 1210.82 L1377.75 1210.82 L1377.16 1210.82 L1376.58 1210.82 L1375.99 1210.82 L1375.4 1210.82 L1374.82 1210.82 L1374.23 1210.82 L1373.64 1210.82 L1373.06 1210.82 L1372.47 1210.82 L1371.88 1210.82 L1371.3 1210.82 L1370.71 1210.82 L1370.13 1210.82 L1369.54 1210.82 L1368.95 1210.82 L1368.37 1210.82 L1367.78 1210.82 L1367.19 1210.82 L1366.61 1210.82 L1366.02 1210.82 L1365.43 1210.82 L1364.85 1210.82 L1364.26 1210.82 L1363.68 1210.82 L1363.09 1210.82 L1362.5 1210.82 L1361.92 1210.82 L1361.33 1210.82 L1360.74 1210.82 L1360.16 1210.82 L1359.57 1210.82 L1358.98 1210.82 L1358.4 1210.82 L1357.81 1210.82 L1357.22 1210.82 L1356.64 1210.82 L1356.05 1210.82 L1355.47 1210.82 L1354.88 1210.82 L1354.29 1210.82 L1353.71 1210.82 L1353.12 1210.82 L1352.53 1210.82 L1351.95 1210.82 L1351.36 1210.82 L1350.77 1210.82 L1350.19 1210.82 L1349.6 1210.82 L1349.01 1210.82 L1348.43 1210.82 L1347.84 1210.82 L1347.26 1210.82 L1346.67 1210.82 L1346.08 1210.82 L1345.5 1210.82 L1344.91 1210.82 L1344.32 1210.82 L1343.74 1210.82 L1343.15 1210.82 L1342.56 1210.82 L1341.98 1210.82 L1341.39 1210.82 L1340.8 1210.82 L1340.22 1210.82 L1339.63 1210.82 L1339.05 1210.82 L1338.46 1210.82 L1337.87 1210.82 L1337.29 1210.82 L1336.7 1210.82 L1336.11 1210.82 L1335.53 1210.82 L1334.94 1210.82 L1334.35 1210.82 L1333.77 1210.82 L1333.18 1210.82 L1332.6 1210.82 L1332.01 1210.82 L1331.42 1210.82 L1330.84 1210.82 L1330.25 1210.82 L1329.66 1210.82 L1329.08 1210.82 L1328.49 1210.82 L1327.9 1210.82 L1327.32 1210.82 L1326.73 1210.82 L1326.14 1210.82 L1325.56 1210.82 L1324.97 1210.82 L1324.39 1210.82 L1323.8 1210.82 L1323.21 1210.82 L1322.63 1210.82 L1322.04 1210.82 L1321.45 1210.82 L1320.87 1210.82 L1320.28 1210.82 L1319.69 1210.82 L1319.11 1210.82 L1318.52 1210.82 L1317.93 1210.82 L1317.35 1210.82 L1316.76 1210.82 L1316.18 1210.82 L1315.59 1210.82 L1315 1210.82 L1314.42 1210.82 L1313.83 1210.82 L1313.24 1210.82 L1312.66 1210.82 L1312.07 1210.82 L1311.48 1210.82 L1310.9 1210.82 L1310.31 1210.82 L1309.73 1210.82 L1309.14 1210.82 L1308.55 1210.82 L1307.97 1210.82 L1307.38 1210.82 L1306.79 1210.82 L1306.21 1210.82 L1305.62 1210.82 L1305.03 1210.82 L1304.45 1210.82 L1303.86 1210.82 L1303.27 1210.82 L1302.69 1210.82 L1302.1 1210.82 L1301.52 1210.82 L1300.93 1210.82 L1300.34 1210.82 L1299.76 1210.82 L1299.17 1210.82 L1298.58 1210.82 L1298 1210.82 L1297.41 1210.82 L1296.82 1210.82 L1296.24 1210.82 L1295.65 1210.82 L1295.06 1210.82 L1294.48 1210.82 L1293.89 1210.82 L1293.31 1210.82 L1292.72 1210.82 L1292.13 1210.82 L1291.55 1210.82 L1290.96 1210.82 L1290.37 1210.82 L1289.79 1210.82 L1289.2 1210.82 L1288.61 1210.82 L1288.03 1210.82 L1287.44 1210.82 L1286.86 1210.82 L1286.27 1210.82 L1285.68 1210.82 L1285.1 1210.82 L1284.51 1210.82 L1283.92 1210.82 L1283.34 1210.82 L1282.75 1210.82 L1282.16 1210.82 L1281.58 1210.82 L1280.99 1210.82 L1280.4 1210.82 L1279.82 1210.82 L1279.23 1210.82 L1278.65 1210.82 L1278.06 1210.82 L1277.47 1210.82 L1276.89 1210.82 L1276.3 1210.82 L1275.71 1210.82 L1275.13 1210.82 L1274.54 1210.82 L1273.95 1210.82 L1273.37 1210.82 L1272.78 1210.82 L1272.19 1210.82 L1271.61 1210.82 L1271.02 1210.82 L1270.44 1210.82 L1269.85 1210.82 L1269.26 1210.82 L1268.68 1210.82 L1268.09 1210.82 L1267.5 1210.82 L1266.92 1210.82 L1266.33 1210.82 L1265.74 1210.82 L1265.16 1210.82 L1264.57 1210.82 L1263.98 1210.82 L1263.4 1210.82 L1262.81 1210.82 L1262.23 1210.82 L1261.64 1210.82 L1261.05 1210.82 L1260.47 1210.82 L1259.88 1210.82 L1259.29 1210.82 L1258.71 1210.82 L1258.12 1210.82 L1257.53 1210.82 L1256.95 1210.82 L1256.36 1210.82 L1255.78 1210.82 L1255.19 1210.82 L1254.6 1210.82 L1254.02 1210.82 L1253.43 1210.82 L1252.84 1210.82 L1252.26 1210.82 L1251.67 1210.82 L1251.08 1210.82 L1250.5 1210.82 L1249.91 1210.82 L1249.32 1210.82 L1248.74 1210.82 L1248.15 1210.82 L1247.57 1210.82 L1246.98 1210.82 L1246.39 1210.82 L1245.81 1210.82 L1245.22 1210.82 L1244.63 1210.82 L1244.05 1210.82 L1243.46 1210.82 L1242.87 1210.82 L1242.29 1210.82 L1241.7 1210.82 L1241.11 1210.82 L1240.53 1210.82 L1239.94 1210.82 L1239.36 1210.82 L1238.77 1210.82 L1238.18 1210.82 L1237.6 1210.82 L1237.01 1210.82 L1236.42 1210.82 L1235.84 1210.82 L1235.25 1210.82 L1234.66 1210.82 L1234.08 1210.82 L1233.49 1210.82 L1232.91 1210.82 L1232.32 1210.82 L1231.73 1210.82 L1231.15 1210.82 L1230.56 1210.82 L1229.97 1210.82 L1229.39 1210.82 L1228.8 1210.82 L1228.21 1210.82 L1227.63 1210.82 L1227.04 1210.82 L1226.45 1210.82 L1225.87 1210.82 L1225.28 1210.82 L1224.7 1210.82 L1224.11 1210.82 L1223.52 1210.82 L1222.94 1210.82 L1222.35 1210.82 L1221.76 1210.82 L1221.18 1210.82 L1220.59 1210.82 L1220 1210.82 L1219.42 1210.82 L1218.83 1210.82 L1218.24 1210.82 L1217.66 1210.82 L1217.07 1210.82 L1216.49 1210.82 L1215.9 1210.82 L1215.31 1210.82 L1214.73 1210.82 L1214.14 1210.82 L1213.55 1210.82 L1212.97 1210.82 L1212.38 1210.82 L1211.79 1210.82 L1211.21 1210.82 L1210.62 1210.82 L1210.03 1210.82 L1209.45 1210.82 L1208.86 1210.82 L1208.28 1210.82 L1207.69 1210.82 L1207.1 1210.82 L1206.52 1210.82 L1205.93 1210.82 L1205.34 1210.82 L1204.76 1210.82 L1204.17 1210.82 L1203.58 1210.82 L1203 1210.82 L1202.41 1210.82 L1201.83 1210.82 L1201.24 1210.82 L1200.65 1210.82 L1200.07 1210.82 L1199.48 1210.82 L1198.89 1210.82 L1198.31 1210.82 L1197.72 1210.82 L1197.13 1210.82 L1196.55 1210.82 L1195.96 1210.82 L1195.37 1210.82 L1194.79 1210.82 L1194.2 1210.82 L1193.62 1210.82 L1193.03 1210.82 L1192.44 1210.82 L1191.86 1210.82 L1191.27 1210.82 L1190.68 1210.82 L1190.1 1210.82 L1189.51 1210.82 L1188.92 1210.82 L1188.34 1210.82 L1187.75 1210.82 L1187.16 1210.82 L1186.58 1210.82 L1185.99 1210.82 L1185.41 1210.82 L1184.82 1210.82 L1184.23 1210.82 L1183.65 1210.82 L1183.06 1210.82 L1182.47 1210.82 L1181.89 1210.82 L1181.3 1210.82 L1180.71 1210.82 L1180.13 1210.82 L1179.54 1210.82 L1178.96 1210.82 L1178.37 1210.82 L1177.78 1210.82 L1177.2 1210.82 L1176.61 1210.82 L1176.02 1210.82 L1175.44 1210.82 L1174.85 1210.82 L1174.26 1210.82 L1173.68 1210.82 L1173.09 1210.82 L1172.5 1210.82 L1171.92 1210.82 L1171.33 1210.82 L1170.75 1210.82 L1170.16 1210.82 L1169.57 1210.82 L1168.99 1210.82 L1168.4 1210.82 L1167.81 1210.82 L1167.23 1210.82 L1166.64 1210.82 L1166.05 1210.82 L1165.47 1210.82 L1164.88 1210.82 L1164.29 1210.82 L1163.71 1210.82 L1163.12 1210.82 L1162.54 1210.82 L1161.95 1210.82 L1161.36 1210.82 L1160.78 1210.82 L1160.19 1210.82 L1159.6 1210.82 L1159.02 1210.82 L1158.43 1210.82 L1157.84 1210.82 L1157.26 1210.82 L1156.67 1210.82 L1156.09 1210.82 L1155.5 1210.82 L1154.91 1210.82 L1154.33 1210.82 L1153.74 1210.82 L1153.15 1210.82 L1152.57 1210.82 L1151.98 1210.82 L1151.39 1210.82 L1150.81 1210.82 L1150.22 1210.82 L1149.63 1210.82 L1149.05 1210.82 L1148.46 1210.82 L1147.88 1210.82 L1147.29 1210.82 L1146.7 1210.82 L1146.12 1210.82 L1145.53 1210.82 L1144.94 1210.82 L1144.36 1210.82 L1143.77 1210.82 L1143.18 1210.82 L1142.6 1210.82 L1142.01 1210.82 L1141.42 1210.82 L1140.84 1210.82 L1140.25 1210.82 L1139.67 1210.82 L1139.08 1210.82 L1138.49 1210.82 L1137.91 1210.82 L1137.32 1210.82 L1136.73 1210.82 L1136.15 1210.82 L1135.56 1210.82 L1134.97 1210.82 L1134.39 1210.82 L1133.8 1210.82 L1133.21 1210.82 L1132.63 1210.82 L1132.04 1210.82 L1131.46 1210.82 L1130.87 1210.82 L1130.28 1210.82 L1129.7 1210.82 L1129.11 1210.82 L1128.52 1210.82 L1127.94 1210.82 L1127.35 1210.82 L1126.76 1210.82 L1126.18 1210.82 L1125.59 1210.82 L1125.01 1210.82 L1124.42 1210.82 L1123.83 1210.82 L1123.25 1210.82 L1122.66 1210.82 L1122.07 1210.82 L1121.49 1210.82 L1120.9 1210.82 L1120.31 1210.82 L1119.73 1210.82 L1119.14 1210.82 L1118.55 1210.82 L1117.97 1210.82 L1117.38 1210.82 L1116.8 1210.82 L1116.21 1210.82 L1115.62 1210.82 L1115.04 1210.82 L1114.45 1210.82 L1113.86 1210.82 L1113.28 1210.82 L1112.69 1210.82 L1112.1 1210.82 L1111.52 1210.82 L1110.93 1210.82 L1110.34 1210.82 L1109.76 1210.82 L1109.17 1210.82 L1108.59 1210.82 L1108 1210.82 L1107.41 1210.82 L1106.83 1210.82 L1106.24 1210.82 L1105.65 1210.82 L1105.07 1210.82 L1104.48 1210.82 L1103.89 1210.82 L1103.31 1210.82 L1102.72 1210.82 L1102.14 1210.82 L1101.55 1210.82 L1100.96 1210.82 L1100.38 1210.82 L1099.79 1210.82 L1099.2 1210.82 L1098.62 1210.82 L1098.03 1210.82 L1097.44 1210.82 L1096.86 1210.82 L1096.27 1210.82 L1095.68 1210.82 L1095.1 1210.82 L1094.51 1210.82 L1093.93 1210.82 L1093.34 1210.82 L1092.75 1210.82 L1092.17 1210.82 L1091.58 1210.82 L1090.99 1210.82 L1090.41 1210.82 L1089.82 1210.82 L1089.23 1210.82 L1088.65 1210.82 L1088.06 1210.82 L1087.47 1210.82 L1086.89 1210.82 L1086.3 1210.82 L1085.72 1210.82 L1085.13 1210.82 L1084.54 1210.82 L1083.96 1210.82 L1083.37 1210.82 L1082.78 1210.82 L1082.2 1210.82 L1081.61 1210.82 L1081.02 1210.82 L1080.44 1210.82 L1079.85 1210.82 L1079.26 1210.82 L1078.68 1210.82 L1078.09 1210.82 L1077.51 1210.82 L1076.92 1210.82 L1076.33 1210.82 L1075.75 1210.82 L1075.16 1210.82 L1074.57 1210.82 L1073.99 1210.82 L1073.4 1210.82 L1072.81 1210.82 L1072.23 1210.82 L1071.64 1210.82 L1071.06 1210.82 L1070.47 1210.82 L1069.88 1210.82 L1069.3 1210.82 L1068.71 1210.82 L1068.12 1210.82 L1067.54 1210.82 L1066.95 1210.82 L1066.36 1210.82 L1065.78 1210.82 L1065.19 1210.82 L1064.6 1210.82 L1064.02 1210.82 L1063.43 1210.82 L1062.85 1210.82 L1062.26 1210.82 L1061.67 1210.82 L1061.09 1210.82 L1060.5 1210.82 L1059.91 1210.82 L1059.33 1210.82 L1058.74 1210.82 L1058.15 1210.82 L1057.57 1210.82 L1056.98 1210.82 L1056.39 1210.82 L1055.81 1210.82 L1055.22 1210.82 L1054.64 1210.82 L1054.05 1210.82 L1053.46 1210.82 L1052.88 1210.82 L1052.29 1210.82 L1051.7 1210.82 L1051.12 1210.82 L1050.53 1210.82 L1049.94 1210.82 L1049.36 1210.82 L1048.77 1210.82 L1048.19 1210.82 L1047.6 1210.82 L1047.01 1210.82 L1046.43 1210.82 L1045.84 1210.82 L1045.25 1210.82 L1044.67 1210.82 L1044.08 1210.82 L1043.49 1210.82 L1042.91 1210.82 L1042.32 1210.82 L1041.73 1210.82 L1041.15 1210.82 L1040.56 1210.82 L1039.98 1210.82 L1039.39 1210.82 L1038.8 1210.82 L1038.22 1210.82 L1037.63 1210.82 L1037.04 1210.82 L1036.46 1210.82 L1035.87 1210.82 L1035.28 1210.82 L1034.7 1210.82 L1034.11 1210.82 L1033.52 1210.82 L1032.94 1210.82 L1032.35 1210.82 L1031.77 1210.82 L1031.18 1210.82 L1030.59 1210.82 L1030.01 1210.82 L1029.42 1210.82 L1028.83 1210.82 L1028.25 1210.82 L1027.66 1210.82 L1027.07 1210.82 L1026.49 1210.82 L1025.9 1210.82 L1025.32 1210.82 L1024.73 1210.82 L1024.14 1210.82 L1023.56 1210.82 L1022.97 1210.82 L1022.38 1210.82 L1021.8 1210.82 L1021.21 1210.82 L1020.62 1210.82 L1020.04 1210.82 L1019.45 1210.82 L1018.86 1210.82 L1018.28 1210.82 L1017.69 1210.82 L1017.11 1210.82 L1016.52 1210.82 L1015.93 1210.82 L1015.35 1210.82 L1014.76 1210.82 L1014.17 1210.82 L1013.59 1210.82 L1013 1210.82 L1012.41 1210.82 L1011.83 1210.82 L1011.24 1210.82 L1010.65 1210.82 L1010.07 1210.82 L1009.48 1210.82 L1008.9 1210.82 L1008.31 1210.82 L1007.72 1210.82 L1007.14 1210.82 L1006.55 1210.82 L1005.96 1210.82 L1005.38 1210.82 L1004.79 1210.82 L1004.2 1210.82 L1003.62 1210.82 L1003.03 1210.82 L1002.44 1210.82 L1001.86 1210.82 L1001.27 1210.82 L1000.69 1210.82 L1000.1 1210.82 L999.513 1210.82 L998.926 1210.82 L998.34 1210.82 L997.754 1210.82 L997.167 1210.82 L996.581 1210.82 L995.994 1210.82 L995.408 1210.82 L994.822 1210.82 L994.235 1210.82 L993.649 1210.82 L993.062 1210.82 L992.476 1210.82 L991.889 1210.82 L991.303 1210.82 L990.717 1210.82 L990.13 1210.82 L989.544 1210.82 L988.957 1210.82 L988.371 1210.82 L987.785 1210.82 L987.198 1210.82 L986.612 1210.82 L986.025 1210.82  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.88 986.612,1210.88 987.198,1210.88 987.785,1210.88 988.371,1210.88 988.957,1210.88 989.544,1210.88 990.13,1210.88 990.717,1210.88 991.303,1210.88 991.889,1210.88 992.476,1210.88 993.062,1210.88 993.649,1210.88 994.235,1210.88 994.822,1210.88 995.408,1210.88 995.994,1210.88 996.581,1210.88 997.167,1210.88 997.754,1210.88 998.34,1210.88 998.926,1210.88 999.513,1210.88 1000.1,1210.88 1000.69,1210.88 1001.27,1210.88 1001.86,1210.88 1002.44,1210.88 1003.03,1210.88 1003.62,1210.88 1004.2,1210.88 1004.79,1210.88 1005.38,1210.88 1005.96,1210.88 1006.55,1210.88 1007.14,1210.88 1007.72,1210.88 1008.31,1210.88 1008.9,1210.88 1009.48,1210.88 1010.07,1210.88 1010.65,1210.88 1011.24,1210.88 1011.83,1210.88 1012.41,1210.88 1013,1210.88 1013.59,1210.88 1014.17,1210.88 1014.76,1210.88 1015.35,1210.88 1015.93,1210.88 1016.52,1210.88 1017.11,1210.88 1017.69,1210.88 1018.28,1210.88 1018.86,1210.88 1019.45,1210.88 1020.04,1210.88 1020.62,1210.88 1021.21,1210.88 1021.8,1210.88 1022.38,1210.88 1022.97,1210.88 1023.56,1210.88 1024.14,1210.88 1024.73,1210.88 1025.32,1210.88 1025.9,1210.88 1026.49,1210.88 1027.07,1210.88 1027.66,1210.88 1028.25,1210.88 1028.83,1210.88 1029.42,1210.88 1030.01,1210.88 1030.59,1210.88 1031.18,1210.88 1031.77,1210.88 1032.35,1210.88 1032.94,1210.88 1033.52,1210.88 1034.11,1210.88 1034.7,1210.88 1035.28,1210.88 1035.87,1210.88 1036.46,1210.88 1037.04,1210.88 1037.63,1210.88 1038.22,1210.88 1038.8,1210.88 1039.39,1210.88 1039.98,1210.88 1040.56,1210.88 1041.15,1210.88 1041.73,1210.88 1042.32,1210.88 1042.91,1210.88 1043.49,1210.88 1044.08,1210.88 1044.67,1210.88 1045.25,1210.88 1045.84,1210.88 1046.43,1210.88 1047.01,1210.88 1047.6,1210.88 1048.19,1210.88 1048.77,1210.88 1049.36,1210.88 1049.94,1210.88 1050.53,1210.88 1051.12,1210.88 1051.7,1210.88 1052.29,1210.88 1052.88,1210.88 1053.46,1210.88 1054.05,1210.88 1054.64,1210.88 1055.22,1210.88 1055.81,1210.88 1056.39,1210.88 1056.98,1210.88 1057.57,1210.88 1058.15,1210.88 1058.74,1210.88 1059.33,1210.88 1059.91,1210.88 1060.5,1210.88 1061.09,1210.88 1061.67,1210.88 1062.26,1210.88 1062.85,1210.88 1063.43,1210.88 1064.02,1210.88 1064.6,1210.88 1065.19,1210.88 1065.78,1210.88 1066.36,1210.88 1066.95,1210.88 1067.54,1210.88 1068.12,1210.88 1068.71,1210.88 1069.3,1210.88 1069.88,1210.88 1070.47,1210.88 1071.06,1210.88 1071.64,1210.88 1072.23,1210.88 1072.81,1210.88 1073.4,1210.88 1073.99,1210.88 1074.57,1210.88 1075.16,1210.88 1075.75,1210.88 1076.33,1210.88 1076.92,1210.88 1077.51,1210.88 1078.09,1210.88 1078.68,1210.88 1079.26,1210.88 1079.85,1210.88 1080.44,1210.88 1081.02,1210.88 1081.61,1210.88 1082.2,1210.88 1082.78,1210.88 1083.37,1210.88 1083.96,1210.88 1084.54,1210.88 1085.13,1210.88 1085.72,1210.88 1086.3,1210.88 1086.89,1210.88 1087.47,1210.88 1088.06,1210.88 1088.65,1210.88 1089.23,1210.88 1089.82,1210.88 1090.41,1210.88 1090.99,1210.88 1091.58,1210.88 1092.17,1210.88 1092.75,1210.88 1093.34,1210.88 1093.93,1210.88 1094.51,1210.88 1095.1,1210.88 1095.68,1210.88 1096.27,1210.88 1096.86,1210.88 1097.44,1210.88 1098.03,1210.88 1098.62,1210.88 1099.2,1210.88 1099.79,1210.88 1100.38,1210.88 1100.96,1210.88 1101.55,1210.88 1102.14,1210.88 1102.72,1210.88 1103.31,1210.88 1103.89,1210.88 1104.48,1210.88 1105.07,1210.88 1105.65,1210.88 1106.24,1210.88 1106.83,1210.88 1107.41,1210.88 1108,1210.88 1108.59,1210.88 1109.17,1210.88 1109.76,1210.88 1110.34,1210.88 1110.93,1210.88 1111.52,1210.88 1112.1,1210.88 1112.69,1210.88 1113.28,1210.88 1113.86,1210.88 1114.45,1210.88 1115.04,1210.88 1115.62,1210.88 1116.21,1210.88 1116.8,1210.88 1117.38,1210.88 1117.97,1210.88 1118.55,1210.88 1119.14,1210.88 1119.73,1210.88 1120.31,1210.88 1120.9,1210.88 1121.49,1210.88 1122.07,1210.88 1122.66,1210.88 1123.25,1210.88 1123.83,1210.88 1124.42,1210.88 1125.01,1210.88 1125.59,1210.88 1126.18,1210.88 1126.76,1210.88 1127.35,1210.88 1127.94,1210.88 1128.52,1210.88 1129.11,1210.88 1129.7,1210.88 1130.28,1210.88 1130.87,1210.88 1131.46,1210.88 1132.04,1210.88 1132.63,1210.88 1133.21,1210.88 1133.8,1210.88 1134.39,1210.88 1134.97,1210.88 1135.56,1210.88 1136.15,1210.88 1136.73,1210.88 1137.32,1210.88 1137.91,1210.88 1138.49,1210.88 1139.08,1210.88 1139.67,1210.88 1140.25,1210.88 1140.84,1210.88 1141.42,1210.88 1142.01,1210.88 1142.6,1210.88 1143.18,1210.88 1143.77,1210.88 1144.36,1210.88 1144.94,1210.88 1145.53,1210.88 1146.12,1210.88 1146.7,1210.88 1147.29,1210.88 1147.88,1210.88 1148.46,1210.88 1149.05,1210.88 1149.63,1210.88 1150.22,1210.88 1150.81,1210.88 1151.39,1210.88 1151.98,1210.88 1152.57,1210.88 1153.15,1210.88 1153.74,1210.88 1154.33,1210.88 1154.91,1210.88 1155.5,1210.88 1156.09,1210.88 1156.67,1210.88 1157.26,1210.88 1157.84,1210.88 1158.43,1210.88 1159.02,1210.88 1159.6,1210.88 1160.19,1210.88 1160.78,1210.88 1161.36,1210.88 1161.95,1210.88 1162.54,1210.88 1163.12,1210.88 1163.71,1210.88 1164.29,1210.88 1164.88,1210.88 1165.47,1210.88 1166.05,1210.88 1166.64,1210.88 1167.23,1210.88 1167.81,1210.88 1168.4,1210.88 1168.99,1210.88 1169.57,1210.88 1170.16,1210.88 1170.75,1210.88 1171.33,1210.88 1171.92,1210.88 1172.5,1210.88 1173.09,1210.88 1173.68,1210.88 1174.26,1210.88 1174.85,1210.88 1175.44,1210.88 1176.02,1210.88 1176.61,1210.88 1177.2,1210.88 1177.78,1210.88 1178.37,1210.88 1178.96,1210.88 1179.54,1210.88 1180.13,1210.88 1180.71,1210.88 1181.3,1210.88 1181.89,1210.88 1182.47,1210.88 1183.06,1210.88 1183.65,1210.88 1184.23,1210.88 1184.82,1210.88 1185.41,1210.88 1185.99,1210.88 1186.58,1210.88 1187.16,1210.88 1187.75,1210.88 1188.34,1210.88 1188.92,1210.88 1189.51,1210.88 1190.1,1210.88 1190.68,1210.88 1191.27,1210.88 1191.86,1210.88 1192.44,1210.88 1193.03,1210.88 1193.62,1210.88 1194.2,1210.88 1194.79,1210.88 1195.37,1210.88 1195.96,1210.88 1196.55,1210.88 1197.13,1210.88 1197.72,1210.88 1198.31,1210.88 1198.89,1210.88 1199.48,1210.88 1200.07,1210.88 1200.65,1210.88 1201.24,1210.88 1201.83,1210.88 1202.41,1210.88 1203,1210.88 1203.58,1210.88 1204.17,1210.88 1204.76,1210.88 1205.34,1210.88 1205.93,1210.88 1206.52,1210.88 1207.1,1210.88 1207.69,1210.88 1208.28,1210.88 1208.86,1210.88 1209.45,1210.88 1210.03,1210.88 1210.62,1210.88 1211.21,1210.88 1211.79,1210.88 1212.38,1210.88 1212.97,1210.88 1213.55,1210.88 1214.14,1210.88 1214.73,1210.88 1215.31,1210.88 1215.9,1210.88 1216.49,1210.88 1217.07,1210.88 1217.66,1210.88 1218.24,1210.88 1218.83,1210.88 1219.42,1210.88 1220,1210.88 1220.59,1210.88 1221.18,1210.88 1221.76,1210.88 1222.35,1210.88 1222.94,1210.88 1223.52,1210.88 1224.11,1210.88 1224.7,1210.88 1225.28,1210.88 1225.87,1210.88 1226.45,1210.88 1227.04,1210.88 1227.63,1210.88 1228.21,1210.88 1228.8,1210.88 1229.39,1210.88 1229.97,1210.88 1230.56,1210.88 1231.15,1210.88 1231.73,1210.88 1232.32,1210.88 1232.91,1210.88 1233.49,1210.88 1234.08,1210.88 1234.66,1210.88 1235.25,1210.88 1235.84,1210.88 1236.42,1210.88 1237.01,1210.88 1237.6,1210.88 1238.18,1210.88 1238.77,1210.88 1239.36,1210.88 1239.94,1210.88 1240.53,1210.88 1241.11,1210.88 1241.7,1210.88 1242.29,1210.88 1242.87,1210.88 1243.46,1210.88 1244.05,1210.88 1244.63,1210.88 1245.22,1210.88 1245.81,1210.88 1246.39,1210.88 1246.98,1210.88 1247.57,1210.88 1248.15,1210.88 1248.74,1210.88 1249.32,1210.88 1249.91,1210.88 1250.5,1210.88 1251.08,1210.88 1251.67,1210.88 1252.26,1210.88 1252.84,1210.88 1253.43,1210.88 1254.02,1210.88 1254.6,1210.88 1255.19,1210.88 1255.78,1210.88 1256.36,1210.88 1256.95,1210.88 1257.53,1210.88 1258.12,1210.88 1258.71,1210.88 1259.29,1210.88 1259.88,1210.88 1260.47,1210.88 1261.05,1210.88 1261.64,1210.88 1262.23,1210.88 1262.81,1210.88 1263.4,1210.88 1263.98,1210.88 1264.57,1210.88 1265.16,1210.88 1265.74,1210.88 1266.33,1210.88 1266.92,1210.88 1267.5,1210.88 1268.09,1210.88 1268.68,1210.88 1269.26,1210.88 1269.85,1210.88 1270.44,1210.88 1271.02,1210.88 1271.61,1210.88 1272.19,1210.88 1272.78,1210.88 1273.37,1210.88 1273.95,1210.88 1274.54,1210.88 1275.13,1210.88 1275.71,1210.88 1276.3,1210.88 1276.89,1210.88 1277.47,1210.88 1278.06,1210.88 1278.65,1210.88 1279.23,1210.88 1279.82,1210.88 1280.4,1210.88 1280.99,1210.88 1281.58,1210.88 1282.16,1210.88 1282.75,1210.88 1283.34,1210.88 1283.92,1210.88 1284.51,1210.88 1285.1,1210.88 1285.68,1210.88 1286.27,1210.88 1286.86,1210.88 1287.44,1210.88 1288.03,1210.88 1288.61,1210.88 1289.2,1210.88 1289.79,1210.88 1290.37,1210.88 1290.96,1210.88 1291.55,1210.88 1292.13,1210.88 1292.72,1210.88 1293.31,1210.88 1293.89,1210.88 1294.48,1210.88 1295.06,1210.88 1295.65,1210.88 1296.24,1210.88 1296.82,1210.88 1297.41,1210.88 1298,1210.88 1298.58,1210.88 1299.17,1210.88 1299.76,1210.88 1300.34,1210.88 1300.93,1210.88 1301.52,1210.88 1302.1,1210.88 1302.69,1210.88 1303.27,1210.88 1303.86,1210.88 1304.45,1210.88 1305.03,1210.88 1305.62,1210.88 1306.21,1210.88 1306.79,1210.88 1307.38,1210.88 1307.97,1210.88 1308.55,1210.88 1309.14,1210.88 1309.73,1210.88 1310.31,1210.88 1310.9,1210.88 1311.48,1210.88 1312.07,1210.88 1312.66,1210.88 1313.24,1210.88 1313.83,1210.88 1314.42,1210.88 1315,1210.88 1315.59,1210.88 1316.18,1210.88 1316.76,1210.88 1317.35,1210.88 1317.93,1210.88 1318.52,1210.88 1319.11,1210.88 1319.69,1210.88 1320.28,1210.88 1320.87,1210.88 1321.45,1210.88 1322.04,1210.88 1322.63,1210.88 1323.21,1210.88 1323.8,1210.88 1324.39,1210.88 1324.97,1210.88 1325.56,1210.88 1326.14,1210.88 1326.73,1210.88 1327.32,1210.88 1327.9,1210.88 1328.49,1210.88 1329.08,1210.88 1329.66,1210.88 1330.25,1210.88 1330.84,1210.88 1331.42,1210.88 1332.01,1210.88 1332.6,1210.88 1333.18,1210.88 1333.77,1210.88 1334.35,1210.88 1334.94,1210.88 1335.53,1210.88 1336.11,1210.88 1336.7,1210.88 1337.29,1210.88 1337.87,1210.88 1338.46,1210.88 1339.05,1210.88 1339.63,1210.88 1340.22,1210.88 1340.8,1210.88 1341.39,1210.88 1341.98,1210.88 1342.56,1210.88 1343.15,1210.88 1343.74,1210.88 1344.32,1210.88 1344.91,1210.88 1345.5,1210.88 1346.08,1210.88 1346.67,1210.88 1347.26,1210.88 1347.84,1210.88 1348.43,1210.88 1349.01,1210.88 1349.6,1210.88 1350.19,1210.88 1350.77,1210.88 1351.36,1210.88 1351.95,1210.88 1352.53,1210.88 1353.12,1210.88 1353.71,1210.88 1354.29,1210.88 1354.88,1210.88 1355.47,1210.88 1356.05,1210.88 1356.64,1210.88 1357.22,1210.88 1357.81,1210.88 1358.4,1210.88 1358.98,1210.88 1359.57,1210.88 1360.16,1210.88 1360.74,1210.88 1361.33,1210.88 1361.92,1210.88 1362.5,1210.88 1363.09,1210.88 1363.68,1210.88 1364.26,1210.88 1364.85,1210.88 1365.43,1210.88 1366.02,1210.88 1366.61,1210.88 1367.19,1210.88 1367.78,1210.88 1368.37,1210.88 1368.95,1210.88 1369.54,1210.88 1370.13,1210.88 1370.71,1210.88 1371.3,1210.88 1371.88,1210.88 1372.47,1210.88 1373.06,1210.88 1373.64,1210.88 1374.23,1210.88 1374.82,1210.88 1375.4,1210.88 1375.99,1210.88 1376.58,1210.88 1377.16,1210.88 1377.75,1210.88 1378.34,1210.88 1378.92,1210.88 1379.51,1210.88 1380.09,1210.88 1380.68,1210.88 1381.27,1210.88 1381.85,1210.88 1382.44,1210.88 1383.03,1210.88 1383.61,1210.88 1384.2,1210.88 1384.79,1210.88 1385.37,1210.88 1385.96,1210.88 1386.55,1210.88 1387.13,1210.88 1387.72,1210.88 1388.3,1210.88 1388.89,1210.88 1389.48,1210.88 1390.06,1210.88 1390.65,1210.88 1391.24,1210.88 1391.82,1210.88 1392.41,1210.88 1393,1210.88 1393.58,1210.88 1394.17,1210.88 1394.75,1210.88 1395.34,1210.88 1395.93,1210.88 1396.51,1210.88 1397.1,1210.88 1397.69,1210.88 1398.27,1210.88 1398.86,1210.88 1399.45,1210.88 1400.03,1210.88 1400.62,1210.88 1401.21,1210.88 1401.79,1210.88 1402.38,1210.88 1402.96,1210.88 1403.55,1210.88 1404.14,1210.88 1404.72,1210.88 1405.31,1210.88 1405.9,1210.88 1406.48,1210.88 1407.07,1210.88 1407.66,1210.88 1408.24,1210.88 1408.83,1210.88 1409.42,1210.88 1410,1210.88 1410.59,1210.88 1411.17,1210.88 1411.76,1210.88 1412.35,1210.88 1412.93,1210.88 1413.52,1210.88 1414.11,1210.88 1414.69,1210.88 1415.28,1210.88 1415.87,1210.88 1416.45,1210.88 1417.04,1210.88 1417.63,1210.88 1418.21,1210.88 1418.8,1210.88 1419.38,1210.88 1419.97,1210.88 1420.56,1210.88 1421.14,1210.88 1421.73,1210.88 1422.32,1210.88 1422.9,1210.88 1423.49,1210.88 1424.08,1210.88 1424.66,1210.88 1425.25,1210.88 1425.83,1210.88 1426.42,1210.88 1427.01,1210.88 1427.59,1210.88 1428.18,1210.88 1428.77,1210.88 1429.35,1210.88 1429.94,1210.88 1430.53,1210.88 1431.11,1210.88 1431.7,1210.88 1432.29,1210.88 1432.87,1210.88 1433.46,1210.88 1434.04,1210.88 1434.63,1210.88 1435.22,1210.88 1435.8,1210.88 1436.39,1210.88 1436.98,1210.88 1437.56,1210.88 1438.15,1210.88 1438.74,1210.88 1439.32,1210.88 1439.91,1210.88 1440.5,1210.88 1441.08,1210.88 1441.67,1210.88 1442.25,1210.88 1442.84,1210.88 1443.43,1210.88 1444.01,1210.88 1444.6,1210.88 1445.19,1210.88 1445.77,1210.88 1446.36,1210.88 1446.95,1210.88 1447.53,1210.88 1448.12,1210.88 1448.7,1210.88 1449.29,1210.88 1449.88,1210.88 1450.46,1210.88 1451.05,1210.88 1451.64,1210.88 1452.22,1210.88 1452.81,1210.88 1453.4,1210.88 1453.98,1210.88 1454.57,1210.88 1455.16,1210.88 1455.74,1210.88 1456.33,1210.88 1456.91,1210.88 1457.5,1210.88 1458.09,1210.88 1458.67,1210.88 1459.26,1210.88 1459.85,1210.88 1460.43,1210.88 1461.02,1210.88 1461.61,1210.88 1462.19,1210.88 1462.78,1210.88 1463.37,1210.88 1463.95,1210.88 1464.54,1210.88 1465.12,1210.88 1465.71,1210.88 1466.3,1210.88 1466.88,1210.88 1467.47,1210.88 1468.06,1210.88 1468.64,1210.88 1469.23,1210.88 1469.82,1210.88 1470.4,1210.88 1470.99,1210.88 1471.57,1210.88 1472.16,1210.88 1472.75,1210.88 1473.33,1210.88 1473.92,1210.88 1474.51,1210.88 1475.09,1210.88 1475.68,1210.88 1476.27,1210.88 1476.85,1210.88 1477.44,1210.88 1478.03,1210.88 1478.61,1210.88 1479.2,1210.88 1479.78,1210.88 1480.37,1210.88 1480.96,1210.88 1481.54,1210.88 1482.13,1210.88 1482.72,1210.88 1483.3,1210.88 1483.89,1210.88 1484.48,1210.88 1485.06,1210.88 1485.65,1210.88 1486.24,1210.88 1486.82,1210.88 1487.41,1210.88 1487.99,1210.88 1488.58,1210.88 1489.17,1210.88 1489.75,1210.88 1490.34,1210.88 1490.93,1210.88 1491.51,1210.88 1492.1,1210.88 1492.69,1210.88 1493.27,1210.88 1493.86,1210.88 1494.45,1210.88 1495.03,1210.88 1495.62,1210.88 1496.2,1210.88 1496.79,1210.88 1497.38,1210.88 1497.96,1210.88 1498.55,1210.88 1499.14,1210.88 1499.72,1210.88 1500.31,1210.88 1500.9,1210.88 1501.48,1210.88 1502.07,1210.88 1502.65,1210.88 1503.24,1210.88 1503.83,1210.88 1504.41,1210.88 1505,1210.88 1505.59,1210.88 1506.17,1210.88 1506.76,1210.88 1507.35,1210.88 1507.93,1210.88 1508.52,1210.88 1509.11,1210.88 1509.69,1210.88 1510.28,1210.88 1510.86,1210.88 1511.45,1210.88 1512.04,1210.88 1512.62,1210.88 1513.21,1210.88 1513.8,1210.88 1514.38,1210.88 1514.97,1210.88 1515.56,1210.88 1516.14,1210.88 1516.73,1210.88 1517.32,1210.88 1517.9,1210.88 1518.49,1210.88 1519.07,1210.88 1519.66,1210.88 1520.25,1210.88 1520.83,1210.88 1521.42,1210.88 1522.01,1210.88 1522.59,1210.88 1523.18,1210.88 1523.77,1210.88 1524.35,1210.88 1524.94,1210.88 1525.52,1210.88 1526.11,1210.88 1526.7,1210.88 1527.28,1210.88 1527.87,1210.88 1528.46,1210.88 1529.04,1210.88 1529.63,1210.88 1530.22,1210.88 1530.8,1210.88 1531.39,1210.88 1531.98,1210.88 1532.56,1210.88 1533.15,1210.88 1533.73,1210.88 1534.32,1210.88 1534.91,1210.88 1535.49,1210.88 1536.08,1210.88 1536.67,1210.88 1537.25,1210.88 1537.84,1210.88 1538.43,1210.88 1539.01,1210.88 1539.6,1210.88 1540.19,1210.88 1540.77,1210.88 1541.36,1210.88 1541.94,1210.88 1542.53,1210.88 1543.12,1210.88 1543.7,1210.88 1544.29,1210.88 1544.88,1210.88 1545.46,1210.88 1546.05,1210.88 1546.64,1210.88 1547.22,1210.88 1547.81,1210.88 1548.4,1210.88 1548.98,1210.88 1549.57,1210.88 1550.15,1210.88 1550.74,1210.88 1551.33,1210.88 1551.91,1210.88 1552.5,1210.88 1553.09,1210.88 1553.67,1210.88 1554.26,1210.88 1554.85,1210.88 1555.43,1210.88 1556.02,1210.88 1556.6,1210.88 1557.19,1210.88 1557.78,1210.88 1558.36,1210.88 1558.95,1210.88 1559.54,1210.88 1560.12,1210.88 1560.71,1210.88 1561.3,1210.88 1561.88,1210.88 1562.47,1210.88 1563.06,1210.88 1563.64,1210.88 1564.23,1210.88 1564.81,1210.88 1565.4,1210.88 1565.99,1210.88 1566.57,1210.88 1567.16,1210.88 1567.75,1210.88 1568.33,1210.88 1568.92,1210.88 1569.51,1210.88 1570.09,1210.88 1570.68,1210.88 1571.27,1210.88 1571.85,1210.88 1572.44,1210.88 1573.02,1210.88 1573.61,1210.88 1574.2,1210.88 1574.78,1210.88 1575.37,1210.88 1575.96,1210.88 1576.54,1210.88 1577.13,1210.88 1577.72,1210.88 1578.3,1210.88 1578.89,1210.88 1579.47,1210.88 1580.06,1210.88 1580.65,1210.88 1581.23,1210.88 1581.82,1210.88 1582.41,1210.88 1582.99,1210.88 1583.58,1210.88 1584.17,1210.88 1584.75,1210.88 1585.34,1210.88 1585.93,1210.88 1586.51,1210.88 1587.1,1210.88 1587.68,1210.88 1588.27,1210.88 1588.86,1210.88 1589.44,1210.88 1590.03,1210.88 1590.62,1210.88 1591.2,1210.88 1591.79,1210.88 1592.38,1210.88 1592.96,1210.88 1593.55,1210.88 1594.14,1210.88 1594.72,1210.88 1595.31,1210.88 1595.89,1210.88 1596.48,1210.88 1597.07,1210.88 1597.65,1210.88 1598.24,1210.88 1598.83,1210.88 1599.41,1210.88 1600,1210.88 1600.59,1210.88 1601.17,1210.88 1601.76,1210.88 1602.34,1210.88 1602.93,1210.88 1603.52,1210.88 1604.1,1210.88 1604.69,1210.88 1605.28,1210.88 1605.86,1210.88 1606.45,1210.88 1607.04,1210.88 1607.62,1210.88 1608.21,1210.88 1608.8,1210.88 1609.38,1210.88 1609.97,1210.88 1610.55,1210.88 1611.14,1210.88 1611.73,1210.88 1612.31,1210.88 1612.9,1210.88 1613.49,1210.88 1614.07,1210.88 1614.66,1210.88 1615.25,1210.88 1615.83,1210.88 1616.42,1210.88 1617.01,1210.88 1617.59,1210.88 1618.18,1210.88 1618.76,1210.88 1619.35,1210.88 1619.94,1210.88 1620.52,1210.88 1621.11,1210.88 1621.7,1210.88 1622.28,1210.88 1622.87,1210.88 1623.46,1210.88 1624.04,1210.88 1624.63,1210.88 1625.22,1210.88 1625.8,1210.88 1626.39,1210.88 1626.97,1210.88 1627.56,1210.88 1628.15,1210.88 1628.73,1210.88 1629.32,1210.88 1629.91,1210.88 1630.49,1210.88 1631.08,1210.88 1631.67,1210.88 1632.25,1210.88 1632.84,1210.88 1633.42,1210.88 1634.01,1210.88 1634.6,1210.88 1635.18,1210.88 1635.77,1210.88 1636.36,1210.88 1636.94,1210.88 1637.53,1210.88 1638.12,1210.88 1638.7,1210.88 1639.29,1210.88 1639.88,1210.88 1640.46,1210.88 1641.05,1210.88 1641.63,1210.88 1642.22,1210.88 1642.81,1210.88 1643.39,1210.88 1643.98,1210.88 1644.57,1210.88 1645.15,1210.88 1645.74,1210.88 1646.33,1210.88 1646.91,1210.88 1647.5,1210.88 1648.09,1210.88 1648.67,1210.88 1649.26,1210.88 1649.84,1210.88 1650.43,1210.88 1651.02,1210.88 1651.6,1210.88 1652.19,1210.88 1652.78,1210.88 1653.36,1210.88 1653.95,1210.88 1654.54,1210.88 1655.12,1210.88 1655.71,1210.88 1656.29,1210.88 1656.88,1210.88 1657.47,1210.88 1658.05,1210.88 1658.64,1210.88 1659.23,1210.88 1659.81,1210.88 1660.4,1210.88 1660.99,1210.88 1661.57,1210.88 1662.16,1210.88 1662.75,1210.88 1663.33,1210.88 1663.92,1210.88 1664.5,1210.88 1665.09,1210.88 1665.68,1210.88 1666.26,1210.88 1666.85,1210.88 1667.44,1210.88 1668.02,1210.88 1668.61,1210.88 1669.2,1210.88 1669.78,1210.88 1670.37,1210.88 1670.96,1210.88 1671.54,1210.88 1672.13,1210.88 1672.71,1210.88 1673.3,1210.88 1673.89,1210.88 1674.47,1210.88 1675.06,1210.88 1675.65,1210.88 1676.23,1210.88 1676.82,1210.88 1677.41,1210.88 1677.99,1210.88 1678.58,1210.88 1679.17,1210.88 1679.75,1210.88 1680.34,1210.88 1680.92,1210.88 1681.51,1210.88 1682.1,1210.88 1682.68,1210.88 1683.27,1210.88 1683.86,1210.88 1684.44,1210.88 1685.03,1210.88 1685.62,1210.88 1686.2,1210.88 1686.79,1210.88 1687.37,1210.88 1687.96,1210.88 1688.55,1210.88 1689.13,1210.88 1689.72,1210.88 1690.31,1210.88 1690.89,1210.88 1691.48,1210.88 1692.07,1210.88 1692.65,1210.88 1693.24,1210.88 1693.83,1210.88 1694.41,1210.88 1695,1210.88 1695.58,1210.88 1696.17,1210.88 1696.76,1210.88 1697.34,1210.88 1697.93,1210.88 1698.52,1210.88 1699.1,1210.88 1699.69,1210.88 1700.28,1210.88 1700.86,1210.88 1701.45,1210.88 1702.04,1210.88 1702.62,1210.88 1703.21,1210.88 1703.79,1210.88 1704.38,1210.88 1704.97,1210.88 1705.55,1210.88 1706.14,1210.88 1706.73,1210.88 1707.31,1210.88 1707.9,1210.88 1708.49,1210.88 1709.07,1210.88 1709.66,1210.88 1710.24,1210.88 1710.83,1210.88 1711.42,1210.88 1712,1210.88 1712.59,1210.88 1713.18,1210.88 1713.76,1210.88 1714.35,1210.88 1714.94,1210.88 1715.52,1210.88 1716.11,1210.88 1716.7,1210.88 1717.28,1210.88 1717.87,1210.88 1718.45,1210.88 1719.04,1210.88 1719.63,1210.88 1720.21,1210.88 1720.8,1210.88 1721.39,1210.88 1721.97,1210.88 1722.56,1210.88 1723.15,1210.88 1723.73,1210.88 1724.32,1210.88 1724.91,1210.88 1725.49,1210.88 1726.08,1210.88 1726.66,1210.88 1727.25,1210.88 1727.84,1210.88 1728.42,1210.88 1729.01,1210.88 1729.6,1210.88 1730.18,1210.88 1730.77,1210.88 1731.36,1210.88 1731.94,1210.88 1732.53,1210.88 1733.11,1210.88 1733.7,1210.88 1734.29,1210.88 1734.87,1210.88 1735.46,1210.88 1736.05,1210.88 1736.63,1210.88 1737.22,1210.88 1737.81,1210.88 1738.39,1210.88 1738.98,1210.88 1739.57,1210.88 1740.15,1210.88 1740.74,1210.88 1741.32,1210.88 1741.91,1210.88 1742.5,1210.88 1743.08,1210.88 1743.67,1210.88 1744.26,1210.88 1744.84,1210.88 1745.43,1210.88 1746.02,1210.88 1746.6,1210.88 1747.19,1210.88 1747.78,1210.88 1748.36,1210.88 1748.95,1210.88 1749.53,1210.88 1750.12,1210.88 1750.71,1210.88 1751.29,1210.88 1751.88,1210.88 1752.47,1210.88 1753.05,1210.88 1753.64,1210.88 1754.23,1210.88 1754.81,1210.88 1755.4,1210.88 1755.99,1210.88 1756.57,1210.88 1757.16,1210.88 1757.74,1210.88 1758.33,1210.88 1758.92,1210.88 1759.5,1210.88 1760.09,1210.88 1760.68,1210.88 1761.26,1210.88 1761.85,1210.88 1762.44,1210.88 1763.02,1210.88 1763.61,1210.88 1764.19,1210.88 1764.78,1210.88 1765.37,1210.88 1765.95,1210.88 1766.54,1210.88 1767.13,1210.88 1767.71,1210.88 1768.3,1210.88 1768.89,1210.88 1769.47,1210.88 1770.06,1210.88 1770.65,1210.88 1771.23,1210.88 1771.82,1210.88 1772.4,1210.88 1772.99,1210.88 1773.58,1210.88 1774.16,1210.88 1774.75,1210.88 1775.34,1210.88 1775.92,1210.88 1776.51,1210.88 1777.1,1210.88 1777.68,1210.88 1778.27,1210.88 1778.86,1210.88 1779.44,1210.88 1780.03,1210.88 1780.61,1210.88 1781.2,1210.88 1781.79,1210.88 1782.37,1210.88 1782.96,1210.88 1783.55,1210.88 1784.13,1210.88 1784.72,1210.88 1785.31,1210.88 1785.89,1210.88 1786.48,1210.88 1787.06,1210.88 1787.65,1210.88 1788.24,1210.88 1788.82,1210.88 1789.41,1210.88 1790,1210.88 1790.58,1210.88 1791.17,1210.88 1791.76,1210.88 1792.34,1210.88 1792.93,1210.88 1793.52,1210.88 1794.1,1210.88 1794.69,1210.88 1795.27,1210.88 1795.86,1210.88 1796.45,1210.88 1797.03,1210.88 1797.62,1210.88 1798.21,1210.88 1798.79,1210.88 1799.38,1210.88 1799.97,1210.88 1800.55,1210.88 1801.14,1210.88 1801.73,1210.88 1802.31,1210.88 1802.9,1210.88 1803.48,1210.88 1804.07,1210.88 1804.66,1210.88 1805.24,1210.88 1805.83,1210.88 1806.42,1210.88 1807,1210.88 1807.59,1210.88 1808.18,1210.88 1808.76,1210.88 1809.35,1210.88 1809.94,1210.88 1810.52,1210.88 1811.11,1210.88 1811.69,1210.88 1812.28,1210.88 1812.87,1210.88 1813.45,1210.88 1814.04,1210.88 1814.63,1210.88 1815.21,1210.88 1815.8,1210.88 1816.39,1210.88 1816.97,1210.88 1817.56,1210.88 1818.14,1210.88 1818.73,1210.88 1819.32,1210.88 1819.9,1210.88 1820.49,1210.88 1821.08,1210.88 1821.66,1210.88 1822.25,1210.88 1822.84,1210.88 1823.42,1210.88 1824.01,1210.88 1824.6,1210.88 1825.18,1210.88 1825.77,1210.88 1826.35,1210.88 1826.94,1210.88 1827.53,1210.88 1828.11,1210.88 1828.7,1210.88 1829.29,1210.88 1829.87,1210.88 1830.46,1210.88 1831.05,1210.88 1831.63,1210.88 1832.22,1210.88 1832.81,1210.88 1833.39,1210.88 1833.98,1210.88 1834.56,1210.88 1835.15,1210.88 1835.74,1210.88 1836.32,1210.88 1836.91,1210.88 1837.5,1210.88 1838.08,1210.88 1838.67,1210.88 1839.26,1210.88 1839.84,1210.88 1840.43,1210.88 1841.01,1210.88 1841.6,1210.88 1842.19,1210.88 1842.77,1210.88 1843.36,1210.88 1843.95,1210.88 1844.53,1210.88 1845.12,1210.88 1845.71,1210.88 1846.29,1210.88 1846.88,1210.88 1847.47,1210.88 1848.05,1210.88 1848.64,1210.88 1849.22,1210.88 1849.81,1210.88 1850.4,1210.88 1850.98,1210.88 1851.57,1210.88 1852.16,1210.88 1852.74,1210.88 1853.33,1210.88 1853.92,1210.88 1854.5,1210.88 1855.09,1210.88 1855.68,1210.88 1856.26,1210.88 1856.85,1210.88 1857.43,1210.88 1858.02,1210.88 1858.61,1210.88 1859.19,1210.88 1859.78,1210.88 1860.37,1210.88 1860.95,1210.88 1861.54,1210.88 1862.13,1210.88 1862.71,1210.88 1863.3,1210.88 1863.88,1210.88 1864.47,1210.88 1865.06,1210.88 1865.64,1210.88 1866.23,1210.88 1866.82,1210.88 1867.4,1210.88 1867.99,1210.88 1868.58,1210.88 1869.16,1210.88 1869.75,1210.88 1870.34,1210.88 1870.92,1210.88 1871.51,1210.88 1872.09,1210.88 1872.68,1210.88 1873.27,1210.88 1873.85,1210.88 1874.44,1210.88 1875.03,1210.88 1875.61,1210.88 1876.2,1210.88 1876.79,1210.88 1877.37,1210.88 1877.96,1210.88 1878.55,1210.88 1879.13,1210.88 1879.72,1210.88 1880.3,1210.88 1880.89,1210.88 1881.48,1210.88 1882.06,1210.88 1882.65,1210.88 1883.24,1210.88 1883.82,1210.88 1884.41,1210.88 1885,1210.88 1885.58,1210.88 1886.17,1210.88 1886.76,1210.88 1887.34,1210.88 1887.93,1210.88 1888.51,1210.88 1889.1,1210.88 1889.69,1210.88 1890.27,1210.88 1890.86,1210.88 1891.45,1210.88 1892.03,1210.88 1892.62,1210.88 1893.21,1210.88 1893.79,1210.88 1894.38,1210.88 1894.96,1210.88 1895.55,1210.88 1896.14,1210.88 1896.72,1210.88 1897.31,1210.88 1897.9,1210.88 1898.48,1210.88 1899.07,1210.88 1899.66,1210.88 1900.24,1210.88 1900.83,1210.88 1901.42,1210.88 1902,1210.88 1902.59,1210.88 1903.17,1210.88 1903.76,1210.88 1904.35,1210.88 1904.93,1210.88 1905.52,1210.88 1906.11,1210.88 1906.69,1210.88 1907.28,1210.88 1907.87,1210.88 1908.45,1210.88 1909.04,1210.88 1909.63,1210.88 1910.21,1210.88 1910.8,1210.88 1911.38,1210.88 1911.97,1210.88 1912.56,1210.88 1913.14,1210.88 1913.73,1210.88 1914.32,1210.88 1914.9,1210.88 1915.49,1210.88 1916.08,1210.88 1916.66,1210.88 1917.25,1210.88 1917.83,1210.88 1918.42,1210.88 1919.01,1210.88 1919.59,1210.88 1920.18,1210.88 1920.77,1210.88 1921.35,1210.88 1921.94,1210.88 1922.53,1210.88 1923.11,1210.88 1923.7,1210.88 1924.29,1210.88 1924.87,1210.88 1925.46,1210.88 1926.04,1210.88 1926.63,1210.88 1927.22,1210.88 1927.8,1210.88 1928.39,1210.88 1928.98,1210.88 1929.56,1210.88 1930.15,1210.88 1930.74,1210.88 1931.32,1210.88 1931.91,1210.88 1932.5,1210.88 1933.08,1210.88 1933.67,1210.88 1934.25,1210.88 1934.84,1210.88 1935.43,1210.88 1936.01,1210.88 1936.6,1210.88 1937.19,1210.88 1937.77,1210.88 1938.36,1210.88 1938.95,1210.88 1939.53,1210.88 1940.12,1210.88 1940.71,1210.88 1941.29,1210.88 1941.88,1210.88 1942.46,1210.88 1943.05,1210.88 1943.64,1210.88 1944.22,1210.88 1944.81,1210.88 1945.4,1210.88 1945.98,1210.88 1946.57,1210.88 1947.16,1210.88 1947.74,1210.88 1948.33,1210.88 1948.91,1210.88 1949.5,1210.88 1950.09,1210.88 1950.67,1210.88 1951.26,1210.88 1951.85,1210.88 1952.43,1210.88 1953.02,1210.88 1953.61,1210.88 1954.19,1210.88 1954.78,1210.88 1955.37,1210.88 1955.95,1210.88 1956.54,1210.88 1957.12,1210.88 1957.71,1210.88 1958.3,1210.88 1958.88,1210.88 1959.47,1210.88 1960.06,1210.88 1960.64,1210.88 1961.23,1210.88 1961.82,1210.88 1962.4,1210.88 1962.99,1210.88 1963.58,1210.88 1964.16,1210.88 1964.75,1210.88 1965.33,1210.88 1965.92,1210.88 1966.51,1210.88 1967.09,1210.88 1967.68,1210.88 1968.27,1210.88 1968.85,1210.88 1969.44,1210.88 1970.03,1210.88 1970.61,1210.88 1971.2,1210.88 1971.78,1210.88 1972.37,1210.88 1972.96,1210.88 1973.54,1210.88 1974.13,1210.88 1974.72,1210.88 1975.3,1210.88 1975.89,1210.88 1976.48,1210.88 1977.06,1210.88 1977.65,1210.88 1978.24,1210.88 1978.82,1210.88 1979.41,1210.88 1979.99,1210.88 1980.58,1210.88 1981.17,1210.88 1981.75,1210.88 1982.34,1210.88 1982.93,1210.88 1983.51,1210.88 1984.1,1210.88 1984.69,1210.88 1985.27,1210.88 1985.86,1210.88 1986.45,1210.88 1987.03,1210.88 1987.62,1210.88 1988.2,1210.88 1988.79,1210.88 1989.38,1210.88 1989.96,1210.88 1990.55,1210.88 1991.14,1210.88 1991.72,1210.88 1992.31,1210.88 1992.9,1210.88 1993.48,1210.88 1994.07,1210.88 1994.65,1210.88 1995.24,1210.88 1995.83,1210.88 1996.41,1210.88 1997,1210.88 1997.59,1210.88 1998.17,1210.88 1998.76,1210.88 1999.35,1210.88 1999.93,1210.88 2000.52,1210.88 2001.11,1210.88 2001.69,1210.88 2002.28,1210.88 2002.86,1210.88 2003.45,1210.88 2004.04,1210.88 2004.62,1210.88 2005.21,1210.88 2005.8,1210.88 2006.38,1210.88 2006.97,1210.88 2007.56,1210.88 2008.14,1210.88 2008.73,1210.88 2009.32,1210.88 2009.9,1210.88 2010.49,1210.88 2011.07,1210.88 2011.66,1210.88 2012.25,1210.88 2012.83,1210.88 2013.42,1210.88 2014.01,1210.88 2014.59,1210.88 2015.18,1210.88 2015.77,1210.88 2016.35,1210.88 2016.94,1210.88 2017.53,1210.88 2018.11,1210.88 2018.7,1210.88 2019.28,1210.88 2019.87,1210.88 2020.46,1210.88 2021.04,1210.88 2021.63,1210.88 2022.22,1210.88 2022.8,1210.88 2023.39,1210.88 2023.98,1210.88 2024.56,1210.88 2025.15,1210.88 2025.73,1210.88 2026.32,1210.88 2026.91,1210.88 2027.49,1210.88 2028.08,1210.88 2028.67,1210.88 2029.25,1210.88 2029.84,1210.88 2030.43,1210.88 2031.01,1210.88 2031.6,1210.88 2032.19,1210.88 2032.77,1210.88 2033.36,1210.88 2033.94,1210.88 2034.53,1210.88 2035.12,1210.88 2035.7,1210.88 2036.29,1210.88 2036.88,1210.88 2037.46,1210.88 2038.05,1210.88 2038.64,1210.88 2039.22,1210.88 2039.81,1210.88 2040.4,1210.88 2040.98,1210.88 2041.57,1210.88 2042.15,1210.88 2042.74,1210.88 2043.33,1210.88 2043.91,1210.88 2044.5,1210.88 2045.09,1210.88 2045.67,1210.88 2046.26,1210.88 2046.85,1210.88 2047.43,1210.88 2048.02,1210.88 2048.6,1210.88 2049.19,1210.88 2049.78,1210.88 2050.36,1210.88 2050.95,1210.88 2051.54,1210.88 2052.12,1210.88 2052.71,1210.88 2053.3,1210.88 2053.88,1210.88 2054.47,1210.88 2055.06,1210.88 2055.64,1210.88 2056.23,1210.88 2056.81,1210.88 2057.4,1210.88 2057.99,1210.88 2058.57,1210.88 2059.16,1210.88 2059.75,1210.88 2060.33,1210.88 2060.92,1210.88 2061.51,1210.88 2062.09,1210.88 2062.68,1210.88 2063.27,1210.88 2063.85,1210.88 2064.44,1210.88 2065.02,1210.88 2065.61,1210.88 2066.2,1210.88 2066.78,1210.88 2067.37,1210.88 2067.96,1210.88 2068.54,1210.88 2069.13,1210.88 2069.72,1210.88 2070.3,1210.88 2070.89,1210.88 2071.48,1210.88 2072.06,1210.88 2072.65,1210.88 2073.23,1210.88 2073.82,1210.88 2074.41,1210.88 2074.99,1210.88 2075.58,1210.88 2076.17,1210.88 2076.75,1210.88 2077.34,1210.88 2077.93,1210.88 2078.51,1210.88 2079.1,1210.88 2079.68,1210.88 2080.27,1210.88 2080.86,1210.88 2081.44,1210.88 2082.03,1210.88 2082.62,1210.88 2083.2,1210.88 2083.79,1210.88 2084.38,1210.88 2084.96,1210.88 2085.55,1210.88 2086.14,1210.88 2086.72,1210.88 2087.31,1210.88 2087.89,1210.88 2088.48,1210.88 2089.07,1210.88 2089.65,1210.88 2090.24,1210.88 2090.83,1210.88 2091.41,1210.88 2092,1210.88 2092.59,1210.88 2093.17,1210.88 2093.76,1210.88 2094.35,1210.88 2094.93,1210.88 2095.52,1210.88 2096.1,1210.88 2096.69,1210.88 2097.28,1210.88 2097.86,1210.88 2098.45,1210.88 2099.04,1210.88 2099.62,1210.88 2100.21,1210.88 2100.8,1210.88 2101.38,1210.88 2101.97,1210.88 2102.55,1210.88 2103.14,1210.88 2103.73,1210.88 2104.31,1210.88 2104.9,1210.88 2105.49,1210.88 2106.07,1210.88 2106.66,1210.88 2107.25,1210.88 2107.83,1210.88 2108.42,1210.88 2109.01,1210.88 2109.59,1210.88 2110.18,1210.88 2110.76,1210.88 2111.35,1210.88 2111.94,1210.88 2112.52,1210.88 2113.11,1210.88 2113.7,1210.88 2114.28,1210.88 2114.87,1210.88 2115.46,1210.88 2116.04,1210.88 2116.63,1210.88 2117.22,1210.88 2117.8,1210.88 2118.39,1210.88 2118.97,1210.88 2119.56,1210.88 2120.15,1210.88 2120.73,1210.88 2121.32,1210.88 2121.91,1210.88 2122.49,1210.88 2123.08,1210.88 2123.67,1210.88 2124.25,1210.88 2124.84,1210.88 2125.42,1210.88 2126.01,1210.88 2126.6,1210.88 2127.18,1210.88 2127.77,1210.88 2128.36,1210.88 2128.94,1210.88 2129.53,1210.88 2130.12,1210.88 2130.7,1210.88 2131.29,1210.88 2131.88,1210.88 2132.46,1210.88 2133.05,1210.88 2133.63,1210.88 2134.22,1210.88 2134.81,1210.88 2135.39,1210.88 2135.98,1210.88 2136.57,1210.88 2137.15,1210.88 2137.74,1210.88 2138.33,1210.88 2138.91,1210.88 2139.5,1210.88 2140.09,1210.88 2140.67,1210.88 2141.26,1210.88 2141.84,1210.88 2142.43,1210.88 2143.02,1210.88 2143.6,1210.88 2144.19,1210.88 2144.78,1210.88 2145.36,1210.88 2145.95,1210.88 2146.54,1210.88 2147.12,1210.88 2147.71,1210.88 2148.3,1210.88 2148.88,1210.88 2149.47,1210.88 2150.05,1210.88 2150.64,1210.88 2151.23,1210.88 2151.81,1210.88 2152.4,1210.88 2152.99,1210.88 2153.57,1210.88 2154.16,1210.88 2154.75,1210.88 2155.33,1210.88 2155.92,1210.88 2156.5,1210.88 2157.09,1210.88 2157.68,1210.88 2158.26,1210.88 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.28,1191.51 1399.68,899.083 \"/>\n<polyline clip-path=\"url(#clip632)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.77 985.439,1191.51 2158.26,1191.51 2158.26,1229.77 985.439,1229.77 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip630)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip630)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip633\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip630)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip630)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip630)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip633)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,13.2683 162.114,-1385.04 162.673,-2655.77 163.232,-3821.6 163.792,-4914.78 164.351,-5911.77 164.91,-6821.87 165.469,-6475.97 166.029,-7276.37 166.588,-7046.2 167.147,-7772.14 167.706,-8429.83 168.266,-9006.88 168.825,-9541.95 169.384,-8527.7 169.943,-9022.42 170.503,-9464.88 171.062,-9842.56 171.621,-10165.5 172.18,-10472.9 172.74,-10210.2 173.299,-10461.3 173.858,-10636.1 174.417,-9954.47 174.977,-10127.1 175.536,-10294.5 176.095,-10069.7 176.655,-10185.1 177.214,-10270.6 177.773,-10332.9 178.332,-10370.8 178.892,-10382.5 179.451,-10140.8 180.01,-9677.53 180.569,-9461.25 181.129,-9257.02 181.688,-9252.44 182.247,-9054.3 182.806,-8869.82 183.366,-8839.06 183.925,-8790.6 184.484,-8610.53 185.043,-8564.71 185.603,-8504.57 186.162,-8441.04 186.721,-8246.59 187.28,-8042.02 187.84,-7509.45 188.399,-7226.02 188.958,-7159 189.517,-6790.16 190.077,-6722.13 190.636,-6637.19 191.195,-6388.46 191.754,-6293.04 192.314,-6128 192.873,-5891.16 193.432,-5804.64 193.991,-5649.18 194.551,-5493.18 195.11,-5339.72 195.669,-5249.62 196.228,-5100.1 196.788,-4958.09 197.347,-4759.6 197.906,-4619.65 198.465,-4528.42 199.025,-4439.2 199.584,-4300.92 200.143,-4207.77 200.702,-4112.52 201.262,-3934.6 201.821,-3459.2 202.38,-3270.26 202.939,-3053.16 203.499,-2999.74 204.058,-2938.81 204.617,-2843.92 205.176,-2710.28 205.736,-2613.4 206.295,-2557.63 206.854,-2469.65 207.413,-2380.34 207.973,-2290.93 208.532,-2107.06 209.091,-2053.11 209.65,-1968.57 210.21,-1821.33 210.769,-1715.6 211.328,-1640.68 211.887,-1567.97 212.447,-1493.79 213.006,-1364.21 213.565,-1323.52 214.124,-1254.2 214.684,-1210.87 215.243,-1066.4 215.802,-1028.78 216.361,-936.859 216.921,-879.959 217.48,-821.463 218.039,-790.122 218.598,-686.738 219.158,-604.803 219.717,-600.612 220.276,-547.605 220.835,-519.752 221.395,-451.2 221.954,-377.678 222.513,-330.789 223.072,-306.392 223.632,-279.513 224.191,-254.537 224.75,-147.404 225.309,-37.6172 225.869,2.45631 226.428,40.1356 226.987,73.6293 227.546,66.6526 228.106,120.268 228.665,156.748 229.224,190.876 229.783,244.207 230.343,273.909 230.902,346.26 231.461,370.837 232.02,355.737 232.58,397.854 233.139,442.941 233.698,487.237 234.257,491.154 234.817,574.811 235.376,576.01 235.935,575.364 236.494,636.33 237.054,633.954 237.613,669.701 238.172,646.323 238.731,679.28 239.291,714.426 239.85,730.316 240.409,747.249 240.968,727.794 241.528,757.103 242.087,774.626 242.646,824.603 243.205,835.976 243.765,794.311 244.324,775.408 244.883,810.575 245.442,844.744 246.002,842.524 246.561,887.855 247.12,920.038 247.679,913.526 248.239,889.344 248.798,902.238 249.357,895.007 249.916,924.92 250.476,920.929 251.035,913.571 251.594,947.686 252.153,900.257 252.713,909.608 253.272,909.921 253.831,953.05 254.39,996.923 254.95,1042.46 255.509,1014.19 256.068,1007.29 256.627,1015.91 257.187,1023.53 257.746,1031.25 258.305,1036.77 258.864,1047.13 259.424,1052.82 259.983,1078 260.542,1030.05 261.101,1043.07 261.661,1050.17 262.22,1008.17 262.779,1000.35 263.338,978.56 263.898,970.994 264.457,948.007 265.016,909.39 265.575,876.301 266.135,893.873 266.694,910.435 267.253,955.878 267.812,955.053 268.372,952.121 268.931,949.487 269.49,911.75 270.049,891.824 270.609,877.123 271.168,844.669 271.727,866.934 272.286,871.533 272.846,858.407 273.405,894.528 273.964,930.823 274.523,914.272 275.083,963.148 275.642,959.033 276.201,972.703 276.76,983.185 277.32,977.224 277.879,1017.45 278.438,997.351 278.997,1011.23 279.557,989.061 280.116,1019.27 280.675,1030.01 281.234,991.147 281.794,1002.73 282.353,949.103 282.912,965.809 283.471,980.404 284.031,975.947 284.59,957.637 285.149,988.872 285.708,987.257 286.268,998.231 286.827,995.186 287.386,1005.33 287.945,1001.1 288.505,1008.51 289.064,1006.59 289.623,1001.03 290.182,1029.67 290.742,979.232 291.301,974.67 291.86,973.914 292.419,956.271 292.979,985.466 293.538,994.563 294.097,974.544 294.656,987.221 295.216,1019.13 295.775,1045.93 296.334,1056.98 296.893,1078.74 297.453,1086.15 298.012,1061.23 298.571,1050.63 299.13,1043.65 299.69,1052.81 300.249,1046.84 300.808,1039.66 301.368,1048.8 301.927,1136.23 302.486,1121.21 303.045,1107.94 303.605,1112.39 304.164,1084.62 304.723,1074.52 305.282,1065.34 305.842,1072.05 306.401,1044.22 306.96,1035.08 307.519,1026.32 308.079,1033.26 308.638,1027.77 309.197,1006.1 309.756,1014.98 310.316,975.655 310.875,985.022 311.434,992.139 311.993,999.504 312.553,995.558 313.112,1006.15 313.671,1014.99 314.23,1022.25 314.79,1016.63 315.349,1026.6 315.908,1049.86 316.467,1056.11 317.027,1031.23 317.586,1022.68 318.145,1010 318.704,1035.14 319.264,1026.35 319.823,1020.02 320.382,1009.96 320.941,1020.53 321.501,1027.61 322.06,1035.9 322.619,1027.31 323.178,1003.76 323.738,1047.7 324.297,1085.71 324.856,1027.04 325.415,1017.95 325.975,1025.39 326.534,1000.04 327.093,991.279 327.652,999.217 328.212,1026 328.771,985.044 329.33,977.429 329.889,967.355 330.449,944.885 331.008,955.104 331.567,936.089 332.126,945.961 332.686,924.664 333.245,901.041 333.804,918.191 334.363,932.414 334.923,943.668 335.482,921.534 336.041,899.675 336.6,882.802 337.16,866.714 337.719,895.292 338.278,893.328 338.837,889.177 339.397,920.242 339.956,899.583 340.515,897.618 341.074,911.593 341.634,890.364 342.193,890.094 342.752,873.013 343.311,886.404 343.871,883.614 344.43,864.007 344.989,862.893 345.548,842.881 346.108,858.851 346.667,857.469 347.226,855.827 347.785,853.307 348.345,871.183 348.904,872.713 349.463,888.52 350.022,900.025 350.582,913.232 351.141,922.669 351.7,919.392 352.259,913.694 352.819,942.38 353.378,936.181 353.937,948.482 354.496,943.91 355.056,921.466 355.615,950.147 356.174,944.376 356.733,973.736 357.293,918.964 357.852,896.654 358.411,891.512 358.97,888.744 359.53,866.778 360.089,878.828 360.648,859.096 361.207,871.328 361.767,881.826 362.326,879.598 362.885,860.002 363.444,823.331 364.004,854.371 364.563,854.591 365.122,851.838 365.681,866.375 366.241,860.055 366.8,842.658 367.359,812.535 367.918,800.089 368.478,799.857 369.037,799.148 369.596,799.18 370.155,797.411 370.715,777.265 371.274,776.673 371.833,760.68 372.392,777.091 372.952,780.157 373.511,764.896 374.07,785.7 374.629,766.55 375.189,799.26 375.748,798.518 376.307,797.332 376.866,846.16 377.426,828.234 377.985,810.822 378.544,812.71 379.103,762.622 379.663,763.507 380.222,766.967 380.781,786.43 381.34,801.767 381.9,799.046 382.459,799.807 383.018,798.516 383.577,830.416 384.137,811.947 384.696,826.011 385.255,839.425 385.814,837.245 386.374,815.352 386.933,797.032 387.492,812.373 388.051,794.059 388.611,811.374 389.17,793.482 389.729,778.455 390.288,763.523 390.848,744.883 391.407,735.684 391.966,771.014 392.525,787.192 393.085,805.525 393.644,820.848 394.203,805.501 394.762,788.953 395.322,771.703 395.881,786.703 396.44,800.679 396.999,834.635 397.559,849.006 398.118,843.851 398.677,824.652 399.236,839.4 399.796,816.78 400.355,828.105 400.914,825.652 401.473,857.57 402.033,854.754 402.592,879.662 403.151,858.072 403.71,883.176 404.27,926.874 404.829,903.605 405.388,883.066 405.947,863.7 406.507,871.94 407.066,899.245 407.625,909.813 408.184,869.045 408.744,816.091 409.303,819.191 409.862,819.912 410.421,817.897 410.981,814.268 411.54,797.76 412.099,797.658 412.658,812.29 413.218,810.734 413.777,806.69 414.336,804.552 414.895,800.795 415.455,816.34 416.014,829.755 416.573,808.166 417.132,805.359 417.692,850.329 418.251,831.32 418.81,810.181 419.369,839.771 419.929,819.314 420.488,832.04 421.047,812.349 421.606,793.611 422.166,780.775 422.725,761.427 423.284,780.987 423.843,812.807 424.403,809.06 424.962,835.087 425.521,814.882 426.08,797.308 426.64,782.999 427.199,781.975 427.758,844.348 428.318,841.738 428.877,854.765 429.436,913.577 429.995,905.584 430.555,885.084 431.114,878.522 431.673,903.125 432.232,895.122 432.792,919.561 433.351,891.968 433.91,865.616 434.469,842.811 435.029,807.32 435.588,833.443 436.147,856.97 436.706,833.367 437.266,812.272 437.825,808.237 438.384,788.708 438.943,815.463 439.503,813.094 440.062,843.398 440.621,821.814 441.18,801.941 441.74,795.847 442.299,809.725 442.858,793.351 443.417,777.016 443.977,740.653 444.536,802.657 445.095,731.854 445.654,735.52 446.214,702.713 446.773,721.158 447.332,708.909 447.891,709.375 448.451,713.895 449.01,714.719 449.569,694.759 450.128,695.313 450.688,698.647 451.247,668.722 451.806,672.679 452.365,659.031 452.925,648.827 453.484,686.586 454.043,689.023 454.602,675.467 455.162,695.804 455.721,700.418 456.28,684.258 456.839,669.307 457.399,673.278 457.958,680.13 458.517,681.614 459.076,669.592 459.636,673.931 460.195,675.983 460.754,678.189 461.313,681.624 461.873,683.512 462.432,684.481 462.991,651.335 463.55,653.865 464.11,672.954 464.669,678.509 465.228,731.288 465.787,717.882 466.347,685.844 466.906,675.285 467.465,694.97 468.024,697.915 468.584,701.026 469.143,737.212 469.702,718.975 470.261,753.352 470.821,749.492 471.38,747.491 471.939,762.019 472.498,792.226 473.058,805.152 473.617,801.8 474.176,799.275 474.735,795.813 475.295,810.168 475.854,822.715 476.413,786.28 476.972,798.871 477.532,840.009 478.091,833.801 478.65,843.632 479.209,840.744 479.769,820.434 480.328,803.579 480.887,801.381 481.446,844.884 482.006,839.076 482.565,837.152 483.124,829.324 483.683,887.565 484.243,857.749 484.802,880.576 485.361,874.007 485.92,832.878 486.48,828.758 487.039,836.676 487.598,829.92 488.157,811.604 488.717,806.818 489.276,787.136 489.835,781.537 490.394,778.688 490.954,745.496 491.513,747.206 492.072,712.3 492.631,728.056 493.191,744.996 493.75,713.938 494.309,731.213 494.868,764.827 495.428,794.138 495.987,789.613 496.546,769.148 497.105,767.257 497.665,782.064 498.224,763.469 498.783,776.923 499.342,775.037 499.902,754.092 500.461,752.822 501.02,700.678 501.579,685.712 502.139,658.26 502.698,675.916 503.257,664.04 503.816,637.052 504.376,675.34 504.935,662.759 505.494,669.798 506.053,658.687 506.613,661.306 507.172,665.855 507.731,668.865 508.29,690.859 508.85,692.628 509.409,709.734 509.968,694.234 510.527,699.765 511.087,734.081 511.646,717.804 512.205,703.794 512.764,724.429 513.324,756.915 513.883,753.877 514.442,783.754 515.001,794.805 515.561,758.293 516.12,789.309 516.679,791.708 517.238,775.667 517.798,743.116 518.357,773.197 518.916,790.273 519.475,787.032 520.035,801.039 520.594,812.058 521.153,806.128 521.712,833.791 522.272,793.547 522.831,789.863 523.39,787.929 523.949,802.676 524.509,815.634 525.068,829.348 525.627,822.204 526.186,847.174 526.746,855.976 527.305,863.922 527.864,855.653 528.423,863.908 528.983,839.215 529.542,836.94 530.101,832.805 530.66,840.97 531.22,801.964 531.779,779.89 532.338,762.76 532.897,745.567 533.457,773.912 534.016,736.66 534.575,768.3 535.134,782.158 535.694,743.194 536.253,756.524 536.812,787.418 537.371,800.679 537.931,810.409 538.49,821.228 539.049,843.187 539.608,834.39 540.168,796.549 540.727,775.745 541.286,790.427 541.845,750.351 542.405,797.471 542.964,791.25 543.523,771.235 544.082,718.572 544.642,719.116 545.201,702.456 545.76,686.823 546.319,734.231 546.879,753.118 547.438,735.518 547.997,671.008 548.556,709.095 549.116,693.109 549.675,696.59 550.234,698.988 550.793,694.768 551.353,714.885 551.912,717.497 552.471,699.565 553.031,664.743 553.59,684.7 554.149,704.293 554.708,748.235 555.268,782.462 555.827,761.591 556.386,794.201 556.945,787.704 557.505,770.775 558.064,781.312 558.623,776.366 559.182,773.326 559.742,785.629 560.301,796.223 560.86,775.108 561.419,787.308 561.979,765.189 562.538,763.082 563.097,742.044 563.656,726.405 564.216,709.567 564.775,677.133 565.334,690.416 565.893,707.905 566.453,709.748 567.012,727.758 567.571,725.458 568.13,719.262 568.69,736.919 569.249,715.332 569.808,713.628 570.367,665.022 570.927,669.486 571.486,689.839 572.045,705.875 572.604,723.515 573.164,706.841 573.723,694.064 574.282,725.791 574.841,724.957 575.401,723.22 575.96,660.364 576.519,680.573 577.078,700.152 577.638,684.873 578.197,718.524 578.756,686.576 579.315,656.268 579.875,675.325 580.434,598.201 580.993,587.275 581.552,562.514 582.112,553.072 582.671,563.255 583.23,569.778 583.789,605.485 584.349,577.311 584.908,586 585.467,577.164 586.026,583.127 586.586,607.56 587.145,617.229 587.704,622.12 588.263,613.465 588.823,635.459 589.382,655.246 589.941,655.725 590.5,580.837 591.06,586.86 591.619,576.612 592.178,584.635 592.737,572.02 593.297,581.641 593.856,637.762 594.415,642.937 594.974,663.27 595.534,682.667 596.093,686.292 596.652,701.242 597.211,702.187 597.771,702.914 598.33,699.412 598.889,701.445 599.448,689.269 600.008,705.381 600.567,707.401 601.126,706.091 601.685,736.981 602.245,782.955 602.804,782.035 603.363,778.966 603.922,773.264 604.482,756.584 605.041,786.123 605.6,765.049 606.159,779.717 606.719,728.233 607.278,742.392 607.837,725.524 608.396,755.341 608.956,784.821 609.515,810.09 610.074,833.029 610.633,825.965 611.193,802.455 611.752,765.523 612.311,761.721 612.87,789.069 613.43,814.771 613.989,793.294 614.548,786.546 615.107,769.213 615.667,748.602 616.226,748.955 616.785,748.668 617.344,759.331 617.904,738.171 618.463,752.039 619.022,717.58 619.581,698.594 620.141,697.243 620.7,646.571 621.259,667.013 621.818,686.848 622.378,655.844 622.937,656.124 623.496,640.489 624.055,657.712 624.615,659.335 625.174,649.357 625.733,668.343 626.292,702.188 626.852,719.221 627.411,753.614 627.97,734.352 628.529,715.349 629.089,714.097 629.648,709.86 630.207,680.34 630.766,677.774 631.326,680.003 631.885,666.112 632.444,668.714 633.003,670.904 633.563,704.894 634.122,721.396 634.681,721.642 635.24,721.593 635.8,703.972 636.359,701.498 636.918,779.945 637.477,809.667 638.037,786.134 638.596,797.402 639.155,775.794 639.714,754.075 640.274,785.319 640.833,783.242 641.392,746.797 641.951,714.043 642.511,730.091 643.07,713.255 643.629,744.82 644.188,707.509 644.748,690 645.307,675.272 645.866,690.288 646.425,674.787 646.985,688.565 647.544,671.111 648.103,637.578 648.662,635.512 649.222,620.558 649.781,624.185 650.34,629.177 650.899,649.718 651.459,701.866 652.018,719.987 652.577,735.99 653.136,750.765 653.696,761.597 654.255,757.348 654.814,752.111 655.373,749.124 655.933,766.844 656.492,729.033 657.051,760.978 657.61,757.841 658.17,793.806 658.729,769.936 659.288,765.063 659.847,778.738 660.407,805.974 660.966,752.028 661.525,738.366 662.084,746.987 662.644,759.603 663.203,756.929 663.762,702.646 664.321,751.043 664.881,732.842 665.44,731.034 665.999,729.052 666.558,725.498 667.118,726.645 667.677,706.207 668.236,692.771 668.795,690.177 669.355,658.988 669.914,644.06 670.473,665.851 671.032,652.357 671.592,672.277 672.151,676.564 672.71,675.777 673.269,660.429 673.829,693.668 674.388,696.821 674.947,710.116 675.506,677.494 676.066,724.458 676.625,708.939 677.184,722.967 677.743,707.147 678.303,718.651 678.862,718.558 679.421,717.277 679.981,683.364 680.54,684.117 681.099,635.228 681.658,658.701 682.218,644.062 682.777,632.299 683.336,620.648 683.895,658.594 684.455,643.27 685.014,678.537 685.573,630.675 686.132,635.302 686.692,639.71 687.251,661.624 687.81,615.512 688.369,674.339 688.929,643.729 689.488,662.498 690.047,646.045 690.606,666.078 691.166,668.941 691.725,653.395 692.284,672.071 692.843,674.089 693.403,692.904 693.962,730.656 694.521,744.075 695.08,712.983 695.64,713.685 696.199,743.418 696.758,695.703 697.317,695.316 697.877,678.796 698.436,677.374 698.995,645.831 699.554,616.225 700.114,652.896 700.673,656.799 701.232,641.271 701.791,646.037 702.351,630.511 702.91,630.683 703.469,630.638 704.028,648.4 704.588,650.303 705.147,634.46 705.706,635.579 706.265,606.33 706.825,595.241 707.384,601.21 707.943,625.121 708.502,677.417 709.062,693.929 709.621,709.517 710.18,676.649 710.739,695.767 711.299,663.537 711.858,682.789 712.417,649.847 712.976,622.957 713.536,625.057 714.095,614.014 714.654,604.129 715.213,593.623 715.773,581.401 716.332,632.652 716.891,667.061 717.45,654.154 718.01,672.563 718.569,690.531 719.128,659.188 719.687,662.427 720.247,648.67 720.806,667.461 721.365,669.787 721.924,653.111 722.484,674.571 723.043,722.463 723.602,737.704 724.161,735.986 724.721,767.635 725.28,778.768 725.839,773.048 726.398,784.292 726.958,781.255 727.517,757.935 728.076,739.98 728.635,783.638 729.195,795.5 729.754,804.433 730.313,780.6 730.872,761.243 731.432,755.207 731.991,720.072 732.55,690.058 733.109,674.499 733.669,687.74 734.228,702.48 734.787,674.387 735.346,724.867 735.906,741.294 736.465,738.017 737.024,700.575 737.583,686.172 738.143,684.127 738.702,698.749 739.261,696.916 739.82,696.783 740.38,710.884 740.939,727.17 741.498,740.499 742.057,737.14 742.617,684.922 743.176,667.269 743.735,669.687 744.294,733.217 744.854,717.062 745.413,747.245 745.972,741.981 746.531,708.519 747.091,705.204 747.65,670.49 748.209,685.622 748.768,700.787 749.328,684.71 749.887,687.59 750.446,685.147 751.005,687.245 751.565,706.977 752.124,700.338 752.683,715.491 753.242,697.036 753.802,694.786 754.361,722.627 754.92,753.915 755.479,701.218 756.039,685.547 756.598,666.528 757.157,702.218 757.716,699.527 758.276,682.597 758.835,683.749 759.394,687.764 759.953,684.883 760.513,648.789 761.072,652.898 761.631,604.522 762.19,575.519 762.75,567.323 763.309,590.432 763.868,594.332 764.427,582.957 764.987,571.034 765.546,561.976 766.105,580.963 766.664,605.499 767.224,595.964 767.783,619.28 768.342,591.668 768.901,595.643 769.461,586.28 770.02,608.306 770.579,597.256 771.138,600.937 771.698,625.819 772.257,646.802 772.816,649.725 773.375,636.376 773.935,603.833 774.494,607.735 775.053,609.613 775.612,615.782 776.172,618.246 776.731,639.086 777.29,674.714 777.849,678.859 778.409,725.784 778.968,742.058 779.527,722.76 780.086,710.437 780.646,692.174 781.205,725.539 781.764,743.105 782.323,724.065 782.883,708.883 783.442,695.367 784.001,633.41 784.56,653.013 785.12,673.496 785.679,676.745 786.238,676.385 786.797,704.619 787.357,767.219 787.916,795.312 788.475,804.008 789.034,783.943 789.594,763.173 790.153,740.756 790.712,722.029 791.271,704.9 791.831,705.077 792.39,641.988 792.949,664.098 793.508,665.078 794.068,684.207 794.627,669.743 795.186,669.121 795.745,687.205 796.305,707.088 796.864,703.636 797.423,687.683 797.982,687.068 798.542,685.557 799.101,718.616 799.66,714.067 800.219,701.362 800.779,700.186 801.338,687.788 801.897,674.089 802.456,678.424 803.016,629.862 803.575,685.036 804.134,622.144 804.693,624.043 805.253,608.361 805.812,625.467 806.371,596.142 806.931,602.854 807.49,606.993 808.049,595.212 808.608,583.028 809.168,586.443 809.727,589.422 810.286,595.767 810.845,616.427 811.405,619.88 811.964,609.553 812.523,662.571 813.082,665.625 813.642,670.368 814.201,686 814.76,686.627 815.319,673.51 815.879,708.875 816.438,725.387 816.997,758.515 817.556,802.372 818.116,817.716 818.675,811.912 819.234,821.034 819.793,799.687 820.353,838.8 820.912,795.43 821.471,823.035 822.03,800.478 822.59,847.195 823.149,825.41 823.708,814.282 824.267,854.924 824.827,893.646 825.386,898.341 825.945,917.036 826.504,889.045 827.064,882.107 827.623,855.764 828.182,909.867 828.741,932.288 829.301,919.071 829.86,940.443 830.419,943.708 830.978,948.805 831.538,967.864 832.097,923.114 832.656,860.049 833.215,868.047 833.775,872.395 834.334,811.598 834.893,788.388 835.452,768.788 836.012,777.43 836.571,771.266 837.13,750.961 837.689,763.876 838.249,741.974 838.808,755.054 839.367,737.6 839.926,703.55 840.486,702.438 841.045,732.377 841.604,699.293 842.163,696.844 842.723,694.428 843.282,696.091 843.841,723.801 844.4,721.424 844.96,722.157 845.519,719.98 846.078,687.251 846.637,724.423 847.197,691.088 847.756,672.211 848.315,689.758 848.874,673.291 849.434,642.813 849.993,600.686 850.552,589.346 851.111,595.621 851.671,614.1 852.23,648.027 852.789,649.799 853.348,666.171 853.908,651.427 854.467,654.621 855.026,690.829 855.585,722.396 856.145,717.312 856.704,684.188 857.263,688.472 857.822,689.625 858.382,671.346 858.941,721.385 859.5,722.92 860.059,719.188 860.619,735.165 861.178,714.775 861.737,697.634 862.296,697.675 862.856,665.579 863.415,648.391 863.974,667.318 864.533,668.22 865.093,668.013 865.652,654.878 866.211,657.678 866.77,690.122 867.33,675.201 867.889,676.506 868.448,681.1 869.007,665.707 869.567,713.902 870.126,710.311 870.685,712.027 871.244,709.707 871.804,680.053 872.363,681.754 872.922,680.133 873.481,696.563 874.041,680.627 874.6,665.073 875.159,650.809 875.718,683.473 876.278,684.254 876.837,701.49 877.396,702.182 877.955,683.95 878.515,684.932 879.074,654.349 879.633,643.428 880.192,677.448 880.752,647.199 881.311,647.908 881.87,651.315 882.429,651.972 882.989,622.518 883.548,627.991 884.107,601.194 884.666,608.406 885.226,611.117 885.785,633.929 886.344,617.011 886.903,605.122 887.463,577.946 888.022,563.667 888.581,573.489 889.14,580.877 889.7,604.915 890.259,613.147 890.818,607.083 891.377,613.49 891.937,632.695 892.496,699.243 893.055,712.753 893.614,697.74 894.174,713.152 894.733,727.84 895.292,729.386 895.851,713.08 896.411,711.866 896.97,713.411 897.529,709.993 898.088,725.883 898.648,690.571 899.207,689.975 899.766,673.736 900.325,660.868 900.885,711.328 901.444,713.933 902.003,695.222 902.562,689.331 903.122,709.425 903.681,695.938 904.24,708.491 904.799,690.781 905.359,720.424 905.918,718.771 906.477,717.87 907.036,718.126 907.596,699.736 908.155,717.698 908.714,718.021 909.273,701.868 909.833,698.808 910.392,681.156 910.951,680.738 911.51,679.006 912.07,648.917 912.629,653.222 913.188,656.348 913.747,673.978 914.307,674.083 914.866,675.705 915.425,674.544 915.984,660.599 916.544,680.373 917.103,693.491 917.662,673.595 918.221,691.426 918.781,722.444 919.34,720.117 919.899,702.581 920.458,685.056 921.018,718.712 921.577,735.434 922.136,717.693 922.695,700.427 923.255,698.003 923.814,742.44 924.373,771.006 924.932,753.158 925.492,784.057 926.051,779.601 926.61,773.389 927.169,754.614 927.729,750.55 928.288,744.994 928.847,751.15 929.406,745.733 929.966,691.787 930.525,691.427 931.084,711.07 931.644,711.709 932.203,694.131 932.762,676.994 933.321,659.416 933.881,629.503 934.44,633.771 934.999,650.898 935.558,653.895 936.118,658.626 936.677,655.864 937.236,694.038 937.795,680.134 938.355,680.157 938.914,646.2 939.473,667.531 940.032,686.682 940.592,699.2 941.151,714.952 941.71,713.231 942.269,726.469 942.829,704.647 943.388,686.527 943.947,670.646 944.506,635.863 945.066,636.203 945.625,655.205 946.184,673.38 946.743,686.449 947.303,686.891 947.862,689.259 948.421,653.564 948.98,656.782 949.54,626.586 950.099,629.083 950.658,631.954 951.217,619.526 951.777,636.094 952.336,654.897 952.895,671.477 953.454,657.727 954.014,642.934 954.573,664.46 955.132,680.761 955.691,666.149 956.251,699.864 956.81,700.357 957.369,683.396 957.928,668.874 958.488,635.688 959.047,653.558 959.606,622.467 960.165,660.219 960.725,700.163 961.284,715.175 961.843,715.426 962.402,730.184 962.962,711.252 963.521,728.908 964.08,727.006 964.639,742.201 965.199,753.453 965.758,751.632 966.317,763.991 966.876,792.446 967.436,803.373 967.995,795.721 968.554,791.488 969.113,766.987 969.673,761.621 970.232,739.592 970.791,719.443 971.35,699.674 971.91,697.544 972.469,714.387 973.028,651.981 973.587,589.217 974.147,575.355 974.706,565.355 975.265,572.847 975.824,596.988 976.384,587.841 976.943,624.67 977.502,639.667 978.061,594.566 978.621,565.734 979.18,570.964 979.739,544.333 980.298,551.043 980.858,523.79 981.417,529.027 981.976,535.919 982.535,527.985 983.095,552.983 983.654,547.081 984.213,554.169 984.772,576.743 985.332,582.069 985.891,587.382 986.45,575.289 987.009,564.832 987.569,554.81 988.128,564.52 988.687,572.35 989.246,596.545 989.806,618.964 990.365,656.271 990.924,659.771 991.483,680.446 992.043,678.067 992.602,680.266 993.161,680.995 993.72,685.346 994.28,670.241 994.839,708.102 995.398,688.349 995.957,683.845 996.517,699.33 997.076,695.853 997.635,698.709 998.194,709.87 998.754,706.868 999.313,701.519 999.872,699.778 1000.43,731.55 1000.99,731.607 1001.55,726.463 1002.11,754.347 1002.67,752.977 1003.23,749.245 1003.79,763.119 1004.35,805.419 1004.91,814.525 1005.46,806.299 1006.02,816.601 1006.58,795.08 1007.14,807.022 1007.7,816.358 1008.26,809.138 1008.82,834.518 1009.38,825.306 1009.94,818.591 1010.5,812.725 1011.06,771.292 1011.62,716.835 1012.18,745.952 1012.73,790.174 1013.29,811.758 1013.85,771.319 1014.41,732.215 1014.97,743.848 1015.53,671.633 1016.09,671.02 1016.65,669.404 1017.21,672.969 1017.77,674.484 1018.33,657.91 1018.89,673.578 1019.45,673.617 1020.01,690.891 1020.56,689.773 1021.12,686.717 1021.68,703.657 1022.24,668.505 1022.8,668.002 1023.36,698.419 1023.92,714.095 1024.48,708.407 1025.04,706.028 1025.6,755.983 1026.16,752.581 1026.72,733.43 1027.28,695.549 1027.83,698.144 1028.39,682.072 1028.95,649.945 1029.51,589.586 1030.07,560.289 1030.63,599.865 1031.19,592.064 1031.75,575.3 1032.31,615.032 1032.87,586.128 1033.43,572.898 1033.99,598.275 1034.55,617.428 1035.1,620.302 1035.66,641.832 1036.22,610.497 1036.78,629.861 1037.34,651.525 1037.9,650.841 1038.46,630.05 1039.02,648.785 1039.58,644.907 1040.14,680.757 1040.7,681.085 1041.26,664.017 1041.82,663.824 1042.38,681.324 1042.93,681.623 1043.49,697.665 1044.05,695.833 1044.61,694.39 1045.17,712.466 1045.73,695.118 1046.29,666.065 1046.85,668.683 1047.41,686.466 1047.97,698.34 1048.53,711.694 1049.09,675.985 1049.65,673.623 1050.2,707.188 1050.76,692.321 1051.32,658.859 1051.88,676.935 1052.44,673.05 1053,706.165 1053.56,736.845 1054.12,729.767 1054.68,695.359 1055.24,663.5 1055.8,696.561 1056.36,662.312 1056.92,677.777 1057.48,674.372 1058.03,706.321 1058.59,739.308 1059.15,721.53 1059.71,668.895 1060.27,670.18 1060.83,672.999 1061.39,675.21 1061.95,689.103 1062.51,684.509 1063.07,667.268 1063.63,648.659 1064.19,666.663 1064.75,670.116 1065.3,704.53 1065.86,704.364 1066.42,703.845 1066.98,670.182 1067.54,700.766 1068.1,730.206 1068.66,742.282 1069.22,736.595 1069.78,737.072 1070.34,734.006 1070.9,735.029 1071.46,748.754 1072.02,733.104 1072.57,730.089 1073.13,741.017 1073.69,737.262 1074.25,738.667 1074.81,718.154 1075.37,714.378 1075.93,729.48 1076.49,729.726 1077.05,743.195 1077.61,755.84 1078.17,813.804 1078.73,799.961 1079.29,790.834 1079.85,785.061 1080.4,746.021 1080.96,744.596 1081.52,726.73 1082.08,723.786 1082.64,722.378 1083.2,721.966 1083.76,718.229 1084.32,728.996 1084.88,661.476 1085.44,646.047 1086,664.582 1086.56,663.127 1087.12,666.52 1087.67,654.929 1088.23,673.591 1088.79,675.647 1089.35,655.421 1089.91,639.276 1090.47,643.377 1091.03,630.336 1091.59,618.438 1092.15,587.638 1092.71,605.373 1093.27,623.442 1093.83,628.445 1094.39,616.004 1094.94,602.735 1095.5,611.727 1096.06,615.406 1096.62,620.943 1097.18,622.984 1097.74,642.797 1098.3,646.868 1098.86,631.539 1099.42,619.439 1099.98,638.407 1100.54,624.802 1101.1,630.242 1101.66,636.729 1102.22,639.06 1102.77,625.449 1103.33,628.551 1103.89,616.869 1104.45,600.678 1105.01,573.034 1105.57,580.13 1106.13,601.538 1106.69,642.622 1107.25,647.119 1107.81,667.984 1108.37,683.875 1108.93,720.637 1109.49,752.67 1110.04,735.708 1110.6,748.807 1111.16,682.495 1111.72,700.161 1112.28,701.537 1112.84,733.888 1113.4,731.983 1113.96,696.786 1114.52,695.756 1115.08,680.713 1115.64,684.048 1116.2,705.968 1116.76,707.296 1117.31,705.749 1117.87,706.499 1118.43,740.614 1118.99,720.917 1119.55,733.975 1120.11,713.231 1120.67,758.528 1121.23,773.377 1121.79,769.184 1122.35,730.703 1122.91,711.316 1123.47,724.954 1124.03,753.963 1124.59,734.475 1125.14,714.49 1125.7,679.407 1126.26,696.538 1126.82,694.887 1127.38,690.153 1127.94,677.444 1128.5,710.53 1129.06,677.624 1129.62,680.367 1130.18,692.59 1130.74,672.675 1131.3,642.377 1131.86,647.916 1132.41,649.65 1132.97,648.786 1133.53,636.749 1134.09,606.364 1134.65,596.359 1135.21,603.301 1135.77,659.172 1136.33,692.137 1136.89,658.871 1137.45,678.059 1138.01,632.796 1138.57,636.863 1139.13,655.639 1139.68,658.441 1140.24,674.828 1140.8,645.706 1141.36,631.205 1141.92,653.253 1142.48,686.823 1143.04,701.421 1143.6,702.86 1144.16,688.079 1144.72,717.193 1145.28,702.172 1145.84,703.112 1146.4,681.666 1146.96,651.305 1147.51,649.233 1148.07,655.259 1148.63,640.224 1149.19,623.566 1149.75,644.414 1150.31,645.338 1150.87,648.018 1151.43,652.698 1151.99,605.344 1152.55,608.962 1153.11,610.548 1153.67,614.536 1154.23,617.394 1154.78,637.258 1155.34,624.911 1155.9,647.079 1156.46,617.22 1157.02,638.192 1157.58,608.859 1158.14,598.169 1158.7,620.359 1159.26,626.187 1159.82,631.57 1160.38,668.015 1160.94,656.416 1161.5,643.663 1162.05,661.83 1162.61,648.353 1163.17,647.297 1163.73,651.764 1164.29,696.987 1164.85,698.224 1165.41,699.136 1165.97,747.583 1166.53,740.21 1167.09,739.556 1167.65,720.324 1168.21,734.432 1168.77,748.992 1169.33,734.635 1169.88,733.094 1170.44,729.609 1171,739.529 1171.56,737.515 1172.12,716.208 1172.68,715.625 1173.24,697.461 1173.8,695.999 1174.36,679.985 1174.92,679.351 1175.48,696.312 1176.04,713.15 1176.6,713.233 1177.15,713.72 1177.71,715.49 1178.27,693.993 1178.83,742.128 1179.39,721.589 1179.95,704.251 1180.51,697.23 1181.07,696.97 1181.63,713.092 1182.19,695.159 1182.75,661.23 1183.31,661.099 1183.87,616.839 1184.43,637.496 1184.98,653.941 1185.54,685.604 1186.1,764.485 1186.66,758.122 1187.22,752.157 1187.78,762.912 1188.34,758.993 1188.9,754.664 1189.46,766.774 1190.02,778.891 1190.58,799.795 1191.14,790.886 1191.7,732.78 1192.25,727.924 1192.81,756.284 1193.37,783.897 1193.93,812.161 1194.49,787.525 1195.05,781.661 1195.61,775.161 1196.17,751.784 1196.73,749.099 1197.29,777.376 1197.85,756.132 1198.41,752.443 1198.97,749.129 1199.52,779.765 1200.08,771.302 1200.64,778.722 1201.2,754.38 1201.76,765.414 1202.32,760.449 1202.88,723.176 1203.44,688.859 1204,656.885 1204.56,658.95 1205.12,695.964 1205.68,662.209 1206.24,676.761 1206.8,660.534 1207.35,726.485 1207.91,727.101 1208.47,753.507 1209.03,751.06 1209.59,779.455 1210.15,807.195 1210.71,816.794 1211.27,795.045 1211.83,758.212 1212.39,754.249 1212.95,749.979 1213.51,731.275 1214.07,696.039 1214.62,679.536 1215.18,649.403 1215.74,635.252 1216.3,640.253 1216.86,626.827 1217.42,615.593 1217.98,617.643 1218.54,624.52 1219.1,643.342 1219.66,677.447 1220.22,666.587 1220.78,699.009 1221.34,697.49 1221.89,679.429 1222.45,647.997 1223.01,667.535 1223.57,681.134 1224.13,682.485 1224.69,665.513 1225.25,698.853 1225.81,667.252 1226.37,649.118 1226.93,632.216 1227.49,632.299 1228.05,637.834 1228.61,642.642 1229.17,631.905 1229.72,650.658 1230.28,651.704 1230.84,623.31 1231.4,595.675 1231.96,604.164 1232.52,623.349 1233.08,642.727 1233.64,645.276 1234.2,649.462 1234.76,652.967 1235.32,623.961 1235.88,594.82 1236.44,582.539 1236.99,588.656 1237.55,593.93 1238.11,614.781 1238.67,619.123 1239.23,639.184 1239.79,642.542 1240.35,660.619 1240.91,677.724 1241.47,709.092 1242.03,708.375 1242.59,722.268 1243.15,684.313 1243.71,653.005 1244.26,641.507 1244.82,625.434 1245.38,614.48 1245.94,631.5 1246.5,637.515 1247.06,642.727 1247.62,694.234 1248.18,713.152 1248.74,696.496 1249.3,683.354 1249.86,701.375 1250.42,730.783 1250.98,726.682 1251.54,741.548 1252.09,739.471 1252.65,706.768 1253.21,688.848 1253.77,684.517 1254.33,684.837 1254.89,654.28 1255.45,656.76 1256.01,673.173 1256.57,688.955 1257.13,707.007 1257.69,703.822 1258.25,671.94 1258.81,687.982 1259.36,686.826 1259.92,636.935 1260.48,705.081 1261.04,703.531 1261.6,655.378 1262.16,654.915 1262.72,654.297 1263.28,683.224 1263.84,686.773 1264.4,689.435 1264.96,654.867 1265.52,702.293 1266.08,683.346 1266.63,684.351 1267.19,669.286 1267.75,672.717 1268.31,675.476 1268.87,694.658 1269.43,688.884 1269.99,689.391 1270.55,671.949 1271.11,670.699 1271.67,638.733 1272.23,603.977 1272.79,606.63 1273.35,628.61 1273.91,617.696 1274.46,637.473 1275.02,608.749 1275.58,613.352 1276.14,650.407 1276.7,651.394 1277.26,674.11 1277.82,645.947 1278.38,649.314 1278.94,635.946 1279.5,670.203 1280.06,655.814 1280.62,690.018 1281.18,687.161 1281.73,673.387 1282.29,692.645 1282.85,712.579 1283.41,743.74 1283.97,709.694 1284.53,690.094 1285.09,690.114 1285.65,691.646 1286.21,692.279 1286.77,686.698 1287.33,683.622 1287.89,683.677 1288.45,683.65 1289,664.37 1289.56,649.266 1290.12,665.479 1290.68,669.016 1291.24,683.587 1291.8,680.453 1292.36,631.368 1292.92,665.484 1293.48,664.229 1294.04,683.641 1294.6,682.689 1295.16,668.053 1295.72,651.847 1296.28,635.246 1296.83,652.623 1297.39,686.331 1297.95,670.385 1298.51,670.157 1299.07,657.338 1299.63,644.99 1300.19,630.595 1300.75,620.925 1301.31,644.998 1301.87,632.521 1302.43,650.263 1302.99,649.944 1303.55,670.084 1304.1,669.965 1304.66,672.07 1305.22,701.267 1305.78,699.377 1306.34,685.481 1306.9,701.919 1307.46,701.255 1308.02,652.849 1308.58,656.382 1309.14,655.54 1309.7,687.827 1310.26,690.653 1310.82,706.395 1311.38,688.341 1311.93,684.849 1312.49,684.438 1313.05,700.586 1313.61,652.31 1314.17,650.003 1314.73,621.943 1315.29,639.894 1315.85,644.762 1316.41,647.35 1316.97,648.448 1317.53,699.248 1318.09,683.202 1318.65,679.624 1319.2,697.631 1319.76,714.427 1320.32,728.448 1320.88,743.927 1321.44,722.476 1322,739.636 1322.56,737.098 1323.12,704.481 1323.68,722.53 1324.24,718.076 1324.8,713.654 1325.36,712.8 1325.92,711.184 1326.47,711.459 1327.03,693.086 1327.59,690.561 1328.15,661.766 1328.71,680.194 1329.27,678.944 1329.83,662.798 1330.39,680.828 1330.95,730.486 1331.51,729.117 1332.07,741.195 1332.63,736.452 1333.19,750.435 1333.75,730.773 1334.3,726.641 1334.86,739.367 1335.42,704.805 1335.98,704.742 1336.54,716.12 1337.1,725.99 1337.66,690.067 1338.22,692.619 1338.78,707.061 1339.34,705.107 1339.9,671.353 1340.46,671.321 1341.02,668.102 1341.57,670.052 1342.13,672.959 1342.69,655.037 1343.25,651.715 1343.81,669.479 1344.37,671.792 1344.93,688.84 1345.49,689.474 1346.05,687.969 1346.61,704.776 1347.17,635.771 1347.73,655.225 1348.29,657.569 1348.84,645.724 1349.4,648.934 1349.96,633.545 1350.52,633.081 1351.08,621.102 1351.64,608.137 1352.2,626.513 1352.76,631.359 1353.32,669.62 1353.88,689.031 1354.44,689.053 1355,708.57 1355.56,690.789 1356.12,709.917 1356.67,790.016 1357.23,816.348 1357.79,826.438 1358.35,836.288 1358.91,844.071 1359.47,805.853 1360.03,813.612 1360.59,839.588 1361.15,799.937 1361.71,777.09 1362.27,740.893 1362.83,767.451 1363.39,745.846 1363.94,743.86 1364.5,742.21 1365.06,703.711 1365.62,671.521 1366.18,658.086 1366.74,627.271 1367.3,626.695 1367.86,661.44 1368.42,646.441 1368.98,649.612 1369.54,670.665 1370.1,668.158 1370.66,650.326 1371.21,654.297 1371.77,624.577 1372.33,611.047 1372.89,578.03 1373.45,615.877 1374.01,632.942 1374.57,621.335 1375.13,655.791 1375.69,672.87 1376.25,642.328 1376.81,648.074 1377.37,653.027 1377.93,666.899 1378.49,667.361 1379.04,667.556 1379.6,666.104 1380.16,685.793 1380.72,720.4 1381.28,688.294 1381.84,688.912 1382.4,705.171 1382.96,723.208 1383.52,722.627 1384.08,673.867 1384.64,659.229 1385.2,640.635 1385.76,676.894 1386.31,677.482 1386.87,660.745 1387.43,646.29 1387.99,712.561 1388.55,709.548 1389.11,690.74 1389.67,708.4 1390.23,707.438 1390.79,690.968 1391.35,739.839 1391.91,691.202 1392.47,690.876 1393.03,705.289 1393.58,702.924 1394.14,720.728 1394.7,731.876 1395.26,712.944 1395.82,676.07 1396.38,675.536 1396.94,660.544 1397.5,678.323 1398.06,661.887 1398.62,677.836 1399.18,630.68 1399.74,617.232 1400.3,621.578 1400.86,688.643 1401.41,703.767 1401.97,688.26 1402.53,671.253 1403.09,640.008 1403.65,675.99 1404.21,693.599 1404.77,679.707 1405.33,713.296 1405.89,713.682 1406.45,727.527 1407.01,710.4 1407.57,726.294 1408.13,694.631 1408.68,710.756 1409.24,695.362 1409.8,680.421 1410.36,662.102 1410.92,648.098 1411.48,681.101 1412.04,666.596 1412.6,684.899 1413.16,700.482 1413.72,715.886 1414.28,701.401 1414.84,701.742 1415.4,684.202 1415.95,669.081 1416.51,716.827 1417.07,745.753 1417.63,709.635 1418.19,706.677 1418.75,705.942 1419.31,706.774 1419.87,691.893 1420.43,705.545 1420.99,733.402 1421.55,793.556 1422.11,786.751 1422.67,796.032 1423.23,802.788 1423.78,779.916 1424.34,756.562 1424.9,719.682 1425.46,719.688 1426.02,702.404 1426.58,703.309 1427.14,689.719 1427.7,735.842 1428.26,717.259 1428.82,701.64 1429.38,699.998 1429.94,680.054 1430.5,665.68 1431.05,649.262 1431.61,636.571 1432.17,655.898 1432.73,642.449 1433.29,595.335 1433.85,584.112 1434.41,591.358 1434.97,581.547 1435.53,602.379 1436.09,609.95 1436.65,631.694 1437.21,668.376 1437.77,652.36 1438.33,671.049 1438.88,672.979 1439.44,657.489 1440,640.161 1440.56,626.333 1441.12,627.653 1441.68,644.808 1442.24,647.948 1442.8,651.434 1443.36,651.555 1443.92,653.389 1444.48,638.941 1445.04,625.314 1445.6,627.766 1446.15,630.374 1446.71,632.017 1447.27,621.302 1447.83,624.776 1448.39,609.059 1448.95,613.147 1449.51,600.117 1450.07,575.193 1450.63,596.158 1451.19,596.454 1451.75,636.518 1452.31,608.831 1452.87,609.384 1453.42,662.954 1453.98,644.433 1454.54,648.834 1455.1,650.115 1455.66,647.802 1456.22,631.889 1456.78,649.543 1457.34,716.852 1457.9,732.876 1458.46,682.723 1459.02,682.871 1459.58,683.379 1460.14,670.37 1460.7,703.799 1461.25,702.387 1461.81,685.254 1462.37,688.228 1462.93,687.126 1463.49,700.597 1464.05,699.725 1464.61,683.08 1465.17,682.953 1465.73,680.055 1466.29,663.859 1466.85,662.618 1467.41,694.081 1467.97,691.945 1468.52,705.108 1469.08,718.106 1469.64,745.048 1470.2,725.044 1470.76,757.139 1471.32,752.893 1471.88,749.824 1472.44,748.302 1473,763.265 1473.56,774.693 1474.12,782.439 1474.68,791.248 1475.24,783.508 1475.79,765.402 1476.35,775.387 1476.91,687.967 1477.47,690.848 1478.03,658.781 1478.59,660.066 1479.15,674.636 1479.71,658.135 1480.27,655.051 1480.83,673.268 1481.39,673.884 1481.95,675.278 1482.51,655.963 1483.07,642.801 1483.62,645.708 1484.18,618.686 1484.74,641.497 1485.3,646.426 1485.86,653.829 1486.42,671.042 1486.98,639.438 1487.54,639.233 1488.1,642.265 1488.66,628.587 1489.22,631.805 1489.78,618.839 1490.34,588.958 1490.89,628.314 1491.45,618.63 1492.01,640.457 1492.57,658.31 1493.13,655.883 1493.69,719.398 1494.25,716.64 1494.81,746.41 1495.37,742.553 1495.93,740.288 1496.49,707.221 1497.05,723.748 1497.61,675.346 1498.16,661.69 1498.72,661.652 1499.28,663.894 1499.84,663.318 1500.4,629.536 1500.96,699.461 1501.52,716.639 1502.08,700.034 1502.64,718.826 1503.2,716.455 1503.76,699.828 1504.32,679.728 1504.88,661.727 1505.44,664.472 1505.99,648.327 1506.55,635.922 1507.11,639.993 1507.67,642.338 1508.23,661.01 1508.79,659.803 1509.35,628.279 1509.91,630.528 1510.47,584.596 1511.03,621.353 1511.59,639.949 1512.15,639.941 1512.71,660.245 1513.26,659.502 1513.82,646.147 1514.38,629.876 1514.94,617.605 1515.5,637.283 1516.06,656.434 1516.62,627.11 1517.18,630.18 1517.74,632.527 1518.3,653.559 1518.86,672.065 1519.42,656.922 1519.98,660.939 1520.53,678.508 1521.09,690.844 1521.65,688.104 1522.21,671.867 1522.77,673.799 1523.33,709.116 1523.89,722.85 1524.45,736.422 1525.01,712.678 1525.57,727.297 1526.13,754.848 1526.69,731.094 1527.25,711.209 1527.81,726.247 1528.36,725.201 1528.92,722.832 1529.48,753.283 1530.04,766.613 1530.6,776.654 1531.16,773.055 1531.72,767.207 1532.28,778.918 1532.84,789.031 1533.4,799.274 1533.96,807.858 1534.52,819.524 1535.08,797.893 1535.63,790.766 1536.19,784.717 1536.75,828.174 1537.31,770.803 1537.87,766.339 1538.43,775.924 1538.99,771.119 1539.55,782.396 1540.11,792.345 1540.67,800.231 1541.23,809.366 1541.79,769.219 1542.35,766.495 1542.9,773.094 1543.46,771.81 1544.02,748.231 1544.58,744.132 1545.14,739.601 1545.7,737.716 1546.26,734.386 1546.82,713.058 1547.38,692.738 1547.94,673.923 1548.5,690.597 1549.06,690.667 1549.62,656.019 1550.18,640.627 1550.73,637.102 1551.29,620.89 1551.85,622.513 1552.41,642.023 1552.97,642.047 1553.53,627.459 1554.09,613.081 1554.65,615.656 1555.21,605.597 1555.77,589.957 1556.33,628.232 1556.89,580.703 1557.45,587.335 1558,591.588 1558.56,611.578 1559.12,613.732 1559.68,618.087 1560.24,621.445 1560.8,641.972 1561.36,641.212 1561.92,692.997 1562.48,680.577 1563.04,695.624 1563.6,695.245 1564.16,706.529 1564.72,673.032 1565.28,657.64 1565.83,658.116 1566.39,680.406 1566.95,676.682 1567.51,698.692 1568.07,682.337 1568.63,713.184 1569.19,681.07 1569.75,681.147 1570.31,667.179 1570.87,636.247 1571.43,624.301 1571.99,628.12 1572.55,630.28 1573.1,664.494 1573.66,681.787 1574.22,664.401 1574.78,647.889 1575.34,634.876 1575.9,640.925 1576.46,623.824 1577.02,612.725 1577.58,617.483 1578.14,606.757 1578.7,560.187 1579.26,568.402 1579.82,555.111 1580.37,575.994 1580.93,567.75 1581.49,623.875 1582.05,642.987 1582.61,646.158 1583.17,635.473 1583.73,622.247 1584.29,561.101 1584.85,567.176 1585.41,606.875 1585.97,582.626 1586.53,587.786 1587.09,592.592 1587.65,597.175 1588.2,619.105 1588.76,607.145 1589.32,576.309 1589.88,618.509 1590.44,572.19 1591,595.206 1591.56,598.495 1592.12,638.343 1592.68,623.489 1593.24,626.66 1593.8,659.923 1594.36,658.877 1594.92,643.58 1595.47,647.702 1596.03,649.057 1596.59,651.703 1597.15,666.799 1597.71,681.912 1598.27,728.793 1598.83,726.177 1599.39,705.409 1599.95,719.942 1600.51,720.959 1601.07,767.48 1601.63,778.003 1602.19,723.883 1602.74,722.63 1603.3,705.61 1603.86,674.969 1604.42,677.37 1604.98,657.991 1605.54,659.926 1606.1,646.638 1606.66,663.156 1607.22,699.287 1607.78,702.859 1608.34,687.623 1608.9,670.909 1609.46,689.035 1610.02,689.543 1610.57,705.085 1611.13,703.72 1611.69,702.096 1612.25,718.117 1612.81,699.628 1613.37,696.901 1613.93,678.12 1614.49,695.781 1615.05,696.795 1615.61,680.276 1616.17,712.708 1616.73,712.826 1617.29,741.342 1617.84,788.234 1618.4,797.51 1618.96,774.609 1619.52,767.401 1620.08,779.322 1620.64,773.359 1621.2,784.773 1621.76,778.353 1622.32,807.944 1622.88,783.577 1623.44,796.478 1624,788.927 1624.56,752.606 1625.11,763.986 1625.67,774.5 1626.23,752.024 1626.79,766.725 1627.35,759.15 1627.91,770.317 1628.47,749.07 1629.03,744.369 1629.59,722.691 1630.15,703.591 1630.71,700.388 1631.27,682.291 1631.83,681.565 1632.39,683.836 1632.94,685.566 1633.5,682.871 1634.06,669.566 1634.62,685.784 1635.18,699.688 1635.74,731.957 1636.3,701.064 1636.86,703.931 1637.42,736.015 1637.98,748.669 1638.54,710.025 1639.1,705.054 1639.66,702.417 1640.21,701.365 1640.77,683.99 1641.33,686.608 1641.89,670.929 1642.45,655.825 1643.01,659.858 1643.57,661.059 1644.13,644.369 1644.69,664.11 1645.25,599.897 1645.81,622.432 1646.37,645.379 1646.93,651.058 1647.48,649.662 1648.04,633.548 1648.6,667.938 1649.16,666.616 1649.72,667.815 1650.28,652.699 1650.84,688.953 1651.4,676.577 1651.96,675.967 1652.52,723.628 1653.08,706.229 1653.64,688.326 1654.2,687.83 1654.76,672.33 1655.31,687.553 1655.87,683.818 1656.43,683.833 1656.99,700.309 1657.55,718.517 1658.11,682.659 1658.67,699.678 1659.23,730.726 1659.79,744.458 1660.35,802.144 1660.91,793.947 1661.47,789.999 1662.03,784.893 1662.58,749.167 1663.14,728.453 1663.7,722.922 1664.26,683.596 1664.82,703.357 1665.38,700.883 1665.94,665.696 1666.5,665.605 1667.06,651.825 1667.62,653.023 1668.18,624.055 1668.74,625.699 1669.3,612.564 1669.85,603.611 1670.41,607.972 1670.97,644.419 1671.53,617.811 1672.09,586.343 1672.65,590.556 1673.21,580.528 1673.77,586.824 1674.33,591.304 1674.89,583.614 1675.45,555.373 1676.01,577.347 1676.57,568.293 1677.13,607.087 1677.68,626.597 1678.24,597.751 1678.8,632.039 1679.36,634.16 1679.92,685.285 1680.48,683.772 1681.04,696.018 1681.6,696.255 1682.16,730.543 1682.72,712.579 1683.28,661.521 1683.84,648.447 1684.4,632.639 1684.95,635.539 1685.51,636.461 1686.07,658.519 1686.63,661.183 1687.19,692.399 1687.75,692.115 1688.31,706.399 1688.87,688.921 1689.43,736.434 1689.99,719.144 1690.55,700.561 1691.11,736.305 1691.67,721.611 1692.23,720.12 1692.78,736.287 1693.34,717.417 1693.9,734.879 1694.46,731.605 1695.02,711.722 1695.58,694.267 1696.14,678.346 1696.7,646.143 1697.26,668.72 1697.82,668.103 1698.38,635.953 1698.94,629.672 1699.5,632.245 1700.05,650.344 1700.61,650.334 1701.17,669.177 1701.73,707.341 1702.29,723.789 1702.85,718.885 1703.41,668.314 1703.97,653.843 1704.53,654.331 1705.09,641.965 1705.65,645.383 1706.21,648.687 1706.77,619.463 1707.32,670.817 1707.88,699.276 1708.44,697.233 1709,681.404 1709.56,666.429 1710.12,680.18 1710.68,666.842 1711.24,668.236 1711.8,651.508 1712.36,683.571 1712.92,713.731 1713.48,744.893 1714.04,726.735 1714.6,705.03 1715.15,669.675 1715.71,686.88 1716.27,717.886 1716.83,670.918 1717.39,701.208 1717.95,717.328 1718.51,732.304 1719.07,726.658 1719.63,757.673 1720.19,767.458 1720.75,794.675 1721.31,774.588 1721.87,738.837 1722.42,704.338 1722.98,719.182 1723.54,733.337 1724.1,731.994 1724.66,748.012 1725.22,794.994 1725.78,788.721 1726.34,783.49 1726.9,762.686 1727.46,791.704 1728.02,772.773 1728.58,780.45 1729.14,777.411 1729.69,756.107 1730.25,738.298 1730.81,753.103 1731.37,777.342 1731.93,725.31 1732.49,756.263 1733.05,717.669 1733.61,698.725 1734.17,698.854 1734.73,697.893 1735.29,680.425 1735.85,650.171 1736.41,686.616 1736.97,654.907 1737.52,673.058 1738.08,705.337 1738.64,734.655 1739.2,727.886 1739.76,738.483 1740.32,729.852 1740.88,729.498 1741.44,743.622 1742,755.02 1742.56,753.664 1743.12,747.496 1743.68,709.277 1744.24,706.913 1744.79,722.564 1745.35,770.507 1745.91,765.843 1746.47,697.596 1747.03,698.113 1747.59,651.623 1748.15,671.948 1748.71,671.061 1749.27,654.53 1749.83,655.628 1750.39,688.993 1750.95,702.587 1751.51,716.431 1752.06,729.333 1752.62,728.287 1753.18,708.398 1753.74,741.18 1754.3,736.947 1754.86,751.54 1755.42,748.16 1755.98,763.18 1756.54,758.808 1757.1,739.439 1757.66,721.328 1758.22,765.66 1758.78,775.376 1759.34,752.991 1759.89,729.876 1760.45,709.934 1761.01,707.414 1761.57,684.932 1762.13,667.181 1762.69,683.476 1763.25,685.825 1763.81,668.454 1764.37,667.99 1764.93,667.69 1765.49,665.645 1766.05,676.644 1766.61,711.696 1767.16,728.005 1767.72,727.813 1768.28,709.945 1768.84,693.43 1769.4,688.396 1769.96,673.329 1770.52,674.614 1771.08,671.932 1771.64,674.255 1772.2,658.916 1772.76,645.002 1773.32,566.851 1773.88,570.217 1774.43,590.805 1774.99,613.602 1775.55,599.945 1776.11,589.402 1776.67,577.511 1777.23,568.836 1777.79,577.303 1778.35,579.25 1778.91,567.453 1779.47,576.751 1780.03,548.925 1780.59,540.252 1781.15,548.04 1781.71,602.467 1782.26,657.736 1782.82,690.586 1783.38,707.694 1783.94,711.236 1784.5,714.418 1785.06,716.374 1785.62,712.733 1786.18,727.417 1786.74,755.276 1787.3,717.7 1787.86,681.228 1788.42,650.844 1788.98,634.481 1789.53,604.481 1790.09,577.827 1790.65,581.266 1791.21,605.775 1791.77,610.691 1792.33,632.546 1792.89,633.359 1793.45,635.204 1794.01,624.19 1794.57,645.61 1795.13,651.694 1795.69,638.207 1796.25,624.868 1796.8,624.937 1797.36,615.412 1797.92,635.449 1798.48,654.872 1799.04,688.267 1799.6,702.899 1800.16,683.692 1800.72,617.538 1801.28,589.332 1801.84,611.468 1802.4,600.124 1802.96,588.624 1803.52,672.219 1804.08,675.327 1804.63,680.135 1805.19,696.813 1805.75,713.597 1806.31,710.971 1806.87,694.2 1807.43,679.181 1807.99,696.162 1808.55,698.701 1809.11,683.839 1809.67,700.322 1810.23,718.392 1810.79,719.619 1811.35,718.051 1811.9,728.286 1812.46,741.394 1813.02,722.549 1813.58,721.77 1814.14,720.337 1814.7,719.526 1815.26,731.392 1815.82,777.104 1816.38,786.59 1816.94,764.006 1817.5,807.017 1818.06,817.764 1818.62,813.179 1819.18,840.025 1819.73,850.369 1820.29,795.704 1820.85,808.523 1821.41,799.958 1821.97,778.78 1822.53,788.524 1823.09,751.728 1823.65,732.647 1824.21,745.059 1824.77,756.166 1825.33,767.941 1825.89,761.772 1826.45,742.451 1827,734.197 1827.56,730.341 1828.12,725.889 1828.68,721.414 1829.24,701.488 1829.8,681.455 1830.36,667.12 1830.92,666.773 1831.48,665.834 1832.04,634.248 1832.6,649.295 1833.16,617.938 1833.72,623.369 1834.27,592.148 1834.83,581.108 1835.39,602.348 1835.95,619.718 1836.51,606.351 1837.07,608.51 1837.63,644.776 1838.19,664.726 \"/>\n<path clip-path=\"url(#clip633)\" d=\"M720.247 691.922 L720.806 691.922 L721.365 691.922 L721.924 691.922 L722.484 691.922 L723.043 691.922 L723.602 691.922 L724.161 691.922 L724.721 691.922 L725.28 691.922 L725.839 691.922 L726.398 691.922 L726.958 691.922 L727.517 691.922 L728.076 691.922 L728.635 691.922 L729.195 691.922 L729.754 691.922 L730.313 691.922 L730.872 691.922 L731.432 691.922 L731.991 691.922 L732.55 691.922 L733.109 691.922 L733.669 691.922 L734.228 691.922 L734.787 691.922 L735.346 691.922 L735.906 691.922 L736.465 691.922 L737.024 691.922 L737.583 691.922 L738.143 691.922 L738.702 691.922 L739.261 691.922 L739.82 691.922 L740.38 691.922 L740.939 691.922 L741.498 691.922 L742.057 691.922 L742.617 691.922 L743.176 691.922 L743.735 691.922 L744.294 691.922 L744.854 691.922 L745.413 691.922 L745.972 691.922 L746.531 691.922 L747.091 691.922 L747.65 691.922 L748.209 691.922 L748.768 691.922 L749.328 691.922 L749.887 691.922 L750.446 691.922 L751.005 691.922 L751.565 691.922 L752.124 691.922 L752.683 691.922 L753.242 691.922 L753.802 691.922 L754.361 691.922 L754.92 691.922 L755.479 691.922 L756.039 691.922 L756.598 691.922 L757.157 691.922 L757.716 691.922 L758.276 691.922 L758.835 691.922 L759.394 691.922 L759.953 691.922 L760.513 691.922 L761.072 691.922 L761.631 691.922 L762.19 691.922 L762.75 691.922 L763.309 691.922 L763.868 691.922 L764.427 691.922 L764.987 691.922 L765.546 691.922 L766.105 691.922 L766.664 691.922 L767.224 691.922 L767.783 691.922 L768.342 691.922 L768.901 691.922 L769.461 691.922 L770.02 691.922 L770.579 691.922 L771.138 691.922 L771.698 691.922 L772.257 691.922 L772.816 691.922 L773.375 691.922 L773.935 691.922 L774.494 691.922 L775.053 691.922 L775.612 691.922 L776.172 691.922 L776.731 691.922 L777.29 691.922 L777.849 691.922 L778.409 691.922 L778.968 691.922 L779.527 691.922 L780.086 691.922 L780.646 691.922 L781.205 691.922 L781.764 691.922 L782.323 691.922 L782.883 691.922 L783.442 691.922 L784.001 691.922 L784.56 691.922 L785.12 691.922 L785.679 691.922 L786.238 691.922 L786.797 691.922 L787.357 691.922 L787.916 691.922 L788.475 691.922 L789.034 691.922 L789.594 691.922 L790.153 691.922 L790.712 691.922 L791.271 691.922 L791.831 691.922 L792.39 691.922 L792.949 691.922 L793.508 691.922 L794.068 691.922 L794.627 691.922 L795.186 691.922 L795.745 691.922 L796.305 691.922 L796.864 691.922 L797.423 691.922 L797.982 691.922 L798.542 691.922 L799.101 691.922 L799.66 691.922 L800.219 691.922 L800.779 691.922 L801.338 691.922 L801.897 691.922 L802.456 691.922 L803.016 691.922 L803.575 691.922 L804.134 691.922 L804.693 691.922 L805.253 691.922 L805.812 691.922 L806.371 691.922 L806.931 691.922 L807.49 691.922 L808.049 691.922 L808.608 691.922 L809.168 691.922 L809.727 691.922 L810.286 691.922 L810.845 691.922 L811.405 691.922 L811.964 691.922 L812.523 691.922 L813.082 691.922 L813.642 691.922 L814.201 691.922 L814.76 691.922 L815.319 691.922 L815.879 691.922 L816.438 691.922 L816.997 691.922 L817.556 691.922 L818.116 691.922 L818.675 691.922 L819.234 691.922 L819.793 691.922 L820.353 691.922 L820.912 691.922 L821.471 691.922 L822.03 691.922 L822.59 691.922 L823.149 691.922 L823.708 691.922 L824.267 691.922 L824.827 691.922 L825.386 691.922 L825.945 691.922 L826.504 691.922 L827.064 691.922 L827.623 691.922 L828.182 691.922 L828.741 691.922 L829.301 691.922 L829.86 691.922 L830.419 691.922 L830.978 691.922 L831.538 691.922 L832.097 691.922 L832.656 691.922 L833.215 691.922 L833.775 691.922 L834.334 691.922 L834.893 691.922 L835.452 691.922 L836.012 691.922 L836.571 691.922 L837.13 691.922 L837.689 691.922 L838.249 691.922 L838.808 691.922 L839.367 691.922 L839.926 691.922 L840.486 691.922 L841.045 691.922 L841.604 691.922 L842.163 691.922 L842.723 691.922 L843.282 691.922 L843.841 691.922 L844.4 691.922 L844.96 691.922 L845.519 691.922 L846.078 691.922 L846.637 691.922 L847.197 691.922 L847.756 691.922 L848.315 691.922 L848.874 691.922 L849.434 691.922 L849.993 691.922 L850.552 691.922 L851.111 691.922 L851.671 691.922 L852.23 691.922 L852.789 691.922 L853.348 691.922 L853.908 691.922 L854.467 691.922 L855.026 691.922 L855.585 691.922 L856.145 691.922 L856.704 691.922 L857.263 691.922 L857.822 691.922 L858.382 691.922 L858.941 691.922 L859.5 691.922 L860.059 691.922 L860.619 691.922 L861.178 691.922 L861.737 691.922 L862.296 691.922 L862.856 691.922 L863.415 691.922 L863.974 691.922 L864.533 691.922 L865.093 691.922 L865.652 691.922 L866.211 691.922 L866.77 691.922 L867.33 691.922 L867.889 691.922 L868.448 691.922 L869.007 691.922 L869.567 691.922 L870.126 691.922 L870.685 691.922 L871.244 691.922 L871.804 691.922 L872.363 691.922 L872.922 691.922 L873.481 691.922 L874.041 691.922 L874.6 691.922 L875.159 691.922 L875.718 691.922 L876.278 691.922 L876.837 691.922 L877.396 691.922 L877.955 691.922 L878.515 691.922 L879.074 691.922 L879.633 691.922 L880.192 691.922 L880.752 691.922 L881.311 691.922 L881.87 691.922 L882.429 691.922 L882.989 691.922 L883.548 691.922 L884.107 691.922 L884.666 691.922 L885.226 691.922 L885.785 691.922 L886.344 691.922 L886.903 691.922 L887.463 691.922 L888.022 691.922 L888.581 691.922 L889.14 691.922 L889.7 691.922 L890.259 691.922 L890.818 691.922 L891.377 691.922 L891.937 691.922 L892.496 691.922 L893.055 691.922 L893.614 691.922 L894.174 691.922 L894.733 691.922 L895.292 691.922 L895.851 691.922 L896.411 691.922 L896.97 691.922 L897.529 691.922 L898.088 691.922 L898.648 691.922 L899.207 691.922 L899.766 691.922 L900.325 691.922 L900.885 691.922 L901.444 691.922 L902.003 691.922 L902.562 691.922 L903.122 691.922 L903.681 691.922 L904.24 691.922 L904.799 691.922 L905.359 691.922 L905.918 691.922 L906.477 691.922 L907.036 691.922 L907.596 691.922 L908.155 691.922 L908.714 691.922 L909.273 691.922 L909.833 691.922 L910.392 691.922 L910.951 691.922 L911.51 691.922 L912.07 691.922 L912.629 691.922 L913.188 691.922 L913.747 691.922 L914.307 691.922 L914.866 691.922 L915.425 691.922 L915.984 691.922 L916.544 691.922 L917.103 691.922 L917.662 691.922 L918.221 691.922 L918.781 691.922 L919.34 691.922 L919.899 691.922 L920.458 691.922 L921.018 691.922 L921.577 691.922 L922.136 691.922 L922.695 691.922 L923.255 691.922 L923.814 691.922 L924.373 691.922 L924.932 691.922 L925.492 691.922 L926.051 691.922 L926.61 691.922 L927.169 691.922 L927.729 691.922 L928.288 691.922 L928.847 691.922 L929.406 691.922 L929.966 691.922 L930.525 691.922 L931.084 691.922 L931.644 691.922 L932.203 691.922 L932.762 691.922 L933.321 691.922 L933.881 691.922 L934.44 691.922 L934.999 691.922 L935.558 691.922 L936.118 691.922 L936.677 691.922 L937.236 691.922 L937.795 691.922 L938.355 691.922 L938.914 691.922 L939.473 691.922 L940.032 691.922 L940.592 691.922 L941.151 691.922 L941.71 691.922 L942.269 691.922 L942.829 691.922 L943.388 691.922 L943.947 691.922 L944.506 691.922 L945.066 691.922 L945.625 691.922 L946.184 691.922 L946.743 691.922 L947.303 691.922 L947.862 691.922 L948.421 691.922 L948.98 691.922 L949.54 691.922 L950.099 691.922 L950.658 691.922 L951.217 691.922 L951.777 691.922 L952.336 691.922 L952.895 691.922 L953.454 691.922 L954.014 691.922 L954.573 691.922 L955.132 691.922 L955.691 691.922 L956.251 691.922 L956.81 691.922 L957.369 691.922 L957.928 691.922 L958.488 691.922 L959.047 691.922 L959.606 691.922 L960.165 691.922 L960.725 691.922 L961.284 691.922 L961.843 691.922 L962.402 691.922 L962.962 691.922 L963.521 691.922 L964.08 691.922 L964.639 691.922 L965.199 691.922 L965.758 691.922 L966.317 691.922 L966.876 691.922 L967.436 691.922 L967.995 691.922 L968.554 691.922 L969.113 691.922 L969.673 691.922 L970.232 691.922 L970.791 691.922 L971.35 691.922 L971.91 691.922 L972.469 691.922 L973.028 691.922 L973.587 691.922 L974.147 691.922 L974.706 691.922 L975.265 691.922 L975.824 691.922 L976.384 691.922 L976.943 691.922 L977.502 691.922 L978.061 691.922 L978.621 691.922 L979.18 691.922 L979.739 691.922 L980.298 691.922 L980.858 691.922 L981.417 691.922 L981.976 691.922 L982.535 691.922 L983.095 691.922 L983.654 691.922 L984.213 691.922 L984.772 691.922 L985.332 691.922 L985.891 691.922 L986.45 691.922 L987.009 691.922 L987.569 691.922 L988.128 691.922 L988.687 691.922 L989.246 691.922 L989.806 691.922 L990.365 691.922 L990.924 691.922 L991.483 691.922 L992.043 691.922 L992.602 691.922 L993.161 691.922 L993.72 691.922 L994.28 691.922 L994.839 691.922 L995.398 691.922 L995.957 691.922 L996.517 691.922 L997.076 691.922 L997.635 691.922 L998.194 691.922 L998.754 691.922 L999.313 691.922 L999.872 691.922 L1000.43 691.922 L1000.99 691.922 L1001.55 691.922 L1002.11 691.922 L1002.67 691.922 L1003.23 691.922 L1003.79 691.922 L1004.35 691.922 L1004.91 691.922 L1005.46 691.922 L1006.02 691.922 L1006.58 691.922 L1007.14 691.922 L1007.7 691.922 L1008.26 691.922 L1008.82 691.922 L1009.38 691.922 L1009.94 691.922 L1010.5 691.922 L1011.06 691.922 L1011.62 691.922 L1012.18 691.922 L1012.73 691.922 L1013.29 691.922 L1013.85 691.922 L1014.41 691.922 L1014.97 691.922 L1015.53 691.922 L1016.09 691.922 L1016.65 691.922 L1017.21 691.922 L1017.77 691.922 L1018.33 691.922 L1018.89 691.922 L1019.45 691.922 L1020.01 691.922 L1020.56 691.922 L1021.12 691.922 L1021.68 691.922 L1022.24 691.922 L1022.8 691.922 L1023.36 691.922 L1023.92 691.922 L1024.48 691.922 L1025.04 691.922 L1025.6 691.922 L1026.16 691.922 L1026.72 691.922 L1027.28 691.922 L1027.83 691.922 L1028.39 691.922 L1028.95 691.922 L1029.51 691.922 L1030.07 691.922 L1030.63 691.922 L1031.19 691.922 L1031.75 691.922 L1032.31 691.922 L1032.87 691.922 L1033.43 691.922 L1033.99 691.922 L1034.55 691.922 L1035.1 691.922 L1035.66 691.922 L1036.22 691.922 L1036.78 691.922 L1037.34 691.922 L1037.9 691.922 L1038.46 691.922 L1039.02 691.922 L1039.58 691.922 L1040.14 691.922 L1040.7 691.922 L1041.26 691.922 L1041.82 691.922 L1042.38 691.922 L1042.93 691.922 L1043.49 691.922 L1044.05 691.922 L1044.61 691.922 L1045.17 691.922 L1045.73 691.922 L1046.29 691.922 L1046.85 691.922 L1047.41 691.922 L1047.97 691.922 L1048.53 691.922 L1049.09 691.922 L1049.65 691.922 L1050.2 691.922 L1050.76 691.922 L1051.32 691.922 L1051.88 691.922 L1052.44 691.922 L1053 691.922 L1053.56 691.922 L1054.12 691.922 L1054.68 691.922 L1055.24 691.922 L1055.8 691.922 L1056.36 691.922 L1056.92 691.922 L1057.48 691.922 L1058.03 691.922 L1058.59 691.922 L1059.15 691.922 L1059.71 691.922 L1060.27 691.922 L1060.83 691.922 L1061.39 691.922 L1061.95 691.922 L1062.51 691.922 L1063.07 691.922 L1063.63 691.922 L1064.19 691.922 L1064.75 691.922 L1065.3 691.922 L1065.86 691.922 L1066.42 691.922 L1066.98 691.922 L1067.54 691.922 L1068.1 691.922 L1068.66 691.922 L1069.22 691.922 L1069.78 691.922 L1070.34 691.922 L1070.9 691.922 L1071.46 691.922 L1072.02 691.922 L1072.57 691.922 L1073.13 691.922 L1073.69 691.922 L1074.25 691.922 L1074.81 691.922 L1075.37 691.922 L1075.93 691.922 L1076.49 691.922 L1077.05 691.922 L1077.61 691.922 L1078.17 691.922 L1078.73 691.922 L1079.29 691.922 L1079.85 691.922 L1080.4 691.922 L1080.96 691.922 L1081.52 691.922 L1082.08 691.922 L1082.64 691.922 L1083.2 691.922 L1083.76 691.922 L1084.32 691.922 L1084.88 691.922 L1085.44 691.922 L1086 691.922 L1086.56 691.922 L1087.12 691.922 L1087.67 691.922 L1088.23 691.922 L1088.79 691.922 L1089.35 691.922 L1089.91 691.922 L1090.47 691.922 L1091.03 691.922 L1091.59 691.922 L1092.15 691.922 L1092.71 691.922 L1093.27 691.922 L1093.83 691.922 L1094.39 691.922 L1094.94 691.922 L1095.5 691.922 L1096.06 691.922 L1096.62 691.922 L1097.18 691.922 L1097.74 691.922 L1098.3 691.922 L1098.86 691.922 L1099.42 691.922 L1099.98 691.922 L1100.54 691.922 L1101.1 691.922 L1101.66 691.922 L1102.22 691.922 L1102.77 691.922 L1103.33 691.922 L1103.89 691.922 L1104.45 691.922 L1105.01 691.922 L1105.57 691.922 L1106.13 691.922 L1106.69 691.922 L1107.25 691.922 L1107.81 691.922 L1108.37 691.922 L1108.93 691.922 L1109.49 691.922 L1110.04 691.922 L1110.6 691.922 L1111.16 691.922 L1111.72 691.922 L1112.28 691.922 L1112.84 691.922 L1113.4 691.922 L1113.96 691.922 L1114.52 691.922 L1115.08 691.922 L1115.64 691.922 L1116.2 691.922 L1116.76 691.922 L1117.31 691.922 L1117.87 691.922 L1118.43 691.922 L1118.99 691.922 L1119.55 691.922 L1120.11 691.922 L1120.67 691.922 L1121.23 691.922 L1121.79 691.922 L1122.35 691.922 L1122.91 691.922 L1123.47 691.922 L1124.03 691.922 L1124.59 691.922 L1125.14 691.922 L1125.7 691.922 L1126.26 691.922 L1126.82 691.922 L1127.38 691.922 L1127.94 691.922 L1128.5 691.922 L1129.06 691.922 L1129.62 691.922 L1130.18 691.922 L1130.74 691.922 L1131.3 691.922 L1131.86 691.922 L1132.41 691.922 L1132.97 691.922 L1133.53 691.922 L1134.09 691.922 L1134.65 691.922 L1135.21 691.922 L1135.77 691.922 L1136.33 691.922 L1136.89 691.922 L1137.45 691.922 L1138.01 691.922 L1138.57 691.922 L1139.13 691.922 L1139.68 691.922 L1140.24 691.922 L1140.8 691.922 L1141.36 691.922 L1141.92 691.922 L1142.48 691.922 L1143.04 691.922 L1143.6 691.922 L1144.16 691.922 L1144.72 691.922 L1145.28 691.922 L1145.84 691.922 L1146.4 691.922 L1146.96 691.922 L1147.51 691.922 L1148.07 691.922 L1148.63 691.922 L1149.19 691.922 L1149.75 691.922 L1150.31 691.922 L1150.87 691.922 L1151.43 691.922 L1151.99 691.922 L1152.55 691.922 L1153.11 691.922 L1153.67 691.922 L1154.23 691.922 L1154.78 691.922 L1155.34 691.922 L1155.9 691.922 L1156.46 691.922 L1157.02 691.922 L1157.58 691.922 L1158.14 691.922 L1158.7 691.922 L1159.26 691.922 L1159.82 691.922 L1160.38 691.922 L1160.94 691.922 L1161.5 691.922 L1162.05 691.922 L1162.61 691.922 L1163.17 691.922 L1163.73 691.922 L1164.29 691.922 L1164.85 691.922 L1165.41 691.922 L1165.97 691.922 L1166.53 691.922 L1167.09 691.922 L1167.65 691.922 L1168.21 691.922 L1168.77 691.922 L1169.33 691.922 L1169.88 691.922 L1170.44 691.922 L1171 691.922 L1171.56 691.922 L1172.12 691.922 L1172.68 691.922 L1173.24 691.922 L1173.8 691.922 L1174.36 691.922 L1174.92 691.922 L1175.48 691.922 L1176.04 691.922 L1176.6 691.922 L1177.15 691.922 L1177.71 691.922 L1178.27 691.922 L1178.83 691.922 L1179.39 691.922 L1179.95 691.922 L1180.51 691.922 L1181.07 691.922 L1181.63 691.922 L1182.19 691.922 L1182.75 691.922 L1183.31 691.922 L1183.87 691.922 L1184.43 691.922 L1184.98 691.922 L1185.54 691.922 L1186.1 691.922 L1186.66 691.922 L1187.22 691.922 L1187.78 691.922 L1188.34 691.922 L1188.9 691.922 L1189.46 691.922 L1190.02 691.922 L1190.58 691.922 L1191.14 691.922 L1191.7 691.922 L1192.25 691.922 L1192.81 691.922 L1193.37 691.922 L1193.93 691.922 L1194.49 691.922 L1195.05 691.922 L1195.61 691.922 L1196.17 691.922 L1196.73 691.922 L1197.29 691.922 L1197.85 691.922 L1198.41 691.922 L1198.97 691.922 L1199.52 691.922 L1200.08 691.922 L1200.64 691.922 L1201.2 691.922 L1201.76 691.922 L1202.32 691.922 L1202.88 691.922 L1203.44 691.922 L1204 691.922 L1204.56 691.922 L1205.12 691.922 L1205.68 691.922 L1206.24 691.922 L1206.8 691.922 L1207.35 691.922 L1207.91 691.922 L1208.47 691.922 L1209.03 691.922 L1209.59 691.922 L1210.15 691.922 L1210.71 691.922 L1211.27 691.922 L1211.83 691.922 L1212.39 691.922 L1212.95 691.922 L1213.51 691.922 L1214.07 691.922 L1214.62 691.922 L1215.18 691.922 L1215.74 691.922 L1216.3 691.922 L1216.86 691.922 L1217.42 691.922 L1217.98 691.922 L1218.54 691.922 L1219.1 691.922 L1219.66 691.922 L1220.22 691.922 L1220.78 691.922 L1221.34 691.922 L1221.89 691.922 L1222.45 691.922 L1223.01 691.922 L1223.57 691.922 L1224.13 691.922 L1224.69 691.922 L1225.25 691.922 L1225.81 691.922 L1226.37 691.922 L1226.93 691.922 L1227.49 691.922 L1228.05 691.922 L1228.61 691.922 L1229.17 691.922 L1229.72 691.922 L1230.28 691.922 L1230.84 691.922 L1231.4 691.922 L1231.96 691.922 L1232.52 691.922 L1233.08 691.922 L1233.64 691.922 L1234.2 691.922 L1234.76 691.922 L1235.32 691.922 L1235.88 691.922 L1236.44 691.922 L1236.99 691.922 L1237.55 691.922 L1238.11 691.922 L1238.67 691.922 L1239.23 691.922 L1239.79 691.922 L1240.35 691.922 L1240.91 691.922 L1241.47 691.922 L1242.03 691.922 L1242.59 691.922 L1243.15 691.922 L1243.71 691.922 L1244.26 691.922 L1244.82 691.922 L1245.38 691.922 L1245.94 691.922 L1246.5 691.922 L1247.06 691.922 L1247.62 691.922 L1248.18 691.922 L1248.74 691.922 L1249.3 691.922 L1249.86 691.922 L1250.42 691.922 L1250.98 691.922 L1251.54 691.922 L1252.09 691.922 L1252.65 691.922 L1253.21 691.922 L1253.77 691.922 L1254.33 691.922 L1254.89 691.922 L1255.45 691.922 L1256.01 691.922 L1256.57 691.922 L1257.13 691.922 L1257.69 691.922 L1258.25 691.922 L1258.81 691.922 L1259.36 691.922 L1259.92 691.922 L1260.48 691.922 L1261.04 691.922 L1261.6 691.922 L1262.16 691.922 L1262.72 691.922 L1263.28 691.922 L1263.84 691.922 L1264.4 691.922 L1264.96 691.922 L1265.52 691.922 L1266.08 691.922 L1266.63 691.922 L1267.19 691.922 L1267.75 691.922 L1268.31 691.922 L1268.87 691.922 L1269.43 691.922 L1269.99 691.922 L1270.55 691.922 L1271.11 691.922 L1271.67 691.922 L1272.23 691.922 L1272.79 691.922 L1273.35 691.922 L1273.91 691.922 L1274.46 691.922 L1275.02 691.922 L1275.58 691.922 L1276.14 691.922 L1276.7 691.922 L1277.26 691.922 L1277.82 691.922 L1278.38 691.922 L1278.94 691.922 L1279.5 691.922 L1280.06 691.922 L1280.62 691.922 L1281.18 691.922 L1281.73 691.922 L1282.29 691.922 L1282.85 691.922 L1283.41 691.922 L1283.97 691.922 L1284.53 691.922 L1285.09 691.922 L1285.65 691.922 L1286.21 691.922 L1286.77 691.922 L1287.33 691.922 L1287.89 691.922 L1288.45 691.922 L1289 691.922 L1289.56 691.922 L1290.12 691.922 L1290.68 691.922 L1291.24 691.922 L1291.8 691.922 L1292.36 691.922 L1292.92 691.922 L1293.48 691.922 L1294.04 691.922 L1294.6 691.922 L1295.16 691.922 L1295.72 691.922 L1296.28 691.922 L1296.83 691.922 L1297.39 691.922 L1297.95 691.922 L1298.51 691.922 L1299.07 691.922 L1299.63 691.922 L1300.19 691.922 L1300.75 691.922 L1301.31 691.922 L1301.87 691.922 L1302.43 691.922 L1302.99 691.922 L1303.55 691.922 L1304.1 691.922 L1304.66 691.922 L1305.22 691.922 L1305.78 691.922 L1306.34 691.922 L1306.9 691.922 L1307.46 691.922 L1308.02 691.922 L1308.58 691.922 L1309.14 691.922 L1309.7 691.922 L1310.26 691.922 L1310.82 691.922 L1311.38 691.922 L1311.93 691.922 L1312.49 691.922 L1313.05 691.922 L1313.61 691.922 L1314.17 691.922 L1314.73 691.922 L1315.29 691.922 L1315.85 691.922 L1316.41 691.922 L1316.97 691.922 L1317.53 691.922 L1318.09 691.922 L1318.65 691.922 L1319.2 691.922 L1319.76 691.922 L1320.32 691.922 L1320.88 691.922 L1321.44 691.922 L1322 691.922 L1322.56 691.922 L1323.12 691.922 L1323.68 691.922 L1324.24 691.922 L1324.8 691.922 L1325.36 691.922 L1325.92 691.922 L1326.47 691.922 L1327.03 691.922 L1327.59 691.922 L1328.15 691.922 L1328.71 691.922 L1329.27 691.922 L1329.83 691.922 L1330.39 691.922 L1330.95 691.922 L1331.51 691.922 L1332.07 691.922 L1332.63 691.922 L1333.19 691.922 L1333.75 691.922 L1334.3 691.922 L1334.86 691.922 L1335.42 691.922 L1335.98 691.922 L1336.54 691.922 L1337.1 691.922 L1337.66 691.922 L1338.22 691.922 L1338.78 691.922 L1339.34 691.922 L1339.9 691.922 L1340.46 691.922 L1341.02 691.922 L1341.57 691.922 L1342.13 691.922 L1342.69 691.922 L1343.25 691.922 L1343.81 691.922 L1344.37 691.922 L1344.93 691.922 L1345.49 691.922 L1346.05 691.922 L1346.61 691.922 L1347.17 691.922 L1347.73 691.922 L1348.29 691.922 L1348.84 691.922 L1349.4 691.922 L1349.96 691.922 L1350.52 691.922 L1351.08 691.922 L1351.64 691.922 L1352.2 691.922 L1352.76 691.922 L1353.32 691.922 L1353.88 691.922 L1354.44 691.922 L1355 691.922 L1355.56 691.922 L1356.12 691.922 L1356.67 691.922 L1357.23 691.922 L1357.79 691.922 L1358.35 691.922 L1358.91 691.922 L1359.47 691.922 L1360.03 691.922 L1360.59 691.922 L1361.15 691.922 L1361.71 691.922 L1362.27 691.922 L1362.83 691.922 L1363.39 691.922 L1363.94 691.922 L1364.5 691.922 L1365.06 691.922 L1365.62 691.922 L1366.18 691.922 L1366.74 691.922 L1367.3 691.922 L1367.86 691.922 L1368.42 691.922 L1368.98 691.922 L1369.54 691.922 L1370.1 691.922 L1370.66 691.922 L1371.21 691.922 L1371.77 691.922 L1372.33 691.922 L1372.89 691.922 L1373.45 691.922 L1374.01 691.922 L1374.57 691.922 L1375.13 691.922 L1375.69 691.922 L1376.25 691.922 L1376.81 691.922 L1377.37 691.922 L1377.93 691.922 L1378.49 691.922 L1379.04 691.922 L1379.6 691.922 L1380.16 691.922 L1380.72 691.922 L1381.28 691.922 L1381.84 691.922 L1382.4 691.922 L1382.96 691.922 L1383.52 691.922 L1384.08 691.922 L1384.64 691.922 L1385.2 691.922 L1385.76 691.922 L1386.31 691.922 L1386.87 691.922 L1387.43 691.922 L1387.99 691.922 L1388.55 691.922 L1389.11 691.922 L1389.67 691.922 L1390.23 691.922 L1390.79 691.922 L1391.35 691.922 L1391.91 691.922 L1392.47 691.922 L1393.03 691.922 L1393.58 691.922 L1394.14 691.922 L1394.7 691.922 L1395.26 691.922 L1395.82 691.922 L1396.38 691.922 L1396.94 691.922 L1397.5 691.922 L1398.06 691.922 L1398.62 691.922 L1399.18 691.922 L1399.74 691.922 L1400.3 691.922 L1400.86 691.922 L1401.41 691.922 L1401.97 691.922 L1402.53 691.922 L1403.09 691.922 L1403.65 691.922 L1404.21 691.922 L1404.77 691.922 L1405.33 691.922 L1405.89 691.922 L1406.45 691.922 L1407.01 691.922 L1407.57 691.922 L1408.13 691.922 L1408.68 691.922 L1409.24 691.922 L1409.8 691.922 L1410.36 691.922 L1410.92 691.922 L1411.48 691.922 L1412.04 691.922 L1412.6 691.922 L1413.16 691.922 L1413.72 691.922 L1414.28 691.922 L1414.84 691.922 L1415.4 691.922 L1415.95 691.922 L1416.51 691.922 L1417.07 691.922 L1417.63 691.922 L1418.19 691.922 L1418.75 691.922 L1419.31 691.922 L1419.87 691.922 L1420.43 691.922 L1420.99 691.922 L1421.55 691.922 L1422.11 691.922 L1422.67 691.922 L1423.23 691.922 L1423.78 691.922 L1424.34 691.922 L1424.9 691.922 L1425.46 691.922 L1426.02 691.922 L1426.58 691.922 L1427.14 691.922 L1427.7 691.922 L1428.26 691.922 L1428.82 691.922 L1429.38 691.922 L1429.94 691.922 L1430.5 691.922 L1431.05 691.922 L1431.61 691.922 L1432.17 691.922 L1432.73 691.922 L1433.29 691.922 L1433.85 691.922 L1434.41 691.922 L1434.97 691.922 L1435.53 691.922 L1436.09 691.922 L1436.65 691.922 L1437.21 691.922 L1437.77 691.922 L1438.33 691.922 L1438.88 691.922 L1439.44 691.922 L1440 691.922 L1440.56 691.922 L1441.12 691.922 L1441.68 691.922 L1442.24 691.922 L1442.8 691.922 L1443.36 691.922 L1443.92 691.922 L1444.48 691.922 L1445.04 691.922 L1445.6 691.922 L1446.15 691.922 L1446.71 691.922 L1447.27 691.922 L1447.83 691.922 L1448.39 691.922 L1448.95 691.922 L1449.51 691.922 L1450.07 691.922 L1450.63 691.922 L1451.19 691.922 L1451.75 691.922 L1452.31 691.922 L1452.87 691.922 L1453.42 691.922 L1453.98 691.922 L1454.54 691.922 L1455.1 691.922 L1455.66 691.922 L1456.22 691.922 L1456.78 691.922 L1457.34 691.922 L1457.9 691.922 L1458.46 691.922 L1459.02 691.922 L1459.58 691.922 L1460.14 691.922 L1460.7 691.922 L1461.25 691.922 L1461.81 691.922 L1462.37 691.922 L1462.93 691.922 L1463.49 691.922 L1464.05 691.922 L1464.61 691.922 L1465.17 691.922 L1465.73 691.922 L1466.29 691.922 L1466.85 691.922 L1467.41 691.922 L1467.97 691.922 L1468.52 691.922 L1469.08 691.922 L1469.64 691.922 L1470.2 691.922 L1470.76 691.922 L1471.32 691.922 L1471.88 691.922 L1472.44 691.922 L1473 691.922 L1473.56 691.922 L1474.12 691.922 L1474.68 691.922 L1475.24 691.922 L1475.79 691.922 L1476.35 691.922 L1476.91 691.922 L1477.47 691.922 L1478.03 691.922 L1478.59 691.922 L1479.15 691.922 L1479.71 691.922 L1480.27 691.922 L1480.83 691.922 L1481.39 691.922 L1481.95 691.922 L1482.51 691.922 L1483.07 691.922 L1483.62 691.922 L1484.18 691.922 L1484.74 691.922 L1485.3 691.922 L1485.86 691.922 L1486.42 691.922 L1486.98 691.922 L1487.54 691.922 L1488.1 691.922 L1488.66 691.922 L1489.22 691.922 L1489.78 691.922 L1490.34 691.922 L1490.89 691.922 L1491.45 691.922 L1492.01 691.922 L1492.57 691.922 L1493.13 691.922 L1493.69 691.922 L1494.25 691.922 L1494.81 691.922 L1495.37 691.922 L1495.93 691.922 L1496.49 691.922 L1497.05 691.922 L1497.61 691.922 L1498.16 691.922 L1498.72 691.922 L1499.28 691.922 L1499.84 691.922 L1500.4 691.922 L1500.96 691.922 L1501.52 691.922 L1502.08 691.922 L1502.64 691.922 L1503.2 691.922 L1503.76 691.922 L1504.32 691.922 L1504.88 691.922 L1505.44 691.922 L1505.99 691.922 L1506.55 691.922 L1507.11 691.922 L1507.67 691.922 L1508.23 691.922 L1508.79 691.922 L1509.35 691.922 L1509.91 691.922 L1510.47 691.922 L1511.03 691.922 L1511.59 691.922 L1512.15 691.922 L1512.71 691.922 L1513.26 691.922 L1513.82 691.922 L1514.38 691.922 L1514.94 691.922 L1515.5 691.922 L1516.06 691.922 L1516.62 691.922 L1517.18 691.922 L1517.74 691.922 L1518.3 691.922 L1518.86 691.922 L1519.42 691.922 L1519.98 691.922 L1520.53 691.922 L1521.09 691.922 L1521.65 691.922 L1522.21 691.922 L1522.77 691.922 L1523.33 691.922 L1523.89 691.922 L1524.45 691.922 L1525.01 691.922 L1525.57 691.922 L1526.13 691.922 L1526.69 691.922 L1527.25 691.922 L1527.81 691.922 L1528.36 691.922 L1528.92 691.922 L1529.48 691.922 L1530.04 691.922 L1530.6 691.922 L1531.16 691.922 L1531.72 691.922 L1532.28 691.922 L1532.84 691.922 L1533.4 691.922 L1533.96 691.922 L1534.52 691.922 L1535.08 691.922 L1535.63 691.922 L1536.19 691.922 L1536.75 691.922 L1537.31 691.922 L1537.87 691.922 L1538.43 691.922 L1538.99 691.922 L1539.55 691.922 L1540.11 691.922 L1540.67 691.922 L1541.23 691.922 L1541.79 691.922 L1542.35 691.922 L1542.9 691.922 L1543.46 691.922 L1544.02 691.922 L1544.58 691.922 L1545.14 691.922 L1545.7 691.922 L1546.26 691.922 L1546.82 691.922 L1547.38 691.922 L1547.94 691.922 L1548.5 691.922 L1549.06 691.922 L1549.62 691.922 L1550.18 691.922 L1550.73 691.922 L1551.29 691.922 L1551.85 691.922 L1552.41 691.922 L1552.97 691.922 L1553.53 691.922 L1554.09 691.922 L1554.65 691.922 L1555.21 691.922 L1555.77 691.922 L1556.33 691.922 L1556.89 691.922 L1557.45 691.922 L1558 691.922 L1558.56 691.922 L1559.12 691.922 L1559.68 691.922 L1560.24 691.922 L1560.8 691.922 L1561.36 691.922 L1561.92 691.922 L1562.48 691.922 L1563.04 691.922 L1563.6 691.922 L1564.16 691.922 L1564.72 691.922 L1565.28 691.922 L1565.83 691.922 L1566.39 691.922 L1566.95 691.922 L1567.51 691.922 L1568.07 691.922 L1568.63 691.922 L1569.19 691.922 L1569.75 691.922 L1570.31 691.922 L1570.87 691.922 L1571.43 691.922 L1571.99 691.922 L1572.55 691.922 L1573.1 691.922 L1573.66 691.922 L1574.22 691.922 L1574.78 691.922 L1575.34 691.922 L1575.9 691.922 L1576.46 691.922 L1577.02 691.922 L1577.58 691.922 L1578.14 691.922 L1578.7 691.922 L1579.26 691.922 L1579.82 691.922 L1580.37 691.922 L1580.93 691.922 L1581.49 691.922 L1582.05 691.922 L1582.61 691.922 L1583.17 691.922 L1583.73 691.922 L1584.29 691.922 L1584.85 691.922 L1585.41 691.922 L1585.97 691.922 L1586.53 691.922 L1587.09 691.922 L1587.65 691.922 L1588.2 691.922 L1588.76 691.922 L1589.32 691.922 L1589.88 691.922 L1590.44 691.922 L1591 691.922 L1591.56 691.922 L1592.12 691.922 L1592.68 691.922 L1593.24 691.922 L1593.8 691.922 L1594.36 691.922 L1594.92 691.922 L1595.47 691.922 L1596.03 691.922 L1596.59 691.922 L1597.15 691.922 L1597.71 691.922 L1598.27 691.922 L1598.83 691.922 L1599.39 691.922 L1599.95 691.922 L1600.51 691.922 L1601.07 691.922 L1601.63 691.922 L1602.19 691.922 L1602.74 691.922 L1603.3 691.922 L1603.86 691.922 L1604.42 691.922 L1604.98 691.922 L1605.54 691.922 L1606.1 691.922 L1606.66 691.922 L1607.22 691.922 L1607.78 691.922 L1608.34 691.922 L1608.9 691.922 L1609.46 691.922 L1610.02 691.922 L1610.57 691.922 L1611.13 691.922 L1611.69 691.922 L1612.25 691.922 L1612.81 691.922 L1613.37 691.922 L1613.93 691.922 L1614.49 691.922 L1615.05 691.922 L1615.61 691.922 L1616.17 691.922 L1616.73 691.922 L1617.29 691.922 L1617.84 691.922 L1618.4 691.922 L1618.96 691.922 L1619.52 691.922 L1620.08 691.922 L1620.64 691.922 L1621.2 691.922 L1621.76 691.922 L1622.32 691.922 L1622.88 691.922 L1623.44 691.922 L1624 691.922 L1624.56 691.922 L1625.11 691.922 L1625.67 691.922 L1626.23 691.922 L1626.79 691.922 L1627.35 691.922 L1627.91 691.922 L1628.47 691.922 L1629.03 691.922 L1629.59 691.922 L1630.15 691.922 L1630.71 691.922 L1631.27 691.922 L1631.83 691.922 L1632.39 691.922 L1632.94 691.922 L1633.5 691.922 L1634.06 691.922 L1634.62 691.922 L1635.18 691.922 L1635.74 691.922 L1636.3 691.922 L1636.86 691.922 L1637.42 691.922 L1637.98 691.922 L1638.54 691.922 L1639.1 691.922 L1639.66 691.922 L1640.21 691.922 L1640.77 691.922 L1641.33 691.922 L1641.89 691.922 L1642.45 691.922 L1643.01 691.922 L1643.57 691.922 L1644.13 691.922 L1644.69 691.922 L1645.25 691.922 L1645.81 691.922 L1646.37 691.922 L1646.93 691.922 L1647.48 691.922 L1648.04 691.922 L1648.6 691.922 L1649.16 691.922 L1649.72 691.922 L1650.28 691.922 L1650.84 691.922 L1651.4 691.922 L1651.96 691.922 L1652.52 691.922 L1653.08 691.922 L1653.64 691.922 L1654.2 691.922 L1654.76 691.922 L1655.31 691.922 L1655.87 691.922 L1656.43 691.922 L1656.99 691.922 L1657.55 691.922 L1658.11 691.922 L1658.67 691.922 L1659.23 691.922 L1659.79 691.922 L1660.35 691.922 L1660.91 691.922 L1661.47 691.922 L1662.03 691.922 L1662.58 691.922 L1663.14 691.922 L1663.7 691.922 L1664.26 691.922 L1664.82 691.922 L1665.38 691.922 L1665.94 691.922 L1666.5 691.922 L1667.06 691.922 L1667.62 691.922 L1668.18 691.922 L1668.74 691.922 L1669.3 691.922 L1669.85 691.922 L1670.41 691.922 L1670.97 691.922 L1671.53 691.922 L1672.09 691.922 L1672.65 691.922 L1673.21 691.922 L1673.77 691.922 L1674.33 691.922 L1674.89 691.922 L1675.45 691.922 L1676.01 691.922 L1676.57 691.922 L1677.13 691.922 L1677.68 691.922 L1678.24 691.922 L1678.8 691.922 L1679.36 691.922 L1679.92 691.922 L1680.48 691.922 L1681.04 691.922 L1681.6 691.922 L1682.16 691.922 L1682.72 691.922 L1683.28 691.922 L1683.84 691.922 L1684.4 691.922 L1684.95 691.922 L1685.51 691.922 L1686.07 691.922 L1686.63 691.922 L1687.19 691.922 L1687.75 691.922 L1688.31 691.922 L1688.87 691.922 L1689.43 691.922 L1689.99 691.922 L1690.55 691.922 L1691.11 691.922 L1691.67 691.922 L1692.23 691.922 L1692.78 691.922 L1693.34 691.922 L1693.9 691.922 L1694.46 691.922 L1695.02 691.922 L1695.58 691.922 L1696.14 691.922 L1696.7 691.922 L1697.26 691.922 L1697.82 691.922 L1698.38 691.922 L1698.94 691.922 L1699.5 691.922 L1700.05 691.922 L1700.61 691.922 L1701.17 691.922 L1701.73 691.922 L1702.29 691.922 L1702.85 691.922 L1703.41 691.922 L1703.97 691.922 L1704.53 691.922 L1705.09 691.922 L1705.65 691.922 L1706.21 691.922 L1706.77 691.922 L1707.32 691.922 L1707.88 691.922 L1708.44 691.922 L1709 691.922 L1709.56 691.922 L1710.12 691.922 L1710.68 691.922 L1711.24 691.922 L1711.8 691.922 L1712.36 691.922 L1712.92 691.922 L1713.48 691.922 L1714.04 691.922 L1714.6 691.922 L1715.15 691.922 L1715.71 691.922 L1716.27 691.922 L1716.83 691.922 L1717.39 691.922 L1717.95 691.922 L1718.51 691.922 L1719.07 691.922 L1719.63 691.922 L1720.19 691.922 L1720.75 691.922 L1721.31 691.922 L1721.87 691.922 L1722.42 691.922 L1722.98 691.922 L1723.54 691.922 L1724.1 691.922 L1724.66 691.922 L1725.22 691.922 L1725.78 691.922 L1726.34 691.922 L1726.9 691.922 L1727.46 691.922 L1728.02 691.922 L1728.58 691.922 L1729.14 691.922 L1729.69 691.922 L1730.25 691.922 L1730.81 691.922 L1731.37 691.922 L1731.93 691.922 L1732.49 691.922 L1733.05 691.922 L1733.61 691.922 L1734.17 691.922 L1734.73 691.922 L1735.29 691.922 L1735.85 691.922 L1736.41 691.922 L1736.97 691.922 L1737.52 691.922 L1738.08 691.922 L1738.64 691.922 L1739.2 691.922 L1739.76 691.922 L1740.32 691.922 L1740.88 691.922 L1741.44 691.922 L1742 691.922 L1742.56 691.922 L1743.12 691.922 L1743.68 691.922 L1744.24 691.922 L1744.79 691.922 L1745.35 691.922 L1745.91 691.922 L1746.47 691.922 L1747.03 691.922 L1747.59 691.922 L1748.15 691.922 L1748.71 691.922 L1749.27 691.922 L1749.83 691.922 L1750.39 691.922 L1750.95 691.922 L1751.51 691.922 L1752.06 691.922 L1752.62 691.922 L1753.18 691.922 L1753.74 691.922 L1754.3 691.922 L1754.86 691.922 L1755.42 691.922 L1755.98 691.922 L1756.54 691.922 L1757.1 691.922 L1757.66 691.922 L1758.22 691.922 L1758.78 691.922 L1759.34 691.922 L1759.89 691.922 L1760.45 691.922 L1761.01 691.922 L1761.57 691.922 L1762.13 691.922 L1762.69 691.922 L1763.25 691.922 L1763.81 691.922 L1764.37 691.922 L1764.93 691.922 L1765.49 691.922 L1766.05 691.922 L1766.61 691.922 L1767.16 691.922 L1767.72 691.922 L1768.28 691.922 L1768.84 691.922 L1769.4 691.922 L1769.96 691.922 L1770.52 691.922 L1771.08 691.922 L1771.64 691.922 L1772.2 691.922 L1772.76 691.922 L1773.32 691.922 L1773.88 691.922 L1774.43 691.922 L1774.99 691.922 L1775.55 691.922 L1776.11 691.922 L1776.67 691.922 L1777.23 691.922 L1777.79 691.922 L1778.35 691.922 L1778.91 691.922 L1779.47 691.922 L1780.03 691.922 L1780.59 691.922 L1781.15 691.922 L1781.71 691.922 L1782.26 691.922 L1782.82 691.922 L1783.38 691.922 L1783.94 691.922 L1784.5 691.922 L1785.06 691.922 L1785.62 691.922 L1786.18 691.922 L1786.74 691.922 L1787.3 691.922 L1787.86 691.922 L1788.42 691.922 L1788.98 691.922 L1789.53 691.922 L1790.09 691.922 L1790.65 691.922 L1791.21 691.922 L1791.77 691.922 L1792.33 691.922 L1792.89 691.922 L1793.45 691.922 L1794.01 691.922 L1794.57 691.922 L1795.13 691.922 L1795.69 691.922 L1796.25 691.922 L1796.8 691.922 L1797.36 691.922 L1797.92 691.922 L1798.48 691.922 L1799.04 691.922 L1799.6 691.922 L1800.16 691.922 L1800.72 691.922 L1801.28 691.922 L1801.84 691.922 L1802.4 691.922 L1802.96 691.922 L1803.52 691.922 L1804.08 691.922 L1804.63 691.922 L1805.19 691.922 L1805.75 691.922 L1806.31 691.922 L1806.87 691.922 L1807.43 691.922 L1807.99 691.922 L1808.55 691.922 L1809.11 691.922 L1809.67 691.922 L1810.23 691.922 L1810.79 691.922 L1811.35 691.922 L1811.9 691.922 L1812.46 691.922 L1813.02 691.922 L1813.58 691.922 L1814.14 691.922 L1814.7 691.922 L1815.26 691.922 L1815.82 691.922 L1816.38 691.922 L1816.94 691.922 L1817.5 691.922 L1818.06 691.922 L1818.62 691.922 L1819.18 691.922 L1819.73 691.922 L1820.29 691.922 L1820.85 691.922 L1821.41 691.922 L1821.97 691.922 L1822.53 691.922 L1823.09 691.922 L1823.65 691.922 L1824.21 691.922 L1824.77 691.922 L1825.33 691.922 L1825.89 691.922 L1826.45 691.922 L1827 691.922 L1827.56 691.922 L1828.12 691.922 L1828.68 691.922 L1829.24 691.922 L1829.8 691.922 L1830.36 691.922 L1830.92 691.922 L1831.48 691.922 L1832.04 691.922 L1832.6 691.922 L1833.16 691.922 L1833.72 691.922 L1834.27 691.922 L1834.83 691.922 L1835.39 691.922 L1835.95 691.922 L1836.51 691.922 L1837.07 691.922 L1837.63 691.922 L1838.19 691.922 L1838.19 681.701 L1837.63 681.701 L1837.07 681.701 L1836.51 681.701 L1835.95 681.701 L1835.39 681.701 L1834.83 681.701 L1834.27 681.701 L1833.72 681.701 L1833.16 681.701 L1832.6 681.701 L1832.04 681.701 L1831.48 681.701 L1830.92 681.701 L1830.36 681.701 L1829.8 681.701 L1829.24 681.701 L1828.68 681.701 L1828.12 681.701 L1827.56 681.701 L1827 681.701 L1826.45 681.701 L1825.89 681.701 L1825.33 681.701 L1824.77 681.701 L1824.21 681.701 L1823.65 681.701 L1823.09 681.701 L1822.53 681.701 L1821.97 681.701 L1821.41 681.701 L1820.85 681.701 L1820.29 681.701 L1819.73 681.701 L1819.18 681.701 L1818.62 681.701 L1818.06 681.701 L1817.5 681.701 L1816.94 681.701 L1816.38 681.701 L1815.82 681.701 L1815.26 681.701 L1814.7 681.701 L1814.14 681.701 L1813.58 681.701 L1813.02 681.701 L1812.46 681.701 L1811.9 681.701 L1811.35 681.701 L1810.79 681.701 L1810.23 681.701 L1809.67 681.701 L1809.11 681.701 L1808.55 681.701 L1807.99 681.701 L1807.43 681.701 L1806.87 681.701 L1806.31 681.701 L1805.75 681.701 L1805.19 681.701 L1804.63 681.701 L1804.08 681.701 L1803.52 681.701 L1802.96 681.701 L1802.4 681.701 L1801.84 681.701 L1801.28 681.701 L1800.72 681.701 L1800.16 681.701 L1799.6 681.701 L1799.04 681.701 L1798.48 681.701 L1797.92 681.701 L1797.36 681.701 L1796.8 681.701 L1796.25 681.701 L1795.69 681.701 L1795.13 681.701 L1794.57 681.701 L1794.01 681.701 L1793.45 681.701 L1792.89 681.701 L1792.33 681.701 L1791.77 681.701 L1791.21 681.701 L1790.65 681.701 L1790.09 681.701 L1789.53 681.701 L1788.98 681.701 L1788.42 681.701 L1787.86 681.701 L1787.3 681.701 L1786.74 681.701 L1786.18 681.701 L1785.62 681.701 L1785.06 681.701 L1784.5 681.701 L1783.94 681.701 L1783.38 681.701 L1782.82 681.701 L1782.26 681.701 L1781.71 681.701 L1781.15 681.701 L1780.59 681.701 L1780.03 681.701 L1779.47 681.701 L1778.91 681.701 L1778.35 681.701 L1777.79 681.701 L1777.23 681.701 L1776.67 681.701 L1776.11 681.701 L1775.55 681.701 L1774.99 681.701 L1774.43 681.701 L1773.88 681.701 L1773.32 681.701 L1772.76 681.701 L1772.2 681.701 L1771.64 681.701 L1771.08 681.701 L1770.52 681.701 L1769.96 681.701 L1769.4 681.701 L1768.84 681.701 L1768.28 681.701 L1767.72 681.701 L1767.16 681.701 L1766.61 681.701 L1766.05 681.701 L1765.49 681.701 L1764.93 681.701 L1764.37 681.701 L1763.81 681.701 L1763.25 681.701 L1762.69 681.701 L1762.13 681.701 L1761.57 681.701 L1761.01 681.701 L1760.45 681.701 L1759.89 681.701 L1759.34 681.701 L1758.78 681.701 L1758.22 681.701 L1757.66 681.701 L1757.1 681.701 L1756.54 681.701 L1755.98 681.701 L1755.42 681.701 L1754.86 681.701 L1754.3 681.701 L1753.74 681.701 L1753.18 681.701 L1752.62 681.701 L1752.06 681.701 L1751.51 681.701 L1750.95 681.701 L1750.39 681.701 L1749.83 681.701 L1749.27 681.701 L1748.71 681.701 L1748.15 681.701 L1747.59 681.701 L1747.03 681.701 L1746.47 681.701 L1745.91 681.701 L1745.35 681.701 L1744.79 681.701 L1744.24 681.701 L1743.68 681.701 L1743.12 681.701 L1742.56 681.701 L1742 681.701 L1741.44 681.701 L1740.88 681.701 L1740.32 681.701 L1739.76 681.701 L1739.2 681.701 L1738.64 681.701 L1738.08 681.701 L1737.52 681.701 L1736.97 681.701 L1736.41 681.701 L1735.85 681.701 L1735.29 681.701 L1734.73 681.701 L1734.17 681.701 L1733.61 681.701 L1733.05 681.701 L1732.49 681.701 L1731.93 681.701 L1731.37 681.701 L1730.81 681.701 L1730.25 681.701 L1729.69 681.701 L1729.14 681.701 L1728.58 681.701 L1728.02 681.701 L1727.46 681.701 L1726.9 681.701 L1726.34 681.701 L1725.78 681.701 L1725.22 681.701 L1724.66 681.701 L1724.1 681.701 L1723.54 681.701 L1722.98 681.701 L1722.42 681.701 L1721.87 681.701 L1721.31 681.701 L1720.75 681.701 L1720.19 681.701 L1719.63 681.701 L1719.07 681.701 L1718.51 681.701 L1717.95 681.701 L1717.39 681.701 L1716.83 681.701 L1716.27 681.701 L1715.71 681.701 L1715.15 681.701 L1714.6 681.701 L1714.04 681.701 L1713.48 681.701 L1712.92 681.701 L1712.36 681.701 L1711.8 681.701 L1711.24 681.701 L1710.68 681.701 L1710.12 681.701 L1709.56 681.701 L1709 681.701 L1708.44 681.701 L1707.88 681.701 L1707.32 681.701 L1706.77 681.701 L1706.21 681.701 L1705.65 681.701 L1705.09 681.701 L1704.53 681.701 L1703.97 681.701 L1703.41 681.701 L1702.85 681.701 L1702.29 681.701 L1701.73 681.701 L1701.17 681.701 L1700.61 681.701 L1700.05 681.701 L1699.5 681.701 L1698.94 681.701 L1698.38 681.701 L1697.82 681.701 L1697.26 681.701 L1696.7 681.701 L1696.14 681.701 L1695.58 681.701 L1695.02 681.701 L1694.46 681.701 L1693.9 681.701 L1693.34 681.701 L1692.78 681.701 L1692.23 681.701 L1691.67 681.701 L1691.11 681.701 L1690.55 681.701 L1689.99 681.701 L1689.43 681.701 L1688.87 681.701 L1688.31 681.701 L1687.75 681.701 L1687.19 681.701 L1686.63 681.701 L1686.07 681.701 L1685.51 681.701 L1684.95 681.701 L1684.4 681.701 L1683.84 681.701 L1683.28 681.701 L1682.72 681.701 L1682.16 681.701 L1681.6 681.701 L1681.04 681.701 L1680.48 681.701 L1679.92 681.701 L1679.36 681.701 L1678.8 681.701 L1678.24 681.701 L1677.68 681.701 L1677.13 681.701 L1676.57 681.701 L1676.01 681.701 L1675.45 681.701 L1674.89 681.701 L1674.33 681.701 L1673.77 681.701 L1673.21 681.701 L1672.65 681.701 L1672.09 681.701 L1671.53 681.701 L1670.97 681.701 L1670.41 681.701 L1669.85 681.701 L1669.3 681.701 L1668.74 681.701 L1668.18 681.701 L1667.62 681.701 L1667.06 681.701 L1666.5 681.701 L1665.94 681.701 L1665.38 681.701 L1664.82 681.701 L1664.26 681.701 L1663.7 681.701 L1663.14 681.701 L1662.58 681.701 L1662.03 681.701 L1661.47 681.701 L1660.91 681.701 L1660.35 681.701 L1659.79 681.701 L1659.23 681.701 L1658.67 681.701 L1658.11 681.701 L1657.55 681.701 L1656.99 681.701 L1656.43 681.701 L1655.87 681.701 L1655.31 681.701 L1654.76 681.701 L1654.2 681.701 L1653.64 681.701 L1653.08 681.701 L1652.52 681.701 L1651.96 681.701 L1651.4 681.701 L1650.84 681.701 L1650.28 681.701 L1649.72 681.701 L1649.16 681.701 L1648.6 681.701 L1648.04 681.701 L1647.48 681.701 L1646.93 681.701 L1646.37 681.701 L1645.81 681.701 L1645.25 681.701 L1644.69 681.701 L1644.13 681.701 L1643.57 681.701 L1643.01 681.701 L1642.45 681.701 L1641.89 681.701 L1641.33 681.701 L1640.77 681.701 L1640.21 681.701 L1639.66 681.701 L1639.1 681.701 L1638.54 681.701 L1637.98 681.701 L1637.42 681.701 L1636.86 681.701 L1636.3 681.701 L1635.74 681.701 L1635.18 681.701 L1634.62 681.701 L1634.06 681.701 L1633.5 681.701 L1632.94 681.701 L1632.39 681.701 L1631.83 681.701 L1631.27 681.701 L1630.71 681.701 L1630.15 681.701 L1629.59 681.701 L1629.03 681.701 L1628.47 681.701 L1627.91 681.701 L1627.35 681.701 L1626.79 681.701 L1626.23 681.701 L1625.67 681.701 L1625.11 681.701 L1624.56 681.701 L1624 681.701 L1623.44 681.701 L1622.88 681.701 L1622.32 681.701 L1621.76 681.701 L1621.2 681.701 L1620.64 681.701 L1620.08 681.701 L1619.52 681.701 L1618.96 681.701 L1618.4 681.701 L1617.84 681.701 L1617.29 681.701 L1616.73 681.701 L1616.17 681.701 L1615.61 681.701 L1615.05 681.701 L1614.49 681.701 L1613.93 681.701 L1613.37 681.701 L1612.81 681.701 L1612.25 681.701 L1611.69 681.701 L1611.13 681.701 L1610.57 681.701 L1610.02 681.701 L1609.46 681.701 L1608.9 681.701 L1608.34 681.701 L1607.78 681.701 L1607.22 681.701 L1606.66 681.701 L1606.1 681.701 L1605.54 681.701 L1604.98 681.701 L1604.42 681.701 L1603.86 681.701 L1603.3 681.701 L1602.74 681.701 L1602.19 681.701 L1601.63 681.701 L1601.07 681.701 L1600.51 681.701 L1599.95 681.701 L1599.39 681.701 L1598.83 681.701 L1598.27 681.701 L1597.71 681.701 L1597.15 681.701 L1596.59 681.701 L1596.03 681.701 L1595.47 681.701 L1594.92 681.701 L1594.36 681.701 L1593.8 681.701 L1593.24 681.701 L1592.68 681.701 L1592.12 681.701 L1591.56 681.701 L1591 681.701 L1590.44 681.701 L1589.88 681.701 L1589.32 681.701 L1588.76 681.701 L1588.2 681.701 L1587.65 681.701 L1587.09 681.701 L1586.53 681.701 L1585.97 681.701 L1585.41 681.701 L1584.85 681.701 L1584.29 681.701 L1583.73 681.701 L1583.17 681.701 L1582.61 681.701 L1582.05 681.701 L1581.49 681.701 L1580.93 681.701 L1580.37 681.701 L1579.82 681.701 L1579.26 681.701 L1578.7 681.701 L1578.14 681.701 L1577.58 681.701 L1577.02 681.701 L1576.46 681.701 L1575.9 681.701 L1575.34 681.701 L1574.78 681.701 L1574.22 681.701 L1573.66 681.701 L1573.1 681.701 L1572.55 681.701 L1571.99 681.701 L1571.43 681.701 L1570.87 681.701 L1570.31 681.701 L1569.75 681.701 L1569.19 681.701 L1568.63 681.701 L1568.07 681.701 L1567.51 681.701 L1566.95 681.701 L1566.39 681.701 L1565.83 681.701 L1565.28 681.701 L1564.72 681.701 L1564.16 681.701 L1563.6 681.701 L1563.04 681.701 L1562.48 681.701 L1561.92 681.701 L1561.36 681.701 L1560.8 681.701 L1560.24 681.701 L1559.68 681.701 L1559.12 681.701 L1558.56 681.701 L1558 681.701 L1557.45 681.701 L1556.89 681.701 L1556.33 681.701 L1555.77 681.701 L1555.21 681.701 L1554.65 681.701 L1554.09 681.701 L1553.53 681.701 L1552.97 681.701 L1552.41 681.701 L1551.85 681.701 L1551.29 681.701 L1550.73 681.701 L1550.18 681.701 L1549.62 681.701 L1549.06 681.701 L1548.5 681.701 L1547.94 681.701 L1547.38 681.701 L1546.82 681.701 L1546.26 681.701 L1545.7 681.701 L1545.14 681.701 L1544.58 681.701 L1544.02 681.701 L1543.46 681.701 L1542.9 681.701 L1542.35 681.701 L1541.79 681.701 L1541.23 681.701 L1540.67 681.701 L1540.11 681.701 L1539.55 681.701 L1538.99 681.701 L1538.43 681.701 L1537.87 681.701 L1537.31 681.701 L1536.75 681.701 L1536.19 681.701 L1535.63 681.701 L1535.08 681.701 L1534.52 681.701 L1533.96 681.701 L1533.4 681.701 L1532.84 681.701 L1532.28 681.701 L1531.72 681.701 L1531.16 681.701 L1530.6 681.701 L1530.04 681.701 L1529.48 681.701 L1528.92 681.701 L1528.36 681.701 L1527.81 681.701 L1527.25 681.701 L1526.69 681.701 L1526.13 681.701 L1525.57 681.701 L1525.01 681.701 L1524.45 681.701 L1523.89 681.701 L1523.33 681.701 L1522.77 681.701 L1522.21 681.701 L1521.65 681.701 L1521.09 681.701 L1520.53 681.701 L1519.98 681.701 L1519.42 681.701 L1518.86 681.701 L1518.3 681.701 L1517.74 681.701 L1517.18 681.701 L1516.62 681.701 L1516.06 681.701 L1515.5 681.701 L1514.94 681.701 L1514.38 681.701 L1513.82 681.701 L1513.26 681.701 L1512.71 681.701 L1512.15 681.701 L1511.59 681.701 L1511.03 681.701 L1510.47 681.701 L1509.91 681.701 L1509.35 681.701 L1508.79 681.701 L1508.23 681.701 L1507.67 681.701 L1507.11 681.701 L1506.55 681.701 L1505.99 681.701 L1505.44 681.701 L1504.88 681.701 L1504.32 681.701 L1503.76 681.701 L1503.2 681.701 L1502.64 681.701 L1502.08 681.701 L1501.52 681.701 L1500.96 681.701 L1500.4 681.701 L1499.84 681.701 L1499.28 681.701 L1498.72 681.701 L1498.16 681.701 L1497.61 681.701 L1497.05 681.701 L1496.49 681.701 L1495.93 681.701 L1495.37 681.701 L1494.81 681.701 L1494.25 681.701 L1493.69 681.701 L1493.13 681.701 L1492.57 681.701 L1492.01 681.701 L1491.45 681.701 L1490.89 681.701 L1490.34 681.701 L1489.78 681.701 L1489.22 681.701 L1488.66 681.701 L1488.1 681.701 L1487.54 681.701 L1486.98 681.701 L1486.42 681.701 L1485.86 681.701 L1485.3 681.701 L1484.74 681.701 L1484.18 681.701 L1483.62 681.701 L1483.07 681.701 L1482.51 681.701 L1481.95 681.701 L1481.39 681.701 L1480.83 681.701 L1480.27 681.701 L1479.71 681.701 L1479.15 681.701 L1478.59 681.701 L1478.03 681.701 L1477.47 681.701 L1476.91 681.701 L1476.35 681.701 L1475.79 681.701 L1475.24 681.701 L1474.68 681.701 L1474.12 681.701 L1473.56 681.701 L1473 681.701 L1472.44 681.701 L1471.88 681.701 L1471.32 681.701 L1470.76 681.701 L1470.2 681.701 L1469.64 681.701 L1469.08 681.701 L1468.52 681.701 L1467.97 681.701 L1467.41 681.701 L1466.85 681.701 L1466.29 681.701 L1465.73 681.701 L1465.17 681.701 L1464.61 681.701 L1464.05 681.701 L1463.49 681.701 L1462.93 681.701 L1462.37 681.701 L1461.81 681.701 L1461.25 681.701 L1460.7 681.701 L1460.14 681.701 L1459.58 681.701 L1459.02 681.701 L1458.46 681.701 L1457.9 681.701 L1457.34 681.701 L1456.78 681.701 L1456.22 681.701 L1455.66 681.701 L1455.1 681.701 L1454.54 681.701 L1453.98 681.701 L1453.42 681.701 L1452.87 681.701 L1452.31 681.701 L1451.75 681.701 L1451.19 681.701 L1450.63 681.701 L1450.07 681.701 L1449.51 681.701 L1448.95 681.701 L1448.39 681.701 L1447.83 681.701 L1447.27 681.701 L1446.71 681.701 L1446.15 681.701 L1445.6 681.701 L1445.04 681.701 L1444.48 681.701 L1443.92 681.701 L1443.36 681.701 L1442.8 681.701 L1442.24 681.701 L1441.68 681.701 L1441.12 681.701 L1440.56 681.701 L1440 681.701 L1439.44 681.701 L1438.88 681.701 L1438.33 681.701 L1437.77 681.701 L1437.21 681.701 L1436.65 681.701 L1436.09 681.701 L1435.53 681.701 L1434.97 681.701 L1434.41 681.701 L1433.85 681.701 L1433.29 681.701 L1432.73 681.701 L1432.17 681.701 L1431.61 681.701 L1431.05 681.701 L1430.5 681.701 L1429.94 681.701 L1429.38 681.701 L1428.82 681.701 L1428.26 681.701 L1427.7 681.701 L1427.14 681.701 L1426.58 681.701 L1426.02 681.701 L1425.46 681.701 L1424.9 681.701 L1424.34 681.701 L1423.78 681.701 L1423.23 681.701 L1422.67 681.701 L1422.11 681.701 L1421.55 681.701 L1420.99 681.701 L1420.43 681.701 L1419.87 681.701 L1419.31 681.701 L1418.75 681.701 L1418.19 681.701 L1417.63 681.701 L1417.07 681.701 L1416.51 681.701 L1415.95 681.701 L1415.4 681.701 L1414.84 681.701 L1414.28 681.701 L1413.72 681.701 L1413.16 681.701 L1412.6 681.701 L1412.04 681.701 L1411.48 681.701 L1410.92 681.701 L1410.36 681.701 L1409.8 681.701 L1409.24 681.701 L1408.68 681.701 L1408.13 681.701 L1407.57 681.701 L1407.01 681.701 L1406.45 681.701 L1405.89 681.701 L1405.33 681.701 L1404.77 681.701 L1404.21 681.701 L1403.65 681.701 L1403.09 681.701 L1402.53 681.701 L1401.97 681.701 L1401.41 681.701 L1400.86 681.701 L1400.3 681.701 L1399.74 681.701 L1399.18 681.701 L1398.62 681.701 L1398.06 681.701 L1397.5 681.701 L1396.94 681.701 L1396.38 681.701 L1395.82 681.701 L1395.26 681.701 L1394.7 681.701 L1394.14 681.701 L1393.58 681.701 L1393.03 681.701 L1392.47 681.701 L1391.91 681.701 L1391.35 681.701 L1390.79 681.701 L1390.23 681.701 L1389.67 681.701 L1389.11 681.701 L1388.55 681.701 L1387.99 681.701 L1387.43 681.701 L1386.87 681.701 L1386.31 681.701 L1385.76 681.701 L1385.2 681.701 L1384.64 681.701 L1384.08 681.701 L1383.52 681.701 L1382.96 681.701 L1382.4 681.701 L1381.84 681.701 L1381.28 681.701 L1380.72 681.701 L1380.16 681.701 L1379.6 681.701 L1379.04 681.701 L1378.49 681.701 L1377.93 681.701 L1377.37 681.701 L1376.81 681.701 L1376.25 681.701 L1375.69 681.701 L1375.13 681.701 L1374.57 681.701 L1374.01 681.701 L1373.45 681.701 L1372.89 681.701 L1372.33 681.701 L1371.77 681.701 L1371.21 681.701 L1370.66 681.701 L1370.1 681.701 L1369.54 681.701 L1368.98 681.701 L1368.42 681.701 L1367.86 681.701 L1367.3 681.701 L1366.74 681.701 L1366.18 681.701 L1365.62 681.701 L1365.06 681.701 L1364.5 681.701 L1363.94 681.701 L1363.39 681.701 L1362.83 681.701 L1362.27 681.701 L1361.71 681.701 L1361.15 681.701 L1360.59 681.701 L1360.03 681.701 L1359.47 681.701 L1358.91 681.701 L1358.35 681.701 L1357.79 681.701 L1357.23 681.701 L1356.67 681.701 L1356.12 681.701 L1355.56 681.701 L1355 681.701 L1354.44 681.701 L1353.88 681.701 L1353.32 681.701 L1352.76 681.701 L1352.2 681.701 L1351.64 681.701 L1351.08 681.701 L1350.52 681.701 L1349.96 681.701 L1349.4 681.701 L1348.84 681.701 L1348.29 681.701 L1347.73 681.701 L1347.17 681.701 L1346.61 681.701 L1346.05 681.701 L1345.49 681.701 L1344.93 681.701 L1344.37 681.701 L1343.81 681.701 L1343.25 681.701 L1342.69 681.701 L1342.13 681.701 L1341.57 681.701 L1341.02 681.701 L1340.46 681.701 L1339.9 681.701 L1339.34 681.701 L1338.78 681.701 L1338.22 681.701 L1337.66 681.701 L1337.1 681.701 L1336.54 681.701 L1335.98 681.701 L1335.42 681.701 L1334.86 681.701 L1334.3 681.701 L1333.75 681.701 L1333.19 681.701 L1332.63 681.701 L1332.07 681.701 L1331.51 681.701 L1330.95 681.701 L1330.39 681.701 L1329.83 681.701 L1329.27 681.701 L1328.71 681.701 L1328.15 681.701 L1327.59 681.701 L1327.03 681.701 L1326.47 681.701 L1325.92 681.701 L1325.36 681.701 L1324.8 681.701 L1324.24 681.701 L1323.68 681.701 L1323.12 681.701 L1322.56 681.701 L1322 681.701 L1321.44 681.701 L1320.88 681.701 L1320.32 681.701 L1319.76 681.701 L1319.2 681.701 L1318.65 681.701 L1318.09 681.701 L1317.53 681.701 L1316.97 681.701 L1316.41 681.701 L1315.85 681.701 L1315.29 681.701 L1314.73 681.701 L1314.17 681.701 L1313.61 681.701 L1313.05 681.701 L1312.49 681.701 L1311.93 681.701 L1311.38 681.701 L1310.82 681.701 L1310.26 681.701 L1309.7 681.701 L1309.14 681.701 L1308.58 681.701 L1308.02 681.701 L1307.46 681.701 L1306.9 681.701 L1306.34 681.701 L1305.78 681.701 L1305.22 681.701 L1304.66 681.701 L1304.1 681.701 L1303.55 681.701 L1302.99 681.701 L1302.43 681.701 L1301.87 681.701 L1301.31 681.701 L1300.75 681.701 L1300.19 681.701 L1299.63 681.701 L1299.07 681.701 L1298.51 681.701 L1297.95 681.701 L1297.39 681.701 L1296.83 681.701 L1296.28 681.701 L1295.72 681.701 L1295.16 681.701 L1294.6 681.701 L1294.04 681.701 L1293.48 681.701 L1292.92 681.701 L1292.36 681.701 L1291.8 681.701 L1291.24 681.701 L1290.68 681.701 L1290.12 681.701 L1289.56 681.701 L1289 681.701 L1288.45 681.701 L1287.89 681.701 L1287.33 681.701 L1286.77 681.701 L1286.21 681.701 L1285.65 681.701 L1285.09 681.701 L1284.53 681.701 L1283.97 681.701 L1283.41 681.701 L1282.85 681.701 L1282.29 681.701 L1281.73 681.701 L1281.18 681.701 L1280.62 681.701 L1280.06 681.701 L1279.5 681.701 L1278.94 681.701 L1278.38 681.701 L1277.82 681.701 L1277.26 681.701 L1276.7 681.701 L1276.14 681.701 L1275.58 681.701 L1275.02 681.701 L1274.46 681.701 L1273.91 681.701 L1273.35 681.701 L1272.79 681.701 L1272.23 681.701 L1271.67 681.701 L1271.11 681.701 L1270.55 681.701 L1269.99 681.701 L1269.43 681.701 L1268.87 681.701 L1268.31 681.701 L1267.75 681.701 L1267.19 681.701 L1266.63 681.701 L1266.08 681.701 L1265.52 681.701 L1264.96 681.701 L1264.4 681.701 L1263.84 681.701 L1263.28 681.701 L1262.72 681.701 L1262.16 681.701 L1261.6 681.701 L1261.04 681.701 L1260.48 681.701 L1259.92 681.701 L1259.36 681.701 L1258.81 681.701 L1258.25 681.701 L1257.69 681.701 L1257.13 681.701 L1256.57 681.701 L1256.01 681.701 L1255.45 681.701 L1254.89 681.701 L1254.33 681.701 L1253.77 681.701 L1253.21 681.701 L1252.65 681.701 L1252.09 681.701 L1251.54 681.701 L1250.98 681.701 L1250.42 681.701 L1249.86 681.701 L1249.3 681.701 L1248.74 681.701 L1248.18 681.701 L1247.62 681.701 L1247.06 681.701 L1246.5 681.701 L1245.94 681.701 L1245.38 681.701 L1244.82 681.701 L1244.26 681.701 L1243.71 681.701 L1243.15 681.701 L1242.59 681.701 L1242.03 681.701 L1241.47 681.701 L1240.91 681.701 L1240.35 681.701 L1239.79 681.701 L1239.23 681.701 L1238.67 681.701 L1238.11 681.701 L1237.55 681.701 L1236.99 681.701 L1236.44 681.701 L1235.88 681.701 L1235.32 681.701 L1234.76 681.701 L1234.2 681.701 L1233.64 681.701 L1233.08 681.701 L1232.52 681.701 L1231.96 681.701 L1231.4 681.701 L1230.84 681.701 L1230.28 681.701 L1229.72 681.701 L1229.17 681.701 L1228.61 681.701 L1228.05 681.701 L1227.49 681.701 L1226.93 681.701 L1226.37 681.701 L1225.81 681.701 L1225.25 681.701 L1224.69 681.701 L1224.13 681.701 L1223.57 681.701 L1223.01 681.701 L1222.45 681.701 L1221.89 681.701 L1221.34 681.701 L1220.78 681.701 L1220.22 681.701 L1219.66 681.701 L1219.1 681.701 L1218.54 681.701 L1217.98 681.701 L1217.42 681.701 L1216.86 681.701 L1216.3 681.701 L1215.74 681.701 L1215.18 681.701 L1214.62 681.701 L1214.07 681.701 L1213.51 681.701 L1212.95 681.701 L1212.39 681.701 L1211.83 681.701 L1211.27 681.701 L1210.71 681.701 L1210.15 681.701 L1209.59 681.701 L1209.03 681.701 L1208.47 681.701 L1207.91 681.701 L1207.35 681.701 L1206.8 681.701 L1206.24 681.701 L1205.68 681.701 L1205.12 681.701 L1204.56 681.701 L1204 681.701 L1203.44 681.701 L1202.88 681.701 L1202.32 681.701 L1201.76 681.701 L1201.2 681.701 L1200.64 681.701 L1200.08 681.701 L1199.52 681.701 L1198.97 681.701 L1198.41 681.701 L1197.85 681.701 L1197.29 681.701 L1196.73 681.701 L1196.17 681.701 L1195.61 681.701 L1195.05 681.701 L1194.49 681.701 L1193.93 681.701 L1193.37 681.701 L1192.81 681.701 L1192.25 681.701 L1191.7 681.701 L1191.14 681.701 L1190.58 681.701 L1190.02 681.701 L1189.46 681.701 L1188.9 681.701 L1188.34 681.701 L1187.78 681.701 L1187.22 681.701 L1186.66 681.701 L1186.1 681.701 L1185.54 681.701 L1184.98 681.701 L1184.43 681.701 L1183.87 681.701 L1183.31 681.701 L1182.75 681.701 L1182.19 681.701 L1181.63 681.701 L1181.07 681.701 L1180.51 681.701 L1179.95 681.701 L1179.39 681.701 L1178.83 681.701 L1178.27 681.701 L1177.71 681.701 L1177.15 681.701 L1176.6 681.701 L1176.04 681.701 L1175.48 681.701 L1174.92 681.701 L1174.36 681.701 L1173.8 681.701 L1173.24 681.701 L1172.68 681.701 L1172.12 681.701 L1171.56 681.701 L1171 681.701 L1170.44 681.701 L1169.88 681.701 L1169.33 681.701 L1168.77 681.701 L1168.21 681.701 L1167.65 681.701 L1167.09 681.701 L1166.53 681.701 L1165.97 681.701 L1165.41 681.701 L1164.85 681.701 L1164.29 681.701 L1163.73 681.701 L1163.17 681.701 L1162.61 681.701 L1162.05 681.701 L1161.5 681.701 L1160.94 681.701 L1160.38 681.701 L1159.82 681.701 L1159.26 681.701 L1158.7 681.701 L1158.14 681.701 L1157.58 681.701 L1157.02 681.701 L1156.46 681.701 L1155.9 681.701 L1155.34 681.701 L1154.78 681.701 L1154.23 681.701 L1153.67 681.701 L1153.11 681.701 L1152.55 681.701 L1151.99 681.701 L1151.43 681.701 L1150.87 681.701 L1150.31 681.701 L1149.75 681.701 L1149.19 681.701 L1148.63 681.701 L1148.07 681.701 L1147.51 681.701 L1146.96 681.701 L1146.4 681.701 L1145.84 681.701 L1145.28 681.701 L1144.72 681.701 L1144.16 681.701 L1143.6 681.701 L1143.04 681.701 L1142.48 681.701 L1141.92 681.701 L1141.36 681.701 L1140.8 681.701 L1140.24 681.701 L1139.68 681.701 L1139.13 681.701 L1138.57 681.701 L1138.01 681.701 L1137.45 681.701 L1136.89 681.701 L1136.33 681.701 L1135.77 681.701 L1135.21 681.701 L1134.65 681.701 L1134.09 681.701 L1133.53 681.701 L1132.97 681.701 L1132.41 681.701 L1131.86 681.701 L1131.3 681.701 L1130.74 681.701 L1130.18 681.701 L1129.62 681.701 L1129.06 681.701 L1128.5 681.701 L1127.94 681.701 L1127.38 681.701 L1126.82 681.701 L1126.26 681.701 L1125.7 681.701 L1125.14 681.701 L1124.59 681.701 L1124.03 681.701 L1123.47 681.701 L1122.91 681.701 L1122.35 681.701 L1121.79 681.701 L1121.23 681.701 L1120.67 681.701 L1120.11 681.701 L1119.55 681.701 L1118.99 681.701 L1118.43 681.701 L1117.87 681.701 L1117.31 681.701 L1116.76 681.701 L1116.2 681.701 L1115.64 681.701 L1115.08 681.701 L1114.52 681.701 L1113.96 681.701 L1113.4 681.701 L1112.84 681.701 L1112.28 681.701 L1111.72 681.701 L1111.16 681.701 L1110.6 681.701 L1110.04 681.701 L1109.49 681.701 L1108.93 681.701 L1108.37 681.701 L1107.81 681.701 L1107.25 681.701 L1106.69 681.701 L1106.13 681.701 L1105.57 681.701 L1105.01 681.701 L1104.45 681.701 L1103.89 681.701 L1103.33 681.701 L1102.77 681.701 L1102.22 681.701 L1101.66 681.701 L1101.1 681.701 L1100.54 681.701 L1099.98 681.701 L1099.42 681.701 L1098.86 681.701 L1098.3 681.701 L1097.74 681.701 L1097.18 681.701 L1096.62 681.701 L1096.06 681.701 L1095.5 681.701 L1094.94 681.701 L1094.39 681.701 L1093.83 681.701 L1093.27 681.701 L1092.71 681.701 L1092.15 681.701 L1091.59 681.701 L1091.03 681.701 L1090.47 681.701 L1089.91 681.701 L1089.35 681.701 L1088.79 681.701 L1088.23 681.701 L1087.67 681.701 L1087.12 681.701 L1086.56 681.701 L1086 681.701 L1085.44 681.701 L1084.88 681.701 L1084.32 681.701 L1083.76 681.701 L1083.2 681.701 L1082.64 681.701 L1082.08 681.701 L1081.52 681.701 L1080.96 681.701 L1080.4 681.701 L1079.85 681.701 L1079.29 681.701 L1078.73 681.701 L1078.17 681.701 L1077.61 681.701 L1077.05 681.701 L1076.49 681.701 L1075.93 681.701 L1075.37 681.701 L1074.81 681.701 L1074.25 681.701 L1073.69 681.701 L1073.13 681.701 L1072.57 681.701 L1072.02 681.701 L1071.46 681.701 L1070.9 681.701 L1070.34 681.701 L1069.78 681.701 L1069.22 681.701 L1068.66 681.701 L1068.1 681.701 L1067.54 681.701 L1066.98 681.701 L1066.42 681.701 L1065.86 681.701 L1065.3 681.701 L1064.75 681.701 L1064.19 681.701 L1063.63 681.701 L1063.07 681.701 L1062.51 681.701 L1061.95 681.701 L1061.39 681.701 L1060.83 681.701 L1060.27 681.701 L1059.71 681.701 L1059.15 681.701 L1058.59 681.701 L1058.03 681.701 L1057.48 681.701 L1056.92 681.701 L1056.36 681.701 L1055.8 681.701 L1055.24 681.701 L1054.68 681.701 L1054.12 681.701 L1053.56 681.701 L1053 681.701 L1052.44 681.701 L1051.88 681.701 L1051.32 681.701 L1050.76 681.701 L1050.2 681.701 L1049.65 681.701 L1049.09 681.701 L1048.53 681.701 L1047.97 681.701 L1047.41 681.701 L1046.85 681.701 L1046.29 681.701 L1045.73 681.701 L1045.17 681.701 L1044.61 681.701 L1044.05 681.701 L1043.49 681.701 L1042.93 681.701 L1042.38 681.701 L1041.82 681.701 L1041.26 681.701 L1040.7 681.701 L1040.14 681.701 L1039.58 681.701 L1039.02 681.701 L1038.46 681.701 L1037.9 681.701 L1037.34 681.701 L1036.78 681.701 L1036.22 681.701 L1035.66 681.701 L1035.1 681.701 L1034.55 681.701 L1033.99 681.701 L1033.43 681.701 L1032.87 681.701 L1032.31 681.701 L1031.75 681.701 L1031.19 681.701 L1030.63 681.701 L1030.07 681.701 L1029.51 681.701 L1028.95 681.701 L1028.39 681.701 L1027.83 681.701 L1027.28 681.701 L1026.72 681.701 L1026.16 681.701 L1025.6 681.701 L1025.04 681.701 L1024.48 681.701 L1023.92 681.701 L1023.36 681.701 L1022.8 681.701 L1022.24 681.701 L1021.68 681.701 L1021.12 681.701 L1020.56 681.701 L1020.01 681.701 L1019.45 681.701 L1018.89 681.701 L1018.33 681.701 L1017.77 681.701 L1017.21 681.701 L1016.65 681.701 L1016.09 681.701 L1015.53 681.701 L1014.97 681.701 L1014.41 681.701 L1013.85 681.701 L1013.29 681.701 L1012.73 681.701 L1012.18 681.701 L1011.62 681.701 L1011.06 681.701 L1010.5 681.701 L1009.94 681.701 L1009.38 681.701 L1008.82 681.701 L1008.26 681.701 L1007.7 681.701 L1007.14 681.701 L1006.58 681.701 L1006.02 681.701 L1005.46 681.701 L1004.91 681.701 L1004.35 681.701 L1003.79 681.701 L1003.23 681.701 L1002.67 681.701 L1002.11 681.701 L1001.55 681.701 L1000.99 681.701 L1000.43 681.701 L999.872 681.701 L999.313 681.701 L998.754 681.701 L998.194 681.701 L997.635 681.701 L997.076 681.701 L996.517 681.701 L995.957 681.701 L995.398 681.701 L994.839 681.701 L994.28 681.701 L993.72 681.701 L993.161 681.701 L992.602 681.701 L992.043 681.701 L991.483 681.701 L990.924 681.701 L990.365 681.701 L989.806 681.701 L989.246 681.701 L988.687 681.701 L988.128 681.701 L987.569 681.701 L987.009 681.701 L986.45 681.701 L985.891 681.701 L985.332 681.701 L984.772 681.701 L984.213 681.701 L983.654 681.701 L983.095 681.701 L982.535 681.701 L981.976 681.701 L981.417 681.701 L980.858 681.701 L980.298 681.701 L979.739 681.701 L979.18 681.701 L978.621 681.701 L978.061 681.701 L977.502 681.701 L976.943 681.701 L976.384 681.701 L975.824 681.701 L975.265 681.701 L974.706 681.701 L974.147 681.701 L973.587 681.701 L973.028 681.701 L972.469 681.701 L971.91 681.701 L971.35 681.701 L970.791 681.701 L970.232 681.701 L969.673 681.701 L969.113 681.701 L968.554 681.701 L967.995 681.701 L967.436 681.701 L966.876 681.701 L966.317 681.701 L965.758 681.701 L965.199 681.701 L964.639 681.701 L964.08 681.701 L963.521 681.701 L962.962 681.701 L962.402 681.701 L961.843 681.701 L961.284 681.701 L960.725 681.701 L960.165 681.701 L959.606 681.701 L959.047 681.701 L958.488 681.701 L957.928 681.701 L957.369 681.701 L956.81 681.701 L956.251 681.701 L955.691 681.701 L955.132 681.701 L954.573 681.701 L954.014 681.701 L953.454 681.701 L952.895 681.701 L952.336 681.701 L951.777 681.701 L951.217 681.701 L950.658 681.701 L950.099 681.701 L949.54 681.701 L948.98 681.701 L948.421 681.701 L947.862 681.701 L947.303 681.701 L946.743 681.701 L946.184 681.701 L945.625 681.701 L945.066 681.701 L944.506 681.701 L943.947 681.701 L943.388 681.701 L942.829 681.701 L942.269 681.701 L941.71 681.701 L941.151 681.701 L940.592 681.701 L940.032 681.701 L939.473 681.701 L938.914 681.701 L938.355 681.701 L937.795 681.701 L937.236 681.701 L936.677 681.701 L936.118 681.701 L935.558 681.701 L934.999 681.701 L934.44 681.701 L933.881 681.701 L933.321 681.701 L932.762 681.701 L932.203 681.701 L931.644 681.701 L931.084 681.701 L930.525 681.701 L929.966 681.701 L929.406 681.701 L928.847 681.701 L928.288 681.701 L927.729 681.701 L927.169 681.701 L926.61 681.701 L926.051 681.701 L925.492 681.701 L924.932 681.701 L924.373 681.701 L923.814 681.701 L923.255 681.701 L922.695 681.701 L922.136 681.701 L921.577 681.701 L921.018 681.701 L920.458 681.701 L919.899 681.701 L919.34 681.701 L918.781 681.701 L918.221 681.701 L917.662 681.701 L917.103 681.701 L916.544 681.701 L915.984 681.701 L915.425 681.701 L914.866 681.701 L914.307 681.701 L913.747 681.701 L913.188 681.701 L912.629 681.701 L912.07 681.701 L911.51 681.701 L910.951 681.701 L910.392 681.701 L909.833 681.701 L909.273 681.701 L908.714 681.701 L908.155 681.701 L907.596 681.701 L907.036 681.701 L906.477 681.701 L905.918 681.701 L905.359 681.701 L904.799 681.701 L904.24 681.701 L903.681 681.701 L903.122 681.701 L902.562 681.701 L902.003 681.701 L901.444 681.701 L900.885 681.701 L900.325 681.701 L899.766 681.701 L899.207 681.701 L898.648 681.701 L898.088 681.701 L897.529 681.701 L896.97 681.701 L896.411 681.701 L895.851 681.701 L895.292 681.701 L894.733 681.701 L894.174 681.701 L893.614 681.701 L893.055 681.701 L892.496 681.701 L891.937 681.701 L891.377 681.701 L890.818 681.701 L890.259 681.701 L889.7 681.701 L889.14 681.701 L888.581 681.701 L888.022 681.701 L887.463 681.701 L886.903 681.701 L886.344 681.701 L885.785 681.701 L885.226 681.701 L884.666 681.701 L884.107 681.701 L883.548 681.701 L882.989 681.701 L882.429 681.701 L881.87 681.701 L881.311 681.701 L880.752 681.701 L880.192 681.701 L879.633 681.701 L879.074 681.701 L878.515 681.701 L877.955 681.701 L877.396 681.701 L876.837 681.701 L876.278 681.701 L875.718 681.701 L875.159 681.701 L874.6 681.701 L874.041 681.701 L873.481 681.701 L872.922 681.701 L872.363 681.701 L871.804 681.701 L871.244 681.701 L870.685 681.701 L870.126 681.701 L869.567 681.701 L869.007 681.701 L868.448 681.701 L867.889 681.701 L867.33 681.701 L866.77 681.701 L866.211 681.701 L865.652 681.701 L865.093 681.701 L864.533 681.701 L863.974 681.701 L863.415 681.701 L862.856 681.701 L862.296 681.701 L861.737 681.701 L861.178 681.701 L860.619 681.701 L860.059 681.701 L859.5 681.701 L858.941 681.701 L858.382 681.701 L857.822 681.701 L857.263 681.701 L856.704 681.701 L856.145 681.701 L855.585 681.701 L855.026 681.701 L854.467 681.701 L853.908 681.701 L853.348 681.701 L852.789 681.701 L852.23 681.701 L851.671 681.701 L851.111 681.701 L850.552 681.701 L849.993 681.701 L849.434 681.701 L848.874 681.701 L848.315 681.701 L847.756 681.701 L847.197 681.701 L846.637 681.701 L846.078 681.701 L845.519 681.701 L844.96 681.701 L844.4 681.701 L843.841 681.701 L843.282 681.701 L842.723 681.701 L842.163 681.701 L841.604 681.701 L841.045 681.701 L840.486 681.701 L839.926 681.701 L839.367 681.701 L838.808 681.701 L838.249 681.701 L837.689 681.701 L837.13 681.701 L836.571 681.701 L836.012 681.701 L835.452 681.701 L834.893 681.701 L834.334 681.701 L833.775 681.701 L833.215 681.701 L832.656 681.701 L832.097 681.701 L831.538 681.701 L830.978 681.701 L830.419 681.701 L829.86 681.701 L829.301 681.701 L828.741 681.701 L828.182 681.701 L827.623 681.701 L827.064 681.701 L826.504 681.701 L825.945 681.701 L825.386 681.701 L824.827 681.701 L824.267 681.701 L823.708 681.701 L823.149 681.701 L822.59 681.701 L822.03 681.701 L821.471 681.701 L820.912 681.701 L820.353 681.701 L819.793 681.701 L819.234 681.701 L818.675 681.701 L818.116 681.701 L817.556 681.701 L816.997 681.701 L816.438 681.701 L815.879 681.701 L815.319 681.701 L814.76 681.701 L814.201 681.701 L813.642 681.701 L813.082 681.701 L812.523 681.701 L811.964 681.701 L811.405 681.701 L810.845 681.701 L810.286 681.701 L809.727 681.701 L809.168 681.701 L808.608 681.701 L808.049 681.701 L807.49 681.701 L806.931 681.701 L806.371 681.701 L805.812 681.701 L805.253 681.701 L804.693 681.701 L804.134 681.701 L803.575 681.701 L803.016 681.701 L802.456 681.701 L801.897 681.701 L801.338 681.701 L800.779 681.701 L800.219 681.701 L799.66 681.701 L799.101 681.701 L798.542 681.701 L797.982 681.701 L797.423 681.701 L796.864 681.701 L796.305 681.701 L795.745 681.701 L795.186 681.701 L794.627 681.701 L794.068 681.701 L793.508 681.701 L792.949 681.701 L792.39 681.701 L791.831 681.701 L791.271 681.701 L790.712 681.701 L790.153 681.701 L789.594 681.701 L789.034 681.701 L788.475 681.701 L787.916 681.701 L787.357 681.701 L786.797 681.701 L786.238 681.701 L785.679 681.701 L785.12 681.701 L784.56 681.701 L784.001 681.701 L783.442 681.701 L782.883 681.701 L782.323 681.701 L781.764 681.701 L781.205 681.701 L780.646 681.701 L780.086 681.701 L779.527 681.701 L778.968 681.701 L778.409 681.701 L777.849 681.701 L777.29 681.701 L776.731 681.701 L776.172 681.701 L775.612 681.701 L775.053 681.701 L774.494 681.701 L773.935 681.701 L773.375 681.701 L772.816 681.701 L772.257 681.701 L771.698 681.701 L771.138 681.701 L770.579 681.701 L770.02 681.701 L769.461 681.701 L768.901 681.701 L768.342 681.701 L767.783 681.701 L767.224 681.701 L766.664 681.701 L766.105 681.701 L765.546 681.701 L764.987 681.701 L764.427 681.701 L763.868 681.701 L763.309 681.701 L762.75 681.701 L762.19 681.701 L761.631 681.701 L761.072 681.701 L760.513 681.701 L759.953 681.701 L759.394 681.701 L758.835 681.701 L758.276 681.701 L757.716 681.701 L757.157 681.701 L756.598 681.701 L756.039 681.701 L755.479 681.701 L754.92 681.701 L754.361 681.701 L753.802 681.701 L753.242 681.701 L752.683 681.701 L752.124 681.701 L751.565 681.701 L751.005 681.701 L750.446 681.701 L749.887 681.701 L749.328 681.701 L748.768 681.701 L748.209 681.701 L747.65 681.701 L747.091 681.701 L746.531 681.701 L745.972 681.701 L745.413 681.701 L744.854 681.701 L744.294 681.701 L743.735 681.701 L743.176 681.701 L742.617 681.701 L742.057 681.701 L741.498 681.701 L740.939 681.701 L740.38 681.701 L739.82 681.701 L739.261 681.701 L738.702 681.701 L738.143 681.701 L737.583 681.701 L737.024 681.701 L736.465 681.701 L735.906 681.701 L735.346 681.701 L734.787 681.701 L734.228 681.701 L733.669 681.701 L733.109 681.701 L732.55 681.701 L731.991 681.701 L731.432 681.701 L730.872 681.701 L730.313 681.701 L729.754 681.701 L729.195 681.701 L728.635 681.701 L728.076 681.701 L727.517 681.701 L726.958 681.701 L726.398 681.701 L725.839 681.701 L725.28 681.701 L724.721 681.701 L724.161 681.701 L723.602 681.701 L723.043 681.701 L722.484 681.701 L721.924 681.701 L721.365 681.701 L720.806 681.701 L720.247 681.701  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.811 720.806,686.811 721.365,686.811 721.924,686.811 722.484,686.811 723.043,686.811 723.602,686.811 724.161,686.811 724.721,686.811 725.28,686.811 725.839,686.811 726.398,686.811 726.958,686.811 727.517,686.811 728.076,686.811 728.635,686.811 729.195,686.811 729.754,686.811 730.313,686.811 730.872,686.811 731.432,686.811 731.991,686.811 732.55,686.811 733.109,686.811 733.669,686.811 734.228,686.811 734.787,686.811 735.346,686.811 735.906,686.811 736.465,686.811 737.024,686.811 737.583,686.811 738.143,686.811 738.702,686.811 739.261,686.811 739.82,686.811 740.38,686.811 740.939,686.811 741.498,686.811 742.057,686.811 742.617,686.811 743.176,686.811 743.735,686.811 744.294,686.811 744.854,686.811 745.413,686.811 745.972,686.811 746.531,686.811 747.091,686.811 747.65,686.811 748.209,686.811 748.768,686.811 749.328,686.811 749.887,686.811 750.446,686.811 751.005,686.811 751.565,686.811 752.124,686.811 752.683,686.811 753.242,686.811 753.802,686.811 754.361,686.811 754.92,686.811 755.479,686.811 756.039,686.811 756.598,686.811 757.157,686.811 757.716,686.811 758.276,686.811 758.835,686.811 759.394,686.811 759.953,686.811 760.513,686.811 761.072,686.811 761.631,686.811 762.19,686.811 762.75,686.811 763.309,686.811 763.868,686.811 764.427,686.811 764.987,686.811 765.546,686.811 766.105,686.811 766.664,686.811 767.224,686.811 767.783,686.811 768.342,686.811 768.901,686.811 769.461,686.811 770.02,686.811 770.579,686.811 771.138,686.811 771.698,686.811 772.257,686.811 772.816,686.811 773.375,686.811 773.935,686.811 774.494,686.811 775.053,686.811 775.612,686.811 776.172,686.811 776.731,686.811 777.29,686.811 777.849,686.811 778.409,686.811 778.968,686.811 779.527,686.811 780.086,686.811 780.646,686.811 781.205,686.811 781.764,686.811 782.323,686.811 782.883,686.811 783.442,686.811 784.001,686.811 784.56,686.811 785.12,686.811 785.679,686.811 786.238,686.811 786.797,686.811 787.357,686.811 787.916,686.811 788.475,686.811 789.034,686.811 789.594,686.811 790.153,686.811 790.712,686.811 791.271,686.811 791.831,686.811 792.39,686.811 792.949,686.811 793.508,686.811 794.068,686.811 794.627,686.811 795.186,686.811 795.745,686.811 796.305,686.811 796.864,686.811 797.423,686.811 797.982,686.811 798.542,686.811 799.101,686.811 799.66,686.811 800.219,686.811 800.779,686.811 801.338,686.811 801.897,686.811 802.456,686.811 803.016,686.811 803.575,686.811 804.134,686.811 804.693,686.811 805.253,686.811 805.812,686.811 806.371,686.811 806.931,686.811 807.49,686.811 808.049,686.811 808.608,686.811 809.168,686.811 809.727,686.811 810.286,686.811 810.845,686.811 811.405,686.811 811.964,686.811 812.523,686.811 813.082,686.811 813.642,686.811 814.201,686.811 814.76,686.811 815.319,686.811 815.879,686.811 816.438,686.811 816.997,686.811 817.556,686.811 818.116,686.811 818.675,686.811 819.234,686.811 819.793,686.811 820.353,686.811 820.912,686.811 821.471,686.811 822.03,686.811 822.59,686.811 823.149,686.811 823.708,686.811 824.267,686.811 824.827,686.811 825.386,686.811 825.945,686.811 826.504,686.811 827.064,686.811 827.623,686.811 828.182,686.811 828.741,686.811 829.301,686.811 829.86,686.811 830.419,686.811 830.978,686.811 831.538,686.811 832.097,686.811 832.656,686.811 833.215,686.811 833.775,686.811 834.334,686.811 834.893,686.811 835.452,686.811 836.012,686.811 836.571,686.811 837.13,686.811 837.689,686.811 838.249,686.811 838.808,686.811 839.367,686.811 839.926,686.811 840.486,686.811 841.045,686.811 841.604,686.811 842.163,686.811 842.723,686.811 843.282,686.811 843.841,686.811 844.4,686.811 844.96,686.811 845.519,686.811 846.078,686.811 846.637,686.811 847.197,686.811 847.756,686.811 848.315,686.811 848.874,686.811 849.434,686.811 849.993,686.811 850.552,686.811 851.111,686.811 851.671,686.811 852.23,686.811 852.789,686.811 853.348,686.811 853.908,686.811 854.467,686.811 855.026,686.811 855.585,686.811 856.145,686.811 856.704,686.811 857.263,686.811 857.822,686.811 858.382,686.811 858.941,686.811 859.5,686.811 860.059,686.811 860.619,686.811 861.178,686.811 861.737,686.811 862.296,686.811 862.856,686.811 863.415,686.811 863.974,686.811 864.533,686.811 865.093,686.811 865.652,686.811 866.211,686.811 866.77,686.811 867.33,686.811 867.889,686.811 868.448,686.811 869.007,686.811 869.567,686.811 870.126,686.811 870.685,686.811 871.244,686.811 871.804,686.811 872.363,686.811 872.922,686.811 873.481,686.811 874.041,686.811 874.6,686.811 875.159,686.811 875.718,686.811 876.278,686.811 876.837,686.811 877.396,686.811 877.955,686.811 878.515,686.811 879.074,686.811 879.633,686.811 880.192,686.811 880.752,686.811 881.311,686.811 881.87,686.811 882.429,686.811 882.989,686.811 883.548,686.811 884.107,686.811 884.666,686.811 885.226,686.811 885.785,686.811 886.344,686.811 886.903,686.811 887.463,686.811 888.022,686.811 888.581,686.811 889.14,686.811 889.7,686.811 890.259,686.811 890.818,686.811 891.377,686.811 891.937,686.811 892.496,686.811 893.055,686.811 893.614,686.811 894.174,686.811 894.733,686.811 895.292,686.811 895.851,686.811 896.411,686.811 896.97,686.811 897.529,686.811 898.088,686.811 898.648,686.811 899.207,686.811 899.766,686.811 900.325,686.811 900.885,686.811 901.444,686.811 902.003,686.811 902.562,686.811 903.122,686.811 903.681,686.811 904.24,686.811 904.799,686.811 905.359,686.811 905.918,686.811 906.477,686.811 907.036,686.811 907.596,686.811 908.155,686.811 908.714,686.811 909.273,686.811 909.833,686.811 910.392,686.811 910.951,686.811 911.51,686.811 912.07,686.811 912.629,686.811 913.188,686.811 913.747,686.811 914.307,686.811 914.866,686.811 915.425,686.811 915.984,686.811 916.544,686.811 917.103,686.811 917.662,686.811 918.221,686.811 918.781,686.811 919.34,686.811 919.899,686.811 920.458,686.811 921.018,686.811 921.577,686.811 922.136,686.811 922.695,686.811 923.255,686.811 923.814,686.811 924.373,686.811 924.932,686.811 925.492,686.811 926.051,686.811 926.61,686.811 927.169,686.811 927.729,686.811 928.288,686.811 928.847,686.811 929.406,686.811 929.966,686.811 930.525,686.811 931.084,686.811 931.644,686.811 932.203,686.811 932.762,686.811 933.321,686.811 933.881,686.811 934.44,686.811 934.999,686.811 935.558,686.811 936.118,686.811 936.677,686.811 937.236,686.811 937.795,686.811 938.355,686.811 938.914,686.811 939.473,686.811 940.032,686.811 940.592,686.811 941.151,686.811 941.71,686.811 942.269,686.811 942.829,686.811 943.388,686.811 943.947,686.811 944.506,686.811 945.066,686.811 945.625,686.811 946.184,686.811 946.743,686.811 947.303,686.811 947.862,686.811 948.421,686.811 948.98,686.811 949.54,686.811 950.099,686.811 950.658,686.811 951.217,686.811 951.777,686.811 952.336,686.811 952.895,686.811 953.454,686.811 954.014,686.811 954.573,686.811 955.132,686.811 955.691,686.811 956.251,686.811 956.81,686.811 957.369,686.811 957.928,686.811 958.488,686.811 959.047,686.811 959.606,686.811 960.165,686.811 960.725,686.811 961.284,686.811 961.843,686.811 962.402,686.811 962.962,686.811 963.521,686.811 964.08,686.811 964.639,686.811 965.199,686.811 965.758,686.811 966.317,686.811 966.876,686.811 967.436,686.811 967.995,686.811 968.554,686.811 969.113,686.811 969.673,686.811 970.232,686.811 970.791,686.811 971.35,686.811 971.91,686.811 972.469,686.811 973.028,686.811 973.587,686.811 974.147,686.811 974.706,686.811 975.265,686.811 975.824,686.811 976.384,686.811 976.943,686.811 977.502,686.811 978.061,686.811 978.621,686.811 979.18,686.811 979.739,686.811 980.298,686.811 980.858,686.811 981.417,686.811 981.976,686.811 982.535,686.811 983.095,686.811 983.654,686.811 984.213,686.811 984.772,686.811 985.332,686.811 985.891,686.811 986.45,686.811 987.009,686.811 987.569,686.811 988.128,686.811 988.687,686.811 989.246,686.811 989.806,686.811 990.365,686.811 990.924,686.811 991.483,686.811 992.043,686.811 992.602,686.811 993.161,686.811 993.72,686.811 994.28,686.811 994.839,686.811 995.398,686.811 995.957,686.811 996.517,686.811 997.076,686.811 997.635,686.811 998.194,686.811 998.754,686.811 999.313,686.811 999.872,686.811 1000.43,686.811 1000.99,686.811 1001.55,686.811 1002.11,686.811 1002.67,686.811 1003.23,686.811 1003.79,686.811 1004.35,686.811 1004.91,686.811 1005.46,686.811 1006.02,686.811 1006.58,686.811 1007.14,686.811 1007.7,686.811 1008.26,686.811 1008.82,686.811 1009.38,686.811 1009.94,686.811 1010.5,686.811 1011.06,686.811 1011.62,686.811 1012.18,686.811 1012.73,686.811 1013.29,686.811 1013.85,686.811 1014.41,686.811 1014.97,686.811 1015.53,686.811 1016.09,686.811 1016.65,686.811 1017.21,686.811 1017.77,686.811 1018.33,686.811 1018.89,686.811 1019.45,686.811 1020.01,686.811 1020.56,686.811 1021.12,686.811 1021.68,686.811 1022.24,686.811 1022.8,686.811 1023.36,686.811 1023.92,686.811 1024.48,686.811 1025.04,686.811 1025.6,686.811 1026.16,686.811 1026.72,686.811 1027.28,686.811 1027.83,686.811 1028.39,686.811 1028.95,686.811 1029.51,686.811 1030.07,686.811 1030.63,686.811 1031.19,686.811 1031.75,686.811 1032.31,686.811 1032.87,686.811 1033.43,686.811 1033.99,686.811 1034.55,686.811 1035.1,686.811 1035.66,686.811 1036.22,686.811 1036.78,686.811 1037.34,686.811 1037.9,686.811 1038.46,686.811 1039.02,686.811 1039.58,686.811 1040.14,686.811 1040.7,686.811 1041.26,686.811 1041.82,686.811 1042.38,686.811 1042.93,686.811 1043.49,686.811 1044.05,686.811 1044.61,686.811 1045.17,686.811 1045.73,686.811 1046.29,686.811 1046.85,686.811 1047.41,686.811 1047.97,686.811 1048.53,686.811 1049.09,686.811 1049.65,686.811 1050.2,686.811 1050.76,686.811 1051.32,686.811 1051.88,686.811 1052.44,686.811 1053,686.811 1053.56,686.811 1054.12,686.811 1054.68,686.811 1055.24,686.811 1055.8,686.811 1056.36,686.811 1056.92,686.811 1057.48,686.811 1058.03,686.811 1058.59,686.811 1059.15,686.811 1059.71,686.811 1060.27,686.811 1060.83,686.811 1061.39,686.811 1061.95,686.811 1062.51,686.811 1063.07,686.811 1063.63,686.811 1064.19,686.811 1064.75,686.811 1065.3,686.811 1065.86,686.811 1066.42,686.811 1066.98,686.811 1067.54,686.811 1068.1,686.811 1068.66,686.811 1069.22,686.811 1069.78,686.811 1070.34,686.811 1070.9,686.811 1071.46,686.811 1072.02,686.811 1072.57,686.811 1073.13,686.811 1073.69,686.811 1074.25,686.811 1074.81,686.811 1075.37,686.811 1075.93,686.811 1076.49,686.811 1077.05,686.811 1077.61,686.811 1078.17,686.811 1078.73,686.811 1079.29,686.811 1079.85,686.811 1080.4,686.811 1080.96,686.811 1081.52,686.811 1082.08,686.811 1082.64,686.811 1083.2,686.811 1083.76,686.811 1084.32,686.811 1084.88,686.811 1085.44,686.811 1086,686.811 1086.56,686.811 1087.12,686.811 1087.67,686.811 1088.23,686.811 1088.79,686.811 1089.35,686.811 1089.91,686.811 1090.47,686.811 1091.03,686.811 1091.59,686.811 1092.15,686.811 1092.71,686.811 1093.27,686.811 1093.83,686.811 1094.39,686.811 1094.94,686.811 1095.5,686.811 1096.06,686.811 1096.62,686.811 1097.18,686.811 1097.74,686.811 1098.3,686.811 1098.86,686.811 1099.42,686.811 1099.98,686.811 1100.54,686.811 1101.1,686.811 1101.66,686.811 1102.22,686.811 1102.77,686.811 1103.33,686.811 1103.89,686.811 1104.45,686.811 1105.01,686.811 1105.57,686.811 1106.13,686.811 1106.69,686.811 1107.25,686.811 1107.81,686.811 1108.37,686.811 1108.93,686.811 1109.49,686.811 1110.04,686.811 1110.6,686.811 1111.16,686.811 1111.72,686.811 1112.28,686.811 1112.84,686.811 1113.4,686.811 1113.96,686.811 1114.52,686.811 1115.08,686.811 1115.64,686.811 1116.2,686.811 1116.76,686.811 1117.31,686.811 1117.87,686.811 1118.43,686.811 1118.99,686.811 1119.55,686.811 1120.11,686.811 1120.67,686.811 1121.23,686.811 1121.79,686.811 1122.35,686.811 1122.91,686.811 1123.47,686.811 1124.03,686.811 1124.59,686.811 1125.14,686.811 1125.7,686.811 1126.26,686.811 1126.82,686.811 1127.38,686.811 1127.94,686.811 1128.5,686.811 1129.06,686.811 1129.62,686.811 1130.18,686.811 1130.74,686.811 1131.3,686.811 1131.86,686.811 1132.41,686.811 1132.97,686.811 1133.53,686.811 1134.09,686.811 1134.65,686.811 1135.21,686.811 1135.77,686.811 1136.33,686.811 1136.89,686.811 1137.45,686.811 1138.01,686.811 1138.57,686.811 1139.13,686.811 1139.68,686.811 1140.24,686.811 1140.8,686.811 1141.36,686.811 1141.92,686.811 1142.48,686.811 1143.04,686.811 1143.6,686.811 1144.16,686.811 1144.72,686.811 1145.28,686.811 1145.84,686.811 1146.4,686.811 1146.96,686.811 1147.51,686.811 1148.07,686.811 1148.63,686.811 1149.19,686.811 1149.75,686.811 1150.31,686.811 1150.87,686.811 1151.43,686.811 1151.99,686.811 1152.55,686.811 1153.11,686.811 1153.67,686.811 1154.23,686.811 1154.78,686.811 1155.34,686.811 1155.9,686.811 1156.46,686.811 1157.02,686.811 1157.58,686.811 1158.14,686.811 1158.7,686.811 1159.26,686.811 1159.82,686.811 1160.38,686.811 1160.94,686.811 1161.5,686.811 1162.05,686.811 1162.61,686.811 1163.17,686.811 1163.73,686.811 1164.29,686.811 1164.85,686.811 1165.41,686.811 1165.97,686.811 1166.53,686.811 1167.09,686.811 1167.65,686.811 1168.21,686.811 1168.77,686.811 1169.33,686.811 1169.88,686.811 1170.44,686.811 1171,686.811 1171.56,686.811 1172.12,686.811 1172.68,686.811 1173.24,686.811 1173.8,686.811 1174.36,686.811 1174.92,686.811 1175.48,686.811 1176.04,686.811 1176.6,686.811 1177.15,686.811 1177.71,686.811 1178.27,686.811 1178.83,686.811 1179.39,686.811 1179.95,686.811 1180.51,686.811 1181.07,686.811 1181.63,686.811 1182.19,686.811 1182.75,686.811 1183.31,686.811 1183.87,686.811 1184.43,686.811 1184.98,686.811 1185.54,686.811 1186.1,686.811 1186.66,686.811 1187.22,686.811 1187.78,686.811 1188.34,686.811 1188.9,686.811 1189.46,686.811 1190.02,686.811 1190.58,686.811 1191.14,686.811 1191.7,686.811 1192.25,686.811 1192.81,686.811 1193.37,686.811 1193.93,686.811 1194.49,686.811 1195.05,686.811 1195.61,686.811 1196.17,686.811 1196.73,686.811 1197.29,686.811 1197.85,686.811 1198.41,686.811 1198.97,686.811 1199.52,686.811 1200.08,686.811 1200.64,686.811 1201.2,686.811 1201.76,686.811 1202.32,686.811 1202.88,686.811 1203.44,686.811 1204,686.811 1204.56,686.811 1205.12,686.811 1205.68,686.811 1206.24,686.811 1206.8,686.811 1207.35,686.811 1207.91,686.811 1208.47,686.811 1209.03,686.811 1209.59,686.811 1210.15,686.811 1210.71,686.811 1211.27,686.811 1211.83,686.811 1212.39,686.811 1212.95,686.811 1213.51,686.811 1214.07,686.811 1214.62,686.811 1215.18,686.811 1215.74,686.811 1216.3,686.811 1216.86,686.811 1217.42,686.811 1217.98,686.811 1218.54,686.811 1219.1,686.811 1219.66,686.811 1220.22,686.811 1220.78,686.811 1221.34,686.811 1221.89,686.811 1222.45,686.811 1223.01,686.811 1223.57,686.811 1224.13,686.811 1224.69,686.811 1225.25,686.811 1225.81,686.811 1226.37,686.811 1226.93,686.811 1227.49,686.811 1228.05,686.811 1228.61,686.811 1229.17,686.811 1229.72,686.811 1230.28,686.811 1230.84,686.811 1231.4,686.811 1231.96,686.811 1232.52,686.811 1233.08,686.811 1233.64,686.811 1234.2,686.811 1234.76,686.811 1235.32,686.811 1235.88,686.811 1236.44,686.811 1236.99,686.811 1237.55,686.811 1238.11,686.811 1238.67,686.811 1239.23,686.811 1239.79,686.811 1240.35,686.811 1240.91,686.811 1241.47,686.811 1242.03,686.811 1242.59,686.811 1243.15,686.811 1243.71,686.811 1244.26,686.811 1244.82,686.811 1245.38,686.811 1245.94,686.811 1246.5,686.811 1247.06,686.811 1247.62,686.811 1248.18,686.811 1248.74,686.811 1249.3,686.811 1249.86,686.811 1250.42,686.811 1250.98,686.811 1251.54,686.811 1252.09,686.811 1252.65,686.811 1253.21,686.811 1253.77,686.811 1254.33,686.811 1254.89,686.811 1255.45,686.811 1256.01,686.811 1256.57,686.811 1257.13,686.811 1257.69,686.811 1258.25,686.811 1258.81,686.811 1259.36,686.811 1259.92,686.811 1260.48,686.811 1261.04,686.811 1261.6,686.811 1262.16,686.811 1262.72,686.811 1263.28,686.811 1263.84,686.811 1264.4,686.811 1264.96,686.811 1265.52,686.811 1266.08,686.811 1266.63,686.811 1267.19,686.811 1267.75,686.811 1268.31,686.811 1268.87,686.811 1269.43,686.811 1269.99,686.811 1270.55,686.811 1271.11,686.811 1271.67,686.811 1272.23,686.811 1272.79,686.811 1273.35,686.811 1273.91,686.811 1274.46,686.811 1275.02,686.811 1275.58,686.811 1276.14,686.811 1276.7,686.811 1277.26,686.811 1277.82,686.811 1278.38,686.811 1278.94,686.811 1279.5,686.811 1280.06,686.811 1280.62,686.811 1281.18,686.811 1281.73,686.811 1282.29,686.811 1282.85,686.811 1283.41,686.811 1283.97,686.811 1284.53,686.811 1285.09,686.811 1285.65,686.811 1286.21,686.811 1286.77,686.811 1287.33,686.811 1287.89,686.811 1288.45,686.811 1289,686.811 1289.56,686.811 1290.12,686.811 1290.68,686.811 1291.24,686.811 1291.8,686.811 1292.36,686.811 1292.92,686.811 1293.48,686.811 1294.04,686.811 1294.6,686.811 1295.16,686.811 1295.72,686.811 1296.28,686.811 1296.83,686.811 1297.39,686.811 1297.95,686.811 1298.51,686.811 1299.07,686.811 1299.63,686.811 1300.19,686.811 1300.75,686.811 1301.31,686.811 1301.87,686.811 1302.43,686.811 1302.99,686.811 1303.55,686.811 1304.1,686.811 1304.66,686.811 1305.22,686.811 1305.78,686.811 1306.34,686.811 1306.9,686.811 1307.46,686.811 1308.02,686.811 1308.58,686.811 1309.14,686.811 1309.7,686.811 1310.26,686.811 1310.82,686.811 1311.38,686.811 1311.93,686.811 1312.49,686.811 1313.05,686.811 1313.61,686.811 1314.17,686.811 1314.73,686.811 1315.29,686.811 1315.85,686.811 1316.41,686.811 1316.97,686.811 1317.53,686.811 1318.09,686.811 1318.65,686.811 1319.2,686.811 1319.76,686.811 1320.32,686.811 1320.88,686.811 1321.44,686.811 1322,686.811 1322.56,686.811 1323.12,686.811 1323.68,686.811 1324.24,686.811 1324.8,686.811 1325.36,686.811 1325.92,686.811 1326.47,686.811 1327.03,686.811 1327.59,686.811 1328.15,686.811 1328.71,686.811 1329.27,686.811 1329.83,686.811 1330.39,686.811 1330.95,686.811 1331.51,686.811 1332.07,686.811 1332.63,686.811 1333.19,686.811 1333.75,686.811 1334.3,686.811 1334.86,686.811 1335.42,686.811 1335.98,686.811 1336.54,686.811 1337.1,686.811 1337.66,686.811 1338.22,686.811 1338.78,686.811 1339.34,686.811 1339.9,686.811 1340.46,686.811 1341.02,686.811 1341.57,686.811 1342.13,686.811 1342.69,686.811 1343.25,686.811 1343.81,686.811 1344.37,686.811 1344.93,686.811 1345.49,686.811 1346.05,686.811 1346.61,686.811 1347.17,686.811 1347.73,686.811 1348.29,686.811 1348.84,686.811 1349.4,686.811 1349.96,686.811 1350.52,686.811 1351.08,686.811 1351.64,686.811 1352.2,686.811 1352.76,686.811 1353.32,686.811 1353.88,686.811 1354.44,686.811 1355,686.811 1355.56,686.811 1356.12,686.811 1356.67,686.811 1357.23,686.811 1357.79,686.811 1358.35,686.811 1358.91,686.811 1359.47,686.811 1360.03,686.811 1360.59,686.811 1361.15,686.811 1361.71,686.811 1362.27,686.811 1362.83,686.811 1363.39,686.811 1363.94,686.811 1364.5,686.811 1365.06,686.811 1365.62,686.811 1366.18,686.811 1366.74,686.811 1367.3,686.811 1367.86,686.811 1368.42,686.811 1368.98,686.811 1369.54,686.811 1370.1,686.811 1370.66,686.811 1371.21,686.811 1371.77,686.811 1372.33,686.811 1372.89,686.811 1373.45,686.811 1374.01,686.811 1374.57,686.811 1375.13,686.811 1375.69,686.811 1376.25,686.811 1376.81,686.811 1377.37,686.811 1377.93,686.811 1378.49,686.811 1379.04,686.811 1379.6,686.811 1380.16,686.811 1380.72,686.811 1381.28,686.811 1381.84,686.811 1382.4,686.811 1382.96,686.811 1383.52,686.811 1384.08,686.811 1384.64,686.811 1385.2,686.811 1385.76,686.811 1386.31,686.811 1386.87,686.811 1387.43,686.811 1387.99,686.811 1388.55,686.811 1389.11,686.811 1389.67,686.811 1390.23,686.811 1390.79,686.811 1391.35,686.811 1391.91,686.811 1392.47,686.811 1393.03,686.811 1393.58,686.811 1394.14,686.811 1394.7,686.811 1395.26,686.811 1395.82,686.811 1396.38,686.811 1396.94,686.811 1397.5,686.811 1398.06,686.811 1398.62,686.811 1399.18,686.811 1399.74,686.811 1400.3,686.811 1400.86,686.811 1401.41,686.811 1401.97,686.811 1402.53,686.811 1403.09,686.811 1403.65,686.811 1404.21,686.811 1404.77,686.811 1405.33,686.811 1405.89,686.811 1406.45,686.811 1407.01,686.811 1407.57,686.811 1408.13,686.811 1408.68,686.811 1409.24,686.811 1409.8,686.811 1410.36,686.811 1410.92,686.811 1411.48,686.811 1412.04,686.811 1412.6,686.811 1413.16,686.811 1413.72,686.811 1414.28,686.811 1414.84,686.811 1415.4,686.811 1415.95,686.811 1416.51,686.811 1417.07,686.811 1417.63,686.811 1418.19,686.811 1418.75,686.811 1419.31,686.811 1419.87,686.811 1420.43,686.811 1420.99,686.811 1421.55,686.811 1422.11,686.811 1422.67,686.811 1423.23,686.811 1423.78,686.811 1424.34,686.811 1424.9,686.811 1425.46,686.811 1426.02,686.811 1426.58,686.811 1427.14,686.811 1427.7,686.811 1428.26,686.811 1428.82,686.811 1429.38,686.811 1429.94,686.811 1430.5,686.811 1431.05,686.811 1431.61,686.811 1432.17,686.811 1432.73,686.811 1433.29,686.811 1433.85,686.811 1434.41,686.811 1434.97,686.811 1435.53,686.811 1436.09,686.811 1436.65,686.811 1437.21,686.811 1437.77,686.811 1438.33,686.811 1438.88,686.811 1439.44,686.811 1440,686.811 1440.56,686.811 1441.12,686.811 1441.68,686.811 1442.24,686.811 1442.8,686.811 1443.36,686.811 1443.92,686.811 1444.48,686.811 1445.04,686.811 1445.6,686.811 1446.15,686.811 1446.71,686.811 1447.27,686.811 1447.83,686.811 1448.39,686.811 1448.95,686.811 1449.51,686.811 1450.07,686.811 1450.63,686.811 1451.19,686.811 1451.75,686.811 1452.31,686.811 1452.87,686.811 1453.42,686.811 1453.98,686.811 1454.54,686.811 1455.1,686.811 1455.66,686.811 1456.22,686.811 1456.78,686.811 1457.34,686.811 1457.9,686.811 1458.46,686.811 1459.02,686.811 1459.58,686.811 1460.14,686.811 1460.7,686.811 1461.25,686.811 1461.81,686.811 1462.37,686.811 1462.93,686.811 1463.49,686.811 1464.05,686.811 1464.61,686.811 1465.17,686.811 1465.73,686.811 1466.29,686.811 1466.85,686.811 1467.41,686.811 1467.97,686.811 1468.52,686.811 1469.08,686.811 1469.64,686.811 1470.2,686.811 1470.76,686.811 1471.32,686.811 1471.88,686.811 1472.44,686.811 1473,686.811 1473.56,686.811 1474.12,686.811 1474.68,686.811 1475.24,686.811 1475.79,686.811 1476.35,686.811 1476.91,686.811 1477.47,686.811 1478.03,686.811 1478.59,686.811 1479.15,686.811 1479.71,686.811 1480.27,686.811 1480.83,686.811 1481.39,686.811 1481.95,686.811 1482.51,686.811 1483.07,686.811 1483.62,686.811 1484.18,686.811 1484.74,686.811 1485.3,686.811 1485.86,686.811 1486.42,686.811 1486.98,686.811 1487.54,686.811 1488.1,686.811 1488.66,686.811 1489.22,686.811 1489.78,686.811 1490.34,686.811 1490.89,686.811 1491.45,686.811 1492.01,686.811 1492.57,686.811 1493.13,686.811 1493.69,686.811 1494.25,686.811 1494.81,686.811 1495.37,686.811 1495.93,686.811 1496.49,686.811 1497.05,686.811 1497.61,686.811 1498.16,686.811 1498.72,686.811 1499.28,686.811 1499.84,686.811 1500.4,686.811 1500.96,686.811 1501.52,686.811 1502.08,686.811 1502.64,686.811 1503.2,686.811 1503.76,686.811 1504.32,686.811 1504.88,686.811 1505.44,686.811 1505.99,686.811 1506.55,686.811 1507.11,686.811 1507.67,686.811 1508.23,686.811 1508.79,686.811 1509.35,686.811 1509.91,686.811 1510.47,686.811 1511.03,686.811 1511.59,686.811 1512.15,686.811 1512.71,686.811 1513.26,686.811 1513.82,686.811 1514.38,686.811 1514.94,686.811 1515.5,686.811 1516.06,686.811 1516.62,686.811 1517.18,686.811 1517.74,686.811 1518.3,686.811 1518.86,686.811 1519.42,686.811 1519.98,686.811 1520.53,686.811 1521.09,686.811 1521.65,686.811 1522.21,686.811 1522.77,686.811 1523.33,686.811 1523.89,686.811 1524.45,686.811 1525.01,686.811 1525.57,686.811 1526.13,686.811 1526.69,686.811 1527.25,686.811 1527.81,686.811 1528.36,686.811 1528.92,686.811 1529.48,686.811 1530.04,686.811 1530.6,686.811 1531.16,686.811 1531.72,686.811 1532.28,686.811 1532.84,686.811 1533.4,686.811 1533.96,686.811 1534.52,686.811 1535.08,686.811 1535.63,686.811 1536.19,686.811 1536.75,686.811 1537.31,686.811 1537.87,686.811 1538.43,686.811 1538.99,686.811 1539.55,686.811 1540.11,686.811 1540.67,686.811 1541.23,686.811 1541.79,686.811 1542.35,686.811 1542.9,686.811 1543.46,686.811 1544.02,686.811 1544.58,686.811 1545.14,686.811 1545.7,686.811 1546.26,686.811 1546.82,686.811 1547.38,686.811 1547.94,686.811 1548.5,686.811 1549.06,686.811 1549.62,686.811 1550.18,686.811 1550.73,686.811 1551.29,686.811 1551.85,686.811 1552.41,686.811 1552.97,686.811 1553.53,686.811 1554.09,686.811 1554.65,686.811 1555.21,686.811 1555.77,686.811 1556.33,686.811 1556.89,686.811 1557.45,686.811 1558,686.811 1558.56,686.811 1559.12,686.811 1559.68,686.811 1560.24,686.811 1560.8,686.811 1561.36,686.811 1561.92,686.811 1562.48,686.811 1563.04,686.811 1563.6,686.811 1564.16,686.811 1564.72,686.811 1565.28,686.811 1565.83,686.811 1566.39,686.811 1566.95,686.811 1567.51,686.811 1568.07,686.811 1568.63,686.811 1569.19,686.811 1569.75,686.811 1570.31,686.811 1570.87,686.811 1571.43,686.811 1571.99,686.811 1572.55,686.811 1573.1,686.811 1573.66,686.811 1574.22,686.811 1574.78,686.811 1575.34,686.811 1575.9,686.811 1576.46,686.811 1577.02,686.811 1577.58,686.811 1578.14,686.811 1578.7,686.811 1579.26,686.811 1579.82,686.811 1580.37,686.811 1580.93,686.811 1581.49,686.811 1582.05,686.811 1582.61,686.811 1583.17,686.811 1583.73,686.811 1584.29,686.811 1584.85,686.811 1585.41,686.811 1585.97,686.811 1586.53,686.811 1587.09,686.811 1587.65,686.811 1588.2,686.811 1588.76,686.811 1589.32,686.811 1589.88,686.811 1590.44,686.811 1591,686.811 1591.56,686.811 1592.12,686.811 1592.68,686.811 1593.24,686.811 1593.8,686.811 1594.36,686.811 1594.92,686.811 1595.47,686.811 1596.03,686.811 1596.59,686.811 1597.15,686.811 1597.71,686.811 1598.27,686.811 1598.83,686.811 1599.39,686.811 1599.95,686.811 1600.51,686.811 1601.07,686.811 1601.63,686.811 1602.19,686.811 1602.74,686.811 1603.3,686.811 1603.86,686.811 1604.42,686.811 1604.98,686.811 1605.54,686.811 1606.1,686.811 1606.66,686.811 1607.22,686.811 1607.78,686.811 1608.34,686.811 1608.9,686.811 1609.46,686.811 1610.02,686.811 1610.57,686.811 1611.13,686.811 1611.69,686.811 1612.25,686.811 1612.81,686.811 1613.37,686.811 1613.93,686.811 1614.49,686.811 1615.05,686.811 1615.61,686.811 1616.17,686.811 1616.73,686.811 1617.29,686.811 1617.84,686.811 1618.4,686.811 1618.96,686.811 1619.52,686.811 1620.08,686.811 1620.64,686.811 1621.2,686.811 1621.76,686.811 1622.32,686.811 1622.88,686.811 1623.44,686.811 1624,686.811 1624.56,686.811 1625.11,686.811 1625.67,686.811 1626.23,686.811 1626.79,686.811 1627.35,686.811 1627.91,686.811 1628.47,686.811 1629.03,686.811 1629.59,686.811 1630.15,686.811 1630.71,686.811 1631.27,686.811 1631.83,686.811 1632.39,686.811 1632.94,686.811 1633.5,686.811 1634.06,686.811 1634.62,686.811 1635.18,686.811 1635.74,686.811 1636.3,686.811 1636.86,686.811 1637.42,686.811 1637.98,686.811 1638.54,686.811 1639.1,686.811 1639.66,686.811 1640.21,686.811 1640.77,686.811 1641.33,686.811 1641.89,686.811 1642.45,686.811 1643.01,686.811 1643.57,686.811 1644.13,686.811 1644.69,686.811 1645.25,686.811 1645.81,686.811 1646.37,686.811 1646.93,686.811 1647.48,686.811 1648.04,686.811 1648.6,686.811 1649.16,686.811 1649.72,686.811 1650.28,686.811 1650.84,686.811 1651.4,686.811 1651.96,686.811 1652.52,686.811 1653.08,686.811 1653.64,686.811 1654.2,686.811 1654.76,686.811 1655.31,686.811 1655.87,686.811 1656.43,686.811 1656.99,686.811 1657.55,686.811 1658.11,686.811 1658.67,686.811 1659.23,686.811 1659.79,686.811 1660.35,686.811 1660.91,686.811 1661.47,686.811 1662.03,686.811 1662.58,686.811 1663.14,686.811 1663.7,686.811 1664.26,686.811 1664.82,686.811 1665.38,686.811 1665.94,686.811 1666.5,686.811 1667.06,686.811 1667.62,686.811 1668.18,686.811 1668.74,686.811 1669.3,686.811 1669.85,686.811 1670.41,686.811 1670.97,686.811 1671.53,686.811 1672.09,686.811 1672.65,686.811 1673.21,686.811 1673.77,686.811 1674.33,686.811 1674.89,686.811 1675.45,686.811 1676.01,686.811 1676.57,686.811 1677.13,686.811 1677.68,686.811 1678.24,686.811 1678.8,686.811 1679.36,686.811 1679.92,686.811 1680.48,686.811 1681.04,686.811 1681.6,686.811 1682.16,686.811 1682.72,686.811 1683.28,686.811 1683.84,686.811 1684.4,686.811 1684.95,686.811 1685.51,686.811 1686.07,686.811 1686.63,686.811 1687.19,686.811 1687.75,686.811 1688.31,686.811 1688.87,686.811 1689.43,686.811 1689.99,686.811 1690.55,686.811 1691.11,686.811 1691.67,686.811 1692.23,686.811 1692.78,686.811 1693.34,686.811 1693.9,686.811 1694.46,686.811 1695.02,686.811 1695.58,686.811 1696.14,686.811 1696.7,686.811 1697.26,686.811 1697.82,686.811 1698.38,686.811 1698.94,686.811 1699.5,686.811 1700.05,686.811 1700.61,686.811 1701.17,686.811 1701.73,686.811 1702.29,686.811 1702.85,686.811 1703.41,686.811 1703.97,686.811 1704.53,686.811 1705.09,686.811 1705.65,686.811 1706.21,686.811 1706.77,686.811 1707.32,686.811 1707.88,686.811 1708.44,686.811 1709,686.811 1709.56,686.811 1710.12,686.811 1710.68,686.811 1711.24,686.811 1711.8,686.811 1712.36,686.811 1712.92,686.811 1713.48,686.811 1714.04,686.811 1714.6,686.811 1715.15,686.811 1715.71,686.811 1716.27,686.811 1716.83,686.811 1717.39,686.811 1717.95,686.811 1718.51,686.811 1719.07,686.811 1719.63,686.811 1720.19,686.811 1720.75,686.811 1721.31,686.811 1721.87,686.811 1722.42,686.811 1722.98,686.811 1723.54,686.811 1724.1,686.811 1724.66,686.811 1725.22,686.811 1725.78,686.811 1726.34,686.811 1726.9,686.811 1727.46,686.811 1728.02,686.811 1728.58,686.811 1729.14,686.811 1729.69,686.811 1730.25,686.811 1730.81,686.811 1731.37,686.811 1731.93,686.811 1732.49,686.811 1733.05,686.811 1733.61,686.811 1734.17,686.811 1734.73,686.811 1735.29,686.811 1735.85,686.811 1736.41,686.811 1736.97,686.811 1737.52,686.811 1738.08,686.811 1738.64,686.811 1739.2,686.811 1739.76,686.811 1740.32,686.811 1740.88,686.811 1741.44,686.811 1742,686.811 1742.56,686.811 1743.12,686.811 1743.68,686.811 1744.24,686.811 1744.79,686.811 1745.35,686.811 1745.91,686.811 1746.47,686.811 1747.03,686.811 1747.59,686.811 1748.15,686.811 1748.71,686.811 1749.27,686.811 1749.83,686.811 1750.39,686.811 1750.95,686.811 1751.51,686.811 1752.06,686.811 1752.62,686.811 1753.18,686.811 1753.74,686.811 1754.3,686.811 1754.86,686.811 1755.42,686.811 1755.98,686.811 1756.54,686.811 1757.1,686.811 1757.66,686.811 1758.22,686.811 1758.78,686.811 1759.34,686.811 1759.89,686.811 1760.45,686.811 1761.01,686.811 1761.57,686.811 1762.13,686.811 1762.69,686.811 1763.25,686.811 1763.81,686.811 1764.37,686.811 1764.93,686.811 1765.49,686.811 1766.05,686.811 1766.61,686.811 1767.16,686.811 1767.72,686.811 1768.28,686.811 1768.84,686.811 1769.4,686.811 1769.96,686.811 1770.52,686.811 1771.08,686.811 1771.64,686.811 1772.2,686.811 1772.76,686.811 1773.32,686.811 1773.88,686.811 1774.43,686.811 1774.99,686.811 1775.55,686.811 1776.11,686.811 1776.67,686.811 1777.23,686.811 1777.79,686.811 1778.35,686.811 1778.91,686.811 1779.47,686.811 1780.03,686.811 1780.59,686.811 1781.15,686.811 1781.71,686.811 1782.26,686.811 1782.82,686.811 1783.38,686.811 1783.94,686.811 1784.5,686.811 1785.06,686.811 1785.62,686.811 1786.18,686.811 1786.74,686.811 1787.3,686.811 1787.86,686.811 1788.42,686.811 1788.98,686.811 1789.53,686.811 1790.09,686.811 1790.65,686.811 1791.21,686.811 1791.77,686.811 1792.33,686.811 1792.89,686.811 1793.45,686.811 1794.01,686.811 1794.57,686.811 1795.13,686.811 1795.69,686.811 1796.25,686.811 1796.8,686.811 1797.36,686.811 1797.92,686.811 1798.48,686.811 1799.04,686.811 1799.6,686.811 1800.16,686.811 1800.72,686.811 1801.28,686.811 1801.84,686.811 1802.4,686.811 1802.96,686.811 1803.52,686.811 1804.08,686.811 1804.63,686.811 1805.19,686.811 1805.75,686.811 1806.31,686.811 1806.87,686.811 1807.43,686.811 1807.99,686.811 1808.55,686.811 1809.11,686.811 1809.67,686.811 1810.23,686.811 1810.79,686.811 1811.35,686.811 1811.9,686.811 1812.46,686.811 1813.02,686.811 1813.58,686.811 1814.14,686.811 1814.7,686.811 1815.26,686.811 1815.82,686.811 1816.38,686.811 1816.94,686.811 1817.5,686.811 1818.06,686.811 1818.62,686.811 1819.18,686.811 1819.73,686.811 1820.29,686.811 1820.85,686.811 1821.41,686.811 1821.97,686.811 1822.53,686.811 1823.09,686.811 1823.65,686.811 1824.21,686.811 1824.77,686.811 1825.33,686.811 1825.89,686.811 1826.45,686.811 1827,686.811 1827.56,686.811 1828.12,686.811 1828.68,686.811 1829.24,686.811 1829.8,686.811 1830.36,686.811 1830.92,686.811 1831.48,686.811 1832.04,686.811 1832.6,686.811 1833.16,686.811 1833.72,686.811 1834.27,686.811 1834.83,686.811 1835.39,686.811 1835.95,686.811 1836.51,686.811 1837.07,686.811 1837.63,686.811 1838.19,686.811 \"/>\n<path clip-path=\"url(#clip633)\" d=\"M720.247 684.013 L720.806 684.013 L721.365 684.013 L721.924 684.013 L722.484 684.013 L723.043 684.013 L723.602 684.013 L724.161 684.013 L724.721 684.013 L725.28 684.013 L725.839 684.013 L726.398 684.013 L726.958 684.013 L727.517 684.013 L728.076 684.013 L728.635 684.013 L729.195 684.013 L729.754 684.013 L730.313 684.013 L730.872 684.013 L731.432 684.013 L731.991 684.013 L732.55 684.013 L733.109 684.013 L733.669 684.013 L734.228 684.013 L734.787 684.013 L735.346 684.013 L735.906 684.013 L736.465 684.013 L737.024 684.013 L737.583 684.013 L738.143 684.013 L738.702 684.013 L739.261 684.013 L739.82 684.013 L740.38 684.013 L740.939 684.013 L741.498 684.013 L742.057 684.013 L742.617 684.013 L743.176 684.013 L743.735 684.013 L744.294 684.013 L744.854 684.013 L745.413 684.013 L745.972 684.013 L746.531 684.013 L747.091 684.013 L747.65 684.013 L748.209 684.013 L748.768 684.013 L749.328 684.013 L749.887 684.013 L750.446 684.013 L751.005 684.013 L751.565 684.013 L752.124 684.013 L752.683 684.013 L753.242 684.013 L753.802 684.013 L754.361 684.013 L754.92 684.013 L755.479 684.013 L756.039 684.013 L756.598 684.013 L757.157 684.013 L757.716 684.013 L758.276 684.013 L758.835 684.013 L759.394 684.013 L759.953 684.013 L760.513 684.013 L761.072 684.013 L761.631 684.013 L762.19 684.013 L762.75 684.013 L763.309 684.013 L763.868 684.013 L764.427 684.013 L764.987 684.013 L765.546 684.013 L766.105 684.013 L766.664 684.013 L767.224 684.013 L767.783 684.013 L768.342 684.013 L768.901 684.013 L769.461 684.013 L770.02 684.013 L770.579 684.013 L771.138 684.013 L771.698 684.013 L772.257 684.013 L772.816 684.013 L773.375 684.013 L773.935 684.013 L774.494 684.013 L775.053 684.013 L775.612 684.013 L776.172 684.013 L776.731 684.013 L777.29 684.013 L777.849 684.013 L778.409 684.013 L778.968 684.013 L779.527 684.013 L780.086 684.013 L780.646 684.013 L781.205 684.013 L781.764 684.013 L782.323 684.013 L782.883 684.013 L783.442 684.013 L784.001 684.013 L784.56 684.013 L785.12 684.013 L785.679 684.013 L786.238 684.013 L786.797 684.013 L787.357 684.013 L787.916 684.013 L788.475 684.013 L789.034 684.013 L789.594 684.013 L790.153 684.013 L790.712 684.013 L791.271 684.013 L791.831 684.013 L792.39 684.013 L792.949 684.013 L793.508 684.013 L794.068 684.013 L794.627 684.013 L795.186 684.013 L795.745 684.013 L796.305 684.013 L796.864 684.013 L797.423 684.013 L797.982 684.013 L798.542 684.013 L799.101 684.013 L799.66 684.013 L800.219 684.013 L800.779 684.013 L801.338 684.013 L801.897 684.013 L802.456 684.013 L803.016 684.013 L803.575 684.013 L804.134 684.013 L804.693 684.013 L805.253 684.013 L805.812 684.013 L806.371 684.013 L806.931 684.013 L807.49 684.013 L808.049 684.013 L808.608 684.013 L809.168 684.013 L809.727 684.013 L810.286 684.013 L810.845 684.013 L811.405 684.013 L811.964 684.013 L812.523 684.013 L813.082 684.013 L813.642 684.013 L814.201 684.013 L814.76 684.013 L815.319 684.013 L815.879 684.013 L816.438 684.013 L816.997 684.013 L817.556 684.013 L818.116 684.013 L818.675 684.013 L819.234 684.013 L819.793 684.013 L820.353 684.013 L820.912 684.013 L821.471 684.013 L822.03 684.013 L822.59 684.013 L823.149 684.013 L823.708 684.013 L824.267 684.013 L824.827 684.013 L825.386 684.013 L825.945 684.013 L826.504 684.013 L827.064 684.013 L827.623 684.013 L828.182 684.013 L828.741 684.013 L829.301 684.013 L829.86 684.013 L830.419 684.013 L830.978 684.013 L831.538 684.013 L832.097 684.013 L832.656 684.013 L833.215 684.013 L833.775 684.013 L834.334 684.013 L834.893 684.013 L835.452 684.013 L836.012 684.013 L836.571 684.013 L837.13 684.013 L837.689 684.013 L838.249 684.013 L838.808 684.013 L839.367 684.013 L839.926 684.013 L840.486 684.013 L841.045 684.013 L841.604 684.013 L842.163 684.013 L842.723 684.013 L843.282 684.013 L843.841 684.013 L844.4 684.013 L844.96 684.013 L845.519 684.013 L846.078 684.013 L846.637 684.013 L847.197 684.013 L847.756 684.013 L848.315 684.013 L848.874 684.013 L849.434 684.013 L849.993 684.013 L850.552 684.013 L851.111 684.013 L851.671 684.013 L852.23 684.013 L852.789 684.013 L853.348 684.013 L853.908 684.013 L854.467 684.013 L855.026 684.013 L855.585 684.013 L856.145 684.013 L856.704 684.013 L857.263 684.013 L857.822 684.013 L858.382 684.013 L858.941 684.013 L859.5 684.013 L860.059 684.013 L860.619 684.013 L861.178 684.013 L861.737 684.013 L862.296 684.013 L862.856 684.013 L863.415 684.013 L863.974 684.013 L864.533 684.013 L865.093 684.013 L865.652 684.013 L866.211 684.013 L866.77 684.013 L867.33 684.013 L867.889 684.013 L868.448 684.013 L869.007 684.013 L869.567 684.013 L870.126 684.013 L870.685 684.013 L871.244 684.013 L871.804 684.013 L872.363 684.013 L872.922 684.013 L873.481 684.013 L874.041 684.013 L874.6 684.013 L875.159 684.013 L875.718 684.013 L876.278 684.013 L876.837 684.013 L877.396 684.013 L877.955 684.013 L878.515 684.013 L879.074 684.013 L879.633 684.013 L880.192 684.013 L880.752 684.013 L881.311 684.013 L881.87 684.013 L882.429 684.013 L882.989 684.013 L883.548 684.013 L884.107 684.013 L884.666 684.013 L885.226 684.013 L885.785 684.013 L886.344 684.013 L886.903 684.013 L887.463 684.013 L888.022 684.013 L888.581 684.013 L889.14 684.013 L889.7 684.013 L890.259 684.013 L890.818 684.013 L891.377 684.013 L891.937 684.013 L892.496 684.013 L893.055 684.013 L893.614 684.013 L894.174 684.013 L894.733 684.013 L895.292 684.013 L895.851 684.013 L896.411 684.013 L896.97 684.013 L897.529 684.013 L898.088 684.013 L898.648 684.013 L899.207 684.013 L899.766 684.013 L900.325 684.013 L900.885 684.013 L901.444 684.013 L902.003 684.013 L902.562 684.013 L903.122 684.013 L903.681 684.013 L904.24 684.013 L904.799 684.013 L905.359 684.013 L905.918 684.013 L906.477 684.013 L907.036 684.013 L907.596 684.013 L908.155 684.013 L908.714 684.013 L909.273 684.013 L909.833 684.013 L910.392 684.013 L910.951 684.013 L911.51 684.013 L912.07 684.013 L912.629 684.013 L913.188 684.013 L913.747 684.013 L914.307 684.013 L914.866 684.013 L915.425 684.013 L915.984 684.013 L916.544 684.013 L917.103 684.013 L917.662 684.013 L918.221 684.013 L918.781 684.013 L919.34 684.013 L919.899 684.013 L920.458 684.013 L921.018 684.013 L921.577 684.013 L922.136 684.013 L922.695 684.013 L923.255 684.013 L923.814 684.013 L924.373 684.013 L924.932 684.013 L925.492 684.013 L926.051 684.013 L926.61 684.013 L927.169 684.013 L927.729 684.013 L928.288 684.013 L928.847 684.013 L929.406 684.013 L929.966 684.013 L930.525 684.013 L931.084 684.013 L931.644 684.013 L932.203 684.013 L932.762 684.013 L933.321 684.013 L933.881 684.013 L934.44 684.013 L934.999 684.013 L935.558 684.013 L936.118 684.013 L936.677 684.013 L937.236 684.013 L937.795 684.013 L938.355 684.013 L938.914 684.013 L939.473 684.013 L940.032 684.013 L940.592 684.013 L941.151 684.013 L941.71 684.013 L942.269 684.013 L942.829 684.013 L943.388 684.013 L943.947 684.013 L944.506 684.013 L945.066 684.013 L945.625 684.013 L946.184 684.013 L946.743 684.013 L947.303 684.013 L947.862 684.013 L948.421 684.013 L948.98 684.013 L949.54 684.013 L950.099 684.013 L950.658 684.013 L951.217 684.013 L951.777 684.013 L952.336 684.013 L952.895 684.013 L953.454 684.013 L954.014 684.013 L954.573 684.013 L955.132 684.013 L955.691 684.013 L956.251 684.013 L956.81 684.013 L957.369 684.013 L957.928 684.013 L958.488 684.013 L959.047 684.013 L959.606 684.013 L960.165 684.013 L960.725 684.013 L961.284 684.013 L961.843 684.013 L962.402 684.013 L962.962 684.013 L963.521 684.013 L964.08 684.013 L964.639 684.013 L965.199 684.013 L965.758 684.013 L966.317 684.013 L966.876 684.013 L967.436 684.013 L967.995 684.013 L968.554 684.013 L969.113 684.013 L969.673 684.013 L970.232 684.013 L970.791 684.013 L971.35 684.013 L971.91 684.013 L972.469 684.013 L973.028 684.013 L973.587 684.013 L974.147 684.013 L974.706 684.013 L975.265 684.013 L975.824 684.013 L976.384 684.013 L976.943 684.013 L977.502 684.013 L978.061 684.013 L978.621 684.013 L979.18 684.013 L979.739 684.013 L980.298 684.013 L980.858 684.013 L981.417 684.013 L981.976 684.013 L982.535 684.013 L983.095 684.013 L983.654 684.013 L984.213 684.013 L984.772 684.013 L985.332 684.013 L985.891 684.013 L986.45 684.013 L987.009 684.013 L987.569 684.013 L988.128 684.013 L988.687 684.013 L989.246 684.013 L989.806 684.013 L990.365 684.013 L990.924 684.013 L991.483 684.013 L992.043 684.013 L992.602 684.013 L993.161 684.013 L993.72 684.013 L994.28 684.013 L994.839 684.013 L995.398 684.013 L995.957 684.013 L996.517 684.013 L997.076 684.013 L997.635 684.013 L998.194 684.013 L998.754 684.013 L999.313 684.013 L999.872 684.013 L1000.43 684.013 L1000.99 684.013 L1001.55 684.013 L1002.11 684.013 L1002.67 684.013 L1003.23 684.013 L1003.79 684.013 L1004.35 684.013 L1004.91 684.013 L1005.46 684.013 L1006.02 684.013 L1006.58 684.013 L1007.14 684.013 L1007.7 684.013 L1008.26 684.013 L1008.82 684.013 L1009.38 684.013 L1009.94 684.013 L1010.5 684.013 L1011.06 684.013 L1011.62 684.013 L1012.18 684.013 L1012.73 684.013 L1013.29 684.013 L1013.85 684.013 L1014.41 684.013 L1014.97 684.013 L1015.53 684.013 L1016.09 684.013 L1016.65 684.013 L1017.21 684.013 L1017.77 684.013 L1018.33 684.013 L1018.89 684.013 L1019.45 684.013 L1020.01 684.013 L1020.56 684.013 L1021.12 684.013 L1021.68 684.013 L1022.24 684.013 L1022.8 684.013 L1023.36 684.013 L1023.92 684.013 L1024.48 684.013 L1025.04 684.013 L1025.6 684.013 L1026.16 684.013 L1026.72 684.013 L1027.28 684.013 L1027.83 684.013 L1028.39 684.013 L1028.95 684.013 L1029.51 684.013 L1030.07 684.013 L1030.63 684.013 L1031.19 684.013 L1031.75 684.013 L1032.31 684.013 L1032.87 684.013 L1033.43 684.013 L1033.99 684.013 L1034.55 684.013 L1035.1 684.013 L1035.66 684.013 L1036.22 684.013 L1036.78 684.013 L1037.34 684.013 L1037.9 684.013 L1038.46 684.013 L1039.02 684.013 L1039.58 684.013 L1040.14 684.013 L1040.7 684.013 L1041.26 684.013 L1041.82 684.013 L1042.38 684.013 L1042.93 684.013 L1043.49 684.013 L1044.05 684.013 L1044.61 684.013 L1045.17 684.013 L1045.73 684.013 L1046.29 684.013 L1046.85 684.013 L1047.41 684.013 L1047.97 684.013 L1048.53 684.013 L1049.09 684.013 L1049.65 684.013 L1050.2 684.013 L1050.76 684.013 L1051.32 684.013 L1051.88 684.013 L1052.44 684.013 L1053 684.013 L1053.56 684.013 L1054.12 684.013 L1054.68 684.013 L1055.24 684.013 L1055.8 684.013 L1056.36 684.013 L1056.92 684.013 L1057.48 684.013 L1058.03 684.013 L1058.59 684.013 L1059.15 684.013 L1059.71 684.013 L1060.27 684.013 L1060.83 684.013 L1061.39 684.013 L1061.95 684.013 L1062.51 684.013 L1063.07 684.013 L1063.63 684.013 L1064.19 684.013 L1064.75 684.013 L1065.3 684.013 L1065.86 684.013 L1066.42 684.013 L1066.98 684.013 L1067.54 684.013 L1068.1 684.013 L1068.66 684.013 L1069.22 684.013 L1069.78 684.013 L1070.34 684.013 L1070.9 684.013 L1071.46 684.013 L1072.02 684.013 L1072.57 684.013 L1073.13 684.013 L1073.69 684.013 L1074.25 684.013 L1074.81 684.013 L1075.37 684.013 L1075.93 684.013 L1076.49 684.013 L1077.05 684.013 L1077.61 684.013 L1078.17 684.013 L1078.73 684.013 L1079.29 684.013 L1079.85 684.013 L1080.4 684.013 L1080.96 684.013 L1081.52 684.013 L1082.08 684.013 L1082.64 684.013 L1083.2 684.013 L1083.76 684.013 L1084.32 684.013 L1084.88 684.013 L1085.44 684.013 L1086 684.013 L1086.56 684.013 L1087.12 684.013 L1087.67 684.013 L1088.23 684.013 L1088.79 684.013 L1089.35 684.013 L1089.91 684.013 L1090.47 684.013 L1091.03 684.013 L1091.59 684.013 L1092.15 684.013 L1092.71 684.013 L1093.27 684.013 L1093.83 684.013 L1094.39 684.013 L1094.94 684.013 L1095.5 684.013 L1096.06 684.013 L1096.62 684.013 L1097.18 684.013 L1097.74 684.013 L1098.3 684.013 L1098.86 684.013 L1099.42 684.013 L1099.98 684.013 L1100.54 684.013 L1101.1 684.013 L1101.66 684.013 L1102.22 684.013 L1102.77 684.013 L1103.33 684.013 L1103.89 684.013 L1104.45 684.013 L1105.01 684.013 L1105.57 684.013 L1106.13 684.013 L1106.69 684.013 L1107.25 684.013 L1107.81 684.013 L1108.37 684.013 L1108.93 684.013 L1109.49 684.013 L1110.04 684.013 L1110.6 684.013 L1111.16 684.013 L1111.72 684.013 L1112.28 684.013 L1112.84 684.013 L1113.4 684.013 L1113.96 684.013 L1114.52 684.013 L1115.08 684.013 L1115.64 684.013 L1116.2 684.013 L1116.76 684.013 L1117.31 684.013 L1117.87 684.013 L1118.43 684.013 L1118.99 684.013 L1119.55 684.013 L1120.11 684.013 L1120.67 684.013 L1121.23 684.013 L1121.79 684.013 L1122.35 684.013 L1122.91 684.013 L1123.47 684.013 L1124.03 684.013 L1124.59 684.013 L1125.14 684.013 L1125.7 684.013 L1126.26 684.013 L1126.82 684.013 L1127.38 684.013 L1127.94 684.013 L1128.5 684.013 L1129.06 684.013 L1129.62 684.013 L1130.18 684.013 L1130.74 684.013 L1131.3 684.013 L1131.86 684.013 L1132.41 684.013 L1132.97 684.013 L1133.53 684.013 L1134.09 684.013 L1134.65 684.013 L1135.21 684.013 L1135.77 684.013 L1136.33 684.013 L1136.89 684.013 L1137.45 684.013 L1138.01 684.013 L1138.57 684.013 L1139.13 684.013 L1139.68 684.013 L1140.24 684.013 L1140.8 684.013 L1141.36 684.013 L1141.92 684.013 L1142.48 684.013 L1143.04 684.013 L1143.6 684.013 L1144.16 684.013 L1144.72 684.013 L1145.28 684.013 L1145.84 684.013 L1146.4 684.013 L1146.96 684.013 L1147.51 684.013 L1148.07 684.013 L1148.63 684.013 L1149.19 684.013 L1149.75 684.013 L1150.31 684.013 L1150.87 684.013 L1151.43 684.013 L1151.99 684.013 L1152.55 684.013 L1153.11 684.013 L1153.67 684.013 L1154.23 684.013 L1154.78 684.013 L1155.34 684.013 L1155.9 684.013 L1156.46 684.013 L1157.02 684.013 L1157.58 684.013 L1158.14 684.013 L1158.7 684.013 L1159.26 684.013 L1159.82 684.013 L1160.38 684.013 L1160.94 684.013 L1161.5 684.013 L1162.05 684.013 L1162.61 684.013 L1163.17 684.013 L1163.73 684.013 L1164.29 684.013 L1164.85 684.013 L1165.41 684.013 L1165.97 684.013 L1166.53 684.013 L1167.09 684.013 L1167.65 684.013 L1168.21 684.013 L1168.77 684.013 L1169.33 684.013 L1169.88 684.013 L1170.44 684.013 L1171 684.013 L1171.56 684.013 L1172.12 684.013 L1172.68 684.013 L1173.24 684.013 L1173.8 684.013 L1174.36 684.013 L1174.92 684.013 L1175.48 684.013 L1176.04 684.013 L1176.6 684.013 L1177.15 684.013 L1177.71 684.013 L1178.27 684.013 L1178.83 684.013 L1179.39 684.013 L1179.95 684.013 L1180.51 684.013 L1181.07 684.013 L1181.63 684.013 L1182.19 684.013 L1182.75 684.013 L1183.31 684.013 L1183.87 684.013 L1184.43 684.013 L1184.98 684.013 L1185.54 684.013 L1186.1 684.013 L1186.66 684.013 L1187.22 684.013 L1187.78 684.013 L1188.34 684.013 L1188.9 684.013 L1189.46 684.013 L1190.02 684.013 L1190.58 684.013 L1191.14 684.013 L1191.7 684.013 L1192.25 684.013 L1192.81 684.013 L1193.37 684.013 L1193.93 684.013 L1194.49 684.013 L1195.05 684.013 L1195.61 684.013 L1196.17 684.013 L1196.73 684.013 L1197.29 684.013 L1197.85 684.013 L1198.41 684.013 L1198.97 684.013 L1199.52 684.013 L1200.08 684.013 L1200.64 684.013 L1201.2 684.013 L1201.76 684.013 L1202.32 684.013 L1202.88 684.013 L1203.44 684.013 L1204 684.013 L1204.56 684.013 L1205.12 684.013 L1205.68 684.013 L1206.24 684.013 L1206.8 684.013 L1207.35 684.013 L1207.91 684.013 L1208.47 684.013 L1209.03 684.013 L1209.59 684.013 L1210.15 684.013 L1210.71 684.013 L1211.27 684.013 L1211.83 684.013 L1212.39 684.013 L1212.95 684.013 L1213.51 684.013 L1214.07 684.013 L1214.62 684.013 L1215.18 684.013 L1215.74 684.013 L1216.3 684.013 L1216.86 684.013 L1217.42 684.013 L1217.98 684.013 L1218.54 684.013 L1219.1 684.013 L1219.66 684.013 L1220.22 684.013 L1220.78 684.013 L1221.34 684.013 L1221.89 684.013 L1222.45 684.013 L1223.01 684.013 L1223.57 684.013 L1224.13 684.013 L1224.69 684.013 L1225.25 684.013 L1225.81 684.013 L1226.37 684.013 L1226.93 684.013 L1227.49 684.013 L1228.05 684.013 L1228.61 684.013 L1229.17 684.013 L1229.72 684.013 L1230.28 684.013 L1230.84 684.013 L1231.4 684.013 L1231.96 684.013 L1232.52 684.013 L1233.08 684.013 L1233.64 684.013 L1234.2 684.013 L1234.76 684.013 L1235.32 684.013 L1235.88 684.013 L1236.44 684.013 L1236.99 684.013 L1237.55 684.013 L1238.11 684.013 L1238.67 684.013 L1239.23 684.013 L1239.79 684.013 L1240.35 684.013 L1240.91 684.013 L1241.47 684.013 L1242.03 684.013 L1242.59 684.013 L1243.15 684.013 L1243.71 684.013 L1244.26 684.013 L1244.82 684.013 L1245.38 684.013 L1245.94 684.013 L1246.5 684.013 L1247.06 684.013 L1247.62 684.013 L1248.18 684.013 L1248.74 684.013 L1249.3 684.013 L1249.86 684.013 L1250.42 684.013 L1250.98 684.013 L1251.54 684.013 L1252.09 684.013 L1252.65 684.013 L1253.21 684.013 L1253.77 684.013 L1254.33 684.013 L1254.89 684.013 L1255.45 684.013 L1256.01 684.013 L1256.57 684.013 L1257.13 684.013 L1257.69 684.013 L1258.25 684.013 L1258.81 684.013 L1259.36 684.013 L1259.92 684.013 L1260.48 684.013 L1261.04 684.013 L1261.6 684.013 L1262.16 684.013 L1262.72 684.013 L1263.28 684.013 L1263.84 684.013 L1264.4 684.013 L1264.96 684.013 L1265.52 684.013 L1266.08 684.013 L1266.63 684.013 L1267.19 684.013 L1267.75 684.013 L1268.31 684.013 L1268.87 684.013 L1269.43 684.013 L1269.99 684.013 L1270.55 684.013 L1271.11 684.013 L1271.67 684.013 L1272.23 684.013 L1272.79 684.013 L1273.35 684.013 L1273.91 684.013 L1274.46 684.013 L1275.02 684.013 L1275.58 684.013 L1276.14 684.013 L1276.7 684.013 L1277.26 684.013 L1277.82 684.013 L1278.38 684.013 L1278.94 684.013 L1279.5 684.013 L1280.06 684.013 L1280.62 684.013 L1281.18 684.013 L1281.73 684.013 L1282.29 684.013 L1282.85 684.013 L1283.41 684.013 L1283.97 684.013 L1284.53 684.013 L1285.09 684.013 L1285.65 684.013 L1286.21 684.013 L1286.77 684.013 L1287.33 684.013 L1287.89 684.013 L1288.45 684.013 L1289 684.013 L1289.56 684.013 L1290.12 684.013 L1290.68 684.013 L1291.24 684.013 L1291.8 684.013 L1292.36 684.013 L1292.92 684.013 L1293.48 684.013 L1294.04 684.013 L1294.6 684.013 L1295.16 684.013 L1295.72 684.013 L1296.28 684.013 L1296.83 684.013 L1297.39 684.013 L1297.95 684.013 L1298.51 684.013 L1299.07 684.013 L1299.63 684.013 L1300.19 684.013 L1300.75 684.013 L1301.31 684.013 L1301.87 684.013 L1302.43 684.013 L1302.99 684.013 L1303.55 684.013 L1304.1 684.013 L1304.66 684.013 L1305.22 684.013 L1305.78 684.013 L1306.34 684.013 L1306.9 684.013 L1307.46 684.013 L1308.02 684.013 L1308.58 684.013 L1309.14 684.013 L1309.7 684.013 L1310.26 684.013 L1310.82 684.013 L1311.38 684.013 L1311.93 684.013 L1312.49 684.013 L1313.05 684.013 L1313.61 684.013 L1314.17 684.013 L1314.73 684.013 L1315.29 684.013 L1315.85 684.013 L1316.41 684.013 L1316.97 684.013 L1317.53 684.013 L1318.09 684.013 L1318.65 684.013 L1319.2 684.013 L1319.76 684.013 L1320.32 684.013 L1320.88 684.013 L1321.44 684.013 L1322 684.013 L1322.56 684.013 L1323.12 684.013 L1323.68 684.013 L1324.24 684.013 L1324.8 684.013 L1325.36 684.013 L1325.92 684.013 L1326.47 684.013 L1327.03 684.013 L1327.59 684.013 L1328.15 684.013 L1328.71 684.013 L1329.27 684.013 L1329.83 684.013 L1330.39 684.013 L1330.95 684.013 L1331.51 684.013 L1332.07 684.013 L1332.63 684.013 L1333.19 684.013 L1333.75 684.013 L1334.3 684.013 L1334.86 684.013 L1335.42 684.013 L1335.98 684.013 L1336.54 684.013 L1337.1 684.013 L1337.66 684.013 L1338.22 684.013 L1338.78 684.013 L1339.34 684.013 L1339.9 684.013 L1340.46 684.013 L1341.02 684.013 L1341.57 684.013 L1342.13 684.013 L1342.69 684.013 L1343.25 684.013 L1343.81 684.013 L1344.37 684.013 L1344.93 684.013 L1345.49 684.013 L1346.05 684.013 L1346.61 684.013 L1347.17 684.013 L1347.73 684.013 L1348.29 684.013 L1348.84 684.013 L1349.4 684.013 L1349.96 684.013 L1350.52 684.013 L1351.08 684.013 L1351.64 684.013 L1352.2 684.013 L1352.76 684.013 L1353.32 684.013 L1353.88 684.013 L1354.44 684.013 L1355 684.013 L1355.56 684.013 L1356.12 684.013 L1356.67 684.013 L1357.23 684.013 L1357.79 684.013 L1358.35 684.013 L1358.91 684.013 L1359.47 684.013 L1360.03 684.013 L1360.59 684.013 L1361.15 684.013 L1361.71 684.013 L1362.27 684.013 L1362.83 684.013 L1363.39 684.013 L1363.94 684.013 L1364.5 684.013 L1365.06 684.013 L1365.62 684.013 L1366.18 684.013 L1366.74 684.013 L1367.3 684.013 L1367.86 684.013 L1368.42 684.013 L1368.98 684.013 L1369.54 684.013 L1370.1 684.013 L1370.66 684.013 L1371.21 684.013 L1371.77 684.013 L1372.33 684.013 L1372.89 684.013 L1373.45 684.013 L1374.01 684.013 L1374.57 684.013 L1375.13 684.013 L1375.69 684.013 L1376.25 684.013 L1376.81 684.013 L1377.37 684.013 L1377.93 684.013 L1378.49 684.013 L1379.04 684.013 L1379.6 684.013 L1380.16 684.013 L1380.72 684.013 L1381.28 684.013 L1381.84 684.013 L1382.4 684.013 L1382.96 684.013 L1383.52 684.013 L1384.08 684.013 L1384.64 684.013 L1385.2 684.013 L1385.76 684.013 L1386.31 684.013 L1386.87 684.013 L1387.43 684.013 L1387.99 684.013 L1388.55 684.013 L1389.11 684.013 L1389.67 684.013 L1390.23 684.013 L1390.79 684.013 L1391.35 684.013 L1391.91 684.013 L1392.47 684.013 L1393.03 684.013 L1393.58 684.013 L1394.14 684.013 L1394.7 684.013 L1395.26 684.013 L1395.82 684.013 L1396.38 684.013 L1396.94 684.013 L1397.5 684.013 L1398.06 684.013 L1398.62 684.013 L1399.18 684.013 L1399.74 684.013 L1400.3 684.013 L1400.86 684.013 L1401.41 684.013 L1401.97 684.013 L1402.53 684.013 L1403.09 684.013 L1403.65 684.013 L1404.21 684.013 L1404.77 684.013 L1405.33 684.013 L1405.89 684.013 L1406.45 684.013 L1407.01 684.013 L1407.57 684.013 L1408.13 684.013 L1408.68 684.013 L1409.24 684.013 L1409.8 684.013 L1410.36 684.013 L1410.92 684.013 L1411.48 684.013 L1412.04 684.013 L1412.6 684.013 L1413.16 684.013 L1413.72 684.013 L1414.28 684.013 L1414.84 684.013 L1415.4 684.013 L1415.95 684.013 L1416.51 684.013 L1417.07 684.013 L1417.63 684.013 L1418.19 684.013 L1418.75 684.013 L1419.31 684.013 L1419.87 684.013 L1420.43 684.013 L1420.99 684.013 L1421.55 684.013 L1422.11 684.013 L1422.67 684.013 L1423.23 684.013 L1423.78 684.013 L1424.34 684.013 L1424.9 684.013 L1425.46 684.013 L1426.02 684.013 L1426.58 684.013 L1427.14 684.013 L1427.7 684.013 L1428.26 684.013 L1428.82 684.013 L1429.38 684.013 L1429.94 684.013 L1430.5 684.013 L1431.05 684.013 L1431.61 684.013 L1432.17 684.013 L1432.73 684.013 L1433.29 684.013 L1433.85 684.013 L1434.41 684.013 L1434.97 684.013 L1435.53 684.013 L1436.09 684.013 L1436.65 684.013 L1437.21 684.013 L1437.77 684.013 L1438.33 684.013 L1438.88 684.013 L1439.44 684.013 L1440 684.013 L1440.56 684.013 L1441.12 684.013 L1441.68 684.013 L1442.24 684.013 L1442.8 684.013 L1443.36 684.013 L1443.92 684.013 L1444.48 684.013 L1445.04 684.013 L1445.6 684.013 L1446.15 684.013 L1446.71 684.013 L1447.27 684.013 L1447.83 684.013 L1448.39 684.013 L1448.95 684.013 L1449.51 684.013 L1450.07 684.013 L1450.63 684.013 L1451.19 684.013 L1451.75 684.013 L1452.31 684.013 L1452.87 684.013 L1453.42 684.013 L1453.98 684.013 L1454.54 684.013 L1455.1 684.013 L1455.66 684.013 L1456.22 684.013 L1456.78 684.013 L1457.34 684.013 L1457.9 684.013 L1458.46 684.013 L1459.02 684.013 L1459.58 684.013 L1460.14 684.013 L1460.7 684.013 L1461.25 684.013 L1461.81 684.013 L1462.37 684.013 L1462.93 684.013 L1463.49 684.013 L1464.05 684.013 L1464.61 684.013 L1465.17 684.013 L1465.73 684.013 L1466.29 684.013 L1466.85 684.013 L1467.41 684.013 L1467.97 684.013 L1468.52 684.013 L1469.08 684.013 L1469.64 684.013 L1470.2 684.013 L1470.76 684.013 L1471.32 684.013 L1471.88 684.013 L1472.44 684.013 L1473 684.013 L1473.56 684.013 L1474.12 684.013 L1474.68 684.013 L1475.24 684.013 L1475.79 684.013 L1476.35 684.013 L1476.91 684.013 L1477.47 684.013 L1478.03 684.013 L1478.59 684.013 L1479.15 684.013 L1479.71 684.013 L1480.27 684.013 L1480.83 684.013 L1481.39 684.013 L1481.95 684.013 L1482.51 684.013 L1483.07 684.013 L1483.62 684.013 L1484.18 684.013 L1484.74 684.013 L1485.3 684.013 L1485.86 684.013 L1486.42 684.013 L1486.98 684.013 L1487.54 684.013 L1488.1 684.013 L1488.66 684.013 L1489.22 684.013 L1489.78 684.013 L1490.34 684.013 L1490.89 684.013 L1491.45 684.013 L1492.01 684.013 L1492.57 684.013 L1493.13 684.013 L1493.69 684.013 L1494.25 684.013 L1494.81 684.013 L1495.37 684.013 L1495.93 684.013 L1496.49 684.013 L1497.05 684.013 L1497.61 684.013 L1498.16 684.013 L1498.72 684.013 L1499.28 684.013 L1499.84 684.013 L1500.4 684.013 L1500.96 684.013 L1501.52 684.013 L1502.08 684.013 L1502.64 684.013 L1503.2 684.013 L1503.76 684.013 L1504.32 684.013 L1504.88 684.013 L1505.44 684.013 L1505.99 684.013 L1506.55 684.013 L1507.11 684.013 L1507.67 684.013 L1508.23 684.013 L1508.79 684.013 L1509.35 684.013 L1509.91 684.013 L1510.47 684.013 L1511.03 684.013 L1511.59 684.013 L1512.15 684.013 L1512.71 684.013 L1513.26 684.013 L1513.82 684.013 L1514.38 684.013 L1514.94 684.013 L1515.5 684.013 L1516.06 684.013 L1516.62 684.013 L1517.18 684.013 L1517.74 684.013 L1518.3 684.013 L1518.86 684.013 L1519.42 684.013 L1519.98 684.013 L1520.53 684.013 L1521.09 684.013 L1521.65 684.013 L1522.21 684.013 L1522.77 684.013 L1523.33 684.013 L1523.89 684.013 L1524.45 684.013 L1525.01 684.013 L1525.57 684.013 L1526.13 684.013 L1526.69 684.013 L1527.25 684.013 L1527.81 684.013 L1528.36 684.013 L1528.92 684.013 L1529.48 684.013 L1530.04 684.013 L1530.6 684.013 L1531.16 684.013 L1531.72 684.013 L1532.28 684.013 L1532.84 684.013 L1533.4 684.013 L1533.96 684.013 L1534.52 684.013 L1535.08 684.013 L1535.63 684.013 L1536.19 684.013 L1536.75 684.013 L1537.31 684.013 L1537.87 684.013 L1538.43 684.013 L1538.99 684.013 L1539.55 684.013 L1540.11 684.013 L1540.67 684.013 L1541.23 684.013 L1541.79 684.013 L1542.35 684.013 L1542.9 684.013 L1543.46 684.013 L1544.02 684.013 L1544.58 684.013 L1545.14 684.013 L1545.7 684.013 L1546.26 684.013 L1546.82 684.013 L1547.38 684.013 L1547.94 684.013 L1548.5 684.013 L1549.06 684.013 L1549.62 684.013 L1550.18 684.013 L1550.73 684.013 L1551.29 684.013 L1551.85 684.013 L1552.41 684.013 L1552.97 684.013 L1553.53 684.013 L1554.09 684.013 L1554.65 684.013 L1555.21 684.013 L1555.77 684.013 L1556.33 684.013 L1556.89 684.013 L1557.45 684.013 L1558 684.013 L1558.56 684.013 L1559.12 684.013 L1559.68 684.013 L1560.24 684.013 L1560.8 684.013 L1561.36 684.013 L1561.92 684.013 L1562.48 684.013 L1563.04 684.013 L1563.6 684.013 L1564.16 684.013 L1564.72 684.013 L1565.28 684.013 L1565.83 684.013 L1566.39 684.013 L1566.95 684.013 L1567.51 684.013 L1568.07 684.013 L1568.63 684.013 L1569.19 684.013 L1569.75 684.013 L1570.31 684.013 L1570.87 684.013 L1571.43 684.013 L1571.99 684.013 L1572.55 684.013 L1573.1 684.013 L1573.66 684.013 L1574.22 684.013 L1574.78 684.013 L1575.34 684.013 L1575.9 684.013 L1576.46 684.013 L1577.02 684.013 L1577.58 684.013 L1578.14 684.013 L1578.7 684.013 L1579.26 684.013 L1579.82 684.013 L1580.37 684.013 L1580.93 684.013 L1581.49 684.013 L1582.05 684.013 L1582.61 684.013 L1583.17 684.013 L1583.73 684.013 L1584.29 684.013 L1584.85 684.013 L1585.41 684.013 L1585.97 684.013 L1586.53 684.013 L1587.09 684.013 L1587.65 684.013 L1588.2 684.013 L1588.76 684.013 L1589.32 684.013 L1589.88 684.013 L1590.44 684.013 L1591 684.013 L1591.56 684.013 L1592.12 684.013 L1592.68 684.013 L1593.24 684.013 L1593.8 684.013 L1594.36 684.013 L1594.92 684.013 L1595.47 684.013 L1596.03 684.013 L1596.59 684.013 L1597.15 684.013 L1597.71 684.013 L1598.27 684.013 L1598.83 684.013 L1599.39 684.013 L1599.95 684.013 L1600.51 684.013 L1601.07 684.013 L1601.63 684.013 L1602.19 684.013 L1602.74 684.013 L1603.3 684.013 L1603.86 684.013 L1604.42 684.013 L1604.98 684.013 L1605.54 684.013 L1606.1 684.013 L1606.66 684.013 L1607.22 684.013 L1607.78 684.013 L1608.34 684.013 L1608.9 684.013 L1609.46 684.013 L1610.02 684.013 L1610.57 684.013 L1611.13 684.013 L1611.69 684.013 L1612.25 684.013 L1612.81 684.013 L1613.37 684.013 L1613.93 684.013 L1614.49 684.013 L1615.05 684.013 L1615.61 684.013 L1616.17 684.013 L1616.73 684.013 L1617.29 684.013 L1617.84 684.013 L1618.4 684.013 L1618.96 684.013 L1619.52 684.013 L1620.08 684.013 L1620.64 684.013 L1621.2 684.013 L1621.76 684.013 L1622.32 684.013 L1622.88 684.013 L1623.44 684.013 L1624 684.013 L1624.56 684.013 L1625.11 684.013 L1625.67 684.013 L1626.23 684.013 L1626.79 684.013 L1627.35 684.013 L1627.91 684.013 L1628.47 684.013 L1629.03 684.013 L1629.59 684.013 L1630.15 684.013 L1630.71 684.013 L1631.27 684.013 L1631.83 684.013 L1632.39 684.013 L1632.94 684.013 L1633.5 684.013 L1634.06 684.013 L1634.62 684.013 L1635.18 684.013 L1635.74 684.013 L1636.3 684.013 L1636.86 684.013 L1637.42 684.013 L1637.98 684.013 L1638.54 684.013 L1639.1 684.013 L1639.66 684.013 L1640.21 684.013 L1640.77 684.013 L1641.33 684.013 L1641.89 684.013 L1642.45 684.013 L1643.01 684.013 L1643.57 684.013 L1644.13 684.013 L1644.69 684.013 L1645.25 684.013 L1645.81 684.013 L1646.37 684.013 L1646.93 684.013 L1647.48 684.013 L1648.04 684.013 L1648.6 684.013 L1649.16 684.013 L1649.72 684.013 L1650.28 684.013 L1650.84 684.013 L1651.4 684.013 L1651.96 684.013 L1652.52 684.013 L1653.08 684.013 L1653.64 684.013 L1654.2 684.013 L1654.76 684.013 L1655.31 684.013 L1655.87 684.013 L1656.43 684.013 L1656.99 684.013 L1657.55 684.013 L1658.11 684.013 L1658.67 684.013 L1659.23 684.013 L1659.79 684.013 L1660.35 684.013 L1660.91 684.013 L1661.47 684.013 L1662.03 684.013 L1662.58 684.013 L1663.14 684.013 L1663.7 684.013 L1664.26 684.013 L1664.82 684.013 L1665.38 684.013 L1665.94 684.013 L1666.5 684.013 L1667.06 684.013 L1667.62 684.013 L1668.18 684.013 L1668.74 684.013 L1669.3 684.013 L1669.85 684.013 L1670.41 684.013 L1670.97 684.013 L1671.53 684.013 L1672.09 684.013 L1672.65 684.013 L1673.21 684.013 L1673.77 684.013 L1674.33 684.013 L1674.89 684.013 L1675.45 684.013 L1676.01 684.013 L1676.57 684.013 L1677.13 684.013 L1677.68 684.013 L1678.24 684.013 L1678.8 684.013 L1679.36 684.013 L1679.92 684.013 L1680.48 684.013 L1681.04 684.013 L1681.6 684.013 L1682.16 684.013 L1682.72 684.013 L1683.28 684.013 L1683.84 684.013 L1684.4 684.013 L1684.95 684.013 L1685.51 684.013 L1686.07 684.013 L1686.63 684.013 L1687.19 684.013 L1687.75 684.013 L1688.31 684.013 L1688.87 684.013 L1689.43 684.013 L1689.99 684.013 L1690.55 684.013 L1691.11 684.013 L1691.67 684.013 L1692.23 684.013 L1692.78 684.013 L1693.34 684.013 L1693.9 684.013 L1694.46 684.013 L1695.02 684.013 L1695.58 684.013 L1696.14 684.013 L1696.7 684.013 L1697.26 684.013 L1697.82 684.013 L1698.38 684.013 L1698.94 684.013 L1699.5 684.013 L1700.05 684.013 L1700.61 684.013 L1701.17 684.013 L1701.73 684.013 L1702.29 684.013 L1702.85 684.013 L1703.41 684.013 L1703.97 684.013 L1704.53 684.013 L1705.09 684.013 L1705.65 684.013 L1706.21 684.013 L1706.77 684.013 L1707.32 684.013 L1707.88 684.013 L1708.44 684.013 L1709 684.013 L1709.56 684.013 L1710.12 684.013 L1710.68 684.013 L1711.24 684.013 L1711.8 684.013 L1712.36 684.013 L1712.92 684.013 L1713.48 684.013 L1714.04 684.013 L1714.6 684.013 L1715.15 684.013 L1715.71 684.013 L1716.27 684.013 L1716.83 684.013 L1717.39 684.013 L1717.95 684.013 L1718.51 684.013 L1719.07 684.013 L1719.63 684.013 L1720.19 684.013 L1720.75 684.013 L1721.31 684.013 L1721.87 684.013 L1722.42 684.013 L1722.98 684.013 L1723.54 684.013 L1724.1 684.013 L1724.66 684.013 L1725.22 684.013 L1725.78 684.013 L1726.34 684.013 L1726.9 684.013 L1727.46 684.013 L1728.02 684.013 L1728.58 684.013 L1729.14 684.013 L1729.69 684.013 L1730.25 684.013 L1730.81 684.013 L1731.37 684.013 L1731.93 684.013 L1732.49 684.013 L1733.05 684.013 L1733.61 684.013 L1734.17 684.013 L1734.73 684.013 L1735.29 684.013 L1735.85 684.013 L1736.41 684.013 L1736.97 684.013 L1737.52 684.013 L1738.08 684.013 L1738.64 684.013 L1739.2 684.013 L1739.76 684.013 L1740.32 684.013 L1740.88 684.013 L1741.44 684.013 L1742 684.013 L1742.56 684.013 L1743.12 684.013 L1743.68 684.013 L1744.24 684.013 L1744.79 684.013 L1745.35 684.013 L1745.91 684.013 L1746.47 684.013 L1747.03 684.013 L1747.59 684.013 L1748.15 684.013 L1748.71 684.013 L1749.27 684.013 L1749.83 684.013 L1750.39 684.013 L1750.95 684.013 L1751.51 684.013 L1752.06 684.013 L1752.62 684.013 L1753.18 684.013 L1753.74 684.013 L1754.3 684.013 L1754.86 684.013 L1755.42 684.013 L1755.98 684.013 L1756.54 684.013 L1757.1 684.013 L1757.66 684.013 L1758.22 684.013 L1758.78 684.013 L1759.34 684.013 L1759.89 684.013 L1760.45 684.013 L1761.01 684.013 L1761.57 684.013 L1762.13 684.013 L1762.69 684.013 L1763.25 684.013 L1763.81 684.013 L1764.37 684.013 L1764.93 684.013 L1765.49 684.013 L1766.05 684.013 L1766.61 684.013 L1767.16 684.013 L1767.72 684.013 L1768.28 684.013 L1768.84 684.013 L1769.4 684.013 L1769.96 684.013 L1770.52 684.013 L1771.08 684.013 L1771.64 684.013 L1772.2 684.013 L1772.76 684.013 L1773.32 684.013 L1773.88 684.013 L1774.43 684.013 L1774.99 684.013 L1775.55 684.013 L1776.11 684.013 L1776.67 684.013 L1777.23 684.013 L1777.79 684.013 L1778.35 684.013 L1778.91 684.013 L1779.47 684.013 L1780.03 684.013 L1780.59 684.013 L1781.15 684.013 L1781.71 684.013 L1782.26 684.013 L1782.82 684.013 L1783.38 684.013 L1783.94 684.013 L1784.5 684.013 L1785.06 684.013 L1785.62 684.013 L1786.18 684.013 L1786.74 684.013 L1787.3 684.013 L1787.86 684.013 L1788.42 684.013 L1788.98 684.013 L1789.53 684.013 L1790.09 684.013 L1790.65 684.013 L1791.21 684.013 L1791.77 684.013 L1792.33 684.013 L1792.89 684.013 L1793.45 684.013 L1794.01 684.013 L1794.57 684.013 L1795.13 684.013 L1795.69 684.013 L1796.25 684.013 L1796.8 684.013 L1797.36 684.013 L1797.92 684.013 L1798.48 684.013 L1799.04 684.013 L1799.6 684.013 L1800.16 684.013 L1800.72 684.013 L1801.28 684.013 L1801.84 684.013 L1802.4 684.013 L1802.96 684.013 L1803.52 684.013 L1804.08 684.013 L1804.63 684.013 L1805.19 684.013 L1805.75 684.013 L1806.31 684.013 L1806.87 684.013 L1807.43 684.013 L1807.99 684.013 L1808.55 684.013 L1809.11 684.013 L1809.67 684.013 L1810.23 684.013 L1810.79 684.013 L1811.35 684.013 L1811.9 684.013 L1812.46 684.013 L1813.02 684.013 L1813.58 684.013 L1814.14 684.013 L1814.7 684.013 L1815.26 684.013 L1815.82 684.013 L1816.38 684.013 L1816.94 684.013 L1817.5 684.013 L1818.06 684.013 L1818.62 684.013 L1819.18 684.013 L1819.73 684.013 L1820.29 684.013 L1820.85 684.013 L1821.41 684.013 L1821.97 684.013 L1822.53 684.013 L1823.09 684.013 L1823.65 684.013 L1824.21 684.013 L1824.77 684.013 L1825.33 684.013 L1825.89 684.013 L1826.45 684.013 L1827 684.013 L1827.56 684.013 L1828.12 684.013 L1828.68 684.013 L1829.24 684.013 L1829.8 684.013 L1830.36 684.013 L1830.92 684.013 L1831.48 684.013 L1832.04 684.013 L1832.6 684.013 L1833.16 684.013 L1833.72 684.013 L1834.27 684.013 L1834.83 684.013 L1835.39 684.013 L1835.95 684.013 L1836.51 684.013 L1837.07 684.013 L1837.63 684.013 L1838.19 684.013 L1838.19 682.632 L1837.63 682.632 L1837.07 682.632 L1836.51 682.632 L1835.95 682.632 L1835.39 682.632 L1834.83 682.632 L1834.27 682.632 L1833.72 682.632 L1833.16 682.632 L1832.6 682.632 L1832.04 682.632 L1831.48 682.632 L1830.92 682.632 L1830.36 682.632 L1829.8 682.632 L1829.24 682.632 L1828.68 682.632 L1828.12 682.632 L1827.56 682.632 L1827 682.632 L1826.45 682.632 L1825.89 682.632 L1825.33 682.632 L1824.77 682.632 L1824.21 682.632 L1823.65 682.632 L1823.09 682.632 L1822.53 682.632 L1821.97 682.632 L1821.41 682.632 L1820.85 682.632 L1820.29 682.632 L1819.73 682.632 L1819.18 682.632 L1818.62 682.632 L1818.06 682.632 L1817.5 682.632 L1816.94 682.632 L1816.38 682.632 L1815.82 682.632 L1815.26 682.632 L1814.7 682.632 L1814.14 682.632 L1813.58 682.632 L1813.02 682.632 L1812.46 682.632 L1811.9 682.632 L1811.35 682.632 L1810.79 682.632 L1810.23 682.632 L1809.67 682.632 L1809.11 682.632 L1808.55 682.632 L1807.99 682.632 L1807.43 682.632 L1806.87 682.632 L1806.31 682.632 L1805.75 682.632 L1805.19 682.632 L1804.63 682.632 L1804.08 682.632 L1803.52 682.632 L1802.96 682.632 L1802.4 682.632 L1801.84 682.632 L1801.28 682.632 L1800.72 682.632 L1800.16 682.632 L1799.6 682.632 L1799.04 682.632 L1798.48 682.632 L1797.92 682.632 L1797.36 682.632 L1796.8 682.632 L1796.25 682.632 L1795.69 682.632 L1795.13 682.632 L1794.57 682.632 L1794.01 682.632 L1793.45 682.632 L1792.89 682.632 L1792.33 682.632 L1791.77 682.632 L1791.21 682.632 L1790.65 682.632 L1790.09 682.632 L1789.53 682.632 L1788.98 682.632 L1788.42 682.632 L1787.86 682.632 L1787.3 682.632 L1786.74 682.632 L1786.18 682.632 L1785.62 682.632 L1785.06 682.632 L1784.5 682.632 L1783.94 682.632 L1783.38 682.632 L1782.82 682.632 L1782.26 682.632 L1781.71 682.632 L1781.15 682.632 L1780.59 682.632 L1780.03 682.632 L1779.47 682.632 L1778.91 682.632 L1778.35 682.632 L1777.79 682.632 L1777.23 682.632 L1776.67 682.632 L1776.11 682.632 L1775.55 682.632 L1774.99 682.632 L1774.43 682.632 L1773.88 682.632 L1773.32 682.632 L1772.76 682.632 L1772.2 682.632 L1771.64 682.632 L1771.08 682.632 L1770.52 682.632 L1769.96 682.632 L1769.4 682.632 L1768.84 682.632 L1768.28 682.632 L1767.72 682.632 L1767.16 682.632 L1766.61 682.632 L1766.05 682.632 L1765.49 682.632 L1764.93 682.632 L1764.37 682.632 L1763.81 682.632 L1763.25 682.632 L1762.69 682.632 L1762.13 682.632 L1761.57 682.632 L1761.01 682.632 L1760.45 682.632 L1759.89 682.632 L1759.34 682.632 L1758.78 682.632 L1758.22 682.632 L1757.66 682.632 L1757.1 682.632 L1756.54 682.632 L1755.98 682.632 L1755.42 682.632 L1754.86 682.632 L1754.3 682.632 L1753.74 682.632 L1753.18 682.632 L1752.62 682.632 L1752.06 682.632 L1751.51 682.632 L1750.95 682.632 L1750.39 682.632 L1749.83 682.632 L1749.27 682.632 L1748.71 682.632 L1748.15 682.632 L1747.59 682.632 L1747.03 682.632 L1746.47 682.632 L1745.91 682.632 L1745.35 682.632 L1744.79 682.632 L1744.24 682.632 L1743.68 682.632 L1743.12 682.632 L1742.56 682.632 L1742 682.632 L1741.44 682.632 L1740.88 682.632 L1740.32 682.632 L1739.76 682.632 L1739.2 682.632 L1738.64 682.632 L1738.08 682.632 L1737.52 682.632 L1736.97 682.632 L1736.41 682.632 L1735.85 682.632 L1735.29 682.632 L1734.73 682.632 L1734.17 682.632 L1733.61 682.632 L1733.05 682.632 L1732.49 682.632 L1731.93 682.632 L1731.37 682.632 L1730.81 682.632 L1730.25 682.632 L1729.69 682.632 L1729.14 682.632 L1728.58 682.632 L1728.02 682.632 L1727.46 682.632 L1726.9 682.632 L1726.34 682.632 L1725.78 682.632 L1725.22 682.632 L1724.66 682.632 L1724.1 682.632 L1723.54 682.632 L1722.98 682.632 L1722.42 682.632 L1721.87 682.632 L1721.31 682.632 L1720.75 682.632 L1720.19 682.632 L1719.63 682.632 L1719.07 682.632 L1718.51 682.632 L1717.95 682.632 L1717.39 682.632 L1716.83 682.632 L1716.27 682.632 L1715.71 682.632 L1715.15 682.632 L1714.6 682.632 L1714.04 682.632 L1713.48 682.632 L1712.92 682.632 L1712.36 682.632 L1711.8 682.632 L1711.24 682.632 L1710.68 682.632 L1710.12 682.632 L1709.56 682.632 L1709 682.632 L1708.44 682.632 L1707.88 682.632 L1707.32 682.632 L1706.77 682.632 L1706.21 682.632 L1705.65 682.632 L1705.09 682.632 L1704.53 682.632 L1703.97 682.632 L1703.41 682.632 L1702.85 682.632 L1702.29 682.632 L1701.73 682.632 L1701.17 682.632 L1700.61 682.632 L1700.05 682.632 L1699.5 682.632 L1698.94 682.632 L1698.38 682.632 L1697.82 682.632 L1697.26 682.632 L1696.7 682.632 L1696.14 682.632 L1695.58 682.632 L1695.02 682.632 L1694.46 682.632 L1693.9 682.632 L1693.34 682.632 L1692.78 682.632 L1692.23 682.632 L1691.67 682.632 L1691.11 682.632 L1690.55 682.632 L1689.99 682.632 L1689.43 682.632 L1688.87 682.632 L1688.31 682.632 L1687.75 682.632 L1687.19 682.632 L1686.63 682.632 L1686.07 682.632 L1685.51 682.632 L1684.95 682.632 L1684.4 682.632 L1683.84 682.632 L1683.28 682.632 L1682.72 682.632 L1682.16 682.632 L1681.6 682.632 L1681.04 682.632 L1680.48 682.632 L1679.92 682.632 L1679.36 682.632 L1678.8 682.632 L1678.24 682.632 L1677.68 682.632 L1677.13 682.632 L1676.57 682.632 L1676.01 682.632 L1675.45 682.632 L1674.89 682.632 L1674.33 682.632 L1673.77 682.632 L1673.21 682.632 L1672.65 682.632 L1672.09 682.632 L1671.53 682.632 L1670.97 682.632 L1670.41 682.632 L1669.85 682.632 L1669.3 682.632 L1668.74 682.632 L1668.18 682.632 L1667.62 682.632 L1667.06 682.632 L1666.5 682.632 L1665.94 682.632 L1665.38 682.632 L1664.82 682.632 L1664.26 682.632 L1663.7 682.632 L1663.14 682.632 L1662.58 682.632 L1662.03 682.632 L1661.47 682.632 L1660.91 682.632 L1660.35 682.632 L1659.79 682.632 L1659.23 682.632 L1658.67 682.632 L1658.11 682.632 L1657.55 682.632 L1656.99 682.632 L1656.43 682.632 L1655.87 682.632 L1655.31 682.632 L1654.76 682.632 L1654.2 682.632 L1653.64 682.632 L1653.08 682.632 L1652.52 682.632 L1651.96 682.632 L1651.4 682.632 L1650.84 682.632 L1650.28 682.632 L1649.72 682.632 L1649.16 682.632 L1648.6 682.632 L1648.04 682.632 L1647.48 682.632 L1646.93 682.632 L1646.37 682.632 L1645.81 682.632 L1645.25 682.632 L1644.69 682.632 L1644.13 682.632 L1643.57 682.632 L1643.01 682.632 L1642.45 682.632 L1641.89 682.632 L1641.33 682.632 L1640.77 682.632 L1640.21 682.632 L1639.66 682.632 L1639.1 682.632 L1638.54 682.632 L1637.98 682.632 L1637.42 682.632 L1636.86 682.632 L1636.3 682.632 L1635.74 682.632 L1635.18 682.632 L1634.62 682.632 L1634.06 682.632 L1633.5 682.632 L1632.94 682.632 L1632.39 682.632 L1631.83 682.632 L1631.27 682.632 L1630.71 682.632 L1630.15 682.632 L1629.59 682.632 L1629.03 682.632 L1628.47 682.632 L1627.91 682.632 L1627.35 682.632 L1626.79 682.632 L1626.23 682.632 L1625.67 682.632 L1625.11 682.632 L1624.56 682.632 L1624 682.632 L1623.44 682.632 L1622.88 682.632 L1622.32 682.632 L1621.76 682.632 L1621.2 682.632 L1620.64 682.632 L1620.08 682.632 L1619.52 682.632 L1618.96 682.632 L1618.4 682.632 L1617.84 682.632 L1617.29 682.632 L1616.73 682.632 L1616.17 682.632 L1615.61 682.632 L1615.05 682.632 L1614.49 682.632 L1613.93 682.632 L1613.37 682.632 L1612.81 682.632 L1612.25 682.632 L1611.69 682.632 L1611.13 682.632 L1610.57 682.632 L1610.02 682.632 L1609.46 682.632 L1608.9 682.632 L1608.34 682.632 L1607.78 682.632 L1607.22 682.632 L1606.66 682.632 L1606.1 682.632 L1605.54 682.632 L1604.98 682.632 L1604.42 682.632 L1603.86 682.632 L1603.3 682.632 L1602.74 682.632 L1602.19 682.632 L1601.63 682.632 L1601.07 682.632 L1600.51 682.632 L1599.95 682.632 L1599.39 682.632 L1598.83 682.632 L1598.27 682.632 L1597.71 682.632 L1597.15 682.632 L1596.59 682.632 L1596.03 682.632 L1595.47 682.632 L1594.92 682.632 L1594.36 682.632 L1593.8 682.632 L1593.24 682.632 L1592.68 682.632 L1592.12 682.632 L1591.56 682.632 L1591 682.632 L1590.44 682.632 L1589.88 682.632 L1589.32 682.632 L1588.76 682.632 L1588.2 682.632 L1587.65 682.632 L1587.09 682.632 L1586.53 682.632 L1585.97 682.632 L1585.41 682.632 L1584.85 682.632 L1584.29 682.632 L1583.73 682.632 L1583.17 682.632 L1582.61 682.632 L1582.05 682.632 L1581.49 682.632 L1580.93 682.632 L1580.37 682.632 L1579.82 682.632 L1579.26 682.632 L1578.7 682.632 L1578.14 682.632 L1577.58 682.632 L1577.02 682.632 L1576.46 682.632 L1575.9 682.632 L1575.34 682.632 L1574.78 682.632 L1574.22 682.632 L1573.66 682.632 L1573.1 682.632 L1572.55 682.632 L1571.99 682.632 L1571.43 682.632 L1570.87 682.632 L1570.31 682.632 L1569.75 682.632 L1569.19 682.632 L1568.63 682.632 L1568.07 682.632 L1567.51 682.632 L1566.95 682.632 L1566.39 682.632 L1565.83 682.632 L1565.28 682.632 L1564.72 682.632 L1564.16 682.632 L1563.6 682.632 L1563.04 682.632 L1562.48 682.632 L1561.92 682.632 L1561.36 682.632 L1560.8 682.632 L1560.24 682.632 L1559.68 682.632 L1559.12 682.632 L1558.56 682.632 L1558 682.632 L1557.45 682.632 L1556.89 682.632 L1556.33 682.632 L1555.77 682.632 L1555.21 682.632 L1554.65 682.632 L1554.09 682.632 L1553.53 682.632 L1552.97 682.632 L1552.41 682.632 L1551.85 682.632 L1551.29 682.632 L1550.73 682.632 L1550.18 682.632 L1549.62 682.632 L1549.06 682.632 L1548.5 682.632 L1547.94 682.632 L1547.38 682.632 L1546.82 682.632 L1546.26 682.632 L1545.7 682.632 L1545.14 682.632 L1544.58 682.632 L1544.02 682.632 L1543.46 682.632 L1542.9 682.632 L1542.35 682.632 L1541.79 682.632 L1541.23 682.632 L1540.67 682.632 L1540.11 682.632 L1539.55 682.632 L1538.99 682.632 L1538.43 682.632 L1537.87 682.632 L1537.31 682.632 L1536.75 682.632 L1536.19 682.632 L1535.63 682.632 L1535.08 682.632 L1534.52 682.632 L1533.96 682.632 L1533.4 682.632 L1532.84 682.632 L1532.28 682.632 L1531.72 682.632 L1531.16 682.632 L1530.6 682.632 L1530.04 682.632 L1529.48 682.632 L1528.92 682.632 L1528.36 682.632 L1527.81 682.632 L1527.25 682.632 L1526.69 682.632 L1526.13 682.632 L1525.57 682.632 L1525.01 682.632 L1524.45 682.632 L1523.89 682.632 L1523.33 682.632 L1522.77 682.632 L1522.21 682.632 L1521.65 682.632 L1521.09 682.632 L1520.53 682.632 L1519.98 682.632 L1519.42 682.632 L1518.86 682.632 L1518.3 682.632 L1517.74 682.632 L1517.18 682.632 L1516.62 682.632 L1516.06 682.632 L1515.5 682.632 L1514.94 682.632 L1514.38 682.632 L1513.82 682.632 L1513.26 682.632 L1512.71 682.632 L1512.15 682.632 L1511.59 682.632 L1511.03 682.632 L1510.47 682.632 L1509.91 682.632 L1509.35 682.632 L1508.79 682.632 L1508.23 682.632 L1507.67 682.632 L1507.11 682.632 L1506.55 682.632 L1505.99 682.632 L1505.44 682.632 L1504.88 682.632 L1504.32 682.632 L1503.76 682.632 L1503.2 682.632 L1502.64 682.632 L1502.08 682.632 L1501.52 682.632 L1500.96 682.632 L1500.4 682.632 L1499.84 682.632 L1499.28 682.632 L1498.72 682.632 L1498.16 682.632 L1497.61 682.632 L1497.05 682.632 L1496.49 682.632 L1495.93 682.632 L1495.37 682.632 L1494.81 682.632 L1494.25 682.632 L1493.69 682.632 L1493.13 682.632 L1492.57 682.632 L1492.01 682.632 L1491.45 682.632 L1490.89 682.632 L1490.34 682.632 L1489.78 682.632 L1489.22 682.632 L1488.66 682.632 L1488.1 682.632 L1487.54 682.632 L1486.98 682.632 L1486.42 682.632 L1485.86 682.632 L1485.3 682.632 L1484.74 682.632 L1484.18 682.632 L1483.62 682.632 L1483.07 682.632 L1482.51 682.632 L1481.95 682.632 L1481.39 682.632 L1480.83 682.632 L1480.27 682.632 L1479.71 682.632 L1479.15 682.632 L1478.59 682.632 L1478.03 682.632 L1477.47 682.632 L1476.91 682.632 L1476.35 682.632 L1475.79 682.632 L1475.24 682.632 L1474.68 682.632 L1474.12 682.632 L1473.56 682.632 L1473 682.632 L1472.44 682.632 L1471.88 682.632 L1471.32 682.632 L1470.76 682.632 L1470.2 682.632 L1469.64 682.632 L1469.08 682.632 L1468.52 682.632 L1467.97 682.632 L1467.41 682.632 L1466.85 682.632 L1466.29 682.632 L1465.73 682.632 L1465.17 682.632 L1464.61 682.632 L1464.05 682.632 L1463.49 682.632 L1462.93 682.632 L1462.37 682.632 L1461.81 682.632 L1461.25 682.632 L1460.7 682.632 L1460.14 682.632 L1459.58 682.632 L1459.02 682.632 L1458.46 682.632 L1457.9 682.632 L1457.34 682.632 L1456.78 682.632 L1456.22 682.632 L1455.66 682.632 L1455.1 682.632 L1454.54 682.632 L1453.98 682.632 L1453.42 682.632 L1452.87 682.632 L1452.31 682.632 L1451.75 682.632 L1451.19 682.632 L1450.63 682.632 L1450.07 682.632 L1449.51 682.632 L1448.95 682.632 L1448.39 682.632 L1447.83 682.632 L1447.27 682.632 L1446.71 682.632 L1446.15 682.632 L1445.6 682.632 L1445.04 682.632 L1444.48 682.632 L1443.92 682.632 L1443.36 682.632 L1442.8 682.632 L1442.24 682.632 L1441.68 682.632 L1441.12 682.632 L1440.56 682.632 L1440 682.632 L1439.44 682.632 L1438.88 682.632 L1438.33 682.632 L1437.77 682.632 L1437.21 682.632 L1436.65 682.632 L1436.09 682.632 L1435.53 682.632 L1434.97 682.632 L1434.41 682.632 L1433.85 682.632 L1433.29 682.632 L1432.73 682.632 L1432.17 682.632 L1431.61 682.632 L1431.05 682.632 L1430.5 682.632 L1429.94 682.632 L1429.38 682.632 L1428.82 682.632 L1428.26 682.632 L1427.7 682.632 L1427.14 682.632 L1426.58 682.632 L1426.02 682.632 L1425.46 682.632 L1424.9 682.632 L1424.34 682.632 L1423.78 682.632 L1423.23 682.632 L1422.67 682.632 L1422.11 682.632 L1421.55 682.632 L1420.99 682.632 L1420.43 682.632 L1419.87 682.632 L1419.31 682.632 L1418.75 682.632 L1418.19 682.632 L1417.63 682.632 L1417.07 682.632 L1416.51 682.632 L1415.95 682.632 L1415.4 682.632 L1414.84 682.632 L1414.28 682.632 L1413.72 682.632 L1413.16 682.632 L1412.6 682.632 L1412.04 682.632 L1411.48 682.632 L1410.92 682.632 L1410.36 682.632 L1409.8 682.632 L1409.24 682.632 L1408.68 682.632 L1408.13 682.632 L1407.57 682.632 L1407.01 682.632 L1406.45 682.632 L1405.89 682.632 L1405.33 682.632 L1404.77 682.632 L1404.21 682.632 L1403.65 682.632 L1403.09 682.632 L1402.53 682.632 L1401.97 682.632 L1401.41 682.632 L1400.86 682.632 L1400.3 682.632 L1399.74 682.632 L1399.18 682.632 L1398.62 682.632 L1398.06 682.632 L1397.5 682.632 L1396.94 682.632 L1396.38 682.632 L1395.82 682.632 L1395.26 682.632 L1394.7 682.632 L1394.14 682.632 L1393.58 682.632 L1393.03 682.632 L1392.47 682.632 L1391.91 682.632 L1391.35 682.632 L1390.79 682.632 L1390.23 682.632 L1389.67 682.632 L1389.11 682.632 L1388.55 682.632 L1387.99 682.632 L1387.43 682.632 L1386.87 682.632 L1386.31 682.632 L1385.76 682.632 L1385.2 682.632 L1384.64 682.632 L1384.08 682.632 L1383.52 682.632 L1382.96 682.632 L1382.4 682.632 L1381.84 682.632 L1381.28 682.632 L1380.72 682.632 L1380.16 682.632 L1379.6 682.632 L1379.04 682.632 L1378.49 682.632 L1377.93 682.632 L1377.37 682.632 L1376.81 682.632 L1376.25 682.632 L1375.69 682.632 L1375.13 682.632 L1374.57 682.632 L1374.01 682.632 L1373.45 682.632 L1372.89 682.632 L1372.33 682.632 L1371.77 682.632 L1371.21 682.632 L1370.66 682.632 L1370.1 682.632 L1369.54 682.632 L1368.98 682.632 L1368.42 682.632 L1367.86 682.632 L1367.3 682.632 L1366.74 682.632 L1366.18 682.632 L1365.62 682.632 L1365.06 682.632 L1364.5 682.632 L1363.94 682.632 L1363.39 682.632 L1362.83 682.632 L1362.27 682.632 L1361.71 682.632 L1361.15 682.632 L1360.59 682.632 L1360.03 682.632 L1359.47 682.632 L1358.91 682.632 L1358.35 682.632 L1357.79 682.632 L1357.23 682.632 L1356.67 682.632 L1356.12 682.632 L1355.56 682.632 L1355 682.632 L1354.44 682.632 L1353.88 682.632 L1353.32 682.632 L1352.76 682.632 L1352.2 682.632 L1351.64 682.632 L1351.08 682.632 L1350.52 682.632 L1349.96 682.632 L1349.4 682.632 L1348.84 682.632 L1348.29 682.632 L1347.73 682.632 L1347.17 682.632 L1346.61 682.632 L1346.05 682.632 L1345.49 682.632 L1344.93 682.632 L1344.37 682.632 L1343.81 682.632 L1343.25 682.632 L1342.69 682.632 L1342.13 682.632 L1341.57 682.632 L1341.02 682.632 L1340.46 682.632 L1339.9 682.632 L1339.34 682.632 L1338.78 682.632 L1338.22 682.632 L1337.66 682.632 L1337.1 682.632 L1336.54 682.632 L1335.98 682.632 L1335.42 682.632 L1334.86 682.632 L1334.3 682.632 L1333.75 682.632 L1333.19 682.632 L1332.63 682.632 L1332.07 682.632 L1331.51 682.632 L1330.95 682.632 L1330.39 682.632 L1329.83 682.632 L1329.27 682.632 L1328.71 682.632 L1328.15 682.632 L1327.59 682.632 L1327.03 682.632 L1326.47 682.632 L1325.92 682.632 L1325.36 682.632 L1324.8 682.632 L1324.24 682.632 L1323.68 682.632 L1323.12 682.632 L1322.56 682.632 L1322 682.632 L1321.44 682.632 L1320.88 682.632 L1320.32 682.632 L1319.76 682.632 L1319.2 682.632 L1318.65 682.632 L1318.09 682.632 L1317.53 682.632 L1316.97 682.632 L1316.41 682.632 L1315.85 682.632 L1315.29 682.632 L1314.73 682.632 L1314.17 682.632 L1313.61 682.632 L1313.05 682.632 L1312.49 682.632 L1311.93 682.632 L1311.38 682.632 L1310.82 682.632 L1310.26 682.632 L1309.7 682.632 L1309.14 682.632 L1308.58 682.632 L1308.02 682.632 L1307.46 682.632 L1306.9 682.632 L1306.34 682.632 L1305.78 682.632 L1305.22 682.632 L1304.66 682.632 L1304.1 682.632 L1303.55 682.632 L1302.99 682.632 L1302.43 682.632 L1301.87 682.632 L1301.31 682.632 L1300.75 682.632 L1300.19 682.632 L1299.63 682.632 L1299.07 682.632 L1298.51 682.632 L1297.95 682.632 L1297.39 682.632 L1296.83 682.632 L1296.28 682.632 L1295.72 682.632 L1295.16 682.632 L1294.6 682.632 L1294.04 682.632 L1293.48 682.632 L1292.92 682.632 L1292.36 682.632 L1291.8 682.632 L1291.24 682.632 L1290.68 682.632 L1290.12 682.632 L1289.56 682.632 L1289 682.632 L1288.45 682.632 L1287.89 682.632 L1287.33 682.632 L1286.77 682.632 L1286.21 682.632 L1285.65 682.632 L1285.09 682.632 L1284.53 682.632 L1283.97 682.632 L1283.41 682.632 L1282.85 682.632 L1282.29 682.632 L1281.73 682.632 L1281.18 682.632 L1280.62 682.632 L1280.06 682.632 L1279.5 682.632 L1278.94 682.632 L1278.38 682.632 L1277.82 682.632 L1277.26 682.632 L1276.7 682.632 L1276.14 682.632 L1275.58 682.632 L1275.02 682.632 L1274.46 682.632 L1273.91 682.632 L1273.35 682.632 L1272.79 682.632 L1272.23 682.632 L1271.67 682.632 L1271.11 682.632 L1270.55 682.632 L1269.99 682.632 L1269.43 682.632 L1268.87 682.632 L1268.31 682.632 L1267.75 682.632 L1267.19 682.632 L1266.63 682.632 L1266.08 682.632 L1265.52 682.632 L1264.96 682.632 L1264.4 682.632 L1263.84 682.632 L1263.28 682.632 L1262.72 682.632 L1262.16 682.632 L1261.6 682.632 L1261.04 682.632 L1260.48 682.632 L1259.92 682.632 L1259.36 682.632 L1258.81 682.632 L1258.25 682.632 L1257.69 682.632 L1257.13 682.632 L1256.57 682.632 L1256.01 682.632 L1255.45 682.632 L1254.89 682.632 L1254.33 682.632 L1253.77 682.632 L1253.21 682.632 L1252.65 682.632 L1252.09 682.632 L1251.54 682.632 L1250.98 682.632 L1250.42 682.632 L1249.86 682.632 L1249.3 682.632 L1248.74 682.632 L1248.18 682.632 L1247.62 682.632 L1247.06 682.632 L1246.5 682.632 L1245.94 682.632 L1245.38 682.632 L1244.82 682.632 L1244.26 682.632 L1243.71 682.632 L1243.15 682.632 L1242.59 682.632 L1242.03 682.632 L1241.47 682.632 L1240.91 682.632 L1240.35 682.632 L1239.79 682.632 L1239.23 682.632 L1238.67 682.632 L1238.11 682.632 L1237.55 682.632 L1236.99 682.632 L1236.44 682.632 L1235.88 682.632 L1235.32 682.632 L1234.76 682.632 L1234.2 682.632 L1233.64 682.632 L1233.08 682.632 L1232.52 682.632 L1231.96 682.632 L1231.4 682.632 L1230.84 682.632 L1230.28 682.632 L1229.72 682.632 L1229.17 682.632 L1228.61 682.632 L1228.05 682.632 L1227.49 682.632 L1226.93 682.632 L1226.37 682.632 L1225.81 682.632 L1225.25 682.632 L1224.69 682.632 L1224.13 682.632 L1223.57 682.632 L1223.01 682.632 L1222.45 682.632 L1221.89 682.632 L1221.34 682.632 L1220.78 682.632 L1220.22 682.632 L1219.66 682.632 L1219.1 682.632 L1218.54 682.632 L1217.98 682.632 L1217.42 682.632 L1216.86 682.632 L1216.3 682.632 L1215.74 682.632 L1215.18 682.632 L1214.62 682.632 L1214.07 682.632 L1213.51 682.632 L1212.95 682.632 L1212.39 682.632 L1211.83 682.632 L1211.27 682.632 L1210.71 682.632 L1210.15 682.632 L1209.59 682.632 L1209.03 682.632 L1208.47 682.632 L1207.91 682.632 L1207.35 682.632 L1206.8 682.632 L1206.24 682.632 L1205.68 682.632 L1205.12 682.632 L1204.56 682.632 L1204 682.632 L1203.44 682.632 L1202.88 682.632 L1202.32 682.632 L1201.76 682.632 L1201.2 682.632 L1200.64 682.632 L1200.08 682.632 L1199.52 682.632 L1198.97 682.632 L1198.41 682.632 L1197.85 682.632 L1197.29 682.632 L1196.73 682.632 L1196.17 682.632 L1195.61 682.632 L1195.05 682.632 L1194.49 682.632 L1193.93 682.632 L1193.37 682.632 L1192.81 682.632 L1192.25 682.632 L1191.7 682.632 L1191.14 682.632 L1190.58 682.632 L1190.02 682.632 L1189.46 682.632 L1188.9 682.632 L1188.34 682.632 L1187.78 682.632 L1187.22 682.632 L1186.66 682.632 L1186.1 682.632 L1185.54 682.632 L1184.98 682.632 L1184.43 682.632 L1183.87 682.632 L1183.31 682.632 L1182.75 682.632 L1182.19 682.632 L1181.63 682.632 L1181.07 682.632 L1180.51 682.632 L1179.95 682.632 L1179.39 682.632 L1178.83 682.632 L1178.27 682.632 L1177.71 682.632 L1177.15 682.632 L1176.6 682.632 L1176.04 682.632 L1175.48 682.632 L1174.92 682.632 L1174.36 682.632 L1173.8 682.632 L1173.24 682.632 L1172.68 682.632 L1172.12 682.632 L1171.56 682.632 L1171 682.632 L1170.44 682.632 L1169.88 682.632 L1169.33 682.632 L1168.77 682.632 L1168.21 682.632 L1167.65 682.632 L1167.09 682.632 L1166.53 682.632 L1165.97 682.632 L1165.41 682.632 L1164.85 682.632 L1164.29 682.632 L1163.73 682.632 L1163.17 682.632 L1162.61 682.632 L1162.05 682.632 L1161.5 682.632 L1160.94 682.632 L1160.38 682.632 L1159.82 682.632 L1159.26 682.632 L1158.7 682.632 L1158.14 682.632 L1157.58 682.632 L1157.02 682.632 L1156.46 682.632 L1155.9 682.632 L1155.34 682.632 L1154.78 682.632 L1154.23 682.632 L1153.67 682.632 L1153.11 682.632 L1152.55 682.632 L1151.99 682.632 L1151.43 682.632 L1150.87 682.632 L1150.31 682.632 L1149.75 682.632 L1149.19 682.632 L1148.63 682.632 L1148.07 682.632 L1147.51 682.632 L1146.96 682.632 L1146.4 682.632 L1145.84 682.632 L1145.28 682.632 L1144.72 682.632 L1144.16 682.632 L1143.6 682.632 L1143.04 682.632 L1142.48 682.632 L1141.92 682.632 L1141.36 682.632 L1140.8 682.632 L1140.24 682.632 L1139.68 682.632 L1139.13 682.632 L1138.57 682.632 L1138.01 682.632 L1137.45 682.632 L1136.89 682.632 L1136.33 682.632 L1135.77 682.632 L1135.21 682.632 L1134.65 682.632 L1134.09 682.632 L1133.53 682.632 L1132.97 682.632 L1132.41 682.632 L1131.86 682.632 L1131.3 682.632 L1130.74 682.632 L1130.18 682.632 L1129.62 682.632 L1129.06 682.632 L1128.5 682.632 L1127.94 682.632 L1127.38 682.632 L1126.82 682.632 L1126.26 682.632 L1125.7 682.632 L1125.14 682.632 L1124.59 682.632 L1124.03 682.632 L1123.47 682.632 L1122.91 682.632 L1122.35 682.632 L1121.79 682.632 L1121.23 682.632 L1120.67 682.632 L1120.11 682.632 L1119.55 682.632 L1118.99 682.632 L1118.43 682.632 L1117.87 682.632 L1117.31 682.632 L1116.76 682.632 L1116.2 682.632 L1115.64 682.632 L1115.08 682.632 L1114.52 682.632 L1113.96 682.632 L1113.4 682.632 L1112.84 682.632 L1112.28 682.632 L1111.72 682.632 L1111.16 682.632 L1110.6 682.632 L1110.04 682.632 L1109.49 682.632 L1108.93 682.632 L1108.37 682.632 L1107.81 682.632 L1107.25 682.632 L1106.69 682.632 L1106.13 682.632 L1105.57 682.632 L1105.01 682.632 L1104.45 682.632 L1103.89 682.632 L1103.33 682.632 L1102.77 682.632 L1102.22 682.632 L1101.66 682.632 L1101.1 682.632 L1100.54 682.632 L1099.98 682.632 L1099.42 682.632 L1098.86 682.632 L1098.3 682.632 L1097.74 682.632 L1097.18 682.632 L1096.62 682.632 L1096.06 682.632 L1095.5 682.632 L1094.94 682.632 L1094.39 682.632 L1093.83 682.632 L1093.27 682.632 L1092.71 682.632 L1092.15 682.632 L1091.59 682.632 L1091.03 682.632 L1090.47 682.632 L1089.91 682.632 L1089.35 682.632 L1088.79 682.632 L1088.23 682.632 L1087.67 682.632 L1087.12 682.632 L1086.56 682.632 L1086 682.632 L1085.44 682.632 L1084.88 682.632 L1084.32 682.632 L1083.76 682.632 L1083.2 682.632 L1082.64 682.632 L1082.08 682.632 L1081.52 682.632 L1080.96 682.632 L1080.4 682.632 L1079.85 682.632 L1079.29 682.632 L1078.73 682.632 L1078.17 682.632 L1077.61 682.632 L1077.05 682.632 L1076.49 682.632 L1075.93 682.632 L1075.37 682.632 L1074.81 682.632 L1074.25 682.632 L1073.69 682.632 L1073.13 682.632 L1072.57 682.632 L1072.02 682.632 L1071.46 682.632 L1070.9 682.632 L1070.34 682.632 L1069.78 682.632 L1069.22 682.632 L1068.66 682.632 L1068.1 682.632 L1067.54 682.632 L1066.98 682.632 L1066.42 682.632 L1065.86 682.632 L1065.3 682.632 L1064.75 682.632 L1064.19 682.632 L1063.63 682.632 L1063.07 682.632 L1062.51 682.632 L1061.95 682.632 L1061.39 682.632 L1060.83 682.632 L1060.27 682.632 L1059.71 682.632 L1059.15 682.632 L1058.59 682.632 L1058.03 682.632 L1057.48 682.632 L1056.92 682.632 L1056.36 682.632 L1055.8 682.632 L1055.24 682.632 L1054.68 682.632 L1054.12 682.632 L1053.56 682.632 L1053 682.632 L1052.44 682.632 L1051.88 682.632 L1051.32 682.632 L1050.76 682.632 L1050.2 682.632 L1049.65 682.632 L1049.09 682.632 L1048.53 682.632 L1047.97 682.632 L1047.41 682.632 L1046.85 682.632 L1046.29 682.632 L1045.73 682.632 L1045.17 682.632 L1044.61 682.632 L1044.05 682.632 L1043.49 682.632 L1042.93 682.632 L1042.38 682.632 L1041.82 682.632 L1041.26 682.632 L1040.7 682.632 L1040.14 682.632 L1039.58 682.632 L1039.02 682.632 L1038.46 682.632 L1037.9 682.632 L1037.34 682.632 L1036.78 682.632 L1036.22 682.632 L1035.66 682.632 L1035.1 682.632 L1034.55 682.632 L1033.99 682.632 L1033.43 682.632 L1032.87 682.632 L1032.31 682.632 L1031.75 682.632 L1031.19 682.632 L1030.63 682.632 L1030.07 682.632 L1029.51 682.632 L1028.95 682.632 L1028.39 682.632 L1027.83 682.632 L1027.28 682.632 L1026.72 682.632 L1026.16 682.632 L1025.6 682.632 L1025.04 682.632 L1024.48 682.632 L1023.92 682.632 L1023.36 682.632 L1022.8 682.632 L1022.24 682.632 L1021.68 682.632 L1021.12 682.632 L1020.56 682.632 L1020.01 682.632 L1019.45 682.632 L1018.89 682.632 L1018.33 682.632 L1017.77 682.632 L1017.21 682.632 L1016.65 682.632 L1016.09 682.632 L1015.53 682.632 L1014.97 682.632 L1014.41 682.632 L1013.85 682.632 L1013.29 682.632 L1012.73 682.632 L1012.18 682.632 L1011.62 682.632 L1011.06 682.632 L1010.5 682.632 L1009.94 682.632 L1009.38 682.632 L1008.82 682.632 L1008.26 682.632 L1007.7 682.632 L1007.14 682.632 L1006.58 682.632 L1006.02 682.632 L1005.46 682.632 L1004.91 682.632 L1004.35 682.632 L1003.79 682.632 L1003.23 682.632 L1002.67 682.632 L1002.11 682.632 L1001.55 682.632 L1000.99 682.632 L1000.43 682.632 L999.872 682.632 L999.313 682.632 L998.754 682.632 L998.194 682.632 L997.635 682.632 L997.076 682.632 L996.517 682.632 L995.957 682.632 L995.398 682.632 L994.839 682.632 L994.28 682.632 L993.72 682.632 L993.161 682.632 L992.602 682.632 L992.043 682.632 L991.483 682.632 L990.924 682.632 L990.365 682.632 L989.806 682.632 L989.246 682.632 L988.687 682.632 L988.128 682.632 L987.569 682.632 L987.009 682.632 L986.45 682.632 L985.891 682.632 L985.332 682.632 L984.772 682.632 L984.213 682.632 L983.654 682.632 L983.095 682.632 L982.535 682.632 L981.976 682.632 L981.417 682.632 L980.858 682.632 L980.298 682.632 L979.739 682.632 L979.18 682.632 L978.621 682.632 L978.061 682.632 L977.502 682.632 L976.943 682.632 L976.384 682.632 L975.824 682.632 L975.265 682.632 L974.706 682.632 L974.147 682.632 L973.587 682.632 L973.028 682.632 L972.469 682.632 L971.91 682.632 L971.35 682.632 L970.791 682.632 L970.232 682.632 L969.673 682.632 L969.113 682.632 L968.554 682.632 L967.995 682.632 L967.436 682.632 L966.876 682.632 L966.317 682.632 L965.758 682.632 L965.199 682.632 L964.639 682.632 L964.08 682.632 L963.521 682.632 L962.962 682.632 L962.402 682.632 L961.843 682.632 L961.284 682.632 L960.725 682.632 L960.165 682.632 L959.606 682.632 L959.047 682.632 L958.488 682.632 L957.928 682.632 L957.369 682.632 L956.81 682.632 L956.251 682.632 L955.691 682.632 L955.132 682.632 L954.573 682.632 L954.014 682.632 L953.454 682.632 L952.895 682.632 L952.336 682.632 L951.777 682.632 L951.217 682.632 L950.658 682.632 L950.099 682.632 L949.54 682.632 L948.98 682.632 L948.421 682.632 L947.862 682.632 L947.303 682.632 L946.743 682.632 L946.184 682.632 L945.625 682.632 L945.066 682.632 L944.506 682.632 L943.947 682.632 L943.388 682.632 L942.829 682.632 L942.269 682.632 L941.71 682.632 L941.151 682.632 L940.592 682.632 L940.032 682.632 L939.473 682.632 L938.914 682.632 L938.355 682.632 L937.795 682.632 L937.236 682.632 L936.677 682.632 L936.118 682.632 L935.558 682.632 L934.999 682.632 L934.44 682.632 L933.881 682.632 L933.321 682.632 L932.762 682.632 L932.203 682.632 L931.644 682.632 L931.084 682.632 L930.525 682.632 L929.966 682.632 L929.406 682.632 L928.847 682.632 L928.288 682.632 L927.729 682.632 L927.169 682.632 L926.61 682.632 L926.051 682.632 L925.492 682.632 L924.932 682.632 L924.373 682.632 L923.814 682.632 L923.255 682.632 L922.695 682.632 L922.136 682.632 L921.577 682.632 L921.018 682.632 L920.458 682.632 L919.899 682.632 L919.34 682.632 L918.781 682.632 L918.221 682.632 L917.662 682.632 L917.103 682.632 L916.544 682.632 L915.984 682.632 L915.425 682.632 L914.866 682.632 L914.307 682.632 L913.747 682.632 L913.188 682.632 L912.629 682.632 L912.07 682.632 L911.51 682.632 L910.951 682.632 L910.392 682.632 L909.833 682.632 L909.273 682.632 L908.714 682.632 L908.155 682.632 L907.596 682.632 L907.036 682.632 L906.477 682.632 L905.918 682.632 L905.359 682.632 L904.799 682.632 L904.24 682.632 L903.681 682.632 L903.122 682.632 L902.562 682.632 L902.003 682.632 L901.444 682.632 L900.885 682.632 L900.325 682.632 L899.766 682.632 L899.207 682.632 L898.648 682.632 L898.088 682.632 L897.529 682.632 L896.97 682.632 L896.411 682.632 L895.851 682.632 L895.292 682.632 L894.733 682.632 L894.174 682.632 L893.614 682.632 L893.055 682.632 L892.496 682.632 L891.937 682.632 L891.377 682.632 L890.818 682.632 L890.259 682.632 L889.7 682.632 L889.14 682.632 L888.581 682.632 L888.022 682.632 L887.463 682.632 L886.903 682.632 L886.344 682.632 L885.785 682.632 L885.226 682.632 L884.666 682.632 L884.107 682.632 L883.548 682.632 L882.989 682.632 L882.429 682.632 L881.87 682.632 L881.311 682.632 L880.752 682.632 L880.192 682.632 L879.633 682.632 L879.074 682.632 L878.515 682.632 L877.955 682.632 L877.396 682.632 L876.837 682.632 L876.278 682.632 L875.718 682.632 L875.159 682.632 L874.6 682.632 L874.041 682.632 L873.481 682.632 L872.922 682.632 L872.363 682.632 L871.804 682.632 L871.244 682.632 L870.685 682.632 L870.126 682.632 L869.567 682.632 L869.007 682.632 L868.448 682.632 L867.889 682.632 L867.33 682.632 L866.77 682.632 L866.211 682.632 L865.652 682.632 L865.093 682.632 L864.533 682.632 L863.974 682.632 L863.415 682.632 L862.856 682.632 L862.296 682.632 L861.737 682.632 L861.178 682.632 L860.619 682.632 L860.059 682.632 L859.5 682.632 L858.941 682.632 L858.382 682.632 L857.822 682.632 L857.263 682.632 L856.704 682.632 L856.145 682.632 L855.585 682.632 L855.026 682.632 L854.467 682.632 L853.908 682.632 L853.348 682.632 L852.789 682.632 L852.23 682.632 L851.671 682.632 L851.111 682.632 L850.552 682.632 L849.993 682.632 L849.434 682.632 L848.874 682.632 L848.315 682.632 L847.756 682.632 L847.197 682.632 L846.637 682.632 L846.078 682.632 L845.519 682.632 L844.96 682.632 L844.4 682.632 L843.841 682.632 L843.282 682.632 L842.723 682.632 L842.163 682.632 L841.604 682.632 L841.045 682.632 L840.486 682.632 L839.926 682.632 L839.367 682.632 L838.808 682.632 L838.249 682.632 L837.689 682.632 L837.13 682.632 L836.571 682.632 L836.012 682.632 L835.452 682.632 L834.893 682.632 L834.334 682.632 L833.775 682.632 L833.215 682.632 L832.656 682.632 L832.097 682.632 L831.538 682.632 L830.978 682.632 L830.419 682.632 L829.86 682.632 L829.301 682.632 L828.741 682.632 L828.182 682.632 L827.623 682.632 L827.064 682.632 L826.504 682.632 L825.945 682.632 L825.386 682.632 L824.827 682.632 L824.267 682.632 L823.708 682.632 L823.149 682.632 L822.59 682.632 L822.03 682.632 L821.471 682.632 L820.912 682.632 L820.353 682.632 L819.793 682.632 L819.234 682.632 L818.675 682.632 L818.116 682.632 L817.556 682.632 L816.997 682.632 L816.438 682.632 L815.879 682.632 L815.319 682.632 L814.76 682.632 L814.201 682.632 L813.642 682.632 L813.082 682.632 L812.523 682.632 L811.964 682.632 L811.405 682.632 L810.845 682.632 L810.286 682.632 L809.727 682.632 L809.168 682.632 L808.608 682.632 L808.049 682.632 L807.49 682.632 L806.931 682.632 L806.371 682.632 L805.812 682.632 L805.253 682.632 L804.693 682.632 L804.134 682.632 L803.575 682.632 L803.016 682.632 L802.456 682.632 L801.897 682.632 L801.338 682.632 L800.779 682.632 L800.219 682.632 L799.66 682.632 L799.101 682.632 L798.542 682.632 L797.982 682.632 L797.423 682.632 L796.864 682.632 L796.305 682.632 L795.745 682.632 L795.186 682.632 L794.627 682.632 L794.068 682.632 L793.508 682.632 L792.949 682.632 L792.39 682.632 L791.831 682.632 L791.271 682.632 L790.712 682.632 L790.153 682.632 L789.594 682.632 L789.034 682.632 L788.475 682.632 L787.916 682.632 L787.357 682.632 L786.797 682.632 L786.238 682.632 L785.679 682.632 L785.12 682.632 L784.56 682.632 L784.001 682.632 L783.442 682.632 L782.883 682.632 L782.323 682.632 L781.764 682.632 L781.205 682.632 L780.646 682.632 L780.086 682.632 L779.527 682.632 L778.968 682.632 L778.409 682.632 L777.849 682.632 L777.29 682.632 L776.731 682.632 L776.172 682.632 L775.612 682.632 L775.053 682.632 L774.494 682.632 L773.935 682.632 L773.375 682.632 L772.816 682.632 L772.257 682.632 L771.698 682.632 L771.138 682.632 L770.579 682.632 L770.02 682.632 L769.461 682.632 L768.901 682.632 L768.342 682.632 L767.783 682.632 L767.224 682.632 L766.664 682.632 L766.105 682.632 L765.546 682.632 L764.987 682.632 L764.427 682.632 L763.868 682.632 L763.309 682.632 L762.75 682.632 L762.19 682.632 L761.631 682.632 L761.072 682.632 L760.513 682.632 L759.953 682.632 L759.394 682.632 L758.835 682.632 L758.276 682.632 L757.716 682.632 L757.157 682.632 L756.598 682.632 L756.039 682.632 L755.479 682.632 L754.92 682.632 L754.361 682.632 L753.802 682.632 L753.242 682.632 L752.683 682.632 L752.124 682.632 L751.565 682.632 L751.005 682.632 L750.446 682.632 L749.887 682.632 L749.328 682.632 L748.768 682.632 L748.209 682.632 L747.65 682.632 L747.091 682.632 L746.531 682.632 L745.972 682.632 L745.413 682.632 L744.854 682.632 L744.294 682.632 L743.735 682.632 L743.176 682.632 L742.617 682.632 L742.057 682.632 L741.498 682.632 L740.939 682.632 L740.38 682.632 L739.82 682.632 L739.261 682.632 L738.702 682.632 L738.143 682.632 L737.583 682.632 L737.024 682.632 L736.465 682.632 L735.906 682.632 L735.346 682.632 L734.787 682.632 L734.228 682.632 L733.669 682.632 L733.109 682.632 L732.55 682.632 L731.991 682.632 L731.432 682.632 L730.872 682.632 L730.313 682.632 L729.754 682.632 L729.195 682.632 L728.635 682.632 L728.076 682.632 L727.517 682.632 L726.958 682.632 L726.398 682.632 L725.839 682.632 L725.28 682.632 L724.721 682.632 L724.161 682.632 L723.602 682.632 L723.043 682.632 L722.484 682.632 L721.924 682.632 L721.365 682.632 L720.806 682.632 L720.247 682.632  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip633)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.309 720.806,683.309 721.365,683.309 721.924,683.309 722.484,683.309 723.043,683.309 723.602,683.309 724.161,683.309 724.721,683.309 725.28,683.309 725.839,683.309 726.398,683.309 726.958,683.309 727.517,683.309 728.076,683.309 728.635,683.309 729.195,683.309 729.754,683.309 730.313,683.309 730.872,683.309 731.432,683.309 731.991,683.309 732.55,683.309 733.109,683.309 733.669,683.309 734.228,683.309 734.787,683.309 735.346,683.309 735.906,683.309 736.465,683.309 737.024,683.309 737.583,683.309 738.143,683.309 738.702,683.309 739.261,683.309 739.82,683.309 740.38,683.309 740.939,683.309 741.498,683.309 742.057,683.309 742.617,683.309 743.176,683.309 743.735,683.309 744.294,683.309 744.854,683.309 745.413,683.309 745.972,683.309 746.531,683.309 747.091,683.309 747.65,683.309 748.209,683.309 748.768,683.309 749.328,683.309 749.887,683.309 750.446,683.309 751.005,683.309 751.565,683.309 752.124,683.309 752.683,683.309 753.242,683.309 753.802,683.309 754.361,683.309 754.92,683.309 755.479,683.309 756.039,683.309 756.598,683.309 757.157,683.309 757.716,683.309 758.276,683.309 758.835,683.309 759.394,683.309 759.953,683.309 760.513,683.309 761.072,683.309 761.631,683.309 762.19,683.309 762.75,683.309 763.309,683.309 763.868,683.309 764.427,683.309 764.987,683.309 765.546,683.309 766.105,683.309 766.664,683.309 767.224,683.309 767.783,683.309 768.342,683.309 768.901,683.309 769.461,683.309 770.02,683.309 770.579,683.309 771.138,683.309 771.698,683.309 772.257,683.309 772.816,683.309 773.375,683.309 773.935,683.309 774.494,683.309 775.053,683.309 775.612,683.309 776.172,683.309 776.731,683.309 777.29,683.309 777.849,683.309 778.409,683.309 778.968,683.309 779.527,683.309 780.086,683.309 780.646,683.309 781.205,683.309 781.764,683.309 782.323,683.309 782.883,683.309 783.442,683.309 784.001,683.309 784.56,683.309 785.12,683.309 785.679,683.309 786.238,683.309 786.797,683.309 787.357,683.309 787.916,683.309 788.475,683.309 789.034,683.309 789.594,683.309 790.153,683.309 790.712,683.309 791.271,683.309 791.831,683.309 792.39,683.309 792.949,683.309 793.508,683.309 794.068,683.309 794.627,683.309 795.186,683.309 795.745,683.309 796.305,683.309 796.864,683.309 797.423,683.309 797.982,683.309 798.542,683.309 799.101,683.309 799.66,683.309 800.219,683.309 800.779,683.309 801.338,683.309 801.897,683.309 802.456,683.309 803.016,683.309 803.575,683.309 804.134,683.309 804.693,683.309 805.253,683.309 805.812,683.309 806.371,683.309 806.931,683.309 807.49,683.309 808.049,683.309 808.608,683.309 809.168,683.309 809.727,683.309 810.286,683.309 810.845,683.309 811.405,683.309 811.964,683.309 812.523,683.309 813.082,683.309 813.642,683.309 814.201,683.309 814.76,683.309 815.319,683.309 815.879,683.309 816.438,683.309 816.997,683.309 817.556,683.309 818.116,683.309 818.675,683.309 819.234,683.309 819.793,683.309 820.353,683.309 820.912,683.309 821.471,683.309 822.03,683.309 822.59,683.309 823.149,683.309 823.708,683.309 824.267,683.309 824.827,683.309 825.386,683.309 825.945,683.309 826.504,683.309 827.064,683.309 827.623,683.309 828.182,683.309 828.741,683.309 829.301,683.309 829.86,683.309 830.419,683.309 830.978,683.309 831.538,683.309 832.097,683.309 832.656,683.309 833.215,683.309 833.775,683.309 834.334,683.309 834.893,683.309 835.452,683.309 836.012,683.309 836.571,683.309 837.13,683.309 837.689,683.309 838.249,683.309 838.808,683.309 839.367,683.309 839.926,683.309 840.486,683.309 841.045,683.309 841.604,683.309 842.163,683.309 842.723,683.309 843.282,683.309 843.841,683.309 844.4,683.309 844.96,683.309 845.519,683.309 846.078,683.309 846.637,683.309 847.197,683.309 847.756,683.309 848.315,683.309 848.874,683.309 849.434,683.309 849.993,683.309 850.552,683.309 851.111,683.309 851.671,683.309 852.23,683.309 852.789,683.309 853.348,683.309 853.908,683.309 854.467,683.309 855.026,683.309 855.585,683.309 856.145,683.309 856.704,683.309 857.263,683.309 857.822,683.309 858.382,683.309 858.941,683.309 859.5,683.309 860.059,683.309 860.619,683.309 861.178,683.309 861.737,683.309 862.296,683.309 862.856,683.309 863.415,683.309 863.974,683.309 864.533,683.309 865.093,683.309 865.652,683.309 866.211,683.309 866.77,683.309 867.33,683.309 867.889,683.309 868.448,683.309 869.007,683.309 869.567,683.309 870.126,683.309 870.685,683.309 871.244,683.309 871.804,683.309 872.363,683.309 872.922,683.309 873.481,683.309 874.041,683.309 874.6,683.309 875.159,683.309 875.718,683.309 876.278,683.309 876.837,683.309 877.396,683.309 877.955,683.309 878.515,683.309 879.074,683.309 879.633,683.309 880.192,683.309 880.752,683.309 881.311,683.309 881.87,683.309 882.429,683.309 882.989,683.309 883.548,683.309 884.107,683.309 884.666,683.309 885.226,683.309 885.785,683.309 886.344,683.309 886.903,683.309 887.463,683.309 888.022,683.309 888.581,683.309 889.14,683.309 889.7,683.309 890.259,683.309 890.818,683.309 891.377,683.309 891.937,683.309 892.496,683.309 893.055,683.309 893.614,683.309 894.174,683.309 894.733,683.309 895.292,683.309 895.851,683.309 896.411,683.309 896.97,683.309 897.529,683.309 898.088,683.309 898.648,683.309 899.207,683.309 899.766,683.309 900.325,683.309 900.885,683.309 901.444,683.309 902.003,683.309 902.562,683.309 903.122,683.309 903.681,683.309 904.24,683.309 904.799,683.309 905.359,683.309 905.918,683.309 906.477,683.309 907.036,683.309 907.596,683.309 908.155,683.309 908.714,683.309 909.273,683.309 909.833,683.309 910.392,683.309 910.951,683.309 911.51,683.309 912.07,683.309 912.629,683.309 913.188,683.309 913.747,683.309 914.307,683.309 914.866,683.309 915.425,683.309 915.984,683.309 916.544,683.309 917.103,683.309 917.662,683.309 918.221,683.309 918.781,683.309 919.34,683.309 919.899,683.309 920.458,683.309 921.018,683.309 921.577,683.309 922.136,683.309 922.695,683.309 923.255,683.309 923.814,683.309 924.373,683.309 924.932,683.309 925.492,683.309 926.051,683.309 926.61,683.309 927.169,683.309 927.729,683.309 928.288,683.309 928.847,683.309 929.406,683.309 929.966,683.309 930.525,683.309 931.084,683.309 931.644,683.309 932.203,683.309 932.762,683.309 933.321,683.309 933.881,683.309 934.44,683.309 934.999,683.309 935.558,683.309 936.118,683.309 936.677,683.309 937.236,683.309 937.795,683.309 938.355,683.309 938.914,683.309 939.473,683.309 940.032,683.309 940.592,683.309 941.151,683.309 941.71,683.309 942.269,683.309 942.829,683.309 943.388,683.309 943.947,683.309 944.506,683.309 945.066,683.309 945.625,683.309 946.184,683.309 946.743,683.309 947.303,683.309 947.862,683.309 948.421,683.309 948.98,683.309 949.54,683.309 950.099,683.309 950.658,683.309 951.217,683.309 951.777,683.309 952.336,683.309 952.895,683.309 953.454,683.309 954.014,683.309 954.573,683.309 955.132,683.309 955.691,683.309 956.251,683.309 956.81,683.309 957.369,683.309 957.928,683.309 958.488,683.309 959.047,683.309 959.606,683.309 960.165,683.309 960.725,683.309 961.284,683.309 961.843,683.309 962.402,683.309 962.962,683.309 963.521,683.309 964.08,683.309 964.639,683.309 965.199,683.309 965.758,683.309 966.317,683.309 966.876,683.309 967.436,683.309 967.995,683.309 968.554,683.309 969.113,683.309 969.673,683.309 970.232,683.309 970.791,683.309 971.35,683.309 971.91,683.309 972.469,683.309 973.028,683.309 973.587,683.309 974.147,683.309 974.706,683.309 975.265,683.309 975.824,683.309 976.384,683.309 976.943,683.309 977.502,683.309 978.061,683.309 978.621,683.309 979.18,683.309 979.739,683.309 980.298,683.309 980.858,683.309 981.417,683.309 981.976,683.309 982.535,683.309 983.095,683.309 983.654,683.309 984.213,683.309 984.772,683.309 985.332,683.309 985.891,683.309 986.45,683.309 987.009,683.309 987.569,683.309 988.128,683.309 988.687,683.309 989.246,683.309 989.806,683.309 990.365,683.309 990.924,683.309 991.483,683.309 992.043,683.309 992.602,683.309 993.161,683.309 993.72,683.309 994.28,683.309 994.839,683.309 995.398,683.309 995.957,683.309 996.517,683.309 997.076,683.309 997.635,683.309 998.194,683.309 998.754,683.309 999.313,683.309 999.872,683.309 1000.43,683.309 1000.99,683.309 1001.55,683.309 1002.11,683.309 1002.67,683.309 1003.23,683.309 1003.79,683.309 1004.35,683.309 1004.91,683.309 1005.46,683.309 1006.02,683.309 1006.58,683.309 1007.14,683.309 1007.7,683.309 1008.26,683.309 1008.82,683.309 1009.38,683.309 1009.94,683.309 1010.5,683.309 1011.06,683.309 1011.62,683.309 1012.18,683.309 1012.73,683.309 1013.29,683.309 1013.85,683.309 1014.41,683.309 1014.97,683.309 1015.53,683.309 1016.09,683.309 1016.65,683.309 1017.21,683.309 1017.77,683.309 1018.33,683.309 1018.89,683.309 1019.45,683.309 1020.01,683.309 1020.56,683.309 1021.12,683.309 1021.68,683.309 1022.24,683.309 1022.8,683.309 1023.36,683.309 1023.92,683.309 1024.48,683.309 1025.04,683.309 1025.6,683.309 1026.16,683.309 1026.72,683.309 1027.28,683.309 1027.83,683.309 1028.39,683.309 1028.95,683.309 1029.51,683.309 1030.07,683.309 1030.63,683.309 1031.19,683.309 1031.75,683.309 1032.31,683.309 1032.87,683.309 1033.43,683.309 1033.99,683.309 1034.55,683.309 1035.1,683.309 1035.66,683.309 1036.22,683.309 1036.78,683.309 1037.34,683.309 1037.9,683.309 1038.46,683.309 1039.02,683.309 1039.58,683.309 1040.14,683.309 1040.7,683.309 1041.26,683.309 1041.82,683.309 1042.38,683.309 1042.93,683.309 1043.49,683.309 1044.05,683.309 1044.61,683.309 1045.17,683.309 1045.73,683.309 1046.29,683.309 1046.85,683.309 1047.41,683.309 1047.97,683.309 1048.53,683.309 1049.09,683.309 1049.65,683.309 1050.2,683.309 1050.76,683.309 1051.32,683.309 1051.88,683.309 1052.44,683.309 1053,683.309 1053.56,683.309 1054.12,683.309 1054.68,683.309 1055.24,683.309 1055.8,683.309 1056.36,683.309 1056.92,683.309 1057.48,683.309 1058.03,683.309 1058.59,683.309 1059.15,683.309 1059.71,683.309 1060.27,683.309 1060.83,683.309 1061.39,683.309 1061.95,683.309 1062.51,683.309 1063.07,683.309 1063.63,683.309 1064.19,683.309 1064.75,683.309 1065.3,683.309 1065.86,683.309 1066.42,683.309 1066.98,683.309 1067.54,683.309 1068.1,683.309 1068.66,683.309 1069.22,683.309 1069.78,683.309 1070.34,683.309 1070.9,683.309 1071.46,683.309 1072.02,683.309 1072.57,683.309 1073.13,683.309 1073.69,683.309 1074.25,683.309 1074.81,683.309 1075.37,683.309 1075.93,683.309 1076.49,683.309 1077.05,683.309 1077.61,683.309 1078.17,683.309 1078.73,683.309 1079.29,683.309 1079.85,683.309 1080.4,683.309 1080.96,683.309 1081.52,683.309 1082.08,683.309 1082.64,683.309 1083.2,683.309 1083.76,683.309 1084.32,683.309 1084.88,683.309 1085.44,683.309 1086,683.309 1086.56,683.309 1087.12,683.309 1087.67,683.309 1088.23,683.309 1088.79,683.309 1089.35,683.309 1089.91,683.309 1090.47,683.309 1091.03,683.309 1091.59,683.309 1092.15,683.309 1092.71,683.309 1093.27,683.309 1093.83,683.309 1094.39,683.309 1094.94,683.309 1095.5,683.309 1096.06,683.309 1096.62,683.309 1097.18,683.309 1097.74,683.309 1098.3,683.309 1098.86,683.309 1099.42,683.309 1099.98,683.309 1100.54,683.309 1101.1,683.309 1101.66,683.309 1102.22,683.309 1102.77,683.309 1103.33,683.309 1103.89,683.309 1104.45,683.309 1105.01,683.309 1105.57,683.309 1106.13,683.309 1106.69,683.309 1107.25,683.309 1107.81,683.309 1108.37,683.309 1108.93,683.309 1109.49,683.309 1110.04,683.309 1110.6,683.309 1111.16,683.309 1111.72,683.309 1112.28,683.309 1112.84,683.309 1113.4,683.309 1113.96,683.309 1114.52,683.309 1115.08,683.309 1115.64,683.309 1116.2,683.309 1116.76,683.309 1117.31,683.309 1117.87,683.309 1118.43,683.309 1118.99,683.309 1119.55,683.309 1120.11,683.309 1120.67,683.309 1121.23,683.309 1121.79,683.309 1122.35,683.309 1122.91,683.309 1123.47,683.309 1124.03,683.309 1124.59,683.309 1125.14,683.309 1125.7,683.309 1126.26,683.309 1126.82,683.309 1127.38,683.309 1127.94,683.309 1128.5,683.309 1129.06,683.309 1129.62,683.309 1130.18,683.309 1130.74,683.309 1131.3,683.309 1131.86,683.309 1132.41,683.309 1132.97,683.309 1133.53,683.309 1134.09,683.309 1134.65,683.309 1135.21,683.309 1135.77,683.309 1136.33,683.309 1136.89,683.309 1137.45,683.309 1138.01,683.309 1138.57,683.309 1139.13,683.309 1139.68,683.309 1140.24,683.309 1140.8,683.309 1141.36,683.309 1141.92,683.309 1142.48,683.309 1143.04,683.309 1143.6,683.309 1144.16,683.309 1144.72,683.309 1145.28,683.309 1145.84,683.309 1146.4,683.309 1146.96,683.309 1147.51,683.309 1148.07,683.309 1148.63,683.309 1149.19,683.309 1149.75,683.309 1150.31,683.309 1150.87,683.309 1151.43,683.309 1151.99,683.309 1152.55,683.309 1153.11,683.309 1153.67,683.309 1154.23,683.309 1154.78,683.309 1155.34,683.309 1155.9,683.309 1156.46,683.309 1157.02,683.309 1157.58,683.309 1158.14,683.309 1158.7,683.309 1159.26,683.309 1159.82,683.309 1160.38,683.309 1160.94,683.309 1161.5,683.309 1162.05,683.309 1162.61,683.309 1163.17,683.309 1163.73,683.309 1164.29,683.309 1164.85,683.309 1165.41,683.309 1165.97,683.309 1166.53,683.309 1167.09,683.309 1167.65,683.309 1168.21,683.309 1168.77,683.309 1169.33,683.309 1169.88,683.309 1170.44,683.309 1171,683.309 1171.56,683.309 1172.12,683.309 1172.68,683.309 1173.24,683.309 1173.8,683.309 1174.36,683.309 1174.92,683.309 1175.48,683.309 1176.04,683.309 1176.6,683.309 1177.15,683.309 1177.71,683.309 1178.27,683.309 1178.83,683.309 1179.39,683.309 1179.95,683.309 1180.51,683.309 1181.07,683.309 1181.63,683.309 1182.19,683.309 1182.75,683.309 1183.31,683.309 1183.87,683.309 1184.43,683.309 1184.98,683.309 1185.54,683.309 1186.1,683.309 1186.66,683.309 1187.22,683.309 1187.78,683.309 1188.34,683.309 1188.9,683.309 1189.46,683.309 1190.02,683.309 1190.58,683.309 1191.14,683.309 1191.7,683.309 1192.25,683.309 1192.81,683.309 1193.37,683.309 1193.93,683.309 1194.49,683.309 1195.05,683.309 1195.61,683.309 1196.17,683.309 1196.73,683.309 1197.29,683.309 1197.85,683.309 1198.41,683.309 1198.97,683.309 1199.52,683.309 1200.08,683.309 1200.64,683.309 1201.2,683.309 1201.76,683.309 1202.32,683.309 1202.88,683.309 1203.44,683.309 1204,683.309 1204.56,683.309 1205.12,683.309 1205.68,683.309 1206.24,683.309 1206.8,683.309 1207.35,683.309 1207.91,683.309 1208.47,683.309 1209.03,683.309 1209.59,683.309 1210.15,683.309 1210.71,683.309 1211.27,683.309 1211.83,683.309 1212.39,683.309 1212.95,683.309 1213.51,683.309 1214.07,683.309 1214.62,683.309 1215.18,683.309 1215.74,683.309 1216.3,683.309 1216.86,683.309 1217.42,683.309 1217.98,683.309 1218.54,683.309 1219.1,683.309 1219.66,683.309 1220.22,683.309 1220.78,683.309 1221.34,683.309 1221.89,683.309 1222.45,683.309 1223.01,683.309 1223.57,683.309 1224.13,683.309 1224.69,683.309 1225.25,683.309 1225.81,683.309 1226.37,683.309 1226.93,683.309 1227.49,683.309 1228.05,683.309 1228.61,683.309 1229.17,683.309 1229.72,683.309 1230.28,683.309 1230.84,683.309 1231.4,683.309 1231.96,683.309 1232.52,683.309 1233.08,683.309 1233.64,683.309 1234.2,683.309 1234.76,683.309 1235.32,683.309 1235.88,683.309 1236.44,683.309 1236.99,683.309 1237.55,683.309 1238.11,683.309 1238.67,683.309 1239.23,683.309 1239.79,683.309 1240.35,683.309 1240.91,683.309 1241.47,683.309 1242.03,683.309 1242.59,683.309 1243.15,683.309 1243.71,683.309 1244.26,683.309 1244.82,683.309 1245.38,683.309 1245.94,683.309 1246.5,683.309 1247.06,683.309 1247.62,683.309 1248.18,683.309 1248.74,683.309 1249.3,683.309 1249.86,683.309 1250.42,683.309 1250.98,683.309 1251.54,683.309 1252.09,683.309 1252.65,683.309 1253.21,683.309 1253.77,683.309 1254.33,683.309 1254.89,683.309 1255.45,683.309 1256.01,683.309 1256.57,683.309 1257.13,683.309 1257.69,683.309 1258.25,683.309 1258.81,683.309 1259.36,683.309 1259.92,683.309 1260.48,683.309 1261.04,683.309 1261.6,683.309 1262.16,683.309 1262.72,683.309 1263.28,683.309 1263.84,683.309 1264.4,683.309 1264.96,683.309 1265.52,683.309 1266.08,683.309 1266.63,683.309 1267.19,683.309 1267.75,683.309 1268.31,683.309 1268.87,683.309 1269.43,683.309 1269.99,683.309 1270.55,683.309 1271.11,683.309 1271.67,683.309 1272.23,683.309 1272.79,683.309 1273.35,683.309 1273.91,683.309 1274.46,683.309 1275.02,683.309 1275.58,683.309 1276.14,683.309 1276.7,683.309 1277.26,683.309 1277.82,683.309 1278.38,683.309 1278.94,683.309 1279.5,683.309 1280.06,683.309 1280.62,683.309 1281.18,683.309 1281.73,683.309 1282.29,683.309 1282.85,683.309 1283.41,683.309 1283.97,683.309 1284.53,683.309 1285.09,683.309 1285.65,683.309 1286.21,683.309 1286.77,683.309 1287.33,683.309 1287.89,683.309 1288.45,683.309 1289,683.309 1289.56,683.309 1290.12,683.309 1290.68,683.309 1291.24,683.309 1291.8,683.309 1292.36,683.309 1292.92,683.309 1293.48,683.309 1294.04,683.309 1294.6,683.309 1295.16,683.309 1295.72,683.309 1296.28,683.309 1296.83,683.309 1297.39,683.309 1297.95,683.309 1298.51,683.309 1299.07,683.309 1299.63,683.309 1300.19,683.309 1300.75,683.309 1301.31,683.309 1301.87,683.309 1302.43,683.309 1302.99,683.309 1303.55,683.309 1304.1,683.309 1304.66,683.309 1305.22,683.309 1305.78,683.309 1306.34,683.309 1306.9,683.309 1307.46,683.309 1308.02,683.309 1308.58,683.309 1309.14,683.309 1309.7,683.309 1310.26,683.309 1310.82,683.309 1311.38,683.309 1311.93,683.309 1312.49,683.309 1313.05,683.309 1313.61,683.309 1314.17,683.309 1314.73,683.309 1315.29,683.309 1315.85,683.309 1316.41,683.309 1316.97,683.309 1317.53,683.309 1318.09,683.309 1318.65,683.309 1319.2,683.309 1319.76,683.309 1320.32,683.309 1320.88,683.309 1321.44,683.309 1322,683.309 1322.56,683.309 1323.12,683.309 1323.68,683.309 1324.24,683.309 1324.8,683.309 1325.36,683.309 1325.92,683.309 1326.47,683.309 1327.03,683.309 1327.59,683.309 1328.15,683.309 1328.71,683.309 1329.27,683.309 1329.83,683.309 1330.39,683.309 1330.95,683.309 1331.51,683.309 1332.07,683.309 1332.63,683.309 1333.19,683.309 1333.75,683.309 1334.3,683.309 1334.86,683.309 1335.42,683.309 1335.98,683.309 1336.54,683.309 1337.1,683.309 1337.66,683.309 1338.22,683.309 1338.78,683.309 1339.34,683.309 1339.9,683.309 1340.46,683.309 1341.02,683.309 1341.57,683.309 1342.13,683.309 1342.69,683.309 1343.25,683.309 1343.81,683.309 1344.37,683.309 1344.93,683.309 1345.49,683.309 1346.05,683.309 1346.61,683.309 1347.17,683.309 1347.73,683.309 1348.29,683.309 1348.84,683.309 1349.4,683.309 1349.96,683.309 1350.52,683.309 1351.08,683.309 1351.64,683.309 1352.2,683.309 1352.76,683.309 1353.32,683.309 1353.88,683.309 1354.44,683.309 1355,683.309 1355.56,683.309 1356.12,683.309 1356.67,683.309 1357.23,683.309 1357.79,683.309 1358.35,683.309 1358.91,683.309 1359.47,683.309 1360.03,683.309 1360.59,683.309 1361.15,683.309 1361.71,683.309 1362.27,683.309 1362.83,683.309 1363.39,683.309 1363.94,683.309 1364.5,683.309 1365.06,683.309 1365.62,683.309 1366.18,683.309 1366.74,683.309 1367.3,683.309 1367.86,683.309 1368.42,683.309 1368.98,683.309 1369.54,683.309 1370.1,683.309 1370.66,683.309 1371.21,683.309 1371.77,683.309 1372.33,683.309 1372.89,683.309 1373.45,683.309 1374.01,683.309 1374.57,683.309 1375.13,683.309 1375.69,683.309 1376.25,683.309 1376.81,683.309 1377.37,683.309 1377.93,683.309 1378.49,683.309 1379.04,683.309 1379.6,683.309 1380.16,683.309 1380.72,683.309 1381.28,683.309 1381.84,683.309 1382.4,683.309 1382.96,683.309 1383.52,683.309 1384.08,683.309 1384.64,683.309 1385.2,683.309 1385.76,683.309 1386.31,683.309 1386.87,683.309 1387.43,683.309 1387.99,683.309 1388.55,683.309 1389.11,683.309 1389.67,683.309 1390.23,683.309 1390.79,683.309 1391.35,683.309 1391.91,683.309 1392.47,683.309 1393.03,683.309 1393.58,683.309 1394.14,683.309 1394.7,683.309 1395.26,683.309 1395.82,683.309 1396.38,683.309 1396.94,683.309 1397.5,683.309 1398.06,683.309 1398.62,683.309 1399.18,683.309 1399.74,683.309 1400.3,683.309 1400.86,683.309 1401.41,683.309 1401.97,683.309 1402.53,683.309 1403.09,683.309 1403.65,683.309 1404.21,683.309 1404.77,683.309 1405.33,683.309 1405.89,683.309 1406.45,683.309 1407.01,683.309 1407.57,683.309 1408.13,683.309 1408.68,683.309 1409.24,683.309 1409.8,683.309 1410.36,683.309 1410.92,683.309 1411.48,683.309 1412.04,683.309 1412.6,683.309 1413.16,683.309 1413.72,683.309 1414.28,683.309 1414.84,683.309 1415.4,683.309 1415.95,683.309 1416.51,683.309 1417.07,683.309 1417.63,683.309 1418.19,683.309 1418.75,683.309 1419.31,683.309 1419.87,683.309 1420.43,683.309 1420.99,683.309 1421.55,683.309 1422.11,683.309 1422.67,683.309 1423.23,683.309 1423.78,683.309 1424.34,683.309 1424.9,683.309 1425.46,683.309 1426.02,683.309 1426.58,683.309 1427.14,683.309 1427.7,683.309 1428.26,683.309 1428.82,683.309 1429.38,683.309 1429.94,683.309 1430.5,683.309 1431.05,683.309 1431.61,683.309 1432.17,683.309 1432.73,683.309 1433.29,683.309 1433.85,683.309 1434.41,683.309 1434.97,683.309 1435.53,683.309 1436.09,683.309 1436.65,683.309 1437.21,683.309 1437.77,683.309 1438.33,683.309 1438.88,683.309 1439.44,683.309 1440,683.309 1440.56,683.309 1441.12,683.309 1441.68,683.309 1442.24,683.309 1442.8,683.309 1443.36,683.309 1443.92,683.309 1444.48,683.309 1445.04,683.309 1445.6,683.309 1446.15,683.309 1446.71,683.309 1447.27,683.309 1447.83,683.309 1448.39,683.309 1448.95,683.309 1449.51,683.309 1450.07,683.309 1450.63,683.309 1451.19,683.309 1451.75,683.309 1452.31,683.309 1452.87,683.309 1453.42,683.309 1453.98,683.309 1454.54,683.309 1455.1,683.309 1455.66,683.309 1456.22,683.309 1456.78,683.309 1457.34,683.309 1457.9,683.309 1458.46,683.309 1459.02,683.309 1459.58,683.309 1460.14,683.309 1460.7,683.309 1461.25,683.309 1461.81,683.309 1462.37,683.309 1462.93,683.309 1463.49,683.309 1464.05,683.309 1464.61,683.309 1465.17,683.309 1465.73,683.309 1466.29,683.309 1466.85,683.309 1467.41,683.309 1467.97,683.309 1468.52,683.309 1469.08,683.309 1469.64,683.309 1470.2,683.309 1470.76,683.309 1471.32,683.309 1471.88,683.309 1472.44,683.309 1473,683.309 1473.56,683.309 1474.12,683.309 1474.68,683.309 1475.24,683.309 1475.79,683.309 1476.35,683.309 1476.91,683.309 1477.47,683.309 1478.03,683.309 1478.59,683.309 1479.15,683.309 1479.71,683.309 1480.27,683.309 1480.83,683.309 1481.39,683.309 1481.95,683.309 1482.51,683.309 1483.07,683.309 1483.62,683.309 1484.18,683.309 1484.74,683.309 1485.3,683.309 1485.86,683.309 1486.42,683.309 1486.98,683.309 1487.54,683.309 1488.1,683.309 1488.66,683.309 1489.22,683.309 1489.78,683.309 1490.34,683.309 1490.89,683.309 1491.45,683.309 1492.01,683.309 1492.57,683.309 1493.13,683.309 1493.69,683.309 1494.25,683.309 1494.81,683.309 1495.37,683.309 1495.93,683.309 1496.49,683.309 1497.05,683.309 1497.61,683.309 1498.16,683.309 1498.72,683.309 1499.28,683.309 1499.84,683.309 1500.4,683.309 1500.96,683.309 1501.52,683.309 1502.08,683.309 1502.64,683.309 1503.2,683.309 1503.76,683.309 1504.32,683.309 1504.88,683.309 1505.44,683.309 1505.99,683.309 1506.55,683.309 1507.11,683.309 1507.67,683.309 1508.23,683.309 1508.79,683.309 1509.35,683.309 1509.91,683.309 1510.47,683.309 1511.03,683.309 1511.59,683.309 1512.15,683.309 1512.71,683.309 1513.26,683.309 1513.82,683.309 1514.38,683.309 1514.94,683.309 1515.5,683.309 1516.06,683.309 1516.62,683.309 1517.18,683.309 1517.74,683.309 1518.3,683.309 1518.86,683.309 1519.42,683.309 1519.98,683.309 1520.53,683.309 1521.09,683.309 1521.65,683.309 1522.21,683.309 1522.77,683.309 1523.33,683.309 1523.89,683.309 1524.45,683.309 1525.01,683.309 1525.57,683.309 1526.13,683.309 1526.69,683.309 1527.25,683.309 1527.81,683.309 1528.36,683.309 1528.92,683.309 1529.48,683.309 1530.04,683.309 1530.6,683.309 1531.16,683.309 1531.72,683.309 1532.28,683.309 1532.84,683.309 1533.4,683.309 1533.96,683.309 1534.52,683.309 1535.08,683.309 1535.63,683.309 1536.19,683.309 1536.75,683.309 1537.31,683.309 1537.87,683.309 1538.43,683.309 1538.99,683.309 1539.55,683.309 1540.11,683.309 1540.67,683.309 1541.23,683.309 1541.79,683.309 1542.35,683.309 1542.9,683.309 1543.46,683.309 1544.02,683.309 1544.58,683.309 1545.14,683.309 1545.7,683.309 1546.26,683.309 1546.82,683.309 1547.38,683.309 1547.94,683.309 1548.5,683.309 1549.06,683.309 1549.62,683.309 1550.18,683.309 1550.73,683.309 1551.29,683.309 1551.85,683.309 1552.41,683.309 1552.97,683.309 1553.53,683.309 1554.09,683.309 1554.65,683.309 1555.21,683.309 1555.77,683.309 1556.33,683.309 1556.89,683.309 1557.45,683.309 1558,683.309 1558.56,683.309 1559.12,683.309 1559.68,683.309 1560.24,683.309 1560.8,683.309 1561.36,683.309 1561.92,683.309 1562.48,683.309 1563.04,683.309 1563.6,683.309 1564.16,683.309 1564.72,683.309 1565.28,683.309 1565.83,683.309 1566.39,683.309 1566.95,683.309 1567.51,683.309 1568.07,683.309 1568.63,683.309 1569.19,683.309 1569.75,683.309 1570.31,683.309 1570.87,683.309 1571.43,683.309 1571.99,683.309 1572.55,683.309 1573.1,683.309 1573.66,683.309 1574.22,683.309 1574.78,683.309 1575.34,683.309 1575.9,683.309 1576.46,683.309 1577.02,683.309 1577.58,683.309 1578.14,683.309 1578.7,683.309 1579.26,683.309 1579.82,683.309 1580.37,683.309 1580.93,683.309 1581.49,683.309 1582.05,683.309 1582.61,683.309 1583.17,683.309 1583.73,683.309 1584.29,683.309 1584.85,683.309 1585.41,683.309 1585.97,683.309 1586.53,683.309 1587.09,683.309 1587.65,683.309 1588.2,683.309 1588.76,683.309 1589.32,683.309 1589.88,683.309 1590.44,683.309 1591,683.309 1591.56,683.309 1592.12,683.309 1592.68,683.309 1593.24,683.309 1593.8,683.309 1594.36,683.309 1594.92,683.309 1595.47,683.309 1596.03,683.309 1596.59,683.309 1597.15,683.309 1597.71,683.309 1598.27,683.309 1598.83,683.309 1599.39,683.309 1599.95,683.309 1600.51,683.309 1601.07,683.309 1601.63,683.309 1602.19,683.309 1602.74,683.309 1603.3,683.309 1603.86,683.309 1604.42,683.309 1604.98,683.309 1605.54,683.309 1606.1,683.309 1606.66,683.309 1607.22,683.309 1607.78,683.309 1608.34,683.309 1608.9,683.309 1609.46,683.309 1610.02,683.309 1610.57,683.309 1611.13,683.309 1611.69,683.309 1612.25,683.309 1612.81,683.309 1613.37,683.309 1613.93,683.309 1614.49,683.309 1615.05,683.309 1615.61,683.309 1616.17,683.309 1616.73,683.309 1617.29,683.309 1617.84,683.309 1618.4,683.309 1618.96,683.309 1619.52,683.309 1620.08,683.309 1620.64,683.309 1621.2,683.309 1621.76,683.309 1622.32,683.309 1622.88,683.309 1623.44,683.309 1624,683.309 1624.56,683.309 1625.11,683.309 1625.67,683.309 1626.23,683.309 1626.79,683.309 1627.35,683.309 1627.91,683.309 1628.47,683.309 1629.03,683.309 1629.59,683.309 1630.15,683.309 1630.71,683.309 1631.27,683.309 1631.83,683.309 1632.39,683.309 1632.94,683.309 1633.5,683.309 1634.06,683.309 1634.62,683.309 1635.18,683.309 1635.74,683.309 1636.3,683.309 1636.86,683.309 1637.42,683.309 1637.98,683.309 1638.54,683.309 1639.1,683.309 1639.66,683.309 1640.21,683.309 1640.77,683.309 1641.33,683.309 1641.89,683.309 1642.45,683.309 1643.01,683.309 1643.57,683.309 1644.13,683.309 1644.69,683.309 1645.25,683.309 1645.81,683.309 1646.37,683.309 1646.93,683.309 1647.48,683.309 1648.04,683.309 1648.6,683.309 1649.16,683.309 1649.72,683.309 1650.28,683.309 1650.84,683.309 1651.4,683.309 1651.96,683.309 1652.52,683.309 1653.08,683.309 1653.64,683.309 1654.2,683.309 1654.76,683.309 1655.31,683.309 1655.87,683.309 1656.43,683.309 1656.99,683.309 1657.55,683.309 1658.11,683.309 1658.67,683.309 1659.23,683.309 1659.79,683.309 1660.35,683.309 1660.91,683.309 1661.47,683.309 1662.03,683.309 1662.58,683.309 1663.14,683.309 1663.7,683.309 1664.26,683.309 1664.82,683.309 1665.38,683.309 1665.94,683.309 1666.5,683.309 1667.06,683.309 1667.62,683.309 1668.18,683.309 1668.74,683.309 1669.3,683.309 1669.85,683.309 1670.41,683.309 1670.97,683.309 1671.53,683.309 1672.09,683.309 1672.65,683.309 1673.21,683.309 1673.77,683.309 1674.33,683.309 1674.89,683.309 1675.45,683.309 1676.01,683.309 1676.57,683.309 1677.13,683.309 1677.68,683.309 1678.24,683.309 1678.8,683.309 1679.36,683.309 1679.92,683.309 1680.48,683.309 1681.04,683.309 1681.6,683.309 1682.16,683.309 1682.72,683.309 1683.28,683.309 1683.84,683.309 1684.4,683.309 1684.95,683.309 1685.51,683.309 1686.07,683.309 1686.63,683.309 1687.19,683.309 1687.75,683.309 1688.31,683.309 1688.87,683.309 1689.43,683.309 1689.99,683.309 1690.55,683.309 1691.11,683.309 1691.67,683.309 1692.23,683.309 1692.78,683.309 1693.34,683.309 1693.9,683.309 1694.46,683.309 1695.02,683.309 1695.58,683.309 1696.14,683.309 1696.7,683.309 1697.26,683.309 1697.82,683.309 1698.38,683.309 1698.94,683.309 1699.5,683.309 1700.05,683.309 1700.61,683.309 1701.17,683.309 1701.73,683.309 1702.29,683.309 1702.85,683.309 1703.41,683.309 1703.97,683.309 1704.53,683.309 1705.09,683.309 1705.65,683.309 1706.21,683.309 1706.77,683.309 1707.32,683.309 1707.88,683.309 1708.44,683.309 1709,683.309 1709.56,683.309 1710.12,683.309 1710.68,683.309 1711.24,683.309 1711.8,683.309 1712.36,683.309 1712.92,683.309 1713.48,683.309 1714.04,683.309 1714.6,683.309 1715.15,683.309 1715.71,683.309 1716.27,683.309 1716.83,683.309 1717.39,683.309 1717.95,683.309 1718.51,683.309 1719.07,683.309 1719.63,683.309 1720.19,683.309 1720.75,683.309 1721.31,683.309 1721.87,683.309 1722.42,683.309 1722.98,683.309 1723.54,683.309 1724.1,683.309 1724.66,683.309 1725.22,683.309 1725.78,683.309 1726.34,683.309 1726.9,683.309 1727.46,683.309 1728.02,683.309 1728.58,683.309 1729.14,683.309 1729.69,683.309 1730.25,683.309 1730.81,683.309 1731.37,683.309 1731.93,683.309 1732.49,683.309 1733.05,683.309 1733.61,683.309 1734.17,683.309 1734.73,683.309 1735.29,683.309 1735.85,683.309 1736.41,683.309 1736.97,683.309 1737.52,683.309 1738.08,683.309 1738.64,683.309 1739.2,683.309 1739.76,683.309 1740.32,683.309 1740.88,683.309 1741.44,683.309 1742,683.309 1742.56,683.309 1743.12,683.309 1743.68,683.309 1744.24,683.309 1744.79,683.309 1745.35,683.309 1745.91,683.309 1746.47,683.309 1747.03,683.309 1747.59,683.309 1748.15,683.309 1748.71,683.309 1749.27,683.309 1749.83,683.309 1750.39,683.309 1750.95,683.309 1751.51,683.309 1752.06,683.309 1752.62,683.309 1753.18,683.309 1753.74,683.309 1754.3,683.309 1754.86,683.309 1755.42,683.309 1755.98,683.309 1756.54,683.309 1757.1,683.309 1757.66,683.309 1758.22,683.309 1758.78,683.309 1759.34,683.309 1759.89,683.309 1760.45,683.309 1761.01,683.309 1761.57,683.309 1762.13,683.309 1762.69,683.309 1763.25,683.309 1763.81,683.309 1764.37,683.309 1764.93,683.309 1765.49,683.309 1766.05,683.309 1766.61,683.309 1767.16,683.309 1767.72,683.309 1768.28,683.309 1768.84,683.309 1769.4,683.309 1769.96,683.309 1770.52,683.309 1771.08,683.309 1771.64,683.309 1772.2,683.309 1772.76,683.309 1773.32,683.309 1773.88,683.309 1774.43,683.309 1774.99,683.309 1775.55,683.309 1776.11,683.309 1776.67,683.309 1777.23,683.309 1777.79,683.309 1778.35,683.309 1778.91,683.309 1779.47,683.309 1780.03,683.309 1780.59,683.309 1781.15,683.309 1781.71,683.309 1782.26,683.309 1782.82,683.309 1783.38,683.309 1783.94,683.309 1784.5,683.309 1785.06,683.309 1785.62,683.309 1786.18,683.309 1786.74,683.309 1787.3,683.309 1787.86,683.309 1788.42,683.309 1788.98,683.309 1789.53,683.309 1790.09,683.309 1790.65,683.309 1791.21,683.309 1791.77,683.309 1792.33,683.309 1792.89,683.309 1793.45,683.309 1794.01,683.309 1794.57,683.309 1795.13,683.309 1795.69,683.309 1796.25,683.309 1796.8,683.309 1797.36,683.309 1797.92,683.309 1798.48,683.309 1799.04,683.309 1799.6,683.309 1800.16,683.309 1800.72,683.309 1801.28,683.309 1801.84,683.309 1802.4,683.309 1802.96,683.309 1803.52,683.309 1804.08,683.309 1804.63,683.309 1805.19,683.309 1805.75,683.309 1806.31,683.309 1806.87,683.309 1807.43,683.309 1807.99,683.309 1808.55,683.309 1809.11,683.309 1809.67,683.309 1810.23,683.309 1810.79,683.309 1811.35,683.309 1811.9,683.309 1812.46,683.309 1813.02,683.309 1813.58,683.309 1814.14,683.309 1814.7,683.309 1815.26,683.309 1815.82,683.309 1816.38,683.309 1816.94,683.309 1817.5,683.309 1818.06,683.309 1818.62,683.309 1819.18,683.309 1819.73,683.309 1820.29,683.309 1820.85,683.309 1821.41,683.309 1821.97,683.309 1822.53,683.309 1823.09,683.309 1823.65,683.309 1824.21,683.309 1824.77,683.309 1825.33,683.309 1825.89,683.309 1826.45,683.309 1827,683.309 1827.56,683.309 1828.12,683.309 1828.68,683.309 1829.24,683.309 1829.8,683.309 1830.36,683.309 1830.92,683.309 1831.48,683.309 1832.04,683.309 1832.6,683.309 1833.16,683.309 1833.72,683.309 1834.27,683.309 1834.83,683.309 1835.39,683.309 1835.95,683.309 1836.51,683.309 1837.07,683.309 1837.63,683.309 1838.19,683.309 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0313293105481005 ± 0.025728759666380868\nProjected Energy: -4.013695320369172 ± (0.0035473389380342724, 0.0034074030005664113)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.510143</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3526e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.6381e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0239e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.283e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.776e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.518e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133655\n -0.7590191922770924\n  0.13584182219622676\n  0.15789998694607732\n  0.8767114411781343\n  1.5305929970973269\n  1.5835732611867455\n  3.0728703303258644\n  3.125672653951841\n  4.862107221562174\n  6.260694850380596\n  6.402671211183109\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
